00000000                            ; /=========================================================================\
00000000                            ; ยบ	This file is generated by The Interactive Disassembler (IDA)	    ยบ
00000000                            ; ยบ	Copyright (c) 2003 by DataRescue sa/nv,	<ida@datarescue.com>	    ยบ
00000000                            ; \=========================================================================/
00000000                            ;
00000000                            ; Disassembly created by Hivebrain
00000000                            ; thanks to drx and Stealth
00000000                            
00000000                            ; Processor:	    68000
00000000                            ; Target Assembler: 680x0 Assembler in MRI compatible mode
00000000                            ; This file should be compiled with "as	-M"
00000000                            
00000000                            ; ===========================================================================
00000000                            align macro
00000000                            	cnop 0,\1
00000000                            	endm
00000000                            		include	"sound/smps2asm_inc.asm"
00000000                            ; =============================================================================================
00000000                            ; Created by Flamewing, based on S1SMPS2ASM version 1.1 by Marc Gordon (AKA Cinossu)
00000000                            ; =============================================================================================
00000000 =00000005                  SonicDriverVer:	equ	5
00000000                            align0	macro	val
00000000                            	cnop	0,\val
00000000                                endm
00000000                            	
00000000                            smpsWeirdD1LRR macro
00000000                            		dc.b	$F9
00000000                            	endm
00000000                            nMaxPSG		EQU nA5
00000000                            ; ---------------------------------------------------------------------------------------------
00000000                            ; Standard Octave Pitch Equates
00000000 =FFFFFF88                  smpsPitch10lo:	EQU -120	; $88
00000000 =FFFFFF94                  smpsPitch09lo:	EQU -108	; $94
00000000 =FFFFFFA0                  smpsPitch08lo:	EQU  -96	; $A0
00000000 =FFFFFFAC                  smpsPitch07lo:	EQU  -84	; $AC
00000000 =FFFFFFB8                  smpsPitch06lo:	EQU  -72	; $B8
00000000 =FFFFFFC4                  smpsPitch05lo:	EQU  -60	; $C4
00000000 =FFFFFFD0                  smpsPitch04lo:	EQU  -48	; $D0
00000000 =FFFFFFDC                  smpsPitch03lo:	EQU  -36	; $DC
00000000 =FFFFFFE8                  smpsPitch02lo:	EQU  -24	; $E8
00000000 =FFFFFFF4                  smpsPitch01lo:	EQU  -12	; $F4
00000000 =00000000                  smpsPitch00:	EQU    0	; $00
00000000 =0000000C                  smpsPitch01hi:	EQU  +12	; $0C
00000000 =00000018                  smpsPitch02hi:	EQU  +24	; $18
00000000 =00000024                  smpsPitch03hi:	EQU  +36	; $24
00000000 =00000030                  smpsPitch04hi:	EQU  +48	; $30
00000000 =0000003C                  smpsPitch05hi:	EQU  +60	; $3C
00000000 =00000048                  smpsPitch06hi:	EQU  +72	; $48
00000000 =00000054                  smpsPitch07hi:	EQU  +84	; $54
00000000 =00000060                  smpsPitch08hi:	EQU  +96	; $60
00000000 =0000006C                  smpsPitch09hi:	EQU +108	; $6C
00000000 =00000078                  smpsPitch10hi:	EQU +120	; $78
00000000                            
00000000                            ; ---------------------------------------------------------------------------------------------
00000000                            ; Note Equates
00000000 =00000080                  nRst:	EQU $80		; $80
00000000 =00000081                  nC0:	EQU $81		; $81
00000000 =00000082                  nCs0:	EQU nC0+1	; $82
00000000 =00000083                  nD0:	EQU nCs0+1	; $83
00000000 =00000084                  nEb0:	EQU nD0+1	; $84
00000000 =00000085                  nE0:	EQU nEb0+1	; $85
00000000 =00000086                  nF0:	EQU nE0+1	; $86
00000000 =00000087                  nFs0:	EQU nF0+1	; $87
00000000 =00000088                  nG0:	EQU nFs0+1	; $88
00000000 =00000089                  nAb0:	EQU nG0+1	; $89
00000000 =0000008A                  nA0:	EQU nAb0+1	; $8A
00000000 =0000008B                  nBb0:	EQU nA0+1	; $8B
00000000 =0000008C                  nB0:	EQU nBb0+1	; $8C
00000000 =0000008D                  nC1:	EQU nB0+1	; $8D
00000000 =0000008E                  nCs1:	EQU nC1+1	; $8E
00000000 =0000008F                  nD1:	EQU nCs1+1	; $8F
00000000 =00000090                  nEb1:	EQU nD1+1	; $90
00000000 =00000091                  nE1:	EQU nEb1+1	; $91
00000000 =00000092                  nF1:	EQU nE1+1	; $92
00000000 =00000093                  nFs1:	EQU nF1+1	; $93
00000000 =00000094                  nG1:	EQU nFs1+1	; $94
00000000 =00000095                  nAb1:	EQU nG1+1	; $95
00000000 =00000096                  nA1:	EQU nAb1+1	; $96
00000000 =00000097                  nBb1:	EQU nA1+1	; $97
00000000 =00000098                  nB1:	EQU nBb1+1	; $98
00000000 =00000099                  nC2:	EQU nB1+1	; $99
00000000 =0000009A                  nCs2:	EQU nC2+1	; $9A
00000000 =0000009B                  nD2:	EQU nCs2+1	; $9B
00000000 =0000009C                  nEb2:	EQU nD2+1	; $9C
00000000 =0000009D                  nE2:	EQU nEb2+1	; $9D
00000000 =0000009E                  nF2:	EQU nE2+1	; $9E
00000000 =0000009F                  nFs2:	EQU nF2+1	; $9F
00000000 =000000A0                  nG2:	EQU nFs2+1	; $A0
00000000 =000000A1                  nAb2:	EQU nG2+1	; $A1
00000000 =000000A2                  nA2:	EQU nAb2+1	; $A2
00000000 =000000A3                  nBb2:	EQU nA2+1	; $A3
00000000 =000000A4                  nB2:	EQU nBb2+1	; $A4
00000000 =000000A5                  nC3:	EQU nB2+1	; $A5
00000000 =000000A6                  nCs3:	EQU nC3+1	; $A6
00000000 =000000A7                  nD3:	EQU nCs3+1	; $A7
00000000 =000000A8                  nEb3:	EQU nD3+1	; $A8
00000000 =000000A9                  nE3:	EQU nEb3+1	; $A9
00000000 =000000AA                  nF3:	EQU nE3+1	; $AA
00000000 =000000AB                  nFs3:	EQU nF3+1	; $AB
00000000 =000000AC                  nG3:	EQU nFs3+1	; $AC
00000000 =000000AD                  nAb3:	EQU nG3+1	; $AD
00000000 =000000AE                  nA3:	EQU nAb3+1	; $AE
00000000 =000000AF                  nBb3:	EQU nA3+1	; $AF
00000000 =000000B0                  nB3:	EQU nBb3+1	; $B0
00000000 =000000B1                  nC4:	EQU nB3+1	; $B1
00000000 =000000B2                  nCs4:	EQU nC4+1	; $B2
00000000 =000000B3                  nD4:	EQU nCs4+1	; $B3
00000000 =000000B4                  nEb4:	EQU nD4+1	; $B4
00000000 =000000B5                  nE4:	EQU nEb4+1	; $B5
00000000 =000000B6                  nF4:	EQU nE4+1	; $B6
00000000 =000000B7                  nFs4:	EQU nF4+1	; $B7
00000000 =000000B8                  nG4:	EQU nFs4+1	; $B8
00000000 =000000B9                  nAb4:	EQU nG4+1	; $B9
00000000 =000000BA                  nA4:	EQU nAb4+1	; $BA
00000000 =000000BB                  nBb4:	EQU nA4+1	; $BB
00000000 =000000BC                  nB4:	EQU nBb4+1	; $BC
00000000 =000000BD                  nC5:	EQU nB4+1	; $BD
00000000 =000000BE                  nCs5:	EQU nC5+1	; $BE
00000000 =000000BF                  nD5:	EQU nCs5+1	; $BF
00000000 =000000C0                  nEb5:	EQU nD5+1	; $C0
00000000 =000000C1                  nE5:	EQU nEb5+1	; $C1
00000000 =000000C2                  nF5:	EQU nE5+1	; $C2
00000000 =000000C3                  nFs5:	EQU nF5+1	; $C3
00000000 =000000C4                  nG5:	EQU nFs5+1	; $C4
00000000 =000000C5                  nAb5:	EQU nG5+1	; $C5
00000000 =000000C6                  nA5:	EQU nAb5+1	; $C6
00000000 =000000C7                  nBb5:	EQU nA5+1	; $C7
00000000 =000000C8                  nB5:	EQU nBb5+1	; $C8
00000000 =000000C9                  nC6:	EQU nB5+1	; $C9
00000000 =000000CA                  nCs6:	EQU nC6+1	; $CA
00000000 =000000CB                  nD6:	EQU nCs6+1	; $CB
00000000 =000000CC                  nEb6:	EQU nD6+1	; $CC
00000000 =000000CD                  nE6:	EQU nEb6+1	; $CD
00000000 =000000CE                  nF6:	EQU nE6+1	; $CE
00000000 =000000CF                  nFs6:	EQU nF6+1	; $CF
00000000 =000000D0                  nG6:	EQU nFs6+1	; $D0
00000000 =000000D1                  nAb6:	EQU nG6+1	; $D1
00000000 =000000D2                  nA6:	EQU nAb6+1	; $D2
00000000 =000000D3                  nBb6:	EQU nA6+1	; $D3
00000000 =000000D4                  nB6:	EQU nBb6+1	; $D4
00000000 =000000D5                  nC7:	EQU nB6+1	; $D5
00000000 =000000D6                  nCs7:	EQU nC7+1	; $D6
00000000 =000000D7                  nD7:	EQU nCs7+1	; $D7
00000000 =000000D8                  nEb7:	EQU nD7+1	; $D8
00000000 =000000D9                  nE7:	EQU nEb7+1	; $D9
00000000 =000000DA                  nF7:	EQU nE7+1	; $DA
00000000 =000000DB                  nFs7:	EQU nF7+1	; $DB
00000000 =000000DC                  nG7:	EQU nFs7+1	; $DC
00000000 =000000DD                  nAb7:	EQU nG7+1	; $DD
00000000 =000000DE                  nA7:	EQU nAb7+1	; $DE
00000000 =000000DF                  nBb7:	EQU nA7+1	; $DF
00000000                            
00000000                            ; ---------------------------------------------------------------------------------------------
00000000                            ; PSG envelope equates
00000000 =00000000                  fTone_00:	EQU $00
00000000 =00000001                  fTone_01:	EQU fTone_00+1
00000000 =00000002                  fTone_02:	EQU fTone_01+1
00000000 =00000003                  fTone_03:	EQU fTone_02+1
00000000 =00000004                  fTone_04:	EQU fTone_03+1
00000000 =00000005                  fTone_05:	EQU fTone_04+1
00000000 =00000006                  fTone_06:	EQU fTone_05+1
00000000 =00000007                  fTone_07:	EQU fTone_06+1
00000000 =00000008                  fTone_08:	EQU fTone_07+1
00000000 =00000009                  fTone_09:	EQU fTone_08+1
00000000 =0000000A                  fTone_0A:	EQU fTone_09+1
00000000 =0000000B                  fTone_0B:	EQU fTone_0A+1
00000000 =0000000C                  fTone_0C:	EQU fTone_0B+1
00000000 =0000000D                  fTone_0D:	EQU fTone_0C+1
00000000 =0000000E                  fTone_0E:	EQU fTone_0D+1
00000000 =0000000F                  fTone_0F:	EQU fTone_0E+1
00000000 =00000010                  fTone_10:	EQU fTone_0F+1
00000000 =00000011                  fTone_11:	EQU fTone_10+1
00000000 =00000012                  fTone_12:	EQU fTone_11+1
00000000 =00000013                  fTone_13:	EQU fTone_12+1
00000000 =00000014                  fTone_14:	EQU fTone_13+1
00000000 =00000015                  fTone_15:	EQU fTone_14+1
00000000 =00000016                  fTone_16:	EQU fTone_15+1
00000000 =00000017                  fTone_17:	EQU fTone_16+1
00000000 =00000018                  fTone_18:	EQU fTone_17+1
00000000 =00000019                  fTone_19:	EQU fTone_18+1
00000000 =0000001A                  fTone_1A:	EQU fTone_19+1
00000000 =0000001B                  fTone_1B:	EQU fTone_1A+1
00000000 =0000001C                  fTone_1C:	EQU fTone_1B+1
00000000 =0000001D                  fTone_1D:	EQU fTone_1C+1
00000000 =0000001E                  fTone_1E:	EQU fTone_1D+1
00000000 =0000001F                  fTone_1F:	EQU fTone_1E+1
00000000 =00000020                  fTone_20:	EQU fTone_1F+1
00000000 =00000021                  fTone_21:	EQU fTone_20+1
00000000 =00000022                  fTone_22:	EQU fTone_21+1
00000000 =00000023                  fTone_23:	EQU fTone_22+1
00000000 =00000024                  fTone_24:	EQU fTone_23+1
00000000 =00000025                  fTone_25:	EQU fTone_24+1
00000000 =00000026                  fTone_26:	EQU fTone_25+1
00000000 =00000027                  fTone_27:	EQU fTone_26+1
00000000 =00000028                  fTone_28:	EQU fTone_27+1
00000000 =00000029                  fTone_29:	EQU fTone_28+1
00000000                            ; ---------------------------------------------------------------------------------------------
00000000                            ; DAC Equates
00000000 =00000081                  dKick			EQU	$81
00000000 =00000082                  dSnare			EQU	$82
00000000 =00000082                  dMuffledSnare			EQU	$82
00000000 =00000083                  dTimpani		EQU	$83
00000000 =00000088                  dHiTimpani		EQU	$88
00000000 =00000089                  dMidTimpani		EQU	$89
00000000 =0000008A                  dLowTimpani		EQU	$8A
00000000 =0000008B                  dVLowTimpani		EQU	$8B
00000000 =00000083                  dCrashCymbal	EQU $83
00000000 =00000081                  dKickS3			EQU	$81
00000000 =00000082                  dSnareS3			EQU	$82
00000000 =0000008A                  delectriclowtom	EQU	$8A
00000000 =0000008B                  delectricfloortom	EQU	$8B
00000000 =00000088                  delectrichightom	EQU	$88
00000000 =00000089                  delectricmidtom	EQU	$89
00000000 =00000082                  dClapS3			EQU	$82
00000000                            ; ---------------------------------------------------------------------------------------------
00000000                            ; Channel IDs for SFX
00000000 =00000080                  cPSG1				EQU $80
00000000 =000000A0                  cPSG2				EQU $A0
00000000 =000000C0                  cPSG3				EQU $C0
00000000 =000000E0                  cNoise				EQU $E0	; Not for use in S3/S&K/S3D
00000000 =00000002                  cFM3				EQU $02
00000000 =00000004                  cFM4				EQU $04
00000000 =00000005                  cFM5				EQU $05
00000000 =00000006                  cFM6				EQU $06	; Only in S3/S&K/S3D, overrides DAC
00000000                            
00000000                            ; ---------------------------------------------------------------------------------------------
00000000                            ;---------------------------------------------
00000000                            ; SMPS F_Tone Equates 
00000000                            ;---------------------------------------------	
00000000 =00000000                  fTone_00:	EQU $00
00000000 =00000001                  fTone_01:	EQU fTone_00+1
00000000 =00000002                  fTone_02:	EQU fTone_01+1
00000000 =00000003                  fTone_03:	EQU fTone_02+1
00000000 =00000004                  fTone_04:	EQU fTone_03+1
00000000 =00000005                  fTone_05:	EQU fTone_04+1
00000000 =00000006                  fTone_06:	EQU fTone_05+1
00000000 =00000007                  fTone_07:	EQU fTone_06+1
00000000 =00000008                  fTone_08:	EQU fTone_07+1
00000000 =00000009                  fTone_09:	EQU fTone_08+1
00000000 =0000000A                  fTone_0A:	EQU fTone_09+1
00000000 =0000000B                  fTone_0B:	EQU fTone_0A+1
00000000 =0000000C                  fTone_0C:	EQU fTone_0B+1
00000000                            ; ---------------------------------------------------------------------------------------------
00000000                            ; PSG conversion to S3/S&K/S3D drivers require a tone shift of 12 semi-tones.
00000000                            conv0To256  macro val 
00000000                            	if val<$01
00000000                            		dc.b (256-val+$FF)&$FF
00000000                            	else	
00000000                            		dc.b (256-val)&$FF	
00000000                            	endc
00000000                            	endm
00000000                            SMPSModFix:	macro steps
00000000                            	dc.b (steps/(speed-1))
00000000                            	endm	
00000000 =0000000C                  psgdelta	EQU $0C
00000000                            PSGPitch macro pitch
00000000                            		dc.b	(pitch+psgdelta)&$FF
00000000                            	endm
00000000                            
00000000                            s1TempotoS2 macro tmod
00000000                            	if tmod<$01
00000000                            		dc.b ((($FF+tmod-1)*256+($FF+tmod/2))/$FF+tmod)&$FF 	
00000000                            	else
00000000                            		dc.b (((tmod-1)*256+(tmod/2))/tmod)&$FF
00000000                            	endc
00000000                            	endm
00000000                            	
00000000                            s3TempotoS2 macro tmod
00000000                            	if tmod<$01
00000000                            		dc.b (256-tmod+$FF)&$FF
00000000                            	else	
00000000                            		dc.b (256-tmod)&$FF	
00000000                            	endc
00000000                            	endm
00000000                            	
00000000                            convertMainTempoMod	macro tmod
00000000                            	if 		smpsHeaderStartSong=2
00000000                            		dc.b tmod
00000000                            	elseif 		smpsHeaderStartSong<2
00000000                            		s1TempotoS2 	\tmod
00000000                            	elseif	smpsHeaderStartSong>2
00000000                            		s3TempotoS2  	\tmod
00000000                            	endc
00000000                            	endm	
00000000                            ; ---------------------------------------------------------------------------------------------
00000000                            ; Header Macros
00000000 =00000000                  smpsHeaderStartSong = 0
00000000                            
00000000                            smpsHeaderVoiceNull macro
00000000                            	dc.w	$0000
00000000                            	endm
00000000                            
00000000                            ; Header - Set up Voice Location
00000000                            ; Common to music and SFX
00000000                            smpsHeaderVoice macro loc
00000000                            songStart set *
00000000                            	dc.w	loc-songStart
00000000                            	endm
00000000                            
00000000                            ; Header - Set up Voice Location as S3's Universal Voice Bank
00000000                            ; Common to music and SFX
00000000                            smpsHeaderVoiceUVB macro
00000000                            	if songStart<>*
00000000                            		fail "Missing smpsHeaderStartSong or smpsHeaderStartSongConvert"
00000000                            	endc
00000000                            	;dc.w	little_endian(z80_UniVoiceBank)
00000000                            	z80_ptr	z80_UniVoiceBank
00000000                            	endm
00000000                            
00000000                            ; Header macros for music (not for SFX)
00000000                            ; Header - Set up Channel Usage
00000000                            smpsHeaderChan macro fm,psg
00000000                            	dc.b	fm,psg
00000000                            	endm
00000000                            
00000000                            ; Header - Set up Tempo
00000000                            smpsHeaderTempo macro tdiv,tmod
00000000                            	dc.b	tdiv,tmod
00000000                            	endm
00000000                            
00000000                            ; Header - Set up DAC Channel
00000000                            smpsHeaderDAC macro loc,pitch,vol
00000000                            	dc.w	loc-songStart
00000000                            	if narg>=2
00000000                            		dc.b	\pitch
00000000                            	else
00000000                            		dc.b	$00
00000000                            	endc
00000000                            	if narg>=3
00000000                            		dc.b	\vol
00000000                            	else
00000000                            		dc.b	$00
00000000                            	endc
00000000                            	endm
00000000                            
00000000                            ; Header - Set up FM Channel
00000000                            smpsHeaderFM macro loc,pitch,vol
00000000                            	dc.w	loc-songStart
00000000                            	dc.b	pitch,vol
00000000                            	endm
00000000                            
00000000                            ; Header - Set up PSG Channel
00000000                            smpsHeaderPSG macro loc,pitch,vol,mod,voice
00000000                            	dc.w	loc-songStart
00000000                            	dc.b	pitch,vol,mod,voice
00000000                            	endm
00000000                            
00000000                            ; Header macros for SFX (not for music)
00000000                            ; Header - Set up Tempo
00000000                            smpsHeaderTempoSFX macro div
00000000                            	dc.b	div
00000000                            	endm
00000000                            
00000000                            ; Header - Set up Channel Usage
00000000                            smpsHeaderChanSFX macro chan
00000000                            	dc.b	chan
00000000                            	endm
00000000                            
00000000                            ; Header - Set up FM Channel
00000000                            smpsHeaderSFXChannel macro chanid,loc,pitch,vol
00000000                            	if (chanid=cNoise)
00000000                            		fail "Using channel ID of cNoise ($E0) in Sonic 3 driver is dangerous. Fix the song so that it turns into a noise channel instead."
00000000                            	endc
00000000                            	dc.b	$80,chanid
00000000                            	dc.w	loc-songStart
00000000                            	dc.b	pitch, vol
00000000                            	endm
00000000                            
00000000                            ; ---------------------------------------------------------------------------------------------
00000000                            ; Co-ord Flag Macros and Equates
00000000                            ; E0xx - Panning, AMS, FMS
00000000                            smpsPan macro direction,amsfms
00000000                            panNone set $00
00000000                            panRight set $40
00000000                            panLeft set $80
00000000                            panCentre set $C0
00000000                            panCenter set $C0 ; silly Americans :U
00000000                            	dc.b $E0,direction+amsfms
00000000                            	endm
00000000                            
00000000                            ; E1xx - Set channel frequency displacement to xx
00000000                            smpsAlterNote macro val
00000000                            	dc.b	$E1,val
00000000                            	endm
00000000                            
00000000                            ; E2xx - Useless
00000000                            smpsNop macro val
00000000                            	dc.b	$E2,val
00000000                            	endm
00000000                            ; Return (used after smpsCall)
00000000                            smpsReturn macro val
00000000                            	dc.b	$E3
00000000                            	endm
00000000                            
00000000                            ; Fade in previous song (ie. 1-Up)
00000000                            smpsFade macro val
00000000                            	dc.b	$E4
00000000                            	endm
00000000                            
00000000                            ; E5xx - Set channel tempo divider to xx
00000000                            smpsChanTempoDiv macro val
00000000                            	dc.b	$E5,val
00000000                            ;	endc
00000000                            	endm
00000000                            
00000000                            ; E6xx - Alter Volume by xx
00000000                            smpsAlterVol macro val
00000000                            	dc.b	$E6,val
00000000                            	endm
00000000                            
00000000                            sVol  macro val
00000000                            	$E6,val
00000000                            	endm
00000000                            ; E7 - Prevent attack of next note
00000000 =000000E7                  smpsNoAttack	EQU $E7
00000000                            
00000000                            ; E8xx - Set note fill to xx
00000000                            smpsNoteFill macro val
00000000                            		dc.b	$E8,val
00000000                            ;	endc
00000000                            	endm
00000000                            smpsAlterPitch 	macro	value
00000000                            	dc.b $E9,value
00000000                            	endm
00000000                            
00000000                            
00000000                            ; Set music tempo modifier to xx
00000000                            smpsSetTempoMod macro mod
00000000                            	dc.b	$EA,mod
00000000                            	endm
00000000                            
00000000                            ; Set music tempo divider to xx
00000000                            smpsSetTempoDiv macro val
00000000                            	dc.b	$EB,val
00000000                            	endm
00000000                            
00000000                            ; ECxx - Set Volume to xx
00000000                            smpsSetVol macro val
00000000                            	dc.b	$EC,val
00000000                            	endm
00000000                            
00000000                            ; Works on all drivers
00000000                            smpsPSGAlterVol macro vol
00000000                            	dc.b	$EC,vol
00000000                            	endm
00000000                            
00000000                            ; Clears pushing sound flag in S1
00000000                            smpsClearPush macro	
00000000                            	dc.b	$ED
00000000                            	endm
00000000                            
00000000                            ; Stops special SFX (S1 only) and restarts overridden music track
00000000                            smpsStopSpecial macro
00000000                            		dc.b	$EE
00000000                            	endm
00000000                            
00000000                            ; EFxx[yy] - Set Voice of FM channel to xx; xx < 0 means yy present
00000000                            smpsSetvoice macro voice,songID
00000000                            	if narg<=1
00000000                            		dc.b	$EF,voice
00000000                            	else
00000000                            		dc.b	$EF,voice|$80,songID+$81
00000000                            	endc
00000000                            	endm
00000000                            
00000000                            ; F0wwxxyyzz - Modulation - ww: wait time - xx: modulation speed - yy: change per step - zz: number of steps
00000000                            smpsModSet macro wait,speed,change,step
00000000                            	dc.b	$F0
00000000                            	dc.b	wait,speed,change,step
00000000                            	endm
00000000                            
00000000                            ; Turn on Modulation
00000000                            smpsModOn macro
00000000                            	dc.b	$F1
00000000                            	endm
00000000                            
00000000                            ; F2 - End of channel
00000000                            smpsStop macro
00000000                            	dc.b	$F2
00000000                            	endm
00000000                            
00000000                            ; F3xx - PSG waveform to xx
00000000                            smpsPSGform macro form
00000000                            	dc.b	$F3,form
00000000                            	endm
00000000                            
00000000                            ; Turn off Modulation
00000000                            smpsModOff macro
00000000                            	dc.b	$F4
00000000                            	endm
00000000                            
00000000                            ; F5xx - PSG voice to xx
00000000                            smpsPSGvoice macro voice
00000000                            	dc.b	$F5,voice
00000000                            	endm
00000000                            
00000000                            ; F6xxxx - Jump to xxxx
00000000                            smpsJump macro loc
00000000                            	dc.b	$F6
00000000                            	dc.w	loc-*-1
00000000                            	endm
00000000                            
00000000                            ; F7xxyyzzzz - Loop back to zzzz yy times, xx being the loop index for loop recursion fixing
00000000                            smpsLoop macro index,loops,loc
00000000                            	dc.b	$F7
00000000                            	dc.b	index,loops
00000000                            	dc.w	loc-*-1
00000000                            	endm
00000000                            
00000000                            ; F8xxxx - Call pattern at xxxx, saving return point
00000000                            smpsCall macro loc
00000000                            	dc.b	$F8
00000000                            	dc.w	loc-*-1
00000000                            	endm
00000000                            
00000000                            ; ---------------------------------------------------------------------------------------------
00000000                            ; Alter Volume
00000000                            smpsFMAlterVol macro val1,val2
00000000                            	if narg<=1
00000000                            		dc.b	$E6,val1
00000000                            	else
00000000                            		dc.b	$E5,val1,val2
00000000                            	endc
00000000                            	endm
00000000                            
00000000                            ; S3/S&K/S3D-only coordination flags
00000000                            ; Silences FM channel then stops as per smpsStop
00000000                            smpsStopFM macro
00000000                            	dc.b	$E3
00000000                            	endm
00000000                            
00000000                            ; Spindash Rev
00000000                            smpsSpindashRev macro
00000000                            	dc.b	$E9
00000000                            	endm
00000000                            	
00000000                            smpsPlayDACSample macro sample
00000000                            	dc.b	$EA,sample
00000000                            	endm
00000000                            	
00000000                            smpsConditionalJump macro index,loc
00000000                            	dc.b	$EB
00000000                            	dc.b	index
00000000                            	dc.w	loc-songStart
00000000                            	endm
00000000                            
00000000                            ; Set note values to xx-$40
00000000                            smpsSetNote macro val
00000000                            	dc.b	$ED,val
00000000                            	endm
00000000                            
00000000                            smpsFMICommand macro reg,val
00000000                            	dc.b	$EE,reg,val
00000000                            	endm
00000000                            
00000000                            ; Set Modulation
00000000                            smpsModChange2 macro fmmod,psgmod
00000000                            	dc.b	$F1,fmmod,psgmod
00000000                            	endm
00000000                            
00000000                            ; Set Modulation
00000000                            smpsModChange macro val
00000000                            	dc.b	$F4,val
00000000                            	endm
00000000                            
00000000                            ; FCxxxx - Jump to xxxx
00000000                            smpsContinuousLoop macro loc
00000000                            	dc.b	$FC
00000000                            	dc.w	loc-songStart
00000000                            	endm
00000000                            
00000000                            smpsAlternateSMPS macro flag
00000000                            	dc.b	$FD,flag
00000000                            	endm
00000000                            
00000000                            smpsFM3SpecialMode macro ind1,ind2,ind3,ind4
00000000                            	dc.b	$FE,ind1,ind2,ind3,ind4
00000000                            	endm
00000000                            
00000000                            smpsPlaySound macro index
00000000                            	dc.b	$FF,$01,index
00000000                            	endm
00000000                            
00000000                            smpsHaltMusic macro flag
00000000                            	dc.b	$FF,$02,flag
00000000                            	endm
00000000                            
00000000                            smpsCopyData macro data,len
00000000                            	fail "Coord. Flag to copy data should not be used. Complain to Flamewing if any music uses it."
00000000                            	dc.b	$FF,$03
00000000                            	;dc.w	little_endian(data)
00000000                            	z80_ptr	data
00000000                            	dc.b	len
00000000                            	endm
00000000                            
00000000                            smpsSSGEG macro op1,op2,op3,op4
00000000                            	dc.b	$FF,$05,op1,op2,op3,op4
00000000                            	endm
00000000                            
00000000                            smpsFMFlutter macro tone,mask
00000000                            	dc.b	$FF,$06,tone,mask
00000000                            	endm
00000000                            
00000000                            smpsResetSpindashRev macro val
00000000                            	dc.b	$FF,$07
00000000                            	endm
00000000                            
00000000                            ; ---------------------------------------------------------------------------------------------
00000000                            ; Macros for FM instruments
00000000                            ; Voices - Feedback
00000000                            smpsVcFeedback macro val
00000000                            vcFeedback set \val
00000000                            	endm
00000000                            
00000000                            ; Voices - Algorithm
00000000                            smpsVcAlgorithm macro val
00000000                            vcAlgorithm set \val
00000000                            	endm
00000000                            
00000000                            smpsVcUnusedBits macro val
00000000                            vcUnusedBits set \val
00000000                            	endm
00000000                            
00000000                            ; Voices - Detune
00000000                            smpsVcDetune macro op1,op2,op3,op4
00000000                            vcDT1 set \op1
00000000                            vcDT2 set \op2
00000000                            vcDT3 set \op3
00000000                            vcDT4 set \op4
00000000                            	endm
00000000                            
00000000                            ; Voices - Coarse-Frequency
00000000                            smpsVcCoarseFreq macro op1,op2,op3,op4
00000000                            vcCF1 set \op1
00000000                            vcCF2 set \op2
00000000                            vcCF3 set \op3
00000000                            vcCF4 set \op4
00000000                            	endm
00000000                            
00000000                            ; Voices - Rate Scale
00000000                            smpsVcRateScale macro op1,op2,op3,op4
00000000                            vcRS1 set \op1
00000000                            vcRS2 set \op2
00000000                            vcRS3 set \op3
00000000                            vcRS4 set \op4
00000000                            	endm
00000000                            
00000000                            ; Voices - Attack Rate
00000000                            smpsVcAttackRate macro op1,op2,op3,op4
00000000                            vcAR1 set \op1
00000000                            vcAR2 set \op2
00000000                            vcAR3 set \op3
00000000                            vcAR4 set \op4
00000000                            	endm
00000000                            
00000000                            ; Voices - Amplitude Modulation
00000000                            smpsVcAmpMod macro op1,op2,op3,op4
00000000                            vcAM1 set \op1
00000000                            vcAM2 set \op2
00000000                            vcAM3 set \op3
00000000                            vcAM4 set \op4
00000000                            	endm
00000000                            
00000000                            ; Voices - First Decay Rate
00000000                            smpsVcDecayRate1 macro op1,op2,op3,op4
00000000                            vcD1R1 set \op1
00000000                            vcD1R2 set \op2
00000000                            vcD1R3 set \op3
00000000                            vcD1R4 set \op4
00000000                            	endm
00000000                            
00000000                            ; Voices - Second Decay Rate
00000000                            smpsVcDecayRate2 macro op1,op2,op3,op4
00000000                            vcD2R1 set \op1
00000000                            vcD2R2 set \op2
00000000                            vcD2R3 set \op3
00000000                            vcD2R4 set \op4
00000000                            	endm
00000000                            
00000000                            ; Voices - Decay Level
00000000                            smpsVcDecayLevel macro op1,op2,op3,op4
00000000                            vcDL1 set \op1
00000000                            vcDL2 set \op2
00000000                            vcDL3 set \op3
00000000                            vcDL4 set \op4
00000000                            	endm
00000000                            
00000000                            ; Voices - Release Rate
00000000                            smpsVcReleaseRate macro op1,op2,op3,op4
00000000                            vcRR1 set \op1
00000000                            vcRR2 set \op2
00000000                            vcRR3 set \op3
00000000                            vcRR4 set \op4
00000000                            	endm
00000000                            
00000000                            ; Voices - Total Level
00000000                            smpsVcTotalLevel macro op1,op2,op3,op4
00000000                            vcTL1 set \op1
00000000                            vcTL2 set \op2
00000000                            vcTL3 set \op3
00000000                            vcTL4 set \op4
00000000                            	dc.b	(vcUnusedBits<<6)+(vcFeedback<<3)+vcAlgorithm
00000000                            ;   0     1     2     3     4     5     6     7
00000000                            ;%1000,%1000,%1000,%1000,%1010,%1110,%1110,%1111
00000000                            vcTLMask4 set ((vcAlgorithm=7)<<7)
00000000                            vcTLMask3 set ((vcAlgorithm>=4)<<7)
00000000                            vcTLMask2 set ((vcAlgorithm>=5)<<7)
00000000                            vcTLMask1 set $80
00000000                            ;	dc.b	(vcDT4<<4)+vcCF4 ,(vcDT3<<4)+vcCF3 ,(vcDT2<<4)+vcCF2 ,(vcDT1<<4)+vcCF1
00000000                            ;	dc.b	(vcRS4<<6)+vcAR4 ,(vcRS3<<6)+vcAR3 ,(vcRS2<<6)+vcAR2 ,(vcRS1<<6)+vcAR1
00000000                            ;	dc.b	(vcAM4<<5)+vcD1R4,(vcAM3<<5)+vcD1R3,(vcAM2<<5)+vcD1R2,(vcAM1<<5)+vcD1R1
00000000                            ;	dc.b	vcD2R4           ,vcD2R3           ,vcD2R2           ,vcD2R1
00000000                            ;	dc.b	(vcDL4<<4)+vcRR4 ,(vcDL3<<4)+vcRR3 ,(vcDL2<<4)+vcRR2 ,(vcDL1<<4)+vcRR1
00000000                            ;	dc.b	vcTL4|vcTLMask4  ,vcTL3|vcTLMask3  ,vcTL2|vcTLMask2  ,vcTL1|vcTLMask1
00000000                            	dc.b	(vcDT4<<4)+vcCF4,(vcDT3<<4)+vcCF3,(vcDT2<<4)+vcCF2,(vcDT1<<4)+vcCF1
00000000                            	dc.b	(vcRS4<<6)+vcAR4,(vcRS3<<6)+vcAR3,(vcRS2<<6)+vcAR2,(vcRS1<<6)+vcAR1
00000000                            	dc.b	(vcAM4<<5)+vcD1R4,(vcAM3<<5)+vcD1R3,(vcAM2<<5)+vcD1R2,(vcAM1<<5)+vcD1R1
00000000                            	dc.b	vcD2R4,vcD2R3,vcD2R2,vcD2R1
00000000                            	dc.b	(vcDL4<<4)+vcRR4,(vcDL3<<4)+vcRR3,(vcDL2<<4)+vcRR2,(vcDL1<<4)+vcRR1
00000000                            	dc.b	vcTL4|vcTLMask4,vcTL3|vcTLMask3,vcTL2|vcTLMask2,vcTL1|vcTLMask1
00000000                            	endm
00000000                            
00000000                            
00000000                            
00000000                            ;level select constants (to not give the foward reference warning this was moved here)
00000000 =60860003                  lsscrpos = $60860003 ; level select screen position
00000000 =00240000                  lsoff = $240000 ; second row jump
00000000 =64C20003                  lsstpos = lsscrpos+$43C0000 ; sound test
00000000 =6C820003                  lsnppos = $6C820003	; now playing
00000000 =6D020003                  lsctrlpos = $6D020003 ; control help
00000000                            lsrow1size: equ (LMTSecondRow-LevelMenuText)/16
00000000                            lsrow2size: equ (LMTEnd-LMTSecondRow)/16
00000000                            lsselectable: equ ((LMTSelectableEnd-LevelMenuText)/16)-1 ; last selectable item
00000000                            ; level select item constants
00000000                            lssndtest: equ lsrow2size+8
00000000                            lswifi: equ lsrow2size+9
00000000                            
00000000                            
00000000                            ; NOTES FOR ANYONE MAKING CHARACTERS
00000000 =FFFFFFE8                  v_character = $FFFFFFE8
00000000                            ; pointers for:
00000000                            ; PLAYER MAPPINGS -> Player_Maps
00000000                            ; PLAYER ANIM SCRIPTS -> Player_Anim
00000000                            ; PLAYER ART -> Player_Art
00000000                            ; PLAYER DPLC -> Player_DPLC
00000000                            ; PLAYER PALETTE -> Player_Palette
00000000                            
00000000                            
00000000                            StartOfRom:
00000000 00FF FE00 0000 0000 0000+  Vectors:	dc.l $FFFE00, EntryPoint, BusError, AddressError
00000010 0000 0000 0000 0000 0000+  		dc.l IllegalInstr, ZeroDivide, ChkInstr, TrapvInstr
00000020 0000 0000 0000 0000 0000+  		dc.l PrivilegeViol, Trace, Line1010Emu,	Line1111Emu
00000030 0000 0000 0000 0000 0000+  		dc.l ErrorExcept, ErrorExcept, ErrorExcept, ErrorExcept
00000040 0000 0000 0000 0000 0000+  		dc.l ErrorExcept, ErrorExcept, ErrorExcept, ErrorExcept
00000050 0000 0000 0000 0000 0000+  		dc.l ErrorExcept, ErrorExcept, ErrorExcept, ErrorExcept
00000060 0000 0000 0000 0000 0000+  		dc.l ErrorExcept, ErrorTrap, ErrorTrap,	ErrorTrap
00000070 0000 0000 0000 0000 0000+  		dc.l PalToCRAM,	ErrorTrap, loc_B10, ErrorTrap
00000080 0000 0000 0000 0000 0000+  		dc.l ErrorTrap,	ErrorTrap, ErrorTrap, ErrorTrap
00000090 0000 0000 0000 0000 0000+  		dc.l ErrorTrap,	ErrorTrap, ErrorTrap, ErrorTrap
000000A0 0000 0000 0000 0000 0000+  		dc.l ErrorTrap,	ErrorTrap, ErrorTrap, ErrorTrap
000000B0 0000 0000 0000 0000 0000+  		dc.l ErrorTrap,	ErrorTrap, ErrorTrap, ErrorTrap
000000C0 0000 0000 0000 0000 0000+  		dc.l ErrorTrap,	ErrorTrap, ErrorTrap, ErrorTrap
000000D0 0000 0000 0000 0000 0000+  		dc.l ErrorTrap,	ErrorTrap, ErrorTrap, ErrorTrap
000000E0 0000 0000 0000 0000 0000+  		dc.l ErrorTrap,	ErrorTrap, ErrorTrap, ErrorTrap
000000F0 0000 0000 0000 0000 0000+  		dc.l ErrorTrap,	ErrorTrap, ErrorTrap, ErrorTrap
00000100 5345 4741 204D 4547 4120+  Console:	dc.b 'SEGA MEGA DRIVE ' ; Hardware system ID
00000110 2843 2943 4144 4520 4341+  Date:		dc.b '(C)CADE CADE C  ' ; Release date
00000120 686F 7720 746F 2064 6973+  Title_Local:	dc.b 'how to disassemble vhs tapes on a slab of wood  ' ; Domestic name
00000150 686F 7720 746F 2064 6973+  Title_Int:	dc.b 'how to disassemble vhs tapes on a slab of wood  ' ; International name
00000180 474D 2030 3030 3031 3030+  Serial:		dc.b 'GM 00001009-00'   ; Serial/version number
0000018E 0000                       Checksum:	dc.w 0
00000190 4A20 2020 2020 2020 2020+  		dc.b 'J               ' ; I/O support
000001A0 0000 0000                  RomStartLoc:	dc.l StartOfRom		; ROM start
000001A4 0000 0000                  RomEndLoc:	dc.l EndOfRom-1		; ROM end
000001A8 00FF 0000                  RamStartLoc:	dc.l $FF0000		; RAM start
000001AC 00FF FFFF                  RamEndLoc:	dc.l $FFFFFF		; RAM end
000001B0 2020 2020                  SRAMSupport:	dc.l $20202020		; change to $5241E020 to create	SRAM
000001B4 2020 2020                  		dc.l $20202020		; SRAM start
000001B8 2020 2020                  		dc.l $20202020		; SRAM end
000001BC 2020 2020 2020 2020 2020+  Notes:		dc.b '                                                    '
000001F0 4A55 4520 2020 2020 2020+  Region:		dc.b 'JUE             ' ; Region
00000200                            
00000200                            ; ===========================================================================
00000200                            
00000200                            ErrorTrap:
00000200 4E71                       		nop	
00000202 4E71                       		nop	
00000204 60FA                       		bra.s	ErrorTrap
00000206                            ; ===========================================================================
00000206                            
00000206                            EntryPoint:
00000206 4AB9 00A1 0008             		tst.l	($A10008).l	; test port A control
0000020C 6600                       		bne.s	PortA_Ok
0000020E 4A79 00A1 000C             		tst.w	($A1000C).l	; test port C control
00000214                            
00000214                            PortA_Ok:
00000214 6600                       		bne.s	PortC_Ok
00000216 4BFA 0000                  		lea	SetupValues(pc),a5
0000021A 4C9D 00E0                  		movem.w	(a5)+,d5-d7
0000021E 4CDD 1F00                  		movem.l	(a5)+,a0-a4
00000222 1029 EF01                  		move.b	-$10FF(a1),d0	; get hardware version
00000226 0200 000F                  		andi.b	#$F,d0
0000022A 6700                       		beq.s	SkipSecurity
0000022C 237C 5345 4741 2F00        		move.l	#'SEGA',$2F00(a1)
00000234                            
00000234                            SkipSecurity:
00000234 3014                       		move.w	(a4),d0		; check	if VDP works
00000236 7000                       		moveq	#0,d0
00000238 2C40                       		movea.l	d0,a6
0000023A 4E66                       		move.l	a6,usp		; set usp to $0
0000023C 7217                       		moveq	#$17,d1
0000023E                            
0000023E                            VDPInitLoop:
0000023E 1A1D                       		move.b	(a5)+,d5	; add $8000 to value
00000240 3885                       		move.w	d5,(a4)		; move value to	VDP register
00000242 DA47                       		add.w	d7,d5		; next register
00000244 51C9 FFF8                  		dbf	d1,VDPInitLoop
00000248 289D                       		move.l	(a5)+,(a4)
0000024A 3680                       		move.w	d0,(a3)		; clear	the screen
0000024C 3287                       		move.w	d7,(a1)		; stop the Z80
0000024E 3487                       		move.w	d7,(a2)		; reset	the Z80
00000250                            
00000250                            WaitForZ80:
00000250 0111                       		btst	d0,(a1)		; has the Z80 stopped?
00000252 66FC                       		bne.s	WaitForZ80	; if not, branch
00000254 7425                       		moveq	#$25,d2
00000256                            
00000256                            Z80InitLoop:
00000256 10DD                       		move.b	(a5)+,(a0)+
00000258 51CA FFFC                  		dbf	d2,Z80InitLoop
0000025C 3480                       		move.w	d0,(a2)
0000025E 3280                       		move.w	d0,(a1)		; start	the Z80
00000260 3487                       		move.w	d7,(a2)		; reset	the Z80
00000262                            
00000262                            ClrRAMLoop:
00000262 2D00                       		move.l	d0,-(a6)
00000264 51CE FFFC                  		dbf	d6,ClrRAMLoop	; clear	the entire RAM
00000268 289D                       		move.l	(a5)+,(a4)	; set VDP display mode and increment
0000026A 289D                       		move.l	(a5)+,(a4)	; set VDP to CRAM write
0000026C 761F                       		moveq	#$1F,d3
0000026E                            
0000026E                            ClrCRAMLoop:
0000026E 2680                       		move.l	d0,(a3)
00000270 51CB FFFC                  		dbf	d3,ClrCRAMLoop	; clear	the CRAM
00000274 289D                       		move.l	(a5)+,(a4)
00000276 7813                       		moveq	#$13,d4
00000278                            
00000278                            ClrVDPStuff:
00000278 2680                       		move.l	d0,(a3)
0000027A 51CC FFFC                  		dbf	d4,ClrVDPStuff
0000027E 7A03                       		moveq	#3,d5
00000280                            
00000280                            PSGInitLoop:
00000280 175D 0011                  		move.b	(a5)+,$11(a3)	; reset	the PSG
00000284 51CD FFFA                  		dbf	d5,PSGInitLoop
00000288 3480                       		move.w	d0,(a2)
0000028A 4CD6 7FFF                  		movem.l	(a6),d0-a6	; clear	all registers
0000028E 46FC 2700                  		move	#$2700,sr	; set the sr
00000292                            
00000292                            PortC_Ok:
00000292 6000                       		bra.s	GameProgram
00000294                            ; ===========================================================================
00000294 8000                       SetupValues:	dc.w $8000		; XREF: PortA_Ok
00000296 3FFF                       		dc.w $3FFF
00000298 0100                       		dc.w $100
0000029A                            
0000029A 00A0 0000                  		dc.l $A00000		; start	of Z80 RAM
0000029E 00A1 1100                  		dc.l $A11100		; Z80 bus request
000002A2 00A1 1200                  		dc.l $A11200		; Z80 reset
000002A6 00C0 0000                  		dc.l $C00000
000002AA 00C0 0004                  		dc.l $C00004		; address for VDP registers
000002AE                            
000002AE 0414 303C                  		dc.b 4,	$14, $30, $3C	; values for VDP registers
000002B2 076C 0000                  		dc.b 7,	$6C, 0,	0
000002B6 0000 FF00                  		dc.b 0,	0, $FF,	0
000002BA 8137 0001                  		dc.b $81, $37, 0, 1
000002BE 0100 00FF                  		dc.b 1,	0, 0, $FF
000002C2 FF00 0080                  		dc.b $FF, 0, 0,	$80
000002C6                            
000002C6 4000 0080                  		dc.l $40000080
000002CA                            
000002CA AF01 D91F 1127 0021 2600+  		dc.b $AF, 1, $D9, $1F, $11, $27, 0, $21, $26, 0, $F9, $77 ; Z80	instructions
000002D6 EDB0 DDE1 FDE1 ED47 ED4F   		dc.b $ED, $B0, $DD, $E1, $FD, $E1, $ED,	$47, $ED, $4F
000002E0 D1E1 F108 D9C1 D1E1 F1F9+  		dc.b $D1, $E1, $F1, 8, $D9, $C1, $D1, $E1, $F1,	$F9, $F3
000002EB ED56 36E9 E9               		dc.b $ED, $56, $36, $E9, $E9
000002F0                            
000002F0 8104                       		dc.w $8104		; value	for VDP	display	mode
000002F2 8F02                       		dc.w $8F02		; value	for VDP	increment
000002F4 C000 0000                  		dc.l $C0000000		; value	for CRAM write mode
000002F8 4000 0010                  		dc.l $40000010
000002FC                            
000002FC 9FBF DFFF                  		dc.b $9F, $BF, $DF, $FF	; values for PSG channel volumes
00000300                            ; ===========================================================================
00000300                            
00000300                            GameProgram:
00000300 4A79 00C0 0004             		tst.w	($C00004).l
00000306 0839 0006 00A1 000D        		btst	#6,($A1000D).l
0000030E 6700                       		beq.s	CheckSumCheck
00000310 0CB8 696E 6974 FFFC        		cmpi.l	#'init',($FFFFFFFC).w ; has checksum routine already run?
00000318 6700 0000                  		beq.w	GameInit	; if yes, branch
0000031C                            
0000031C                            CheckSumCheck:
0000031C 207C 0000 0200             		movea.l	#ErrorTrap,a0	; start	checking bytes after the header	($200)
00000322 227C 0000 01A4             		movea.l	#RomEndLoc,a1	; stop at end of ROM
00000328 2011                       		move.l	(a1),d0
0000032A 7200                       		moveq	#0,d1
0000032C                            
0000032C                            loc_32C:
0000032C D258                       		add.w	(a0)+,d1
0000032E B088                       		cmp.l	a0,d0
00000330 64FA                       		bcc.s	loc_32C
00000332 227C 0000 018E             		movea.l	#Checksum,a1	; read the checksum
00000338 B251                       		cmp.w	(a1),d1		; compare correct checksum to the one in ROM
0000033A 6600 0000                  		bne.w	CheckSumError	; if they don't match, branch
0000033E 4DF8 FE00                  		lea	($FFFFFE00).w,a6
00000342 7E00                       		moveq	#0,d7
00000344 3C3C 007F                  		move.w	#$7F,d6
00000348                            
00000348                            loc_348:
00000348 2CC7                       		move.l	d7,(a6)+
0000034A 51CE FFFC                  		dbf	d6,loc_348
0000034E 1039 00A1 0001             		move.b	($A10001).l,d0
00000354 0200 00C0                  		andi.b	#$C0,d0
00000358 11C0 FFF8                  		move.b	d0,($FFFFFFF8).w
0000035C 21FC 696E 6974 FFFC        		move.l	#'init',($FFFFFFFC).w ; set flag so checksum won't be run again
00000364                            
00000364                            GameInit:
00000364 4DF9 00FF 0000             		lea	($FF0000).l,a6
0000036A 7E00                       		moveq	#0,d7
0000036C 3C3C 3F7F                  		move.w	#$3F7F,d6
00000370                            
00000370                            GameClrRAM:
00000370 2CC7                       		move.l	d7,(a6)+
00000372 51CE FFFC                  		dbf	d6,GameClrRAM	; fill RAM ($0000-$FDFF) with $0
00000376 6100 0000                  		bsr.w	VDPSetupGame
0000037A 6100 0000                  		bsr.w	SoundDriverLoad
0000037E 6100 0000                  		bsr.w	JoypadInit
00000382 11FC 0000 F600             		move.b	#0,($FFFFF600).w ; set Game Mode to Sega Screen
00000388                            
00000388                            	;	move.b	#$20,($FFFFF600).w ; set Game Mode to Minecraft
00000388                            
00000388                            MainGameLoop:
00000388 1038 F600                  		move.b	($FFFFF600).w,d0 ; load	Game Mode
0000038C 0240 003C                  		andi.w	#$3C,d0
00000390 4EBB 0000                  		jsr	GameModeArray(pc,d0.w) ; jump to apt location in ROM
00000394 60F2                       		bra.s	MainGameLoop
00000396                            ; ===========================================================================
00000396                            ; ---------------------------------------------------------------------------
00000396                            ; Main game mode array
00000396                            ; ---------------------------------------------------------------------------
00000396                            
00000396                            GameModeArray:
00000396 6000 0000                  		bra.w	SegaScreen	; Sega Screen ($00)
0000039A                            ; ===========================================================================
0000039A 6000 0000                  		bra.w	TitleScreen	; Title	Screen ($04)
0000039E                            ; ===========================================================================
0000039E 6000 0000                  		bra.w	Level		; Demo Mode ($08)
000003A2                            ; ===========================================================================
000003A2 6000 0000                  		bra.w	Level		; Normal Level ($0C)
000003A6                            ; ===========================================================================
000003A6 6000 0000                  		bra.w	SpecialStage	; Special Stage	($10)
000003AA                            ; ===========================================================================
000003AA 6000 0000                  		bra.w	ContinueScreen	; Continue Screen ($14)
000003AE                            ; ===========================================================================
000003AE 6000 0000                  		bra.w	EndingSequence	; End of game sequence ($18)
000003B2                            ; ===========================================================================
000003B2 6000 0000                  		bra.w	Credits		; Credits ($1C)
000003B6                            ; ===========================================================================
000003B6 4EF9 0000 0000             		jmp	Minecraft	; Minecraft ($20)	
000003BC                            ; ===========================================================================
000003BC                            
000003BC                            CheckSumError:
000003BC 6100 0000                  		bsr.w	VDPSetupGame
000003C0 23FC C000 0000 00C0 0004   		move.l	#$C0000000,($C00004).l ; set VDP to CRAM write
000003CA 7E3F                       		moveq	#$3F,d7
000003CC                            
000003CC                            CheckSum_Red:
000003CC 33FC 000E 00C0 0000        		move.w	#$E,($C00000).l	; fill screen with colour red
000003D4 51CF FFF6                  		dbf	d7,CheckSum_Red	; repeat $3F more times
000003D8                            
000003D8                            CheckSum_Loop:
000003D8 60FE                       		bra.s	CheckSum_Loop
000003DA                            ; ===========================================================================
000003DA                            
000003DA                            BusError:
000003DA 11FC 0002 FC44             		move.b	#2,($FFFFFC44).w
000003E0 6000                       		bra.s	loc_43A
000003E2                            ; ===========================================================================
000003E2                            
000003E2                            AddressError:
000003E2 11FC 0004 FC44             		move.b	#4,($FFFFFC44).w
000003E8 6000                       		bra.s	loc_43A
000003EA                            ; ===========================================================================
000003EA                            
000003EA                            IllegalInstr:
000003EA 11FC 0006 FC44             		move.b	#6,($FFFFFC44).w
000003F0 54AF 0002                  		addq.l	#2,2(sp)
000003F4 6000                       		bra.s	loc_462
000003F6                            ; ===========================================================================
000003F6                            
000003F6                            ZeroDivide:
000003F6 11FC 0008 FC44             		move.b	#8,($FFFFFC44).w
000003FC 6000                       		bra.s	loc_462
000003FE                            ; ===========================================================================
000003FE                            
000003FE                            ChkInstr:
000003FE 11FC 000A FC44             		move.b	#$A,($FFFFFC44).w
00000404 6000                       		bra.s	loc_462
00000406                            ; ===========================================================================
00000406                            
00000406                            TrapvInstr:
00000406 11FC 000C FC44             		move.b	#$C,($FFFFFC44).w
0000040C 6000                       		bra.s	loc_462
0000040E                            ; ===========================================================================
0000040E                            
0000040E                            PrivilegeViol:
0000040E 11FC 000E FC44             		move.b	#$E,($FFFFFC44).w
00000414 6000                       		bra.s	loc_462
00000416                            ; ===========================================================================
00000416                            
00000416                            Trace:
00000416 11FC 0010 FC44             		move.b	#$10,($FFFFFC44).w
0000041C 6000                       		bra.s	loc_462
0000041E                            ; ===========================================================================
0000041E                            
0000041E                            Line1010Emu:
0000041E 11FC 0012 FC44             		move.b	#$12,($FFFFFC44).w
00000424 54AF 0002                  		addq.l	#2,2(sp)
00000428 6000                       		bra.s	loc_462
0000042A                            ; ===========================================================================
0000042A                            
0000042A                            Line1111Emu:
0000042A 11FC 0014 FC44             		move.b	#$14,($FFFFFC44).w
00000430 54AF 0002                  		addq.l	#2,2(sp)
00000434 6000                       		bra.s	loc_462
00000436                            ; ===========================================================================
00000436                            
00000436                            ErrorExcept:
00000436 11FC 0000 FC44             		move.b	#0,($FFFFFC44).w
0000043C 6000                       		bra.s	loc_462
0000043E                            ; ===========================================================================
0000043E                            
0000043E                            loc_43A:
0000043E 46FC 2700                  		move	#$2700,sr
00000442 544F                       		addq.w	#2,sp
00000444 21DF FC40                  		move.l	(sp)+,($FFFFFC40).w
00000448 544F                       		addq.w	#2,sp
0000044A 48F8 FFFF FC00             		movem.l	d0-a7,($FFFFFC00).w
00000450 6100 0000                  		bsr.w	ShowErrorMsg
00000454 202F 0002                  		move.l	2(sp),d0
00000458 6100 0000                  		bsr.w	sub_5BA
0000045C 2038 FC40                  		move.l	($FFFFFC40).w,d0
00000460 6100 0000                  		bsr.w	sub_5BA
00000464 6000                       		bra.s	loc_478
00000466                            ; ===========================================================================
00000466                            
00000466                            loc_462:
00000466 46FC 2700                  		move	#$2700,sr
0000046A 48F8 FFFF FC00             		movem.l	d0-a7,($FFFFFC00).w
00000470 6100 0000                  		bsr.w	ShowErrorMsg
00000474 202F 0002                  		move.l	2(sp),d0
00000478 6100 0000                  		bsr.w	sub_5BA
0000047C                            
0000047C                            loc_478:
0000047C 6100 0000                  		bsr.w	ErrorWaitForC
00000480 4CF8 FFFF FC00             		movem.l	($FFFFFC00).w,d0-a7
00000486 46FC 2300                  		move	#$2300,sr
0000048A 4E73                       		rte	
0000048C                            
0000048C                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000048C                            
0000048C                            
0000048C                            ShowErrorMsg:				; XREF: loc_43A; loc_462
0000048C 4DF9 00C0 0000             		lea	($C00000).l,a6
00000492 23FC 7800 0003 00C0 0004   		move.l	#$78000003,($C00004).l
0000049C 41F9 0000 0000             		lea	(Art_Text).l,a0
000004A2 323C 027F                  		move.w	#$27F,d1
000004A6                            
000004A6                            Error_LoadGfx:
000004A6 3C98                       		move.w	(a0)+,(a6)
000004A8 51C9 FFFC                  		dbf	d1,Error_LoadGfx
000004AC 7000                       		moveq	#0,d0		; clear	d0
000004AE 1038 FC44                  		move.b	($FFFFFC44).w,d0 ; load	error code
000004B2 303B 0000                  		move.w	ErrorText(pc,d0.w),d0
000004B6 41FB 0000                  		lea	ErrorText(pc,d0.w),a0
000004BA 23FC 4604 0003 00C0 0004   		move.l	#$46040003,($C00004).l ; position
000004C4 7212                       		moveq	#$12,d1		; number of characters
000004C6                            
000004C6                            Error_LoopChars:
000004C6 7000                       		moveq	#0,d0
000004C8 1018                       		move.b	(a0)+,d0
000004CA 0640 0790                  		addi.w	#$790,d0
000004CE 3C80                       		move.w	d0,(a6)
000004D0 51C9 FFF4                  		dbf	d1,Error_LoopChars ; repeat for	number of characters
000004D4 4E75                       		rts	
000004D6                            ; End of function ShowErrorMsg
000004D6                            
000004D6                            ; ===========================================================================
000004D6 0000 0000                  ErrorText:	dc.w asc_4E8-ErrorText,	asc_4FB-ErrorText ; XREF: ShowErrorMsg
000004DA 0000 0000                  		dc.w asc_50E-ErrorText,	asc_521-ErrorText
000004DE 0000 0000                  		dc.w asc_534-ErrorText,	asc_547-ErrorText
000004E2 0000 0000                  		dc.w asc_55A-ErrorText,	asc_56D-ErrorText
000004E6 0000 0000                  		dc.w asc_580-ErrorText,	asc_593-ErrorText
000004EA 0000                       		dc.w asc_5A6-ErrorText
000004EC 4552 524F 5220 4558 4345+  asc_4E8:	dc.b 'ERROR EXCEPTION    '
000004FF 4255 5320 4552 524F 5220+  asc_4FB:	dc.b 'BUS ERROR          '
00000512 4144 4452 4553 5320 4552+  asc_50E:	dc.b 'ADDRESS ERROR      '
00000525 494C 4C45 4741 4C20 494E+  asc_521:	dc.b 'ILLEGAL INSTRUCTION'
00000538 4045 524F 2044 4956 4944+  asc_534:	dc.b '@ERO DIVIDE        '
0000054B 4348 4B20 494E 5354 5255+  asc_547:	dc.b 'CHK INSTRUCTION    '
0000055E 5452 4150 5620 494E 5354+  asc_55A:	dc.b 'TRAPV INSTRUCTION  '
00000571 5052 4956 494C 4547 4520+  asc_56D:	dc.b 'PRIVILEGE VIOLATION'
00000584 5452 4143 4520 2020 2020+  asc_580:	dc.b 'TRACE              '
00000597 4C49 4E45 2031 3031 3020+  asc_593:	dc.b 'LINE 1010 EMULATOR '
000005AA 4C49 4E45 2031 3131 3120+  asc_5A6:	dc.b 'LINE 1111 EMULATOR '
000005BE 00                         		even
000005BE                            
000005BE                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000005BE                            
000005BE                            
000005BE                            sub_5BA:				; XREF: loc_43A; loc_462
000005BE 3CBC 07CA                  		move.w	#$7CA,(a6)
000005C2 7407                       		moveq	#7,d2
000005C4                            
000005C4                            loc_5C0:
000005C4 E998                       		rol.l	#4,d0
000005C6 6100                       		bsr.s	sub_5CA
000005C8 51CA FFFA                  		dbf	d2,loc_5C0
000005CC 4E75                       		rts	
000005CE                            ; End of function sub_5BA
000005CE                            
000005CE                            
000005CE                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000005CE                            
000005CE                            
000005CE                            sub_5CA:				; XREF: sub_5BA
000005CE 3200                       		move.w	d0,d1
000005D0 0241 000F                  		andi.w	#$F,d1
000005D4 0C41 000A                  		cmpi.w	#$A,d1
000005D8 6500                       		bcs.s	loc_5D8
000005DA 5E41                       		addq.w	#7,d1
000005DC                            
000005DC                            loc_5D8:
000005DC 0641 07C0                  		addi.w	#$7C0,d1
000005E0 3C81                       		move.w	d1,(a6)
000005E2 4E75                       		rts	
000005E4                            ; End of function sub_5CA
000005E4                            
000005E4                            
000005E4                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000005E4                            
000005E4                            
000005E4                            ErrorWaitForC:				; XREF: loc_478
000005E4 6100 0000                  		bsr.w	ReadJoypads
000005E8 0C38 0020 F605             		cmpi.b	#$20,($FFFFF605).w ; is	button C pressed?
000005EE 6600 FFF4                  		bne.w	ErrorWaitForC	; if not, branch
000005F2 4E75                       		rts	
000005F4                            ; End of function ErrorWaitForC
000005F4                            
000005F4                            ; ===========================================================================
000005F4                            
000005F4                            Art_Text:	incbin	artunc\menutext.bin	; text used in level select and debug mode
00000D34                            Art_Text_end:		even
00000D34                            
00000D34                            ; ===========================================================================
00000D34                            ;VBlank
00000D34                            loc_B10:				; XREF: Vectors
00000D34 48E7 FFFE                  		movem.l	d0-a6,-(sp)
00000D38 4A38 F62A                  		tst.b	($FFFFF62A).w
00000D3C 6700                       		beq.s	loc_B88
00000D3E 3039 00C0 0004             		move.w	($C00004).l,d0
00000D44 23FC 4000 0010 00C0 0004   		move.l	#$40000010,($C00004).l
00000D4E 23F8 F616 00C0 0000        		move.l	($FFFFF616).w,($C00000).l
00000D56 0838 0006 FFF8             		btst	#6,($FFFFFFF8).w
00000D5C 6700                       		beq.s	loc_B42
00000D5E 303C 0700                  		move.w	#$700,d0
00000D62                            
00000D62                            loc_B3E:
00000D62 51C8 FFFE                  		dbf	d0,loc_B3E
00000D66                            
00000D66                            loc_B42:
00000D66 1038 F62A                  		move.b	($FFFFF62A).w,d0
00000D6A 11FC 0000 F62A             		move.b	#0,($FFFFF62A).w
00000D70 31FC 0001 F644             		move.w	#1,($FFFFF644).w
00000D76 0240 003E                  		andi.w	#$3E,d0
00000D7A 303B 0000                  		move.w	off_B6E(pc,d0.w),d0
00000D7E 4EBB 0000                  		jsr	off_B6E(pc,d0.w)
00000D82                            
00000D82                            loc_B5E:				; XREF: loc_B88
00000D82 4EB9 0000 0000             		jsr	sub_71B4C
00000D88                            
00000D88                            loc_B64:				; XREF: loc_D50
00000D88 52B8 FE0C                  		addq.l	#1,($FFFFFE0C).w
00000D8C 4CDF 7FFF                  		movem.l	(sp)+,d0-a6
00000D90 4E73                       		rte	
00000D92                            ; ===========================================================================
00000D92 0000 0000                  off_B6E:	dc.w loc_B88-off_B6E, loc_C32-off_B6E
00000D96 0000 0000                  		dc.w loc_C44-off_B6E, loc_C5E-off_B6E
00000D9A 0000 0000                  		dc.w loc_C6E-off_B6E, loc_DA6-off_B6E
00000D9E 0000 0000                  		dc.w loc_E72-off_B6E, loc_F8A-off_B6E
00000DA2 0000 0000                  		dc.w loc_C64-off_B6E, loc_F9A-off_B6E
00000DA6 0000 0000                  		dc.w loc_C36-off_B6E, loc_FA6-off_B6E
00000DAA 0000                       		dc.w loc_E72-off_B6E
00000DAC                            ; ===========================================================================
00000DAC                            
00000DAC                            loc_B88:				; XREF: loc_B10; off_B6E
00000DAC 0C38 008C F600             		cmpi.b	#$8C,($FFFFF600).w
00000DB2 6700                       		beq.s	loc_B9A
00000DB4 0C38 000C F600             		cmpi.b	#$C,($FFFFF600).w
00000DBA 6600 FFC6                  		bne.w	loc_B5E
00000DBE                            
00000DBE                            loc_B9A:
00000DBE 0C38 0001 FE10             		cmpi.b	#1,($FFFFFE10).w ; is level LZ ?
00000DC4 6600 FFBC                  		bne.w	loc_B5E		; if not, branch
00000DC8 3039 00C0 0004             		move.w	($C00004).l,d0
00000DCE 0838 0006 FFF8             		btst	#6,($FFFFFFF8).w
00000DD4 6700                       		beq.s	loc_BBA
00000DD6 303C 0700                  		move.w	#$700,d0
00000DDA                            
00000DDA                            loc_BB6:
00000DDA 51C8 FFFE                  		dbf	d0,loc_BB6
00000DDE                            
00000DDE                            loc_BBA:
00000DDE 31FC 0001 F644             		move.w	#1,($FFFFF644).w
00000DE4 33FC 0100 00A1 1100        		move.w	#$100,($A11100).l
00000DEC                            
00000DEC                            loc_BC8:
00000DEC 0839 0000 00A1 1100        		btst	#0,($A11100).l
00000DF4 66F6                       		bne.s	loc_BC8
00000DF6 4A38 F64E                  		tst.b	($FFFFF64E).w
00000DFA 6600                       		bne.s	loc_BFE
00000DFC 4BF9 00C0 0004             		lea	($C00004).l,a5
00000E02 2ABC 9400 9340             		move.l	#$94009340,(a5)
00000E08 2ABC 96FD 9580             		move.l	#$96FD9580,(a5)
00000E0E 3ABC 977F                  		move.w	#$977F,(a5)
00000E12 3ABC C000                  		move.w	#$C000,(a5)
00000E16 31FC 0080 F640             		move.w	#$80,($FFFFF640).w
00000E1C 3AB8 F640                  		move.w	($FFFFF640).w,(a5)
00000E20 6000                       		bra.s	loc_C22
00000E22                            ; ===========================================================================
00000E22                            
00000E22                            loc_BFE:				; XREF: loc_BC8
00000E22 4BF9 00C0 0004             		lea	($C00004).l,a5
00000E28 2ABC 9400 9340             		move.l	#$94009340,(a5)
00000E2E 2ABC 96FD 9540             		move.l	#$96FD9540,(a5)
00000E34 3ABC 977F                  		move.w	#$977F,(a5)
00000E38 3ABC C000                  		move.w	#$C000,(a5)
00000E3C 31FC 0080 F640             		move.w	#$80,($FFFFF640).w
00000E42 3AB8 F640                  		move.w	($FFFFF640).w,(a5)
00000E46                            
00000E46                            loc_C22:				; XREF: loc_BC8
00000E46 3AB8 F624                  		move.w	($FFFFF624).w,(a5)
00000E4A 33FC 0000 00A1 1100        		move.w	#0,($A11100).l
00000E52 6000 FF2E                  		bra.w	loc_B5E
00000E56                            ; ===========================================================================
00000E56                            
00000E56                            loc_C32:				; XREF: off_B6E
00000E56 6100 0000                  		bsr.w	sub_106E
00000E5A                            
00000E5A                            loc_C36:				; XREF: off_B6E
00000E5A 4A78 F614                  		tst.w	($FFFFF614).w
00000E5E 6700 0000                  		beq.w	locret_C42
00000E62 5378 F614                  		subq.w	#1,($FFFFF614).w
00000E66                            
00000E66                            locret_C42:
00000E66 4E75                       		rts	
00000E68                            ; ===========================================================================
00000E68                            
00000E68                            loc_C44:				; XREF: off_B6E
00000E68 6100 0000                  		bsr.w	sub_106E
00000E6C 6100 0000                  		bsr.w	sub_6886
00000E70 6100 0000                  		bsr.w	sub_1642
00000E74 4A78 F614                  		tst.w	($FFFFF614).w
00000E78 6700 0000                  		beq.w	locret_C5C
00000E7C 5378 F614                  		subq.w	#1,($FFFFF614).w
00000E80                            
00000E80                            locret_C5C:
00000E80 4E75                       		rts	
00000E82                            ; ===========================================================================
00000E82                            
00000E82                            loc_C5E:				; XREF: off_B6E
00000E82 6100 0000                  		bsr.w	sub_106E
00000E86 4E75                       		rts	
00000E88                            ; ===========================================================================
00000E88                            
00000E88                            loc_C64:				; XREF: off_B6E
00000E88 0C38 0010 F600             		cmpi.b	#$10,($FFFFF600).w ; is	game mode = $10	(special stage)	?
00000E8E 6700 0000                  		beq.w	loc_DA6		; if yes, branch
00000E92                            
00000E92                            loc_C6E:				; XREF: off_B6E
00000E92 33FC 0100 00A1 1100        		move.w	#$100,($A11100).l ; stop the Z80
00000E9A                            
00000E9A                            loc_C76:
00000E9A 0839 0000 00A1 1100        		btst	#0,($A11100).l	; has Z80 stopped?
00000EA2 66F6                       		bne.s	loc_C76		; if not, branch
00000EA4 6100 0000                  		bsr.w	ReadJoypads
00000EA8 4A38 F64E                  		tst.b	($FFFFF64E).w
00000EAC 6600                       		bne.s	loc_CB0
00000EAE 4BF9 00C0 0004             		lea	($C00004).l,a5
00000EB4 2ABC 9400 9340             		move.l	#$94009340,(a5)
00000EBA 2ABC 96FD 9580             		move.l	#$96FD9580,(a5)
00000EC0 3ABC 977F                  		move.w	#$977F,(a5)
00000EC4 3ABC C000                  		move.w	#$C000,(a5)
00000EC8 31FC 0080 F640             		move.w	#$80,($FFFFF640).w
00000ECE 3AB8 F640                  		move.w	($FFFFF640).w,(a5)
00000ED2 6000                       		bra.s	loc_CD4
00000ED4                            ; ===========================================================================
00000ED4                            
00000ED4                            loc_CB0:				; XREF: loc_C76
00000ED4 4BF9 00C0 0004             		lea	($C00004).l,a5
00000EDA 2ABC 9400 9340             		move.l	#$94009340,(a5)
00000EE0 2ABC 96FD 9540             		move.l	#$96FD9540,(a5)
00000EE6 3ABC 977F                  		move.w	#$977F,(a5)
00000EEA 3ABC C000                  		move.w	#$C000,(a5)
00000EEE 31FC 0080 F640             		move.w	#$80,($FFFFF640).w
00000EF4 3AB8 F640                  		move.w	($FFFFF640).w,(a5)
00000EF8                            
00000EF8                            loc_CD4:				; XREF: loc_C76
00000EF8 3AB8 F624                  		move.w	($FFFFF624).w,(a5)
00000EFC 4BF9 00C0 0004             		lea	($C00004).l,a5
00000F02 2ABC 9401 93C0             		move.l	#$940193C0,(a5)
00000F08 2ABC 96E6 9500             		move.l	#$96E69500,(a5)
00000F0E 3ABC 977F                  		move.w	#$977F,(a5)
00000F12 3ABC 7C00                  		move.w	#$7C00,(a5)
00000F16 31FC 0083 F640             		move.w	#$83,($FFFFF640).w
00000F1C 3AB8 F640                  		move.w	($FFFFF640).w,(a5)
00000F20 4BF9 00C0 0004             		lea	($C00004).l,a5
00000F26 2ABC 9401 9340             		move.l	#$94019340,(a5)
00000F2C 2ABC 96FC 9500             		move.l	#$96FC9500,(a5)
00000F32 3ABC 977F                  		move.w	#$977F,(a5)
00000F36 3ABC 7800                  		move.w	#$7800,(a5)
00000F3A 31FC 0083 F640             		move.w	#$83,($FFFFF640).w
00000F40 3AB8 F640                  		move.w	($FFFFF640).w,(a5)
00000F44 4A38 F767                  		tst.b	($FFFFF767).w
00000F48 6700                       		beq.s	loc_D50
00000F4A 4BF9 00C0 0004             		lea	($C00004).l,a5
00000F50 2ABC 9401 9370             		move.l	#$94019370,(a5)
00000F56 2ABC 96E4 9500             		move.l	#$96E49500,(a5)
00000F5C 3ABC 977F                  		move.w	#$977F,(a5)
00000F60 3ABC 7000                  		move.w	#$7000,(a5)
00000F64 31FC 0083 F640             		move.w	#$83,($FFFFF640).w
00000F6A 3AB8 F640                  		move.w	($FFFFF640).w,(a5)
00000F6E 11FC 0000 F767             		move.b	#0,($FFFFF767).w
00000F74                            
00000F74                            loc_D50:
00000F74 33FC 0000 00A1 1100        		move.w	#0,($A11100).l
00000F7C 4CF8 00FF F700             		movem.l	($FFFFF700).w,d0-d7
00000F82 48F8 00FF FF10             		movem.l	d0-d7,($FFFFFF10).w
00000F88 4CF8 0003 F754             		movem.l	($FFFFF754).w,d0-d1
00000F8E 48F8 0003 FF30             		movem.l	d0-d1,($FFFFFF30).w
00000F94 0C38 0060 F625             		cmpi.b	#$60,($FFFFF625).w
00000F9A 6400                       		bcc.s	Demo_Time
00000F9C 11FC 0001 F64F             		move.b	#1,($FFFFF64F).w
00000FA2 588F                       		addq.l	#4,sp
00000FA4 6000 FDE2                  		bra.w	loc_B64
00000FA8                            
00000FA8                            ; ---------------------------------------------------------------------------
00000FA8                            ; Subroutine to	run a demo for an amount of time
00000FA8                            ; ---------------------------------------------------------------------------
00000FA8                            
00000FA8                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00000FA8                            
00000FA8                            
00000FA8                            Demo_Time:				; XREF: loc_D50; PalToCRAM
00000FA8 6100 0000                  		bsr.w	LoadTilesAsYouMove
00000FAC 4EB9 0000 0000             		jsr	AniArt_Load
00000FB2 4EB9 0000 0000             		jsr	HudUpdate
00000FB8 6100 0000                  		bsr.w	sub_165E
00000FBC 4A78 F614                  		tst.w	($FFFFF614).w	; is there time	left on	the demo?
00000FC0 6700 0000                  		beq.w	Demo_TimeEnd	; if not, branch
00000FC4 5378 F614                  		subq.w	#1,($FFFFF614).w ; subtract 1 from time	left
00000FC8                            
00000FC8                            Demo_TimeEnd:
00000FC8 4E75                       		rts	
00000FCA                            ; End of function Demo_Time
00000FCA                            
00000FCA                            ; ===========================================================================
00000FCA                            
00000FCA                            loc_DA6:				; XREF: off_B6E
00000FCA 33FC 0100 00A1 1100        		move.w	#$100,($A11100).l ; stop the Z80
00000FD2                            
00000FD2                            loc_DAE:
00000FD2 0839 0000 00A1 1100        		btst	#0,($A11100).l	; has Z80 stopped?
00000FDA 66F6                       		bne.s	loc_DAE		; if not, branch
00000FDC 6100 0000                  		bsr.w	ReadJoypads
00000FE0 4BF9 00C0 0004             		lea	($C00004).l,a5
00000FE6 2ABC 9400 9340             		move.l	#$94009340,(a5)
00000FEC 2ABC 96FD 9580             		move.l	#$96FD9580,(a5)
00000FF2 3ABC 977F                  		move.w	#$977F,(a5)
00000FF6 3ABC C000                  		move.w	#$C000,(a5)
00000FFA 31FC 0080 F640             		move.w	#$80,($FFFFF640).w
00001000 3AB8 F640                  		move.w	($FFFFF640).w,(a5)
00001004 4BF9 00C0 0004             		lea	($C00004).l,a5
0000100A 2ABC 9401 9340             		move.l	#$94019340,(a5)
00001010 2ABC 96FC 9500             		move.l	#$96FC9500,(a5)
00001016 3ABC 977F                  		move.w	#$977F,(a5)
0000101A 3ABC 7800                  		move.w	#$7800,(a5)
0000101E 31FC 0083 F640             		move.w	#$83,($FFFFF640).w
00001024 3AB8 F640                  		move.w	($FFFFF640).w,(a5)
00001028 4BF9 00C0 0004             		lea	($C00004).l,a5
0000102E 2ABC 9401 93C0             		move.l	#$940193C0,(a5)
00001034 2ABC 96E6 9500             		move.l	#$96E69500,(a5)
0000103A 3ABC 977F                  		move.w	#$977F,(a5)
0000103E 3ABC 7C00                  		move.w	#$7C00,(a5)
00001042 31FC 0083 F640             		move.w	#$83,($FFFFF640).w
00001048 3AB8 F640                  		move.w	($FFFFF640).w,(a5)
0000104C 33FC 0000 00A1 1100        		move.w	#0,($A11100).l
00001054 6100 0000                  		bsr.w	PalCycle_SS
00001058 4A38 F767                  		tst.b	($FFFFF767).w
0000105C 6700                       		beq.s	loc_E64
0000105E 4BF9 00C0 0004             		lea	($C00004).l,a5
00001064 2ABC 9401 9370             		move.l	#$94019370,(a5)
0000106A 2ABC 96E4 9500             		move.l	#$96E49500,(a5)
00001070 3ABC 977F                  		move.w	#$977F,(a5)
00001074 3ABC 7000                  		move.w	#$7000,(a5)
00001078 31FC 0083 F640             		move.w	#$83,($FFFFF640).w
0000107E 3AB8 F640                  		move.w	($FFFFF640).w,(a5)
00001082 11FC 0000 F767             		move.b	#0,($FFFFF767).w
00001088                            
00001088                            loc_E64:
00001088 4A78 F614                  		tst.w	($FFFFF614).w
0000108C 6700 0000                  		beq.w	locret_E70
00001090 5378 F614                  		subq.w	#1,($FFFFF614).w
00001094                            
00001094                            locret_E70:
00001094 4E75                       		rts	
00001096                            ; ===========================================================================
00001096                            
00001096                            loc_E72:				; XREF: off_B6E
00001096 33FC 0100 00A1 1100        		move.w	#$100,($A11100).l ; stop the Z80
0000109E                            
0000109E                            loc_E7A:
0000109E 0839 0000 00A1 1100        		btst	#0,($A11100).l	; has Z80 stopped?
000010A6 66F6                       		bne.s	loc_E7A		; if not, branch
000010A8 6100 0000                  		bsr.w	ReadJoypads
000010AC 4A38 F64E                  		tst.b	($FFFFF64E).w
000010B0 6600                       		bne.s	loc_EB4
000010B2 4BF9 00C0 0004             		lea	($C00004).l,a5
000010B8 2ABC 9400 9340             		move.l	#$94009340,(a5)
000010BE 2ABC 96FD 9580             		move.l	#$96FD9580,(a5)
000010C4 3ABC 977F                  		move.w	#$977F,(a5)
000010C8 3ABC C000                  		move.w	#$C000,(a5)
000010CC 31FC 0080 F640             		move.w	#$80,($FFFFF640).w
000010D2 3AB8 F640                  		move.w	($FFFFF640).w,(a5)
000010D6 6000                       		bra.s	loc_ED8
000010D8                            ; ===========================================================================
000010D8                            
000010D8                            loc_EB4:				; XREF: loc_E7A
000010D8 4BF9 00C0 0004             		lea	($C00004).l,a5
000010DE 2ABC 9400 9340             		move.l	#$94009340,(a5)
000010E4 2ABC 96FD 9540             		move.l	#$96FD9540,(a5)
000010EA 3ABC 977F                  		move.w	#$977F,(a5)
000010EE 3ABC C000                  		move.w	#$C000,(a5)
000010F2 31FC 0080 F640             		move.w	#$80,($FFFFF640).w
000010F8 3AB8 F640                  		move.w	($FFFFF640).w,(a5)
000010FC                            
000010FC                            loc_ED8:				; XREF: loc_E7A
000010FC 3AB8 F624                  		move.w	($FFFFF624).w,(a5)
00001100 4BF9 00C0 0004             		lea	($C00004).l,a5
00001106 2ABC 9401 93C0             		move.l	#$940193C0,(a5)
0000110C 2ABC 96E6 9500             		move.l	#$96E69500,(a5)
00001112                            
00001112                            loc_EEE:
00001112 3ABC 977F                  		move.w	#$977F,(a5)
00001116 3ABC 7C00                  		move.w	#$7C00,(a5)
0000111A 31FC 0083 F640             		move.w	#$83,($FFFFF640).w
00001120 3AB8 F640                  		move.w	($FFFFF640).w,(a5)
00001124 4BF9 00C0 0004             		lea	($C00004).l,a5
0000112A 2ABC 9401 9340             		move.l	#$94019340,(a5)
00001130 2ABC 96FC 9500             		move.l	#$96FC9500,(a5)
00001136 3ABC 977F                  		move.w	#$977F,(a5)
0000113A 3ABC 7800                  		move.w	#$7800,(a5)
0000113E 31FC 0083 F640             		move.w	#$83,($FFFFF640).w
00001144 3AB8 F640                  		move.w	($FFFFF640).w,(a5)
00001148 4A38 F767                  		tst.b	($FFFFF767).w
0000114C 6700                       		beq.s	loc_F54
0000114E 4BF9 00C0 0004             		lea	($C00004).l,a5
00001154 2ABC 9401 9370             		move.l	#$94019370,(a5)
0000115A 2ABC 96E4 9500             		move.l	#$96E49500,(a5)
00001160 3ABC 977F                  		move.w	#$977F,(a5)
00001164 3ABC 7000                  		move.w	#$7000,(a5)
00001168 31FC 0083 F640             		move.w	#$83,($FFFFF640).w
0000116E 3AB8 F640                  		move.w	($FFFFF640).w,(a5)
00001172 11FC 0000 F767             		move.b	#0,($FFFFF767).w
00001178                            
00001178                            loc_F54:
00001178 33FC 0000 00A1 1100        		move.w	#0,($A11100).l	; start	the Z80
00001180 4CF8 00FF F700             		movem.l	($FFFFF700).w,d0-d7
00001186 48F8 00FF FF10             		movem.l	d0-d7,($FFFFFF10).w
0000118C 4CF8 0003 F754             		movem.l	($FFFFF754).w,d0-d1
00001192 48F8 0003 FF30             		movem.l	d0-d1,($FFFFFF30).w
00001198 6100 0000                  		bsr.w	LoadTilesAsYouMove
0000119C 4EB9 0000 0000             		jsr	AniArt_Load
000011A2 4EB9 0000 0000             		jsr	HudUpdate
000011A8 6100 0000                  		bsr.w	sub_1642
000011AC 4E75                       		rts	
000011AE                            ; ===========================================================================
000011AE                            
000011AE                            loc_F8A:				; XREF: off_B6E
000011AE 6100 0000                  		bsr.w	sub_106E
000011B2 5238 F628                  		addq.b	#1,($FFFFF628).w
000011B6 11FC 000E F62A             		move.b	#$E,($FFFFF62A).w
000011BC 4E75                       		rts	
000011BE                            ; ===========================================================================
000011BE                            
000011BE                            loc_F9A:				; XREF: off_B6E
000011BE 6100 0000                  		bsr.w	sub_106E
000011C2 3AB8 F624                  		move.w	($FFFFF624).w,(a5)
000011C6 6000 0000                  		bra.w	sub_1642
000011CA                            ; ===========================================================================
000011CA                            
000011CA                            loc_FA6:				; XREF: off_B6E
000011CA 33FC 0100 00A1 1100        		move.w	#$100,($A11100).l ; stop the Z80
000011D2                            
000011D2                            loc_FAE:
000011D2 0839 0000 00A1 1100        		btst	#0,($A11100).l	; has Z80 stopped?
000011DA 66F6                       		bne.s	loc_FAE		; if not, branch
000011DC 6100 0000                  		bsr.w	ReadJoypads
000011E0 4BF9 00C0 0004             		lea	($C00004).l,a5
000011E6 2ABC 9400 9340             		move.l	#$94009340,(a5)
000011EC 2ABC 96FD 9580             		move.l	#$96FD9580,(a5)
000011F2 3ABC 977F                  		move.w	#$977F,(a5)
000011F6 3ABC C000                  		move.w	#$C000,(a5)
000011FA 31FC 0080 F640             		move.w	#$80,($FFFFF640).w
00001200 3AB8 F640                  		move.w	($FFFFF640).w,(a5)
00001204 4BF9 00C0 0004             		lea	($C00004).l,a5
0000120A 2ABC 9401 9340             		move.l	#$94019340,(a5)
00001210 2ABC 96FC 9500             		move.l	#$96FC9500,(a5)
00001216 3ABC 977F                  		move.w	#$977F,(a5)
0000121A 3ABC 7800                  		move.w	#$7800,(a5)
0000121E 31FC 0083 F640             		move.w	#$83,($FFFFF640).w
00001224 3AB8 F640                  		move.w	($FFFFF640).w,(a5)
00001228 4BF9 00C0 0004             		lea	($C00004).l,a5
0000122E 2ABC 9401 93C0             		move.l	#$940193C0,(a5)
00001234 2ABC 96E6 9500             		move.l	#$96E69500,(a5)
0000123A 3ABC 977F                  		move.w	#$977F,(a5)
0000123E 3ABC 7C00                  		move.w	#$7C00,(a5)
00001242 31FC 0083 F640             		move.w	#$83,($FFFFF640).w
00001248 3AB8 F640                  		move.w	($FFFFF640).w,(a5)
0000124C 33FC 0000 00A1 1100        		move.w	#0,($A11100).l	; start	the Z80
00001254 4A38 F767                  		tst.b	($FFFFF767).w
00001258 6700                       		beq.s	loc_1060
0000125A 4BF9 00C0 0004             		lea	($C00004).l,a5
00001260 2ABC 9401 9370             		move.l	#$94019370,(a5)
00001266 2ABC 96E4 9500             		move.l	#$96E49500,(a5)
0000126C 3ABC 977F                  		move.w	#$977F,(a5)
00001270 3ABC 7000                  		move.w	#$7000,(a5)
00001274 31FC 0083 F640             		move.w	#$83,($FFFFF640).w
0000127A 3AB8 F640                  		move.w	($FFFFF640).w,(a5)
0000127E 11FC 0000 F767             		move.b	#0,($FFFFF767).w
00001284                            
00001284                            loc_1060:
00001284 4A78 F614                  		tst.w	($FFFFF614).w
00001288 6700 0000                  		beq.w	locret_106C
0000128C 5378 F614                  		subq.w	#1,($FFFFF614).w
00001290                            
00001290                            locret_106C:
00001290 4E75                       		rts	
00001292                            
00001292                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00001292                            
00001292                            
00001292                            sub_106E:				; XREF: loc_C32; et al
00001292 33FC 0100 00A1 1100        		move.w	#$100,($A11100).l ; stop the Z80
0000129A                            
0000129A                            loc_1076:
0000129A 0839 0000 00A1 1100        		btst	#0,($A11100).l	; has Z80 stopped?
000012A2 66F6                       		bne.s	loc_1076	; if not, branch
000012A4 6100 0000                  		bsr.w	ReadJoypads
000012A8 4A38 F64E                  		tst.b	($FFFFF64E).w
000012AC 6600                       		bne.s	loc_10B0
000012AE 4BF9 00C0 0004             		lea	($C00004).l,a5
000012B4 2ABC 9400 9340             		move.l	#$94009340,(a5)
000012BA 2ABC 96FD 9580             		move.l	#$96FD9580,(a5)
000012C0 3ABC 977F                  		move.w	#$977F,(a5)
000012C4 3ABC C000                  		move.w	#$C000,(a5)
000012C8 31FC 0080 F640             		move.w	#$80,($FFFFF640).w
000012CE 3AB8 F640                  		move.w	($FFFFF640).w,(a5)
000012D2 6000                       		bra.s	loc_10D4
000012D4                            ; ===========================================================================
000012D4                            
000012D4                            loc_10B0:				; XREF: sub_106E
000012D4 4BF9 00C0 0004             		lea	($C00004).l,a5
000012DA 2ABC 9400 9340             		move.l	#$94009340,(a5)
000012E0 2ABC 96FD 9540             		move.l	#$96FD9540,(a5)
000012E6 3ABC 977F                  		move.w	#$977F,(a5)
000012EA 3ABC C000                  		move.w	#$C000,(a5)
000012EE 31FC 0080 F640             		move.w	#$80,($FFFFF640).w
000012F4 3AB8 F640                  		move.w	($FFFFF640).w,(a5)
000012F8                            
000012F8                            loc_10D4:				; XREF: sub_106E
000012F8 4BF9 00C0 0004             		lea	($C00004).l,a5
000012FE 2ABC 9401 9340             		move.l	#$94019340,(a5)
00001304 2ABC 96FC 9500             		move.l	#$96FC9500,(a5)
0000130A 3ABC 977F                  		move.w	#$977F,(a5)
0000130E 3ABC 7800                  		move.w	#$7800,(a5)
00001312 31FC 0083 F640             		move.w	#$83,($FFFFF640).w
00001318 3AB8 F640                  		move.w	($FFFFF640).w,(a5)
0000131C 4BF9 00C0 0004             		lea	($C00004).l,a5
00001322 2ABC 9401 93C0             		move.l	#$940193C0,(a5)
00001328 2ABC 96E6 9500             		move.l	#$96E69500,(a5)
0000132E 3ABC 977F                  		move.w	#$977F,(a5)
00001332 3ABC 7C00                  		move.w	#$7C00,(a5)
00001336 31FC 0083 F640             		move.w	#$83,($FFFFF640).w
0000133C 3AB8 F640                  		move.w	($FFFFF640).w,(a5)
00001340 33FC 0000 00A1 1100        		move.w	#0,($A11100).l	; start	the Z80
00001348 4E75                       		rts	
0000134A                            ; End of function sub_106E
0000134A                            
0000134A                            ; ---------------------------------------------------------------------------
0000134A                            ; Subroutine to	move pallets from the RAM to CRAM
0000134A                            ; ---------------------------------------------------------------------------
0000134A                            
0000134A                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000134A                            
0000134A                            
0000134A                            PalToCRAM:
0000134A 46FC 2700                  		move	#$2700,sr
0000134E 4A78 F644                  		tst.w	($FFFFF644).w
00001352 6700                       		beq.s	locret_119C
00001354 31FC 0000 F644             		move.w	#0,($FFFFF644).w
0000135A 48E7 00C0                  		movem.l	a0-a1,-(sp)
0000135E 43F9 00C0 0000             		lea	($C00000).l,a1
00001364 41F8 FA80                  		lea	($FFFFFA80).w,a0 ; load	pallet from RAM
00001368 237C C000 0000 0004        		move.l	#$C0000000,4(a1) ; set VDP to CRAM write
00001370 2298                       		move.l	(a0)+,(a1)	; move pallet to CRAM
00001372 2298                       		move.l	(a0)+,(a1)
00001374 2298                       		move.l	(a0)+,(a1)
00001376 2298                       		move.l	(a0)+,(a1)
00001378 2298                       		move.l	(a0)+,(a1)
0000137A 2298                       		move.l	(a0)+,(a1)
0000137C 2298                       		move.l	(a0)+,(a1)
0000137E 2298                       		move.l	(a0)+,(a1)
00001380 2298                       		move.l	(a0)+,(a1)
00001382 2298                       		move.l	(a0)+,(a1)
00001384 2298                       		move.l	(a0)+,(a1)
00001386 2298                       		move.l	(a0)+,(a1)
00001388 2298                       		move.l	(a0)+,(a1)
0000138A 2298                       		move.l	(a0)+,(a1)
0000138C 2298                       		move.l	(a0)+,(a1)
0000138E 2298                       		move.l	(a0)+,(a1)
00001390 2298                       		move.l	(a0)+,(a1)
00001392 2298                       		move.l	(a0)+,(a1)
00001394 2298                       		move.l	(a0)+,(a1)
00001396 2298                       		move.l	(a0)+,(a1)
00001398 2298                       		move.l	(a0)+,(a1)
0000139A 2298                       		move.l	(a0)+,(a1)
0000139C 2298                       		move.l	(a0)+,(a1)
0000139E 2298                       		move.l	(a0)+,(a1)
000013A0 2298                       		move.l	(a0)+,(a1)
000013A2 2298                       		move.l	(a0)+,(a1)
000013A4 2298                       		move.l	(a0)+,(a1)
000013A6 2298                       		move.l	(a0)+,(a1)
000013A8 2298                       		move.l	(a0)+,(a1)
000013AA 2298                       		move.l	(a0)+,(a1)
000013AC 2298                       		move.l	(a0)+,(a1)
000013AE 2298                       		move.l	(a0)+,(a1)
000013B0 337C 8ADF 0004             		move.w	#$8ADF,4(a1)
000013B6 4CDF 0300                  		movem.l	(sp)+,a0-a1
000013BA 4A38 F64F                  		tst.b	($FFFFF64F).w
000013BE 6600                       		bne.s	loc_119E
000013C0                            
000013C0                            locret_119C:
000013C0 4E73                       		rte	
000013C2                            ; ===========================================================================
000013C2                            
000013C2                            loc_119E:				; XREF: PalToCRAM
000013C2 4238 F64F                  		clr.b	($FFFFF64F).w
000013C6 48E7 FFFE                  		movem.l	d0-a6,-(sp)
000013CA 6100 FBDC                  		bsr.w	Demo_Time
000013CE 4EB9 0000 0000             		jsr	sub_71B4C
000013D4 4CDF 7FFF                  		movem.l	(sp)+,d0-a6
000013D8 4E73                       		rte	
000013DA                            ; End of function PalToCRAM
000013DA                            
000013DA                            ; ---------------------------------------------------------------------------
000013DA                            ; Subroutine to	initialise joypads
000013DA                            ; ---------------------------------------------------------------------------
000013DA                            
000013DA                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000013DA                            
000013DA                            
000013DA                            JoypadInit:				; XREF: GameClrRAM
000013DA 33FC 0100 00A1 1100        		move.w	#$100,($A11100).l ; stop the Z80
000013E2                            
000013E2                            Joypad_WaitZ80:
000013E2 0839 0000 00A1 1100        		btst	#0,($A11100).l	; has the Z80 stopped?
000013EA 66F6                       		bne.s	Joypad_WaitZ80	; if not, branch
000013EC 7040                       		moveq	#$40,d0
000013EE 13C0 00A1 0009             		move.b	d0,($A10009).l	; init port 1 (joypad 1)
000013F4 13C0 00A1 000B             		move.b	d0,($A1000B).l	; init port 2 (joypad 2)
000013FA 13C0 00A1 000D             		move.b	d0,($A1000D).l	; init port 3 (extra)
00001400 33FC 0000 00A1 1100        		move.w	#0,($A11100).l	; start	the Z80
00001408 4E75                       		rts	
0000140A                            ; End of function JoypadInit
0000140A                            
0000140A                            ; ---------------------------------------------------------------------------
0000140A                            ; Subroutine to	read joypad input, and send it to the RAM
0000140A                            ; ---------------------------------------------------------------------------
0000140A                            
0000140A                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000140A                            
0000140A                            
0000140A                            ReadJoypads:
0000140A 41F8 F604                  		lea	($FFFFF604).w,a0 ; address where joypad	states are written
0000140E 43F9 00A1 0003             		lea	($A10003).l,a1	; first	joypad port
00001414 6100                       		bsr.s	Joypad_Read	; do the first joypad
00001416 5449                       		addq.w	#2,a1		; do the second	joypad
00001418                            
00001418                            Joypad_Read:
00001418 12BC 0000                  		move.b	#0,(a1)
0000141C 4E71                       		nop	
0000141E 4E71                       		nop	
00001420 1011                       		move.b	(a1),d0
00001422 E508                       		lsl.b	#2,d0
00001424 0200 00C0                  		andi.b	#$C0,d0
00001428 12BC 0040                  		move.b	#$40,(a1)
0000142C 4E71                       		nop	
0000142E 4E71                       		nop	
00001430 1211                       		move.b	(a1),d1
00001432 0201 003F                  		andi.b	#$3F,d1
00001436 8001                       		or.b	d1,d0
00001438 4600                       		not.b	d0
0000143A 1210                       		move.b	(a0),d1
0000143C B101                       		eor.b	d0,d1
0000143E 10C0                       		move.b	d0,(a0)+
00001440 C200                       		and.b	d0,d1
00001442 10C1                       		move.b	d1,(a0)+
00001444 4E75                       		rts	
00001446                            ; End of function ReadJoypads
00001446                            
00001446                            
00001446                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00001446                            
00001446                            
00001446                            VDPSetupGame:				; XREF: GameClrRAM; ChecksumError
00001446 41F9 00C0 0004             		lea	($C00004).l,a0
0000144C 43F9 00C0 0000             		lea	($C00000).l,a1
00001452 45F9 0000 0000             		lea	(VDPSetupArray).l,a2
00001458 7E12                       		moveq	#$12,d7
0000145A                            
0000145A                            VDP_Loop:
0000145A 309A                       		move.w	(a2)+,(a0)
0000145C 51CF FFFC                  		dbf	d7,VDP_Loop	; set the VDP registers
00001460                            
00001460 3039 0000 0000             		move.w	(VDPSetupArray+2).l,d0
00001466 31C0 F60C                  		move.w	d0,($FFFFF60C).w
0000146A 31FC 8ADF F624             		move.w	#$8ADF,($FFFFF624).w
00001470 7000                       		moveq	#0,d0
00001472 23FC C000 0000 00C0 0004   		move.l	#$C0000000,($C00004).l ; set VDP to CRAM write
0000147C 3E3C 003F                  		move.w	#$3F,d7
00001480                            
00001480                            VDP_ClrCRAM:
00001480 3280                       		move.w	d0,(a1)
00001482 51CF FFFC                  		dbf	d7,VDP_ClrCRAM	; clear	the CRAM
00001486                            
00001486 42B8 F616                  		clr.l	($FFFFF616).w
0000148A 42B8 F61A                  		clr.l	($FFFFF61A).w
0000148E 2F01                       		move.l	d1,-(sp)
00001490 4BF9 00C0 0004             		lea	($C00004).l,a5
00001496 3ABC 8F01                  		move.w	#$8F01,(a5)
0000149A 2ABC 94FF 93FF             		move.l	#$94FF93FF,(a5)
000014A0 3ABC 9780                  		move.w	#$9780,(a5)
000014A4 2ABC 4000 0080             		move.l	#$40000080,(a5)
000014AA 33FC 0000 00C0 0000        		move.w	#0,($C00000).l	; clear	the screen
000014B2                            
000014B2                            loc_128E:
000014B2 3215                       		move.w	(a5),d1
000014B4 0801 0001                  		btst	#1,d1
000014B8 66F8                       		bne.s	loc_128E
000014BA                            
000014BA 3ABC 8F02                  		move.w	#$8F02,(a5)
000014BE 221F                       		move.l	(sp)+,d1
000014C0 4E75                       		rts	
000014C2                            ; End of function VDPSetupGame
000014C2                            
000014C2                            ; ===========================================================================
000014C2 8004 8134 8230 8328        VDPSetupArray:	dc.w $8004, $8134, $8230, $8328	; XREF: VDPSetupGame
000014CA 8407 857C 8600 8700        		dc.w $8407, $857C, $8600, $8700
000014D2 8800 8900 8A00 8B00        		dc.w $8800, $8900, $8A00, $8B00
000014DA 8C81 8D3F 8E00 8F02        		dc.w $8C81, $8D3F, $8E00, $8F02
000014E2 9001 9100 9200             		dc.w $9001, $9100, $9200
000014E8                            
000014E8                            ; ---------------------------------------------------------------------------
000014E8                            ; Subroutine to	clear the screen
000014E8                            ; ---------------------------------------------------------------------------
000014E8                            
000014E8                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000014E8                            
000014E8                            
000014E8                            ClearScreen:
000014E8 4BF9 00C0 0004             		lea	($C00004).l,a5
000014EE 3ABC 8F01                  		move.w	#$8F01,(a5)
000014F2 2ABC 940F 93FF             		move.l	#$940F93FF,(a5)
000014F8 3ABC 9780                  		move.w	#$9780,(a5)
000014FC 2ABC 4000 0083             		move.l	#$40000083,(a5)
00001502 33FC 0000 00C0 0000        		move.w	#0,($C00000).l
0000150A                            
0000150A                            loc_12E6:
0000150A 3215                       		move.w	(a5),d1
0000150C 0801 0001                  		btst	#1,d1
00001510 66F8                       		bne.s	loc_12E6
00001512                            
00001512 3ABC 8F02                  		move.w	#$8F02,(a5)
00001516 4BF9 00C0 0004             		lea	($C00004).l,a5
0000151C 3ABC 8F01                  		move.w	#$8F01,(a5)
00001520 2ABC 940F 93FF             		move.l	#$940F93FF,(a5)
00001526 3ABC 9780                  		move.w	#$9780,(a5)
0000152A 2ABC 6000 0083             		move.l	#$60000083,(a5)
00001530 33FC 0000 00C0 0000        		move.w	#0,($C00000).l
00001538                            
00001538                            loc_1314:
00001538 3215                       		move.w	(a5),d1
0000153A 0801 0001                  		btst	#1,d1
0000153E 66F8                       		bne.s	loc_1314
00001540                            
00001540 3ABC 8F02                  		move.w	#$8F02,(a5)
00001544 21FC 0000 0000 F616        		move.l	#0,($FFFFF616).w
0000154C 21FC 0000 0000 F61A        		move.l	#0,($FFFFF61A).w
00001554 43F8 F800                  		lea	($FFFFF800).w,a1
00001558 7000                       		moveq	#0,d0
0000155A 323C 009F                  		move.w	#$9F,d1
0000155E                            
0000155E                            loc_133A:
0000155E 22C0                       		move.l	d0,(a1)+
00001560 51C9 FFFC                  		dbf	d1,loc_133A
00001564                            
00001564 43F8 CC00                  		lea	($FFFFCC00).w,a1
00001568 7000                       		moveq	#0,d0
0000156A 323C 00FF                  		move.w	#$FF,d1
0000156E                            
0000156E                            loc_134A:
0000156E 22C0                       		move.l	d0,(a1)+
00001570 51C9 FFFC                  		dbf	d1,loc_134A
00001574 4E75                       		rts	
00001576                            ; End of function ClearScreen
00001576                            
00001576                            ; ---------------------------------------------------------------------------
00001576                            ; Subroutine to	load the sound driver
00001576                            ; ---------------------------------------------------------------------------
00001576                            
00001576                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00001576                            
00001576                            
00001576                            SoundDriverLoad:			; XREF: GameClrRAM; TitleScreen
00001576 4E71                       		nop	
00001578 33FC 0100 00A1 1100        		move.w	#$100,($A11100).l ; stop the Z80
00001580 33FC 0100 00A1 1200        		move.w	#$100,($A11200).l ; reset the Z80
00001588 41F9 0000 0000             		lea	(Kos_Z80).l,a0	; load sound driver
0000158E 43F9 00A0 0000             		lea	($A00000).l,a1
00001594 6100 0000                  		bsr.w	KosDec		; decompress
00001598 33FC 0000 00A1 1200        		move.w	#0,($A11200).l
000015A0 4E71                       		nop	
000015A2 4E71                       		nop	
000015A4 4E71                       		nop	
000015A6 4E71                       		nop	
000015A8 33FC 0100 00A1 1200        		move.w	#$100,($A11200).l ; reset the Z80
000015B0 33FC 0000 00A1 1100        		move.w	#0,($A11100).l	; start	the Z80
000015B8 4E75                       		rts	
000015BA                            ; End of function SoundDriverLoad
000015BA                            
000015BA                            ; ---------------------------------------------------------------------------
000015BA                            ; Subroutine to	play a sound or	music track
000015BA                            ; ---------------------------------------------------------------------------
000015BA                            
000015BA                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000015BA                            
000015BA                            
000015BA                            PlaySound:
000015BA 11C0 F00A                  		move.b	d0,($FFFFF00A).w
000015BE 4E75                       		rts	
000015C0                            ; End of function PlaySound
000015C0                            
000015C0                            ; ---------------------------------------------------------------------------
000015C0                            ; Subroutine to	play a special sound/music (E0-E4)
000015C0                            ;
000015C0                            ; E0 - Fade out
000015C0                            ; E1 - Sega
000015C0                            ; E2 - Speed up
000015C0                            ; E3 - Normal speed
000015C0                            ; E4 - Stop
000015C0                            ; ---------------------------------------------------------------------------
000015C0                            
000015C0                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000015C0                            
000015C0                            
000015C0                            PlaySound_Special:
000015C0 11C0 F00B                  		move.b	d0,($FFFFF00B).w
000015C4 4E75                       		rts	
000015C6                            ; End of function PlaySound_Special
000015C6                            
000015C6                            ; ===========================================================================
000015C6                            ; ---------------------------------------------------------------------------
000015C6                            ; Unused sound/music subroutine
000015C6                            ; ---------------------------------------------------------------------------
000015C6                            
000015C6                            PlaySound_Unk:
000015C6 11C0 F00C                  		move.b	d0,($FFFFF00C).w
000015CA 4E75                       		rts	
000015CC                            
000015CC                            ; ---------------------------------------------------------------------------
000015CC                            ; Subroutine to	pause the game
000015CC                            ; ---------------------------------------------------------------------------
000015CC                            
000015CC                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000015CC                            
000015CC                            
000015CC                            PauseGame:				; XREF: Level_MainLoop; et al
000015CC 4E71                       		nop	
000015CE 4A38 FE12                  		tst.b	($FFFFFE12).w	; do you have any lives	left?
000015D2 6700                       		beq.s	Unpause		; if not, branch
000015D4 4A78 F63A                  		tst.w	($FFFFF63A).w	; is game already paused?
000015D8 6600                       		bne.s	loc_13BE	; if yes, branch
000015DA 0838 0007 F605             		btst	#7,($FFFFF605).w ; is Start button pressed?
000015E0 6700                       		beq.s	Pause_DoNothing	; if not, branch
000015E2                            
000015E2                            loc_13BE:
000015E2 31FC 0001 F63A             		move.w	#1,($FFFFF63A).w ; freeze time
000015E8 11FC 0001 F003             		move.b	#1,($FFFFF003).w ; pause music
000015EE                            
000015EE                            loc_13CA:
000015EE 11FC 0010 F62A             		move.b	#$10,($FFFFF62A).w
000015F4 6100 0000                  		bsr.w	DelayProgram
000015F8 4A38 FFE1                  		tst.b	($FFFFFFE1).w	; is slow-motion cheat on?
000015FC 6700                       		beq.s	Pause_ChkStart	; if not, branch
000015FE 0838 0006 F605             		btst	#6,($FFFFF605).w ; is button A pressed?
00001604 6700                       		beq.s	Pause_ChkBC	; if not, branch
00001606 11FC 0004 F600             		move.b	#4,($FFFFF600).w ; set game mode to 4 (title screen)
0000160C 4E71                       		nop	
0000160E 6000                       		bra.s	loc_1404
00001610                            ; ===========================================================================
00001610                            
00001610                            Pause_ChkBC:				; XREF: PauseGame
00001610 0838 0004 F604             		btst	#4,($FFFFF604).w ; is button B pressed?
00001616 6600                       		bne.s	Pause_SlowMo	; if yes, branch
00001618 0838 0005 F605             		btst	#5,($FFFFF605).w ; is button C pressed?
0000161E 6600                       		bne.s	Pause_SlowMo	; if yes, branch
00001620                            
00001620                            Pause_ChkStart:				; XREF: PauseGame
00001620 0838 0007 F605             		btst	#7,($FFFFF605).w ; is Start button pressed?
00001626 67C6                       		beq.s	loc_13CA	; if not, branch
00001628                            
00001628                            loc_1404:				; XREF: PauseGame
00001628 11FC 0080 F003             		move.b	#$80,($FFFFF003).w
0000162E                            
0000162E                            Unpause:				; XREF: PauseGame
0000162E 31FC 0000 F63A             		move.w	#0,($FFFFF63A).w ; unpause the game
00001634                            
00001634                            Pause_DoNothing:			; XREF: PauseGame
00001634 4E75                       		rts	
00001636                            ; ===========================================================================
00001636                            
00001636                            Pause_SlowMo:				; XREF: PauseGame
00001636 31FC 0001 F63A             		move.w	#1,($FFFFF63A).w
0000163C 11FC 0080 F003             		move.b	#$80,($FFFFF003).w
00001642 4E75                       		rts	
00001644                            ; End of function PauseGame
00001644                            
00001644                            ; ---------------------------------------------------------------------------
00001644                            ; Subroutine to	display	patterns via the VDP
00001644                            ; ---------------------------------------------------------------------------
00001644                            
00001644                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00001644                            
00001644                            
00001644                            ShowVDPGraphics:			; XREF: SegaScreen; TitleScreen; SS_BGLoad
00001644 4DF9 00C0 0000             		lea	($C00000).l,a6
0000164A 283C 0080 0000             		move.l	#$800000,d4
00001650                            
00001650                            loc_142C:
00001650 2D40 0004                  		move.l	d0,4(a6)
00001654 3601                       		move.w	d1,d3
00001656                            
00001656                            loc_1432:
00001656 3C99                       		move.w	(a1)+,(a6)
00001658 51CB FFFC                  		dbf	d3,loc_1432
0000165C D084                       		add.l	d4,d0
0000165E 51CA FFF0                  		dbf	d2,loc_142C
00001662 4E75                       		rts	
00001664                            ; End of function ShowVDPGraphics
00001664                            
00001664                            ; ---------------------------------------------------------------------------
00001664                            ; Nemesis decompression	algorithm
00001664                            ; ---------------------------------------------------------------------------
00001664                            
00001664                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00001664                            
00001664                            
00001664                            NemDec:
00001664 48E7 FFDC                  		movem.l	d0-a1/a3-a5,-(sp)
00001668 47F9 0000 0000             		lea	(loc_1502).l,a3
0000166E 49F9 00C0 0000             		lea	($C00000).l,a4
00001674 6000                       		bra.s	loc_145C
00001676                            ; ===========================================================================
00001676 48E7 FFDC                  		movem.l	d0-a1/a3-a5,-(sp)
0000167A 47F9 0000 0000             		lea	(loc_1518).l,a3
00001680                            
00001680                            loc_145C:				; XREF: NemDec
00001680 43F8 AA00                  		lea	($FFFFAA00).w,a1
00001684 3418                       		move.w	(a0)+,d2
00001686 E34A                       		lsl.w	#1,d2
00001688 6400                       		bcc.s	loc_146A
0000168A D6FC 000A                  		adda.w	#$A,a3
0000168E                            
0000168E                            loc_146A:
0000168E E54A                       		lsl.w	#2,d2
00001690 3A42                       		movea.w	d2,a5
00001692 7608                       		moveq	#8,d3
00001694 7400                       		moveq	#0,d2
00001696 7800                       		moveq	#0,d4
00001698 6100 0000                  		bsr.w	NemDec4
0000169C 1A18                       		move.b	(a0)+,d5
0000169E E145                       		asl.w	#8,d5
000016A0 1A18                       		move.b	(a0)+,d5
000016A2 3C3C 0010                  		move.w	#$10,d6
000016A6 6100                       		bsr.s	NemDec2
000016A8 4CDF 3BFF                  		movem.l	(sp)+,d0-a1/a3-a5
000016AC 4E75                       		rts	
000016AE                            ; End of function NemDec
000016AE                            
000016AE                            
000016AE                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000016AE                            
000016AE                            
000016AE                            NemDec2:				; XREF: NemDec
000016AE 3E06                       		move.w	d6,d7
000016B0 5147                       		subq.w	#8,d7
000016B2 3205                       		move.w	d5,d1
000016B4 EE69                       		lsr.w	d7,d1
000016B6 0C01 00FC                  		cmpi.b	#-4,d1
000016BA 6400                       		bcc.s	loc_14D6
000016BC 0241 00FF                  		andi.w	#$FF,d1
000016C0 D241                       		add.w	d1,d1
000016C2 1031 1000                  		move.b	(a1,d1.w),d0
000016C6 4880                       		ext.w	d0
000016C8 9C40                       		sub.w	d0,d6
000016CA 0C46 0009                  		cmpi.w	#9,d6
000016CE 6400                       		bcc.s	loc_14B2
000016D0 5046                       		addq.w	#8,d6
000016D2 E145                       		asl.w	#8,d5
000016D4 1A18                       		move.b	(a0)+,d5
000016D6                            
000016D6                            loc_14B2:
000016D6 1231 1001                  		move.b	1(a1,d1.w),d1
000016DA 3001                       		move.w	d1,d0
000016DC 0241 000F                  		andi.w	#$F,d1
000016E0 0240 00F0                  		andi.w	#$F0,d0
000016E4                            
000016E4                            loc_14C0:				; XREF: NemDec3
000016E4 E848                       		lsr.w	#4,d0
000016E6                            
000016E6                            loc_14C2:				; XREF: NemDec3
000016E6 E98C                       		lsl.l	#4,d4
000016E8 8801                       		or.b	d1,d4
000016EA 5343                       		subq.w	#1,d3
000016EC 6600                       		bne.s	loc_14D0
000016EE 4ED3                       		jmp	(a3)
000016F0                            ; End of function NemDec2
000016F0                            
000016F0                            
000016F0                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000016F0                            
000016F0                            
000016F0                            NemDec3:				; XREF: loc_1502
000016F0 7800                       		moveq	#0,d4
000016F2 7608                       		moveq	#8,d3
000016F4                            
000016F4                            loc_14D0:				; XREF: NemDec2
000016F4 51C8 FFF0                  		dbf	d0,loc_14C2
000016F8 60B4                       		bra.s	NemDec2
000016FA                            ; ===========================================================================
000016FA                            
000016FA                            loc_14D6:				; XREF: NemDec2
000016FA 5D46                       		subq.w	#6,d6
000016FC 0C46 0009                  		cmpi.w	#9,d6
00001700 6400                       		bcc.s	loc_14E4
00001702 5046                       		addq.w	#8,d6
00001704 E145                       		asl.w	#8,d5
00001706 1A18                       		move.b	(a0)+,d5
00001708                            
00001708                            loc_14E4:				; XREF: NemDec3
00001708 5F46                       		subq.w	#7,d6
0000170A 3205                       		move.w	d5,d1
0000170C EC69                       		lsr.w	d6,d1
0000170E 3001                       		move.w	d1,d0
00001710 0241 000F                  		andi.w	#$F,d1
00001714 0240 0070                  		andi.w	#$70,d0
00001718 0C46 0009                  		cmpi.w	#9,d6
0000171C 64C6                       		bcc.s	loc_14C0
0000171E 5046                       		addq.w	#8,d6
00001720 E145                       		asl.w	#8,d5
00001722 1A18                       		move.b	(a0)+,d5
00001724 60BE                       		bra.s	loc_14C0
00001726                            ; End of function NemDec3
00001726                            
00001726                            ; ===========================================================================
00001726                            
00001726                            loc_1502:				; XREF: NemDec
00001726 2884                       		move.l	d4,(a4)
00001728 534D                       		subq.w	#1,a5
0000172A 380D                       		move.w	a5,d4
0000172C 66C2                       		bne.s	NemDec3
0000172E 4E75                       		rts	
00001730                            ; ===========================================================================
00001730 B982                       		eor.l	d4,d2
00001732 2882                       		move.l	d2,(a4)
00001734 534D                       		subq.w	#1,a5
00001736 380D                       		move.w	a5,d4
00001738 66B6                       		bne.s	NemDec3
0000173A 4E75                       		rts	
0000173C                            ; ===========================================================================
0000173C                            
0000173C                            loc_1518:				; XREF: NemDec
0000173C 28C4                       		move.l	d4,(a4)+
0000173E 534D                       		subq.w	#1,a5
00001740 380D                       		move.w	a5,d4
00001742 66AC                       		bne.s	NemDec3
00001744 4E75                       		rts	
00001746                            ; ===========================================================================
00001746 B982                       		eor.l	d4,d2
00001748 28C2                       		move.l	d2,(a4)+
0000174A 534D                       		subq.w	#1,a5
0000174C 380D                       		move.w	a5,d4
0000174E 66A0                       		bne.s	NemDec3
00001750 4E75                       		rts	
00001752                            
00001752                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00001752                            
00001752                            
00001752                            NemDec4:				; XREF: NemDec
00001752 1018                       		move.b	(a0)+,d0
00001754                            
00001754                            loc_1530:
00001754 0C00 00FF                  		cmpi.b	#-1,d0
00001758 6600                       		bne.s	loc_1538
0000175A 4E75                       		rts	
0000175C                            ; ===========================================================================
0000175C                            
0000175C                            loc_1538:				; XREF: NemDec4
0000175C 3E00                       		move.w	d0,d7
0000175E                            
0000175E                            loc_153A:
0000175E 1018                       		move.b	(a0)+,d0
00001760 0C00 0080                  		cmpi.b	#$80,d0
00001764 64EE                       		bcc.s	loc_1530
00001766 1200                       		move.b	d0,d1
00001768 0247 000F                  		andi.w	#$F,d7
0000176C 0241 0070                  		andi.w	#$70,d1
00001770 8E41                       		or.w	d1,d7
00001772 0240 000F                  		andi.w	#$F,d0
00001776 1200                       		move.b	d0,d1
00001778 E149                       		lsl.w	#8,d1
0000177A 8E41                       		or.w	d1,d7
0000177C 7208                       		moveq	#8,d1
0000177E 9240                       		sub.w	d0,d1
00001780 6600                       		bne.s	loc_1568
00001782 1018                       		move.b	(a0)+,d0
00001784 D040                       		add.w	d0,d0
00001786 3387 0000                  		move.w	d7,(a1,d0.w)
0000178A 60D2                       		bra.s	loc_153A
0000178C                            ; ===========================================================================
0000178C                            
0000178C                            loc_1568:				; XREF: NemDec4
0000178C 1018                       		move.b	(a0)+,d0
0000178E E368                       		lsl.w	d1,d0
00001790 D040                       		add.w	d0,d0
00001792 7A01                       		moveq	#1,d5
00001794 E36D                       		lsl.w	d1,d5
00001796 5345                       		subq.w	#1,d5
00001798                            
00001798                            loc_1574:
00001798 3387 0000                  		move.w	d7,(a1,d0.w)
0000179C 5440                       		addq.w	#2,d0
0000179E 51CD FFF8                  		dbf	d5,loc_1574
000017A2 60BA                       		bra.s	loc_153A
000017A4                            ; End of function NemDec4
000017A4                            
000017A4                            ; ---------------------------------------------------------------------------
000017A4                            ; Subroutine to	load pattern load cues
000017A4                            ; ---------------------------------------------------------------------------
000017A4                            
000017A4                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000017A4                            
000017A4                            
000017A4                            LoadPLC:
000017A4 48E7 0060                  		movem.l	a1-a2,-(sp)
000017A8 43F9 0000 0000             		lea	(ArtLoadCues).l,a1
000017AE D040                       		add.w	d0,d0
000017B0 3031 0000                  		move.w	(a1,d0.w),d0
000017B4 43F1 0000                  		lea	(a1,d0.w),a1
000017B8 45F8 F680                  		lea	($FFFFF680).w,a2
000017BC                            
000017BC                            loc_1598:
000017BC 4A92                       		tst.l	(a2)
000017BE 6700                       		beq.s	loc_15A0
000017C0 5C4A                       		addq.w	#6,a2
000017C2 60F8                       		bra.s	loc_1598
000017C4                            ; ===========================================================================
000017C4                            
000017C4                            loc_15A0:				; XREF: LoadPLC
000017C4 3019                       		move.w	(a1)+,d0
000017C6 6B00                       		bmi.s	loc_15AC
000017C8                            
000017C8                            loc_15A4:
000017C8 24D9                       		move.l	(a1)+,(a2)+
000017CA 34D9                       		move.w	(a1)+,(a2)+
000017CC 51C8 FFFA                  		dbf	d0,loc_15A4
000017D0                            
000017D0                            loc_15AC:
000017D0 4CDF 0600                  		movem.l	(sp)+,a1-a2
000017D4 4E75                       		rts	
000017D6                            ; End of function LoadPLC
000017D6                            
000017D6                            
000017D6                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000017D6                            
000017D6                            
000017D6                            LoadPLC2:
000017D6 48E7 0060                  		movem.l	a1-a2,-(sp)
000017DA 43F9 0000 0000             		lea	(ArtLoadCues).l,a1
000017E0 D040                       		add.w	d0,d0
000017E2 3031 0000                  		move.w	(a1,d0.w),d0
000017E6 43F1 0000                  		lea	(a1,d0.w),a1
000017EA 6100                       		bsr.s	ClearPLC
000017EC 45F8 F680                  		lea	($FFFFF680).w,a2
000017F0 3019                       		move.w	(a1)+,d0
000017F2 6B00                       		bmi.s	loc_15D8
000017F4                            
000017F4                            loc_15D0:
000017F4 24D9                       		move.l	(a1)+,(a2)+
000017F6 34D9                       		move.w	(a1)+,(a2)+
000017F8 51C8 FFFA                  		dbf	d0,loc_15D0
000017FC                            
000017FC                            loc_15D8:
000017FC 4CDF 0600                  		movem.l	(sp)+,a1-a2
00001800 4E75                       		rts	
00001802                            ; End of function LoadPLC2
00001802                            
00001802                            ; ---------------------------------------------------------------------------
00001802                            ; Subroutine to	clear the pattern load cues
00001802                            ; ---------------------------------------------------------------------------
00001802                            
00001802                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00001802                            
00001802                            
00001802                            ClearPLC:				; XREF: LoadPLC2
00001802 45F8 F680                  		lea	($FFFFF680).w,a2
00001806 701F                       		moveq	#$1F,d0
00001808                            
00001808                            ClearPLC_Loop:
00001808 429A                       		clr.l	(a2)+
0000180A 51C8 FFFC                  		dbf	d0,ClearPLC_Loop
0000180E 4E75                       		rts	
00001810                            ; End of function ClearPLC
00001810                            
00001810                            ; ---------------------------------------------------------------------------
00001810                            ; Subroutine to	use graphics listed in a pattern load cue
00001810                            ; ---------------------------------------------------------------------------
00001810                            
00001810                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00001810                            
00001810                            
00001810                            RunPLC_RAM:				; XREF: Pal_FadeTo
00001810 4AB8 F680                  		tst.l	($FFFFF680).w
00001814 6700                       		beq.s	locret_1640
00001816 4A78 F6F8                  		tst.w	($FFFFF6F8).w
0000181A 6600                       		bne.s	locret_1640
0000181C 2078 F680                  		movea.l	($FFFFF680).w,a0
00001820 47F9 0000 1726             		lea	(loc_1502).l,a3
00001826 43F8 AA00                  		lea	($FFFFAA00).w,a1
0000182A 3418                       		move.w	(a0)+,d2
0000182C 6A00                       		bpl.s	loc_160E
0000182E D6FC 000A                  		adda.w	#$A,a3
00001832                            
00001832                            loc_160E:
00001832 0242 7FFF                  		andi.w	#$7FFF,d2
00001836 31C2 F6F8                  		move.w	d2,($FFFFF6F8).w
0000183A 6100 FF16                  		bsr.w	NemDec4
0000183E 1A18                       		move.b	(a0)+,d5
00001840 E145                       		asl.w	#8,d5
00001842 1A18                       		move.b	(a0)+,d5
00001844 7C10                       		moveq	#$10,d6
00001846 7000                       		moveq	#0,d0
00001848 21C8 F680                  		move.l	a0,($FFFFF680).w
0000184C 21CB F6E0                  		move.l	a3,($FFFFF6E0).w
00001850 21C0 F6E4                  		move.l	d0,($FFFFF6E4).w
00001854 21C0 F6E8                  		move.l	d0,($FFFFF6E8).w
00001858 21C0 F6EC                  		move.l	d0,($FFFFF6EC).w
0000185C 21C5 F6F0                  		move.l	d5,($FFFFF6F0).w
00001860 21C6 F6F4                  		move.l	d6,($FFFFF6F4).w
00001864                            
00001864                            locret_1640:
00001864 4E75                       		rts	
00001866                            ; End of function RunPLC_RAM
00001866                            
00001866                            
00001866                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00001866                            
00001866                            
00001866                            sub_1642:				; XREF: loc_C44; loc_F54; loc_F9A
00001866 4A78 F6F8                  		tst.w	($FFFFF6F8).w
0000186A 6700 0000                  		beq.w	locret_16DA
0000186E 31FC 0009 F6FA             		move.w	#9,($FFFFF6FA).w
00001874 7000                       		moveq	#0,d0
00001876 3038 F684                  		move.w	($FFFFF684).w,d0
0000187A 0678 0120 F684             		addi.w	#$120,($FFFFF684).w
00001880 6000                       		bra.s	loc_1676
00001882                            ; End of function sub_1642
00001882                            
00001882                            
00001882                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00001882                            
00001882                            
00001882                            sub_165E:				; XREF: Demo_Time
00001882 4A78 F6F8                  		tst.w	($FFFFF6F8).w
00001886 6700                       		beq.s	locret_16DA
00001888 31FC 0003 F6FA             		move.w	#3,($FFFFF6FA).w
0000188E 7000                       		moveq	#0,d0
00001890 3038 F684                  		move.w	($FFFFF684).w,d0
00001894 0678 0060 F684             		addi.w	#$60,($FFFFF684).w
0000189A                            
0000189A                            loc_1676:				; XREF: sub_1642
0000189A 49F9 00C0 0004             		lea	($C00004).l,a4
000018A0 E588                       		lsl.l	#2,d0
000018A2 E448                       		lsr.w	#2,d0
000018A4 0040 4000                  		ori.w	#$4000,d0
000018A8 4840                       		swap	d0
000018AA 2880                       		move.l	d0,(a4)
000018AC 594C                       		subq.w	#4,a4
000018AE 2078 F680                  		movea.l	($FFFFF680).w,a0
000018B2 2678 F6E0                  		movea.l	($FFFFF6E0).w,a3
000018B6 2038 F6E4                  		move.l	($FFFFF6E4).w,d0
000018BA 2238 F6E8                  		move.l	($FFFFF6E8).w,d1
000018BE 2438 F6EC                  		move.l	($FFFFF6EC).w,d2
000018C2 2A38 F6F0                  		move.l	($FFFFF6F0).w,d5
000018C6 2C38 F6F4                  		move.l	($FFFFF6F4).w,d6
000018CA 43F8 AA00                  		lea	($FFFFAA00).w,a1
000018CE                            
000018CE                            loc_16AA:				; XREF: sub_165E
000018CE 3A7C 0008                  		movea.w	#8,a5
000018D2 6100 FE1C                  		bsr.w	NemDec3
000018D6 5378 F6F8                  		subq.w	#1,($FFFFF6F8).w
000018DA 6700                       		beq.s	loc_16DC
000018DC 5378 F6FA                  		subq.w	#1,($FFFFF6FA).w
000018E0 66EC                       		bne.s	loc_16AA
000018E2 21C8 F680                  		move.l	a0,($FFFFF680).w
000018E6 21CB F6E0                  		move.l	a3,($FFFFF6E0).w
000018EA 21C0 F6E4                  		move.l	d0,($FFFFF6E4).w
000018EE 21C1 F6E8                  		move.l	d1,($FFFFF6E8).w
000018F2 21C2 F6EC                  		move.l	d2,($FFFFF6EC).w
000018F6 21C5 F6F0                  		move.l	d5,($FFFFF6F0).w
000018FA 21C6 F6F4                  		move.l	d6,($FFFFF6F4).w
000018FE                            
000018FE                            locret_16DA:				; XREF: sub_1642
000018FE 4E75                       		rts	
00001900                            ; ===========================================================================
00001900                            
00001900                            loc_16DC:				; XREF: sub_165E
00001900 41F8 F680                  		lea	($FFFFF680).w,a0
00001904 7015                       		moveq	#$15,d0
00001906                            
00001906                            loc_16E2:				; XREF: sub_165E
00001906 20E8 0006                  		move.l	6(a0),(a0)+
0000190A 51C8 FFFA                  		dbf	d0,loc_16E2
0000190E 4E75                       		rts	
00001910                            ; End of function sub_165E
00001910                            
00001910                            ; ---------------------------------------------------------------------------
00001910                            ; Subroutine to	execute	the pattern load cue
00001910                            ; ---------------------------------------------------------------------------
00001910                            
00001910                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00001910                            
00001910                            
00001910                            RunPLC_ROM:
00001910 43F9 0000 0000             		lea	(ArtLoadCues).l,a1 ; load the PLC index
00001916 D040                       		add.w	d0,d0
00001918 3031 0000                  		move.w	(a1,d0.w),d0
0000191C 43F1 0000                  		lea	(a1,d0.w),a1
00001920 3219                       		move.w	(a1)+,d1	; load number of entries in the	PLC
00001922                            
00001922                            RunPLC_Loop:
00001922 2059                       		movea.l	(a1)+,a0	; get art pointer
00001924 7000                       		moveq	#0,d0
00001926 3019                       		move.w	(a1)+,d0	; get VRAM address
00001928 E588                       		lsl.l	#2,d0		; divide address by $20
0000192A E448                       		lsr.w	#2,d0
0000192C 0040 4000                  		ori.w	#$4000,d0
00001930 4840                       		swap	d0
00001932 23C0 00C0 0004             		move.l	d0,($C00004).l	; put the VRAM address into VDP
00001938 6100 FD2A                  		bsr.w	NemDec		; decompress
0000193C 51C9 FFE4                  		dbf	d1,RunPLC_Loop	; loop for number of entries
00001940 4E75                       		rts	
00001942                            ; End of function RunPLC_ROM
00001942                            
00001942                            ; ---------------------------------------------------------------------------
00001942                            ; Enigma decompression algorithm
00001942                            ; ---------------------------------------------------------------------------
00001942                            
00001942                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00001942                            
00001942                            
00001942                            EniDec:
00001942 48E7 FF7C                  		movem.l	d0-d7/a1-a5,-(sp)
00001946 3640                       		movea.w	d0,a3
00001948 1018                       		move.b	(a0)+,d0
0000194A 4880                       		ext.w	d0
0000194C 3A40                       		movea.w	d0,a5
0000194E 1818                       		move.b	(a0)+,d4
00001950 E70C                       		lsl.b	#3,d4
00001952 3458                       		movea.w	(a0)+,a2
00001954 D4CB                       		adda.w	a3,a2
00001956 3858                       		movea.w	(a0)+,a4
00001958 D8CB                       		adda.w	a3,a4
0000195A 1A18                       		move.b	(a0)+,d5
0000195C E145                       		asl.w	#8,d5
0000195E 1A18                       		move.b	(a0)+,d5
00001960 7C10                       		moveq	#$10,d6
00001962                            
00001962                            loc_173E:				; XREF: loc_1768
00001962 7007                       		moveq	#7,d0
00001964 3E06                       		move.w	d6,d7
00001966 9E40                       		sub.w	d0,d7
00001968 3205                       		move.w	d5,d1
0000196A EE69                       		lsr.w	d7,d1
0000196C 0241 007F                  		andi.w	#$7F,d1
00001970 3401                       		move.w	d1,d2
00001972 0C41 0040                  		cmpi.w	#$40,d1
00001976 6400                       		bcc.s	loc_1758
00001978 7006                       		moveq	#6,d0
0000197A E24A                       		lsr.w	#1,d2
0000197C                            
0000197C                            loc_1758:
0000197C 6100 0000                  		bsr.w	sub_188C
00001980 0242 000F                  		andi.w	#$F,d2
00001984 E849                       		lsr.w	#4,d1
00001986 D241                       		add.w	d1,d1
00001988 4EFB 1000                  		jmp	loc_17B4(pc,d1.w)
0000198C                            ; End of function EniDec
0000198C                            
0000198C                            ; ===========================================================================
0000198C                            
0000198C                            loc_1768:				; XREF: loc_17B4
0000198C 32CA                       		move.w	a2,(a1)+
0000198E 524A                       		addq.w	#1,a2
00001990 51CA FFFA                  		dbf	d2,loc_1768
00001994 60CC                       		bra.s	loc_173E
00001996                            ; ===========================================================================
00001996                            
00001996                            loc_1772:				; XREF: loc_17B4
00001996 32CC                       		move.w	a4,(a1)+
00001998 51CA FFFC                  		dbf	d2,loc_1772
0000199C 60C4                       		bra.s	loc_173E
0000199E                            ; ===========================================================================
0000199E                            
0000199E                            loc_177A:				; XREF: loc_17B4
0000199E 6100 0000                  		bsr.w	loc_17DC
000019A2                            
000019A2                            loc_177E:
000019A2 32C1                       		move.w	d1,(a1)+
000019A4 51CA FFFC                  		dbf	d2,loc_177E
000019A8 60B8                       		bra.s	loc_173E
000019AA                            ; ===========================================================================
000019AA                            
000019AA                            loc_1786:				; XREF: loc_17B4
000019AA 6100 0000                  		bsr.w	loc_17DC
000019AE                            
000019AE                            loc_178A:
000019AE 32C1                       		move.w	d1,(a1)+
000019B0 5241                       		addq.w	#1,d1
000019B2 51CA FFFA                  		dbf	d2,loc_178A
000019B6 60AA                       		bra.s	loc_173E
000019B8                            ; ===========================================================================
000019B8                            
000019B8                            loc_1794:				; XREF: loc_17B4
000019B8 6100 0000                  		bsr.w	loc_17DC
000019BC                            
000019BC                            loc_1798:
000019BC 32C1                       		move.w	d1,(a1)+
000019BE 5341                       		subq.w	#1,d1
000019C0 51CA FFFA                  		dbf	d2,loc_1798
000019C4 609C                       		bra.s	loc_173E
000019C6                            ; ===========================================================================
000019C6                            
000019C6                            loc_17A2:				; XREF: loc_17B4
000019C6 0C42 000F                  		cmpi.w	#$F,d2
000019CA 6700                       		beq.s	loc_17C4
000019CC                            
000019CC                            loc_17A8:
000019CC 6100 0000                  		bsr.w	loc_17DC
000019D0 32C1                       		move.w	d1,(a1)+
000019D2 51CA FFF8                  		dbf	d2,loc_17A8
000019D6 608A                       		bra.s	loc_173E
000019D8                            ; ===========================================================================
000019D8                            
000019D8                            loc_17B4:				; XREF: EniDec
000019D8 60B2                       		bra.s	loc_1768
000019DA                            ; ===========================================================================
000019DA 60B0                       		bra.s	loc_1768
000019DC                            ; ===========================================================================
000019DC 60B8                       		bra.s	loc_1772
000019DE                            ; ===========================================================================
000019DE 60B6                       		bra.s	loc_1772
000019E0                            ; ===========================================================================
000019E0 60BC                       		bra.s	loc_177A
000019E2                            ; ===========================================================================
000019E2 60C6                       		bra.s	loc_1786
000019E4                            ; ===========================================================================
000019E4 60D2                       		bra.s	loc_1794
000019E6                            ; ===========================================================================
000019E6 60DE                       		bra.s	loc_17A2
000019E8                            ; ===========================================================================
000019E8                            
000019E8                            loc_17C4:				; XREF: loc_17A2
000019E8 5348                       		subq.w	#1,a0
000019EA 0C46 0010                  		cmpi.w	#$10,d6
000019EE 6600                       		bne.s	loc_17CE
000019F0 5348                       		subq.w	#1,a0
000019F2                            
000019F2                            loc_17CE:
000019F2 3008                       		move.w	a0,d0
000019F4 E248                       		lsr.w	#1,d0
000019F6 6400                       		bcc.s	loc_17D6
000019F8 5248                       		addq.w	#1,a0
000019FA                            
000019FA                            loc_17D6:
000019FA 4CDF 3EFF                  		movem.l	(sp)+,d0-d7/a1-a5
000019FE 4E75                       		rts	
00001A00                            ; ===========================================================================
00001A00                            
00001A00                            loc_17DC:				; XREF: loc_17A2
00001A00 360B                       		move.w	a3,d3
00001A02 1204                       		move.b	d4,d1
00001A04 D201                       		add.b	d1,d1
00001A06 6400                       		bcc.s	loc_17EE
00001A08 5346                       		subq.w	#1,d6
00001A0A 0D05                       		btst	d6,d5
00001A0C 6700                       		beq.s	loc_17EE
00001A0E 0043 8000                  		ori.w	#-$8000,d3
00001A12                            
00001A12                            loc_17EE:
00001A12 D201                       		add.b	d1,d1
00001A14 6400                       		bcc.s	loc_17FC
00001A16 5346                       		subq.w	#1,d6
00001A18 0D05                       		btst	d6,d5
00001A1A 6700                       		beq.s	loc_17FC
00001A1C 0643 4000                  		addi.w	#$4000,d3
00001A20                            
00001A20                            loc_17FC:
00001A20 D201                       		add.b	d1,d1
00001A22 6400                       		bcc.s	loc_180A
00001A24 5346                       		subq.w	#1,d6
00001A26 0D05                       		btst	d6,d5
00001A28 6700                       		beq.s	loc_180A
00001A2A 0643 2000                  		addi.w	#$2000,d3
00001A2E                            
00001A2E                            loc_180A:
00001A2E D201                       		add.b	d1,d1
00001A30 6400                       		bcc.s	loc_1818
00001A32 5346                       		subq.w	#1,d6
00001A34 0D05                       		btst	d6,d5
00001A36 6700                       		beq.s	loc_1818
00001A38 0043 1000                  		ori.w	#$1000,d3
00001A3C                            
00001A3C                            loc_1818:
00001A3C D201                       		add.b	d1,d1
00001A3E 6400                       		bcc.s	loc_1826
00001A40 5346                       		subq.w	#1,d6
00001A42 0D05                       		btst	d6,d5
00001A44 6700                       		beq.s	loc_1826
00001A46 0043 0800                  		ori.w	#$800,d3
00001A4A                            
00001A4A                            loc_1826:
00001A4A 3205                       		move.w	d5,d1
00001A4C 3E06                       		move.w	d6,d7
00001A4E 9E4D                       		sub.w	a5,d7
00001A50 6400                       		bcc.s	loc_1856
00001A52 3C07                       		move.w	d7,d6
00001A54 0646 0010                  		addi.w	#$10,d6
00001A58 4447                       		neg.w	d7
00001A5A EF69                       		lsl.w	d7,d1
00001A5C 1A10                       		move.b	(a0),d5
00001A5E EF3D                       		rol.b	d7,d5
00001A60 DE47                       		add.w	d7,d7
00001A62 CA7B 7000                  		and.w	word_186C-2(pc,d7.w),d5
00001A66 D245                       		add.w	d5,d1
00001A68                            
00001A68                            loc_1844:				; XREF: loc_1868
00001A68 300D                       		move.w	a5,d0
00001A6A D040                       		add.w	d0,d0
00001A6C C27B 0000                  		and.w	word_186C-2(pc,d0.w),d1
00001A70 D243                       		add.w	d3,d1
00001A72 1A18                       		move.b	(a0)+,d5
00001A74 E14D                       		lsl.w	#8,d5
00001A76 1A18                       		move.b	(a0)+,d5
00001A78 4E75                       		rts	
00001A7A                            ; ===========================================================================
00001A7A                            
00001A7A                            loc_1856:				; XREF: loc_1826
00001A7A 6700                       		beq.s	loc_1868
00001A7C EE69                       		lsr.w	d7,d1
00001A7E 300D                       		move.w	a5,d0
00001A80 D040                       		add.w	d0,d0
00001A82 C27B 0000                  		and.w	word_186C-2(pc,d0.w),d1
00001A86 D243                       		add.w	d3,d1
00001A88 300D                       		move.w	a5,d0
00001A8A 6000                       		bra.s	sub_188C
00001A8C                            ; ===========================================================================
00001A8C                            
00001A8C                            loc_1868:				; XREF: loc_1856
00001A8C 7C10                       		moveq	#$10,d6
00001A8E                            
00001A8E                            loc_186A:
00001A8E 60D8                       		bra.s	loc_1844
00001A90                            ; ===========================================================================
00001A90 0001 0003 0007 000F 001F+  word_186C:	dc.w 1,	3, 7, $F, $1F, $3F, $7F, $FF, $1FF, $3FF, $7FF
00001AA6 0FFF 1FFF 3FFF 7FFF FFFF   		dc.w $FFF, $1FFF, $3FFF, $7FFF,	$FFFF	; XREF: loc_1856
00001AB0                            
00001AB0                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00001AB0                            
00001AB0                            
00001AB0                            sub_188C:				; XREF: EniDec
00001AB0 9C40                       		sub.w	d0,d6
00001AB2 0C46 0009                  		cmpi.w	#9,d6
00001AB6 6400                       		bcc.s	locret_189A
00001AB8 5046                       		addq.w	#8,d6
00001ABA E145                       		asl.w	#8,d5
00001ABC 1A18                       		move.b	(a0)+,d5
00001ABE                            
00001ABE                            locret_189A:
00001ABE 4E75                       		rts	
00001AC0                            ; End of function sub_188C
00001AC0                            
00001AC0                            ; ---------------------------------------------------------------------------
00001AC0                            ; Kosinski decompression algorithm
00001AC0                            ; ---------------------------------------------------------------------------
00001AC0                            
00001AC0                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00001AC0                            
00001AC0                            
00001AC0                            KosDec:
00001AC0                            
00001AC0 =FFFFFFFE                  var_2		= -2
00001AC0 =FFFFFFFF                  var_1		= -1
00001AC0                            
00001AC0 558F                       		subq.l	#2,sp
00001AC2 1F58 0001                  		move.b	(a0)+,2+var_1(sp)
00001AC6 1E98                       		move.b	(a0)+,(sp)
00001AC8 3A17                       		move.w	(sp),d5
00001ACA 780F                       		moveq	#$F,d4
00001ACC                            
00001ACC                            loc_18A8:
00001ACC E24D                       		lsr.w	#1,d5
00001ACE 40C6                       		move	sr,d6
00001AD0 51CC 0000                  		dbf	d4,loc_18BA
00001AD4 1F58 0001                  		move.b	(a0)+,2+var_1(sp)
00001AD8 1E98                       		move.b	(a0)+,(sp)
00001ADA 3A17                       		move.w	(sp),d5
00001ADC 780F                       		moveq	#$F,d4
00001ADE                            
00001ADE                            loc_18BA:
00001ADE 44C6                       		move	d6,ccr
00001AE0 6400                       		bcc.s	loc_18C2
00001AE2 12D8                       		move.b	(a0)+,(a1)+
00001AE4 60E6                       		bra.s	loc_18A8
00001AE6                            ; ===========================================================================
00001AE6                            
00001AE6                            loc_18C2:				; XREF: KosDec
00001AE6 7600                       		moveq	#0,d3
00001AE8 E24D                       		lsr.w	#1,d5
00001AEA 40C6                       		move	sr,d6
00001AEC 51CC 0000                  		dbf	d4,loc_18D6
00001AF0 1F58 0001                  		move.b	(a0)+,2+var_1(sp)
00001AF4 1E98                       		move.b	(a0)+,(sp)
00001AF6 3A17                       		move.w	(sp),d5
00001AF8 780F                       		moveq	#$F,d4
00001AFA                            
00001AFA                            loc_18D6:
00001AFA 44C6                       		move	d6,ccr
00001AFC 6500                       		bcs.s	loc_1906
00001AFE E24D                       		lsr.w	#1,d5
00001B00 51CC 0000                  		dbf	d4,loc_18EA
00001B04 1F58 0001                  		move.b	(a0)+,2+var_1(sp)
00001B08 1E98                       		move.b	(a0)+,(sp)
00001B0A 3A17                       		move.w	(sp),d5
00001B0C 780F                       		moveq	#$F,d4
00001B0E                            
00001B0E                            loc_18EA:
00001B0E E353                       		roxl.w	#1,d3
00001B10 E24D                       		lsr.w	#1,d5
00001B12 51CC 0000                  		dbf	d4,loc_18FC
00001B16 1F58 0001                  		move.b	(a0)+,2+var_1(sp)
00001B1A 1E98                       		move.b	(a0)+,(sp)
00001B1C 3A17                       		move.w	(sp),d5
00001B1E 780F                       		moveq	#$F,d4
00001B20                            
00001B20                            loc_18FC:
00001B20 E353                       		roxl.w	#1,d3
00001B22 5243                       		addq.w	#1,d3
00001B24 74FF                       		moveq	#-1,d2
00001B26 1418                       		move.b	(a0)+,d2
00001B28 6000                       		bra.s	loc_191C
00001B2A                            ; ===========================================================================
00001B2A                            
00001B2A                            loc_1906:				; XREF: loc_18C2
00001B2A 1018                       		move.b	(a0)+,d0
00001B2C 1218                       		move.b	(a0)+,d1
00001B2E 74FF                       		moveq	#-1,d2
00001B30 1401                       		move.b	d1,d2
00001B32 EB4A                       		lsl.w	#5,d2
00001B34 1400                       		move.b	d0,d2
00001B36 0241 0007                  		andi.w	#7,d1
00001B3A 6700                       		beq.s	loc_1928
00001B3C 1601                       		move.b	d1,d3
00001B3E 5243                       		addq.w	#1,d3
00001B40                            
00001B40                            loc_191C:
00001B40 1031 2000                  		move.b	(a1,d2.w),d0
00001B44 12C0                       		move.b	d0,(a1)+
00001B46 51CB FFF8                  		dbf	d3,loc_191C
00001B4A 6080                       		bra.s	loc_18A8
00001B4C                            ; ===========================================================================
00001B4C                            
00001B4C                            loc_1928:				; XREF: loc_1906
00001B4C 1218                       		move.b	(a0)+,d1
00001B4E 6700                       		beq.s	loc_1938
00001B50 0C01 0001                  		cmpi.b	#1,d1
00001B54 6700 FF76                  		beq.w	loc_18A8
00001B58 1601                       		move.b	d1,d3
00001B5A 60E4                       		bra.s	loc_191C
00001B5C                            ; ===========================================================================
00001B5C                            
00001B5C                            loc_1938:				; XREF: loc_1928
00001B5C 548F                       		addq.l	#2,sp
00001B5E 4E75                       		rts	
00001B60                            ; End of function KosDec
00001B60                            
00001B60                            ; ---------------------------------------------------------------------------
00001B60                            ; Pallet cycling routine loading subroutine
00001B60                            ; ---------------------------------------------------------------------------
00001B60                            
00001B60                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00001B60                            
00001B60                            
00001B60                            PalCycle_Load:				; XREF: Demo; Level_MainLoop; End_MainLoop
00001B60 7400                       		moveq	#0,d2
00001B62 7000                       		moveq	#0,d0
00001B64 1038 FE10                  		move.b	($FFFFFE10).w,d0 ; get level number
00001B68 D040                       		add.w	d0,d0		; multiply by 2
00001B6A 303B 0000                  		move.w	PalCycle(pc,d0.w),d0 ; load animated pallets offset index into d0
00001B6E 4EFB 0000                  		jmp	PalCycle(pc,d0.w) ; jump to PalCycle + offset index
00001B72                            ; End of function PalCycle_Load
00001B72                            
00001B72                            ; ===========================================================================
00001B72                            ; ---------------------------------------------------------------------------
00001B72                            ; Pallet cycling routines
00001B72                            ; ---------------------------------------------------------------------------
00001B72 0000                       PalCycle:	dc.w PalCycle_GHZ-PalCycle
00001B74 0000                       		dc.w PalCycle_LZ-PalCycle
00001B76 0000                       		dc.w PalCycle_MZ-PalCycle
00001B78 0000                       		dc.w PalCycle_SLZ-PalCycle
00001B7A 0000                       		dc.w PalCycle_SYZ-PalCycle
00001B7C 0000                       		dc.w PalCycle_SBZ-PalCycle
00001B7E 0000                       		dc.w PalCycle_GHZ-PalCycle
00001B80                            
00001B80                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00001B80                            
00001B80                            
00001B80                            PalCycle_Title:				; XREF: TitleScreen
00001B80 41F9 0000 0000             		lea	(Pal_TitleCyc).l,a0
00001B86 6000                       		bra.s	loc_196A
00001B88                            ; ===========================================================================
00001B88                            
00001B88                            PalCycle_GHZ:				; XREF: PalCycle
00001B88 41F9 0000 0000             		lea	(Pal_GHZCyc).l,a0
00001B8E                            
00001B8E                            loc_196A:				; XREF: PalCycle_Title
00001B8E 5378 F634                  		subq.w	#1,($FFFFF634).w
00001B92 6A00                       		bpl.s	locret_1990
00001B94 31FC 0005 F634             		move.w	#5,($FFFFF634).w
00001B9A 3038 F632                  		move.w	($FFFFF632).w,d0
00001B9E 5278 F632                  		addq.w	#1,($FFFFF632).w
00001BA2 0240 0003                  		andi.w	#3,d0
00001BA6 E748                       		lsl.w	#3,d0
00001BA8 43F8 FB50                  		lea	($FFFFFB50).w,a1
00001BAC 22F0 0000                  		move.l	(a0,d0.w),(a1)+
00001BB0 22B0 0004                  		move.l	4(a0,d0.w),(a1)
00001BB4                            
00001BB4                            locret_1990:
00001BB4 4E75                       		rts	
00001BB6                            ; End of function PalCycle_Title
00001BB6                            
00001BB6                            
00001BB6                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00001BB6                            
00001BB6                            
00001BB6                            PalCycle_LZ:				; XREF: PalCycle
00001BB6 5378 F634                  		subq.w	#1,($FFFFF634).w
00001BBA 6A00                       		bpl.s	loc_19D8
00001BBC 31FC 0002 F634             		move.w	#2,($FFFFF634).w
00001BC2 3038 F632                  		move.w	($FFFFF632).w,d0
00001BC6 5278 F632                  		addq.w	#1,($FFFFF632).w
00001BCA 0240 0003                  		andi.w	#3,d0
00001BCE E748                       		lsl.w	#3,d0
00001BD0 41F9 0000 0000             		lea	(Pal_LZCyc1).l,a0
00001BD6 0C38 0003 FE11             		cmpi.b	#3,($FFFFFE11).w ; check if level is SBZ3
00001BDC 6600                       		bne.s	loc_19C0
00001BDE 41F9 0000 0000             		lea	(Pal_SBZ3Cyc1).l,a0 ; load SBZ3	pallet instead
00001BE4                            
00001BE4                            loc_19C0:
00001BE4 43F8 FB56                  		lea	($FFFFFB56).w,a1
00001BE8 22F0 0000                  		move.l	(a0,d0.w),(a1)+
00001BEC 22B0 0004                  		move.l	4(a0,d0.w),(a1)
00001BF0 43F8 FAD6                  		lea	($FFFFFAD6).w,a1
00001BF4 22F0 0000                  		move.l	(a0,d0.w),(a1)+
00001BF8 22B0 0004                  		move.l	4(a0,d0.w),(a1)
00001BFC                            
00001BFC                            loc_19D8:
00001BFC 3038 FE04                  		move.w	($FFFFFE04).w,d0
00001C00 0240 0007                  		andi.w	#7,d0
00001C04 103B 0000                  		move.b	byte_1A3C(pc,d0.w),d0
00001C08 6700                       		beq.s	locret_1A3A
00001C0A 7201                       		moveq	#1,d1
00001C0C 4A38 F7C0                  		tst.b	($FFFFF7C0).w
00001C10 6700                       		beq.s	loc_19F0
00001C12 4441                       		neg.w	d1
00001C14                            
00001C14                            loc_19F0:
00001C14 3038 F650                  		move.w	($FFFFF650).w,d0
00001C18 0240 0003                  		andi.w	#3,d0
00001C1C D041                       		add.w	d1,d0
00001C1E 0C40 0003                  		cmpi.w	#3,d0
00001C22 6500                       		bcs.s	loc_1A0A
00001C24 3200                       		move.w	d0,d1
00001C26 7000                       		moveq	#0,d0
00001C28 4A41                       		tst.w	d1
00001C2A 6A00                       		bpl.s	loc_1A0A
00001C2C 7002                       		moveq	#2,d0
00001C2E                            
00001C2E                            loc_1A0A:
00001C2E 31C0 F650                  		move.w	d0,($FFFFF650).w
00001C32 D040                       		add.w	d0,d0
00001C34 3200                       		move.w	d0,d1
00001C36 D040                       		add.w	d0,d0
00001C38 D041                       		add.w	d1,d0
00001C3A 41F9 0000 0000             		lea	(Pal_LZCyc2).l,a0
00001C40 43F8 FB76                  		lea	($FFFFFB76).w,a1
00001C44 22F0 0000                  		move.l	(a0,d0.w),(a1)+
00001C48 32B0 0004                  		move.w	4(a0,d0.w),(a1)
00001C4C 41F9 0000 0000             		lea	(Pal_LZCyc3).l,a0
00001C52 43F8 FAF6                  		lea	($FFFFFAF6).w,a1
00001C56 22F0 0000                  		move.l	(a0,d0.w),(a1)+
00001C5A 32B0 0004                  		move.w	4(a0,d0.w),(a1)
00001C5E                            
00001C5E                            locret_1A3A:
00001C5E 4E75                       		rts	
00001C60                            ; End of function PalCycle_LZ
00001C60                            
00001C60                            ; ===========================================================================
00001C60 0100 0001 0000 0100        byte_1A3C:	dc.b 1,	0, 0, 1, 0, 0, 1, 0
00001C68                            ; ===========================================================================
00001C68                            
00001C68                            PalCycle_MZ:				; XREF: PalCycle
00001C68 4E75                       		rts	
00001C6A                            
00001C6A                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00001C6A                            
00001C6A                            
00001C6A                            PalCycle_SLZ:				; XREF: PalCycle
00001C6A 4E75                       		rts	
00001C6C                            ; End of function PalCycle_SLZ
00001C6C                            
00001C6C                            
00001C6C                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00001C6C                            
00001C6C                            
00001C6C                            PalCycle_SYZ:				; XREF: PalCycle
00001C6C 5378 F634                  		subq.w	#1,($FFFFF634).w
00001C70 6A00                       		bpl.s	locret_1AC6
00001C72 31FC 0005 F634             		move.w	#5,($FFFFF634).w
00001C78 3038 F632                  		move.w	($FFFFF632).w,d0
00001C7C 5278 F632                  		addq.w	#1,($FFFFF632).w
00001C80 0240 0003                  		andi.w	#3,d0
00001C84 E548                       		lsl.w	#2,d0
00001C86 3200                       		move.w	d0,d1
00001C88 D040                       		add.w	d0,d0
00001C8A 41F9 0000 0000             		lea	(Pal_SYZCyc1).l,a0
00001C90 43F8 FB6E                  		lea	($FFFFFB6E).w,a1
00001C94 22F0 0000                  		move.l	(a0,d0.w),(a1)+
00001C98 22B0 0004                  		move.l	4(a0,d0.w),(a1)
00001C9C 41F9 0000 0000             		lea	(Pal_SYZCyc2).l,a0
00001CA2 43F8 FB76                  		lea	($FFFFFB76).w,a1
00001CA6 32B0 1000                  		move.w	(a0,d1.w),(a1)
00001CAA 3370 1002 0004             		move.w	2(a0,d1.w),4(a1)
00001CB0                            
00001CB0                            locret_1AC6:
00001CB0 4E75                       		rts	
00001CB2                            ; End of function PalCycle_SYZ
00001CB2                            
00001CB2                            
00001CB2                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00001CB2                            
00001CB2                            
00001CB2                            PalCycle_SBZ:				; XREF: PalCycle
00001CB2 45F9 0000 0000             		lea	(Pal_SBZCycList).l,a2
00001CB8 4A38 FE11                  		tst.b	($FFFFFE11).w
00001CBC 6700                       		beq.s	loc_1ADA
00001CBE 45F9 0000 0000             		lea	(Pal_SBZCycList2).l,a2
00001CC4                            
00001CC4                            loc_1ADA:
00001CC4 43F8 F650                  		lea	($FFFFF650).w,a1
00001CC8 321A                       		move.w	(a2)+,d1
00001CCA                            
00001CCA                            loc_1AE0:
00001CCA 5311                       		subq.b	#1,(a1)
00001CCC 6B00                       		bmi.s	loc_1AEA
00001CCE 5489                       		addq.l	#2,a1
00001CD0 5C8A                       		addq.l	#6,a2
00001CD2 6000                       		bra.s	loc_1B06
00001CD4                            ; ===========================================================================
00001CD4                            
00001CD4                            loc_1AEA:				; XREF: PalCycle_SBZ
00001CD4 12DA                       		move.b	(a2)+,(a1)+
00001CD6 1011                       		move.b	(a1),d0
00001CD8 5200                       		addq.b	#1,d0
00001CDA B01A                       		cmp.b	(a2)+,d0
00001CDC 6500                       		bcs.s	loc_1AF6
00001CDE 7000                       		moveq	#0,d0
00001CE0                            
00001CE0                            loc_1AF6:
00001CE0 12C0                       		move.b	d0,(a1)+
00001CE2 0240 000F                  		andi.w	#$F,d0
00001CE6 D040                       		add.w	d0,d0
00001CE8 305A                       		movea.w	(a2)+,a0
00001CEA 365A                       		movea.w	(a2)+,a3
00001CEC 36B0 0000                  		move.w	(a0,d0.w),(a3)
00001CF0                            
00001CF0                            loc_1B06:				; XREF: PalCycle_SBZ
00001CF0 51C9 FFD8                  		dbf	d1,loc_1AE0
00001CF4 5378 F634                  		subq.w	#1,($FFFFF634).w
00001CF8 6A00                       		bpl.s	locret_1B64
00001CFA 41F9 0000 0000             		lea	(Pal_SBZCyc4).l,a0
00001D00 31FC 0001 F634             		move.w	#1,($FFFFF634).w
00001D06 4A38 FE11                  		tst.b	($FFFFFE11).w
00001D0A 6700                       		beq.s	loc_1B2E
00001D0C 41F9 0000 0000             		lea	(Pal_SBZCyc10).l,a0
00001D12 31FC 0000 F634             		move.w	#0,($FFFFF634).w
00001D18                            
00001D18                            loc_1B2E:
00001D18 72FF                       		moveq	#-1,d1
00001D1A 4A38 F7C0                  		tst.b	($FFFFF7C0).w
00001D1E 6700                       		beq.s	loc_1B38
00001D20 4441                       		neg.w	d1
00001D22                            
00001D22                            loc_1B38:
00001D22 3038 F632                  		move.w	($FFFFF632).w,d0
00001D26 0240 0003                  		andi.w	#3,d0
00001D2A D041                       		add.w	d1,d0
00001D2C 0C40 0003                  		cmpi.w	#3,d0
00001D30 6500                       		bcs.s	loc_1B52
00001D32 3200                       		move.w	d0,d1
00001D34 7000                       		moveq	#0,d0
00001D36 4A41                       		tst.w	d1
00001D38 6A00                       		bpl.s	loc_1B52
00001D3A 7002                       		moveq	#2,d0
00001D3C                            
00001D3C                            loc_1B52:
00001D3C 31C0 F632                  		move.w	d0,($FFFFF632).w
00001D40 D040                       		add.w	d0,d0
00001D42 43F8 FB58                  		lea	($FFFFFB58).w,a1
00001D46 22F0 0000                  		move.l	(a0,d0.w),(a1)+
00001D4A 32B0 0004                  		move.w	4(a0,d0.w),(a1)
00001D4E                            
00001D4E                            locret_1B64:
00001D4E 4E75                       		rts	
00001D50                            ; End of function PalCycle_SBZ
00001D50                            
00001D50                            ; ===========================================================================
00001D50                            Pal_TitleCyc:	incbin	pallet\c_title.bin
00001D70                            Pal_GHZCyc:	incbin	pallet\c_ghz.bin
00001D90                            Pal_LZCyc1:	incbin	pallet\c_lz_wat.bin	; waterfalls pallet
00001DB0                            Pal_LZCyc2:	incbin	pallet\c_lz_bel.bin	; conveyor belt pallet
00001DC2                            Pal_LZCyc3:	incbin	pallet\c_lz_buw.bin	; conveyor belt (underwater) pallet
00001DD4                            Pal_SBZ3Cyc1:	incbin	pallet\c_sbz3_w.bin	; waterfalls pallet
00001E3C                            Pal_SLZCyc:	incbin	pallet\c_slz.bin
00001E60                            Pal_SYZCyc1:	incbin	pallet\c_syz_1.bin
00001E80                            Pal_SYZCyc2:	incbin	pallet\c_syz_2.bin
00001E90                            
00001E90                            Pal_SBZCycList:
00001E90                            	include "_inc\SBZ pallet script 1.asm"
00001E90                            ; ---------------------------------------------------------------------------
00001E90                            ; Scrap Brain Zone 1 pallet cycling script
00001E90                            ; ---------------------------------------------------------------------------
00001E90 0008                       	dc.w 8			; number of entries - 1
00001E92 0708                       	dc.b 7,	8		; duration in frames, number of	colours
00001E94 0000                       	dc.w Pal_SBZCyc1	; pallet pointer
00001E96 FB50                       	dc.w $FB50		; RAM address
00001E98 0D08                       	dc.b $D, 8
00001E9A 0000                       	dc.w Pal_SBZCyc2
00001E9C FB52                       	dc.w $FB52
00001E9E 0E08                       	dc.b $E, 8
00001EA0 0000                       	dc.w Pal_SBZCyc3
00001EA2 FB6E                       	dc.w $FB6E
00001EA4 0B08                       	dc.b $B, 8
00001EA6 0000                       	dc.w Pal_SBZCyc5
00001EA8 FB70                       	dc.w $FB70
00001EAA 0708                       	dc.b 7,	8
00001EAC 0000                       	dc.w Pal_SBZCyc6
00001EAE FB72                       	dc.w $FB72
00001EB0 1C10                       	dc.b $1C, $10
00001EB2 0000                       	dc.w Pal_SBZCyc7
00001EB4 FB7E                       	dc.w $FB7E
00001EB6 0303                       	dc.b 3,	3
00001EB8 0000                       	dc.w Pal_SBZCyc8
00001EBA FB78                       	dc.w $FB78
00001EBC 0303                       	dc.b 3,	3
00001EBE 0000                       	dc.w Pal_SBZCyc8+2
00001EC0 FB7A                       	dc.w $FB7A
00001EC2 0303                       	dc.b 3,	3
00001EC4 0000                       	dc.w Pal_SBZCyc8+4
00001EC6 FB7C                       	dc.w $FB7C
00001EC8                            	even
00001EC8                            	even
00001EC8                            
00001EC8                            Pal_SBZCycList2:
00001EC8                            	include "_inc\SBZ pallet script 2.asm"
00001EC8                            ; ---------------------------------------------------------------------------
00001EC8                            ; Scrap Brain Zone 2 pallet cycling script
00001EC8                            ; ---------------------------------------------------------------------------
00001EC8 0006                       	dc.w 6
00001ECA 0708                       	dc.b 7,	8
00001ECC 0000                       	dc.w Pal_SBZCyc1
00001ECE FB50                       	dc.w $FB50
00001ED0 0D08                       	dc.b $D, 8
00001ED2 0000                       	dc.w Pal_SBZCyc2
00001ED4 FB52                       	dc.w $FB52
00001ED6 0908                       	dc.b 9,	8
00001ED8 0000                       	dc.w Pal_SBZCyc9
00001EDA FB70                       	dc.w $FB70
00001EDC 0708                       	dc.b 7,	8
00001EDE 0000                       	dc.w Pal_SBZCyc6
00001EE0 FB72                       	dc.w $FB72
00001EE2 0303                       	dc.b 3,	3
00001EE4 0000                       	dc.w Pal_SBZCyc8
00001EE6 FB78                       	dc.w $FB78
00001EE8 0303                       	dc.b 3,	3
00001EEA 0000                       	dc.w Pal_SBZCyc8+2
00001EEC FB7A                       	dc.w $FB7A
00001EEE 0303                       	dc.b 3,	3
00001EF0 0000                       	dc.w Pal_SBZCyc8+4
00001EF2 FB7C                       	dc.w $FB7C
00001EF4                            	even
00001EF4                            	even
00001EF4                            
00001EF4                            Pal_SBZCyc1:	incbin	pallet\c_sbz_1.bin
00001F04                            Pal_SBZCyc2:	incbin	pallet\c_sbz_2.bin
00001F14                            Pal_SBZCyc3:	incbin	pallet\c_sbz_3.bin
00001F24                            Pal_SBZCyc4:	incbin	pallet\c_sbz_4.bin
00001F30                            Pal_SBZCyc5:	incbin	pallet\c_sbz_5.bin
00001F40                            Pal_SBZCyc6:	incbin	pallet\c_sbz_6.bin
00001F50                            Pal_SBZCyc7:	incbin	pallet\c_sbz_7.bin
00001F70                            Pal_SBZCyc8:	incbin	pallet\c_sbz_8.bin
00001F7A                            Pal_SBZCyc9:	incbin	pallet\c_sbz_9.bin
00001F8A                            Pal_SBZCyc10:	incbin	pallet\c_sbz_10.bin
00001F96                            ; ---------------------------------------------------------------------------
00001F96                            ; Subroutine to	fade out and fade in
00001F96                            ; ---------------------------------------------------------------------------
00001F96                            
00001F96                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00001F96                            
00001F96                            
00001F96                            Pal_FadeTo:
00001F96 31FC 003F F626             		move.w	#$3F,($FFFFF626).w
00001F9C                            
00001F9C                            Pal_FadeTo2:
00001F9C 7000                       		moveq	#0,d0
00001F9E 41F8 FB00                  		lea	($FFFFFB00).w,a0
00001FA2 1038 F626                  		move.b	($FFFFF626).w,d0
00001FA6 D0C0                       		adda.w	d0,a0
00001FA8 7200                       		moveq	#0,d1
00001FAA 1038 F627                  		move.b	($FFFFF627).w,d0
00001FAE                            
00001FAE                            Pal_ToBlack:
00001FAE 30C1                       		move.w	d1,(a0)+
00001FB0 51C8 FFFC                  		dbf	d0,Pal_ToBlack	; fill pallet with $000	(black)
00001FB4                            
00001FB4 383C 0015                  		move.w	#$15,d4
00001FB8                            
00001FB8                            loc_1DCE:
00001FB8 11FC 0012 F62A             		move.b	#$12,($FFFFF62A).w
00001FBE 6100 0000                  		bsr.w	DelayProgram
00001FC2 6100                       		bsr.s	Pal_FadeIn
00001FC4 6100 F84A                  		bsr.w	RunPLC_RAM
00001FC8 51CC FFEE                  		dbf	d4,loc_1DCE
00001FCC 4E75                       		rts	
00001FCE                            ; End of function Pal_FadeTo
00001FCE                            
00001FCE                            ; ---------------------------------------------------------------------------
00001FCE                            ; Pallet fade-in subroutine
00001FCE                            ; ---------------------------------------------------------------------------
00001FCE                            
00001FCE                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00001FCE                            
00001FCE                            
00001FCE                            Pal_FadeIn:				; XREF: Pal_FadeTo
00001FCE 7000                       		moveq	#0,d0
00001FD0 41F8 FB00                  		lea	($FFFFFB00).w,a0
00001FD4 43F8 FB80                  		lea	($FFFFFB80).w,a1
00001FD8 1038 F626                  		move.b	($FFFFF626).w,d0
00001FDC D0C0                       		adda.w	d0,a0
00001FDE D2C0                       		adda.w	d0,a1
00001FE0 1038 F627                  		move.b	($FFFFF627).w,d0
00001FE4                            
00001FE4                            loc_1DFA:
00001FE4 6100                       		bsr.s	Pal_AddColor
00001FE6 51C8 FFFC                  		dbf	d0,loc_1DFA
00001FEA 0C38 0001 FE10             		cmpi.b	#1,($FFFFFE10).w
00001FF0 6600                       		bne.s	locret_1E24
00001FF2 7000                       		moveq	#0,d0
00001FF4 41F8 FA80                  		lea	($FFFFFA80).w,a0
00001FF8 43F8 FA00                  		lea	($FFFFFA00).w,a1
00001FFC 1038 F626                  		move.b	($FFFFF626).w,d0
00002000 D0C0                       		adda.w	d0,a0
00002002 D2C0                       		adda.w	d0,a1
00002004 1038 F627                  		move.b	($FFFFF627).w,d0
00002008                            
00002008                            loc_1E1E:
00002008 6100                       		bsr.s	Pal_AddColor
0000200A 51C8 FFFC                  		dbf	d0,loc_1E1E
0000200E                            
0000200E                            locret_1E24:
0000200E 4E75                       		rts	
00002010                            ; End of function Pal_FadeIn
00002010                            
00002010                            
00002010                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00002010                            
00002010                            
00002010                            Pal_AddColor:				; XREF: Pal_FadeIn
00002010 3419                       		move.w	(a1)+,d2
00002012 3610                       		move.w	(a0),d3
00002014 B642                       		cmp.w	d2,d3
00002016 6700                       		beq.s	loc_1E4E
00002018 3203                       		move.w	d3,d1
0000201A 0641 0200                  		addi.w	#$200,d1	; increase blue	value
0000201E B242                       		cmp.w	d2,d1		; has blue reached threshold level?
00002020 6200                       		bhi.s	Pal_AddGreen	; if yes, branch
00002022 30C1                       		move.w	d1,(a0)+	; update pallet
00002024 4E75                       		rts	
00002026                            ; ===========================================================================
00002026                            
00002026                            Pal_AddGreen:				; XREF: Pal_AddColor
00002026 3203                       		move.w	d3,d1
00002028 0641 0020                  		addi.w	#$20,d1		; increase green value
0000202C B242                       		cmp.w	d2,d1
0000202E 6200                       		bhi.s	Pal_AddRed
00002030 30C1                       		move.w	d1,(a0)+	; update pallet
00002032 4E75                       		rts	
00002034                            ; ===========================================================================
00002034                            
00002034                            Pal_AddRed:				; XREF: Pal_AddGreen
00002034 5458                       		addq.w	#2,(a0)+	; increase red value
00002036 4E75                       		rts	
00002038                            ; ===========================================================================
00002038                            
00002038                            loc_1E4E:				; XREF: Pal_AddColor
00002038 5448                       		addq.w	#2,a0
0000203A 4E75                       		rts	
0000203C                            ; End of function Pal_AddColor
0000203C                            
0000203C                            
0000203C                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000203C                            
0000203C                            
0000203C                            Pal_FadeFrom:
0000203C 31FC 003F F626             		move.w	#$3F,($FFFFF626).w
00002042 383C 0015                  		move.w	#$15,d4
00002046                            
00002046                            loc_1E5C:
00002046 11FC 0012 F62A             		move.b	#$12,($FFFFF62A).w
0000204C 6100 0000                  		bsr.w	DelayProgram
00002050 6100                       		bsr.s	Pal_FadeOut
00002052 6100 F7BC                  		bsr.w	RunPLC_RAM
00002056 51CC FFEE                  		dbf	d4,loc_1E5C
0000205A 4E75                       		rts	
0000205C                            ; End of function Pal_FadeFrom
0000205C                            
0000205C                            ; ---------------------------------------------------------------------------
0000205C                            ; Pallet fade-out subroutine
0000205C                            ; ---------------------------------------------------------------------------
0000205C                            
0000205C                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000205C                            
0000205C                            
0000205C                            Pal_FadeOut:				; XREF: Pal_FadeFrom
0000205C 7000                       		moveq	#0,d0
0000205E 41F8 FB00                  		lea	($FFFFFB00).w,a0
00002062 1038 F626                  		move.b	($FFFFF626).w,d0
00002066 D0C0                       		adda.w	d0,a0
00002068 1038 F627                  		move.b	($FFFFF627).w,d0
0000206C                            
0000206C                            loc_1E82:
0000206C 6100                       		bsr.s	Pal_DecColor
0000206E 51C8 FFFC                  		dbf	d0,loc_1E82
00002072                            
00002072 7000                       		moveq	#0,d0
00002074 41F8 FA80                  		lea	($FFFFFA80).w,a0
00002078 1038 F626                  		move.b	($FFFFF626).w,d0
0000207C D0C0                       		adda.w	d0,a0
0000207E 1038 F627                  		move.b	($FFFFF627).w,d0
00002082                            
00002082                            loc_1E98:
00002082 6100                       		bsr.s	Pal_DecColor
00002084 51C8 FFFC                  		dbf	d0,loc_1E98
00002088 4E75                       		rts	
0000208A                            ; End of function Pal_FadeOut
0000208A                            
0000208A                            
0000208A                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000208A                            
0000208A                            
0000208A                            Pal_DecColor:				; XREF: Pal_FadeOut
0000208A 3410                       		move.w	(a0),d2
0000208C 6700                       		beq.s	loc_1ECC
0000208E 3202                       		move.w	d2,d1
00002090 0241 000E                  		andi.w	#$E,d1
00002094 6700                       		beq.s	Pal_DecGreen
00002096 5558                       		subq.w	#2,(a0)+	; decrease red value
00002098 4E75                       		rts	
0000209A                            ; ===========================================================================
0000209A                            
0000209A                            Pal_DecGreen:				; XREF: Pal_DecColor
0000209A 3202                       		move.w	d2,d1
0000209C 0241 00E0                  		andi.w	#$E0,d1
000020A0 6700                       		beq.s	Pal_DecBlue
000020A2 0458 0020                  		subi.w	#$20,(a0)+	; decrease green value
000020A6 4E75                       		rts	
000020A8                            ; ===========================================================================
000020A8                            
000020A8                            Pal_DecBlue:				; XREF: Pal_DecGreen
000020A8 3202                       		move.w	d2,d1
000020AA 0241 0E00                  		andi.w	#$E00,d1
000020AE 6700                       		beq.s	loc_1ECC
000020B0 0458 0200                  		subi.w	#$200,(a0)+	; decrease blue	value
000020B4 4E75                       		rts	
000020B6                            ; ===========================================================================
000020B6                            
000020B6                            loc_1ECC:				; XREF: Pal_DecColor
000020B6 5448                       		addq.w	#2,a0
000020B8 4E75                       		rts	
000020BA                            ; End of function Pal_DecColor
000020BA                            
000020BA                            ; ---------------------------------------------------------------------------
000020BA                            ; Subroutine to	fill the pallet	with white (special stage)
000020BA                            ; ---------------------------------------------------------------------------
000020BA                            
000020BA                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000020BA                            
000020BA                            
000020BA                            Pal_MakeWhite:				; XREF: SpecialStage
000020BA 31FC 003F F626             		move.w	#$3F,($FFFFF626).w
000020C0 7000                       		moveq	#0,d0
000020C2 41F8 FB00                  		lea	($FFFFFB00).w,a0
000020C6 1038 F626                  		move.b	($FFFFF626).w,d0
000020CA D0C0                       		adda.w	d0,a0
000020CC 323C 0EEE                  		move.w	#$EEE,d1
000020D0 1038 F627                  		move.b	($FFFFF627).w,d0
000020D4                            
000020D4                            PalWhite_Loop:
000020D4 30C1                       		move.w	d1,(a0)+
000020D6 51C8 FFFC                  		dbf	d0,PalWhite_Loop
000020DA 383C 0015                  		move.w	#$15,d4
000020DE                            
000020DE                            loc_1EF4:
000020DE 11FC 0012 F62A             		move.b	#$12,($FFFFF62A).w
000020E4 6100 0000                  		bsr.w	DelayProgram
000020E8 6100                       		bsr.s	Pal_WhiteToBlack
000020EA 6100 F724                  		bsr.w	RunPLC_RAM
000020EE 51CC FFEE                  		dbf	d4,loc_1EF4
000020F2 4E75                       		rts	
000020F4                            ; End of function Pal_MakeWhite
000020F4                            
000020F4                            
000020F4                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000020F4                            
000020F4                            
000020F4                            Pal_WhiteToBlack:			; XREF: Pal_MakeWhite
000020F4 7000                       		moveq	#0,d0
000020F6 41F8 FB00                  		lea	($FFFFFB00).w,a0
000020FA 43F8 FB80                  		lea	($FFFFFB80).w,a1
000020FE 1038 F626                  		move.b	($FFFFF626).w,d0
00002102 D0C0                       		adda.w	d0,a0
00002104 D2C0                       		adda.w	d0,a1
00002106 1038 F627                  		move.b	($FFFFF627).w,d0
0000210A                            
0000210A                            loc_1F20:
0000210A 6100                       		bsr.s	Pal_DecColor2
0000210C 51C8 FFFC                  		dbf	d0,loc_1F20
00002110                            
00002110 0C38 0001 FE10             		cmpi.b	#1,($FFFFFE10).w
00002116 6600                       		bne.s	locret_1F4A
00002118 7000                       		moveq	#0,d0
0000211A 41F8 FA80                  		lea	($FFFFFA80).w,a0
0000211E 43F8 FA00                  		lea	($FFFFFA00).w,a1
00002122 1038 F626                  		move.b	($FFFFF626).w,d0
00002126 D0C0                       		adda.w	d0,a0
00002128 D2C0                       		adda.w	d0,a1
0000212A 1038 F627                  		move.b	($FFFFF627).w,d0
0000212E                            
0000212E                            loc_1F44:
0000212E 6100                       		bsr.s	Pal_DecColor2
00002130 51C8 FFFC                  		dbf	d0,loc_1F44
00002134                            
00002134                            locret_1F4A:
00002134 4E75                       		rts	
00002136                            ; End of function Pal_WhiteToBlack
00002136                            
00002136                            
00002136                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00002136                            
00002136                            
00002136                            Pal_DecColor2:				; XREF: Pal_WhiteToBlack
00002136 3419                       		move.w	(a1)+,d2
00002138 3610                       		move.w	(a0),d3
0000213A B642                       		cmp.w	d2,d3
0000213C 6700                       		beq.s	loc_1F78
0000213E 3203                       		move.w	d3,d1
00002140 0441 0200                  		subi.w	#$200,d1	; decrease blue	value
00002144 6500                       		bcs.s	loc_1F64
00002146 B242                       		cmp.w	d2,d1
00002148 6500                       		bcs.s	loc_1F64
0000214A 30C1                       		move.w	d1,(a0)+
0000214C 4E75                       		rts	
0000214E                            ; ===========================================================================
0000214E                            
0000214E                            loc_1F64:				; XREF: Pal_DecColor2
0000214E 3203                       		move.w	d3,d1
00002150 0441 0020                  		subi.w	#$20,d1		; decrease green value
00002154 6500                       		bcs.s	loc_1F74
00002156 B242                       		cmp.w	d2,d1
00002158 6500                       		bcs.s	loc_1F74
0000215A 30C1                       		move.w	d1,(a0)+
0000215C 4E75                       		rts	
0000215E                            ; ===========================================================================
0000215E                            
0000215E                            loc_1F74:				; XREF: loc_1F64
0000215E 5558                       		subq.w	#2,(a0)+	; decrease red value
00002160 4E75                       		rts	
00002162                            ; ===========================================================================
00002162                            
00002162                            loc_1F78:				; XREF: Pal_DecColor2
00002162 5448                       		addq.w	#2,a0
00002164 4E75                       		rts	
00002166                            ; End of function Pal_DecColor2
00002166                            
00002166                            ; ---------------------------------------------------------------------------
00002166                            ; Subroutine to	make a white flash when	you enter a special stage
00002166                            ; ---------------------------------------------------------------------------
00002166                            
00002166                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00002166                            
00002166                            
00002166                            Pal_MakeFlash:				; XREF: SpecialStage
00002166 31FC 003F F626             		move.w	#$3F,($FFFFF626).w
0000216C 383C 0015                  		move.w	#$15,d4
00002170                            
00002170                            loc_1F86:
00002170 11FC 0012 F62A             		move.b	#$12,($FFFFF62A).w
00002176 6100 0000                  		bsr.w	DelayProgram
0000217A 6100                       		bsr.s	Pal_ToWhite
0000217C 6100 F692                  		bsr.w	RunPLC_RAM
00002180 51CC FFEE                  		dbf	d4,loc_1F86
00002184 4E75                       		rts	
00002186                            ; End of function Pal_MakeFlash
00002186                            
00002186                            
00002186                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00002186                            
00002186                            
00002186                            Pal_ToWhite:				; XREF: Pal_MakeFlash
00002186 7000                       		moveq	#0,d0
00002188 41F8 FB00                  		lea	($FFFFFB00).w,a0
0000218C 1038 F626                  		move.b	($FFFFF626).w,d0
00002190 D0C0                       		adda.w	d0,a0
00002192 1038 F627                  		move.b	($FFFFF627).w,d0
00002196                            
00002196                            loc_1FAC:
00002196 6100                       		bsr.s	Pal_AddColor2
00002198 51C8 FFFC                  		dbf	d0,loc_1FAC
0000219C 7000                       		moveq	#0,d0
0000219E 41F8 FA80                  		lea	($FFFFFA80).w,a0
000021A2 1038 F626                  		move.b	($FFFFF626).w,d0
000021A6 D0C0                       		adda.w	d0,a0
000021A8 1038 F627                  		move.b	($FFFFF627).w,d0
000021AC                            
000021AC                            loc_1FC2:
000021AC 6100                       		bsr.s	Pal_AddColor2
000021AE 51C8 FFFC                  		dbf	d0,loc_1FC2
000021B2 4E75                       		rts	
000021B4                            ; End of function Pal_ToWhite
000021B4                            
000021B4                            
000021B4                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000021B4                            
000021B4                            
000021B4                            Pal_AddColor2:				; XREF: Pal_ToWhite
000021B4 3410                       		move.w	(a0),d2
000021B6 0C42 0EEE                  		cmpi.w	#$EEE,d2
000021BA 6700                       		beq.s	loc_2006
000021BC 3202                       		move.w	d2,d1
000021BE 0241 000E                  		andi.w	#$E,d1
000021C2 0C41 000E                  		cmpi.w	#$E,d1
000021C6 6700                       		beq.s	loc_1FE2
000021C8 5458                       		addq.w	#2,(a0)+	; increase red value
000021CA 4E75                       		rts	
000021CC                            ; ===========================================================================
000021CC                            
000021CC                            loc_1FE2:				; XREF: Pal_AddColor2
000021CC 3202                       		move.w	d2,d1
000021CE 0241 00E0                  		andi.w	#$E0,d1
000021D2 0C41 00E0                  		cmpi.w	#$E0,d1
000021D6 6700                       		beq.s	loc_1FF4
000021D8 0658 0020                  		addi.w	#$20,(a0)+	; increase green value
000021DC 4E75                       		rts	
000021DE                            ; ===========================================================================
000021DE                            
000021DE                            loc_1FF4:				; XREF: loc_1FE2
000021DE 3202                       		move.w	d2,d1
000021E0 0241 0E00                  		andi.w	#$E00,d1
000021E4 0C41 0E00                  		cmpi.w	#$E00,d1
000021E8 6700                       		beq.s	loc_2006
000021EA 0658 0200                  		addi.w	#$200,(a0)+	; increase blue	value
000021EE 4E75                       		rts	
000021F0                            ; ===========================================================================
000021F0                            
000021F0                            loc_2006:				; XREF: Pal_AddColor2
000021F0 5448                       		addq.w	#2,a0
000021F2 4E75                       		rts	
000021F4                            ; End of function Pal_AddColor2
000021F4                            
000021F4                            ; ---------------------------------------------------------------------------
000021F4                            ; Pallet cycling routine - Sega	logo
000021F4                            ; ---------------------------------------------------------------------------
000021F4                            
000021F4                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000021F4                            
000021F4                            
000021F4                            PalCycle_Sega:				; XREF: SegaScreen
000021F4 4A38 F635                  		tst.b	($FFFFF635).w
000021F8 6600                       		bne.s	loc_206A
000021FA 43F8 FB20                  		lea	($FFFFFB20).w,a1
000021FE 41F9 0000 0000             		lea	(Pal_Sega1).l,a0
00002204 7205                       		moveq	#5,d1
00002206 3038 F632                  		move.w	($FFFFF632).w,d0
0000220A                            
0000220A                            loc_2020:
0000220A 6A00                       		bpl.s	loc_202A
0000220C 5448                       		addq.w	#2,a0
0000220E 5341                       		subq.w	#1,d1
00002210 5440                       		addq.w	#2,d0
00002212 60F6                       		bra.s	loc_2020
00002214                            ; ===========================================================================
00002214                            
00002214                            loc_202A:				; XREF: PalCycle_Sega
00002214 3400                       		move.w	d0,d2
00002216 0242 001E                  		andi.w	#$1E,d2
0000221A 6600                       		bne.s	loc_2034
0000221C 5440                       		addq.w	#2,d0
0000221E                            
0000221E                            loc_2034:
0000221E 0C40 0060                  		cmpi.w	#$60,d0
00002222 6400                       		bcc.s	loc_203E
00002224 3398 0000                  		move.w	(a0)+,(a1,d0.w)
00002228                            
00002228                            loc_203E:
00002228 5440                       		addq.w	#2,d0
0000222A 51C9 FFE8                  		dbf	d1,loc_202A
0000222E 3038 F632                  		move.w	($FFFFF632).w,d0
00002232 5440                       		addq.w	#2,d0
00002234 3400                       		move.w	d0,d2
00002236 0242 001E                  		andi.w	#$1E,d2
0000223A 6600                       		bne.s	loc_2054
0000223C 5440                       		addq.w	#2,d0
0000223E                            
0000223E                            loc_2054:
0000223E 0C40 0064                  		cmpi.w	#$64,d0
00002242 6D00                       		blt.s	loc_2062
00002244 31FC 0401 F634             		move.w	#$401,($FFFFF634).w
0000224A 70F4                       		moveq	#-$C,d0
0000224C                            
0000224C                            loc_2062:
0000224C 31C0 F632                  		move.w	d0,($FFFFF632).w
00002250 7001                       		moveq	#1,d0
00002252 4E75                       		rts	
00002254                            ; ===========================================================================
00002254                            
00002254                            loc_206A:				; XREF: loc_202A
00002254 5338 F634                  		subq.b	#1,($FFFFF634).w
00002258 6A00                       		bpl.s	loc_20BC
0000225A 11FC 0004 F634             		move.b	#4,($FFFFF634).w
00002260 3038 F632                  		move.w	($FFFFF632).w,d0
00002264 0640 000C                  		addi.w	#$C,d0
00002268 0C40 0030                  		cmpi.w	#$30,d0
0000226C 6500                       		bcs.s	loc_2088
0000226E 7000                       		moveq	#0,d0
00002270 4E75                       		rts	
00002272                            ; ===========================================================================
00002272                            
00002272                            loc_2088:				; XREF: loc_206A
00002272 31C0 F632                  		move.w	d0,($FFFFF632).w
00002276 41F9 0000 0000             		lea	(Pal_Sega2).l,a0
0000227C 41F0 0000                  		lea	(a0,d0.w),a0
00002280 43F8 FB04                  		lea	($FFFFFB04).w,a1
00002284 22D8                       		move.l	(a0)+,(a1)+
00002286 22D8                       		move.l	(a0)+,(a1)+
00002288 3298                       		move.w	(a0)+,(a1)
0000228A 43F8 FB20                  		lea	($FFFFFB20).w,a1
0000228E 7000                       		moveq	#0,d0
00002290 722C                       		moveq	#$2C,d1
00002292                            
00002292                            loc_20A8:
00002292 3400                       		move.w	d0,d2
00002294 0242 001E                  		andi.w	#$1E,d2
00002298 6600                       		bne.s	loc_20B2
0000229A 5440                       		addq.w	#2,d0
0000229C                            
0000229C                            loc_20B2:
0000229C 3390 0000                  		move.w	(a0),(a1,d0.w)
000022A0 5440                       		addq.w	#2,d0
000022A2 51C9 FFEE                  		dbf	d1,loc_20A8
000022A6                            
000022A6                            loc_20BC:
000022A6 7001                       		moveq	#1,d0
000022A8 4E75                       		rts	
000022AA                            ; End of function PalCycle_Sega
000022AA                            
000022AA                            ; ===========================================================================
000022AA                            
000022AA                            Pal_Sega1:	incbin	pallet\sega1.bin
000022B6                            Pal_Sega2:	incbin	pallet\sega2.bin
000022E6                            
000022E6                            ; ---------------------------------------------------------------------------
000022E6                            ; Subroutines to load pallets
000022E6                            ; ---------------------------------------------------------------------------
000022E6                            
000022E6                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000022E6                            
000022E6                            
000022E6                            PalLoad1:
000022E6 43F9 0000 0000             		lea	(PalPointers).l,a1
000022EC E748                       		lsl.w	#3,d0
000022EE D2C0                       		adda.w	d0,a1
000022F0 2459                       		movea.l	(a1)+,a2
000022F2 3659                       		movea.w	(a1)+,a3
000022F4 D6FC 0080                  		adda.w	#$80,a3
000022F8 3E19                       		move.w	(a1)+,d7
000022FA                            
000022FA                            loc_2110:
000022FA 26DA                       		move.l	(a2)+,(a3)+
000022FC 51CF FFFC                  		dbf	d7,loc_2110
00002300 4E75                       		rts	
00002302                            ; End of function PalLoad1
00002302                            
00002302                            
00002302                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00002302                            
00002302                            
00002302                            PalLoad2:
00002302 43F9 0000 0000             		lea	(PalPointers).l,a1
00002308 E748                       		lsl.w	#3,d0
0000230A D2C0                       		adda.w	d0,a1
0000230C 2459                       		movea.l	(a1)+,a2
0000230E 3659                       		movea.w	(a1)+,a3
00002310 3E19                       		move.w	(a1)+,d7
00002312                            
00002312                            loc_2128:
00002312 26DA                       		move.l	(a2)+,(a3)+
00002314 51CF FFFC                  		dbf	d7,loc_2128
00002318 4E75                       		rts	
0000231A                            ; End of function PalLoad2
0000231A                            
0000231A                            ; ---------------------------------------------------------------------------
0000231A                            ; Underwater pallet loading subroutine
0000231A                            ; ---------------------------------------------------------------------------
0000231A                            
0000231A                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000231A                            
0000231A                            
0000231A                            PalLoad3_Water:
0000231A 43F9 0000 0000             		lea	(PalPointers).l,a1
00002320 E748                       		lsl.w	#3,d0
00002322 D2C0                       		adda.w	d0,a1
00002324 2459                       		movea.l	(a1)+,a2
00002326 3659                       		movea.w	(a1)+,a3
00002328 96FC 0080                  		suba.w	#$80,a3
0000232C 3E19                       		move.w	(a1)+,d7
0000232E                            
0000232E                            loc_2144:
0000232E 26DA                       		move.l	(a2)+,(a3)+
00002330 51CF FFFC                  		dbf	d7,loc_2144
00002334 4E75                       		rts	
00002336                            ; End of function PalLoad3_Water
00002336                            
00002336                            
00002336                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00002336                            
00002336                            
00002336                            PalLoad4_Water:
00002336 43F9 0000 0000             		lea	(PalPointers).l,a1
0000233C E748                       		lsl.w	#3,d0
0000233E D2C0                       		adda.w	d0,a1
00002340 2459                       		movea.l	(a1)+,a2
00002342 3659                       		movea.w	(a1)+,a3
00002344 96FC 0100                  		suba.w	#$100,a3
00002348 3E19                       		move.w	(a1)+,d7
0000234A                            
0000234A                            loc_2160:
0000234A 26DA                       		move.l	(a2)+,(a3)+
0000234C 51CF FFFC                  		dbf	d7,loc_2160
00002350 4E75                       		rts	
00002352                            ; End of function PalLoad4_Water
00002352                            
00002352                            ; ===========================================================================
00002352                            ; ---------------------------------------------------------------------------
00002352                            ; Pallet pointers
00002352                            ; ---------------------------------------------------------------------------
00002352                            PalPointers:
00002352                            	include "_inc\Pallet pointers.asm"
00002352                            ; ---------------------------------------------------------------------------
00002352                            ; Pallet pointers
00002352                            ; ---------------------------------------------------------------------------
00002352 0000 0000                  	dc.l Pal_SegaBG		; pallet address
00002356 FB00                       	dc.w $FB00		; RAM address
00002358 001F                       	dc.w $1F		; (pallet length / 2) - 1
0000235A 0000 0000                  	dc.l Pal_Title
0000235E FB00                       	dc.w $FB00
00002360 001F                       	dc.w $1F
00002362 0000 0000                  	dc.l Pal_LevelSel
00002366 FB00                       	dc.w $FB00
00002368 001F                       	dc.w $1F
0000236A 0000 0000                  	dc.l Pal_Sonic
0000236E FB00                       	dc.w $FB00
00002370 0007                       	dc.w 7
00002372 0000 0000                  	dc.l Pal_GHZ
00002376 FB20                       	dc.w $FB20
00002378 0017                       	dc.w $17
0000237A 0000 0000                  	dc.l Pal_LZ
0000237E FB20                       	dc.w $FB20
00002380 0017                       	dc.w $17
00002382 0000 0000                  	dc.l Pal_MZ
00002386 FB20                       	dc.w $FB20
00002388 0017                       	dc.w $17
0000238A 0000 0000                  	dc.l Pal_SLZ
0000238E FB20                       	dc.w $FB20
00002390 0017                       	dc.w $17
00002392 0000 0000                  	dc.l Pal_SYZ
00002396 FB20                       	dc.w $FB20
00002398 0017                       	dc.w $17
0000239A 0000 0000                  	dc.l Pal_SBZ1
0000239E FB20                       	dc.w $FB20
000023A0 0017                       	dc.w $17
000023A2 0000 0000                  	dc.l Pal_Special
000023A6 FB00                       	dc.w $FB00
000023A8 001F                       	dc.w $1F
000023AA 0000 0000                  	dc.l Pal_LZWater
000023AE FB00                       	dc.w $FB00
000023B0 001F                       	dc.w $1F
000023B2 0000 0000                  	dc.l Pal_SBZ3
000023B6 FB20                       	dc.w $FB20
000023B8 0017                       	dc.w $17
000023BA 0000 0000                  	dc.l Pal_SBZ3Water
000023BE FB00                       	dc.w $FB00
000023C0 001F                       	dc.w $1F
000023C2 0000 0000                  	dc.l Pal_SBZ2
000023C6 FB20                       	dc.w $FB20
000023C8 0017                       	dc.w $17
000023CA 0000 0000                  	dc.l Pal_LZSonWater
000023CE FB00                       	dc.w $FB00
000023D0 0007                       	dc.w 7
000023D2 0000 0000                  	dc.l Pal_SBZ3SonWat
000023D6 FB00                       	dc.w $FB00
000023D8 0007                       	dc.w 7
000023DA 0000 0000                  	dc.l Pal_SpeResult
000023DE FB00                       	dc.w $FB00
000023E0 001F                       	dc.w $1F
000023E2 0000 0000                  	dc.l Pal_SpeContinue
000023E6 FB00                       	dc.w $FB00
000023E8 000F                       	dc.w $F
000023EA 0000 0000                  	dc.l Pal_Ending
000023EE FB00                       	dc.w $FB00
000023F0 001F                       	dc.w $1F
000023F2 0000 0000                  	dc.l Pal_Idiot
000023F6 FB20                       	dc.w $FB20
000023F8 0007                       	dc.w 7
000023FA 0000 0000                  	dc.l Pal_Gronic
000023FE FB00                       	dc.w $FB00
00002400 0007                       	dc.w 7
00002402 0000 0000                  	dc.l Pal_LZGroWater
00002406 FB00                       	dc.w $FB00
00002408 0007                       	dc.w 7
0000240A 0000 0000                  	dc.l Pal_SBZ3GroWat
0000240E FB00                       	dc.w $FB00
00002410 0007                       	dc.w 7
00002410 0007                       	dc.w 7
00002412                            
00002412                            ; ---------------------------------------------------------------------------
00002412                            ; Pallet data
00002412                            ; ---------------------------------------------------------------------------
00002412                            Pal_SegaBG:	incbin	pallet\sega_bg.bin
00002492                            Pal_Title:	incbin	pallet\title.bin
00002512                            Pal_LevelSel:	incbin	pallet\levelsel.bin
00002592                            Pal_Sonic:	incbin	pallet\sonic.bin
000025B2                            Pal_GHZ:	incbin	pallet\ghz.bin
00002612                            Pal_LZ:		incbin	pallet\lz.bin
00002672                            Pal_LZWater:	incbin	pallet\lz_uw.bin	; LZ underwater pallets
000026F2                            Pal_MZ:		incbin	pallet\mz.bin
00002752                            Pal_SLZ:	incbin	pallet\slz.bin
000027B2                            Pal_SYZ:	incbin	pallet\syz.bin
00002812                            Pal_SBZ1:	incbin	pallet\sbz_act1.bin	; SBZ act 1 pallets
00002872                            Pal_SBZ2:	incbin	pallet\sbz_act2.bin	; SBZ act 2 & Final Zone pallets
000028D2                            Pal_Special:	incbin	pallet\special.bin	; special stage pallets
00002952                            Pal_SBZ3:	incbin	pallet\sbz_act3.bin	; SBZ act 3 pallets
000029B2                            Pal_SBZ3Water:	incbin	pallet\sbz_a3uw.bin	; SBZ act 3 (underwater) pallets
00002A32                            Pal_LZSonWater:	incbin	pallet\son_lzuw.bin	; Sonic (underwater in LZ) pallet
00002A52                            Pal_SBZ3SonWat:	incbin	pallet\son_sbzu.bin	; Sonic (underwater in SBZ act 3) pallet
00002A72                            Pal_SpeResult:	incbin	pallet\ssresult.bin	; special stage results screen pallets
00002AF2                            Pal_SpeContinue:incbin	pallet\sscontin.bin	; special stage results screen continue pallet
00002B32                            Pal_Ending:	incbin	pallet\ending.bin	; ending sequence pallets
00002BB2                            Pal_Idiot:	incbin	pallet\idiot.bin	; idiot pallet
00002BD2                            Pal_Gronic:	incbin	pallet\gronic.bin	; gronic char
00002BF2                            Pal_LZGroWater:	incbin	pallet\groniclzuw.bin	; Gronic (underwater in SBZ act 3) pallet
00002C12                            Pal_SBZ3GroWat:	incbin	pallet\gronicsbz3uw.bin	; Gronic (underwater in SBZ act 3) pallet
00002C32                            
00002C32                            ; ---------------------------------------------------------------------------
00002C32                            ; Subroutine to	delay the program by ($FFFFF62A) frames
00002C32                            ; ---------------------------------------------------------------------------
00002C32                            
00002C32                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00002C32                            
00002C32                            
00002C32                            DelayProgram:				; XREF: PauseGame
00002C32 46FC 2300                  		move	#$2300,sr
00002C36                            
00002C36                            loc_29AC:
00002C36 4A38 F62A                  		tst.b	($FFFFF62A).w
00002C3A 66FA                       		bne.s	loc_29AC
00002C3C 4E75                       		rts	
00002C3E                            ; End of function DelayProgram
00002C3E                            
00002C3E                            ; ---------------------------------------------------------------------------
00002C3E                            ; Subroutine to	generate a pseudo-random number	in d0
00002C3E                            ; ---------------------------------------------------------------------------
00002C3E                            
00002C3E                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00002C3E                            
00002C3E                            
00002C3E                            RandomNumber:
00002C3E 2238 F636                  		move.l	($FFFFF636).w,d1
00002C42 6600                       		bne.s	loc_29C0
00002C44 223C 2A6D 365A             		move.l	#$2A6D365A,d1
00002C4A                            
00002C4A                            loc_29C0:
00002C4A 2001                       		move.l	d1,d0
00002C4C E581                       		asl.l	#2,d1
00002C4E D280                       		add.l	d0,d1
00002C50 E781                       		asl.l	#3,d1
00002C52 D280                       		add.l	d0,d1
00002C54 3001                       		move.w	d1,d0
00002C56 4841                       		swap	d1
00002C58 D041                       		add.w	d1,d0
00002C5A 3200                       		move.w	d0,d1
00002C5C 4841                       		swap	d1
00002C5E 21C1 F636                  		move.l	d1,($FFFFF636).w
00002C62 4E75                       		rts	
00002C64                            ; End of function RandomNumber
00002C64                            
00002C64                            
00002C64                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00002C64                            
00002C64                            
00002C64                            CalcSine:				; XREF: SS_BGAnimate; et al
00002C64 0240 00FF                  		andi.w	#$FF,d0
00002C68 D040                       		add.w	d0,d0
00002C6A 0640 0080                  		addi.w	#$80,d0
00002C6E 323B 0000                  		move.w	Sine_Data(pc,d0.w),d1
00002C72 0440 0080                  		subi.w	#$80,d0
00002C76 303B 0000                  		move.w	Sine_Data(pc,d0.w),d0
00002C7A 4E75                       		rts	
00002C7C                            ; End of function CalcSine
00002C7C                            
00002C7C                            ; ===========================================================================
00002C7C                            
00002C7C                            Sine_Data:	incbin	misc\sinewave.bin	; values for a 360ยบ sine wave
00002EFC                            
00002EFC                            ; ===========================================================================
00002EFC 48E7 6000                  		movem.l	d1-d2,-(sp)
00002F00 3200                       		move.w	d0,d1
00002F02 4841                       		swap	d1
00002F04 7000                       		moveq	#0,d0
00002F06 3200                       		move.w	d0,d1
00002F08 7407                       		moveq	#7,d2
00002F0A                            
00002F0A                            loc_2C80:
00002F0A E599                       		rol.l	#2,d1
00002F0C D040                       		add.w	d0,d0
00002F0E 5240                       		addq.w	#1,d0
00002F10 9240                       		sub.w	d0,d1
00002F12 6400                       		bcc.s	loc_2C9A
00002F14 D240                       		add.w	d0,d1
00002F16 5340                       		subq.w	#1,d0
00002F18 51CA FFF0                  		dbf	d2,loc_2C80
00002F1C E248                       		lsr.w	#1,d0
00002F1E 4CDF 0006                  		movem.l	(sp)+,d1-d2
00002F22 4E75                       		rts	
00002F24                            ; ===========================================================================
00002F24                            
00002F24                            loc_2C9A:
00002F24 5240                       		addq.w	#1,d0
00002F26 51CA FFE2                  		dbf	d2,loc_2C80
00002F2A E248                       		lsr.w	#1,d0
00002F2C 4CDF 0006                  		movem.l	(sp)+,d1-d2
00002F30 4E75                       		rts	
00002F32                            
00002F32                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00002F32                            
00002F32                            
00002F32                            CalcAngle:
00002F32 48E7 1800                  		movem.l	d3-d4,-(sp)
00002F36 7600                       		moveq	#0,d3
00002F38 7800                       		moveq	#0,d4
00002F3A 3601                       		move.w	d1,d3
00002F3C 3802                       		move.w	d2,d4
00002F3E 8843                       		or.w	d3,d4
00002F40 6700                       		beq.s	loc_2D04
00002F42 3802                       		move.w	d2,d4
00002F44 4A43                       		tst.w	d3
00002F46 6A00 0000                  		bpl.w	loc_2CC2
00002F4A 4443                       		neg.w	d3
00002F4C                            
00002F4C                            loc_2CC2:
00002F4C 4A44                       		tst.w	d4
00002F4E 6A00 0000                  		bpl.w	loc_2CCA
00002F52 4444                       		neg.w	d4
00002F54                            
00002F54                            loc_2CCA:
00002F54 B843                       		cmp.w	d3,d4
00002F56 6400 0000                  		bcc.w	loc_2CDC
00002F5A E18C                       		lsl.l	#8,d4
00002F5C 88C3                       		divu.w	d3,d4
00002F5E 7000                       		moveq	#0,d0
00002F60 103B 4000                  		move.b	Angle_Data(pc,d4.w),d0
00002F64 6000                       		bra.s	loc_2CE6
00002F66                            ; ===========================================================================
00002F66                            
00002F66                            loc_2CDC:				; XREF: CalcAngle
00002F66 E18B                       		lsl.l	#8,d3
00002F68 86C4                       		divu.w	d4,d3
00002F6A 7040                       		moveq	#$40,d0
00002F6C 903B 3000                  		sub.b	Angle_Data(pc,d3.w),d0
00002F70                            
00002F70                            loc_2CE6:
00002F70 4A41                       		tst.w	d1
00002F72 6A00 0000                  		bpl.w	loc_2CF2
00002F76 4440                       		neg.w	d0
00002F78 0640 0080                  		addi.w	#$80,d0
00002F7C                            
00002F7C                            loc_2CF2:
00002F7C 4A42                       		tst.w	d2
00002F7E 6A00 0000                  		bpl.w	loc_2CFE
00002F82 4440                       		neg.w	d0
00002F84 0640 0100                  		addi.w	#$100,d0
00002F88                            
00002F88                            loc_2CFE:
00002F88 4CDF 0018                  		movem.l	(sp)+,d3-d4
00002F8C 4E75                       		rts	
00002F8E                            ; ===========================================================================
00002F8E                            
00002F8E                            loc_2D04:				; XREF: CalcAngle
00002F8E 303C 0040                  		move.w	#$40,d0
00002F92 4CDF 0018                  		movem.l	(sp)+,d3-d4
00002F96 4E75                       		rts	
00002F98                            ; End of function CalcAngle
00002F98                            
00002F98                            ; ===========================================================================
00002F98                            
00002F98                            Angle_Data:	incbin	misc\angles.bin
0000309A                            
0000309A                            ; ===========================================================================
0000309A                            
0000309A                            ; ---------------------------------------------------------------------------
0000309A                            ; Sega screen
0000309A                            ; ---------------------------------------------------------------------------
0000309A                            
0000309A                            SegaScreen:				; XREF: GameModeArray
0000309A 103C 00E4                  		move.b	#$E4,d0
0000309E 6100 E520                  		bsr.w	PlaySound_Special ; stop music
000030A2 6100 E75E                  		bsr.w	ClearPLC
000030A6 6100 EF94                  		bsr.w	Pal_FadeFrom
000030AA 4DF9 00C0 0004             		lea	($C00004).l,a6
000030B0 3CBC 8004                  		move.w	#$8004,(a6)
000030B4 3CBC 8230                  		move.w	#$8230,(a6)
000030B8 3CBC 8407                  		move.w	#$8407,(a6)
000030BC 3CBC 8700                  		move.w	#$8700,(a6)
000030C0 3CBC 8B00                  		move.w	#$8B00,(a6)
000030C4 4238 F64E                  		clr.b	($FFFFF64E).w
000030C8 46FC 2700                  		move	#$2700,sr
000030CC 3038 F60C                  		move.w	($FFFFF60C).w,d0
000030D0 0200 00BF                  		andi.b	#$BF,d0
000030D4 33C0 00C0 0004             		move.w	d0,($C00004).l
000030DA 6100 E40C                  		bsr.w	ClearScreen
000030DE 23FC 4000 0000 00C0 0004   		move.l	#$40000000,($C00004).l
000030E8 41F9 0000 0000             		lea	(Nem_SegaLogo).l,a0 ; load Sega	logo patterns
000030EE 6100 E574                  		bsr.w	NemDec
000030F2 43F9 00FF 0000             		lea	($FF0000).l,a1
000030F8 41F9 0000 0000             		lea	(Eni_SegaLogo).l,a0 ; load Sega	logo mappings
000030FE 303C 0000                  		move.w	#0,d0
00003102 6100 E83E                  		bsr.w	EniDec
00003106 43F9 00FF 0000             		lea	($FF0000).l,a1
0000310C 203C 6510 0003             		move.l	#$65100003,d0
00003112 7217                       		moveq	#$17,d1
00003114 7407                       		moveq	#7,d2
00003116 6100 E52C                  		bsr.w	ShowVDPGraphics
0000311A 43F9 00FF 0180             		lea	($FF0180).l,a1
00003120 203C 4000 0003             		move.l	#$40000003,d0
00003126 7227                       		moveq	#$27,d1
00003128 741B                       		moveq	#$1B,d2
0000312A 6100 E518                  		bsr.w	ShowVDPGraphics
0000312E 7000                       		moveq	#0,d0
00003130 6100 F1D0                  		bsr.w	PalLoad2	; load Sega logo pallet
00003134 31FC FFF6 F632             		move.w	#-$A,($FFFFF632).w
0000313A 31FC 0000 F634             		move.w	#0,($FFFFF634).w
00003140 31FC 0000 F662             		move.w	#0,($FFFFF662).w
00003146 31FC 0000 F660             		move.w	#0,($FFFFF660).w
0000314C 3038 F60C                  		move.w	($FFFFF60C).w,d0
00003150 0000 0040                  		ori.b	#$40,d0
00003154 33C0 00C0 0004             		move.w	d0,($C00004).l
0000315A                            
0000315A                            Sega_WaitPallet:
0000315A 11FC 0002 F62A             		move.b	#2,($FFFFF62A).w
00003160 6100 FAD0                  		bsr.w	DelayProgram
00003164 6100 F08E                  		bsr.w	PalCycle_Sega
00003168 66F0                       		bne.s	Sega_WaitPallet
0000316A                            
0000316A 103C 00E1                  		move.b	#$E1,d0
0000316E 6100 E450                  		bsr.w	PlaySound_Special ; play "SEGA"	sound
00003172 11FC 0014 F62A             		move.b	#$14,($FFFFF62A).w
00003178 6100 FAB8                  		bsr.w	DelayProgram
0000317C 31FC 001E F614             		move.w	#$1E,($FFFFF614).w
00003182                            
00003182                            Sega_WaitEnd:
00003182 11FC 0002 F62A             		move.b	#2,($FFFFF62A).w
00003188 6100 FAA8                  		bsr.w	DelayProgram
0000318C 4A78 F614                  		tst.w	($FFFFF614).w
00003190 6700                       		beq.s	Sega_GotoTitle
00003192 0238 0080 F605             		andi.b	#$80,($FFFFF605).w ; is	Start button pressed?
00003198 67E8                       		beq.s	Sega_WaitEnd	; if not, branch
0000319A                            
0000319A                            Sega_GotoTitle:
0000319A 11FC 0004 F600             		move.b	#4,($FFFFF600).w ; go to title screen
000031A0 4E75                       		rts	
000031A2                            ; ===========================================================================
000031A2                            
000031A2                            ; ---------------------------------------------------------------------------
000031A2                            ; Title	screen
000031A2                            ; ---------------------------------------------------------------------------
000031A2                            
000031A2                            TitleScreen:				; XREF: GameModeArray
000031A2 103C 00E4                  		move.b	#$E4,d0
000031A6 6100 E418                  		bsr.w	PlaySound_Special ; stop music
000031AA 6100 EE90                  		bsr.w	Pal_FadeFrom
000031AE 6100 E652                  		bsr.w	ClearPLC
000031B2 46FC 2700                  		move	#$2700,sr
000031B6 6100 E3BE                  		bsr.w	SoundDriverLoad
000031BA 4DF9 00C0 0004             		lea	($C00004).l,a6
000031C0 3CBC 8004                  		move.w	#$8004,(a6)
000031C4 3CBC 8230                  		move.w	#$8230,(a6)
000031C8 3CBC 8407                  		move.w	#$8407,(a6)
000031CC 3CBC 9001                  		move.w	#$9001,(a6)
000031D0 3CBC 9200                  		move.w	#$9200,(a6)
000031D4 3CBC 8B03                  		move.w	#$8B03,(a6)
000031D8 3CBC 8720                  		move.w	#$8720,(a6)
000031DC 4238 F64E                  		clr.b	($FFFFF64E).w
000031E0 6100 E306                  		bsr.w	ClearScreen
000031E4 43F8 D000                  		lea	($FFFFD000).w,a1
000031E8 7000                       		moveq	#0,d0
000031EA 323C 07FF                  		move.w	#$7FF,d1
000031EE                            
000031EE                            Title_ClrObjRam:
000031EE 22C0                       		move.l	d0,(a1)+
000031F0 51C9 FFFC                  		dbf	d1,Title_ClrObjRam ; fill object RAM ($D000-$EFFF) with	$0
000031F4                            
000031F4                            ; gomer
000031F4 23FC 4000 0000 00C0 0004   		move.l	#$40000000,($C00004).l
000031FE 41F9 0000 0000             		lea	(Nem_Gomer).l,a0 ; load Gomer patterns
00003204 6100 E45E                  		bsr.w	NemDec
00003208 7003                       		moveq	#3,d0		; load Sonic's pallet
0000320A 6100 F0DA                  		bsr.w	PalLoad1
0000320E                            
0000320E 43F9 00FF 0000             		lea	($FF0000).l,a1
00003214 41F9 0000 0000             		lea	(Eni_Gomer).l,a0 ; load mappings for	Gomer credits
0000321A 303C 0000                  		move.w	#0,d0
0000321E 6100 E722                  		bsr.w	EniDec
00003222                            ; help how the fuck can i do this IT SHOWS NOTHING
00003222 43F9 00FF 0000             		lea	($FF0000).l,a1
00003228 203C 4000 0003             		move.l	#$40000003,d0
0000322E 7227                       		moveq	#$27,d1
00003230 741B                       		moveq	#$1B,d2
00003232 6100 E410                  		bsr.w	ShowVDPGraphics
00003236                            
00003236 43F9 00FF 0000             		lea	($FF0000).l,a1
0000323C 203C 6000 0003             		move.l	#$60000003,d0
00003242 7227                       		moveq	#$27,d1
00003244 741B                       		moveq	#$1B,d2
00003246                            
00003246 6100 ED4E                  		bsr.w	Pal_FadeTo
0000324A 6100 EDF0                  		bsr.w	Pal_FadeFrom
0000324E                            
0000324E 6100 E298                  		bsr.w	ClearScreen
00003252 23FC 4000 0000 00C0 0004   		move.l	#$40000000,($C00004).l
0000325C 41F9 0000 0000             		lea	(Nem_JapNames).l,a0 ; load Japanese credits
00003262 6100 E400                  		bsr.w	NemDec
00003266 23FC 54C0 0000 00C0 0004   		move.l	#$54C00000,($C00004).l
00003270 41F9 0000 0000             		lea	(Nem_CreditText).l,a0 ;	load alphabet
00003276 6100 E3EC                  		bsr.w	NemDec
0000327A 43F9 00FF 0000             		lea	($FF0000).l,a1
00003280 41F9 0000 0000             		lea	(Eni_JapNames).l,a0 ; load mappings for	Japanese credits
00003286 303C 0000                  		move.w	#0,d0
0000328A 6100 E6B6                  		bsr.w	EniDec
0000328E 43F9 00FF 0000             		lea	($FF0000).l,a1
00003294 203C 4000 0003             		move.l	#$40000003,d0
0000329A 7227                       		moveq	#$27,d1
0000329C 741B                       		moveq	#$1B,d2
0000329E 6100 E3A4                  		bsr.w	ShowVDPGraphics
000032A2 6100 ED98                  		bsr.w	Pal_FadeFrom
000032A6 43F8 FB80                  		lea	($FFFFFB80).w,a1
000032AA 7000                       		moveq	#0,d0
000032AC 323C 001F                  		move.w	#$1F,d1
000032B0                            
000032B0                            Title_ClrPallet:
000032B0 22C0                       		move.l	d0,(a1)+
000032B2 51C9 FFFC                  		dbf	d1,Title_ClrPallet ; fill pallet with 0	(black)
000032B6                            
000032B6 7003                       		moveq	#3,d0		; load Sonic's pallet
000032B8 6100 F02C                  		bsr.w	PalLoad1
000032BC 11FC 008A D080             		move.b	#$8A,($FFFFD080).w ; load "SONIC TEAM PRESENTS"	object
000032C2 4EB9 0000 0000             		jsr	ObjectsLoad
000032C8 4EB9 0000 0000             		jsr	BuildSprites
000032CE 6100 ECC6                  		bsr.w	Pal_FadeTo
000032D2 46FC 2700                  		move	#$2700,sr
000032D6 23FC 4000 0001 00C0 0004   		move.l	#$40000001,($C00004).l
000032E0 41F9 0000 0000             		lea	(Nem_TitleFg).l,a0 ; load title	screen patterns
000032E6 6100 E37C                  		bsr.w	NemDec
000032EA 23FC 6000 0001 00C0 0004   		move.l	#$60000001,($C00004).l
000032F4 41F9 0000 0000             		lea	(Nem_TitleSonic).l,a0 ;	load Sonic title screen	patterns
000032FA 6100 E368                  		bsr.w	NemDec
000032FE 23FC 6200 0002 00C0 0004   		move.l	#$62000002,($C00004).l
00003308 41F9 0000 0000             		lea	(Nem_TitleTM).l,a0 ; load "TM" patterns
0000330E 6100 E354                  		bsr.w	NemDec
00003312 4DF9 00C0 0000             		lea	($C00000).l,a6
00003318 2D7C 5000 0003 0004        		move.l	#$50000003,4(a6)
00003320 4BF9 0000 05F4             		lea	(Art_Text).l,a5
00003326 323C 0BB6                  		move.w	#(Art_Text_end-Art_Text/4)-1,d1
0000332A                            
0000332A                            Title_LoadText:
0000332A 2C9D                       		move.l	(a5)+,(a6)
0000332C 51C9 FFFC                  		dbf	d1,Title_LoadText ; load uncompressed text patterns
00003330                            
00003330 11FC 0000 FE30             		move.b	#0,($FFFFFE30).w ; clear lamppost counter
00003336 31FC 0000 FE08             		move.w	#0,($FFFFFE08).w ; disable debug item placement	mode
0000333C 31FC 0000 FFF0             		move.w	#0,($FFFFFFF0).w ; disable debug mode
00003342 31FC 0000 FFEA             		move.w	#0,($FFFFFFEA).w
00003348 31FC 0000 FE10             		move.w	#0,($FFFFFE10).w ; set level to	GHZ (00)
0000334E 31FC 0000 F634             		move.w	#0,($FFFFF634).w ; disable pallet cycling
00003354 6100 0000                  		bsr.w	LevelSizeLoad
00003358 6100 0000                  		bsr.w	DeformBgLayer
0000335C                            
0000335C 43F8 B000                  		lea	($FFFFB000).w,a1
00003360 41F9 0000 0000             		lea	(Blk16_GHZ).l,a0 ; load	GHZ 16x16 mappings
00003366 303C 0000                  		move.w	#0,d0
0000336A 6100 E5D6                  		bsr.w	EniDec
0000336E 41F9 0000 0000             		lea	(Blk256_GHZ).l,a0 ; load GHZ 256x256 mappings
00003374 43F9 00FF 0000             		lea	($FF0000).l,a1
0000337A 6100 E744                  		bsr.w	KosDec
0000337E 6100 0000                  		bsr.w	LevelLayoutLoad
00003382                            
00003382 46FC 2700                  		move	#$2700,sr
00003386 6100 E160                  		bsr.w	ClearScreen
0000338A 4BF9 00C0 0004             		lea	($C00004).l,a5
00003390 4DF9 00C0 0000             		lea	($C00000).l,a6
00003396 47F8 F708                  		lea	($FFFFF708).w,a3
0000339A 49F8 A440                  		lea	($FFFFA440).w,a4
0000339E 343C 6000                  		move.w	#$6000,d2
000033A2 6100 0000                  		bsr.w	LoadTilesFromStart2
000033A6 43F9 00FF 0000             		lea	($FF0000).l,a1
000033AC 41F9 0000 0000             		lea	(Eni_Title).l,a0 ; load	title screen mappings
000033B2 303C 0000                  		move.w	#0,d0
000033B6 6100 E58A                  		bsr.w	EniDec
000033BA 43F9 00FF 0000             		lea	($FF0000).l,a1
000033C0 203C 4206 0003             		move.l	#$42060003,d0
000033C6 7221                       		moveq	#$21,d1
000033C8 7415                       		moveq	#$15,d2
000033CA 6100 E278                  		bsr.w	ShowVDPGraphics
000033CE 23FC 4000 0000 00C0 0004   		move.l	#$40000000,($C00004).l
000033D8 41F9 0000 0000             		lea	(Nem_GHZ_1st).l,a0 ; load GHZ patterns
000033DE 6100 E284                  		bsr.w	NemDec
000033E2 7001                       		moveq	#1,d0		; load title screen pallet
000033E4 6100 EF00                  		bsr.w	PalLoad1
000033E8 103C 008A                  		move.b	#$8A,d0		; play title screen music
000033EC 6100 E1D2                  		bsr.w	PlaySound_Special
000033F0 11FC 0000 FFFA             		move.b	#0,($FFFFFFFA).w ; disable debug mode
000033F6 31FC 0178 F614             		move.w	#$178,($FFFFF614).w ; run title	screen for $178	frames
000033FC 43F8 D080                  		lea	($FFFFD080).w,a1
00003400 7000                       		moveq	#0,d0
00003402 323C 0007                  		move.w	#7,d1
00003406                            
00003406                            Title_ClrObjRam2:
00003406 22C0                       		move.l	d0,(a1)+
00003408 51C9 FFFC                  		dbf	d1,Title_ClrObjRam2
0000340C                            
0000340C 11FC 000E D040             		move.b	#$E,($FFFFD040).w ; load big Sonic object
00003412 11FC 000F D080             		move.b	#$F,($FFFFD080).w ; load "PRESS	START BUTTON" object
00003418 11FC 000F D0C0             		move.b	#$F,($FFFFD0C0).w ; load "TM" object
0000341E 11FC 0003 D0DA             		move.b	#3,($FFFFD0DA).w
00003424 11FC 000F D100             		move.b	#$F,($FFFFD100).w
0000342A 11FC 0002 D11A             		move.b	#2,($FFFFD11A).w
00003430 4EB9 0000 0000             		jsr	ObjectsLoad
00003436 6100 0000                  		bsr.w	DeformBgLayer
0000343A 4EB9 0000 0000             		jsr	BuildSprites
00003440 7000                       		moveq	#0,d0
00003442 6100 E392                  		bsr.w	LoadPLC2
00003446 31FC 0000 FFE4             		move.w	#0,($FFFFFFE4).w
0000344C 31FC 0000 FFE6             		move.w	#0,($FFFFFFE6).w
00003452 3038 F60C                  		move.w	($FFFFF60C).w,d0
00003456 0000 0040                  		ori.b	#$40,d0
0000345A 33C0 00C0 0004             		move.w	d0,($C00004).l
00003460 6100 EB34                  		bsr.w	Pal_FadeTo
00003464                            
00003464                            loc_317C:
00003464 11FC 0004 F62A             		move.b	#4,($FFFFF62A).w
0000346A 6100 F7C6                  		bsr.w	DelayProgram
0000346E 4EB9 0000 0000             		jsr	ObjectsLoad
00003474 6100 0000                  		bsr.w	DeformBgLayer
00003478 4EB9 0000 0000             		jsr	BuildSprites
0000347E 6100 E700                  		bsr.w	PalCycle_Title
00003482 6100 E38C                  		bsr.w	RunPLC_RAM
00003486 3038 D008                  		move.w	($FFFFD008).w,d0
0000348A 5440                       		addq.w	#2,d0
0000348C 31C0 D008                  		move.w	d0,($FFFFD008).w ; move	Sonic to the right
00003490 0C40 1C00                  		cmpi.w	#$1C00,d0	; has Sonic object passed x-position $1C00?
00003494 6500                       		bcs.s	Title_ChkRegion	; if not, branch
00003496 11FC 0000 F600             		move.b	#0,($FFFFF600).w ; go to Sega screen
0000349C 4E75                       		rts	
0000349E                            ; ===========================================================================
0000349E                            
0000349E                            Title_ChkRegion:
0000349E 4A38 FFF8                  		tst.b	($FFFFFFF8).w	; check	if the machine is US or	Japanese
000034A2 6A00                       		bpl.s	Title_RegionJ	; if Japanese, branch
000034A4 41F9 0000 0000             		lea	(LevelSelectCode_US).l,a0 ; load US code
000034AA 6000                       		bra.s	Title_EnterCheat
000034AC                            ; ===========================================================================
000034AC                            
000034AC                            Title_RegionJ:				; XREF: Title_ChkRegion
000034AC 41F9 0000 0000             		lea	(LevelSelectCode_J).l,a0 ; load	J code
000034B2                            
000034B2                            Title_EnterCheat:			; XREF: Title_ChkRegion
000034B2 3038 FFE4                  		move.w	($FFFFFFE4).w,d0
000034B6 D0C0                       		adda.w	d0,a0
000034B8 1038 F605                  		move.b	($FFFFF605).w,d0 ; get button press
000034BC 0200 000F                  		andi.b	#$F,d0		; read only up/down/left/right buttons
000034C0 B010                       		cmp.b	(a0),d0		; does button press match the cheat code?
000034C2 6600                       		bne.s	loc_3210	; if not, branch
000034C4 5278 FFE4                  		addq.w	#1,($FFFFFFE4).w ; next	button press
000034C8 4A00                       		tst.b	d0
000034CA 6600                       		bne.s	Title_CountC
000034CC 41F8 FFE0                  		lea	($FFFFFFE0).w,a0
000034D0 3238 FFE6                  		move.w	($FFFFFFE6).w,d1
000034D4 E249                       		lsr.w	#1,d1
000034D6 0241 0003                  		andi.w	#3,d1
000034DA 6700                       		beq.s	Title_PlayRing
000034DC 4A38 FFF8                  		tst.b	($FFFFFFF8).w
000034E0 6A00                       		bpl.s	Title_PlayRing
000034E2 7201                       		moveq	#1,d1
000034E4 1181 1001                  		move.b	d1,1(a0,d1.w)
000034E8                            
000034E8                            Title_PlayRing:
000034E8 11BC 0001 1000             		move.b	#1,(a0,d1.w)	; activate cheat
000034EE 103C 00B5                  		move.b	#$B5,d0		; play ring sound when code is entered
000034F2 6100 E0CC                  		bsr.w	PlaySound_Special
000034F6 6000                       		bra.s	Title_CountC
000034F8                            ; ===========================================================================
000034F8                            
000034F8                            loc_3210:				; XREF: Title_EnterCheat
000034F8 4A00                       		tst.b	d0
000034FA 6700                       		beq.s	Title_CountC
000034FC 0C78 0009 FFE4             		cmpi.w	#9,($FFFFFFE4).w
00003502 6700                       		beq.s	Title_CountC
00003504 31FC 0000 FFE4             		move.w	#0,($FFFFFFE4).w
0000350A                            
0000350A                            Title_CountC:
0000350A 1038 F605                  		move.b	($FFFFF605).w,d0
0000350E 0200 0020                  		andi.b	#$20,d0		; is C button pressed?
00003512 6700                       		beq.s	loc_3230	; if not, branch
00003514 5278 FFE6                  		addq.w	#1,($FFFFFFE6).w ; increment C button counter
00003518                            
00003518                            loc_3230:
00003518 4A78 F614                  		tst.w	($FFFFF614).w
0000351C 6700 0000                  		beq.w	Demo
00003520                            		; (temporary until we have an actual options screen)
00003520 0838 0005 F605             		btst	#5,	($FFFFF605).w ; check if c pressed
00003526 6700                       		beq.s	@notc
00003528                            
00003528 0A38 0001 FFE8             		eor.b	#1,(v_character) ; sonic/gronic 
0000352E 103C 00B5                  		move.b	#$B5,d0		; play ring sound when code is entered
00003532 6100 E08C                  		bsr.w	PlaySound_Special
00003536                            	@notc:
00003536 0238 0080 F605             		andi.b	#$80,($FFFFF605).w ; check if Start is pressed
0000353C 6700 FF26                  		beq.w	loc_317C	; if not, branch
00003540                            
00003540                            Title_ChkLevSel:
00003540 4A38 FFE0                  		tst.b	($FFFFFFE0).w	; check	if level select	code is	on
00003544 6700 0000                  		beq.w	PlayLevel	; if not, play level
00003548 0838 0006 F604             		btst	#6,($FFFFF604).w ; check if A is pressed
0000354E 6700 0000                  		beq.w	PlayLevel	; if not, play level
00003552                            		
00003552                            		
00003552 7002                       		moveq	#2,d0
00003554 6100 EDAC                  		bsr.w	PalLoad2	; load level select pallet
00003558 43F8 CC00                  		lea	($FFFFCC00).w,a1
0000355C 7000                       		moveq	#0,d0
0000355E 323C 00DF                  		move.w	#$DF,d1
00003562                            
00003562                            Title_ClrScroll:
00003562 22C0                       		move.l	d0,(a1)+
00003564 51C9 FFFC                  		dbf	d1,Title_ClrScroll ; fill scroll data with 0
00003568                            
00003568 21C0 F616                  		move.l	d0,($FFFFF616).w
0000356C 46FC 2700                  		move	#$2700,sr
00003570 4DF9 00C0 0000             		lea	($C00000).l,a6
00003576 23FC 6000 0003 00C0 0004   		move.l	#$60000003,($C00004).l
00003580 323C 03FF                  		move.w	#$3FF,d1
00003584                            
00003584                            Title_ClrVram:
00003584 2C80                       		move.l	d0,(a6)
00003586 51C9 FFFC                  		dbf	d1,Title_ClrVram ; fill	VRAM with 0
0000358A                            
0000358A 6100 0000                  		bsr.w	LevSelTextLoad
0000358E                            		
0000358E                            		; sound test fix
0000358E 3C38 FF82                  		move.w	($FFFFFF82).w,d6
00003592 31FC 0014 FF82             		move.w	#$14,($FFFFFF82).w
00003598                            		
00003598 363C C65F                  		move.w	#$C680-$21,d3 ; selected
0000359C 0C46 0014                  		cmpi.w	#$14,d6
000035A0 6700                       		beq.s	@issndtst
000035A2 363C E65F                  		move.w	#$E680-$21,d3 ; not selected
000035A6                            	@issndtst:
000035A6 6100 0000                  		bsr.w	LevSelSndTest	; refresh text
000035AA 31C6 FF82                  		move.w	d6,($FFFFFF82).w
000035AE                            		
000035AE 363C C65F                  		move.w	#$C680-$21,d3	; VRAM setting
000035B2 2D7C 6D02 0003 0004        		move.l	#lsctrlpos,4(a6)
000035BA                            		
000035BA 0C78 0014 FF82             		cmpi.w	#$14,($FFFFFF82).w
000035C0 6700                       		beq.s	@issndtst2
000035C2                            		
000035C2 43F9 0000 0000             		lea	(Controls_Normal).l,a1 ; control help
000035C8 6100 0000                  		bsr.w	CStringSlop
000035CC 6000                       		bra.s	LevelSelect
000035CE                            	@issndtst2:
000035CE 43F9 0000 0000             		lea	(Controls_SND).l,a1
000035D4 6100 0000                  		bsr.w	CStringSlop
000035D8                            ; ---------------------------------------------------------------------------
000035D8                            ; Level	Select
000035D8                            ; ---------------------------------------------------------------------------
000035D8                            LevelSelect:
000035D8 11FC 0004 F62A             		move.b	#4,($FFFFF62A).w
000035DE 6100 F652                  		bsr.w	DelayProgram
000035E2 6100 0000                  		bsr.w	LevSelControls
000035E6 6100 E228                  		bsr.w	RunPLC_RAM
000035EA 4AB8 F680                  		tst.l	($FFFFF680).w
000035EE 66E8                       		bne.s	LevelSelect
000035F0 0238 00F0 F605             		andi.b	#$F0,($FFFFF605).w ; is	A, B, C, or Start pressed?
000035F6 67E0                       		beq.s	LevelSelect	; if not, branch
000035F8 3038 FF82                  		move.w	($FFFFFF82).w,d0
000035FC 0C40 0000                  		cmpi.w	#lswifi,d0		; have you selected item $15 (free wifi)?
00003600 6600                       		bne.s	@dont	; if not, dont blow this place up
00003602                            			
00003602 11FC 00E5 F00B             		move.b	#$E5,($FFFFF00B).w ; YOU ARE AN IDIOT BOOM
00003608 11FC 0004 F62A             		move.b	#4,($FFFFF62A).w
0000360E 6100 F622                  		bsr.w	DelayProgram
00003612                            	@dont:
00003612 0C40 0000                  		cmpi.w	#lssndtest,d0		; have you selected item $14 (sound test)?
00003616 6600                       		bne.s	LevSel_Level_SS	; if not, go to	Level/SS subroutine
00003618                            		
00003618 0238 00A0 F605             		andi.b	#$A0,($FFFFF605).w ; is C or Start pressed?
0000361E 67B8                       		beq.s	LevelSelect	; if not, branch
00003620                            		
00003620 0838 0007 F605             		btst	#7,($FFFFF605).w ; was it start?
00003626 6600                       		bne.s	LevSel_SEGA ; then go to sega screen
00003628                            		
00003628 1038 FF84                  		move.b	($FFFFFF84).w,d0
0000362C 11C0 F00B                  		move.b	d0,($FFFFF00B).w ; PlaySound_Special but faster
00003630                            		
00003630 4EB9 0000 0000             		jsr		ShowNow_Playing
00003636 60A0                       		bra.s	LevelSelect
00003638                            ; ===========================================================================
00003638                            
00003638                            LevSel_SEGA:				; XREF: LevelSelect
00003638 11FC 0000 F600             		move.b	#$0,($FFFFF600).w ; set screen	mode to	$0 SEGA
0000363E 4E75                       		rts	
00003640                            ; ===========================================================================
00003640                            
00003640                            LevSel_Ending:				; XREF: LevelSelect
00003640 11FC 0018 F600             		move.b	#$18,($FFFFF600).w ; set screen	mode to	$18 (Ending)
00003646 31FC 0600 FE10             		move.w	#$600,($FFFFFE10).w ; set level	to 0600	(Ending)
0000364C 4E75                       		rts	
0000364E                            ; ===========================================================================
0000364E                            
0000364E                            LevSel_Credits:				; XREF: LevelSelect
0000364E 11FC 001C F600             		move.b	#$1C,($FFFFF600).w ; set screen	mode to	$1C (Credits)
00003654 103C 0091                  		move.b	#$91,d0
00003658 6100 DF66                  		bsr.w	PlaySound_Special ; play credits music
0000365C 31FC 0000 FFF4             		move.w	#0,($FFFFFFF4).w
00003662 4E75                       		rts	
00003664                            ; ===========================================================================
00003664                            
00003664                            LevSel_Level_SS:			; XREF: LevelSelect
00003664 D040                       		add.w	d0,d0
00003666 303B 0000                  		move.w	LSelectPointers(pc,d0.w),d0 ; load level number
0000366A 6B00 FF6C                  		bmi.w	LevelSelect
0000366E 0C40 0700                  		cmpi.w	#$700,d0	; check	if level is 0700 (Special Stage)
00003672 6600                       		bne.s	LevSel_Level	; if not, branch
00003674 11FC 0010 F600             		move.b	#$10,($FFFFF600).w ; set screen	mode to	$10 (Special Stage)
0000367A 4278 FE10                  		clr.w	($FFFFFE10).w	; clear	level
0000367E 11FC 0027 FE12             		move.b	#39,($FFFFFE12).w ; set lives to	3
00003684 7000                       		moveq	#0,d0
00003686 31C0 FE20                  		move.w	d0,($FFFFFE20).w ; clear rings
0000368A 21C0 FE22                  		move.l	d0,($FFFFFE22).w ; clear time
0000368E 21C0 FE26                  		move.l	d0,($FFFFFE26).w ; clear score
00003692 4E75                       		rts	
00003694                            ; ===========================================================================
00003694                            
00003694                            LevSel_Level:				; XREF: LevSel_Level_SS
00003694 0240 3FFF                  		andi.w	#$3FFF,d0
00003698 31C0 FE10                  		move.w	d0,($FFFFFE10).w ; set level number
0000369C                            
0000369C                            PlayLevel:				; XREF: ROM:00003246j ...
0000369C 11FC 000C F600             		move.b	#$C,($FFFFF600).w ; set	screen mode to $0C (level)
000036A2 11FC 0027 FE12             		move.b	#39,($FFFFFE12).w ; set lives to	3
000036A8 7000                       		moveq	#0,d0
000036AA 31C0 FE20                  		move.w	d0,($FFFFFE20).w ; clear rings
000036AE 21C0 FE22                  		move.l	d0,($FFFFFE22).w ; clear time
000036B2 21C0 FE26                  		move.l	d0,($FFFFFE26).w ; clear score
000036B6 11C0 FE16                  		move.b	d0,($FFFFFE16).w ; clear special stage number
000036BA 11C0 FE57                  		move.b	d0,($FFFFFE57).w ; clear emeralds
000036BE 21C0 FE58                  		move.l	d0,($FFFFFE58).w ; clear emeralds
000036C2 21C0 FE5C                  		move.l	d0,($FFFFFE5C).w ; clear emeralds
000036C6 11C0 FE18                  		move.b	d0,($FFFFFE18).w ; clear continues
000036CA 103C 00E0                  		move.b	#$E0,d0
000036CE 6100 DEF0                  		bsr.w	PlaySound_Special ; fade out music
000036D2 4E75                       		rts	
000036D4                            ; ===========================================================================
000036D4                            ; ---------------------------------------------------------------------------
000036D4                            ; Level	select - level pointers
000036D4                            ; ---------------------------------------------------------------------------
000036D4                            LSelectPointers:
000036D4                            		incbin	misc\ls_point.bin
000036FE                            		even
000036FE                            ; ---------------------------------------------------------------------------
000036FE                            ; Level	select codes
000036FE                            ; ---------------------------------------------------------------------------
000036FE                            LevelSelectCode_J:
000036FE                            		incbin	misc\ls_jcode.bin
00003704                            		even
00003704                            
00003704                            LevelSelectCode_US:
00003704                            		incbin	misc\ls_ucode.bin
0000370A                            		even
0000370A                            ; ===========================================================================
0000370A                            
0000370A                            ; ---------------------------------------------------------------------------
0000370A                            ; Demo mode
0000370A                            ; ---------------------------------------------------------------------------
0000370A                            
0000370A                            Demo:					; XREF: TitleScreen
0000370A 31FC 001E F614             		move.w	#$1E,($FFFFF614).w
00003710                            
00003710                            loc_33B6:				; XREF: loc_33E4
00003710 11FC 0004 F62A             		move.b	#4,($FFFFF62A).w
00003716 6100 F51A                  		bsr.w	DelayProgram
0000371A 6100 0000                  		bsr.w	DeformBgLayer
0000371E 6100 E440                  		bsr.w	PalCycle_Load
00003722 6100 E0EC                  		bsr.w	RunPLC_RAM
00003726 3038 D008                  		move.w	($FFFFD008).w,d0
0000372A 5440                       		addq.w	#2,d0
0000372C 31C0 D008                  		move.w	d0,($FFFFD008).w
00003730 0C40 1C00                  		cmpi.w	#$1C00,d0
00003734 6500                       		bcs.s	loc_33E4
00003736 11FC 0000 F600             		move.b	#0,($FFFFF600).w ; set screen mode to 00 (level)
0000373C 4E75                       		rts	
0000373E                            ; ===========================================================================
0000373E                            
0000373E                            loc_33E4:				; XREF: Demo
0000373E 0238 0080 F605             		andi.b	#$80,($FFFFF605).w ; is	Start button pressed?
00003744 6600 FDFA                  		bne.w	Title_ChkLevSel	; if yes, branch
00003748 4A78 F614                  		tst.w	($FFFFF614).w
0000374C 6600 FFC2                  		bne.w	loc_33B6
00003750 103C 00E0                  		move.b	#$E0,d0
00003754 6100 DE6A                  		bsr.w	PlaySound_Special ; fade out music
00003758 3038 FFF2                  		move.w	($FFFFFFF2).w,d0 ; load	demo number
0000375C 0240 0007                  		andi.w	#7,d0
00003760 D040                       		add.w	d0,d0
00003762 303B 0000                  		move.w	Demo_Levels(pc,d0.w),d0	; load level number for	demo
00003766 31C0 FE10                  		move.w	d0,($FFFFFE10).w
0000376A 5278 FFF2                  		addq.w	#1,($FFFFFFF2).w ; add 1 to demo number
0000376E 0C78 0004 FFF2             		cmpi.w	#4,($FFFFFFF2).w ; is demo number less than 4?
00003774 6500                       		bcs.s	loc_3422	; if yes, branch
00003776 31FC 0000 FFF2             		move.w	#0,($FFFFFFF2).w ; reset demo number to	0
0000377C                            
0000377C                            loc_3422:
0000377C 31FC 0001 FFF0             		move.w	#1,($FFFFFFF0).w ; turn	demo mode on
00003782 11FC 0008 F600             		move.b	#8,($FFFFF600).w ; set screen mode to 08 (demo)
00003788 0C40 0600                  		cmpi.w	#$600,d0	; is level number 0600 (special	stage)?
0000378C 6600                       		bne.s	Demo_Level	; if not, branch
0000378E 11FC 0010 F600             		move.b	#$10,($FFFFF600).w ; set screen	mode to	$10 (Special Stage)
00003794 4278 FE10                  		clr.w	($FFFFFE10).w	; clear	level number
00003798 4238 FE16                  		clr.b	($FFFFFE16).w	; clear	special	stage number
0000379C                            
0000379C                            Demo_Level:
0000379C 11FC 0027 FE12             		move.b	#39,($FFFFFE12).w ; set lives to	3
000037A2 7000                       		moveq	#0,d0
000037A4 31C0 FE20                  		move.w	d0,($FFFFFE20).w ; clear rings
000037A8 21C0 FE22                  		move.l	d0,($FFFFFE22).w ; clear time
000037AC 21C0 FE26                  		move.l	d0,($FFFFFE26).w ; clear score
000037B0 4E75                       		rts	
000037B2                            ; ===========================================================================
000037B2                            ; ---------------------------------------------------------------------------
000037B2                            ; Levels used in demos
000037B2                            ; ---------------------------------------------------------------------------
000037B2                            Demo_Levels:	incbin	misc\dm_ord1.bin
000037BA                            		even
000037BA                            
000037BA                            ; ---------------------------------------------------------------------------
000037BA                            ; Subroutine to	change what you're selecting in the level select
000037BA                            ; ---------------------------------------------------------------------------
000037BA                            
000037BA                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000037BA                            
000037BA                            
000037BA                            LevSelControls:				; XREF: LevelSelect
000037BA 1238 F605                  		move.b	($FFFFF605).w,d1
000037BE 0201 0003                  		andi.b	#3,d1		; is up/down pressed and held?
000037C2 6600                       		bne.s	LevSel_UpDown	; if yes, branch
000037C4 5378 FF80                  		subq.w	#1,($FFFFFF80).w ; subtract 1 from time	to next	move
000037C8 6A00 0000                  		bpl.w	LevSel_SndTest	; if time remains, branch
000037CC                            
000037CC                            LevSel_UpDown:
000037CC 31FC 000B FF80             		move.w	#$B,($FFFFFF80).w ; reset time delay
000037D2 1238 F604                  		move.b	($FFFFF604).w,d1
000037D6 0201 0003                  		andi.b	#3,d1		; is up/down pressed?
000037DA 6700 0000                  		beq.w	LevSel_SndTest	; if not, branch
000037DE 3C38 FF82                  		move.w	($FFFFFF82).w,d6
000037E2 0801 0000                  		btst	#0,d1		; is up	pressed?
000037E6 6700                       		beq.s	LevSel_Down	; if not, branch
000037E8 5346                       		subq.w	#1,d6		; move up 1 selection
000037EA 6400                       		bcc.s	LevSel_Down
000037EC 7C00                       		moveq	#lsselectable,d6		; if selection moves below 0, jump to last selection
000037EE                            
000037EE                            LevSel_Down:
000037EE 0801 0001                  		btst	#1,d1		; is down pressed?
000037F2 6700                       		beq.s	LevSel_Refresh	; if not, branch
000037F4 5246                       		addq.w	#1,d6		; move down 1 selection
000037F6 0C46 0000                  		cmpi.w	#lsselectable+1,d6
000037FA 6500                       		bcs.s	LevSel_Refresh
000037FC 7C00                       		moveq	#0,d6		; if selection moves above last selectable,	jump to	selection 0
000037FE 6000                       		bra.s	LevSel_Refresh
00003800                            		
00003800                            LevSel_LR:
00003800 0801 0002                  		btst	#2,d1		; is left pressed?
00003804 6700                       		beq.s	LevSel_Right	; if not, branch
00003806 0446 0000                  		sub.w	#lsrow2size,d6
0000380A 64E2                       		bcc.s	LevSel_Down
0000380C 0646 0000                  		add.w	#lsrow2size,d6	; don't jump
00003810                            LevSel_Right:
00003810 0801 0003                  		btst	#3,d1		; is right pressed?
00003814 6700                       		beq.s	LevSel_Refresh	; if not, branch
00003816 0646 0000                  		add.w	#lsrow1size,d6
0000381A 0C46 0000                  		cmpi.w	#lsselectable+1,d6
0000381E 6500                       		bcs.s	LevSel_Refresh
00003820 0446 0000                  		sub.w	#lsrow1size,d6	; don't jump
00003824                            ; ===========================================================================
00003824                            LevSel_Refresh:
00003824                            		
00003824 363C E65F                  		move.w	#$E680-$21,d3	; VRAM setting
00003828 6100 0000                  		bsr.w	LevSelHighlightCode	; refresh text
0000382C                            		
0000382C 0C78 0000 FF82             		cmpi.w	#lssndtest,($FFFFFF82).w
00003832 6600                       		bne.s	@exitsndtest
00003834                            		
00003834 363C C65F                  		move.w	#$C680-$21,d3	; VRAM setting
00003838 43F9 0000 0000             		lea	(Controls_Normal).l,a1
0000383E 2D7C 6D02 0003 0004        		move.l	#lsctrlpos,4(a6)
00003846 6100 0000                  		bsr.w	CStringSlop
0000384A                            	@exitsndtest:
0000384A                            	
0000384A 363C C65F                  		move.w	#$C680-$21,d3
0000384E 31C6 FF82                  		move.w	d6,($FFFFFF82).w ; set new selection
00003852 6100 0000                  		bsr.w	LevSelHighlightCode	; refresh text
00003856                            		
00003856 0C78 0000 FF82             		cmpi.w	#lssndtest,($FFFFFF82).w 
0000385C 6600                       		bne.s	@entersndtest
0000385E                            		
0000385E 363C C65F                  		move.w	#$C680-$21,d3
00003862 43F9 0000 0000             		lea	(Controls_SND).l,a1
00003868 2D7C 6D02 0003 0004        		move.l	#lsctrlpos,4(a6)
00003870 6100 0000                  		bsr.w	CStringSlop
00003874                            	@entersndtest:
00003874 4E75                       		rts	
00003876                            		
00003876                            LevSel_SndTest:				; XREF: LevSelControls
00003876 1238 F605                  		move.b	($FFFFF605).w,d1
0000387A 0201 005C                  		andi.b	#$5C,d1		; is left/right/a/b	pressed?
0000387E 6700                       		beq.s	LevSel_NoMove	; if not, branch
00003880 0C78 0000 FF82             		cmpi.w	#lssndtest,($FFFFFF82).w ; is item $14 selected?
00003886 6600 FF78                  		bne.w	LevSel_LR	; if not, branch
0000388A                            		
0000388A 1038 FF84                  		move.b	($FFFFFF84).w,d0
0000388E 0801 0002                  		btst	#2,d1		; is left pressed?
00003892 6700                       		beq.s	SndTest_Right	; if not, branch
00003894 5300                       		subq.b	#1,d0		; subtract 1 from sound	test
00003896                            		; no need the fact it's a byte does the trick
00003896                            
00003896                            SndTest_Right:
00003896 0801 0003                  		btst	#3,d1		; is right pressed?
0000389A 6700                       		beq.s	SndTest_A	; if not, branch
0000389C 5200                       		addq.b	#1,d0		; add 1	to sound test
0000389E                            		; same here
0000389E                            		
0000389E                            SndTest_A:
0000389E 0801 0006                  		btst	#6,d1		; is A pressed?
000038A2 6700                       		beq.s	SndTest_B	; if not, branch
000038A4 5100                       		subq.b	#8,d0		; subtract $10 to sound test
000038A6 5100                       		subq.b	#8,d0
000038A8                            		
000038A8                            SndTest_B:
000038A8 0801 0004                  		btst	#4,d1		; is B pressed?
000038AC 6700                       		beq.s	SndTest_Refresh	; if not, branch
000038AE 5000                       		addq.b	#8,d0		; add $10 to sound test
000038B0 5000                       		addq.b	#8,d0
000038B2                            
000038B2                            SndTest_Refresh:
000038B2 363C C65F                  		move.w	#$C680-$21,d3
000038B6 11C0 FF84                  		move.b	d0,($FFFFFF84).w ; set sound test number
000038BA 6000 0000                  		bra.w	LevSelSndTest	; refresh text
000038BE                            
000038BE                            LevSel_NoMove:
000038BE 4E75                       		rts	
000038C0                            ; End of function LevSelControls
000038C0                            
000038C0                            ; ---------------------------------------------------------------------------
000038C0                            ; Subroutine to load level select text
000038C0                            ; ---------------------------------------------------------------------------
000038C0                            
000038C0                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000038C0                            
000038C0                            LevSelTextLoad_loop:
000038C0 2D44 0004                  		move.l	d4,4(a6)
000038C4 6100 0000                  		bsr.w	LevSel_ChgLine
000038C8 0684 0080 0000             		addi.l	#$800000,d4
000038CE 51C9 FFF0                  		dbf.w	d1,LevSelTextLoad_loop
000038D2 4E75                       		rts
000038D4                            LevSelTextLoad:				; XREF: TitleScreen
000038D4 43F9 0000 0000             		lea	(LevelMenuText).l,a1
000038DA 4DF9 00C0 0000             		lea	($C00000).l,a6
000038E0 363C E65F                  		move.w	#$E680-$21,d3	; VRAM setting
000038E4 283C 6086 0003             		move.l	#lsscrpos,d4	; screen position (text)
000038EA                            		
000038EA 323C 0000                  		move.w	#lsrow1size-1,d1		; number of lines of text (first row)
000038EE 61D0                       		bsr.s	LevSelTextLoad_loop
000038F0                            		
000038F0                            		
000038F0 283C 60AA 0003             		move.l	#lsscrpos+lsoff,d4
000038F6 323C 0000                  		move.w	#lsrow2size-1,d1		; number of lines of text (second row)
000038FA 61C4                       		bsr.s	LevSelTextLoad_loop
000038FC 363C C65F                  		move.w	#$C680-$21,d3
00003900                            		
00003900                            LevSelHighlightCode:
00003900 4DF9 00C0 0000             		lea	($C00000).l,a6
00003906 7000                       		moveq	#0,d0
00003908 3038 FF82                  		move.w	($FFFFFF82).w,d0
0000390C 3200                       		move.w	d0,d1
0000390E 283C 6086 0003             		move.l	#lsscrpos,d4
00003914                            		
00003914 0C40 0000                  		cmpi.w	#lsrow1size,d0
00003918 6D00                       		blt.s	@notsecond
0000391A                            		
0000391A 0440 0000                  		sub.w	#lsrow1size,d0
0000391E 0684 0024 0000             		addi.l	#lsoff,d4
00003924                            	@notsecond:
00003924 EF48                       		lsl.w	#7,d0
00003926 4840                       		swap	d0
00003928 D880                       		add.l	d0,d4
0000392A 43F9 0000 0000             		lea	(LevelMenuText).l,a1
00003930 E749                       		lsl.w	#3,d1
00003932 D241                       		add.w	d1,d1
00003934 D2C1                       		adda.w	d1,a1
00003936 2D44 0004                  		move.l	d4,4(a6)
0000393A 6100 0000                  		bsr.w	LevSel_ChgLine
0000393E 0C78 0000 FF82             		cmpi.w	#lssndtest,($FFFFFF82).w
00003944 6700                       		beq.s	LevSelSndTest
00003946 4E75                       		rts
00003948                            
00003948                            LevSelSndTest:
00003948 0643 0030                  		add.w	#$30,d3
0000394C 23FC 64C2 0003 00C0 0004   		move.l	#lsstpos,($C00004).l ; screen	position (sound	test)
00003956 1038 FF84                  		move.b	($FFFFFF84).w,d0
0000395A 1400                       		move.b	d0,d2
0000395C E808                       		lsr.b	#4,d0
0000395E 6100 0000                  		bsr.w	LevSel_ChgSnd
00003962 1002                       		move.b	d2,d0
00003964 6100 0000                  		bsr.w	LevSel_ChgSnd
00003968 4E75                       		rts	
0000396A                            ; End of function LevSelTextLoad
0000396A                            
0000396A                            
0000396A                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000396A                            
0000396A                            
0000396A                            LevSel_ChgSnd:				; XREF: LevSelTextLoad
0000396A 0240 000F                  		andi.w	#$F,d0
0000396E 0C00 000A                  		cmpi.b	#$A,d0
00003972 6500                       		bcs.s	loc_3580
00003974 5E00                       		addi.b	#7,d0
00003976                            
00003976                            loc_3580:
00003976 D043                       		add.w	d3,d0
00003978 3C80                       		move.w	d0,(a6)
0000397A 4E75                       		rts	
0000397C                            ; End of function LevSel_ChgSnd
0000397C                            
0000397C                            
0000397C                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000397C                            
0000397C                            
0000397C                            LevSel_ChgLine:				; XREF: LevSelTextLoad
0000397C 740F                       		moveq	#$10-1,d2		; number of characters per line
0000397E                            
0000397E                            @loop:
0000397E 7000                       		moveq	#0,d0
00003980 1019                       		move.b	(a1)+,d0
00003982 0C00 0020                  		cmpi.b	#$20,d0
00003986 6E00                       		bgt.s	@draw
00003988 3CBC 0000                  		move.w	#0,(a6)
0000398C 51CA FFF0                  		dbf	d2,@loop
00003990 4E75                       		rts	
00003992                            ; ===========================================================================
00003992                            
00003992                            @draw:				; XREF: LevSel_ChgLine
00003992 D043                       		add.w	d3,d0
00003994 3C80                       		move.w	d0,(a6)
00003996 51CA FFE6                  		dbf	d2,@loop
0000399A 4E75                       		rts	
0000399C                            ; End of function LevSel_ChgLine
0000399C                            		
0000399C                            CStringSlop_draw:
0000399C D043                       		add.w	d3,d0
0000399E 3C80                       		move.w	d0,(a6)
000039A0                            CStringSlop:				; XREF: LevSelTextLoad
000039A0 7000                       		moveq	#0,d0
000039A2 1019                       		move.b	(a1)+,d0
000039A4 0C00 0020                  		cmpi.b	#$20,d0
000039A8 6EF2                       		bgt.s	CStringSlop_draw
000039AA                            		
000039AA 0C00 0001                  		cmpi.b	#1,d0
000039AE 6700                       		beq.s	@InsertSpaces
000039B0 6500                       		blo.s	@end
000039B2                            		
000039B2 3CBC 0000                  		move.w	#0,(a6)
000039B6 60E8                       		bra.s	CStringSlop
000039B8                            	@end:
000039B8 4E75                       		rts
000039BA                            	@InsertSpaces:
000039BA 7000                       		moveq	#0,d0
000039BC 1019                       		move.b	(a1)+,d0
000039BE                            		
000039BE                            	@insert:
000039BE 3CBC 0000                  		move.w	#0,(a6)
000039C2 51C8 FFFA                  		dbf.w	d0,@insert
000039C6 60D8                       		bra.s	CStringSlop
000039C8                            ; End of function LevSel_ChgLine
000039C8                            
000039C8                            ; ===========================================================================
000039C8                            ; ---------------------------------------------------------------------------
000039C8                            ; Level	select menu text ( this stupid level select code was brought to you by the meltdown guy )
000039C8                            ; ---------------------------------------------------------------------------
000039C8                            LevelMenuText:	
000039C8 4352 554E 4348 5920 524F+  		dc.b    "CRUNCHY ROLL   1"
000039D8 2020 2020 2020 2020 2020+          dc.b    "               2"
000039E8 2020 2020 2020 2020 2020+          dc.b    "               3"
000039F8 4920 4C49 4B45 2046 494C+          dc.b    "I LIKE FILE    1"
00003A08 2045 5850 4C4F 5245 5220+          dc.b    " EXPLORER      2"
00003A18 2020 2020 2020 2020 2020+          dc.b    "               3"
00003A28 4D41 5242 4C20 2020 2020+          dc.b    "MARBL          1"
00003A38 2020 2020 2020 2020 2020+          dc.b    "               2"
00003A48 2020 2020 2020 2020 2020+          dc.b    "               3"
00003A58 444F 4E54 4745 5452 4944+          dc.b    "DONTGETRIDOTHIS1"
00003A68 2020 2020 2020 2020 2020+          dc.b    "               2"
00003A78 2020 2020 2020 2020 2020+          dc.b    "               3"
00003A88                            LMTSecondRow:
00003A88 5448 4520 5049 4720 4652+          dc.b    "THE PIG FROM   1"
00003A98 2042 4152 4E59 4152 4420+          dc.b    " BARNYARD      2"
00003AA8 2020 2020 2020 2020 2020+          dc.b    "               3"
00003AB8 5A20 5A20 5A20 5A20 2020+          dc.b    "Z Z Z Z        1"
00003AC8 2020 2020 2020 2020 2020+          dc.b    "               2"
00003AD8 2020 2020 2020 2020 2020+          dc.b    "               3"
00003AE8 4649 4E41 4C20 5A4F 4E45+          dc.b    "FINAL ZONE      "
00003AF8 5350 4543 4941 4C20 5354+          dc.b    "SPECIAL STAGE   "
00003B08 534F 554E 4420 5445 5354+          dc.b    "SOUND TEST $    "
00003B18 4652 4545 2057 4946 4920+  		dc.b	"FREE WIFI       "
00003B28 4F50 5449 4F4E 5320 4C41+  		dc.b	"OPTIONS LATER   "
00003B38                            LMTSelectableEnd:
00003B38 4341 4E54 2054 4F55 4348+  		dc.b	"CANT TOUCH ME XD"
00003B48                            LMTEnd:
00003B48                            
00003B48                            Now_Playing:
00003B48 3E3E 3E4E 4F57 2050 4C41+  		dc.b	">>>NOW PLAYING ",0
00003B58                            		even
00003B58                            NP_Track:
00003B58 5452 4143 4B20 2400        		dc.b	"TRACK $",0
00003B60                            		even
00003B60                            NP_SFX:
00003B60 534F 554E 4420 2400        		dc.b	"SOUND $",0
00003B68                            		even
00003B68                            
00003B68                            ShowNow_Playing:
00003B68 1C00                       		move.b	d0,d6
00003B6A 363C C65F                  		move.w	#$C680-$21,d3	; VRAM setting
00003B6E 43FA FFD8                  		lea	Now_Playing(pc),a1
00003B72 4DF9 00C0 0000             		lea		($C00000).l,a6
00003B78 2D7C 6C82 0003 0004        		move.l	#lsnppos,4(a6)
00003B80 6100 FE1E                  		bsr.w	CStringSlop
00003B84                            		
00003B84 43FA FFD2                  		lea	NP_Track(pc),a1
00003B88 0C06 00A0                  		cmpi.b	#$A0,d6
00003B8C 6D00                       		blt.s	@track
00003B8E                            		
00003B8E 43FA FFD0                  		lea	NP_SFX(pc),a1
00003B92                            	@track:
00003B92 6100 FE0C                  		bsr.w	CStringSlop
00003B96                            		
00003B96 0643 0030                  		add.w	#$30,d3
00003B9A 1006                       		move.b	d6,d0
00003B9C 1400                       		move.b	d0,d2
00003B9E E808                       		lsr.b	#4,d0
00003BA0 6100 FDC8                  		bsr.w	LevSel_ChgSnd
00003BA4 1002                       		move.b	d2,d0
00003BA6 6100 FDC2                  		bsr.w	LevSel_ChgSnd
00003BAA 4E75                       		rts	
00003BAC                            
00003BAC                            ; 1 is insert spaces btw
00003BAC                            Controls_Normal:
00003BAC 414E 593A 2050 4C41 5901+  		dc.b	"ANY: PLAY",1,27,0
00003BB8                            		even		
00003BB8                            Controls_SND:
00003BB8 413A 202D 3130 2020 423A+  		dc.b	"A: -10  B: +10  C: PLAY  START: QUIT",0
00003BDE 00                         		even
00003BDE                            ; ---------------------------------------------------------------------------
00003BDE                            ; Music	playlist
00003BDE                            ; ---------------------------------------------------------------------------
00003BDE                            MusicList1:	incbin	misc\muslist1.bin
00003BE6                            		even
00003BE6                            MusicList2:	incbin	misc\muslist2.bin
00003BEC                            		even
00003BEC                            MusicList3:	incbin	misc\muslist3.bin
00003BF2                            		even
00003BF2                            MusicList4:	incbin	misc\muslist4.bin
00003BF8                            		even
00003BF8                            ; ===========================================================================
00003BF8                            
00003BF8                            ; ---------------------------------------------------------------------------
00003BF8                            ; Level
00003BF8                            ; ---------------------------------------------------------------------------
00003BF8                            
00003BF8                            Level:					; XREF: GameModeArray
00003BF8 08F8 0007 F600             		bset	#7,($FFFFF600).w ; add $80 to screen mode (for pre level sequence)
00003BFE 4A78 FFF0                  		tst.w	($FFFFFFF0).w
00003C02 6B00                       		bmi.s	loc_37B6
00003C04 103C 00E0                  		move.b	#$E0,d0
00003C08 6100 D9B6                  		bsr.w	PlaySound_Special ; fade out music
00003C0C                            
00003C0C                            loc_37B6:
00003C0C 6100 DBF4                  		bsr.w	ClearPLC
00003C10 6100 E42A                  		bsr.w	Pal_FadeFrom
00003C14 4A78 FFF0                  		tst.w	($FFFFFFF0).w
00003C18 6B00                       		bmi.s	Level_ClrRam
00003C1A 46FC 2700                  		move	#$2700,sr
00003C1E 23FC 7000 0002 00C0 0004   		move.l	#$70000002,($C00004).l
00003C28 41F9 0000 0000             		lea	(Nem_TitleCard).l,a0 ; load title card patterns
00003C2E 6100 DA34                  		bsr.w	NemDec
00003C32 46FC 2300                  		move	#$2300,sr
00003C36 7000                       		moveq	#0,d0
00003C38 1038 FE10                  		move.b	($FFFFFE10).w,d0
00003C3C E948                       		lsl.w	#4,d0
00003C3E 45F9 0000 0000             		lea	(MainLoadBlocks).l,a2
00003C44 45F2 0000                  		lea	(a2,d0.w),a2
00003C48 7000                       		moveq	#0,d0
00003C4A 1012                       		move.b	(a2),d0
00003C4C 6700                       		beq.s	loc_37FC
00003C4E 6100 DB54                  		bsr.w	LoadPLC		; load level patterns
00003C52                            
00003C52                            loc_37FC:
00003C52 7001                       		moveq	#1,d0
00003C54 6100 DB4E                  		bsr.w	LoadPLC		; load standard	patterns
00003C58                            
00003C58                            Level_ClrRam:
00003C58 43F8 D000                  		lea	($FFFFD000).w,a1
00003C5C 7000                       		moveq	#0,d0
00003C5E 323C 07FF                  		move.w	#$7FF,d1
00003C62                            
00003C62                            Level_ClrObjRam:
00003C62 22C0                       		move.l	d0,(a1)+
00003C64 51C9 FFFC                  		dbf	d1,Level_ClrObjRam ; clear object RAM
00003C68                            
00003C68 43F8 F628                  		lea	($FFFFF628).w,a1
00003C6C 7000                       		moveq	#0,d0
00003C6E 323C 0015                  		move.w	#$15,d1
00003C72                            
00003C72                            Level_ClrVars:
00003C72 22C0                       		move.l	d0,(a1)+
00003C74 51C9 FFFC                  		dbf	d1,Level_ClrVars ; clear misc variables
00003C78                            
00003C78 43F8 F700                  		lea	($FFFFF700).w,a1
00003C7C 7000                       		moveq	#0,d0
00003C7E 323C 003F                  		move.w	#$3F,d1
00003C82                            
00003C82                            Level_ClrVars2:
00003C82 22C0                       		move.l	d0,(a1)+
00003C84 51C9 FFFC                  		dbf	d1,Level_ClrVars2 ; clear misc variables
00003C88                            
00003C88 43F8 FE60                  		lea	($FFFFFE60).w,a1
00003C8C 7000                       		moveq	#0,d0
00003C8E 323C 0047                  		move.w	#$47,d1
00003C92                            
00003C92                            Level_ClrVars3:
00003C92 22C0                       		move.l	d0,(a1)+
00003C94 51C9 FFFC                  		dbf	d1,Level_ClrVars3 ; clear object variables
00003C98                            
00003C98 46FC 2700                  		move	#$2700,sr
00003C9C 6100 D84A                  		bsr.w	ClearScreen
00003CA0 4DF9 00C0 0004             		lea	($C00004).l,a6
00003CA6 3CBC 8B03                  		move.w	#$8B03,(a6)
00003CAA 3CBC 8230                  		move.w	#$8230,(a6)
00003CAE 3CBC 8407                  		move.w	#$8407,(a6)
00003CB2 3CBC 857C                  		move.w	#$857C,(a6)
00003CB6 3CBC 9001                  		move.w	#$9001,(a6)
00003CBA 3CBC 8004                  		move.w	#$8004,(a6)
00003CBE 3CBC 8720                  		move.w	#$8720,(a6)
00003CC2 31FC 8ADF F624             		move.w	#$8ADF,($FFFFF624).w
00003CC8 3CB8 F624                  		move.w	($FFFFF624).w,(a6)
00003CCC 0C38 0001 FE10             		cmpi.b	#1,($FFFFFE10).w ; is level LZ?
00003CD2 6600                       		bne.s	Level_LoadPal	; if not, branch
00003CD4 3CBC 8014                  		move.w	#$8014,(a6)
00003CD8 7000                       		moveq	#0,d0
00003CDA 1038 FE11                  		move.b	($FFFFFE11).w,d0
00003CDE D040                       		add.w	d0,d0
00003CE0 43F9 0000 0000             		lea	(WaterHeight).l,a1 ; load water	height array
00003CE6 3031 0000                  		move.w	(a1,d0.w),d0
00003CEA 31C0 F646                  		move.w	d0,($FFFFF646).w ; set water heights
00003CEE 31C0 F648                  		move.w	d0,($FFFFF648).w
00003CF2 31C0 F64A                  		move.w	d0,($FFFFF64A).w
00003CF6 4238 F64D                  		clr.b	($FFFFF64D).w	; clear	water routine counter
00003CFA 4238 F64E                  		clr.b	($FFFFF64E).w	; clear	water movement
00003CFE 11FC 0001 F64C             		move.b	#1,($FFFFF64C).w ; enable water
00003D04 6000 0000                  		bra.w	Level_LoadPal
00003D08                            Player_Palette:
00003D08                            		; normal, lz, sbz, blank
00003D08 0003 000F 0010 0000        		dc.w	3,$F,$10,0 ; Sonic 
00003D10                            		
00003D10 0015 0016 0017 0000        		dc.w	21,22,23,0 ; Pal_Gronic 
00003D18                            		; add more player palettes
00003D18                            Level_LoadPal:
00003D18 31FC 001E FE14             		move.w	#$1E,($FFFFFE14).w
00003D1E 46FC 2300                  		move	#$2300,sr
00003D22                            
00003D22 7200                       		moveq	#0,d1
00003D24 1238 FFE8                  		move.b	(v_character),d1
00003D28 D241                       		add.w	d1,d1
00003D2A D241                       		add.w	d1,d1
00003D2C D241                       		add.w	d1,d1
00003D2E 303B 10D8                  		move.w	Player_Palette(pc,d1.w),d0	; load palette
00003D32                            		
00003D32 6100 E5CE                  		bsr.w	PalLoad2	; load Sonic's pallet line
00003D36 0C38 0001 FE10             		cmpi.b	#1,($FFFFFE10).w ; is level LZ?
00003D3C 6600                       		bne.s	Level_GetBgm	; if not, branch
00003D3E 303B 10CA                  		move.w	Player_Palette+2(pc,d1.w),d0	; load palette
00003D42 0C38 0003 FE11             		cmpi.b	#3,($FFFFFE11).w ; is act number 3?
00003D48 6600                       		bne.s	Level_WaterPal	; if not, branch
00003D4A 303B 10C0                  		move.w	Player_Palette+4(pc,d1.w),d0	; load palette
00003D4E                            
00003D4E                            Level_WaterPal:
00003D4E 6100 E5CA                  		bsr.w	PalLoad3_Water	; load underwater pallet (see d0)
00003D52 4A38 FE30                  		tst.b	($FFFFFE30).w
00003D56 6700                       		beq.s	Level_GetBgm
00003D58 11F8 FE53 F64E             		move.b	($FFFFFE53).w,($FFFFF64E).w
00003D5E                            
00003D5E                            ; NineKode begins here - How to play different songs on different acts
00003D5E                             
00003D5E                            Level_GetBgm:
00003D5E 4A78 FFF0                  		tst.w	($FFFFFFF0).w
00003D62 6B00 0000                  		bmi.w	loc_3946	; change from bmi.s to bmi.w or you'll get an error
00003D66 7000                       		moveq	#0,d0
00003D68 1038 FE10                  		move.b	($FFFFFE10).w,d0
00003D6C                             
00003D6C 0C38 0000 FE11             		cmpi.b	#$0,($FFFFFE11).w	; is this act 1?
00003D72 6600                       		bne.s	Level_GetBgm2	; if not, branch
00003D74 43F9 0000 3BDE             		lea	(MusicList1).l,a1	; load Music Playlist for Acts 1
00003D7A 6000                       		bra.s	Level_PlayBgm	; go to PlayBgm
00003D7C                             
00003D7C                            Level_GetBgm2:
00003D7C 0C38 0001 FE11             		cmpi.b	#$1,($FFFFFE11).w	; is this act 2?
00003D82 6600                       		bne.s	Level_GetBgm3	; if not, branch
00003D84 43F9 0000 3BE6             		lea	(MusicList2).l,a1	; load Music Playlist for Acts 2
00003D8A 6000                       		bra.s	Level_PlayBgm	; go to PlayBgm
00003D8C                             
00003D8C                            Level_GetBgm3:
00003D8C 0C38 0002 FE11             		cmpi.b	#$2,($FFFFFE11).w	; is this act 3?
00003D92 6600                       		bne.s	Level_GetBgm4	; if not, branch
00003D94 43F9 0000 3BEC             		lea	(MusicList3).l,a1	; load Music Playlist for Acts 3
00003D9A 6000                       		bra.s	Level_PlayBgm	; go to PlayBgm
00003D9C                             
00003D9C                            Level_GetBgm4:
00003D9C 0C38 0003 FE11             		cmpi.b	#$3,($FFFFFE11).w	; is this act 4?
00003DA2 6600                       		bne.s	Level_PlayBgm	; if not, branch
00003DA4 43F9 0000 3BF2             		lea	(MusicList4).l,a1	; load Music Playlist for Acts 4
00003DAA                             
00003DAA                            Level_PlayBgm:
00003DAA 1031 0000                  		move.b	(a1,d0.w),d0	; get d0-th entry from the playlist
00003DAE 6100 D80A                  		bsr.w	PlaySound	; play music
00003DB2 11FC 0034 D080             		move.b	#$34,($FFFFD080).w ; load title	card object
00003DB8                             
00003DB8                            ; NineKode ends here
00003DB8                            
00003DB8                            Level_TtlCard:
00003DB8 11FC 000C F62A             		move.b	#$C,($FFFFF62A).w
00003DBE 6100 EE72                  		bsr.w	DelayProgram
00003DC2 4EB9 0000 0000             		jsr	ObjectsLoad
00003DC8 4EB9 0000 0000             		jsr	BuildSprites
00003DCE 6100 DA40                  		bsr.w	RunPLC_RAM
00003DD2 3038 D108                  		move.w	($FFFFD108).w,d0
00003DD6 B078 D130                  		cmp.w	($FFFFD130).w,d0 ; has title card sequence finished?
00003DDA 66DC                       		bne.s	Level_TtlCard	; if not, branch
00003DDC 4AB8 F680                  		tst.l	($FFFFF680).w	; are there any	items in the pattern load cue?
00003DE0 66D6                       		bne.s	Level_TtlCard	; if yes, branch
00003DE2 4EB9 0000 0000             		jsr	Hud_Base
00003DE8                            
00003DE8                            loc_3946:
00003DE8 7003                       		moveq	#3,d0
00003DEA 6100 E4FA                  		bsr.w	PalLoad1	; load Sonic's pallet line
00003DEE 6100 0000                  		bsr.w	LevelSizeLoad
00003DF2 6100 0000                  		bsr.w	DeformBgLayer
00003DF6 08F8 0002 F754             		bset	#2,($FFFFF754).w
00003DFC 6100 0000                  		bsr.w	MainLoadBlockLoad ; load block mappings	and pallets
00003E00 6100 0000                  		bsr.w	LoadTilesFromStart
00003E04 4EB9 0000 0000             		jsr	FloorLog_Unk
00003E0A 6100 0000                  		bsr.w	ColIndexLoad
00003E0E 6100 0000                  		bsr.w	LZWaterEffects
00003E12 11FC 0001 D000             		move.b	#1,($FFFFD000).w ; load	Sonic object
00003E18 4A78 FFF0                  		tst.w	($FFFFFFF0).w
00003E1C 6B00                       		bmi.s	Level_ChkDebug
00003E1E 11FC 0021 D040             		move.b	#$21,($FFFFD040).w ; load HUD object
00003E24                            
00003E24                            Level_ChkDebug:
00003E24 4A38 FFE2                  		tst.b	($FFFFFFE2).w	; has debug cheat been entered?
00003E28 6700                       		beq.s	Level_ChkWater	; if not, branch
00003E2A 0838 0006 F604             		btst	#6,($FFFFF604).w ; is A	button pressed?
00003E30 6700                       		beq.s	Level_ChkWater	; if not, branch
00003E32 11FC 0001 FFFA             		move.b	#1,($FFFFFFFA).w ; enable debug	mode
00003E38                            
00003E38                            Level_ChkWater:
00003E38 31FC 0000 F602             		move.w	#0,($FFFFF602).w
00003E3E 31FC 0000 F604             		move.w	#0,($FFFFF604).w
00003E44 0C38 0001 FE10             		cmpi.b	#1,($FFFFFE10).w ; is level LZ?
00003E4A 6600                       		bne.s	Level_LoadObj	; if not, branch
00003E4C 11FC 001B D780             		move.b	#$1B,($FFFFD780).w ; load water	surface	object
00003E52 31FC 0060 D788             		move.w	#$60,($FFFFD788).w
00003E58 11FC 001B D7C0             		move.b	#$1B,($FFFFD7C0).w
00003E5E 31FC 0120 D7C8             		move.w	#$120,($FFFFD7C8).w
00003E64                            
00003E64                            Level_LoadObj:
00003E64 4EB9 0000 0000             		jsr	ObjPosLoad
00003E6A 4EB9 0000 0000             		jsr	ObjectsLoad
00003E70 4EB9 0000 0000             		jsr	BuildSprites
00003E76 7000                       		moveq	#0,d0
00003E78 4A38 FE30                  		tst.b	($FFFFFE30).w	; are you starting from	a lamppost?
00003E7C 6600                       		bne.s	loc_39E8	; if yes, branch
00003E7E 31C0 FE20                  		move.w	d0,($FFFFFE20).w ; clear rings
00003E82 21C0 FE22                  		move.l	d0,($FFFFFE22).w ; clear time
00003E86 11C0 FE1B                  		move.b	d0,($FFFFFE1B).w ; clear lives counter
00003E8A                            
00003E8A                            loc_39E8:
00003E8A 11C0 FE1A                  		move.b	d0,($FFFFFE1A).w
00003E8E 11C0 FE2C                  		move.b	d0,($FFFFFE2C).w ; clear shield
00003E92 11C0 FE2D                  		move.b	d0,($FFFFFE2D).w ; clear invincibility
00003E96 11C0 FE2E                  		move.b	d0,($FFFFFE2E).w ; clear speed shoes
00003E9A                            		; move.b	d0,($FFFFFE2F).w
00003E9A 0238 0001 FE2F             		andi.b	#%00000001,($FFFFFE2F).w	; GMZ: Clear every flag in FE2F aside from reversed controls
00003EA0 31C0 FE08                  		move.w	d0,($FFFFFE08).w
00003EA4 31C0 FE02                  		move.w	d0,($FFFFFE02).w
00003EA8 31C0 FE04                  		move.w	d0,($FFFFFE04).w
00003EAC 6100 0000                  		bsr.w	OscillateNumInit
00003EB0 11FC 0001 FE1F             		move.b	#1,($FFFFFE1F).w ; update score	counter
00003EB6 11FC 0001 FE1D             		move.b	#1,($FFFFFE1D).w ; update rings	counter
00003EBC 11FC 0001 FE1E             		move.b	#1,($FFFFFE1E).w ; update time counter
00003EC2 31FC 0000 F790             		move.w	#0,($FFFFF790).w
00003EC8 43F9 0000 0000             		lea	(Demo_Index).l,a1 ; load demo data
00003ECE 7000                       		moveq	#0,d0
00003ED0 1038 FE10                  		move.b	($FFFFFE10).w,d0
00003ED4 E548                       		lsl.w	#2,d0
00003ED6 2271 0000                  		movea.l	(a1,d0.w),a1
00003EDA 4A78 FFF0                  		tst.w	($FFFFFFF0).w	; is demo mode on?
00003EDE 6A00                       		bpl.s	Level_Demo	; if yes, branch
00003EE0 43F9 0000 0000             		lea	(Demo_EndIndex).l,a1 ; load ending demo	data
00003EE6 3038 FFF4                  		move.w	($FFFFFFF4).w,d0
00003EEA 5340                       		subq.w	#1,d0
00003EEC E548                       		lsl.w	#2,d0
00003EEE 2271 0000                  		movea.l	(a1,d0.w),a1
00003EF2                            
00003EF2                            Level_Demo:
00003EF2 11E9 0001 F792             		move.b	1(a1),($FFFFF792).w ; load key press duration
00003EF8 5338 F792                  		subq.b	#1,($FFFFF792).w ; subtract 1 from duration
00003EFC 31FC 0708 F614             		move.w	#1800,($FFFFF614).w
00003F02 4A78 FFF0                  		tst.w	($FFFFFFF0).w
00003F06 6A00                       		bpl.s	Level_ChkWaterPal
00003F08 31FC 021C F614             		move.w	#540,($FFFFF614).w
00003F0E 0C78 0004 FFF4             		cmpi.w	#4,($FFFFFFF4).w
00003F14 6600                       		bne.s	Level_ChkWaterPal
00003F16 31FC 01FE F614             		move.w	#510,($FFFFF614).w
00003F1C                            
00003F1C                            Level_ChkWaterPal:
00003F1C 0C38 0001 FE10             		cmpi.b	#1,($FFFFFE10).w ; is level LZ/SBZ3?
00003F22 6600                       		bne.s	Level_Delay	; if not, branch
00003F24 700B                       		moveq	#$B,d0		; pallet $0B (LZ underwater)
00003F26 0C38 0003 FE11             		cmpi.b	#3,($FFFFFE11).w ; is level SBZ3?
00003F2C 6600                       		bne.s	Level_WaterPal2	; if not, branch
00003F2E 700D                       		moveq	#$D,d0		; pallet $0D (SBZ3 underwater)
00003F30                            
00003F30                            Level_WaterPal2:
00003F30 6100 E404                  		bsr.w	PalLoad4_Water
00003F34                            
00003F34                            Level_Delay:
00003F34 323C 0003                  		move.w	#3,d1
00003F38                            
00003F38                            Level_DelayLoop:
00003F38 11FC 0008 F62A             		move.b	#8,($FFFFF62A).w
00003F3E 6100 ECF2                  		bsr.w	DelayProgram
00003F42 51C9 FFF4                  		dbf	d1,Level_DelayLoop
00003F46                            
00003F46 31FC 202F F626             		move.w	#$202F,($FFFFF626).w
00003F4C 6100 E04E                  		bsr.w	Pal_FadeTo2
00003F50 4A78 FFF0                  		tst.w	($FFFFFFF0).w
00003F54 6B00                       		bmi.s	Level_ClrCardArt
00003F56 5438 D0A4                  		addq.b	#2,($FFFFD0A4).w ; make	title card move
00003F5A 5838 D0E4                  		addq.b	#4,($FFFFD0E4).w
00003F5E 5838 D124                  		addq.b	#4,($FFFFD124).w
00003F62 5838 D164                  		addq.b	#4,($FFFFD164).w
00003F66 6000                       		bra.s	Level_StartGame
00003F68                            ; ===========================================================================
00003F68                            
00003F68                            Level_ClrCardArt:
00003F68 7002                       		moveq	#2,d0
00003F6A 4EB9 0000 17A4             		jsr	(LoadPLC).l	; load explosion patterns
00003F70 7000                       		moveq	#0,d0
00003F72 1038 FE10                  		move.b	($FFFFFE10).w,d0
00003F76 0640 0015                  		addi.w	#$15,d0
00003F7A 4EB9 0000 17A4             		jsr	(LoadPLC).l	; load animal patterns (level no. + $15)
00003F80                            
00003F80                            Level_StartGame:
00003F80 08B8 0007 F600             		bclr	#7,($FFFFF600).w ; subtract 80 from screen mode
00003F86                            
00003F86                            ; ---------------------------------------------------------------------------
00003F86                            ; Main level loop (when	all title card and loading sequences are finished)
00003F86                            ; ---------------------------------------------------------------------------
00003F86                            
00003F86                            Level_MainLoop:
00003F86 6100 D644                  		bsr.w	PauseGame
00003F8A 11FC 0008 F62A             		move.b	#8,($FFFFF62A).w
00003F90 6100 ECA0                  		bsr.w	DelayProgram
00003F94 5278 FE04                  		addq.w	#1,($FFFFFE04).w ; add 1 to level timer
00003F98 6100 0000                  		bsr.w	MoveSonicInDemo
00003F9C 6100 0000                  		bsr.w	LZWaterEffects
00003FA0 4EB9 0000 0000             		jsr	ObjectsLoad
00003FA6 4A78 FE08                  		tst.w	($FFFFFE08).w
00003FAA 6600                       		bne.s	loc_3B10
00003FAC 0C38 0006 D024             		cmpi.b	#6,($FFFFD024).w
00003FB2 6400                       		bcc.s	loc_3B14
00003FB4                            
00003FB4                            loc_3B10:
00003FB4 6100 0000                  		bsr.w	DeformBgLayer
00003FB8                            
00003FB8                            loc_3B14:
00003FB8 4EB9 0000 0000             		jsr	BuildSprites
00003FBE 4EB9 0000 0000             		jsr	ObjPosLoad
00003FC4 6100 DB9A                  		bsr.w	PalCycle_Load
00003FC8 6100 D846                  		bsr.w	RunPLC_RAM
00003FCC 6100 0000                  		bsr.w	OscillateNumDo
00003FD0 6100 0000                  		bsr.w	ChangeRingFrame
00003FD4 6100 0000                  		bsr.w	SignpostArtLoad
00003FD8 0C38 0008 F600             		cmpi.b	#8,($FFFFF600).w
00003FDE 6700                       		beq.s	Level_ChkDemo	; if screen mode is 08 (demo), branch
00003FE0 4A78 FE02                  		tst.w	($FFFFFE02).w	; is the level set to restart?
00003FE4 6600 FC12                  		bne.w	Level		; if yes, branch
00003FE8 0C38 000C F600             		cmpi.b	#$C,($FFFFF600).w
00003FEE 6700 FF96                  		beq.w	Level_MainLoop	; if screen mode is $0C	(level), branch
00003FF2 4E75                       		rts	
00003FF4                            ; ===========================================================================
00003FF4                            
00003FF4                            Level_ChkDemo:				; XREF: Level_MainLoop
00003FF4 4A78 FE02                  		tst.w	($FFFFFE02).w	; is level set to restart?
00003FF8 6600                       		bne.s	Level_EndDemo	; if yes, branch
00003FFA 4A78 F614                  		tst.w	($FFFFF614).w	; is there time	left on	the demo?
00003FFE 6700                       		beq.s	Level_EndDemo	; if not, branch
00004000 0C38 0008 F600             		cmpi.b	#8,($FFFFF600).w
00004006 6700 FF7E                  		beq.w	Level_MainLoop	; if screen mode is 08 (demo), branch
0000400A 11FC 0000 F600             		move.b	#0,($FFFFF600).w ; go to Sega screen
00004010 4E75                       		rts	
00004012                            ; ===========================================================================
00004012                            
00004012                            Level_EndDemo:				; XREF: Level_ChkDemo
00004012 0C38 0008 F600             		cmpi.b	#8,($FFFFF600).w ; is screen mode 08 (demo)?
00004018 6600                       		bne.s	loc_3B88	; if not, branch
0000401A 11FC 0000 F600             		move.b	#0,($FFFFF600).w ; go to Sega screen
00004020 4A78 FFF0                  		tst.w	($FFFFFFF0).w	; is demo mode on?
00004024 6A00                       		bpl.s	loc_3B88	; if yes, branch
00004026 11FC 001C F600             		move.b	#$1C,($FFFFF600).w ; go	to credits
0000402C                            
0000402C                            loc_3B88:
0000402C 31FC 003C F614             		move.w	#$3C,($FFFFF614).w
00004032 31FC 003F F626             		move.w	#$3F,($FFFFF626).w
00004038 4278 F794                  		clr.w	($FFFFF794).w
0000403C                            
0000403C                            loc_3B98:
0000403C 11FC 0008 F62A             		move.b	#8,($FFFFF62A).w
00004042 6100 EBEE                  		bsr.w	DelayProgram
00004046 6100 0000                  		bsr.w	MoveSonicInDemo
0000404A 4EB9 0000 0000             		jsr	ObjectsLoad
00004050 4EB9 0000 0000             		jsr	BuildSprites
00004056 4EB9 0000 0000             		jsr	ObjPosLoad
0000405C 5378 F794                  		subq.w	#1,($FFFFF794).w
00004060 6A00                       		bpl.s	loc_3BC8
00004062 31FC 0002 F794             		move.w	#2,($FFFFF794).w
00004068 6100 DFF2                  		bsr.w	Pal_FadeOut
0000406C                            
0000406C                            loc_3BC8:
0000406C 4A78 F614                  		tst.w	($FFFFF614).w
00004070 66CA                       		bne.s	loc_3B98
00004072 4E75                       		rts	
00004074                            ; ===========================================================================
00004074                            ; ---------------------------------------------------------------------------
00004074                            ; Subroutine to	do special water effects in Labyrinth Zone
00004074                            ; ---------------------------------------------------------------------------
00004074                            
00004074                            LZWaterEffects:				; XREF: Level
00004074 0C38 0001 FE10             		cmpi.b	#1,($FFFFFE10).w ; check if level is LZ
0000407A 6600                       		bne.s	locret_3C28	; if not, branch
0000407C 0C38 0006 D024             		cmpi.b	#6,($FFFFD024).w
00004082 6400                       		bcc.s	LZMoveWater
00004084 6100 0000                  		bsr.w	LZWindTunnels
00004088 6100 0000                  		bsr.w	LZWaterSlides
0000408C 6100 0000                  		bsr.w	LZDynamicWater
00004090                            
00004090                            LZMoveWater:
00004090 4238 F64E                  		clr.b	($FFFFF64E).w
00004094 7000                       		moveq	#0,d0
00004096 1038 FE60                  		move.b	($FFFFFE60).w,d0
0000409A E248                       		lsr.w	#1,d0
0000409C D078 F648                  		add.w	($FFFFF648).w,d0
000040A0 31C0 F646                  		move.w	d0,($FFFFF646).w
000040A4 3038 F646                  		move.w	($FFFFF646).w,d0
000040A8 9078 F704                  		sub.w	($FFFFF704).w,d0
000040AC 6400                       		bcc.s	loc_3C1A
000040AE 4A40                       		tst.w	d0
000040B0 6A00                       		bpl.s	loc_3C1A
000040B2 11FC 00DF F625             		move.b	#-$21,($FFFFF625).w
000040B8 11FC 0001 F64E             		move.b	#1,($FFFFF64E).w
000040BE                            
000040BE                            loc_3C1A:
000040BE 0C40 00DF                  		cmpi.w	#$DF,d0
000040C2 6500                       		bcs.s	loc_3C24
000040C4 303C 00DF                  		move.w	#$DF,d0
000040C8                            
000040C8                            loc_3C24:
000040C8 11C0 F625                  		move.b	d0,($FFFFF625).w
000040CC                            
000040CC                            locret_3C28:
000040CC 4E75                       		rts	
000040CE                            ; ===========================================================================
000040CE                            ; ---------------------------------------------------------------------------
000040CE                            ; Labyrinth default water heights
000040CE                            ; ---------------------------------------------------------------------------
000040CE                            WaterHeight:	incbin	misc\lz_heigh.bin
000040D6                            		even
000040D6                            ; ===========================================================================
000040D6                            
000040D6                            ; ---------------------------------------------------------------------------
000040D6                            ; Labyrinth dynamic water routines
000040D6                            ; ---------------------------------------------------------------------------
000040D6                            
000040D6                            LZDynamicWater:				; XREF: LZWaterEffects
000040D6 7000                       		moveq	#0,d0
000040D8 1038 FE11                  		move.b	($FFFFFE11).w,d0
000040DC D040                       		add.w	d0,d0
000040DE 303B 0000                  		move.w	DynWater_Index(pc,d0.w),d0
000040E2 4EBB 0000                  		jsr	DynWater_Index(pc,d0.w)
000040E6 7200                       		moveq	#0,d1
000040E8 1238 F64C                  		move.b	($FFFFF64C).w,d1
000040EC 3038 F64A                  		move.w	($FFFFF64A).w,d0
000040F0 9078 F648                  		sub.w	($FFFFF648).w,d0
000040F4 6700                       		beq.s	locret_3C5A
000040F6 6400                       		bcc.s	loc_3C56
000040F8 4441                       		neg.w	d1
000040FA                            
000040FA                            loc_3C56:
000040FA D378 F648                  		add.w	d1,($FFFFF648).w
000040FE                            
000040FE                            locret_3C5A:
000040FE 4E75                       		rts	
00004100                            ; ===========================================================================
00004100 0000                       DynWater_Index:	dc.w DynWater_LZ1-DynWater_Index
00004102 0000                       		dc.w DynWater_LZ2-DynWater_Index
00004104 0000                       		dc.w DynWater_LZ3-DynWater_Index
00004106 0000                       		dc.w DynWater_SBZ3-DynWater_Index
00004108                            ; ===========================================================================
00004108                            
00004108                            DynWater_LZ1:				; XREF: DynWater_Index
00004108 3038 F700                  		move.w	($FFFFF700).w,d0
0000410C 1438 F64D                  		move.b	($FFFFF64D).w,d2
00004110 6600                       		bne.s	loc_3CD0
00004112 323C 00B8                  		move.w	#$B8,d1
00004116 0C40 0600                  		cmpi.w	#$600,d0
0000411A 6500                       		bcs.s	loc_3CB4
0000411C 323C 0108                  		move.w	#$108,d1
00004120 0C78 0200 D00C             		cmpi.w	#$200,($FFFFD00C).w
00004126 6500                       		bcs.s	loc_3CBA
00004128 0C40 0C00                  		cmpi.w	#$C00,d0
0000412C 6500                       		bcs.s	loc_3CB4
0000412E 323C 0318                  		move.w	#$318,d1
00004132 0C40 1080                  		cmpi.w	#$1080,d0
00004136 6500                       		bcs.s	loc_3CB4
00004138 11FC 0080 F7E5             		move.b	#-$80,($FFFFF7E5).w
0000413E 323C 05C8                  		move.w	#$5C8,d1
00004142 0C40 1380                  		cmpi.w	#$1380,d0
00004146 6500                       		bcs.s	loc_3CB4
00004148 323C 03A8                  		move.w	#$3A8,d1
0000414C B278 F648                  		cmp.w	($FFFFF648).w,d1
00004150 6600                       		bne.s	loc_3CB4
00004152 11FC 0001 F64D             		move.b	#1,($FFFFF64D).w
00004158                            
00004158                            loc_3CB4:
00004158 31C1 F64A                  		move.w	d1,($FFFFF64A).w
0000415C 4E75                       		rts	
0000415E                            ; ===========================================================================
0000415E                            
0000415E                            loc_3CBA:				; XREF: DynWater_LZ1
0000415E 0C40 0C80                  		cmpi.w	#$C80,d0
00004162 65F4                       		bcs.s	loc_3CB4
00004164 323C 00E8                  		move.w	#$E8,d1
00004168 0C40 1500                  		cmpi.w	#$1500,d0
0000416C 65EA                       		bcs.s	loc_3CB4
0000416E 323C 0108                  		move.w	#$108,d1
00004172 60E4                       		bra.s	loc_3CB4
00004174                            ; ===========================================================================
00004174                            
00004174                            loc_3CD0:				; XREF: DynWater_LZ1
00004174 5302                       		subq.b	#1,d2
00004176 6600                       		bne.s	locret_3CF4
00004178 0C78 02E0 D00C             		cmpi.w	#$2E0,($FFFFD00C).w
0000417E 6400                       		bcc.s	locret_3CF4
00004180 323C 03A8                  		move.w	#$3A8,d1
00004184 0C40 1300                  		cmpi.w	#$1300,d0
00004188 6500                       		bcs.s	loc_3CF0
0000418A 323C 0108                  		move.w	#$108,d1
0000418E 11FC 0002 F64D             		move.b	#2,($FFFFF64D).w
00004194                            
00004194                            loc_3CF0:
00004194 31C1 F64A                  		move.w	d1,($FFFFF64A).w
00004198                            
00004198                            locret_3CF4:
00004198 4E75                       		rts	
0000419A                            ; ===========================================================================
0000419A                            
0000419A                            DynWater_LZ2:				; XREF: DynWater_Index
0000419A 3038 F700                  		move.w	($FFFFF700).w,d0
0000419E 323C 0328                  		move.w	#$328,d1
000041A2 0C40 0500                  		cmpi.w	#$500,d0
000041A6 6500                       		bcs.s	loc_3D12
000041A8 323C 03C8                  		move.w	#$3C8,d1
000041AC 0C40 0B00                  		cmpi.w	#$B00,d0
000041B0 6500                       		bcs.s	loc_3D12
000041B2 323C 0428                  		move.w	#$428,d1
000041B6                            
000041B6                            loc_3D12:
000041B6 31C1 F64A                  		move.w	d1,($FFFFF64A).w
000041BA 4E75                       		rts	
000041BC                            ; ===========================================================================
000041BC                            
000041BC                            DynWater_LZ3:				; XREF: DynWater_Index
000041BC 3038 F700                  		move.w	($FFFFF700).w,d0
000041C0 1438 F64D                  		move.b	($FFFFF64D).w,d2
000041C4 6600                       		bne.s	loc_3D5E
000041C6 323C 0500                  		move.w	#$500,d1
000041CA 0C40 0600                  		cmpi.w	#$600,d0
000041CE 6500                       		bcs.s	loc_3D54
000041D0 0C40 1B00                  		cmpi.w	#$1B00,d0
000041D4 6500                       		bcs.s	loc_3D54
000041D6 323C 0850                  		move.w	#$850,d1
000041DA                            
000041DA                            loc_3D54:
000041DA 31C1 F64A                  		move.w	d1,($FFFFF64A).w
000041DE 31C1 F648                  		move.w	d1,($FFFFF648).w
000041E2 4E75                       		rts	
000041E4                            ; ===========================================================================
000041E4                            
000041E4                            loc_3D5E:				; XREF: DynWater_LZ3
000041E4 5302                       		subq.b	#1,d2
000041E6 6600                       		bne.s	loc_3DA8
000041E8 323C 04C8                  		move.w	#$4C8,d1
000041EC 0C40 0770                  		cmpi.w	#$770,d0
000041F0 6500                       		bcs.s	loc_3DA2
000041F2 323C 0308                  		move.w	#$308,d1
000041F6 0C40 1400                  		cmpi.w	#$1400,d0
000041FA 6500                       		bcs.s	loc_3DA2
000041FC 0C78 0508 F64A             		cmpi.w	#$508,($FFFFF64A).w
00004202 6700                       		beq.s	loc_3D8E
00004204 0C78 0600 D00C             		cmpi.w	#$600,($FFFFD00C).w
0000420A 6400                       		bcc.s	loc_3D8E
0000420C 0C78 0280 D00C             		cmpi.w	#$280,($FFFFD00C).w
00004212 6400                       		bcc.s	loc_3DA2
00004214                            
00004214                            loc_3D8E:
00004214 323C 0508                  		move.w	#$508,d1
00004218 31C1 F648                  		move.w	d1,($FFFFF648).w
0000421C 0C40 1770                  		cmpi.w	#$1770,d0
00004220 6500                       		bcs.s	loc_3DA2
00004222 11FC 0002 F64D             		move.b	#2,($FFFFF64D).w
00004228                            
00004228                            loc_3DA2:
00004228 31C1 F64A                  		move.w	d1,($FFFFF64A).w
0000422C 4E75                       		rts	
0000422E                            ; ===========================================================================
0000422E                            
0000422E                            loc_3DA8:
0000422E 5302                       		subq.b	#1,d2
00004230 6600                       		bne.s	loc_3DD2
00004232 323C 0508                  		move.w	#$508,d1
00004236 0C40 1860                  		cmpi.w	#$1860,d0
0000423A 6500                       		bcs.s	loc_3DCC
0000423C 323C 0188                  		move.w	#$188,d1
00004240 0C40 1AF0                  		cmpi.w	#$1AF0,d0
00004244 6400                       		bcc.s	loc_3DC6
00004246 B278 F648                  		cmp.w	($FFFFF648).w,d1
0000424A 6600                       		bne.s	loc_3DCC
0000424C                            
0000424C                            loc_3DC6:
0000424C 11FC 0003 F64D             		move.b	#3,($FFFFF64D).w
00004252                            
00004252                            loc_3DCC:
00004252 31C1 F64A                  		move.w	d1,($FFFFF64A).w
00004256 4E75                       		rts	
00004258                            ; ===========================================================================
00004258                            
00004258                            loc_3DD2:
00004258 5302                       		subq.b	#1,d2
0000425A 6600                       		bne.s	loc_3E0E
0000425C 323C 0188                  		move.w	#$188,d1
00004260 0C40 1AF0                  		cmpi.w	#$1AF0,d0
00004264 6500                       		bcs.s	loc_3E04
00004266 323C 0900                  		move.w	#$900,d1
0000426A 0C40 1BC0                  		cmpi.w	#$1BC0,d0
0000426E 6500                       		bcs.s	loc_3E04
00004270 11FC 0004 F64D             		move.b	#4,($FFFFF64D).w
00004276 31FC 0608 F64A             		move.w	#$608,($FFFFF64A).w
0000427C 31FC 07C0 F648             		move.w	#$7C0,($FFFFF648).w
00004282 11FC 0001 F7E8             		move.b	#1,($FFFFF7E8).w
00004288 4E75                       		rts	
0000428A                            ; ===========================================================================
0000428A                            
0000428A                            loc_3E04:
0000428A 31C1 F64A                  		move.w	d1,($FFFFF64A).w
0000428E 31C1 F648                  		move.w	d1,($FFFFF648).w
00004292 4E75                       		rts	
00004294                            ; ===========================================================================
00004294                            
00004294                            loc_3E0E:
00004294 0C40 1E00                  		cmpi.w	#$1E00,d0
00004298 6500                       		bcs.s	locret_3E1A
0000429A 31FC 0128 F64A             		move.w	#$128,($FFFFF64A).w
000042A0                            
000042A0                            locret_3E1A:
000042A0 4E75                       		rts	
000042A2                            ; ===========================================================================
000042A2                            
000042A2                            DynWater_SBZ3:				; XREF: DynWater_Index
000042A2 323C 0228                  		move.w	#$228,d1
000042A6 0C78 0F00 F700             		cmpi.w	#$F00,($FFFFF700).w
000042AC 6500                       		bcs.s	loc_3E2C
000042AE 323C 04C8                  		move.w	#$4C8,d1
000042B2                            
000042B2                            loc_3E2C:
000042B2 31C1 F64A                  		move.w	d1,($FFFFF64A).w
000042B6 4E75                       		rts
000042B8                            
000042B8                            ; ---------------------------------------------------------------------------
000042B8                            ; Labyrinth Zone "wind tunnels"	subroutine
000042B8                            ; ---------------------------------------------------------------------------
000042B8                            
000042B8                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000042B8                            
000042B8                            
000042B8                            LZWindTunnels:				; XREF: LZWaterEffects
000042B8 4A78 FE08                  		tst.w	($FFFFFE08).w	; is debug mode	being used?
000042BC 6600 0000                  		bne.w	locret_3F0A	; if yes, branch
000042C0 45F9 0000 0000             		lea	(LZWind_Data).l,a2
000042C6 7000                       		moveq	#0,d0
000042C8 1038 FE11                  		move.b	($FFFFFE11).w,d0
000042CC E748                       		lsl.w	#3,d0
000042CE D4C0                       		adda.w	d0,a2
000042D0 7200                       		moveq	#0,d1
000042D2 4A38 FE11                  		tst.b	($FFFFFE11).w
000042D6 6600                       		bne.s	loc_3E56
000042D8 7201                       		moveq	#1,d1
000042DA 514A                       		subq.w	#8,a2
000042DC                            
000042DC                            loc_3E56:
000042DC 43F8 D000                  		lea	($FFFFD000).w,a1
000042E0                            
000042E0                            LZWind_Loop:
000042E0 3029 0008                  		move.w	8(a1),d0
000042E4 B052                       		cmp.w	(a2),d0
000042E6 6500 0000                  		bcs.w	loc_3EF4
000042EA B06A 0004                  		cmp.w	4(a2),d0
000042EE 6400 0000                  		bcc.w	loc_3EF4
000042F2 3429 000C                  		move.w	$C(a1),d2
000042F6 B46A 0002                  		cmp.w	2(a2),d2
000042FA 6500                       		bcs.s	loc_3EF4
000042FC B46A 0006                  		cmp.w	6(a2),d2
00004300 6400                       		bcc.s	loc_3EF4
00004302 1038 FE0F                  		move.b	($FFFFFE0F).w,d0
00004306 0200 003F                  		andi.b	#$3F,d0
0000430A 6600                       		bne.s	loc_3E90
0000430C 303C 00D0                  		move.w	#$D0,d0
00004310 4EB9 0000 15C0             		jsr	(PlaySound_Special).l ;	play rushing water sound
00004316                            
00004316                            loc_3E90:
00004316 4A38 F7C9                  		tst.b	($FFFFF7C9).w
0000431A 6600 0000                  		bne.w	locret_3F0A
0000431E 0C29 0004 0024             		cmpi.b	#4,$24(a1)
00004324 6400                       		bcc.s	loc_3F06
00004326 11FC 0001 F7C7             		move.b	#1,($FFFFF7C7).w
0000432C 0440 0080                  		subi.w	#$80,d0
00004330 B052                       		cmp.w	(a2),d0
00004332 6400                       		bcc.s	LZWind_Move
00004334 7002                       		moveq	#2,d0
00004336 0C38 0001 FE11             		cmpi.b	#1,($FFFFFE11).w
0000433C 6600                       		bne.s	loc_3EBA
0000433E 4440                       		neg.w	d0
00004340                            
00004340                            loc_3EBA:
00004340 D169 000C                  		add.w	d0,$C(a1)
00004344                            
00004344                            LZWind_Move:
00004344 5869 0008                  		addq.w	#4,8(a1)
00004348 337C 0400 0010             		move.w	#$400,$10(a1)	; move Sonic horizontally
0000434E 337C 0000 0012             		move.w	#0,$12(a1)
00004354 137C 000F 001C             		move.b	#$F,$1C(a1)	; use floating animation
0000435A 08E9 0001 0022             		bset	#1,$22(a1)
00004360 0838 0000 F602             		btst	#0,($FFFFF602).w ; is up pressed?
00004366 6700                       		beq.s	LZWind_MoveDown	; if not, branch
00004368 5369 000C                  		subq.w	#1,$C(a1)	; move Sonic up
0000436C                            
0000436C                            LZWind_MoveDown:
0000436C 0838 0001 F602             		btst	#1,($FFFFF602).w ; is down being pressed?
00004372 6700                       		beq.s	locret_3EF2	; if not, branch
00004374 5269 000C                  		addq.w	#1,$C(a1)	; move Sonic down
00004378                            
00004378                            locret_3EF2:
00004378 4E75                       		rts	
0000437A                            ; ===========================================================================
0000437A                            
0000437A                            loc_3EF4:				; XREF: LZWindTunnels
0000437A 504A                       		addq.w	#8,a2
0000437C 51C9 FF62                  		dbf	d1,LZWind_Loop
00004380 4A38 F7C7                  		tst.b	($FFFFF7C7).w
00004384 6700                       		beq.s	locret_3F0A
00004386 137C 0000 001C             		move.b	#0,$1C(a1)
0000438C                            
0000438C                            loc_3F06:
0000438C 4238 F7C7                  		clr.b	($FFFFF7C7).w
00004390                            
00004390                            locret_3F0A:
00004390 4E75                       		rts	
00004392                            ; End of function LZWindTunnels
00004392                            
00004392                            ; ===========================================================================
00004392 0A80 0300 0C10 0380        		dc.w $A80, $300, $C10, $380
0000439A 0F80 0100 1410 0180 0460+  LZWind_Data:	dc.w $F80, $100, $1410,	$180, $460, $400, $710,	$480, $A20
000043AC 0600 1610 06E0 0C80 0600+  		dc.w $600, $1610, $6E0,	$C80, $600, $13D0, $680
000043BA                            					; XREF: LZWindTunnels
000043BA                            		even
000043BA                            
000043BA                            ; ---------------------------------------------------------------------------
000043BA                            ; Labyrinth Zone water slide subroutine
000043BA                            ; ---------------------------------------------------------------------------
000043BA                            
000043BA                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000043BA                            
000043BA                            
000043BA                            LZWaterSlides:				; XREF: LZWaterEffects
000043BA 43F8 D000                  		lea	($FFFFD000).w,a1
000043BE 0829 0001 0022             		btst	#1,$22(a1)
000043C4 6600                       		bne.s	loc_3F6A
000043C6 3029 000C                  		move.w	$C(a1),d0
000043CA E248                       		lsr.w	#1,d0
000043CC 0240 0380                  		andi.w	#$380,d0
000043D0 1229 0008                  		move.b	8(a1),d1
000043D4 0241 007F                  		andi.w	#$7F,d1
000043D8 D041                       		add.w	d1,d0
000043DA 45F8 A400                  		lea	($FFFFA400).w,a2
000043DE 1032 0000                  		move.b	(a2,d0.w),d0
000043E2 45FA 0000                  		lea	byte_3FCF(pc),a2
000043E6 7206                       		moveq	#6,d1
000043E8                            
000043E8                            loc_3F62:
000043E8 B022                       		cmp.b	-(a2),d0
000043EA 57C9 FFFC                  		dbeq	d1,loc_3F62
000043EE 6700                       		beq.s	LZSlide_Move
000043F0                            
000043F0                            loc_3F6A:
000043F0 4A38 F7CA                  		tst.b	($FFFFF7CA).w
000043F4 6700                       		beq.s	locret_3F7A
000043F6 337C 0005 003E             		move.w	#5,$3E(a1)
000043FC 4238 F7CA                  		clr.b	($FFFFF7CA).w
00004400                            
00004400                            locret_3F7A:
00004400 4E75                       		rts	
00004402                            ; ===========================================================================
00004402                            
00004402                            LZSlide_Move:				; XREF: LZWaterSlides
00004402 0C41 0003                  		cmpi.w	#3,d1
00004406 6400                       		bcc.s	loc_3F84
00004408 4E71                       		nop	
0000440A                            
0000440A                            loc_3F84:
0000440A 08A9 0000 0022             		bclr	#0,$22(a1)
00004410 103B 1000                  		move.b	byte_3FC0(pc,d1.w),d0
00004414 1340 0014                  		move.b	d0,$14(a1)
00004418 6A00                       		bpl.s	loc_3F9A
0000441A 08E9 0000 0022             		bset	#0,$22(a1)
00004420                            
00004420                            loc_3F9A:
00004420 4229 0015                  		clr.b	$15(a1)
00004424 137C 001B 001C             		move.b	#$1B,$1C(a1)	; use Sonic's "sliding" animation
0000442A 11FC 0001 F7CA             		move.b	#1,($FFFFF7CA).w ; lock	controls (except jumping)
00004430 1038 FE0F                  		move.b	($FFFFFE0F).w,d0
00004434 0200 001F                  		andi.b	#$1F,d0
00004438 6600                       		bne.s	locret_3FBE
0000443A 303C 00D0                  		move.w	#$D0,d0
0000443E 4EB9 0000 15C0             		jsr	(PlaySound_Special).l ;	play water sound
00004444                            
00004444                            locret_3FBE:
00004444 4E75                       		rts	
00004446                            ; End of function LZWaterSlides
00004446                            
00004446                            ; ===========================================================================
00004446 0AF5 0AF6 F5F4 0B00 0207+  byte_3FC0:	dc.b $A, $F5, $A, $F6, $F5, $F4, $B, 0,	2, 7, 3, $4C, $4B, 8, 4
00004455 00                         byte_3FCF:	dc.b 0			; XREF: LZWaterSlides
00004456                            		even
00004456                            
00004456                            ; ---------------------------------------------------------------------------
00004456                            ; Subroutine to	move Sonic in demo mode
00004456                            ; ---------------------------------------------------------------------------
00004456                            
00004456                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00004456                            
00004456                            
00004456                            MoveSonicInDemo:			; XREF: Level_MainLoop; et al
00004456 4A78 FFF0                  		tst.w	($FFFFFFF0).w	; is demo mode on?
0000445A 6600                       		bne.s	MoveDemo_On	; if yes, branch
0000445C 4E75                       		rts	
0000445E                            ; ===========================================================================
0000445E                            
0000445E                            ; This is an unused subroutine for recording a demo
0000445E                            
0000445E                            MoveDemo_Record:
0000445E 43F9 0008 0000             		lea	($80000).l,a1
00004464 3038 F790                  		move.w	($FFFFF790).w,d0
00004468 D2C0                       		adda.w	d0,a1
0000446A 1038 F604                  		move.b	($FFFFF604).w,d0
0000446E B011                       		cmp.b	(a1),d0
00004470 6600                       		bne.s	loc_3FFA
00004472 5229 0001                  		addq.b	#1,1(a1)
00004476 0C29 00FF 0001             		cmpi.b	#$FF,1(a1)
0000447C 6700                       		beq.s	loc_3FFA
0000447E 4E75                       		rts	
00004480                            ; ===========================================================================
00004480                            
00004480                            loc_3FFA:				; XREF: MoveDemo_Record
00004480 1340 0002                  		move.b	d0,2(a1)
00004484 137C 0000 0003             		move.b	#0,3(a1)
0000448A 5478 F790                  		addq.w	#2,($FFFFF790).w
0000448E 0278 03FF F790             		andi.w	#$3FF,($FFFFF790).w
00004494 4E75                       		rts	
00004496                            ; ===========================================================================
00004496                            
00004496                            MoveDemo_On:				; XREF: MoveSonicInDemo
00004496 4A38 F604                  		tst.b	($FFFFF604).w
0000449A 6A00                       		bpl.s	loc_4022
0000449C 4A78 FFF0                  		tst.w	($FFFFFFF0).w
000044A0 6B00                       		bmi.s	loc_4022
000044A2 11FC 0004 F600             		move.b	#4,($FFFFF600).w
000044A8                            
000044A8                            loc_4022:
000044A8 43F9 0000 0000             		lea	(Demo_Index).l,a1
000044AE 7000                       		moveq	#0,d0
000044B0 1038 FE10                  		move.b	($FFFFFE10).w,d0
000044B4 0C38 0010 F600             		cmpi.b	#$10,($FFFFF600).w
000044BA 6600                       		bne.s	loc_4038
000044BC 7006                       		moveq	#6,d0
000044BE                            
000044BE                            loc_4038:
000044BE E548                       		lsl.w	#2,d0
000044C0 2271 0000                  		movea.l	(a1,d0.w),a1
000044C4 4A78 FFF0                  		tst.w	($FFFFFFF0).w
000044C8 6A00                       		bpl.s	loc_4056
000044CA 43F9 0000 0000             		lea	(Demo_EndIndex).l,a1
000044D0 3038 FFF4                  		move.w	($FFFFFFF4).w,d0
000044D4 5340                       		subq.w	#1,d0
000044D6 E548                       		lsl.w	#2,d0
000044D8 2271 0000                  		movea.l	(a1,d0.w),a1
000044DC                            
000044DC                            loc_4056:
000044DC 3038 F790                  		move.w	($FFFFF790).w,d0
000044E0 D2C0                       		adda.w	d0,a1
000044E2 1011                       		move.b	(a1),d0
000044E4 41F8 F604                  		lea	($FFFFF604).w,a0
000044E8 1200                       		move.b	d0,d1
000044EA 1410                       		move.b	(a0),d2
000044EC B500                       		eor.b	d2,d0
000044EE 10C1                       		move.b	d1,(a0)+
000044F0 C001                       		and.b	d1,d0
000044F2 10C0                       		move.b	d0,(a0)+
000044F4 5338 F792                  		subq.b	#1,($FFFFF792).w
000044F8 6400                       		bcc.s	locret_407E
000044FA 11E9 0003 F792             		move.b	3(a1),($FFFFF792).w
00004500 5478 F790                  		addq.w	#2,($FFFFF790).w
00004504                            
00004504                            locret_407E:
00004504 4E75                       		rts	
00004506                            ; End of function MoveSonicInDemo
00004506                            
00004506                            ; ===========================================================================
00004506                            ; ---------------------------------------------------------------------------
00004506                            ; Demo sequence	pointers
00004506                            ; ---------------------------------------------------------------------------
00004506                            Demo_Index:
00004506                            	include "_inc\Demo pointers for intro.asm"
00004506                            ; ---------------------------------------------------------------------------
00004506                            ; Demo sequence	pointers
00004506                            ; ---------------------------------------------------------------------------
00004506 0000 0000                  	dc.l Demo_GHZ
0000450A 0000 0000                  	dc.l Demo_GHZ
0000450E 0000 0000                  	dc.l Demo_MZ
00004512 0000 0000                  	dc.l Demo_MZ
00004516 0000 0000                  	dc.l Demo_SYZ
0000451A 0000 0000                  	dc.l Demo_SYZ
0000451E 0000 0000                  	dc.l Demo_SS
00004522 0000 0000                  	dc.l Demo_SS
00004522 0000 0000                  	dc.l Demo_SS
00004526                            
00004526                            Demo_EndIndex:
00004526                            	include "_inc\Demo pointers for ending.asm"
00004526                            ; ---------------------------------------------------------------------------
00004526                            ; Demo (ending) sequence pointers
00004526                            ; ---------------------------------------------------------------------------
00004526 0000 0000                  	dc.l Demo_EndGHZ1
0000452A 0000 0000                  	dc.l Demo_EndMZ
0000452E 0000 0000                  	dc.l Demo_EndSYZ
00004532 0000 0000                  	dc.l Demo_EndLZ
00004536 0000 0000                  	dc.l Demo_EndSLZ
0000453A 0000 0000                  	dc.l Demo_EndSBZ1
0000453E 0000 0000                  	dc.l Demo_EndSBZ2
00004542 0000 0000                  	dc.l Demo_EndGHZ2
00004542 0000 0000                  	dc.l Demo_EndGHZ2
00004546                            
00004546 008B 0837 0042 085C 006A+  		dc.b 0,	$8B, 8,	$37, 0,	$42, 8,	$5C, 0,	$6A, 8,	$5F, 0,	$2F, 8,	$2C
00004556 0021 0803 2830 0808 002E+  		dc.b 0,	$21, 8,	3, $28,	$30, 8,	8, 0, $2E, 8, $15, 0, $F, 8, $46
00004566 001A 08FF 08CA 0000 0000+  		dc.b 0,	$1A, 8,	$FF, 8,	$CA, 0,	0, 0, 0, 0, 0, 0, 0, 0,	0
00004576                            		even
00004576                            
00004576                            ; ---------------------------------------------------------------------------
00004576                            ; Collision index loading subroutine
00004576                            ; ---------------------------------------------------------------------------
00004576                            
00004576                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00004576                            
00004576                            
00004576                            ColIndexLoad:				; XREF: Level
00004576 7000                       		moveq	#0,d0
00004578 1038 FE10                  		move.b	($FFFFFE10).w,d0
0000457C E548                       		lsl.w	#2,d0
0000457E 21FB 0000 F796             		move.l	ColPointers(pc,d0.w),($FFFFF796).w
00004584 4E75                       		rts	
00004586                            ; End of function ColIndexLoad
00004586                            
00004586                            ; ===========================================================================
00004586                            ; ---------------------------------------------------------------------------
00004586                            ; Collision index pointers
00004586                            ; ---------------------------------------------------------------------------
00004586                            ColPointers:
00004586                            	include "_inc\Collision index pointers.asm"
00004586                            ; ---------------------------------------------------------------------------
00004586                            ; Collision index pointers
00004586                            ; ---------------------------------------------------------------------------
00004586 0000 0000                  	dc.l Col_GHZ
0000458A 0000 0000                  	dc.l Col_LZ
0000458E 0000 0000                  	dc.l Col_MZ
00004592 0000 0000                  	dc.l Col_SLZ
00004596 0000 0000                  	dc.l Col_SYZ
0000459A 0000 0000                  	dc.l Col_SBZ
0000459A 0000 0000                  	dc.l Col_SBZ
0000459E                            
0000459E                            ; ---------------------------------------------------------------------------
0000459E                            ; Oscillating number subroutine
0000459E                            ; ---------------------------------------------------------------------------
0000459E                            
0000459E                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000459E                            
0000459E                            
0000459E                            OscillateNumInit:			; XREF: Level
0000459E 43F8 FE5E                  		lea	($FFFFFE5E).w,a1
000045A2 45F9 0000 0000             		lea	(Osc_Data).l,a2
000045A8 7220                       		moveq	#$20,d1
000045AA                            
000045AA                            Osc_Loop:
000045AA 32DA                       		move.w	(a2)+,(a1)+
000045AC 51C9 FFFC                  		dbf	d1,Osc_Loop
000045B0 4E75                       		rts	
000045B2                            ; End of function OscillateNumInit
000045B2                            
000045B2                            ; ===========================================================================
000045B2 007C 0080                  Osc_Data:	dc.w $7C, $80		; baseline values
000045B6 0000 0080                  		dc.w 0,	$80
000045BA 0000 0080                  		dc.w 0,	$80
000045BE 0000 0080                  		dc.w 0,	$80
000045C2 0000 0080                  		dc.w 0,	$80
000045C6 0000 0080                  		dc.w 0,	$80
000045CA 0000 0080                  		dc.w 0,	$80
000045CE 0000 0080                  		dc.w 0,	$80
000045D2 0000 0080                  		dc.w 0,	$80
000045D6 0000 50F0                  		dc.w 0,	$50F0
000045DA 011E 2080                  		dc.w $11E, $2080
000045DE 00B4 3080                  		dc.w $B4, $3080
000045E2 010E 5080                  		dc.w $10E, $5080
000045E6 01C2 7080                  		dc.w $1C2, $7080
000045EA 0276 0080                  		dc.w $276, $80
000045EE 0000 0080                  		dc.w 0,	$80
000045F2 0000                       		dc.w 0
000045F4                            		even
000045F4                            
000045F4                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000045F4                            
000045F4                            
000045F4                            OscillateNumDo:				; XREF: Level
000045F4 0C38 0006 D024             		cmpi.b	#6,($FFFFD024).w
000045FA 6400                       		bcc.s	locret_41C4
000045FC 43F8 FE5E                  		lea	($FFFFFE5E).w,a1
00004600 45F9 0000 0000             		lea	(Osc_Data2).l,a2
00004606 3619                       		move.w	(a1)+,d3
00004608 720F                       		moveq	#$F,d1
0000460A                            
0000460A                            loc_4184:
0000460A 341A                       		move.w	(a2)+,d2
0000460C 381A                       		move.w	(a2)+,d4
0000460E 0303                       		btst	d1,d3
00004610 6600                       		bne.s	loc_41A4
00004612 3029 0002                  		move.w	2(a1),d0
00004616 D042                       		add.w	d2,d0
00004618 3340 0002                  		move.w	d0,2(a1)
0000461C D151                       		add.w	d0,0(a1)
0000461E B811                       		cmp.b	0(a1),d4
00004620 6200                       		bhi.s	loc_41BA
00004622 03C3                       		bset	d1,d3
00004624 6000                       		bra.s	loc_41BA
00004626                            ; ===========================================================================
00004626                            
00004626                            loc_41A4:				; XREF: OscillateNumDo
00004626 3029 0002                  		move.w	2(a1),d0
0000462A 9042                       		sub.w	d2,d0
0000462C 3340 0002                  		move.w	d0,2(a1)
00004630 D151                       		add.w	d0,0(a1)
00004632 B811                       		cmp.b	0(a1),d4
00004634 6300                       		bls.s	loc_41BA
00004636 0383                       		bclr	d1,d3
00004638                            
00004638                            loc_41BA:
00004638 5849                       		addq.w	#4,a1
0000463A 51C9 FFCE                  		dbf	d1,loc_4184
0000463E 31C3 FE5E                  		move.w	d3,($FFFFFE5E).w
00004642                            
00004642                            locret_41C4:
00004642 4E75                       		rts	
00004644                            ; End of function OscillateNumDo
00004644                            
00004644                            ; ===========================================================================
00004644 0002 0010                  Osc_Data2:	dc.w 2,	$10		; XREF: OscillateNumDo
00004648 0002 0018                  		dc.w 2,	$18
0000464C 0002 0020                  		dc.w 2,	$20
00004650 0002 0030                  		dc.w 2,	$30
00004654 0004 0020                  		dc.w 4,	$20
00004658 0008 0008                  		dc.w 8,	8
0000465C 0008 0040                  		dc.w 8,	$40
00004660 0004 0040                  		dc.w 4,	$40
00004664 0002 0050                  		dc.w 2,	$50
00004668 0002 0050                  		dc.w 2,	$50
0000466C 0002 0020                  		dc.w 2,	$20
00004670 0003 0030                  		dc.w 3,	$30
00004674 0005 0050                  		dc.w 5,	$50
00004678 0007 0070                  		dc.w 7,	$70
0000467C 0002 0010                  		dc.w 2,	$10
00004680 0002 0010                  		dc.w 2,	$10
00004684                            		even
00004684                            
00004684                            ; ---------------------------------------------------------------------------
00004684                            ; Subroutine to	change object animation	variables (rings, giant	rings)
00004684                            ; ---------------------------------------------------------------------------
00004684                            
00004684                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00004684                            
00004684                            
00004684                            ChangeRingFrame:			; XREF: Level
00004684 5338 FEC0                  		subq.b	#1,($FFFFFEC0).w
00004688 6A00                       		bpl.s	loc_421C
0000468A 11FC 000B FEC0             		move.b	#$B,($FFFFFEC0).w
00004690 5338 FEC1                  		subq.b	#1,($FFFFFEC1).w
00004694 0238 0007 FEC1             		andi.b	#7,($FFFFFEC1).w
0000469A                            
0000469A                            loc_421C:
0000469A 5338 FEC2                  		subq.b	#1,($FFFFFEC2).w
0000469E 6A00                       		bpl.s	loc_4232
000046A0 11FC 0007 FEC2             		move.b	#7,($FFFFFEC2).w
000046A6 5238 FEC3                  		addq.b	#1,($FFFFFEC3).w
000046AA 0238 0003 FEC3             		andi.b	#3,($FFFFFEC3).w
000046B0                            
000046B0                            loc_4232:
000046B0 5338 FEC4                  		subq.b	#1,($FFFFFEC4).w
000046B4 6A00                       		bpl.s	loc_4250
000046B6 11FC 0007 FEC4             		move.b	#7,($FFFFFEC4).w
000046BC 5238 FEC5                  		addq.b	#1,($FFFFFEC5).w
000046C0 0C38 0006 FEC5             		cmpi.b	#6,($FFFFFEC5).w
000046C6 6500                       		bcs.s	loc_4250
000046C8 11FC 0000 FEC5             		move.b	#0,($FFFFFEC5).w
000046CE                            
000046CE                            loc_4250:
000046CE 4A38 FEC6                  		tst.b	($FFFFFEC6).w
000046D2 6700                       		beq.s	locret_4272
000046D4 7000                       		moveq	#0,d0
000046D6 1038 FEC6                  		move.b	($FFFFFEC6).w,d0
000046DA D078 FEC8                  		add.w	($FFFFFEC8).w,d0
000046DE 31C0 FEC8                  		move.w	d0,($FFFFFEC8).w
000046E2 EF58                       		rol.w	#7,d0
000046E4 0240 0003                  		andi.w	#3,d0
000046E8 11C0 FEC7                  		move.b	d0,($FFFFFEC7).w
000046EC 5338 FEC6                  		subq.b	#1,($FFFFFEC6).w
000046F0                            
000046F0                            locret_4272:
000046F0 4E75                       		rts	
000046F2                            ; End of function ChangeRingFrame
000046F2                            
000046F2                            ; ---------------------------------------------------------------------------
000046F2                            ; End-of-act signpost pattern loading subroutine
000046F2                            ; ---------------------------------------------------------------------------
000046F2                            
000046F2                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000046F2                            
000046F2                            
000046F2                            SignpostArtLoad:			; XREF: Level
000046F2 4A78 FE08                  		tst.w	($FFFFFE08).w	; is debug mode	being used?
000046F6 6600 0000                  		bne.w	Signpost_Exit	; if yes, branch
000046FA 0C38 0002 FE11             		cmpi.b	#2,($FFFFFE11).w ; is act number 02 (act 3)?
00004700 6700                       		beq.s	Signpost_Exit	; if yes, branch
00004702 3038 F700                  		move.w	($FFFFF700).w,d0
00004706 3238 F72A                  		move.w	($FFFFF72A).w,d1
0000470A 0441 0100                  		subi.w	#$100,d1
0000470E B041                       		cmp.w	d1,d0		; has Sonic reached the	edge of	the level?
00004710 6D00                       		blt.s	Signpost_Exit	; if not, branch
00004712 4A38 FE1E                  		tst.b	($FFFFFE1E).w
00004716 6700                       		beq.s	Signpost_Exit
00004718 B278 F728                  		cmp.w	($FFFFF728).w,d1
0000471C 6700                       		beq.s	Signpost_Exit
0000471E 31C1 F728                  		move.w	d1,($FFFFF728).w ; move	left boundary to current screen	position
00004722 7012                       		moveq	#$12,d0
00004724 6000 D0B0                  		bra.w	LoadPLC2	; load signpost	patterns
00004728                            ; ===========================================================================
00004728                            
00004728                            Signpost_Exit:
00004728 4E75                       		rts	
0000472A                            ; End of function SignpostArtLoad
0000472A                            
0000472A                            ; ===========================================================================
0000472A                            Demo_GHZ:	incbin	demodata\i_ghz.bin
000047AA                            Demo_MZ:	incbin	demodata\i_mz.bin
000048DA                            Demo_SYZ:	incbin	demodata\i_syz.bin
0000495A                            Demo_SS:	incbin	demodata\i_ss.bin
00004A5A                            ; ===========================================================================
00004A5A                            
00004A5A                            ; ---------------------------------------------------------------------------
00004A5A                            ; Special Stage
00004A5A                            ; ---------------------------------------------------------------------------
00004A5A                            
00004A5A                            SpecialStage:				; XREF: GameModeArray
00004A5A 303C 00CA                  		move.w	#$CA,d0
00004A5E 6100 CB60                  		bsr.w	PlaySound_Special ; play special stage entry sound
00004A62 6100 D702                  		bsr.w	Pal_MakeFlash
00004A66 46FC 2700                  		move	#$2700,sr
00004A6A 4DF9 00C0 0004             		lea	($C00004).l,a6
00004A70 3CBC 8B03                  		move.w	#$8B03,(a6)
00004A74 3CBC 8004                  		move.w	#$8004,(a6)
00004A78 31FC 8AAF F624             		move.w	#$8AAF,($FFFFF624).w
00004A7E 3CBC 9011                  		move.w	#$9011,(a6)
00004A82 3038 F60C                  		move.w	($FFFFF60C).w,d0
00004A86 0200 00BF                  		andi.b	#$BF,d0
00004A8A 33C0 00C0 0004             		move.w	d0,($C00004).l
00004A90 6100 CA56                  		bsr.w	ClearScreen
00004A94 46FC 2300                  		move	#$2300,sr
00004A98 4BF9 00C0 0004             		lea	($C00004).l,a5
00004A9E 3ABC 8F01                  		move.w	#$8F01,(a5)
00004AA2 2ABC 946F 93FF             		move.l	#$946F93FF,(a5)
00004AA8 3ABC 9780                  		move.w	#$9780,(a5)
00004AAC 2ABC 5000 0081             		move.l	#$50000081,(a5)
00004AB2 33FC 0000 00C0 0000        		move.w	#0,($C00000).l
00004ABA                            
00004ABA                            loc_463C:
00004ABA 3215                       		move.w	(a5),d1
00004ABC 0801 0001                  		btst	#1,d1
00004AC0 66F8                       		bne.s	loc_463C
00004AC2 3ABC 8F02                  		move.w	#$8F02,(a5)
00004AC6 6100 0000                  		bsr.w	SS_BGLoad
00004ACA 7014                       		moveq	#$14,d0
00004ACC 6100 CE42                  		bsr.w	RunPLC_ROM	; load special stage patterns
00004AD0 43F8 D000                  		lea	($FFFFD000).w,a1
00004AD4 7000                       		moveq	#0,d0
00004AD6 323C 07FF                  		move.w	#$7FF,d1
00004ADA                            
00004ADA                            SS_ClrObjRam:
00004ADA 22C0                       		move.l	d0,(a1)+
00004ADC 51C9 FFFC                  		dbf	d1,SS_ClrObjRam	; clear	the object RAM
00004AE0                            
00004AE0 43F8 F700                  		lea	($FFFFF700).w,a1
00004AE4 7000                       		moveq	#0,d0
00004AE6 323C 003F                  		move.w	#$3F,d1
00004AEA                            
00004AEA                            SS_ClrRam:
00004AEA 22C0                       		move.l	d0,(a1)+
00004AEC 51C9 FFFC                  		dbf	d1,SS_ClrRam	; clear	variables
00004AF0                            
00004AF0 43F8 FE60                  		lea	($FFFFFE60).w,a1
00004AF4 7000                       		moveq	#0,d0
00004AF6 323C 0027                  		move.w	#$27,d1
00004AFA                            
00004AFA                            SS_ClrRam2:
00004AFA 22C0                       		move.l	d0,(a1)+
00004AFC 51C9 FFFC                  		dbf	d1,SS_ClrRam2	; clear	variables
00004B00                            
00004B00 43F8 AA00                  		lea	($FFFFAA00).w,a1
00004B04 7000                       		moveq	#0,d0
00004B06 323C 007F                  		move.w	#$7F,d1
00004B0A                            
00004B0A                            SS_ClrNemRam:
00004B0A 22C0                       		move.l	d0,(a1)+
00004B0C 51C9 FFFC                  		dbf	d1,SS_ClrNemRam	; clear	Nemesis	buffer
00004B10                            
00004B10 4238 F64E                  		clr.b	($FFFFF64E).w
00004B14 4278 FE02                  		clr.w	($FFFFFE02).w
00004B18 700A                       		moveq	#$A,d0
00004B1A 6100 D7CA                  		bsr.w	PalLoad1	; load special stage pallet
00004B1E 4EB9 0000 0000             		jsr	SS_Load
00004B24 21FC 0000 0000 F700        		move.l	#0,($FFFFF700).w
00004B2C 21FC 0000 0000 F704        		move.l	#0,($FFFFF704).w
00004B34 11FC 0009 D000             		move.b	#9,($FFFFD000).w ; load	special	stage Sonic object
00004B3A 6100 0000                  		bsr.w	PalCycle_SS
00004B3E 4278 F780                  		clr.w	($FFFFF780).w	; set stage angle to "upright"
00004B42 31FC 0040 F782             		move.w	#$40,($FFFFF782).w ; set stage rotation	speed
00004B48 303C 0089                  		move.w	#$89,d0
00004B4C 6100 CA6C                  		bsr.w	PlaySound	; play special stage BG	music
00004B50 31FC 0000 F790             		move.w	#0,($FFFFF790).w
00004B56 43F9 0000 4506             		lea	(Demo_Index).l,a1
00004B5C 7006                       		moveq	#6,d0
00004B5E E548                       		lsl.w	#2,d0
00004B60 2271 0000                  		movea.l	(a1,d0.w),a1
00004B64 11E9 0001 F792             		move.b	1(a1),($FFFFF792).w
00004B6A 5338 F792                  		subq.b	#1,($FFFFF792).w
00004B6E 4278 FE20                  		clr.w	($FFFFFE20).w
00004B72 4238 FE1B                  		clr.b	($FFFFFE1B).w
00004B76 31FC 0000 FE08             		move.w	#0,($FFFFFE08).w
00004B7C 31FC 0708 F614             		move.w	#1800,($FFFFF614).w
00004B82 4A38 FFE2                  		tst.b	($FFFFFFE2).w	; has debug cheat been entered?
00004B86 6700                       		beq.s	SS_NoDebug	; if not, branch
00004B88 0838 0006 F604             		btst	#6,($FFFFF604).w ; is A	button pressed?
00004B8E 6700                       		beq.s	SS_NoDebug	; if not, branch
00004B90 11FC 0001 FFFA             		move.b	#1,($FFFFFFFA).w ; enable debug	mode
00004B96                            
00004B96                            SS_NoDebug:
00004B96 3038 F60C                  		move.w	($FFFFF60C).w,d0
00004B9A 0000 0040                  		ori.b	#$40,d0
00004B9E 33C0 00C0 0004             		move.w	d0,($C00004).l
00004BA4 6100 D514                  		bsr.w	Pal_MakeWhite
00004BA8                            
00004BA8                            ; ---------------------------------------------------------------------------
00004BA8                            ; Main Special Stage loop
00004BA8                            ; ---------------------------------------------------------------------------
00004BA8                            
00004BA8                            SS_MainLoop:
00004BA8 6100 CA22                  		bsr.w	PauseGame
00004BAC 11FC 000A F62A             		move.b	#$A,($FFFFF62A).w
00004BB2 6100 E07E                  		bsr.w	DelayProgram
00004BB6 6100 F89E                  		bsr.w	MoveSonicInDemo
00004BBA 31F8 F604 F602             		move.w	($FFFFF604).w,($FFFFF602).w
00004BC0 4EB9 0000 0000             		jsr	ObjectsLoad
00004BC6 4EB9 0000 0000             		jsr	BuildSprites
00004BCC 4EB9 0000 0000             		jsr	SS_ShowLayout
00004BD2 6100 0000                  		bsr.w	SS_BGAnimate
00004BD6 4A78 FFF0                  		tst.w	($FFFFFFF0).w	; is demo mode on?
00004BDA 6700                       		beq.s	SS_ChkEnd	; if not, branch
00004BDC 4A78 F614                  		tst.w	($FFFFF614).w	; is there time	left on	the demo?
00004BE0 6700 0000                  		beq.w	SS_ToSegaScreen	; if not, branch
00004BE4                            
00004BE4                            SS_ChkEnd:
00004BE4 0C38 0010 F600             		cmpi.b	#$10,($FFFFF600).w ; is	game mode $10 (special stage)?
00004BEA 6700 FFBC                  		beq.w	SS_MainLoop	; if yes, branch
00004BEE                            
00004BEE 4A78 FFF0                  		tst.w	($FFFFFFF0).w	; is demo mode on?
00004BF2 6600 0000                  		bne.w	SS_ToSegaScreen	; if yes, branch
00004BF6 11FC 000C F600             		move.b	#$C,($FFFFF600).w ; set	screen mode to $0C (level)
00004BFC 0C78 0503 FE10             		cmpi.w	#$503,($FFFFFE10).w ; is level number higher than FZ?
00004C02 6500                       		bcs.s	SS_End		; if not, branch
00004C04 4278 FE10                  		clr.w	($FFFFFE10).w	; set to GHZ1
00004C08                            
00004C08                            SS_End:
00004C08 31FC 003C F614             		move.w	#60,($FFFFF614).w ; set	delay time to 1	second
00004C0E 31FC 003F F626             		move.w	#$3F,($FFFFF626).w
00004C14 4278 F794                  		clr.w	($FFFFF794).w
00004C18                            
00004C18                            SS_EndLoop:
00004C18 11FC 0016 F62A             		move.b	#$16,($FFFFF62A).w
00004C1E 6100 E012                  		bsr.w	DelayProgram
00004C22 6100 F832                  		bsr.w	MoveSonicInDemo
00004C26 31F8 F604 F602             		move.w	($FFFFF604).w,($FFFFF602).w
00004C2C 4EB9 0000 0000             		jsr	ObjectsLoad
00004C32 4EB9 0000 0000             		jsr	BuildSprites
00004C38 4EB9 0000 0000             		jsr	SS_ShowLayout
00004C3E 6100 0000                  		bsr.w	SS_BGAnimate
00004C42 5378 F794                  		subq.w	#1,($FFFFF794).w
00004C46 6A00                       		bpl.s	loc_47D4
00004C48 31FC 0002 F794             		move.w	#2,($FFFFF794).w
00004C4E 6100 D536                  		bsr.w	Pal_ToWhite
00004C52                            
00004C52                            loc_47D4:
00004C52 4A78 F614                  		tst.w	($FFFFF614).w
00004C56 66C0                       		bne.s	SS_EndLoop
00004C58                            
00004C58 46FC 2700                  		move	#$2700,sr
00004C5C 4DF9 00C0 0004             		lea	($C00004).l,a6
00004C62 3CBC 8230                  		move.w	#$8230,(a6)
00004C66 3CBC 8407                  		move.w	#$8407,(a6)
00004C6A 3CBC 9001                  		move.w	#$9001,(a6)
00004C6E 6100 C878                  		bsr.w	ClearScreen
00004C72 23FC 7000 0002 00C0 0004   		move.l	#$70000002,($C00004).l
00004C7C 41F9 0000 0000             		lea	(Nem_TitleCard).l,a0 ; load title card patterns
00004C82 6100 C9E0                  		bsr.w	NemDec
00004C86 4EB9 0000 0000             		jsr	Hud_Base
00004C8C 46FC 2300                  		move	#$2300,sr
00004C90 7011                       		moveq	#$11,d0
00004C92 6100 D66E                  		bsr.w	PalLoad2	; load results screen pallet
00004C96 7000                       		moveq	#0,d0
00004C98 6100 CB3C                  		bsr.w	LoadPLC2
00004C9C 701B                       		moveq	#$1B,d0
00004C9E 6100 CB04                  		bsr.w	LoadPLC		; load results screen patterns
00004CA2 11FC 0001 FE1F             		move.b	#1,($FFFFFE1F).w ; update score	counter
00004CA8 11FC 0001 F7D6             		move.b	#1,($FFFFF7D6).w ; update ring bonus counter
00004CAE 3038 FE20                  		move.w	($FFFFFE20).w,d0
00004CB2 C0FC 000A                  		mulu.w	#10,d0		; multiply rings by 10
00004CB6 31C0 F7D4                  		move.w	d0,($FFFFF7D4).w ; set rings bonus
00004CBA 303C 008E                  		move.w	#$8E,d0
00004CBE 4EB9 0000 15C0             		jsr	(PlaySound_Special).l ;	play end-of-level music
00004CC4 43F8 D000                  		lea	($FFFFD000).w,a1
00004CC8 7000                       		moveq	#0,d0
00004CCA 323C 07FF                  		move.w	#$7FF,d1
00004CCE                            
00004CCE                            SS_EndClrObjRam:
00004CCE 22C0                       		move.l	d0,(a1)+
00004CD0 51C9 FFFC                  		dbf	d1,SS_EndClrObjRam ; clear object RAM
00004CD4                            
00004CD4 11FC 007E D5C0             		move.b	#$7E,($FFFFD5C0).w ; load results screen object
00004CDA                            
00004CDA                            SS_NormalExit:
00004CDA 6100 C8F0                  		bsr.w	PauseGame
00004CDE 11FC 000C F62A             		move.b	#$C,($FFFFF62A).w
00004CE4 6100 DF4C                  		bsr.w	DelayProgram
00004CE8 4EB9 0000 0000             		jsr	ObjectsLoad
00004CEE 4EB9 0000 0000             		jsr	BuildSprites
00004CF4 6100 CB1A                  		bsr.w	RunPLC_RAM
00004CF8 4A78 FE02                  		tst.w	($FFFFFE02).w
00004CFC 67DC                       		beq.s	SS_NormalExit
00004CFE 4AB8 F680                  		tst.l	($FFFFF680).w
00004D02 66D6                       		bne.s	SS_NormalExit
00004D04 303C 00CA                  		move.w	#$CA,d0
00004D08 6100 C8B6                  		bsr.w	PlaySound_Special ; play special stage exit sound
00004D0C 6100 D458                  		bsr.w	Pal_MakeFlash
00004D10 4E75                       		rts	
00004D12                            ; ===========================================================================
00004D12                            
00004D12                            SS_ToSegaScreen:
00004D12 11FC 0000 F600             		move.b	#0,($FFFFF600).w ; set screen mode to 00 (Sega screen)
00004D18 4E75                       		rts
00004D1A                            
00004D1A                            ; ---------------------------------------------------------------------------
00004D1A                            ; Special stage	background loading subroutine
00004D1A                            ; ---------------------------------------------------------------------------
00004D1A                            
00004D1A                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00004D1A                            
00004D1A                            
00004D1A                            SS_BGLoad:				; XREF: SpecialStage
00004D1A 43F9 00FF 0000             		lea	($FF0000).l,a1
00004D20 41F9 0000 0000             		lea	(Eni_SSBg1).l,a0 ; load	mappings for the birds and fish
00004D26 303C 4051                  		move.w	#$4051,d0
00004D2A 6100 CC16                  		bsr.w	EniDec
00004D2E 263C 5000 0001             		move.l	#$50000001,d3
00004D34 45F9 00FF 0080             		lea	($FF0080).l,a2
00004D3A 7E06                       		moveq	#6,d7
00004D3C                            
00004D3C                            loc_48BE:
00004D3C 2003                       		move.l	d3,d0
00004D3E 7C03                       		moveq	#3,d6
00004D40 7800                       		moveq	#0,d4
00004D42 0C47 0003                  		cmpi.w	#3,d7
00004D46 6400                       		bcc.s	loc_48CC
00004D48 7801                       		moveq	#1,d4
00004D4A                            
00004D4A                            loc_48CC:
00004D4A 7A07                       		moveq	#7,d5
00004D4C                            
00004D4C                            loc_48CE:
00004D4C 224A                       		movea.l	a2,a1
00004D4E 0A04 0001                  		eori.b	#1,d4
00004D52 6600                       		bne.s	loc_48E2
00004D54 0C47 0006                  		cmpi.w	#6,d7
00004D58 6600                       		bne.s	loc_48F2
00004D5A 43F9 00FF 0000             		lea	($FF0000).l,a1
00004D60                            
00004D60                            loc_48E2:
00004D60 48E7 F800                  		movem.l	d0-d4,-(sp)
00004D64 7207                       		moveq	#7,d1
00004D66 7407                       		moveq	#7,d2
00004D68 6100 C8DA                  		bsr.w	ShowVDPGraphics
00004D6C 4CDF 001F                  		movem.l	(sp)+,d0-d4
00004D70                            
00004D70                            loc_48F2:
00004D70 0680 0010 0000             		addi.l	#$100000,d0
00004D76 51CD FFD4                  		dbf	d5,loc_48CE
00004D7A 0680 0380 0000             		addi.l	#$3800000,d0
00004D80 0A04 0001                  		eori.b	#1,d4
00004D84 51CE FFC4                  		dbf	d6,loc_48CC
00004D88 0683 1000 0000             		addi.l	#$10000000,d3
00004D8E 6A00                       		bpl.s	loc_491C
00004D90 4843                       		swap	d3
00004D92 0683 0000 C000             		addi.l	#$C000,d3
00004D98 4843                       		swap	d3
00004D9A                            
00004D9A                            loc_491C:
00004D9A D4FC 0080                  		adda.w	#$80,a2
00004D9E 51CF FF9C                  		dbf	d7,loc_48BE
00004DA2 43F9 00FF 0000             		lea	($FF0000).l,a1
00004DA8 41F9 0000 0000             		lea	(Eni_SSBg2).l,a0 ; load	mappings for the clouds
00004DAE 303C 4000                  		move.w	#$4000,d0
00004DB2 6100 CB8E                  		bsr.w	EniDec
00004DB6 43F9 00FF 0000             		lea	($FF0000).l,a1
00004DBC 203C 4000 0003             		move.l	#$40000003,d0
00004DC2 723F                       		moveq	#$3F,d1
00004DC4 741F                       		moveq	#$1F,d2
00004DC6 6100 C87C                  		bsr.w	ShowVDPGraphics
00004DCA 43F9 00FF 0000             		lea	($FF0000).l,a1
00004DD0 203C 5000 0003             		move.l	#$50000003,d0
00004DD6 723F                       		moveq	#$3F,d1
00004DD8 743F                       		moveq	#$3F,d2
00004DDA 6100 C868                  		bsr.w	ShowVDPGraphics
00004DDE 4E75                       		rts	
00004DE0                            ; End of function SS_BGLoad
00004DE0                            
00004DE0                            ; ---------------------------------------------------------------------------
00004DE0                            ; Pallet cycling routine - special stage
00004DE0                            ; ---------------------------------------------------------------------------
00004DE0                            
00004DE0                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00004DE0                            
00004DE0                            
00004DE0                            PalCycle_SS:				; XREF: loc_DA6; SpecialStage
00004DE0 4A78 F63A                  		tst.w	($FFFFF63A).w
00004DE4 6600                       		bne.s	locret_49E6
00004DE6 5378 F79C                  		subq.w	#1,($FFFFF79C).w
00004DEA 6A00                       		bpl.s	locret_49E6
00004DEC 4DF9 00C0 0004             		lea	($C00004).l,a6
00004DF2 3038 F79A                  		move.w	($FFFFF79A).w,d0
00004DF6 5278 F79A                  		addq.w	#1,($FFFFF79A).w
00004DFA 0240 001F                  		andi.w	#$1F,d0
00004DFE E548                       		lsl.w	#2,d0
00004E00 41F9 0000 0000             		lea	(byte_4A3C).l,a0
00004E06 D0C0                       		adda.w	d0,a0
00004E08 1018                       		move.b	(a0)+,d0
00004E0A 6A00                       		bpl.s	loc_4992
00004E0C 303C 01FF                  		move.w	#$1FF,d0
00004E10                            
00004E10                            loc_4992:
00004E10 31C0 F79C                  		move.w	d0,($FFFFF79C).w
00004E14 7000                       		moveq	#0,d0
00004E16 1018                       		move.b	(a0)+,d0
00004E18 31C0 F7A0                  		move.w	d0,($FFFFF7A0).w
00004E1C 43F9 0000 0000             		lea	(byte_4ABC).l,a1
00004E22 43F1 0000                  		lea	(a1,d0.w),a1
00004E26 303C 8200                  		move.w	#-$7E00,d0
00004E2A 1019                       		move.b	(a1)+,d0
00004E2C 3C80                       		move.w	d0,(a6)
00004E2E 11D1 F616                  		move.b	(a1),($FFFFF616).w
00004E32 303C 8400                  		move.w	#-$7C00,d0
00004E36 1018                       		move.b	(a0)+,d0
00004E38 3C80                       		move.w	d0,(a6)
00004E3A 23FC 4000 0010 00C0 0004   		move.l	#$40000010,($C00004).l
00004E44 23F8 F616 00C0 0000        		move.l	($FFFFF616).w,($C00000).l
00004E4C 7000                       		moveq	#0,d0
00004E4E 1018                       		move.b	(a0)+,d0
00004E50 6B00                       		bmi.s	loc_49E8
00004E52 43F9 0000 0000             		lea	(Pal_SSCyc1).l,a1
00004E58 D2C0                       		adda.w	d0,a1
00004E5A 45F8 FB4E                  		lea	($FFFFFB4E).w,a2
00004E5E 24D9                       		move.l	(a1)+,(a2)+
00004E60 24D9                       		move.l	(a1)+,(a2)+
00004E62 24D9                       		move.l	(a1)+,(a2)+
00004E64                            
00004E64                            locret_49E6:
00004E64 4E75                       		rts	
00004E66                            ; ===========================================================================
00004E66                            
00004E66                            loc_49E8:				; XREF: PalCycle_SS
00004E66 3238 F79E                  		move.w	($FFFFF79E).w,d1
00004E6A 0C40 008A                  		cmpi.w	#$8A,d0
00004E6E 6500                       		bcs.s	loc_49F4
00004E70 5241                       		addq.w	#1,d1
00004E72                            
00004E72                            loc_49F4:
00004E72 C2FC 002A                  		mulu.w	#$2A,d1
00004E76 43F9 0000 0000             		lea	(Pal_SSCyc2).l,a1
00004E7C D2C1                       		adda.w	d1,a1
00004E7E 0240 007F                  		andi.w	#$7F,d0
00004E82 0880 0000                  		bclr	#0,d0
00004E86 6700                       		beq.s	loc_4A18
00004E88 45F8 FB6E                  		lea	($FFFFFB6E).w,a2
00004E8C 24D1                       		move.l	(a1),(a2)+
00004E8E 24E9 0004                  		move.l	4(a1),(a2)+
00004E92 24E9 0008                  		move.l	8(a1),(a2)+
00004E96                            
00004E96                            loc_4A18:
00004E96 D2FC 000C                  		adda.w	#$C,a1
00004E9A 45F8 FB5A                  		lea	($FFFFFB5A).w,a2
00004E9E 0C40 000A                  		cmpi.w	#$A,d0
00004EA2 6500                       		bcs.s	loc_4A2E
00004EA4 0440 000A                  		subi.w	#$A,d0
00004EA8 45F8 FB7A                  		lea	($FFFFFB7A).w,a2
00004EAC                            
00004EAC                            loc_4A2E:
00004EAC 3200                       		move.w	d0,d1
00004EAE D040                       		add.w	d0,d0
00004EB0 D041                       		add.w	d1,d0
00004EB2 D2C0                       		adda.w	d0,a1
00004EB4 24D9                       		move.l	(a1)+,(a2)+
00004EB6 34D9                       		move.w	(a1)+,(a2)+
00004EB8 4E75                       		rts	
00004EBA                            ; End of function PalCycle_SS
00004EBA                            
00004EBA                            ; ===========================================================================
00004EBA 0300 0792 0300 0790 0300+  byte_4A3C:	dc.b 3,	0, 7, $92, 3, 0, 7, $90, 3, 0, 7, $8E, 3, 0, 7,	$8C
00004ECA                            					; XREF: PalCycle_SS
00004ECA 0300 078B 0300 0780 0300+  		dc.b 3,	0, 7, $8B, 3, 0, 7, $80, 3, 0, 7, $82, 3, 0, 7,	$84
00004EDA 0300 0786 0300 0788 0708+  		dc.b 3,	0, 7, $86, 3, 0, 7, $88, 7, 8, 7, 0, 7,	$A, 7, $C
00004EEA FF0C 0718 FF0C 0718 070A+  		dc.b $FF, $C, 7, $18, $FF, $C, 7, $18, 7, $A, 7, $C, 7,	8, 7, 0
00004EFA 0300 0688 0300 0686 0300+  		dc.b 3,	0, 6, $88, 3, 0, 6, $86, 3, 0, 6, $84, 3, 0, 6,	$82
00004F0A 0300 0681 0300 068A 0300+  		dc.b 3,	0, 6, $81, 3, 0, 6, $8A, 3, 0, 6, $8C, 3, 0, 6,	$8E
00004F1A 0300 0690 0300 0692 0702+  		dc.b 3,	0, 6, $90, 3, 0, 6, $92, 7, 2, 6, $24, 7, 4, 6,	$30
00004F2A FF06 063C FF06 063C 0704+  		dc.b $FF, 6, 6,	$3C, $FF, 6, 6,	$3C, 7,	4, 6, $30, 7, 2, 6, $24
00004F3A                            		even
00004F3A 1001 1800 1801 2000 2001+  byte_4ABC:	dc.b $10, 1, $18, 0, $18, 1, $20, 0, $20, 1, $28, 0, $28, 1
00004F48                            					; XREF: PalCycle_SS
00004F48                            		even
00004F48                            
00004F48                            Pal_SSCyc1:	incbin	pallet\c_ss_1.bin
00004F90                            		even
00004F90                            Pal_SSCyc2:	incbin	pallet\c_ss_2.bin
00005062                            		even
00005062                            
00005062                            ; ---------------------------------------------------------------------------
00005062                            ; Subroutine to	make the special stage background animated
00005062                            ; ---------------------------------------------------------------------------
00005062                            
00005062                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00005062                            
00005062                            
00005062                            SS_BGAnimate:				; XREF: SpecialStage
00005062 3038 F7A0                  		move.w	($FFFFF7A0).w,d0
00005066 6600                       		bne.s	loc_4BF6
00005068 31FC 0000 F70C             		move.w	#0,($FFFFF70C).w
0000506E 31F8 F70C F618             		move.w	($FFFFF70C).w,($FFFFF618).w
00005074                            
00005074                            loc_4BF6:
00005074 0C40 0008                  		cmpi.w	#8,d0
00005078 6400                       		bcc.s	loc_4C4E
0000507A 0C40 0006                  		cmpi.w	#6,d0
0000507E 6600                       		bne.s	loc_4C10
00005080 5278 F718                  		addq.w	#1,($FFFFF718).w
00005084 5278 F70C                  		addq.w	#1,($FFFFF70C).w
00005088 31F8 F70C F618             		move.w	($FFFFF70C).w,($FFFFF618).w
0000508E                            
0000508E                            loc_4C10:
0000508E 7000                       		moveq	#0,d0
00005090 3038 F708                  		move.w	($FFFFF708).w,d0
00005094 4440                       		neg.w	d0
00005096 4840                       		swap	d0
00005098 43F9 0000 0000             		lea	(byte_4CCC).l,a1
0000509E 47F8 AA00                  		lea	($FFFFAA00).w,a3
000050A2 7609                       		moveq	#9,d3
000050A4                            
000050A4                            loc_4C26:
000050A4 302B 0002                  		move.w	2(a3),d0
000050A8 6100 DBBA                  		bsr.w	CalcSine
000050AC 7400                       		moveq	#0,d2
000050AE 1419                       		move.b	(a1)+,d2
000050B0 C1C2                       		muls.w	d2,d0
000050B2 E080                       		asr.l	#8,d0
000050B4 36C0                       		move.w	d0,(a3)+
000050B6 1419                       		move.b	(a1)+,d2
000050B8 4882                       		ext.w	d2
000050BA D55B                       		add.w	d2,(a3)+
000050BC 51CB FFE6                  		dbf	d3,loc_4C26
000050C0 47F8 AA00                  		lea	($FFFFAA00).w,a3
000050C4 45F9 0000 0000             		lea	(byte_4CB8).l,a2
000050CA 6000                       		bra.s	loc_4C7E
000050CC                            ; ===========================================================================
000050CC                            
000050CC                            loc_4C4E:				; XREF: SS_BGAnimate
000050CC 0C40 000C                  		cmpi.w	#$C,d0
000050D0 6600                       		bne.s	loc_4C74
000050D2 5378 F718                  		subq.w	#1,($FFFFF718).w
000050D6 47F8 AB00                  		lea	($FFFFAB00).w,a3
000050DA 243C 0001 8000             		move.l	#$18000,d2
000050E0 7206                       		moveq	#6,d1
000050E2                            
000050E2                            loc_4C64:
000050E2 2013                       		move.l	(a3),d0
000050E4 9082                       		sub.l	d2,d0
000050E6 26C0                       		move.l	d0,(a3)+
000050E8 0482 0000 2000             		subi.l	#$2000,d2
000050EE 51C9 FFF2                  		dbf	d1,loc_4C64
000050F2                            
000050F2                            loc_4C74:
000050F2 47F8 AB00                  		lea	($FFFFAB00).w,a3
000050F6 45F9 0000 0000             		lea	(byte_4CC4).l,a2
000050FC                            
000050FC                            loc_4C7E:
000050FC 43F8 CC00                  		lea	($FFFFCC00).w,a1
00005100 3038 F718                  		move.w	($FFFFF718).w,d0
00005104 4440                       		neg.w	d0
00005106 4840                       		swap	d0
00005108 7600                       		moveq	#0,d3
0000510A 161A                       		move.b	(a2)+,d3
0000510C 3438 F70C                  		move.w	($FFFFF70C).w,d2
00005110 4442                       		neg.w	d2
00005112 0242 00FF                  		andi.w	#$FF,d2
00005116 E54A                       		lsl.w	#2,d2
00005118                            
00005118                            loc_4C9A:
00005118 301B                       		move.w	(a3)+,d0
0000511A 544B                       		addq.w	#2,a3
0000511C 7200                       		moveq	#0,d1
0000511E 121A                       		move.b	(a2)+,d1
00005120 5341                       		subq.w	#1,d1
00005122                            
00005122                            loc_4CA4:
00005122 2380 2000                  		move.l	d0,(a1,d2.w)
00005126 5842                       		addq.w	#4,d2
00005128 0242 03FC                  		andi.w	#$3FC,d2
0000512C 51C9 FFF4                  		dbf	d1,loc_4CA4
00005130 51CB FFE6                  		dbf	d3,loc_4C9A
00005134 4E75                       		rts	
00005136                            ; End of function SS_BGAnimate
00005136                            
00005136                            ; ===========================================================================
00005136 0928 1810 2818 1030 1808+  byte_4CB8:	dc.b 9,	$28, $18, $10, $28, $18, $10, $30, $18,	8, $10,	0
00005142                            		even
00005142 0630 3030 2818 1818        byte_4CC4:	dc.b 6,	$30, $30, $30, $28, $18, $18, $18
0000514A                            		even
0000514A 0802 04FF 0203 08FF 0402+  byte_4CCC:	dc.b 8,	2, 4, $FF, 2, 3, 8, $FF, 4, 2, 2, 3, 8,	$FD, 4,	2, 2, 3, 2, $FF
0000515E                            		even
0000515E                            					; XREF: SS_BGAnimate
0000515E                            ; ===========================================================================
0000515E                            
0000515E                            ; ---------------------------------------------------------------------------
0000515E                            ; Continue screen
0000515E                            ; ---------------------------------------------------------------------------
0000515E                            
0000515E                            ContinueScreen:				; XREF: GameModeArray
0000515E 6100 CEDC                  		bsr.w	Pal_FadeFrom
00005162 46FC 2700                  		move	#$2700,sr
00005166 3038 F60C                  		move.w	($FFFFF60C).w,d0
0000516A 0200 00BF                  		andi.b	#$BF,d0
0000516E 33C0 00C0 0004             		move.w	d0,($C00004).l
00005174 4DF9 00C0 0004             		lea	($C00004).l,a6
0000517A 3CBC 8004                  		move.w	#$8004,(a6)
0000517E 3CBC 8700                  		move.w	#$8700,(a6)
00005182 6100 C364                  		bsr.w	ClearScreen
00005186 43F8 D000                  		lea	($FFFFD000).w,a1
0000518A 7000                       		moveq	#0,d0
0000518C 323C 07FF                  		move.w	#$7FF,d1
00005190                            
00005190                            Cont_ClrObjRam:
00005190 22C0                       		move.l	d0,(a1)+
00005192 51C9 FFFC                  		dbf	d1,Cont_ClrObjRam ; clear object RAM
00005196                            
00005196 23FC 7000 0002 00C0 0004   		move.l	#$70000002,($C00004).l
000051A0 41F9 0000 0000             		lea	(Nem_TitleCard).l,a0 ; load title card patterns
000051A6 6100 C4BC                  		bsr.w	NemDec
000051AA 23FC 6000 0002 00C0 0004   		move.l	#$60000002,($C00004).l
000051B4 41F9 0000 0000             		lea	(Nem_ContSonic).l,a0 ; load Sonic patterns
000051BA 6100 C4A8                  		bsr.w	NemDec
000051BE 23FC 6A20 0002 00C0 0004   		move.l	#$6A200002,($C00004).l
000051C8 41F9 0000 0000             		lea	(Nem_MiniSonic).l,a0 ; load continue screen patterns
000051CE 6100 C494                  		bsr.w	NemDec
000051D2 720A                       		moveq	#10,d1
000051D4 4EB9 0000 0000             		jsr	ContScrCounter	; run countdown	(start from 10)
000051DA 7012                       		moveq	#$12,d0
000051DC 6100 D108                  		bsr.w	PalLoad1	; load continue	screen pallet
000051E0 103C 0090                  		move.b	#$90,d0
000051E4 6100 C3D4                  		bsr.w	PlaySound	; play continue	music
000051E8 31FC 0293 F614             		move.w	#659,($FFFFF614).w ; set time delay to 11 seconds
000051EE 42B8 F700                  		clr.l	($FFFFF700).w
000051F2 21FC 0100 0000 F704        		move.l	#$1000000,($FFFFF704).w
000051FA 11FC 0081 D000             		move.b	#$81,($FFFFD000).w ; load Sonic	object
00005200 11FC 0080 D040             		move.b	#$80,($FFFFD040).w ; load continue screen objects
00005206 11FC 0080 D080             		move.b	#$80,($FFFFD080).w
0000520C 11FC 0003 D098             		move.b	#3,($FFFFD098).w
00005212 11FC 0004 D09A             		move.b	#4,($FFFFD09A).w
00005218 11FC 0080 D0C0             		move.b	#$80,($FFFFD0C0).w
0000521E 11FC 0004 D0E4             		move.b	#4,($FFFFD0E4).w
00005224 4EB9 0000 0000             		jsr	ObjectsLoad
0000522A 4EB9 0000 0000             		jsr	BuildSprites
00005230 3038 F60C                  		move.w	($FFFFF60C).w,d0
00005234 0000 0040                  		ori.b	#$40,d0
00005238 33C0 00C0 0004             		move.w	d0,($C00004).l
0000523E 6100 CD56                  		bsr.w	Pal_FadeTo
00005242                            
00005242                            ; ---------------------------------------------------------------------------
00005242                            ; Continue screen main loop
00005242                            ; ---------------------------------------------------------------------------
00005242                            
00005242                            Cont_MainLoop:
00005242 11FC 0016 F62A             		move.b	#$16,($FFFFF62A).w
00005248 6100 D9E8                  		bsr.w	DelayProgram
0000524C 0C38 0006 D024             		cmpi.b	#6,($FFFFD024).w
00005252 6400                       		bcc.s	loc_4DF2
00005254 46FC 2700                  		move	#$2700,sr
00005258 3238 F614                  		move.w	($FFFFF614).w,d1
0000525C 82FC 003C                  		divu.w	#$3C,d1
00005260 0281 0000 000F             		andi.l	#$F,d1
00005266 4EB9 0000 0000             		jsr	ContScrCounter
0000526C 46FC 2300                  		move	#$2300,sr
00005270                            
00005270                            loc_4DF2:
00005270 4EB9 0000 0000             		jsr	ObjectsLoad
00005276 4EB9 0000 0000             		jsr	BuildSprites
0000527C 0C78 0180 D008             		cmpi.w	#$180,($FFFFD008).w ; has Sonic	run off	screen?
00005282 6400                       		bcc.s	Cont_GotoLevel	; if yes, branch
00005284 0C38 0006 D024             		cmpi.b	#6,($FFFFD024).w
0000528A 64B6                       		bcc.s	Cont_MainLoop
0000528C 4A78 F614                  		tst.w	($FFFFF614).w
00005290 6600 FFB0                  		bne.w	Cont_MainLoop
00005294 11FC 0000 F600             		move.b	#0,($FFFFF600).w ; go to Sega screen
0000529A 4E75                       		rts	
0000529C                            ; ===========================================================================
0000529C                            
0000529C                            Cont_GotoLevel:				; XREF: Cont_MainLoop
0000529C 11FC 000C F600             		move.b	#$C,($FFFFF600).w ; set	screen mode to $0C (level)
000052A2 11FC 0027 FE12             		move.b	#39,($FFFFFE12).w ; set lives to	3
000052A8 7000                       		moveq	#0,d0
000052AA 31C0 FE20                  		move.w	d0,($FFFFFE20).w ; clear rings
000052AE 21C0 FE22                  		move.l	d0,($FFFFFE22).w ; clear time
000052B2 21C0 FE26                  		move.l	d0,($FFFFFE26).w ; clear score
000052B6 11C0 FE30                  		move.b	d0,($FFFFFE30).w ; clear lamppost count
000052BA 5338 FE18                  		subq.b	#1,($FFFFFE18).w ; subtract 1 from continues
000052BE 4E75                       		rts	
000052C0                            ; ===========================================================================
000052C0                            
000052C0                            ; ---------------------------------------------------------------------------
000052C0                            ; Object 80 - Continue screen elements
000052C0                            ; ---------------------------------------------------------------------------
000052C0                            
000052C0                            Obj80:					; XREF: Obj_Index
000052C0 7000                       		moveq	#0,d0
000052C2 1028 0024                  		move.b	$24(a0),d0
000052C6 323B 0000                  		move.w	Obj80_Index(pc,d0.w),d1
000052CA 4EFB 1000                  		jmp	Obj80_Index(pc,d1.w)
000052CE                            ; ===========================================================================
000052CE 0000                       Obj80_Index:	dc.w Obj80_Main-Obj80_Index
000052D0 0000                       		dc.w Obj80_Display-Obj80_Index
000052D2 0000                       		dc.w Obj80_MakeMiniSonic-Obj80_Index
000052D4 0000                       		dc.w Obj80_ChkType-Obj80_Index
000052D6                            ; ===========================================================================
000052D6                            
000052D6                            Obj80_Main:				; XREF: Obj80_Index
000052D6 5428 0024                  		addq.b	#2,$24(a0)
000052DA 217C 0000 0000 0004        		move.l	#Map_obj80,4(a0)
000052E2 317C 8500 0002             		move.w	#$8500,2(a0)
000052E8 117C 0000 0001             		move.b	#0,1(a0)
000052EE 117C 003C 0019             		move.b	#$3C,$19(a0)
000052F4 317C 0120 0008             		move.w	#$120,8(a0)
000052FA 317C 00C0 000A             		move.w	#$C0,$A(a0)
00005300 31FC 0000 FE20             		move.w	#0,($FFFFFE20).w ; clear rings
00005306                            
00005306                            Obj80_Display:				; XREF: Obj80_Index
00005306 4EF9 0000 0000             		jmp	DisplaySprite
0000530C                            ; ===========================================================================
0000530C                            Obj80_MiniSonicPos:
0000530C 0116 012A 0102 013E 00EE+  		dc.w $116, $12A, $102, $13E, $EE, $152, $DA, $166, $C6
0000531E 017A 00B2 018E 009E 01A2+  		dc.w $17A, $B2,	$18E, $9E, $1A2, $8A
0000532A                            ; ===========================================================================
0000532A                            
0000532A                            Obj80_MakeMiniSonic:			; XREF: Obj80_Index
0000532A 2248                       		movea.l	a0,a1
0000532C 45F9 0000 530C             		lea	(Obj80_MiniSonicPos).l,a2
00005332 7200                       		moveq	#0,d1
00005334 1238 FE18                  		move.b	($FFFFFE18).w,d1
00005338 5501                       		subq.b	#2,d1
0000533A 6400                       		bcc.s	loc_4EC4
0000533C 4EF9 0000 0000             		jmp	DeleteObject
00005342                            ; ===========================================================================
00005342                            
00005342                            loc_4EC4:				; XREF: Obj80_MakeMiniSonic
00005342 7601                       		moveq	#1,d3
00005344 0C01 000E                  		cmpi.b	#$E,d1
00005348 6500                       		bcs.s	loc_4ED0
0000534A 7600                       		moveq	#0,d3
0000534C 720E                       		moveq	#$E,d1
0000534E                            
0000534E                            loc_4ED0:
0000534E 1401                       		move.b	d1,d2
00005350 0202 0001                  		andi.b	#1,d2
00005354                            
00005354                            Obj80_MiniSonLoop:
00005354 12BC 0080                  		move.b	#$80,0(a1)	; load mini Sonic object
00005358 335A 0008                  		move.w	(a2)+,8(a1)
0000535C 4A02                       		tst.b	d2
0000535E 6700                       		beq.s	loc_4EEA
00005360 0469 000A 0008             		subi.w	#$A,8(a1)
00005366                            
00005366                            loc_4EEA:
00005366 337C 00D0 000A             		move.w	#$D0,$A(a1)
0000536C 137C 0006 001A             		move.b	#6,$1A(a1)
00005372 137C 0006 0024             		move.b	#6,$24(a1)
00005378 237C 0000 0000 0004        		move.l	#Map_obj80,4(a1)
00005380 337C 8551 0002             		move.w	#$8551,2(a1)
00005386 137C 0000 0001             		move.b	#0,1(a1)
0000538C 43E9 0040                  		lea	$40(a1),a1
00005390 51C9 FFC2                  		dbf	d1,Obj80_MiniSonLoop ; repeat for number of continues
00005394 43E9 FFC0                  		lea	-$40(a1),a1
00005398 1343 0028                  		move.b	d3,$28(a1)
0000539C                            
0000539C                            Obj80_ChkType:				; XREF: Obj80_Index
0000539C 4A28 0028                  		tst.b	$28(a0)
000053A0 6700                       		beq.s	loc_4F40
000053A2 0C38 0006 D024             		cmpi.b	#6,($FFFFD024).w
000053A8 6500                       		bcs.s	loc_4F40
000053AA 1038 FE0F                  		move.b	($FFFFFE0F).w,d0
000053AE 0200 0001                  		andi.b	#1,d0
000053B2 6600                       		bne.s	loc_4F40
000053B4 4A78 D010                  		tst.w	($FFFFD010).w
000053B8 6600                       		bne.s	Obj80_Delete
000053BA 4E75                       		rts	
000053BC                            ; ===========================================================================
000053BC                            
000053BC                            loc_4F40:				; XREF: Obj80_ChkType
000053BC 1038 FE0F                  		move.b	($FFFFFE0F).w,d0
000053C0 0200 000F                  		andi.b	#$F,d0
000053C4 6600                       		bne.s	Obj80_Display2
000053C6 0868 0000 001A             		bchg	#0,$1A(a0)
000053CC                            
000053CC                            Obj80_Display2:
000053CC 4EF9 0000 0000             		jmp	DisplaySprite
000053D2                            ; ===========================================================================
000053D2                            
000053D2                            Obj80_Delete:				; XREF: Obj80_ChkType
000053D2 4EF9 0000 0000             		jmp	DeleteObject
000053D8                            ; ===========================================================================
000053D8                            
000053D8                            ; ---------------------------------------------------------------------------
000053D8                            ; Object 81 - Sonic on the continue screen
000053D8                            ; ---------------------------------------------------------------------------
000053D8                            
000053D8                            Obj81:					; XREF: Obj_Index
000053D8 7000                       		moveq	#0,d0
000053DA 1028 0024                  		move.b	$24(a0),d0
000053DE 323B 0000                  		move.w	Obj81_Index(pc,d0.w),d1
000053E2 4EBB 1000                  		jsr	Obj81_Index(pc,d1.w)
000053E6 4EF9 0000 0000             		jmp	DisplaySprite
000053EC                            ; ===========================================================================
000053EC 0000                       Obj81_Index:	dc.w Obj81_Main-Obj81_Index
000053EE 0000                       		dc.w Obj81_ChkLand-Obj81_Index
000053F0 0000                       		dc.w Obj81_Animate-Obj81_Index
000053F2 0000                       		dc.w Obj81_Run-Obj81_Index
000053F4                            ; ===========================================================================
000053F4                            
000053F4                            Obj81_Main:				; XREF: Obj81_Index
000053F4 5428 0024                  		addq.b	#2,$24(a0)
000053F8 317C 00A0 0008             		move.w	#$A0,8(a0)
000053FE 317C 00C0 000C             		move.w	#$C0,$C(a0)
00005404 217C 0000 0000 0004        		move.l	#Map_Sonic,4(a0)
0000540C 317C 0780 0002             		move.w	#$780,2(a0)
00005412 117C 0004 0001             		move.b	#4,1(a0)
00005418 117C 0002 0018             		move.b	#2,$18(a0)
0000541E 117C 001D 001C             		move.b	#$1D,$1C(a0)	; use "floating" animation
00005424 317C 0400 0012             		move.w	#$400,$12(a0)	; make Sonic fall from above
0000542A                            
0000542A                            Obj81_ChkLand:				; XREF: Obj81_Index
0000542A 0C68 01A0 000C             		cmpi.w	#$1A0,$C(a0)	; has Sonic landed yet?
00005430 6600                       		bne.s	Obj81_ShowFall	; if not, branch
00005432 5428 0024                  		addq.b	#2,$24(a0)
00005436 4268 0012                  		clr.w	$12(a0)		; stop Sonic falling
0000543A 217C 0000 0000 0004        		move.l	#Map_obj80,4(a0)
00005442 317C 8500 0002             		move.w	#$8500,2(a0)
00005448 117C 0000 001C             		move.b	#0,$1C(a0)
0000544E 6000                       		bra.s	Obj81_Animate
00005450                            ; ===========================================================================
00005450                            
00005450                            Obj81_ShowFall:				; XREF: Obj81_ChkLand
00005450 4EB9 0000 0000             		jsr	SpeedToPos
00005456 4EB9 0000 0000             		jsr	Sonic_Animate
0000545C 4EF9 0000 0000             		jmp	LoadSonicDynPLC
00005462                            ; ===========================================================================
00005462                            
00005462                            Obj81_Animate:				; XREF: Obj81_Index
00005462 4A38 F605                  		tst.b	($FFFFF605).w	; is any button	pressed?
00005466 6B00                       		bmi.s	Obj81_GetUp	; if yes, branch
00005468 43F9 0000 0000             		lea	(Ani_obj81).l,a1
0000546E 4EF9 0000 0000             		jmp	AnimateSprite
00005474                            ; ===========================================================================
00005474                            
00005474                            Obj81_GetUp:				; XREF: Obj81_Animate
00005474 5428 0024                  		addq.b	#2,$24(a0)
00005478 217C 0000 0000 0004        		move.l	#Map_Sonic,4(a0)
00005480 317C 0780 0002             		move.w	#$780,2(a0)
00005486 117C 001E 001C             		move.b	#$1E,$1C(a0)	; use "getting up" animation
0000548C 4268 0014                  		clr.w	$14(a0)
00005490 5168 000C                  		subq.w	#8,$C(a0)
00005494 103C 00E0                  		move.b	#$E0,d0
00005498 6100 C126                  		bsr.w	PlaySound_Special ; fade out music
0000549C                            
0000549C                            Obj81_Run:				; XREF: Obj81_Index
0000549C 0C68 0800 0014             		cmpi.w	#$800,$14(a0)	; check	Sonic's "run speed" (not moving)
000054A2 6600                       		bne.s	Obj81_AddSpeed	; if too low, branch
000054A4 317C 1000 0010             		move.w	#$1000,$10(a0)	; move Sonic to	the right
000054AA 6000                       		bra.s	Obj81_ShowRun
000054AC                            ; ===========================================================================
000054AC                            
000054AC                            Obj81_AddSpeed:				; XREF: Obj81_Run
000054AC 0668 0020 0014             		addi.w	#$20,$14(a0)	; increase "run	speed"
000054B2                            
000054B2                            Obj81_ShowRun:				; XREF: Obj81_Run
000054B2 4EB9 0000 0000             		jsr	SpeedToPos
000054B8 4EB9 0000 0000             		jsr	Sonic_Animate
000054BE 4EF9 0000 0000             		jmp	LoadSonicDynPLC
000054C4                            ; ===========================================================================
000054C4                            Ani_obj81:
000054C4                            	include "_anim\obj81.asm"
000054C4                            ; ---------------------------------------------------------------------------
000054C4                            ; Animation script - Sonic on the continue screen
000054C4                            ; ---------------------------------------------------------------------------
000054C4 0000                       		dc.w byte_504A-Ani_obj81
000054C6 0401 0101 0102 0202 0303+  byte_504A:	dc.b 4,	1, 1, 1, 1, 2, 2, 2, 3,	3, $FF
000054D2 00                         		even
000054D2 00                         		even
000054D2                            
000054D2                            ; ---------------------------------------------------------------------------
000054D2                            ; Sprite mappings - Continue screen
000054D2                            ; ---------------------------------------------------------------------------
000054D2                            Map_obj80:
000054D2                            	include "_maps\obj80.asm"
000054D2                            ; ---------------------------------------------------------------------------
000054D2                            ; Sprite mappings - Continue screen
000054D2                            ; ---------------------------------------------------------------------------
000054D2 0000 0000                  		dc.w byte_5066-Map_obj80, byte_509E-Map_obj80
000054D6 0000 0000                  		dc.w byte_50AE-Map_obj80, byte_50BE-Map_obj80
000054DA 0000 0000                  		dc.w byte_50CE-Map_obj80, byte_50D9-Map_obj80
000054DE 0000 0000                  		dc.w byte_50D9-Map_obj80, byte_50DF-Map_obj80
000054E2 0B                         byte_5066:	dc.b $B
000054E3 F805 0088 C4               		dc.b $F8, 5, 0,	$88, $C4 ; "CONTINUE", stars and countdown
000054E8 F805 00B2 D4               		dc.b $F8, 5, 0,	$B2, $D4
000054ED F805 00AE E4               		dc.b $F8, 5, 0,	$AE, $E4
000054F2 F805 00C2 F4               		dc.b $F8, 5, 0,	$C2, $F4
000054F7 F801 00A0 04               		dc.b $F8, 1, 0,	$A0, 4
000054FC F805 00AE 0C               		dc.b $F8, 5, 0,	$AE, $C
00005501 F805 00C6 1C               		dc.b $F8, 5, 0,	$C6, $1C
00005506 F805 0090 2C               		dc.b $F8, 5, 0,	$90, $2C
0000550B 3805 2021 E8               		dc.b $38, 5, $20, $21, $E8
00005510 3805 2021 08               		dc.b $38, 5, $20, $21, 8
00005515 3605 01FC F8               		dc.b $36, 5, 1,	$FC, $F8
0000551A 03                         byte_509E:	dc.b 3
0000551B 0405 0015 FC               		dc.b 4,	5, 0, $15, $FC	; Sonic	on floor
00005520 F40A 0006 EC               		dc.b $F4, $A, 0, 6, $EC
00005525 F406 000F 04               		dc.b $F4, 6, 0,	$F, 4
0000552A 03                         byte_50AE:	dc.b 3
0000552B 0405 0019 FC               		dc.b 4,	5, 0, $19, $FC	; Sonic	on floor #2
00005530 F40A 0006 EC               		dc.b $F4, $A, 0, 6, $EC
00005535 F406 000F 04               		dc.b $F4, 6, 0,	$F, 4
0000553A 03                         byte_50BE:	dc.b 3
0000553B 0405 001D FC               		dc.b 4,	5, 0, $1D, $FC	; Sonic	on floor #3
00005540 F40A 0006 EC               		dc.b $F4, $A, 0, 6, $EC
00005545 F406 000F 04               		dc.b $F4, 6, 0,	$F, 4
0000554A 02                         byte_50CE:	dc.b 2
0000554B 6009 2000 E8               		dc.b $60, 9, $20, 0, $E8 ; circle on the floor
00005550 6009 2800 00               		dc.b $60, 9, $28, 0, 0
00005555 01                         byte_50D9:	dc.b 1
00005556 0006 0012 00               		dc.b 0,	6, 0, $12, 0	; mini Sonic
0000555B 01                         byte_50DF:	dc.b 1
0000555C 0006 0018 00               		dc.b 0,	6, 0, $18, 0	; mini Sonic #2
00005562 00                         		even
00005562 00                         		even
00005562                            
00005562                            ; ===========================================================================
00005562                            ; ---------------------------------------------------------------------------
00005562                            ; Ending sequence in Green Hill	Zone
00005562                            ; ---------------------------------------------------------------------------
00005562                            
00005562                            EndingSequence:				; XREF: GameModeArray
00005562 103C 00E4                  		move.b	#$E4,d0
00005566 6100 C058                  		bsr.w	PlaySound_Special ; stop music
0000556A 6100 CAD0                  		bsr.w	Pal_FadeFrom
0000556E 43F8 D000                  		lea	($FFFFD000).w,a1
00005572 7000                       		moveq	#0,d0
00005574 323C 07FF                  		move.w	#$7FF,d1
00005578                            
00005578                            End_ClrObjRam:
00005578 22C0                       		move.l	d0,(a1)+
0000557A 51C9 FFFC                  		dbf	d1,End_ClrObjRam ; clear object	RAM
0000557E                            
0000557E 43F8 F628                  		lea	($FFFFF628).w,a1
00005582 7000                       		moveq	#0,d0
00005584 323C 0015                  		move.w	#$15,d1
00005588                            
00005588                            End_ClrRam:
00005588 22C0                       		move.l	d0,(a1)+
0000558A 51C9 FFFC                  		dbf	d1,End_ClrRam	; clear	variables
0000558E                            
0000558E 43F8 F700                  		lea	($FFFFF700).w,a1
00005592 7000                       		moveq	#0,d0
00005594 323C 003F                  		move.w	#$3F,d1
00005598                            
00005598                            End_ClrRam2:
00005598 22C0                       		move.l	d0,(a1)+
0000559A 51C9 FFFC                  		dbf	d1,End_ClrRam2	; clear	variables
0000559E                            
0000559E 43F8 FE60                  		lea	($FFFFFE60).w,a1
000055A2 7000                       		moveq	#0,d0
000055A4 323C 0047                  		move.w	#$47,d1
000055A8                            
000055A8                            End_ClrRam3:
000055A8 22C0                       		move.l	d0,(a1)+
000055AA 51C9 FFFC                  		dbf	d1,End_ClrRam3	; clear	variables
000055AE                            
000055AE 46FC 2700                  		move	#$2700,sr
000055B2 3038 F60C                  		move.w	($FFFFF60C).w,d0
000055B6 0200 00BF                  		andi.b	#$BF,d0
000055BA 33C0 00C0 0004             		move.w	d0,($C00004).l
000055C0 6100 BF26                  		bsr.w	ClearScreen
000055C4 4DF9 00C0 0004             		lea	($C00004).l,a6
000055CA 3CBC 8B03                  		move.w	#$8B03,(a6)
000055CE 3CBC 8230                  		move.w	#$8230,(a6)
000055D2 3CBC 8407                  		move.w	#$8407,(a6)
000055D6 3CBC 857C                  		move.w	#$857C,(a6)
000055DA 3CBC 9001                  		move.w	#$9001,(a6)
000055DE 3CBC 8004                  		move.w	#$8004,(a6)
000055E2 3CBC 8720                  		move.w	#$8720,(a6)
000055E6 31FC 8ADF F624             		move.w	#$8ADF,($FFFFF624).w
000055EC 3CB8 F624                  		move.w	($FFFFF624).w,(a6)
000055F0 31FC 001E FE14             		move.w	#$1E,($FFFFFE14).w
000055F6 31FC 0600 FE10             		move.w	#$600,($FFFFFE10).w ; set level	number to 0600 (extra flowers)
000055FC 0C38 0006 FE57             		cmpi.b	#6,($FFFFFE57).w ; do you have all 6 emeralds?
00005602 6700                       		beq.s	End_LoadData	; if yes, branch
00005604 31FC 0601 FE10             		move.w	#$601,($FFFFFE10).w ; set level	number to 0601 (no flowers)
0000560A                            
0000560A                            End_LoadData:
0000560A 701C                       		moveq	#$1C,d0
0000560C 6100 C302                  		bsr.w	RunPLC_ROM	; load ending sequence patterns
00005610 4EB9 0000 0000             		jsr	Hud_Base
00005616 6100 0000                  		bsr.w	LevelSizeLoad
0000561A 6100 0000                  		bsr.w	DeformBgLayer
0000561E 08F8 0002 F754             		bset	#2,($FFFFF754).w
00005624 6100 0000                  		bsr.w	MainLoadBlockLoad
00005628 6100 0000                  		bsr.w	LoadTilesFromStart
0000562C 21FC 0000 0000 F796        		move.l	#Col_GHZ,($FFFFF796).w ; load collision	index
00005634 46FC 2300                  		move	#$2300,sr
00005638 41F9 0000 0000             		lea	(Kos_EndFlowers).l,a0 ;	load extra flower patterns
0000563E 43F8 9400                  		lea	($FFFF9400).w,a1 ; RAM address to buffer the patterns
00005642 6100 C47C                  		bsr.w	KosDec
00005646 7003                       		moveq	#3,d0
00005648 6100 CC9C                  		bsr.w	PalLoad1	; load Sonic's pallet
0000564C 303C 008B                  		move.w	#$8B,d0
00005650 6100 BF68                  		bsr.w	PlaySound	; play ending sequence music
00005654 0838 0006 F604             		btst	#6,($FFFFF604).w ; is button A pressed?
0000565A 6700                       		beq.s	End_LoadSonic	; if not, branch
0000565C 11FC 0001 FFFA             		move.b	#1,($FFFFFFFA).w ; enable debug	mode
00005662                            
00005662                            End_LoadSonic:
00005662 11FC 0001 D000             		move.b	#1,($FFFFD000).w ; load	Sonic object
00005668 08F8 0000 D022             		bset	#0,($FFFFD022).w ; make	Sonic face left
0000566E 11FC 0001 F7CC             		move.b	#1,($FFFFF7CC).w ; lock	controls
00005674 31FC 0400 F602             		move.w	#$400,($FFFFF602).w ; move Sonic to the	left
0000567A 31FC F800 D014             		move.w	#$F800,($FFFFD014).w ; set Sonic's speed
00005680 11FC 0021 D040             		move.b	#$21,($FFFFD040).w ; load HUD object
00005686 4EB9 0000 0000             		jsr	ObjPosLoad
0000568C 4EB9 0000 0000             		jsr	ObjectsLoad
00005692 4EB9 0000 0000             		jsr	BuildSprites
00005698 7000                       		moveq	#0,d0
0000569A 31C0 FE20                  		move.w	d0,($FFFFFE20).w
0000569E 21C0 FE22                  		move.l	d0,($FFFFFE22).w
000056A2 11C0 FE1B                  		move.b	d0,($FFFFFE1B).w
000056A6 11C0 FE2C                  		move.b	d0,($FFFFFE2C).w
000056AA 11C0 FE2D                  		move.b	d0,($FFFFFE2D).w
000056AE 11C0 FE2E                  		move.b	d0,($FFFFFE2E).w
000056B2 11C0 FE2F                  		move.b	d0,($FFFFFE2F).w
000056B6 31C0 FE08                  		move.w	d0,($FFFFFE08).w
000056BA 31C0 FE02                  		move.w	d0,($FFFFFE02).w
000056BE 31C0 FE04                  		move.w	d0,($FFFFFE04).w
000056C2 6100 EEDA                  		bsr.w	OscillateNumInit
000056C6 11FC 0001 FE1F             		move.b	#1,($FFFFFE1F).w
000056CC 11FC 0001 FE1D             		move.b	#1,($FFFFFE1D).w
000056D2 11FC 0000 FE1E             		move.b	#0,($FFFFFE1E).w
000056D8 31FC 0708 F614             		move.w	#1800,($FFFFF614).w
000056DE 11FC 0018 F62A             		move.b	#$18,($FFFFF62A).w
000056E4 6100 D54C                  		bsr.w	DelayProgram
000056E8 3038 F60C                  		move.w	($FFFFF60C).w,d0
000056EC 0000 0040                  		ori.b	#$40,d0
000056F0 33C0 00C0 0004             		move.w	d0,($C00004).l
000056F6 31FC 003F F626             		move.w	#$3F,($FFFFF626).w
000056FC 6100 C898                  		bsr.w	Pal_FadeTo
00005700                            
00005700                            ; ---------------------------------------------------------------------------
00005700                            ; Main ending sequence loop
00005700                            ; ---------------------------------------------------------------------------
00005700                            
00005700                            End_MainLoop:
00005700 6100 BECA                  		bsr.w	PauseGame
00005704 11FC 0018 F62A             		move.b	#$18,($FFFFF62A).w
0000570A 6100 D526                  		bsr.w	DelayProgram
0000570E 5278 FE04                  		addq.w	#1,($FFFFFE04).w
00005712 6100 0000                  		bsr.w	End_MoveSonic
00005716 4EB9 0000 0000             		jsr	ObjectsLoad
0000571C 6100 0000                  		bsr.w	DeformBgLayer
00005720 4EB9 0000 0000             		jsr	BuildSprites
00005726 4EB9 0000 0000             		jsr	ObjPosLoad
0000572C 6100 C432                  		bsr.w	PalCycle_Load
00005730 6100 EEC2                  		bsr.w	OscillateNumDo
00005734 6100 EF4E                  		bsr.w	ChangeRingFrame
00005738 0C38 0018 F600             		cmpi.b	#$18,($FFFFF600).w ; is	scene number $18 (ending)?
0000573E 6700                       		beq.s	loc_52DA	; if yes, branch
00005740 11FC 001C F600             		move.b	#$1C,($FFFFF600).w ; set scene to $1C (credits)
00005746 103C 0091                  		move.b	#$91,d0
0000574A 6100 BE74                  		bsr.w	PlaySound_Special ; play credits music
0000574E 31FC 0000 FFF4             		move.w	#0,($FFFFFFF4).w ; set credits index number to 0
00005754 4E75                       		rts	
00005756                            ; ===========================================================================
00005756                            
00005756                            loc_52DA:
00005756 4A78 FE02                  		tst.w	($FFFFFE02).w	; is level set to restart?
0000575A 6700 FFA4                  		beq.w	End_MainLoop	; if not, branch
0000575E                            
0000575E 4278 FE02                  		clr.w	($FFFFFE02).w
00005762 31FC 003F F626             		move.w	#$3F,($FFFFF626).w
00005768 4278 F794                  		clr.w	($FFFFF794).w
0000576C                            
0000576C                            End_AllEmlds:				; XREF: loc_5334
0000576C 6100 BE5E                  		bsr.w	PauseGame
00005770 11FC 0018 F62A             		move.b	#$18,($FFFFF62A).w
00005776 6100 D4BA                  		bsr.w	DelayProgram
0000577A 5278 FE04                  		addq.w	#1,($FFFFFE04).w
0000577E 6100 0000                  		bsr.w	End_MoveSonic
00005782 4EB9 0000 0000             		jsr	ObjectsLoad
00005788 6100 0000                  		bsr.w	DeformBgLayer
0000578C 4EB9 0000 0000             		jsr	BuildSprites
00005792 4EB9 0000 0000             		jsr	ObjPosLoad
00005798 6100 EE5A                  		bsr.w	OscillateNumDo
0000579C 6100 EEE6                  		bsr.w	ChangeRingFrame
000057A0 5378 F794                  		subq.w	#1,($FFFFF794).w
000057A4 6A00                       		bpl.s	loc_5334
000057A6 31FC 0002 F794             		move.w	#2,($FFFFF794).w
000057AC 6100 C9D8                  		bsr.w	Pal_ToWhite
000057B0                            
000057B0                            loc_5334:
000057B0 4A78 FE02                  		tst.w	($FFFFFE02).w
000057B4 6700 FFB6                  		beq.w	End_AllEmlds
000057B8 4278 FE02                  		clr.w	($FFFFFE02).w
000057BC 31FC 2E2F A480             		move.w	#$2E2F,($FFFFA480).w ; modify level layout
000057C2 4BF9 00C0 0004             		lea	($C00004).l,a5
000057C8 4DF9 00C0 0000             		lea	($C00000).l,a6
000057CE 47F8 F700                  		lea	($FFFFF700).w,a3
000057D2 49F8 A400                  		lea	($FFFFA400).w,a4
000057D6 343C 4000                  		move.w	#$4000,d2
000057DA 6100 0000                  		bsr.w	LoadTilesFromStart2
000057DE 7013                       		moveq	#$13,d0
000057E0 6100 CB04                  		bsr.w	PalLoad1	; load ending pallet
000057E4 6100 C8D4                  		bsr.w	Pal_MakeWhite
000057E8 6000 FF16                  		bra.w	End_MainLoop
000057EC                            
000057EC                            ; ---------------------------------------------------------------------------
000057EC                            ; Subroutine controlling Sonic on the ending sequence
000057EC                            ; ---------------------------------------------------------------------------
000057EC                            
000057EC                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000057EC                            
000057EC                            
000057EC                            End_MoveSonic:				; XREF: End_MainLoop
000057EC 1038 F7D7                  		move.b	($FFFFF7D7).w,d0
000057F0 6600                       		bne.s	End_MoveSonic2
000057F2 0C78 0090 D008             		cmpi.w	#$90,($FFFFD008).w ; has Sonic passed $90 on y-axis?
000057F8 6400                       		bcc.s	End_MoveSonExit	; if not, branch
000057FA 5438 F7D7                  		addq.b	#2,($FFFFF7D7).w
000057FE 11FC 0001 F7CC             		move.b	#1,($FFFFF7CC).w ; lock	player's controls
00005804 31FC 0800 F602             		move.w	#$800,($FFFFF602).w ; move Sonic to the	right
0000580A 4E75                       		rts	
0000580C                            ; ===========================================================================
0000580C                            
0000580C                            End_MoveSonic2:				; XREF: End_MoveSonic
0000580C 5500                       		subq.b	#2,d0
0000580E 6600                       		bne.s	End_MoveSonic3
00005810 0C78 00A0 D008             		cmpi.w	#$A0,($FFFFD008).w ; has Sonic passed $A0 on y-axis?
00005816 6500                       		bcs.s	End_MoveSonExit	; if not, branch
00005818 5438 F7D7                  		addq.b	#2,($FFFFF7D7).w
0000581C 7000                       		moveq	#0,d0
0000581E 11C0 F7CC                  		move.b	d0,($FFFFF7CC).w
00005822 31C0 F602                  		move.w	d0,($FFFFF602).w ; stop	Sonic moving
00005826 31C0 D014                  		move.w	d0,($FFFFD014).w
0000582A 11FC 0081 F7C8             		move.b	#$81,($FFFFF7C8).w
00005830 11FC 0003 D01A             		move.b	#3,($FFFFD01A).w
00005836 31FC 0505 D01C             		move.w	#$505,($FFFFD01C).w ; use "standing" animation
0000583C 11FC 0003 D01E             		move.b	#3,($FFFFD01E).w
00005842 4E75                       		rts	
00005844                            ; ===========================================================================
00005844                            
00005844                            End_MoveSonic3:				; XREF: End_MoveSonic
00005844 5500                       		subq.b	#2,d0
00005846 6600                       		bne.s	End_MoveSonExit
00005848 5438 F7D7                  		addq.b	#2,($FFFFF7D7).w
0000584C 31FC 00A0 D008             		move.w	#$A0,($FFFFD008).w
00005852 11FC 0087 D000             		move.b	#$87,($FFFFD000).w ; load Sonic	ending sequence	object
00005858 4278 D024                  		clr.w	($FFFFD024).w
0000585C                            
0000585C                            End_MoveSonExit:
0000585C 4E75                       		rts	
0000585E                            ; End of function End_MoveSonic
0000585E                            
0000585E                            ; ===========================================================================
0000585E                            ; ---------------------------------------------------------------------------
0000585E                            ; Object 87 - Sonic on ending sequence
0000585E                            ; ---------------------------------------------------------------------------
0000585E                            
0000585E                            Obj87:					; XREF: Obj_Index
0000585E 7000                       		moveq	#0,d0
00005860 1028 0025                  		move.b	$25(a0),d0
00005864 323B 0000                  		move.w	Obj87_Index(pc,d0.w),d1
00005868 4EBB 1000                  		jsr	Obj87_Index(pc,d1.w)
0000586C 4EF9 0000 0000             		jmp	DisplaySprite
00005872                            ; ===========================================================================
00005872 0000 0000                  Obj87_Index:	dc.w Obj87_Main-Obj87_Index, Obj87_MakeEmlds-Obj87_Index
00005876 0000 0000                  		dc.w Obj87_Animate-Obj87_Index,	Obj87_LookUp-Obj87_Index
0000587A 0000 0000                  		dc.w Obj87_ClrObjRam-Obj87_Index, Obj87_Animate-Obj87_Index
0000587E 0000 0000                  		dc.w Obj87_MakeLogo-Obj87_Index, Obj87_Animate-Obj87_Index
00005882 0000 0000                  		dc.w Obj87_Leap-Obj87_Index, Obj87_Animate-Obj87_Index
00005886                            ; ===========================================================================
00005886                            
00005886                            Obj87_Main:				; XREF: Obj87_Index
00005886 0C38 0006 FE57             		cmpi.b	#6,($FFFFFE57).w ; do you have all 6 emeralds?
0000588C 6700                       		beq.s	Obj87_Main2	; if yes, branch
0000588E 0628 0010 0025             		addi.b	#$10,$25(a0)	; else,	skip emerald sequence
00005894 317C 00D8 0030             		move.w	#$D8,$30(a0)
0000589A 4E75                       		rts	
0000589C                            ; ===========================================================================
0000589C                            
0000589C                            Obj87_Main2:				; XREF: Obj87_Main
0000589C 5428 0025                  		addq.b	#2,$25(a0)
000058A0 217C 0000 0000 0004        		move.l	#Map_obj87,4(a0)
000058A8 317C 03E1 0002             		move.w	#$3E1,2(a0)
000058AE 117C 0004 0001             		move.b	#4,1(a0)
000058B4 4228 0022                  		clr.b	$22(a0)
000058B8 117C 0002 0018             		move.b	#2,$18(a0)
000058BE 117C 0000 001A             		move.b	#0,$1A(a0)
000058C4 317C 0050 0030             		move.w	#$50,$30(a0)	; set duration for Sonic to pause
000058CA                            
000058CA                            Obj87_MakeEmlds:			; XREF: Obj87_Index
000058CA 5368 0030                  		subq.w	#1,$30(a0)	; subtract 1 from duration
000058CE 6600                       		bne.s	Obj87_Wait
000058D0 5428 0025                  		addq.b	#2,$25(a0)
000058D4 317C 0001 001C             		move.w	#1,$1C(a0)
000058DA 11FC 0088 D400             		move.b	#$88,($FFFFD400).w ; load chaos	emeralds objects
000058E0                            
000058E0                            Obj87_Wait:
000058E0 4E75                       		rts	
000058E2                            ; ===========================================================================
000058E2                            
000058E2                            Obj87_LookUp:				; XREF: Obj87_Index
000058E2 0C79 2000 00FF D43C        		cmpi.w	#$2000,($FFD43C).l
000058EA 6600                       		bne.s	locret_5480
000058EC 31FC 0001 FE02             		move.w	#1,($FFFFFE02).w ; set level to	restart	(causes	flash)
000058F2 317C 005A 0030             		move.w	#$5A,$30(a0)
000058F8 5428 0025                  		addq.b	#2,$25(a0)
000058FC                            
000058FC                            locret_5480:
000058FC 4E75                       		rts	
000058FE                            ; ===========================================================================
000058FE                            
000058FE                            Obj87_ClrObjRam:			; XREF: Obj87_Index
000058FE 5368 0030                  		subq.w	#1,$30(a0)
00005902 6600                       		bne.s	Obj87_Wait2
00005904 43F8 D400                  		lea	($FFFFD400).w,a1
00005908 323C 00FF                  		move.w	#$FF,d1
0000590C                            
0000590C                            Obj87_ClrLoop:
0000590C 4299                       		clr.l	(a1)+
0000590E 51C9 FFFC                  		dbf	d1,Obj87_ClrLoop ; clear the object RAM
00005912 31FC 0001 FE02             		move.w	#1,($FFFFFE02).w
00005918 5428 0025                  		addq.b	#2,$25(a0)
0000591C 117C 0001 001C             		move.b	#1,$1C(a0)
00005922 317C 003C 0030             		move.w	#$3C,$30(a0)
00005928                            
00005928                            Obj87_Wait2:
00005928 4E75                       		rts	
0000592A                            ; ===========================================================================
0000592A                            
0000592A                            Obj87_MakeLogo:				; XREF: Obj87_Index
0000592A 5368 0030                  		subq.w	#1,$30(a0)
0000592E 6600                       		bne.s	Obj87_Wait3
00005930 5428 0025                  		addq.b	#2,$25(a0)
00005934 317C 00B4 0030             		move.w	#$B4,$30(a0)
0000593A 117C 0002 001C             		move.b	#2,$1C(a0)
00005940 11FC 0089 D400             		move.b	#$89,($FFFFD400).w ; load "SONIC THE HEDGEHOG" object
00005946                            
00005946                            Obj87_Wait3:
00005946 4E75                       		rts	
00005948                            ; ===========================================================================
00005948                            
00005948                            Obj87_Animate:				; XREF: Obj87_Index
00005948 43F9 0000 0000             		lea	(Ani_obj87).l,a1
0000594E 4EF9 0000 0000             		jmp	AnimateSprite
00005954                            ; ===========================================================================
00005954                            
00005954                            Obj87_Leap:				; XREF: Obj87_Index
00005954 5368 0030                  		subq.w	#1,$30(a0)
00005958 6600                       		bne.s	Obj87_Wait4
0000595A 5428 0025                  		addq.b	#2,$25(a0)
0000595E 217C 0000 0000 0004        		move.l	#Map_obj87,4(a0)
00005966 317C 03E1 0002             		move.w	#$3E1,2(a0)
0000596C 117C 0004 0001             		move.b	#4,1(a0)
00005972 4228 0022                  		clr.b	$22(a0)
00005976 117C 0002 0018             		move.b	#2,$18(a0)
0000597C 117C 0005 001A             		move.b	#5,$1A(a0)
00005982 117C 0002 001C             		move.b	#2,$1C(a0)	; use "leaping"	animation
00005988 11FC 0089 D400             		move.b	#$89,($FFFFD400).w ; load "SONIC THE HEDGEHOG" object
0000598E 60B8                       		bra.s	Obj87_Animate
00005990                            ; ===========================================================================
00005990                            
00005990                            Obj87_Wait4:				; XREF: Obj87_Leap
00005990 4E75                       		rts	
00005992                            ; ===========================================================================
00005992                            Ani_obj87:
00005992                            	include "_anim\obj87.asm"
00005992                            ; ---------------------------------------------------------------------------
00005992                            ; Animation script - Sonic on the ending sequence
00005992                            ; ---------------------------------------------------------------------------
00005992 0000                       		dc.w byte_551C-Ani_obj87
00005994 0000                       		dc.w byte_552A-Ani_obj87
00005996 0000                       		dc.w byte_5534-Ani_obj87
00005998 0301 0001 0001 0001 0001+  byte_551C:	dc.b 3,	1, 0, 1, 0, 1, 0, 1, 0,	1, 0, 1, 2, $FA
000059A6 0503 0403 0403 0403 FA00   byte_552A:	dc.b 5,	3, 4, 3, 4, 3, 4, 3, $FA, 0
000059B0 0305 0505 0607 FE01        byte_5534:	dc.b 3,	5, 5, 5, 6, 7, $FE, 1
000059B8                            		even
000059B8                            		even
000059B8                            
000059B8                            ; ===========================================================================
000059B8                            ; ---------------------------------------------------------------------------
000059B8                            ; Object 88 - chaos emeralds on	the ending sequence
000059B8                            ; ---------------------------------------------------------------------------
000059B8                            
000059B8                            Obj88:					; XREF: Obj_Index
000059B8 7000                       		moveq	#0,d0
000059BA 1028 0024                  		move.b	$24(a0),d0
000059BE 323B 0000                  		move.w	Obj88_Index(pc,d0.w),d1
000059C2 4EBB 1000                  		jsr	Obj88_Index(pc,d1.w)
000059C6 4EF9 0000 0000             		jmp	DisplaySprite
000059CC                            ; ===========================================================================
000059CC 0000                       Obj88_Index:	dc.w Obj88_Main-Obj88_Index
000059CE 0000                       		dc.w Obj88_Move-Obj88_Index
000059D0                            ; ===========================================================================
000059D0                            
000059D0                            Obj88_Main:				; XREF: Obj88_Index
000059D0 0C38 0002 D01A             		cmpi.b	#2,($FFFFD01A).w
000059D6 6700                       		beq.s	Obj88_Main2
000059D8 588F                       		addq.l	#4,sp
000059DA 4E75                       		rts	
000059DC                            ; ===========================================================================
000059DC                            
000059DC                            Obj88_Main2:				; XREF: Obj88_Main
000059DC 3178 D008 0008             		move.w	($FFFFD008).w,8(a0) ; match X position with Sonic
000059E2 3178 D00C 000C             		move.w	($FFFFD00C).w,$C(a0) ; match Y position	with Sonic
000059E8 2248                       		movea.l	a0,a1
000059EA 7600                       		moveq	#0,d3
000059EC 7401                       		moveq	#1,d2
000059EE 7205                       		moveq	#5,d1
000059F0                            
000059F0                            Obj88_MainLoop:
000059F0 12BC 0088                  		move.b	#$88,(a1)	; load chaos emerald object
000059F4 5429 0024                  		addq.b	#2,$24(a1)
000059F8 237C 0000 0000 0004        		move.l	#Map_obj88,4(a1)
00005A00 337C 03C5 0002             		move.w	#$3C5,2(a1)
00005A06 137C 0004 0001             		move.b	#4,1(a1)
00005A0C 137C 0001 0018             		move.b	#1,$18(a1)
00005A12 3368 0008 0038             		move.w	8(a0),$38(a1)
00005A18 3368 000C 003A             		move.w	$C(a0),$3A(a1)
00005A1E 1342 001C                  		move.b	d2,$1C(a1)
00005A22 1342 001A                  		move.b	d2,$1A(a1)
00005A26 5202                       		addq.b	#1,d2
00005A28 1343 0026                  		move.b	d3,$26(a1)
00005A2C 0603 002A                  		addi.b	#$2A,d3
00005A30 43E9 0040                  		lea	$40(a1),a1
00005A34 51C9 FFBA                  		dbf	d1,Obj88_MainLoop ; repeat 5 more times
00005A38                            
00005A38                            Obj88_Move:				; XREF: Obj88_Index
00005A38 3028 003E                  		move.w	$3E(a0),d0
00005A3C D168 0026                  		add.w	d0,$26(a0)
00005A40 1028 0026                  		move.b	$26(a0),d0
00005A44 4EB9 0000 2C64             		jsr	(CalcSine).l
00005A4A 7800                       		moveq	#0,d4
00005A4C 1828 003C                  		move.b	$3C(a0),d4
00005A50 C3C4                       		muls.w	d4,d1
00005A52 E081                       		asr.l	#8,d1
00005A54 C1C4                       		muls.w	d4,d0
00005A56 E080                       		asr.l	#8,d0
00005A58 D268 0038                  		add.w	$38(a0),d1
00005A5C D068 003A                  		add.w	$3A(a0),d0
00005A60 3141 0008                  		move.w	d1,8(a0)
00005A64 3140 000C                  		move.w	d0,$C(a0)
00005A68 0C68 2000 003C             		cmpi.w	#$2000,$3C(a0)
00005A6E 6700                       		beq.s	loc_55FA
00005A70 0668 0020 003C             		addi.w	#$20,$3C(a0)
00005A76                            
00005A76                            loc_55FA:
00005A76 0C68 2000 003E             		cmpi.w	#$2000,$3E(a0)
00005A7C 6700                       		beq.s	loc_5608
00005A7E 0668 0020 003E             		addi.w	#$20,$3E(a0)
00005A84                            
00005A84                            loc_5608:
00005A84 0C68 0140 003A             		cmpi.w	#$140,$3A(a0)
00005A8A 6700                       		beq.s	locret_5614
00005A8C 5368 003A                  		subq.w	#1,$3A(a0)
00005A90                            
00005A90                            locret_5614:
00005A90 4E75                       		rts	
00005A92                            ; ===========================================================================
00005A92                            ; ---------------------------------------------------------------------------
00005A92                            ; Object 89 - "SONIC THE HEDGEHOG" text	on the ending sequence
00005A92                            ; ---------------------------------------------------------------------------
00005A92                            
00005A92                            Obj89:					; XREF: Obj_Index
00005A92 7000                       		moveq	#0,d0
00005A94 1028 0024                  		move.b	$24(a0),d0
00005A98 323B 0000                  		move.w	Obj89_Index(pc,d0.w),d1
00005A9C 4EFB 1000                  		jmp	Obj89_Index(pc,d1.w)
00005AA0                            ; ===========================================================================
00005AA0 0000                       Obj89_Index:	dc.w Obj89_Main-Obj89_Index
00005AA2 0000                       		dc.w Obj89_Move-Obj89_Index
00005AA4 0000                       		dc.w Obj89_GotoCredits-Obj89_Index
00005AA6                            ; ===========================================================================
00005AA6                            
00005AA6                            Obj89_Main:				; XREF: Obj89_Index
00005AA6 5428 0024                  		addq.b	#2,$24(a0)
00005AAA 317C FFE0 0008             		move.w	#-$20,8(a0)	; object starts	outside	the level boundary
00005AB0 317C 00D8 000A             		move.w	#$D8,$A(a0)
00005AB6 217C 0000 0000 0004        		move.l	#Map_obj89,4(a0)
00005ABE 317C 05C5 0002             		move.w	#$5C5,2(a0)
00005AC4 117C 0000 0001             		move.b	#0,1(a0)
00005ACA 117C 0000 0018             		move.b	#0,$18(a0)
00005AD0                            
00005AD0                            Obj89_Move:				; XREF: Obj89_Index
00005AD0 0C68 00C0 0008             		cmpi.w	#$C0,8(a0)	; has object reached $C0?
00005AD6 6700                       		beq.s	Obj89_Delay	; if yes, branch
00005AD8 0668 0010 0008             		addi.w	#$10,8(a0)	; move object to the right
00005ADE 4EB9 0000 0000             		jsr	DisplaySprite
00005AE4                            ; ===========================================================================
00005AE4                            
00005AE4                            Obj89_Delay:				; XREF: Obj89_Move
00005AE4 5428 0024                  		addq.b	#2,$24(a0)
00005AE8 317C 0078 0030             		move.w	#120,$30(a0)	; set duration for delay (2 seconds)
00005AEE                            
00005AEE                            Obj89_GotoCredits:			; XREF: Obj89_Index
00005AEE 5368 0030                  		subq.w	#1,$30(a0)	; subtract 1 from duration
00005AF2 6A00                       		bpl.s	Obj89_Display
00005AF4 11FC 001C F600             		move.b	#$1C,($FFFFF600).w ; exit to credits
00005AFA                            
00005AFA                            Obj89_Display:
00005AFA 4EB9 0000 0000             		jsr	DisplaySprite
00005B00                            ; ===========================================================================
00005B00                            ; ---------------------------------------------------------------------------
00005B00                            ; Sprite mappings - Sonic on the ending	sequence
00005B00                            ; ---------------------------------------------------------------------------
00005B00                            Map_obj87:
00005B00                            	include "_maps\obj87.asm"
00005B00                            ; ---------------------------------------------------------------------------
00005B00                            ; Sprite mappings - Sonic on the ending	sequence
00005B00                            ; ---------------------------------------------------------------------------
00005B00 0000 0000                  		dc.w byte_5690-Map_obj87, byte_569B-Map_obj87
00005B04 0000 0000                  		dc.w byte_56AB-Map_obj87, byte_56B6-Map_obj87
00005B08 0000 0000                  		dc.w byte_56C1-Map_obj87, byte_56CC-Map_obj87
00005B0C 0000 0000                  		dc.w byte_56DC-Map_obj87, byte_5700-Map_obj87
00005B10 02                         byte_5690:	dc.b 2
00005B11 EC0B 0000 F8               		dc.b $EC, $B, 0, 0, $F8	; holding emeralds
00005B16 0C0C 000C F0               		dc.b $C, $C, 0,	$C, $F0
00005B1B 03                         byte_569B:	dc.b 3
00005B1C FC0D 0010 F0               		dc.b $FC, $D, 0, $10, $F0 ; holding emeralds (glowing)
00005B21 EC0B 0000 F8               		dc.b $EC, $B, 0, 0, $F8
00005B26 0C0C 000C F0               		dc.b $C, $C, 0,	$C, $F0
00005B2B 02                         byte_56AB:	dc.b 2
00005B2C EC09 0018 F8               		dc.b $EC, 9, 0,	$18, $F8 ; looking up
00005B31 FC0E 001E F0               		dc.b $FC, $E, 0, $1E, $F0
00005B36 02                         byte_56B6:	dc.b 2
00005B37 EC09 002A F8               		dc.b $EC, 9, 0,	$2A, $F8 ; confused
00005B3C FC0E 0030 F0               		dc.b $FC, $E, 0, $30, $F0
00005B41 02                         byte_56C1:	dc.b 2
00005B42 EC09 082A F0               		dc.b $EC, 9, 8,	$2A, $F0 ; confused #2
00005B47 FC0E 0830 F0               		dc.b $FC, $E, 8, $30, $F0
00005B4C 03                         byte_56CC:	dc.b 3
00005B4D EC06 003C F0               		dc.b $EC, 6, 0,	$3C, $F0 ; leaping
00005B52 EC06 083C 00               		dc.b $EC, 6, 8,	$3C, 0
00005B57 040D 0042 F0               		dc.b 4,	$D, 0, $42, $F0
00005B5C 07                         byte_56DC:	dc.b 7
00005B5D B20C 004A F8               		dc.b $B2, $C, 0, $4A, $F8 ; leaping #2
00005B62 BA0F 004E F0               		dc.b $BA, $F, 0, $4E, $F0
00005B67 BA05 005E 10               		dc.b $BA, 5, 0,	$5E, $10
00005B6C CA02 0062 10               		dc.b $CA, 2, 0,	$62, $10
00005B71 DA0C 0065 F0               		dc.b $DA, $C, 0, $65, $F0
00005B76 E208 0069 F8               		dc.b $E2, 8, 0,	$69, $F8
00005B7B EA05 006C F8               		dc.b $EA, 5, 0,	$6C, $F8
00005B80 18                         byte_5700:	dc.b $18
00005B81 800F 0070 F8               		dc.b $80, $F, 0, $70, $F8 ; leaping #3
00005B86 900B 0080 E0               		dc.b $90, $B, 0, $80, $E0
00005B8B 900B 008C 18               		dc.b $90, $B, 0, $8C, $18
00005B90 980B 0098 30               		dc.b $98, $B, 0, $98, $30
00005B95 A00F 00A4 58               		dc.b $A0, $F, 0, $A4, $58
00005B9A 8800 00B4 F0               		dc.b $88, 0, 0,	$B4, $F0
00005B9F 8005 00B5 18               		dc.b $80, 5, 0,	$B5, $18
00005BA4 A00F 00B9 F8               		dc.b $A0, $F, 0, $B9, $F8
00005BA9 B00B 00C9 E0               		dc.b $B0, $B, 0, $C9, $E0
00005BAE B80F 00D5 38               		dc.b $B8, $F, 0, $D5, $38
00005BB3 A805 00E5 48               		dc.b $A8, 5, 0,	$E5, $48
00005BB8 C002 00E9 58               		dc.b $C0, 2, 0,	$E9, $58
00005BBD C00F 00EC F8               		dc.b $C0, $F, 0, $EC, $F8
00005BC2 B80F 00FC 18               		dc.b $B8, $F, 0, $FC, $18
00005BC7 B008 010C 18               		dc.b $B0, 8, 1,	$C, $18
00005BCC D80D 010F 30               		dc.b $D8, $D, 1, $F, $30
00005BD1 D808 0117 18               		dc.b $D8, 8, 1,	$17, $18
00005BD6 D80F 011A D8               		dc.b $D8, $F, 1, $1A, $D8
00005BDB E00D 012A F8               		dc.b $E0, $D, 1, $2A, $F8
00005BE0 E000 0132 28               		dc.b $E0, 0, 1,	$32, $28
00005BE5 D004 0133 E0               		dc.b $D0, 4, 1,	$33, $E0
00005BEA E805 0135 C8               		dc.b $E8, 5, 1,	$35, $C8
00005BEF F80C 0139 C8               		dc.b $F8, $C, 1, $39, $C8
00005BF4 F006 013D F8               		dc.b $F0, 6, 1,	$3D, $F8
00005BFA 00                         		even
00005BFA 00                         		even
00005BFA                            
00005BFA                            ; ---------------------------------------------------------------------------
00005BFA                            ; Sprite mappings - chaos emeralds on the ending sequence
00005BFA                            ; ---------------------------------------------------------------------------
00005BFA                            Map_obj88:
00005BFA                            	include "_maps\obj88.asm"
00005BFA                            ; ---------------------------------------------------------------------------
00005BFA                            ; Sprite mappings - chaos emeralds on the ending sequence
00005BFA                            ; ---------------------------------------------------------------------------
00005BFA 0000 0000                  		dc.w byte_5788-Map_obj88, byte_578E-Map_obj88
00005BFE 0000 0000                  		dc.w byte_5794-Map_obj88, byte_579A-Map_obj88
00005C02 0000 0000                  		dc.w byte_57A0-Map_obj88, byte_57A6-Map_obj88
00005C06 0000                       		dc.w byte_57AC-Map_obj88
00005C08 01                         byte_5788:	dc.b 1
00005C09 F805 0000 F8               		dc.b $F8, 5, 0,	0, $F8
00005C0E 01                         byte_578E:	dc.b 1
00005C0F F805 0004 F8               		dc.b $F8, 5, 0,	4, $F8
00005C14 01                         byte_5794:	dc.b 1
00005C15 F805 4010 F8               		dc.b $F8, 5, $40, $10, $F8
00005C1A 01                         byte_579A:	dc.b 1
00005C1B F805 2018 F8               		dc.b $F8, 5, $20, $18, $F8
00005C20 01                         byte_57A0:	dc.b 1
00005C21 F805 4014 F8               		dc.b $F8, 5, $40, $14, $F8
00005C26 01                         byte_57A6:	dc.b 1
00005C27 F805 0008 F8               		dc.b $F8, 5, 0,	8, $F8
00005C2C 01                         byte_57AC:	dc.b 1
00005C2D F805 000C F8               		dc.b $F8, 5, 0,	$C, $F8
00005C32                            		even
00005C32                            		even
00005C32                            
00005C32                            ; ---------------------------------------------------------------------------
00005C32                            ; Sprite mappings - "SONIC THE HEDGEHOG" text on the ending sequence
00005C32                            ; ---------------------------------------------------------------------------
00005C32                            Map_obj89:
00005C32                            	include "_maps\obj89.asm"
00005C32                            ; ---------------------------------------------------------------------------
00005C32                            ; Sprite mappings - "SONIC THE HEDGEHOG" text on the ending sequence
00005C32                            ; ---------------------------------------------------------------------------
00005C32 0000                       		dc.w byte_57B4-Map_obj89
00005C34 03                         byte_57B4:	dc.b 3
00005C35 F00F 0000 D0               		dc.b $F0, $F, 0, 0, $D0
00005C3A F00F 0010 F0               		dc.b $F0, $F, 0, $10, $F0
00005C3F F00F 0020 10               		dc.b $F0, $F, 0, $20, $10
00005C44                            		even
00005C44                            		even
00005C44                            
00005C44                            ; ===========================================================================
00005C44                            ; ---------------------------------------------------------------------------
00005C44                            ; Credits ending sequence
00005C44                            ; ---------------------------------------------------------------------------
00005C44                            
00005C44                            Credits:				; XREF: GameModeArray
00005C44 6100 BBBC                  		bsr.w	ClearPLC
00005C48 6100 C3F2                  		bsr.w	Pal_FadeFrom
00005C4C 4DF9 00C0 0004             		lea	($C00004).l,a6
00005C52 3CBC 8004                  		move.w	#$8004,(a6)
00005C56 3CBC 8230                  		move.w	#$8230,(a6)
00005C5A 3CBC 8407                  		move.w	#$8407,(a6)
00005C5E 3CBC 9001                  		move.w	#$9001,(a6)
00005C62 3CBC 9200                  		move.w	#$9200,(a6)
00005C66 3CBC 8B03                  		move.w	#$8B03,(a6)
00005C6A 3CBC 8720                  		move.w	#$8720,(a6)
00005C6E 4238 F64E                  		clr.b	($FFFFF64E).w
00005C72 6100 B874                  		bsr.w	ClearScreen
00005C76 43F8 D000                  		lea	($FFFFD000).w,a1
00005C7A 7000                       		moveq	#0,d0
00005C7C 323C 07FF                  		move.w	#$7FF,d1
00005C80                            
00005C80                            Cred_ClrObjRam:
00005C80 22C0                       		move.l	d0,(a1)+
00005C82 51C9 FFFC                  		dbf	d1,Cred_ClrObjRam ; clear object RAM
00005C86                            
00005C86 23FC 7400 0002 00C0 0004   		move.l	#$74000002,($C00004).l
00005C90 41F9 0000 0000             		lea	(Nem_CreditText).l,a0 ;	load credits alphabet patterns
00005C96 6100 B9CC                  		bsr.w	NemDec
00005C9A 43F8 FB80                  		lea	($FFFFFB80).w,a1
00005C9E 7000                       		moveq	#0,d0
00005CA0 323C 001F                  		move.w	#$1F,d1
00005CA4                            
00005CA4                            Cred_ClrPallet:
00005CA4 22C0                       		move.l	d0,(a1)+
00005CA6 51C9 FFFC                  		dbf	d1,Cred_ClrPallet ; fill pallet	with black ($0000)
00005CAA                            
00005CAA 7003                       		moveq	#3,d0
00005CAC 6100 C638                  		bsr.w	PalLoad1	; load Sonic's pallet
00005CB0 11FC 008A D080             		move.b	#$8A,($FFFFD080).w ; load credits object
00005CB6 4EB9 0000 0000             		jsr	ObjectsLoad
00005CBC 4EB9 0000 0000             		jsr	BuildSprites
00005CC2 6100 0000                  		bsr.w	EndingDemoLoad
00005CC6 7000                       		moveq	#0,d0
00005CC8 1038 FE10                  		move.b	($FFFFFE10).w,d0
00005CCC E948                       		lsl.w	#4,d0
00005CCE 45F9 0000 0000             		lea	(MainLoadBlocks).l,a2 ;	load block mappings etc
00005CD4 45F2 0000                  		lea	(a2,d0.w),a2
00005CD8 7000                       		moveq	#0,d0
00005CDA 1012                       		move.b	(a2),d0
00005CDC 6700                       		beq.s	loc_5862
00005CDE 6100 BAC4                  		bsr.w	LoadPLC		; load level patterns
00005CE2                            
00005CE2                            loc_5862:
00005CE2 7001                       		moveq	#1,d0
00005CE4 6100 BABE                  		bsr.w	LoadPLC		; load standard	level patterns
00005CE8 31FC 0078 F614             		move.w	#120,($FFFFF614).w ; display a credit for 2 seconds
00005CEE 6100 C2A6                  		bsr.w	Pal_FadeTo
00005CF2                            
00005CF2                            Cred_WaitLoop:
00005CF2 11FC 0004 F62A             		move.b	#4,($FFFFF62A).w
00005CF8 6100 CF38                  		bsr.w	DelayProgram
00005CFC 6100 BB12                  		bsr.w	RunPLC_RAM
00005D00 4A78 F614                  		tst.w	($FFFFF614).w	; have 2 seconds elapsed?
00005D04 66EC                       		bne.s	Cred_WaitLoop	; if not, branch
00005D06 4AB8 F680                  		tst.l	($FFFFF680).w	; have level gfx finished decompressing?
00005D0A 66E6                       		bne.s	Cred_WaitLoop	; if not, branch
00005D0C 0C78 0009 FFF4             		cmpi.w	#9,($FFFFFFF4).w ; have	the credits finished?
00005D12 6700 0000                  		beq.w	TryAgainEnd	; if yes, branch
00005D16 4E75                       		rts	
00005D18                            
00005D18                            ; ---------------------------------------------------------------------------
00005D18                            ; Ending sequence demo loading subroutine
00005D18                            ; ---------------------------------------------------------------------------
00005D18                            
00005D18                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00005D18                            
00005D18                            
00005D18                            EndingDemoLoad:				; XREF: Credits
00005D18 3038 FFF4                  		move.w	($FFFFFFF4).w,d0
00005D1C 0240 000F                  		andi.w	#$F,d0
00005D20 D040                       		add.w	d0,d0
00005D22 303B 0000                  		move.w	EndDemo_Levels(pc,d0.w),d0 ; load level	array
00005D26 31C0 FE10                  		move.w	d0,($FFFFFE10).w ; set level from level	array
00005D2A 5278 FFF4                  		addq.w	#1,($FFFFFFF4).w
00005D2E 0C78 0009 FFF4             		cmpi.w	#9,($FFFFFFF4).w ; have	credits	finished?
00005D34 6400                       		bcc.s	EndDemo_Exit	; if yes, branch
00005D36 31FC 8001 FFF0             		move.w	#$8001,($FFFFFFF0).w ; force demo mode
00005D3C 11FC 0008 F600             		move.b	#8,($FFFFF600).w ; set game mode to 08 (demo)
00005D42 11FC 0027 FE12             		move.b	#39,($FFFFFE12).w ; set lives to	3
00005D48 7000                       		moveq	#0,d0
00005D4A 31C0 FE20                  		move.w	d0,($FFFFFE20).w ; clear rings
00005D4E 21C0 FE22                  		move.l	d0,($FFFFFE22).w ; clear time
00005D52 21C0 FE26                  		move.l	d0,($FFFFFE26).w ; clear score
00005D56 11C0 FE30                  		move.b	d0,($FFFFFE30).w ; clear lamppost counter
00005D5A 0C78 0004 FFF4             		cmpi.w	#4,($FFFFFFF4).w ; is SLZ demo running?
00005D60 6600                       		bne.s	EndDemo_Exit	; if not, branch
00005D62 43F9 0000 0000             		lea	(EndDemo_LampVar).l,a1 ; load lamppost variables
00005D68 45F8 FE30                  		lea	($FFFFFE30).w,a2
00005D6C 303C 0008                  		move.w	#8,d0
00005D70                            
00005D70                            EndDemo_LampLoad:
00005D70 24D9                       		move.l	(a1)+,(a2)+
00005D72 51C8 FFFC                  		dbf	d0,EndDemo_LampLoad
00005D76                            
00005D76                            EndDemo_Exit:
00005D76 4E75                       		rts	
00005D78                            ; End of function EndingDemoLoad
00005D78                            
00005D78                            ; ===========================================================================
00005D78                            ; ---------------------------------------------------------------------------
00005D78                            ; Levels used in the end sequence demos
00005D78                            ; ---------------------------------------------------------------------------
00005D78                            EndDemo_Levels:	incbin	misc\dm_ord2.bin
00005D88                            
00005D88                            ; ---------------------------------------------------------------------------
00005D88                            ; Lamppost variables in the end sequence demo (Star Light Zone)
00005D88                            ; ---------------------------------------------------------------------------
00005D88                            EndDemo_LampVar:
00005D88 0101                       		dc.b 1,	1		; XREF: EndingDemoLoad
00005D8A 0A00 062C 000D             		dc.w $A00, $62C, $D
00005D90 0000 0000                  		dc.l 0
00005D94 0000                       		dc.b 0,	0
00005D96 0800 0957 05CC 04AB 03A6+  		dc.w $800, $957, $5CC, $4AB, $3A6, 0, $28C, 0, 0, $308
00005DAA 0101                       		dc.b 1,	1
00005DAC                            ; ===========================================================================
00005DAC                            ; ---------------------------------------------------------------------------
00005DAC                            ; "TRY AGAIN" and "END"	screens
00005DAC                            ; ---------------------------------------------------------------------------
00005DAC                            
00005DAC                            TryAgainEnd:				; XREF: Credits
00005DAC 6100 BA54                  		bsr.w	ClearPLC
00005DB0 6100 C28A                  		bsr.w	Pal_FadeFrom
00005DB4 4DF9 00C0 0004             		lea	($C00004).l,a6
00005DBA 3CBC 8004                  		move.w	#$8004,(a6)
00005DBE 3CBC 8230                  		move.w	#$8230,(a6)
00005DC2 3CBC 8407                  		move.w	#$8407,(a6)
00005DC6 3CBC 9001                  		move.w	#$9001,(a6)
00005DCA 3CBC 9200                  		move.w	#$9200,(a6)
00005DCE 3CBC 8B03                  		move.w	#$8B03,(a6)
00005DD2 3CBC 8720                  		move.w	#$8720,(a6)
00005DD6 4238 F64E                  		clr.b	($FFFFF64E).w
00005DDA 6100 B70C                  		bsr.w	ClearScreen
00005DDE 43F8 D000                  		lea	($FFFFD000).w,a1
00005DE2 7000                       		moveq	#0,d0
00005DE4 323C 07FF                  		move.w	#$7FF,d1
00005DE8                            
00005DE8                            TryAg_ClrObjRam:
00005DE8 22C0                       		move.l	d0,(a1)+
00005DEA 51C9 FFFC                  		dbf	d1,TryAg_ClrObjRam ; clear object RAM
00005DEE                            
00005DEE 701D                       		moveq	#$1D,d0
00005DF0 6100 BB1E                  		bsr.w	RunPLC_ROM	; load "TRY AGAIN" or "END" patterns
00005DF4 43F8 FB80                  		lea	($FFFFFB80).w,a1
00005DF8 7000                       		moveq	#0,d0
00005DFA 323C 001F                  		move.w	#$1F,d1
00005DFE                            
00005DFE                            TryAg_ClrPallet:
00005DFE 22C0                       		move.l	d0,(a1)+
00005E00 51C9 FFFC                  		dbf	d1,TryAg_ClrPallet ; fill pallet with black ($0000)
00005E04                            
00005E04 7013                       		moveq	#$13,d0
00005E06 6100 C4DE                  		bsr.w	PalLoad1	; load ending pallet
00005E0A 4278 FBC0                  		clr.w	($FFFFFBC0).w
00005E0E 11FC 008B D080             		move.b	#$8B,($FFFFD080).w ; load Eggman object
00005E14 4EB9 0000 0000             		jsr	ObjectsLoad
00005E1A 4EB9 0000 0000             		jsr	BuildSprites
00005E20 31FC 0708 F614             		move.w	#1800,($FFFFF614).w ; show screen for 30 seconds
00005E26 6100 C16E                  		bsr.w	Pal_FadeTo
00005E2A                            
00005E2A                            ; ---------------------------------------------------------------------------
00005E2A                            ; "TRY AGAIN" and "END"	screen main loop
00005E2A                            ; ---------------------------------------------------------------------------
00005E2A                            TryAg_MainLoop:
00005E2A 6100 B7A0                  		bsr.w	PauseGame
00005E2E 11FC 0004 F62A             		move.b	#4,($FFFFF62A).w
00005E34 6100 CDFC                  		bsr.w	DelayProgram
00005E38 4EB9 0000 0000             		jsr	ObjectsLoad
00005E3E 4EB9 0000 0000             		jsr	BuildSprites
00005E44 0238 0080 F605             		andi.b	#$80,($FFFFF605).w ; is	Start button pressed?
00005E4A 6600                       		bne.s	TryAg_Exit	; if yes, branch
00005E4C 4A78 F614                  		tst.w	($FFFFF614).w	; has 30 seconds elapsed?
00005E50 6700                       		beq.s	TryAg_Exit	; if yes, branch
00005E52 0C38 001C F600             		cmpi.b	#$1C,($FFFFF600).w
00005E58 67D0                       		beq.s	TryAg_MainLoop
00005E5A                            
00005E5A                            TryAg_Exit:
00005E5A 11FC 0000 F600             		move.b	#0,($FFFFF600).w ; go to Sega screen
00005E60 4E75                       		rts	
00005E62                            
00005E62                            ; ===========================================================================
00005E62                            ; ---------------------------------------------------------------------------
00005E62                            ; Object 8B - Eggman on "TRY AGAIN" and "END"	screens
00005E62                            ; ---------------------------------------------------------------------------
00005E62                            
00005E62                            Obj8B:					; XREF: Obj_Index
00005E62 7000                       		moveq	#0,d0
00005E64 1028 0024                  		move.b	$24(a0),d0
00005E68 323B 0000                  		move.w	Obj8B_Index(pc,d0.w),d1
00005E6C 4EBB 1000                  		jsr	Obj8B_Index(pc,d1.w)
00005E70 4EF9 0000 0000             		jmp	DisplaySprite
00005E76                            ; ===========================================================================
00005E76 0000                       Obj8B_Index:	dc.w Obj8B_Main-Obj8B_Index
00005E78 0000                       		dc.w Obj8B_Animate-Obj8B_Index
00005E7A 0000                       		dc.w Obj8B_Juggle-Obj8B_Index
00005E7C 0000                       		dc.w loc_5A8E-Obj8B_Index
00005E7E                            ; ===========================================================================
00005E7E                            
00005E7E                            Obj8B_Main:				; XREF: Obj8B_Index
00005E7E 5428 0024                  		addq.b	#2,$24(a0)
00005E82 317C 0120 0008             		move.w	#$120,8(a0)
00005E88 317C 00F4 000A             		move.w	#$F4,$A(a0)
00005E8E 217C 0000 0000 0004        		move.l	#Map_obj8B,4(a0)
00005E96 317C 03E1 0002             		move.w	#$3E1,2(a0)
00005E9C 117C 0000 0001             		move.b	#0,1(a0)
00005EA2 117C 0002 0018             		move.b	#2,$18(a0)
00005EA8 117C 0002 001C             		move.b	#2,$1C(a0)	; use "END" animation
00005EAE 0C38 0006 FE57             		cmpi.b	#6,($FFFFFE57).w ; do you have all 6 emeralds?
00005EB4 6700                       		beq.s	Obj8B_Animate	; if yes, branch
00005EB6 11FC 008A D0C0             		move.b	#$8A,($FFFFD0C0).w ; load credits object
00005EBC 31FC 0009 FFF4             		move.w	#9,($FFFFFFF4).w ; use "TRY AGAIN" text
00005EC2 11FC 008C D800             		move.b	#$8C,($FFFFD800).w ; load emeralds object on "TRY AGAIN" screen
00005EC8 117C 0000 001C             		move.b	#0,$1C(a0)	; use "TRY AGAIN" animation
00005ECE                            
00005ECE                            Obj8B_Animate:				; XREF: Obj8B_Index
00005ECE 43F9 0000 0000             		lea	(Ani_obj8B).l,a1
00005ED4 4EF9 0000 0000             		jmp	AnimateSprite
00005EDA                            ; ===========================================================================
00005EDA                            
00005EDA                            Obj8B_Juggle:				; XREF: Obj8B_Index
00005EDA 5428 0024                  		addq.b	#2,$24(a0)
00005EDE 7002                       		moveq	#2,d0
00005EE0 0828 0000 001C             		btst	#0,$1C(a0)
00005EE6 6700                       		beq.s	loc_5A6A
00005EE8 4440                       		neg.w	d0
00005EEA                            
00005EEA                            loc_5A6A:
00005EEA 43F8 D800                  		lea	($FFFFD800).w,a1
00005EEE 7205                       		moveq	#5,d1
00005EF0                            
00005EF0                            loc_5A70:
00005EF0 1340 003E                  		move.b	d0,$3E(a1)
00005EF4 3400                       		move.w	d0,d2
00005EF6 E742                       		asl.w	#3,d2
00005EF8 D529 0026                  		add.b	d2,$26(a1)
00005EFC 43E9 0040                  		lea	$40(a1),a1
00005F00 51C9 FFEE                  		dbf	d1,loc_5A70
00005F04 5228 001A                  		addq.b	#1,$1A(a0)
00005F08 317C 0070 0030             		move.w	#112,$30(a0)
00005F0E                            
00005F0E                            loc_5A8E:				; XREF: Obj8B_Index
00005F0E 5368 0030                  		subq.w	#1,$30(a0)
00005F12 6A00                       		bpl.s	locret_5AA0
00005F14 0868 0000 001C             		bchg	#0,$1C(a0)
00005F1A 117C 0002 0024             		move.b	#2,$24(a0)
00005F20                            
00005F20                            locret_5AA0:
00005F20 4E75                       		rts	
00005F22                            ; ===========================================================================
00005F22                            Ani_obj8B:
00005F22                            	include "_anim\obj8B.asm"
00005F22                            ; ---------------------------------------------------------------------------
00005F22                            ; Animation script - Eggman on the "TRY AGAIN" and "END" screens
00005F22                            ; ---------------------------------------------------------------------------
00005F22 0000                       		dc.w byte_5AA8-Ani_obj8B
00005F24 0000                       		dc.w byte_5AAC-Ani_obj8B
00005F26 0000                       		dc.w byte_5AB0-Ani_obj8B
00005F28 0500 FC01                  byte_5AA8:	dc.b 5,	0, $FC,	1
00005F2C 0502 FC03                  byte_5AAC:	dc.b 5,	2, $FC,	3
00005F30 0704 0506 0504 0506 0504+  byte_5AB0:	dc.b 7,	4, 5, 6, 5, 4, 5, 6, 5,	4, 5, 6, 5, 7, 5, 6, 5,	$FF
00005F42                            		even
00005F42                            		even
00005F42                            
00005F42                            ; ===========================================================================
00005F42                            ; ---------------------------------------------------------------------------
00005F42                            ; Object 8C - chaos emeralds on	the "TRY AGAIN"	screen
00005F42                            ; ---------------------------------------------------------------------------
00005F42                            
00005F42                            Obj8C:					; XREF: Obj_Index
00005F42 7000                       		moveq	#0,d0
00005F44 1028 0024                  		move.b	$24(a0),d0
00005F48 323B 0000                  		move.w	Obj8C_Index(pc,d0.w),d1
00005F4C 4EBB 1000                  		jsr	Obj8C_Index(pc,d1.w)
00005F50 4EF9 0000 0000             		jmp	DisplaySprite
00005F56                            ; ===========================================================================
00005F56 0000                       Obj8C_Index:	dc.w Obj8C_Main-Obj8C_Index
00005F58 0000                       		dc.w Obj8C_Move-Obj8C_Index
00005F5A                            ; ===========================================================================
00005F5A                            
00005F5A                            Obj8C_Main:				; XREF: Obj8C_Index
00005F5A 2248                       		movea.l	a0,a1
00005F5C 7400                       		moveq	#0,d2
00005F5E 7600                       		moveq	#0,d3
00005F60 7205                       		moveq	#5,d1
00005F62 9238 FE57                  		sub.b	($FFFFFE57).w,d1
00005F66                            
00005F66                            Obj8C_MakeEms:				; XREF: loc_5B42
00005F66 12BC 008C                  		move.b	#$8C,(a1)	; load emerald object
00005F6A 5429 0024                  		addq.b	#2,$24(a1)
00005F6E 237C 0000 5BFA 0004        		move.l	#Map_obj88,4(a1)
00005F76 337C 03C5 0002             		move.w	#$3C5,2(a1)
00005F7C 137C 0000 0001             		move.b	#0,1(a1)
00005F82 137C 0001 0018             		move.b	#1,$18(a1)
00005F88 337C 0104 0008             		move.w	#$104,8(a1)
00005F8E 337C 0120 0038             		move.w	#$120,$38(a1)
00005F94 337C 00EC 000A             		move.w	#$EC,$A(a1)
00005F9A 3369 000A 003A             		move.w	$A(a1),$3A(a1)
00005FA0 137C 001C 003C             		move.b	#$1C,$3C(a1)
00005FA6 47F8 FE58                  		lea	($FFFFFE58).w,a3
00005FAA                            
00005FAA                            Obj8C_ChkEms:
00005FAA 7000                       		moveq	#0,d0
00005FAC 1038 FE57                  		move.b	($FFFFFE57).w,d0
00005FB0 5340                       		subq.w	#1,d0
00005FB2 6500                       		bcs.s	loc_5B42
00005FB4                            
00005FB4                            Obj8C_ChkEmLoop:
00005FB4 B433 0000                  		cmp.b	(a3,d0.w),d2
00005FB8 6600                       		bne.s	loc_5B3E
00005FBA 5202                       		addq.b	#1,d2
00005FBC 60EC                       		bra.s	Obj8C_ChkEms
00005FBE                            ; ===========================================================================
00005FBE                            
00005FBE                            loc_5B3E:
00005FBE 51C8 FFF4                  		dbf	d0,Obj8C_ChkEmLoop ; checks which emeralds you have
00005FC2                            
00005FC2                            loc_5B42:
00005FC2 1342 001A                  		move.b	d2,$1A(a1)
00005FC6 5229 001A                  		addq.b	#1,$1A(a1)
00005FCA 5202                       		addq.b	#1,d2
00005FCC 137C 0080 0026             		move.b	#$80,$26(a1)
00005FD2 1343 001E                  		move.b	d3,$1E(a1)
00005FD6 1343 001F                  		move.b	d3,$1F(a1)
00005FDA 0643 000A                  		addi.w	#$A,d3
00005FDE 43E9 0040                  		lea	$40(a1),a1
00005FE2 51C9 FF82                  		dbf	d1,Obj8C_MakeEms
00005FE6                            
00005FE6                            Obj8C_Move:				; XREF: Obj8C_Index
00005FE6 4A68 003E                  		tst.w	$3E(a0)
00005FEA 6700                       		beq.s	locret_5BBA
00005FEC 4A28 001E                  		tst.b	$1E(a0)
00005FF0 6700                       		beq.s	loc_5B78
00005FF2 5328 001E                  		subq.b	#1,$1E(a0)
00005FF6 6600                       		bne.s	loc_5B80
00005FF8                            
00005FF8                            loc_5B78:
00005FF8 3028 003E                  		move.w	$3E(a0),d0
00005FFC D168 0026                  		add.w	d0,$26(a0)
00006000                            
00006000                            loc_5B80:
00006000 1028 0026                  		move.b	$26(a0),d0
00006004 6700                       		beq.s	loc_5B8C
00006006 0C00 0080                  		cmpi.b	#$80,d0
0000600A 6600                       		bne.s	loc_5B96
0000600C                            
0000600C                            loc_5B8C:
0000600C 4268 003E                  		clr.w	$3E(a0)
00006010 1168 001F 001E             		move.b	$1F(a0),$1E(a0)
00006016                            
00006016                            loc_5B96:
00006016 4EB9 0000 2C64             		jsr	(CalcSine).l
0000601C 7800                       		moveq	#0,d4
0000601E 1828 003C                  		move.b	$3C(a0),d4
00006022 C3C4                       		muls.w	d4,d1
00006024 E081                       		asr.l	#8,d1
00006026 C1C4                       		muls.w	d4,d0
00006028 E080                       		asr.l	#8,d0
0000602A D268 0038                  		add.w	$38(a0),d1
0000602E D068 003A                  		add.w	$3A(a0),d0
00006032 3141 0008                  		move.w	d1,8(a0)
00006036 3140 000A                  		move.w	d0,$A(a0)
0000603A                            
0000603A                            locret_5BBA:
0000603A 4E75                       		rts	
0000603C                            ; ===========================================================================
0000603C                            ; ---------------------------------------------------------------------------
0000603C                            ; Sprite mappings - Eggman on	the "TRY AGAIN"	and "END" screens
0000603C                            ; ---------------------------------------------------------------------------
0000603C                            Map_obj8B:
0000603C                            	include "_maps\obj8B.asm"
0000603C                            ; ---------------------------------------------------------------------------
0000603C                            ; Sprite mappings - Robotnik on	the "TRY AGAIN"	and "END" screens
0000603C                            ; ---------------------------------------------------------------------------
0000603C 0000 0000                  		dc.w byte_5BCC-Map_obj8B, byte_5BF5-Map_obj8B
00006040 0000 0000                  		dc.w byte_5C1E-Map_obj8B, byte_5C47-Map_obj8B
00006044 0000 0000                  		dc.w byte_5C70-Map_obj8B, byte_5CAD-Map_obj8B
00006048 0000 0000                  		dc.w byte_5CE0-Map_obj8B, byte_5D13-Map_obj8B
0000604C 08                         byte_5BCC:	dc.b 8
0000604D E905 0000 F0               		dc.b $E9, 5, 0,	0, $F0
00006052 F90C 0004 E0               		dc.b $F9, $C, 0, 4, $E0
00006057 E904 0008 00               		dc.b $E9, 4, 0,	8, 0
0000605C F10D 000A 00               		dc.b $F1, $D, 0, $A, 0
00006061 0106 0023 F0               		dc.b 1,	6, 0, $23, $F0
00006066 0106 0823 00               		dc.b 1,	6, 8, $23, 0
0000606B 1804 0029 EC               		dc.b $18, 4, 0,	$29, $EC
00006070 1804 0829 04               		dc.b $18, 4, 8,	$29, 4
00006075 08                         byte_5BF5:	dc.b 8
00006076 E80D 0012 E0               		dc.b $E8, $D, 0, $12, $E0
0000607B F808 001A E8               		dc.b $F8, 8, 0,	$1A, $E8
00006080 E805 0800 00               		dc.b $E8, 5, 8,	0, 0
00006085 F80C 0804 00               		dc.b $F8, $C, 8, 4, 0
0000608A 0006 001D F0               		dc.b 0,	6, 0, $1D, $F0
0000608F 0006 081D 00               		dc.b 0,	6, 8, $1D, 0
00006094 1804 0029 EC               		dc.b $18, 4, 0,	$29, $EC
00006099 1804 0829 04               		dc.b $18, 4, 8,	$29, 4
0000609E 08                         byte_5C1E:	dc.b 8
0000609F E904 0808 F0               		dc.b $E9, 4, 8,	8, $F0
000060A4 F10D 080A E0               		dc.b $F1, $D, 8, $A, $E0
000060A9 E905 0800 00               		dc.b $E9, 5, 8,	0, 0
000060AE F90C 0804 00               		dc.b $F9, $C, 8, 4, 0
000060B3 0106 0023 F0               		dc.b 1,	6, 0, $23, $F0
000060B8 0106 0823 00               		dc.b 1,	6, 8, $23, 0
000060BD 1804 0029 EC               		dc.b $18, 4, 0,	$29, $EC
000060C2 1804 0829 04               		dc.b $18, 4, 8,	$29, 4
000060C7 08                         byte_5C47:	dc.b 8
000060C8 E805 0000 F0               		dc.b $E8, 5, 0,	0, $F0
000060CD F80C 0004 E0               		dc.b $F8, $C, 0, 4, $E0
000060D2 E80D 0812 00               		dc.b $E8, $D, 8, $12, 0
000060D7 F808 081A 00               		dc.b $F8, 8, 8,	$1A, 0
000060DC 0006 001D F0               		dc.b 0,	6, 0, $1D, $F0
000060E1 0006 081D 00               		dc.b 0,	6, 8, $1D, 0
000060E6 1804 0029 EC               		dc.b $18, 4, 0,	$29, $EC
000060EB 1804 0829 04               		dc.b $18, 4, 8,	$29, 4
000060F0 0C                         byte_5C70:	dc.b $C
000060F1 ED0A 002B E8               		dc.b $ED, $A, 0, $2B, $E8
000060F6 F500 0034 E0               		dc.b $F5, 0, 0,	$34, $E0
000060FB 0504 0035 F0               		dc.b 5,	4, 0, $35, $F0
00006100 0D08 0037 E8               		dc.b $D, 8, 0, $37, $E8
00006105 ED0A 082B 00               		dc.b $ED, $A, 8, $2B, 0
0000610A F500 0834 18               		dc.b $F5, 0, 8,	$34, $18
0000610F 0504 0835 00               		dc.b 5,	4, 8, $35, 0
00006114 0D08 0837 00               		dc.b $D, 8, 8, $37, 0
00006119 100D 0073 E0               		dc.b $10, $D, 0, $73, $E0
0000611E 100D 007B 00               		dc.b $10, $D, 0, $7B, 0
00006123 1C0C 005B E0               		dc.b $1C, $C, 0, $5B, $E0
00006128 1C0C 085B 00               		dc.b $1C, $C, 8, $5B, 0
0000612D 0A                         byte_5CAD:	dc.b $A
0000612E D207 003A F0               		dc.b $D2, 7, 0,	$3A, $F0
00006133 DA00 0042 E8               		dc.b $DA, 0, 0,	$42, $E8
00006138 F207 0043 F0               		dc.b $F2, 7, 0,	$43, $F0
0000613D D207 083A 00               		dc.b $D2, 7, 8,	$3A, 0
00006142 DA00 0842 10               		dc.b $DA, 0, 8,	$42, $10
00006147 F207 0843 00               		dc.b $F2, 7, 8,	$43, 0
0000614C 100D 0067 E8               		dc.b $10, $D, 0, $67, $E8
00006151 1005 006F 08               		dc.b $10, 5, 0,	$6F, 8
00006156 1C0C 005F E0               		dc.b $1C, $C, 0, $5F, $E0
0000615B 1C0C 085F 00               		dc.b $1C, $C, 8, $5F, 0
00006160 0A                         byte_5CE0:	dc.b $A
00006161 C40B 004B E8               		dc.b $C4, $B, 0, $4B, $E8
00006166 E408 0057 E8               		dc.b $E4, 8, 0,	$57, $E8
0000616B EC00 005A F0               		dc.b $EC, 0, 0,	$5A, $F0
00006170 C40B 084B 00               		dc.b $C4, $B, 8, $4B, 0
00006175 E408 0857 00               		dc.b $E4, 8, 8,	$57, 0
0000617A EC00 085A 08               		dc.b $EC, 0, 8,	$5A, 8
0000617F 100D 0067 E8               		dc.b $10, $D, 0, $67, $E8
00006184 1005 006F 08               		dc.b $10, 5, 0,	$6F, 8
00006189 1C0C 0063 E0               		dc.b $1C, $C, 0, $63, $E0
0000618E 1C0C 0863 00               		dc.b $1C, $C, 8, $63, 0
00006193 0C                         byte_5D13:	dc.b $C
00006194 F40A 002B E8               		dc.b $F4, $A, 0, $2B, $E8
00006199 FC00 0034 E0               		dc.b $FC, 0, 0,	$34, $E0
0000619E 0C04 0035 F0               		dc.b $C, 4, 0, $35, $F0
000061A3 1408 0037 E8               		dc.b $14, 8, 0,	$37, $E8
000061A8 F40A 082B 00               		dc.b $F4, $A, 8, $2B, 0
000061AD FC00 0834 18               		dc.b $FC, 0, 8,	$34, $18
000061B2 0C04 0835 00               		dc.b $C, 4, 8, $35, 0
000061B7 1408 0837 00               		dc.b $14, 8, 8,	$37, 0
000061BC 180C 0083 E0               		dc.b $18, $C, 0, $83, $E0
000061C1 180C 0087 00               		dc.b $18, $C, 0, $87, 0
000061C6 1C0C 005B E0               		dc.b $1C, $C, 0, $5B, $E0
000061CB 1C0C 085B 00               		dc.b $1C, $C, 8, $5B, 0
000061D0                            		even
000061D0                            		even
000061D0                            
000061D0                            ; ---------------------------------------------------------------------------
000061D0                            ; Ending sequence demos
000061D0                            ; ---------------------------------------------------------------------------
000061D0                            Demo_EndGHZ1:	incbin	demodata\e_ghz1.bin
000061FE                            		even
000061FE                            Demo_EndMZ:	incbin	demodata\e_mz.bin
0000623E                            		even
0000623E                            Demo_EndSYZ:	incbin	demodata\e_syz.bin
0000626E                            		even
0000626E                            Demo_EndLZ:	incbin	demodata\e_lz.bin
0000629E                            		even
0000629E                            Demo_EndSLZ:	incbin	demodata\e_slz.bin
000062BE                            		even
000062BE                            Demo_EndSBZ1:	incbin	demodata\e_sbz1.bin
000062DE                            		even
000062DE                            Demo_EndSBZ2:	incbin	demodata\e_sbz2.bin
0000630E                            		even
0000630E                            Demo_EndGHZ2:	incbin	demodata\e_ghz2.bin
0000633E                            		even
0000633E                            
0000633E                            ; ---------------------------------------------------------------------------
0000633E                            ; Subroutine to	load level boundaries and start	locations
0000633E                            ; ---------------------------------------------------------------------------
0000633E                            
0000633E                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000633E                            
0000633E                            
0000633E                            LevelSizeLoad:				; XREF: TitleScreen; Level; EndingSequence
0000633E 7000                       		moveq	#0,d0
00006340 11C0 F740                  		move.b	d0,($FFFFF740).w
00006344 11C0 F741                  		move.b	d0,($FFFFF741).w
00006348 11C0 F746                  		move.b	d0,($FFFFF746).w
0000634C 11C0 F748                  		move.b	d0,($FFFFF748).w
00006350 11C0 F742                  		move.b	d0,($FFFFF742).w
00006354 3038 FE10                  		move.w	($FFFFFE10).w,d0
00006358 ED08                       		lsl.b	#6,d0
0000635A E848                       		lsr.w	#4,d0
0000635C 3200                       		move.w	d0,d1
0000635E D040                       		add.w	d0,d0
00006360 D041                       		add.w	d1,d0
00006362 41FB 0000                  		lea	LevelSizeArray(pc,d0.w),a0 ; load level	boundaries
00006366 3018                       		move.w	(a0)+,d0
00006368 31C0 F730                  		move.w	d0,($FFFFF730).w
0000636C 2018                       		move.l	(a0)+,d0
0000636E 21C0 F728                  		move.l	d0,($FFFFF728).w
00006372 21C0 F720                  		move.l	d0,($FFFFF720).w
00006376 2018                       		move.l	(a0)+,d0
00006378 21C0 F72C                  		move.l	d0,($FFFFF72C).w
0000637C 21C0 F724                  		move.l	d0,($FFFFF724).w
00006380 3038 F728                  		move.w	($FFFFF728).w,d0
00006384 0640 0240                  		addi.w	#$240,d0
00006388 31C0 F732                  		move.w	d0,($FFFFF732).w
0000638C 31FC 1010 F74A             		move.w	#$1010,($FFFFF74A).w
00006392 3018                       		move.w	(a0)+,d0
00006394 31C0 F73E                  		move.w	d0,($FFFFF73E).w
00006398 6000 0000                  		bra.w	LevSz_ChkLamp
0000639C                            ; ===========================================================================
0000639C                            ; ---------------------------------------------------------------------------
0000639C                            ; Level size array and ending start location array
0000639C                            ; ---------------------------------------------------------------------------
0000639C                            LevelSizeArray:        ; GHZ
0000639C 0004 0000 24BF 0000 0300+          dc.w $0004, $0000, $24BF, $0000, $0300, $0060 ; Act 1
000063A8 0004 0000 1EBF 0000 0300+          dc.w $0004, $0000, $1EBF, $0000, $0300, $0060 ; Act 2
000063B4 0004 0000 2960 0000 0300+          dc.w $0004, $0000, $2960, $0000, $0300, $0060 ; Act 3
000063C0 0004 0000 2ABF 0000 0300+          dc.w $0004, $0000, $2ABF, $0000, $0300, $0060 ; Act 4 (Unused)
000063CC                                    ; LZ
000063CC 0004 0000 19BF 0000 0530+          dc.w $0004, $0000, $19BF, $0000, $0530, $0060 ; Act 1
000063D8 0004 0000 10AF 0000 0720+          dc.w $0004, $0000, $10AF, $0000, $0720, $0060 ; Act 2
000063E4 0004 0000 1D00 FF00 0800+          dc.w $0004, $0000, $1D00, $FF00, $0800, $0060 ; Act 3
000063F0 0004 0000 20BF 0000 0720+          dc.w $0004, $0000, $20BF, $0000, $0720, $0060 ; Act 4 (Scrap Brain Act 3)
000063FC                                    ; MZ
000063FC 0004 0000 17BF 0000 01D0+          dc.w $0004, $0000, $17BF, $0000, $01D0, $0060 ; Act 1
00006408 0004 0000 17BF 0000 0520+          dc.w $0004, $0000, $17BF, $0000, $0520, $0060 ; Act 2
00006414 0004 0000 1800 0000 0720+          dc.w $0004, $0000, $1800, $0000, $0720, $0060 ; Act 3
00006420 0004 0000 16BF 0000 0720+          dc.w $0004, $0000, $16BF, $0000, $0720, $0060 ; Act 4 (Unused)
0000642C                                    ; SLZ
0000642C 0004 0000 1FBF 0000 0640+          dc.w $0004, $0000, $1FBF, $0000, $0640, $0060 ; Act 1
00006438 0004 0000 1FBF 0000 0640+          dc.w $0004, $0000, $1FBF, $0000, $0640, $0060 ; Act 2
00006444 0004 0000 2000 0000 06C0+          dc.w $0004, $0000, $2000, $0000, $06C0, $0060 ; Act 3
00006450 0004 0000 3EC0 0000 0720+          dc.w $0004, $0000, $3EC0, $0000, $0720, $0060 ; Act 4 (Unused)
0000645C                                    ; SYZ
0000645C 0004 0000 22C0 0000 0420+          dc.w $0004, $0000, $22C0, $0000, $0420, $0060 ; Act 1
00006468 0004 0000 28C0 0000 0520+          dc.w $0004, $0000, $28C0, $0000, $0520, $0060 ; Act 2
00006474 0004 0000 2C00 0000 0620+          dc.w $0004, $0000, $2C00, $0000, $0620, $0060 ; Act 3
00006480 0004 0000 2EC0 0000 0620+          dc.w $0004, $0000, $2EC0, $0000, $0620, $0060 ; Act 4 (Unused)
0000648C                                    ; SBZ
0000648C 0004 0000 21C0 0000 0720+          dc.w $0004, $0000, $21C0, $0000, $0720, $0060 ; Act 1
00006498 0004 0000 1E40 FF00 0800+          dc.w $0004, $0000, $1E40, $FF00, $0800, $0060 ; Act 2
000064A4 0004 2080 2460 0510 0510+          dc.w $0004, $2080, $2460, $0510, $0510, $0060 ; Act 3 (Final Zone)
000064B0 0004 0000 3EC0 0000 0720+          dc.w $0004, $0000, $3EC0, $0000, $0720, $0060 ; Act 4 (Unused)
000064BC                                    ; Ending
000064BC 0004 0000 0500 0110 0110+          dc.w $0004, $0000, $0500, $0110, $0110, $0060 ; Act 1 (Good Ending)
000064C8 0004 0000 0DC0 0110 0110+          dc.w $0004, $0000, $0DC0, $0110, $0110, $0060 ; Act 2 (Bad Ending)
000064D4 0004 0000 2FFF 0000 0320+          dc.w $0004, $0000, $2FFF, $0000, $0320, $0060 ; Act 3 (Unused)
000064E0 0004 0000 2FFF 0000 0320+          dc.w $0004, $0000, $2FFF, $0000, $0320, $0060 ; Act 4 (Unused)
000064EC                                    even
000064EC                            EndingStLocArray:
000064EC                            		incbin	misc\sloc_end.bin
0000650C                            		even
0000650C                            
0000650C                            ; ===========================================================================
0000650C                            
0000650C                            LevSz_ChkLamp:				; XREF: LevelSizeLoad
0000650C 4A38 FE30                  		tst.b	($FFFFFE30).w	; have any lampposts been hit?
00006510 6700                       		beq.s	LevSz_StartLoc	; if not, branch
00006512 4EB9 0000 0000             		jsr	Obj79_LoadInfo
00006518 3238 D008                  		move.w	($FFFFD008).w,d1
0000651C 3038 D00C                  		move.w	($FFFFD00C).w,d0
00006520 6000                       		bra.s	loc_60D0
00006522                            ; ===========================================================================
00006522                            
00006522                            LevSz_StartLoc:				; XREF: LevelSizeLoad
00006522 3038 FE10                  		move.w	($FFFFFE10).w,d0
00006526 ED08                       		lsl.b	#6,d0
00006528 E848                       		lsr.w	#4,d0
0000652A 43FB 0000                  		lea	StartLocArray(pc,d0.w),a1 ; load Sonic's start location
0000652E 4A78 FFF0                  		tst.w	($FFFFFFF0).w	; is demo mode on?
00006532 6A00                       		bpl.s	LevSz_SonicPos	; if not, branch
00006534 3038 FFF4                  		move.w	($FFFFFFF4).w,d0
00006538 5340                       		subq.w	#1,d0
0000653A E548                       		lsl.w	#2,d0
0000653C 43FB 00AE                  		lea	EndingStLocArray(pc,d0.w),a1 ; load Sonic's start location
00006540                            
00006540                            LevSz_SonicPos:
00006540 7200                       		moveq	#0,d1
00006542 3219                       		move.w	(a1)+,d1
00006544 31C1 D008                  		move.w	d1,($FFFFD008).w ; set Sonic's position on x-axis
00006548 7000                       		moveq	#0,d0
0000654A 3011                       		move.w	(a1),d0
0000654C 31C0 D00C                  		move.w	d0,($FFFFD00C).w ; set Sonic's position on y-axis
00006550                            
00006550                            loc_60D0:				; XREF: LevSz_ChkLamp
00006550 0441 00A0                  		subi.w	#$A0,d1
00006554 6400                       		bcc.s	loc_60D8
00006556 7200                       		moveq	#0,d1
00006558                            
00006558                            loc_60D8:
00006558 3438 F72A                  		move.w	($FFFFF72A).w,d2
0000655C B242                       		cmp.w	d2,d1
0000655E 6500                       		bcs.s	loc_60E2
00006560 3202                       		move.w	d2,d1
00006562                            
00006562                            loc_60E2:
00006562 31C1 F700                  		move.w	d1,($FFFFF700).w
00006566 0440 0060                  		subi.w	#$60,d0
0000656A 6400                       		bcc.s	loc_60EE
0000656C 7000                       		moveq	#0,d0
0000656E                            
0000656E                            loc_60EE:
0000656E B078 F72E                  		cmp.w	($FFFFF72E).w,d0
00006572 6D00                       		blt.s	loc_60F8
00006574 3038 F72E                  		move.w	($FFFFF72E).w,d0
00006578                            
00006578                            loc_60F8:
00006578 31C0 F704                  		move.w	d0,($FFFFF704).w
0000657C 6100 0000                  		bsr.w	BgScrollSpeed
00006580 7000                       		moveq	#0,d0
00006582 1038 FE10                  		move.b	($FFFFFE10).w,d0
00006586 E508                       		lsl.b	#2,d0
00006588 21FB 0000 F7AC             		move.l	LoopTileNums(pc,d0.w),($FFFFF7AC).w
0000658E 6000 0000                  		bra.w	LevSz_Unk
00006592                            ; ===========================================================================
00006592                            ; ---------------------------------------------------------------------------
00006592                            ; Sonic	start location array
00006592                            ; ---------------------------------------------------------------------------
00006592                            StartLocArray:	incbin	misc\sloc_lev.bin
00006602                            		even
00006602                            
00006602                            ; ---------------------------------------------------------------------------
00006602                            ; Which	256x256	tiles contain loops or roll-tunnels
00006602                            ; ---------------------------------------------------------------------------
00006602                            ; Format - 4 bytes per zone, referring to which 256x256 evoke special events:
00006602                            ; loop,	loop, tunnel, tunnel
00006602                            ; ---------------------------------------------------------------------------
00006602                            LoopTileNums:	incbin	misc\loopnums.bin
0000661E                            		even
0000661E                            
0000661E                            ; ===========================================================================
0000661E                            
0000661E                            LevSz_Unk:				; XREF: LevelSizeLoad
0000661E 7000                       		moveq	#0,d0
00006620 1038 FE10                  		move.b	($FFFFFE10).w,d0
00006624 E748                       		lsl.w	#3,d0
00006626 43FB 0000                  		lea	dword_61B4(pc,d0.w),a1
0000662A 45F8 F7F0                  		lea	($FFFFF7F0).w,a2
0000662E 24D9                       		move.l	(a1)+,(a2)+
00006630 24D9                       		move.l	(a1)+,(a2)+
00006632 4E75                       		rts	
00006634                            ; End of function LevelSizeLoad
00006634                            
00006634                            ; ===========================================================================
00006634 0070 0100 0100 0100        dword_61B4:	dc.l $700100, $1000100
0000663C 0800 0100 0100 0000        		dc.l $8000100, $1000000
00006644 0800 0100 0100 0000        		dc.l $8000100, $1000000
0000664C 0800 0100 0100 0000        		dc.l $8000100, $1000000
00006654 0800 0100 0100 0000        		dc.l $8000100, $1000000
0000665C 0800 0100 0100 0000        		dc.l $8000100, $1000000
00006664 0070 0100 0100 0100        		dc.l $700100, $1000100
0000666C                            
0000666C                            ; ---------------------------------------------------------------------------
0000666C                            ; Subroutine to	set scroll speed of some backgrounds
0000666C                            ; ---------------------------------------------------------------------------
0000666C                            
0000666C                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000666C                            
0000666C                            
0000666C                            BgScrollSpeed:				; XREF: LevelSizeLoad
0000666C 4A38 FE30                  		tst.b	($FFFFFE30).w
00006670 6600                       		bne.s	loc_6206
00006672 31C0 F70C                  		move.w	d0,($FFFFF70C).w
00006676 31C0 F714                  		move.w	d0,($FFFFF714).w
0000667A 31C1 F708                  		move.w	d1,($FFFFF708).w
0000667E 31C1 F710                  		move.w	d1,($FFFFF710).w
00006682 31C1 F718                  		move.w	d1,($FFFFF718).w
00006686                            
00006686                            loc_6206:
00006686 7400                       		moveq	#0,d2
00006688 1438 FE10                  		move.b	($FFFFFE10).w,d2
0000668C D442                       		add.w	d2,d2
0000668E 343B 2000                  		move.w	BgScroll_Index(pc,d2.w),d2
00006692 4EFB 2000                  		jmp	BgScroll_Index(pc,d2.w)
00006696                            ; End of function BgScrollSpeed
00006696                            
00006696                            ; ===========================================================================
00006696 0000 0000                  BgScroll_Index:	dc.w BgScroll_GHZ-BgScroll_Index, BgScroll_LZ-BgScroll_Index
0000669A 0000 0000                  		dc.w BgScroll_MZ-BgScroll_Index, BgScroll_SLZ-BgScroll_Index
0000669E 0000 0000                  		dc.w BgScroll_SYZ-BgScroll_Index, BgScroll_SBZ-BgScroll_Index
000066A2 0000                       		dc.w BgScroll_End-BgScroll_Index
000066A4                            ; ===========================================================================
000066A4                            
000066A4                            BgScroll_GHZ:				; XREF: BgScroll_Index
000066A4 6000 0000                  		bra.w	Deform_GHZ
000066A8                            ; ===========================================================================
000066A8                            
000066A8                            BgScroll_LZ:				; XREF: BgScroll_Index
000066A8 E280                       		asr.l	#1,d0
000066AA 31C0 F70C                  		move.w	d0,($FFFFF70C).w
000066AE 4E75                       		rts	
000066B0                            ; ===========================================================================
000066B0                            
000066B0                            BgScroll_MZ:				; XREF: BgScroll_Index
000066B0 4E75                       		rts	
000066B2                            ; ===========================================================================
000066B2                            
000066B2                            BgScroll_SLZ:				; XREF: BgScroll_Index
000066B2 E280                       		asr.l	#1,d0
000066B4 0640 00C0                  		addi.w	#$C0,d0
000066B8 31C0 F70C                  		move.w	d0,($FFFFF70C).w
000066BC 4E75                       		rts	
000066BE                            ; ===========================================================================
000066BE                            
000066BE                            BgScroll_SYZ:				; XREF: BgScroll_Index
000066BE E980                       		asl.l	#4,d0
000066C0 2400                       		move.l	d0,d2
000066C2 E380                       		asl.l	#1,d0
000066C4 D082                       		add.l	d2,d0
000066C6 E080                       		asr.l	#8,d0
000066C8 31C0 F70C                  		move.w	d0,($FFFFF70C).w
000066CC 31C0 F714                  		move.w	d0,($FFFFF714).w
000066D0 4E75                       		rts	
000066D2                            ; ===========================================================================
000066D2                            
000066D2                            BgScroll_SBZ:				; XREF: BgScroll_Index
000066D2 E980                       		asl.l	#4,d0
000066D4 E380                       		asl.l	#1,d0
000066D6 E080                       		asr.l	#8,d0
000066D8 31C0 F70C                  		move.w	d0,($FFFFF70C).w
000066DC 4E75                       		rts	
000066DE                            ; ===========================================================================
000066DE                            
000066DE                            BgScroll_End:				; XREF: BgScroll_Index
000066DE 31FC 001E F70C             		move.w	#$1E,($FFFFF70C).w
000066E4 31FC 001E F714             		move.w	#$1E,($FFFFF714).w
000066EA 4E75                       		rts	
000066EC                            ; ===========================================================================
000066EC 31FC 00A8 F708             		move.w	#$A8,($FFFFF708).w
000066F2 31FC 001E F70C             		move.w	#$1E,($FFFFF70C).w
000066F8 31FC FFC0 F710             		move.w	#-$40,($FFFFF710).w
000066FE 31FC 001E F714             		move.w	#$1E,($FFFFF714).w
00006704 4E75                       		rts
00006706                            
00006706                            ; ---------------------------------------------------------------------------
00006706                            ; Background layer deformation subroutines
00006706                            ; ---------------------------------------------------------------------------
00006706                            
00006706                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00006706                            
00006706                            
00006706                            DeformBgLayer:				; XREF: TitleScreen; Level; EndingSequence
00006706 4A38 F744                  		tst.b	($FFFFF744).w
0000670A 6700                       		beq.s	loc_628E
0000670C 4E75                       		rts	
0000670E                            ; ===========================================================================
0000670E                            
0000670E                            loc_628E:
0000670E 4278 F754                  		clr.w	($FFFFF754).w
00006712 4278 F756                  		clr.w	($FFFFF756).w
00006716 4278 F758                  		clr.w	($FFFFF758).w
0000671A 4278 F75A                  		clr.w	($FFFFF75A).w
0000671E 6100 0000                  		bsr.w	ScrollHoriz
00006722 6100 0000                  		bsr.w	ScrollVertical
00006726 6100 0000                  		bsr.w	DynScrResizeLoad
0000672A 31F8 F700 F61A             		move.w	($FFFFF700).w,($FFFFF61A).w
00006730 31F8 F704 F616             		move.w	($FFFFF704).w,($FFFFF616).w
00006736 31F8 F708 F61C             		move.w	($FFFFF708).w,($FFFFF61C).w
0000673C 31F8 F70C F618             		move.w	($FFFFF70C).w,($FFFFF618).w
00006742 31F8 F718 F620             		move.w	($FFFFF718).w,($FFFFF620).w
00006748 31F8 F71C F61E             		move.w	($FFFFF71C).w,($FFFFF61E).w
0000674E 7000                       		moveq	#0,d0
00006750 1038 FE10                  		move.b	($FFFFFE10).w,d0
00006754 D040                       		add.w	d0,d0
00006756 303B 0000                  		move.w	Deform_Index(pc,d0.w),d0
0000675A 4EFB 0000                  		jmp	Deform_Index(pc,d0.w)
0000675E                            ; End of function DeformBgLayer
0000675E                            
0000675E                            ; ===========================================================================
0000675E                            ; ---------------------------------------------------------------------------
0000675E                            ; Offset index for background layer deformation	code
0000675E                            ; ---------------------------------------------------------------------------
0000675E 0000 0000                  Deform_Index:	dc.w Deform_GHZ-Deform_Index, Deform_LZ-Deform_Index
00006762 0000 0000                  		dc.w Deform_MZ-Deform_Index, Deform_SLZ-Deform_Index
00006766 0000 0000                  		dc.w Deform_SYZ-Deform_Index, Deform_SBZ-Deform_Index
0000676A 0000                       		dc.w Deform_GHZ-Deform_Index
0000676C                            ; ---------------------------------------------------------------------------
0000676C                            ; Green	Hill Zone background layer deformation code
0000676C                            ; ---------------------------------------------------------------------------
0000676C                            
0000676C                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000676C                            
0000676C                            
0000676C                            Deform_GHZ:				; XREF: Deform_Index
0000676C 3838 F73A                  		move.w	($FFFFF73A).w,d4
00006770 48C4                       		ext.l	d4
00006772 EB84                       		asl.l	#5,d4
00006774 2204                       		move.l	d4,d1
00006776 E384                       		asl.l	#1,d4
00006778 D881                       		add.l	d1,d4
0000677A 7A00                       		moveq	#0,d5
0000677C 6100 0000                  		bsr.w	ScrollBlock1
00006780 6100 0000                  		bsr.w	ScrollBlock4
00006784 43F8 CC00                  		lea	($FFFFCC00).w,a1
00006788 3038 F704                  		move.w	($FFFFF704).w,d0
0000678C 0240 07FF                  		andi.w	#$7FF,d0
00006790 EA48                       		lsr.w	#5,d0
00006792 4440                       		neg.w	d0
00006794 0640 0026                  		addi.w	#$26,d0
00006798 31C0 F714                  		move.w	d0,($FFFFF714).w
0000679C 3800                       		move.w	d0,d4
0000679E 6100 0000                  		bsr.w	ScrollBlock3
000067A2 31F8 F70C F618             		move.w	($FFFFF70C).w,($FFFFF618).w
000067A8 323C 006F                  		move.w	#$6F,d1
000067AC 9244                       		sub.w	d4,d1
000067AE 3038 F700                  		move.w	($FFFFF700).w,d0
000067B2 0C38 0004 F600             		cmpi.b	#4,($FFFFF600).w
000067B8 6600                       		bne.s	loc_633C
000067BA 7000                       		moveq	#0,d0
000067BC                            
000067BC                            loc_633C:
000067BC 4440                       		neg.w	d0
000067BE 4840                       		swap	d0
000067C0 3038 F708                  		move.w	($FFFFF708).w,d0
000067C4 4440                       		neg.w	d0
000067C6                            
000067C6                            loc_6346:
000067C6 22C0                       		move.l	d0,(a1)+
000067C8 51C9 FFFC                  		dbf	d1,loc_6346
000067CC 323C 0027                  		move.w	#$27,d1
000067D0 3038 F710                  		move.w	($FFFFF710).w,d0
000067D4 4440                       		neg.w	d0
000067D6                            
000067D6                            loc_6356:
000067D6 22C0                       		move.l	d0,(a1)+
000067D8 51C9 FFFC                  		dbf	d1,loc_6356
000067DC 3038 F710                  		move.w	($FFFFF710).w,d0
000067E0 0640 0000                  		addi.w	#0,d0
000067E4 3438 F700                  		move.w	($FFFFF700).w,d2
000067E8 0642 FE00                  		addi.w	#-$200,d2
000067EC 9440                       		sub.w	d0,d2
000067EE 48C2                       		ext.l	d2
000067F0 E182                       		asl.l	#8,d2
000067F2 85FC 0068                  		divs.w	#$68,d2
000067F6 48C2                       		ext.l	d2
000067F8 E182                       		asl.l	#8,d2
000067FA 7600                       		moveq	#0,d3
000067FC 3600                       		move.w	d0,d3
000067FE 323C 0047                  		move.w	#$47,d1
00006802 D244                       		add.w	d4,d1
00006804                            
00006804                            loc_6384:
00006804 3003                       		move.w	d3,d0
00006806 4440                       		neg.w	d0
00006808 22C0                       		move.l	d0,(a1)+
0000680A 4843                       		swap	d3
0000680C D682                       		add.l	d2,d3
0000680E 4843                       		swap	d3
00006810 51C9 FFF2                  		dbf	d1,loc_6384
00006814 4E75                       		rts	
00006816                            ; End of function Deform_GHZ
00006816                            
00006816                            ; ---------------------------------------------------------------------------
00006816                            ; Labyrinth Zone background layer deformation code
00006816                            ; ---------------------------------------------------------------------------
00006816                            
00006816                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00006816                            
00006816                            
00006816                            Deform_LZ:				; XREF: Deform_Index
00006816 3838 F73A                  		move.w	($FFFFF73A).w,d4
0000681A 48C4                       		ext.l	d4
0000681C EF84                       		asl.l	#7,d4
0000681E 3A38 F73C                  		move.w	($FFFFF73C).w,d5
00006822 48C5                       		ext.l	d5
00006824 EF85                       		asl.l	#7,d5
00006826 6100 0000                  		bsr.w	ScrollBlock1
0000682A 31F8 F70C F618             		move.w	($FFFFF70C).w,($FFFFF618).w
00006830 43F8 CC00                  		lea	($FFFFCC00).w,a1
00006834 323C 00DF                  		move.w	#$DF,d1
00006838 3038 F700                  		move.w	($FFFFF700).w,d0
0000683C 4440                       		neg.w	d0
0000683E 4840                       		swap	d0
00006840 3038 F708                  		move.w	($FFFFF708).w,d0
00006844 4440                       		neg.w	d0
00006846                            
00006846                            loc_63C6:
00006846 22C0                       		move.l	d0,(a1)+
00006848 51C9 FFFC                  		dbf	d1,loc_63C6
0000684C 3038 F646                  		move.w	($FFFFF646).w,d0
00006850 9078 F704                  		sub.w	($FFFFF704).w,d0
00006854 4E75                       		rts	
00006856                            ; End of function Deform_LZ
00006856                            
00006856                            ; ---------------------------------------------------------------------------
00006856                            ; Marble Zone background layer deformation code
00006856                            ; ---------------------------------------------------------------------------
00006856                            
00006856                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00006856                            
00006856                            
00006856                            Deform_MZ:				; XREF: Deform_Index
00006856 3838 F73A                  		move.w	($FFFFF73A).w,d4
0000685A 48C4                       		ext.l	d4
0000685C ED84                       		asl.l	#6,d4
0000685E 2204                       		move.l	d4,d1
00006860 E384                       		asl.l	#1,d4
00006862 D881                       		add.l	d1,d4
00006864 7A00                       		moveq	#0,d5
00006866 6100 0000                  		bsr.w	ScrollBlock1
0000686A 303C 0200                  		move.w	#$200,d0
0000686E 3238 F704                  		move.w	($FFFFF704).w,d1
00006872 0441 01C8                  		subi.w	#$1C8,d1
00006876 6500                       		bcs.s	loc_6402
00006878 3401                       		move.w	d1,d2
0000687A D241                       		add.w	d1,d1
0000687C D242                       		add.w	d2,d1
0000687E E441                       		asr.w	#2,d1
00006880 D041                       		add.w	d1,d0
00006882                            
00006882                            loc_6402:
00006882 31C0 F714                  		move.w	d0,($FFFFF714).w
00006886 6100 0000                  		bsr.w	ScrollBlock3
0000688A 31F8 F70C F618             		move.w	($FFFFF70C).w,($FFFFF618).w
00006890 43F8 CC00                  		lea	($FFFFCC00).w,a1
00006894 323C 00DF                  		move.w	#$DF,d1
00006898 3038 F700                  		move.w	($FFFFF700).w,d0
0000689C 4440                       		neg.w	d0
0000689E 4840                       		swap	d0
000068A0 3038 F708                  		move.w	($FFFFF708).w,d0
000068A4 4440                       		neg.w	d0
000068A6                            
000068A6                            loc_6426:
000068A6 22C0                       		move.l	d0,(a1)+
000068A8 51C9 FFFC                  		dbf	d1,loc_6426
000068AC 4E75                       		rts	
000068AE                            ; End of function Deform_MZ
000068AE                            
000068AE                            ; ---------------------------------------------------------------------------
000068AE                            ; Star Light Zone background layer deformation code
000068AE                            ; ---------------------------------------------------------------------------
000068AE                            
000068AE                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000068AE                            
000068AE                            
000068AE                            Deform_SLZ:				; XREF: Deform_Index
000068AE 3838 F73A                  		move.w	($FFFFF73A).w,d4
000068B2 48C4                       		ext.l	d4
000068B4 EB84                       		asl.l	#5,d4
000068B6 2204                       		move.l	d4,d1
000068B8 E384                       		asl.l	#1,d4
000068BA D881                       		add.l	d1,d4
000068BC 7A00                       		moveq	#0,d5
000068BE 6100 0000                  		bsr.w	ScrollBlock1
000068C2 6100 0000                  		bsr.w	ScrollBlock3
000068C6 43F8 CC00                  		lea	($FFFFCC00).w,a1
000068CA                            	;	move.w	($FFFFF704).w,d0
000068CA                            	;	andi.w	#$7FF,d0
000068CA EA48                       		lsr.w	#5,d0
000068CC 4440                       		neg.w	d0
000068CE 0640 0026                  		addi.w	#$26,d0
000068D2 31C0 F714                  		move.w	d0,($FFFFF714).w
000068D6 3800                       		move.w	d0,d4
000068D8                            	;	bsr.w	ScrollBlock3
000068D8 31FC FFFA F70C                     move.w #-$6,($FFFFF70C).w ; lock the background vertically in place
000068DE 43F8 CC00                  		lea	($FFFFCC00).w,a1	; load beginning address of horizontal scroll buffer to a1
000068E2                            
000068E2 3038 F700                  		move.w	($FFFFF700).w,d0	; load FG screen's X position
000068E6 4440                       		neg.w	d0			; negate (positive to negative)
000068E8 4840                       		swap	d0			; send to the left side of d0
000068EA 3038 F708                  		move.w	($FFFFF708).w,d0	; load BG screen's X position
000068EE 45F8 A800                  		lea	($FFFFA800).w,a2
000068F2 069A 0000 5000             		addi.l	#$5000,(a2)+
000068F8 069A 0000 C000             		addi.l	#$C000,(a2)+
000068FE 3038 A800                  		move.w	($FFFFA800).w,d0
00006902 4440                       		neg.w	d0			; negate (positive to negative)
00006904 E240                       		asr.w	#1,d0			; divide by 2 (Slow down the scroll position)
00006906 323C 0013                  		move.w	#20-1,d1		; set number of scan lines to dump (minus 1 for dbf)
0000690A                            slz_DeformLoop_1:
0000690A 22C0                       		move.l	d0,(a1)+		; dump both the FG and BG scanline position to buffer
0000690C 51C9 FFFC                  		dbf	d1,slz_DeformLoop_1	; repeat d1 number of scanlines
00006910                            
00006910 3038 F700                  		move.w	($FFFFF700).w,d0	; load FG screen's X position
00006914 4440                       		neg.w	d0			; negate (positive to negative)
00006916 4840                       		swap	d0			; send to the left side of d0
00006918 3038 F708                  		move.w	($FFFFF708).w,d0	; load BG screen's X position
0000691C 45F8 A800                  		lea	($FFFFA800).w,a2
00006920 069A 0000 5000             		addi.l	#$5000,(a2)+
00006926 069A 0000 C000             		addi.l	#$C000,(a2)+
0000692C 3038 A800                  		move.w	($FFFFA800).w,d0
00006930 4440                       		neg.w	d0			; negate (positive to negative)
00006932 E440                       		asr.w	#2,d0			; divide by 4 (Slow down the scroll position)
00006934 323C 001A                  		move.w	#27-1,d1		; set number of scan lines to dump (minus 1 for dbf)
00006938                            slz_DeformLoop_2:
00006938 22C0                       		move.l	d0,(a1)+		; dump both the FG and BG scanline position to buffer
0000693A 51C9 FFFC                  		dbf	d1,slz_DeformLoop_2	; repeat d1 number of scanlines
0000693E                            
0000693E 3038 F700                  		move.w	($FFFFF700).w,d0	; load FG screen's X position
00006942 4440                       		neg.w	d0			; negate (positive to negative)
00006944 4840                       		swap	d0			; send to the left side of d0
00006946 3038 F708                  		move.w	($FFFFF708).w,d0	; load BG screen's X position
0000694A 45F8 A800                  		lea	($FFFFA800).w,a2
0000694E 069A 0000 5000             		addi.l	#$5000,(a2)+
00006954 069A 0000 C000             		addi.l	#$C000,(a2)+
0000695A 3038 A800                  		move.w	($FFFFA800).w,d0
0000695E 4440                       		neg.w	d0			; negate (positive to negative)
00006960 E640                       		asr.w	#3,d0			; divide by 8 (Slow down the scroll position)
00006962 323C 0011                  		move.w	#18-1,d1		; set number of scan lines to dump (minus 1 for dbf)
00006966                            slz_DeformLoop_3:
00006966 22C0                       		move.l	d0,(a1)+		; dump both the FG and BG scanline position to buffer
00006968 51C9 FFFC                  		dbf	d1,slz_DeformLoop_3	; repeat d1 number of scanlines
0000696C                            
0000696C 3038 F700                  		move.w	($FFFFF700).w,d0	; load FG screen's X position
00006970 4440                       		neg.w	d0			; negate (positive to negative)
00006972 4840                       		swap	d0			; send to the left side of d0
00006974 3038 F708                  		move.w	($FFFFF708).w,d0	; load BG screen's X position
00006978 45F8 A800                  		lea	($FFFFA800).w,a2
0000697C 069A 0000 5000             		addi.l	#$5000,(a2)+
00006982 069A 0000 C000             		addi.l	#$C000,(a2)+
00006988 3038 A800                  		move.w	($FFFFA800).w,d0
0000698C 4440                       		neg.w	d0			; negate (positive to negative)
0000698E E640                       		asr.w	#3,d0			; divide by 8 (Slow down the scroll position)
00006990 323C 0009                  		move.w	#10-1,d1		; set number of scan lines to dump (minus 1 for dbf)
00006994                            slz_DeformLoop_4:
00006994 22C0                       		move.l	d0,(a1)+		; dump both the FG and BG scanline position to buffer
00006996 51C9 FFFC                  		dbf	d1,slz_DeformLoop_4	; repeat d1 number of scanlines
0000699A                            
0000699A 3038 F700                  		move.w	($FFFFF700).w,d0	; load FG screen's X position
0000699E 4440                       		neg.w	d0			; negate (positive to negative)
000069A0 4840                       		swap	d0			; send to the left side of d0
000069A2 3038 F708                  		move.w	($FFFFF708).w,d0	; load BG screen's X position
000069A6 45F8 A800                  		lea	($FFFFA800).w,a2
000069AA 069A 0000 5000             		addi.l	#$5000,(a2)+
000069B0 069A 0000 C000             		addi.l	#$C000,(a2)+
000069B6 3038 A800                  		move.w	($FFFFA800).w,d0
000069BA 4440                       		neg.w	d0			; negate (positive to negative)
000069BC E840                       		asr.w	#4,d0			; divide by 16 (Slow down the scroll position)
000069BE 323C 000F                  		move.w	#16-1,d1		; set number of scan lines to dump (minus 1 for dbf)
000069C2                            slz_DeformLoop_5:
000069C2 22C0                       		move.l	d0,(a1)+		; dump both the FG and BG scanline position to buffer
000069C4 51C9 FFFC                  		dbf	d1,slz_DeformLoop_5	; repeat d1 number of scanlines
000069C8                            
000069C8 3038 F700                  		move.w	($FFFFF700).w,d0	; load FG screen's X position
000069CC 4440                       		neg.w	d0			; negate (positive to negative)
000069CE 4840                       		swap	d0			; send to the left side of d0
000069D0 3038 F708                  		move.w	($FFFFF708).w,d0	; load BG screen's X position
000069D4 4440                       		neg.w	d0			; negate (positive to negative)
000069D6 EA40                       		asr.w	#5,d0			; divide by 32 (Slow down the scroll position)
000069D8 323C 001C                  		move.w	#29-1,d1		; set number of scan lines to dump (minus 1 for dbf)
000069DC                            slz_DeformLoop_6:
000069DC 22C0                       		move.l	d0,(a1)+		; dump both the FG and BG scanline position to buffer
000069DE 51C9 FFFC                  		dbf	d1,slz_DeformLoop_6	; repeat d1 number of scanlines
000069E2                            
000069E2 3038 F700                  		move.w	($FFFFF700).w,d0	; load FG screen's X position
000069E6 4440                       		neg.w	d0			; negate (positive to negative)
000069E8 4840                       		swap	d0			; send to the left side of d0
000069EA 3038 F708                  		move.w	($FFFFF708).w,d0	; load BG screen's X position
000069EE 4440                       		neg.w	d0			; negate (positive to negative)
000069F0 EE40                       		asr.w	#7,d0			; divide by 128 (Slow down the scroll position)
000069F2 323C 0005                  		move.w	#6-1,d1		; set number of scan lines to dump (minus 1 for dbf)
000069F6                            slz_DeformLoop_7:
000069F6 22C0                       		move.l	d0,(a1)+		; dump both the FG and BG scanline position to buffer
000069F8 51C9 FFFC                  		dbf	d1,slz_DeformLoop_7	; repeat d1 number of scanlines
000069FC                            
000069FC 3038 F700                  		move.w	($FFFFF700).w,d0	; load FG screen's X position
00006A00 4440                       		neg.w	d0			; negate (positive to negative)
00006A02 4840                       		swap	d0			; send to the left side of d0
00006A04 3038 F708                  		move.w	($FFFFF708).w,d0	; load BG screen's X position
00006A08 4440                       		neg.w	d0			; negate (positive to negative)
00006A0A EC40                       		asr.w	#6,d0			; divide by 64 (Slow down the scroll position)
00006A0C 323C 0004                  		move.w	#5-1,d1		; set number of scan lines to dump (minus 1 for dbf)
00006A10                            slz_DeformLoop_8:
00006A10 22C0                       		move.l	d0,(a1)+		; dump both the FG and BG scanline position to buffer
00006A12 51C9 FFFC                  		dbf	d1,slz_DeformLoop_8	; repeat d1 number of scanlines
00006A16                            
00006A16 3038 F700                  		move.w	($FFFFF700).w,d0	; load FG screen's X position
00006A1A 4440                       		neg.w	d0			; negate (positive to negative)
00006A1C 4840                       		swap	d0			; send to the left side of d0
00006A1E 3038 F708                  		move.w	($FFFFF708).w,d0	; load BG screen's X position
00006A22 4440                       		neg.w	d0			; negate (positive to negative)
00006A24 EA40                       		asr.w	#5,d0			; divide by 32 (Slow down the scroll position)
00006A26 323C 0007                  		move.w	#8-1,d1		; set number of scan lines to dump (minus 1 for dbf)
00006A2A                            slz_DeformLoop_9:
00006A2A 22C0                       		move.l	d0,(a1)+		; dump both the FG and BG scanline position to buffer
00006A2C 51C9 FFFC                  		dbf	d1,slz_DeformLoop_9	; repeat d1 number of scanlines
00006A30                            
00006A30 3038 F700                  		move.w	($FFFFF700).w,d0	; load FG screen's X position
00006A34 4440                       		neg.w	d0			; negate (positive to negative)
00006A36 4840                       		swap	d0			; send to the left side of d0
00006A38 3038 F708                  		move.w	($FFFFF708).w,d0	; load BG screen's X position
00006A3C 4440                       		neg.w	d0			; negate (positive to negative)
00006A3E E840                       		asr.w	#4,d0			; divide by 16 (Slow down the scroll position)
00006A40 323C 0006                  		move.w	#7-1,d1		; set number of scan lines to dump (minus 1 for dbf)
00006A44                            slz_DeformLoop_10:
00006A44 22C0                       		move.l	d0,(a1)+		; dump both the FG and BG scanline position to buffer
00006A46 51C9 FFFC                  		dbf	d1,slz_DeformLoop_10	; repeat d1 number of scanlines
00006A4A                            
00006A4A 3038 F700                  		move.w	($FFFFF700).w,d0	; load FG screen's X position
00006A4E 4440                       		neg.w	d0			; negate (positive to negative)
00006A50 4840                       		swap	d0			; send to the left side of d0
00006A52 3038 F708                  		move.w	($FFFFF708).w,d0	; load BG screen's X position
00006A56 4440                       		neg.w	d0			; negate (positive to negative)
00006A58 E640                       		asr.w	#3,d0			; divide by 8 (Slow down the scroll position)
00006A5A 323C 0013                  		move.w	#20-1,d1		; set number of scan lines to dump (minus 1 for dbf)
00006A5E                            slz_DeformLoop_11:
00006A5E 22C0                       		move.l	d0,(a1)+		; dump both the FG and BG scanline position to buffer
00006A60 51C9 FFFC                  		dbf	d1,slz_DeformLoop_11	; repeat d1 number of scanlines
00006A64                            
00006A64 3038 F700                  		move.w	($FFFFF700).w,d0	; load FG screen's X position
00006A68 4440                       		neg.w	d0			; negate (positive to negative)
00006A6A 4840                       		swap	d0			; send to the left side of d0
00006A6C 3038 F708                  		move.w	($FFFFF708).w,d0	; load BG screen's X position
00006A70 4440                       		neg.w	d0			; negate (positive to negative)
00006A72 E440                       		asr.w	#2,d0			; divide by 4 (Slow down the scroll position)
00006A74 323C 0013                  		move.w	#20-1,d1		; set number of scan lines to dump (minus 1 for dbf)
00006A78                            slz_DeformLoop_12:
00006A78 22C0                       		move.l	d0,(a1)+		; dump both the FG and BG scanline position to buffer
00006A7A 51C9 FFFC                  		dbf	d1,slz_DeformLoop_12	; repeat d1 number of scanlines
00006A7E                            
00006A7E 3038 F700                  		move.w	($FFFFF700).w,d0	; load FG screen's X position
00006A82 4440                       		neg.w	d0			; negate (positive to negative)
00006A84 4840                       		swap	d0			; send to the left side of d0
00006A86 3038 F708                  		move.w	($FFFFF708).w,d0	; load BG screen's X position
00006A8A 4440                       		neg.w	d0			; negate (positive to negative)
00006A8C E240                       		asr.w	#1,d0			; divide by 2 (Slow down the scroll position)
00006A8E 323C 0031                  		move.w	#50-1,d1		; set number of scan lines to dump (minus 1 for dbf)
00006A92                            slz_DeformLoop_13:
00006A92 22C0                       		move.l	d0,(a1)+		; dump both the FG and BG scanline position to buffer
00006A94 51C9 FFFC                  		dbf	d1,slz_DeformLoop_13	; repeat d1 number of scanlines
00006A98 4E75                       		rts	
00006A9A                            ; End of function Deform_SLZ
00006A9A 4E75                       		rts	
00006A9C                            ; End of function Deform_SLZ_2
00006A9C                            
00006A9C                            ; ---------------------------------------------------------------------------
00006A9C                            ; Spring Yard Zone background layer deformation	code
00006A9C                            ; ---------------------------------------------------------------------------
00006A9C                            
00006A9C                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00006A9C                            
00006A9C                            
00006A9C                            Deform_SYZ:				; XREF: Deform_Index
00006A9C 3838 F73A                  		move.w	($FFFFF73A).w,d4
00006AA0 48C4                       		ext.l	d4
00006AA2 ED84                       		asl.l	#6,d4
00006AA4 3A38 F73C                  		move.w	($FFFFF73C).w,d5
00006AA8 48C5                       		ext.l	d5
00006AAA E985                       		asl.l	#4,d5
00006AAC 2205                       		move.l	d5,d1
00006AAE E385                       		asl.l	#1,d5
00006AB0 DA81                       		add.l	d1,d5
00006AB2 6100 0000                  		bsr.w	ScrollBlock1
00006AB6 31F8 F70C F618             		move.w	($FFFFF70C).w,($FFFFF618).w
00006ABC 43F8 CC00                  		lea	($FFFFCC00).w,a1
00006AC0 323C 00DF                  		move.w	#$DF,d1
00006AC4 3038 F700                  		move.w	($FFFFF700).w,d0
00006AC8 4440                       		neg.w	d0
00006ACA 4840                       		swap	d0
00006ACC 3038 F708                  		move.w	($FFFFF708).w,d0
00006AD0 4440                       		neg.w	d0
00006AD2                            
00006AD2                            loc_653C:
00006AD2 22C0                       		move.l	d0,(a1)+
00006AD4 51C9 FFFC                  		dbf	d1,loc_653C
00006AD8 4E75                       		rts	
00006ADA                            ; End of function Deform_SYZ
00006ADA                            
00006ADA                            ; ---------------------------------------------------------------------------
00006ADA                            ; Scrap	Brain Zone background layer deformation	code
00006ADA                            ; ---------------------------------------------------------------------------
00006ADA                            
00006ADA                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00006ADA                            
00006ADA                            
00006ADA                            Deform_SBZ:				; XREF: Deform_Index
00006ADA 3838 F73A                  		move.w	($FFFFF73A).w,d4
00006ADE 48C4                       		ext.l	d4
00006AE0 ED84                       		asl.l	#6,d4
00006AE2 3A38 F73C                  		move.w	($FFFFF73C).w,d5
00006AE6 48C5                       		ext.l	d5
00006AE8 E985                       		asl.l	#4,d5
00006AEA E385                       		asl.l	#1,d5
00006AEC 6100 0000                  		bsr.w	ScrollBlock1
00006AF0 31F8 F70C F618             		move.w	($FFFFF70C).w,($FFFFF618).w
00006AF6 43F8 CC00                  		lea	($FFFFCC00).w,a1
00006AFA 323C 00DF                  		move.w	#$DF,d1
00006AFE 3038 F700                  		move.w	($FFFFF700).w,d0
00006B02 4440                       		neg.w	d0
00006B04 4840                       		swap	d0
00006B06 3038 F708                  		move.w	($FFFFF708).w,d0
00006B0A 4440                       		neg.w	d0
00006B0C                            
00006B0C                            loc_6576:
00006B0C 22C0                       		move.l	d0,(a1)+
00006B0E 51C9 FFFC                  		dbf	d1,loc_6576
00006B12 4E75                       		rts	
00006B14                            ; End of function Deform_SBZ
00006B14                            
00006B14                            ; ---------------------------------------------------------------------------
00006B14                            ; Subroutine to	scroll the level horizontally as Sonic moves
00006B14                            ; ---------------------------------------------------------------------------
00006B14                            
00006B14                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00006B14                            
00006B14                            
00006B14                            ScrollHoriz:				; XREF: DeformBgLayer
00006B14 3838 F700                  		move.w	($FFFFF700).w,d4
00006B18 6100                       		bsr.s	ScrollHoriz2
00006B1A 3038 F700                  		move.w	($FFFFF700).w,d0
00006B1E 0240 0010                  		andi.w	#$10,d0
00006B22 1238 F74A                  		move.b	($FFFFF74A).w,d1
00006B26 B300                       		eor.b	d1,d0
00006B28 6600                       		bne.s	locret_65B0
00006B2A 0A38 0010 F74A             		eori.b	#$10,($FFFFF74A).w
00006B30 3038 F700                  		move.w	($FFFFF700).w,d0
00006B34 9044                       		sub.w	d4,d0
00006B36 6A00                       		bpl.s	loc_65AA
00006B38 08F8 0002 F754             		bset	#2,($FFFFF754).w
00006B3E 4E75                       		rts	
00006B40                            ; ===========================================================================
00006B40                            
00006B40                            loc_65AA:
00006B40 08F8 0003 F754             		bset	#3,($FFFFF754).w
00006B46                            
00006B46                            locret_65B0:
00006B46 4E75                       		rts	
00006B48                            ; End of function ScrollHoriz
00006B48                            
00006B48                            
00006B48                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00006B48                            
00006B48                            
00006B48                            ScrollHoriz2:				; XREF: ScrollHoriz
00006B48 3038 D008                  		move.w	($FFFFD008).w,d0
00006B4C 9078 F700                  		sub.w	($FFFFF700).w,d0
00006B50 0440 0090                  		subi.w	#$90,d0
00006B54 6500                       		bcs.s	loc_65F6
00006B56 0440 0010                  		subi.w	#$10,d0
00006B5A 6400                       		bcc.s	loc_65CC
00006B5C 4278 F73A                  		clr.w	($FFFFF73A).w
00006B60 4E75                       		rts	
00006B62                            ; ===========================================================================
00006B62                            
00006B62                            loc_65CC:
00006B62 0C40 0010                  		cmpi.w	#$10,d0
00006B66 6500                       		bcs.s	loc_65D6
00006B68 303C 0010                  		move.w	#$10,d0
00006B6C                            
00006B6C                            loc_65D6:
00006B6C D078 F700                  		add.w	($FFFFF700).w,d0
00006B70 B078 F72A                  		cmp.w	($FFFFF72A).w,d0
00006B74 6D00                       		blt.s	loc_65E4
00006B76 3038 F72A                  		move.w	($FFFFF72A).w,d0
00006B7A                            
00006B7A                            loc_65E4:
00006B7A 3200                       		move.w	d0,d1
00006B7C 9278 F700                  		sub.w	($FFFFF700).w,d1
00006B80 E141                       		asl.w	#8,d1
00006B82 31C0 F700                  		move.w	d0,($FFFFF700).w
00006B86 31C1 F73A                  		move.w	d1,($FFFFF73A).w
00006B8A 4E75                       		rts	
00006B8C                            ; ===========================================================================
00006B8C                            
00006B8C                            loc_65F6:				; XREF: ScrollHoriz2
00006B8C D078 F700                  		add.w	($FFFFF700).w,d0
00006B90 B078 F728                  		cmp.w	($FFFFF728).w,d0
00006B94 6EE4                       		bgt.s	loc_65E4
00006B96 3038 F728                  		move.w	($FFFFF728).w,d0
00006B9A 60DE                       		bra.s	loc_65E4
00006B9C                            ; End of function ScrollHoriz2
00006B9C                            
00006B9C                            ; ===========================================================================
00006B9C 4A40                       		tst.w	d0
00006B9E 6A00                       		bpl.s	loc_6610
00006BA0 303C FFFE                  		move.w	#-2,d0
00006BA4 60E6                       		bra.s	loc_65F6
00006BA6                            ; ===========================================================================
00006BA6                            
00006BA6                            loc_6610:
00006BA6 303C 0002                  		move.w	#2,d0
00006BAA 60B6                       		bra.s	loc_65CC
00006BAC                            
00006BAC                            ; ---------------------------------------------------------------------------
00006BAC                            ; Subroutine to	scroll the level vertically as Sonic moves
00006BAC                            ; ---------------------------------------------------------------------------
00006BAC                            
00006BAC                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00006BAC                            
00006BAC                            
00006BAC                            ScrollVertical:				; XREF: DeformBgLayer
00006BAC 7200                       		moveq	#0,d1
00006BAE 3038 D00C                  		move.w	($FFFFD00C).w,d0
00006BB2 9078 F704                  		sub.w	($FFFFF704).w,d0
00006BB6 0838 0002 D022             		btst	#2,($FFFFD022).w
00006BBC 6700                       		beq.s	loc_662A
00006BBE 5B40                       		subq.w	#5,d0
00006BC0                            
00006BC0                            loc_662A:
00006BC0 0838 0001 D022             		btst	#1,($FFFFD022).w
00006BC6 6700                       		beq.s	loc_664A
00006BC8 0640 0020                  		addi.w	#$20,d0
00006BCC 9078 F73E                  		sub.w	($FFFFF73E).w,d0
00006BD0 6500                       		bcs.s	loc_6696
00006BD2 0440 0040                  		subi.w	#$40,d0
00006BD6 6400                       		bcc.s	loc_6696
00006BD8 4A38 F75C                  		tst.b	($FFFFF75C).w
00006BDC 6600                       		bne.s	loc_66A8
00006BDE 6000                       		bra.s	loc_6656
00006BE0                            ; ===========================================================================
00006BE0                            
00006BE0                            loc_664A:
00006BE0 9078 F73E                  		sub.w	($FFFFF73E).w,d0
00006BE4 6600                       		bne.s	loc_665C
00006BE6 4A38 F75C                  		tst.b	($FFFFF75C).w
00006BEA 6600                       		bne.s	loc_66A8
00006BEC                            
00006BEC                            loc_6656:
00006BEC 4278 F73C                  		clr.w	($FFFFF73C).w
00006BF0 4E75                       		rts	
00006BF2                            ; ===========================================================================
00006BF2                            
00006BF2                            loc_665C:
00006BF2 0C78 0060 F73E             		cmpi.w	#$60,($FFFFF73E).w
00006BF8 6600                       		bne.s	loc_6684
00006BFA 3238 D014                  		move.w	($FFFFD014).w,d1
00006BFE 6A00                       		bpl.s	loc_666C
00006C00 4441                       		neg.w	d1
00006C02                            
00006C02                            loc_666C:
00006C02 0C41 0800                  		cmpi.w	#$800,d1
00006C06 6400                       		bcc.s	loc_6696
00006C08 323C 0600                  		move.w	#$600,d1
00006C0C 0C40 0006                  		cmpi.w	#6,d0
00006C10 6E00                       		bgt.s	loc_66F6
00006C12 0C40 FFFA                  		cmpi.w	#-6,d0
00006C16 6D00                       		blt.s	loc_66C0
00006C18 6000                       		bra.s	loc_66AE
00006C1A                            ; ===========================================================================
00006C1A                            
00006C1A                            loc_6684:
00006C1A 323C 0200                  		move.w	#$200,d1
00006C1E 0C40 0002                  		cmpi.w	#2,d0
00006C22 6E00                       		bgt.s	loc_66F6
00006C24 0C40 FFFE                  		cmpi.w	#-2,d0
00006C28 6D00                       		blt.s	loc_66C0
00006C2A 6000                       		bra.s	loc_66AE
00006C2C                            ; ===========================================================================
00006C2C                            
00006C2C                            loc_6696:
00006C2C 323C 1000                  		move.w	#$1000,d1
00006C30 0C40 0010                  		cmpi.w	#$10,d0
00006C34 6E00                       		bgt.s	loc_66F6
00006C36 0C40 FFF0                  		cmpi.w	#-$10,d0
00006C3A 6D00                       		blt.s	loc_66C0
00006C3C 6000                       		bra.s	loc_66AE
00006C3E                            ; ===========================================================================
00006C3E                            
00006C3E                            loc_66A8:
00006C3E 7000                       		moveq	#0,d0
00006C40 11C0 F75C                  		move.b	d0,($FFFFF75C).w
00006C44                            
00006C44                            loc_66AE:
00006C44 7200                       		moveq	#0,d1
00006C46 3200                       		move.w	d0,d1
00006C48 D278 F704                  		add.w	($FFFFF704).w,d1
00006C4C 4A40                       		tst.w	d0
00006C4E 6A00 0000                  		bpl.w	loc_6700
00006C52 6000 0000                  		bra.w	loc_66CC
00006C56                            ; ===========================================================================
00006C56                            
00006C56                            loc_66C0:
00006C56 4441                       		neg.w	d1
00006C58 48C1                       		ext.l	d1
00006C5A E181                       		asl.l	#8,d1
00006C5C D2B8 F704                  		add.l	($FFFFF704).w,d1
00006C60 4841                       		swap	d1
00006C62                            
00006C62                            loc_66CC:
00006C62 B278 F72C                  		cmp.w	($FFFFF72C).w,d1
00006C66 6E00                       		bgt.s	loc_6724
00006C68 0C41 FF00                  		cmpi.w	#-$100,d1
00006C6C 6E00                       		bgt.s	loc_66F0
00006C6E 0241 07FF                  		andi.w	#$7FF,d1
00006C72 0278 07FF D00C             		andi.w	#$7FF,($FFFFD00C).w
00006C78 0278 07FF F704             		andi.w	#$7FF,($FFFFF704).w
00006C7E 0278 03FF F70C             		andi.w	#$3FF,($FFFFF70C).w
00006C84 6000                       		bra.s	loc_6724
00006C86                            ; ===========================================================================
00006C86                            
00006C86                            loc_66F0:
00006C86 3238 F72C                  		move.w	($FFFFF72C).w,d1
00006C8A 6000                       		bra.s	loc_6724
00006C8C                            ; ===========================================================================
00006C8C                            
00006C8C                            loc_66F6:
00006C8C 48C1                       		ext.l	d1
00006C8E E181                       		asl.l	#8,d1
00006C90 D2B8 F704                  		add.l	($FFFFF704).w,d1
00006C94 4841                       		swap	d1
00006C96                            
00006C96                            loc_6700:
00006C96 B278 F72E                  		cmp.w	($FFFFF72E).w,d1
00006C9A 6D00                       		blt.s	loc_6724
00006C9C 0441 0800                  		subi.w	#$800,d1
00006CA0 6500                       		bcs.s	loc_6720
00006CA2 0278 07FF D00C             		andi.w	#$7FF,($FFFFD00C).w
00006CA8 0478 0800 F704             		subi.w	#$800,($FFFFF704).w
00006CAE 0278 03FF F70C             		andi.w	#$3FF,($FFFFF70C).w
00006CB4 6000                       		bra.s	loc_6724
00006CB6                            ; ===========================================================================
00006CB6                            
00006CB6                            loc_6720:
00006CB6 3238 F72E                  		move.w	($FFFFF72E).w,d1
00006CBA                            
00006CBA                            loc_6724:
00006CBA 3838 F704                  		move.w	($FFFFF704).w,d4
00006CBE 4841                       		swap	d1
00006CC0 2601                       		move.l	d1,d3
00006CC2 96B8 F704                  		sub.l	($FFFFF704).w,d3
00006CC6 E09B                       		ror.l	#8,d3
00006CC8 31C3 F73C                  		move.w	d3,($FFFFF73C).w
00006CCC 21C1 F704                  		move.l	d1,($FFFFF704).w
00006CD0 3038 F704                  		move.w	($FFFFF704).w,d0
00006CD4 0240 0010                  		andi.w	#$10,d0
00006CD8 1238 F74B                  		move.b	($FFFFF74B).w,d1
00006CDC B300                       		eor.b	d1,d0
00006CDE 6600                       		bne.s	locret_6766
00006CE0 0A38 0010 F74B             		eori.b	#$10,($FFFFF74B).w
00006CE6 3038 F704                  		move.w	($FFFFF704).w,d0
00006CEA 9044                       		sub.w	d4,d0
00006CEC 6A00                       		bpl.s	loc_6760
00006CEE 08F8 0000 F754             		bset	#0,($FFFFF754).w
00006CF4 4E75                       		rts	
00006CF6                            ; ===========================================================================
00006CF6                            
00006CF6                            loc_6760:
00006CF6 08F8 0001 F754             		bset	#1,($FFFFF754).w
00006CFC                            
00006CFC                            locret_6766:
00006CFC 4E75                       		rts	
00006CFE                            ; End of function ScrollVertical
00006CFE                            
00006CFE                            
00006CFE                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00006CFE                            
00006CFE                            
00006CFE                            ScrollBlock1:				; XREF: Deform_GHZ; et al
00006CFE 2438 F708                  		move.l	($FFFFF708).w,d2
00006D02 2002                       		move.l	d2,d0
00006D04 D084                       		add.l	d4,d0
00006D06 21C0 F708                  		move.l	d0,($FFFFF708).w
00006D0A 2200                       		move.l	d0,d1
00006D0C 4841                       		swap	d1
00006D0E 0241 0010                  		andi.w	#$10,d1
00006D12 1638 F74C                  		move.b	($FFFFF74C).w,d3
00006D16 B701                       		eor.b	d3,d1
00006D18 6600                       		bne.s	loc_679C
00006D1A 0A38 0010 F74C             		eori.b	#$10,($FFFFF74C).w
00006D20 9082                       		sub.l	d2,d0
00006D22 6A00                       		bpl.s	loc_6796
00006D24 08F8 0002 F756             		bset	#2,($FFFFF756).w
00006D2A 6000                       		bra.s	loc_679C
00006D2C                            ; ===========================================================================
00006D2C                            
00006D2C                            loc_6796:
00006D2C 08F8 0003 F756             		bset	#3,($FFFFF756).w
00006D32                            
00006D32                            loc_679C:
00006D32 2638 F70C                  		move.l	($FFFFF70C).w,d3
00006D36 2003                       		move.l	d3,d0
00006D38 D085                       		add.l	d5,d0
00006D3A 21C0 F70C                  		move.l	d0,($FFFFF70C).w
00006D3E 2200                       		move.l	d0,d1
00006D40 4841                       		swap	d1
00006D42 0241 0010                  		andi.w	#$10,d1
00006D46 1438 F74D                  		move.b	($FFFFF74D).w,d2
00006D4A B501                       		eor.b	d2,d1
00006D4C 6600                       		bne.s	locret_67D0
00006D4E 0A38 0010 F74D             		eori.b	#$10,($FFFFF74D).w
00006D54 9083                       		sub.l	d3,d0
00006D56 6A00                       		bpl.s	loc_67CA
00006D58 08F8 0000 F756             		bset	#0,($FFFFF756).w
00006D5E 4E75                       		rts	
00006D60                            ; ===========================================================================
00006D60                            
00006D60                            loc_67CA:
00006D60 08F8 0001 F756             		bset	#1,($FFFFF756).w
00006D66                            
00006D66                            locret_67D0:
00006D66 4E75                       		rts	
00006D68                            ; End of function ScrollBlock1
00006D68                            
00006D68                            
00006D68                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00006D68                            
00006D68                            
00006D68                            ScrollBlock2:				; XREF: Deform_SLZ
00006D68 2438 F708                  		move.l	($FFFFF708).w,d2
00006D6C 2002                       		move.l	d2,d0
00006D6E D084                       		add.l	d4,d0
00006D70 21C0 F708                  		move.l	d0,($FFFFF708).w
00006D74 2638 F70C                  		move.l	($FFFFF70C).w,d3
00006D78 2003                       		move.l	d3,d0
00006D7A D085                       		add.l	d5,d0
00006D7C 21C0 F70C                  		move.l	d0,($FFFFF70C).w
00006D80 2200                       		move.l	d0,d1
00006D82 4841                       		swap	d1
00006D84 0241 0010                  		andi.w	#$10,d1
00006D88 1438 F74D                  		move.b	($FFFFF74D).w,d2
00006D8C B501                       		eor.b	d2,d1
00006D8E 6600                       		bne.s	locret_6812
00006D90 0A38 0010 F74D             		eori.b	#$10,($FFFFF74D).w
00006D96 9083                       		sub.l	d3,d0
00006D98 6A00                       		bpl.s	loc_680C
00006D9A 08F8 0000 F756             		bset	#0,($FFFFF756).w
00006DA0 4E75                       		rts	
00006DA2                            ; ===========================================================================
00006DA2                            
00006DA2                            loc_680C:
00006DA2 08F8 0001 F756             		bset	#1,($FFFFF756).w
00006DA8                            
00006DA8                            locret_6812:
00006DA8 4E75                       		rts	
00006DAA                            ; End of function ScrollBlock2
00006DAA                            
00006DAA                            
00006DAA                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00006DAA                            
00006DAA                            
00006DAA                            ScrollBlock3:				; XREF: Deform_GHZ; et al
00006DAA 3638 F70C                  		move.w	($FFFFF70C).w,d3
00006DAE 31C0 F70C                  		move.w	d0,($FFFFF70C).w
00006DB2 3200                       		move.w	d0,d1
00006DB4 0241 0010                  		andi.w	#$10,d1
00006DB8 1438 F74D                  		move.b	($FFFFF74D).w,d2
00006DBC B501                       		eor.b	d2,d1
00006DBE 6600                       		bne.s	locret_6842
00006DC0 0A38 0010 F74D             		eori.b	#$10,($FFFFF74D).w
00006DC6 9043                       		sub.w	d3,d0
00006DC8 6A00                       		bpl.s	loc_683C
00006DCA 08F8 0000 F756             		bset	#0,($FFFFF756).w
00006DD0 4E75                       		rts	
00006DD2                            ; ===========================================================================
00006DD2                            
00006DD2                            loc_683C:
00006DD2 08F8 0001 F756             		bset	#1,($FFFFF756).w
00006DD8                            
00006DD8                            locret_6842:
00006DD8 4E75                       		rts	
00006DDA                            ; End of function ScrollBlock3
00006DDA                            
00006DDA                            
00006DDA                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00006DDA                            
00006DDA                            
00006DDA                            ScrollBlock4:				; XREF: Deform_GHZ
00006DDA 3438 F710                  		move.w	($FFFFF710).w,d2
00006DDE 3638 F714                  		move.w	($FFFFF714).w,d3
00006DE2 3038 F73A                  		move.w	($FFFFF73A).w,d0
00006DE6 48C0                       		ext.l	d0
00006DE8 EF80                       		asl.l	#7,d0
00006DEA D1B8 F710                  		add.l	d0,($FFFFF710).w
00006DEE 3038 F710                  		move.w	($FFFFF710).w,d0
00006DF2 0240 0010                  		andi.w	#$10,d0
00006DF6 1238 F74E                  		move.b	($FFFFF74E).w,d1
00006DFA B300                       		eor.b	d1,d0
00006DFC 6600                       		bne.s	locret_6884
00006DFE 0A38 0010 F74E             		eori.b	#$10,($FFFFF74E).w
00006E04 3038 F710                  		move.w	($FFFFF710).w,d0
00006E08 9042                       		sub.w	d2,d0
00006E0A 6A00                       		bpl.s	loc_687E
00006E0C 08F8 0002 F758             		bset	#2,($FFFFF758).w
00006E12 6000                       		bra.s	locret_6884
00006E14                            ; ===========================================================================
00006E14                            
00006E14                            loc_687E:
00006E14 08F8 0003 F758             		bset	#3,($FFFFF758).w
00006E1A                            
00006E1A                            locret_6884:
00006E1A 4E75                       		rts	
00006E1C                            ; End of function ScrollBlock4
00006E1C                            
00006E1C                            
00006E1C                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00006E1C                            
00006E1C                            
00006E1C                            sub_6886:				; XREF: loc_C44
00006E1C 4BF9 00C0 0004             		lea	($C00004).l,a5
00006E22 4DF9 00C0 0000             		lea	($C00000).l,a6
00006E28 45F8 F756                  		lea	($FFFFF756).w,a2
00006E2C 47F8 F708                  		lea	($FFFFF708).w,a3
00006E30 49F8 A440                  		lea	($FFFFA440).w,a4
00006E34 343C 6000                  		move.w	#$6000,d2
00006E38 6100 0000                  		bsr.w	sub_6954
00006E3C 45F8 F758                  		lea	($FFFFF758).w,a2
00006E40 47F8 F710                  		lea	($FFFFF710).w,a3
00006E44 6000 0000                  		bra.w	sub_69F4
00006E48                            ; End of function sub_6886
00006E48                            
00006E48                            ; ---------------------------------------------------------------------------
00006E48                            ; Subroutine to	display	correct	tiles as you move
00006E48                            ; ---------------------------------------------------------------------------
00006E48                            
00006E48                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00006E48                            
00006E48                            
00006E48                            LoadTilesAsYouMove:			; XREF: Demo_Time
00006E48 4BF9 00C0 0004             		lea	($C00004).l,a5
00006E4E 4DF9 00C0 0000             		lea	($C00000).l,a6
00006E54 45F8 FF32                  		lea	($FFFFFF32).w,a2
00006E58 47F8 FF18                  		lea	($FFFFFF18).w,a3
00006E5C 49F8 A440                  		lea	($FFFFA440).w,a4
00006E60 343C 6000                  		move.w	#$6000,d2
00006E64 6100 0000                  		bsr.w	sub_6954
00006E68 45F8 FF34                  		lea	($FFFFFF34).w,a2
00006E6C 47F8 FF20                  		lea	($FFFFFF20).w,a3
00006E70 6100 0000                  		bsr.w	sub_69F4
00006E74 45F8 FF30                  		lea	($FFFFFF30).w,a2
00006E78 47F8 FF10                  		lea	($FFFFFF10).w,a3
00006E7C 49F8 A400                  		lea	($FFFFA400).w,a4
00006E80 343C 4000                  		move.w	#$4000,d2
00006E84 4A12                       		tst.b	(a2)
00006E86 6700                       		beq.s	locret_6952
00006E88 0892 0000                  		bclr	#0,(a2)
00006E8C 6700                       		beq.s	loc_6908
00006E8E 78F0                       		moveq	#-$10,d4
00006E90 7AF0                       		moveq	#-$10,d5
00006E92 6100 0000                  		bsr.w	sub_6C20
00006E96 78F0                       		moveq	#-$10,d4
00006E98 7AF0                       		moveq	#-$10,d5
00006E9A 6100 0000                  		bsr.w	sub_6AD8
00006E9E                            
00006E9E                            loc_6908:
00006E9E 0892 0001                  		bclr	#1,(a2)
00006EA2 6700                       		beq.s	loc_6922
00006EA4 383C 00E0                  		move.w	#$E0,d4
00006EA8 7AF0                       		moveq	#-$10,d5
00006EAA 6100 0000                  		bsr.w	sub_6C20
00006EAE 383C 00E0                  		move.w	#$E0,d4
00006EB2 7AF0                       		moveq	#-$10,d5
00006EB4 6100 0000                  		bsr.w	sub_6AD8
00006EB8                            
00006EB8                            loc_6922:
00006EB8 0892 0002                  		bclr	#2,(a2)
00006EBC 6700                       		beq.s	loc_6938
00006EBE 78F0                       		moveq	#-$10,d4
00006EC0 7AF0                       		moveq	#-$10,d5
00006EC2 6100 0000                  		bsr.w	sub_6C20
00006EC6 78F0                       		moveq	#-$10,d4
00006EC8 7AF0                       		moveq	#-$10,d5
00006ECA 6100 0000                  		bsr.w	sub_6B04
00006ECE                            
00006ECE                            loc_6938:
00006ECE 0892 0003                  		bclr	#3,(a2)
00006ED2 6700                       		beq.s	locret_6952
00006ED4 78F0                       		moveq	#-$10,d4
00006ED6 3A3C 0140                  		move.w	#$140,d5
00006EDA 6100 0000                  		bsr.w	sub_6C20
00006EDE 78F0                       		moveq	#-$10,d4
00006EE0 3A3C 0140                  		move.w	#$140,d5
00006EE4 6100 0000                  		bsr.w	sub_6B04
00006EE8                            
00006EE8                            locret_6952:
00006EE8 4E75                       		rts	
00006EEA                            ; End of function LoadTilesAsYouMove
00006EEA                            
00006EEA                            
00006EEA                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00006EEA                            
00006EEA                            
00006EEA                            sub_6954:				; XREF: sub_6886; LoadTilesAsYouMove
00006EEA 4A12                       		tst.b	(a2)
00006EEC 6700 0000                  		beq.w	locret_69F2
00006EF0 0892 0000                  		bclr	#0,(a2)
00006EF4 6700                       		beq.s	loc_6972
00006EF6 78F0                       		moveq	#-$10,d4
00006EF8 7AF0                       		moveq	#-$10,d5
00006EFA 6100 0000                  		bsr.w	sub_6C20
00006EFE 78F0                       		moveq	#-$10,d4
00006F00 7AF0                       		moveq	#-$10,d5
00006F02 7C1F                       		moveq	#$1F,d6
00006F04 6100 0000                  		bsr.w	sub_6ADA
00006F08                            
00006F08                            loc_6972:
00006F08 0892 0001                  		bclr	#1,(a2)
00006F0C 6700                       		beq.s	loc_698E
00006F0E 383C 00E0                  		move.w	#$E0,d4
00006F12 7AF0                       		moveq	#-$10,d5
00006F14 6100 0000                  		bsr.w	sub_6C20
00006F18 383C 00E0                  		move.w	#$E0,d4
00006F1C 7AF0                       		moveq	#-$10,d5
00006F1E 7C1F                       		moveq	#$1F,d6
00006F20 6100 0000                  		bsr.w	sub_6ADA
00006F24                            
00006F24                            loc_698E:
00006F24 0892 0002                  		bclr	#2,(a2)
00006F28 6700                       		beq.s	loc_69BE
00006F2A 78F0                       		moveq	#-$10,d4
00006F2C 7AF0                       		moveq	#-$10,d5
00006F2E 6100 0000                  		bsr.w	sub_6C20
00006F32 78F0                       		moveq	#-$10,d4
00006F34 7AF0                       		moveq	#-$10,d5
00006F36 3C38 F7F0                  		move.w	($FFFFF7F0).w,d6
00006F3A 322B 0004                  		move.w	4(a3),d1
00006F3E 0241 FFF0                  		andi.w	#-$10,d1
00006F42 9C41                       		sub.w	d1,d6
00006F44 6D00                       		blt.s	loc_69BE
00006F46 E84E                       		lsr.w	#4,d6
00006F48 0C46 000F                  		cmpi.w	#$F,d6
00006F4C 6500                       		bcs.s	loc_69BA
00006F4E 7C0F                       		moveq	#$F,d6
00006F50                            
00006F50                            loc_69BA:
00006F50 6100 0000                  		bsr.w	sub_6B06
00006F54                            
00006F54                            loc_69BE:
00006F54 0892 0003                  		bclr	#3,(a2)
00006F58 6700                       		beq.s	locret_69F2
00006F5A 78F0                       		moveq	#-$10,d4
00006F5C 3A3C 0140                  		move.w	#$140,d5
00006F60 6100 0000                  		bsr.w	sub_6C20
00006F64 78F0                       		moveq	#-$10,d4
00006F66 3A3C 0140                  		move.w	#$140,d5
00006F6A 3C38 F7F0                  		move.w	($FFFFF7F0).w,d6
00006F6E 322B 0004                  		move.w	4(a3),d1
00006F72 0241 FFF0                  		andi.w	#-$10,d1
00006F76 9C41                       		sub.w	d1,d6
00006F78 6D00                       		blt.s	locret_69F2
00006F7A E84E                       		lsr.w	#4,d6
00006F7C 0C46 000F                  		cmpi.w	#$F,d6
00006F80 6500                       		bcs.s	loc_69EE
00006F82 7C0F                       		moveq	#$F,d6
00006F84                            
00006F84                            loc_69EE:
00006F84 6100 0000                  		bsr.w	sub_6B06
00006F88                            
00006F88                            locret_69F2:
00006F88 4E75                       		rts	
00006F8A                            ; End of function sub_6954
00006F8A                            
00006F8A                            
00006F8A                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00006F8A                            
00006F8A                            
00006F8A                            sub_69F4:				; XREF: sub_6886; LoadTilesAsYouMove
00006F8A 4A12                       		tst.b	(a2)
00006F8C 6700 0000                  		beq.w	locret_6A80
00006F90 0892 0002                  		bclr	#2,(a2)
00006F94 6700                       		beq.s	loc_6A3E
00006F96 0C53 0010                  		cmpi.w	#$10,(a3)
00006F9A 6500                       		bcs.s	loc_6A3E
00006F9C 3838 F7F0                  		move.w	($FFFFF7F0).w,d4
00006FA0 322B 0004                  		move.w	4(a3),d1
00006FA4 0241 FFF0                  		andi.w	#-$10,d1
00006FA8 9841                       		sub.w	d1,d4
00006FAA 3F04                       		move.w	d4,-(sp)
00006FAC 7AF0                       		moveq	#-$10,d5
00006FAE 6100 0000                  		bsr.w	sub_6C20
00006FB2 381F                       		move.w	(sp)+,d4
00006FB4 7AF0                       		moveq	#-$10,d5
00006FB6 3C38 F7F0                  		move.w	($FFFFF7F0).w,d6
00006FBA 322B 0004                  		move.w	4(a3),d1
00006FBE 0241 FFF0                  		andi.w	#-$10,d1
00006FC2 9C41                       		sub.w	d1,d6
00006FC4 6D00                       		blt.s	loc_6A3E
00006FC6 E84E                       		lsr.w	#4,d6
00006FC8 0446 000E                  		subi.w	#$E,d6
00006FCC 6400                       		bcc.s	loc_6A3E
00006FCE 4446                       		neg.w	d6
00006FD0 6100 0000                  		bsr.w	sub_6B06
00006FD4                            
00006FD4                            loc_6A3E:
00006FD4 0892 0003                  		bclr	#3,(a2)
00006FD8 6700                       		beq.s	locret_6A80
00006FDA 3838 F7F0                  		move.w	($FFFFF7F0).w,d4
00006FDE 322B 0004                  		move.w	4(a3),d1
00006FE2 0241 FFF0                  		andi.w	#-$10,d1
00006FE6 9841                       		sub.w	d1,d4
00006FE8 3F04                       		move.w	d4,-(sp)
00006FEA 3A3C 0140                  		move.w	#$140,d5
00006FEE 6100 0000                  		bsr.w	sub_6C20
00006FF2 381F                       		move.w	(sp)+,d4
00006FF4 3A3C 0140                  		move.w	#$140,d5
00006FF8 3C38 F7F0                  		move.w	($FFFFF7F0).w,d6
00006FFC 322B 0004                  		move.w	4(a3),d1
00007000 0241 FFF0                  		andi.w	#-$10,d1
00007004 9C41                       		sub.w	d1,d6
00007006 6D00                       		blt.s	locret_6A80
00007008 E84E                       		lsr.w	#4,d6
0000700A 0446 000E                  		subi.w	#$E,d6
0000700E 6400                       		bcc.s	locret_6A80
00007010 4446                       		neg.w	d6
00007012 6100 0000                  		bsr.w	sub_6B06
00007016                            
00007016                            locret_6A80:
00007016 4E75                       		rts	
00007018                            ; End of function sub_69F4
00007018                            
00007018                            ; ===========================================================================
00007018 4A12                       		tst.b	(a2)
0000701A 6700                       		beq.s	locret_6AD6
0000701C 0892 0002                  		bclr	#2,(a2)
00007020 6700                       		beq.s	loc_6AAC
00007022 383C 00D0                  		move.w	#$D0,d4
00007026 322B 0004                  		move.w	4(a3),d1
0000702A 0241 FFF0                  		andi.w	#-$10,d1
0000702E 9841                       		sub.w	d1,d4
00007030 3F04                       		move.w	d4,-(sp)
00007032 7AF0                       		moveq	#-$10,d5
00007034 6100 0000                  		bsr.w	sub_6C3C
00007038 381F                       		move.w	(sp)+,d4
0000703A 7AF0                       		moveq	#-$10,d5
0000703C 7C02                       		moveq	#2,d6
0000703E 6100 0000                  		bsr.w	sub_6B06
00007042                            
00007042                            loc_6AAC:
00007042 0892 0003                  		bclr	#3,(a2)
00007046 6700                       		beq.s	locret_6AD6
00007048 383C 00D0                  		move.w	#$D0,d4
0000704C 322B 0004                  		move.w	4(a3),d1
00007050 0241 FFF0                  		andi.w	#-$10,d1
00007054 9841                       		sub.w	d1,d4
00007056 3F04                       		move.w	d4,-(sp)
00007058 3A3C 0140                  		move.w	#$140,d5
0000705C 6100 0000                  		bsr.w	sub_6C3C
00007060 381F                       		move.w	(sp)+,d4
00007062 3A3C 0140                  		move.w	#$140,d5
00007066 7C02                       		moveq	#2,d6
00007068 6100 0000                  		bsr.w	sub_6B06
0000706C                            
0000706C                            locret_6AD6:
0000706C 4E75                       		rts	
0000706E                            
0000706E                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000706E                            
0000706E                            
0000706E                            sub_6AD8:				; XREF: LoadTilesAsYouMove
0000706E 7C15                       		moveq	#$15,d6
00007070                            ; End of function sub_6AD8
00007070                            
00007070                            
00007070                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00007070                            
00007070                            
00007070                            sub_6ADA:				; XREF: sub_6954; LoadTilesFromStart2
00007070 2E3C 0080 0000             		move.l	#$800000,d7
00007076 2200                       		move.l	d0,d1
00007078                            
00007078                            loc_6AE2:
00007078 48E7 0C00                  		movem.l	d4-d5,-(sp)
0000707C 6100 0000                  		bsr.w	sub_6BD6
00007080 2001                       		move.l	d1,d0
00007082 6100 0000                  		bsr.w	sub_6B32
00007086 5801                       		addq.b	#4,d1
00007088 0201 007F                  		andi.b	#$7F,d1
0000708C 4CDF 0030                  		movem.l	(sp)+,d4-d5
00007090 0645 0010                  		addi.w	#$10,d5
00007094 51CE FFE2                  		dbf	d6,loc_6AE2
00007098 4E75                       		rts	
0000709A                            ; End of function sub_6ADA
0000709A                            
0000709A                            
0000709A                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000709A                            
0000709A                            
0000709A                            sub_6B04:				; XREF: LoadTilesAsYouMove
0000709A 7C0F                       		moveq	#$F,d6
0000709C                            ; End of function sub_6B04
0000709C                            
0000709C                            
0000709C                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000709C                            
0000709C                            
0000709C                            sub_6B06:				; XREF: sub_6954
0000709C 2E3C 0080 0000             		move.l	#$800000,d7
000070A2 2200                       		move.l	d0,d1
000070A4                            
000070A4                            loc_6B0E:
000070A4 48E7 0C00                  		movem.l	d4-d5,-(sp)
000070A8 6100 0000                  		bsr.w	sub_6BD6
000070AC 2001                       		move.l	d1,d0
000070AE 6100 0000                  		bsr.w	sub_6B32
000070B2 0641 0100                  		addi.w	#$100,d1
000070B6 0241 0FFF                  		andi.w	#$FFF,d1
000070BA 4CDF 0030                  		movem.l	(sp)+,d4-d5
000070BE 0644 0010                  		addi.w	#$10,d4
000070C2 51CE FFE0                  		dbf	d6,loc_6B0E
000070C6 4E75                       		rts	
000070C8                            ; End of function sub_6B06
000070C8                            
000070C8                            
000070C8                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000070C8                            
000070C8                            
000070C8                            sub_6B32:				; XREF: sub_6ADA; sub_6B06
000070C8 8042                       		or.w	d2,d0
000070CA 4840                       		swap	d0
000070CC 0810 0004                  		btst	#4,(a0)
000070D0 6600                       		bne.s	loc_6B6E
000070D2 0810 0003                  		btst	#3,(a0)
000070D6 6600                       		bne.s	loc_6B4E
000070D8 2A80                       		move.l	d0,(a5)
000070DA 2C99                       		move.l	(a1)+,(a6)
000070DC D087                       		add.l	d7,d0
000070DE 2A80                       		move.l	d0,(a5)
000070E0 2C99                       		move.l	(a1)+,(a6)
000070E2 4E75                       		rts	
000070E4                            ; ===========================================================================
000070E4                            
000070E4                            loc_6B4E:
000070E4 2A80                       		move.l	d0,(a5)
000070E6 2819                       		move.l	(a1)+,d4
000070E8 0A84 0800 0800             		eori.l	#$8000800,d4
000070EE 4844                       		swap	d4
000070F0 2C84                       		move.l	d4,(a6)
000070F2 D087                       		add.l	d7,d0
000070F4 2A80                       		move.l	d0,(a5)
000070F6 2819                       		move.l	(a1)+,d4
000070F8 0A84 0800 0800             		eori.l	#$8000800,d4
000070FE 4844                       		swap	d4
00007100 2C84                       		move.l	d4,(a6)
00007102 4E75                       		rts	
00007104                            ; ===========================================================================
00007104                            
00007104                            loc_6B6E:
00007104 0810 0003                  		btst	#3,(a0)
00007108 6600                       		bne.s	loc_6B90
0000710A 2A80                       		move.l	d0,(a5)
0000710C 2A19                       		move.l	(a1)+,d5
0000710E 2819                       		move.l	(a1)+,d4
00007110 0A84 1000 1000             		eori.l	#$10001000,d4
00007116 2C84                       		move.l	d4,(a6)
00007118 D087                       		add.l	d7,d0
0000711A 2A80                       		move.l	d0,(a5)
0000711C 0A85 1000 1000             		eori.l	#$10001000,d5
00007122 2C85                       		move.l	d5,(a6)
00007124 4E75                       		rts	
00007126                            ; ===========================================================================
00007126                            
00007126                            loc_6B90:
00007126 2A80                       		move.l	d0,(a5)
00007128 2A19                       		move.l	(a1)+,d5
0000712A 2819                       		move.l	(a1)+,d4
0000712C 0A84 1800 1800             		eori.l	#$18001800,d4
00007132 4844                       		swap	d4
00007134 2C84                       		move.l	d4,(a6)
00007136 D087                       		add.l	d7,d0
00007138 2A80                       		move.l	d0,(a5)
0000713A 0A85 1800 1800             		eori.l	#$18001800,d5
00007140 4845                       		swap	d5
00007142 2C85                       		move.l	d5,(a6)
00007144 4E75                       		rts	
00007146                            ; End of function sub_6B32
00007146                            
00007146                            ; ===========================================================================
00007146 4E75                       		rts	
00007148                            ; ===========================================================================
00007148 2A80                       		move.l	d0,(a5)
0000714A 3A3C 2000                  		move.w	#$2000,d5
0000714E 3819                       		move.w	(a1)+,d4
00007150 D845                       		add.w	d5,d4
00007152 3C84                       		move.w	d4,(a6)
00007154 3819                       		move.w	(a1)+,d4
00007156 D845                       		add.w	d5,d4
00007158 3C84                       		move.w	d4,(a6)
0000715A D087                       		add.l	d7,d0
0000715C 2A80                       		move.l	d0,(a5)
0000715E 3819                       		move.w	(a1)+,d4
00007160 D845                       		add.w	d5,d4
00007162 3C84                       		move.w	d4,(a6)
00007164 3819                       		move.w	(a1)+,d4
00007166 D845                       		add.w	d5,d4
00007168 3C84                       		move.w	d4,(a6)
0000716A 4E75                       		rts	
0000716C                            
0000716C                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000716C                            
0000716C                            
0000716C                            sub_6BD6:				; XREF: sub_6ADA; sub_6B06
0000716C 43F8 B000                  		lea	($FFFFB000).w,a1
00007170 D86B 0004                  		add.w	4(a3),d4
00007174 DA53                       		add.w	(a3),d5
00007176 3604                       		move.w	d4,d3
00007178 E24B                       		lsr.w	#1,d3
0000717A 0243 0380                  		andi.w	#$380,d3
0000717E E64D                       		lsr.w	#3,d5
00007180 3005                       		move.w	d5,d0
00007182 EA48                       		lsr.w	#5,d0
00007184 0240 007F                  		andi.w	#$7F,d0
00007188 D043                       		add.w	d3,d0
0000718A 76FF                       		moveq	#-1,d3
0000718C 1634 0000                  		move.b	(a4,d0.w),d3
00007190 6700                       		beq.s	locret_6C1E
00007192 5303                       		subq.b	#1,d3
00007194 0243 007F                  		andi.w	#$7F,d3
00007198 EE5B                       		ror.w	#7,d3
0000719A D844                       		add.w	d4,d4
0000719C 0244 01E0                  		andi.w	#$1E0,d4
000071A0 0245 001E                  		andi.w	#$1E,d5
000071A4 D644                       		add.w	d4,d3
000071A6 D645                       		add.w	d5,d3
000071A8 2043                       		movea.l	d3,a0
000071AA 3610                       		move.w	(a0),d3
000071AC 0243 03FF                  		andi.w	#$3FF,d3
000071B0 E74B                       		lsl.w	#3,d3
000071B2 D2C3                       		adda.w	d3,a1
000071B4                            
000071B4                            locret_6C1E:
000071B4 4E75                       		rts	
000071B6                            ; End of function sub_6BD6
000071B6                            
000071B6                            
000071B6                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000071B6                            
000071B6                            
000071B6                            sub_6C20:				; XREF: LoadTilesAsYouMove; et al
000071B6 D86B 0004                  		add.w	4(a3),d4
000071BA DA53                       		add.w	(a3),d5
000071BC 0244 00F0                  		andi.w	#$F0,d4
000071C0 0245 01F0                  		andi.w	#$1F0,d5
000071C4 E94C                       		lsl.w	#4,d4
000071C6 E44D                       		lsr.w	#2,d5
000071C8 D845                       		add.w	d5,d4
000071CA 7003                       		moveq	#3,d0
000071CC 4840                       		swap	d0
000071CE 3004                       		move.w	d4,d0
000071D0 4E75                       		rts	
000071D2                            ; End of function sub_6C20
000071D2                            
000071D2                            
000071D2                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000071D2                            ; not used
000071D2                            
000071D2                            
000071D2                            sub_6C3C:
000071D2 D86B 0004                  		add.w	4(a3),d4
000071D6 DA53                       		add.w	(a3),d5
000071D8 0244 00F0                  		andi.w	#$F0,d4
000071DC 0245 01F0                  		andi.w	#$1F0,d5
000071E0 E94C                       		lsl.w	#4,d4
000071E2 E44D                       		lsr.w	#2,d5
000071E4 D845                       		add.w	d5,d4
000071E6 7002                       		moveq	#2,d0
000071E8 4840                       		swap	d0
000071EA 3004                       		move.w	d4,d0
000071EC 4E75                       		rts	
000071EE                            ; End of function sub_6C3C
000071EE                            
000071EE                            ; ---------------------------------------------------------------------------
000071EE                            ; Subroutine to	load tiles as soon as the level	appears
000071EE                            ; ---------------------------------------------------------------------------
000071EE                            
000071EE                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000071EE                            
000071EE                            
000071EE                            LoadTilesFromStart:			; XREF: Level; EndingSequence
000071EE 4BF9 00C0 0004             		lea	($C00004).l,a5
000071F4 4DF9 00C0 0000             		lea	($C00000).l,a6
000071FA 47F8 F700                  		lea	($FFFFF700).w,a3
000071FE 49F8 A400                  		lea	($FFFFA400).w,a4
00007202 343C 4000                  		move.w	#$4000,d2
00007206 6100                       		bsr.s	LoadTilesFromStart2
00007208 47F8 F708                  		lea	($FFFFF708).w,a3
0000720C 49F8 A440                  		lea	($FFFFA440).w,a4
00007210 343C 6000                  		move.w	#$6000,d2
00007214                            ; End of function LoadTilesFromStart
00007214                            
00007214                            
00007214                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00007214                            
00007214                            
00007214                            LoadTilesFromStart2:			; XREF: LoadTilesFromStart
00007214 78F0                       		moveq	#-$10,d4
00007216 7C0F                       		moveq	#$F,d6
00007218                            
00007218                            loc_6C82:
00007218 48E7 0E00                  		movem.l	d4-d6,-(sp)
0000721C 7A00                       		moveq	#0,d5
0000721E 3204                       		move.w	d4,d1
00007220 6100 FF94                  		bsr.w	sub_6C20
00007224 3801                       		move.w	d1,d4
00007226 7A00                       		moveq	#0,d5
00007228 7C1F                       		moveq	#$1F,d6
0000722A 6100 FE44                  		bsr.w	sub_6ADA
0000722E 4CDF 0070                  		movem.l	(sp)+,d4-d6
00007232 0644 0010                  		addi.w	#$10,d4
00007236 51CE FFE0                  		dbf	d6,loc_6C82
0000723A 4E75                       		rts	
0000723C                            ; End of function LoadTilesFromStart2
0000723C                            
0000723C                            ; ---------------------------------------------------------------------------
0000723C                            ; Main Load Block loading subroutine
0000723C                            ; ---------------------------------------------------------------------------
0000723C                            
0000723C                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000723C                            
0000723C                            
0000723C                            MainLoadBlockLoad:			; XREF: Level; EndingSequence
0000723C 7000                       		moveq	#0,d0
0000723E 1038 FE10                  		move.b	($FFFFFE10).w,d0
00007242 E948                       		lsl.w	#4,d0
00007244 45F9 0000 0000             		lea	(MainLoadBlocks).l,a2
0000724A 45F2 0000                  		lea	(a2,d0.w),a2
0000724E 2F0A                       		move.l	a2,-(sp)
00007250 588A                       		addq.l	#4,a2
00007252 205A                       		movea.l	(a2)+,a0
00007254 43F8 B000                  		lea	($FFFFB000).w,a1 ; RAM address for 16x16 mappings
00007258 303C 0000                  		move.w	#0,d0
0000725C 6100 A6E4                  		bsr.w	EniDec
00007260 205A                       		movea.l	(a2)+,a0
00007262 43F9 00FF 0000             		lea	($FF0000).l,a1	; RAM address for 256x256 mappings
00007268 6100 A856                  		bsr.w	KosDec
0000726C 6100 0000                  		bsr.w	LevelLayoutLoad
00007270 301A                       		move.w	(a2)+,d0
00007272 3012                       		move.w	(a2),d0
00007274 0240 00FF                  		andi.w	#$FF,d0
00007278 0C78 0103 FE10             		cmpi.w	#$103,($FFFFFE10).w ; is level SBZ3 (LZ4) ?
0000727E 6600                       		bne.s	MLB_ChkSBZPal	; if not, branch
00007280 700C                       		moveq	#$C,d0		; use SB3 pallet
00007282                            
00007282                            MLB_ChkSBZPal:
00007282 0C78 0501 FE10             		cmpi.w	#$501,($FFFFFE10).w ; is level SBZ2?
00007288 6700                       		beq.s	MLB_UsePal0E	; if yes, branch
0000728A 0C78 0502 FE10             		cmpi.w	#$502,($FFFFFE10).w ; is level FZ?
00007290 6600                       		bne.s	MLB_NormalPal	; if not, branch
00007292                            
00007292                            MLB_UsePal0E:
00007292 700E                       		moveq	#$E,d0		; use SBZ2/FZ pallet
00007294                            
00007294                            MLB_NormalPal:
00007294 6100 B050                  		bsr.w	PalLoad1	; load pallet (based on	d0)
00007298 245F                       		movea.l	(sp)+,a2
0000729A 584A                       		addq.w	#4,a2
0000729C 7000                       		moveq	#0,d0
0000729E 1012                       		move.b	(a2),d0
000072A0 6700                       		beq.s	locret_6D10
000072A2 6100 A500                  		bsr.w	LoadPLC		; load pattern load cues
000072A6                            
000072A6                            locret_6D10:
000072A6 4E75                       		rts	
000072A8                            ; End of function MainLoadBlockLoad
000072A8                            
000072A8                            ; ---------------------------------------------------------------------------
000072A8                            ; Level	layout loading subroutine
000072A8                            ; ---------------------------------------------------------------------------
000072A8                            
000072A8                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000072A8                            
000072A8                            
000072A8                            LevelLayoutLoad:			; XREF: TitleScreen; MainLoadBlockLoad
000072A8 47F8 A400                  		lea	($FFFFA400).w,a3
000072AC 323C 01FF                  		move.w	#$1FF,d1
000072B0 7000                       		moveq	#0,d0
000072B2                            
000072B2                            LevLoad_ClrRam:
000072B2 26C0                       		move.l	d0,(a3)+
000072B4 51C9 FFFC                  		dbf	d1,LevLoad_ClrRam ; clear the RAM ($FFFFA400-A7FF)
000072B8                            
000072B8 47F8 A400                  		lea	($FFFFA400).w,a3 ; RAM address for level layout
000072BC 7200                       		moveq	#0,d1
000072BE 6100 0000                  		bsr.w	LevelLayoutLoad2 ; load	level layout into RAM
000072C2 47F8 A440                  		lea	($FFFFA440).w,a3 ; RAM address for background layout
000072C6 7202                       		moveq	#2,d1
000072C8                            ; End of function LevelLayoutLoad
000072C8                            
000072C8                            ; "LevelLayoutLoad2" is	run twice - for	the level and the background
000072C8                            
000072C8                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000072C8                            
000072C8                            
000072C8                            LevelLayoutLoad2:			; XREF: LevelLayoutLoad
000072C8 3038 FE10                  		move.w	($FFFFFE10).w,d0
000072CC ED08                       		lsl.b	#6,d0
000072CE EA48                       		lsr.w	#5,d0
000072D0 3400                       		move.w	d0,d2
000072D2 D040                       		add.w	d0,d0
000072D4 D042                       		add.w	d2,d0
000072D6 D041                       		add.w	d1,d0
000072D8 43F9 0000 0000             		lea	(Level_Index).l,a1
000072DE 3031 0000                  		move.w	(a1,d0.w),d0
000072E2 43F1 0000                  		lea	(a1,d0.w),a1
000072E6 7200                       		moveq	#0,d1
000072E8 3401                       		move.w	d1,d2
000072EA 1219                       		move.b	(a1)+,d1	; load level width (in tiles)
000072EC 1419                       		move.b	(a1)+,d2	; load level height (in	tiles)
000072EE                            
000072EE                            LevLoad_NumRows:
000072EE 3001                       		move.w	d1,d0
000072F0 204B                       		movea.l	a3,a0
000072F2                            
000072F2                            LevLoad_Row:
000072F2 10D9                       		move.b	(a1)+,(a0)+
000072F4 51C8 FFFC                  		dbf	d0,LevLoad_Row	; load 1 row
000072F8 47EB 0080                  		lea	$80(a3),a3	; do next row
000072FC 51CA FFF0                  		dbf	d2,LevLoad_NumRows ; repeat for	number of rows
00007300 4E75                       		rts	
00007302                            ; End of function LevelLayoutLoad2
00007302                            
00007302                            ; ---------------------------------------------------------------------------
00007302                            ; Dynamic screen resize	loading	subroutine
00007302                            ; ---------------------------------------------------------------------------
00007302                            
00007302                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00007302                            
00007302                            
00007302                            DynScrResizeLoad:			; XREF: DeformBgLayer
00007302 7000                       		moveq	#0,d0
00007304 1038 FE10                  		move.b	($FFFFFE10).w,d0
00007308 D040                       		add.w	d0,d0
0000730A 303B 0000                  		move.w	Resize_Index(pc,d0.w),d0
0000730E 4EBB 0000                  		jsr	Resize_Index(pc,d0.w)
00007312 7202                       		moveq	#2,d1
00007314 3038 F726                  		move.w	($FFFFF726).w,d0
00007318 9078 F72E                  		sub.w	($FFFFF72E).w,d0
0000731C 6700                       		beq.s	locret_6DAA
0000731E 6400                       		bcc.s	loc_6DAC
00007320 4441                       		neg.w	d1
00007322 3038 F704                  		move.w	($FFFFF704).w,d0
00007326 B078 F726                  		cmp.w	($FFFFF726).w,d0
0000732A 6300                       		bls.s	loc_6DA0
0000732C 31C0 F72E                  		move.w	d0,($FFFFF72E).w
00007330 0278 FFFE F72E             		andi.w	#-2,($FFFFF72E).w
00007336                            
00007336                            loc_6DA0:
00007336 D378 F72E                  		add.w	d1,($FFFFF72E).w
0000733A 11FC 0001 F75C             		move.b	#1,($FFFFF75C).w
00007340                            
00007340                            locret_6DAA:
00007340 4E75                       		rts	
00007342                            ; ===========================================================================
00007342                            
00007342                            loc_6DAC:				; XREF: DynScrResizeLoad
00007342 3038 F704                  		move.w	($FFFFF704).w,d0
00007346 5040                       		addq.w	#8,d0
00007348 B078 F72E                  		cmp.w	($FFFFF72E).w,d0
0000734C 6500                       		bcs.s	loc_6DC4
0000734E 0838 0001 D022             		btst	#1,($FFFFD022).w
00007354 6700                       		beq.s	loc_6DC4
00007356 D241                       		add.w	d1,d1
00007358 D241                       		add.w	d1,d1
0000735A                            
0000735A                            loc_6DC4:
0000735A D378 F72E                  		add.w	d1,($FFFFF72E).w
0000735E 11FC 0001 F75C             		move.b	#1,($FFFFF75C).w
00007364 4E75                       		rts	
00007366                            ; End of function DynScrResizeLoad
00007366                            
00007366                            ; ===========================================================================
00007366                            ; ---------------------------------------------------------------------------
00007366                            ; Offset index for dynamic screen resizing
00007366                            ; ---------------------------------------------------------------------------
00007366 0000 0000                  Resize_Index:	dc.w Resize_GHZ-Resize_Index, Resize_LZ-Resize_Index
0000736A 0000 0000                  		dc.w Resize_MZ-Resize_Index, Resize_SLZ-Resize_Index
0000736E 0000 0000                  		dc.w Resize_SYZ-Resize_Index, Resize_SBZ-Resize_Index
00007372 0000                       		dc.w Resize_Ending-Resize_Index
00007374                            ; ===========================================================================
00007374                            ; ---------------------------------------------------------------------------
00007374                            ; Green	Hill Zone dynamic screen resizing
00007374                            ; ---------------------------------------------------------------------------
00007374                            
00007374                            Resize_GHZ:				; XREF: Resize_Index
00007374 7000                       		moveq	#0,d0
00007376 1038 FE11                  		move.b	($FFFFFE11).w,d0
0000737A D040                       		add.w	d0,d0
0000737C 303B 0000                  		move.w	Resize_GHZx(pc,d0.w),d0
00007380 4EFB 0000                  		jmp	Resize_GHZx(pc,d0.w)
00007384                            ; ===========================================================================
00007384 0000                       Resize_GHZx:	dc.w Resize_GHZ1-Resize_GHZx
00007386 0000                       		dc.w Resize_GHZ2-Resize_GHZx
00007388 0000                       		dc.w Resize_GHZ3-Resize_GHZx
0000738A                            ; ===========================================================================
0000738A                            
0000738A                            Resize_GHZ1:
0000738A 31FC 0300 F726             		move.w	#$300,($FFFFF726).w ; set lower	y-boundary
00007390 0C78 1780 F700             		cmpi.w	#$1780,($FFFFF700).w ; has the camera reached $1780 on x-axis?
00007396 6500                       		bcs.s	locret_6E08	; if not, branch
00007398 31FC 0400 F726             		move.w	#$400,($FFFFF726).w ; set lower	y-boundary
0000739E                            
0000739E                            locret_6E08:
0000739E 4E75                       		rts	
000073A0                            ; ===========================================================================
000073A0                            
000073A0                            Resize_GHZ2:
000073A0 31FC 0300 F726             		move.w	#$300,($FFFFF726).w
000073A6 0C78 0ED0 F700             		cmpi.w	#$ED0,($FFFFF700).w
000073AC 6500                       		bcs.s	locret_6E3A
000073AE 31FC 0200 F726             		move.w	#$200,($FFFFF726).w
000073B4 0C78 1600 F700             		cmpi.w	#$1600,($FFFFF700).w
000073BA 6500                       		bcs.s	locret_6E3A
000073BC 31FC 0400 F726             		move.w	#$400,($FFFFF726).w
000073C2 0C78 1D60 F700             		cmpi.w	#$1D60,($FFFFF700).w
000073C8 6500                       		bcs.s	locret_6E3A
000073CA 31FC 0300 F726             		move.w	#$300,($FFFFF726).w
000073D0                            
000073D0                            locret_6E3A:
000073D0 4E75                       		rts	
000073D2                            ; ===========================================================================
000073D2                            
000073D2                            Resize_GHZ3:
000073D2 7000                       		moveq	#0,d0
000073D4 1038 F742                  		move.b	($FFFFF742).w,d0
000073D8 303B 0000                  		move.w	off_6E4A(pc,d0.w),d0
000073DC 4EFB 0000                  		jmp	off_6E4A(pc,d0.w)
000073E0                            ; ===========================================================================
000073E0 0000                       off_6E4A:	dc.w Resize_GHZ3main-off_6E4A
000073E2 0000                       		dc.w Resize_GHZ3boss-off_6E4A
000073E4 0000                       		dc.w Resize_GHZ3end-off_6E4A
000073E6                            ; ===========================================================================
000073E6                            
000073E6                            Resize_GHZ3main:
000073E6 31FC 0300 F726             		move.w	#$300,($FFFFF726).w
000073EC 0C78 0380 F700             		cmpi.w	#$380,($FFFFF700).w
000073F2 6500                       		bcs.s	locret_6E96
000073F4 31FC 0310 F726             		move.w	#$310,($FFFFF726).w
000073FA 0C78 0960 F700             		cmpi.w	#$960,($FFFFF700).w
00007400 6500                       		bcs.s	locret_6E96
00007402 0C78 0280 F704             		cmpi.w	#$280,($FFFFF704).w
00007408 6500                       		bcs.s	loc_6E98
0000740A 31FC 0400 F726             		move.w	#$400,($FFFFF726).w
00007410 0C78 1380 F700             		cmpi.w	#$1380,($FFFFF700).w
00007416 6400                       		bcc.s	loc_6E8E
00007418 31FC 04C0 F726             		move.w	#$4C0,($FFFFF726).w
0000741E 31FC 04C0 F72E             		move.w	#$4C0,($FFFFF72E).w
00007424                            
00007424                            loc_6E8E:
00007424 0C78 1700 F700             		cmpi.w	#$1700,($FFFFF700).w
0000742A 6400                       		bcc.s	loc_6E98
0000742C                            
0000742C                            locret_6E96:
0000742C 4E75                       		rts	
0000742E                            ; ===========================================================================
0000742E                            
0000742E                            loc_6E98:
0000742E 31FC 0300 F726             		move.w	#$300,($FFFFF726).w
00007434 5438 F742                  		addq.b	#2,($FFFFF742).w
00007438 4E75                       		rts	
0000743A                            ; ===========================================================================
0000743A                            
0000743A                            Resize_GHZ3boss:
0000743A 0C78 0960 F700             		cmpi.w	#$960,($FFFFF700).w
00007440 6400                       		bcc.s	loc_6EB0
00007442 5538 F742                  		subq.b	#2,($FFFFF742).w
00007446                            
00007446                            loc_6EB0:
00007446 0C78 2960 F700             		cmpi.w	#$2960,($FFFFF700).w
0000744C 6500                       		bcs.s	locret_6EE8
0000744E 6100 0000                  		bsr.w	SingleObjLoad
00007452 6600                       		bne.s	loc_6ED0
00007454 12BC 003D                  		move.b	#$3D,0(a1)	; load GHZ boss	object
00007458 337C 2A60 0008             		move.w	#$2A60,8(a1)
0000745E 337C 0280 000C             		move.w	#$280,$C(a1)
00007464                            
00007464                            loc_6ED0:
00007464 303C 008C                  		move.w	#$8C,d0
00007468 6100 A150                  		bsr.w	PlaySound	; play boss music
0000746C 11FC 0001 F7AA             		move.b	#1,($FFFFF7AA).w ; lock	screen
00007472 5438 F742                  		addq.b	#2,($FFFFF742).w
00007476 7011                       		moveq	#$11,d0
00007478 6000 A32A                  		bra.w	LoadPLC		; load boss patterns
0000747C                            ; ===========================================================================
0000747C                            
0000747C                            locret_6EE8:
0000747C 4E75                       		rts	
0000747E                            ; ===========================================================================
0000747E                            
0000747E                            Resize_GHZ3end:
0000747E 31F8 F700 F728             		move.w	($FFFFF700).w,($FFFFF728).w
00007484 4E75                       		rts	
00007486                            ; ===========================================================================
00007486                            ; ---------------------------------------------------------------------------
00007486                            ; Labyrinth Zone dynamic screen	resizing
00007486                            ; ---------------------------------------------------------------------------
00007486                            
00007486                            Resize_LZ:				; XREF: Resize_Index
00007486 7000                       		moveq	#0,d0
00007488 1038 FE11                  		move.b	($FFFFFE11).w,d0
0000748C D040                       		add.w	d0,d0
0000748E 303B 0000                  		move.w	Resize_LZx(pc,d0.w),d0
00007492 4EFB 0000                  		jmp	Resize_LZx(pc,d0.w)
00007496                            ; ===========================================================================
00007496 0000                       Resize_LZx:	dc.w Resize_LZ12-Resize_LZx
00007498 0000                       		dc.w Resize_LZ12-Resize_LZx
0000749A 0000                       		dc.w Resize_LZ3-Resize_LZx
0000749C 0000                       		dc.w Resize_SBZ3-Resize_LZx
0000749E                            ; ===========================================================================
0000749E                            
0000749E                            Resize_LZ12:
0000749E 4E75                       		rts	
000074A0                            ; ===========================================================================
000074A0                            
000074A0                            Resize_LZ3:
000074A0 7000                       		moveq	#0,d0
000074A2 1038 F742                  		move.b	($FFFFF742).w,d0
000074A6 303B 0000                  		move.w	off_6E4A2(pc,d0.w),d0
000074AA 4EFB 0000                  		jmp	off_6E4A2(pc,d0.w)
000074AE                            ; ===========================================================================
000074AE                            off_6E4A2:	
000074AE 0000                       		dc.w Resize_LZ3boss-off_6E4A2
000074B0 0000                       		dc.w Resize_LZ3end-off_6E4A2
000074B2                            ; ===========================================================================
000074B2                            Resize_LZ3boss:
000074B2 4A38 F742                  		tst.b	($FFFFF742).w
000074B6 6600                       		bne.s	locret_6F62
000074B8 0C78 1CA0 F700             		cmpi.w	#$1CA0,($FFFFF700).w
000074BE 6500                       		bcs.s	locret_6F62
000074C0 31FC 0640 F726             		move.w	#$640,($FFFFF726).w ; set lower	y-boundary
000074C6 31FC 0000 F634             		move.w	#0,($FFFFF634).w ; disable pallet cycling
000074CC                            
000074CC 6100 0000                  		bsr.w	SingleObjLoad
000074D0 6600                       		bne.s	loc_6F4A
000074D2 12BC 0077                  		move.b	#$77,0(a1)	; load LZ boss object
000074D6 337C 1EA0 0008             		move.w	#$1EA0,8(a1)
000074DC 337C 06E0 000C             		move.w	#$6E0,$C(a1)
000074E2                            loc_6F4A:
000074E2 303C 008C                  		move.w	#$8C,d0
000074E6 6100 A0D2                  		bsr.w	PlaySound	; play boss music
000074EA 11FC 0001 F7AA             		move.b	#1,($FFFFF7AA).w ; lock	screen
000074F0 5438 F742                  		addq.b	#2,($FFFFF742).w
000074F4 7020                       		moveq	#$20,d0
000074F6 6000 A2AC                  		bra.w	LoadPLC		; load boss patterns
000074FA                            ; ===========================================================================
000074FA                            
000074FA                            locret_6F62:
000074FA 4E75                       		rts	
000074FC                            ; ===========================================================================
000074FC                            
000074FC                            Resize_LZ3end:
000074FC 31F8 F700 F728             		move.w	($FFFFF700).w,($FFFFF728).w
00007502 4E75                       		rts	
00007504                            ; ===========================================================================
00007504                            
00007504                            Resize_SBZ3:
00007504 0C78 0D00 F700             		cmpi.w	#$D00,($FFFFF700).w
0000750A 6500                       		bcs.s	locret_6F8C
0000750C 0C78 0018 D00C             		cmpi.w	#$18,($FFFFD00C).w ; has Sonic reached the top of the level?
00007512 6400                       		bcc.s	locret_6F8C	; if not, branch
00007514 4238 FE30                  		clr.b	($FFFFFE30).w
00007518 31FC 0001 FE02             		move.w	#1,($FFFFFE02).w ; restart level
0000751E 31FC 0502 FE10             		move.w	#$502,($FFFFFE10).w ; set level	number to 0502 (FZ)
00007524 11FC 0001 F7C8             		move.b	#1,($FFFFF7C8).w ; freeze Sonic
0000752A                            
0000752A                            locret_6F8C:
0000752A 4E75                       		rts	
0000752C                            ; ===========================================================================
0000752C                            ; ---------------------------------------------------------------------------
0000752C                            ; Marble Zone dynamic screen resizing
0000752C                            ; ---------------------------------------------------------------------------
0000752C                            
0000752C                            Resize_MZ:				; XREF: Resize_Index
0000752C 7000                       		moveq	#0,d0
0000752E 1038 FE11                  		move.b	($FFFFFE11).w,d0
00007532 D040                       		add.w	d0,d0
00007534 303B 0000                  		move.w	Resize_MZx(pc,d0.w),d0
00007538 4EFB 0000                  		jmp	Resize_MZx(pc,d0.w)
0000753C                            ; ===========================================================================
0000753C 0000                       Resize_MZx:	dc.w Resize_MZ1-Resize_MZx
0000753E 0000                       		dc.w Resize_MZ2-Resize_MZx
00007540 0000                       		dc.w Resize_MZ3-Resize_MZx
00007542                            ; ===========================================================================
00007542                            
00007542                            Resize_MZ1:
00007542 7000                       		moveq	#0,d0
00007544 1038 F742                  		move.b	($FFFFF742).w,d0
00007548 303B 0000                  		move.w	off_6FB2(pc,d0.w),d0
0000754C 4EFB 0000                  		jmp	off_6FB2(pc,d0.w)
00007550                            ; ===========================================================================
00007550 0000                       off_6FB2:	dc.w loc_6FBA-off_6FB2
00007552 0000                       		dc.w loc_6FEA-off_6FB2
00007554 0000                       		dc.w loc_702E-off_6FB2
00007556 0000                       		dc.w loc_7050-off_6FB2
00007558                            ; ===========================================================================
00007558                            
00007558                            loc_6FBA:
00007558 31FC 01D0 F726             		move.w	#$1D0,($FFFFF726).w
0000755E 0C78 0700 F700             		cmpi.w	#$700,($FFFFF700).w
00007564 6500                       		bcs.s	locret_6FE8
00007566 31FC 0220 F726             		move.w	#$220,($FFFFF726).w
0000756C 0C78 0D00 F700             		cmpi.w	#$D00,($FFFFF700).w
00007572 6500                       		bcs.s	locret_6FE8
00007574 31FC 0340 F726             		move.w	#$340,($FFFFF726).w
0000757A 0C78 0340 F704             		cmpi.w	#$340,($FFFFF704).w
00007580 6500                       		bcs.s	locret_6FE8
00007582 5438 F742                  		addq.b	#2,($FFFFF742).w
00007586                            
00007586                            locret_6FE8:
00007586 4E75                       		rts	
00007588                            ; ===========================================================================
00007588                            
00007588                            loc_6FEA:
00007588 0C78 0340 F704             		cmpi.w	#$340,($FFFFF704).w
0000758E 6400                       		bcc.s	loc_6FF8
00007590 5538 F742                  		subq.b	#2,($FFFFF742).w
00007594 4E75                       		rts	
00007596                            ; ===========================================================================
00007596                            
00007596                            loc_6FF8:
00007596 31FC 0000 F72C             		move.w	#0,($FFFFF72C).w
0000759C 0C78 0E00 F700             		cmpi.w	#$E00,($FFFFF700).w
000075A2 6400                       		bcc.s	locret_702C
000075A4 31FC 0340 F72C             		move.w	#$340,($FFFFF72C).w
000075AA 31FC 0340 F726             		move.w	#$340,($FFFFF726).w
000075B0 0C78 0A90 F700             		cmpi.w	#$A90,($FFFFF700).w
000075B6 6400                       		bcc.s	locret_702C
000075B8 31FC 0500 F726             		move.w	#$500,($FFFFF726).w
000075BE 0C78 0370 F704             		cmpi.w	#$370,($FFFFF704).w
000075C4 6500                       		bcs.s	locret_702C
000075C6 5438 F742                  		addq.b	#2,($FFFFF742).w
000075CA                            
000075CA                            locret_702C:
000075CA 4E75                       		rts	
000075CC                            ; ===========================================================================
000075CC                            
000075CC                            loc_702E:
000075CC 0C78 0370 F704             		cmpi.w	#$370,($FFFFF704).w
000075D2 6400                       		bcc.s	loc_703C
000075D4 5538 F742                  		subq.b	#2,($FFFFF742).w
000075D8 4E75                       		rts	
000075DA                            ; ===========================================================================
000075DA                            
000075DA                            loc_703C:
000075DA 0C78 0500 F704             		cmpi.w	#$500,($FFFFF704).w
000075E0 6500                       		bcs.s	locret_704E
000075E2 31FC 0500 F72C             		move.w	#$500,($FFFFF72C).w
000075E8 5438 F742                  		addq.b	#2,($FFFFF742).w
000075EC                            
000075EC                            locret_704E:
000075EC 4E75                       		rts	
000075EE                            ; ===========================================================================
000075EE                            
000075EE                            loc_7050:
000075EE 0C78 0E70 F700             		cmpi.w	#$E70,($FFFFF700).w
000075F4 6500                       		bcs.s	locret_7072
000075F6 31FC 0000 F72C             		move.w	#0,($FFFFF72C).w
000075FC 31FC 0500 F726             		move.w	#$500,($FFFFF726).w
00007602 0C78 1430 F700             		cmpi.w	#$1430,($FFFFF700).w
00007608 6500                       		bcs.s	locret_7072
0000760A 31FC 0210 F726             		move.w	#$210,($FFFFF726).w
00007610                            
00007610                            locret_7072:
00007610 4E75                       		rts	
00007612                            ; ===========================================================================
00007612                            
00007612                            Resize_MZ2:
00007612 31FC 0520 F726             		move.w	#$520,($FFFFF726).w
00007618 0C78 1700 F700             		cmpi.w	#$1700,($FFFFF700).w
0000761E 6500                       		bcs.s	locret_7088
00007620 31FC 0200 F726             		move.w	#$200,($FFFFF726).w
00007626                            
00007626                            locret_7088:
00007626 4E75                       		rts	
00007628                            ; ===========================================================================
00007628                            
00007628                            Resize_MZ3:
00007628 7000                       		moveq	#0,d0
0000762A 1038 F742                  		move.b	($FFFFF742).w,d0
0000762E 303B 0000                  		move.w	off_7098(pc,d0.w),d0
00007632 4EFB 0000                  		jmp	off_7098(pc,d0.w)
00007636                            ; ===========================================================================
00007636 0000                       off_7098:	dc.w Resize_MZ3boss-off_7098
00007638 0000                       		dc.w Resize_MZ3end-off_7098
0000763A                            ; ===========================================================================
0000763A                            
0000763A                            Resize_MZ3boss:
0000763A 31FC 0720 F726             		move.w	#$720,($FFFFF726).w
00007640 0C78 1560 F700             		cmpi.w	#$1560,($FFFFF700).w
00007646 6500                       		bcs.s	locret_70E8
00007648 31FC 0210 F726             		move.w	#$210,($FFFFF726).w
0000764E 0C78 17F0 F700             		cmpi.w	#$17F0,($FFFFF700).w
00007654 6500                       		bcs.s	locret_70E8
00007656 6100 0000                  		bsr.w	SingleObjLoad
0000765A 6600                       		bne.s	loc_70D0
0000765C 12BC 0073                  		move.b	#$73,0(a1)	; load MZ boss object
00007660 337C 19F0 0008             		move.w	#$19F0,8(a1)
00007666 337C 022C 000C             		move.w	#$22C,$C(a1)
0000766C                            
0000766C                            loc_70D0:
0000766C 303C 008C                  		move.w	#$8C,d0
00007670 6100 9F48                  		bsr.w	PlaySound	; play boss music
00007674 11FC 0001 F7AA             		move.b	#1,($FFFFF7AA).w ; lock	screen
0000767A 5438 F742                  		addq.b	#2,($FFFFF742).w
0000767E 7011                       		moveq	#$11,d0
00007680 6000 A122                  		bra.w	LoadPLC		; load boss patterns
00007684                            ; ===========================================================================
00007684                            
00007684                            locret_70E8:
00007684 4E75                       		rts	
00007686                            ; ===========================================================================
00007686                            
00007686                            Resize_MZ3end:
00007686 31F8 F700 F728             		move.w	($FFFFF700).w,($FFFFF728).w
0000768C 4E75                       		rts	
0000768E                            ; ===========================================================================
0000768E                            ; ---------------------------------------------------------------------------
0000768E                            ; Star Light Zone dynamic screen resizing
0000768E                            ; ---------------------------------------------------------------------------
0000768E                            
0000768E                            Resize_SLZ:				; XREF: Resize_Index
0000768E 7000                       		moveq	#0,d0
00007690 1038 FE11                  		move.b	($FFFFFE11).w,d0
00007694 D040                       		add.w	d0,d0
00007696 303B 0000                  		move.w	Resize_SLZx(pc,d0.w),d0
0000769A 4EFB 0000                  		jmp	Resize_SLZx(pc,d0.w)
0000769E                            ; ===========================================================================
0000769E 0000                       Resize_SLZx:	dc.w Resize_SLZ1-Resize_SLZx
000076A0 0000                       		dc.w Resize_SLZ2-Resize_SLZx
000076A2 0000                       		dc.w Resize_SLZ3-Resize_SLZx
000076A4                            ; ===========================================================================
000076A4                            
000076A4                            Resize_SLZ1:
000076A4 31FC 0100 F726             		move.w	#$100,($FFFFF726).w ; set lower	y-boundary
000076AA 4E75                       		rts	
000076AC                            
000076AC                            Resize_SLZ2:
000076AC 4E75                       		rts	
000076AE                            ; ===========================================================================
000076AE                            
000076AE                            Resize_SLZ3:
000076AE 7000                       		moveq	#0,d0
000076B0 1038 F742                  		move.b	($FFFFF742).w,d0
000076B4 303B 0000                  		move.w	off_7118(pc,d0.w),d0
000076B8 4EFB 0000                  		jmp	off_7118(pc,d0.w)
000076BC                            ; ===========================================================================
000076BC 0000                       off_7118:	dc.w Resize_SLZ3main-off_7118
000076BE 0000                       		dc.w Resize_SLZ3boss-off_7118
000076C0 0000                       		dc.w Resize_SLZ3end-off_7118
000076C2                            ; ===========================================================================
000076C2                            
000076C2                            Resize_SLZ3main:
000076C2 0C78 1E70 F700             		cmpi.w	#$1E70,($FFFFF700).w
000076C8 6500                       		bcs.s	locret_7130
000076CA 31FC 0210 F726             		move.w	#$210,($FFFFF726).w
000076D0 5438 F742                  		addq.b	#2,($FFFFF742).w
000076D4                            
000076D4                            locret_7130:
000076D4 4E75                       		rts	
000076D6                            ; ===========================================================================
000076D6                            
000076D6                            Resize_SLZ3boss:
000076D6 0C78 2000 F700             		cmpi.w	#$2000,($FFFFF700).w
000076DC 6500                       		bcs.s	locret_715C
000076DE 6100 0000                  		bsr.w	SingleObjLoad
000076E2 6600                       		bne.s	loc_7144
000076E4 12BC 007A                  		move.b	#$7A,(a1)	; load SLZ boss	object
000076E8                            
000076E8                            loc_7144:
000076E8 303C 008C                  		move.w	#$8C,d0
000076EC 6100 9ECC                  		bsr.w	PlaySound	; play boss music
000076F0 11FC 0001 F7AA             		move.b	#1,($FFFFF7AA).w ; lock	screen
000076F6 5438 F742                  		addq.b	#2,($FFFFF742).w
000076FA 7011                       		moveq	#$11,d0
000076FC 6000 A0A6                  		bra.w	LoadPLC		; load boss patterns
00007700                            ; ===========================================================================
00007700                            
00007700                            locret_715C:
00007700 4E75                       		rts	
00007702                            ; ===========================================================================
00007702                            
00007702                            Resize_SLZ3end:
00007702 31F8 F700 F728             		move.w	($FFFFF700).w,($FFFFF728).w
00007708 4E75                       		rts
0000770A 4E75                       		rts
0000770C                            ; ===========================================================================
0000770C                            ; ---------------------------------------------------------------------------
0000770C                            ; Spring Yard Zone dynamic screen resizing
0000770C                            ; ---------------------------------------------------------------------------
0000770C                            
0000770C                            Resize_SYZ:				; XREF: Resize_Index
0000770C 7000                       		moveq	#0,d0
0000770E 1038 FE11                  		move.b	($FFFFFE11).w,d0
00007712 D040                       		add.w	d0,d0
00007714 303B 0000                  		move.w	Resize_SYZx(pc,d0.w),d0
00007718 4EFB 0000                  		jmp	Resize_SYZx(pc,d0.w)
0000771C                            ; ===========================================================================
0000771C 0000                       Resize_SYZx:	dc.w Resize_SYZ1-Resize_SYZx
0000771E 0000                       		dc.w Resize_SYZ2-Resize_SYZx
00007720 0000                       		dc.w Resize_SYZ3-Resize_SYZx
00007722                            ; ===========================================================================
00007722                            
00007722                            Resize_SYZ1:
00007722 4E75                       		rts	
00007724                            ; ===========================================================================
00007724                            
00007724                            Resize_SYZ2:
00007724 31FC 0520 F726             		move.w	#$520,($FFFFF726).w
0000772A 0C78 25A0 F700             		cmpi.w	#$25A0,($FFFFF700).w
00007730 6500                       		bcs.s	locret_71A2
00007732 31FC 0420 F726             		move.w	#$420,($FFFFF726).w
00007738 0C78 04D0 D00C             		cmpi.w	#$4D0,($FFFFD00C).w
0000773E 6500                       		bcs.s	locret_71A2
00007740 31FC 0520 F726             		move.w	#$520,($FFFFF726).w
00007746                            
00007746                            locret_71A2:
00007746 4E75                       		rts	
00007748                            ; ===========================================================================
00007748                            
00007748                            Resize_SYZ3:
00007748 7000                       		moveq	#0,d0
0000774A 1038 F742                  		move.b	($FFFFF742).w,d0
0000774E 303B 0000                  		move.w	off_71B2(pc,d0.w),d0
00007752 4EFB 0000                  		jmp	off_71B2(pc,d0.w)
00007756                            ; ===========================================================================
00007756 0000                       off_71B2:	dc.w Resize_SYZ3main-off_71B2
00007758 0000                       		dc.w Resize_SYZ3boss-off_71B2
0000775A 0000                       		dc.w Resize_SYZ3end-off_71B2
0000775C                            ; ===========================================================================
0000775C                            
0000775C                            Resize_SYZ3main:
0000775C 0C78 2AC0 F700             		cmpi.w	#$2AC0,($FFFFF700).w
00007762 6500                       		bcs.s	locret_71CE
00007764 6100 0000                  		bsr.w	SingleObjLoad
00007768 6600                       		bne.s	locret_71CE
0000776A 12BC 0076                  		move.b	#$76,(a1)	; load blocks that boss	picks up
0000776E 5438 F742                  		addq.b	#2,($FFFFF742).w
00007772                            
00007772                            locret_71CE:
00007772 4E75                       		rts	
00007774                            ; ===========================================================================
00007774                            
00007774                            Resize_SYZ3boss:
00007774 0C78 2C00 F700             		cmpi.w	#$2C00,($FFFFF700).w
0000777A 6500                       		bcs.s	locret_7200
0000777C 31FC 04CC F726             		move.w	#$4CC,($FFFFF726).w
00007782 6100 0000                  		bsr.w	SingleObjLoad
00007786 6600                       		bne.s	loc_71EC
00007788 12BC 0075                  		move.b	#$75,(a1)	; load SYZ boss	object
0000778C 5438 F742                  		addq.b	#2,($FFFFF742).w
00007790                            
00007790                            loc_71EC:
00007790 303C 008C                  		move.w	#$8C,d0
00007794 6100 9E24                  		bsr.w	PlaySound	; play boss music
00007798 11FC 0001 F7AA             		move.b	#1,($FFFFF7AA).w ; lock	screen
0000779E 7011                       		moveq	#$11,d0
000077A0 6000 A002                  		bra.w	LoadPLC		; load boss patterns
000077A4                            ; ===========================================================================
000077A4                            
000077A4                            locret_7200:
000077A4 4E75                       		rts	
000077A6                            ; ===========================================================================
000077A6                            
000077A6                            Resize_SYZ3end:
000077A6 31F8 F700 F728             		move.w	($FFFFF700).w,($FFFFF728).w
000077AC 4E75                       		rts	
000077AE                            ; ===========================================================================
000077AE                            ; ---------------------------------------------------------------------------
000077AE                            ; Scrap	Brain Zone dynamic screen resizing
000077AE                            ; ---------------------------------------------------------------------------
000077AE                            
000077AE                            Resize_SBZ:				; XREF: Resize_Index
000077AE 7000                       		moveq	#0,d0
000077B0 1038 FE11                  		move.b	($FFFFFE11).w,d0
000077B4 D040                       		add.w	d0,d0
000077B6 303B 0000                  		move.w	Resize_SBZx(pc,d0.w),d0
000077BA 4EFB 0000                  		jmp	Resize_SBZx(pc,d0.w)
000077BE                            ; ===========================================================================
000077BE 0000                       Resize_SBZx:	dc.w Resize_SBZ1-Resize_SBZx
000077C0 0000                       		dc.w Resize_SBZ2-Resize_SBZx
000077C2 0000                       		dc.w Resize_FZ-Resize_SBZx
000077C4                            ; ===========================================================================
000077C4                            
000077C4                            Resize_SBZ1:
000077C4 31FC 0720 F726             		move.w	#$720,($FFFFF726).w
000077CA 0C78 1880 F700             		cmpi.w	#$1880,($FFFFF700).w
000077D0 6500                       		bcs.s	locret_7242
000077D2 31FC 0620 F726             		move.w	#$620,($FFFFF726).w
000077D8 0C78 2000 F700             		cmpi.w	#$2000,($FFFFF700).w
000077DE 6500                       		bcs.s	locret_7242
000077E0 31FC 02A0 F726             		move.w	#$2A0,($FFFFF726).w
000077E6                            
000077E6                            locret_7242:
000077E6 4E75                       		rts	
000077E8                            ; ===========================================================================
000077E8                            
000077E8                            Resize_SBZ2:
000077E8 7000                       		moveq	#0,d0
000077EA 1038 F742                  		move.b	($FFFFF742).w,d0
000077EE 303B 0000                  		move.w	off_7252(pc,d0.w),d0
000077F2 4EFB 0000                  		jmp	off_7252(pc,d0.w)
000077F6                            ; ===========================================================================
000077F6 0000                       off_7252:	dc.w Resize_SBZ2main-off_7252
000077F8 0000                       		dc.w Resize_SBZ2boss-off_7252
000077FA 0000                       		dc.w Resize_SBZ2boss2-off_7252
000077FC 0000                       		dc.w Resize_SBZ2end-off_7252
000077FE                            ; ===========================================================================
000077FE                            
000077FE                            Resize_SBZ2main:
000077FE 31FC 0800 F726             		move.w	#$800,($FFFFF726).w
00007804 0C78 1800 F700             		cmpi.w	#$1800,($FFFFF700).w
0000780A 6500                       		bcs.s	locret_727A
0000780C 31FC 0510 F726             		move.w	#$510,($FFFFF726).w
00007812 0C78 1E00 F700             		cmpi.w	#$1E00,($FFFFF700).w
00007818 6500                       		bcs.s	locret_727A
0000781A 5438 F742                  		addq.b	#2,($FFFFF742).w
0000781E                            
0000781E                            locret_727A:
0000781E 4E75                       		rts	
00007820                            ; ===========================================================================
00007820                            
00007820                            Resize_SBZ2boss:
00007820 0C78 1EB0 F700             		cmpi.w	#$1EB0,($FFFFF700).w
00007826 6500                       		bcs.s	locret_7298
00007828 6100 0000                  		bsr.w	SingleObjLoad
0000782C 6600                       		bne.s	locret_7298
0000782E 12BC 0083                  		move.b	#$83,(a1)	; load collapsing block	object
00007832 5438 F742                  		addq.b	#2,($FFFFF742).w
00007836 701E                       		moveq	#$1E,d0
00007838 6000 9F6A                  		bra.w	LoadPLC		; load SBZ2 Eggman patterns
0000783C                            ; ===========================================================================
0000783C                            
0000783C                            locret_7298:
0000783C 4E75                       		rts	
0000783E                            ; ===========================================================================
0000783E                            
0000783E                            Resize_SBZ2boss2:
0000783E 0C78 1F60 F700             		cmpi.w	#$1F60,($FFFFF700).w
00007844 6500                       		bcs.s	loc_72B6
00007846 6100 0000                  		bsr.w	SingleObjLoad
0000784A 6600                       		bne.s	loc_72B0
0000784C 12BC 0082                  		move.b	#$82,(a1)	; load SBZ2 Eggman object
00007850 5438 F742                  		addq.b	#2,($FFFFF742).w
00007854                            
00007854                            loc_72B0:
00007854 11FC 0001 F7AA             		move.b	#1,($FFFFF7AA).w ; lock	screen
0000785A                            
0000785A                            loc_72B6:
0000785A 6000                       		bra.s	loc_72C2
0000785C                            ; ===========================================================================
0000785C                            
0000785C                            Resize_SBZ2end:
0000785C 0C78 2050 F700             		cmpi.w	#$2050,($FFFFF700).w
00007862 6500                       		bcs.s	loc_72C2
00007864 4E75                       		rts	
00007866                            ; ===========================================================================
00007866                            
00007866                            loc_72C2:
00007866 31F8 F700 F728             		move.w	($FFFFF700).w,($FFFFF728).w
0000786C 4E75                       		rts	
0000786E                            ; ===========================================================================
0000786E                            
0000786E                            Resize_FZ:
0000786E 7000                       		moveq	#0,d0
00007870 1038 F742                  		move.b	($FFFFF742).w,d0
00007874 303B 0000                  		move.w	off_72D8(pc,d0.w),d0
00007878 4EFB 0000                  		jmp	off_72D8(pc,d0.w)
0000787C                            ; ===========================================================================
0000787C 0000 0000                  off_72D8:	dc.w Resize_FZmain-off_72D8, Resize_FZboss-off_72D8
00007880 0000 0000                  		dc.w Resize_FZend-off_72D8, locret_7322-off_72D8
00007884 0000                       		dc.w Resize_FZend2-off_72D8
00007886                            ; ===========================================================================
00007886                            
00007886                            Resize_FZmain:
00007886 0C78 2148 F700             		cmpi.w	#$2148,($FFFFF700).w
0000788C 6500                       		bcs.s	loc_72F4
0000788E 5438 F742                  		addq.b	#2,($FFFFF742).w
00007892 701F                       		moveq	#$1F,d0
00007894 6100 9F0E                  		bsr.w	LoadPLC		; load FZ boss patterns
00007898                            
00007898                            loc_72F4:
00007898 60CC                       		bra.s	loc_72C2
0000789A                            ; ===========================================================================
0000789A                            
0000789A                            Resize_FZboss:
0000789A 0C78 2300 F700             		cmpi.w	#$2300,($FFFFF700).w
000078A0 6500                       		bcs.s	loc_7312
000078A2 6100 0000                  		bsr.w	SingleObjLoad
000078A6 6600                       		bne.s	loc_7312
000078A8 12BC 0085                  		move.b	#$85,(a1)	; load FZ boss object
000078AC 5438 F742                  		addq.b	#2,($FFFFF742).w
000078B0 11FC 0001 F7AA             		move.b	#1,($FFFFF7AA).w ; lock	screen
000078B6                            
000078B6                            loc_7312:
000078B6 60AE                       		bra.s	loc_72C2
000078B8                            ; ===========================================================================
000078B8                            
000078B8                            Resize_FZend:
000078B8 0C78 2450 F700             		cmpi.w	#$2450,($FFFFF700).w
000078BE 6500                       		bcs.s	loc_7320
000078C0 5438 F742                  		addq.b	#2,($FFFFF742).w
000078C4                            
000078C4                            loc_7320:
000078C4 60A0                       		bra.s	loc_72C2
000078C6                            ; ===========================================================================
000078C6                            
000078C6                            locret_7322:
000078C6 4E75                       		rts	
000078C8                            ; ===========================================================================
000078C8                            
000078C8                            Resize_FZend2:
000078C8 609C                       		bra.s	loc_72C2
000078CA                            ; ===========================================================================
000078CA                            ; ---------------------------------------------------------------------------
000078CA                            ; Ending sequence dynamic screen resizing (empty)
000078CA                            ; ---------------------------------------------------------------------------
000078CA                            
000078CA                            Resize_Ending:				; XREF: Resize_Index
000078CA 4E75                       		rts	
000078CC                            ; ===========================================================================
000078CC                            ; ---------------------------------------------------------------------------
000078CC                            ; Object 11 - GHZ bridge
000078CC                            ; ---------------------------------------------------------------------------
000078CC                            
000078CC                            Obj11:					; XREF: Obj_Index
000078CC 7000                       		moveq	#0,d0
000078CE 1028 0024                  		move.b	$24(a0),d0
000078D2 323B 0000                  		move.w	Obj11_Index(pc,d0.w),d1
000078D6 4EFB 1000                  		jmp	Obj11_Index(pc,d1.w)
000078DA                            ; ===========================================================================
000078DA 0000 0000                  Obj11_Index:	dc.w Obj11_Main-Obj11_Index, Obj11_Action-Obj11_Index
000078DE 0000 0000                  		dc.w Obj11_Action2-Obj11_Index,	Obj11_Delete2-Obj11_Index
000078E2 0000 0000                  		dc.w Obj11_Delete2-Obj11_Index,	Obj11_Display2-Obj11_Index
000078E6                            ; ===========================================================================
000078E6                            
000078E6                            Obj11_Main:				; XREF: Obj11_Index
000078E6 5428 0024                  		addq.b	#2,$24(a0)
000078EA 217C 0000 0000 0004        		move.l	#Map_obj11,4(a0)
000078F2 317C 438E 0002             		move.w	#$438E,2(a0)
000078F8 117C 0004 0001             		move.b	#4,1(a0)
000078FE 117C 0003 0018             		move.b	#3,$18(a0)
00007904 117C 0080 0019             		move.b	#$80,$19(a0)
0000790A 3428 000C                  		move.w	$C(a0),d2
0000790E 3628 0008                  		move.w	8(a0),d3
00007912 1810                       		move.b	0(a0),d4	; copy object number ($11) to d4
00007914 45E8 0028                  		lea	$28(a0),a2	; copy bridge subtype to a2
00007918 7200                       		moveq	#0,d1
0000791A 1212                       		move.b	(a2),d1		; copy a2 to d1
0000791C 14FC 0000                  		move.b	#0,(a2)+
00007920 3001                       		move.w	d1,d0
00007922 E248                       		lsr.w	#1,d0
00007924 E948                       		lsl.w	#4,d0
00007926 9640                       		sub.w	d0,d3
00007928 5501                       		subq.b	#2,d1
0000792A 6500                       		bcs.s	Obj11_Action
0000792C                            
0000792C                            Obj11_MakeBdg:
0000792C 6100 0000                  		bsr.w	SingleObjLoad
00007930 6600                       		bne.s	Obj11_Action
00007932 5228 0028                  		addq.b	#1,$28(a0)
00007936 B668 0008                  		cmp.w	8(a0),d3
0000793A 6600                       		bne.s	loc_73B8
0000793C 0643 0010                  		addi.w	#$10,d3
00007940 3142 000C                  		move.w	d2,$C(a0)
00007944 3142 003C                  		move.w	d2,$3C(a0)
00007948 3A08                       		move.w	a0,d5
0000794A 0445 D000                  		subi.w	#-$3000,d5
0000794E EC4D                       		lsr.w	#6,d5
00007950 0245 007F                  		andi.w	#$7F,d5
00007954 14C5                       		move.b	d5,(a2)+
00007956 5228 0028                  		addq.b	#1,$28(a0)
0000795A                            
0000795A                            loc_73B8:				; XREF: ROM:00007398j
0000795A 3A09                       		move.w	a1,d5
0000795C 0445 D000                  		subi.w	#-$3000,d5
00007960 EC4D                       		lsr.w	#6,d5
00007962 0245 007F                  		andi.w	#$7F,d5
00007966 14C5                       		move.b	d5,(a2)+
00007968 137C 000A 0024             		move.b	#$A,$24(a1)
0000796E 1284                       		move.b	d4,0(a1)	; load bridge object (d4 = $11)
00007970 3342 000C                  		move.w	d2,$C(a1)
00007974 3342 003C                  		move.w	d2,$3C(a1)
00007978 3343 0008                  		move.w	d3,8(a1)
0000797C 237C 0000 0000 0004        		move.l	#Map_obj11,4(a1)
00007984 337C 438E 0002             		move.w	#$438E,2(a1)
0000798A 137C 0004 0001             		move.b	#4,1(a1)
00007990 137C 0003 0018             		move.b	#3,$18(a1)
00007996 137C 0008 0019             		move.b	#8,$19(a1)
0000799C 0643 0010                  		addi.w	#$10,d3
000079A0 51C9 FF8A                  		dbf	d1,Obj11_MakeBdg ; repeat d1 times (length of bridge)
000079A4                            
000079A4                            Obj11_Action:				; XREF: Obj11_Index
000079A4 6100                       		bsr.s	Obj11_Solid
000079A6 4A28 003E                  		tst.b	$3E(a0)
000079AA 6700                       		beq.s	Obj11_Display
000079AC 5928 003E                  		subq.b	#4,$3E(a0)
000079B0 6100 0000                  		bsr.w	Obj11_Bend
000079B4                            
000079B4                            Obj11_Display:
000079B4 6100 0000                  		bsr.w	DisplaySprite
000079B8 6000 0000                  		bra.w	Obj11_ChkDel
000079BC                            
000079BC                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000079BC                            
000079BC                            
000079BC                            Obj11_Solid:				; XREF: Obj11_Action
000079BC 7200                       		moveq	#0,d1
000079BE 1228 0028                  		move.b	$28(a0),d1
000079C2 E749                       		lsl.w	#3,d1
000079C4 3401                       		move.w	d1,d2
000079C6 5041                       		addq.w	#8,d1
000079C8 D442                       		add.w	d2,d2
000079CA 43F8 D000                  		lea	($FFFFD000).w,a1
000079CE 4A69 0012                  		tst.w	$12(a1)
000079D2 6B00 0000                  		bmi.w	locret_751E
000079D6 3029 0008                  		move.w	8(a1),d0
000079DA 9068 0008                  		sub.w	8(a0),d0
000079DE D041                       		add.w	d1,d0
000079E0 6B00 0000                  		bmi.w	locret_751E
000079E4 B042                       		cmp.w	d2,d0
000079E6 6400 0000                  		bcc.w	locret_751E
000079EA 6000                       		bra.s	Platform2
000079EC                            ; End of function Obj11_Solid
000079EC                            
000079EC                            ; ---------------------------------------------------------------------------
000079EC                            ; Platform subroutine
000079EC                            ; ---------------------------------------------------------------------------
000079EC                            
000079EC                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000079EC                            
000079EC                            
000079EC                            PlatformObject:
000079EC 43F8 D000                  		lea	($FFFFD000).w,a1
000079F0 4A69 0012                  		tst.w	$12(a1)
000079F4 6B00 0000                  		bmi.w	locret_751E
000079F8 3029 0008                  		move.w	8(a1),d0
000079FC 9068 0008                  		sub.w	8(a0),d0
00007A00 D041                       		add.w	d1,d0
00007A02 6B00 0000                  		bmi.w	locret_751E
00007A06 D241                       		add.w	d1,d1
00007A08 B041                       		cmp.w	d1,d0
00007A0A 6400 0000                  		bcc.w	locret_751E
00007A0E                            
00007A0E                            Platform2:
00007A0E 3028 000C                  		move.w	$C(a0),d0
00007A12 5140                       		subq.w	#8,d0
00007A14                            
00007A14                            Platform3:
00007A14 3429 000C                  		move.w	$C(a1),d2
00007A18 1229 0016                  		move.b	$16(a1),d1
00007A1C 4881                       		ext.w	d1
00007A1E D242                       		add.w	d2,d1
00007A20 5841                       		addq.w	#4,d1
00007A22 9041                       		sub.w	d1,d0
00007A24 6200 0000                  		bhi.w	locret_751E
00007A28 0C40 FFF0                  		cmpi.w	#-$10,d0
00007A2C 6500 0000                  		bcs.w	locret_751E
00007A30 4A38 F7C8                  		tst.b	($FFFFF7C8).w
00007A34 6B00 0000                  		bmi.w	locret_751E
00007A38 0C29 0006 0024             		cmpi.b	#6,$24(a1)
00007A3E 6400 0000                  		bcc.w	locret_751E
00007A42 D440                       		add.w	d0,d2
00007A44 5642                       		addq.w	#3,d2
00007A46 3342 000C                  		move.w	d2,$C(a1)
00007A4A 5428 0024                  		addq.b	#2,$24(a0)
00007A4E                            
00007A4E                            loc_74AE:
00007A4E 0829 0003 0022             		btst	#3,$22(a1)
00007A54 6700                       		beq.s	loc_74DC
00007A56 7000                       		moveq	#0,d0
00007A58 1029 003D                  		move.b	$3D(a1),d0
00007A5C ED48                       		lsl.w	#6,d0
00007A5E 0680 00FF D000             		addi.l	#$FFD000,d0
00007A64 2440                       		movea.l	d0,a2
00007A66 08AA 0003 0022             		bclr	#3,$22(a2)
00007A6C 422A 0025                  		clr.b	$25(a2)
00007A70 0C2A 0004 0024             		cmpi.b	#4,$24(a2)
00007A76 6600                       		bne.s	loc_74DC
00007A78 552A 0024                  		subq.b	#2,$24(a2)
00007A7C                            
00007A7C                            loc_74DC:
00007A7C 3008                       		move.w	a0,d0
00007A7E 0440 D000                  		subi.w	#-$3000,d0
00007A82 EC48                       		lsr.w	#6,d0
00007A84 0240 007F                  		andi.w	#$7F,d0
00007A88 1340 003D                  		move.b	d0,$3D(a1)
00007A8C 137C 0000 0026             		move.b	#0,$26(a1)
00007A92 337C 0000 0012             		move.w	#0,$12(a1)
00007A98 3369 0010 0014             		move.w	$10(a1),$14(a1)
00007A9E 0829 0001 0022             		btst	#1,$22(a1)
00007AA4 6700                       		beq.s	loc_7512
00007AA6 2F08                       		move.l	a0,-(sp)
00007AA8 2049                       		movea.l	a1,a0
00007AAA 4EB9 0000 0000             		jsr	Sonic_ResetOnFloor
00007AB0 205F                       		movea.l	(sp)+,a0
00007AB2                            
00007AB2                            loc_7512:
00007AB2 08E9 0003 0022             		bset	#3,$22(a1)
00007AB8 08E8 0003 0022             		bset	#3,$22(a0)
00007ABE                            
00007ABE                            locret_751E:
00007ABE 4E75                       		rts	
00007AC0                            ; End of function PlatformObject
00007AC0                            
00007AC0                            ; ---------------------------------------------------------------------------
00007AC0                            ; Sloped platform subroutine (GHZ collapsing ledges and	SLZ seesaws)
00007AC0                            ; ---------------------------------------------------------------------------
00007AC0                            
00007AC0                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00007AC0                            
00007AC0                            
00007AC0                            SlopeObject:				; XREF: Obj1A_Slope; Obj5E_Slope
00007AC0 43F8 D000                  		lea	($FFFFD000).w,a1
00007AC4 4A69 0012                  		tst.w	$12(a1)
00007AC8 6B00 FFF4                  		bmi.w	locret_751E
00007ACC 3029 0008                  		move.w	8(a1),d0
00007AD0 9068 0008                  		sub.w	8(a0),d0
00007AD4 D041                       		add.w	d1,d0
00007AD6 6BE6                       		bmi.s	locret_751E
00007AD8 D241                       		add.w	d1,d1
00007ADA B041                       		cmp.w	d1,d0
00007ADC 64E0                       		bcc.s	locret_751E
00007ADE 0828 0000 0001             		btst	#0,1(a0)
00007AE4 6700                       		beq.s	loc_754A
00007AE6 4640                       		not.w	d0
00007AE8 D041                       		add.w	d1,d0
00007AEA                            
00007AEA                            loc_754A:
00007AEA E248                       		lsr.w	#1,d0
00007AEC 7600                       		moveq	#0,d3
00007AEE 1632 0000                  		move.b	(a2,d0.w),d3
00007AF2 3028 000C                  		move.w	$C(a0),d0
00007AF6 9043                       		sub.w	d3,d0
00007AF8 6000 FF1A                  		bra.w	Platform3
00007AFC                            ; End of function SlopeObject
00007AFC                            
00007AFC                            
00007AFC                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00007AFC                            
00007AFC                            
00007AFC                            Obj15_Solid:				; XREF: Obj15_SetSolid
00007AFC 43F8 D000                  		lea	($FFFFD000).w,a1
00007B00 4A69 0012                  		tst.w	$12(a1)
00007B04 6B00 FFB8                  		bmi.w	locret_751E
00007B08 3029 0008                  		move.w	8(a1),d0
00007B0C 9068 0008                  		sub.w	8(a0),d0
00007B10 D041                       		add.w	d1,d0
00007B12 6B00 FFAA                  		bmi.w	locret_751E
00007B16 D241                       		add.w	d1,d1
00007B18 B041                       		cmp.w	d1,d0
00007B1A 6400 FFA2                  		bcc.w	locret_751E
00007B1E 3028 000C                  		move.w	$C(a0),d0
00007B22 9043                       		sub.w	d3,d0
00007B24 6000 FEEE                  		bra.w	Platform3
00007B28                            ; End of function Obj15_Solid
00007B28                            
00007B28                            ; ===========================================================================
00007B28                            
00007B28                            Obj11_Action2:				; XREF: Obj11_Index
00007B28 6100                       		bsr.s	Obj11_WalkOff
00007B2A 6100 0000                  		bsr.w	DisplaySprite
00007B2E 6000 0000                  		bra.w	Obj11_ChkDel
00007B32                            
00007B32                            ; ---------------------------------------------------------------------------
00007B32                            ; Subroutine allowing Sonic to walk off a bridge
00007B32                            ; ---------------------------------------------------------------------------
00007B32                            
00007B32                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00007B32                            
00007B32                            
00007B32                            Obj11_WalkOff:				; XREF: Obj11_Action2
00007B32 7200                       		moveq	#0,d1
00007B34 1228 0028                  		move.b	$28(a0),d1
00007B38 E749                       		lsl.w	#3,d1
00007B3A 3401                       		move.w	d1,d2
00007B3C 5041                       		addq.w	#8,d1
00007B3E 6100                       		bsr.s	ExitPlatform2
00007B40 6400                       		bcc.s	locret_75BE
00007B42 E848                       		lsr.w	#4,d0
00007B44 1140 003F                  		move.b	d0,$3F(a0)
00007B48 1028 003E                  		move.b	$3E(a0),d0
00007B4C 0C00 0040                  		cmpi.b	#$40,d0
00007B50 6700                       		beq.s	loc_75B6
00007B52 5828 003E                  		addq.b	#4,$3E(a0)
00007B56                            
00007B56                            loc_75B6:
00007B56 6100 0000                  		bsr.w	Obj11_Bend
00007B5A 6100 0000                  		bsr.w	Obj11_MoveSonic
00007B5E                            
00007B5E                            locret_75BE:
00007B5E 4E75                       		rts	
00007B60                            ; End of function Obj11_WalkOff
00007B60                            
00007B60                            ; ---------------------------------------------------------------------------
00007B60                            ; Subroutine allowing Sonic to walk or jump off	a platform
00007B60                            ; ---------------------------------------------------------------------------
00007B60                            
00007B60                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00007B60                            
00007B60                            
00007B60                            ExitPlatform:
00007B60 3401                       		move.w	d1,d2
00007B62                            
00007B62                            ExitPlatform2:
00007B62 D442                       		add.w	d2,d2
00007B64 43F8 D000                  		lea	($FFFFD000).w,a1
00007B68 0829 0001 0022             		btst	#1,$22(a1)
00007B6E 6600                       		bne.s	loc_75E0
00007B70 3029 0008                  		move.w	8(a1),d0
00007B74 9068 0008                  		sub.w	8(a0),d0
00007B78 D041                       		add.w	d1,d0
00007B7A 6B00                       		bmi.s	loc_75E0
00007B7C B042                       		cmp.w	d2,d0
00007B7E 6500                       		bcs.s	locret_75F2
00007B80                            
00007B80                            loc_75E0:
00007B80 08A9 0003 0022             		bclr	#3,$22(a1)
00007B86 117C 0002 0024             		move.b	#2,$24(a0)
00007B8C 08A8 0003 0022             		bclr	#3,$22(a0)
00007B92                            
00007B92                            locret_75F2:
00007B92 4E75                       		rts	
00007B94                            ; End of function ExitPlatform
00007B94                            
00007B94                            
00007B94                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00007B94                            
00007B94                            
00007B94                            Obj11_MoveSonic:			; XREF: Obj11_WalkOff
00007B94 7000                       		moveq	#0,d0
00007B96 1028 003F                  		move.b	$3F(a0),d0
00007B9A 1030 0029                  		move.b	$29(a0,d0.w),d0
00007B9E ED48                       		lsl.w	#6,d0
00007BA0 0680 00FF D000             		addi.l	#$FFD000,d0
00007BA6 2440                       		movea.l	d0,a2
00007BA8 43F8 D000                  		lea	($FFFFD000).w,a1
00007BAC 302A 000C                  		move.w	$C(a2),d0
00007BB0 5140                       		subq.w	#8,d0
00007BB2 7200                       		moveq	#0,d1
00007BB4 1229 0016                  		move.b	$16(a1),d1
00007BB8 9041                       		sub.w	d1,d0
00007BBA 3340 000C                  		move.w	d0,$C(a1)	; change Sonic's position on y-axis
00007BBE 4E75                       		rts	
00007BC0                            ; End of function Obj11_MoveSonic
00007BC0                            
00007BC0                            
00007BC0                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00007BC0                            
00007BC0                            
00007BC0                            Obj11_Bend:				; XREF: Obj11_Action; Obj11_WalkOff
00007BC0 1028 003E                  		move.b	$3E(a0),d0
00007BC4 6100 B09E                  		bsr.w	CalcSine
00007BC8 3800                       		move.w	d0,d4
00007BCA 49F9 0000 0000             		lea	(Obj11_BendData2).l,a4
00007BD0 7000                       		moveq	#0,d0
00007BD2 1028 0028                  		move.b	$28(a0),d0
00007BD6 E948                       		lsl.w	#4,d0
00007BD8 7600                       		moveq	#0,d3
00007BDA 1628 003F                  		move.b	$3F(a0),d3
00007BDE 3403                       		move.w	d3,d2
00007BE0 D640                       		add.w	d0,d3
00007BE2 7A00                       		moveq	#0,d5
00007BE4 4BF9 0000 0000             		lea	(Obj11_BendData).l,a5
00007BEA 1A35 3000                  		move.b	(a5,d3.w),d5
00007BEE 0243 000F                  		andi.w	#$F,d3
00007BF2 E94B                       		lsl.w	#4,d3
00007BF4 47F4 3000                  		lea	(a4,d3.w),a3
00007BF8 45E8 0029                  		lea	$29(a0),a2
00007BFC                            
00007BFC                            loc_765C:
00007BFC 7000                       		moveq	#0,d0
00007BFE 101A                       		move.b	(a2)+,d0
00007C00 ED48                       		lsl.w	#6,d0
00007C02 0680 00FF D000             		addi.l	#$FFD000,d0
00007C08 2240                       		movea.l	d0,a1
00007C0A 7000                       		moveq	#0,d0
00007C0C 101B                       		move.b	(a3)+,d0
00007C0E 5240                       		addq.w	#1,d0
00007C10 C0C5                       		mulu.w	d5,d0
00007C12 C0C4                       		mulu.w	d4,d0
00007C14 4840                       		swap	d0
00007C16 D069 003C                  		add.w	$3C(a1),d0
00007C1A 3340 000C                  		move.w	d0,$C(a1)
00007C1E 51CA FFDC                  		dbf	d2,loc_765C
00007C22 7000                       		moveq	#0,d0
00007C24 1028 0028                  		move.b	$28(a0),d0
00007C28 7600                       		moveq	#0,d3
00007C2A 1628 003F                  		move.b	$3F(a0),d3
00007C2E 5203                       		addq.b	#1,d3
00007C30 9600                       		sub.b	d0,d3
00007C32 4403                       		neg.b	d3
00007C34 6B00                       		bmi.s	locret_76CA
00007C36 3403                       		move.w	d3,d2
00007C38 E94B                       		lsl.w	#4,d3
00007C3A 47F4 3000                  		lea	(a4,d3.w),a3
00007C3E D6C2                       		adda.w	d2,a3
00007C40 5342                       		subq.w	#1,d2
00007C42 6500                       		bcs.s	locret_76CA
00007C44                            
00007C44                            loc_76A4:
00007C44 7000                       		moveq	#0,d0
00007C46 101A                       		move.b	(a2)+,d0
00007C48 ED48                       		lsl.w	#6,d0
00007C4A 0680 00FF D000             		addi.l	#$FFD000,d0
00007C50 2240                       		movea.l	d0,a1
00007C52 7000                       		moveq	#0,d0
00007C54 1023                       		move.b	-(a3),d0
00007C56 5240                       		addq.w	#1,d0
00007C58 C0C5                       		mulu.w	d5,d0
00007C5A C0C4                       		mulu.w	d4,d0
00007C5C 4840                       		swap	d0
00007C5E D069 003C                  		add.w	$3C(a1),d0
00007C62 3340 000C                  		move.w	d0,$C(a1)
00007C66 51CA FFDC                  		dbf	d2,loc_76A4
00007C6A                            
00007C6A                            locret_76CA:
00007C6A 4E75                       		rts	
00007C6C                            ; End of function Obj11_Bend
00007C6C                            
00007C6C                            ; ===========================================================================
00007C6C                            ; ---------------------------------------------------------------------------
00007C6C                            ; GHZ bridge-bending data
00007C6C                            ; (Defines how the bridge bends	when Sonic walks across	it)
00007C6C                            ; ---------------------------------------------------------------------------
00007C6C                            Obj11_BendData:	incbin	misc\ghzbend1.bin
00007D7C                            		even
00007D7C                            Obj11_BendData2:incbin	misc\ghzbend2.bin
00007E7C                            		even
00007E7C                            
00007E7C                            ; ===========================================================================
00007E7C                            
00007E7C                            Obj11_ChkDel:				; XREF: Obj11_Display; Obj11_Action2
00007E7C 3028 0008                  		move.w	8(a0),d0
00007E80 0240 FF80                  		andi.w	#$FF80,d0
00007E84 3238 F700                  		move.w	($FFFFF700).w,d1
00007E88 0441 0080                  		subi.w	#$80,d1
00007E8C 0241 FF80                  		andi.w	#$FF80,d1
00007E90 9041                       		sub.w	d1,d0
00007E92 0C40 0280                  		cmpi.w	#$280,d0
00007E96 6200 0000                  		bhi.w	Obj11_DelAll
00007E9A 4E75                       		rts	
00007E9C                            ; ===========================================================================
00007E9C                            
00007E9C                            Obj11_DelAll:				; XREF: Obj11_ChkDel
00007E9C 7400                       		moveq	#0,d2
00007E9E 45E8 0028                  		lea	$28(a0),a2	; load bridge length
00007EA2 141A                       		move.b	(a2)+,d2	; move bridge length to	d2
00007EA4 5302                       		subq.b	#1,d2		; subtract 1
00007EA6 6500                       		bcs.s	Obj11_Delete
00007EA8                            
00007EA8                            Obj11_DelLoop:
00007EA8 7000                       		moveq	#0,d0
00007EAA 101A                       		move.b	(a2)+,d0
00007EAC ED48                       		lsl.w	#6,d0
00007EAE 0680 00FF D000             		addi.l	#$FFD000,d0
00007EB4 2240                       		movea.l	d0,a1
00007EB6 B048                       		cmp.w	a0,d0
00007EB8 6700                       		beq.s	loc_791E
00007EBA 6100 0000                  		bsr.w	DeleteObject2
00007EBE                            
00007EBE                            loc_791E:
00007EBE 51CA FFE8                  		dbf	d2,Obj11_DelLoop ; repeat d2 times (bridge length)
00007EC2                            
00007EC2                            Obj11_Delete:
00007EC2 6100 0000                  		bsr.w	DeleteObject
00007EC6 4E75                       		rts	
00007EC8                            ; ===========================================================================
00007EC8                            
00007EC8                            Obj11_Delete2:				; XREF: Obj11_Index
00007EC8 6100 0000                  		bsr.w	DeleteObject
00007ECC 4E75                       		rts	
00007ECE                            ; ===========================================================================
00007ECE                            
00007ECE                            Obj11_Display2:				; XREF: Obj11_Index
00007ECE 6100 0000                  		bsr.w	DisplaySprite
00007ED2 4E75                       		rts	
00007ED4                            ; ===========================================================================
00007ED4                            ; ---------------------------------------------------------------------------
00007ED4                            ; Sprite mappings - GHZ	bridge
00007ED4                            ; ---------------------------------------------------------------------------
00007ED4                            Map_obj11:
00007ED4                            	include "_maps\obj11.asm"
00007ED4                            ; ---------------------------------------------------------------------------
00007ED4                            ; Sprite mappings - GHZ	bridge
00007ED4                            ; ---------------------------------------------------------------------------
00007ED4 0000 0000                  		dc.w byte_793A-Map_obj11, byte_7940-Map_obj11
00007ED8 0000                       		dc.w byte_794B-Map_obj11
00007EDA 01                         byte_793A:	dc.b 1
00007EDB F805 0000 F8               		dc.b $F8, 5, 0,	0, $F8
00007EE0 02                         byte_7940:	dc.b 2
00007EE1 F804 0004 F0               		dc.b $F8, 4, 0,	4, $F0
00007EE6 000C 0006 F0               		dc.b 0,	$C, 0, 6, $F0
00007EEB 01                         byte_794B:	dc.b 1
00007EEC FC04 0008 F8               		dc.b $FC, 4, 0,	8, $F8
00007EF2 00                         		even
00007EF2 00                         		even
00007EF2                            
00007EF2                            ; ===========================================================================
00007EF2                            ; ---------------------------------------------------------------------------
00007EF2                            ; Object 15 - swinging platforms (GHZ, MZ, SLZ)
00007EF2                            ;	    - spiked ball on a chain (SBZ)
00007EF2                            ; ---------------------------------------------------------------------------
00007EF2                            
00007EF2                            Obj15:					; XREF: Obj_Index
00007EF2 7000                       		moveq	#0,d0
00007EF4 1028 0024                  		move.b	$24(a0),d0
00007EF8 323B 0000                  		move.w	Obj15_Index(pc,d0.w),d1
00007EFC 4EFB 1000                  		jmp	Obj15_Index(pc,d1.w)
00007F00                            ; ===========================================================================
00007F00 0000 0000                  Obj15_Index:	dc.w Obj15_Main-Obj15_Index, Obj15_SetSolid-Obj15_Index
00007F04 0000 0000                  		dc.w Obj15_Action2-Obj15_Index,	Obj15_Delete-Obj15_Index
00007F08 0000 0000                  		dc.w Obj15_Delete-Obj15_Index, Obj15_Display-Obj15_Index
00007F0C 0000                       		dc.w Obj15_Action-Obj15_Index
00007F0E                            ; ===========================================================================
00007F0E                            
00007F0E                            Obj15_Main:				; XREF: Obj15_Index
00007F0E 5428 0024                  		addq.b	#2,$24(a0)
00007F12 217C 0000 0000 0004        		move.l	#Map_obj15,4(a0) ; GHZ and MZ specific code
00007F1A 317C 4380 0002             		move.w	#$4380,2(a0)
00007F20 117C 0004 0001             		move.b	#4,1(a0)
00007F26 117C 0003 0018             		move.b	#3,$18(a0)
00007F2C 117C 0018 0019             		move.b	#$18,$19(a0)
00007F32 117C 0008 0016             		move.b	#8,$16(a0)
00007F38 3168 000C 0038             		move.w	$C(a0),$38(a0)
00007F3E 3168 0008 003A             		move.w	8(a0),$3A(a0)
00007F44 0C38 0003 FE10             		cmpi.b	#3,($FFFFFE10).w ; check if level is SLZ
00007F4A 6600                       		bne.s	Obj15_NotSLZ
00007F4C 217C 0000 0000 0004        		move.l	#Map_obj15a,4(a0) ; SLZ	specific code
00007F54 317C 43DC 0002             		move.w	#$43DC,2(a0)
00007F5A 117C 0020 0019             		move.b	#$20,$19(a0)
00007F60 117C 0010 0016             		move.b	#$10,$16(a0)
00007F66 117C 0099 0020             		move.b	#$99,$20(a0)
00007F6C                            
00007F6C                            Obj15_NotSLZ:
00007F6C 0C38 0005 FE10             		cmpi.b	#5,($FFFFFE10).w ; check if level is SBZ
00007F72 6600                       		bne.s	Obj15_SetLength
00007F74 217C 0000 0000 0004        		move.l	#Map_obj15b,4(a0) ; SBZ	specific code
00007F7C 317C 0391 0002             		move.w	#$391,2(a0)
00007F82 117C 0018 0019             		move.b	#$18,$19(a0)
00007F88 117C 0018 0016             		move.b	#$18,$16(a0)
00007F8E 117C 0086 0020             		move.b	#$86,$20(a0)
00007F94 117C 000C 0024             		move.b	#$C,$24(a0)
00007F9A                            
00007F9A                            Obj15_SetLength:
00007F9A 1810                       		move.b	0(a0),d4
00007F9C 7200                       		moveq	#0,d1
00007F9E 45E8 0028                  		lea	$28(a0),a2	; move chain length to a2
00007FA2 1212                       		move.b	(a2),d1		; move a2 to d1
00007FA4 3F01                       		move.w	d1,-(sp)
00007FA6 0241 000F                  		andi.w	#$F,d1
00007FAA 14FC 0000                  		move.b	#0,(a2)+
00007FAE 3601                       		move.w	d1,d3
00007FB0 E94B                       		lsl.w	#4,d3
00007FB2 5003                       		addq.b	#8,d3
00007FB4 1143 003C                  		move.b	d3,$3C(a0)
00007FB8 5103                       		subq.b	#8,d3
00007FBA 4A28 001A                  		tst.b	$1A(a0)
00007FBE 6700                       		beq.s	Obj15_MakeChain
00007FC0 5003                       		addq.b	#8,d3
00007FC2 5341                       		subq.w	#1,d1
00007FC4                            
00007FC4                            Obj15_MakeChain:
00007FC4 6100 0000                  		bsr.w	SingleObjLoad
00007FC8 6600                       		bne.s	loc_7A92
00007FCA 5228 0028                  		addq.b	#1,$28(a0)
00007FCE 3A09                       		move.w	a1,d5
00007FD0 0445 D000                  		subi.w	#-$3000,d5
00007FD4 EC4D                       		lsr.w	#6,d5
00007FD6 0245 007F                  		andi.w	#$7F,d5
00007FDA 14C5                       		move.b	d5,(a2)+
00007FDC 137C 000A 0024             		move.b	#$A,$24(a1)
00007FE2 1284                       		move.b	d4,0(a1)	; load swinging	object
00007FE4 2368 0004 0004             		move.l	4(a0),4(a1)
00007FEA 3368 0002 0002             		move.w	2(a0),2(a1)
00007FF0 08A9 0006 0002             		bclr	#6,2(a1)
00007FF6 137C 0004 0001             		move.b	#4,1(a1)
00007FFC 137C 0004 0018             		move.b	#4,$18(a1)
00008002 137C 0008 0019             		move.b	#8,$19(a1)
00008008 137C 0001 001A             		move.b	#1,$1A(a1)
0000800E 1343 003C                  		move.b	d3,$3C(a1)
00008012 0403 0010                  		subi.b	#$10,d3
00008016 6400                       		bcc.s	loc_7A8E
00008018 137C 0002 001A             		move.b	#2,$1A(a1)
0000801E 137C 0003 0018             		move.b	#3,$18(a1)
00008024 08E9 0006 0002             		bset	#6,2(a1)
0000802A                            
0000802A                            loc_7A8E:
0000802A 51C9 FF98                  		dbf	d1,Obj15_MakeChain ; repeat d1 times (chain length)
0000802E                            
0000802E                            loc_7A92:
0000802E 3A08                       		move.w	a0,d5
00008030 0445 D000                  		subi.w	#-$3000,d5
00008034 EC4D                       		lsr.w	#6,d5
00008036 0245 007F                  		andi.w	#$7F,d5
0000803A 14C5                       		move.b	d5,(a2)+
0000803C 317C 4080 0026             		move.w	#$4080,$26(a0)
00008042 317C FE00 003E             		move.w	#-$200,$3E(a0)
00008048 321F                       		move.w	(sp)+,d1
0000804A 0801 0004                  		btst	#4,d1		; is object type $8X ?
0000804E 6700                       		beq.s	loc_7AD4	; if not, branch
00008050 217C 0000 0000 0004        		move.l	#Map_obj48,4(a0) ; use GHZ ball	mappings
00008058 317C 43AA 0002             		move.w	#$43AA,2(a0)
0000805E 117C 0001 001A             		move.b	#1,$1A(a0)
00008064 117C 0002 0018             		move.b	#2,$18(a0)
0000806A 117C 0081 0020             		move.b	#$81,$20(a0)	; make object hurt when	touched
00008070                            
00008070                            loc_7AD4:
00008070 0C38 0005 FE10             		cmpi.b	#5,($FFFFFE10).w ; is zone SBZ?
00008076 6700                       		beq.s	Obj15_Action	; if yes, branch
00008078                            
00008078                            Obj15_SetSolid:				; XREF: Obj15_Index
00008078 7200                       		moveq	#0,d1
0000807A 1228 0019                  		move.b	$19(a0),d1
0000807E 7600                       		moveq	#0,d3
00008080 1628 0016                  		move.b	$16(a0),d3
00008084 6100 FA76                  		bsr.w	Obj15_Solid
00008088                            
00008088                            Obj15_Action:				; XREF: Obj15_Index
00008088 6100 0000                  		bsr.w	Obj15_Move
0000808C 6100 0000                  		bsr.w	DisplaySprite
00008090 6000 0000                  		bra.w	Obj15_ChkDel
00008094                            ; ===========================================================================
00008094                            
00008094                            Obj15_Action2:				; XREF: Obj15_Index
00008094 7200                       		moveq	#0,d1
00008096 1228 0019                  		move.b	$19(a0),d1
0000809A 6100 FAC4                  		bsr.w	ExitPlatform
0000809E 3F28 0008                  		move.w	8(a0),-(sp)
000080A2 6100 0000                  		bsr.w	Obj15_Move
000080A6 341F                       		move.w	(sp)+,d2
000080A8 7600                       		moveq	#0,d3
000080AA 1628 0016                  		move.b	$16(a0),d3
000080AE 5203                       		addq.b	#1,d3
000080B0 6100 0000                  		bsr.w	MvSonicOnPtfm
000080B4 6100 0000                  		bsr.w	DisplaySprite
000080B8 6000 0000                  		bra.w	Obj15_ChkDel
000080BC                            
000080BC 4E75                       		rts
000080BE                            
000080BE                            ; ---------------------------------------------------------------------------
000080BE                            ; Subroutine to	change Sonic's position with a platform
000080BE                            ; ---------------------------------------------------------------------------
000080BE                            
000080BE                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000080BE                            
000080BE                            
000080BE                            MvSonicOnPtfm:
000080BE 43F8 D000                  		lea	($FFFFD000).w,a1
000080C2 3028 000C                  		move.w	$C(a0),d0
000080C6 9043                       		sub.w	d3,d0
000080C8 6000                       		bra.s	MvSonic2
000080CA                            ; End of function MvSonicOnPtfm
000080CA                            
000080CA                            ; ---------------------------------------------------------------------------
000080CA                            ; Subroutine to	change Sonic's position with a platform
000080CA                            ; ---------------------------------------------------------------------------
000080CA                            
000080CA                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000080CA                            
000080CA                            
000080CA                            MvSonicOnPtfm2:
000080CA 43F8 D000                  		lea	($FFFFD000).w,a1
000080CE 3028 000C                  		move.w	$C(a0),d0
000080D2 0440 0009                  		subi.w	#9,d0
000080D6                            
000080D6                            MvSonic2:
000080D6 4A38 F7C8                  		tst.b	($FFFFF7C8).w
000080DA 6B00                       		bmi.s	locret_7B62
000080DC 0C38 0006 D024             		cmpi.b	#6,($FFFFD024).w
000080E2 6400                       		bcc.s	locret_7B62
000080E4 4A78 FE08                  		tst.w	($FFFFFE08).w
000080E8 6600                       		bne.s	locret_7B62
000080EA 7200                       		moveq	#0,d1
000080EC 1229 0016                  		move.b	$16(a1),d1
000080F0 9041                       		sub.w	d1,d0
000080F2 3340 000C                  		move.w	d0,$C(a1)
000080F6 9468 0008                  		sub.w	8(a0),d2
000080FA 9569 0008                  		sub.w	d2,8(a1)
000080FE                            
000080FE                            locret_7B62:
000080FE 4E75                       		rts	
00008100                            ; End of function MvSonicOnPtfm2
00008100                            
00008100                            
00008100                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00008100                            
00008100                            
00008100                            Obj15_Move:				; XREF: Obj15_Action; Obj15_Action2
00008100 1038 FE78                  		move.b	($FFFFFE78).w,d0
00008104 323C 0080                  		move.w	#$80,d1
00008108 0828 0000 0022             		btst	#0,$22(a0)
0000810E 6700                       		beq.s	loc_7B78
00008110 4440                       		neg.w	d0
00008112 D041                       		add.w	d1,d0
00008114                            
00008114                            loc_7B78:
00008114 6000                       		bra.s	Obj15_Move2
00008116                            ; End of function Obj15_Move
00008116                            
00008116                            
00008116                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00008116                            
00008116                            
00008116                            Obj48_Move:				; XREF: Obj48_Display2
00008116 4A28 003D                  		tst.b	$3D(a0)
0000811A 6600                       		bne.s	loc_7B9C
0000811C 3028 003E                  		move.w	$3E(a0),d0
00008120 5040                       		addq.w	#8,d0
00008122 3140 003E                  		move.w	d0,$3E(a0)
00008126 D168 0026                  		add.w	d0,$26(a0)
0000812A 0C40 0200                  		cmpi.w	#$200,d0
0000812E 6600                       		bne.s	loc_7BB6
00008130 117C 0001 003D             		move.b	#1,$3D(a0)
00008136 6000                       		bra.s	loc_7BB6
00008138                            ; ===========================================================================
00008138                            
00008138                            loc_7B9C:
00008138 3028 003E                  		move.w	$3E(a0),d0
0000813C 5140                       		subq.w	#8,d0
0000813E 3140 003E                  		move.w	d0,$3E(a0)
00008142 D168 0026                  		add.w	d0,$26(a0)
00008146 0C40 FE00                  		cmpi.w	#-$200,d0
0000814A 6600                       		bne.s	loc_7BB6
0000814C 117C 0000 003D             		move.b	#0,$3D(a0)
00008152                            
00008152                            loc_7BB6:
00008152 1028 0026                  		move.b	$26(a0),d0
00008156                            ; End of function Obj48_Move
00008156                            
00008156                            
00008156                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00008156                            
00008156                            
00008156                            Obj15_Move2:				; XREF: Obj15_Move; Obj48_Display
00008156 6100 AB0C                  		bsr.w	CalcSine
0000815A 3428 0038                  		move.w	$38(a0),d2
0000815E 3628 003A                  		move.w	$3A(a0),d3
00008162 45E8 0028                  		lea	$28(a0),a2
00008166 7C00                       		moveq	#0,d6
00008168 1C1A                       		move.b	(a2)+,d6
0000816A                            
0000816A                            loc_7BCE:
0000816A 7800                       		moveq	#0,d4
0000816C 181A                       		move.b	(a2)+,d4
0000816E ED4C                       		lsl.w	#6,d4
00008170 0684 00FF D000             		addi.l	#$FFD000,d4
00008176 2244                       		movea.l	d4,a1
00008178 7800                       		moveq	#0,d4
0000817A 1829 003C                  		move.b	$3C(a1),d4
0000817E 2A04                       		move.l	d4,d5
00008180 C9C0                       		muls.w	d0,d4
00008182 E084                       		asr.l	#8,d4
00008184 CBC1                       		muls.w	d1,d5
00008186 E085                       		asr.l	#8,d5
00008188 D842                       		add.w	d2,d4
0000818A DA43                       		add.w	d3,d5
0000818C 3344 000C                  		move.w	d4,$C(a1)
00008190 3345 0008                  		move.w	d5,8(a1)
00008194 51CE FFD4                  		dbf	d6,loc_7BCE
00008198 4E75                       		rts	
0000819A                            ; End of function Obj15_Move2
0000819A                            
0000819A                            ; ===========================================================================
0000819A                            
0000819A                            Obj15_ChkDel:				; XREF: Obj15_Action; Obj15_Action2
0000819A 3028 003A                  		move.w	$3A(a0),d0
0000819E 0240 FF80                  		andi.w	#$FF80,d0
000081A2 3238 F700                  		move.w	($FFFFF700).w,d1
000081A6 0441 0080                  		subi.w	#$80,d1
000081AA 0241 FF80                  		andi.w	#$FF80,d1
000081AE 9041                       		sub.w	d1,d0
000081B0 0C40 0280                  		cmpi.w	#$280,d0
000081B4 6200 0000                  		bhi.w	Obj15_DelAll
000081B8 4E75                       		rts	
000081BA                            ; ===========================================================================
000081BA                            
000081BA                            Obj15_DelAll:				; XREF: Obj15_ChkDel
000081BA 7400                       		moveq	#0,d2
000081BC 45E8 0028                  		lea	$28(a0),a2
000081C0 141A                       		move.b	(a2)+,d2
000081C2                            
000081C2                            Obj15_DelLoop:
000081C2 7000                       		moveq	#0,d0
000081C4 101A                       		move.b	(a2)+,d0
000081C6 ED48                       		lsl.w	#6,d0
000081C8 0680 00FF D000             		addi.l	#$FFD000,d0
000081CE 2240                       		movea.l	d0,a1
000081D0 6100 0000                  		bsr.w	DeleteObject2
000081D4 51CA FFEC                  		dbf	d2,Obj15_DelLoop ; repeat for length of	chain
000081D8 4E75                       		rts	
000081DA                            ; ===========================================================================
000081DA                            
000081DA                            Obj15_Delete:				; XREF: Obj15_Index
000081DA 6100 0000                  		bsr.w	DeleteObject
000081DE 4E75                       		rts	
000081E0                            ; ===========================================================================
000081E0                            
000081E0                            Obj15_Display:				; XREF: Obj15_Index
000081E0 6000 0000                  		bra.w	DisplaySprite
000081E4                            ; ===========================================================================
000081E4                            ; ---------------------------------------------------------------------------
000081E4                            ; Sprite mappings - GHZ	and MZ swinging	platforms
000081E4                            ; ---------------------------------------------------------------------------
000081E4                            Map_obj15:
000081E4                            	include "_maps\obj15ghz.asm"
000081E4                            ; ---------------------------------------------------------------------------
000081E4                            ; Sprite mappings - GHZ	and MZ swinging	platforms
000081E4                            ; ---------------------------------------------------------------------------
000081E4 0000                       		dc.w byte_7C4E-Map_obj15
000081E6 0000                       		dc.w byte_7C59-Map_obj15
000081E8 0000                       		dc.w byte_7C5F-Map_obj15
000081EA 02                         byte_7C4E:	dc.b 2
000081EB F809 0004 E8               		dc.b $F8, 9, 0,	4, $E8
000081F0 F809 0004 00               		dc.b $F8, 9, 0,	4, 0
000081F5 01                         byte_7C59:	dc.b 1
000081F6 F805 0000 F8               		dc.b $F8, 5, 0,	0, $F8
000081FB 01                         byte_7C5F:	dc.b 1
000081FC F805 000A F8               		dc.b $F8, 5, 0,	$A, $F8
00008202 00                         		even
00008202 00                         		even
00008202                            
00008202                            ; ---------------------------------------------------------------------------
00008202                            ; Sprite mappings - SLZ	swinging platforms
00008202                            ; ---------------------------------------------------------------------------
00008202                            Map_obj15a:
00008202                            	include "_maps\obj15slz.asm"
00008202                            ; ---------------------------------------------------------------------------
00008202                            ; Sprite mappings - SLZ	swinging platforms
00008202                            ; ---------------------------------------------------------------------------
00008202 0000                       		dc.w byte_7C6C-Map_obj15a
00008204 0000                       		dc.w byte_7C95-Map_obj15a
00008206 0000                       		dc.w byte_7C9B-Map_obj15a
00008208 08                         byte_7C6C:	dc.b 8
00008209 F00F 0004 E0               		dc.b $F0, $F, 0, 4, $E0
0000820E F00F 0804 00               		dc.b $F0, $F, 8, 4, 0
00008213 F005 0014 D0               		dc.b $F0, 5, 0,	$14, $D0
00008218 F005 0814 20               		dc.b $F0, 5, 8,	$14, $20
0000821D 1004 0018 E0               		dc.b $10, 4, 0,	$18, $E0
00008222 1004 0818 10               		dc.b $10, 4, 8,	$18, $10
00008227 1001 001A F8               		dc.b $10, 1, 0,	$1A, $F8
0000822C 1001 081A 00               		dc.b $10, 1, 8,	$1A, 0
00008231 01                         byte_7C95:	dc.b 1
00008232 F805 4000 F8               		dc.b $F8, 5, $40, 0, $F8
00008237 01                         byte_7C9B:	dc.b 1
00008238 F805 001C F8               		dc.b $F8, 5, 0,	$1C, $F8
0000823E 00                         		even
0000823E 00                         		even
0000823E                            
0000823E                            ; ===========================================================================
0000823E                            ; ---------------------------------------------------------------------------
0000823E                            ; Object 17 - helix of spikes on a pole	(GHZ)
0000823E                            ; ---------------------------------------------------------------------------
0000823E                            
0000823E                            Obj17:					; XREF: Obj_Index
0000823E 7000                       		moveq	#0,d0
00008240 1028 0024                  		move.b	$24(a0),d0
00008244 323B 0000                  		move.w	Obj17_Index(pc,d0.w),d1
00008248 4EFB 1000                  		jmp	Obj17_Index(pc,d1.w)
0000824C                            ; ===========================================================================
0000824C 0000                       Obj17_Index:	dc.w Obj17_Main-Obj17_Index
0000824E 0000                       		dc.w Obj17_Action-Obj17_Index
00008250 0000                       		dc.w Obj17_Action-Obj17_Index
00008252 0000                       		dc.w Obj17_Delete-Obj17_Index
00008254 0000                       		dc.w Obj17_Display-Obj17_Index
00008256                            ; ===========================================================================
00008256                            
00008256                            Obj17_Main:				; XREF: Obj17_Index
00008256 5428 0024                  		addq.b	#2,$24(a0)
0000825A 217C 0000 0000 0004        		move.l	#Map_obj17,4(a0)
00008262 317C 4398 0002             		move.w	#$4398,2(a0)
00008268 117C 0007 0022             		move.b	#7,$22(a0)
0000826E 117C 0004 0001             		move.b	#4,1(a0)
00008274 117C 0003 0018             		move.b	#3,$18(a0)
0000827A 117C 0008 0019             		move.b	#8,$19(a0)
00008280 3428 000C                  		move.w	$C(a0),d2
00008284 3628 0008                  		move.w	8(a0),d3
00008288 1810                       		move.b	0(a0),d4
0000828A 45E8 0028                  		lea	$28(a0),a2	; move helix length to a2
0000828E 7200                       		moveq	#0,d1
00008290 1212                       		move.b	(a2),d1		; move a2 to d1
00008292 14FC 0000                  		move.b	#0,(a2)+
00008296 3001                       		move.w	d1,d0
00008298 E248                       		lsr.w	#1,d0
0000829A E948                       		lsl.w	#4,d0
0000829C 9640                       		sub.w	d0,d3
0000829E 5501                       		subq.b	#2,d1
000082A0 6500                       		bcs.s	Obj17_Action
000082A2 7C00                       		moveq	#0,d6
000082A4                            
000082A4                            Obj17_MakeHelix:
000082A4 6100 0000                  		bsr.w	SingleObjLoad
000082A8 6600                       		bne.s	Obj17_Action
000082AA 5228 0028                  		addq.b	#1,$28(a0)
000082AE 3A09                       		move.w	a1,d5
000082B0 0445 D000                  		subi.w	#$D000,d5
000082B4 EC4D                       		lsr.w	#6,d5
000082B6 0245 007F                  		andi.w	#$7F,d5
000082BA 14C5                       		move.b	d5,(a2)+
000082BC 137C 0008 0024             		move.b	#8,$24(a1)
000082C2 1284                       		move.b	d4,0(a1)
000082C4 3342 000C                  		move.w	d2,$C(a1)
000082C8 3343 0008                  		move.w	d3,8(a1)
000082CC 2368 0004 0004             		move.l	4(a0),4(a1)
000082D2 337C 4398 0002             		move.w	#$4398,2(a1)
000082D8 137C 0004 0001             		move.b	#4,1(a1)
000082DE 137C 0003 0018             		move.b	#3,$18(a1)
000082E4 137C 0008 0019             		move.b	#8,$19(a1)
000082EA 1346 003E                  		move.b	d6,$3E(a1)
000082EE 5206                       		addq.b	#1,d6
000082F0 0206 0007                  		andi.b	#7,d6
000082F4 0643 0010                  		addi.w	#$10,d3
000082F8 B668 0008                  		cmp.w	8(a0),d3
000082FC 6600                       		bne.s	loc_7D78
000082FE 1146 003E                  		move.b	d6,$3E(a0)
00008302 5206                       		addq.b	#1,d6
00008304 0206 0007                  		andi.b	#7,d6
00008308 0643 0010                  		addi.w	#$10,d3
0000830C 5228 0028                  		addq.b	#1,$28(a0)
00008310                            
00008310                            loc_7D78:
00008310 51C9 FF92                  		dbf	d1,Obj17_MakeHelix ; repeat d1 times (helix length)
00008314                            
00008314                            Obj17_Action:				; XREF: Obj17_Index
00008314 6100 0000                  		bsr.w	Obj17_RotateSpikes
00008318 6100 0000                  		bsr.w	DisplaySprite
0000831C 6000 0000                  		bra.w	Obj17_ChkDel
00008320                            
00008320                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00008320                            
00008320                            
00008320                            Obj17_RotateSpikes:			; XREF: Obj17_Action; Obj17_Display
00008320 1038 FEC1                  		move.b	($FFFFFEC1).w,d0
00008324 117C 0000 0020             		move.b	#0,$20(a0)	; make object harmless
0000832A D028 003E                  		add.b	$3E(a0),d0
0000832E 0200 0007                  		andi.b	#7,d0
00008332 1140 001A                  		move.b	d0,$1A(a0)	; change current frame
00008336 6600                       		bne.s	locret_7DA6
00008338 117C 0084 0020             		move.b	#$84,$20(a0)	; make object harmful
0000833E                            
0000833E                            locret_7DA6:
0000833E 4E75                       		rts	
00008340                            ; End of function Obj17_RotateSpikes
00008340                            
00008340                            ; ===========================================================================
00008340                            
00008340                            Obj17_ChkDel:				; XREF: Obj17_Action
00008340 3028 0008                  		move.w	8(a0),d0
00008344 0240 FF80                  		andi.w	#$FF80,d0
00008348 3238 F700                  		move.w	($FFFFF700).w,d1
0000834C 0441 0080                  		subi.w	#$80,d1
00008350 0241 FF80                  		andi.w	#$FF80,d1
00008354 9041                       		sub.w	d1,d0
00008356 0C40 0280                  		cmpi.w	#$280,d0
0000835A 6200 0000                  		bhi.w	Obj17_DelAll
0000835E 4E75                       		rts	
00008360                            ; ===========================================================================
00008360                            
00008360                            Obj17_DelAll:				; XREF: Obj17_ChkDel
00008360 7400                       		moveq	#0,d2
00008362 45E8 0028                  		lea	$28(a0),a2	; move helix length to a2
00008366 141A                       		move.b	(a2)+,d2	; move a2 to d2
00008368 5502                       		subq.b	#2,d2
0000836A 6500                       		bcs.s	Obj17_Delete
0000836C                            
0000836C                            Obj17_DelLoop:
0000836C 7000                       		moveq	#0,d0
0000836E 101A                       		move.b	(a2)+,d0
00008370 ED48                       		lsl.w	#6,d0
00008372 0680 00FF D000             		addi.l	#$FFD000,d0
00008378 2240                       		movea.l	d0,a1
0000837A 6100 0000                  		bsr.w	DeleteObject2	; delete object
0000837E 51CA FFEC                  		dbf	d2,Obj17_DelLoop ; repeat d2 times (helix length)
00008382                            
00008382                            Obj17_Delete:				; XREF: Obj17_Index
00008382 6100 0000                  		bsr.w	DeleteObject
00008386 4E75                       		rts	
00008388                            ; ===========================================================================
00008388                            
00008388                            Obj17_Display:				; XREF: Obj17_Index
00008388 6100 FF96                  		bsr.w	Obj17_RotateSpikes
0000838C 6000 0000                  		bra.w	DisplaySprite
00008390                            ; ===========================================================================
00008390                            ; ---------------------------------------------------------------------------
00008390                            ; Sprite mappings - helix of spikes on a pole (GHZ)
00008390                            ; ---------------------------------------------------------------------------
00008390                            Map_obj17:
00008390                            	include "_maps\obj17.asm"
00008390                            ; ---------------------------------------------------------------------------
00008390                            ; Sprite mappings - helix of spikes on a pole (GHZ)
00008390                            ; ---------------------------------------------------------------------------
00008390 0000 0000                  		dc.w byte_7E08-Map_obj17, byte_7E0E-Map_obj17
00008394 0000 0000                  		dc.w byte_7E14-Map_obj17, byte_7E1A-Map_obj17
00008398 0000 0000                  		dc.w byte_7E20-Map_obj17, byte_7E26-Map_obj17
0000839C 0000 0000                  		dc.w byte_7E2D+1-Map_obj17, byte_7E2C-Map_obj17
000083A0 01                         byte_7E08:	dc.b 1
000083A1 F001 0000 FC               		dc.b $F0, 1, 0,	0, $FC
000083A6 01                         byte_7E0E:	dc.b 1
000083A7 F505 0002 F8               		dc.b $F5, 5, 0,	2, $F8
000083AC 01                         byte_7E14:	dc.b 1
000083AD F805 0006 F8               		dc.b $F8, 5, 0,	6, $F8
000083B2 01                         byte_7E1A:	dc.b 1
000083B3 FB05 000A F8               		dc.b $FB, 5, 0,	$A, $F8
000083B8 01                         byte_7E20:	dc.b 1
000083B9 0001 000E FC               		dc.b 0,	1, 0, $E, $FC
000083BE 01                         byte_7E26:	dc.b 1
000083BF 0400 0010 FD               		dc.b 4,	0, 0, $10, $FD
000083C4 01                         byte_7E2C:	dc.b 1
000083C5 F400 0011 FD               byte_7E2D:	dc.b $F4, 0, 0,	$11, $FD
000083CA                            		even
000083CA                            		even
000083CA                            
000083CA                            ; ===========================================================================
000083CA                            ; ---------------------------------------------------------------------------
000083CA                            ; Object 18 - platforms	(GHZ, SYZ, SLZ)
000083CA                            ; ---------------------------------------------------------------------------
000083CA                            
000083CA                            Obj18:					; XREF: Obj_Index
000083CA 7000                       		moveq	#0,d0
000083CC 1028 0024                  		move.b	$24(a0),d0
000083D0 323B 0000                  		move.w	Obj18_Index(pc,d0.w),d1
000083D4 4EFB 1000                  		jmp	Obj18_Index(pc,d1.w)
000083D8                            ; ===========================================================================
000083D8 0000                       Obj18_Index:	dc.w Obj18_Main-Obj18_Index
000083DA 0000                       		dc.w Obj18_Solid-Obj18_Index
000083DC 0000                       		dc.w Obj18_Action2-Obj18_Index
000083DE 0000                       		dc.w Obj18_Delete-Obj18_Index
000083E0 0000                       		dc.w Obj18_Action-Obj18_Index
000083E2                            ; ===========================================================================
000083E2                            
000083E2                            Obj18_Main:				; XREF: Obj18_Index
000083E2 5428 0024                  		addq.b	#2,$24(a0)
000083E6 317C 4000 0002             		move.w	#$4000,2(a0)
000083EC 217C 0000 0000 0004        		move.l	#Map_obj18,4(a0)
000083F4 117C 0020 0019             		move.b	#$20,$19(a0)
000083FA 0C38 0004 FE10             		cmpi.b	#4,($FFFFFE10).w ; check if level is SYZ
00008400 6600                       		bne.s	Obj18_NotSYZ
00008402 217C 0000 0000 0004        		move.l	#Map_obj18a,4(a0) ; SYZ	specific code
0000840A 117C 0020 0019             		move.b	#$20,$19(a0)
00008410                            
00008410                            Obj18_NotSYZ:
00008410 0C38 0003 FE10             		cmpi.b	#3,($FFFFFE10).w ; check if level is SLZ
00008416 6600                       		bne.s	Obj18_NotSLZ
00008418 217C 0000 0000 0004        		move.l	#Map_obj18b,4(a0) ; SLZ	specific code
00008420 117C 0020 0019             		move.b	#$20,$19(a0)
00008426 317C 4000 0002             		move.w	#$4000,2(a0)
0000842C 117C 0003 0028             		move.b	#3,$28(a0)
00008432                            
00008432                            Obj18_NotSLZ:
00008432 117C 0004 0001             		move.b	#4,1(a0)
00008438 117C 0004 0018             		move.b	#4,$18(a0)
0000843E 3168 000C 002C             		move.w	$C(a0),$2C(a0)
00008444 3168 000C 0034             		move.w	$C(a0),$34(a0)
0000844A 3168 0008 0032             		move.w	8(a0),$32(a0)
00008450 317C 0080 0026             		move.w	#$80,$26(a0)
00008456 7200                       		moveq	#0,d1
00008458 1028 0028                  		move.b	$28(a0),d0
0000845C 0C00 000A                  		cmpi.b	#$A,d0		; is object type $A (large platform)?
00008460 6600                       		bne.s	Obj18_SetFrame	; if not, branch
00008462 5201                       		addq.b	#1,d1		; use frame #1
00008464 117C 0020 0019             		move.b	#$20,$19(a0)	; set width
0000846A                            
0000846A                            Obj18_SetFrame:
0000846A 1141 001A                  		move.b	d1,$1A(a0)	; set frame to d1
0000846E                            
0000846E                            Obj18_Solid:				; XREF: Obj18_Index
0000846E 4A28 0038                  		tst.b	$38(a0)
00008472 6700                       		beq.s	loc_7EE0
00008474 5928 0038                  		subq.b	#4,$38(a0)
00008478                            
00008478                            loc_7EE0:
00008478 7200                       		moveq	#0,d1
0000847A 1228 0019                  		move.b	$19(a0),d1
0000847E 6100 F56C                  		bsr.w	PlatformObject
00008482                            
00008482                            Obj18_Action:				; XREF: Obj18_Index
00008482 6100 0000                  		bsr.w	Obj18_Move
00008486 6100 0000                  		bsr.w	Obj18_Nudge
0000848A 6100 0000                  		bsr.w	DisplaySprite
0000848E 6000 0000                  		bra.w	Obj18_ChkDel
00008492                            ; ===========================================================================
00008492                            
00008492                            Obj18_Action2:				; XREF: Obj18_Index
00008492 0C28 0040 0038             		cmpi.b	#$40,$38(a0)
00008498 6700                       		beq.s	loc_7F06
0000849A 5828 0038                  		addq.b	#4,$38(a0)
0000849E                            
0000849E                            loc_7F06:
0000849E 7200                       		moveq	#0,d1
000084A0 1228 0019                  		move.b	$19(a0),d1
000084A4 6100 F6BA                  		bsr.w	ExitPlatform
000084A8 3F28 0008                  		move.w	8(a0),-(sp)
000084AC 6100 0000                  		bsr.w	Obj18_Move
000084B0 6100 0000                  		bsr.w	Obj18_Nudge
000084B4 341F                       		move.w	(sp)+,d2
000084B6 6100 FC12                  		bsr.w	MvSonicOnPtfm2
000084BA 6100 0000                  		bsr.w	DisplaySprite
000084BE 6000 0000                  		bra.w	Obj18_ChkDel
000084C2                            
000084C2 4E75                       		rts
000084C4                            
000084C4                            ; ---------------------------------------------------------------------------
000084C4                            ; Subroutine to	move platform slightly when you	stand on it
000084C4                            ; ---------------------------------------------------------------------------
000084C4                            
000084C4                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000084C4                            
000084C4                            
000084C4                            Obj18_Nudge:				; XREF: Obj18_Action; Obj18_Action2
000084C4 1028 0038                  		move.b	$38(a0),d0
000084C8 6100 A79A                  		bsr.w	CalcSine
000084CC 323C 0400                  		move.w	#$400,d1
000084D0 C1C1                       		muls.w	d1,d0
000084D2 4840                       		swap	d0
000084D4 D068 002C                  		add.w	$2C(a0),d0
000084D8 3140 000C                  		move.w	d0,$C(a0)
000084DC 4E75                       		rts	
000084DE                            ; End of function Obj18_Nudge
000084DE                            
000084DE                            ; ---------------------------------------------------------------------------
000084DE                            ; Subroutine to	move platforms
000084DE                            ; ---------------------------------------------------------------------------
000084DE                            
000084DE                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000084DE                            
000084DE                            
000084DE                            Obj18_Move:				; XREF: Obj18_Action; Obj18_Action2
000084DE 7000                       		moveq	#0,d0
000084E0 1028 0028                  		move.b	$28(a0),d0
000084E4 0240 000F                  		andi.w	#$F,d0
000084E8 D040                       		add.w	d0,d0
000084EA 323B 0000                  		move.w	Obj18_TypeIndex(pc,d0.w),d1
000084EE 4EFB 1000                  		jmp	Obj18_TypeIndex(pc,d1.w)
000084F2                            ; End of function Obj18_Move
000084F2                            
000084F2                            ; ===========================================================================
000084F2 0000 0000                  Obj18_TypeIndex:dc.w Obj18_Type00-Obj18_TypeIndex, Obj18_Type01-Obj18_TypeIndex
000084F6 0000 0000                  		dc.w Obj18_Type02-Obj18_TypeIndex, Obj18_Type03-Obj18_TypeIndex
000084FA 0000 0000                  		dc.w Obj18_Type04-Obj18_TypeIndex, Obj18_Type05-Obj18_TypeIndex
000084FE 0000 0000                  		dc.w Obj18_Type06-Obj18_TypeIndex, Obj18_Type07-Obj18_TypeIndex
00008502 0000 0000                  		dc.w Obj18_Type08-Obj18_TypeIndex, Obj18_Type00-Obj18_TypeIndex
00008506 0000 0000                  		dc.w Obj18_Type0A-Obj18_TypeIndex, Obj18_Type0B-Obj18_TypeIndex
0000850A 0000                       		dc.w Obj18_Type0C-Obj18_TypeIndex
0000850C                            ; ===========================================================================
0000850C                            
0000850C                            Obj18_Type00:
0000850C 4E75                       		rts			; platform 00 doesn't move
0000850E                            ; ===========================================================================
0000850E                            
0000850E                            Obj18_Type05:
0000850E 3028 0032                  		move.w	$32(a0),d0
00008512 1228 0026                  		move.b	$26(a0),d1	; load platform-motion variable
00008516 4401                       		neg.b	d1		; reverse platform-motion
00008518 0601 0040                  		addi.b	#$40,d1
0000851C 6000                       		bra.s	Obj18_01_Move
0000851E                            ; ===========================================================================
0000851E                            
0000851E                            Obj18_Type01:
0000851E 3028 0032                  		move.w	$32(a0),d0
00008522 1228 0026                  		move.b	$26(a0),d1	; load platform-motion variable
00008526 0401 0040                  		subi.b	#$40,d1
0000852A                            
0000852A                            Obj18_01_Move:
0000852A 4881                       		ext.w	d1
0000852C D041                       		add.w	d1,d0
0000852E 3140 0008                  		move.w	d0,8(a0)	; change position on x-axis
00008532 6000 0000                  		bra.w	Obj18_ChgMotion
00008536                            ; ===========================================================================
00008536                            
00008536                            Obj18_Type0C:
00008536 3028 0034                  		move.w	$34(a0),d0
0000853A 1238 FE6C                  		move.b	($FFFFFE6C).w,d1 ; load	platform-motion	variable
0000853E 4401                       		neg.b	d1		; reverse platform-motion
00008540 0601 0030                  		addi.b	#$30,d1
00008544 6000                       		bra.s	Obj18_02_Move
00008546                            ; ===========================================================================
00008546                            
00008546                            Obj18_Type0B:
00008546 3028 0034                  		move.w	$34(a0),d0
0000854A 1238 FE6C                  		move.b	($FFFFFE6C).w,d1 ; load	platform-motion	variable
0000854E 0401 0030                  		subi.b	#$30,d1
00008552 6000                       		bra.s	Obj18_02_Move
00008554                            ; ===========================================================================
00008554                            
00008554                            Obj18_Type06:
00008554 3028 0034                  		move.w	$34(a0),d0
00008558 1228 0026                  		move.b	$26(a0),d1	; load platform-motion variable
0000855C 4401                       		neg.b	d1		; reverse platform-motion
0000855E 0601 0040                  		addi.b	#$40,d1
00008562 6000                       		bra.s	Obj18_02_Move
00008564                            ; ===========================================================================
00008564                            
00008564                            Obj18_Type02:
00008564 3028 0034                  		move.w	$34(a0),d0
00008568 1228 0026                  		move.b	$26(a0),d1	; load platform-motion variable
0000856C 0401 0040                  		subi.b	#$40,d1
00008570                            
00008570                            Obj18_02_Move:
00008570 4881                       		ext.w	d1
00008572 D041                       		add.w	d1,d0
00008574 3140 002C                  		move.w	d0,$2C(a0)	; change position on y-axis
00008578 6000 0000                  		bra.w	Obj18_ChgMotion
0000857C                            ; ===========================================================================
0000857C                            
0000857C                            Obj18_Type03:
0000857C 4A68 003A                  		tst.w	$3A(a0)		; is time delay	set?
00008580 6600                       		bne.s	Obj18_03_Wait	; if yes, branch
00008582 0828 0003 0022             		btst	#3,$22(a0)	; is Sonic standing on the platform?
00008588 6700                       		beq.s	Obj18_03_NoMove	; if not, branch
0000858A 317C 001E 003A             		move.w	#30,$3A(a0)	; set time delay to 0.5	seconds
00008590                            
00008590                            Obj18_03_NoMove:
00008590 4E75                       		rts	
00008592                            ; ===========================================================================
00008592                            
00008592                            Obj18_03_Wait:
00008592 5368 003A                  		subq.w	#1,$3A(a0)	; subtract 1 from time
00008596 66F8                       		bne.s	Obj18_03_NoMove	; if time is > 0, branch
00008598 317C 0020 003A             		move.w	#32,$3A(a0)
0000859E 5228 0028                  		addq.b	#1,$28(a0)	; change to type 04 (falling)
000085A2 4E75                       		rts	
000085A4                            ; ===========================================================================
000085A4                            
000085A4                            Obj18_Type04:
000085A4 4A68 003A                  		tst.w	$3A(a0)
000085A8 6700                       		beq.s	loc_8048
000085AA 5368 003A                  		subq.w	#1,$3A(a0)
000085AE 6600                       		bne.s	loc_8048
000085B0 0828 0003 0022             		btst	#3,$22(a0)
000085B6 6700                       		beq.s	loc_8042
000085B8 08E9 0001 0022             		bset	#1,$22(a1)
000085BE 08A9 0003 0022             		bclr	#3,$22(a1)
000085C4 137C 0002 0024             		move.b	#2,$24(a1)
000085CA 08A8 0003 0022             		bclr	#3,$22(a0)
000085D0 4228 0025                  		clr.b	$25(a0)
000085D4 3368 0012 0012             		move.w	$12(a0),$12(a1)
000085DA                            
000085DA                            loc_8042:
000085DA 117C 0008 0024             		move.b	#8,$24(a0)
000085E0                            
000085E0                            loc_8048:
000085E0 2628 002C                  		move.l	$2C(a0),d3
000085E4 3028 0012                  		move.w	$12(a0),d0
000085E8 48C0                       		ext.l	d0
000085EA E180                       		asl.l	#8,d0
000085EC D680                       		add.l	d0,d3
000085EE 2143 002C                  		move.l	d3,$2C(a0)
000085F2 0668 0038 0012             		addi.w	#$38,$12(a0)
000085F8 3038 F72E                  		move.w	($FFFFF72E).w,d0
000085FC 0640 00E0                  		addi.w	#$E0,d0
00008600 B068 002C                  		cmp.w	$2C(a0),d0
00008604 6400                       		bcc.s	locret_8074
00008606 117C 0006 0024             		move.b	#6,$24(a0)
0000860C                            
0000860C                            locret_8074:
0000860C 4E75                       		rts	
0000860E                            ; ===========================================================================
0000860E                            
0000860E                            Obj18_Type07:
0000860E 4A68 003A                  		tst.w	$3A(a0)		; is time delay	set?
00008612 6600                       		bne.s	Obj18_07_Wait	; if yes, branch
00008614 45F8 F7E0                  		lea	($FFFFF7E0).w,a2 ; load	switch statuses
00008618 7000                       		moveq	#0,d0
0000861A 1028 0028                  		move.b	$28(a0),d0	; move object type ($x7) to d0
0000861E E848                       		lsr.w	#4,d0		; divide d0 by 8, round	down
00008620 4A32 0000                  		tst.b	(a2,d0.w)	; has switch no. d0 been pressed?
00008624 6700                       		beq.s	Obj18_07_NoMove	; if not, branch
00008626 317C 003C 003A             		move.w	#60,$3A(a0)	; set time delay to 1 second
0000862C                            
0000862C                            Obj18_07_NoMove:
0000862C 4E75                       		rts	
0000862E                            ; ===========================================================================
0000862E                            
0000862E                            Obj18_07_Wait:
0000862E 5368 003A                  		subq.w	#1,$3A(a0)	; subtract 1 from time delay
00008632 66F8                       		bne.s	Obj18_07_NoMove	; if time is > 0, branch
00008634 5228 0028                  		addq.b	#1,$28(a0)	; change to type 08
00008638 4E75                       		rts	
0000863A                            ; ===========================================================================
0000863A                            
0000863A                            Obj18_Type08:
0000863A 5568 002C                  		subq.w	#2,$2C(a0)	; move platform	up
0000863E 3028 0034                  		move.w	$34(a0),d0
00008642 0440 0200                  		subi.w	#$200,d0
00008646 B068 002C                  		cmp.w	$2C(a0),d0	; has platform moved $200 pixels?
0000864A 6600                       		bne.s	Obj18_08_NoStop	; if not, branch
0000864C 4228 0028                  		clr.b	$28(a0)		; change to type 00 (stop moving)
00008650                            
00008650                            Obj18_08_NoStop:
00008650 4E75                       		rts	
00008652                            ; ===========================================================================
00008652                            
00008652                            Obj18_Type0A:
00008652 3028 0034                  		move.w	$34(a0),d0
00008656 1228 0026                  		move.b	$26(a0),d1	; load platform-motion variable
0000865A 0401 0040                  		subi.b	#$40,d1
0000865E 4881                       		ext.w	d1
00008660 E241                       		asr.w	#1,d1
00008662 D041                       		add.w	d1,d0
00008664 3140 002C                  		move.w	d0,$2C(a0)	; change position on y-axis
00008668                            
00008668                            Obj18_ChgMotion:
00008668 1178 FE78 0026             		move.b	($FFFFFE78).w,$26(a0) ;	update platform-movement variable
0000866E 4E75                       		rts	
00008670                            ; ===========================================================================
00008670                            
00008670                            Obj18_ChkDel:				; XREF: Obj18_Action; Obj18_Action2
00008670 3028 0032                  		move.w	$32(a0),d0
00008674 0240 FF80                  		andi.w	#$FF80,d0
00008678 3238 F700                  		move.w	($FFFFF700).w,d1
0000867C 0441 0080                  		subi.w	#$80,d1
00008680 0241 FF80                  		andi.w	#$FF80,d1
00008684 9041                       		sub.w	d1,d0
00008686 0C40 0280                  		cmpi.w	#$280,d0
0000868A 6200                       		bhi.s	Obj18_Delete
0000868C 4E75                       		rts	
0000868E                            ; ===========================================================================
0000868E                            
0000868E                            Obj18_Delete:				; XREF: Obj18_Index
0000868E 6000 0000                  		bra.w	DeleteObject
00008692                            ; ===========================================================================
00008692                            ; ---------------------------------------------------------------------------
00008692                            ; Sprite mappings - unused
00008692                            ; ---------------------------------------------------------------------------
00008692                            Map_obj18x:
00008692                            	include "_maps\obj18x.asm"
00008692                            ; ---------------------------------------------------------------------------
00008692                            ; Sprite mappings - unused
00008692                            ; ---------------------------------------------------------------------------
00008692 0000                       		dc.w byte_80FE-Map_obj18x
00008694 0000                       		dc.w byte_8109-Map_obj18x
00008696 02                         byte_80FE:	dc.b 2
00008697 F40B 003C E8               		dc.b $F4, $B, 0, $3C, $E8
0000869C F40B 0048 00               		dc.b $F4, $B, 0, $48, 0
000086A1 0A                         byte_8109:	dc.b $A
000086A2 F40F 00CA E0               		dc.b $F4, $F, 0, $CA, $E0
000086A7 040F 00DA E0               		dc.b 4,	$F, 0, $DA, $E0
000086AC 240F 00DA E0               		dc.b $24, $F, 0, $DA, $E0
000086B1 440F 00DA E0               		dc.b $44, $F, 0, $DA, $E0
000086B6 640F 00DA E0               		dc.b $64, $F, 0, $DA, $E0
000086BB F40F 08CA 00               		dc.b $F4, $F, 8, $CA, 0
000086C0 040F 08DA 00               		dc.b 4,	$F, 8, $DA, 0
000086C5 240F 08DA 00               		dc.b $24, $F, 8, $DA, 0
000086CA 440F 08DA 00               		dc.b $44, $F, 8, $DA, 0
000086CF 640F 08DA 00               		dc.b $64, $F, 8, $DA, 0
000086D4                            		even
000086D4                            		even
000086D4                            
000086D4                            ; ---------------------------------------------------------------------------
000086D4                            ; Sprite mappings - GHZ	platforms
000086D4                            ; ---------------------------------------------------------------------------
000086D4                            Map_obj18:
000086D4                            	include "_maps\obj18ghz.asm"
000086D4                            ; ---------------------------------------------------------------------------
000086D4                            ; Sprite mappings - GHZ	platforms
000086D4                            ; ---------------------------------------------------------------------------
000086D4 0000                       		dc.w byte_8140-Map_obj18
000086D6 0000                       		dc.w byte_8155-Map_obj18
000086D8 04                         byte_8140:	dc.b 4
000086D9 F40B 003B E0               		dc.b $F4, $B, 0, $3B, $E0 ; small platform
000086DE F407 003F F8               		dc.b $F4, 7, 0,	$3F, $F8
000086E3 F407 003F 08               		dc.b $F4, 7, 0,	$3F, 8
000086E8 F403 0047 18               		dc.b $F4, 3, 0,	$47, $18
000086ED 0A                         byte_8155:	dc.b $A
000086EE F40F 00C5 E0               		dc.b $F4, $F, 0, $C5, $E0 ; large column platform
000086F3 040F 00D5 E0               		dc.b 4,	$F, 0, $D5, $E0
000086F8 240F 00D5 E0               		dc.b $24, $F, 0, $D5, $E0
000086FD 440F 00D5 E0               		dc.b $44, $F, 0, $D5, $E0
00008702 640F 00D5 E0               		dc.b $64, $F, 0, $D5, $E0
00008707 F40F 08C5 00               		dc.b $F4, $F, 8, $C5, 0
0000870C 040F 08D5 00               		dc.b 4,	$F, 8, $D5, 0
00008711 240F 08D5 00               		dc.b $24, $F, 8, $D5, 0
00008716 440F 08D5 00               		dc.b $44, $F, 8, $D5, 0
0000871B 640F 08D5 00               		dc.b $64, $F, 8, $D5, 0
00008720                            		even
00008720                            		even
00008720                            
00008720                            ; ---------------------------------------------------------------------------
00008720                            ; Sprite mappings - SYZ	platforms
00008720                            ; ---------------------------------------------------------------------------
00008720                            Map_obj18a:
00008720                            	include "_maps\obj18syz.asm"
00008720                            ; ---------------------------------------------------------------------------
00008720                            ; Sprite mappings - SYZ	platforms
00008720                            ; ---------------------------------------------------------------------------
00008720 0000                       		dc.w byte_818A-Map_obj18a
00008722 03                         byte_818A:	dc.b 3
00008723 F60B 0049 E0               		dc.b $F6, $B, 0, $49, $E0
00008728 F607 0051 F8               		dc.b $F6, 7, 0,	$51, $F8
0000872D F60B 0055 08               		dc.b $F6, $B, 0, $55, 8
00008732                            		even
00008732                            		even
00008732                            
00008732                            ; ---------------------------------------------------------------------------
00008732                            ; Sprite mappings - SLZ	platforms
00008732                            ; ---------------------------------------------------------------------------
00008732                            Map_obj18b:
00008732                            	include "_maps\obj18slz.asm"
00008732                            ; ---------------------------------------------------------------------------
00008732                            ; Sprite mappings - SLZ	platforms
00008732                            ; ---------------------------------------------------------------------------
00008732 0000                       		dc.w byte_819C-Map_obj18b
00008734 02                         byte_819C:	dc.b 2
00008735 F80F 0021 E0               		dc.b $F8, $F, 0, $21, $E0
0000873A F80F 0021 00               		dc.b $F8, $F, 0, $21, 0
00008740 00                         		even
00008740 00                         		even
00008740                            
00008740                            ; ===========================================================================
00008740                            ; ---------------------------------------------------------------------------
00008740                            ; Object 19 - Pearto bombs
00008740                            ; ---------------------------------------------------------------------------
00008740                            Obj19:					; XREF: Obj_Index
00008740 7000                       		moveq	#0,d0
00008742 1028 0024                  		move.b	$24(a0),d0
00008746 323B 0000                  		move.w	off_7070(pc,d0.w),d1
0000874A 4EFB 1000                  		jmp	off_7070(pc,d1.w)
0000874E                            ; ---------------------------------------------------------------------------
0000874E                            
0000874E 0000 0000 0000             off_7070:	dc.w loc_7076-off_7070, loc_70A6-off_7070, loc_70EE-off_7070
00008754                            ; ---------------------------------------------------------------------------
00008754                            
00008754                            loc_7076:
00008754 5428 0024                  		addq.b	#2,$24(a0)
00008758 217C 0000 0000 0004        		move.l	#Map_obj19,4(a0)
00008760 317C 0480 0002             		move.w	#($9000/$20),2(a0)
00008766 117C 0004 0001             		move.b	#4,1(a0)
0000876C 117C 0003 0019             		move.b	#3,$19(a0)
00008772 117C 0087 0020             		move.b	#$87,$20(a0)
00008778 117C 0008 0018             		move.b	#8,$18(a0)
0000877E 317C 0018 0030             		move.w	#$18,$30(a0)
00008784                            
00008784                            loc_70A6:
00008784 0828 0007 0022             		btst	#7,$22(a0)
0000878A 6600                       		bne.s	loc_70C2
0000878C 4A68 0030                  		tst.w	$30(a0)
00008790 6600                       		bne.s	loc_70D2
00008792 4EB9 0000 0000             		jsr	ObjHitFloor
00008798 4A41                       		tst.w	d1
0000879A 6A00                       		bpl.s	loc_70D6
0000879C D368 000C                  		add.w	d1,$C(a0)
000087A0                            
000087A0                            loc_70C2:
000087A0 10BC 0027                  		move.b	#$27,0(a0); change object to explosion (why was this even here with the 3F branch)
000087A4 117C 0000 0024             		move.b	#0,$24(a0)
000087AA                            ; ---------------------------------------------------------------------------
000087AA                            
000087AA                            loc_70D2:
000087AA 5368 0030                  		subq.w	#1,$30(a0)
000087AE                            
000087AE                            loc_70D6:
000087AE 6100 0000                  		bsr.w	ObjectFall
000087B2 6100 0000                  		bsr.w	DisplaySprite
000087B6 3038 F72E                  		move.w	($FFFFF72E).w,d0
000087BA 0640 00E0                  		addi.w	#$E0,d0
000087BE B068 000C                  		cmp.w	$C(a0),d0
000087C2 6500                       		bcs.s	loc_70EE
000087C4 4E75                       		rts
000087C6                            ; ---------------------------------------------------------------------------
000087C6                            
000087C6                            loc_70EE:
000087C6 6100 0000                  		bsr.w	DeleteObject
000087CA 4E75                       		rts
000087CC                            		
000087CC                            Map_obj19:
000087CC                            	include "_maps\obj19.asm"
000087CC                            Map_02b4:
000087CC 0000                       Map_02b4_0: 	dc.w Map_02b4_2-Map_02b4
000087CE 01                         Map_02b4_2: 	dc.b $1
000087CF F706 2000 F8               	dc.b $F7, $6, $20, $0, $F8
000087D4                            	even
000087D4                            	even
000087D4                            ; ===========================================================================
000087D4                            ; ---------------------------------------------------------------------------
000087D4                            ; Sprite mappings - swinging ball on a chain from GHZ boss
000087D4                            ; ---------------------------------------------------------------------------
000087D4                            Map_obj48:
000087D4                            	include "_maps\obj48.asm"
000087D4                            ; ---------------------------------------------------------------------------
000087D4                            ; Sprite mappings - swinging ball on a chain from GHZ boss
000087D4                            ; ---------------------------------------------------------------------------
000087D4 0000 0000                  		dc.w byte_81B2-Map_obj48, byte_81D1-Map_obj48
000087D8 0000 0000                  		dc.w byte_81E6-Map_obj48, byte_81FB-Map_obj48
000087DC 06                         byte_81B2:	dc.b 6
000087DD F004 0024 F0               		dc.b $F0, 4, 0,	$24, $F0
000087E2 F804 1024 F0               		dc.b $F8, 4, $10, $24, $F0
000087E7 E80A 0000 E8               		dc.b $E8, $A, 0, 0, $E8
000087EC E80A 0800 00               		dc.b $E8, $A, 8, 0, 0
000087F1 000A 1000 E8               		dc.b 0,	$A, $10, 0, $E8
000087F6 000A 1800 00               		dc.b 0,	$A, $18, 0, 0
000087FB 04                         byte_81D1:	dc.b 4
000087FC E80A 0009 E8               		dc.b $E8, $A, 0, 9, $E8
00008801 E80A 0809 00               		dc.b $E8, $A, 8, 9, 0
00008806 000A 1009 E8               		dc.b 0,	$A, $10, 9, $E8
0000880B 000A 1809 00               		dc.b 0,	$A, $18, 9, 0
00008810 04                         byte_81E6:	dc.b 4
00008811 E80A 0012 E8               		dc.b $E8, $A, 0, $12, $E8
00008816 E80A 001B 00               		dc.b $E8, $A, 0, $1B, 0
0000881B 000A 181B E8               		dc.b 0,	$A, $18, $1B, $E8
00008820 000A 1812 00               		dc.b 0,	$A, $18, $12, 0
00008825 04                         byte_81FB:	dc.b 4
00008826 E80A 081B E8               		dc.b $E8, $A, 8, $1B, $E8
0000882B E80A 0812 00               		dc.b $E8, $A, 8, $12, 0
00008830 000A 1012 E8               		dc.b 0,	$A, $10, $12, $E8
00008835 000A 101B 00               		dc.b 0,	$A, $10, $1B, 0
0000883A                            		even
0000883A                            		even
0000883A                            
0000883A                            ; ===========================================================================
0000883A                            ; ---------------------------------------------------------------------------
0000883A                            ; Object 1A - GHZ collapsing ledge
0000883A                            ; ---------------------------------------------------------------------------
0000883A                            
0000883A                            Obj1A:					; XREF: Obj_Index
0000883A 7000                       		moveq	#0,d0
0000883C 1028 0024                  		move.b	$24(a0),d0
00008840 323B 0000                  		move.w	Obj1A_Index(pc,d0.w),d1
00008844 4EFB 1000                  		jmp	Obj1A_Index(pc,d1.w)
00008848                            ; ===========================================================================
00008848 0000 0000                  Obj1A_Index:	dc.w Obj1A_Main-Obj1A_Index, Obj1A_ChkTouch-Obj1A_Index
0000884C 0000 0000                  		dc.w Obj1A_Touch-Obj1A_Index, Obj1A_Display-Obj1A_Index
00008850 0000 0000                  		dc.w Obj1A_Delete-Obj1A_Index, Obj1A_WalkOff-Obj1A_Index
00008854                            ; ===========================================================================
00008854                            
00008854                            Obj1A_Main:				; XREF: Obj1A_Index
00008854 5428 0024                  		addq.b	#2,$24(a0)
00008858 217C 0000 0000 0004        		move.l	#Map_obj1A,4(a0)
00008860 317C 4000 0002             		move.w	#$4000,2(a0)
00008866 0028 0004 0001             		ori.b	#4,1(a0)
0000886C 117C 0004 0018             		move.b	#4,$18(a0)
00008872 117C 0007 0038             		move.b	#7,$38(a0)	; set time delay for collapse
00008878 117C 0064 0019             		move.b	#$64,$19(a0)
0000887E 1168 0028 001A             		move.b	$28(a0),$1A(a0)
00008884 117C 0038 0016             		move.b	#$38,$16(a0)
0000888A 08E8 0004 0001             		bset	#4,1(a0)
00008890                            
00008890                            Obj1A_ChkTouch:				; XREF: Obj1A_Index
00008890 4A28 003A                  		tst.b	$3A(a0)		; has Sonic touched the	platform?
00008894 6700                       		beq.s	Obj1A_Slope	; if not, branch
00008896 4A28 0038                  		tst.b	$38(a0)		; has time reached zero?
0000889A 6700 0000                  		beq.w	Obj1A_Collapse	; if yes, branch
0000889E 5328 0038                  		subq.b	#1,$38(a0)	; subtract 1 from time
000088A2                            
000088A2                            Obj1A_Slope:
000088A2 323C 0030                  		move.w	#$30,d1
000088A6 45F9 0000 0000             		lea	(Obj1A_SlopeData).l,a2
000088AC 6100 F212                  		bsr.w	SlopeObject
000088B0 6000 0000                  		bra.w	MarkObjGone
000088B4                            ; ===========================================================================
000088B4                            
000088B4                            Obj1A_Touch:				; XREF: Obj1A_Index
000088B4 4A28 0038                  		tst.b	$38(a0)
000088B8 6700 0000                  		beq.w	loc_847A
000088BC 117C 0001 003A             		move.b	#1,$3A(a0)	; set object as	"touched"
000088C2 5328 0038                  		subq.b	#1,$38(a0)
000088C6                            
000088C6                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000088C6                            
000088C6                            
000088C6                            Obj1A_WalkOff:				; XREF: Obj1A_Index
000088C6 323C 0030                  		move.w	#$30,d1
000088CA 6100 F294                  		bsr.w	ExitPlatform
000088CE 323C 0030                  		move.w	#$30,d1
000088D2 45F9 0000 0000             		lea	(Obj1A_SlopeData).l,a2
000088D8 3428 0008                  		move.w	8(a0),d2
000088DC 6100 0000                  		bsr.w	SlopeObject2
000088E0 6000 0000                  		bra.w	MarkObjGone
000088E4                            ; End of function Obj1A_WalkOff
000088E4                            
000088E4                            ; ===========================================================================
000088E4                            
000088E4                            Obj1A_Display:				; XREF: Obj1A_Index
000088E4 4A28 0038                  		tst.b	$38(a0)		; has time delay reached zero?
000088E8 6700                       		beq.s	Obj1A_TimeZero	; if yes, branch
000088EA 4A28 003A                  		tst.b	$3A(a0)		; has Sonic touched the	object?
000088EE 6600 0000                  		bne.w	loc_82D0	; if yes, branch
000088F2 5328 0038                  		subq.b	#1,$38(a0)	; subtract 1 from time
000088F6 6000 0000                  		bra.w	DisplaySprite
000088FA                            ; ===========================================================================
000088FA                            
000088FA                            loc_82D0:				; XREF: Obj1A_Display
000088FA 5328 0038                  		subq.b	#1,$38(a0)
000088FE 6100 FFC6                  		bsr.w	Obj1A_WalkOff
00008902 43F8 D000                  		lea	($FFFFD000).w,a1
00008906 0829 0003 0022             		btst	#3,$22(a1)
0000890C 6700                       		beq.s	loc_82FC
0000890E 4A28 0038                  		tst.b	$38(a0)
00008912 6600                       		bne.s	locret_8308
00008914 08A9 0003 0022             		bclr	#3,$22(a1)
0000891A 08A9 0005 0022             		bclr	#5,$22(a1)
00008920 137C 0001 001D             		move.b	#1,$1D(a1)
00008926                            
00008926                            loc_82FC:
00008926 117C 0000 003A             		move.b	#0,$3A(a0)
0000892C 117C 0006 0024             		move.b	#6,$24(a0)	; run "Obj1A_Display" routine
00008932                            
00008932                            locret_8308:
00008932 4E75                       		rts	
00008934                            ; ===========================================================================
00008934                            
00008934                            Obj1A_TimeZero:				; XREF: Obj1A_Display
00008934 6100 0000                  		bsr.w	ObjectFall
00008938 6100 0000                  		bsr.w	DisplaySprite
0000893C 4A28 0001                  		tst.b	1(a0)
00008940 6A00                       		bpl.s	Obj1A_Delete
00008942 4E75                       		rts	
00008944                            ; ===========================================================================
00008944                            
00008944                            Obj1A_Delete:				; XREF: Obj1A_Index
00008944 6100 0000                  		bsr.w	DeleteObject
00008948 4E75                       		rts	
0000894A                            ; ===========================================================================
0000894A                            ; ---------------------------------------------------------------------------
0000894A                            ; Object 53 - collapsing floors	(MZ, SLZ, SBZ)
0000894A                            ; ---------------------------------------------------------------------------
0000894A                            
0000894A                            Obj53:					; XREF: Obj_Index
0000894A 7000                       		moveq	#0,d0
0000894C 1028 0024                  		move.b	$24(a0),d0
00008950 323B 0000                  		move.w	Obj53_Index(pc,d0.w),d1
00008954 4EFB 1000                  		jmp	Obj53_Index(pc,d1.w)
00008958                            ; ===========================================================================
00008958 0000 0000                  Obj53_Index:	dc.w Obj53_Main-Obj53_Index, Obj53_ChkTouch-Obj53_Index
0000895C 0000 0000                  		dc.w Obj53_Touch-Obj53_Index, Obj53_Display-Obj53_Index
00008960 0000 0000                  		dc.w Obj53_Delete-Obj53_Index, Obj53_WalkOff-Obj53_Index
00008964                            ; ===========================================================================
00008964                            
00008964                            Obj53_Main:				; XREF: Obj53_Index
00008964 5428 0024                  		addq.b	#2,$24(a0)
00008968 217C 0000 0000 0004        		move.l	#Map_obj53,4(a0)
00008970 317C 42B8 0002             		move.w	#$42B8,2(a0)
00008976 0C38 0003 FE10             		cmpi.b	#3,($FFFFFE10).w ; check if level is SLZ
0000897C 6600                       		bne.s	Obj53_NotSLZ
0000897E 317C 44E0 0002             		move.w	#$44E0,2(a0)	; SLZ specific code
00008984 5428 001A                  		addq.b	#2,$1A(a0)
00008988                            
00008988                            Obj53_NotSLZ:
00008988 0C38 0005 FE10             		cmpi.b	#5,($FFFFFE10).w ; check if level is SBZ
0000898E 6600                       		bne.s	Obj53_NotSBZ
00008990 317C 43F5 0002             		move.w	#$43F5,2(a0)	; SBZ specific code
00008996                            
00008996                            Obj53_NotSBZ:
00008996 0028 0004 0001             		ori.b	#4,1(a0)
0000899C 117C 0004 0018             		move.b	#4,$18(a0)
000089A2 117C 0007 0038             		move.b	#7,$38(a0)
000089A8 117C 0044 0019             		move.b	#$44,$19(a0)
000089AE                            
000089AE                            Obj53_ChkTouch:				; XREF: Obj53_Index
000089AE 4A28 003A                  		tst.b	$3A(a0)		; has Sonic touched the	object?
000089B2 6700                       		beq.s	Obj53_Solid	; if not, branch
000089B4 4A28 0038                  		tst.b	$38(a0)		; has time delay reached zero?
000089B8 6700 0000                  		beq.w	Obj53_Collapse	; if yes, branch
000089BC 5328 0038                  		subq.b	#1,$38(a0)	; subtract 1 from time
000089C0                            
000089C0                            Obj53_Solid:
000089C0 323C 0020                  		move.w	#$20,d1
000089C4 6100 F026                  		bsr.w	PlatformObject
000089C8 4A28 0028                  		tst.b	$28(a0)
000089CC 6A00                       		bpl.s	Obj53_MarkAsGone
000089CE 0829 0003 0022             		btst	#3,$22(a1)
000089D4 6700                       		beq.s	Obj53_MarkAsGone
000089D6 08A8 0000 0001             		bclr	#0,1(a0)
000089DC 3029 0008                  		move.w	8(a1),d0
000089E0 9068 0008                  		sub.w	8(a0),d0
000089E4 6400                       		bcc.s	Obj53_MarkAsGone
000089E6 08E8 0000 0001             		bset	#0,1(a0)
000089EC                            
000089EC                            Obj53_MarkAsGone:
000089EC 6000 0000                  		bra.w	MarkObjGone
000089F0                            ; ===========================================================================
000089F0                            
000089F0                            Obj53_Touch:				; XREF: Obj53_Index
000089F0 4A28 0038                  		tst.b	$38(a0)
000089F4 6700 0000                  		beq.w	loc_8458
000089F8 117C 0001 003A             		move.b	#1,$3A(a0)	; set object as	"touched"
000089FE 5328 0038                  		subq.b	#1,$38(a0)
00008A02                            
00008A02                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00008A02                            
00008A02                            
00008A02                            Obj53_WalkOff:				; XREF: Obj53_Index
00008A02 323C 0020                  		move.w	#$20,d1
00008A06 6100 F158                  		bsr.w	ExitPlatform
00008A0A 3428 0008                  		move.w	8(a0),d2
00008A0E 6100 F6BA                  		bsr.w	MvSonicOnPtfm2
00008A12 6000 0000                  		bra.w	MarkObjGone
00008A16                            ; End of function Obj53_WalkOff
00008A16                            
00008A16                            ; ===========================================================================
00008A16                            
00008A16                            Obj53_Display:				; XREF: Obj53_Index
00008A16 4A28 0038                  		tst.b	$38(a0)		; has time delay reached zero?
00008A1A 6700                       		beq.s	Obj53_TimeZero	; if yes, branch
00008A1C 4A28 003A                  		tst.b	$3A(a0)		; has Sonic touched the	object?
00008A20 6600 0000                  		bne.w	loc_8402	; if yes, branch
00008A24 5328 0038                  		subq.b	#1,$38(a0)	; subtract 1 from time
00008A28 6000 0000                  		bra.w	DisplaySprite
00008A2C                            ; ===========================================================================
00008A2C                            
00008A2C                            loc_8402:
00008A2C 5328 0038                  		subq.b	#1,$38(a0)
00008A30 6100 FFD0                  		bsr.w	Obj53_WalkOff
00008A34 43F8 D000                  		lea	($FFFFD000).w,a1
00008A38 0829 0003 0022             		btst	#3,$22(a1)
00008A3E 6700                       		beq.s	loc_842E
00008A40 4A28 0038                  		tst.b	$38(a0)
00008A44 6600                       		bne.s	locret_843A
00008A46 08A9 0003 0022             		bclr	#3,$22(a1)
00008A4C 08A9 0005 0022             		bclr	#5,$22(a1)
00008A52 137C 0001 001D             		move.b	#1,$1D(a1)
00008A58                            
00008A58                            loc_842E:
00008A58 117C 0000 003A             		move.b	#0,$3A(a0)
00008A5E 117C 0006 0024             		move.b	#6,$24(a0)	; run "Obj53_Display" routine
00008A64                            
00008A64                            locret_843A:
00008A64 4E75                       		rts	
00008A66                            ; ===========================================================================
00008A66                            
00008A66                            Obj53_TimeZero:				; XREF: Obj53_Display
00008A66 6100 0000                  		bsr.w	ObjectFall
00008A6A 6100 0000                  		bsr.w	DisplaySprite
00008A6E 4A28 0001                  		tst.b	1(a0)
00008A72 6A00                       		bpl.s	Obj53_Delete
00008A74 4E75                       		rts	
00008A76                            ; ===========================================================================
00008A76                            
00008A76                            Obj53_Delete:				; XREF: Obj53_Index
00008A76 6100 0000                  		bsr.w	DeleteObject
00008A7A 4E75                       		rts	
00008A7C                            ; ===========================================================================
00008A7C                            
00008A7C                            Obj53_Collapse:				; XREF: Obj53_ChkTouch
00008A7C 117C 0000 003A             		move.b	#0,$3A(a0)
00008A82                            
00008A82                            loc_8458:				; XREF: Obj53_Touch
00008A82 49F9 0000 0000             		lea	(Obj53_Data2).l,a4
00008A88 0828 0000 0028             		btst	#0,$28(a0)
00008A8E 6700                       		beq.s	loc_846C
00008A90 49F9 0000 0000             		lea	(Obj53_Data3).l,a4
00008A96                            
00008A96                            loc_846C:
00008A96 7207                       		moveq	#7,d1
00008A98 5228 001A                  		addq.b	#1,$1A(a0)
00008A9C 6000                       		bra.s	loc_8486
00008A9E                            ; ===========================================================================
00008A9E                            
00008A9E                            Obj1A_Collapse:				; XREF: Obj1A_ChkTouch
00008A9E 117C 0000 003A             		move.b	#0,$3A(a0)
00008AA4                            
00008AA4                            loc_847A:				; XREF: Obj1A_Touch
00008AA4 49F9 0000 0000             		lea	(Obj53_Data1).l,a4
00008AAA 7218                       		moveq	#$18,d1
00008AAC 5428 001A                  		addq.b	#2,$1A(a0)
00008AB0                            
00008AB0                            loc_8486:				; XREF: Obj53_Collapse
00008AB0 7000                       		moveq	#0,d0
00008AB2 1028 001A                  		move.b	$1A(a0),d0
00008AB6 D040                       		add.w	d0,d0
00008AB8 2668 0004                  		movea.l	4(a0),a3
00008ABC D6F3 0000                  		adda.w	(a3,d0.w),a3
00008AC0 524B                       		addq.w	#1,a3
00008AC2 08E8 0005 0001             		bset	#5,1(a0)
00008AC8 1810                       		move.b	0(a0),d4
00008ACA 1A28 0001                  		move.b	1(a0),d5
00008ACE 2248                       		movea.l	a0,a1
00008AD0 6000                       		bra.s	loc_84B2
00008AD2                            ; ===========================================================================
00008AD2                            
00008AD2                            loc_84AA:
00008AD2 6100 0000                  		bsr.w	SingleObjLoad
00008AD6 6600                       		bne.s	loc_84F2
00008AD8 5A4B                       		addq.w	#5,a3
00008ADA                            
00008ADA                            loc_84B2:
00008ADA 137C 0006 0024             		move.b	#6,$24(a1)
00008AE0 1284                       		move.b	d4,0(a1)
00008AE2 234B 0004                  		move.l	a3,4(a1)
00008AE6 1345 0001                  		move.b	d5,1(a1)
00008AEA 3368 0008 0008             		move.w	8(a0),8(a1)
00008AF0 3368 000C 000C             		move.w	$C(a0),$C(a1)
00008AF6 3368 0002 0002             		move.w	2(a0),2(a1)
00008AFC 1368 0018 0018             		move.b	$18(a0),$18(a1)
00008B02 1368 0019 0019             		move.b	$19(a0),$19(a1)
00008B08 135C 0038                  		move.b	(a4)+,$38(a1)
00008B0C B3C8                       		cmpa.l	a0,a1
00008B0E 6400                       		bcc.s	loc_84EE
00008B10 6100 0000                  		bsr.w	DisplaySprite2
00008B14                            
00008B14                            loc_84EE:
00008B14 51C9 FFBC                  		dbf	d1,loc_84AA
00008B18                            
00008B18                            loc_84F2:
00008B18 6100 0000                  		bsr.w	DisplaySprite
00008B1C 303C 00B9                  		move.w	#$B9,d0
00008B20 4EF9 0000 15C0             		jmp	(PlaySound_Special).l ;	play collapsing	sound
00008B26                            ; ===========================================================================
00008B26                            ; ---------------------------------------------------------------------------
00008B26                            ; Disintegration data for collapsing ledges (MZ, SLZ, SBZ)
00008B26                            ; ---------------------------------------------------------------------------
00008B26 1C18 1410 1A16 120E 0A06+  Obj53_Data1:	dc.b $1C, $18, $14, $10, $1A, $16, $12,	$E, $A,	6, $18,	$14, $10, $C, 8, 4
00008B36 1612 0E0A 0602 1410 0C00   		dc.b $16, $12, $E, $A, 6, 2, $14, $10, $C, 0
00008B40 1E16 0E06 1A12 0A02        Obj53_Data2:	dc.b $1E, $16, $E, 6, $1A, $12,	$A, 2
00008B48 161E 1A12 060E 0A02        Obj53_Data3:	dc.b $16, $1E, $1A, $12, 6, $E,	$A, 2
00008B50                            
00008B50                            ; ---------------------------------------------------------------------------
00008B50                            ; Sloped platform subroutine (GHZ collapsing ledges and	MZ platforms)
00008B50                            ; ---------------------------------------------------------------------------
00008B50                            
00008B50                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00008B50                            
00008B50                            
00008B50                            SlopeObject2:				; XREF: Obj1A_WalkOff; et al
00008B50 43F8 D000                  		lea	($FFFFD000).w,a1
00008B54 0829 0003 0022             		btst	#3,$22(a1)
00008B5A 6700                       		beq.s	locret_856E
00008B5C 3029 0008                  		move.w	8(a1),d0
00008B60 9068 0008                  		sub.w	8(a0),d0
00008B64 D041                       		add.w	d1,d0
00008B66 E248                       		lsr.w	#1,d0
00008B68 0828 0000 0001             		btst	#0,1(a0)
00008B6E 6700                       		beq.s	loc_854E
00008B70 4640                       		not.w	d0
00008B72 D041                       		add.w	d1,d0
00008B74                            
00008B74                            loc_854E:
00008B74 7200                       		moveq	#0,d1
00008B76 1232 0000                  		move.b	(a2,d0.w),d1
00008B7A 3028 000C                  		move.w	$C(a0),d0
00008B7E 9041                       		sub.w	d1,d0
00008B80 7200                       		moveq	#0,d1
00008B82 1229 0016                  		move.b	$16(a1),d1
00008B86 9041                       		sub.w	d1,d0
00008B88 3340 000C                  		move.w	d0,$C(a1)
00008B8C 9468 0008                  		sub.w	8(a0),d2
00008B90 9569 0008                  		sub.w	d2,8(a1)
00008B94                            
00008B94                            locret_856E:
00008B94 4E75                       		rts	
00008B96                            ; End of function SlopeObject2
00008B96                            
00008B96                            ; ===========================================================================
00008B96                            ; ---------------------------------------------------------------------------
00008B96                            ; Collision data for GHZ collapsing ledge
00008B96                            ; ---------------------------------------------------------------------------
00008B96                            Obj1A_SlopeData:
00008B96                            		incbin	misc\ghzledge.bin
00008BC6                            		even
00008BC6                            
00008BC6                            ; ---------------------------------------------------------------------------
00008BC6                            ; Sprite mappings - GHZ	collapsing ledge
00008BC6                            ; ---------------------------------------------------------------------------
00008BC6                            Map_obj1A:
00008BC6                            	include "_maps\obj1A.asm"
00008BC6                            ; ---------------------------------------------------------------------------
00008BC6                            ; Sprite mappings - GHZ	collapsing ledge
00008BC6                            ; ---------------------------------------------------------------------------
00008BC6 0000 0000                  		dc.w byte_85A8-Map_obj1A, byte_85F9-Map_obj1A
00008BCA 0000 0000                  		dc.w byte_864A-Map_obj1A, byte_86C8-Map_obj1A
00008BCE 10                         byte_85A8:	dc.b $10
00008BCF C80E 0057 10               		dc.b $C8, $E, 0, $57, $10 ; ledge facing left
00008BD4 D00D 0063 F0               		dc.b $D0, $D, 0, $63, $F0
00008BD9 E00D 006B 10               		dc.b $E0, $D, 0, $6B, $10
00008BDE E00D 0073 F0               		dc.b $E0, $D, 0, $73, $F0
00008BE3 D806 007B E0               		dc.b $D8, 6, 0,	$7B, $E0
00008BE8 D806 0081 D0               		dc.b $D8, 6, 0,	$81, $D0
00008BED F00D 0087 10               		dc.b $F0, $D, 0, $87, $10
00008BF2 F00D 008F F0               		dc.b $F0, $D, 0, $8F, $F0
00008BF7 F005 0097 E0               		dc.b $F0, 5, 0,	$97, $E0
00008BFC F005 009B D0               		dc.b $F0, 5, 0,	$9B, $D0
00008C01 000D 009F 10               		dc.b 0,	$D, 0, $9F, $10
00008C06 0005 00A7 00               		dc.b 0,	5, 0, $A7, 0
00008C0B 000D 00AB E0               		dc.b 0,	$D, 0, $AB, $E0
00008C10 0005 00B3 D0               		dc.b 0,	5, 0, $B3, $D0
00008C15 100D 00AB 10               		dc.b $10, $D, 0, $AB, $10
00008C1A 1005 00B7 00               		dc.b $10, 5, 0,	$B7, 0
00008C1F 10                         byte_85F9:	dc.b $10
00008C20 C80E 0057 10               		dc.b $C8, $E, 0, $57, $10 ; ledge facing right
00008C25 D00D 0063 F0               		dc.b $D0, $D, 0, $63, $F0
00008C2A E00D 006B 10               		dc.b $E0, $D, 0, $6B, $10
00008C2F E00D 0073 F0               		dc.b $E0, $D, 0, $73, $F0
00008C34 D806 007B E0               		dc.b $D8, 6, 0,	$7B, $E0
00008C39 D806 00BB D0               		dc.b $D8, 6, 0,	$BB, $D0
00008C3E F00D 0087 10               		dc.b $F0, $D, 0, $87, $10
00008C43 F00D 008F F0               		dc.b $F0, $D, 0, $8F, $F0
00008C48 F005 0097 E0               		dc.b $F0, 5, 0,	$97, $E0
00008C4D F005 00C1 D0               		dc.b $F0, 5, 0,	$C1, $D0
00008C52 000D 009F 10               		dc.b 0,	$D, 0, $9F, $10
00008C57 0005 00A7 00               		dc.b 0,	5, 0, $A7, 0
00008C5C 000D 00AB E0               		dc.b 0,	$D, 0, $AB, $E0
00008C61 0005 00B7 D0               		dc.b 0,	5, 0, $B7, $D0
00008C66 100D 00AB 10               		dc.b $10, $D, 0, $AB, $10
00008C6B 1005 00B7 00               		dc.b $10, 5, 0,	$B7, 0
00008C70 19                         byte_864A:	dc.b $19
00008C71 C806 005D 20               		dc.b $C8, 6, 0,	$5D, $20 ; ledge facing	left in	pieces
00008C76 C806 0057 10               		dc.b $C8, 6, 0,	$57, $10
00008C7B D005 0067 00               		dc.b $D0, 5, 0,	$67, 0
00008C80 D005 0063 F0               		dc.b $D0, 5, 0,	$63, $F0
00008C85 E005 006F 20               		dc.b $E0, 5, 0,	$6F, $20
00008C8A E005 006B 10               		dc.b $E0, 5, 0,	$6B, $10
00008C8F E005 0077 00               		dc.b $E0, 5, 0,	$77, 0
00008C94 E005 0073 F0               		dc.b $E0, 5, 0,	$73, $F0
00008C99 D806 007B E0               		dc.b $D8, 6, 0,	$7B, $E0
00008C9E D806 0081 D0               		dc.b $D8, 6, 0,	$81, $D0
00008CA3 F005 008B 20               		dc.b $F0, 5, 0,	$8B, $20
00008CA8 F005 0087 10               		dc.b $F0, 5, 0,	$87, $10
00008CAD F005 0093 00               		dc.b $F0, 5, 0,	$93, 0
00008CB2 F005 008F F0               		dc.b $F0, 5, 0,	$8F, $F0
00008CB7 F005 0097 E0               		dc.b $F0, 5, 0,	$97, $E0
00008CBC F005 009B D0               		dc.b $F0, 5, 0,	$9B, $D0
00008CC1 0005 008B 20               		dc.b 0,	5, 0, $8B, $20
00008CC6 0005 008B 10               		dc.b 0,	5, 0, $8B, $10
00008CCB 0005 00A7 00               		dc.b 0,	5, 0, $A7, 0
00008CD0 0005 00AB F0               		dc.b 0,	5, 0, $AB, $F0
00008CD5 0005 00AB E0               		dc.b 0,	5, 0, $AB, $E0
00008CDA 0005 00B3 D0               		dc.b 0,	5, 0, $B3, $D0
00008CDF 1005 00AB 20               		dc.b $10, 5, 0,	$AB, $20
00008CE4 1005 00AB 10               		dc.b $10, 5, 0,	$AB, $10
00008CE9 1005 00B7 00               		dc.b $10, 5, 0,	$B7, 0
00008CEE 19                         byte_86C8:	dc.b $19
00008CEF C806 005D 20               		dc.b $C8, 6, 0,	$5D, $20 ; ledge facing	right in pieces
00008CF4 C806 0057 10               		dc.b $C8, 6, 0,	$57, $10
00008CF9 D005 0067 00               		dc.b $D0, 5, 0,	$67, 0
00008CFE D005 0063 F0               		dc.b $D0, 5, 0,	$63, $F0
00008D03 E005 006F 20               		dc.b $E0, 5, 0,	$6F, $20
00008D08 E005 006B 10               		dc.b $E0, 5, 0,	$6B, $10
00008D0D E005 0077 00               		dc.b $E0, 5, 0,	$77, 0
00008D12 E005 0073 F0               		dc.b $E0, 5, 0,	$73, $F0
00008D17 D806 007B E0               		dc.b $D8, 6, 0,	$7B, $E0
00008D1C D806 00BB D0               		dc.b $D8, 6, 0,	$BB, $D0
00008D21 F005 008B 20               		dc.b $F0, 5, 0,	$8B, $20
00008D26 F005 0087 10               		dc.b $F0, 5, 0,	$87, $10
00008D2B F005 0093 00               		dc.b $F0, 5, 0,	$93, 0
00008D30 F005 008F F0               		dc.b $F0, 5, 0,	$8F, $F0
00008D35 F005 0097 E0               		dc.b $F0, 5, 0,	$97, $E0
00008D3A F005 00C1 D0               		dc.b $F0, 5, 0,	$C1, $D0
00008D3F 0005 008B 20               		dc.b 0,	5, 0, $8B, $20
00008D44 0005 008B 10               		dc.b 0,	5, 0, $8B, $10
00008D49 0005 00A7 00               		dc.b 0,	5, 0, $A7, 0
00008D4E 0005 00AB F0               		dc.b 0,	5, 0, $AB, $F0
00008D53 0005 00AB E0               		dc.b 0,	5, 0, $AB, $E0
00008D58 0005 00B7 D0               		dc.b 0,	5, 0, $B7, $D0
00008D5D 1005 00AB 20               		dc.b $10, 5, 0,	$AB, $20
00008D62 1005 00AB 10               		dc.b $10, 5, 0,	$AB, $10
00008D67 1005 00B7 00               		dc.b $10, 5, 0,	$B7, 0
00008D6C                            		even
00008D6C                            		even
00008D6C                            
00008D6C                            ; ---------------------------------------------------------------------------
00008D6C                            ; Sprite mappings - collapsing floors (MZ, SLZ,	SBZ)
00008D6C                            ; ---------------------------------------------------------------------------
00008D6C                            Map_obj53:
00008D6C                            	include "_maps\obj53.asm"
00008D6C                            ; ---------------------------------------------------------------------------
00008D6C                            ; Sprite mappings - collapsing floors (MZ, SLZ,	SBZ)
00008D6C                            ; ---------------------------------------------------------------------------
00008D6C 0000 0000                  		dc.w byte_874E-Map_obj53, byte_8763-Map_obj53
00008D70 0000 0000                  		dc.w byte_878C-Map_obj53, byte_87A1-Map_obj53
00008D74 04                         byte_874E:	dc.b 4
00008D75 F80D 0000 E0               		dc.b $F8, $D, 0, 0, $E0	; MZ and SBZ blocks
00008D7A 080D 0000 E0               		dc.b 8,	$D, 0, 0, $E0
00008D7F F80D 0000 00               		dc.b $F8, $D, 0, 0, 0
00008D84 080D 0000 00               		dc.b 8,	$D, 0, 0, 0
00008D89 08                         byte_8763:	dc.b 8
00008D8A F805 0000 E0               		dc.b $F8, 5, 0,	0, $E0
00008D8F F805 0000 F0               		dc.b $F8, 5, 0,	0, $F0
00008D94 F805 0000 00               		dc.b $F8, 5, 0,	0, 0
00008D99 F805 0000 10               		dc.b $F8, 5, 0,	0, $10
00008D9E 0805 0000 E0               		dc.b 8,	5, 0, 0, $E0
00008DA3 0805 0000 F0               		dc.b 8,	5, 0, 0, $F0
00008DA8 0805 0000 00               		dc.b 8,	5, 0, 0, 0
00008DAD 0805 0000 10               		dc.b 8,	5, 0, 0, $10
00008DB2 04                         byte_878C:	dc.b 4
00008DB3 F80D 0000 E0               		dc.b $F8, $D, 0, 0, $E0	; SLZ blocks
00008DB8 080D 0008 E0               		dc.b 8,	$D, 0, 8, $E0
00008DBD F80D 0000 00               		dc.b $F8, $D, 0, 0, 0
00008DC2 080D 0008 00               		dc.b 8,	$D, 0, 8, 0
00008DC7 08                         byte_87A1:	dc.b 8
00008DC8 F805 0000 E0               		dc.b $F8, 5, 0,	0, $E0
00008DCD F805 0004 F0               		dc.b $F8, 5, 0,	4, $F0
00008DD2 F805 0000 00               		dc.b $F8, 5, 0,	0, 0
00008DD7 F805 0004 10               		dc.b $F8, 5, 0,	4, $10
00008DDC 0805 0008 E0               		dc.b 8,	5, 0, 8, $E0
00008DE1 0805 000C F0               		dc.b 8,	5, 0, $C, $F0
00008DE6 0805 0008 00               		dc.b 8,	5, 0, 8, 0
00008DEB 0805 000C 10               		dc.b 8,	5, 0, $C, $10
00008DF0                            		even
00008DF0                            		even
00008DF0                            
00008DF0                            ; ===========================================================================
00008DF0                            ; ---------------------------------------------------------------------------
00008DF0                            ; Object 1C - scenery (GHZ bridge stump, SLZ lava thrower)
00008DF0                            ; ---------------------------------------------------------------------------
00008DF0                            
00008DF0                            Obj1C:					; XREF: Obj_Index
00008DF0 7000                       		moveq	#0,d0
00008DF2 1028 0024                  		move.b	$24(a0),d0
00008DF6 323B 0000                  		move.w	Obj1C_Index(pc,d0.w),d1
00008DFA 4EFB 1000                  		jmp	Obj1C_Index(pc,d1.w)
00008DFE                            ; ===========================================================================
00008DFE 0000                       Obj1C_Index:	dc.w Obj1C_Main-Obj1C_Index
00008E00 0000                       		dc.w Obj1C_ChkDel-Obj1C_Index
00008E02                            ; ===========================================================================
00008E02                            
00008E02                            Obj1C_Main:				; XREF: Obj1C_Index
00008E02 5428 0024                  		addq.b	#2,$24(a0)
00008E06 7000                       		moveq	#0,d0
00008E08 1028 0028                  		move.b	$28(a0),d0	; copy object type to d0
00008E0C C0FC 000A                  		mulu.w	#$A,d0		; multiply by $A
00008E10 43FB 0000                  		lea	Obj1C_Var(pc,d0.w),a1
00008E14 2159 0004                  		move.l	(a1)+,4(a0)
00008E18 3159 0002                  		move.w	(a1)+,2(a0)
00008E1C 0028 0004 0001             		ori.b	#4,1(a0)
00008E22 1159 001A                  		move.b	(a1)+,$1A(a0)
00008E26 1159 0019                  		move.b	(a1)+,$19(a0)
00008E2A 1159 0018                  		move.b	(a1)+,$18(a0)
00008E2E 1159 0020                  		move.b	(a1)+,$20(a0)
00008E32                            
00008E32                            Obj1C_ChkDel:				; XREF: Obj1C_Index
00008E32 3028 0008                  		move.w	8(a0),d0
00008E36 0240 FF80                  		andi.w	#$FF80,d0
00008E3A 3238 F700                  		move.w	($FFFFF700).w,d1
00008E3E 0441 0080                  		subi.w	#$80,d1
00008E42 0241 FF80                  		andi.w	#$FF80,d1
00008E46 9041                       		sub.w	d1,d0
00008E48 0C40 0280                  		cmpi.w	#$280,d0
00008E4C 6200 0000                  		bhi.w	DeleteObject
00008E50 6000 0000                  		bra.w	DisplaySprite
00008E54                            ; ===========================================================================
00008E54                            ; ---------------------------------------------------------------------------
00008E54                            ; Variables for	object $1C are stored in an array
00008E54                            ; ---------------------------------------------------------------------------
00008E54 0000 0000                  Obj1C_Var:	dc.l Map_obj1C		; mappings address
00008E58 44D8                       		dc.w $44D8		; VRAM setting
00008E5A 0008 0200                  		dc.b 0,	8, 2, 0		; frame, width,	priority, collision response
00008E5E 0000 0000                  		dc.l Map_obj1C
00008E62 44D8                       		dc.w $44D8
00008E64 0008 0200                  		dc.b 0,	8, 2, 0
00008E68 0000 0000                  		dc.l Map_obj1C
00008E6C 44D8                       		dc.w $44D8
00008E6E 0008 0200                  		dc.b 0,	8, 2, 0
00008E72 0000 7ED4                  		dc.l Map_obj11
00008E76 438E                       		dc.w $438E
00008E78 0110 0100                  		dc.b 1,	$10, 1,	0
00008E7C                            ; ---------------------------------------------------------------------------
00008E7C                            ; Sprite mappings - SLZ	lava thrower
00008E7C                            ; ---------------------------------------------------------------------------
00008E7C                            Map_obj1C:
00008E7C                            	include "_maps\obj1C.asm"
00008E7C                            ; ---------------------------------------------------------------------------
00008E7C                            ; Sprite mappings - SLZ	lava thrower
00008E7C                            ; ---------------------------------------------------------------------------
00008E7C 0000                       		dc.w byte_8858-Map_obj1C
00008E7E 01                         byte_8858:	dc.b 1
00008E7F F007 0000 F8               		dc.b $F0, 7, 0,	0, $F8
00008E84                            		even
00008E84                            		even
00008E84                            
00008E84                            ; ===========================================================================
00008E84                            ; ---------------------------------------------------------------------------
00008E84                            ; Object 1D - switch that activates when Sonic touches it
00008E84                            ; (this	is not used anywhere in	the game)
00008E84                            ; ---------------------------------------------------------------------------
00008E84                            
00008E84                            Obj1D:					; XREF: Obj_Index
00008E84 7000                       		moveq	#0,d0
00008E86 1028 0024                  		move.b	$24(a0),d0
00008E8A 323B 0000                  		move.w	Obj1D_Index(pc,d0.w),d1
00008E8E 4EFB 1000                  		jmp	Obj1D_Index(pc,d1.w)
00008E92                            ; ===========================================================================
00008E92 0000                       Obj1D_Index:	dc.w Obj1D_Main-Obj1D_Index
00008E94 0000                       		dc.w Obj1D_Action-Obj1D_Index
00008E96 0000                       		dc.w Obj1D_Delete-Obj1D_Index
00008E98                            ; ===========================================================================
00008E98                            
00008E98                            Obj1D_Main:				; XREF: Obj1D_Index
00008E98 5428 0024                  		addq.b	#2,$24(a0)
00008E9C 217C 0000 0000 0004        		move.l	#Map_obj1D,4(a0)
00008EA4 317C 4000 0002             		move.w	#$4000,2(a0)
00008EAA 117C 0004 0001             		move.b	#4,1(a0)
00008EB0 3168 000C 0030             		move.w	$C(a0),$30(a0)	; save position	on y-axis
00008EB6 117C 0010 0019             		move.b	#$10,$19(a0)
00008EBC 117C 0005 0018             		move.b	#5,$18(a0)
00008EC2                            
00008EC2                            Obj1D_Action:				; XREF: Obj1D_Index
00008EC2 3168 0030 000C             		move.w	$30(a0),$C(a0)	; restore position on y-axis
00008EC8 323C 0010                  		move.w	#$10,d1
00008ECC 6100 0000                  		bsr.w	Obj1D_ChkTouch
00008ED0 6700                       		beq.s	Obj1D_ChkDel
00008ED2 5468 000C                  		addq.w	#2,$C(a0)	; move object 2	pixels
00008ED6 7001                       		moveq	#1,d0
00008ED8 31C0 F7E0                  		move.w	d0,($FFFFF7E0).w ; set switch 0	as "pressed"
00008EDC                            
00008EDC                            Obj1D_ChkDel:
00008EDC 6100 0000                  		bsr.w	DisplaySprite
00008EE0 3028 0008                  		move.w	8(a0),d0
00008EE4 0240 FF80                  		andi.w	#$FF80,d0
00008EE8 3238 F700                  		move.w	($FFFFF700).w,d1
00008EEC 0441 0080                  		subi.w	#$80,d1
00008EF0 0241 FF80                  		andi.w	#$FF80,d1
00008EF4 9041                       		sub.w	d1,d0
00008EF6 0C40 0280                  		cmpi.w	#$280,d0
00008EFA 6200 0000                  		bhi.w	Obj1D_Delete
00008EFE 4E75                       		rts	
00008F00                            ; ===========================================================================
00008F00                            
00008F00                            Obj1D_Delete:				; XREF: Obj1D_Index
00008F00 6100 0000                  		bsr.w	DeleteObject
00008F04 4E75                       		rts	
00008F06                            ; ---------------------------------------------------------------------------
00008F06                            ; Subroutine to	check if Sonic touches the object
00008F06                            ; ---------------------------------------------------------------------------
00008F06                            
00008F06                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00008F06                            
00008F06                            
00008F06                            Obj1D_ChkTouch:				; XREF: Obj1D_Action
00008F06 43F8 D000                  		lea	($FFFFD000).w,a1
00008F0A 3029 0008                  		move.w	8(a1),d0
00008F0E 9068 0008                  		sub.w	8(a0),d0
00008F12 D041                       		add.w	d1,d0
00008F14 6B00                       		bmi.s	loc_8918
00008F16 D241                       		add.w	d1,d1
00008F18 B041                       		cmp.w	d1,d0
00008F1A 6400                       		bcc.s	loc_8918
00008F1C 3429 000C                  		move.w	$C(a1),d2
00008F20 1229 0016                  		move.b	$16(a1),d1
00008F24 4881                       		ext.w	d1
00008F26 D242                       		add.w	d2,d1
00008F28 3028 000C                  		move.w	$C(a0),d0
00008F2C 0440 0010                  		subi.w	#$10,d0
00008F30 9041                       		sub.w	d1,d0
00008F32 6200                       		bhi.s	loc_8918
00008F34 0C40 FFF0                  		cmpi.w	#-$10,d0
00008F38 6500                       		bcs.s	loc_8918
00008F3A 70FF                       		moveq	#-1,d0
00008F3C 4E75                       		rts	
00008F3E                            ; ===========================================================================
00008F3E                            
00008F3E                            loc_8918:
00008F3E 7000                       		moveq	#0,d0
00008F40 4E75                       		rts	
00008F42                            ; End of function Obj1D_ChkTouch
00008F42                            
00008F42                            ; ===========================================================================
00008F42                            ; ---------------------------------------------------------------------------
00008F42                            ; Sprite mappings - object 1D
00008F42                            ; ---------------------------------------------------------------------------
00008F42                            Map_obj1D:
00008F42                            	include "_maps\obj1D.asm"
00008F42                            ; ---------------------------------------------------------------------------
00008F42                            ; Sprite mappings - object 1D
00008F42                            ; ---------------------------------------------------------------------------
00008F42 0000                       		dc.w byte_891E-Map_obj1D
00008F44 04                         byte_891E:	dc.b 4
00008F45 E807 0054 F0               		dc.b $E8, 7, 0,	$54, $F0
00008F4A 0805 005C F0               		dc.b 8,	5, 0, $5C, $F0
00008F4F E807 0054 00               		dc.b $E8, 7, 0,	$54, 0
00008F54 0805 005C 00               		dc.b 8,	5, 0, $5C, 0
00008F5A 00                         		even
00008F5A 00                         		even
00008F5A                            
00008F5A                            ; ===========================================================================
00008F5A                            ; ---------------------------------------------------------------------------
00008F5A                            ; Object 2A - doors (SBZ)
00008F5A                            ; ---------------------------------------------------------------------------
00008F5A                            
00008F5A                            Obj2A:					; XREF: Obj_Index
00008F5A 7000                       		moveq	#0,d0
00008F5C 1028 0024                  		move.b	$24(a0),d0
00008F60 323B 0000                  		move.w	Obj2A_Index(pc,d0.w),d1
00008F64 4EFB 1000                  		jmp	Obj2A_Index(pc,d1.w)
00008F68                            ; ===========================================================================
00008F68 0000                       Obj2A_Index:	dc.w Obj2A_Main-Obj2A_Index
00008F6A 0000                       		dc.w Obj2A_OpenShut-Obj2A_Index
00008F6C                            ; ===========================================================================
00008F6C                            
00008F6C                            Obj2A_Main:				; XREF: Obj2A_Index
00008F6C 5428 0024                  		addq.b	#2,$24(a0)
00008F70 217C 0000 0000 0004        		move.l	#Map_obj2A,4(a0)
00008F78 317C 42E8 0002             		move.w	#$42E8,2(a0)
00008F7E 0028 0004 0001             		ori.b	#4,1(a0)
00008F84 117C 0008 0019             		move.b	#8,$19(a0)
00008F8A 117C 0004 0018             		move.b	#4,$18(a0)
00008F90                            
00008F90                            Obj2A_OpenShut:				; XREF: Obj2A_Index
00008F90 323C 0040                  		move.w	#$40,d1
00008F94 4228 001C                  		clr.b	$1C(a0)		; use "closing"	animation
00008F98 3038 D008                  		move.w	($FFFFD008).w,d0
00008F9C D041                       		add.w	d1,d0
00008F9E B068 0008                  		cmp.w	8(a0),d0
00008FA2 6500                       		bcs.s	Obj2A_Animate
00008FA4 9041                       		sub.w	d1,d0
00008FA6 9041                       		sub.w	d1,d0
00008FA8 B068 0008                  		cmp.w	8(a0),d0
00008FAC 6400                       		bcc.s	Obj2A_Animate
00008FAE D041                       		add.w	d1,d0
00008FB0 B068 0008                  		cmp.w	8(a0),d0
00008FB4 6400                       		bcc.s	loc_899A
00008FB6 0828 0000 0022             		btst	#0,$22(a0)
00008FBC 6600                       		bne.s	Obj2A_Animate
00008FBE 6000                       		bra.s	Obj2A_Open
00008FC0                            ; ===========================================================================
00008FC0                            
00008FC0                            loc_899A:				; XREF: Obj2A_OpenShut
00008FC0 0828 0000 0022             		btst	#0,$22(a0)
00008FC6 6700                       		beq.s	Obj2A_Animate
00008FC8                            
00008FC8                            Obj2A_Open:				; XREF: Obj2A_OpenShut
00008FC8 117C 0001 001C             		move.b	#1,$1C(a0)	; use "opening"	animation
00008FCE                            
00008FCE                            Obj2A_Animate:				; XREF: Obj2A_OpenShut; loc_899A
00008FCE 43F9 0000 0000             		lea	(Ani_obj2A).l,a1
00008FD4 6100 0000                  		bsr.w	AnimateSprite
00008FD8 4A28 001A                  		tst.b	$1A(a0)		; is the door open?
00008FDC 6600                       		bne.s	Obj2A_MarkAsUsed ; if yes, branch
00008FDE 323C 0011                  		move.w	#$11,d1
00008FE2 343C 0020                  		move.w	#$20,d2
00008FE6 3602                       		move.w	d2,d3
00008FE8 5243                       		addq.w	#1,d3
00008FEA 3828 0008                  		move.w	8(a0),d4
00008FEE 6100 0000                  		bsr.w	SolidObject
00008FF2                            
00008FF2                            Obj2A_MarkAsUsed:
00008FF2 6000 0000                  		bra.w	MarkObjGone
00008FF6                            ; ===========================================================================
00008FF6                            Ani_obj2A:
00008FF6                            	include "_anim\obj2A.asm"
00008FF6                            ; ---------------------------------------------------------------------------
00008FF6                            ; Animation script - doors (SBZ)
00008FF6                            ; ---------------------------------------------------------------------------
00008FF6 0000                       		dc.w Ani_obj2A_Shut-Ani_obj2A
00008FF8 0000                       		dc.w Ani_obj2A_Open-Ani_obj2A
00008FFA 0008 0706 0504 0302 0100+  Ani_obj2A_Shut:	dc.b 0,	8, 7, 6, 5, 4, 3, 2, 1,	0, $FE,	1
00009006 0000 0102 0304 0506 0708+  Ani_obj2A_Open:	dc.b 0,	0, 1, 2, 3, 4, 5, 6, 7,	8, $FE,	1
00009012                            		even
00009012                            		even
00009012                            
00009012                            ; ---------------------------------------------------------------------------
00009012                            ; Sprite mappings - doors (SBZ)
00009012                            ; ---------------------------------------------------------------------------
00009012                            Map_obj2A:
00009012                            	include "_maps\obj2A.asm"
00009012                            ; ---------------------------------------------------------------------------
00009012                            ; Sprite mappings - doors (SBZ)
00009012                            ; ---------------------------------------------------------------------------
00009012 0000 0000                  		dc.w byte_89FE-Map_obj2A, byte_8A09-Map_obj2A
00009016 0000 0000                  		dc.w byte_8A14-Map_obj2A, byte_8A1F-Map_obj2A
0000901A 0000 0000                  		dc.w byte_8A2A-Map_obj2A, byte_8A35-Map_obj2A
0000901E 0000 0000                  		dc.w byte_8A40-Map_obj2A, byte_8A4B-Map_obj2A
00009022 0000                       		dc.w byte_8A56-Map_obj2A
00009024 02                         byte_89FE:	dc.b 2
00009025 E007 0800 F8               		dc.b $E0, 7, 8,	0, $F8	; door closed
0000902A 0007 0800 F8               		dc.b 0,	7, 8, 0, $F8
0000902F 02                         byte_8A09:	dc.b 2
00009030 DC07 0800 F8               		dc.b $DC, 7, 8,	0, $F8
00009035 0407 0800 F8               		dc.b 4,	7, 8, 0, $F8
0000903A 02                         byte_8A14:	dc.b 2
0000903B D807 0800 F8               		dc.b $D8, 7, 8,	0, $F8
00009040 0807 0800 F8               		dc.b 8,	7, 8, 0, $F8
00009045 02                         byte_8A1F:	dc.b 2
00009046 D407 0800 F8               		dc.b $D4, 7, 8,	0, $F8
0000904B 0C07 0800 F8               		dc.b $C, 7, 8, 0, $F8
00009050 02                         byte_8A2A:	dc.b 2
00009051 D007 0800 F8               		dc.b $D0, 7, 8,	0, $F8
00009056 1007 0800 F8               		dc.b $10, 7, 8,	0, $F8
0000905B 02                         byte_8A35:	dc.b 2
0000905C CC07 0800 F8               		dc.b $CC, 7, 8,	0, $F8
00009061 1407 0800 F8               		dc.b $14, 7, 8,	0, $F8
00009066 02                         byte_8A40:	dc.b 2
00009067 C807 0800 F8               		dc.b $C8, 7, 8,	0, $F8
0000906C 1807 0800 F8               		dc.b $18, 7, 8,	0, $F8
00009071 02                         byte_8A4B:	dc.b 2
00009072 C407 0800 F8               		dc.b $C4, 7, 8,	0, $F8
00009077 1C07 0800 F8               		dc.b $1C, 7, 8,	0, $F8
0000907C 02                         byte_8A56:	dc.b 2
0000907D C007 0800 F8               		dc.b $C0, 7, 8,	0, $F8	; door fully open
00009082 2007 0800 F8               		dc.b $20, 7, 8,	0, $F8
00009088 00                         		even
00009088 00                         		even
00009088                            
00009088                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00009088                            
00009088                            
00009088                            Obj44_SolidWall:			; XREF: Obj44_Solid
00009088 6100 0000                  		bsr.w	Obj44_SolidWall2
0000908C 6700                       		beq.s	loc_8AA8
0000908E 6B00 0000                  		bmi.w	loc_8AC4
00009092 4A40                       		tst.w	d0
00009094 6700 0000                  		beq.w	loc_8A92
00009098 6B00                       		bmi.s	loc_8A7C
0000909A 4A69 0010                  		tst.w	$10(a1)
0000909E 6B00                       		bmi.s	loc_8A92
000090A0 6000                       		bra.s	loc_8A82
000090A2                            ; ===========================================================================
000090A2                            
000090A2                            loc_8A7C:
000090A2 4A69 0010                  		tst.w	$10(a1)
000090A6 6A00                       		bpl.s	loc_8A92
000090A8                            
000090A8                            loc_8A82:
000090A8 9169 0008                  		sub.w	d0,8(a1)
000090AC 337C 0000 0014             		move.w	#0,$14(a1)
000090B2 337C 0000 0010             		move.w	#0,$10(a1)
000090B8                            
000090B8                            loc_8A92:
000090B8 0829 0001 0022             		btst	#1,$22(a1)
000090BE 6600                       		bne.s	loc_8AB6
000090C0 08E9 0005 0022             		bset	#5,$22(a1)
000090C6 08E8 0005 0022             		bset	#5,$22(a0)
000090CC 4E75                       		rts	
000090CE                            ; ===========================================================================
000090CE                            
000090CE                            loc_8AA8:
000090CE 0828 0005 0022             		btst	#5,$22(a0)
000090D4 6700                       		beq.s	locret_8AC2
000090D6 337C 0001 001C             		move.w	#1,$1C(a1)
000090DC                            
000090DC                            loc_8AB6:
000090DC 08A8 0005 0022             		bclr	#5,$22(a0)
000090E2 08A9 0005 0022             		bclr	#5,$22(a1)
000090E8                            
000090E8                            locret_8AC2:
000090E8 4E75                       		rts	
000090EA                            ; ===========================================================================
000090EA                            
000090EA                            loc_8AC4:
000090EA 4A69 0012                  		tst.w	$12(a1)
000090EE 6A00                       		bpl.s	locret_8AD8
000090F0 4A43                       		tst.w	d3
000090F2 6A00                       		bpl.s	locret_8AD8
000090F4 9769 000C                  		sub.w	d3,$C(a1)
000090F8 337C 0000 0012             		move.w	#0,$12(a1)
000090FE                            
000090FE                            locret_8AD8:
000090FE 4E75                       		rts	
00009100                            ; End of function Obj44_SolidWall
00009100                            
00009100                            
00009100                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00009100                            
00009100                            
00009100                            Obj44_SolidWall2:			; XREF: Obj44_SolidWall
00009100 43F8 D000                  		lea	($FFFFD000).w,a1
00009104 3029 0008                  		move.w	8(a1),d0
00009108 9068 0008                  		sub.w	8(a0),d0
0000910C D041                       		add.w	d1,d0
0000910E 6B00                       		bmi.s	loc_8B48
00009110 3601                       		move.w	d1,d3
00009112 D643                       		add.w	d3,d3
00009114 B043                       		cmp.w	d3,d0
00009116 6200                       		bhi.s	loc_8B48
00009118 1629 0016                  		move.b	$16(a1),d3
0000911C 4883                       		ext.w	d3
0000911E D443                       		add.w	d3,d2
00009120 3629 000C                  		move.w	$C(a1),d3
00009124 9668 000C                  		sub.w	$C(a0),d3
00009128 D642                       		add.w	d2,d3
0000912A 6B00                       		bmi.s	loc_8B48
0000912C 3802                       		move.w	d2,d4
0000912E D844                       		add.w	d4,d4
00009130 B644                       		cmp.w	d4,d3
00009132 6400                       		bcc.s	loc_8B48
00009134 4A38 F7C8                  		tst.b	($FFFFF7C8).w
00009138 6B00                       		bmi.s	loc_8B48
0000913A 0C38 0006 D024             		cmpi.b	#6,($FFFFD024).w
00009140 6400                       		bcc.s	loc_8B48
00009142 4A78 FE08                  		tst.w	($FFFFFE08).w
00009146 6600                       		bne.s	loc_8B48
00009148 3A00                       		move.w	d0,d5
0000914A B240                       		cmp.w	d0,d1
0000914C 6400                       		bcc.s	loc_8B30
0000914E D241                       		add.w	d1,d1
00009150 9041                       		sub.w	d1,d0
00009152 3A00                       		move.w	d0,d5
00009154 4445                       		neg.w	d5
00009156                            
00009156                            loc_8B30:
00009156 3203                       		move.w	d3,d1
00009158 B443                       		cmp.w	d3,d2
0000915A 6400                       		bcc.s	loc_8B3C
0000915C 9644                       		sub.w	d4,d3
0000915E 3203                       		move.w	d3,d1
00009160 4441                       		neg.w	d1
00009162                            
00009162                            loc_8B3C:
00009162 BA41                       		cmp.w	d1,d5
00009164 6200                       		bhi.s	loc_8B44
00009166 7801                       		moveq	#1,d4
00009168 4E75                       		rts	
0000916A                            ; ===========================================================================
0000916A                            
0000916A                            loc_8B44:
0000916A 78FF                       		moveq	#-1,d4
0000916C 4E75                       		rts	
0000916E                            ; ===========================================================================
0000916E                            
0000916E                            loc_8B48:
0000916E 7800                       		moveq	#0,d4
00009170 4E75                       		rts	
00009172                            ; End of function Obj44_SolidWall2
00009172                            
00009172                            ; ===========================================================================
00009172                            ; ---------------------------------------------------------------------------
00009172                            ; Object 1E - Ball Hog enemy (SBZ)
00009172                            ; ---------------------------------------------------------------------------
00009172                            
00009172                            Obj1E:					; XREF: Obj_Index
00009172 7000                       		moveq	#0,d0
00009174 1028 0024                  		move.b	$24(a0),d0
00009178 323B 0000                  		move.w	Obj1E_Index(pc,d0.w),d1
0000917C 4EFB 1000                  		jmp	Obj1E_Index(pc,d1.w)
00009180                            ; ===========================================================================
00009180 0000                       Obj1E_Index:	dc.w Obj1E_Main-Obj1E_Index
00009182 0000                       		dc.w Obj1E_Action-Obj1E_Index
00009184                            ; ===========================================================================
00009184                            
00009184                            Obj1E_Main:				; XREF: Obj1E_Index
00009184 117C 0013 0016             		move.b	#$13,$16(a0)
0000918A 117C 0008 0017             		move.b	#8,$17(a0)
00009190 217C 0000 0000 0004        		move.l	#Map_obj1E,4(a0)
00009198 317C 2302 0002             		move.w	#$2302,2(a0)
0000919E 117C 0004 0001             		move.b	#4,1(a0)
000091A4 117C 0004 0018             		move.b	#4,$18(a0)
000091AA 117C 0005 0020             		move.b	#5,$20(a0)
000091B0 117C 000C 0019             		move.b	#$C,$19(a0)
000091B6 6100 0000                  		bsr.w	ObjectFall
000091BA 4EB9 0000 0000             		jsr	ObjHitFloor
000091C0 4A41                       		tst.w	d1
000091C2 6A00                       		bpl.s	locret_8BAC
000091C4 D368 000C                  		add.w	d1,$C(a0)
000091C8 317C 0000 0012             		move.w	#0,$12(a0)
000091CE 5428 0024                  		addq.b	#2,$24(a0)
000091D2                            
000091D2                            locret_8BAC:
000091D2 4E75                       		rts	
000091D4                            ; ===========================================================================
000091D4                            
000091D4                            Obj1E_Action:				; XREF: Obj1E_Index
000091D4 43F9 0000 0000             		lea	(Ani_obj1E).l,a1
000091DA 6100 0000                  		bsr.w	AnimateSprite
000091DE 0C28 0001 001A             		cmpi.b	#1,$1A(a0)	; is final frame (01) displayed?
000091E4 6600                       		bne.s	Obj1E_SetBall	; if not, branch
000091E6 4A28 0032                  		tst.b	$32(a0)		; is it	set to launch cannonball?
000091EA 6700                       		beq.s	Obj1E_MakeBall	; if yes, branch
000091EC 6000                       		bra.s	Obj1E_MarkAsGone
000091EE                            ; ===========================================================================
000091EE                            
000091EE                            Obj1E_SetBall:				; XREF: Obj1E_Action
000091EE 4228 0032                  		clr.b	$32(a0)		; set to launch	cannonball
000091F2                            
000091F2                            Obj1E_MarkAsGone:			; XREF: Obj1E_Action
000091F2 6000 0000                  		bra.w	MarkObjGone
000091F6                            ; ===========================================================================
000091F6                            
000091F6                            Obj1E_MakeBall:				; XREF: Obj1E_Action
000091F6 117C 0001 0032             		move.b	#1,$32(a0)
000091FC 6100 0000                  		bsr.w	SingleObjLoad
00009200 6600                       		bne.s	loc_8C1A
00009202 12BC 0020                  		move.b	#$20,0(a1)	; load cannonball object ($20)
00009206 3368 0008 0008             		move.w	8(a0),8(a1)
0000920C 3368 000C 000C             		move.w	$C(a0),$C(a1)
00009212 337C FF00 0010             		move.w	#-$100,$10(a1)	; cannonball bounces to	the left
00009218 337C 0000 0012             		move.w	#0,$12(a1)
0000921E 70FC                       		moveq	#-4,d0
00009220 0828 0000 0022             		btst	#0,$22(a0)	; is Ball Hog facing right?
00009226 6700                       		beq.s	loc_8C0A	; if not, branch
00009228 4440                       		neg.w	d0
0000922A 4469 0010                  		neg.w	$10(a1)		; cannonball bounces to	the right
0000922E                            
0000922E                            loc_8C0A:
0000922E D169 0008                  		add.w	d0,8(a1)
00009232 0669 000C 000C             		addi.w	#$C,$C(a1)
00009238 1368 0028 0028             		move.b	$28(a0),$28(a1)	; copy object type from	Ball Hog
0000923E                            
0000923E                            loc_8C1A:
0000923E 60B2                       		bra.s	Obj1E_MarkAsGone
00009240                            ; ===========================================================================
00009240                            ; ---------------------------------------------------------------------------
00009240                            ; Object 20 - cannonball that Ball Hog throws (SBZ)
00009240                            ; ---------------------------------------------------------------------------
00009240                            
00009240                            Obj20:					; XREF: Obj_Index
00009240 7000                       		moveq	#0,d0
00009242 1028 0024                  		move.b	$24(a0),d0
00009246 323B 0000                  		move.w	Obj20_Index(pc,d0.w),d1
0000924A 4EFB 1000                  		jmp	Obj20_Index(pc,d1.w)
0000924E                            ; ===========================================================================
0000924E 0000                       Obj20_Index:	dc.w Obj20_Main-Obj20_Index
00009250 0000                       		dc.w Obj20_Bounce-Obj20_Index
00009252                            ; ===========================================================================
00009252                            
00009252                            Obj20_Main:				; XREF: Obj20_Index
00009252 5428 0024                  		addq.b	#2,$24(a0)
00009256 117C 0007 0016             		move.b	#7,$16(a0)
0000925C 217C 0000 0000 0004        		move.l	#Map_obj1E,4(a0)
00009264 317C 2302 0002             		move.w	#$2302,2(a0)
0000926A 117C 0004 0001             		move.b	#4,1(a0)
00009270 117C 0003 0018             		move.b	#3,$18(a0)
00009276 117C 0087 0020             		move.b	#$87,$20(a0)
0000927C 117C 0008 0019             		move.b	#8,$19(a0)
00009282 7000                       		moveq	#0,d0
00009284 1028 0028                  		move.b	$28(a0),d0	; move object type to d0
00009288 C0FC 003C                  		mulu.w	#60,d0		; multiply by 60 frames	(1 second)
0000928C 3140 0030                  		move.w	d0,$30(a0)	; set explosion	time
00009290 117C 0004 001A             		move.b	#4,$1A(a0)
00009296                            
00009296                            Obj20_Bounce:				; XREF: Obj20_Index
00009296 4EB9 0000 0000             		jsr	ObjectFall
0000929C 4A68 0012                  		tst.w	$12(a0)
000092A0 6B00                       		bmi.s	Obj20_ChkExplode
000092A2 4EB9 0000 0000             		jsr	ObjHitFloor
000092A8 4A41                       		tst.w	d1
000092AA 6A00                       		bpl.s	Obj20_ChkExplode
000092AC D368 000C                  		add.w	d1,$C(a0)
000092B0 317C FD00 0012             		move.w	#-$300,$12(a0)
000092B6 4A03                       		tst.b	d3
000092B8 6700                       		beq.s	Obj20_ChkExplode
000092BA 6B00                       		bmi.s	loc_8CA4
000092BC 4A68 0010                  		tst.w	$10(a0)
000092C0 6A00                       		bpl.s	Obj20_ChkExplode
000092C2 4468 0010                  		neg.w	$10(a0)
000092C6 6000                       		bra.s	Obj20_ChkExplode
000092C8                            ; ===========================================================================
000092C8                            
000092C8                            loc_8CA4:				; XREF: Obj20_Bounce
000092C8 4A68 0010                  		tst.w	$10(a0)
000092CC 6B00                       		bmi.s	Obj20_ChkExplode
000092CE 4468 0010                  		neg.w	$10(a0)
000092D2                            
000092D2                            Obj20_ChkExplode:			; XREF: Obj20_Bounce
000092D2 5368 0030                  		subq.w	#1,$30(a0)	; subtract 1 from explosion time
000092D6 6A00                       		bpl.s	Obj20_Animate	; if time is > 0, branch
000092D8 10BC 0024                  		move.b	#$24,0(a0)
000092DC 10BC 003F                  		move.b	#$3F,0(a0)	; change object	to an explosion	($3F)
000092E0 117C 0000 0024             		move.b	#0,$24(a0)	; reset	routine	counter
000092E6 6000 0000                  		bra.w	Obj3F		; jump to explosion code
000092EA                            ; ===========================================================================
000092EA                            
000092EA                            Obj20_Animate:				; XREF: Obj20_ChkExplode
000092EA 5328 001E                  		subq.b	#1,$1E(a0)	; subtract 1 from frame	duration
000092EE 6A00                       		bpl.s	Obj20_Display
000092F0 117C 0005 001E             		move.b	#5,$1E(a0)	; set frame duration to	5 frames
000092F6 0868 0000 001A             		bchg	#0,$1A(a0)	; change frame
000092FC                            
000092FC                            Obj20_Display:
000092FC 6100 0000                  		bsr.w	DisplaySprite
00009300 3038 F72E                  		move.w	($FFFFF72E).w,d0
00009304 0640 00E0                  		addi.w	#$E0,d0
00009308 B068 000C                  		cmp.w	$C(a0),d0	; has object fallen off	the level?
0000930C 6500 0000                  		bcs.w	DeleteObject	; if yes, branch
00009310 4E75                       		rts	
00009312                            ; ===========================================================================
00009312                            ; ---------------------------------------------------------------------------
00009312                            ; Object 24 - explosion	from a destroyed monitor
00009312                            ; ---------------------------------------------------------------------------
00009312                            
00009312                            Obj24:					; XREF: Obj_Index
00009312 7000                       		moveq	#0,d0
00009314 1028 0024                  		move.b	$24(a0),d0
00009318 323B 0000                  		move.w	Obj24_Index(pc,d0.w),d1
0000931C 4EFB 1000                  		jmp	Obj24_Index(pc,d1.w)
00009320                            ; ===========================================================================
00009320 0000                       Obj24_Index:	dc.w Obj24_Main-Obj24_Index
00009322 0000                       		dc.w Obj24_Animate-Obj24_Index
00009324                            ; ===========================================================================
00009324                            
00009324                            Obj24_Main:				; XREF: Obj24_Index
00009324 5428 0024                  		addq.b	#2,$24(a0)
00009328 217C 0000 0000 0004        		move.l	#Map_obj24,4(a0)
00009330 317C 041C 0002             		move.w	#$41C,2(a0)
00009336 117C 0004 0001             		move.b	#4,1(a0)
0000933C 117C 0001 0018             		move.b	#1,$18(a0)
00009342 117C 0000 0020             		move.b	#0,$20(a0)
00009348 117C 000C 0019             		move.b	#$C,$19(a0)
0000934E 117C 0009 001E             		move.b	#9,$1E(a0)
00009354 117C 0000 001A             		move.b	#0,$1A(a0)
0000935A 303C 00A5                  		move.w	#$A5,d0
0000935E 4EB9 0000 15C0             		jsr	(PlaySound_Special).l ;	play explosion sound
00009364                            
00009364                            Obj24_Animate:				; XREF: Obj24_Index
00009364 5328 001E                  		subq.b	#1,$1E(a0)	; subtract 1 from frame	duration
00009368 6A00                       		bpl.s	Obj24_Display
0000936A 117C 0009 001E             		move.b	#9,$1E(a0)	; set frame duration to	9 frames
00009370 5228 001A                  		addq.b	#1,$1A(a0)	; next frame
00009374 0C28 0004 001A             		cmpi.b	#4,$1A(a0)	; is the final frame (04) displayed?
0000937A 6700 0000                  		beq.w	DeleteObject	; if yes, branch
0000937E                            
0000937E                            Obj24_Display:
0000937E 6000 0000                  		bra.w	DisplaySprite
00009382                            ; ===========================================================================
00009382                            ; ---------------------------------------------------------------------------
00009382                            ; Object 27 - explosion	from a destroyed enemy
00009382                            ; ---------------------------------------------------------------------------
00009382                            
00009382                            Obj27:					; XREF: Obj_Index
00009382 7000                       		moveq	#0,d0
00009384 1028 0024                  		move.b	$24(a0),d0
00009388 323B 0000                  		move.w	Obj27_Index(pc,d0.w),d1
0000938C 4EFB 1000                  		jmp	Obj27_Index(pc,d1.w)
00009390                            ; ===========================================================================
00009390 0000                       Obj27_Index:	dc.w Obj27_LoadAnimal-Obj27_Index
00009392 0000                       		dc.w Obj27_Main-Obj27_Index
00009394 0000                       		dc.w Obj27_Animate-Obj27_Index
00009396                            ; ===========================================================================
00009396                            
00009396                            Obj27_LoadAnimal:			; XREF: Obj27_Index
00009396 5428 0024                  		addq.b	#2,$24(a0)
0000939A 6100 0000                  		bsr.w	SingleObjLoad
0000939E 6600                       		bne.s	Obj27_Main
000093A0 12BC 0028                  		move.b	#$28,0(a1)	; load animal object
000093A4 3368 0008 0008             		move.w	8(a0),8(a1)
000093AA 3368 000C 000C             		move.w	$C(a0),$C(a1)
000093B0 3368 003E 003E             		move.w	$3E(a0),$3E(a1)
000093B6                            
000093B6                            Obj27_Main:				; XREF: Obj27_Index
000093B6 5428 0024                  		addq.b	#2,$24(a0)
000093BA 217C 0000 0000 0004        		move.l	#Map_obj27,4(a0)
000093C2 317C 05A0 0002             		move.w	#$5A0,2(a0)
000093C8 117C 0004 0001             		move.b	#4,1(a0)
000093CE 117C 0001 0018             		move.b	#1,$18(a0)
000093D4 117C 0000 0020             		move.b	#0,$20(a0)
000093DA 117C 000C 0019             		move.b	#$C,$19(a0)
000093E0                            		; move.b	#7,$1E(a0)	; set frame duration to	7 frames
000093E0 117C 000E 001E             		move.b	#$E,$1E(a0)	; GMZ
000093E6 117C 0000 001A             		move.b	#0,$1A(a0)
000093EC 303C 00C1                  		move.w	#$C1,d0
000093F0 4EB9 0000 15C0             		jsr	(PlaySound_Special).l ;	play breaking enemy sound
000093F6                            
000093F6 45F9 0000 0000             		lea	(Obj27_ExplosionXYSpd).l,a2	; GMZ: Get Explosion X/Y Speeds according to subtype
000093FC 1028 0028                  		move.b	$28(a0),d0
00009400 3172 0000 0010             		move.w	(a2,d0.w),$10(a0)
00009406 3172 0002 0012             		move.w	2(a2,d0.w),$12(a0)
0000940C                            
0000940C                            Obj27_Animate:				; XREF: Obj27_Index
0000940C 5328 001E                  		subq.b	#1,$1E(a0)	; subtract 1 from frame	duration
00009410 6A00                       		bpl.s	Obj27_Display
00009412                            		; move.b	#7,$1E(a0)	; set frame duration to	7 frames
00009412 117C 000E 001E             		move.b	#$E,$1E(a0)	; GMZ
00009418 5228 001A                  		addq.b	#1,$1A(a0)	; next frame
0000941C 0C28 0005 001A             		cmpi.b	#5,$1A(a0)	; is the final frame (05) displayed?
00009422 6700 0000                  		beq.w	DeleteObject	; if yes, branch
00009426                            
00009426                            Obj27_Display:
00009426 4EB9 0000 0000             		jsr	SpeedToPos	; GMZ
0000942C 0668 0038 0012             		addi.w	#$38,$12(a0)	; GMZ: Explosion Gravity
00009432 6000 0000                  		bra.w	DisplaySprite
00009436                            ; ===========================================================================
00009436                            ; ---------------------------------------------------------------------------
00009436                            Obj27_ExplosionXYSpd:
00009436                            		; dc.w	-$350, -$300	; Left
00009436                            		; dc.w	-$200, -$450	; Near middle (left)
00009436                            		; dc.w	0, -$500	; Middle
00009436                            		; dc.w	$200, -$450	; Near middle (right)
00009436                            		; dc.w	$350, -$300	; Right
00009436                            
00009436 FEB0 FC00                  		dc.w	-$150, -$400	; Left
0000943A FF00 FAB0                  		dc.w	-$100, -$550	; Near middle (left)
0000943E 0000 FA00                  		dc.w	0, -$600	; Middle
00009442 0100 FAB0                  		dc.w	$100, -$550	; Near middle (right)
00009446 0150 FC00                  		dc.w	$150, -$400	; Right
0000944A                            
0000944A 6869 2068 656C 6C6F 2068+  		dc.b	"hi hello hru -garblemarden"
00009464                            ; ---------------------------------------------------------------------------
00009464                            ; Object 3F - explosion	from a destroyed boss, bomb or cannonball
00009464                            ; ---------------------------------------------------------------------------
00009464                            
00009464                            Obj3F:					; XREF: Obj_Index
00009464 7000                       		moveq	#0,d0
00009466 1028 0024                  		move.b	$24(a0),d0
0000946A 323B 0000                  		move.w	Obj3F_Index(pc,d0.w),d1
0000946E 4EFB 1000                  		jmp	Obj3F_Index(pc,d1.w)
00009472                            ; ===========================================================================
00009472 0000                       Obj3F_Index:	dc.w Obj3F_Main-Obj3F_Index
00009474 FF9A                       		dc.w Obj27_Animate-Obj3F_Index
00009476                            ; ===========================================================================
00009476                            
00009476                            Obj3F_Main:				; XREF: Obj3F_Index
00009476 5428 0024                  		addq.b	#2,$24(a0)
0000947A 217C 0000 0000 0004        		move.l	#Map_obj3F,4(a0)
00009482 317C 05A0 0002             		move.w	#$5A0,2(a0)
00009488 117C 0004 0001             		move.b	#4,1(a0)
0000948E 117C 0001 0018             		move.b	#1,$18(a0)
00009494 117C 0000 0020             		move.b	#0,$20(a0)
0000949A 117C 000C 0019             		move.b	#$C,$19(a0)
000094A0 117C 0007 001E             		move.b	#7,$1E(a0)
000094A6 117C 0000 001A             		move.b	#0,$1A(a0)
000094AC 303C 00C4                  		move.w	#$C4,d0
000094B0 4EF9 0000 15C0             		jmp	(PlaySound_Special).l ;	play exploding bomb sound
000094B6                            ; ===========================================================================
000094B6                            Ani_obj1E:
000094B6                            	include "_anim\obj1E.asm"
000094B6                            ; ---------------------------------------------------------------------------
000094B6                            ; Animation script - doors (SBZ)
000094B6                            ; ---------------------------------------------------------------------------
000094B6 0000                       		dc.w byte_8E4A-Ani_obj1E
000094B8 0900 0002 0203 0200 0002+  byte_8E4A:	dc.b 9,	0, 0, 2, 2, 3, 2, 0, 0,	2, 2, 3, 2, 0, 0, 2, 2, 3, 2, 0, 0, 1, $FF
000094D0 00                         		even
000094D0 00                         		even
000094D0                            
000094D0                            ; ---------------------------------------------------------------------------
000094D0                            ; Sprite mappings - Ball Hog enemy (SBZ)
000094D0                            ; ---------------------------------------------------------------------------
000094D0                            Map_obj1E:
000094D0                            	include "_maps\obj1E.asm"
000094D0                            ; ---------------------------------------------------------------------------
000094D0                            ; Sprite mappings - Ball Hog enemy (SBZ)
000094D0                            ; ---------------------------------------------------------------------------
000094D0 0000 0000                  		dc.w byte_8E6E-Map_obj1E, byte_8E79-Map_obj1E
000094D4 0000 0000                  		dc.w byte_8E84-Map_obj1E, byte_8E8F-Map_obj1E
000094D8 0000 0000                  		dc.w byte_8E9A-Map_obj1E, byte_8EA0-Map_obj1E
000094DC 02                         byte_8E6E:	dc.b 2
000094DD EF09 0000 F4               		dc.b $EF, 9, 0,	0, $F4
000094E2 FF0A 0006 F4               		dc.b $FF, $A, 0, 6, $F4
000094E7 02                         byte_8E79:	dc.b 2
000094E8 EF09 0000 F4               		dc.b $EF, 9, 0,	0, $F4
000094ED FF0A 000F F4               		dc.b $FF, $A, 0, $F, $F4
000094F2 02                         byte_8E84:	dc.b 2
000094F3 F409 0000 F4               		dc.b $F4, 9, 0,	0, $F4
000094F8 0409 0018 F4               		dc.b 4,	9, 0, $18, $F4
000094FD 02                         byte_8E8F:	dc.b 2
000094FE E409 0000 F4               		dc.b $E4, 9, 0,	0, $F4
00009503 F40A 001E F4               		dc.b $F4, $A, 0, $1E, $F4
00009508 01                         byte_8E9A:	dc.b 1
00009509 F805 0027 F8               		dc.b $F8, 5, 0,	$27, $F8
0000950E 01                         byte_8EA0:	dc.b 1
0000950F F805 002B F8               		dc.b $F8, 5, 0,	$2B, $F8
00009514                            		even
00009514                            		even
00009514                            
00009514                            ; ---------------------------------------------------------------------------
00009514                            ; Sprite mappings - explosion
00009514                            ; ---------------------------------------------------------------------------
00009514                            Map_obj24:
00009514                            	include "_maps\obj24.asm"
00009514                            ; ---------------------------------------------------------------------------
00009514                            ; Sprite mappings - explosion
00009514                            ; ---------------------------------------------------------------------------
00009514 0000 0000                  		dc.w byte_8EAE-Map_obj24, byte_8EB4-Map_obj24
00009518 0000 0000                  		dc.w byte_8EBA-Map_obj24, byte_8EC0-Map_obj24
0000951C 01                         byte_8EAE:	dc.b 1
0000951D F40A 0000 F4               		dc.b $F4, $A, 0, 0, $F4
00009522 01                         byte_8EB4:	dc.b 1
00009523 F40A 0009 F4               		dc.b $F4, $A, 0, 9, $F4
00009528 01                         byte_8EBA:	dc.b 1
00009529 F40A 0012 F4               		dc.b $F4, $A, 0, $12, $F4
0000952E 01                         byte_8EC0:	dc.b 1
0000952F F40A 001B F4               		dc.b $F4, $A, 0, $1B, $F4
00009534                            		even
00009534                            		even
00009534                            
00009534                            ; ---------------------------------------------------------------------------
00009534                            ; Sprite mappings - explosion
00009534                            ; ---------------------------------------------------------------------------
00009534 0000 0000                  Map_obj27:	dc.w byte_8ED0-Map_obj27, byte_8ED6-Map_obj27
00009538 0000 0000                  		dc.w byte_8EDC-Map_obj27, byte_8EE2-Map_obj27
0000953C 0000                       		dc.w byte_8EF7-Map_obj27
0000953E 01                         byte_8ED0:	dc.b 1
0000953F F809 0000 F4               		dc.b $F8, 9, 0,	0, $F4
00009544 01                         byte_8ED6:	dc.b 1
00009545 F00F 0006 F0               		dc.b $F0, $F, 0, 6, $F0
0000954A 01                         byte_8EDC:	dc.b 1
0000954B F00F 0016 F0               		dc.b $F0, $F, 0, $16, $F0
00009550 04                         byte_8EE2:	dc.b 4
00009551 EC0A 0026 EC               		dc.b $EC, $A, 0, $26, $EC
00009556 EC05 002F 04               		dc.b $EC, 5, 0,	$2F, 4
0000955B 0405 182F EC               		dc.b 4,	5, $18,	$2F, $EC
00009560 FC0A 1826 FC               		dc.b $FC, $A, $18, $26,	$FC
00009565 04                         byte_8EF7:	dc.b 4
00009566 EC0A 0033 EC               		dc.b $EC, $A, 0, $33, $EC
0000956B EC05 003C 04               		dc.b $EC, 5, 0,	$3C, 4
00009570 0405 183C EC               		dc.b 4,	5, $18,	$3C, $EC
00009575 FC0A 1833 FC               		dc.b $FC, $A, $18, $33,	$FC
0000957A                            		even
0000957A                            ; ---------------------------------------------------------------------------
0000957A                            ; Sprite mappings - explosion from when	a boss is destroyed
0000957A                            ; ---------------------------------------------------------------------------
0000957A FFC4                       Map_obj3F:	dc.w byte_8ED0-Map_obj3F
0000957C 0000                       		dc.w byte_8F16-Map_obj3F
0000957E 0000                       		dc.w byte_8F1C-Map_obj3F
00009580 FFD6                       		dc.w byte_8EE2-Map_obj3F
00009582 FFEB                       		dc.w byte_8EF7-Map_obj3F
00009584 01                         byte_8F16:	dc.b 1
00009585 F00F 0040 F0               		dc.b $F0, $F, 0, $40, $F0
0000958A 01                         byte_8F1C:	dc.b 1
0000958B F00F 0050 F0               		dc.b $F0, $F, 0, $50, $F0
00009590                            		even
00009590                            ; ===========================================================================
00009590                            ; ---------------------------------------------------------------------------
00009590                            ; Object 28 - animals
00009590                            ; ---------------------------------------------------------------------------
00009590                            
00009590                            Obj28:					; XREF: Obj_Index
00009590 7000                       		moveq	#0,d0
00009592 1028 0024                  		move.b	$24(a0),d0
00009596 323B 0000                  		move.w	Obj28_Index(pc,d0.w),d1
0000959A 4EFB 1000                  		jmp	Obj28_Index(pc,d1.w)
0000959E                            ; ===========================================================================
0000959E 0000 0000                  Obj28_Index:	dc.w Obj28_Ending-Obj28_Index, loc_912A-Obj28_Index
000095A2 0000 0000                  		dc.w loc_9184-Obj28_Index, loc_91C0-Obj28_Index
000095A6 0000 0000                  		dc.w loc_9184-Obj28_Index, loc_9184-Obj28_Index
000095AA 0000 0000                  		dc.w loc_9184-Obj28_Index, loc_91C0-Obj28_Index
000095AE 0000 0000                  		dc.w loc_9184-Obj28_Index, loc_9240-Obj28_Index
000095B2 0000 0000                  		dc.w loc_9260-Obj28_Index, loc_9260-Obj28_Index
000095B6 0000 0000                  		dc.w loc_9280-Obj28_Index, loc_92BA-Obj28_Index
000095BA 0000 0000                  		dc.w loc_9314-Obj28_Index, loc_9332-Obj28_Index
000095BE 0000 0000                  		dc.w loc_9314-Obj28_Index, loc_9332-Obj28_Index
000095C2 0000 0000                  		dc.w loc_9314-Obj28_Index, loc_9370-Obj28_Index
000095C6 0000                       		dc.w loc_92D6-Obj28_Index
000095C8                            
000095C8 0005 0203 0603 0405 0401+  Obj28_VarIndex:	dc.b 0,	5, 2, 3, 6, 3, 4, 5, 4,	1, 0, 1
000095D4                            
000095D4 FE00 FC00                  Obj28_Variables:dc.w $FE00, $FC00
000095D8 0000 0000                  		dc.l Map_obj28
000095DC FE00 FD00                  		dc.w $FE00, $FD00	; horizontal speed, vertical speed
000095E0 0000 0000                  		dc.l Map_obj28a		; mappings address
000095E4 FE80 FD00                  		dc.w $FE80, $FD00
000095E8 0000 0000                  		dc.l Map_obj28
000095EC FEC0 FE80                  		dc.w $FEC0, $FE80
000095F0 0000 0000                  		dc.l Map_obj28a
000095F4 FE40 FD00                  		dc.w $FE40, $FD00
000095F8 0000 0000                  		dc.l Map_obj28b
000095FC FD00 FC00                  		dc.w $FD00, $FC00
00009600 0000 0000                  		dc.l Map_obj28a
00009604 FD80 FC80                  		dc.w $FD80, $FC80
00009608 0000 0000                  		dc.l Map_obj28b
0000960C                            
0000960C FBC0 FC00 FBC0 FC00 FBC0+  Obj28_EndSpeed:	dc.w $FBC0, $FC00, $FBC0, $FC00, $FBC0,	$FC00, $FD00, $FC00
0000961C FD00 FC00 FE80 FD00 FE80+  		dc.w $FD00, $FC00, $FE80, $FD00, $FE80,	$FD00, $FEC0, $FE80
0000962C FE40 FD00 FE00 FD00 FD80+  		dc.w $FE40, $FD00, $FE00, $FD00, $FD80,	$FC80
00009638                            
00009638 0000 0000 0000 0000 0000+  Obj28_EndMap:	dc.l Map_obj28a, Map_obj28a, Map_obj28a, Map_obj28, Map_obj28
0000964C 0000 0000 0000 0000 0000+  		dc.l Map_obj28,	Map_obj28, Map_obj28a, Map_obj28b, Map_obj28a
00009660 0000 0000                  		dc.l Map_obj28b
00009664                            
00009664 05A5 05A5 05A5 0553 0553+  Obj28_EndVram:	dc.w $5A5, $5A5, $5A5, $553, $553, $573, $573, $585, $593
00009676 0565 05B3                  		dc.w $565, $5B3
0000967A                            ; ===========================================================================
0000967A                            
0000967A                            Obj28_Ending:				; XREF: Obj28_Index
0000967A 4A28 0028                  		tst.b	$28(a0)		; did animal come from a destroyed enemy?
0000967E 6700 0000                  		beq.w	Obj28_FromEnemy	; if yes, branch
00009682 7000                       		moveq	#0,d0
00009684 1028 0028                  		move.b	$28(a0),d0	; move object type to d0
00009688 D040                       		add.w	d0,d0		; multiply d0 by 2
0000968A 1140 0024                  		move.b	d0,$24(a0)	; move d0 to routine counter
0000968E 0440 0014                  		subi.w	#$14,d0
00009692 317B 00D0 0002             		move.w	Obj28_EndVram(pc,d0.w),2(a0)
00009698 D040                       		add.w	d0,d0
0000969A 217B 009C 0004             		move.l	Obj28_EndMap(pc,d0.w),4(a0)
000096A0 43FA FF6A                  		lea	Obj28_EndSpeed(pc),a1
000096A4 3171 0000 0032             		move.w	(a1,d0.w),$32(a0) ; load horizontal speed
000096AA 3171 0000 0010             		move.w	(a1,d0.w),$10(a0)
000096B0 3171 0002 0034             		move.w	2(a1,d0.w),$34(a0) ; load vertical speed
000096B6 3171 0002 0012             		move.w	2(a1,d0.w),$12(a0)
000096BC 117C 000C 0016             		move.b	#$C,$16(a0)
000096C2 117C 0004 0001             		move.b	#4,1(a0)
000096C8 08E8 0000 0001             		bset	#0,1(a0)
000096CE 117C 0006 0018             		move.b	#6,$18(a0)
000096D4 117C 0008 0019             		move.b	#8,$19(a0)
000096DA 117C 0007 001E             		move.b	#7,$1E(a0)
000096E0 6000 0000                  		bra.w	DisplaySprite
000096E4                            ; ===========================================================================
000096E4                            
000096E4                            Obj28_FromEnemy:			; XREF: Obj28_Ending
000096E4 5428 0024                  		addq.b	#2,$24(a0)
000096E8 6100 9554                  		bsr.w	RandomNumber
000096EC 0240 0001                  		andi.w	#1,d0
000096F0 7200                       		moveq	#0,d1
000096F2 1238 FE10                  		move.b	($FFFFFE10).w,d1
000096F6 D241                       		add.w	d1,d1
000096F8 D240                       		add.w	d0,d1
000096FA 43FA FECC                  		lea	Obj28_VarIndex(pc),a1
000096FE 1031 1000                  		move.b	(a1,d1.w),d0
00009702 1140 0030                  		move.b	d0,$30(a0)
00009706 E748                       		lsl.w	#3,d0
00009708 43FA FECA                  		lea	Obj28_Variables(pc),a1
0000970C D2C0                       		adda.w	d0,a1
0000970E 3159 0032                  		move.w	(a1)+,$32(a0)	; load horizontal speed
00009712 3159 0034                  		move.w	(a1)+,$34(a0)	; load vertical	speed
00009716 2159 0004                  		move.l	(a1)+,4(a0)	; load mappings
0000971A 317C 0580 0002             		move.w	#$580,2(a0)	; VRAM setting for 1st animal
00009720 0828 0000 0030             		btst	#0,$30(a0)	; is 1st animal	used?
00009726 6700                       		beq.s	loc_90C0	; if yes, branch
00009728 317C 0592 0002             		move.w	#$592,2(a0)	; VRAM setting for 2nd animal
0000972E                            
0000972E                            loc_90C0:
0000972E 117C 000C 0016             		move.b	#$C,$16(a0)
00009734 117C 0004 0001             		move.b	#4,1(a0)
0000973A 08E8 0000 0001             		bset	#0,1(a0)
00009740 117C 0006 0018             		move.b	#6,$18(a0)
00009746 117C 0008 0019             		move.b	#8,$19(a0)
0000974C 117C 0007 001E             		move.b	#7,$1E(a0)
00009752 117C 0002 001A             		move.b	#2,$1A(a0)
00009758 317C FC00 0012             		move.w	#-$400,$12(a0)
0000975E 4A38 F7A7                  		tst.b	($FFFFF7A7).w
00009762 6600                       		bne.s	loc_911C
00009764 6100 0000                  		bsr.w	SingleObjLoad
00009768 6600                       		bne.s	Obj28_Display
0000976A 12BC 0029                  		move.b	#$29,0(a1)	; load points object
0000976E 3368 0008 0008             		move.w	8(a0),8(a1)
00009774 3368 000C 000C             		move.w	$C(a0),$C(a1)
0000977A 3028 003E                  		move.w	$3E(a0),d0
0000977E E248                       		lsr.w	#1,d0
00009780 1340 001A                  		move.b	d0,$1A(a1)
00009784                            
00009784                            Obj28_Display:
00009784 6000 0000                  		bra.w	DisplaySprite
00009788                            ; ===========================================================================
00009788                            
00009788                            loc_911C:
00009788 117C 0012 0024             		move.b	#$12,$24(a0)
0000978E 4268 0010                  		clr.w	$10(a0)
00009792 6000 0000                  		bra.w	DisplaySprite
00009796                            ; ===========================================================================
00009796                            
00009796                            loc_912A:				; XREF: Obj28_Index
00009796 4A28 0001                  		tst.b	1(a0)
0000979A 6A00 0000                  		bpl.w	DeleteObject
0000979E 6100 0000                  		bsr.w	ObjectFall
000097A2 4A68 0012                  		tst.w	$12(a0)
000097A6 6B00                       		bmi.s	loc_9180
000097A8 4EB9 0000 0000             		jsr	ObjHitFloor
000097AE 4A41                       		tst.w	d1
000097B0 6A00                       		bpl.s	loc_9180
000097B2 D368 000C                  		add.w	d1,$C(a0)
000097B6 3168 0032 0010             		move.w	$32(a0),$10(a0)
000097BC 3168 0034 0012             		move.w	$34(a0),$12(a0)
000097C2 117C 0001 001A             		move.b	#1,$1A(a0)
000097C8 1028 0030                  		move.b	$30(a0),d0
000097CC D000                       		add.b	d0,d0
000097CE 5800                       		addq.b	#4,d0
000097D0 1140 0024                  		move.b	d0,$24(a0)
000097D4 4A38 F7A7                  		tst.b	($FFFFF7A7).w
000097D8 6700                       		beq.s	loc_9180
000097DA 0838 0004 FE0F             		btst	#4,($FFFFFE0F).w
000097E0 6700                       		beq.s	loc_9180
000097E2 4468 0010                  		neg.w	$10(a0)
000097E6 0868 0000 0001             		bchg	#0,1(a0)
000097EC                            
000097EC                            loc_9180:
000097EC 6000 0000                  		bra.w	DisplaySprite
000097F0                            ; ===========================================================================
000097F0                            
000097F0                            loc_9184:				; XREF: Obj28_Index
000097F0 6100 0000                  		bsr.w	ObjectFall
000097F4 117C 0001 001A             		move.b	#1,$1A(a0)
000097FA 4A68 0012                  		tst.w	$12(a0)
000097FE 6B00                       		bmi.s	loc_91AE
00009800 117C 0000 001A             		move.b	#0,$1A(a0)
00009806 4EB9 0000 0000             		jsr	ObjHitFloor
0000980C 4A41                       		tst.w	d1
0000980E 6A00                       		bpl.s	loc_91AE
00009810 D368 000C                  		add.w	d1,$C(a0)
00009814 3168 0034 0012             		move.w	$34(a0),$12(a0)
0000981A                            
0000981A                            loc_91AE:
0000981A 4A28 0028                  		tst.b	$28(a0)
0000981E 6600                       		bne.s	loc_9224
00009820 4A28 0001                  		tst.b	1(a0)
00009824 6A00 0000                  		bpl.w	DeleteObject
00009828 6000 0000                  		bra.w	DisplaySprite
0000982C                            ; ===========================================================================
0000982C                            
0000982C                            loc_91C0:				; XREF: Obj28_Index
0000982C 6100 0000                  		bsr.w	SpeedToPos
00009830 0668 0018 0012             		addi.w	#$18,$12(a0)
00009836 4A68 0012                  		tst.w	$12(a0)
0000983A 6B00                       		bmi.s	loc_91FC
0000983C 4EB9 0000 0000             		jsr	ObjHitFloor
00009842 4A41                       		tst.w	d1
00009844 6A00                       		bpl.s	loc_91FC
00009846 D368 000C                  		add.w	d1,$C(a0)
0000984A 3168 0034 0012             		move.w	$34(a0),$12(a0)
00009850 4A28 0028                  		tst.b	$28(a0)
00009854 6700                       		beq.s	loc_91FC
00009856 0C28 000A 0028             		cmpi.b	#$A,$28(a0)
0000985C 6700                       		beq.s	loc_91FC
0000985E 4468 0010                  		neg.w	$10(a0)
00009862 0868 0000 0001             		bchg	#0,1(a0)
00009868                            
00009868                            loc_91FC:
00009868 5328 001E                  		subq.b	#1,$1E(a0)
0000986C 6A00                       		bpl.s	loc_9212
0000986E 117C 0001 001E             		move.b	#1,$1E(a0)
00009874 5228 001A                  		addq.b	#1,$1A(a0)
00009878 0228 0001 001A             		andi.b	#1,$1A(a0)
0000987E                            
0000987E                            loc_9212:
0000987E 4A28 0028                  		tst.b	$28(a0)
00009882 6600                       		bne.s	loc_9224
00009884 4A28 0001                  		tst.b	1(a0)
00009888 6A00 0000                  		bpl.w	DeleteObject
0000988C 6000 0000                  		bra.w	DisplaySprite
00009890                            ; ===========================================================================
00009890                            
00009890                            loc_9224:				; XREF: Obj28_Index
00009890 3028 0008                  		move.w	8(a0),d0
00009894 9078 D008                  		sub.w	($FFFFD008).w,d0
00009898 6500                       		bcs.s	loc_923C
0000989A 0440 0180                  		subi.w	#$180,d0
0000989E 6A00                       		bpl.s	loc_923C
000098A0 4A28 0001                  		tst.b	1(a0)
000098A4 6A00 0000                  		bpl.w	DeleteObject
000098A8                            
000098A8                            loc_923C:
000098A8 6000 0000                  		bra.w	DisplaySprite
000098AC                            ; ===========================================================================
000098AC                            
000098AC                            loc_9240:				; XREF: Obj28_Index
000098AC 4A28 0001                  		tst.b	1(a0)
000098B0 6A00 0000                  		bpl.w	DeleteObject
000098B4 5368 0036                  		subq.w	#1,$36(a0)
000098B8 6600 0000                  		bne.w	loc_925C
000098BC 117C 0002 0024             		move.b	#2,$24(a0)
000098C2 117C 0003 0018             		move.b	#3,$18(a0)
000098C8                            
000098C8                            loc_925C:
000098C8 6000 0000                  		bra.w	DisplaySprite
000098CC                            ; ===========================================================================
000098CC                            
000098CC                            loc_9260:				; XREF: Obj28_Index
000098CC 6100 0000                  		bsr.w	sub_9404
000098D0 6400                       		bcc.s	loc_927C
000098D2 3168 0032 0010             		move.w	$32(a0),$10(a0)
000098D8 3168 0034 0012             		move.w	$34(a0),$12(a0)
000098DE 117C 000E 0024             		move.b	#$E,$24(a0)
000098E4 6000 FF46                  		bra.w	loc_91C0
000098E8                            ; ===========================================================================
000098E8                            
000098E8                            loc_927C:
000098E8 6000 FFA6                  		bra.w	loc_9224
000098EC                            ; ===========================================================================
000098EC                            
000098EC                            loc_9280:				; XREF: Obj28_Index
000098EC 6100 0000                  		bsr.w	sub_9404
000098F0 6A00                       		bpl.s	loc_92B6
000098F2 4268 0010                  		clr.w	$10(a0)
000098F6 4268 0032                  		clr.w	$32(a0)
000098FA 6100 0000                  		bsr.w	SpeedToPos
000098FE 0668 0018 0012             		addi.w	#$18,$12(a0)
00009904 6100 0000                  		bsr.w	loc_93C4
00009908 6100 0000                  		bsr.w	loc_93EC
0000990C 5328 001E                  		subq.b	#1,$1E(a0)
00009910 6A00                       		bpl.s	loc_92B6
00009912 117C 0001 001E             		move.b	#1,$1E(a0)
00009918 5228 001A                  		addq.b	#1,$1A(a0)
0000991C 0228 0001 001A             		andi.b	#1,$1A(a0)
00009922                            
00009922                            loc_92B6:
00009922 6000 FF6C                  		bra.w	loc_9224
00009926                            ; ===========================================================================
00009926                            
00009926                            loc_92BA:				; XREF: Obj28_Index
00009926 6100 0000                  		bsr.w	sub_9404
0000992A 6A00                       		bpl.s	loc_9310
0000992C 3168 0032 0010             		move.w	$32(a0),$10(a0)
00009932 3168 0034 0012             		move.w	$34(a0),$12(a0)
00009938 117C 0004 0024             		move.b	#4,$24(a0)
0000993E 6000 FEB0                  		bra.w	loc_9184
00009942                            ; ===========================================================================
00009942                            
00009942                            loc_92D6:				; XREF: Obj28_Index
00009942 6100 0000                  		bsr.w	ObjectFall
00009946 117C 0001 001A             		move.b	#1,$1A(a0)
0000994C 4A68 0012                  		tst.w	$12(a0)
00009950 6B00                       		bmi.s	loc_9310
00009952 117C 0000 001A             		move.b	#0,$1A(a0)
00009958 4EB9 0000 0000             		jsr	ObjHitFloor
0000995E 4A41                       		tst.w	d1
00009960 6A00                       		bpl.s	loc_9310
00009962 4628 0029                  		not.b	$29(a0)
00009966 6600                       		bne.s	loc_9306
00009968 4468 0010                  		neg.w	$10(a0)
0000996C 0868 0000 0001             		bchg	#0,1(a0)
00009972                            
00009972                            loc_9306:
00009972 D368 000C                  		add.w	d1,$C(a0)
00009976 3168 0034 0012             		move.w	$34(a0),$12(a0)
0000997C                            
0000997C                            loc_9310:
0000997C 6000 FF12                  		bra.w	loc_9224
00009980                            ; ===========================================================================
00009980                            
00009980                            loc_9314:				; XREF: Obj28_Index
00009980 6100 0000                  		bsr.w	sub_9404
00009984 6A00                       		bpl.s	loc_932E
00009986 4268 0010                  		clr.w	$10(a0)
0000998A 4268 0032                  		clr.w	$32(a0)
0000998E 6100 0000                  		bsr.w	ObjectFall
00009992 6100 0000                  		bsr.w	loc_93C4
00009996 6100 0000                  		bsr.w	loc_93EC
0000999A                            
0000999A                            loc_932E:
0000999A 6000 FEF4                  		bra.w	loc_9224
0000999E                            ; ===========================================================================
0000999E                            
0000999E                            loc_9332:				; XREF: Obj28_Index
0000999E 6100 0000                  		bsr.w	sub_9404
000099A2 6A00                       		bpl.s	loc_936C
000099A4 6100 0000                  		bsr.w	ObjectFall
000099A8 117C 0001 001A             		move.b	#1,$1A(a0)
000099AE 4A68 0012                  		tst.w	$12(a0)
000099B2 6B00                       		bmi.s	loc_936C
000099B4 117C 0000 001A             		move.b	#0,$1A(a0)
000099BA 4EB9 0000 0000             		jsr	ObjHitFloor
000099C0 4A41                       		tst.w	d1
000099C2 6A00                       		bpl.s	loc_936C
000099C4 4468 0010                  		neg.w	$10(a0)
000099C8 0868 0000 0001             		bchg	#0,1(a0)
000099CE D368 000C                  		add.w	d1,$C(a0)
000099D2 3168 0034 0012             		move.w	$34(a0),$12(a0)
000099D8                            
000099D8                            loc_936C:
000099D8 6000 FEB6                  		bra.w	loc_9224
000099DC                            ; ===========================================================================
000099DC                            
000099DC                            loc_9370:				; XREF: Obj28_Index
000099DC 6100 0000                  		bsr.w	sub_9404
000099E0 6A00                       		bpl.s	loc_93C0
000099E2 6100 0000                  		bsr.w	SpeedToPos
000099E6 0668 0018 0012             		addi.w	#$18,$12(a0)
000099EC 4A68 0012                  		tst.w	$12(a0)
000099F0 6B00                       		bmi.s	loc_93AA
000099F2 4EB9 0000 0000             		jsr	ObjHitFloor
000099F8 4A41                       		tst.w	d1
000099FA 6A00                       		bpl.s	loc_93AA
000099FC 4628 0029                  		not.b	$29(a0)
00009A00 6600                       		bne.s	loc_93A0
00009A02 4468 0010                  		neg.w	$10(a0)
00009A06 0868 0000 0001             		bchg	#0,1(a0)
00009A0C                            
00009A0C                            loc_93A0:
00009A0C D368 000C                  		add.w	d1,$C(a0)
00009A10 3168 0034 0012             		move.w	$34(a0),$12(a0)
00009A16                            
00009A16                            loc_93AA:
00009A16 5328 001E                  		subq.b	#1,$1E(a0)
00009A1A 6A00                       		bpl.s	loc_93C0
00009A1C 117C 0001 001E             		move.b	#1,$1E(a0)
00009A22 5228 001A                  		addq.b	#1,$1A(a0)
00009A26 0228 0001 001A             		andi.b	#1,$1A(a0)
00009A2C                            
00009A2C                            loc_93C0:
00009A2C 6000 FE62                  		bra.w	loc_9224
00009A30                            ; ===========================================================================
00009A30                            
00009A30                            loc_93C4:
00009A30 117C 0001 001A             		move.b	#1,$1A(a0)
00009A36 4A68 0012                  		tst.w	$12(a0)
00009A3A 6B00                       		bmi.s	locret_93EA
00009A3C 117C 0000 001A             		move.b	#0,$1A(a0)
00009A42 4EB9 0000 0000             		jsr	ObjHitFloor
00009A48 4A41                       		tst.w	d1
00009A4A 6A00                       		bpl.s	locret_93EA
00009A4C D368 000C                  		add.w	d1,$C(a0)
00009A50 3168 0034 0012             		move.w	$34(a0),$12(a0)
00009A56                            
00009A56                            locret_93EA:
00009A56 4E75                       		rts	
00009A58                            ; ===========================================================================
00009A58                            
00009A58                            loc_93EC:
00009A58 08E8 0000 0001             		bset	#0,1(a0)
00009A5E 3028 0008                  		move.w	8(a0),d0
00009A62 9078 D008                  		sub.w	($FFFFD008).w,d0
00009A66 6400                       		bcc.s	locret_9402
00009A68 08A8 0000 0001             		bclr	#0,1(a0)
00009A6E                            
00009A6E                            locret_9402:
00009A6E 4E75                       		rts	
00009A70                            
00009A70                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00009A70                            
00009A70                            
00009A70                            sub_9404:
00009A70 3038 D008                  		move.w	($FFFFD008).w,d0
00009A74 9068 0008                  		sub.w	8(a0),d0
00009A78 0440 00B8                  		subi.w	#$B8,d0
00009A7C 4E75                       		rts	
00009A7E                            ; End of function sub_9404
00009A7E                            
00009A7E                            ; ===========================================================================
00009A7E                            ; ---------------------------------------------------------------------------
00009A7E                            ; Object 29 - points that appear when you destroy something
00009A7E                            ; ---------------------------------------------------------------------------
00009A7E                            
00009A7E                            Obj29:					; XREF: Obj_Index
00009A7E 7000                       		moveq	#0,d0
00009A80 1028 0024                  		move.b	$24(a0),d0
00009A84 323B 0000                  		move.w	Obj29_Index(pc,d0.w),d1
00009A88 4EBB 1000                  		jsr	Obj29_Index(pc,d1.w)
00009A8C 6000 0000                  		bra.w	DisplaySprite
00009A90                            ; ===========================================================================
00009A90 0000                       Obj29_Index:	dc.w Obj29_Main-Obj29_Index
00009A92 0000                       		dc.w Obj29_Slower-Obj29_Index
00009A94                            ; ===========================================================================
00009A94                            
00009A94                            Obj29_Main:				; XREF: Obj29_Index
00009A94 5428 0024                  		addq.b	#2,$24(a0)
00009A98 217C 0000 0000 0004        		move.l	#Map_obj29,4(a0)
00009AA0 317C 2797 0002             		move.w	#$2797,2(a0)
00009AA6 117C 0004 0001             		move.b	#4,1(a0)
00009AAC 117C 0001 0018             		move.b	#1,$18(a0)
00009AB2 117C 0008 0019             		move.b	#8,$19(a0)
00009AB8 317C FD00 0012             		move.w	#-$300,$12(a0)	; move object upwards
00009ABE                            
00009ABE                            Obj29_Slower:				; XREF: Obj29_Index
00009ABE 4A68 0012                  		tst.w	$12(a0)		; is object moving?
00009AC2 6A00 0000                  		bpl.w	DeleteObject	; if not, branch
00009AC6 6100 0000                  		bsr.w	SpeedToPos
00009ACA 0668 0018 0012             		addi.w	#$18,$12(a0)	; reduce object	speed
00009AD0 4E75                       		rts	
00009AD2                            ; ===========================================================================
00009AD2                            ; ---------------------------------------------------------------------------
00009AD2                            ; Sprite mappings - animals
00009AD2                            ; ---------------------------------------------------------------------------
00009AD2                            Map_obj28:
00009AD2                            	include "_maps\obj28.asm"
00009AD2                            ; ---------------------------------------------------------------------------
00009AD2                            ; Sprite mappings - animals
00009AD2                            ; ---------------------------------------------------------------------------
00009AD2 0000                       		dc.w byte_9472-Map_obj28
00009AD4 0000                       		dc.w byte_9478-Map_obj28
00009AD6 0000                       		dc.w byte_946C-Map_obj28
00009AD8 01                         byte_946C:	dc.b 1
00009AD9 F406 0000 F8               		dc.b $F4, 6, 0,	0, $F8
00009ADE 01                         byte_9472:	dc.b 1
00009ADF F406 0006 F8               		dc.b $F4, 6, 0,	6, $F8
00009AE4 01                         byte_9478:	dc.b 1
00009AE5 F406 000C F8               		dc.b $F4, 6, 0,	$C, $F8
00009AEA                            		even
00009AEA                            		even
00009AEA                            
00009AEA                            Map_obj28a:
00009AEA                            	include "_maps\obj28a.asm"
00009AEA                            ; ---------------------------------------------------------------------------
00009AEA                            ; Sprite mappings - animals
00009AEA                            ; ---------------------------------------------------------------------------
00009AEA 0000                       		dc.w byte_948A-Map_obj28a
00009AEC 0000                       		dc.w byte_9490-Map_obj28a
00009AEE 0000                       		dc.w byte_9484-Map_obj28a
00009AF0 01                         byte_9484:	dc.b 1
00009AF1 F406 0000 F8               		dc.b $F4, 6, 0,	0, $F8
00009AF6 01                         byte_948A:	dc.b 1
00009AF7 FC05 0006 F8               		dc.b $FC, 5, 0,	6, $F8
00009AFC 01                         byte_9490:	dc.b 1
00009AFD FC05 000A F8               		dc.b $FC, 5, 0,	$A, $F8
00009B02                            		even
00009B02                            		even
00009B02                            
00009B02                            Map_obj28b:
00009B02                            	include "_maps\obj28b.asm"
00009B02                            ; ---------------------------------------------------------------------------
00009B02                            ; Sprite mappings - animals
00009B02                            ; ---------------------------------------------------------------------------
00009B02 0000                       		dc.w byte_94A2-Map_obj28b
00009B04 0000                       		dc.w byte_94A8-Map_obj28b
00009B06 0000                       		dc.w byte_949C-Map_obj28b
00009B08 01                         byte_949C:	dc.b 1
00009B09 F406 0000 F8               		dc.b $F4, 6, 0,	0, $F8
00009B0E 01                         byte_94A2:	dc.b 1
00009B0F FC09 0006 F4               		dc.b $FC, 9, 0,	6, $F4
00009B14 01                         byte_94A8:	dc.b 1
00009B15 FC09 000C F4               		dc.b $FC, 9, 0,	$C, $F4
00009B1A                            		even
00009B1A                            		even
00009B1A                            
00009B1A                            ; ---------------------------------------------------------------------------
00009B1A                            ; Sprite mappings - points that	appear when you	destroy	something
00009B1A                            ; ---------------------------------------------------------------------------
00009B1A                            Map_obj29:
00009B1A                            	include "_maps\obj29.asm"
00009B1A                            ; ---------------------------------------------------------------------------
00009B1A                            ; Sprite mappings - points that	appear when you	destroy	something
00009B1A                            ; ---------------------------------------------------------------------------
00009B1A 0000 0000                  		dc.w byte_94BC-Map_obj29, byte_94C2-Map_obj29
00009B1E 0000 0000                  		dc.w byte_94C8-Map_obj29, byte_94CE-Map_obj29
00009B22 0000 0000                  		dc.w byte_94D4-Map_obj29, byte_94DA-Map_obj29
00009B26 0000                       		dc.w byte_94E5-Map_obj29
00009B28 01                         byte_94BC:	dc.b 1
00009B29 FC04 0000 F8               		dc.b $FC, 4, 0,	0, $F8	; 100 points
00009B2E 01                         byte_94C2:	dc.b 1
00009B2F FC04 0002 F8               		dc.b $FC, 4, 0,	2, $F8	; 200 points
00009B34 01                         byte_94C8:	dc.b 1
00009B35 FC04 0004 F8               		dc.b $FC, 4, 0,	4, $F8	; 500 points
00009B3A 01                         byte_94CE:	dc.b 1
00009B3B FC08 0006 F8               		dc.b $FC, 8, 0,	6, $F8	; 1000 points
00009B40 01                         byte_94D4:	dc.b 1
00009B41 FC00 0006 FC               		dc.b $FC, 0, 0,	6, $FC	; 10 points
00009B46 02                         byte_94DA:	dc.b 2
00009B47 FC08 0006 F4               		dc.b $FC, 8, 0,	6, $F4	; 10,000 points
00009B4C FC04 0007 01               		dc.b $FC, 4, 0,	7, 1
00009B51 02                         byte_94E5:	dc.b 2
00009B52 FC08 0006 F4               		dc.b $FC, 8, 0,	6, $F4	; 100,000 points
00009B57 FC04 0007 06               		dc.b $FC, 4, 0,	7, 6
00009B5C                            		even
00009B5C                            		even
00009B5C                            
00009B5C                            ; ===========================================================================
00009B5C                            ; ---------------------------------------------------------------------------
00009B5C                            ; Object 1F - Crabmeat enemy (GHZ, SYZ)
00009B5C                            ; ---------------------------------------------------------------------------
00009B5C                            
00009B5C                            Obj1F:					; XREF: Obj_Index
00009B5C 7000                       		moveq	#0,d0
00009B5E 1028 0024                  		move.b	$24(a0),d0
00009B62 323B 0000                  		move.w	Obj1F_Index(pc,d0.w),d1
00009B66 4EFB 1000                  		jmp	Obj1F_Index(pc,d1.w)
00009B6A                            ; ===========================================================================
00009B6A 0000                       Obj1F_Index:	dc.w Obj1F_Main-Obj1F_Index
00009B6C 0000                       		dc.w Obj1F_Action-Obj1F_Index
00009B6E 0000                       		dc.w Obj1F_Delete-Obj1F_Index
00009B70 0000                       		dc.w Obj1F_BallMain-Obj1F_Index
00009B72 0000                       		dc.w Obj1F_BallMove-Obj1F_Index
00009B74                            ; ===========================================================================
00009B74                            
00009B74                            Obj1F_Main:				; XREF: Obj1F_Index
00009B74 117C 0010 0016             		move.b	#$10,$16(a0)
00009B7A 117C 0008 0017             		move.b	#8,$17(a0)
00009B80 217C 0000 0000 0004        		move.l	#Map_obj1F,4(a0)
00009B88 317C 0400 0002             		move.w	#$400,2(a0)
00009B8E 117C 0004 0001             		move.b	#4,1(a0)
00009B94 117C 0003 0018             		move.b	#3,$18(a0)
00009B9A 117C 0006 0020             		move.b	#6,$20(a0)
00009BA0 117C 0015 0019             		move.b	#$15,$19(a0)
00009BA6 6100 0000                  		bsr.w	ObjectFall
00009BAA 4EB9 0000 0000             		jsr	ObjHitFloor
00009BB0 4A41                       		tst.w	d1
00009BB2 6A00                       		bpl.s	locret_955A
00009BB4 D368 000C                  		add.w	d1,$C(a0)
00009BB8 1143 0026                  		move.b	d3,$26(a0)
00009BBC 317C 0000 0012             		move.w	#0,$12(a0)
00009BC2 5428 0024                  		addq.b	#2,$24(a0)
00009BC6                            
00009BC6                            locret_955A:
00009BC6 4E75                       		rts	
00009BC8                            ; ===========================================================================
00009BC8                            
00009BC8                            Obj1F_Action:				; XREF: Obj1F_Index
00009BC8 7000                       		moveq	#0,d0
00009BCA 1028 0025                  		move.b	$25(a0),d0
00009BCE 323B 0000                  		move.w	Obj1F_Index2(pc,d0.w),d1
00009BD2 4EBB 1000                  		jsr	Obj1F_Index2(pc,d1.w)
00009BD6 43F9 0000 0000             		lea	(Ani_obj1F).l,a1
00009BDC 6100 0000                  		bsr.w	AnimateSprite
00009BE0 6000 0000                  		bra.w	MarkObjGone
00009BE4                            ; ===========================================================================
00009BE4 0000                       Obj1F_Index2:	dc.w Obj1F_WaitFire-Obj1F_Index2
00009BE6 0000                       		dc.w Obj1F_WalkOnFloor-Obj1F_Index2
00009BE8                            ; ===========================================================================
00009BE8                            
00009BE8                            Obj1F_WaitFire:				; XREF: Obj1F_Index2
00009BE8 5368 0030                  		subq.w	#1,$30(a0)	; subtract 1 from time delay
00009BEC 6A00                       		bpl.s	locret_95B6
00009BEE 4A28 0001                  		tst.b	1(a0)
00009BF2 6A00                       		bpl.s	Obj1F_Move
00009BF4 0868 0001 0032             		bchg	#1,$32(a0)
00009BFA 6600                       		bne.s	Obj1F_MakeFire
00009BFC                            
00009BFC                            Obj1F_Move:
00009BFC 5428 0025                  		addq.b	#2,$25(a0)
00009C00 317C 007F 0030             		move.w	#127,$30(a0)	; set time delay to approx 2 seconds
00009C06 317C 0080 0010             		move.w	#$80,$10(a0)	; move Crabmeat	to the right
00009C0C 6100 0000                  		bsr.w	Obj1F_SetAni
00009C10 5600                       		addq.b	#3,d0
00009C12 1140 001C                  		move.b	d0,$1C(a0)
00009C16 0868 0000 0022             		bchg	#0,$22(a0)
00009C1C 6600                       		bne.s	locret_95B6
00009C1E 4468 0010                  		neg.w	$10(a0)		; change direction
00009C22                            
00009C22                            locret_95B6:
00009C22 4E75                       		rts	
00009C24                            ; ===========================================================================
00009C24                            
00009C24                            Obj1F_MakeFire:				; XREF: Obj1F_WaitFire
00009C24 317C 003B 0030             		move.w	#$3B,$30(a0)
00009C2A 117C 0006 001C             		move.b	#6,$1C(a0)	; use firing animation
00009C30 6100 0000                  		bsr.w	SingleObjLoad
00009C34 6600                       		bne.s	Obj1F_MakeFire2
00009C36 12BC 001F                  		move.b	#$1F,0(a1)	; load left fireball
00009C3A 137C 0006 0024             		move.b	#6,$24(a1)
00009C40 3368 0008 0008             		move.w	8(a0),8(a1)
00009C46 0469 0010 0008             		subi.w	#$10,8(a1)
00009C4C 3368 000C 000C             		move.w	$C(a0),$C(a1)
00009C52 337C FF00 0010             		move.w	#-$100,$10(a1)
00009C58                            
00009C58                            Obj1F_MakeFire2:
00009C58 6100 0000                  		bsr.w	SingleObjLoad
00009C5C 6600                       		bne.s	locret_9618
00009C5E 12BC 001F                  		move.b	#$1F,0(a1)	; load right fireball
00009C62 137C 0006 0024             		move.b	#6,$24(a1)
00009C68 3368 0008 0008             		move.w	8(a0),8(a1)
00009C6E 0669 0010 0008             		addi.w	#$10,8(a1)
00009C74 3368 000C 000C             		move.w	$C(a0),$C(a1)
00009C7A 337C 0100 0010             		move.w	#$100,$10(a1)
00009C80                            
00009C80                            locret_9618:
00009C80 4E75                       		rts	
00009C82                            ; ===========================================================================
00009C82                            
00009C82                            Obj1F_WalkOnFloor:			; XREF: Obj1F_Index2
00009C82 5368 0030                  		subq.w	#1,$30(a0)
00009C86 6B00                       		bmi.s	loc_966E
00009C88 6100 0000                  		bsr.w	SpeedToPos
00009C8C 0868 0000 0032             		bchg	#0,$32(a0)
00009C92 6600                       		bne.s	loc_9654
00009C94 3628 0008                  		move.w	8(a0),d3
00009C98 0643 0010                  		addi.w	#$10,d3
00009C9C 0828 0000 0022             		btst	#0,$22(a0)
00009CA2 6700                       		beq.s	loc_9640
00009CA4 0443 0020                  		subi.w	#$20,d3
00009CA8                            
00009CA8                            loc_9640:
00009CA8 4EB9 0000 0000             		jsr	ObjHitFloor2
00009CAE 0C41 FFF8                  		cmpi.w	#-8,d1
00009CB2 6D00                       		blt.s	loc_966E
00009CB4 0C41 000C                  		cmpi.w	#$C,d1
00009CB8 6C00                       		bge.s	loc_966E
00009CBA 4E75                       		rts	
00009CBC                            ; ===========================================================================
00009CBC                            
00009CBC                            loc_9654:				; XREF: Obj1F_WalkOnFloor
00009CBC 4EB9 0000 0000             		jsr	ObjHitFloor
00009CC2 D368 000C                  		add.w	d1,$C(a0)
00009CC6 1143 0026                  		move.b	d3,$26(a0)
00009CCA 6100 0000                  		bsr.w	Obj1F_SetAni
00009CCE 5600                       		addq.b	#3,d0
00009CD0 1140 001C                  		move.b	d0,$1C(a0)
00009CD4 4E75                       		rts	
00009CD6                            ; ===========================================================================
00009CD6                            
00009CD6                            loc_966E:				; XREF: Obj1F_WalkOnFloor
00009CD6 5528 0025                  		subq.b	#2,$25(a0)
00009CDA 317C 003B 0030             		move.w	#59,$30(a0)
00009CE0 317C 0000 0010             		move.w	#0,$10(a0)
00009CE6 6100 0000                  		bsr.w	Obj1F_SetAni
00009CEA 1140 001C                  		move.b	d0,$1C(a0)
00009CEE 4E75                       		rts	
00009CF0                            ; ---------------------------------------------------------------------------
00009CF0                            ; Subroutine to	set the	correct	animation for a	Crabmeat
00009CF0                            ; ---------------------------------------------------------------------------
00009CF0                            
00009CF0                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00009CF0                            
00009CF0                            
00009CF0                            Obj1F_SetAni:				; XREF: loc_966E
00009CF0 7000                       		moveq	#0,d0
00009CF2 1628 0026                  		move.b	$26(a0),d3
00009CF6 6B00                       		bmi.s	loc_96A4
00009CF8 0C03 0006                  		cmpi.b	#6,d3
00009CFC 6500                       		bcs.s	locret_96A2
00009CFE 7001                       		moveq	#1,d0
00009D00 0828 0000 0022             		btst	#0,$22(a0)
00009D06 6600                       		bne.s	locret_96A2
00009D08 7002                       		moveq	#2,d0
00009D0A                            
00009D0A                            locret_96A2:
00009D0A 4E75                       		rts	
00009D0C                            ; ===========================================================================
00009D0C                            
00009D0C                            loc_96A4:				; XREF: Obj1F_SetAni
00009D0C 0C03 00FA                  		cmpi.b	#-6,d3
00009D10 6200                       		bhi.s	locret_96B6
00009D12 7002                       		moveq	#2,d0
00009D14 0828 0000 0022             		btst	#0,$22(a0)
00009D1A 6600                       		bne.s	locret_96B6
00009D1C 7001                       		moveq	#1,d0
00009D1E                            
00009D1E                            locret_96B6:
00009D1E 4E75                       		rts	
00009D20                            ; End of function Obj1F_SetAni
00009D20                            
00009D20                            ; ===========================================================================
00009D20                            
00009D20                            Obj1F_Delete:				; XREF: Obj1F_Index
00009D20 6100 0000                  		bsr.w	DeleteObject
00009D24 4E75                       		rts	
00009D26                            ; ===========================================================================
00009D26                            ; ---------------------------------------------------------------------------
00009D26                            ; Sub-object - missile that the	Crabmeat throws
00009D26                            ; ---------------------------------------------------------------------------
00009D26                            
00009D26                            Obj1F_BallMain:				; XREF: Obj1F_Index
00009D26 5428 0024                  		addq.b	#2,$24(a0)
00009D2A 217C 0000 0000 0004        		move.l	#Map_obj1F,4(a0)
00009D32 317C 0400 0002             		move.w	#$400,2(a0)
00009D38 117C 0004 0001             		move.b	#4,1(a0)
00009D3E 117C 0003 0018             		move.b	#3,$18(a0)
00009D44 117C 0087 0020             		move.b	#$87,$20(a0)
00009D4A 117C 0008 0019             		move.b	#8,$19(a0)
00009D50 317C FC00 0012             		move.w	#-$400,$12(a0)
00009D56 117C 0007 001C             		move.b	#7,$1C(a0)
00009D5C                            
00009D5C                            Obj1F_BallMove:				; XREF: Obj1F_Index
00009D5C 43F9 0000 0000             		lea	(Ani_obj1F).l,a1
00009D62 6100 0000                  		bsr.w	AnimateSprite
00009D66 6100 0000                  		bsr.w	ObjectFall
00009D6A 6100 0000                  		bsr.w	DisplaySprite
00009D6E 3038 F72E                  		move.w	($FFFFF72E).w,d0
00009D72 0640 00E0                  		addi.w	#$E0,d0
00009D76 B068 000C                  		cmp.w	$C(a0),d0	; has object moved below the level boundary?
00009D7A 6500                       		bcs.s	Obj1F_Delete2	; if yes, branch
00009D7C 4E75                       		rts	
00009D7E                            ; ===========================================================================
00009D7E                            
00009D7E                            Obj1F_Delete2:
00009D7E 6000 0000                  		bra.w	DeleteObject
00009D82                            ; ===========================================================================
00009D82                            Ani_obj1F:
00009D82                            	include "_anim\obj1F.asm"
00009D82                            ; ---------------------------------------------------------------------------
00009D82                            ; Animation script - Crabmeat enemy
00009D82                            ; ---------------------------------------------------------------------------
00009D82 0000 0000 0000             		dc.w byte_972A-Ani_obj1F, byte_972E-Ani_obj1F, byte_9732-Ani_obj1F
00009D88 0000 0000 0000             		dc.w byte_9736-Ani_obj1F, byte_973C-Ani_obj1F, byte_9742-Ani_obj1F
00009D8E 0000 0000                  		dc.w byte_9748-Ani_obj1F, byte_974C-Ani_obj1F
00009D92 0F00 FF00                  byte_972A:	dc.b $F, 0, $FF, 0
00009D96 0F02 FF00                  byte_972E:	dc.b $F, 2, $FF, 0
00009D9A 0F22 FF00                  byte_9732:	dc.b $F, $22, $FF, 0
00009D9E 0F01 2100 FF00             byte_9736:	dc.b $F, 1, $21, 0, $FF, 0
00009DA4 0F21 0302 FF00             byte_973C:	dc.b $F, $21, 3, 2, $FF, 0
00009DAA 0F01 2322 FF00             byte_9742:	dc.b $F, 1, $23, $22, $FF, 0
00009DB0 0F04 FF00                  byte_9748:	dc.b $F, 4, $FF, 0
00009DB4 0105 06FF                  byte_974C:	dc.b 1,	5, 6, $FF
00009DB8                            		even
00009DB8                            		even
00009DB8                            
00009DB8                            ; ---------------------------------------------------------------------------
00009DB8                            ; Sprite mappings - Crabmeat enemy (GHZ, SYZ)
00009DB8                            ; ---------------------------------------------------------------------------
00009DB8                            Map_obj1F:
00009DB8                            	include "_maps\obj1F.asm"
00009DB8                            Map_1514:
00009DB8 0000                       Map_1514_0: 	dc.w Map_1514_E-Map_1514
00009DBA 0000                       Map_1514_2: 	dc.w Map_1514_1E-Map_1514
00009DBC 0000                       Map_1514_4: 	dc.w Map_1514_2E-Map_1514
00009DBE 0000                       Map_1514_6: 	dc.w Map_1514_3E-Map_1514
00009DC0 0000                       Map_1514_8: 	dc.w Map_1514_4E-Map_1514
00009DC2 0000                       Map_1514_A: 	dc.w Map_1514_5E-Map_1514
00009DC4 0000                       Map_1514_C: 	dc.w Map_1514_64-Map_1514
00009DC6 03                         Map_1514_E: 	dc.b $3
00009DC7 F80E 0000 E4               	dc.b $F8, $E, $0, $0, $E4
00009DCC F004 000C FC               	dc.b $F0, $4, $0, $C, $FC
00009DD1 F80A 000E 04               	dc.b $F8, $A, $0, $E, $4
00009DD6 03                         Map_1514_1E: 	dc.b $3
00009DD7 F80E 0000 E4               	dc.b $F8, $E, $0, $0, $E4
00009DDC F004 000C FC               	dc.b $F0, $4, $0, $C, $FC
00009DE1 F80A 000E 04               	dc.b $F8, $A, $0, $E, $4
00009DE6 03                         Map_1514_2E: 	dc.b $3
00009DE7 F80E 0000 E4               	dc.b $F8, $E, $0, $0, $E4
00009DEC F004 000C FC               	dc.b $F0, $4, $0, $C, $FC
00009DF1 F80A 000E 04               	dc.b $F8, $A, $0, $E, $4
00009DF6 03                         Map_1514_3E: 	dc.b $3
00009DF7 F80E 0000 E4               	dc.b $F8, $E, $0, $0, $E4
00009DFC F004 000C FC               	dc.b $F0, $4, $0, $C, $FC
00009E01 F80A 000E 04               	dc.b $F8, $A, $0, $E, $4
00009E06 03                         Map_1514_4E: 	dc.b $3
00009E07 F80E 0000 E4               	dc.b $F8, $E, $0, $0, $E4
00009E0C F004 000C FC               	dc.b $F0, $4, $0, $C, $FC
00009E11 F80A 000E 04               	dc.b $F8, $A, $0, $E, $4
00009E16 01                         Map_1514_5E: 	dc.b $1
00009E17 F805 0017 F8               	dc.b $F8, $5, $0, $17, $F8
00009E1C 01                         Map_1514_64: 	dc.b $1
00009E1D F805 2017 F8               	dc.b $F8, $5, $20, $17, $F8
00009E22                            	even
00009E22                            	even
00009E22                            
00009E22                            ; ===========================================================================
00009E22                            ; ---------------------------------------------------------------------------
00009E22                            ; Object 22 - Buzz Bomber enemy	(GHZ, MZ, SYZ)
00009E22                            ; ---------------------------------------------------------------------------
00009E22                            
00009E22                            Obj22:					; XREF: Obj_Index
00009E22 7000                       		moveq	#0,d0
00009E24 1028 0024                  		move.b	$24(a0),d0
00009E28 323B 0000                  		move.w	Obj22_Index(pc,d0.w),d1
00009E2C 4EFB 1000                  		jmp	Obj22_Index(pc,d1.w)
00009E30                            ; ===========================================================================
00009E30 0000                       Obj22_Index:	dc.w Obj22_Main-Obj22_Index
00009E32 0000                       		dc.w Obj22_Action-Obj22_Index
00009E34 0000                       		dc.w Obj22_Delete-Obj22_Index
00009E36                            ; ===========================================================================
00009E36                            
00009E36                            Obj22_Main:				; XREF: Obj22_Index
00009E36 5428 0024                  		addq.b	#2,$24(a0)
00009E3A 217C 0000 0000 0004        		move.l	#Map_obj22,4(a0)
00009E42 317C 0444 0002             		move.w	#$444,2(a0)
00009E48 117C 0004 0001             		move.b	#4,1(a0)
00009E4E 117C 0003 0018             		move.b	#3,$18(a0)
00009E54 117C 0008 0020             		move.b	#8,$20(a0)
00009E5A 117C 0018 0019             		move.b	#$18,$19(a0)
00009E60                            
00009E60                            Obj22_Action:				; XREF: Obj22_Index
00009E60 7000                       		moveq	#0,d0
00009E62 1028 0025                  		move.b	$25(a0),d0
00009E66 323B 0000                  		move.w	Obj22_Index2(pc,d0.w),d1
00009E6A 4EBB 1000                  		jsr	Obj22_Index2(pc,d1.w)
00009E6E 43F9 0000 0000             		lea	(Ani_obj22).l,a1
00009E74 6100 0000                  		bsr.w	AnimateSprite
00009E78 6000 0000                  		bra.w	MarkObjGone
00009E7C                            ; ===========================================================================
00009E7C 0000                       Obj22_Index2:	dc.w Obj22_Move-Obj22_Index2
00009E7E 0000                       		dc.w Obj22_ChkNrSonic-Obj22_Index2
00009E80                            ; ===========================================================================
00009E80                            
00009E80                            Obj22_Move:				; XREF: Obj22_Index2
00009E80 5368 0032                  		subq.w	#1,$32(a0)	; subtract 1 from time delay
00009E84 6A00                       		bpl.s	locret_986C	; if time remains, branch
00009E86 0828 0001 0034             		btst	#1,$34(a0)	; is Buzz Bomber near Sonic?
00009E8C 6600                       		bne.s	Obj22_Fire	; if yes, branch
00009E8E 5428 0025                  		addq.b	#2,$25(a0)
00009E92 317C 007F 0032             		move.w	#127,$32(a0)	; set time delay to just over 2	seconds
00009E98 317C 0400 0010             		move.w	#$400,$10(a0)	; move Buzz Bomber to the right
00009E9E 117C 0001 001C             		move.b	#1,$1C(a0)	; use "flying" animation
00009EA4 0828 0000 0022             		btst	#0,$22(a0)	; is Buzz Bomber facing	left?
00009EAA 6600                       		bne.s	locret_986C	; if not, branch
00009EAC 4468 0010                  		neg.w	$10(a0)		; move Buzz Bomber to the left
00009EB0                            
00009EB0                            locret_986C:
00009EB0 4E75                       		rts	
00009EB2                            ; ===========================================================================
00009EB2                            
00009EB2                            Obj22_Fire:				; XREF: Obj22_Move
00009EB2 6100 0000                  		bsr.w	SingleObjLoad
00009EB6 6600                       		bne.s	locret_98D0
00009EB8 12BC 0023                  		move.b	#$23,0(a1)	; load missile object
00009EBC 3368 0008 0008             		move.w	8(a0),8(a1)
00009EC2 3368 000C 000C             		move.w	$C(a0),$C(a1)
00009EC8 0669 001C 000C             		addi.w	#$1C,$C(a1)
00009ECE 337C 0200 0012             		move.w	#$200,$12(a1)	; move missile downwards
00009ED4 337C 0200 0010             		move.w	#$200,$10(a1)	; move missile to the right
00009EDA 303C 0018                  		move.w	#$18,d0
00009EDE 0828 0000 0022             		btst	#0,$22(a0)	; is Buzz Bomber facing	left?
00009EE4 6600                       		bne.s	loc_98AA	; if not, branch
00009EE6 4440                       		neg.w	d0
00009EE8 4469 0010                  		neg.w	$10(a1)		; move missile to the left
00009EEC                            
00009EEC                            loc_98AA:
00009EEC D169 0008                  		add.w	d0,8(a1)
00009EF0 1368 0022 0022             		move.b	$22(a0),$22(a1)
00009EF6 337C 000E 0032             		move.w	#$E,$32(a1)
00009EFC 2348 003C                  		move.l	a0,$3C(a1)
00009F00 117C 0001 0034             		move.b	#1,$34(a0)	; set to "already fired" to prevent refiring
00009F06 317C 003B 0032             		move.w	#$3B,$32(a0)
00009F0C 117C 0002 001C             		move.b	#2,$1C(a0)	; use "firing" animation
00009F12                            
00009F12                            locret_98D0:
00009F12 4E75                       		rts	
00009F14                            ; ===========================================================================
00009F14                            
00009F14                            Obj22_ChkNrSonic:			; XREF: Obj22_Index2
00009F14 5368 0032                  		subq.w	#1,$32(a0)	; subtract 1 from time delay
00009F18 6B00                       		bmi.s	Obj22_ChgDir
00009F1A 6100 0000                  		bsr.w	SpeedToPos
00009F1E 4A28 0034                  		tst.b	$34(a0)
00009F22 6600                       		bne.s	locret_992A
00009F24 3038 D008                  		move.w	($FFFFD008).w,d0
00009F28 9068 0008                  		sub.w	8(a0),d0
00009F2C 6A00                       		bpl.s	Obj22_SetNrSonic
00009F2E 4440                       		neg.w	d0
00009F30                            
00009F30                            Obj22_SetNrSonic:
00009F30 0C40 0060                  		cmpi.w	#$60,d0		; is Buzz Bomber within	$60 pixels of Sonic?
00009F34 6400                       		bcc.s	locret_992A	; if not, branch
00009F36 4A28 0001                  		tst.b	1(a0)
00009F3A 6A00                       		bpl.s	locret_992A
00009F3C 117C 0002 0034             		move.b	#2,$34(a0)	; set Buzz Bomber to "near Sonic"
00009F42 317C 001D 0032             		move.w	#29,$32(a0)	; set time delay to half a second
00009F48 6000                       		bra.s	Obj22_Stop
00009F4A                            ; ===========================================================================
00009F4A                            
00009F4A                            Obj22_ChgDir:				; XREF: Obj22_ChkNrSonic
00009F4A 117C 0000 0034             		move.b	#0,$34(a0)	; set Buzz Bomber to "normal"
00009F50 0868 0000 0022             		bchg	#0,$22(a0)	; change direction
00009F56 317C 003B 0032             		move.w	#59,$32(a0)
00009F5C                            
00009F5C                            Obj22_Stop:				; XREF: Obj22_SetNrSonic
00009F5C 5528 0025                  		subq.b	#2,$25(a0)	; run "Obj22_Fire" routine
00009F60 317C 0000 0010             		move.w	#0,$10(a0)	; stop Buzz Bomber moving
00009F66 117C 0000 001C             		move.b	#0,$1C(a0)	; use "hovering" animation
00009F6C                            
00009F6C                            locret_992A:
00009F6C 4E75                       		rts	
00009F6E                            ; ===========================================================================
00009F6E                            
00009F6E                            Obj22_Delete:				; XREF: Obj22_Index
00009F6E 6100 0000                  		bsr.w	DeleteObject
00009F72 4E75                       		rts	
00009F74                            ; ===========================================================================
00009F74                            ; ---------------------------------------------------------------------------
00009F74                            ; Object 23 - missile that Buzz	Bomber throws
00009F74                            ; ---------------------------------------------------------------------------
00009F74                            
00009F74                            Obj23:					; XREF: Obj_Index
00009F74 7000                       		moveq	#0,d0
00009F76 1028 0024                  		move.b	$24(a0),d0
00009F7A 323B 0000                  		move.w	Obj23_Index(pc,d0.w),d1
00009F7E 4EFB 1000                  		jmp	Obj23_Index(pc,d1.w)
00009F82                            ; ===========================================================================
00009F82 0000                       Obj23_Index:	dc.w Obj23_Main-Obj23_Index
00009F84 0000                       		dc.w Obj23_Animate-Obj23_Index
00009F86 0000                       		dc.w Obj23_FromBuzz-Obj23_Index
00009F88 0000                       		dc.w Obj23_Delete-Obj23_Index
00009F8A 0000                       		dc.w Obj23_FromNewt-Obj23_Index
00009F8C                            ; ===========================================================================
00009F8C                            
00009F8C                            Obj23_Main:				; XREF: Obj23_Index
00009F8C 5368 0032                  		subq.w	#1,$32(a0)
00009F90 6A00                       		bpl.s	Obj23_ChkCancel
00009F92 5428 0024                  		addq.b	#2,$24(a0)
00009F96 217C 0000 0000 0004        		move.l	#Map_obj23,4(a0)
00009F9E 317C 2444 0002             		move.w	#$2444,2(a0)
00009FA4 117C 0004 0001             		move.b	#4,1(a0)
00009FAA 117C 0003 0018             		move.b	#3,$18(a0)
00009FB0 117C 0008 0019             		move.b	#8,$19(a0)
00009FB6 0228 0003 0022             		andi.b	#3,$22(a0)
00009FBC 4A28 0028                  		tst.b	$28(a0)		; was object created by	a Newtron?
00009FC0 6700                       		beq.s	Obj23_Animate	; if not, branch
00009FC2 117C 0008 0024             		move.b	#8,$24(a0)	; run "Obj23_FromNewt" routine
00009FC8 117C 0087 0020             		move.b	#$87,$20(a0)
00009FCE 117C 0001 001C             		move.b	#1,$1C(a0)
00009FD4 6000                       		bra.s	Obj23_Animate2
00009FD6                            ; ===========================================================================
00009FD6                            
00009FD6                            Obj23_Animate:				; XREF: Obj23_Index
00009FD6 6100                       		bsr.s	Obj23_ChkCancel
00009FD8 43F9 0000 0000             		lea	(Ani_obj23).l,a1
00009FDE 6100 0000                  		bsr.w	AnimateSprite
00009FE2 6000 0000                  		bra.w	DisplaySprite
00009FE6                            ; ---------------------------------------------------------------------------
00009FE6                            ; Subroutine to	check if the Buzz Bomber which fired the missile has been
00009FE6                            ; destroyed, and if it has, then cancel	the missile
00009FE6                            ; ---------------------------------------------------------------------------
00009FE6                            
00009FE6                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00009FE6                            
00009FE6                            
00009FE6                            Obj23_ChkCancel:			; XREF: Obj23_Main
00009FE6 2268 003C                  		movea.l	$3C(a0),a1
00009FEA 0C11 0027                  		cmpi.b	#$27,0(a1)	; has Buzz Bomber been destroyed?
00009FEE 6700                       		beq.s	Obj23_Delete	; if yes, branch
00009FF0 4E75                       		rts	
00009FF2                            ; End of function Obj23_ChkCancel
00009FF2                            
00009FF2                            ; ===========================================================================
00009FF2                            
00009FF2                            Obj23_FromBuzz:				; XREF: Obj23_Index
00009FF2 0828 0007 0022             		btst	#7,$22(a0)
00009FF8 6600                       		bne.s	Obj23_Explode
00009FFA 117C 0087 0020             		move.b	#$87,$20(a0)
0000A000 117C 0001 001C             		move.b	#1,$1C(a0)
0000A006 6100 0000                  		bsr.w	SpeedToPos
0000A00A 43F9 0000 0000             		lea	(Ani_obj23).l,a1
0000A010 6100 0000                  		bsr.w	AnimateSprite
0000A014 6100 0000                  		bsr.w	DisplaySprite
0000A018 3038 F72E                  		move.w	($FFFFF72E).w,d0
0000A01C 0640 00E0                  		addi.w	#$E0,d0
0000A020 B068 000C                  		cmp.w	$C(a0),d0	; has object moved below the level boundary?
0000A024 6500                       		bcs.s	Obj23_Delete	; if yes, branch
0000A026 4E75                       		rts	
0000A028                            ; ===========================================================================
0000A028                            
0000A028                            Obj23_Explode:				; XREF: Obj23_FromBuzz
0000A028 10BC 0024                  		move.b	#$24,0(a0)	; change object	to an explosion	(Obj24)
0000A02C 117C 0000 0024             		move.b	#0,$24(a0)
0000A032 6000 F2DE                  		bra.w	Obj24
0000A036                            ; ===========================================================================
0000A036                            
0000A036                            Obj23_Delete:				; XREF: Obj23_Index
0000A036 6100 0000                  		bsr.w	DeleteObject
0000A03A 4E75                       		rts	
0000A03C                            ; ===========================================================================
0000A03C                            
0000A03C                            Obj23_FromNewt:				; XREF: Obj23_Index
0000A03C 4A28 0001                  		tst.b	1(a0)
0000A040 6AF4                       		bpl.s	Obj23_Delete
0000A042 6100 0000                  		bsr.w	SpeedToPos
0000A046                            
0000A046                            Obj23_Animate2:				; XREF: Obj23_Main
0000A046 43F9 0000 0000             		lea	(Ani_obj23).l,a1
0000A04C 6100 0000                  		bsr.w	AnimateSprite
0000A050 6100 0000                  		bsr.w	DisplaySprite
0000A054 4E75                       		rts	
0000A056                            ; ===========================================================================
0000A056                            Ani_obj22:
0000A056                            	include "_anim\obj22.asm"
0000A056                            ; ---------------------------------------------------------------------------
0000A056                            ; Animation script - Buzz Bomber enemy
0000A056                            ; ---------------------------------------------------------------------------
0000A056 0000                       		dc.w byte_9A1E-Ani_obj22
0000A058 0000                       		dc.w byte_9A22-Ani_obj22
0000A05A 0000                       		dc.w byte_9A26-Ani_obj22
0000A05C 0100 01FF                  byte_9A1E:	dc.b 1,	0, 1, $FF
0000A060 0102 03FF                  byte_9A22:	dc.b 1,	2, 3, $FF
0000A064 0104 05FF                  byte_9A26:	dc.b 1,	4, 5, $FF
0000A068                            		even
0000A068                            		even
0000A068                            
0000A068                            Ani_obj23:
0000A068                            	include "_anim\obj23.asm"
0000A068                            ; ---------------------------------------------------------------------------
0000A068                            ; Animation script - missile that Buzz Bomber throws
0000A068                            ; ---------------------------------------------------------------------------
0000A068 0000                       		dc.w byte_9A2E-Ani_obj23
0000A06A 0000                       		dc.w byte_9A32-Ani_obj23
0000A06C 0700 01FC                  byte_9A2E:	dc.b 7,	0, 1, $FC
0000A070 0102 03FF                  byte_9A32:	dc.b 1,	2, 3, $FF
0000A074                            		even
0000A074                            		even
0000A074                            
0000A074                            ; ---------------------------------------------------------------------------
0000A074                            ; Sprite mappings - Buzz Bomber	enemy
0000A074                            ; ---------------------------------------------------------------------------
0000A074                            Map_obj22:
0000A074                            	include "_maps\obj22.asm"
0000A074                            Map_e97a:
0000A074 0000                       Map_e97a_0: 	dc.w Map_e97a_C-Map_e97a
0000A076 0000                       Map_e97a_2: 	dc.w Map_e97a_2B-Map_e97a
0000A078 0000                       Map_e97a_4: 	dc.w Map_e97a_4A-Map_e97a
0000A07A 0000                       Map_e97a_6: 	dc.w Map_e97a_6E-Map_e97a
0000A07C 0000                       Map_e97a_8: 	dc.w Map_e97a_92-Map_e97a
0000A07E 0000                       Map_e97a_A: 	dc.w Map_e97a_B1-Map_e97a
0000A080 06                         Map_e97a_C: 	dc.b $6
0000A081 F409 0000 E8               	dc.b $F4, $9, $0, $0, $E8
0000A086 F409 000F 00               	dc.b $F4, $9, $0, $F, $0
0000A08B 0408 0015 E8               	dc.b $4, $8, $0, $15, $E8
0000A090 0404 0018 00               	dc.b $4, $4, $0, $18, $0
0000A095 F108 001A EC               	dc.b $F1, $8, $0, $1A, $EC
0000A09A F104 001D 04               	dc.b $F1, $4, $0, $1D, $4
0000A09F 06                         Map_e97a_2B: 	dc.b $6
0000A0A0 F409 0000 E8               	dc.b $F4, $9, $0, $0, $E8
0000A0A5 F409 000F 00               	dc.b $F4, $9, $0, $F, $0
0000A0AA 0408 0015 E8               	dc.b $4, $8, $0, $15, $E8
0000A0AF 0404 0018 00               	dc.b $4, $4, $0, $18, $0
0000A0B4 F408 001F EC               	dc.b $F4, $8, $0, $1F, $EC
0000A0B9 F404 0022 04               	dc.b $F4, $4, $0, $22, $4
0000A0BE 07                         Map_e97a_4A: 	dc.b $7
0000A0BF 0400 0030 0C               	dc.b $4, $0, $0, $30, $C
0000A0C4 F409 0000 E8               	dc.b $F4, $9, $0, $0, $E8
0000A0C9 F409 000F 00               	dc.b $F4, $9, $0, $F, $0
0000A0CE 0408 0015 E8               	dc.b $4, $8, $0, $15, $E8
0000A0D3 0404 0018 00               	dc.b $4, $4, $0, $18, $0
0000A0D8 F108 001A EC               	dc.b $F1, $8, $0, $1A, $EC
0000A0DD F104 001D 04               	dc.b $F1, $4, $0, $1D, $4
0000A0E2 07                         Map_e97a_6E: 	dc.b $7
0000A0E3 0404 0031 0C               	dc.b $4, $4, $0, $31, $C
0000A0E8 F409 0000 E8               	dc.b $F4, $9, $0, $0, $E8
0000A0ED F409 000F 00               	dc.b $F4, $9, $0, $F, $0
0000A0F2 0408 0015 E8               	dc.b $4, $8, $0, $15, $E8
0000A0F7 0404 0018 00               	dc.b $4, $4, $0, $18, $0
0000A0FC F408 001F EC               	dc.b $F4, $8, $0, $1F, $EC
0000A101 F404 0022 04               	dc.b $F4, $4, $0, $22, $4
0000A106 06                         Map_e97a_92: 	dc.b $6
0000A107 F40D 0000 EC               	dc.b $F4, $D, $0, $0, $EC
0000A10C 040C 0008 EC               	dc.b $4, $C, $0, $8, $EC
0000A111 0400 000C 0C               	dc.b $4, $0, $0, $C, $C
0000A116 0C04 000D F4               	dc.b $C, $4, $0, $D, $F4
0000A11B F108 001A EC               	dc.b $F1, $8, $0, $1A, $EC
0000A120 F104 001D 04               	dc.b $F1, $4, $0, $1D, $4
0000A125 04                         Map_e97a_B1: 	dc.b $4
0000A126 F40D 0000 EC               	dc.b $F4, $D, $0, $0, $EC
0000A12B 040C 0008 EC               	dc.b $4, $C, $0, $8, $EC
0000A130 0400 000C 0C               	dc.b $4, $0, $0, $C, $C
0000A135 0C04 000D F4               	dc.b $C, $4, $0, $D, $F4
0000A13A                            	even
0000A13A                            	even
0000A13A                            
0000A13A                            ; ---------------------------------------------------------------------------
0000A13A                            ; Sprite mappings - missile that Buzz Bomber throws
0000A13A                            ; ---------------------------------------------------------------------------
0000A13A                            Map_obj23:
0000A13A                            	include "_maps\obj23.asm"
0000A13A                            ; ---------------------------------------------------------------------------
0000A13A                            ; Sprite mappings - missile that Buzz Bomber throws
0000A13A                            ; ---------------------------------------------------------------------------
0000A13A 0000 0000                  		dc.w byte_9B0E-Map_obj23, byte_9B14-Map_obj23
0000A13E 0000 0000                  		dc.w byte_9B1A-Map_obj23, byte_9B20-Map_obj23
0000A142 01                         byte_9B0E:	dc.b 1
0000A143 F805 0024 F8               		dc.b $F8, 5, 0,	$24, $F8
0000A148 01                         byte_9B14:	dc.b 1
0000A149 F805 0028 F8               		dc.b $F8, 5, 0,	$28, $F8
0000A14E 01                         byte_9B1A:	dc.b 1
0000A14F F805 002C F8               		dc.b $F8, 5, 0,	$2C, $F8
0000A154 01                         byte_9B20:	dc.b 1
0000A155 F805 0033 F8               		dc.b $F8, 5, 0,	$33, $F8
0000A15A                            		even
0000A15A                            		even
0000A15A                            
0000A15A                            ; ===========================================================================
0000A15A                            ; ---------------------------------------------------------------------------
0000A15A                            ; Object 25 - rings
0000A15A                            ; ---------------------------------------------------------------------------
0000A15A                            
0000A15A                            Obj25:					; XREF: Obj_Index
0000A15A 7000                       		moveq	#0,d0
0000A15C 1028 0024                  		move.b	$24(a0),d0
0000A160 323B 0000                  		move.w	Obj25_Index(pc,d0.w),d1
0000A164 4EFB 1000                  		jmp	Obj25_Index(pc,d1.w)
0000A168                            ; ===========================================================================
0000A168 0000                       Obj25_Index:	dc.w Obj25_Main-Obj25_Index
0000A16A 0000                       		dc.w Obj25_Animate-Obj25_Index
0000A16C 0000                       		dc.w Obj25_Collect-Obj25_Index
0000A16E 0000                       		dc.w Obj25_Sparkle-Obj25_Index
0000A170 0000                       		dc.w Obj25_Delete-Obj25_Index
0000A172                            ; ---------------------------------------------------------------------------
0000A172                            ; Distances between rings (format: horizontal, vertical)
0000A172                            ; ---------------------------------------------------------------------------
0000A172 1000                       Obj25_PosData:	dc.b $10, 0		; horizontal tight
0000A174 1800                       		dc.b $18, 0		; horizontal normal
0000A176 2000                       		dc.b $20, 0		; horizontal wide
0000A178 0010                       		dc.b 0,	$10		; vertical tight
0000A17A 0018                       		dc.b 0,	$18		; vertical normal
0000A17C 0020                       		dc.b 0,	$20		; vertical wide
0000A17E 1010                       		dc.b $10, $10		; diagonal
0000A180 1818                       		dc.b $18, $18
0000A182 2020                       		dc.b $20, $20
0000A184 F010                       		dc.b $F0, $10
0000A186 E818                       		dc.b $E8, $18
0000A188 E020                       		dc.b $E0, $20
0000A18A 1008                       		dc.b $10, 8
0000A18C 1810                       		dc.b $18, $10
0000A18E F008                       		dc.b $F0, 8
0000A190 E810                       		dc.b $E8, $10
0000A192                            ; ===========================================================================
0000A192                            
0000A192                            Obj25_Main:				; XREF: Obj25_Index
0000A192 45F8 FC00                  		lea	($FFFFFC00).w,a2
0000A196 7000                       		moveq	#0,d0
0000A198 1028 0023                  		move.b	$23(a0),d0
0000A19C 45F2 0002                  		lea	2(a2,d0.w),a2
0000A1A0 1812                       		move.b	(a2),d4
0000A1A2 1228 0028                  		move.b	$28(a0),d1
0000A1A6 1001                       		move.b	d1,d0
0000A1A8 0241 0007                  		andi.w	#7,d1
0000A1AC 0C41 0007                  		cmpi.w	#7,d1
0000A1B0 6600                       		bne.s	loc_9B80
0000A1B2 7206                       		moveq	#6,d1
0000A1B4                            
0000A1B4                            loc_9B80:
0000A1B4 4841                       		swap	d1
0000A1B6 323C 0000                  		move.w	#0,d1
0000A1BA E808                       		lsr.b	#4,d0
0000A1BC D040                       		add.w	d0,d0
0000A1BE 1A3B 00B2                  		move.b	Obj25_PosData(pc,d0.w),d5 ; load ring spacing data
0000A1C2 4885                       		ext.w	d5
0000A1C4 1C3B 00AD                  		move.b	Obj25_PosData+1(pc,d0.w),d6
0000A1C8 4886                       		ext.w	d6
0000A1CA 2248                       		movea.l	a0,a1
0000A1CC 3428 0008                  		move.w	8(a0),d2
0000A1D0 3628 000C                  		move.w	$C(a0),d3
0000A1D4 E20C                       		lsr.b	#1,d4
0000A1D6 6500                       		bcs.s	loc_9C02
0000A1D8 0892 0007                  		bclr	#7,(a2)
0000A1DC 6000                       		bra.s	loc_9BBA
0000A1DE                            ; ===========================================================================
0000A1DE                            
0000A1DE                            Obj25_MakeRings:
0000A1DE 4841                       		swap	d1
0000A1E0 E20C                       		lsr.b	#1,d4
0000A1E2 6500                       		bcs.s	loc_9C02
0000A1E4 0892 0007                  		bclr	#7,(a2)
0000A1E8 6100 0000                  		bsr.w	SingleObjLoad
0000A1EC 6600                       		bne.s	loc_9C0E
0000A1EE                            
0000A1EE                            loc_9BBA:				; XREF: Obj25_Main
0000A1EE 12BC 0025                  		move.b	#$25,0(a1)	; load ring object
0000A1F2 5429 0024                  		addq.b	#2,$24(a1)
0000A1F6 3342 0008                  		move.w	d2,8(a1)	; set x-axis position based on d2
0000A1FA 3368 0008 0032             		move.w	8(a0),$32(a1)
0000A200 3343 000C                  		move.w	d3,$C(a1)	; set y-axis position based on d3
0000A204 237C 0000 0000 0004        		move.l	#Map_obj25,4(a1)
0000A20C 337C 27B2 0002             		move.w	#$27B2,2(a1)
0000A212 137C 0004 0001             		move.b	#4,1(a1)
0000A218 137C 0002 0018             		move.b	#2,$18(a1)
0000A21E 137C 0047 0020             		move.b	#$47,$20(a1)
0000A224 137C 0008 0019             		move.b	#8,$19(a1)
0000A22A 1368 0023 0023             		move.b	$23(a0),$23(a1)
0000A230 1341 0034                  		move.b	d1,$34(a1)
0000A234                            
0000A234                            loc_9C02:
0000A234 5241                       		addq.w	#1,d1
0000A236 D445                       		add.w	d5,d2		; add ring spacing value to d2
0000A238 D646                       		add.w	d6,d3		; add ring spacing value to d3
0000A23A 4841                       		swap	d1
0000A23C 51C9 FFA0                  		dbf	d1,Obj25_MakeRings ; repeat for	number of rings
0000A240                            
0000A240                            loc_9C0E:
0000A240 0812 0000                  		btst	#0,(a2)
0000A244 6600 0000                  		bne.w	DeleteObject
0000A248                            
0000A248                            Obj25_Animate:				; XREF: Obj25_Index
0000A248 1178 FEC3 001A             		move.b	($FFFFFEC3).w,$1A(a0) ;	set frame
0000A24E 6100 0000                  		bsr.w	DisplaySprite
0000A252 3028 0032                  		move.w	$32(a0),d0
0000A256 0240 FF80                  		andi.w	#$FF80,d0
0000A25A 3238 F700                  		move.w	($FFFFF700).w,d1
0000A25E 0441 0080                  		subi.w	#$80,d1
0000A262 0241 FF80                  		andi.w	#$FF80,d1
0000A266 9041                       		sub.w	d1,d0
0000A268 0C40 0280                  		cmpi.w	#$280,d0
0000A26C 6200                       		bhi.s	Obj25_Delete
0000A26E 4E75                       		rts	
0000A270                            ; ===========================================================================
0000A270                            
0000A270                            Obj25_Collect:				; XREF: Obj25_Index
0000A270 5428 0024                  		addq.b	#2,$24(a0)
0000A274 117C 0000 0020             		move.b	#0,$20(a0)
0000A27A 117C 0001 0018             		move.b	#1,$18(a0)
0000A280 6100 0000                  		bsr.w	CollectRing
0000A284 45F8 FC00                  		lea	($FFFFFC00).w,a2
0000A288 7000                       		moveq	#0,d0
0000A28A 1028 0023                  		move.b	$23(a0),d0
0000A28E 1228 0034                  		move.b	$34(a0),d1
0000A292 03F2 0002                  		bset	d1,2(a2,d0.w)
0000A296                            
0000A296                            Obj25_Sparkle:				; XREF: Obj25_Index
0000A296 43F9 0000 0000             		lea	(Ani_obj25).l,a1
0000A29C 6100 0000                  		bsr.w	AnimateSprite
0000A2A0 6000 0000                  		bra.w	DisplaySprite
0000A2A4                            ; ===========================================================================
0000A2A4                            
0000A2A4                            Obj25_Delete:				; XREF: Obj25_Index
0000A2A4 6000 0000                  		bra.w	DeleteObject
0000A2A8                            
0000A2A8                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000A2A8                            
0000A2A8                            
0000A2A8                            CollectRing:				; XREF: Obj25_Collect
0000A2A8 5278 FE20                  		addq.w	#1,($FFFFFE20).w ; add 1 to rings
0000A2AC 0038 0001 FE1D             		ori.b	#1,($FFFFFE1D).w ; update the rings counter
0000A2B2 303C 00B5                  		move.w	#$B5,d0		; play ring sound
0000A2B6 0C78 0064 FE20             		cmpi.w	#100,($FFFFFE20).w ; do	you have < 100 rings?
0000A2BC 6500                       		bcs.s	Obj25_PlaySnd	; if yes, branch
0000A2BE 08F8 0001 FE1B             		bset	#1,($FFFFFE1B).w ; update lives	counter
0000A2C4 6700                       		beq.s	loc_9CA4
0000A2C6 0C78 00C8 FE20             		cmpi.w	#200,($FFFFFE20).w ; do	you have < 200 rings?
0000A2CC 6500                       		bcs.s	Obj25_PlaySnd	; if yes, branch
0000A2CE 08F8 0002 FE1B             		bset	#2,($FFFFFE1B).w ; update lives	counter
0000A2D4 6600                       		bne.s	Obj25_PlaySnd
0000A2D6                            
0000A2D6                            loc_9CA4:
0000A2D6 5238 FE12                  		addq.b	#1,($FFFFFE12).w ; add 1 to the	number of lives	you have
0000A2DA 5238 FE1C                  		addq.b	#1,($FFFFFE1C).w ; add 1 to the	lives counter
0000A2DE 303C 0088                  		move.w	#$88,d0		; play extra life music
0000A2E2                            
0000A2E2                            Obj25_PlaySnd:
0000A2E2 4EF9 0000 15C0             		jmp	(PlaySound_Special).l
0000A2E8                            ; End of function CollectRing
0000A2E8                            
0000A2E8                            ; ===========================================================================
0000A2E8                            ; ---------------------------------------------------------------------------
0000A2E8                            ; Object 37 - rings flying out of Sonic	when he's hit
0000A2E8                            ; ---------------------------------------------------------------------------
0000A2E8                            
0000A2E8                            Obj37:					; XREF: Obj_Index
0000A2E8 7000                       		moveq	#0,d0
0000A2EA 1028 0024                  		move.b	$24(a0),d0
0000A2EE 323B 0000                  		move.w	Obj37_Index(pc,d0.w),d1
0000A2F2 4EFB 1000                  		jmp	Obj37_Index(pc,d1.w)
0000A2F6                            ; ===========================================================================
0000A2F6 0000                       Obj37_Index:	dc.w Obj37_CountRings-Obj37_Index
0000A2F8 0000                       		dc.w Obj37_Bounce-Obj37_Index
0000A2FA 0000                       		dc.w Obj37_Collect-Obj37_Index
0000A2FC 0000                       		dc.w Obj37_Sparkle-Obj37_Index
0000A2FE 0000                       		dc.w Obj37_Delete-Obj37_Index
0000A300                            ; ===========================================================================
0000A300                            
0000A300                            Obj37_CountRings:			; XREF: Obj37_Index
0000A300 2248                       		movea.l	a0,a1
0000A302 7A00                       		moveq	#0,d5
0000A304 3A38 FE20                  		move.w	($FFFFFE20).w,d5 ; check number	of rings you have
0000A308 7020                       		moveq	#32,d0
0000A30A BA40                       		cmp.w	d0,d5		; do you have 32 or more?
0000A30C 6500                       		bcs.s	loc_9CDE	; if not, branch
0000A30E 3A00                       		move.w	d0,d5		; if yes, set d5 to 32
0000A310                            
0000A310                            loc_9CDE:
0000A310 5345                       		subq.w	#1,d5
0000A312 383C 0288                  		move.w	#$288,d4
0000A316 6000                       		bra.s	Obj37_MakeRings
0000A318                            ; ===========================================================================
0000A318                            
0000A318                            Obj37_Loop:
0000A318 6100 0000                  		bsr.w	SingleObjLoad
0000A31C 6600 0000                  		bne.w	Obj37_ResetCounter
0000A320                            
0000A320                            Obj37_MakeRings:			; XREF: Obj37_CountRings
0000A320 12BC 0037                  		move.b	#$37,0(a1)	; load bouncing	ring object
0000A324 5429 0024                  		addq.b	#2,$24(a1)
0000A328 137C 0008 0016             		move.b	#8,$16(a1)
0000A32E 137C 0008 0017             		move.b	#8,$17(a1)
0000A334 3368 0008 0008             		move.w	8(a0),8(a1)
0000A33A 3368 000C 000C             		move.w	$C(a0),$C(a1)
0000A340 237C 0000 0000 0004        		move.l	#Map_obj25,4(a1)
0000A348 337C 27B2 0002             		move.w	#$27B2,2(a1)
0000A34E 137C 0004 0001             		move.b	#4,1(a1)
0000A354 137C 0003 0018             		move.b	#3,$18(a1)
0000A35A 137C 0047 0020             		move.b	#$47,$20(a1)
0000A360 137C 0008 0019             		move.b	#8,$19(a1)
0000A366 11FC 00FF FEC6             		move.b	#-1,($FFFFFEC6).w
0000A36C 4A44                       		tst.w	d4
0000A36E 6B00                       		bmi.s	loc_9D62
0000A370 3004                       		move.w	d4,d0
0000A372 6100 88F0                  		bsr.w	CalcSine
0000A376 3404                       		move.w	d4,d2
0000A378 E04A                       		lsr.w	#8,d2
0000A37A E560                       		asl.w	d2,d0
0000A37C E561                       		asl.w	d2,d1
0000A37E 3400                       		move.w	d0,d2
0000A380 3601                       		move.w	d1,d3
0000A382 0604 0010                  		addi.b	#$10,d4
0000A386 6400                       		bcc.s	loc_9D62
0000A388 0444 0080                  		subi.w	#$80,d4
0000A38C 6400                       		bcc.s	loc_9D62
0000A38E 383C 0288                  		move.w	#$288,d4
0000A392                            
0000A392                            loc_9D62:
0000A392 3342 0010                  		move.w	d2,$10(a1)
0000A396 3343 0012                  		move.w	d3,$12(a1)
0000A39A 4442                       		neg.w	d2
0000A39C 4444                       		neg.w	d4
0000A39E 51CD FF78                  		dbf	d5,Obj37_Loop	; repeat for number of rings (max 31)
0000A3A2                            
0000A3A2                            Obj37_ResetCounter:			; XREF: Obj37_Loop
0000A3A2 31FC 0000 FE20             		move.w	#0,($FFFFFE20).w ; reset number	of rings to zero
0000A3A8 11FC 0080 FE1D             		move.b	#$80,($FFFFFE1D).w ; update ring counter
0000A3AE 11FC 0000 FE1B             		move.b	#0,($FFFFFE1B).w
0000A3B4 303C 00C6                  		move.w	#$C6,d0
0000A3B8 4EB9 0000 15C0             		jsr	(PlaySound_Special).l ;	play ring loss sound
0000A3BE                            
0000A3BE                            Obj37_Bounce:				; XREF: Obj37_Index
0000A3BE 1178 FEC7 001A             		move.b	($FFFFFEC7).w,$1A(a0)
0000A3C4 6100 0000                  		bsr.w	SpeedToPos
0000A3C8 0668 0018 0012             		addi.w	#$18,$12(a0)
0000A3CE 6B00                       		bmi.s	Obj37_ChkDel
0000A3D0 1038 FE0F                  		move.b	($FFFFFE0F).w,d0
0000A3D4 D007                       		add.b	d7,d0
0000A3D6 0200 0003                  		andi.b	#3,d0
0000A3DA 6600                       		bne.s	Obj37_ChkDel
0000A3DC 4EB9 0000 0000             		jsr	ObjHitFloor
0000A3E2 4A41                       		tst.w	d1
0000A3E4 6A00                       		bpl.s	Obj37_ChkDel
0000A3E6 D368 000C                  		add.w	d1,$C(a0)
0000A3EA 3028 0012                  		move.w	$12(a0),d0
0000A3EE E440                       		asr.w	#2,d0
0000A3F0 9168 0012                  		sub.w	d0,$12(a0)
0000A3F4 4468 0012                  		neg.w	$12(a0)
0000A3F8                            
0000A3F8                            Obj37_ChkDel:				; XREF: Obj37_Bounce
0000A3F8 4A38 FEC6                  		tst.b	($FFFFFEC6).w
0000A3FC 6700                       		beq.s	Obj37_Delete
0000A3FE 3038 F72E                  		move.w	($FFFFF72E).w,d0
0000A402 0640 00E0                  		addi.w	#$E0,d0
0000A406 B068 000C                  		cmp.w	$C(a0),d0	; has object moved below level boundary?
0000A40A 6500                       		bcs.s	Obj37_Delete	; if yes, branch
0000A40C 6000 0000                  		bra.w	DisplaySprite
0000A410                            ; ===========================================================================
0000A410                            
0000A410                            Obj37_Collect:				; XREF: Obj37_Index
0000A410 5428 0024                  		addq.b	#2,$24(a0)
0000A414 117C 0000 0020             		move.b	#0,$20(a0)
0000A41A 117C 0001 0018             		move.b	#1,$18(a0)
0000A420 6100 FE86                  		bsr.w	CollectRing
0000A424                            
0000A424                            Obj37_Sparkle:				; XREF: Obj37_Index
0000A424 43F9 0000 0000             		lea	(Ani_obj25).l,a1
0000A42A 6100 0000                  		bsr.w	AnimateSprite
0000A42E 6000 0000                  		bra.w	DisplaySprite
0000A432                            ; ===========================================================================
0000A432                            
0000A432                            Obj37_Delete:				; XREF: Obj37_Index
0000A432 6000 0000                  		bra.w	DeleteObject
0000A436                            ; ===========================================================================
0000A436                            ; ---------------------------------------------------------------------------
0000A436                            ; Object 4B - giant ring for entry to special stage
0000A436                            ; ---------------------------------------------------------------------------
0000A436                            
0000A436                            Obj4B:					; XREF: Obj_Index
0000A436 7000                       		moveq	#0,d0
0000A438 1028 0024                  		move.b	$24(a0),d0
0000A43C 323B 0000                  		move.w	Obj4B_Index(pc,d0.w),d1
0000A440 4EFB 1000                  		jmp	Obj4B_Index(pc,d1.w)
0000A444                            ; ===========================================================================
0000A444 0000                       Obj4B_Index:	dc.w Obj4B_Main-Obj4B_Index
0000A446 0000                       		dc.w Obj4B_Animate-Obj4B_Index
0000A448 0000                       		dc.w Obj4B_Collect-Obj4B_Index
0000A44A 0000                       		dc.w Obj4B_Delete-Obj4B_Index
0000A44C                            ; ===========================================================================
0000A44C                            
0000A44C                            Obj4B_Main:				; XREF: Obj4B_Index
0000A44C 217C 0000 0000 0004        		move.l	#Map_obj4B,4(a0)
0000A454 317C 2400 0002             		move.w	#$2400,2(a0)
0000A45A 0028 0004 0001             		ori.b	#4,1(a0)
0000A460 117C 0040 0019             		move.b	#$40,$19(a0)
0000A466 4A28 0001                  		tst.b	1(a0)
0000A46A 6A00                       		bpl.s	Obj4B_Animate
0000A46C 0C38 0006 FE57             		cmpi.b	#6,($FFFFFE57).w ; do you have 6 emeralds?
0000A472 6700 0000                  		beq.w	Obj4B_Delete	; if yes, branch
0000A476 0C78 0032 FE20             		cmpi.w	#50,($FFFFFE20).w ; do you have	at least 50 rings?
0000A47C 6400                       		bcc.s	Obj4B_Okay	; if yes, branch
0000A47E 4E75                       		rts	
0000A480                            ; ===========================================================================
0000A480                            
0000A480                            Obj4B_Okay:				; XREF: Obj4B_Main
0000A480 5428 0024                  		addq.b	#2,$24(a0)
0000A484 117C 0002 0018             		move.b	#2,$18(a0)
0000A48A 117C 0052 0020             		move.b	#$52,$20(a0)
0000A490 31FC 0C40 F7BE             		move.w	#$C40,($FFFFF7BE).w
0000A496                            
0000A496                            Obj4B_Animate:				; XREF: Obj4B_Index
0000A496 1178 FEC3 001A             		move.b	($FFFFFEC3).w,$1A(a0)
0000A49C 3028 0008                  		move.w	8(a0),d0
0000A4A0 0240 FF80                  		andi.w	#$FF80,d0
0000A4A4 3238 F700                  		move.w	($FFFFF700).w,d1
0000A4A8 0441 0080                  		subi.w	#$80,d1
0000A4AC 0241 FF80                  		andi.w	#$FF80,d1
0000A4B0 9041                       		sub.w	d1,d0
0000A4B2 0C40 0280                  		cmpi.w	#$280,d0
0000A4B6 6200 0000                  		bhi.w	DeleteObject
0000A4BA 6000 0000                  		bra.w	DisplaySprite
0000A4BE                            ; ===========================================================================
0000A4BE                            
0000A4BE                            Obj4B_Collect:				; XREF: Obj4B_Index
0000A4BE 5528 0024                  		subq.b	#2,$24(a0)
0000A4C2 117C 0000 0020             		move.b	#0,$20(a0)
0000A4C8 6100 0000                  		bsr.w	SingleObjLoad
0000A4CC 6600 0000                  		bne.w	Obj4B_PlaySnd
0000A4D0 12BC 007C                  		move.b	#$7C,0(a1)	; load giant ring flash	object
0000A4D4 3368 0008 0008             		move.w	8(a0),8(a1)
0000A4DA 3368 000C 000C             		move.w	$C(a0),$C(a1)
0000A4E0 2348 003C                  		move.l	a0,$3C(a1)
0000A4E4 3038 D008                  		move.w	($FFFFD008).w,d0
0000A4E8 B068 0008                  		cmp.w	8(a0),d0	; has Sonic come from the left?
0000A4EC 6500                       		bcs.s	Obj4B_PlaySnd	; if yes, branch
0000A4EE 08E9 0000 0001             		bset	#0,1(a1)	; reverse flash	object
0000A4F4                            
0000A4F4                            Obj4B_PlaySnd:
0000A4F4 303C 00C3                  		move.w	#$C3,d0
0000A4F8 4EB9 0000 15C0             		jsr	(PlaySound_Special).l ;	play giant ring	sound
0000A4FE 6096                       		bra.s	Obj4B_Animate
0000A500                            ; ===========================================================================
0000A500                            
0000A500                            Obj4B_Delete:				; XREF: Obj4B_Index
0000A500 6000 0000                  		bra.w	DeleteObject
0000A504                            ; ===========================================================================
0000A504                            ; ---------------------------------------------------------------------------
0000A504                            ; Object 7C - flash effect when	you collect the	giant ring
0000A504                            ; ---------------------------------------------------------------------------
0000A504                            
0000A504                            Obj7C:					; XREF: Obj_Index
0000A504 7000                       		moveq	#0,d0
0000A506 1028 0024                  		move.b	$24(a0),d0
0000A50A 323B 0000                  		move.w	Obj7C_Index(pc,d0.w),d1
0000A50E 4EFB 1000                  		jmp	Obj7C_Index(pc,d1.w)
0000A512                            ; ===========================================================================
0000A512 0000                       Obj7C_Index:	dc.w Obj7C_Main-Obj7C_Index
0000A514 0000                       		dc.w Obj7C_ChkDel-Obj7C_Index
0000A516 0000                       		dc.w Obj7C_Delete-Obj7C_Index
0000A518                            ; ===========================================================================
0000A518                            
0000A518                            Obj7C_Main:				; XREF: Obj7C_Index
0000A518 5428 0024                  		addq.b	#2,$24(a0)
0000A51C 217C 0000 0000 0004        		move.l	#Map_obj7C,4(a0)
0000A524 317C 2462 0002             		move.w	#$2462,2(a0)
0000A52A 0028 0004 0001             		ori.b	#4,1(a0)
0000A530 117C 0000 0018             		move.b	#0,$18(a0)
0000A536 117C 0020 0019             		move.b	#$20,$19(a0)
0000A53C 117C 00FF 001A             		move.b	#$FF,$1A(a0)
0000A542                            
0000A542                            Obj7C_ChkDel:				; XREF: Obj7C_Index
0000A542 6100                       		bsr.s	Obj7C_Collect
0000A544 3028 0008                  		move.w	8(a0),d0
0000A548 0240 FF80                  		andi.w	#$FF80,d0
0000A54C 3238 F700                  		move.w	($FFFFF700).w,d1
0000A550 0441 0080                  		subi.w	#$80,d1
0000A554 0241 FF80                  		andi.w	#$FF80,d1
0000A558 9041                       		sub.w	d1,d0
0000A55A 0C40 0280                  		cmpi.w	#$280,d0
0000A55E 6200 0000                  		bhi.w	DeleteObject
0000A562 6000 0000                  		bra.w	DisplaySprite
0000A566                            
0000A566                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000A566                            
0000A566                            
0000A566                            Obj7C_Collect:				; XREF: Obj7C_ChkDel
0000A566 5328 001E                  		subq.b	#1,$1E(a0)
0000A56A 6A00                       		bpl.s	locret_9F76
0000A56C 117C 0001 001E             		move.b	#1,$1E(a0)
0000A572 5228 001A                  		addq.b	#1,$1A(a0)
0000A576 0C28 0008 001A             		cmpi.b	#8,$1A(a0)	; has animation	finished?
0000A57C 6400                       		bcc.s	Obj7C_End	; if yes, branch
0000A57E 0C28 0003 001A             		cmpi.b	#3,$1A(a0)	; is 3rd frame displayed?
0000A584 6600                       		bne.s	locret_9F76	; if not, branch
0000A586 2268 003C                  		movea.l	$3C(a0),a1
0000A58A 137C 0006 0024             		move.b	#6,$24(a1)	; delete giant ring object (Obj4B)
0000A590 11FC 001C D01C             		move.b	#$1C,($FFFFD01C).w ; make Sonic	invisible
0000A596 11FC 0001 F7CD             		move.b	#1,($FFFFF7CD).w ; stop	Sonic getting bonuses
0000A59C 4238 FE2D                  		clr.b	($FFFFFE2D).w	; remove invincibility
0000A5A0 4238 FE2C                  		clr.b	($FFFFFE2C).w	; remove shield
0000A5A4                            
0000A5A4                            locret_9F76:
0000A5A4 4E75                       		rts	
0000A5A6                            ; ===========================================================================
0000A5A6                            
0000A5A6                            Obj7C_End:				; XREF: Obj7C_Collect
0000A5A6 5428 0024                  		addq.b	#2,$24(a0)
0000A5AA 31FC 0000 D000             		move.w	#0,($FFFFD000).w ; remove Sonic	object
0000A5B0 588F                       		addq.l	#4,sp
0000A5B2 4E75                       		rts	
0000A5B4                            ; End of function Obj7C_Collect
0000A5B4                            
0000A5B4                            ; ===========================================================================
0000A5B4                            
0000A5B4                            Obj7C_Delete:				; XREF: Obj7C_Index
0000A5B4 6000 0000                  		bra.w	DeleteObject
0000A5B8                            ; ===========================================================================
0000A5B8                            Ani_obj25:
0000A5B8                            	include "_anim\obj25.asm"
0000A5B8                            ; ---------------------------------------------------------------------------
0000A5B8                            ; Animation script - ring
0000A5B8                            ; ---------------------------------------------------------------------------
0000A5B8 0000                       		dc.w byte_9F8C-Ani_obj25
0000A5BA 0504 0506 07FC             byte_9F8C:	dc.b 5,	4, 5, 6, 7, $FC
0000A5C0                            		even
0000A5C0                            		even
0000A5C0                            
0000A5C0                            ; ---------------------------------------------------------------------------
0000A5C0                            ; Sprite mappings - rings
0000A5C0                            ; ---------------------------------------------------------------------------
0000A5C0                            Map_obj25:
0000A5C0                            	include "_maps\obj25.asm"
0000A5C0                            ; ---------------------------------------------------------------------------
0000A5C0                            ; Sprite mappings - rings
0000A5C0                            ; ---------------------------------------------------------------------------
0000A5C0 0000 0000                  		dc.w byte_9FA2-Map_obj25, byte_9FA8-Map_obj25
0000A5C4 0000 0000                  		dc.w byte_9FAE-Map_obj25, byte_9FB4-Map_obj25
0000A5C8 0000 0000                  		dc.w byte_9FBA-Map_obj25, byte_9FC0-Map_obj25
0000A5CC 0000 0000                  		dc.w byte_9FC6-Map_obj25, byte_9FCC-Map_obj25
0000A5D0 01                         byte_9FA2:	dc.b 1
0000A5D1 F805 0000 F8               		dc.b $F8, 5, 0,	0, $F8
0000A5D6 01                         byte_9FA8:	dc.b 1
0000A5D7 F805 0004 F8               		dc.b $F8, 5, 0,	4, $F8
0000A5DC 01                         byte_9FAE:	dc.b 1
0000A5DD F801 0008 FC               		dc.b $F8, 1, 0,	8, $FC
0000A5E2 01                         byte_9FB4:	dc.b 1
0000A5E3 F805 0804 F8               		dc.b $F8, 5, 8,	4, $F8
0000A5E8 01                         byte_9FBA:	dc.b 1
0000A5E9 F805 000A F8               		dc.b $F8, 5, 0,	$A, $F8
0000A5EE 01                         byte_9FC0:	dc.b 1
0000A5EF F805 180A F8               		dc.b $F8, 5, $18, $A, $F8
0000A5F4 01                         byte_9FC6:	dc.b 1
0000A5F5 F805 080A F8               		dc.b $F8, 5, 8,	$A, $F8
0000A5FA 01                         byte_9FCC:	dc.b 1
0000A5FB F805 100A F8               		dc.b $F8, 5, $10, $A, $F8
0000A600                            		even
0000A600                            		even
0000A600                            
0000A600                            ; ---------------------------------------------------------------------------
0000A600                            ; Sprite mappings - giant ring
0000A600                            ; ---------------------------------------------------------------------------
0000A600                            Map_obj4B:
0000A600                            	include "_maps\obj4B.asm"
0000A600                            ; ---------------------------------------------------------------------------
0000A600                            ; Sprite mappings - giant ring
0000A600                            ; ---------------------------------------------------------------------------
0000A600 0000 0000                  		dc.w byte_9FDA-Map_obj4B, byte_A00D-Map_obj4B
0000A604 0000 0000                  		dc.w byte_A036-Map_obj4B, byte_A04B-Map_obj4B
0000A608 0A                         byte_9FDA:	dc.b $A
0000A609 E008 0000 E8               		dc.b $E0, 8, 0,	0, $E8
0000A60E E008 0003 00               		dc.b $E0, 8, 0,	3, 0
0000A613 E80C 0006 E0               		dc.b $E8, $C, 0, 6, $E0
0000A618 E80C 000A 00               		dc.b $E8, $C, 0, $A, 0
0000A61D F007 000E E0               		dc.b $F0, 7, 0,	$E, $E0
0000A622 F007 0016 10               		dc.b $F0, 7, 0,	$16, $10
0000A627 100C 001E E0               		dc.b $10, $C, 0, $1E, $E0
0000A62C 100C 0022 00               		dc.b $10, $C, 0, $22, 0
0000A631 1808 0026 E8               		dc.b $18, 8, 0,	$26, $E8
0000A636 1808 0029 00               		dc.b $18, 8, 0,	$29, 0
0000A63B 08                         byte_A00D:	dc.b 8
0000A63C E00C 002C F0               		dc.b $E0, $C, 0, $2C, $F0
0000A641 E808 0030 E8               		dc.b $E8, 8, 0,	$30, $E8
0000A646 E809 0033 00               		dc.b $E8, 9, 0,	$33, 0
0000A64B F007 0039 E8               		dc.b $F0, 7, 0,	$39, $E8
0000A650 F805 0041 08               		dc.b $F8, 5, 0,	$41, 8
0000A655 0809 0045 00               		dc.b 8,	9, 0, $45, 0
0000A65A 1008 004B E8               		dc.b $10, 8, 0,	$4B, $E8
0000A65F 180C 004E F0               		dc.b $18, $C, 0, $4E, $F0
0000A664 04                         byte_A036:	dc.b 4
0000A665 E007 0052 F4               		dc.b $E0, 7, 0,	$52, $F4
0000A66A E003 0852 04               		dc.b $E0, 3, 8,	$52, 4
0000A66F 0007 005A F4               		dc.b 0,	7, 0, $5A, $F4
0000A674 0003 085A 04               		dc.b 0,	3, 8, $5A, 4
0000A679 08                         byte_A04B:	dc.b 8
0000A67A E00C 082C F0               		dc.b $E0, $C, 8, $2C, $F0
0000A67F E808 0830 00               		dc.b $E8, 8, 8,	$30, 0
0000A684 E809 0833 E8               		dc.b $E8, 9, 8,	$33, $E8
0000A689 F007 0839 08               		dc.b $F0, 7, 8,	$39, 8
0000A68E F805 0841 E8               		dc.b $F8, 5, 8,	$41, $E8
0000A693 0809 0845 E8               		dc.b 8,	9, 8, $45, $E8
0000A698 1008 084B 00               		dc.b $10, 8, 8,	$4B, 0
0000A69D 180C 084E F0               		dc.b $18, $C, 8, $4E, $F0
0000A6A2                            		even
0000A6A2                            		even
0000A6A2                            
0000A6A2                            ; ---------------------------------------------------------------------------
0000A6A2                            ; Sprite mappings - flash effect when you collect the giant ring
0000A6A2                            ; ---------------------------------------------------------------------------
0000A6A2                            Map_obj7C:
0000A6A2                            	include "_maps\obj7C.asm"
0000A6A2                            ; ---------------------------------------------------------------------------
0000A6A2                            ; Sprite mappings - flash effect when you collect the giant ring
0000A6A2                            ; ---------------------------------------------------------------------------
0000A6A2 0000 0000                  		dc.w byte_A084-Map_obj7C, byte_A08F-Map_obj7C
0000A6A6 0000 0000                  		dc.w byte_A0A4-Map_obj7C, byte_A0B9-Map_obj7C
0000A6AA 0000 0000                  		dc.w byte_A0CE-Map_obj7C, byte_A0E3-Map_obj7C
0000A6AE 0000 0000                  		dc.w byte_A0F8-Map_obj7C, byte_A103-Map_obj7C
0000A6B2 02                         byte_A084:	dc.b 2
0000A6B3 E00F 0000 00               		dc.b $E0, $F, 0, 0, 0
0000A6B8 000F 1000 00               		dc.b 0,	$F, $10, 0, 0
0000A6BD 04                         byte_A08F:	dc.b 4
0000A6BE E00F 0010 F0               		dc.b $E0, $F, 0, $10, $F0
0000A6C3 E007 0020 10               		dc.b $E0, 7, 0,	$20, $10
0000A6C8 000F 1010 F0               		dc.b 0,	$F, $10, $10, $F0
0000A6CD 0007 1020 10               		dc.b 0,	7, $10,	$20, $10
0000A6D2 04                         byte_A0A4:	dc.b 4
0000A6D3 E00F 0028 E8               		dc.b $E0, $F, 0, $28, $E8
0000A6D8 E00B 0038 08               		dc.b $E0, $B, 0, $38, 8
0000A6DD 000F 1028 E8               		dc.b 0,	$F, $10, $28, $E8
0000A6E2 000B 1038 08               		dc.b 0,	$B, $10, $38, 8
0000A6E7 04                         byte_A0B9:	dc.b 4
0000A6E8 E00F 0834 E0               		dc.b $E0, $F, 8, $34, $E0
0000A6ED E00F 0034 00               		dc.b $E0, $F, 0, $34, 0
0000A6F2 000F 1834 E0               		dc.b 0,	$F, $18, $34, $E0
0000A6F7 000F 1034 00               		dc.b 0,	$F, $10, $34, 0
0000A6FC 04                         byte_A0CE:	dc.b 4
0000A6FD E00B 0838 E0               		dc.b $E0, $B, 8, $38, $E0
0000A702 E00F 0828 F8               		dc.b $E0, $F, 8, $28, $F8
0000A707 000B 1838 E0               		dc.b 0,	$B, $18, $38, $E0
0000A70C 000F 1828 F8               		dc.b 0,	$F, $18, $28, $F8
0000A711 04                         byte_A0E3:	dc.b 4
0000A712 E007 0820 E0               		dc.b $E0, 7, 8,	$20, $E0
0000A717 E00F 0810 F0               		dc.b $E0, $F, 8, $10, $F0
0000A71C 0007 1820 E0               		dc.b 0,	7, $18,	$20, $E0
0000A721 000F 1810 F0               		dc.b 0,	$F, $18, $10, $F0
0000A726 02                         byte_A0F8:	dc.b 2
0000A727 E00F 0800 E0               		dc.b $E0, $F, 8, 0, $E0
0000A72C 000F 1800 E0               		dc.b 0,	$F, $18, 0, $E0
0000A731 04                         byte_A103:	dc.b 4
0000A732 E00F 0044 E0               		dc.b $E0, $F, 0, $44, $E0
0000A737 E00F 0844 00               		dc.b $E0, $F, 8, $44, 0
0000A73C 000F 1044 E0               		dc.b 0,	$F, $10, $44, $E0
0000A741 000F 1844 00               		dc.b 0,	$F, $18, $44, 0
0000A746                            		even
0000A746                            		even
0000A746                            
0000A746                            ; ===========================================================================
0000A746                            ; ---------------------------------------------------------------------------
0000A746                            ; Object 26 - monitors
0000A746                            ; ---------------------------------------------------------------------------
0000A746                            
0000A746                            Obj26:					; XREF: Obj_Index
0000A746 7000                       		moveq	#0,d0
0000A748 1028 0024                  		move.b	$24(a0),d0
0000A74C 323B 0000                  		move.w	Obj26_Index(pc,d0.w),d1
0000A750 4EFB 1000                  		jmp	Obj26_Index(pc,d1.w)
0000A754                            ; ===========================================================================
0000A754 0000                       Obj26_Index:	dc.w Obj26_Main-Obj26_Index
0000A756 0000                       		dc.w Obj26_Solid-Obj26_Index
0000A758 0000                       		dc.w Obj26_BreakOpen-Obj26_Index
0000A75A 0000                       		dc.w Obj26_Animate-Obj26_Index
0000A75C 0000                       		dc.w Obj26_Display-Obj26_Index
0000A75E                            ; ===========================================================================
0000A75E                            
0000A75E                            Obj26_Main:				; XREF: Obj26_Index
0000A75E 5428 0024                  		addq.b	#2,$24(a0)
0000A762 117C 000E 0016             		move.b	#$E,$16(a0)
0000A768 117C 000E 0017             		move.b	#$E,$17(a0)
0000A76E 217C 0000 0000 0004        		move.l	#Map_obj26,4(a0)
0000A776 317C 0680 0002             		move.w	#$680,2(a0)
0000A77C 117C 0004 0001             		move.b	#4,1(a0)
0000A782 117C 0003 0018             		move.b	#3,$18(a0)
0000A788 117C 000F 0019             		move.b	#$F,$19(a0)
0000A78E 45F8 FC00                  		lea	($FFFFFC00).w,a2
0000A792 7000                       		moveq	#0,d0
0000A794 1028 0023                  		move.b	$23(a0),d0
0000A798 08B2 0007 0002             		bclr	#7,2(a2,d0.w)
0000A79E 0832 0000 0002             		btst	#0,2(a2,d0.w)	; has monitor been broken?
0000A7A4 6700                       		beq.s	Obj26_NotBroken	; if not, branch
0000A7A6 117C 0008 0024             		move.b	#8,$24(a0)	; run "Obj26_Display" routine
0000A7AC 117C 000B 001A             		move.b	#$B,$1A(a0)	; use broken monitor frame
0000A7B2 4E75                       		rts	
0000A7B4                            ; ===========================================================================
0000A7B4                            
0000A7B4                            Obj26_NotBroken:			; XREF: Obj26_Main
0000A7B4 117C 0046 0020             		move.b	#$46,$20(a0)
0000A7BA 1168 0028 001C             		move.b	$28(a0),$1C(a0)
0000A7C0                            
0000A7C0                            Obj26_Solid:				; XREF: Obj26_Index
0000A7C0 1028 0025                  		move.b	$25(a0),d0	; is monitor set to fall?
0000A7C4 6700                       		beq.s	loc_A1EC	; if not, branch
0000A7C6 5500                       		subq.b	#2,d0
0000A7C8 6600                       		bne.s	Obj26_Fall
0000A7CA 7200                       		moveq	#0,d1
0000A7CC 1228 0019                  		move.b	$19(a0),d1
0000A7D0 0641 000B                  		addi.w	#$B,d1
0000A7D4 6100 D38A                  		bsr.w	ExitPlatform
0000A7D8 0829 0003 0022             		btst	#3,$22(a1)
0000A7DE 6600 0000                  		bne.w	loc_A1BC
0000A7E2 4228 0025                  		clr.b	$25(a0)
0000A7E6 6000 0000                  		bra.w	Obj26_Animate
0000A7EA                            ; ===========================================================================
0000A7EA                            
0000A7EA                            loc_A1BC:				; XREF: Obj26_Solid
0000A7EA 363C 0010                  		move.w	#$10,d3
0000A7EE 3428 0008                  		move.w	8(a0),d2
0000A7F2 6100 D8CA                  		bsr.w	MvSonicOnPtfm
0000A7F6 6000 0000                  		bra.w	Obj26_Animate
0000A7FA                            ; ===========================================================================
0000A7FA                            
0000A7FA                            Obj26_Fall:				; XREF: Obj26_Solid
0000A7FA 6100 0000                  		bsr.w	ObjectFall
0000A7FE 4EB9 0000 0000             		jsr	ObjHitFloor
0000A804 4A41                       		tst.w	d1
0000A806 6A00 0000                  		bpl.w	Obj26_Animate
0000A80A D368 000C                  		add.w	d1,$C(a0)
0000A80E 4268 0012                  		clr.w	$12(a0)
0000A812 4228 0025                  		clr.b	$25(a0)
0000A816 6000 0000                  		bra.w	Obj26_Animate
0000A81A                            ; ===========================================================================
0000A81A                            
0000A81A                            loc_A1EC:				; XREF: Obj26_Solid
0000A81A 323C 001A                  		move.w	#$1A,d1
0000A81E 343C 000F                  		move.w	#$F,d2
0000A822 6100 0000                  		bsr.w	Obj26_SolidSides
0000A826 6700 0000                  		beq.w	loc_A25C
0000A82A 4A69 0012                  		tst.w	$12(a1)
0000A82E 6B00                       		bmi.s	loc_A20A
0000A830 0C29 0002 001C             		cmpi.b	#2,$1C(a1)	; is Sonic rolling?
0000A836 6700                       		beq.s	loc_A25C	; if yes, branch
0000A838                            
0000A838                            loc_A20A:
0000A838 4A41                       		tst.w	d1
0000A83A 6A00                       		bpl.s	loc_A220
0000A83C 9769 000C                  		sub.w	d3,$C(a1)
0000A840 6100 D20C                  		bsr.w	loc_74AE
0000A844 117C 0002 0025             		move.b	#2,$25(a0)
0000A84A 6000 0000                  		bra.w	Obj26_Animate
0000A84E                            ; ===========================================================================
0000A84E                            
0000A84E                            loc_A220:
0000A84E 4A40                       		tst.w	d0
0000A850 6700 0000                  		beq.w	loc_A246
0000A854 6B00                       		bmi.s	loc_A230
0000A856 4A69 0010                  		tst.w	$10(a1)
0000A85A 6B00                       		bmi.s	loc_A246
0000A85C 6000                       		bra.s	loc_A236
0000A85E                            ; ===========================================================================
0000A85E                            
0000A85E                            loc_A230:
0000A85E 4A69 0010                  		tst.w	$10(a1)
0000A862 6A00                       		bpl.s	loc_A246
0000A864                            
0000A864                            loc_A236:
0000A864 9169 0008                  		sub.w	d0,8(a1)
0000A868 337C 0000 0014             		move.w	#0,$14(a1)
0000A86E 337C 0000 0010             		move.w	#0,$10(a1)
0000A874                            
0000A874                            loc_A246:
0000A874 0829 0001 0022             		btst	#1,$22(a1)
0000A87A 6600                       		bne.s	loc_A26A
0000A87C 08E9 0005 0022             		bset	#5,$22(a1)
0000A882 08E8 0005 0022             		bset	#5,$22(a0)
0000A888 6000                       		bra.s	Obj26_Animate
0000A88A                            ; ===========================================================================
0000A88A                            
0000A88A                            loc_A25C:
0000A88A 0828 0005 0022             		btst	#5,$22(a0)
0000A890 6700                       		beq.s	Obj26_Animate
0000A892 337C 0001 001C             		move.w	#1,$1C(a1)
0000A898                            
0000A898                            loc_A26A:
0000A898 08A8 0005 0022             		bclr	#5,$22(a0)
0000A89E 08A9 0005 0022             		bclr	#5,$22(a1)
0000A8A4                            
0000A8A4                            Obj26_Animate:				; XREF: Obj26_Index
0000A8A4 43F9 0000 0000             		lea	(Ani_obj26).l,a1
0000A8AA 6100 0000                  		bsr.w	AnimateSprite
0000A8AE                            
0000A8AE                            Obj26_Display:				; XREF: Obj26_Index
0000A8AE 6100 0000                  		bsr.w	DisplaySprite
0000A8B2 3028 0008                  		move.w	8(a0),d0
0000A8B6 0240 FF80                  		andi.w	#$FF80,d0
0000A8BA 3238 F700                  		move.w	($FFFFF700).w,d1
0000A8BE 0441 0080                  		subi.w	#$80,d1
0000A8C2 0241 FF80                  		andi.w	#$FF80,d1
0000A8C6 9041                       		sub.w	d1,d0
0000A8C8 0C40 0280                  		cmpi.w	#$280,d0
0000A8CC 6200 0000                  		bhi.w	DeleteObject
0000A8D0 4E75                       		rts	
0000A8D2                            ; ===========================================================================
0000A8D2                            
0000A8D2                            Obj26_BreakOpen:			; XREF: Obj26_Index
0000A8D2 5428 0024                  		addq.b	#2,$24(a0)
0000A8D6 117C 0000 0020             		move.b	#0,$20(a0)
0000A8DC 6100 0000                  		bsr.w	SingleObjLoad
0000A8E0 6600                       		bne.s	Obj26_Explode
0000A8E2 12BC 002E                  		move.b	#$2E,0(a1)	; load monitor contents	object
0000A8E6 3368 0008 0008             		move.w	8(a0),8(a1)
0000A8EC 3368 000C 000C             		move.w	$C(a0),$C(a1)
0000A8F2 1368 001C 001C             		move.b	$1C(a0),$1C(a1)
0000A8F8 7400                       		moveq	#0,d2	; GMZ
0000A8FA 7205                       		moveq	#5,d1	; GMZ: Amount of explosion objects
0000A8FC                            
0000A8FC                            Obj26_Explode:
0000A8FC 6100 0000                  		bsr.w	SingleObjLoad
0000A900 6600                       		bne.s	Obj26_SetBroken
0000A902 12BC 0027                  		move.b	#$27,0(a1)	; GMZ: Load explosion object
0000A906 5429 0024                  		addq.b	#2,$24(a1)
0000A90A 1342 0028                  		move.b	d2,$28(a1)	; GMZ: Set subtype
0000A90E 3368 0008 0008             		move.w	8(a0),8(a1)
0000A914 3368 000C 000C             		move.w	$C(a0),$C(a1)
0000A91A                            
0000A91A                            Obj26_NextExplosion:
0000A91A 5802                       		addq.b	#4,d2
0000A91C 51C9 FFDE                  		dbf	d1,Obj26_Explode
0000A920                            
0000A920                            Obj26_SetBroken:
0000A920 45F8 FC00                  		lea	($FFFFFC00).w,a2
0000A924 7000                       		moveq	#0,d0
0000A926 1028 0023                  		move.b	$23(a0),d0
0000A92A 08F2 0000 0002             		bset	#0,2(a2,d0.w)
0000A930 117C 0009 001C             		move.b	#9,$1C(a0)	; set monitor type to broken
0000A936 6000 0000                  		bra.w	DisplaySprite
0000A93A                            ; ===========================================================================
0000A93A                            ; ---------------------------------------------------------------------------
0000A93A                            ; Object 2E - contents of monitors
0000A93A                            ; ---------------------------------------------------------------------------
0000A93A                            
0000A93A                            Obj2E:					; XREF: Obj_Index
0000A93A 7000                       		moveq	#0,d0
0000A93C 1028 0024                  		move.b	$24(a0),d0
0000A940 323B 0000                  		move.w	Obj2E_Index(pc,d0.w),d1
0000A944 4EBB 1000                  		jsr	Obj2E_Index(pc,d1.w)
0000A948 6000 0000                  		bra.w	DisplaySprite
0000A94C                            ; ===========================================================================
0000A94C 0000                       Obj2E_Index:	dc.w Obj2E_Main-Obj2E_Index
0000A94E 0000                       		dc.w Obj2E_Move-Obj2E_Index
0000A950 0000                       		dc.w Obj2E_Delete-Obj2E_Index
0000A952                            ; ===========================================================================
0000A952                            
0000A952                            Obj2E_Main:				; XREF: Obj2E_Index
0000A952 5428 0024                  		addq.b	#2,$24(a0)
0000A956 317C 0680 0002             		move.w	#$680,2(a0)
0000A95C 117C 0024 0001             		move.b	#$24,1(a0)
0000A962 117C 0003 0018             		move.b	#3,$18(a0)
0000A968 117C 0008 0019             		move.b	#8,$19(a0)
0000A96E 317C FD00 0012             		move.w	#-$300,$12(a0)
0000A974 7000                       		moveq	#0,d0
0000A976 1028 001C                  		move.b	$1C(a0),d0
0000A97A 5400                       		addq.b	#2,d0
0000A97C 1140 001A                  		move.b	d0,$1A(a0)
0000A980 227C 0000 0000             		movea.l	#Map_obj26,a1
0000A986 D000                       		add.b	d0,d0
0000A988 D2F1 0000                  		adda.w	(a1,d0.w),a1
0000A98C 5249                       		addq.w	#1,a1
0000A98E 2149 0004                  		move.l	a1,4(a0)
0000A992                            
0000A992                            Obj2E_Move:				; XREF: Obj2E_Index
0000A992 4A68 0012                  		tst.w	$12(a0)		; is object moving?
0000A996 6A00 0000                  		bpl.w	Obj2E_ChkEggman	; if not, branch
0000A99A 6100 0000                  		bsr.w	SpeedToPos
0000A99E 0668 0018 0012             		addi.w	#$18,$12(a0)	; reduce object	speed
0000A9A4 4E75                       		rts	
0000A9A6                            ; ===========================================================================
0000A9A6                            
0000A9A6                            Obj2E_ChkEggman:			; XREF: Obj2E_Move
0000A9A6 5428 0024                  		addq.b	#2,$24(a0)
0000A9AA 317C 001D 001E             		move.w	#29,$1E(a0)
0000A9B0 1028 001C                  		move.b	$1C(a0),d0
0000A9B4 0C00 0001                  		cmpi.b	#1,d0		; does monitor contain Eggman?
0000A9B8 6600                       		bne.s	Obj2E_ChkSonic
0000A9BA 4E75                       		rts			; Eggman monitor does nothing
0000A9BC                            ; ===========================================================================
0000A9BC                            
0000A9BC                            Obj2E_ChkSonic:
0000A9BC 0C00 0002                  		cmpi.b	#2,d0		; does monitor contain Sonic?
0000A9C0 6600                       		bne.s	Obj2E_ChkShoes
0000A9C2                            
0000A9C2                            ExtraLife:
0000A9C2 5238 FE12                  		addq.b	#1,($FFFFFE12).w ; add 1 to the	number of lives	you have
0000A9C6 5238 FE1C                  		addq.b	#1,($FFFFFE1C).w ; add 1 to the	lives counter
0000A9CA 303C 0088                  		move.w	#$88,d0
0000A9CE 4EF9 0000 15BA             		jmp	(PlaySound).l	; play extra life music
0000A9D4                            ; ===========================================================================
0000A9D4                            
0000A9D4                            Obj2E_ChkShoes:
0000A9D4 0C00 0003                  		cmpi.b	#3,d0		; does monitor contain speed shoes?
0000A9D8 6600                       		bne.s	Obj2E_ChkShield
0000A9DA 11FC 0001 FE2E             		move.b	#1,($FFFFFE2E).w ; speed up the	BG music
0000A9E0 31FC 04B0 D034             		move.w	#$4B0,($FFFFD034).w ; time limit for the power-up
0000A9E6 31FC 0C00 F760             		move.w	#$C00,($FFFFF760).w ; change Sonic's top speed
0000A9EC 31FC 0018 F762             		move.w	#$18,($FFFFF762).w
0000A9F2 31FC 0080 F764             		move.w	#$80,($FFFFF764).w
0000A9F8 303C 00E2                  		move.w	#$E2,d0
0000A9FC 4EF9 0000 15BA             		jmp	(PlaySound).l	; Speed	up the music
0000AA02                            ; ===========================================================================
0000AA02                            
0000AA02                            Obj2E_ChkShield:
0000AA02 0C00 0004                  		cmpi.b	#4,d0		; does monitor contain a shield?
0000AA06 6600                       		bne.s	Obj2E_ChkInvinc
0000AA08 11FC 0001 FE2C             		move.b	#1,($FFFFFE2C).w ; give	Sonic a	shield
0000AA0E 11FC 0038 D180             		move.b	#$38,($FFFFD180).w ; load shield object	($38)
0000AA14 303C 00AF                  		move.w	#$AF,d0
0000AA18 4EF9 0000 15BA             		jmp	(PlaySound).l	; play shield sound
0000AA1E                            ; ===========================================================================
0000AA1E                            
0000AA1E                            Obj2E_ChkInvinc:
0000AA1E 0C00 0005                  		cmpi.b	#5,d0		; does monitor contain invincibility?
0000AA22 6600                       		bne.s	Obj2E_ChkRings
0000AA24 11FC 0001 FE2D             		move.b	#1,($FFFFFE2D).w ; make	Sonic invincible
0000AA2A 31FC 04B0 D032             		move.w	#$4B0,($FFFFD032).w ; time limit for the power-up
0000AA30 11FC 0038 D200             		move.b	#$38,($FFFFD200).w ; load stars	object ($3801)
0000AA36 11FC 0001 D21C             		move.b	#1,($FFFFD21C).w
0000AA3C 11FC 0038 D240             		move.b	#$38,($FFFFD240).w ; load stars	object ($3802)
0000AA42 11FC 0002 D25C             		move.b	#2,($FFFFD25C).w
0000AA48 11FC 0038 D280             		move.b	#$38,($FFFFD280).w ; load stars	object ($3803)
0000AA4E 11FC 0003 D29C             		move.b	#3,($FFFFD29C).w
0000AA54 11FC 0038 D2C0             		move.b	#$38,($FFFFD2C0).w ; load stars	object ($3804)
0000AA5A 11FC 0004 D2DC             		move.b	#4,($FFFFD2DC).w
0000AA60 4A38 F7AA                  		tst.b	($FFFFF7AA).w	; is boss mode on?
0000AA64 6600                       		bne.s	Obj2E_NoMusic	; if yes, branch
0000AA66 303C 0087                  		move.w	#$87,d0
0000AA6A 4EF9 0000 15BA             		jmp	(PlaySound).l	; play invincibility music
0000AA70                            ; ===========================================================================
0000AA70                            
0000AA70                            Obj2E_NoMusic:
0000AA70 4E75                       		rts	
0000AA72                            ; ===========================================================================
0000AA72                            
0000AA72                            Obj2E_ChkRings:
0000AA72 0C00 0006                  		cmpi.b	#6,d0		; does monitor contain 10 rings?
0000AA76 6600                       		bne.s	Obj2E_ChkS
0000AA78 0678 000A FE20             		addi.w	#$A,($FFFFFE20).w ; add	10 rings to the	number of rings	you have
0000AA7E 0038 0001 FE1D             		ori.b	#1,($FFFFFE1D).w ; update the ring counter
0000AA84 0C78 0064 FE20             		cmpi.w	#100,($FFFFFE20).w ; check if you have 100 rings
0000AA8A 6500                       		bcs.s	Obj2E_RingSound
0000AA8C 08F8 0001 FE1B             		bset	#1,($FFFFFE1B).w
0000AA92 6700 FF2E                  		beq.w	ExtraLife
0000AA96 0C78 00C8 FE20             		cmpi.w	#200,($FFFFFE20).w ; check if you have 200 rings
0000AA9C 6500                       		bcs.s	Obj2E_RingSound
0000AA9E 08F8 0002 FE1B             		bset	#2,($FFFFFE1B).w
0000AAA4 6700 FF1C                  		beq.w	ExtraLife
0000AAA8                            
0000AAA8                            Obj2E_RingSound:
0000AAA8 303C 00B5                  		move.w	#$B5,d0
0000AAAC 4EF9 0000 15BA             		jmp	(PlaySound).l	; play ring sound
0000AAB2                            ; ===========================================================================
0000AAB2                            
0000AAB2                            Obj2E_ChkS:
0000AAB2 0C00 0007                  		cmpi.b	#7,d0		; does monitor contain 'S'
0000AAB6 6600                       		bne.s	Obj2E_ChkEnd
0000AAB8                            		; nop	
0000AAB8 7201                       		moveq	#1,d1
0000AABA B338 FE2F                  		eor.b	d1,($FFFFFE2F).w	; GMZ: Set reverse controls flag when broken, revert when another monitor of same type is broken again
0000AABE                            
0000AABE                            Obj2E_ChkEnd:
0000AABE 4E75                       		rts			; 'S' and goggles monitors do nothing
0000AAC0                            ; ===========================================================================
0000AAC0                            
0000AAC0                            Obj2E_Delete:				; XREF: Obj2E_Index
0000AAC0 5368 001E                  		subq.w	#1,$1E(a0)
0000AAC4 6B00 0000                  		bmi.w	DeleteObject
0000AAC8 4E75                       		rts	
0000AACA                            ; ---------------------------------------------------------------------------
0000AACA                            ; Subroutine to	make the sides of a monitor solid
0000AACA                            ; ---------------------------------------------------------------------------
0000AACA                            
0000AACA                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000AACA                            
0000AACA                            
0000AACA                            Obj26_SolidSides:			; XREF: loc_A1EC
0000AACA 43F8 D000                  		lea	($FFFFD000).w,a1
0000AACE 3029 0008                  		move.w	8(a1),d0
0000AAD2 9068 0008                  		sub.w	8(a0),d0
0000AAD6 D041                       		add.w	d1,d0
0000AAD8 6B00                       		bmi.s	loc_A4E6
0000AADA 3601                       		move.w	d1,d3
0000AADC D643                       		add.w	d3,d3
0000AADE B043                       		cmp.w	d3,d0
0000AAE0 6200                       		bhi.s	loc_A4E6
0000AAE2 1629 0016                  		move.b	$16(a1),d3
0000AAE6 4883                       		ext.w	d3
0000AAE8 D443                       		add.w	d3,d2
0000AAEA 3629 000C                  		move.w	$C(a1),d3
0000AAEE 9668 000C                  		sub.w	$C(a0),d3
0000AAF2 D642                       		add.w	d2,d3
0000AAF4 6B00                       		bmi.s	loc_A4E6
0000AAF6 D442                       		add.w	d2,d2
0000AAF8 B642                       		cmp.w	d2,d3
0000AAFA 6400                       		bcc.s	loc_A4E6
0000AAFC 4A38 F7C8                  		tst.b	($FFFFF7C8).w
0000AB00 6B00                       		bmi.s	loc_A4E6
0000AB02 0C38 0006 D024             		cmpi.b	#6,($FFFFD024).w
0000AB08 6400                       		bcc.s	loc_A4E6
0000AB0A 4A78 FE08                  		tst.w	($FFFFFE08).w
0000AB0E 6600                       		bne.s	loc_A4E6
0000AB10 B240                       		cmp.w	d0,d1
0000AB12 6400                       		bcc.s	loc_A4DC
0000AB14 D241                       		add.w	d1,d1
0000AB16 9041                       		sub.w	d1,d0
0000AB18                            
0000AB18                            loc_A4DC:
0000AB18 0C43 0010                  		cmpi.w	#$10,d3
0000AB1C 6500                       		bcs.s	loc_A4EA
0000AB1E                            
0000AB1E                            loc_A4E2:
0000AB1E 7201                       		moveq	#1,d1
0000AB20 4E75                       		rts	
0000AB22                            ; ===========================================================================
0000AB22                            
0000AB22                            loc_A4E6:
0000AB22 7200                       		moveq	#0,d1
0000AB24 4E75                       		rts	
0000AB26                            ; ===========================================================================
0000AB26                            
0000AB26                            loc_A4EA:
0000AB26 7200                       		moveq	#0,d1
0000AB28 1228 0019                  		move.b	$19(a0),d1
0000AB2C 5841                       		addq.w	#4,d1
0000AB2E 3401                       		move.w	d1,d2
0000AB30 D442                       		add.w	d2,d2
0000AB32 D269 0008                  		add.w	8(a1),d1
0000AB36 9268 0008                  		sub.w	8(a0),d1
0000AB3A 6BE2                       		bmi.s	loc_A4E2
0000AB3C B242                       		cmp.w	d2,d1
0000AB3E 64DE                       		bcc.s	loc_A4E2
0000AB40 72FF                       		moveq	#-1,d1
0000AB42 4E75                       		rts	
0000AB44                            ; End of function Obj26_SolidSides
0000AB44                            
0000AB44                            ; ===========================================================================
0000AB44                            Ani_obj26:
0000AB44                            	include "_anim\obj26.asm"
0000AB44                            ; ---------------------------------------------------------------------------
0000AB44                            ; Animation script - monitors
0000AB44                            ; ---------------------------------------------------------------------------
0000AB44 0000 0000 0000             		dc.w byte_A51C-Ani_obj26, byte_A522-Ani_obj26, byte_A52E-Ani_obj26
0000AB4A 0000 0000 0000             		dc.w byte_A53A-Ani_obj26, byte_A546-Ani_obj26, byte_A552-Ani_obj26
0000AB50 0000 0000 0000             		dc.w byte_A55E-Ani_obj26, byte_A56A-Ani_obj26, byte_A576-Ani_obj26
0000AB56 0000                       		dc.w byte_A582-Ani_obj26
0000AB58 0100 0102 FF00             byte_A51C:	dc.b 1,	0, 1, 2, $FF, 0
0000AB5E 0100 0303 0103 0302 0303+  byte_A522:	dc.b 1,	0, 3, 3, 1, 3, 3, 2, 3,	3, $FF,	0
0000AB6A 0100 0404 0104 0402 0404+  byte_A52E:	dc.b 1,	0, 4, 4, 1, 4, 4, 2, 4,	4, $FF,	0
0000AB76 0100 0505 0105 0502 0505+  byte_A53A:	dc.b 1,	0, 5, 5, 1, 5, 5, 2, 5,	5, $FF,	0
0000AB82 0100 0606 0106 0602 0606+  byte_A546:	dc.b 1,	0, 6, 6, 1, 6, 6, 2, 6,	6, $FF,	0
0000AB8E 0100 0707 0107 0702 0707+  byte_A552:	dc.b 1,	0, 7, 7, 1, 7, 7, 2, 7,	7, $FF,	0
0000AB9A 0100 0808 0108 0802 0808+  byte_A55E:	dc.b 1,	0, 8, 8, 1, 8, 8, 2, 8,	8, $FF,	0
0000ABA6 0100 0909 0109 0902 0909+  byte_A56A:	dc.b 1,	0, 9, 9, 1, 9, 9, 2, 9,	9, $FF,	0
0000ABB2 0100 0A0A 010A 0A02 0A0A+  byte_A576:	dc.b 1,	0, $A, $A, 1, $A, $A, 2, $A, $A, $FF, 0
0000ABBE 0200 0102 0BFE 0100        byte_A582:	dc.b 2,	0, 1, 2, $B, $FE, 1, 0
0000ABC6                            		even
0000ABC6                            		even
0000ABC6                            
0000ABC6                            ; ---------------------------------------------------------------------------
0000ABC6                            ; Sprite mappings - monitors
0000ABC6                            ; ---------------------------------------------------------------------------
0000ABC6                            Map_obj26:
0000ABC6                            	include "_maps\obj26.asm"
0000ABC6                            ; ================================================================================
0000ABC6                            ; Sprite Mappings - generated by Flex 2 Sat Mar 22 2025 11:29:00 GMT-0500 (Central Daylight Time)
0000ABC6                            ; ================================================================================
0000ABC6                            
0000ABC6                            DATAY1U343IF3L:
0000ABC6 0000 0000                  	dc.w DATAY1U343IF3L_0-DATAY1U343IF3L, DATAY1U343IF3L_1-DATAY1U343IF3L
0000ABCA 0000 0000                  	dc.w DATAY1U343IF3L_2-DATAY1U343IF3L, DATAY1U343IF3L_3-DATAY1U343IF3L
0000ABCE 0000 0000                  	dc.w DATAY1U343IF3L_4-DATAY1U343IF3L, DATAY1U343IF3L_5-DATAY1U343IF3L
0000ABD2 0000 0000                  	dc.w DATAY1U343IF3L_6-DATAY1U343IF3L, DATAY1U343IF3L_7-DATAY1U343IF3L
0000ABD6 0000 0000                  	dc.w DATAY1U343IF3L_8-DATAY1U343IF3L, DATAY1U343IF3L_9-DATAY1U343IF3L
0000ABDA 0000 0000                  	dc.w DATAY1U343IF3L_A-DATAY1U343IF3L, DATAY1U343IF3L_B-DATAY1U343IF3L
0000ABDE 05                         DATAY1U343IF3L_0: dc.b $5
0000ABDF E20F 0000 EB               	dc.b $E2, $F, $0, $0, $EB
0000ABE4 020D 0010 EB               	dc.b $2, $D, $0, $10, $EB
0000ABE9 E207 0018 0B               	dc.b $E2, $7, $0, $18, $B
0000ABEE 0204 0020 0B               	dc.b $2, $4, $0, $20, $B
0000ABF3 0A00 0022 0B               	dc.b $A, $0, $0, $22, $B
0000ABF8 06                         DATAY1U343IF3L_1: dc.b $6
0000ABF9 F205 0023 F8               	dc.b $F2, $5, $0, $23, $F8
0000ABFE E20F 0000 EB               	dc.b $E2, $F, $0, $0, $EB
0000AC03 020D 0010 EB               	dc.b $2, $D, $0, $10, $EB
0000AC08 E207 0018 0B               	dc.b $E2, $7, $0, $18, $B
0000AC0D 0204 0020 0B               	dc.b $2, $4, $0, $20, $B
0000AC12 0A00 0022 0B               	dc.b $A, $0, $0, $22, $B
0000AC17 05                         DATAY1U343IF3L_2: dc.b $5
0000AC18 E20F 0000 EB               	dc.b $E2, $F, $0, $0, $EB
0000AC1D 020D 0010 EB               	dc.b $2, $D, $0, $10, $EB
0000AC22 E207 0018 0B               	dc.b $E2, $7, $0, $18, $B
0000AC27 0204 0020 0B               	dc.b $2, $4, $0, $20, $B
0000AC2C 0A00 0022 0B               	dc.b $A, $0, $0, $22, $B
0000AC31 05                         DATAY1U343IF3L_3: dc.b $5
0000AC32 E20F 0000 EB               	dc.b $E2, $F, $0, $0, $EB
0000AC37 020D 0010 EB               	dc.b $2, $D, $0, $10, $EB
0000AC3C E207 0018 0B               	dc.b $E2, $7, $0, $18, $B
0000AC41 0204 0020 0B               	dc.b $2, $4, $0, $20, $B
0000AC46 0A00 0022 0B               	dc.b $A, $0, $0, $22, $B
0000AC4B 06                         DATAY1U343IF3L_4: dc.b $6
0000AC4C F205 0027 F8               	dc.b $F2, $5, $0, $27, $F8
0000AC51 E20F 0000 EB               	dc.b $E2, $F, $0, $0, $EB
0000AC56 020D 0010 EB               	dc.b $2, $D, $0, $10, $EB
0000AC5B E207 0018 0B               	dc.b $E2, $7, $0, $18, $B
0000AC60 0204 0020 0B               	dc.b $2, $4, $0, $20, $B
0000AC65 0A00 0022 0B               	dc.b $A, $0, $0, $22, $B
0000AC6A 06                         DATAY1U343IF3L_5: dc.b $6
0000AC6B F205 002B F8               	dc.b $F2, $5, $0, $2B, $F8
0000AC70 E20F 0000 EB               	dc.b $E2, $F, $0, $0, $EB
0000AC75 020D 0010 EB               	dc.b $2, $D, $0, $10, $EB
0000AC7A E207 0018 0B               	dc.b $E2, $7, $0, $18, $B
0000AC7F 0204 0020 0B               	dc.b $2, $4, $0, $20, $B
0000AC84 0A00 0022 0B               	dc.b $A, $0, $0, $22, $B
0000AC89 06                         DATAY1U343IF3L_6: dc.b $6
0000AC8A F205 002F F8               	dc.b $F2, $5, $0, $2F, $F8
0000AC8F E20F 0000 EB               	dc.b $E2, $F, $0, $0, $EB
0000AC94 020D 0010 EB               	dc.b $2, $D, $0, $10, $EB
0000AC99 E207 0018 0B               	dc.b $E2, $7, $0, $18, $B
0000AC9E 0204 0020 0B               	dc.b $2, $4, $0, $20, $B
0000ACA3 0A00 0022 0B               	dc.b $A, $0, $0, $22, $B
0000ACA8 06                         DATAY1U343IF3L_7: dc.b $6
0000ACA9 F205 0033 F8               	dc.b $F2, $5, $0, $33, $F8
0000ACAE E20F 0000 EB               	dc.b $E2, $F, $0, $0, $EB
0000ACB3 020D 0010 EB               	dc.b $2, $D, $0, $10, $EB
0000ACB8 E207 0018 0B               	dc.b $E2, $7, $0, $18, $B
0000ACBD 0204 0020 0B               	dc.b $2, $4, $0, $20, $B
0000ACC2 0A00 0022 0B               	dc.b $A, $0, $0, $22, $B
0000ACC7 06                         DATAY1U343IF3L_8: dc.b $6
0000ACC8 F205 0037 F8               	dc.b $F2, $5, $0, $37, $F8
0000ACCD E20F 0000 EB               	dc.b $E2, $F, $0, $0, $EB
0000ACD2 020D 0010 EB               	dc.b $2, $D, $0, $10, $EB
0000ACD7 E207 0018 0B               	dc.b $E2, $7, $0, $18, $B
0000ACDC 0204 0020 0B               	dc.b $2, $4, $0, $20, $B
0000ACE1 0A00 0022 0B               	dc.b $A, $0, $0, $22, $B
0000ACE6 06                         DATAY1U343IF3L_9: dc.b $6
0000ACE7 F205 003B F8               	dc.b $F2, $5, $0, $3B, $F8
0000ACEC E20F 0000 EB               	dc.b $E2, $F, $0, $0, $EB
0000ACF1 020D 0010 EB               	dc.b $2, $D, $0, $10, $EB
0000ACF6 E207 0018 0B               	dc.b $E2, $7, $0, $18, $B
0000ACFB 0204 0020 0B               	dc.b $2, $4, $0, $20, $B
0000AD00 0A00 0022 0B               	dc.b $A, $0, $0, $22, $B
0000AD05 05                         DATAY1U343IF3L_A: dc.b $5
0000AD06 E20F 0000 EB               	dc.b $E2, $F, $0, $0, $EB
0000AD0B 020D 0010 EB               	dc.b $2, $D, $0, $10, $EB
0000AD10 E207 0018 0B               	dc.b $E2, $7, $0, $18, $B
0000AD15 0204 0020 0B               	dc.b $2, $4, $0, $20, $B
0000AD1A 0A00 0022 0B               	dc.b $A, $0, $0, $22, $B
0000AD1F 01                         DATAY1U343IF3L_B: dc.b $1
0000AD20 FF0D 003F F0               	dc.b $FF, $D, $0, $3F, $F0
0000AD26 00                         	even
0000AD26 00                         	even
0000AD26                            
0000AD26                            ; ===========================================================================
0000AD26                            ; ---------------------------------------------------------------------------
0000AD26                            ; Object 0E - Sonic on the title screen
0000AD26                            ; ---------------------------------------------------------------------------
0000AD26                            
0000AD26                            Obj0E:					; XREF: Obj_Index
0000AD26 7000                       		moveq	#0,d0
0000AD28 1028 0024                  		move.b	$24(a0),d0
0000AD2C 323B 0000                  		move.w	Obj0E_Index(pc,d0.w),d1
0000AD30 4EFB 1000                  		jmp	Obj0E_Index(pc,d1.w)
0000AD34                            ; ===========================================================================
0000AD34 0000                       Obj0E_Index:	dc.w Obj0E_Main-Obj0E_Index
0000AD36 0000                       		dc.w Obj0E_Delay-Obj0E_Index
0000AD38 0000                       		dc.w Obj0E_Move-Obj0E_Index
0000AD3A 0000                       		dc.w Obj0E_Animate-Obj0E_Index
0000AD3C                            ; ===========================================================================
0000AD3C                            
0000AD3C                            Obj0E_Main:				; XREF: Obj0E_Index
0000AD3C 5428 0024                  		addq.b	#2,$24(a0)
0000AD40 317C 00F0 0008             		move.w	#$F0,8(a0)
0000AD46 317C 00DE 000A             		move.w	#$DE,$A(a0)
0000AD4C 217C 0000 0000 0004        		move.l	#Map_obj0E,4(a0)
0000AD54 317C 2300 0002             		move.w	#$2300,2(a0)
0000AD5A 117C 0001 0018             		move.b	#1,$18(a0)
0000AD60 117C 001D 001F             		move.b	#29,$1F(a0)	; set time delay to 0.5	seconds
0000AD66 43F9 0000 0000             		lea	(Ani_obj0E).l,a1
0000AD6C 6100 0000                  		bsr.w	AnimateSprite
0000AD70                            
0000AD70                            Obj0E_Delay:				; XREF: Obj0E_Index
0000AD70 5328 001F                  		subq.b	#1,$1F(a0)	; subtract 1 from time delay
0000AD74 6A00                       		bpl.s	Obj0E_Wait	; if time remains, branch
0000AD76 5428 0024                  		addq.b	#2,$24(a0)	; go to	next routine
0000AD7A 6000 0000                  		bra.w	DisplaySprite
0000AD7E                            ; ===========================================================================
0000AD7E                            
0000AD7E                            Obj0E_Wait:				; XREF: Obj0E_Delay
0000AD7E 4E75                       		rts	
0000AD80                            ; ===========================================================================
0000AD80                            
0000AD80                            Obj0E_Move:				; XREF: Obj0E_Index
0000AD80 5168 000A                  		subq.w	#8,$A(a0)
0000AD84 0C68 0096 000A             		cmpi.w	#$96,$A(a0)
0000AD8A 6600                       		bne.s	Obj0E_Display
0000AD8C 5428 0024                  		addq.b	#2,$24(a0)
0000AD90                            
0000AD90                            Obj0E_Display:
0000AD90 6000 0000                  		bra.w	DisplaySprite
0000AD94                            ; ===========================================================================
0000AD94 4E75                       		rts	
0000AD96                            ; ===========================================================================
0000AD96                            
0000AD96                            Obj0E_Animate:				; XREF: Obj0E_Index
0000AD96 43F9 0000 0000             		lea	(Ani_obj0E).l,a1
0000AD9C 6100 0000                  		bsr.w	AnimateSprite
0000ADA0 6000 0000                  		bra.w	DisplaySprite
0000ADA4                            ; ===========================================================================
0000ADA4 4E75                       		rts	
0000ADA6                            ; ===========================================================================
0000ADA6                            ; ---------------------------------------------------------------------------
0000ADA6                            ; Object 0F - "PRESS START BUTTON" and "TM" from title screen
0000ADA6                            ; ---------------------------------------------------------------------------
0000ADA6                            
0000ADA6                            Obj0F:					; XREF: Obj_Index
0000ADA6 7000                       		moveq	#0,d0
0000ADA8 1028 0024                  		move.b	$24(a0),d0
0000ADAC 323B 0000                  		move.w	Obj0F_Index(pc,d0.w),d1
0000ADB0 4EBB 1000                  		jsr	Obj0F_Index(pc,d1.w)
0000ADB4 6000 0000                  		bra.w	DisplaySprite
0000ADB8                            ; ===========================================================================
0000ADB8 0000                       Obj0F_Index:	dc.w Obj0F_Main-Obj0F_Index
0000ADBA 0000                       		dc.w Obj0F_PrsStart-Obj0F_Index
0000ADBC 0000                       		dc.w locret_A6F8-Obj0F_Index
0000ADBE                            ; ===========================================================================
0000ADBE                            
0000ADBE                            Obj0F_Main:				; XREF: Obj0F_Index
0000ADBE 5428 0024                  		addq.b	#2,$24(a0)
0000ADC2 317C 00D0 0008             		move.w	#$D0,8(a0)
0000ADC8 317C 0130 000A             		move.w	#$130,$A(a0)
0000ADCE 217C 0000 0000 0004        		move.l	#Map_obj0F,4(a0)
0000ADD6 317C 0200 0002             		move.w	#$200,2(a0)
0000ADDC 0C28 0002 001A             		cmpi.b	#2,$1A(a0)	; is object "PRESS START"?
0000ADE2 6500                       		bcs.s	Obj0F_PrsStart	; if yes, branch
0000ADE4 5428 0024                  		addq.b	#2,$24(a0)
0000ADE8 0C28 0003 001A             		cmpi.b	#3,$1A(a0)	; is the object	"TM"?
0000ADEE 6600                       		bne.s	locret_A6F8	; if not, branch
0000ADF0 317C 2510 0002             		move.w	#$2510,2(a0)	; "TM" specific	code
0000ADF6 317C 0170 0008             		move.w	#$170,8(a0)
0000ADFC 317C 00F8 000A             		move.w	#$F8,$A(a0)
0000AE02                            
0000AE02                            locret_A6F8:				; XREF: Obj0F_Index
0000AE02 4E75                       		rts	
0000AE04                            ; ===========================================================================
0000AE04                            
0000AE04                            Obj0F_PrsStart:				; XREF: Obj0F_Index
0000AE04 43F9 0000 0000             		lea	(Ani_obj0F).l,a1
0000AE0A 6000 0000                  		bra.w	AnimateSprite
0000AE0E                            ; ===========================================================================
0000AE0E                            Ani_obj0E:
0000AE0E                            	include "_anim\obj0E.asm"
0000AE0E                            ; ---------------------------------------------------------------------------
0000AE0E                            ; Animation script - Sonic on the title screen
0000AE0E                            ; ---------------------------------------------------------------------------
0000AE0E 0000                       		dc.w byte_A706-Ani_obj0E
0000AE10 0700 0102 0304 0506 07FE+  byte_A706:	dc.b 7,	0, 1, 2, 3, 4, 5, 6, 7,	$FE, 2,	0
0000AE1C                            		even
0000AE1C                            		even
0000AE1C                            
0000AE1C                            Ani_obj0F:
0000AE1C                            	include "_anim\obj0F.asm"
0000AE1C                            ; ---------------------------------------------------------------------------
0000AE1C                            ; Animation script - "TM" and "PRESS START BUTTON" on the title screen
0000AE1C                            ; ---------------------------------------------------------------------------
0000AE1C 0000                       		dc.w byte_A714-Ani_obj0F
0000AE1E 1F00 01FF                  byte_A714:	dc.b $1F, 0, 1,	$FF
0000AE22                            		even
0000AE22                            		even
0000AE22                            
0000AE22                            ; ---------------------------------------------------------------------------
0000AE22                            ; Subroutine to	animate	a sprite using an animation script
0000AE22                            ; ---------------------------------------------------------------------------
0000AE22                            
0000AE22                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000AE22                            
0000AE22                            
0000AE22                            AnimateSprite:
0000AE22 7000                       		moveq	#0,d0
0000AE24 1028 001C                  		move.b	$1C(a0),d0	; move animation number	to d0
0000AE28 B028 001D                  		cmp.b	$1D(a0),d0	; is animation set to restart?
0000AE2C 6700                       		beq.s	Anim_Run	; if not, branch
0000AE2E 1140 001D                  		move.b	d0,$1D(a0)	; set to "no restart"
0000AE32 117C 0000 001B             		move.b	#0,$1B(a0)	; reset	animation
0000AE38 117C 0000 001E             		move.b	#0,$1E(a0)	; reset	frame duration
0000AE3E                            
0000AE3E                            Anim_Run:
0000AE3E 5328 001E                  		subq.b	#1,$1E(a0)	; subtract 1 from frame	duration
0000AE42 6A00                       		bpl.s	Anim_Wait	; if time remains, branch
0000AE44 D040                       		add.w	d0,d0
0000AE46 D2F1 0000                  		adda.w	(a1,d0.w),a1	; jump to appropriate animation	script
0000AE4A 1151 001E                  		move.b	(a1),$1E(a0)	; load frame duration
0000AE4E 7200                       		moveq	#0,d1
0000AE50 1228 001B                  		move.b	$1B(a0),d1	; load current frame number
0000AE54 1031 1001                  		move.b	1(a1,d1.w),d0	; read sprite number from script
0000AE58 6B00                       		bmi.s	Anim_End_FF	; if animation is complete, branch
0000AE5A                            
0000AE5A                            Anim_Next:
0000AE5A 1200                       		move.b	d0,d1
0000AE5C 0200 001F                  		andi.b	#$1F,d0
0000AE60 1140 001A                  		move.b	d0,$1A(a0)	; load sprite number
0000AE64 1028 0022                  		move.b	$22(a0),d0
0000AE68 E719                       		rol.b	#3,d1
0000AE6A B101                       		eor.b	d0,d1
0000AE6C 0201 0003                  		andi.b	#3,d1
0000AE70 0228 00FC 0001             		andi.b	#$FC,1(a0)
0000AE76 8328 0001                  		or.b	d1,1(a0)
0000AE7A 5228 001B                  		addq.b	#1,$1B(a0)	; next frame number
0000AE7E                            
0000AE7E                            Anim_Wait:
0000AE7E 4E75                       		rts	
0000AE80                            ; ===========================================================================
0000AE80                            
0000AE80                            Anim_End_FF:
0000AE80 5200                       		addq.b	#1,d0		; is the end flag = $FF	?
0000AE82 6600                       		bne.s	Anim_End_FE	; if not, branch
0000AE84 117C 0000 001B             		move.b	#0,$1B(a0)	; restart the animation
0000AE8A 1029 0001                  		move.b	1(a1),d0	; read sprite number
0000AE8E 60CA                       		bra.s	Anim_Next
0000AE90                            ; ===========================================================================
0000AE90                            
0000AE90                            Anim_End_FE:
0000AE90 5200                       		addq.b	#1,d0		; is the end flag = $FE	?
0000AE92 6600                       		bne.s	Anim_End_FD	; if not, branch
0000AE94 1031 1002                  		move.b	2(a1,d1.w),d0	; read the next	byte in	the script
0000AE98 9128 001B                  		sub.b	d0,$1B(a0)	; jump back d0 bytes in	the script
0000AE9C 9200                       		sub.b	d0,d1
0000AE9E 1031 1001                  		move.b	1(a1,d1.w),d0	; read sprite number
0000AEA2 60B6                       		bra.s	Anim_Next
0000AEA4                            ; ===========================================================================
0000AEA4                            
0000AEA4                            Anim_End_FD:
0000AEA4 5200                       		addq.b	#1,d0		; is the end flag = $FD	?
0000AEA6 6600                       		bne.s	Anim_End_FC	; if not, branch
0000AEA8 1171 1002 001C             		move.b	2(a1,d1.w),$1C(a0) ; read next byte, run that animation
0000AEAE                            
0000AEAE                            Anim_End_FC:
0000AEAE 5200                       		addq.b	#1,d0		; is the end flag = $FC	?
0000AEB0 6600                       		bne.s	Anim_End_FB	; if not, branch
0000AEB2 5428 0024                  		addq.b	#2,$24(a0)	; jump to next routine
0000AEB6                            
0000AEB6                            Anim_End_FB:
0000AEB6 5200                       		addq.b	#1,d0		; is the end flag = $FB	?
0000AEB8 6600                       		bne.s	Anim_End_FA	; if not, branch
0000AEBA 117C 0000 001B             		move.b	#0,$1B(a0)	; reset	animation
0000AEC0 4228 0025                  		clr.b	$25(a0)		; reset	2nd routine counter
0000AEC4                            
0000AEC4                            Anim_End_FA:
0000AEC4 5200                       		addq.b	#1,d0		; is the end flag = $FA	?
0000AEC6 6600                       		bne.s	Anim_End	; if not, branch
0000AEC8 5428 0025                  		addq.b	#2,$25(a0)	; jump to next routine
0000AECC                            
0000AECC                            Anim_End:
0000AECC 4E75                       		rts	
0000AECE                            ; End of function AnimateSprite
0000AECE                            
0000AECE                            ; ===========================================================================
0000AECE                            ; ---------------------------------------------------------------------------
0000AECE                            ; Sprite mappings - "PRESS START BUTTON" and "TM" from title screen
0000AECE                            ; ---------------------------------------------------------------------------
0000AECE                            Map_obj0F:
0000AECE                            	include "_maps\obj0F.asm"
0000AECE                            ; ---------------------------------------------------------------------------
0000AECE                            ; Sprite mappings - "PRESS START BUTTON" and "TM" from title screen
0000AECE                            ; ---------------------------------------------------------------------------
0000AECE 0000                       		dc.w byte_A7CD-Map_obj0F
0000AED0 0000                       		dc.w byte_A7CC-Map_obj0F
0000AED2 0000                       		dc.w byte_A7EB-Map_obj0F
0000AED4 0000                       		dc.w byte_A882-Map_obj0F
0000AED6 06                         byte_A7CC:	dc.b 6			; "PRESS START BUTTON"
0000AED7 000C 00F0 00               byte_A7CD:	dc.b 0,	$C, 0, $F0, 0
0000AEDC 0000 00F3 20               		dc.b 0,	0, 0, $F3, $20
0000AEE1 0000 00F3 30               		dc.b 0,	0, 0, $F3, $30
0000AEE6 000C 00F4 38               		dc.b 0,	$C, 0, $F4, $38
0000AEEB 0008 00F8 60               		dc.b 0,	8, 0, $F8, $60
0000AEF0 0008 00FB 78               		dc.b 0,	8, 0, $FB, $78
0000AEF5 1E                         byte_A7EB:	dc.b $1E		; sprite list filler
0000AEF6 B80F 0000 80               		dc.b $B8, $F, 0, 0, $80
0000AEFB B80F 0000 80               		dc.b $B8, $F, 0, 0, $80
0000AF00 B80F 0000 80               		dc.b $B8, $F, 0, 0, $80
0000AF05 B80F 0000 80               		dc.b $B8, $F, 0, 0, $80
0000AF0A B80F 0000 80               		dc.b $B8, $F, 0, 0, $80
0000AF0F B80F 0000 80               		dc.b $B8, $F, 0, 0, $80
0000AF14 B80F 0000 80               		dc.b $B8, $F, 0, 0, $80
0000AF19 B80F 0000 80               		dc.b $B8, $F, 0, 0, $80
0000AF1E B80F 0000 80               		dc.b $B8, $F, 0, 0, $80
0000AF23 B80F 0000 80               		dc.b $B8, $F, 0, 0, $80
0000AF28 D80F 0000 80               		dc.b $D8, $F, 0, 0, $80
0000AF2D D80F 0000 80               		dc.b $D8, $F, 0, 0, $80
0000AF32 D80F 0000 80               		dc.b $D8, $F, 0, 0, $80
0000AF37 D80F 0000 80               		dc.b $D8, $F, 0, 0, $80
0000AF3C D80F 0000 80               		dc.b $D8, $F, 0, 0, $80
0000AF41 D80F 0000 80               		dc.b $D8, $F, 0, 0, $80
0000AF46 D80F 0000 80               		dc.b $D8, $F, 0, 0, $80
0000AF4B D80F 0000 80               		dc.b $D8, $F, 0, 0, $80
0000AF50 D80F 0000 80               		dc.b $D8, $F, 0, 0, $80
0000AF55 D80F 0000 80               		dc.b $D8, $F, 0, 0, $80
0000AF5A F80F 0000 80               		dc.b $F8, $F, 0, 0, $80
0000AF5F F80F 0000 80               		dc.b $F8, $F, 0, 0, $80
0000AF64 F80F 0000 80               		dc.b $F8, $F, 0, 0, $80
0000AF69 F80F 0000 80               		dc.b $F8, $F, 0, 0, $80
0000AF6E F80F 0000 80               		dc.b $F8, $F, 0, 0, $80
0000AF73 F80F 0000 80               		dc.b $F8, $F, 0, 0, $80
0000AF78 F80F 0000 80               		dc.b $F8, $F, 0, 0, $80
0000AF7D F80F 0000 80               		dc.b $F8, $F, 0, 0, $80
0000AF82 F80F 0000 80               		dc.b $F8, $F, 0, 0, $80
0000AF87 F80F 0000 80               		dc.b $F8, $F, 0, 0, $80
0000AF8C 01                         byte_A882:	dc.b 1			; "TM"
0000AF8D FC04 0000 F8               		dc.b $FC, 4, 0,	0, $F8
0000AF92                            		even
0000AF92                            		even
0000AF92                            
0000AF92                            ; ---------------------------------------------------------------------------
0000AF92                            ; Sprite mappings - Sonic on the title screen
0000AF92                            ; ---------------------------------------------------------------------------
0000AF92                            Map_obj0E:
0000AF92                            	include "_maps\obj0E.asm"
0000AF92                            ; ================================================================================
0000AF92                            ; Sprite Mappings - generated by Flex 2 Sun Mar 23 2025 15:32:50 GMT-0500 (Central Daylight Time)
0000AF92                            ; ================================================================================
0000AF92                            
0000AF92                            DATAGKI0HYDQBXP:
0000AF92 0000 0000                  	dc.w DATAGKI0HYDQBXP_0-DATAGKI0HYDQBXP, DATAGKI0HYDQBXP_1-DATAGKI0HYDQBXP
0000AF96 0000 0000                  	dc.w DATAGKI0HYDQBXP_2-DATAGKI0HYDQBXP, DATAGKI0HYDQBXP_3-DATAGKI0HYDQBXP
0000AF9A 0000 0000                  	dc.w DATAGKI0HYDQBXP_4-DATAGKI0HYDQBXP, DATAGKI0HYDQBXP_5-DATAGKI0HYDQBXP
0000AF9E 0000 0000                  	dc.w DATAGKI0HYDQBXP_6-DATAGKI0HYDQBXP, DATAGKI0HYDQBXP_7-DATAGKI0HYDQBXP
0000AFA2 08                         DATAGKI0HYDQBXP_0: dc.b $8
0000AFA3 0C0F 0126 08               	dc.b $C, $F, $1, $26, $8
0000AFA8 2C0F 0136 08               	dc.b $2C, $F, $1, $36, $8
0000AFAD 4C0D 0146 08               	dc.b $4C, $D, $1, $46, $8
0000AFB2 0408 014E 20               	dc.b $4, $8, $1, $4E, $20
0000AFB7 0C0B 0151 28               	dc.b $C, $B, $1, $51, $28
0000AFBC 2C0B 015D 28               	dc.b $2C, $B, $1, $5D, $28
0000AFC1 4C05 0169 28               	dc.b $4C, $5, $1, $69, $28
0000AFC6 1407 016D 40               	dc.b $14, $7, $1, $6D, $40
0000AFCB 0B                         DATAGKI0HYDQBXP_1: dc.b $B
0000AFCC 060F 0175 01               	dc.b $6, $F, $1, $75, $1
0000AFD1 060F 0185 21               	dc.b $6, $F, $1, $85, $21
0000AFD6 0607 0195 41               	dc.b $6, $7, $1, $95, $41
0000AFDB 260F 019D 01               	dc.b $26, $F, $1, $9D, $1
0000AFE0 260F 01AD 21               	dc.b $26, $F, $1, $AD, $21
0000AFE5 2607 01BD 41               	dc.b $26, $7, $1, $BD, $41
0000AFEA 460C 01C5 01               	dc.b $46, $C, $1, $C5, $1
0000AFEF 460E 01C9 21               	dc.b $46, $E, $1, $C9, $21
0000AFF4 4606 01D5 41               	dc.b $46, $6, $1, $D5, $41
0000AFF9 4E08 01DB 09               	dc.b $4E, $8, $1, $DB, $9
0000AFFE 5604 01DE 11               	dc.b $56, $4, $1, $DE, $11
0000B003 0B                         DATAGKI0HYDQBXP_2: dc.b $B
0000B004 F20F 0175 01               	dc.b $F2, $F, $1, $75, $1
0000B009 F20F 0185 21               	dc.b $F2, $F, $1, $85, $21
0000B00E F207 0195 41               	dc.b $F2, $7, $1, $95, $41
0000B013 120F 019D 01               	dc.b $12, $F, $1, $9D, $1
0000B018 120F 01AD 21               	dc.b $12, $F, $1, $AD, $21
0000B01D 1207 01BD 41               	dc.b $12, $7, $1, $BD, $41
0000B022 320C 01C5 01               	dc.b $32, $C, $1, $C5, $1
0000B027 320E 01C9 21               	dc.b $32, $E, $1, $C9, $21
0000B02C 3206 01D5 41               	dc.b $32, $6, $1, $D5, $41
0000B031 3A08 01DB 09               	dc.b $3A, $8, $1, $DB, $9
0000B036 4204 01DE 11               	dc.b $42, $4, $1, $DE, $11
0000B03B 0A                         DATAGKI0HYDQBXP_3: dc.b $A
0000B03C FC0F 0000 08               	dc.b $FC, $F, $0, $0, $8
0000B041 F408 0010 28               	dc.b $F4, $8, $0, $10, $28
0000B046 FC0F 0013 28               	dc.b $FC, $F, $0, $13, $28
0000B04B 0400 0023 48               	dc.b $4, $0, $0, $23, $48
0000B050 0C06 0024 48               	dc.b $C, $6, $0, $24, $48
0000B055 2400 002A 48               	dc.b $24, $0, $0, $2A, $48
0000B05A 1C0D 002B 08               	dc.b $1C, $D, $0, $2B, $8
0000B05F 1C0E 0033 28               	dc.b $1C, $E, $0, $33, $28
0000B064 2C0B 003F 10               	dc.b $2C, $B, $0, $3F, $10
0000B069 3408 004B 28               	dc.b $34, $8, $0, $4B, $28
0000B06E 10                         DATAGKI0HYDQBXP_4: dc.b $10
0000B06F F80F 01E0 09               	dc.b $F8, $F, $1, $E0, $9
0000B074 F807 01F0 29               	dc.b $F8, $7, $1, $F0, $29
0000B079 0003 01F8 01               	dc.b $0, $3, $1, $F8, $1
0000B07E 0003 01FC 39               	dc.b $0, $3, $1, $FC, $39
0000B083 1001 0200 F9               	dc.b $10, $1, $2, $0, $F9
0000B088 180D 0202 09               	dc.b $18, $D, $2, $2, $9
0000B08D 1807 020A 29               	dc.b $18, $7, $2, $A, $29
0000B092 1803 0212 41               	dc.b $18, $3, $2, $12, $41
0000B097 2001 0216 01               	dc.b $20, $1, $2, $16, $1
0000B09C 2003 0218 39               	dc.b $20, $3, $2, $18, $39
0000B0A1 2808 021C 11               	dc.b $28, $8, $2, $1C, $11
0000B0A6 3007 021F 19               	dc.b $30, $7, $2, $1F, $19
0000B0AB 3801 0227 11               	dc.b $38, $1, $2, $27, $11
0000B0B0 3806 0229 29               	dc.b $38, $6, $2, $29, $29
0000B0B5 3801 022F 41               	dc.b $38, $1, $2, $2F, $41
0000B0BA 4001 0231 39               	dc.b $40, $1, $2, $31, $39
0000B0BF 0B                         DATAGKI0HYDQBXP_5: dc.b $B
0000B0C0 2C0F 006E E2               	dc.b $2C, $F, $0, $6E, $E2
0000B0C5 EC0F 007E 02               	dc.b $EC, $F, $0, $7E, $2
0000B0CA 0C0F 008E 02               	dc.b $C, $F, $0, $8E, $2
0000B0CF 2C0F 009E 02               	dc.b $2C, $F, $0, $9E, $2
0000B0D4 EC0F 00AE 22               	dc.b $EC, $F, $0, $AE, $22
0000B0D9 0C0F 00BE 22               	dc.b $C, $F, $0, $BE, $22
0000B0DE 2C0F 00CE 22               	dc.b $2C, $F, $0, $CE, $22
0000B0E3 EC0F 00DE 42               	dc.b $EC, $F, $0, $DE, $42
0000B0E8 0C0F 00EE 42               	dc.b $C, $F, $0, $EE, $42
0000B0ED 2C0F 00FE 42               	dc.b $2C, $F, $0, $FE, $42
0000B0F2 0C07 0116 62               	dc.b $C, $7, $1, $16, $62
0000B0F7 0F                         DATAGKI0HYDQBXP_6: dc.b $F
0000B0F8 EC0F 004E E2               	dc.b $EC, $F, $0, $4E, $E2
0000B0FD 0C0F 005E E2               	dc.b $C, $F, $0, $5E, $E2
0000B102 2C0F 006E E2               	dc.b $2C, $F, $0, $6E, $E2
0000B107 EC0F 007E 02               	dc.b $EC, $F, $0, $7E, $2
0000B10C 0C0F 008E 02               	dc.b $C, $F, $0, $8E, $2
0000B111 2C0F 009E 02               	dc.b $2C, $F, $0, $9E, $2
0000B116 EC0F 00AE 22               	dc.b $EC, $F, $0, $AE, $22
0000B11B 0C0F 00BE 22               	dc.b $C, $F, $0, $BE, $22
0000B120 2C0F 00CE 22               	dc.b $2C, $F, $0, $CE, $22
0000B125 EC0F 00DE 42               	dc.b $EC, $F, $0, $DE, $42
0000B12A 0C0F 00EE 42               	dc.b $C, $F, $0, $EE, $42
0000B12F 2C0F 00FE 42               	dc.b $2C, $F, $0, $FE, $42
0000B134 EC07 010E 62               	dc.b $EC, $7, $1, $E, $62
0000B139 0C07 0116 62               	dc.b $C, $7, $1, $16, $62
0000B13E 2C07 011E 62               	dc.b $2C, $7, $1, $1E, $62
0000B143 0F                         DATAGKI0HYDQBXP_7: dc.b $F
0000B144 EC0F 0233 E2               	dc.b $EC, $F, $2, $33, $E2
0000B149 0C0F 0243 E2               	dc.b $C, $F, $2, $43, $E2
0000B14E 2C0F 0253 E2               	dc.b $2C, $F, $2, $53, $E2
0000B153 EC0F 0263 02               	dc.b $EC, $F, $2, $63, $2
0000B158 0C0F 0273 02               	dc.b $C, $F, $2, $73, $2
0000B15D 2C0F 0283 02               	dc.b $2C, $F, $2, $83, $2
0000B162 EC0F 0293 22               	dc.b $EC, $F, $2, $93, $22
0000B167 0C0F 02A3 22               	dc.b $C, $F, $2, $A3, $22
0000B16C 2C0F 02B3 22               	dc.b $2C, $F, $2, $B3, $22
0000B171 EC0F 02C3 42               	dc.b $EC, $F, $2, $C3, $42
0000B176 0C0F 02D3 42               	dc.b $C, $F, $2, $D3, $42
0000B17B 2C0F 02E3 42               	dc.b $2C, $F, $2, $E3, $42
0000B180 EC07 02F3 62               	dc.b $EC, $7, $2, $F3, $62
0000B185 0C07 02FB 62               	dc.b $C, $7, $2, $FB, $62
0000B18A 2C07 0303 62               	dc.b $2C, $7, $3, $3, $62
0000B190 00                         	even
0000B190 00                         	even
0000B190                            
0000B190                            ; ===========================================================================
0000B190                            ; ---------------------------------------------------------------------------
0000B190                            ; Object 2B - Chopper enemy (GHZ)
0000B190                            ; ---------------------------------------------------------------------------
0000B190                            
0000B190                            Obj2B:					; XREF: Obj_Index
0000B190 7000                       		moveq	#0,d0
0000B192 1028 0024                  		move.b	$24(a0),d0
0000B196 323B 0000                  		move.w	Obj2B_Index(pc,d0.w),d1
0000B19A 4EBB 1000                  		jsr	Obj2B_Index(pc,d1.w)
0000B19E 6000 0000                  		bra.w	MarkObjGone
0000B1A2                            ; ===========================================================================
0000B1A2 0000                       Obj2B_Index:	dc.w Obj2B_Main-Obj2B_Index
0000B1A4 0000                       		dc.w Obj2B_ChgSpeed-Obj2B_Index
0000B1A6                            ; ===========================================================================
0000B1A6                            
0000B1A6                            Obj2B_Main:				; XREF: Obj2B_Index
0000B1A6 5428 0024                  		addq.b	#2,$24(a0)
0000B1AA 217C 0000 0000 0004        		move.l	#Map_obj2B,4(a0)
0000B1B2 317C 047B 0002             		move.w	#$47B,2(a0)
0000B1B8 117C 0004 0001             		move.b	#4,1(a0)
0000B1BE 117C 0004 0018             		move.b	#4,$18(a0)
0000B1C4 117C 0009 0020             		move.b	#9,$20(a0)
0000B1CA 117C 0010 0019             		move.b	#$10,$19(a0)
0000B1D0 317C F900 0012             		move.w	#-$700,$12(a0)	; set vertical speed
0000B1D6 3168 000C 0030             		move.w	$C(a0),$30(a0)
0000B1DC                            
0000B1DC                            Obj2B_ChgSpeed:				; XREF: Obj2B_Index
0000B1DC 43F9 0000 0000             		lea	(Ani_obj2B).l,a1
0000B1E2 6100 FC3E                  		bsr.w	AnimateSprite
0000B1E6 6100 0000                  		bsr.w	SpeedToPos
0000B1EA 0668 0018 0012             		addi.w	#$18,$12(a0)	; reduce speed
0000B1F0 3028 0030                  		move.w	$30(a0),d0
0000B1F4 B068 000C                  		cmp.w	$C(a0),d0
0000B1F8 6400                       		bcc.s	Obj2B_ChgAni
0000B1FA 3140 000C                  		move.w	d0,$C(a0)
0000B1FE 317C F900 0012             		move.w	#-$700,$12(a0)	; set vertical speed
0000B204                            
0000B204                            Obj2B_ChgAni:
0000B204 117C 0001 001C             		move.b	#1,$1C(a0)	; use fast animation
0000B20A 0440 00C0                  		subi.w	#$C0,d0
0000B20E B068 000C                  		cmp.w	$C(a0),d0
0000B212 6400                       		bcc.s	locret_ABB6
0000B214 117C 0000 001C             		move.b	#0,$1C(a0)	; use slow animation
0000B21A 4A68 0012                  		tst.w	$12(a0)		; is Chopper at	its highest point?
0000B21E 6B00                       		bmi.s	locret_ABB6	; if not, branch
0000B220 117C 0002 001C             		move.b	#2,$1C(a0)	; use stationary animation
0000B226                            
0000B226                            locret_ABB6:
0000B226 4E75                       		rts	
0000B228                            ; ===========================================================================
0000B228                            Ani_obj2B:
0000B228                            	include "_anim\obj2B.asm"
0000B228                            ; ---------------------------------------------------------------------------
0000B228                            ; Animation script - Chopper enemy
0000B228                            ; ---------------------------------------------------------------------------
0000B228 0000                       		dc.w byte_ABBE-Ani_obj2B
0000B22A 0000                       		dc.w byte_ABC2-Ani_obj2B
0000B22C 0000                       		dc.w byte_ABC6-Ani_obj2B
0000B22E 0700 01FF                  byte_ABBE:	dc.b 7,	0, 1, $FF
0000B232 0300 01FF                  byte_ABC2:	dc.b 3,	0, 1, $FF
0000B236 0700 FF                    byte_ABC6:	dc.b 7,	0, $FF
0000B23A 00                         		even
0000B23A 00                         		even
0000B23A                            
0000B23A                            ; ---------------------------------------------------------------------------
0000B23A                            ; Sprite mappings - Chopper enemy (GHZ)
0000B23A                            ; ---------------------------------------------------------------------------
0000B23A                            Map_obj2B:
0000B23A                            	include "_maps\obj2B.asm"
0000B23A                            Map_1ff1:
0000B23A 0000                       Map_1ff1_0: 	dc.w Map_1ff1_4-Map_1ff1
0000B23C 0000                       Map_1ff1_2: 	dc.w Map_1ff1_F-Map_1ff1
0000B23E 02                         Map_1ff1_4: 	dc.b $2
0000B23F E80B 0000 F4               	dc.b $E8, $B, $0, $0, $F4
0000B244 0809 000C F4               	dc.b $8, $9, $0, $C, $F4
0000B249 02                         Map_1ff1_F: 	dc.b $2
0000B24A E80B 0012 F4               	dc.b $E8, $B, $0, $12, $F4
0000B24F 0809 000C F4               	dc.b $8, $9, $0, $C, $F4
0000B254                            	even
0000B254                            	even
0000B254                            
0000B254                            ; ===========================================================================
0000B254                            ; ---------------------------------------------------------------------------
0000B254                            ; Object 2C - Jaws enemy (LZ)
0000B254                            ; ---------------------------------------------------------------------------
0000B254                            
0000B254                            Obj2C:					; XREF: Obj_Index
0000B254 7000                       		moveq	#0,d0
0000B256 1028 0024                  		move.b	$24(a0),d0
0000B25A 323B 0000                  		move.w	Obj2C_Index(pc,d0.w),d1
0000B25E 4EFB 1000                  		jmp	Obj2C_Index(pc,d1.w)
0000B262                            ; ===========================================================================
0000B262 0000                       Obj2C_Index:	dc.w Obj2C_Main-Obj2C_Index
0000B264 0000                       		dc.w Obj2C_Turn-Obj2C_Index
0000B266                            ; ===========================================================================
0000B266                            
0000B266                            Obj2C_Main:				; XREF: Obj2C_Index
0000B266 5428 0024                  		addq.b	#2,$24(a0)
0000B26A 217C 0000 0000 0004        		move.l	#Map_obj2C,4(a0)
0000B272 317C 2486 0002             		move.w	#$2486,2(a0)
0000B278 0028 0004 0001             		ori.b	#4,1(a0)
0000B27E 117C 000A 0020             		move.b	#$A,$20(a0)
0000B284 117C 0004 0018             		move.b	#4,$18(a0)
0000B28A 117C 0010 0019             		move.b	#$10,$19(a0)
0000B290 7000                       		moveq	#0,d0
0000B292 1028 0028                  		move.b	$28(a0),d0	; load object subtype number
0000B296 ED48                       		lsl.w	#6,d0		; multiply d0 by 64
0000B298 5340                       		subq.w	#1,d0
0000B29A 3140 0030                  		move.w	d0,$30(a0)	; set turn delay time
0000B29E 3140 0032                  		move.w	d0,$32(a0)
0000B2A2 317C FFC0 0010             		move.w	#-$40,$10(a0)	; move Jaws to the left
0000B2A8 0828 0000 0022             		btst	#0,$22(a0)	; is Jaws facing left?
0000B2AE 6700                       		beq.s	Obj2C_Turn	; if yes, branch
0000B2B0 4468 0010                  		neg.w	$10(a0)		; move Jaws to the right
0000B2B4                            
0000B2B4                            Obj2C_Turn:				; XREF: Obj2C_Index
0000B2B4 5368 0030                  		subq.w	#1,$30(a0)	; subtract 1 from turn delay time
0000B2B8 6A00                       		bpl.s	Obj2C_Animate	; if time remains, branch
0000B2BA 3168 0032 0030             		move.w	$32(a0),$30(a0)	; reset	turn delay time
0000B2C0 4468 0010                  		neg.w	$10(a0)		; change speed direction
0000B2C4 0868 0000 0022             		bchg	#0,$22(a0)	; change Jaws facing direction
0000B2CA 117C 0001 001D             		move.b	#1,$1D(a0)	; reset	animation
0000B2D0                            
0000B2D0                            Obj2C_Animate:
0000B2D0 43F9 0000 0000             		lea	(Ani_obj2C).l,a1
0000B2D6 6100 FB4A                  		bsr.w	AnimateSprite
0000B2DA 6100 0000                  		bsr.w	SpeedToPos
0000B2DE 6000 0000                  		bra.w	MarkObjGone
0000B2E2                            ; ===========================================================================
0000B2E2                            Ani_obj2C:
0000B2E2                            	include "_anim\obj2C.asm"
0000B2E2                            ; ---------------------------------------------------------------------------
0000B2E2                            ; Animation script - Jaws enemy
0000B2E2                            ; ---------------------------------------------------------------------------
0000B2E2 0000                       		dc.w byte_AC6A-Ani_obj2C
0000B2E4 0700 0102 03FF             byte_AC6A:	dc.b 7,	0, 1, 2, 3, $FF
0000B2EA                            		even
0000B2EA                            		even
0000B2EA                            
0000B2EA                            ; ---------------------------------------------------------------------------
0000B2EA                            ; Sprite mappings - Jaws enemy (LZ)
0000B2EA                            ; ---------------------------------------------------------------------------
0000B2EA                            Map_obj2C:
0000B2EA                            	include "_maps\obj2C.asm"
0000B2EA                            ; ---------------------------------------------------------------------------
0000B2EA                            ; Sprite mappings - Jaws enemy (LZ)
0000B2EA                            ; ---------------------------------------------------------------------------
0000B2EA 0000                       		dc.w byte_AC78-Map_obj2C
0000B2EC 0000                       		dc.w byte_AC83-Map_obj2C
0000B2EE 0000                       		dc.w byte_AC8E-Map_obj2C
0000B2F0 0000                       		dc.w byte_AC99-Map_obj2C
0000B2F2 02                         byte_AC78:	dc.b 2
0000B2F3 F40E 0000 F0               		dc.b $F4, $E, 0, 0, $F0
0000B2F8 F505 0018 10               		dc.b $F5, 5, 0,	$18, $10
0000B2FD 02                         byte_AC83:	dc.b 2
0000B2FE F40E 000C F0               		dc.b $F4, $E, 0, $C, $F0
0000B303 F505 001C 10               		dc.b $F5, 5, 0,	$1C, $10
0000B308 02                         byte_AC8E:	dc.b 2
0000B309 F40E 0000 F0               		dc.b $F4, $E, 0, 0, $F0
0000B30E F505 1018 10               		dc.b $F5, 5, $10, $18, $10
0000B313 02                         byte_AC99:	dc.b 2
0000B314 F40E 000C F0               		dc.b $F4, $E, 0, $C, $F0
0000B319 F505 101C 10               		dc.b $F5, 5, $10, $1C, $10
0000B31E                            		even
0000B31E                            		even
0000B31E                            
0000B31E                            ; ===========================================================================
0000B31E                            ; ---------------------------------------------------------------------------
0000B31E                            ; Object 2D - Burrobot enemy (LZ)
0000B31E                            ; ---------------------------------------------------------------------------
0000B31E                            
0000B31E                            Obj2D:					; XREF: Obj_Index
0000B31E 7000                       		moveq	#0,d0
0000B320 1028 0024                  		move.b	$24(a0),d0
0000B324 323B 0000                  		move.w	Obj2D_Index(pc,d0.w),d1
0000B328 4EFB 1000                  		jmp	Obj2D_Index(pc,d1.w)
0000B32C                            ; ===========================================================================
0000B32C 0000                       Obj2D_Index:	dc.w Obj2D_Main-Obj2D_Index
0000B32E 0000                       		dc.w Obj2D_Action-Obj2D_Index
0000B330                            ; ===========================================================================
0000B330                            
0000B330                            Obj2D_Main:				; XREF: Obj2D_Index
0000B330 5428 0024                  		addq.b	#2,$24(a0)
0000B334 117C 0013 0016             		move.b	#$13,$16(a0)
0000B33A 117C 0008 0017             		move.b	#8,$17(a0)
0000B340 217C 0000 0000 0004        		move.l	#Map_obj2D,4(a0)
0000B348 317C 04A6 0002             		move.w	#$4A6,2(a0)
0000B34E 0028 0004 0001             		ori.b	#4,1(a0)
0000B354 117C 0004 0018             		move.b	#4,$18(a0)
0000B35A 117C 0005 0020             		move.b	#5,$20(a0)
0000B360 117C 000C 0019             		move.b	#$C,$19(a0)
0000B366 5C28 0025                  		addq.b	#6,$25(a0)	; run "Obj2D_ChkSonic" routine
0000B36A 117C 0002 001C             		move.b	#2,$1C(a0)
0000B370                            
0000B370                            Obj2D_Action:				; XREF: Obj2D_Index
0000B370 7000                       		moveq	#0,d0
0000B372 1028 0025                  		move.b	$25(a0),d0
0000B376 323B 0000                  		move.w	Obj2D_Index2(pc,d0.w),d1
0000B37A 4EBB 1000                  		jsr	Obj2D_Index2(pc,d1.w)
0000B37E 43F9 0000 0000             		lea	(Ani_obj2D).l,a1
0000B384 6100 FA9C                  		bsr.w	AnimateSprite
0000B388 6000 0000                  		bra.w	MarkObjGone
0000B38C                            ; ===========================================================================
0000B38C 0000                       Obj2D_Index2:	dc.w Obj2D_ChgDir-Obj2D_Index2
0000B38E 0000                       		dc.w Obj2D_Move-Obj2D_Index2
0000B390 0000                       		dc.w Obj2D_Jump-Obj2D_Index2
0000B392 0000                       		dc.w Obj2D_ChkSonic-Obj2D_Index2
0000B394                            ; ===========================================================================
0000B394                            
0000B394                            Obj2D_ChgDir:				; XREF: Obj2D_Index2
0000B394 5368 0030                  		subq.w	#1,$30(a0)
0000B398 6A00                       		bpl.s	locret_AD42
0000B39A 5428 0025                  		addq.b	#2,$25(a0)
0000B39E 317C 00FF 0030             		move.w	#$FF,$30(a0)
0000B3A4 317C 0080 0010             		move.w	#$80,$10(a0)
0000B3AA 117C 0001 001C             		move.b	#1,$1C(a0)
0000B3B0 0868 0000 0022             		bchg	#0,$22(a0)	; change direction the Burrobot	is facing
0000B3B6 6700                       		beq.s	locret_AD42
0000B3B8 4468 0010                  		neg.w	$10(a0)		; change direction the Burrobot	is moving
0000B3BC                            
0000B3BC                            locret_AD42:
0000B3BC 4E75                       		rts	
0000B3BE                            ; ===========================================================================
0000B3BE                            
0000B3BE                            Obj2D_Move:				; XREF: Obj2D_Index2
0000B3BE 5368 0030                  		subq.w	#1,$30(a0)
0000B3C2 6B00                       		bmi.s	loc_AD84
0000B3C4 6100 0000                  		bsr.w	SpeedToPos
0000B3C8 0868 0000 0032             		bchg	#0,$32(a0)
0000B3CE 6600                       		bne.s	loc_AD78
0000B3D0 3628 0008                  		move.w	8(a0),d3
0000B3D4 0643 000C                  		addi.w	#$C,d3
0000B3D8 0828 0000 0022             		btst	#0,$22(a0)
0000B3DE 6600                       		bne.s	loc_AD6A
0000B3E0 0443 0018                  		subi.w	#$18,d3
0000B3E4                            
0000B3E4                            loc_AD6A:
0000B3E4 4EB9 0000 0000             		jsr	ObjHitFloor2
0000B3EA 0C41 000C                  		cmpi.w	#$C,d1
0000B3EE 6C00                       		bge.s	loc_AD84
0000B3F0 4E75                       		rts	
0000B3F2                            ; ===========================================================================
0000B3F2                            
0000B3F2                            loc_AD78:				; XREF: Obj2D_Move
0000B3F2 4EB9 0000 0000             		jsr	ObjHitFloor
0000B3F8 D368 000C                  		add.w	d1,$C(a0)
0000B3FC 4E75                       		rts	
0000B3FE                            ; ===========================================================================
0000B3FE                            
0000B3FE                            loc_AD84:				; XREF: Obj2D_Move
0000B3FE 0838 0002 FE0F             		btst	#2,($FFFFFE0F).w
0000B404 6700                       		beq.s	loc_ADA4
0000B406 5528 0025                  		subq.b	#2,$25(a0)
0000B40A 317C 003B 0030             		move.w	#$3B,$30(a0)
0000B410 317C 0000 0010             		move.w	#0,$10(a0)
0000B416 117C 0000 001C             		move.b	#0,$1C(a0)
0000B41C 4E75                       		rts	
0000B41E                            ; ===========================================================================
0000B41E                            
0000B41E                            loc_ADA4:
0000B41E 5428 0025                  		addq.b	#2,$25(a0)
0000B422 317C FC00 0012             		move.w	#-$400,$12(a0)
0000B428 117C 0002 001C             		move.b	#2,$1C(a0)
0000B42E 4E75                       		rts	
0000B430                            ; ===========================================================================
0000B430                            
0000B430                            Obj2D_Jump:				; XREF: Obj2D_Index2
0000B430 6100 0000                  		bsr.w	SpeedToPos
0000B434 0668 0018 0012             		addi.w	#$18,$12(a0)
0000B43A 6B00                       		bmi.s	locret_ADF0
0000B43C 117C 0003 001C             		move.b	#3,$1C(a0)
0000B442 4EB9 0000 0000             		jsr	ObjHitFloor
0000B448 4A41                       		tst.w	d1
0000B44A 6A00                       		bpl.s	locret_ADF0
0000B44C D368 000C                  		add.w	d1,$C(a0)
0000B450 317C 0000 0012             		move.w	#0,$12(a0)
0000B456 117C 0001 001C             		move.b	#1,$1C(a0)
0000B45C 317C 00FF 0030             		move.w	#$FF,$30(a0)
0000B462 5528 0025                  		subq.b	#2,$25(a0)
0000B466 6100 0000                  		bsr.w	Obj2D_ChkSonic2
0000B46A                            
0000B46A                            locret_ADF0:
0000B46A 4E75                       		rts	
0000B46C                            ; ===========================================================================
0000B46C                            
0000B46C                            Obj2D_ChkSonic:				; XREF: Obj2D_Index2
0000B46C 343C 0060                  		move.w	#$60,d2
0000B470 6100 0000                  		bsr.w	Obj2D_ChkSonic2
0000B474 6400                       		bcc.s	locret_AE20
0000B476 3038 D00C                  		move.w	($FFFFD00C).w,d0
0000B47A 9068 000C                  		sub.w	$C(a0),d0
0000B47E 6400                       		bcc.s	locret_AE20
0000B480 0C40 FF80                  		cmpi.w	#-$80,d0
0000B484 6500                       		bcs.s	locret_AE20
0000B486 4A78 FE08                  		tst.w	($FFFFFE08).w
0000B48A 6600                       		bne.s	locret_AE20
0000B48C 5528 0025                  		subq.b	#2,$25(a0)
0000B490 3141 0010                  		move.w	d1,$10(a0)
0000B494 317C FC00 0012             		move.w	#-$400,$12(a0)
0000B49A                            
0000B49A                            locret_AE20:
0000B49A 4E75                       		rts	
0000B49C                            
0000B49C                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000B49C                            
0000B49C                            
0000B49C                            Obj2D_ChkSonic2:			; XREF: Obj2D_ChkSonic
0000B49C 323C 0080                  		move.w	#$80,d1
0000B4A0 08E8 0000 0022             		bset	#0,$22(a0)
0000B4A6 3038 D008                  		move.w	($FFFFD008).w,d0
0000B4AA 9068 0008                  		sub.w	8(a0),d0
0000B4AE 6400                       		bcc.s	loc_AE40
0000B4B0 4440                       		neg.w	d0
0000B4B2 4441                       		neg.w	d1
0000B4B4 08A8 0000 0022             		bclr	#0,$22(a0)
0000B4BA                            
0000B4BA                            loc_AE40:
0000B4BA B042                       		cmp.w	d2,d0
0000B4BC 4E75                       		rts	
0000B4BE                            ; End of function Obj2D_ChkSonic2
0000B4BE                            
0000B4BE                            ; ===========================================================================
0000B4BE                            Ani_obj2D:
0000B4BE                            	include "_anim\obj2D.asm"
0000B4BE                            ; ---------------------------------------------------------------------------
0000B4BE                            ; Animation script - Burrobot enemy but craig
0000B4BE                            ; ---------------------------------------------------------------------------
0000B4BE 0000                       		dc.w byte_AE4C-Ani_obj2D
0000B4C0 0000                       		dc.w byte_AE50-Ani_obj2D
0000B4C2 0000                       		dc.w byte_AE54-Ani_obj2D
0000B4C4 0000                       		dc.w byte_AE58-Ani_obj2D
0000B4C6 0300 FF                    byte_AE4C:	dc.b 3,	0, $FF ; wait
0000B4C9 0300 01FF                  byte_AE50:	dc.b 3,	0, 1, $FF ; waddle
0000B4CD 0100 0102 0304 0506 0708+  byte_AE54:	dc.b 1,	0, 1, 2, 3, 4, 5, 6, 7, 8, 3, 9, $A, $FF ; speen
0000B4DB 0304 FF                    byte_AE58:	dc.b 3,	4, $FF
0000B4DE                            		even
0000B4DE                            		even
0000B4DE                            
0000B4DE                            ; ---------------------------------------------------------------------------
0000B4DE                            ; Sprite mappings - Burrobot enemy (LZ)
0000B4DE                            ; ---------------------------------------------------------------------------
0000B4DE                            Map_obj2D:
0000B4DE                            	include "_maps\obj2D.asm"
0000B4DE                            Map_e3a3:
0000B4DE 0000                       Map_e3a3_0: 	dc.w Map_e3a3_16-Map_e3a3
0000B4E0 0000                       Map_e3a3_2: 	dc.w Map_e3a3_21-Map_e3a3
0000B4E2 0000                       Map_e3a3_4: 	dc.w Map_e3a3_2C-Map_e3a3
0000B4E4 0000                       Map_e3a3_6: 	dc.w Map_e3a3_37-Map_e3a3
0000B4E6 0000                       Map_e3a3_8: 	dc.w Map_e3a3_42-Map_e3a3
0000B4E8 0000                       Map_e3a3_A: 	dc.w Map_e3a3_4D-Map_e3a3
0000B4EA 0000                       Map_e3a3_C: 	dc.w Map_e3a3_58-Map_e3a3
0000B4EC 0000                       Map_e3a3_E: 	dc.w Map_e3a3_63-Map_e3a3
0000B4EE 0000                       Map_e3a3_10: 	dc.w Map_e3a3_6E-Map_e3a3
0000B4F0 0000                       Map_e3a3_12: 	dc.w Map_e3a3_79-Map_e3a3
0000B4F2 0000                       Map_e3a3_14: 	dc.w Map_e3a3_84-Map_e3a3
0000B4F4 02                         Map_e3a3_16: 	dc.b $2
0000B4F5 EC0B 0800 F4               	dc.b $EC, $B, $8, $0, $F4
0000B4FA 0C08 080C F4               	dc.b $C, $8, $8, $C, $F4
0000B4FF 02                         Map_e3a3_21: 	dc.b $2
0000B500 EC07 080F F8               	dc.b $EC, $7, $8, $F, $F8
0000B505 0C04 0817 F8               	dc.b $C, $4, $8, $17, $F8
0000B50A 02                         Map_e3a3_2C: 	dc.b $2
0000B50B EC07 0819 F8               	dc.b $EC, $7, $8, $19, $F8
0000B510 0C04 0821 F8               	dc.b $C, $4, $8, $21, $F8
0000B515 02                         Map_e3a3_37: 	dc.b $2
0000B516 EC02 0823 FC               	dc.b $EC, $2, $8, $23, $FC
0000B51B FC02 1823 FC               	dc.b $FC, $2, $18, $23, $FC
0000B520 02                         Map_e3a3_42: 	dc.b $2
0000B521 EC06 0826 F8               	dc.b $EC, $6, $8, $26, $F8
0000B526 FC06 1826 F8               	dc.b $FC, $6, $18, $26, $F8
0000B52B 02                         Map_e3a3_4D: 	dc.b $2
0000B52C EC06 082C F8               	dc.b $EC, $6, $8, $2C, $F8
0000B531 FC06 182C F8               	dc.b $FC, $6, $18, $2C, $F8
0000B536 02                         Map_e3a3_58: 	dc.b $2
0000B537 EC0A 0832 F4               	dc.b $EC, $A, $8, $32, $F4
0000B53C FC0A 1832 F4               	dc.b $FC, $A, $18, $32, $F4
0000B541 02                         Map_e3a3_63: 	dc.b $2
0000B542 EC06 002C F8               	dc.b $EC, $6, $0, $2C, $F8
0000B547 FC06 102C F8               	dc.b $FC, $6, $10, $2C, $F8
0000B54C 02                         Map_e3a3_6E: 	dc.b $2
0000B54D EC06 0026 F8               	dc.b $EC, $6, $0, $26, $F8
0000B552 FC06 1026 F8               	dc.b $FC, $6, $10, $26, $F8
0000B557 02                         Map_e3a3_79: 	dc.b $2
0000B558 EC07 0019 F8               	dc.b $EC, $7, $0, $19, $F8
0000B55D 0C04 0021 F8               	dc.b $C, $4, $0, $21, $F8
0000B562 02                         Map_e3a3_84: 	dc.b $2
0000B563 EC07 000F F8               	dc.b $EC, $7, $0, $F, $F8
0000B568 0C04 0017 F8               	dc.b $C, $4, $0, $17, $F8
0000B56E 00                         	even
0000B56E 00                         	even
0000B56E                            
0000B56E                            ; ===========================================================================
0000B56E                            ; ---------------------------------------------------------------------------
0000B56E                            ; Object 2F - large moving platforms (MZ)
0000B56E                            ; ---------------------------------------------------------------------------
0000B56E                            
0000B56E                            Obj2F:					; XREF: Obj_Index
0000B56E 7000                       		moveq	#0,d0
0000B570 1028 0024                  		move.b	$24(a0),d0
0000B574 323B 0000                  		move.w	Obj2F_Index(pc,d0.w),d1
0000B578 4EFB 1000                  		jmp	Obj2F_Index(pc,d1.w)
0000B57C                            ; ===========================================================================
0000B57C 0000                       Obj2F_Index:	dc.w Obj2F_Main-Obj2F_Index
0000B57E 0000                       		dc.w Obj2F_Action-Obj2F_Index
0000B580                            
0000B580 0000                       Obj2F_Data:	dc.w Obj2F_Data1-Obj2F_Data 	; collision angle data
0000B582 0040                       		dc.b 0,	$40			; frame	number,	platform width
0000B584 0000                       		dc.w Obj2F_Data3-Obj2F_Data
0000B586 0140                       		dc.b 1,	$40
0000B588 0000                       		dc.w Obj2F_Data2-Obj2F_Data
0000B58A 0220                       		dc.b 2,	$20
0000B58C                            ; ===========================================================================
0000B58C                            
0000B58C                            Obj2F_Main:				; XREF: Obj2F_Index
0000B58C 5428 0024                  		addq.b	#2,$24(a0)
0000B590 217C 0000 0000 0004        		move.l	#Map_obj2F,4(a0)
0000B598 317C C000 0002             		move.w	#$C000,2(a0)
0000B59E 117C 0004 0001             		move.b	#4,1(a0)
0000B5A4 117C 0005 0018             		move.b	#5,$18(a0)
0000B5AA 3168 000C 002C             		move.w	$C(a0),$2C(a0)
0000B5B0 3168 0008 002A             		move.w	8(a0),$2A(a0)
0000B5B6 7000                       		moveq	#0,d0
0000B5B8 1028 0028                  		move.b	$28(a0),d0
0000B5BC E448                       		lsr.w	#2,d0
0000B5BE 0240 001C                  		andi.w	#$1C,d0
0000B5C2 43FB 00BC                  		lea	Obj2F_Data(pc,d0.w),a1
0000B5C6 3019                       		move.w	(a1)+,d0
0000B5C8 45FB 00B6                  		lea	Obj2F_Data(pc,d0.w),a2
0000B5CC 214A 0030                  		move.l	a2,$30(a0)
0000B5D0 1159 001A                  		move.b	(a1)+,$1A(a0)
0000B5D4 1151 0019                  		move.b	(a1),$19(a0)
0000B5D8 0228 000F 0028             		andi.b	#$F,$28(a0)
0000B5DE 117C 0040 0016             		move.b	#$40,$16(a0)
0000B5E4 08E8 0004 0001             		bset	#4,1(a0)
0000B5EA                            
0000B5EA                            Obj2F_Action:				; XREF: Obj2F_Index
0000B5EA 6100 0000                  		bsr.w	Obj2F_Types
0000B5EE 4A28 0025                  		tst.b	$25(a0)
0000B5F2 6700                       		beq.s	Obj2F_Solid
0000B5F4 7200                       		moveq	#0,d1
0000B5F6 1228 0019                  		move.b	$19(a0),d1
0000B5FA 0641 000B                  		addi.w	#$B,d1
0000B5FE 6100 C560                  		bsr.w	ExitPlatform
0000B602 0829 0003 0022             		btst	#3,$22(a1)
0000B608 6600 0000                  		bne.w	Obj2F_Slope
0000B60C 4228 0025                  		clr.b	$25(a0)
0000B610 6000                       		bra.s	Obj2F_Display
0000B612                            ; ===========================================================================
0000B612                            
0000B612                            Obj2F_Slope:				; XREF: Obj2F_Action
0000B612 7200                       		moveq	#0,d1
0000B614 1228 0019                  		move.b	$19(a0),d1
0000B618 0641 000B                  		addi.w	#$B,d1
0000B61C 2468 0030                  		movea.l	$30(a0),a2
0000B620 3428 0008                  		move.w	8(a0),d2
0000B624 6100 D52A                  		bsr.w	SlopeObject2
0000B628 6000                       		bra.s	Obj2F_Display
0000B62A                            ; ===========================================================================
0000B62A                            
0000B62A                            Obj2F_Solid:				; XREF: Obj2F_Action
0000B62A 7200                       		moveq	#0,d1
0000B62C 1228 0019                  		move.b	$19(a0),d1
0000B630 0641 000B                  		addi.w	#$B,d1
0000B634 343C 0020                  		move.w	#$20,d2
0000B638 0C28 0002 001A             		cmpi.b	#2,$1A(a0)
0000B63E 6600                       		bne.s	loc_AF8E
0000B640 343C 0030                  		move.w	#$30,d2
0000B644                            
0000B644                            loc_AF8E:
0000B644 2468 0030                  		movea.l	$30(a0),a2
0000B648 6100 0000                  		bsr.w	SolidObject2F
0000B64C                            
0000B64C                            Obj2F_Display:				; XREF: Obj2F_Action
0000B64C 6100 0000                  		bsr.w	DisplaySprite
0000B650 6000 0000                  		bra.w	Obj2F_ChkDel
0000B654                            
0000B654                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000B654                            
0000B654                            
0000B654                            Obj2F_Types:				; XREF: Obj2F_Action
0000B654 7000                       		moveq	#0,d0
0000B656 1028 0028                  		move.b	$28(a0),d0
0000B65A 0240 0007                  		andi.w	#7,d0
0000B65E D040                       		add.w	d0,d0
0000B660 323B 0000                  		move.w	Obj2F_TypeIndex(pc,d0.w),d1
0000B664 4EFB 1000                  		jmp	Obj2F_TypeIndex(pc,d1.w)
0000B668                            ; End of function Obj2F_Types
0000B668                            
0000B668                            ; ===========================================================================
0000B668 0000                       Obj2F_TypeIndex:dc.w Obj2F_Type00-Obj2F_TypeIndex
0000B66A 0000                       		dc.w Obj2F_Type01-Obj2F_TypeIndex
0000B66C 0000                       		dc.w Obj2F_Type02-Obj2F_TypeIndex
0000B66E 0000                       		dc.w Obj2F_Type03-Obj2F_TypeIndex
0000B670 0000                       		dc.w Obj2F_Type04-Obj2F_TypeIndex
0000B672 0000                       		dc.w Obj2F_Type05-Obj2F_TypeIndex
0000B674                            ; ===========================================================================
0000B674                            
0000B674                            Obj2F_Type00:				; XREF: Obj2F_TypeIndex
0000B674 4E75                       		rts			; type 00 platform doesn't move
0000B676                            ; ===========================================================================
0000B676                            
0000B676                            Obj2F_Type01:				; XREF: Obj2F_TypeIndex
0000B676 1038 FE60                  		move.b	($FFFFFE60).w,d0
0000B67A 323C 0020                  		move.w	#$20,d1
0000B67E 6000                       		bra.s	Obj2F_Move
0000B680                            ; ===========================================================================
0000B680                            
0000B680                            Obj2F_Type02:				; XREF: Obj2F_TypeIndex
0000B680 1038 FE64                  		move.b	($FFFFFE64).w,d0
0000B684 323C 0030                  		move.w	#$30,d1
0000B688 6000                       		bra.s	Obj2F_Move
0000B68A                            ; ===========================================================================
0000B68A                            
0000B68A                            Obj2F_Type03:				; XREF: Obj2F_TypeIndex
0000B68A 1038 FE68                  		move.b	($FFFFFE68).w,d0
0000B68E 323C 0040                  		move.w	#$40,d1
0000B692 6000                       		bra.s	Obj2F_Move
0000B694                            ; ===========================================================================
0000B694                            
0000B694                            Obj2F_Type04:				; XREF: Obj2F_TypeIndex
0000B694 1038 FE6C                  		move.b	($FFFFFE6C).w,d0
0000B698 323C 0060                  		move.w	#$60,d1
0000B69C                            
0000B69C                            Obj2F_Move:
0000B69C 0828 0003 0028             		btst	#3,$28(a0)
0000B6A2 6700                       		beq.s	loc_AFF2
0000B6A4 4440                       		neg.w	d0
0000B6A6 D041                       		add.w	d1,d0
0000B6A8                            
0000B6A8                            loc_AFF2:
0000B6A8 3228 002C                  		move.w	$2C(a0),d1
0000B6AC 9240                       		sub.w	d0,d1
0000B6AE 3141 000C                  		move.w	d1,$C(a0)	; update position on y-axis
0000B6B2 4E75                       		rts	
0000B6B4                            ; ===========================================================================
0000B6B4                            
0000B6B4                            Obj2F_Type05:				; XREF: Obj2F_TypeIndex
0000B6B4 1028 0034                  		move.b	$34(a0),d0
0000B6B8 4A28 0025                  		tst.b	$25(a0)
0000B6BC 6600                       		bne.s	loc_B010
0000B6BE 5500                       		subq.b	#2,d0
0000B6C0 6400                       		bcc.s	loc_B01C
0000B6C2 7000                       		moveq	#0,d0
0000B6C4 6000                       		bra.s	loc_B01C
0000B6C6                            ; ===========================================================================
0000B6C6                            
0000B6C6                            loc_B010:
0000B6C6 5800                       		addq.b	#4,d0
0000B6C8 0C00 0040                  		cmpi.b	#$40,d0
0000B6CC 6500                       		bcs.s	loc_B01C
0000B6CE 103C 0040                  		move.b	#$40,d0
0000B6D2                            
0000B6D2                            loc_B01C:
0000B6D2 1140 0034                  		move.b	d0,$34(a0)
0000B6D6 4EB9 0000 2C64             		jsr	(CalcSine).l
0000B6DC E848                       		lsr.w	#4,d0
0000B6DE 3200                       		move.w	d0,d1
0000B6E0 D068 002C                  		add.w	$2C(a0),d0
0000B6E4 3140 000C                  		move.w	d0,$C(a0)
0000B6E8 0C28 0020 0034             		cmpi.b	#$20,$34(a0)
0000B6EE 6600                       		bne.s	loc_B07A
0000B6F0 4A28 0035                  		tst.b	$35(a0)
0000B6F4 6600                       		bne.s	loc_B07A
0000B6F6 117C 0001 0035             		move.b	#1,$35(a0)
0000B6FC 6100 0000                  		bsr.w	SingleObjLoad2
0000B700 6600                       		bne.s	loc_B07A
0000B702 12BC 0035                  		move.b	#$35,0(a1)	; load sitting flame object
0000B706 3368 0008 0008             		move.w	8(a0),8(a1)
0000B70C 3368 002C 002C             		move.w	$2C(a0),$2C(a1)
0000B712 5069 002C                  		addq.w	#8,$2C(a1)
0000B716 5769 002C                  		subq.w	#3,$2C(a1)
0000B71A 0469 0040 0008             		subi.w	#$40,8(a1)
0000B720 2368 0030 0030             		move.l	$30(a0),$30(a1)
0000B726 2348 0038                  		move.l	a0,$38(a1)
0000B72A 2448                       		movea.l	a0,a2
0000B72C 6100                       		bsr.s	sub_B09C
0000B72E                            
0000B72E                            loc_B07A:
0000B72E 7400                       		moveq	#0,d2
0000B730 45E8 0036                  		lea	$36(a0),a2
0000B734 141A                       		move.b	(a2)+,d2
0000B736 5302                       		subq.b	#1,d2
0000B738 6500                       		bcs.s	locret_B09A
0000B73A                            
0000B73A                            loc_B086:
0000B73A 7000                       		moveq	#0,d0
0000B73C 101A                       		move.b	(a2)+,d0
0000B73E ED48                       		lsl.w	#6,d0
0000B740 0640 D000                  		addi.w	#-$3000,d0
0000B744 3240                       		movea.w	d0,a1
0000B746 3341 003C                  		move.w	d1,$3C(a1)
0000B74A 51CA FFEE                  		dbf	d2,loc_B086
0000B74E                            
0000B74E                            locret_B09A:
0000B74E 4E75                       		rts	
0000B750                            
0000B750                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000B750                            
0000B750                            
0000B750                            sub_B09C:
0000B750 45EA 0036                  		lea	$36(a2),a2
0000B754 7000                       		moveq	#0,d0
0000B756 1012                       		move.b	(a2),d0
0000B758 5212                       		addq.b	#1,(a2)
0000B75A 45F2 0001                  		lea	1(a2,d0.w),a2
0000B75E 3009                       		move.w	a1,d0
0000B760 0440 D000                  		subi.w	#-$3000,d0
0000B764 EC48                       		lsr.w	#6,d0
0000B766 0240 007F                  		andi.w	#$7F,d0
0000B76A 1480                       		move.b	d0,(a2)
0000B76C 4E75                       		rts	
0000B76E                            ; End of function sub_B09C
0000B76E                            
0000B76E                            ; ===========================================================================
0000B76E                            
0000B76E                            Obj2F_ChkDel:				; XREF: Obj2F_Display
0000B76E 4A28 0035                  		tst.b	$35(a0)
0000B772 6700                       		beq.s	loc_B0C6
0000B774 4A28 0001                  		tst.b	1(a0)
0000B778 6A00                       		bpl.s	Obj2F_DelFlames
0000B77A                            
0000B77A                            loc_B0C6:
0000B77A 3028 002A                  		move.w	$2A(a0),d0
0000B77E 0240 FF80                  		andi.w	#$FF80,d0
0000B782 3238 F700                  		move.w	($FFFFF700).w,d1
0000B786 0441 0080                  		subi.w	#$80,d1
0000B78A 0241 FF80                  		andi.w	#$FF80,d1
0000B78E 9041                       		sub.w	d1,d0
0000B790 0C40 0280                  		cmpi.w	#$280,d0
0000B794 6200 0000                  		bhi.w	DeleteObject
0000B798 4E75                       		rts	
0000B79A                            ; ===========================================================================
0000B79A                            
0000B79A                            Obj2F_DelFlames:			; XREF: Obj2F_ChkDel
0000B79A 7400                       		moveq	#0,d2
0000B79C                            
0000B79C                            loc_B0E8:
0000B79C 45E8 0036                  		lea	$36(a0),a2
0000B7A0 1412                       		move.b	(a2),d2
0000B7A2 421A                       		clr.b	(a2)+
0000B7A4 5302                       		subq.b	#1,d2
0000B7A6 6500                       		bcs.s	locret_B116
0000B7A8                            
0000B7A8                            loc_B0F4:
0000B7A8 7000                       		moveq	#0,d0
0000B7AA 1012                       		move.b	(a2),d0
0000B7AC 421A                       		clr.b	(a2)+
0000B7AE ED48                       		lsl.w	#6,d0
0000B7B0 0640 D000                  		addi.w	#-$3000,d0
0000B7B4 3240                       		movea.w	d0,a1
0000B7B6 6100 0000                  		bsr.w	DeleteObject2
0000B7BA 51CA FFEC                  		dbf	d2,loc_B0F4
0000B7BE 117C 0000 0035             		move.b	#0,$35(a0)
0000B7C4 117C 0000 0034             		move.b	#0,$34(a0)
0000B7CA                            
0000B7CA                            locret_B116:
0000B7CA 4E75                       		rts	
0000B7CC                            ; ===========================================================================
0000B7CC                            ; ---------------------------------------------------------------------------
0000B7CC                            ; Collision data for large moving platforms (MZ)
0000B7CC                            ; ---------------------------------------------------------------------------
0000B7CC                            Obj2F_Data1:	incbin	misc\mz_pfm1.bin
0000B818                            		even
0000B818                            Obj2F_Data2:	incbin	misc\mz_pfm2.bin
0000B844                            		even
0000B844                            Obj2F_Data3:	incbin	misc\mz_pfm3.bin
0000B890                            		even
0000B890                            ; ===========================================================================
0000B890                            ; ---------------------------------------------------------------------------
0000B890                            ; Object 35 - fireball that sits on the	floor (MZ)
0000B890                            ; (appears when	you walk on sinking platforms)
0000B890                            ; ---------------------------------------------------------------------------
0000B890                            
0000B890                            Obj35:					; XREF: Obj_Index
0000B890 7000                       		moveq	#0,d0
0000B892 1028 0024                  		move.b	$24(a0),d0
0000B896 323B 0000                  		move.w	Obj35_Index(pc,d0.w),d1
0000B89A 4EFB 1000                  		jmp	Obj35_Index(pc,d1.w)
0000B89E                            ; ===========================================================================
0000B89E 0000                       Obj35_Index:	dc.w Obj35_Main-Obj35_Index
0000B8A0 0000                       		dc.w loc_B238-Obj35_Index
0000B8A2 0000                       		dc.w Obj35_Move-Obj35_Index
0000B8A4                            ; ===========================================================================
0000B8A4                            
0000B8A4                            Obj35_Main:				; XREF: Obj35_Index
0000B8A4 5428 0024                  		addq.b	#2,$24(a0)
0000B8A8 217C 0000 0000 0004        		move.l	#Map_obj14,4(a0)
0000B8B0 317C 0345 0002             		move.w	#$345,2(a0)
0000B8B6 3168 0008 002A             		move.w	8(a0),$2A(a0)
0000B8BC 117C 0004 0001             		move.b	#4,1(a0)
0000B8C2 117C 0001 0018             		move.b	#1,$18(a0)
0000B8C8 117C 008B 0020             		move.b	#$8B,$20(a0)
0000B8CE 117C 0008 0019             		move.b	#8,$19(a0)
0000B8D4 303C 00C8                  		move.w	#$C8,d0
0000B8D8 4EB9 0000 15C0             		jsr	(PlaySound_Special).l ;	play flame sound
0000B8DE 4A28 0028                  		tst.b	$28(a0)
0000B8E2 6700                       		beq.s	loc_B238
0000B8E4 5428 0024                  		addq.b	#2,$24(a0)
0000B8E8 6000 0000                  		bra.w	Obj35_Move
0000B8EC                            ; ===========================================================================
0000B8EC                            
0000B8EC                            loc_B238:				; XREF: Obj35_Index
0000B8EC 2268 0030                  		movea.l	$30(a0),a1
0000B8F0 3228 0008                  		move.w	8(a0),d1
0000B8F4 9268 002A                  		sub.w	$2A(a0),d1
0000B8F8 0641 000C                  		addi.w	#$C,d1
0000B8FC 3001                       		move.w	d1,d0
0000B8FE E248                       		lsr.w	#1,d0
0000B900 1031 0000                  		move.b	(a1,d0.w),d0
0000B904 4440                       		neg.w	d0
0000B906 D068 002C                  		add.w	$2C(a0),d0
0000B90A 3400                       		move.w	d0,d2
0000B90C D068 003C                  		add.w	$3C(a0),d0
0000B910 3140 000C                  		move.w	d0,$C(a0)
0000B914 0C41 0084                  		cmpi.w	#$84,d1
0000B918 6400                       		bcc.s	loc_B2B0
0000B91A 06A8 0001 0000 0008        		addi.l	#$10000,8(a0)
0000B922 0C41 0080                  		cmpi.w	#$80,d1
0000B926 6400                       		bcc.s	loc_B2B0
0000B928 2028 0008                  		move.l	8(a0),d0
0000B92C 0680 0008 0000             		addi.l	#$80000,d0
0000B932 0280 000F FFFF             		andi.l	#$FFFFF,d0
0000B938 6600                       		bne.s	loc_B2B0
0000B93A 6100 0000                  		bsr.w	SingleObjLoad2
0000B93E 6600                       		bne.s	loc_B2B0
0000B940 12BC 0035                  		move.b	#$35,0(a1)
0000B944 3368 0008 0008             		move.w	8(a0),8(a1)
0000B94A 3342 002C                  		move.w	d2,$2C(a1)
0000B94E 3368 003C 003C             		move.w	$3C(a0),$3C(a1)
0000B954 137C 0001 0028             		move.b	#1,$28(a1)
0000B95A 2468 0038                  		movea.l	$38(a0),a2
0000B95E 6100 FDF0                  		bsr.w	sub_B09C
0000B962                            
0000B962                            loc_B2B0:
0000B962 6000                       		bra.s	Obj35_Animate
0000B964                            ; ===========================================================================
0000B964                            
0000B964                            Obj35_Move:				; XREF: Obj35_Index
0000B964 3028 002C                  		move.w	$2C(a0),d0
0000B968 D068 003C                  		add.w	$3C(a0),d0
0000B96C 3140 000C                  		move.w	d0,$C(a0)
0000B970                            
0000B970                            Obj35_Animate:				; XREF: loc_B238
0000B970 43F9 0000 0000             		lea	(Ani_obj35).l,a1
0000B976 6100 F4AA                  		bsr.w	AnimateSprite
0000B97A 6000 0000                  		bra.w	DisplaySprite
0000B97E                            ; ===========================================================================
0000B97E                            Ani_obj35:
0000B97E                            	include "_anim\obj35.asm"
0000B97E                            ; ---------------------------------------------------------------------------
0000B97E                            ; Animation script - fireball that sits on the	floor (MZ)
0000B97E                            ; ---------------------------------------------------------------------------
0000B97E 0000                       		dc.w byte_B2CE-Ani_obj35
0000B980 0500 2001 21FF             byte_B2CE:	dc.b 5,	0, $20,	1, $21,	$FF
0000B986                            		even
0000B986                            		even
0000B986                            
0000B986                            ; ---------------------------------------------------------------------------
0000B986                            ; Sprite mappings - large moving platforms (MZ)
0000B986                            ; ---------------------------------------------------------------------------
0000B986                            Map_obj2F:
0000B986                            	include "_maps\obj2F.asm"
0000B986                            ; ---------------------------------------------------------------------------
0000B986                            ; Sprite mappings - large moving platforms (MZ)
0000B986                            ; ---------------------------------------------------------------------------
0000B986 0000                       		dc.w byte_B2DA-Map_obj2F
0000B988 0000                       		dc.w byte_B31C-Map_obj2F
0000B98A 0000                       		dc.w byte_B34F-Map_obj2F
0000B98C 0D                         byte_B2DA:	dc.b $D
0000B98D D806 0057 C0               		dc.b $D8, 6, 0,	$57, $C0
0000B992 F005 0053 C0               		dc.b $F0, 5, 0,	$53, $C0
0000B997 000F 0001 C0               		dc.b 0,	$F, 0, 1, $C0
0000B99C D00F 0027 D0               		dc.b $D0, $F, 0, $27, $D0
0000B9A1 F00D 0037 D0               		dc.b $F0, $D, 0, $37, $D0
0000B9A6 F00F 0001 E0               		dc.b $F0, $F, 0, 1, $E0
0000B9AB D00F 0011 F0               		dc.b $D0, $F, 0, $11, $F0
0000B9B0 D00F 003F 10               		dc.b $D0, $F, 0, $3F, $10
0000B9B5 F00D 004F 10               		dc.b $F0, $D, 0, $4F, $10
0000B9BA F00F 0001 00               		dc.b $F0, $F, 0, 1, 0
0000B9BF 000F 0001 20               		dc.b 0,	$F, 0, 1, $20
0000B9C4 D806 0057 30               		dc.b $D8, 6, 0,	$57, $30
0000B9C9 F005 0053 30               		dc.b $F0, 5, 0,	$53, $30
0000B9CE 0A                         byte_B31C:	dc.b $A
0000B9CF D00F 0027 C0               		dc.b $D0, $F, 0, $27, $C0
0000B9D4 F00D 0037 C0               		dc.b $F0, $D, 0, $37, $C0
0000B9D9 000F 0001 C0               		dc.b 0,	$F, 0, 1, $C0
0000B9DE C00F 0027 E0               		dc.b $C0, $F, 0, $27, $E0
0000B9E3 E00D 0037 E0               		dc.b $E0, $D, 0, $37, $E0
0000B9E8 F00F 0001 E0               		dc.b $F0, $F, 0, 1, $E0
0000B9ED C00F 0011 00               		dc.b $C0, $F, 0, $11, 0
0000B9F2 E00F 0001 00               		dc.b $E0, $F, 0, 1, 0
0000B9F7 C00F 003F 20               		dc.b $C0, $F, 0, $3F, $20
0000B9FC E00D 004F 20               		dc.b $E0, $D, 0, $4F, $20
0000BA01 06                         byte_B34F:	dc.b 6
0000BA02 D00F 0011 E0               		dc.b $D0, $F, 0, $11, $E0
0000BA07 F00F 0001 E0               		dc.b $F0, $F, 0, 1, $E0
0000BA0C 100F 0001 E0               		dc.b $10, $F, 0, 1, $E0
0000BA11 D00F 0011 00               		dc.b $D0, $F, 0, $11, 0
0000BA16 F00F 0001 00               		dc.b $F0, $F, 0, 1, 0
0000BA1B 100F 0001 00               		dc.b $10, $F, 0, 1, 0
0000BA20                            		even
0000BA20                            		even
0000BA20                            
0000BA20                            ; ---------------------------------------------------------------------------
0000BA20                            ; Sprite mappings - lava balls (MZ, SLZ)
0000BA20                            ; ---------------------------------------------------------------------------
0000BA20                            Map_obj14:
0000BA20                            	include "_maps\obj14.asm"
0000BA20                            ; --------------------------------------------------------------------------------
0000BA20                            ; Sprite mappings - output from SonMapEd - Sonic 1 format
0000BA20                            ; --------------------------------------------------------------------------------
0000BA20                            
0000BA20                            SME_C6wT7:	
0000BA20 0000 0000                  		dc.w SME_C6wT7_C-SME_C6wT7, SME_C6wT7_12-SME_C6wT7	
0000BA24 0000 0000                  		dc.w SME_C6wT7_18-SME_C6wT7, SME_C6wT7_23-SME_C6wT7	
0000BA28 0000 0000                  		dc.w SME_C6wT7_29-SME_C6wT7, SME_C6wT7_2F-SME_C6wT7	
0000BA2C 01                         SME_C6wT7_C:	dc.b 1	
0000BA2D E80F 0000 F8               		dc.b $E8, $F, 0, 0, $F8	
0000BA32 01                         SME_C6wT7_12:	dc.b 1	
0000BA33 E80F 0000 F8               		dc.b $E8, $F, 0, 0, $F8	
0000BA38 02                         SME_C6wT7_18:	dc.b 2	
0000BA39 EF06 0010 F8               		dc.b $EF, 6, 0, $10, $F8	
0000BA3E E707 0016 08               		dc.b $E7, 7, 0, $16, 8	
0000BA43 01                         SME_C6wT7_23:	dc.b 1	
0000BA44 F00F 0000 E8               		dc.b $F0, $F, 0, 0, $E8	
0000BA49 01                         SME_C6wT7_29:	dc.b 1	
0000BA4A F00F 0000 E8               		dc.b $F0, $F, 0, 0, $E8	
0000BA4F 01                         SME_C6wT7_2F:	dc.b 1	
0000BA50 F00B 001E E8               		dc.b $F0, $B, 0, $1E, $E8	
0000BA56 00                         		even
0000BA56 00                         		even
0000BA56                            
0000BA56                            ; ===========================================================================
0000BA56                            ; ---------------------------------------------------------------------------
0000BA56                            ; Object 30 - large green glassy blocks	(MZ)
0000BA56                            ; ---------------------------------------------------------------------------
0000BA56                            
0000BA56                            Obj30:					; XREF: Obj_Index
0000BA56 7000                       		moveq	#0,d0
0000BA58 1028 0024                  		move.b	$24(a0),d0
0000BA5C 323B 0000                  		move.w	Obj30_Index(pc,d0.w),d1
0000BA60 4EBB 1000                  		jsr	Obj30_Index(pc,d1.w)
0000BA64 3028 0008                  		move.w	8(a0),d0
0000BA68 0240 FF80                  		andi.w	#$FF80,d0
0000BA6C 3238 F700                  		move.w	($FFFFF700).w,d1
0000BA70 0441 0080                  		subi.w	#$80,d1
0000BA74 0241 FF80                  		andi.w	#$FF80,d1
0000BA78 9041                       		sub.w	d1,d0
0000BA7A 0C40 0280                  		cmpi.w	#$280,d0
0000BA7E 6200 0000                  		bhi.w	Obj30_Delete
0000BA82 6000 0000                  		bra.w	DisplaySprite
0000BA86                            ; ===========================================================================
0000BA86                            
0000BA86                            Obj30_Delete:
0000BA86 6000 0000                  		bra.w	DeleteObject
0000BA8A                            ; ===========================================================================
0000BA8A 0000                       Obj30_Index:	dc.w Obj30_Main-Obj30_Index
0000BA8C 0000                       		dc.w Obj30_Block012-Obj30_Index
0000BA8E 0000                       		dc.w Obj30_Reflect012-Obj30_Index
0000BA90 0000                       		dc.w Obj30_Block34-Obj30_Index
0000BA92 0000                       		dc.w Obj30_Reflect34-Obj30_Index
0000BA94                            
0000BA94 0200 00                    Obj30_Vars1:	dc.b 2,	0, 0	; routine num, y-axis dist from	origin,	frame num
0000BA97 0400 01                    		dc.b 4,	0, 1
0000BA9A 0600 02                    Obj30_Vars2:	dc.b 6,	0, 2
0000BA9D 0800 01                    		dc.b 8,	0, 1
0000BAA0                            ; ===========================================================================
0000BAA0                            
0000BAA0                            Obj30_Main:				; XREF: Obj30_Index
0000BAA0 45F9 0000 BA94             		lea	(Obj30_Vars1).l,a2
0000BAA6 7201                       		moveq	#1,d1
0000BAA8 117C 0048 0016             		move.b	#$48,$16(a0)
0000BAAE 0C28 0003 0028             		cmpi.b	#3,$28(a0)	; is object type 0/1/2 ?
0000BAB4 6500                       		bcs.s	loc_B40C	; if yes, branch
0000BAB6 45F9 0000 BA9A             		lea	(Obj30_Vars2).l,a2
0000BABC 7201                       		moveq	#1,d1
0000BABE 117C 0038 0016             		move.b	#$38,$16(a0)
0000BAC4                            
0000BAC4                            loc_B40C:
0000BAC4 2248                       		movea.l	a0,a1
0000BAC6 6000                       		bra.s	Obj30_Load	; load main object
0000BAC8                            ; ===========================================================================
0000BAC8                            
0000BAC8                            Obj30_Loop:
0000BAC8 6100 0000                  		bsr.w	SingleObjLoad2
0000BACC 6600                       		bne.s	loc_B480
0000BACE                            
0000BACE                            Obj30_Load:				; XREF: Obj30_Main
0000BACE 135A 0024                  		move.b	(a2)+,$24(a1)
0000BAD2 12BC 0030                  		move.b	#$30,0(a1)
0000BAD6 3368 0008 0008             		move.w	8(a0),8(a1)
0000BADC 101A                       		move.b	(a2)+,d0
0000BADE 4880                       		ext.w	d0
0000BAE0 D068 000C                  		add.w	$C(a0),d0
0000BAE4 3340 000C                  		move.w	d0,$C(a1)
0000BAE8 237C 0000 0000 0004        		move.l	#Map_obj30,4(a1)
0000BAF0 337C C38E 0002             		move.w	#$C38E,2(a1)
0000BAF6 137C 0004 0001             		move.b	#4,1(a1)
0000BAFC 3369 000C 0030             		move.w	$C(a1),$30(a1)
0000BB02 1368 0028 0028             		move.b	$28(a0),$28(a1)
0000BB08 137C 0020 0019             		move.b	#$20,$19(a1)
0000BB0E 137C 0004 0018             		move.b	#4,$18(a1)
0000BB14 135A 001A                  		move.b	(a2)+,$1A(a1)
0000BB18 2348 003C                  		move.l	a0,$3C(a1)
0000BB1C 51C9 FFAA                  		dbf	d1,Obj30_Loop	; repeat once to load "reflection object"
0000BB20                            
0000BB20 137C 0010 0019             		move.b	#$10,$19(a1)
0000BB26 137C 0003 0018             		move.b	#3,$18(a1)
0000BB2C 5029 0028                  		addq.b	#8,$28(a1)
0000BB30 0229 000F 0028             		andi.b	#$F,$28(a1)
0000BB36                            
0000BB36                            loc_B480:
0000BB36 317C 0090 0032             		move.w	#$90,$32(a0)
0000BB3C 08E8 0004 0001             		bset	#4,1(a0)
0000BB42                            
0000BB42                            Obj30_Block012:				; XREF: Obj30_Index
0000BB42 6100 0000                  		bsr.w	Obj30_Types
0000BB46 323C 002B                  		move.w	#$2B,d1
0000BB4A 343C 0048                  		move.w	#$48,d2
0000BB4E 363C 0049                  		move.w	#$49,d3
0000BB52 3828 0008                  		move.w	8(a0),d4
0000BB56 6000 0000                  		bra.w	SolidObject
0000BB5A                            ; ===========================================================================
0000BB5A                            
0000BB5A                            Obj30_Reflect012:			; XREF: Obj30_Index
0000BB5A 2268 003C                  		movea.l	$3C(a0),a1
0000BB5E 3169 0032 0032             		move.w	$32(a1),$32(a0)
0000BB64 6000 0000                  		bra.w	Obj30_Types
0000BB68                            ; ===========================================================================
0000BB68                            
0000BB68                            Obj30_Block34:				; XREF: Obj30_Index
0000BB68 6100 0000                  		bsr.w	Obj30_Types
0000BB6C 323C 002B                  		move.w	#$2B,d1
0000BB70 343C 0038                  		move.w	#$38,d2
0000BB74 363C 0039                  		move.w	#$39,d3
0000BB78 3828 0008                  		move.w	8(a0),d4
0000BB7C 6000 0000                  		bra.w	SolidObject
0000BB80                            ; ===========================================================================
0000BB80                            
0000BB80                            Obj30_Reflect34:			; XREF: Obj30_Index
0000BB80 2268 003C                  		movea.l	$3C(a0),a1
0000BB84 3169 0032 0032             		move.w	$32(a1),$32(a0)
0000BB8A 3169 000C 0030             		move.w	$C(a1),$30(a0)
0000BB90 6000 0002                  		bra.w	*+4
0000BB94                            
0000BB94                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000BB94                            
0000BB94                            
0000BB94                            Obj30_Types:				; XREF: Obj30_Block012; et al
0000BB94 7000                       		moveq	#0,d0
0000BB96 1028 0028                  		move.b	$28(a0),d0
0000BB9A 0240 0007                  		andi.w	#7,d0
0000BB9E D040                       		add.w	d0,d0
0000BBA0 323B 0000                  		move.w	Obj30_TypeIndex(pc,d0.w),d1
0000BBA4 4EFB 1000                  		jmp	Obj30_TypeIndex(pc,d1.w)
0000BBA8                            ; End of function Obj30_Types
0000BBA8                            
0000BBA8                            ; ===========================================================================
0000BBA8 0000                       Obj30_TypeIndex:dc.w Obj30_Type00-Obj30_TypeIndex
0000BBAA 0000                       		dc.w Obj30_Type01-Obj30_TypeIndex
0000BBAC 0000                       		dc.w Obj30_Type02-Obj30_TypeIndex
0000BBAE 0000                       		dc.w Obj30_Type03-Obj30_TypeIndex
0000BBB0 0000                       		dc.w Obj30_Type04-Obj30_TypeIndex
0000BBB2                            ; ===========================================================================
0000BBB2                            
0000BBB2                            Obj30_Type00:				; XREF: Obj30_TypeIndex
0000BBB2 4E75                       		rts	
0000BBB4                            ; ===========================================================================
0000BBB4                            
0000BBB4                            Obj30_Type01:				; XREF: Obj30_TypeIndex
0000BBB4 1038 FE70                  		move.b	($FFFFFE70).w,d0
0000BBB8 323C 0040                  		move.w	#$40,d1
0000BBBC 6000                       		bra.s	loc_B514
0000BBBE                            ; ===========================================================================
0000BBBE                            
0000BBBE                            Obj30_Type02:				; XREF: Obj30_TypeIndex
0000BBBE 1038 FE70                  		move.b	($FFFFFE70).w,d0
0000BBC2 323C 0040                  		move.w	#$40,d1
0000BBC6 4440                       		neg.w	d0
0000BBC8 D041                       		add.w	d1,d0
0000BBCA                            
0000BBCA                            loc_B514:				; XREF: Obj30_Type01
0000BBCA 0828 0003 0028             		btst	#3,$28(a0)
0000BBD0 6700                       		beq.s	loc_B526
0000BBD2 4440                       		neg.w	d0
0000BBD4 D041                       		add.w	d1,d0
0000BBD6 E208                       		lsr.b	#1,d0
0000BBD8 0640 0020                  		addi.w	#$20,d0
0000BBDC                            
0000BBDC                            loc_B526:
0000BBDC 6000 0000                  		bra.w	loc_B5EE
0000BBE0                            ; ===========================================================================
0000BBE0                            
0000BBE0                            Obj30_Type03:				; XREF: Obj30_TypeIndex
0000BBE0 0828 0003 0028             		btst	#3,$28(a0)
0000BBE6 6700                       		beq.s	loc_B53E
0000BBE8 1038 FE70                  		move.b	($FFFFFE70).w,d0
0000BBEC 0440 0010                  		subi.w	#$10,d0
0000BBF0 6000 0000                  		bra.w	loc_B5EE
0000BBF4                            ; ===========================================================================
0000BBF4                            
0000BBF4                            loc_B53E:
0000BBF4 0828 0003 0022             		btst	#3,$22(a0)
0000BBFA 6600                       		bne.s	loc_B54E
0000BBFC 08A8 0000 0034             		bclr	#0,$34(a0)
0000BC02 6000                       		bra.s	loc_B582
0000BC04                            ; ===========================================================================
0000BC04                            
0000BC04                            loc_B54E:
0000BC04 4A28 0034                  		tst.b	$34(a0)
0000BC08 6600                       		bne.s	loc_B582
0000BC0A 117C 0001 0034             		move.b	#1,$34(a0)
0000BC10 08E8 0000 0035             		bset	#0,$35(a0)
0000BC16 6700                       		beq.s	loc_B582
0000BC18 08E8 0007 0034             		bset	#7,$34(a0)
0000BC1E 317C 0010 0036             		move.w	#$10,$36(a0)
0000BC24 117C 000A 0038             		move.b	#$A,$38(a0)
0000BC2A 0C68 0040 0032             		cmpi.w	#$40,$32(a0)
0000BC30 6600                       		bne.s	loc_B582
0000BC32 317C 0040 0036             		move.w	#$40,$36(a0)
0000BC38                            
0000BC38                            loc_B582:
0000BC38 4A28 0034                  		tst.b	$34(a0)
0000BC3C 6A00                       		bpl.s	loc_B5AA
0000BC3E 4A28 0038                  		tst.b	$38(a0)
0000BC42 6700                       		beq.s	loc_B594
0000BC44 5328 0038                  		subq.b	#1,$38(a0)
0000BC48 6600                       		bne.s	loc_B5AA
0000BC4A                            
0000BC4A                            loc_B594:
0000BC4A 4A68 0032                  		tst.w	$32(a0)
0000BC4E 6700                       		beq.s	loc_B5A4
0000BC50 5368 0032                  		subq.w	#1,$32(a0)
0000BC54 5368 0036                  		subq.w	#1,$36(a0)
0000BC58 6600                       		bne.s	loc_B5AA
0000BC5A                            
0000BC5A                            loc_B5A4:
0000BC5A 08A8 0007 0034             		bclr	#7,$34(a0)
0000BC60                            
0000BC60                            loc_B5AA:
0000BC60 3028 0032                  		move.w	$32(a0),d0
0000BC64 6000                       		bra.s	loc_B5EE
0000BC66                            ; ===========================================================================
0000BC66                            
0000BC66                            Obj30_Type04:				; XREF: Obj30_TypeIndex
0000BC66 0828 0003 0028             		btst	#3,$28(a0)
0000BC6C 6700                       		beq.s	Obj30_ChkSwitch
0000BC6E 1038 FE70                  		move.b	($FFFFFE70).w,d0
0000BC72 0440 0010                  		subi.w	#$10,d0
0000BC76 6000                       		bra.s	loc_B5EE
0000BC78                            ; ===========================================================================
0000BC78                            
0000BC78                            Obj30_ChkSwitch:			; XREF: Obj30_Type04
0000BC78 4A28 0034                  		tst.b	$34(a0)
0000BC7C 6600                       		bne.s	loc_B5E0
0000BC7E 45F8 F7E0                  		lea	($FFFFF7E0).w,a2
0000BC82 7000                       		moveq	#0,d0
0000BC84 1028 0028                  		move.b	$28(a0),d0	; load object type number
0000BC88 E848                       		lsr.w	#4,d0		; read only the	first nybble
0000BC8A 4A32 0000                  		tst.b	(a2,d0.w)	; has switch number d0 been pressed?
0000BC8E 6700                       		beq.s	loc_B5EA	; if not, branch
0000BC90 117C 0001 0034             		move.b	#1,$34(a0)
0000BC96                            
0000BC96                            loc_B5E0:
0000BC96 4A68 0032                  		tst.w	$32(a0)
0000BC9A 6700                       		beq.s	loc_B5EA
0000BC9C 5568 0032                  		subq.w	#2,$32(a0)
0000BCA0                            
0000BCA0                            loc_B5EA:
0000BCA0 3028 0032                  		move.w	$32(a0),d0
0000BCA4                            
0000BCA4                            loc_B5EE:
0000BCA4 3228 0030                  		move.w	$30(a0),d1
0000BCA8 9240                       		sub.w	d0,d1
0000BCAA 3141 000C                  		move.w	d1,$C(a0)
0000BCAE 4E75                       		rts	
0000BCB0                            ; ===========================================================================
0000BCB0                            ; ---------------------------------------------------------------------------
0000BCB0                            ; Sprite mappings - large green	glassy blocks (MZ)
0000BCB0                            ; ---------------------------------------------------------------------------
0000BCB0                            Map_obj30:
0000BCB0                            	include "_maps\obj30.asm"
0000BCB0                            ; ---------------------------------------------------------------------------
0000BCB0                            ; Sprite mappings - large green	glassy blocks (MZ)
0000BCB0                            ; ---------------------------------------------------------------------------
0000BCB0 0000                       		dc.w byte_B600-Map_obj30
0000BCB2 0000                       		dc.w byte_B63D-Map_obj30
0000BCB4 0000                       		dc.w byte_B648-Map_obj30
0000BCB6 0C                         byte_B600:	dc.b $C
0000BCB7 B80C 0000 E0               		dc.b $B8, $C, 0, 0, $E0
0000BCBC B80C 0800 00               		dc.b $B8, $C, 8, 0, 0
0000BCC1 C00F 0004 E0               		dc.b $C0, $F, 0, 4, $E0
0000BCC6 C00F 0804 00               		dc.b $C0, $F, 8, 4, 0
0000BCCB E00F 0004 E0               		dc.b $E0, $F, 0, 4, $E0
0000BCD0 E00F 0804 00               		dc.b $E0, $F, 8, 4, 0
0000BCD5 000F 0004 E0               		dc.b 0,	$F, 0, 4, $E0
0000BCDA 000F 0804 00               		dc.b 0,	$F, 8, 4, 0
0000BCDF 200F 0004 E0               		dc.b $20, $F, 0, 4, $E0
0000BCE4 200F 0804 00               		dc.b $20, $F, 8, 4, 0
0000BCE9 400C 1000 E0               		dc.b $40, $C, $10, 0, $E0
0000BCEE 400C 1800 00               		dc.b $40, $C, $18, 0, 0
0000BCF3 02                         byte_B63D:	dc.b 2
0000BCF4 0806 0014 F0               		dc.b 8,	6, 0, $14, $F0
0000BCF9 0006 0014 00               		dc.b 0,	6, 0, $14, 0
0000BCFE 0A                         byte_B648:	dc.b $A
0000BCFF C80C 0000 E0               		dc.b $C8, $C, 0, 0, $E0
0000BD04 C80C 0800 00               		dc.b $C8, $C, 8, 0, 0
0000BD09 D00F 0004 E0               		dc.b $D0, $F, 0, 4, $E0
0000BD0E D00F 0804 00               		dc.b $D0, $F, 8, 4, 0
0000BD13 F00F 0004 E0               		dc.b $F0, $F, 0, 4, $E0
0000BD18 F00F 0804 00               		dc.b $F0, $F, 8, 4, 0
0000BD1D 100F 0004 E0               		dc.b $10, $F, 0, 4, $E0
0000BD22 100F 0804 00               		dc.b $10, $F, 8, 4, 0
0000BD27 300C 1000 E0               		dc.b $30, $C, $10, 0, $E0
0000BD2C 300C 1800 00               		dc.b $30, $C, $18, 0, 0
0000BD32 00                         		even
0000BD32 00                         		even
0000BD32                            
0000BD32                            ; ===========================================================================
0000BD32                            ; ---------------------------------------------------------------------------
0000BD32                            ; Object 31 - stomping metal blocks on chains (MZ)
0000BD32                            ; ---------------------------------------------------------------------------
0000BD32                            
0000BD32                            Obj31:					; XREF: Obj_Index
0000BD32 7000                       		moveq	#0,d0
0000BD34 1028 0024                  		move.b	$24(a0),d0
0000BD38 323B 0000                  		move.w	Obj31_Index(pc,d0.w),d1
0000BD3C 4EFB 1000                  		jmp	Obj31_Index(pc,d1.w)
0000BD40                            ; ===========================================================================
0000BD40 0000                       Obj31_Index:	dc.w Obj31_Main-Obj31_Index
0000BD42 0000                       		dc.w loc_B798-Obj31_Index
0000BD44 0000                       		dc.w loc_B7FE-Obj31_Index
0000BD46 0000                       		dc.w Obj31_Display2-Obj31_Index
0000BD48 0000                       		dc.w loc_B7E2-Obj31_Index
0000BD4A                            
0000BD4A 0000                       Obj31_SwchNums:	dc.b 0,	0		; switch number, obj number
0000BD4C 0100                       		dc.b 1,	0
0000BD4E                            
0000BD4E 0200 00                    Obj31_Var:	dc.b 2,	0, 0		; XREF: ROM:0000B6E0o
0000BD51 041C 01                    		dc.b 4,	$1C, 1		; routine number, y-position, frame number
0000BD54 08CC 03                    		dc.b 8,	$CC, 3
0000BD57 06F0 02                    		dc.b 6,	$F0, 2
0000BD5A                            
0000BD5A 7000 A000                  word_B6A4:	dc.w $7000, $A000
0000BD5E 5000 7800                  		dc.w $5000, $7800
0000BD62 3800 5800                  		dc.w $3800, $5800
0000BD66 B800                       		dc.w $B800
0000BD68                            ; ===========================================================================
0000BD68                            
0000BD68                            Obj31_Main:				; XREF: Obj31_Index
0000BD68 7000                       		moveq	#0,d0
0000BD6A 1028 0028                  		move.b	$28(a0),d0
0000BD6E 6A00                       		bpl.s	loc_B6CE
0000BD70 0240 007F                  		andi.w	#$7F,d0
0000BD74 D040                       		add.w	d0,d0
0000BD76 45FB 00D2                  		lea	Obj31_SwchNums(pc,d0.w),a2
0000BD7A 115A 003A                  		move.b	(a2)+,$3A(a0)
0000BD7E 101A                       		move.b	(a2)+,d0
0000BD80 1140 0028                  		move.b	d0,$28(a0)
0000BD84                            
0000BD84                            loc_B6CE:
0000BD84 0200 000F                  		andi.b	#$F,d0
0000BD88 D040                       		add.w	d0,d0
0000BD8A 343B 00CE                  		move.w	word_B6A4(pc,d0.w),d2
0000BD8E 4A40                       		tst.w	d0
0000BD90 6600                       		bne.s	loc_B6E0
0000BD92 3142 0032                  		move.w	d2,$32(a0)
0000BD96                            
0000BD96                            loc_B6E0:
0000BD96 45F9 0000 BD4E             		lea	(Obj31_Var).l,a2
0000BD9C 2248                       		movea.l	a0,a1
0000BD9E 7203                       		moveq	#3,d1
0000BDA0 6000                       		bra.s	Obj31_MakeStomper
0000BDA2                            ; ===========================================================================
0000BDA2                            
0000BDA2                            Obj31_Loop:
0000BDA2 6100 0000                  		bsr.w	SingleObjLoad2
0000BDA6 6600 0000                  		bne.w	Obj31_SetSize
0000BDAA                            
0000BDAA                            Obj31_MakeStomper:			; XREF: Obj31_Main
0000BDAA 135A 0024                  		move.b	(a2)+,$24(a1)
0000BDAE 12BC 0031                  		move.b	#$31,0(a1)
0000BDB2 3368 0008 0008             		move.w	8(a0),8(a1)
0000BDB8 101A                       		move.b	(a2)+,d0
0000BDBA 4880                       		ext.w	d0
0000BDBC D068 000C                  		add.w	$C(a0),d0
0000BDC0 3340 000C                  		move.w	d0,$C(a1)
0000BDC4 237C 0000 0000 0004        		move.l	#Map_obj31,4(a1)
0000BDCC 337C 0300 0002             		move.w	#$300,2(a1)
0000BDD2 137C 0004 0001             		move.b	#4,1(a1)
0000BDD8 3369 000C 0030             		move.w	$C(a1),$30(a1)
0000BDDE 1368 0028 0028             		move.b	$28(a0),$28(a1)
0000BDE4 137C 0010 0019             		move.b	#$10,$19(a1)
0000BDEA 3342 0034                  		move.w	d2,$34(a1)
0000BDEE 137C 0004 0018             		move.b	#4,$18(a1)
0000BDF4 135A 001A                  		move.b	(a2)+,$1A(a1)
0000BDF8 0C29 0001 001A             		cmpi.b	#1,$1A(a1)
0000BDFE 6600                       		bne.s	loc_B76A
0000BE00 5341                       		subq.w	#1,d1
0000BE02 1028 0028                  		move.b	$28(a0),d0
0000BE06 0240 00F0                  		andi.w	#$F0,d0
0000BE0A 0C40 0020                  		cmpi.w	#$20,d0
0000BE0E 679A                       		beq.s	Obj31_MakeStomper
0000BE10 137C 0038 0019             		move.b	#$38,$19(a1)
0000BE16 137C 0090 0020             		move.b	#$90,$20(a1)
0000BE1C 5241                       		addq.w	#1,d1
0000BE1E                            
0000BE1E                            loc_B76A:
0000BE1E 2348 003C                  		move.l	a0,$3C(a1)
0000BE22 51C9 FF7E                  		dbf	d1,Obj31_Loop
0000BE26                            
0000BE26 137C 0003 0018             		move.b	#3,$18(a1)
0000BE2C                            
0000BE2C                            Obj31_SetSize:
0000BE2C 7000                       		moveq	#0,d0
0000BE2E 1028 0028                  		move.b	$28(a0),d0
0000BE32 E648                       		lsr.w	#3,d0
0000BE34 0200 000E                  		andi.b	#$E,d0
0000BE38 45FB 0000                  		lea	Obj31_Var2(pc,d0.w),a2
0000BE3C 115A 0019                  		move.b	(a2)+,$19(a0)
0000BE40 115A 001A                  		move.b	(a2)+,$1A(a0)
0000BE44 6000                       		bra.s	loc_B798
0000BE46                            ; ===========================================================================
0000BE46 3800                       Obj31_Var2:	dc.b $38, 0		; width, frame number
0000BE48 3009                       		dc.b $30, 9
0000BE4A 100A                       		dc.b $10, $A
0000BE4C                            ; ===========================================================================
0000BE4C                            
0000BE4C                            loc_B798:				; XREF: Obj31_Index
0000BE4C 6100 0000                  		bsr.w	Obj31_Types
0000BE50 31E8 000C F7A4             		move.w	$C(a0),($FFFFF7A4).w
0000BE56 7200                       		moveq	#0,d1
0000BE58 1228 0019                  		move.b	$19(a0),d1
0000BE5C 0641 000B                  		addi.w	#$B,d1
0000BE60 343C 000C                  		move.w	#$C,d2
0000BE64 363C 000D                  		move.w	#$D,d3
0000BE68 3828 0008                  		move.w	8(a0),d4
0000BE6C 6100 0000                  		bsr.w	SolidObject
0000BE70 0828 0003 0022             		btst	#3,$22(a0)
0000BE76 6700                       		beq.s	Obj31_Display
0000BE78 0C28 0010 0032             		cmpi.b	#$10,$32(a0)
0000BE7E 6400                       		bcc.s	Obj31_Display
0000BE80 2448                       		movea.l	a0,a2
0000BE82 41F8 D000                  		lea	($FFFFD000).w,a0
0000BE86 4EB9 0000 0000             		jsr	KillSonic
0000BE8C 204A                       		movea.l	a2,a0
0000BE8E                            
0000BE8E                            Obj31_Display:
0000BE8E 6100 0000                  		bsr.w	DisplaySprite
0000BE92 6000 0000                  		bra.w	Obj31_ChkDel
0000BE96                            ; ===========================================================================
0000BE96                            
0000BE96                            loc_B7E2:				; XREF: Obj31_Index
0000BE96 117C 0080 0016             		move.b	#$80,$16(a0)
0000BE9C 08E8 0004 0001             		bset	#4,1(a0)
0000BEA2 2268 003C                  		movea.l	$3C(a0),a1
0000BEA6 1029 0032                  		move.b	$32(a1),d0
0000BEAA EA08                       		lsr.b	#5,d0
0000BEAC 5600                       		addq.b	#3,d0
0000BEAE 1140 001A                  		move.b	d0,$1A(a0)
0000BEB2                            
0000BEB2                            loc_B7FE:				; XREF: Obj31_Index
0000BEB2 2268 003C                  		movea.l	$3C(a0),a1
0000BEB6 7000                       		moveq	#0,d0
0000BEB8 1029 0032                  		move.b	$32(a1),d0
0000BEBC D068 0030                  		add.w	$30(a0),d0
0000BEC0 3140 000C                  		move.w	d0,$C(a0)
0000BEC4                            
0000BEC4                            Obj31_Display2:				; XREF: Obj31_Index
0000BEC4 6100 0000                  		bsr.w	DisplaySprite
0000BEC8                            
0000BEC8                            Obj31_ChkDel:				; XREF: Obj31_Display
0000BEC8 3028 0008                  		move.w	8(a0),d0
0000BECC 0240 FF80                  		andi.w	#$FF80,d0
0000BED0 3238 F700                  		move.w	($FFFFF700).w,d1
0000BED4 0441 0080                  		subi.w	#$80,d1
0000BED8 0241 FF80                  		andi.w	#$FF80,d1
0000BEDC 9041                       		sub.w	d1,d0
0000BEDE 0C40 0280                  		cmpi.w	#$280,d0
0000BEE2 6200 0000                  		bhi.w	DeleteObject
0000BEE6 4E75                       		rts	
0000BEE8                            ; ===========================================================================
0000BEE8                            
0000BEE8                            Obj31_Types:				; XREF: loc_B798
0000BEE8 1028 0028                  		move.b	$28(a0),d0
0000BEEC 0240 000F                  		andi.w	#$F,d0
0000BEF0 D040                       		add.w	d0,d0
0000BEF2 323B 0000                  		move.w	Obj31_TypeIndex(pc,d0.w),d1
0000BEF6 4EFB 1000                  		jmp	Obj31_TypeIndex(pc,d1.w)
0000BEFA                            ; ===========================================================================
0000BEFA 0000                       Obj31_TypeIndex:dc.w Obj31_Type00-Obj31_TypeIndex
0000BEFC 0000                       		dc.w Obj31_Type01-Obj31_TypeIndex
0000BEFE 0000                       		dc.w Obj31_Type01-Obj31_TypeIndex
0000BF00 0000                       		dc.w Obj31_Type03-Obj31_TypeIndex
0000BF02 0000                       		dc.w Obj31_Type01-Obj31_TypeIndex
0000BF04 0000                       		dc.w Obj31_Type03-Obj31_TypeIndex
0000BF06 0000                       		dc.w Obj31_Type01-Obj31_TypeIndex
0000BF08                            ; ===========================================================================
0000BF08                            
0000BF08                            Obj31_Type00:				; XREF: Obj31_TypeIndex
0000BF08 45F8 F7E0                  		lea	($FFFFF7E0).w,a2 ; load	switch statuses
0000BF0C 7000                       		moveq	#0,d0
0000BF0E 1028 003A                  		move.b	$3A(a0),d0	; move number 0	or 1 to	d0
0000BF12 4A32 0000                  		tst.b	(a2,d0.w)	; has switch (d0) been pressed?
0000BF16 6700                       		beq.s	loc_B8A8	; if not, branch
0000BF18 4A78 F7A4                  		tst.w	($FFFFF7A4).w
0000BF1C 6A00                       		bpl.s	loc_B872
0000BF1E 0C28 0010 0032             		cmpi.b	#$10,$32(a0)
0000BF24 6700                       		beq.s	loc_B8A0
0000BF26                            
0000BF26                            loc_B872:
0000BF26 4A68 0032                  		tst.w	$32(a0)
0000BF2A 6700                       		beq.s	loc_B8A0
0000BF2C 1038 FE0F                  		move.b	($FFFFFE0F).w,d0
0000BF30 0200 000F                  		andi.b	#$F,d0
0000BF34 6600                       		bne.s	loc_B892
0000BF36 4A28 0001                  		tst.b	1(a0)
0000BF3A 6A00                       		bpl.s	loc_B892
0000BF3C 303C 00C7                  		move.w	#$C7,d0
0000BF40 4EB9 0000 15C0             		jsr	(PlaySound_Special).l ;	play rising chain sound
0000BF46                            
0000BF46                            loc_B892:
0000BF46 0468 0080 0032             		subi.w	#$80,$32(a0)
0000BF4C 6400                       		bcc.s	Obj31_Restart
0000BF4E 317C 0000 0032             		move.w	#0,$32(a0)
0000BF54                            
0000BF54                            loc_B8A0:
0000BF54 317C 0000 0012             		move.w	#0,$12(a0)
0000BF5A 6000                       		bra.s	Obj31_Restart
0000BF5C                            ; ===========================================================================
0000BF5C                            
0000BF5C                            loc_B8A8:				; XREF: Obj31_Type00
0000BF5C 3228 0034                  		move.w	$34(a0),d1
0000BF60 B268 0032                  		cmp.w	$32(a0),d1
0000BF64 6700                       		beq.s	Obj31_Restart
0000BF66 3028 0012                  		move.w	$12(a0),d0
0000BF6A 0668 0070 0012             		addi.w	#$70,$12(a0)	; make object fall
0000BF70 D168 0032                  		add.w	d0,$32(a0)
0000BF74 B268 0032                  		cmp.w	$32(a0),d1
0000BF78 6200                       		bhi.s	Obj31_Restart
0000BF7A 3141 0032                  		move.w	d1,$32(a0)
0000BF7E 317C 0000 0012             		move.w	#0,$12(a0)	; stop object falling
0000BF84 4A28 0001                  		tst.b	1(a0)
0000BF88 6A00                       		bpl.s	Obj31_Restart
0000BF8A 303C 00BD                  		move.w	#$BD,d0
0000BF8E 4EB9 0000 15C0             		jsr	(PlaySound_Special).l ;	play stomping sound
0000BF94                            
0000BF94                            Obj31_Restart:
0000BF94 7000                       		moveq	#0,d0
0000BF96 1028 0032                  		move.b	$32(a0),d0
0000BF9A D068 0030                  		add.w	$30(a0),d0
0000BF9E 3140 000C                  		move.w	d0,$C(a0)
0000BFA2 4E75                       		rts	
0000BFA4                            ; ===========================================================================
0000BFA4                            
0000BFA4                            Obj31_Type01:				; XREF: Obj31_TypeIndex
0000BFA4 4A68 0036                  		tst.w	$36(a0)
0000BFA8 6700                       		beq.s	loc_B938
0000BFAA 4A68 0038                  		tst.w	$38(a0)
0000BFAE 6700                       		beq.s	loc_B902
0000BFB0 5368 0038                  		subq.w	#1,$38(a0)
0000BFB4 6000                       		bra.s	loc_B97C
0000BFB6                            ; ===========================================================================
0000BFB6                            
0000BFB6                            loc_B902:
0000BFB6 1038 FE0F                  		move.b	($FFFFFE0F).w,d0
0000BFBA 0200 000F                  		andi.b	#$F,d0
0000BFBE 6600                       		bne.s	loc_B91C
0000BFC0 4A28 0001                  		tst.b	1(a0)
0000BFC4 6A00                       		bpl.s	loc_B91C
0000BFC6 303C 00C7                  		move.w	#$C7,d0
0000BFCA 4EB9 0000 15C0             		jsr	(PlaySound_Special).l ;	play rising chain sound
0000BFD0                            
0000BFD0                            loc_B91C:
0000BFD0 0468 0080 0032             		subi.w	#$80,$32(a0)
0000BFD6 6400                       		bcc.s	loc_B97C
0000BFD8 317C 0000 0032             		move.w	#0,$32(a0)
0000BFDE 317C 0000 0012             		move.w	#0,$12(a0)
0000BFE4 317C 0000 0036             		move.w	#0,$36(a0)
0000BFEA 6000                       		bra.s	loc_B97C
0000BFEC                            ; ===========================================================================
0000BFEC                            
0000BFEC                            loc_B938:				; XREF: Obj31_Type01
0000BFEC 3228 0034                  		move.w	$34(a0),d1
0000BFF0 B268 0032                  		cmp.w	$32(a0),d1
0000BFF4 6700                       		beq.s	loc_B97C
0000BFF6 3028 0012                  		move.w	$12(a0),d0
0000BFFA 0668 0070 0012             		addi.w	#$70,$12(a0)	; make object fall
0000C000 D168 0032                  		add.w	d0,$32(a0)
0000C004 B268 0032                  		cmp.w	$32(a0),d1
0000C008 6200                       		bhi.s	loc_B97C
0000C00A 3141 0032                  		move.w	d1,$32(a0)
0000C00E 317C 0000 0012             		move.w	#0,$12(a0)	; stop object falling
0000C014 317C 0001 0036             		move.w	#1,$36(a0)
0000C01A 317C 003C 0038             		move.w	#$3C,$38(a0)
0000C020 4A28 0001                  		tst.b	1(a0)
0000C024 6A00                       		bpl.s	loc_B97C
0000C026 303C 00BD                  		move.w	#$BD,d0
0000C02A 4EB9 0000 15C0             		jsr	(PlaySound_Special).l ;	play stomping sound
0000C030                            
0000C030                            loc_B97C:
0000C030 6000 FF62                  		bra.w	Obj31_Restart
0000C034                            ; ===========================================================================
0000C034                            
0000C034                            Obj31_Type03:				; XREF: Obj31_TypeIndex
0000C034 3038 D008                  		move.w	($FFFFD008).w,d0
0000C038 9068 0008                  		sub.w	8(a0),d0
0000C03C 6400                       		bcc.s	loc_B98C
0000C03E 4440                       		neg.w	d0
0000C040                            
0000C040                            loc_B98C:
0000C040 0C40 0090                  		cmpi.w	#$90,d0
0000C044 6400                       		bcc.s	loc_B996
0000C046 5228 0028                  		addq.b	#1,$28(a0)
0000C04A                            
0000C04A                            loc_B996:
0000C04A 6000 FF48                  		bra.w	Obj31_Restart
0000C04E                            ; ===========================================================================
0000C04E                            ; ---------------------------------------------------------------------------
0000C04E                            ; Object 45 - spiked metal block from beta version (MZ)
0000C04E                            ; ---------------------------------------------------------------------------
0000C04E                            
0000C04E                            Obj45:					; XREF: Obj_Index
0000C04E 7000                       		moveq	#0,d0
0000C050 1028 0024                  		move.b	$24(a0),d0
0000C054 323B 0000                  		move.w	Obj45_Index(pc,d0.w),d1
0000C058 4EFB 1000                  		jmp	Obj45_Index(pc,d1.w)
0000C05C                            ; ===========================================================================
0000C05C 0000                       Obj45_Index:	dc.w Obj45_Main-Obj45_Index
0000C05E 0000                       		dc.w Obj45_Solid-Obj45_Index
0000C060 0000                       		dc.w loc_BA8E-Obj45_Index
0000C062 0000                       		dc.w Obj45_Display-Obj45_Index
0000C064 0000                       		dc.w loc_BA7A-Obj45_Index
0000C066                            
0000C066 0204 00                    Obj45_Var:	dc.b	2,   4,	  0	; routine number, x-position, frame number
0000C069 04E4 01                    		dc.b	4, $E4,	  1
0000C06C 0834 03                    		dc.b	8, $34,	  3
0000C06F 0628 02                    		dc.b	6, $28,	  2
0000C072                            
0000C072 3800                       word_B9BE:	dc.w $3800
0000C074 A000                       		dc.w -$6000
0000C076 5000                       		dc.w $5000
0000C078                            ; ===========================================================================
0000C078                            
0000C078                            Obj45_Main:				; XREF: Obj45_Index
0000C078 7000                       		moveq	#0,d0
0000C07A 1028 0028                  		move.b	$28(a0),d0
0000C07E D040                       		add.w	d0,d0
0000C080 343B 00F0                  		move.w	word_B9BE(pc,d0.w),d2
0000C084 45F9 0000 C066             		lea	(Obj45_Var).l,a2
0000C08A 2248                       		movea.l	a0,a1
0000C08C 7203                       		moveq	#3,d1
0000C08E 6000                       		bra.s	Obj45_Load
0000C090                            ; ===========================================================================
0000C090                            
0000C090                            Obj45_Loop:
0000C090 6100 0000                  		bsr.w	SingleObjLoad2
0000C094 6600                       		bne.s	loc_BA52
0000C096                            
0000C096                            Obj45_Load:				; XREF: Obj45_Main
0000C096 135A 0024                  		move.b	(a2)+,$24(a1)
0000C09A 12BC 0045                  		move.b	#$45,0(a1)
0000C09E 3368 000C 000C             		move.w	$C(a0),$C(a1)
0000C0A4 101A                       		move.b	(a2)+,d0
0000C0A6 4880                       		ext.w	d0
0000C0A8 D068 0008                  		add.w	8(a0),d0
0000C0AC 3340 0008                  		move.w	d0,8(a1)
0000C0B0 237C 0000 0000 0004        		move.l	#Map_obj45,4(a1)
0000C0B8 337C 0300 0002             		move.w	#$300,2(a1)
0000C0BE 137C 0004 0001             		move.b	#4,1(a1)
0000C0C4 3369 0008 0030             		move.w	8(a1),$30(a1)
0000C0CA 3368 0008 003A             		move.w	8(a0),$3A(a1)
0000C0D0 1368 0028 0028             		move.b	$28(a0),$28(a1)
0000C0D6 137C 0020 0019             		move.b	#$20,$19(a1)
0000C0DC 3342 0034                  		move.w	d2,$34(a1)
0000C0E0 137C 0004 0018             		move.b	#4,$18(a1)
0000C0E6 0C12 0001                  		cmpi.b	#1,(a2)
0000C0EA 6600                       		bne.s	loc_BA40
0000C0EC 137C 0091 0020             		move.b	#$91,$20(a1)
0000C0F2                            
0000C0F2                            loc_BA40:
0000C0F2 135A 001A                  		move.b	(a2)+,$1A(a1)
0000C0F6 2348 003C                  		move.l	a0,$3C(a1)
0000C0FA 51C9 FF94                  		dbf	d1,Obj45_Loop	; repeat 3 times
0000C0FE                            
0000C0FE 137C 0003 0018             		move.b	#3,$18(a1)
0000C104                            
0000C104                            loc_BA52:
0000C104 117C 0010 0019             		move.b	#$10,$19(a0)
0000C10A                            
0000C10A                            Obj45_Solid:				; XREF: Obj45_Index
0000C10A 3F28 0008                  		move.w	8(a0),-(sp)
0000C10E 6100 0000                  		bsr.w	Obj45_Move
0000C112 323C 0017                  		move.w	#$17,d1
0000C116 343C 0020                  		move.w	#$20,d2
0000C11A 363C 0020                  		move.w	#$20,d3
0000C11E 381F                       		move.w	(sp)+,d4
0000C120 6100 0000                  		bsr.w	SolidObject
0000C124 6100 0000                  		bsr.w	DisplaySprite
0000C128 6000 0000                  		bra.w	Obj45_ChkDel
0000C12C                            ; ===========================================================================
0000C12C                            
0000C12C                            loc_BA7A:				; XREF: Obj45_Index
0000C12C 2268 003C                  		movea.l	$3C(a0),a1
0000C130 1029 0032                  		move.b	$32(a1),d0
0000C134 0600 0010                  		addi.b	#$10,d0
0000C138 EA08                       		lsr.b	#5,d0
0000C13A 5600                       		addq.b	#3,d0
0000C13C 1140 001A                  		move.b	d0,$1A(a0)
0000C140                            
0000C140                            loc_BA8E:				; XREF: Obj45_Index
0000C140 2268 003C                  		movea.l	$3C(a0),a1
0000C144 7000                       		moveq	#0,d0
0000C146 1029 0032                  		move.b	$32(a1),d0
0000C14A 4440                       		neg.w	d0
0000C14C D068 0030                  		add.w	$30(a0),d0
0000C150 3140 0008                  		move.w	d0,8(a0)
0000C154                            
0000C154                            Obj45_Display:				; XREF: Obj45_Index
0000C154 6100 0000                  		bsr.w	DisplaySprite
0000C158                            
0000C158                            Obj45_ChkDel:				; XREF: Obj45_Solid
0000C158 3028 003A                  		move.w	$3A(a0),d0
0000C15C 0240 FF80                  		andi.w	#$FF80,d0
0000C160 3238 F700                  		move.w	($FFFFF700).w,d1
0000C164 0441 0080                  		subi.w	#$80,d1
0000C168 0241 FF80                  		andi.w	#$FF80,d1
0000C16C 9041                       		sub.w	d1,d0
0000C16E 0C40 0280                  		cmpi.w	#$280,d0
0000C172 6200 0000                  		bhi.w	DeleteObject
0000C176 4E75                       		rts	
0000C178                            
0000C178                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000C178                            
0000C178                            
0000C178                            Obj45_Move:				; XREF: Obj45_Solid
0000C178 7000                       		moveq	#0,d0
0000C17A 1028 0028                  		move.b	$28(a0),d0
0000C17E D040                       		add.w	d0,d0
0000C180 323B 0000                  		move.w	off_BAD6(pc,d0.w),d1
0000C184 4EFB 1000                  		jmp	off_BAD6(pc,d1.w)
0000C188                            ; End of function Obj45_Move
0000C188                            
0000C188                            ; ===========================================================================
0000C188 0000                       off_BAD6:	dc.w loc_BADA-off_BAD6
0000C18A 0000                       		dc.w loc_BADA-off_BAD6
0000C18C                            ; ===========================================================================
0000C18C                            
0000C18C                            loc_BADA:				; XREF: off_BAD6
0000C18C 4A68 0036                  		tst.w	$36(a0)
0000C190 6700                       		beq.s	loc_BB08
0000C192 4A68 0038                  		tst.w	$38(a0)
0000C196 6700                       		beq.s	loc_BAEC
0000C198 5368 0038                  		subq.w	#1,$38(a0)
0000C19C 6000                       		bra.s	loc_BB3C
0000C19E                            ; ===========================================================================
0000C19E                            
0000C19E                            loc_BAEC:
0000C19E 0468 0080 0032             		subi.w	#$80,$32(a0)
0000C1A4 6400                       		bcc.s	loc_BB3C
0000C1A6 317C 0000 0032             		move.w	#0,$32(a0)
0000C1AC 317C 0000 0010             		move.w	#0,$10(a0)
0000C1B2 317C 0000 0036             		move.w	#0,$36(a0)
0000C1B8 6000                       		bra.s	loc_BB3C
0000C1BA                            ; ===========================================================================
0000C1BA                            
0000C1BA                            loc_BB08:				; XREF: loc_BADA
0000C1BA 3228 0034                  		move.w	$34(a0),d1
0000C1BE B268 0032                  		cmp.w	$32(a0),d1
0000C1C2 6700                       		beq.s	loc_BB3C
0000C1C4 3028 0010                  		move.w	$10(a0),d0
0000C1C8 0668 0070 0010             		addi.w	#$70,$10(a0)
0000C1CE D168 0032                  		add.w	d0,$32(a0)
0000C1D2 B268 0032                  		cmp.w	$32(a0),d1
0000C1D6 6200                       		bhi.s	loc_BB3C
0000C1D8 3141 0032                  		move.w	d1,$32(a0)
0000C1DC 317C 0000 0010             		move.w	#0,$10(a0)
0000C1E2 317C 0001 0036             		move.w	#1,$36(a0)
0000C1E8 317C 003C 0038             		move.w	#$3C,$38(a0)
0000C1EE                            
0000C1EE                            loc_BB3C:
0000C1EE 7000                       		moveq	#0,d0
0000C1F0 1028 0032                  		move.b	$32(a0),d0
0000C1F4 4440                       		neg.w	d0
0000C1F6 D068 0030                  		add.w	$30(a0),d0
0000C1FA 3140 0008                  		move.w	d0,8(a0)
0000C1FE 4E75                       		rts	
0000C200                            ; ===========================================================================
0000C200                            ; ---------------------------------------------------------------------------
0000C200                            ; Sprite mappings - metal stomping blocks on chains (MZ)
0000C200                            ; ---------------------------------------------------------------------------
0000C200                            Map_obj31:
0000C200                            	include "_maps\obj31.asm"
0000C200                            ; ---------------------------------------------------------------------------
0000C200                            ; Sprite mappings - metal stomping blocks on chains (MZ)
0000C200                            ; ---------------------------------------------------------------------------
0000C200 0000                       		dc.w byte_BB64-Map_obj31
0000C202 0000                       		dc.w byte_BB7E-Map_obj31
0000C204 0000                       		dc.w byte_BB98-Map_obj31
0000C206 0000                       		dc.w byte_BB9E-Map_obj31
0000C208 0000                       		dc.w byte_BBA9-Map_obj31
0000C20A 0000                       		dc.w byte_BBBE-Map_obj31
0000C20C 0000                       		dc.w byte_BBDD-Map_obj31
0000C20E 0000                       		dc.w byte_BC06-Map_obj31
0000C210 0000                       		dc.w byte_BC06-Map_obj31
0000C212 0000                       		dc.w byte_BC39-Map_obj31
0000C214 0000                       		dc.w byte_BC53-Map_obj31
0000C216 05                         byte_BB64:	dc.b 5
0000C217 F406 0000 C8               		dc.b $F4, 6, 0,	0, $C8
0000C21C F40A 0006 D8               		dc.b $F4, $A, 0, 6, $D8
0000C221 EC0F 000F F0               		dc.b $EC, $F, 0, $F, $F0
0000C226 F40A 0806 10               		dc.b $F4, $A, 8, 6, $10
0000C22B F406 0800 28               		dc.b $F4, 6, 8,	0, $28
0000C230 05                         byte_BB7E:	dc.b 5
0000C231 F003 121F D4               		dc.b $F0, 3, $12, $1F, $D4
0000C236 F003 121F E8               		dc.b $F0, 3, $12, $1F, $E8
0000C23B F003 121F FC               		dc.b $F0, 3, $12, $1F, $FC
0000C240 F003 121F 10               		dc.b $F0, 3, $12, $1F, $10
0000C245 F003 121F 24               		dc.b $F0, 3, $12, $1F, $24
0000C24A 01                         byte_BB98:	dc.b 1
0000C24B DC0F 100F F0               		dc.b $DC, $F, $10, $F, $F0
0000C250 02                         byte_BB9E:	dc.b 2
0000C251 0001 003F FC               		dc.b 0,	1, 0, $3F, $FC
0000C256 1001 003F FC               		dc.b $10, 1, 0,	$3F, $FC
0000C25B 04                         byte_BBA9:	dc.b 4
0000C25C E001 003F FC               		dc.b $E0, 1, 0,	$3F, $FC
0000C261 F001 003F FC               		dc.b $F0, 1, 0,	$3F, $FC
0000C266 0001 003F FC               		dc.b 0,	1, 0, $3F, $FC
0000C26B 1001 003F FC               		dc.b $10, 1, 0,	$3F, $FC
0000C270 06                         byte_BBBE:	dc.b 6
0000C271 C001 003F FC               		dc.b $C0, 1, 0,	$3F, $FC
0000C276 D001 003F FC               		dc.b $D0, 1, 0,	$3F, $FC
0000C27B E001 003F FC               		dc.b $E0, 1, 0,	$3F, $FC
0000C280 F001 003F FC               		dc.b $F0, 1, 0,	$3F, $FC
0000C285 0001 003F FC               		dc.b 0,	1, 0, $3F, $FC
0000C28A 1001 003F FC               		dc.b $10, 1, 0,	$3F, $FC
0000C28F 08                         byte_BBDD:	dc.b 8
0000C290 A001 003F FC               		dc.b $A0, 1, 0,	$3F, $FC
0000C295 B001 003F FC               		dc.b $B0, 1, 0,	$3F, $FC
0000C29A C001 003F FC               		dc.b $C0, 1, 0,	$3F, $FC
0000C29F D001 003F FC               		dc.b $D0, 1, 0,	$3F, $FC
0000C2A4 E001 003F FC               		dc.b $E0, 1, 0,	$3F, $FC
0000C2A9 F001 003F FC               		dc.b $F0, 1, 0,	$3F, $FC
0000C2AE 0001 003F FC               		dc.b 0,	1, 0, $3F, $FC
0000C2B3 1001 003F FC               		dc.b $10, 1, 0,	$3F, $FC
0000C2B8 0A                         byte_BC06:	dc.b $A
0000C2B9 8001 003F FC               		dc.b $80, 1, 0,	$3F, $FC
0000C2BE 9001 003F FC               		dc.b $90, 1, 0,	$3F, $FC
0000C2C3 A001 003F FC               		dc.b $A0, 1, 0,	$3F, $FC
0000C2C8 B001 003F FC               		dc.b $B0, 1, 0,	$3F, $FC
0000C2CD C001 003F FC               		dc.b $C0, 1, 0,	$3F, $FC
0000C2D2 D001 003F FC               		dc.b $D0, 1, 0,	$3F, $FC
0000C2D7 E001 003F FC               		dc.b $E0, 1, 0,	$3F, $FC
0000C2DC F001 003F FC               		dc.b $F0, 1, 0,	$3F, $FC
0000C2E1 0001 003F FC               		dc.b 0,	1, 0, $3F, $FC
0000C2E6 1001 003F FC               		dc.b $10, 1, 0,	$3F, $FC
0000C2EB 05                         byte_BC39:	dc.b 5
0000C2EC F406 0000 D0               		dc.b $F4, 6, 0,	0, $D0
0000C2F1 F40A 0006 E0               		dc.b $F4, $A, 0, 6, $E0
0000C2F6 F40A 0806 08               		dc.b $F4, $A, 8, 6, 8
0000C2FB F406 0800 20               		dc.b $F4, 6, 8,	0, $20
0000C300 EC0F 000F F0               		dc.b $EC, $F, 0, $F, $F0
0000C305 01                         byte_BC53:	dc.b 1
0000C306 EC0F 002F F0               		dc.b $EC, $F, 0, $2F, $F0
0000C30C 00                         		even
0000C30C 00                         		even
0000C30C                            
0000C30C                            ; ---------------------------------------------------------------------------
0000C30C                            ; Sprite mappings - spiked metal block from beta version (MZ)
0000C30C                            ; ---------------------------------------------------------------------------
0000C30C                            Map_obj45:
0000C30C                            	include "_maps\obj45.asm"
0000C30C                            ; ---------------------------------------------------------------------------
0000C30C                            ; Sprite mappings - spiked metal block from beta version (MZ)
0000C30C                            ; ---------------------------------------------------------------------------
0000C30C 0000                       		dc.w byte_BC6C-Map_obj45
0000C30E 0000                       		dc.w byte_BC7C-Map_obj45
0000C310 0000                       		dc.w byte_BC8C-Map_obj45
0000C312 0000                       		dc.w byte_BC92-Map_obj45
0000C314 0000                       		dc.w byte_BC9D-Map_obj45
0000C316 0000                       		dc.w byte_BCB2-Map_obj45
0000C318 0000                       		dc.w byte_BCD1-Map_obj45
0000C31A 0000                       		dc.w byte_BCFA-Map_obj45
0000C31C 0000                       		dc.w byte_BCFA-Map_obj45
0000C31E 03                         byte_BC6C:	dc.b 3
0000C31F E00B 001F F4               		dc.b $E0, $B, 0, $1F, $F4
0000C324 000B 101F F4               		dc.b 0,	$B, $10, $1F, $F4
0000C329 F003 002B 0C               		dc.b $F0, 3, 0,	$2B, $C
0000C32E 03                         byte_BC7C:	dc.b 3
0000C32F E80C 121B F0               		dc.b $E8, $C, $12, $1B,	$F0
0000C334 FC0C 121B F0               		dc.b $FC, $C, $12, $1B,	$F0
0000C339 100C 121B F0               		dc.b $10, $C, $12, $1B,	$F0
0000C33E 01                         byte_BC8C:	dc.b 1
0000C33F F003 082B FC               		dc.b $F0, 3, 8,	$2B, $FC
0000C344 02                         byte_BC92:	dc.b 2
0000C345 F805 0041 E0               		dc.b $F8, 5, 0,	$41, $E0
0000C34A F805 0041 F0               		dc.b $F8, 5, 0,	$41, $F0
0000C34F 04                         byte_BC9D:	dc.b 4
0000C350 F805 0041 E0               		dc.b $F8, 5, 0,	$41, $E0
0000C355 F805 0041 F0               		dc.b $F8, 5, 0,	$41, $F0
0000C35A F805 0041 00               		dc.b $F8, 5, 0,	$41, 0
0000C35F F805 0041 10               		dc.b $F8, 5, 0,	$41, $10
0000C364 06                         byte_BCB2:	dc.b 6
0000C365 F805 0041 E0               		dc.b $F8, 5, 0,	$41, $E0
0000C36A F805 0041 F0               		dc.b $F8, 5, 0,	$41, $F0
0000C36F F805 0041 00               		dc.b $F8, 5, 0,	$41, 0
0000C374 F805 0041 10               		dc.b $F8, 5, 0,	$41, $10
0000C379 F805 0041 20               		dc.b $F8, 5, 0,	$41, $20
0000C37E F805 0041 30               		dc.b $F8, 5, 0,	$41, $30
0000C383 08                         byte_BCD1:	dc.b 8
0000C384 F805 0041 E0               		dc.b $F8, 5, 0,	$41, $E0
0000C389 F805 0041 F0               		dc.b $F8, 5, 0,	$41, $F0
0000C38E F805 0041 00               		dc.b $F8, 5, 0,	$41, 0
0000C393 F805 0041 10               		dc.b $F8, 5, 0,	$41, $10
0000C398 F805 0041 20               		dc.b $F8, 5, 0,	$41, $20
0000C39D F805 0041 30               		dc.b $F8, 5, 0,	$41, $30
0000C3A2 F805 0041 40               		dc.b $F8, 5, 0,	$41, $40
0000C3A7 F805 0041 50               		dc.b $F8, 5, 0,	$41, $50
0000C3AC 08                         byte_BCFA:	dc.b 8
0000C3AD F805 0041 E0               		dc.b $F8, 5, 0,	$41, $E0
0000C3B2 F805 0041 F0               		dc.b $F8, 5, 0,	$41, $F0
0000C3B7 F805 0041 00               		dc.b $F8, 5, 0,	$41, 0
0000C3BC F805 0041 10               		dc.b $F8, 5, 0,	$41, $10
0000C3C1 F805 0041 20               		dc.b $F8, 5, 0,	$41, $20
0000C3C6 F805 0041 30               		dc.b $F8, 5, 0,	$41, $30
0000C3CB F805 0041 40               		dc.b $F8, 5, 0,	$41, $40
0000C3D0 F805 0041 50               		dc.b $F8, 5, 0,	$41, $50
0000C3D5 F805 0041 60               		dc.b $F8, 5, 0,	$41, $60
0000C3DA F805 0041 70               		dc.b $F8, 5, 0,	$41, $70
0000C3E0 00                         		even
0000C3E0 00                         		even
0000C3E0                            
0000C3E0                            ; ===========================================================================
0000C3E0                            ; ---------------------------------------------------------------------------
0000C3E0                            ; Object 32 - switches (MZ, SYZ, LZ, SBZ)
0000C3E0                            ; ---------------------------------------------------------------------------
0000C3E0                            
0000C3E0                            Obj32:					; XREF: Obj_Index
0000C3E0 7000                       		moveq	#0,d0
0000C3E2 1028 0024                  		move.b	$24(a0),d0
0000C3E6 323B 0000                  		move.w	Obj32_Index(pc,d0.w),d1
0000C3EA 4EFB 1000                  		jmp	Obj32_Index(pc,d1.w)
0000C3EE                            ; ===========================================================================
0000C3EE 0000                       Obj32_Index:	dc.w Obj32_Main-Obj32_Index
0000C3F0 0000                       		dc.w Obj32_Pressed-Obj32_Index
0000C3F2                            ; ===========================================================================
0000C3F2                            
0000C3F2                            Obj32_Main:				; XREF: Obj32_Index
0000C3F2 5428 0024                  		addq.b	#2,$24(a0)
0000C3F6 217C 0000 0000 0004        		move.l	#Map_obj32,4(a0)
0000C3FE 317C 4513 0002             		move.w	#$4513,2(a0)	; MZ specific code
0000C404 0C38 0002 FE10             		cmpi.b	#2,($FFFFFE10).w
0000C40A 6700                       		beq.s	loc_BD60
0000C40C 317C 0513 0002             		move.w	#$513,2(a0)	; SYZ, LZ and SBZ specific code
0000C412                            
0000C412                            loc_BD60:
0000C412 117C 0004 0001             		move.b	#4,1(a0)
0000C418 117C 0010 0019             		move.b	#$10,$19(a0)
0000C41E 117C 0004 0018             		move.b	#4,$18(a0)
0000C424 5668 000C                  		addq.w	#3,$C(a0)
0000C428                            
0000C428                            Obj32_Pressed:				; XREF: Obj32_Index
0000C428 4A28 0001                  		tst.b	1(a0)
0000C42C 6A00                       		bpl.s	Obj32_Display
0000C42E 323C 001B                  		move.w	#$1B,d1
0000C432 343C 0005                  		move.w	#5,d2
0000C436 363C 0005                  		move.w	#5,d3
0000C43A 3828 0008                  		move.w	8(a0),d4
0000C43E 6100 0000                  		bsr.w	SolidObject
0000C442 08A8 0000 001A             		bclr	#0,$1A(a0)	; use "unpressed" frame
0000C448 1028 0028                  		move.b	$28(a0),d0
0000C44C 0240 000F                  		andi.w	#$F,d0
0000C450 47F8 F7E0                  		lea	($FFFFF7E0).w,a3
0000C454 47F3 0000                  		lea	(a3,d0.w),a3
0000C458 7600                       		moveq	#0,d3
0000C45A 0828 0006 0028             		btst	#6,$28(a0)
0000C460 6700                       		beq.s	loc_BDB2
0000C462 7607                       		moveq	#7,d3
0000C464                            
0000C464                            loc_BDB2:
0000C464 4A28 0028                  		tst.b	$28(a0)
0000C468 6A00                       		bpl.s	loc_BDBE
0000C46A 6100 0000                  		bsr.w	Obj32_MZBlock
0000C46E 6600                       		bne.s	loc_BDC8
0000C470                            
0000C470                            loc_BDBE:
0000C470 4A28 0025                  		tst.b	$25(a0)
0000C474 6600                       		bne.s	loc_BDC8
0000C476 0793                       		bclr	d3,(a3)
0000C478 6000                       		bra.s	loc_BDDE
0000C47A                            ; ===========================================================================
0000C47A                            
0000C47A                            loc_BDC8:
0000C47A 4A13                       		tst.b	(a3)
0000C47C 6600                       		bne.s	loc_BDD6
0000C47E 303C 00CD                  		move.w	#$CD,d0
0000C482 4EB9 0000 15C0             		jsr	(PlaySound_Special).l ;	play switch sound
0000C488                            
0000C488                            loc_BDD6:
0000C488 07D3                       		bset	d3,(a3)
0000C48A 08E8 0000 001A             		bset	#0,$1A(a0)	; use "pressed"	frame
0000C490                            
0000C490                            loc_BDDE:
0000C490 0828 0005 0028             		btst	#5,$28(a0)
0000C496 6700                       		beq.s	Obj32_Display
0000C498 5328 001E                  		subq.b	#1,$1E(a0)
0000C49C 6A00                       		bpl.s	Obj32_Display
0000C49E 117C 0007 001E             		move.b	#7,$1E(a0)
0000C4A4 0868 0001 001A             		bchg	#1,$1A(a0)
0000C4AA                            
0000C4AA                            Obj32_Display:
0000C4AA 6100 0000                  		bsr.w	DisplaySprite
0000C4AE 3028 0008                  		move.w	8(a0),d0
0000C4B2 0240 FF80                  		andi.w	#$FF80,d0
0000C4B6 3238 F700                  		move.w	($FFFFF700).w,d1
0000C4BA 0441 0080                  		subi.w	#$80,d1
0000C4BE 0241 FF80                  		andi.w	#$FF80,d1
0000C4C2 9041                       		sub.w	d1,d0
0000C4C4 0C40 0280                  		cmpi.w	#$280,d0
0000C4C8 6200 0000                  		bhi.w	Obj32_Delete
0000C4CC 4E75                       		rts	
0000C4CE                            ; ===========================================================================
0000C4CE                            
0000C4CE                            Obj32_Delete:
0000C4CE 6100 0000                  		bsr.w	DeleteObject
0000C4D2 4E75                       		rts	
0000C4D4                            
0000C4D4                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000C4D4                            
0000C4D4                            
0000C4D4                            Obj32_MZBlock:				; XREF: Obj32_Pressed
0000C4D4 3F03                       		move.w	d3,-(sp)
0000C4D6 3428 0008                  		move.w	8(a0),d2
0000C4DA 3628 000C                  		move.w	$C(a0),d3
0000C4DE 0442 0010                  		subi.w	#$10,d2
0000C4E2 5143                       		subq.w	#8,d3
0000C4E4 383C 0020                  		move.w	#$20,d4
0000C4E8 3A3C 0010                  		move.w	#$10,d5
0000C4EC 43F8 D800                  		lea	($FFFFD800).w,a1 ; begin checking object RAM
0000C4F0 3C3C 005F                  		move.w	#$5F,d6
0000C4F4                            
0000C4F4                            Obj32_MZLoop:
0000C4F4 4A29 0001                  		tst.b	1(a1)
0000C4F8 6A00                       		bpl.s	loc_BE4E
0000C4FA 0C11 0033                  		cmpi.b	#$33,(a1)	; is the object	a green	MZ block?
0000C4FE 6700                       		beq.s	loc_BE5E	; if yes, branch
0000C500                            
0000C500                            loc_BE4E:
0000C500 43E9 0040                  		lea	$40(a1),a1	; check	next object
0000C504 51CE FFEE                  		dbf	d6,Obj32_MZLoop	; repeat $5F times
0000C508                            
0000C508 361F                       		move.w	(sp)+,d3
0000C50A 7000                       		moveq	#0,d0
0000C50C                            
0000C50C                            locret_BE5A:
0000C50C 4E75                       		rts	
0000C50E                            ; ===========================================================================
0000C50E 1010                       Obj32_MZData:	dc.b $10, $10
0000C510                            ; ===========================================================================
0000C510                            
0000C510                            loc_BE5E:				; XREF: Obj32_MZBlock
0000C510 7001                       		moveq	#1,d0
0000C512 0240 003F                  		andi.w	#$3F,d0
0000C516 D040                       		add.w	d0,d0
0000C518 45FB 00F2                  		lea	Obj32_MZData-2(pc,d0.w),a2
0000C51C 121A                       		move.b	(a2)+,d1
0000C51E 4881                       		ext.w	d1
0000C520 3029 0008                  		move.w	8(a1),d0
0000C524 9041                       		sub.w	d1,d0
0000C526 9042                       		sub.w	d2,d0
0000C528 6400                       		bcc.s	loc_BE80
0000C52A D241                       		add.w	d1,d1
0000C52C D041                       		add.w	d1,d0
0000C52E 6500                       		bcs.s	loc_BE84
0000C530 60CE                       		bra.s	loc_BE4E
0000C532                            ; ===========================================================================
0000C532                            
0000C532                            loc_BE80:
0000C532 B044                       		cmp.w	d4,d0
0000C534 62CA                       		bhi.s	loc_BE4E
0000C536                            
0000C536                            loc_BE84:
0000C536 121A                       		move.b	(a2)+,d1
0000C538 4881                       		ext.w	d1
0000C53A 3029 000C                  		move.w	$C(a1),d0
0000C53E 9041                       		sub.w	d1,d0
0000C540 9043                       		sub.w	d3,d0
0000C542 6400                       		bcc.s	loc_BE9A
0000C544 D241                       		add.w	d1,d1
0000C546 D041                       		add.w	d1,d0
0000C548 6500                       		bcs.s	loc_BE9E
0000C54A 60B4                       		bra.s	loc_BE4E
0000C54C                            ; ===========================================================================
0000C54C                            
0000C54C                            loc_BE9A:
0000C54C B045                       		cmp.w	d5,d0
0000C54E 62B0                       		bhi.s	loc_BE4E
0000C550                            
0000C550                            loc_BE9E:
0000C550 361F                       		move.w	(sp)+,d3
0000C552 7001                       		moveq	#1,d0
0000C554 4E75                       		rts	
0000C556                            ; End of function Obj32_MZBlock
0000C556                            
0000C556                            ; ===========================================================================
0000C556                            ; ---------------------------------------------------------------------------
0000C556                            ; Sprite mappings - switches (MZ, SYZ, LZ, SBZ)
0000C556                            ; ---------------------------------------------------------------------------
0000C556                            Map_obj32:
0000C556                            	include "_maps\obj32.asm"
0000C556                            ; ---------------------------------------------------------------------------
0000C556                            ; Sprite mappings - switches (MZ, SYZ, LZ, SBZ)
0000C556                            ; ---------------------------------------------------------------------------
0000C556 0000                       		dc.w byte_BEAC-Map_obj32
0000C558 0000                       		dc.w byte_BEB7-Map_obj32
0000C55A 0000                       		dc.w byte_BEC2-Map_obj32
0000C55C 0000                       		dc.w byte_BEB7-Map_obj32
0000C55E 02                         byte_BEAC:	dc.b 2
0000C55F F505 0000 F0               		dc.b $F5, 5, 0,	0, $F0
0000C564 F505 0800 00               		dc.b $F5, 5, 8,	0, 0
0000C569 02                         byte_BEB7:	dc.b 2
0000C56A F505 0004 F0               		dc.b $F5, 5, 0,	4, $F0
0000C56F F505 0804 00               		dc.b $F5, 5, 8,	4, 0
0000C574 02                         byte_BEC2:	dc.b 2
0000C575 F505 FFFC F0               		dc.b $F5, 5, $FF, $FC, $F0
0000C57A F505 07FC 00               		dc.b $F5, 5, 7,	$FC, 0
0000C57F F805 0000 F8               		dc.b $F8, 5, 0,	0, $F8
0000C584                            		even
0000C584                            		even
0000C584                            
0000C584                            ; ===========================================================================
0000C584                            ; ---------------------------------------------------------------------------
0000C584                            ; Object 33 - pushable blocks (MZ, LZ)
0000C584                            ; ---------------------------------------------------------------------------
0000C584                            
0000C584                            Obj33:					; XREF: Obj_Index
0000C584 7000                       		moveq	#0,d0
0000C586 1028 0024                  		move.b	$24(a0),d0
0000C58A 323B 0000                  		move.w	Obj33_Index(pc,d0.w),d1
0000C58E 4EFB 1000                  		jmp	Obj33_Index(pc,d1.w)
0000C592                            ; ===========================================================================
0000C592 0000                       Obj33_Index:	dc.w Obj33_Main-Obj33_Index
0000C594 0000                       		dc.w loc_BF6E-Obj33_Index
0000C596 0000                       		dc.w loc_C02C-Obj33_Index
0000C598                            
0000C598 1000                       Obj33_Var:	dc.b $10, 0	; object width,	frame number
0000C59A 4001                       		dc.b $40, 1
0000C59C                            ; ===========================================================================
0000C59C                            
0000C59C                            Obj33_Main:				; XREF: Obj33_Index
0000C59C 5428 0024                  		addq.b	#2,$24(a0)
0000C5A0 117C 000F 0016             		move.b	#$F,$16(a0)
0000C5A6 117C 000F 0017             		move.b	#$F,$17(a0)
0000C5AC 217C 0000 0000 0004        		move.l	#Map_obj33,4(a0)
0000C5B4 317C 42B8 0002             		move.w	#$42B8,2(a0)	; MZ specific code
0000C5BA 0C38 0001 FE10             		cmpi.b	#1,($FFFFFE10).w
0000C5C0 6600                       		bne.s	loc_BF16
0000C5C2 317C 43DE 0002             		move.w	#$43DE,2(a0)	; LZ specific code
0000C5C8                            
0000C5C8                            loc_BF16:
0000C5C8 117C 0004 0001             		move.b	#4,1(a0)
0000C5CE 117C 0003 0018             		move.b	#3,$18(a0)
0000C5D4 3168 0008 0034             		move.w	8(a0),$34(a0)
0000C5DA 3168 000C 0036             		move.w	$C(a0),$36(a0)
0000C5E0 7000                       		moveq	#0,d0
0000C5E2 1028 0028                  		move.b	$28(a0),d0
0000C5E6 D040                       		add.w	d0,d0
0000C5E8 0240 000E                  		andi.w	#$E,d0
0000C5EC 45FB 00AA                  		lea	Obj33_Var(pc,d0.w),a2
0000C5F0 115A 0019                  		move.b	(a2)+,$19(a0)
0000C5F4 115A 001A                  		move.b	(a2)+,$1A(a0)
0000C5F8 4A28 0028                  		tst.b	$28(a0)
0000C5FC 6700                       		beq.s	Obj33_ChkGone
0000C5FE 317C C2B8 0002             		move.w	#$C2B8,2(a0)
0000C604                            
0000C604                            Obj33_ChkGone:
0000C604 45F8 FC00                  		lea	($FFFFFC00).w,a2
0000C608 7000                       		moveq	#0,d0
0000C60A 1028 0023                  		move.b	$23(a0),d0
0000C60E 6700                       		beq.s	loc_BF6E
0000C610 08B2 0007 0002             		bclr	#7,2(a2,d0.w)
0000C616 08F2 0000 0002             		bset	#0,2(a2,d0.w)
0000C61C 6600 0000                  		bne.w	DeleteObject
0000C620                            
0000C620                            loc_BF6E:				; XREF: Obj33_Index
0000C620 4A28 0032                  		tst.b	$32(a0)
0000C624 6600 0000                  		bne.w	loc_C046
0000C628 7200                       		moveq	#0,d1
0000C62A 1228 0019                  		move.b	$19(a0),d1
0000C62E 0641 000B                  		addi.w	#$B,d1
0000C632 343C 0010                  		move.w	#$10,d2
0000C636 363C 0011                  		move.w	#$11,d3
0000C63A 3828 0008                  		move.w	8(a0),d4
0000C63E 6100 0000                  		bsr.w	loc_C186
0000C642 0C78 0200 FE10             		cmpi.w	#$200,($FFFFFE10).w ; is the level MZ act 1?
0000C648 6600                       		bne.s	loc_BFC6	; if not, branch
0000C64A 08A8 0007 0028             		bclr	#7,$28(a0)
0000C650 3028 0008                  		move.w	8(a0),d0
0000C654 0C40 0A20                  		cmpi.w	#$A20,d0
0000C658 6500                       		bcs.s	loc_BFC6
0000C65A 0C40 0AA1                  		cmpi.w	#$AA1,d0
0000C65E 6400                       		bcc.s	loc_BFC6
0000C660 3038 F7A4                  		move.w	($FFFFF7A4).w,d0
0000C664 0440 001C                  		subi.w	#$1C,d0
0000C668 3140 000C                  		move.w	d0,$C(a0)
0000C66C 08F8 0007 F7A4             		bset	#7,($FFFFF7A4).w
0000C672 08E8 0007 0028             		bset	#7,$28(a0)
0000C678                            
0000C678                            loc_BFC6:
0000C678 3028 0008                  		move.w	8(a0),d0
0000C67C 0240 FF80                  		andi.w	#$FF80,d0
0000C680 3238 F700                  		move.w	($FFFFF700).w,d1
0000C684 0441 0080                  		subi.w	#$80,d1
0000C688 0241 FF80                  		andi.w	#$FF80,d1
0000C68C 9041                       		sub.w	d1,d0
0000C68E 0C40 0280                  		cmpi.w	#$280,d0
0000C692 6200                       		bhi.s	loc_BFE6
0000C694 6000 0000                  		bra.w	DisplaySprite
0000C698                            ; ===========================================================================
0000C698                            
0000C698                            loc_BFE6:
0000C698 3028 0034                  		move.w	$34(a0),d0
0000C69C 0240 FF80                  		andi.w	#$FF80,d0
0000C6A0 3238 F700                  		move.w	($FFFFF700).w,d1
0000C6A4 0441 0080                  		subi.w	#$80,d1
0000C6A8 0241 FF80                  		andi.w	#$FF80,d1
0000C6AC 9041                       		sub.w	d1,d0
0000C6AE 0C40 0280                  		cmpi.w	#$280,d0
0000C6B2 6200                       		bhi.s	loc_C016
0000C6B4 3168 0034 0008             		move.w	$34(a0),8(a0)
0000C6BA 3168 0036 000C             		move.w	$36(a0),$C(a0)
0000C6C0 117C 0004 0024             		move.b	#4,$24(a0)
0000C6C6 6000                       		bra.s	loc_C02C
0000C6C8                            ; ===========================================================================
0000C6C8                            
0000C6C8                            loc_C016:
0000C6C8 45F8 FC00                  		lea	($FFFFFC00).w,a2
0000C6CC 7000                       		moveq	#0,d0
0000C6CE 1028 0023                  		move.b	$23(a0),d0
0000C6D2 6700                       		beq.s	loc_C028
0000C6D4 08B2 0000 0002             		bclr	#0,2(a2,d0.w)
0000C6DA                            
0000C6DA                            loc_C028:
0000C6DA 6000 0000                  		bra.w	DeleteObject
0000C6DE                            ; ===========================================================================
0000C6DE                            
0000C6DE                            loc_C02C:				; XREF: Obj33_Index
0000C6DE 6100 0000                  		bsr.w	ChkObjOnScreen2
0000C6E2 6700                       		beq.s	locret_C044
0000C6E4 117C 0002 0024             		move.b	#2,$24(a0)
0000C6EA 4228 0032                  		clr.b	$32(a0)
0000C6EE 4268 0010                  		clr.w	$10(a0)
0000C6F2 4268 0012                  		clr.w	$12(a0)
0000C6F6                            
0000C6F6                            locret_C044:
0000C6F6 4E75                       		rts	
0000C6F8                            ; ===========================================================================
0000C6F8                            
0000C6F8                            loc_C046:				; XREF: loc_BF6E
0000C6F8 3F28 0008                  		move.w	8(a0),-(sp)
0000C6FC 0C28 0004 0025             		cmpi.b	#4,$25(a0)
0000C702 6400                       		bcc.s	loc_C056
0000C704 6100 0000                  		bsr.w	SpeedToPos
0000C708                            
0000C708                            loc_C056:
0000C708 0828 0001 0022             		btst	#1,$22(a0)
0000C70E 6700                       		beq.s	loc_C0A0
0000C710 0668 0018 0012             		addi.w	#$18,$12(a0)
0000C716 4EB9 0000 0000             		jsr	ObjHitFloor
0000C71C 4A41                       		tst.w	d1
0000C71E 6A00 0000                  		bpl.w	loc_C09E
0000C722 D368 000C                  		add.w	d1,$C(a0)
0000C726 4268 0012                  		clr.w	$12(a0)
0000C72A 08A8 0001 0022             		bclr	#1,$22(a0)
0000C730 3011                       		move.w	(a1),d0
0000C732 0240 03FF                  		andi.w	#$3FF,d0
0000C736 0C40 016A                  		cmpi.w	#$16A,d0
0000C73A 6500                       		bcs.s	loc_C09E
0000C73C 3028 0030                  		move.w	$30(a0),d0
0000C740 E640                       		asr.w	#3,d0
0000C742 3140 0010                  		move.w	d0,$10(a0)
0000C746 117C 0001 0032             		move.b	#1,$32(a0)
0000C74C 4268 000E                  		clr.w	$E(a0)
0000C750                            
0000C750                            loc_C09E:
0000C750 6000                       		bra.s	loc_C0E6
0000C752                            ; ===========================================================================
0000C752                            
0000C752                            loc_C0A0:
0000C752 4A68 0010                  		tst.w	$10(a0)
0000C756 6700 0000                  		beq.w	loc_C0D6
0000C75A 6B00                       		bmi.s	loc_C0BC
0000C75C 7600                       		moveq	#0,d3
0000C75E 1628 0019                  		move.b	$19(a0),d3
0000C762 4EB9 0000 0000             		jsr	ObjHitWallRight
0000C768 4A41                       		tst.w	d1		; has block touched a wall?
0000C76A 6B00                       		bmi.s	Obj33_StopPush	; if yes, branch
0000C76C 6000                       		bra.s	loc_C0E6
0000C76E                            ; ===========================================================================
0000C76E                            
0000C76E                            loc_C0BC:
0000C76E 7600                       		moveq	#0,d3
0000C770 1628 0019                  		move.b	$19(a0),d3
0000C774 4643                       		not.w	d3
0000C776 4EB9 0000 0000             		jsr	ObjHitWallLeft
0000C77C 4A41                       		tst.w	d1		; has block touched a wall?
0000C77E 6B00                       		bmi.s	Obj33_StopPush	; if yes, branch
0000C780 6000                       		bra.s	loc_C0E6
0000C782                            ; ===========================================================================
0000C782                            
0000C782                            Obj33_StopPush:
0000C782 4268 0010                  		clr.w	$10(a0)		; stop block moving
0000C786 6000                       		bra.s	loc_C0E6
0000C788                            ; ===========================================================================
0000C788                            
0000C788                            loc_C0D6:
0000C788 06A8 0000 2001 000C        		addi.l	#$2001,$C(a0)
0000C790 0C28 00A0 000F             		cmpi.b	#-$60,$F(a0)
0000C796 6400                       		bcc.s	loc_C104
0000C798                            
0000C798                            loc_C0E6:
0000C798 7200                       		moveq	#0,d1
0000C79A 1228 0019                  		move.b	$19(a0),d1
0000C79E 0641 000B                  		addi.w	#$B,d1
0000C7A2 343C 0010                  		move.w	#$10,d2
0000C7A6 363C 0011                  		move.w	#$11,d3
0000C7AA 381F                       		move.w	(sp)+,d4
0000C7AC 6100 0000                  		bsr.w	loc_C186
0000C7B0 6100                       		bsr.s	Obj33_ChkLava
0000C7B2 6000 FEC4                  		bra.w	loc_BFC6
0000C7B6                            ; ===========================================================================
0000C7B6                            
0000C7B6                            loc_C104:
0000C7B6 381F                       		move.w	(sp)+,d4
0000C7B8 43F8 D000                  		lea	($FFFFD000).w,a1
0000C7BC 08A9 0003 0022             		bclr	#3,$22(a1)
0000C7C2 08A8 0003 0022             		bclr	#3,$22(a0)
0000C7C8 6000 FECE                  		bra.w	loc_BFE6
0000C7CC                            ; ===========================================================================
0000C7CC                            
0000C7CC                            Obj33_ChkLava:
0000C7CC 0C78 0201 FE10             		cmpi.w	#$201,($FFFFFE10).w ; is the level MZ act 2?
0000C7D2 6600                       		bne.s	Obj33_ChkLava2	; if not, branch
0000C7D4 343C FFE0                  		move.w	#-$20,d2
0000C7D8 0C68 0DD0 0008             		cmpi.w	#$DD0,8(a0)
0000C7DE 6700                       		beq.s	Obj33_LoadLava
0000C7E0 0C68 0CC0 0008             		cmpi.w	#$CC0,8(a0)
0000C7E6 6700                       		beq.s	Obj33_LoadLava
0000C7E8 0C68 0BA0 0008             		cmpi.w	#$BA0,8(a0)
0000C7EE 6700                       		beq.s	Obj33_LoadLava
0000C7F0 4E75                       		rts	
0000C7F2                            ; ===========================================================================
0000C7F2                            
0000C7F2                            Obj33_ChkLava2:
0000C7F2 0C78 0202 FE10             		cmpi.w	#$202,($FFFFFE10).w ; is the level MZ act 3?
0000C7F8 6600                       		bne.s	Obj33_NoLava	; if not, branch
0000C7FA 343C 0020                  		move.w	#$20,d2
0000C7FE 0C68 0560 0008             		cmpi.w	#$560,8(a0)
0000C804 6700                       		beq.s	Obj33_LoadLava
0000C806 0C68 05C0 0008             		cmpi.w	#$5C0,8(a0)
0000C80C 6700                       		beq.s	Obj33_LoadLava
0000C80E                            
0000C80E                            Obj33_NoLava:
0000C80E 4E75                       		rts	
0000C810                            ; ===========================================================================
0000C810                            
0000C810                            Obj33_LoadLava:
0000C810 6100 0000                  		bsr.w	SingleObjLoad
0000C814 6600                       		bne.s	locret_C184
0000C816 12BC 004C                  		move.b	#$4C,0(a1)	; load lava geyser object
0000C81A 3368 0008 0008             		move.w	8(a0),8(a1)
0000C820 D569 0008                  		add.w	d2,8(a1)
0000C824 3368 000C 000C             		move.w	$C(a0),$C(a1)
0000C82A 0669 0010 000C             		addi.w	#$10,$C(a1)
0000C830 2348 003C                  		move.l	a0,$3C(a1)
0000C834                            
0000C834                            locret_C184:
0000C834 4E75                       		rts	
0000C836                            ; ===========================================================================
0000C836                            
0000C836                            loc_C186:				; XREF: loc_BF6E
0000C836 1028 0025                  		move.b	$25(a0),d0
0000C83A 6700 0000                  		beq.w	loc_C218
0000C83E 5500                       		subq.b	#2,d0
0000C840 6600                       		bne.s	loc_C1AA
0000C842 6100 B31C                  		bsr.w	ExitPlatform
0000C846 0829 0003 0022             		btst	#3,$22(a1)
0000C84C 6600                       		bne.s	loc_C1A4
0000C84E 4228 0025                  		clr.b	$25(a0)
0000C852 4E75                       		rts	
0000C854                            ; ===========================================================================
0000C854                            
0000C854                            loc_C1A4:
0000C854 3404                       		move.w	d4,d2
0000C856 6000 B866                  		bra.w	MvSonicOnPtfm
0000C85A                            ; ===========================================================================
0000C85A                            
0000C85A                            loc_C1AA:
0000C85A 5500                       		subq.b	#2,d0
0000C85C 6600                       		bne.s	loc_C1F2
0000C85E 6100 0000                  		bsr.w	SpeedToPos
0000C862 0668 0018 0012             		addi.w	#$18,$12(a0)
0000C868 4EB9 0000 0000             		jsr	ObjHitFloor
0000C86E 4A41                       		tst.w	d1
0000C870 6A00 0000                  		bpl.w	locret_C1F0
0000C874 D368 000C                  		add.w	d1,$C(a0)
0000C878 4268 0012                  		clr.w	$12(a0)
0000C87C 4228 0025                  		clr.b	$25(a0)
0000C880 3011                       		move.w	(a1),d0
0000C882 0240 03FF                  		andi.w	#$3FF,d0
0000C886 0C40 016A                  		cmpi.w	#$16A,d0
0000C88A 6500                       		bcs.s	locret_C1F0
0000C88C 3028 0030                  		move.w	$30(a0),d0
0000C890 E640                       		asr.w	#3,d0
0000C892 3140 0010                  		move.w	d0,$10(a0)
0000C896 117C 0001 0032             		move.b	#1,$32(a0)
0000C89C 4268 000E                  		clr.w	$E(a0)
0000C8A0                            
0000C8A0                            locret_C1F0:
0000C8A0 4E75                       		rts	
0000C8A2                            ; ===========================================================================
0000C8A2                            
0000C8A2                            loc_C1F2:
0000C8A2 6100 0000                  		bsr.w	SpeedToPos
0000C8A6 3028 0008                  		move.w	8(a0),d0
0000C8AA 0240 000C                  		andi.w	#$C,d0
0000C8AE 6600 0000                  		bne.w	locret_C2E4
0000C8B2 0268 FFF0 0008             		andi.w	#-$10,8(a0)
0000C8B8 3168 0010 0030             		move.w	$10(a0),$30(a0)
0000C8BE 4268 0010                  		clr.w	$10(a0)
0000C8C2 5528 0025                  		subq.b	#2,$25(a0)
0000C8C6 4E75                       		rts	
0000C8C8                            ; ===========================================================================
0000C8C8                            
0000C8C8                            loc_C218:
0000C8C8 6100 0000                  		bsr.w	loc_FAC8
0000C8CC 4A44                       		tst.w	d4
0000C8CE 6700 0000                  		beq.w	locret_C2E4
0000C8D2 6B00 0000                  		bmi.w	locret_C2E4
0000C8D6 4A28 0032                  		tst.b	$32(a0)
0000C8DA 6700                       		beq.s	loc_C230
0000C8DC 6000 0000                  		bra.w	locret_C2E4
0000C8E0                            ; ===========================================================================
0000C8E0                            
0000C8E0                            loc_C230:
0000C8E0 4A40                       		tst.w	d0
0000C8E2 6700 0000                  		beq.w	locret_C2E4
0000C8E6 6B00                       		bmi.s	loc_C268
0000C8E8 0829 0000 0022             		btst	#0,$22(a1)
0000C8EE 6600 0000                  		bne.w	locret_C2E4
0000C8F2 3F00                       		move.w	d0,-(sp)
0000C8F4 7600                       		moveq	#0,d3
0000C8F6 1628 0019                  		move.b	$19(a0),d3
0000C8FA 4EB9 0000 0000             		jsr	ObjHitWallRight
0000C900 301F                       		move.w	(sp)+,d0
0000C902 4A41                       		tst.w	d1
0000C904 6B00 0000                  		bmi.w	locret_C2E4
0000C908 06A8 0001 0000 0008        		addi.l	#$10000,8(a0)
0000C910 7001                       		moveq	#1,d0
0000C912 323C 0040                  		move.w	#$40,d1
0000C916 6000                       		bra.s	loc_C294
0000C918                            ; ===========================================================================
0000C918                            
0000C918                            loc_C268:
0000C918 0829 0000 0022             		btst	#0,$22(a1)
0000C91E 6700                       		beq.s	locret_C2E4
0000C920 3F00                       		move.w	d0,-(sp)
0000C922 7600                       		moveq	#0,d3
0000C924 1628 0019                  		move.b	$19(a0),d3
0000C928 4643                       		not.w	d3
0000C92A 4EB9 0000 0000             		jsr	ObjHitWallLeft
0000C930 301F                       		move.w	(sp)+,d0
0000C932 4A41                       		tst.w	d1
0000C934 6B00                       		bmi.s	locret_C2E4
0000C936 04A8 0001 0000 0008        		subi.l	#$10000,8(a0)
0000C93E 70FF                       		moveq	#-1,d0
0000C940 323C FFC0                  		move.w	#-$40,d1
0000C944                            
0000C944                            loc_C294:
0000C944 43F8 D000                  		lea	($FFFFD000).w,a1
0000C948 D169 0008                  		add.w	d0,8(a1)
0000C94C 3341 0014                  		move.w	d1,$14(a1)
0000C950 337C 0000 0010             		move.w	#0,$10(a1)
0000C956 3F00                       		move.w	d0,-(sp)
0000C958 303C 00A7                  		move.w	#$A7,d0
0000C95C 4EB9 0000 15C0             		jsr	(PlaySound_Special).l ;	play pushing sound
0000C962 301F                       		move.w	(sp)+,d0
0000C964 4A28 0028                  		tst.b	$28(a0)
0000C968 6B00                       		bmi.s	locret_C2E4
0000C96A 3F00                       		move.w	d0,-(sp)
0000C96C 4EB9 0000 0000             		jsr	ObjHitFloor
0000C972 301F                       		move.w	(sp)+,d0
0000C974 0C41 0004                  		cmpi.w	#4,d1
0000C978 6F00                       		ble.s	loc_C2E0
0000C97A 317C 0400 0010             		move.w	#$400,$10(a0)
0000C980 4A40                       		tst.w	d0
0000C982 6A00                       		bpl.s	loc_C2D8
0000C984 4468 0010                  		neg.w	$10(a0)
0000C988                            
0000C988                            loc_C2D8:
0000C988 117C 0006 0025             		move.b	#6,$25(a0)
0000C98E 6000                       		bra.s	locret_C2E4
0000C990                            ; ===========================================================================
0000C990                            
0000C990                            loc_C2E0:
0000C990 D368 000C                  		add.w	d1,$C(a0)
0000C994                            
0000C994                            locret_C2E4:
0000C994 4E75                       		rts	
0000C996                            ; ===========================================================================
0000C996                            ; ---------------------------------------------------------------------------
0000C996                            ; Sprite mappings - pushable blocks (MZ, LZ)
0000C996                            ; ---------------------------------------------------------------------------
0000C996                            Map_obj33:
0000C996                            	include "_maps\obj33.asm"
0000C996                            ; ---------------------------------------------------------------------------
0000C996                            ; Sprite mappings - pushable blocks (MZ, LZ)
0000C996                            ; ---------------------------------------------------------------------------
0000C996 0000                       		dc.w byte_C2EA-Map_obj33
0000C998 0000                       		dc.w byte_C2F0-Map_obj33
0000C99A 01                         byte_C2EA:	dc.b 1
0000C99B F00F 0008 F0               		dc.b $F0, $F, 0, 8, $F0	; single block
0000C9A0 04                         byte_C2F0:	dc.b 4
0000C9A1 F00F 0008 C0               		dc.b $F0, $F, 0, 8, $C0	; row of 4 blocks
0000C9A6 F00F 0008 E0               		dc.b $F0, $F, 0, 8, $E0
0000C9AB F00F 0008 00               		dc.b $F0, $F, 0, 8, 0
0000C9B0 F00F 0008 20               		dc.b $F0, $F, 0, 8, $20
0000C9B6 00                         		even
0000C9B6 00                         		even
0000C9B6                            
0000C9B6                            ; ===========================================================================
0000C9B6                            ; ---------------------------------------------------------------------------
0000C9B6                            ; Object 34 - zone title cards
0000C9B6                            ; ---------------------------------------------------------------------------
0000C9B6                            
0000C9B6                            Obj34:					; XREF: Obj_Index
0000C9B6 7000                       		moveq	#0,d0
0000C9B8 1028 0024                  		move.b	$24(a0),d0
0000C9BC 323B 0000                  		move.w	Obj34_Index(pc,d0.w),d1
0000C9C0 4EFB 1000                  		jmp	Obj34_Index(pc,d1.w)
0000C9C4                            ; ===========================================================================
0000C9C4 0000                       Obj34_Index:	dc.w Obj34_CheckSBZ3-Obj34_Index
0000C9C6 0000                       		dc.w Obj34_ChkPos-Obj34_Index
0000C9C8 0000                       		dc.w Obj34_Wait-Obj34_Index
0000C9CA 0000                       		dc.w Obj34_Wait-Obj34_Index
0000C9CC                            ; ===========================================================================
0000C9CC                            
0000C9CC                            Obj34_CheckSBZ3:			; XREF: Obj34_Index
0000C9CC 2248                       		movea.l	a0,a1
0000C9CE 7000                       		moveq	#0,d0
0000C9D0 1038 FE10                  		move.b	($FFFFFE10).w,d0
0000C9D4 0C78 0103 FE10             		cmpi.w	#$103,($FFFFFE10).w ; check if level is	SBZ 3
0000C9DA 6600                       		bne.s	Obj34_CheckFZ
0000C9DC 7005                       		moveq	#5,d0		; load title card number 5 (SBZ)
0000C9DE                            
0000C9DE                            Obj34_CheckFZ:
0000C9DE 3400                       		move.w	d0,d2
0000C9E0 0C78 0502 FE10             		cmpi.w	#$502,($FFFFFE10).w ; check if level is	FZ
0000C9E6 6600                       		bne.s	Obj34_LoadConfig
0000C9E8 7006                       		moveq	#6,d0		; load title card number 6 (FZ)
0000C9EA 740B                       		moveq	#$B,d2		; use "FINAL" mappings
0000C9EC                            
0000C9EC                            Obj34_LoadConfig:
0000C9EC 47F9 0000 0000             		lea	(Obj34_ConData).l,a3
0000C9F2 E948                       		lsl.w	#4,d0
0000C9F4 D6C0                       		adda.w	d0,a3
0000C9F6 45F9 0000 0000             		lea	(Obj34_ItemData).l,a2
0000C9FC 7203                       		moveq	#3,d1
0000C9FE                            
0000C9FE                            Obj34_Loop:
0000C9FE 12BC 0034                  		move.b	#$34,0(a1)
0000CA02 3353 0008                  		move.w	(a3),8(a1)	; load start x-position
0000CA06 335B 0032                  		move.w	(a3)+,$32(a1)	; load finish x-position (same as start)
0000CA0A 335B 0030                  		move.w	(a3)+,$30(a1)	; load main x-position
0000CA0E 335A 000A                  		move.w	(a2)+,$A(a1)
0000CA12 135A 0024                  		move.b	(a2)+,$24(a1)
0000CA16 101A                       		move.b	(a2)+,d0
0000CA18 6600                       		bne.s	Obj34_ActNumber
0000CA1A 1002                       		move.b	d2,d0
0000CA1C                            
0000CA1C                            Obj34_ActNumber:
0000CA1C 0C00 0007                  		cmpi.b	#7,d0
0000CA20 6600                       		bne.s	Obj34_MakeSprite
0000CA22 D038 FE11                  		add.b	($FFFFFE11).w,d0
0000CA26 0C38 0003 FE11             		cmpi.b	#3,($FFFFFE11).w
0000CA2C 6600                       		bne.s	Obj34_MakeSprite
0000CA2E 5300                       		subq.b	#1,d0
0000CA30                            
0000CA30                            Obj34_MakeSprite:
0000CA30 1340 001A                  		move.b	d0,$1A(a1)	; display frame	number d0
0000CA34 237C 0000 0000 0004        		move.l	#Map_obj34,4(a1)
0000CA3C 337C 8580 0002             		move.w	#$8580,2(a1)
0000CA42 137C 0078 0019             		move.b	#$78,$19(a1)
0000CA48 137C 0000 0001             		move.b	#0,1(a1)
0000CA4E 137C 0000 0018             		move.b	#0,$18(a1)
0000CA54 337C 003C 001E             		move.w	#60,$1E(a1)	; set time delay to 1 second
0000CA5A 43E9 0040                  		lea	$40(a1),a1	; next object
0000CA5E 51C9 FF9E                  		dbf	d1,Obj34_Loop	; repeat sequence another 3 times
0000CA62                            
0000CA62                            Obj34_ChkPos:				; XREF: Obj34_Index
0000CA62 7210                       		moveq	#$10,d1		; set horizontal speed
0000CA64 3028 0030                  		move.w	$30(a0),d0
0000CA68 B068 0008                  		cmp.w	8(a0),d0	; has item reached the target position?
0000CA6C 6700                       		beq.s	loc_C3C8	; if yes, branch
0000CA6E 6C00                       		bge.s	Obj34_Move
0000CA70 4441                       		neg.w	d1
0000CA72                            
0000CA72                            Obj34_Move:
0000CA72 D368 0008                  		add.w	d1,8(a0)	; change item's position
0000CA76                            
0000CA76                            loc_C3C8:
0000CA76 3028 0008                  		move.w	8(a0),d0
0000CA7A 6B00                       		bmi.s	locret_C3D8
0000CA7C 0C40 0200                  		cmpi.w	#$200,d0	; has item moved beyond	$200 on	x-axis?
0000CA80 6400                       		bcc.s	locret_C3D8	; if yes, branch
0000CA82 6000 0000                  		bra.w	DisplaySprite
0000CA86                            ; ===========================================================================
0000CA86                            
0000CA86                            locret_C3D8:
0000CA86 4E75                       		rts	
0000CA88                            ; ===========================================================================
0000CA88                            
0000CA88                            Obj34_Wait:				; XREF: Obj34_Index
0000CA88 4A68 001E                  		tst.w	$1E(a0)		; is time remaining zero?
0000CA8C 6700                       		beq.s	Obj34_ChkPos2	; if yes, branch
0000CA8E 5368 001E                  		subq.w	#1,$1E(a0)	; subtract 1 from time
0000CA92 6000 0000                  		bra.w	DisplaySprite
0000CA96                            ; ===========================================================================
0000CA96                            
0000CA96                            Obj34_ChkPos2:				; XREF: Obj34_Wait
0000CA96 4A28 0001                  		tst.b	1(a0)
0000CA9A 6A00                       		bpl.s	Obj34_ChangeArt
0000CA9C 7220                       		moveq	#$20,d1
0000CA9E 3028 0032                  		move.w	$32(a0),d0
0000CAA2 B068 0008                  		cmp.w	8(a0),d0	; has item reached the finish position?
0000CAA6 6700                       		beq.s	Obj34_ChangeArt	; if yes, branch
0000CAA8 6C00                       		bge.s	Obj34_Move2
0000CAAA 4441                       		neg.w	d1
0000CAAC                            
0000CAAC                            Obj34_Move2:
0000CAAC D368 0008                  		add.w	d1,8(a0)	; change item's position
0000CAB0 3028 0008                  		move.w	8(a0),d0
0000CAB4 6B00                       		bmi.s	locret_C412
0000CAB6 0C40 0200                  		cmpi.w	#$200,d0	; has item moved beyond	$200 on	x-axis?
0000CABA 6400                       		bcc.s	locret_C412	; if yes, branch
0000CABC 6000 0000                  		bra.w	DisplaySprite
0000CAC0                            ; ===========================================================================
0000CAC0                            
0000CAC0                            locret_C412:
0000CAC0 4E75                       		rts	
0000CAC2                            ; ===========================================================================
0000CAC2                            
0000CAC2                            Obj34_ChangeArt:			; XREF: Obj34_ChkPos2
0000CAC2 0C28 0004 0024             		cmpi.b	#4,$24(a0)
0000CAC8 6600                       		bne.s	Obj34_Delete
0000CACA 7002                       		moveq	#2,d0
0000CACC 4EB9 0000 17A4             		jsr	(LoadPLC).l	; load explosion patterns
0000CAD2 7000                       		moveq	#0,d0
0000CAD4 1038 FE10                  		move.b	($FFFFFE10).w,d0
0000CAD8 0640 0015                  		addi.w	#$15,d0
0000CADC 4EB9 0000 17A4             		jsr	(LoadPLC).l	; load animal patterns
0000CAE2                            
0000CAE2                            Obj34_Delete:
0000CAE2 6000 0000                  		bra.w	DeleteObject
0000CAE6                            ; ===========================================================================
0000CAE6 00D0                       Obj34_ItemData:	dc.w $D0	; y-axis position
0000CAE8 0200                       		dc.b 2,	0	; routine number, frame	number (changes)
0000CAEA 00E4                       		dc.w $E4
0000CAEC 0206                       		dc.b 2,	6
0000CAEE 00EA                       		dc.w $EA
0000CAF0 0207                       		dc.b 2,	7
0000CAF2 00E0                       		dc.w $E0
0000CAF4 020A                       		dc.b 2,	$A
0000CAF6                            ; ---------------------------------------------------------------------------
0000CAF6                            ; Title	card configuration data
0000CAF6                            ; Format:
0000CAF6                            ; 4 bytes per item (YYYY XXXX)
0000CAF6                            ; 4 items per level (GREEN HILL, ZONE, ACT X, oval)
0000CAF6                            ; ---------------------------------------------------------------------------
0000CAF6 0000 0120 FEFC 013C 0414+  Obj34_ConData:	dc.w 0,	$120, $FEFC, $13C, $414, $154, $214, $154 ; GHZ
0000CB06 0000 0120 FEF4 0134 040C+  		dc.w 0,	$120, $FEF4, $134, $40C, $14C, $20C, $14C ; LZ
0000CB16 0000 0120 FEE0 0120 03F8+  		dc.w 0,	$120, $FEE0, $120, $3F8, $138, $1F8, $138 ; MZ
0000CB26 0000 0120 FEFC 013C 0414+  		dc.w 0,	$120, $FEFC, $13C, $414, $154, $214, $154 ; SLZ
0000CB36 0000 0120 FF04 0144 041C+  		dc.w 0,	$120, $FF04, $144, $41C, $15C, $21C, $15C ; SYZ
0000CB46 0000 0120 FF04 0144 041C+  		dc.w 0,	$120, $FF04, $144, $41C, $15C, $21C, $15C ; SBZ
0000CB56 0000 0120 FEE4 0124 03EC+  		dc.w 0,	$120, $FEE4, $124, $3EC, $3EC, $1EC, $12C ; FZ
0000CB66                            ; ===========================================================================
0000CB66                            ; ---------------------------------------------------------------------------
0000CB66                            ; Object 39 - "GAME OVER" and "TIME OVER"
0000CB66                            ; ---------------------------------------------------------------------------
0000CB66                            
0000CB66                            Obj39:					; XREF: Obj_Index
0000CB66 7000                       		moveq	#0,d0
0000CB68 1028 0024                  		move.b	$24(a0),d0
0000CB6C 323B 0000                  		move.w	Obj39_Index(pc,d0.w),d1
0000CB70 4EFB 1000                  		jmp	Obj39_Index(pc,d1.w)
0000CB74                            ; ===========================================================================
0000CB74 0000                       Obj39_Index:	dc.w Obj39_ChkPLC-Obj39_Index
0000CB76 0000                       		dc.w loc_C50C-Obj39_Index
0000CB78 0000                       		dc.w Obj39_Wait-Obj39_Index
0000CB7A                            ; ===========================================================================
0000CB7A                            
0000CB7A                            Obj39_ChkPLC:				; XREF: Obj39_Index
0000CB7A 4AB8 F680                  		tst.l	($FFFFF680).w	; are the pattern load cues empty?
0000CB7E 6700                       		beq.s	Obj39_Main	; if yes, branch
0000CB80 4E75                       		rts	
0000CB82                            ; ===========================================================================
0000CB82                            
0000CB82                            Obj39_Main:
0000CB82 5428 0024                  		addq.b	#2,$24(a0)
0000CB86 317C 0050 0008             		move.w	#$50,8(a0)	; set x-position
0000CB8C 0828 0000 001A             		btst	#0,$1A(a0)	; is the object	"OVER"?
0000CB92 6700                       		beq.s	loc_C4EC	; if not, branch
0000CB94 317C 01F0 0008             		move.w	#$1F0,8(a0)	; set x-position for "OVER"
0000CB9A                            
0000CB9A                            loc_C4EC:
0000CB9A 317C 00F0 000A             		move.w	#$F0,$A(a0)
0000CBA0 217C 0000 0000 0004        		move.l	#Map_obj39,4(a0)
0000CBA8 317C 855E 0002             		move.w	#$855E,2(a0)
0000CBAE 117C 0000 0001             		move.b	#0,1(a0)
0000CBB4 117C 0000 0018             		move.b	#0,$18(a0)
0000CBBA                            
0000CBBA                            loc_C50C:				; XREF: Obj39_Index
0000CBBA 7210                       		moveq	#$10,d1		; set horizontal speed
0000CBBC 0C68 0120 0008             		cmpi.w	#$120,8(a0)	; has item reached its target position?
0000CBC2 6700                       		beq.s	Obj39_SetWait	; if yes, branch
0000CBC4 6500                       		bcs.s	Obj39_Move
0000CBC6 4441                       		neg.w	d1
0000CBC8                            
0000CBC8                            Obj39_Move:
0000CBC8 D368 0008                  		add.w	d1,8(a0)	; change item's position
0000CBCC 6000 0000                  		bra.w	DisplaySprite
0000CBD0                            ; ===========================================================================
0000CBD0                            
0000CBD0                            Obj39_SetWait:				; XREF: Obj39_Main
0000CBD0 317C 02D0 001E             		move.w	#720,$1E(a0)	; set time delay to 12 seconds
0000CBD6 5428 0024                  		addq.b	#2,$24(a0)
0000CBDA 4E75                       		rts	
0000CBDC                            ; ===========================================================================
0000CBDC                            
0000CBDC                            Obj39_Wait:				; XREF: Obj39_Index
0000CBDC 1038 F605                  		move.b	($FFFFF605).w,d0
0000CBE0 0200 0070                  		andi.b	#$70,d0		; is button A, B or C pressed?
0000CBE4 6600                       		bne.s	Obj39_ChgMode	; if yes, branch
0000CBE6 0828 0000 001A             		btst	#0,$1A(a0)
0000CBEC 6600                       		bne.s	Obj39_Display
0000CBEE 4A68 001E                  		tst.w	$1E(a0)		; has time delay reached zero?
0000CBF2 6700                       		beq.s	Obj39_ChgMode	; if yes, branch
0000CBF4 5368 001E                  		subq.w	#1,$1E(a0)	; subtract 1 from time delay
0000CBF8 6000 0000                  		bra.w	DisplaySprite
0000CBFC                            ; ===========================================================================
0000CBFC                            
0000CBFC                            Obj39_ChgMode:				; XREF: Obj39_Wait
0000CBFC 4A38 FE1A                  		tst.b	($FFFFFE1A).w	; is time over flag set?
0000CC00 6600                       		bne.s	Obj39_ResetLvl	; if yes, branch
0000CC02 11FC 0014 F600             		move.b	#$14,($FFFFF600).w ; set mode to $14 (continue screen)
0000CC08 4A38 FE18                  		tst.b	($FFFFFE18).w	; do you have any continues?
0000CC0C 6600                       		bne.s	Obj39_Display	; if yes, branch
0000CC0E 11FC 0000 F600             		move.b	#0,($FFFFF600).w ; set mode to 0 (Sega screen)
0000CC14 6000                       		bra.s	Obj39_Display
0000CC16                            ; ===========================================================================
0000CC16                            
0000CC16                            Obj39_ResetLvl:				; XREF: Obj39_ChgMode
0000CC16 31FC 0001 FE02             		move.w	#1,($FFFFFE02).w ; restart level
0000CC1C                            
0000CC1C                            Obj39_Display:				; XREF: Obj39_ChgMode
0000CC1C 6000 0000                  		bra.w	DisplaySprite
0000CC20                            ; ===========================================================================
0000CC20                            ; ---------------------------------------------------------------------------
0000CC20                            ; Object 3A - "SONIC GOT THROUGH" title	card
0000CC20                            ; ---------------------------------------------------------------------------
0000CC20                            
0000CC20                            Obj3A:					; XREF: Obj_Index
0000CC20 7000                       		moveq	#0,d0
0000CC22 1028 0024                  		move.b	$24(a0),d0
0000CC26 323B 0000                  		move.w	Obj3A_Index(pc,d0.w),d1
0000CC2A 4EFB 1000                  		jmp	Obj3A_Index(pc,d1.w)
0000CC2E                            ; ===========================================================================
0000CC2E 0000                       Obj3A_Index:	dc.w Obj3A_ChkPLC-Obj3A_Index
0000CC30 0000                       		dc.w Obj3A_ChkPos-Obj3A_Index
0000CC32 0000                       		dc.w Obj3A_Wait-Obj3A_Index
0000CC34 0000                       		dc.w Obj3A_TimeBonus-Obj3A_Index
0000CC36 0000                       		dc.w Obj3A_Wait-Obj3A_Index
0000CC38 0000                       		dc.w Obj3A_NextLevel-Obj3A_Index
0000CC3A 0000                       		dc.w Obj3A_Wait-Obj3A_Index
0000CC3C 0000                       		dc.w Obj3A_ChkPos2-Obj3A_Index
0000CC3E 0000                       		dc.w loc_C766-Obj3A_Index
0000CC40                            ; ===========================================================================
0000CC40                            
0000CC40                            Obj3A_ChkPLC:				; XREF: Obj3A_Index
0000CC40 4AB8 F680                  		tst.l	($FFFFF680).w	; are the pattern load cues empty?
0000CC44 6700                       		beq.s	Obj3A_Main	; if yes, branch
0000CC46 4E75                       		rts	
0000CC48                            ; ===========================================================================
0000CC48                            
0000CC48                            Obj3A_Main:
0000CC48 2248                       		movea.l	a0,a1
0000CC4A 45F9 0000 0000             		lea	(Obj3A_Config).l,a2
0000CC50 7206                       		moveq	#6,d1
0000CC52                            
0000CC52                            Obj3A_Loop:
0000CC52 12BC 003A                  		move.b	#$3A,0(a1)
0000CC56 3352 0008                  		move.w	(a2),8(a1)	; load start x-position
0000CC5A 335A 0032                  		move.w	(a2)+,$32(a1)	; load finish x-position (same as start)
0000CC5E 335A 0030                  		move.w	(a2)+,$30(a1)	; load main x-position
0000CC62 335A 000A                  		move.w	(a2)+,$A(a1)	; load y-position
0000CC66 135A 0024                  		move.b	(a2)+,$24(a1)
0000CC6A 101A                       		move.b	(a2)+,d0
0000CC6C 0C00 0006                  		cmpi.b	#6,d0
0000CC70 6600                       		bne.s	loc_C5CA
0000CC72 D038 FE11                  		add.b	($FFFFFE11).w,d0 ; add act number to frame number
0000CC76                            
0000CC76                            loc_C5CA:
0000CC76 1340 001A                  		move.b	d0,$1A(a1)
0000CC7A 237C 0000 0000 0004        		move.l	#Map_obj3A,4(a1)
0000CC82 337C 8580 0002             		move.w	#$8580,2(a1)
0000CC88 137C 0000 0001             		move.b	#0,1(a1)
0000CC8E 43E9 0040                  		lea	$40(a1),a1
0000CC92 51C9 FFBE                  		dbf	d1,Obj3A_Loop	; repeat 6 times
0000CC96                            
0000CC96                            Obj3A_ChkPos:				; XREF: Obj3A_Index
0000CC96 7210                       		moveq	#$10,d1		; set horizontal speed
0000CC98 3028 0030                  		move.w	$30(a0),d0
0000CC9C B068 0008                  		cmp.w	8(a0),d0	; has item reached its target position?
0000CCA0 6700                       		beq.s	loc_C61A	; if yes, branch
0000CCA2 6C00                       		bge.s	Obj3A_Move
0000CCA4 4441                       		neg.w	d1
0000CCA6                            
0000CCA6                            Obj3A_Move:
0000CCA6 D368 0008                  		add.w	d1,8(a0)	; change item's position
0000CCAA                            
0000CCAA                            loc_C5FE:				; XREF: loc_C61A
0000CCAA 3028 0008                  		move.w	8(a0),d0
0000CCAE 6B00                       		bmi.s	locret_C60E
0000CCB0 0C40 0200                  		cmpi.w	#$200,d0	; has item moved beyond	$200 on	x-axis?
0000CCB4 6400                       		bcc.s	locret_C60E	; if yes, branch
0000CCB6 6000 0000                  		bra.w	DisplaySprite
0000CCBA                            ; ===========================================================================
0000CCBA                            
0000CCBA                            locret_C60E:
0000CCBA 4E75                       		rts	
0000CCBC                            ; ===========================================================================
0000CCBC                            
0000CCBC                            loc_C610:				; XREF: loc_C61A
0000CCBC 117C 000E 0024             		move.b	#$E,$24(a0)
0000CCC2 6000 0000                  		bra.w	Obj3A_ChkPos2
0000CCC6                            ; ===========================================================================
0000CCC6                            
0000CCC6                            loc_C61A:				; XREF: Obj3A_ChkPos
0000CCC6 0C38 000E D724             		cmpi.b	#$E,($FFFFD724).w
0000CCCC 67EE                       		beq.s	loc_C610
0000CCCE 0C28 0004 001A             		cmpi.b	#4,$1A(a0)
0000CCD4 66D4                       		bne.s	loc_C5FE
0000CCD6 5428 0024                  		addq.b	#2,$24(a0)
0000CCDA 317C 00B4 001E             		move.w	#180,$1E(a0)	; set time delay to 3 seconds
0000CCE0                            
0000CCE0                            Obj3A_Wait:				; XREF: Obj3A_Index
0000CCE0 5368 001E                  		subq.w	#1,$1E(a0)	; subtract 1 from time delay
0000CCE4 6600                       		bne.s	Obj3A_Display
0000CCE6 5428 0024                  		addq.b	#2,$24(a0)
0000CCEA                            
0000CCEA                            Obj3A_Display:
0000CCEA 6000 0000                  		bra.w	DisplaySprite
0000CCEE                            ; ===========================================================================
0000CCEE                            
0000CCEE                            Obj3A_TimeBonus:			; XREF: Obj3A_Index
0000CCEE 6100 0000                  		bsr.w	DisplaySprite
0000CCF2 11FC 0001 F7D6             		move.b	#1,($FFFFF7D6).w ; set time/ring bonus update flag
0000CCF8 7000                       		moveq	#0,d0
0000CCFA 4A78 F7D2                  		tst.w	($FFFFF7D2).w	; is time bonus	= zero?
0000CCFE 6700                       		beq.s	Obj3A_RingBonus	; if yes, branch
0000CD00 0640 000A                  		addi.w	#10,d0		; add 10 to score
0000CD04 0478 000A F7D2             		subi.w	#10,($FFFFF7D2).w ; subtract 10	from time bonus
0000CD0A                            
0000CD0A                            Obj3A_RingBonus:
0000CD0A 4A78 F7D4                  		tst.w	($FFFFF7D4).w	; is ring bonus	= zero?
0000CD0E 6700                       		beq.s	Obj3A_ChkBonus	; if yes, branch
0000CD10 0640 000A                  		addi.w	#10,d0		; add 10 to score
0000CD14 0478 000A F7D4             		subi.w	#10,($FFFFF7D4).w ; subtract 10	from ring bonus
0000CD1A                            
0000CD1A                            Obj3A_ChkBonus:
0000CD1A 4A40                       		tst.w	d0		; is there any bonus?
0000CD1C 6600                       		bne.s	Obj3A_AddBonus	; if yes, branch
0000CD1E 303C 00C5                  		move.w	#$C5,d0
0000CD22 4EB9 0000 15C0             		jsr	(PlaySound_Special).l ;	play "ker-ching" sound
0000CD28 5428 0024                  		addq.b	#2,$24(a0)
0000CD2C 0C78 0501 FE10             		cmpi.w	#$501,($FFFFFE10).w
0000CD32 6600                       		bne.s	Obj3A_SetDelay
0000CD34 5828 0024                  		addq.b	#4,$24(a0)
0000CD38                            
0000CD38                            Obj3A_SetDelay:
0000CD38 317C 00B4 001E             		move.w	#180,$1E(a0)	; set time delay to 3 seconds
0000CD3E                            
0000CD3E                            locret_C692:
0000CD3E 4E75                       		rts	
0000CD40                            ; ===========================================================================
0000CD40                            
0000CD40                            Obj3A_AddBonus:				; XREF: Obj3A_ChkBonus
0000CD40 4EB9 0000 0000             		jsr	AddPoints
0000CD46 1038 FE0F                  		move.b	($FFFFFE0F).w,d0
0000CD4A 0200 0003                  		andi.b	#3,d0
0000CD4E 66EE                       		bne.s	locret_C692
0000CD50 303C 00CD                  		move.w	#$CD,d0
0000CD54 4EF9 0000 15C0             		jmp	(PlaySound_Special).l ;	play "blip" sound
0000CD5A                            ; ===========================================================================
0000CD5A                            
0000CD5A                            Obj3A_NextLevel:			; XREF: Obj3A_Index
0000CD5A 1038 FE10                  		move.b	($FFFFFE10).w,d0
0000CD5E 0240 0007                  		andi.w	#7,d0
0000CD62 E748                       		lsl.w	#3,d0
0000CD64 1238 FE11                  		move.b	($FFFFFE11).w,d1
0000CD68 0241 0003                  		andi.w	#3,d1
0000CD6C D241                       		add.w	d1,d1
0000CD6E D041                       		add.w	d1,d0
0000CD70 303B 0000                  		move.w	LevelOrder(pc,d0.w),d0 ; load level from level order array
0000CD74 31C0 FE10                  		move.w	d0,($FFFFFE10).w ; set level number
0000CD78 4A40                       		tst.w	d0
0000CD7A 6600                       		bne.s	Obj3A_ChkSS
0000CD7C 11FC 0000 F600             		move.b	#0,($FFFFF600).w ; set game mode to level (00)
0000CD82 6000                       		bra.s	Obj3A_Display2
0000CD84                            ; ===========================================================================
0000CD84                            
0000CD84                            Obj3A_ChkSS:				; XREF: Obj3A_NextLevel
0000CD84 4238 FE30                  		clr.b	($FFFFFE30).w	; clear	lamppost counter
0000CD88 4A38 F7CD                  		tst.b	($FFFFF7CD).w	; has Sonic jumped into	a giant	ring?
0000CD8C 6700                       		beq.s	loc_C6EA	; if not, branch
0000CD8E 11FC 0010 F600             		move.b	#$10,($FFFFF600).w ; set game mode to Special Stage (10)
0000CD94 6000                       		bra.s	Obj3A_Display2
0000CD96                            ; ===========================================================================
0000CD96                            
0000CD96                            loc_C6EA:				; XREF: Obj3A_ChkSS
0000CD96 31FC 0001 FE02             		move.w	#1,($FFFFFE02).w ; restart level
0000CD9C                            
0000CD9C                            Obj3A_Display2:				; XREF: Obj3A_NextLevel, Obj3A_ChkSS
0000CD9C 6000 0000                  		bra.w	DisplaySprite
0000CDA0                            ; ===========================================================================
0000CDA0                            ; ---------------------------------------------------------------------------
0000CDA0                            ; Level	order array
0000CDA0                            ; ---------------------------------------------------------------------------
0000CDA0                            LevelOrder:	incbin	misc\lvl_ord.bin
0000CDD0                            		even
0000CDD0                            ; ===========================================================================
0000CDD0                            
0000CDD0                            Obj3A_ChkPos2:				; XREF: Obj3A_Index
0000CDD0 7220                       		moveq	#$20,d1		; set horizontal speed
0000CDD2 3028 0032                  		move.w	$32(a0),d0
0000CDD6 B068 0008                  		cmp.w	8(a0),d0	; has item reached its finish position?
0000CDDA 6700                       		beq.s	Obj3A_SBZ2	; if yes, branch
0000CDDC 6C00                       		bge.s	Obj3A_Move2
0000CDDE 4441                       		neg.w	d1
0000CDE0                            
0000CDE0                            Obj3A_Move2:
0000CDE0 D368 0008                  		add.w	d1,8(a0)	; change item's position
0000CDE4 3028 0008                  		move.w	8(a0),d0
0000CDE8 6B00                       		bmi.s	locret_C748
0000CDEA 0C40 0200                  		cmpi.w	#$200,d0	; has item moved beyond	$200 on	x-axis?
0000CDEE 6400                       		bcc.s	locret_C748	; if yes, branch
0000CDF0 6000 0000                  		bra.w	DisplaySprite
0000CDF4                            ; ===========================================================================
0000CDF4                            
0000CDF4                            locret_C748:
0000CDF4 4E75                       		rts	
0000CDF6                            ; ===========================================================================
0000CDF6                            
0000CDF6                            Obj3A_SBZ2:				; XREF: Obj3A_ChkPos2
0000CDF6 0C28 0004 001A             		cmpi.b	#4,$1A(a0)
0000CDFC 6600 0000                  		bne.w	DeleteObject
0000CE00 5428 0024                  		addq.b	#2,$24(a0)
0000CE04 4238 F7CC                  		clr.b	($FFFFF7CC).w	; unlock controls
0000CE08 303C 008D                  		move.w	#$8D,d0
0000CE0C 4EF9 0000 15BA             		jmp	(PlaySound).l	; play FZ music
0000CE12                            ; ===========================================================================
0000CE12                            
0000CE12                            loc_C766:				; XREF: Obj3A_Index
0000CE12 5478 F72A                  		addq.w	#2,($FFFFF72A).w
0000CE16 0C78 2100 F72A             		cmpi.w	#$2100,($FFFFF72A).w
0000CE1C 6700 0000                  		beq.w	DeleteObject
0000CE20 4E75                       		rts	
0000CE22                            ; ===========================================================================
0000CE22 0004 0124 00BC             Obj3A_Config:	dc.w 4,	$124, $BC	; x-start, x-main, y-main
0000CE28 0200                       		dc.b 2,	0		; routine number, frame	number (changes)
0000CE2A FEE0 0120 00D0             		dc.w $FEE0, $120, $D0
0000CE30 0201                       		dc.b 2,	1
0000CE32 040C 014C 00D6             		dc.w $40C, $14C, $D6
0000CE38 0206                       		dc.b 2,	6
0000CE3A 0520 0120 00EC             		dc.w $520, $120, $EC
0000CE40 0202                       		dc.b 2,	2
0000CE42 0540 0120 00FC             		dc.w $540, $120, $FC
0000CE48 0203                       		dc.b 2,	3
0000CE4A 0560 0120 010C             		dc.w $560, $120, $10C
0000CE50 0204                       		dc.b 2,	4
0000CE52 020C 014C 00CC             		dc.w $20C, $14C, $CC
0000CE58 0205                       		dc.b 2,	5
0000CE5A                            ; ===========================================================================
0000CE5A                            ; ---------------------------------------------------------------------------
0000CE5A                            ; Object 7E - special stage results screen
0000CE5A                            ; ---------------------------------------------------------------------------
0000CE5A                            
0000CE5A                            Obj7E:					; XREF: Obj_Index
0000CE5A 7000                       		moveq	#0,d0
0000CE5C 1028 0024                  		move.b	$24(a0),d0
0000CE60 323B 0000                  		move.w	Obj7E_Index(pc,d0.w),d1
0000CE64 4EFB 1000                  		jmp	Obj7E_Index(pc,d1.w)
0000CE68                            ; ===========================================================================
0000CE68 0000                       Obj7E_Index:	dc.w Obj7E_ChkPLC-Obj7E_Index
0000CE6A 0000                       		dc.w Obj7E_ChkPos-Obj7E_Index
0000CE6C 0000                       		dc.w Obj7E_Wait-Obj7E_Index
0000CE6E 0000                       		dc.w Obj7E_RingBonus-Obj7E_Index
0000CE70 0000                       		dc.w Obj7E_Wait-Obj7E_Index
0000CE72 0000                       		dc.w Obj7E_Exit-Obj7E_Index
0000CE74 0000                       		dc.w Obj7E_Wait-Obj7E_Index
0000CE76 0000                       		dc.w Obj7E_Continue-Obj7E_Index
0000CE78 0000                       		dc.w Obj7E_Wait-Obj7E_Index
0000CE7A 0000                       		dc.w Obj7E_Exit-Obj7E_Index
0000CE7C 0000                       		dc.w loc_C91A-Obj7E_Index
0000CE7E                            ; ===========================================================================
0000CE7E                            
0000CE7E                            Obj7E_ChkPLC:				; XREF: Obj7E_Index
0000CE7E 4AB8 F680                  		tst.l	($FFFFF680).w	; are the pattern load cues empty?
0000CE82 6700                       		beq.s	Obj7E_Main	; if yes, branch
0000CE84 4E75                       		rts	
0000CE86                            ; ===========================================================================
0000CE86                            
0000CE86                            Obj7E_Main:
0000CE86 2248                       		movea.l	a0,a1
0000CE88 45F9 0000 0000             		lea	(Obj7E_Config).l,a2
0000CE8E 7203                       		moveq	#3,d1
0000CE90 0C78 0032 FE20             		cmpi.w	#50,($FFFFFE20).w ; do you have	50 or more rings?
0000CE96 6500                       		bcs.s	Obj7E_Loop	; if no, branch
0000CE98 5241                       		addq.w	#1,d1		; if yes, add 1	to d1 (number of sprites)
0000CE9A                            
0000CE9A                            Obj7E_Loop:
0000CE9A 12BC 007E                  		move.b	#$7E,0(a1)
0000CE9E 335A 0008                  		move.w	(a2)+,8(a1)	; load start x-position
0000CEA2 335A 0030                  		move.w	(a2)+,$30(a1)	; load main x-position
0000CEA6 335A 000A                  		move.w	(a2)+,$A(a1)	; load y-position
0000CEAA 135A 0024                  		move.b	(a2)+,$24(a1)
0000CEAE 135A 001A                  		move.b	(a2)+,$1A(a1)
0000CEB2 237C 0000 0000 0004        		move.l	#Map_obj7E,4(a1)
0000CEBA 337C 8580 0002             		move.w	#$8580,2(a1)
0000CEC0 137C 0000 0001             		move.b	#0,1(a1)
0000CEC6 43E9 0040                  		lea	$40(a1),a1
0000CECA 51C9 FFCE                  		dbf	d1,Obj7E_Loop	; repeat sequence 3 or 4 times
0000CECE                            
0000CECE 7007                       		moveq	#7,d0
0000CED0 1238 FE57                  		move.b	($FFFFFE57).w,d1
0000CED4 6700                       		beq.s	loc_C842
0000CED6 7000                       		moveq	#0,d0
0000CED8 0C01 0006                  		cmpi.b	#6,d1		; do you have all chaos	emeralds?
0000CEDC 6600                       		bne.s	loc_C842	; if not, branch
0000CEDE 7008                       		moveq	#8,d0		; load "Sonic got them all" text
0000CEE0 317C 0018 0008             		move.w	#$18,8(a0)
0000CEE6 317C 0118 0030             		move.w	#$118,$30(a0)	; change position of text
0000CEEC                            
0000CEEC                            loc_C842:
0000CEEC 1140 001A                  		move.b	d0,$1A(a0)
0000CEF0                            
0000CEF0                            Obj7E_ChkPos:				; XREF: Obj7E_Index
0000CEF0 7210                       		moveq	#$10,d1		; set horizontal speed
0000CEF2 3028 0030                  		move.w	$30(a0),d0
0000CEF6 B068 0008                  		cmp.w	8(a0),d0	; has item reached its target position?
0000CEFA 6700                       		beq.s	loc_C86C	; if yes, branch
0000CEFC 6C00                       		bge.s	Obj7E_Move
0000CEFE 4441                       		neg.w	d1
0000CF00                            
0000CF00                            Obj7E_Move:
0000CF00 D368 0008                  		add.w	d1,8(a0)	; change item's position
0000CF04                            
0000CF04                            loc_C85A:				; XREF: loc_C86C
0000CF04 3028 0008                  		move.w	8(a0),d0
0000CF08 6B00                       		bmi.s	locret_C86A
0000CF0A 0C40 0200                  		cmpi.w	#$200,d0	; has item moved beyond	$200 on	x-axis?
0000CF0E 6400                       		bcc.s	locret_C86A	; if yes, branch
0000CF10 6000 0000                  		bra.w	DisplaySprite
0000CF14                            ; ===========================================================================
0000CF14                            
0000CF14                            locret_C86A:
0000CF14 4E75                       		rts	
0000CF16                            ; ===========================================================================
0000CF16                            
0000CF16                            loc_C86C:				; XREF: Obj7E_ChkPos
0000CF16 0C28 0002 001A             		cmpi.b	#2,$1A(a0)
0000CF1C 66E6                       		bne.s	loc_C85A
0000CF1E 5428 0024                  		addq.b	#2,$24(a0)
0000CF22 317C 00B4 001E             		move.w	#180,$1E(a0)	; set time delay to 3 seconds
0000CF28 11FC 007F D800             		move.b	#$7F,($FFFFD800).w ; load chaos	emerald	object
0000CF2E                            
0000CF2E                            Obj7E_Wait:				; XREF: Obj7E_Index
0000CF2E 5368 001E                  		subq.w	#1,$1E(a0)	; subtract 1 from time delay
0000CF32 6600                       		bne.s	Obj7E_Display
0000CF34 5428 0024                  		addq.b	#2,$24(a0)
0000CF38                            
0000CF38                            Obj7E_Display:
0000CF38 6000 0000                  		bra.w	DisplaySprite
0000CF3C                            ; ===========================================================================
0000CF3C                            
0000CF3C                            Obj7E_RingBonus:			; XREF: Obj7E_Index
0000CF3C 6100 0000                  		bsr.w	DisplaySprite
0000CF40 11FC 0001 F7D6             		move.b	#1,($FFFFF7D6).w ; set ring bonus update flag
0000CF46 4A78 F7D4                  		tst.w	($FFFFF7D4).w	; is ring bonus	= zero?
0000CF4A 6700                       		beq.s	loc_C8C4	; if yes, branch
0000CF4C 0478 000A F7D4             		subi.w	#10,($FFFFF7D4).w ; subtract 10	from ring bonus
0000CF52 700A                       		moveq	#10,d0		; add 10 to score
0000CF54 4EB9 0000 0000             		jsr	AddPoints
0000CF5A 1038 FE0F                  		move.b	($FFFFFE0F).w,d0
0000CF5E 0200 0003                  		andi.b	#3,d0
0000CF62 6600                       		bne.s	locret_C8EA
0000CF64 303C 00CD                  		move.w	#$CD,d0
0000CF68 4EF9 0000 15C0             		jmp	(PlaySound_Special).l ;	play "blip" sound
0000CF6E                            ; ===========================================================================
0000CF6E                            
0000CF6E                            loc_C8C4:				; XREF: Obj7E_RingBonus
0000CF6E 303C 00C5                  		move.w	#$C5,d0
0000CF72 4EB9 0000 15C0             		jsr	(PlaySound_Special).l ;	play "ker-ching" sound
0000CF78 5428 0024                  		addq.b	#2,$24(a0)
0000CF7C 317C 00B4 001E             		move.w	#180,$1E(a0)	; set time delay to 3 seconds
0000CF82 0C78 0032 FE20             		cmpi.w	#50,($FFFFFE20).w ; do you have	at least 50 rings?
0000CF88 6500                       		bcs.s	locret_C8EA	; if not, branch
0000CF8A 317C 003C 001E             		move.w	#60,$1E(a0)	; set time delay to 1 second
0000CF90 5828 0024                  		addq.b	#4,$24(a0)	; goto "Obj7E_Continue"	routine
0000CF94                            
0000CF94                            locret_C8EA:
0000CF94 4E75                       		rts	
0000CF96                            ; ===========================================================================
0000CF96                            
0000CF96                            Obj7E_Exit:				; XREF: Obj7E_Index
0000CF96 31FC 0001 FE02             		move.w	#1,($FFFFFE02).w ; restart level
0000CF9C 6000 0000                  		bra.w	DisplaySprite
0000CFA0                            ; ===========================================================================
0000CFA0                            
0000CFA0                            Obj7E_Continue:				; XREF: Obj7E_Index
0000CFA0 11FC 0004 D6DA             		move.b	#4,($FFFFD6DA).w
0000CFA6 11FC 0014 D6E4             		move.b	#$14,($FFFFD6E4).w
0000CFAC 303C 00BF                  		move.w	#$BF,d0
0000CFB0 4EB9 0000 15C0             		jsr	(PlaySound_Special).l ;	play continues music
0000CFB6 5428 0024                  		addq.b	#2,$24(a0)
0000CFBA 317C 0168 001E             		move.w	#360,$1E(a0)	; set time delay to 6 seconds
0000CFC0 6000 0000                  		bra.w	DisplaySprite
0000CFC4                            ; ===========================================================================
0000CFC4                            
0000CFC4                            loc_C91A:				; XREF: Obj7E_Index
0000CFC4 1038 FE0F                  		move.b	($FFFFFE0F).w,d0
0000CFC8 0200 000F                  		andi.b	#$F,d0
0000CFCC 6600                       		bne.s	Obj7E_Display2
0000CFCE 0868 0000 001A             		bchg	#0,$1A(a0)
0000CFD4                            
0000CFD4                            Obj7E_Display2:
0000CFD4 6000 0000                  		bra.w	DisplaySprite
0000CFD8                            ; ===========================================================================
0000CFD8 0020 0120 00C4             Obj7E_Config:	dc.w $20, $120,	$C4	; start	x-pos, main x-pos, y-pos
0000CFDE 0200                       		dc.b 2,	0		; rountine number, frame number
0000CFE0 0320 0120 0118             		dc.w $320, $120, $118
0000CFE6 0201                       		dc.b 2,	1
0000CFE8 0360 0120 0128             		dc.w $360, $120, $128
0000CFEE 0202                       		dc.b 2,	2
0000CFF0 01EC 011C 00C4             		dc.w $1EC, $11C, $C4
0000CFF6 0203                       		dc.b 2,	3
0000CFF8 03A0 0120 0138             		dc.w $3A0, $120, $138
0000CFFE 0206                       		dc.b 2,	6
0000D000                            ; ===========================================================================
0000D000                            ; ---------------------------------------------------------------------------
0000D000                            ; Object 7F - chaos emeralds from the special stage results screen
0000D000                            ; ---------------------------------------------------------------------------
0000D000                            
0000D000                            Obj7F:					; XREF: Obj_Index
0000D000 7000                       		moveq	#0,d0
0000D002 1028 0024                  		move.b	$24(a0),d0
0000D006 323B 0000                  		move.w	Obj7F_Index(pc,d0.w),d1
0000D00A 4EFB 1000                  		jmp	Obj7F_Index(pc,d1.w)
0000D00E                            ; ===========================================================================
0000D00E 0000                       Obj7F_Index:	dc.w Obj7F_Main-Obj7F_Index
0000D010 0000                       		dc.w Obj7F_Flash-Obj7F_Index
0000D012                            
0000D012                            ; ---------------------------------------------------------------------------
0000D012                            ; X-axis positions for chaos emeralds
0000D012                            ; ---------------------------------------------------------------------------
0000D012 0110 0128 00F8 0140 00E0+  Obj7F_PosData:	dc.w $110, $128, $F8, $140, $E0, $158
0000D01E                            ; ===========================================================================
0000D01E                            
0000D01E                            Obj7F_Main:				; XREF: Obj7F_Index
0000D01E 2248                       		movea.l	a0,a1
0000D020 45F9 0000 D012             		lea	(Obj7F_PosData).l,a2
0000D026 7400                       		moveq	#0,d2
0000D028 7200                       		moveq	#0,d1
0000D02A 1238 FE57                  		move.b	($FFFFFE57).w,d1 ; d1 is number	of emeralds
0000D02E 5301                       		subq.b	#1,d1		; subtract 1 from d1
0000D030 6500 0000                  		bcs.w	DeleteObject	; if you have 0	emeralds, branch
0000D034                            
0000D034                            Obj7F_Loop:
0000D034 12BC 007F                  		move.b	#$7F,0(a1)
0000D038 335A 0008                  		move.w	(a2)+,8(a1)	; set x-position
0000D03C 337C 00F0 000A             		move.w	#$F0,$A(a1)	; set y-position
0000D042 47F8 FE58                  		lea	($FFFFFE58).w,a3 ; check which emeralds	you have
0000D046 1633 2000                  		move.b	(a3,d2.w),d3
0000D04A 1343 001A                  		move.b	d3,$1A(a1)
0000D04E 1343 001C                  		move.b	d3,$1C(a1)
0000D052 5202                       		addq.b	#1,d2
0000D054 5429 0024                  		addq.b	#2,$24(a1)
0000D058 237C 0000 0000 0004        		move.l	#Map_obj7F,4(a1)
0000D060 337C 8541 0002             		move.w	#$8541,2(a1)
0000D066 137C 0000 0001             		move.b	#0,1(a1)
0000D06C 43E9 0040                  		lea	$40(a1),a1	; next object
0000D070 51C9 FFC2                  		dbf	d1,Obj7F_Loop	; loop for d1 number of	emeralds
0000D074                            
0000D074                            Obj7F_Flash:				; XREF: Obj7F_Index
0000D074 1028 001A                  		move.b	$1A(a0),d0
0000D078 117C 0006 001A             		move.b	#6,$1A(a0)	; load 6th frame (blank)
0000D07E 0C00 0006                  		cmpi.b	#6,d0
0000D082 6600                       		bne.s	Obj7F_Display
0000D084 1168 001C 001A             		move.b	$1C(a0),$1A(a0)	; load visible frame
0000D08A                            
0000D08A                            Obj7F_Display:
0000D08A 6000 0000                  		bra.w	DisplaySprite
0000D08E                            ; ===========================================================================
0000D08E                            ; ---------------------------------------------------------------------------
0000D08E                            ; Sprite mappings - zone title cards
0000D08E                            ; ---------------------------------------------------------------------------
0000D08E 0000                       Map_obj34:	dc.w byte_C9FE-Map_obj34
0000D090 0000                       		dc.w byte_CA2C-Map_obj34
0000D092 0000                       		dc.w byte_CA5A-Map_obj34
0000D094 0000                       		dc.w byte_CA7A-Map_obj34
0000D096 0000                       		dc.w byte_CAA8-Map_obj34
0000D098 0000                       		dc.w byte_CADC-Map_obj34
0000D09A 0000                       		dc.w byte_CB10-Map_obj34
0000D09C 0000                       		dc.w byte_CB26-Map_obj34
0000D09E 0000                       		dc.w byte_CB31-Map_obj34
0000D0A0 0000                       		dc.w byte_CB3C-Map_obj34
0000D0A2 0000                       		dc.w byte_CB47-Map_obj34
0000D0A4 0000                       		dc.w byte_CB8A-Map_obj34
0000D0A6 0C                         byte_C9FE:	dc.b $C	;  GREEN HILL | CRUNCHY ROLL
0000D0A7 F805 0008 80               		dc.b $F8, 5, 0, 8, $80		; C
0000D0AC F805 003A 90               		dc.b $F8, 5, 0, $3A, $90	; R
0000D0B1 F805 0046 A0               		dc.b $F8, 5, 0, $46, $A0	; U
0000D0B6 F805 002E B0               		dc.b $F8, 5, 0, $2E, $B0	; N
0000D0BB F805 0008 C0               		dc.b $F8, 5, 0, 8, $C0		; C
0000D0C0 F805 001C D0               		dc.b $F8, 5, 0, $1C, $D0	; H
0000D0C5 F805 004A E0               		dc.b $F8, 5, 0, $4A, $E0	; Y
0000D0CA F800 0056 F0               		dc.b $F8, 0, 0, $56, $F0	; Space
0000D0CF F805 003A 00               		dc.b $F8, 5, 0, $3A, $0	; R
0000D0D4 F805 0032 10               		dc.b $F8, 5, 0, $32, $10	; O
0000D0D9 F805 0026 20               		dc.b $F8, 5, 0, $26, $20	; L
0000D0DE F805 0026 30               		dc.b $F8, 5, 0, $26, $30	; L
0000D0E3 16                         byte_CA2C:	dc.b $16	;  LABYRINTH | I LIKE FILE EGGSPLORER
0000D0E4 F801 0020 80               		dc.b $F8, 1, 0, $20, $80	; I
0000D0E9 F800 0056 88               		dc.b $F8, 0, 0, $56, $88	; Space
0000D0EE F805 0026 98               		dc.b $F8, 5, 0, $26, $98	; L
0000D0F3 F801 0020 A8               		dc.b $F8, 1, 0, $20, $A8	; I
0000D0F8 F805 0022 B0               		dc.b $F8, 5, 0, $22, $B0	; K
0000D0FD F805 0010 C0               		dc.b $F8, 5, 0, $10, $C0	; E
0000D102 F800 0056 D0               		dc.b $F8, 0, 0, $56, $D0	; Space
0000D107 F805 0014 E0               		dc.b $F8, 5, 0, $14, $E0	; F
0000D10C F801 0020 F0               		dc.b $F8, 1, 0, $20, $F0	; I
0000D111 F805 0026 F8               		dc.b $F8, 5, 0, $26, $F8	; L
0000D116 F805 0010 08               		dc.b $F8, 5, 0, $10, $8	; E
0000D11B F800 0056 18               		dc.b $F8, 0, 0, $56, $18	; Space
0000D120 F805 0010 28               		dc.b $F8, 5, 0, $10, $28	; E
0000D125 F805 0018 38               		dc.b $F8, 5, 0, $18, $38	; G
0000D12A F805 0018 48               		dc.b $F8, 5, 0, $18, $48	; G
0000D12F F805 003E 58               		dc.b $F8, 5, 0, $3E, $58	; S
0000D134 F805 0036 68               		dc.b $F8, 5, 0, $36, $68	; P
0000D139 F805 0026 78               		dc.b $F8, 5, 0, $26, $78	; L
0000D13E F805 0032 88               		dc.b $F8, 5, 0, $32, $88	; O
0000D143 F805 003A 98               		dc.b $F8, 5, 0, $3A, $98	; R
0000D148 F805 0010 A8               		dc.b $F8, 5, 0, $10, $A8	; E
0000D14D F805 003A B8               		dc.b $F8, 5, 0, $3A, $B8	; R
0000D152 05                         byte_CA5A:	dc.b 5	;  MARBLE | MARBL
0000D153 F805 002A 80               		dc.b $F8, 5, 0, $2A, $80	; M
0000D158 F805 0000 90               		dc.b $F8, 5, 0, 0, $90		; A
0000D15D F805 003A A0               		dc.b $F8, 5, 0, $3A, $A0	; R
0000D162 F805 0004 B0               		dc.b $F8, 5, 0, 4, $B0		; B
0000D167 F805 0026 C0               		dc.b $F8, 5, 0, $26, $C0	; L
0000D16C 11                         byte_CA7A:	dc.b $11	;  STAR LIGHT | DONT GET RIDOTHIS
0000D16D F805 000C 80               		dc.b $F8, 5, 0, $0C, $80	; D
0000D172 F805 0032 90               		dc.b $F8, 5, 0, $32, $90	; O
0000D177 F805 002E A0               		dc.b $F8, 5, 0, $2E, $A0	; N
0000D17C F805 0042 B0               		dc.b $F8, 5, 0, $42, $B0	; T
0000D181 F800 0056 C0               		dc.b $F8, 0, 0, $56, $C0	; Space
0000D186 F805 0018 D0               		dc.b $F8, 5, 0, $18, $D0	; G
0000D18B F805 0010 E0               		dc.b $F8, 5, 0, $10, $E0	; E
0000D190 F805 0042 F0               		dc.b $F8, 5, 0, $42, $F0	; T
0000D195 F800 0056 00               		dc.b $F8, 0, 0, $56, $0	; Space
0000D19A F805 003A 10               		dc.b $F8, 5, 0, $3A, $10	; R
0000D19F F801 0020 20               		dc.b $F8, 1, 0, $20, $20	; I
0000D1A4 F805 000C 28               		dc.b $F8, 5, 0, $0C, $28	; D
0000D1A9 F805 0032 38               		dc.b $F8, 5, 0, $32, $38	; O
0000D1AE F805 0042 48               		dc.b $F8, 5, 0, $42, $48	; T
0000D1B3 F805 001C 58               		dc.b $F8, 5, 0, $1C, $58	; H
0000D1B8 F801 0020 68               		dc.b $F8, 1, 0, $20, $68	; I
0000D1BD F805 003E 70               		dc.b $F8, 5, 0, $3E, $70	; S
0000D1C2 15                         byte_CAA8:	dc.b $15	;  SPRING YARD | THE PIG FROM BARNYARD
0000D1C3 F805 0042 80               		dc.b $F8, 5, 0, $42, $80	; T
0000D1C8 F805 001C 90               		dc.b $F8, 5, 0, $1C, $90	; H
0000D1CD F805 0010 A0               		dc.b $F8, 5, 0, $10, $A0	; E
0000D1D2 F800 0056 B0               		dc.b $F8, 0, 0, $56, $B0	; Space
0000D1D7 F805 0036 C0               		dc.b $F8, 5, 0, $36, $C0	; P
0000D1DC F801 0020 D0               		dc.b $F8, 1, 0, $20, $D0	; I
0000D1E1 F805 0018 D8               		dc.b $F8, 5, 0, $18, $D8	; G
0000D1E6 F800 0056 E8               		dc.b $F8, 0, 0, $56, $E8	; Space
0000D1EB F805 0014 F8               		dc.b $F8, 5, 0, $14, $F8	; F
0000D1F0 F805 003A 08               		dc.b $F8, 5, 0, $3A, $8	; R
0000D1F5 F805 0032 18               		dc.b $F8, 5, 0, $32, $18	; O
0000D1FA F805 002A 28               		dc.b $F8, 5, 0, $2A, $28	; M
0000D1FF F800 0056 38               		dc.b $F8, 0, 0, $56, $38	; Space
0000D204 F805 0004 48               		dc.b $F8, 5, 0, 4, $48		; B
0000D209 F805 0000 58               		dc.b $F8, 5, 0, 0, $58		; A
0000D20E F805 003A 68               		dc.b $F8, 5, 0, $3A, $68	; R
0000D213 F805 002E 78               		dc.b $F8, 5, 0, $2E, $78	; N
0000D218 F805 004A 88               		dc.b $F8, 5, 0, $4A, $88	; Y
0000D21D F805 0000 98               		dc.b $F8, 5, 0, 0, $98		; A
0000D222 F805 003A A8               		dc.b $F8, 5, 0, $3A, $A8	; R
0000D227 F805 000C B8               		dc.b $F8, 5, 0, $0C, $B8	; D
0000D22C 07                         byte_CADC:	dc.b 7	;  SCRAP BRAIN | Z Z Z Z
0000D22D F805 004E 80               		dc.b $F8, 5, 0, $4E, $80	; Z
0000D232 F800 0056 90               		dc.b $F8, 0, 0, $56, $90	; Space
0000D237 F805 004E A0               		dc.b $F8, 5, 0, $4E, $A0	; Z
0000D23C F800 0056 B0               		dc.b $F8, 0, 0, $56, $B0	; Space
0000D241 F805 004E C0               		dc.b $F8, 5, 0, $4E, $C0	; Z
0000D246 F800 0056 D0               		dc.b $F8, 0, 0, $56, $D0	; Space
0000D24B F805 004E E0               		dc.b $F8, 5, 0, $4E, $E0	; Z
0000D250 04                         byte_CB10:	dc.b 4			; ZONE
0000D251 F805 004E E0               		dc.b $F8, 5, 0,	$4E, $E0
0000D256 F805 0032 F0               		dc.b $F8, 5, 0,	$32, $F0
0000D25B F805 002E 00               		dc.b $F8, 5, 0,	$2E, 0
0000D260 F805 0010 10               		dc.b $F8, 5, 0,	$10, $10
0000D265 00                         		dc.b 0
0000D266 02                         byte_CB26:	dc.b 2			; ACT 1
0000D267 040C 0053 EC               		dc.b 4,	$C, 0, $53, $EC
0000D26C F402 0057 0C               		dc.b $F4, 2, 0,	$57, $C
0000D271 02                         byte_CB31:	dc.b 2			; ACT 2
0000D272 040C 0053 EC               		dc.b 4,	$C, 0, $53, $EC
0000D277 F406 005A 08               		dc.b $F4, 6, 0,	$5A, 8
0000D27C 02                         byte_CB3C:	dc.b 2			; ACT 3
0000D27D 040C 0053 EC               		dc.b 4,	$C, 0, $53, $EC
0000D282 F406 0060 08               		dc.b $F4, 6, 0,	$60, 8
0000D287 0D                         byte_CB47:	dc.b $D			; Oval
0000D288 E40C 0070 F4               		dc.b $E4, $C, 0, $70, $F4
0000D28D E402 0074 14               		dc.b $E4, 2, 0,	$74, $14
0000D292 EC04 0077 EC               		dc.b $EC, 4, 0,	$77, $EC
0000D297 F405 0079 E4               		dc.b $F4, 5, 0,	$79, $E4
0000D29C 140C 1870 EC               		dc.b $14, $C, $18, $70,	$EC
0000D2A1 0402 1874 E4               		dc.b 4,	2, $18,	$74, $E4
0000D2A6 0C04 1877 04               		dc.b $C, 4, $18, $77, 4
0000D2AB FC05 1879 0C               		dc.b $FC, 5, $18, $79, $C
0000D2B0 EC08 007D FC               		dc.b $EC, 8, 0,	$7D, $FC
0000D2B5 F40C 007C F4               		dc.b $F4, $C, 0, $7C, $F4
0000D2BA FC08 007C F4               		dc.b $FC, 8, 0,	$7C, $F4
0000D2BF 040C 007C EC               		dc.b 4,	$C, 0, $7C, $EC
0000D2C4 0C08 007C EC               		dc.b $C, 8, 0, $7C, $EC
0000D2C9 00                         		dc.b 0
0000D2CA 05                         byte_CB8A:	dc.b 5			; FINAL
0000D2CB F805 0014 DC               		dc.b $F8, 5, 0,	$14, $DC
0000D2D0 F801 0020 EC               		dc.b $F8, 1, 0,	$20, $EC
0000D2D5 F805 002E F4               		dc.b $F8, 5, 0,	$2E, $F4
0000D2DA F805 0000 04               		dc.b $F8, 5, 0,	0, 4
0000D2DF F805 0026 14               		dc.b $F8, 5, 0,	$26, $14
0000D2E4                            		even
0000D2E4                            ; ---------------------------------------------------------------------------
0000D2E4                            ; Sprite mappings - "GAME OVER"	and "TIME OVER"
0000D2E4                            ; ---------------------------------------------------------------------------
0000D2E4                            Map_obj39:
0000D2E4                            	include "_maps\obj39.asm"
0000D2E4                            ; ---------------------------------------------------------------------------
0000D2E4                            ; Sprite mappings - "GAME OVER"	and "TIME OVER"
0000D2E4                            ; ---------------------------------------------------------------------------
0000D2E4 0000                       		dc.w byte_CBAC-Map_obj39
0000D2E6 0000                       		dc.w byte_CBB7-Map_obj39
0000D2E8 0000                       		dc.w byte_CBC2-Map_obj39
0000D2EA 0000                       		dc.w byte_CBCD-Map_obj39
0000D2EC 02                         byte_CBAC:	dc.b 2
0000D2ED F80D 0000 B8               		dc.b $F8, $D, 0, 0, $B8
0000D2F2 F80D 0008 D8               		dc.b $F8, $D, 0, 8, $D8
0000D2F7 02                         byte_CBB7:	dc.b 2
0000D2F8 F80D 0014 08               		dc.b $F8, $D, 0, $14, 8
0000D2FD F80D 000C 28               		dc.b $F8, $D, 0, $C, $28
0000D302 02                         byte_CBC2:	dc.b 2
0000D303 F809 001C C4               		dc.b $F8, 9, 0,	$1C, $C4
0000D308 F80D 0008 DC               		dc.b $F8, $D, 0, 8, $DC
0000D30D 02                         byte_CBCD:	dc.b 2
0000D30E F80D 0014 0C               		dc.b $F8, $D, 0, $14, $C
0000D313 F80D 000C 2C               		dc.b $F8, $D, 0, $C, $2C
0000D318                            		even
0000D318                            		even
0000D318                            
0000D318                            ; ---------------------------------------------------------------------------
0000D318                            ; Sprite mappings - "SONIC HAS PASSED" title card
0000D318                            ; ---------------------------------------------------------------------------
0000D318 0000                       Map_obj3A:	dc.w byte_CBEA-Map_obj3A
0000D31A 0000                       		dc.w byte_CC13-Map_obj3A
0000D31C 0000                       		dc.w byte_CC32-Map_obj3A
0000D31E 0000                       		dc.w byte_CC51-Map_obj3A
0000D320 0000                       		dc.w byte_CC75-Map_obj3A
0000D322 FF6F                       		dc.w byte_CB47-Map_obj3A
0000D324 FF4E                       		dc.w byte_CB26-Map_obj3A
0000D326 FF59                       		dc.w byte_CB31-Map_obj3A
0000D328 FF64                       		dc.w byte_CB3C-Map_obj3A
0000D32A 0F                         byte_CBEA:	dc.b $F	;  SONIC HAS | CADNIUM SULFIDE
0000D32B F805 0008 7C               		dc.b $F8, 5, 0, 8, $7C		; C
0000D330 F805 0000 8C               		dc.b $F8, 5, 0, 0, $8C		; A
0000D335 F805 000C 9C               		dc.b $F8, 5, 0, $0C, $9C	; D
0000D33A F805 002E AC               		dc.b $F8, 5, 0, $2E, $AC	; N
0000D33F F801 0020 BC               		dc.b $F8, 1, 0, $20, $BC	; I
0000D344 F805 0046 C4               		dc.b $F8, 5, 0, $46, $C4	; U
0000D349 F805 002A D4               		dc.b $F8, 5, 0, $2A, $D4	; M
0000D34E F800 0056 E4               		dc.b $F8, 0, 0, $56, $E4	; Space
0000D353 F805 003E F4               		dc.b $F8, 5, 0, $3E, $F4	; S
0000D358 F805 0046 04               		dc.b $F8, 5, 0, $46, $4	; U
0000D35D F805 0026 14               		dc.b $F8, 5, 0, $26, $14	; L
0000D362 F805 0014 24               		dc.b $F8, 5, 0, $14, $24	; F
0000D367 F801 0020 34               		dc.b $F8, 1, 0, $20, $34	; I
0000D36C F805 000C 3C               		dc.b $F8, 5, 0, $0C, $3C	; D
0000D371 F805 0010 4C               		dc.b $F8, 5, 0, $10, $4C	; E
0000D376 06                         byte_CC13:	dc.b 6			; PASSED
0000D377 F805 0036 D0               		dc.b $F8, 5, 0,	$36, $D0
0000D37C F805 0000 E0               		dc.b $F8, 5, 0,	0, $E0
0000D381 F805 003E F0               		dc.b $F8, 5, 0,	$3E, $F0
0000D386 F805 003E 00               		dc.b $F8, 5, 0,	$3E, 0
0000D38B F805 0010 10               		dc.b $F8, 5, 0,	$10, $10
0000D390 F805 000C 20               		dc.b $F8, 5, 0,	$C, $20
0000D395 06                         byte_CC32:	dc.b 6			; SCORE
0000D396 F80D 014A B0               		dc.b $F8, $D, 1, $4A, $B0
0000D39B F801 0162 D0               		dc.b $F8, 1, 1,	$62, $D0
0000D3A0 F809 0164 18               		dc.b $F8, 9, 1,	$64, $18
0000D3A5 F80D 016A 30               		dc.b $F8, $D, 1, $6A, $30
0000D3AA F704 006E CD               		dc.b $F7, 4, 0,	$6E, $CD
0000D3AF FF04 186E CD               		dc.b $FF, 4, $18, $6E, $CD
0000D3B4 07                         byte_CC51:	dc.b 7			; TIME BONUS
0000D3B5 F80D 015A B0               		dc.b $F8, $D, 1, $5A, $B0
0000D3BA F80D 0066 D9               		dc.b $F8, $D, 0, $66, $D9
0000D3BF F801 014A F9               		dc.b $F8, 1, 1,	$4A, $F9
0000D3C4 F704 006E F6               		dc.b $F7, 4, 0,	$6E, $F6
0000D3C9 FF04 186E F6               		dc.b $FF, 4, $18, $6E, $F6
0000D3CE F80D FFF0 28               		dc.b $F8, $D, $FF, $F0,	$28
0000D3D3 F801 0170 48               		dc.b $F8, 1, 1,	$70, $48
0000D3D8 07                         byte_CC75:	dc.b 7			; RING BONUS
0000D3D9 F80D 0152 B0               		dc.b $F8, $D, 1, $52, $B0
0000D3DE F80D 0066 D9               		dc.b $F8, $D, 0, $66, $D9
0000D3E3 F801 014A F9               		dc.b $F8, 1, 1,	$4A, $F9
0000D3E8 F704 006E F6               		dc.b $F7, 4, 0,	$6E, $F6
0000D3ED FF04 186E F6               		dc.b $FF, 4, $18, $6E, $F6
0000D3F2 F80D FFF8 28               		dc.b $F8, $D, $FF, $F8,	$28
0000D3F7 F801 0170 48               		dc.b $F8, 1, 1,	$70, $48
0000D3FC                            		even
0000D3FC                            ; ---------------------------------------------------------------------------
0000D3FC                            ; Sprite mappings - special stage results screen
0000D3FC                            ; ---------------------------------------------------------------------------
0000D3FC 0000                       Map_obj7E:	dc.w byte_CCAC-Map_obj7E
0000D3FE 0000                       		dc.w byte_CCEE-Map_obj7E
0000D400 0000                       		dc.w byte_CD0D-Map_obj7E
0000D402 FE8B                       		dc.w byte_CB47-Map_obj7E
0000D404 0000                       		dc.w byte_CD31-Map_obj7E
0000D406 0000                       		dc.w byte_CD46-Map_obj7E
0000D408 0000                       		dc.w byte_CD5B-Map_obj7E
0000D40A 0000                       		dc.w byte_CD6B-Map_obj7E
0000D40C 0000                       		dc.w byte_CDA8-Map_obj7E
0000D40E 0D                         byte_CCAC:	dc.b $D			; "CHAOS EMERALDS"
0000D40F F805 0008 90               		dc.b $F8, 5, 0,	8, $90
0000D414 F805 001C A0               		dc.b $F8, 5, 0,	$1C, $A0
0000D419 F805 0000 B0               		dc.b $F8, 5, 0,	0, $B0
0000D41E F805 0032 C0               		dc.b $F8, 5, 0,	$32, $C0
0000D423 F805 003E D0               		dc.b $F8, 5, 0,	$3E, $D0
0000D428 F805 0010 F0               		dc.b $F8, 5, 0,	$10, $F0
0000D42D F805 002A 00               		dc.b $F8, 5, 0,	$2A, 0
0000D432 F805 0010 10               		dc.b $F8, 5, 0,	$10, $10
0000D437 F805 003A 20               		dc.b $F8, 5, 0,	$3A, $20
0000D43C F805 0000 30               		dc.b $F8, 5, 0,	0, $30
0000D441 F805 0026 40               		dc.b $F8, 5, 0,	$26, $40
0000D446 F805 000C 50               		dc.b $F8, 5, 0,	$C, $50
0000D44B F805 003E 60               		dc.b $F8, 5, 0,	$3E, $60
0000D450 06                         byte_CCEE:	dc.b 6			; "SCORE"
0000D451 F80D 014A B0               		dc.b $F8, $D, 1, $4A, $B0
0000D456 F801 0162 D0               		dc.b $F8, 1, 1,	$62, $D0
0000D45B F809 0164 18               		dc.b $F8, 9, 1,	$64, $18
0000D460 F80D 016A 30               		dc.b $F8, $D, 1, $6A, $30
0000D465 F704 006E CD               		dc.b $F7, 4, 0,	$6E, $CD
0000D46A FF04 186E CD               		dc.b $FF, 4, $18, $6E, $CD
0000D46F 07                         byte_CD0D:	dc.b 7
0000D470 F80D 0152 B0               		dc.b $F8, $D, 1, $52, $B0
0000D475 F80D 0066 D9               		dc.b $F8, $D, 0, $66, $D9
0000D47A F801 014A F9               		dc.b $F8, 1, 1,	$4A, $F9
0000D47F F704 006E F6               		dc.b $F7, 4, 0,	$6E, $F6
0000D484 FF04 186E F6               		dc.b $FF, 4, $18, $6E, $F6
0000D489 F80D FFF8 28               		dc.b $F8, $D, $FF, $F8,	$28
0000D48E F801 0170 48               		dc.b $F8, 1, 1,	$70, $48
0000D493 04                         byte_CD31:	dc.b 4
0000D494 F80D FFD1 B0               		dc.b $F8, $D, $FF, $D1,	$B0
0000D499 F80D FFD9 D0               		dc.b $F8, $D, $FF, $D9,	$D0
0000D49E F801 FFE1 F0               		dc.b $F8, 1, $FF, $E1, $F0
0000D4A3 F806 1FE3 40               		dc.b $F8, 6, $1F, $E3, $40
0000D4A8 04                         byte_CD46:	dc.b 4
0000D4A9 F80D FFD1 B0               		dc.b $F8, $D, $FF, $D1,	$B0
0000D4AE F80D FFD9 D0               		dc.b $F8, $D, $FF, $D9,	$D0
0000D4B3 F801 FFE1 F0               		dc.b $F8, 1, $FF, $E1, $F0
0000D4B8 F806 1FE9 40               		dc.b $F8, 6, $1F, $E9, $40
0000D4BD 03                         byte_CD5B:	dc.b 3
0000D4BE F80D FFD1 B0               		dc.b $F8, $D, $FF, $D1,	$B0
0000D4C3 F80D FFD9 D0               		dc.b $F8, $D, $FF, $D9,	$D0
0000D4C8 F801 FFE1 F0               		dc.b $F8, 1, $FF, $E1, $F0
0000D4CD 0C                         byte_CD6B:	dc.b $C			; "SPECIAL STAGE"
0000D4CE F805 003E 9C               		dc.b $F8, 5, 0,	$3E, $9C
0000D4D3 F805 0036 AC               		dc.b $F8, 5, 0,	$36, $AC
0000D4D8 F805 0010 BC               		dc.b $F8, 5, 0,	$10, $BC
0000D4DD F805 0008 CC               		dc.b $F8, 5, 0,	8, $CC
0000D4E2 F801 0020 DC               		dc.b $F8, 1, 0,	$20, $DC
0000D4E7 F805 0000 E4               		dc.b $F8, 5, 0,	0, $E4
0000D4EC F805 0026 F4               		dc.b $F8, 5, 0,	$26, $F4
0000D4F1 F805 003E 14               		dc.b $F8, 5, 0,	$3E, $14
0000D4F6 F805 0042 24               		dc.b $F8, 5, 0,	$42, $24
0000D4FB F805 0000 34               		dc.b $F8, 5, 0,	0, $34
0000D500 F805 0018 44               		dc.b $F8, 5, 0,	$18, $44
0000D505 F805 0010 54               		dc.b $F8, 5, 0,	$10, $54
0000D50A 0F                         byte_CDA8:	dc.b $F			; "SONIC GOT THEM ALL"
0000D50B F805 003E 88               		dc.b $F8, 5, 0,	$3E, $88
0000D510 F805 0032 98               		dc.b $F8, 5, 0,	$32, $98
0000D515 F805 002E A8               		dc.b $F8, 5, 0,	$2E, $A8
0000D51A F801 0020 B8               		dc.b $F8, 1, 0,	$20, $B8
0000D51F F805 0008 C0               		dc.b $F8, 5, 0,	8, $C0
0000D524 F805 0018 D8               		dc.b $F8, 5, 0,	$18, $D8
0000D529 F805 0032 E8               		dc.b $F8, 5, 0,	$32, $E8
0000D52E F805 0042 F8               		dc.b $F8, 5, 0,	$42, $F8
0000D533 F805 0042 10               		dc.b $F8, 5, 0,	$42, $10
0000D538 F805 001C 20               		dc.b $F8, 5, 0,	$1C, $20
0000D53D F805 0010 30               		dc.b $F8, 5, 0,	$10, $30
0000D542 F805 002A 40               		dc.b $F8, 5, 0,	$2A, $40
0000D547 F805 0000 58               		dc.b $F8, 5, 0,	0, $58
0000D54C F805 0026 68               		dc.b $F8, 5, 0,	$26, $68
0000D551 F805 0026 78               		dc.b $F8, 5, 0,	$26, $78
0000D556                            		even
0000D556                            ; ---------------------------------------------------------------------------
0000D556                            ; Sprite mappings - chaos emeralds from	the special stage results screen
0000D556                            ; ---------------------------------------------------------------------------
0000D556                            Map_obj7F:
0000D556                            	include "_maps\obj7F.asm"
0000D556                            ; ---------------------------------------------------------------------------
0000D556                            ; Sprite mappings - chaos emeralds from	the special stage results screen
0000D556                            ; ---------------------------------------------------------------------------
0000D556 0000                       		dc.w byte_CE02-Map_obj7F
0000D558 0000                       		dc.w byte_CE08-Map_obj7F
0000D55A 0000                       		dc.w byte_CE0E-Map_obj7F
0000D55C 0000                       		dc.w byte_CE14-Map_obj7F
0000D55E 0000                       		dc.w byte_CE1A-Map_obj7F
0000D560 0000                       		dc.w byte_CE20-Map_obj7F
0000D562 0000                       		dc.w byte_CE26-Map_obj7F
0000D564 01                         byte_CE02:	dc.b 1
0000D565 F805 2004 F8               		dc.b $F8, 5, $20, 4, $F8
0000D56A 01                         byte_CE08:	dc.b 1
0000D56B F805 0000 F8               		dc.b $F8, 5, 0,	0, $F8
0000D570 01                         byte_CE0E:	dc.b 1
0000D571 F805 4004 F8               		dc.b $F8, 5, $40, 4, $F8
0000D576 01                         byte_CE14:	dc.b 1
0000D577 F805 6004 F8               		dc.b $F8, 5, $60, 4, $F8
0000D57C 01                         byte_CE1A:	dc.b 1
0000D57D F805 2008 F8               		dc.b $F8, 5, $20, 8, $F8
0000D582 01                         byte_CE20:	dc.b 1
0000D583 F805 200C F8               		dc.b $F8, 5, $20, $C, $F8
0000D588 00                         byte_CE26:	dc.b 0			; Blank frame
0000D58A 00                         		even
0000D58A 00                         		even
0000D58A                            
0000D58A                            ; ===========================================================================
0000D58A                            ; ---------------------------------------------------------------------------
0000D58A                            ; Object 36 - spikes
0000D58A                            ; ---------------------------------------------------------------------------
0000D58A                            
0000D58A                            Obj36:					; XREF: Obj_Index
0000D58A 7000                       		moveq	#0,d0
0000D58C 1028 0024                  		move.b	$24(a0),d0
0000D590 323B 0000                  		move.w	Obj36_Index(pc,d0.w),d1
0000D594 4EFB 1000                  		jmp	Obj36_Index(pc,d1.w)
0000D598                            ; ===========================================================================
0000D598 0000                       Obj36_Index:	dc.w Obj36_Main-Obj36_Index
0000D59A 0000                       		dc.w Obj36_Solid-Obj36_Index
0000D59C                            
0000D59C 0014                       Obj36_Var:	dc.b 0,	$14		; frame	number,	object width
0000D59E 0110                       		dc.b 1,	$10
0000D5A0 0204                       		dc.b 2,	4
0000D5A2 031C                       		dc.b 3,	$1C
0000D5A4 0440                       		dc.b 4,	$40
0000D5A6 0510                       		dc.b 5,	$10
0000D5A8                            ; ===========================================================================
0000D5A8                            
0000D5A8                            Obj36_Main:				; XREF: Obj36_Index
0000D5A8 5428 0024                  		addq.b	#2,$24(a0)
0000D5AC 217C 0000 0000 0004        		move.l	#Map_obj36,4(a0)
0000D5B4 317C 051B 0002             		move.w	#$51B,2(a0)
0000D5BA 0028 0004 0001             		ori.b	#4,1(a0)
0000D5C0 117C 0004 0018             		move.b	#4,$18(a0)
0000D5C6 1028 0028                  		move.b	$28(a0),d0
0000D5CA 0228 000F 0028             		andi.b	#$F,$28(a0)
0000D5D0 0240 00F0                  		andi.w	#$F0,d0
0000D5D4 43F9 0000 D59C             		lea	(Obj36_Var).l,a1
0000D5DA E648                       		lsr.w	#3,d0
0000D5DC D2C0                       		adda.w	d0,a1
0000D5DE 1159 001A                  		move.b	(a1)+,$1A(a0)
0000D5E2 1159 0019                  		move.b	(a1)+,$19(a0)
0000D5E6 3168 0008 0030             		move.w	8(a0),$30(a0)
0000D5EC 3168 000C 0032             		move.w	$C(a0),$32(a0)
0000D5F2                            
0000D5F2                            Obj36_Solid:				; XREF: Obj36_Index
0000D5F2 6100 0000                  		bsr.w	Obj36_Type0x	; make the object move
0000D5F6 343C 0004                  		move.w	#4,d2
0000D5FA 0C28 0005 001A             		cmpi.b	#5,$1A(a0)	; is object type $5x ?
0000D600 6700                       		beq.s	Obj36_SideWays	; if yes, branch
0000D602 0C28 0001 001A             		cmpi.b	#1,$1A(a0)	; is object type $1x ?
0000D608 6600                       		bne.s	Obj36_Upright	; if not, branch
0000D60A 343C 0014                  		move.w	#$14,d2
0000D60E                            
0000D60E                            ; Spikes types $1x and $5x face	sideways
0000D60E                            
0000D60E                            Obj36_SideWays:				; XREF: Obj36_Solid
0000D60E 323C 001B                  		move.w	#$1B,d1
0000D612 3602                       		move.w	d2,d3
0000D614 5243                       		addq.w	#1,d3
0000D616 3828 0008                  		move.w	8(a0),d4
0000D61A 6100 0000                  		bsr.w	SolidObject
0000D61E 0828 0003 0022             		btst	#3,$22(a0)
0000D624 6600                       		bne.s	Obj36_Display
0000D626 0C44 0001                  		cmpi.w	#1,d4
0000D62A 6700                       		beq.s	Obj36_Hurt
0000D62C 6000                       		bra.s	Obj36_Display
0000D62E                            ; ===========================================================================
0000D62E                            
0000D62E                            ; Spikes types $0x, $2x, $3x and $4x face up or	down
0000D62E                            
0000D62E                            Obj36_Upright:				; XREF: Obj36_Solid
0000D62E 7200                       		moveq	#0,d1
0000D630 1228 0019                  		move.b	$19(a0),d1
0000D634 0641 000B                  		addi.w	#$B,d1
0000D638 343C 0010                  		move.w	#$10,d2
0000D63C 363C 0011                  		move.w	#$11,d3
0000D640 3828 0008                  		move.w	8(a0),d4
0000D644 6100 0000                  		bsr.w	SolidObject
0000D648 0828 0003 0022             		btst	#3,$22(a0)
0000D64E 6600                       		bne.s	Obj36_Hurt
0000D650 4A44                       		tst.w	d4
0000D652 6A00                       		bpl.s	Obj36_Display
0000D654                            
0000D654                            Obj36_Hurt:				; XREF: Obj36_SideWays; Obj36_Upright
0000D654 4A38 FE2D                  		tst.b	($FFFFFE2D).w	; is Sonic invincible?
0000D658 6600                       		bne.s	Obj36_Display	; if yes, branch
0000D65A 2F08                       		move.l	a0,-(sp)
0000D65C 2448                       		movea.l	a0,a2
0000D65E 41F8 D000                  		lea	($FFFFD000).w,a0
0000D662 0C28 0004 0024             		cmpi.b	#4,$24(a0)
0000D668 6400                       		bcc.s	loc_CF20
0000D66A 2628 000C                  		move.l	$C(a0),d3
0000D66E 3028 0012                  		move.w	$12(a0),d0
0000D672 48C0                       		ext.l	d0
0000D674 E180                       		asl.l	#8,d0
0000D676 9680                       		sub.l	d0,d3
0000D678 2143 000C                  		move.l	d3,$C(a0)
0000D67C 4EB9 0000 0000             		jsr	HurtSonic
0000D682                            
0000D682                            loc_CF20:
0000D682 205F                       		movea.l	(sp)+,a0
0000D684                            
0000D684                            Obj36_Display:
0000D684 6100 0000                  		bsr.w	DisplaySprite
0000D688 3028 0030                  		move.w	$30(a0),d0
0000D68C 0240 FF80                  		andi.w	#$FF80,d0
0000D690 3238 F700                  		move.w	($FFFFF700).w,d1
0000D694 0441 0080                  		subi.w	#$80,d1
0000D698 0241 FF80                  		andi.w	#$FF80,d1
0000D69C 9041                       		sub.w	d1,d0
0000D69E 0C40 0280                  		cmpi.w	#$280,d0
0000D6A2 6200 0000                  		bhi.w	DeleteObject
0000D6A6 4E75                       		rts	
0000D6A8                            ; ===========================================================================
0000D6A8                            
0000D6A8                            Obj36_Type0x:				; XREF: Obj36_Solid
0000D6A8 7000                       		moveq	#0,d0
0000D6AA 1028 0028                  		move.b	$28(a0),d0
0000D6AE D040                       		add.w	d0,d0
0000D6B0 323B 0000                  		move.w	Obj36_TypeIndex(pc,d0.w),d1
0000D6B4 4EFB 1000                  		jmp	Obj36_TypeIndex(pc,d1.w)
0000D6B8                            ; ===========================================================================
0000D6B8 0000                       Obj36_TypeIndex:dc.w Obj36_Type00-Obj36_TypeIndex
0000D6BA 0000                       		dc.w Obj36_Type01-Obj36_TypeIndex
0000D6BC 0000                       		dc.w Obj36_Type02-Obj36_TypeIndex
0000D6BE                            ; ===========================================================================
0000D6BE                            
0000D6BE                            Obj36_Type00:				; XREF: Obj36_TypeIndex
0000D6BE 4E75                       		rts			; don't move the object
0000D6C0                            ; ===========================================================================
0000D6C0                            
0000D6C0                            Obj36_Type01:				; XREF: Obj36_TypeIndex
0000D6C0 6100 0000                  		bsr.w	Obj36_Wait
0000D6C4 7000                       		moveq	#0,d0
0000D6C6 1028 0034                  		move.b	$34(a0),d0
0000D6CA D068 0032                  		add.w	$32(a0),d0
0000D6CE 3140 000C                  		move.w	d0,$C(a0)	; move the object vertically
0000D6D2 4E75                       		rts	
0000D6D4                            ; ===========================================================================
0000D6D4                            
0000D6D4                            Obj36_Type02:				; XREF: Obj36_TypeIndex
0000D6D4 6100 0000                  		bsr.w	Obj36_Wait
0000D6D8 7000                       		moveq	#0,d0
0000D6DA 1028 0034                  		move.b	$34(a0),d0
0000D6DE D068 0030                  		add.w	$30(a0),d0
0000D6E2 3140 0008                  		move.w	d0,8(a0)	; move the object horizontally
0000D6E6 4E75                       		rts	
0000D6E8                            ; ===========================================================================
0000D6E8                            
0000D6E8                            Obj36_Wait:
0000D6E8 4A68 0038                  		tst.w	$38(a0)		; is time delay	= zero?
0000D6EC 6700                       		beq.s	loc_CFA4	; if yes, branch
0000D6EE 5368 0038                  		subq.w	#1,$38(a0)	; subtract 1 from time delay
0000D6F2 6600                       		bne.s	locret_CFE6
0000D6F4 4A28 0001                  		tst.b	1(a0)
0000D6F8 6A00                       		bpl.s	locret_CFE6
0000D6FA 303C 00B6                  		move.w	#$B6,d0
0000D6FE 4EB9 0000 15C0             		jsr	(PlaySound_Special).l ;	play "spikes moving" sound
0000D704 6000                       		bra.s	locret_CFE6
0000D706                            ; ===========================================================================
0000D706                            
0000D706                            loc_CFA4:
0000D706 4A68 0036                  		tst.w	$36(a0)
0000D70A 6700                       		beq.s	loc_CFC6
0000D70C 0468 0800 0034             		subi.w	#$800,$34(a0)
0000D712 6400                       		bcc.s	locret_CFE6
0000D714 317C 0000 0034             		move.w	#0,$34(a0)
0000D71A 317C 0000 0036             		move.w	#0,$36(a0)
0000D720 317C 003C 0038             		move.w	#60,$38(a0)	; set time delay to 1 second
0000D726 6000                       		bra.s	locret_CFE6
0000D728                            ; ===========================================================================
0000D728                            
0000D728                            loc_CFC6:
0000D728 0668 0800 0034             		addi.w	#$800,$34(a0)
0000D72E 0C68 2000 0034             		cmpi.w	#$2000,$34(a0)
0000D734 6500                       		bcs.s	locret_CFE6
0000D736 317C 2000 0034             		move.w	#$2000,$34(a0)
0000D73C 317C 0001 0036             		move.w	#1,$36(a0)
0000D742 317C 003C 0038             		move.w	#60,$38(a0)	; set time delay to 1 second
0000D748                            
0000D748                            locret_CFE6:
0000D748 4E75                       		rts	
0000D74A                            ; ===========================================================================
0000D74A                            ; ---------------------------------------------------------------------------
0000D74A                            ; Sprite mappings - spikes
0000D74A                            ; ---------------------------------------------------------------------------
0000D74A                            Map_obj36:
0000D74A                            	include "_maps\obj36.asm"
0000D74A                            ; ---------------------------------------------------------------------------
0000D74A                            ; Sprite mappings - spikes
0000D74A                            ; ---------------------------------------------------------------------------
0000D74A 0000                       		dc.w byte_CFF4-Map_obj36
0000D74C 0000                       		dc.w byte_D004-Map_obj36
0000D74E 0000                       		dc.w byte_D014-Map_obj36
0000D750 0000                       		dc.w byte_D01A-Map_obj36
0000D752 0000                       		dc.w byte_D02A-Map_obj36
0000D754 0000                       		dc.w byte_D049-Map_obj36
0000D756 03                         byte_CFF4:	dc.b 3			; 3 spikes
0000D757 F003 0004 EC               		dc.b $F0, 3, 0,	4, $EC
0000D75C F003 0004 FC               		dc.b $F0, 3, 0,	4, $FC
0000D761 F003 0004 0C               		dc.b $F0, 3, 0,	4, $C
0000D766 03                         byte_D004:	dc.b 3			; 3 spikes facing sideways
0000D767 EC0C 0000 F0               		dc.b $EC, $C, 0, 0, $F0
0000D76C FC0C 0000 F0               		dc.b $FC, $C, 0, 0, $F0
0000D771 0C0C 0000 F0               		dc.b $C, $C, 0,	0, $F0
0000D776 01                         byte_D014:	dc.b 1			; 1 spike
0000D777 F003 0004 FC               		dc.b $F0, 3, 0,	4, $FC
0000D77C 03                         byte_D01A:	dc.b 3			; 3 spikes widely spaced
0000D77D F003 0004 E4               		dc.b $F0, 3, 0,	4, $E4
0000D782 F003 0004 FC               		dc.b $F0, 3, 0,	4, $FC
0000D787 F003 0004 14               		dc.b $F0, 3, 0,	4, $14
0000D78C 06                         byte_D02A:	dc.b 6			; 6 spikes
0000D78D F003 0004 C0               		dc.b $F0, 3, 0,	4, $C0
0000D792 F003 0004 D8               		dc.b $F0, 3, 0,	4, $D8
0000D797 F003 0004 F0               		dc.b $F0, 3, 0,	4, $F0
0000D79C F003 0004 08               		dc.b $F0, 3, 0,	4, 8
0000D7A1 F003 0004 20               		dc.b $F0, 3, 0,	4, $20
0000D7A6 F003 0004 38               		dc.b $F0, 3, 0,	4, $38
0000D7AB 01                         byte_D049:	dc.b 1			; 1 spike facing sideways
0000D7AC FC0C 0000 F0               		dc.b $FC, $C, 0, 0, $F0
0000D7B2 00                         		even
0000D7B2 00                         		even
0000D7B2                            
0000D7B2                            ; ===========================================================================
0000D7B2                            ; ---------------------------------------------------------------------------
0000D7B2                            ; Object 3B - purple rock (GHZ)
0000D7B2                            ; ---------------------------------------------------------------------------
0000D7B2                            
0000D7B2                            Obj3B:					; XREF: Obj_Index
0000D7B2 7000                       		moveq	#0,d0
0000D7B4 1028 0024                  		move.b	$24(a0),d0
0000D7B8 323B 0000                  		move.w	Obj3B_Index(pc,d0.w),d1
0000D7BC 4EFB 1000                  		jmp	Obj3B_Index(pc,d1.w)
0000D7C0                            ; ===========================================================================
0000D7C0 0000                       Obj3B_Index:	dc.w Obj3B_Main-Obj3B_Index
0000D7C2 0000                       		dc.w Obj3B_Solid-Obj3B_Index
0000D7C4                            ; ===========================================================================
0000D7C4                            
0000D7C4                            Obj3B_Main:				; XREF: Obj3B_Index
0000D7C4 5428 0024                  		addq.b	#2,$24(a0)
0000D7C8 217C 0000 0000 0004        		move.l	#Map_obj3B,4(a0)
0000D7D0 317C 63D0 0002             		move.w	#$63D0,2(a0)
0000D7D6 117C 0004 0001             		move.b	#4,1(a0)
0000D7DC 117C 0013 0019             		move.b	#$13,$19(a0)
0000D7E2 117C 0004 0018             		move.b	#4,$18(a0)
0000D7E8                            
0000D7E8                            Obj3B_Solid:				; XREF: Obj3B_Index
0000D7E8 323C 001B                  		move.w	#$1B,d1
0000D7EC 343C 0010                  		move.w	#$10,d2
0000D7F0 363C 0010                  		move.w	#$10,d3
0000D7F4 3828 0008                  		move.w	8(a0),d4
0000D7F8 6100 0000                  		bsr.w	SolidObject
0000D7FC 6100 0000                  		bsr.w	DisplaySprite
0000D800 3028 0008                  		move.w	8(a0),d0
0000D804 0240 FF80                  		andi.w	#$FF80,d0
0000D808 3238 F700                  		move.w	($FFFFF700).w,d1
0000D80C 0441 0080                  		subi.w	#$80,d1
0000D810 0241 FF80                  		andi.w	#$FF80,d1
0000D814 9041                       		sub.w	d1,d0
0000D816 0C40 0280                  		cmpi.w	#$280,d0
0000D81A 6200 0000                  		bhi.w	DeleteObject
0000D81E 4E75                       		rts	
0000D820                            ; ===========================================================================
0000D820                            ; ---------------------------------------------------------------------------
0000D820                            ; Object 49 - waterfall	sound effect (GHZ)
0000D820                            ; ---------------------------------------------------------------------------
0000D820                            
0000D820                            Obj49:					; XREF: Obj_Index
0000D820 7000                       		moveq	#0,d0
0000D822 1028 0024                  		move.b	$24(a0),d0
0000D826 323B 0000                  		move.w	Obj49_Index(pc,d0.w),d1
0000D82A 4EFB 1000                  		jmp	Obj49_Index(pc,d1.w)
0000D82E                            ; ===========================================================================
0000D82E 0000                       Obj49_Index:	dc.w Obj49_Main-Obj49_Index
0000D830 0000                       		dc.w Obj49_PlaySnd-Obj49_Index
0000D832                            ; ===========================================================================
0000D832                            
0000D832                            Obj49_Main:				; XREF: Obj49_Index
0000D832 5428 0024                  		addq.b	#2,$24(a0)
0000D836 117C 0004 0001             		move.b	#4,1(a0)
0000D83C                            
0000D83C                            Obj49_PlaySnd:				; XREF: Obj49_Index
0000D83C 1038 FE0F                  		move.b	($FFFFFE0F).w,d0
0000D840 0200 003F                  		andi.b	#$3F,d0
0000D844 6600                       		bne.s	Obj49_ChkDel
0000D846 303C 00D0                  		move.w	#$D0,d0
0000D84A 4EB9 0000 15C0             		jsr	(PlaySound_Special).l ;	play waterfall sound
0000D850                            
0000D850                            Obj49_ChkDel:
0000D850 3028 0008                  		move.w	8(a0),d0
0000D854 0240 FF80                  		andi.w	#$FF80,d0
0000D858 3238 F700                  		move.w	($FFFFF700).w,d1
0000D85C 0441 0080                  		subi.w	#$80,d1
0000D860 0241 FF80                  		andi.w	#$FF80,d1
0000D864 9041                       		sub.w	d1,d0
0000D866 0C40 0280                  		cmpi.w	#$280,d0
0000D86A 6200 0000                  		bhi.w	DeleteObject
0000D86E 4E75                       		rts	
0000D870                            ; ===========================================================================
0000D870                            ; ---------------------------------------------------------------------------
0000D870                            ; Sprite mappings - purple rock	(GHZ)
0000D870                            ; ---------------------------------------------------------------------------
0000D870                            Map_obj3B:
0000D870                            	include "_maps\obj3B.asm"
0000D870                            ; ---------------------------------------------------------------------------
0000D870                            ; Sprite mappings - purple rock	(GHZ)
0000D870                            ; ---------------------------------------------------------------------------
0000D870 0000                       		dc.w byte_D110-Map_obj3B
0000D872 02                         byte_D110:	dc.b 2
0000D873 F00B 0000 E8               		dc.b $F0, $B, 0, 0, $E8
0000D878 F00B 000C 00               		dc.b $F0, $B, 0, $C, 0
0000D87E 00                         		even
0000D87E 00                         		even
0000D87E                            
0000D87E                            ; ===========================================================================
0000D87E                            ; ---------------------------------------------------------------------------
0000D87E                            ; Object 3C - smashable	wall (GHZ, SLZ)
0000D87E                            ; ---------------------------------------------------------------------------
0000D87E                            
0000D87E                            Obj3C:					; XREF: Obj_Index
0000D87E 7000                       		moveq	#0,d0
0000D880 1028 0024                  		move.b	$24(a0),d0
0000D884 323B 0000                  		move.w	Obj3C_Index(pc,d0.w),d1
0000D888 4EBB 1000                  		jsr	Obj3C_Index(pc,d1.w)
0000D88C 6000 0000                  		bra.w	MarkObjGone
0000D890                            ; ===========================================================================
0000D890 0000                       Obj3C_Index:	dc.w Obj3C_Main-Obj3C_Index
0000D892 0000                       		dc.w Obj3C_Solid-Obj3C_Index
0000D894 0000                       		dc.w Obj3C_FragMove-Obj3C_Index
0000D896                            ; ===========================================================================
0000D896                            
0000D896                            Obj3C_Main:				; XREF: Obj3C_Index
0000D896 5428 0024                  		addq.b	#2,$24(a0)
0000D89A 217C 0000 0000 0004        		move.l	#Map_obj3C,4(a0)
0000D8A2 317C 450F 0002             		move.w	#$450F,2(a0)
0000D8A8 117C 0004 0001             		move.b	#4,1(a0)
0000D8AE 117C 0010 0019             		move.b	#$10,$19(a0)
0000D8B4 117C 0004 0018             		move.b	#4,$18(a0)
0000D8BA 1168 0028 001A             		move.b	$28(a0),$1A(a0)
0000D8C0                            
0000D8C0                            Obj3C_Solid:				; XREF: Obj3C_Index
0000D8C0 3178 D010 0030             		move.w	($FFFFD010).w,$30(a0) ;	load Sonic's horizontal speed
0000D8C6 323C 001B                  		move.w	#$1B,d1
0000D8CA 343C 0020                  		move.w	#$20,d2
0000D8CE 363C 0020                  		move.w	#$20,d3
0000D8D2 3828 0008                  		move.w	8(a0),d4
0000D8D6 6100 0000                  		bsr.w	SolidObject
0000D8DA 0828 0005 0022             		btst	#5,$22(a0)
0000D8E0 6600                       		bne.s	Obj3C_ChkRoll
0000D8E2                            
0000D8E2                            locret_D180:
0000D8E2 4E75                       		rts	
0000D8E4                            ; ===========================================================================
0000D8E4                            
0000D8E4                            Obj3C_ChkRoll:				; XREF: Obj3C_Solid
0000D8E4 0C29 0002 001C             		cmpi.b	#2,$1C(a1)	; is Sonic rolling?
0000D8EA 66F6                       		bne.s	locret_D180	; if not, branch
0000D8EC 3028 0030                  		move.w	$30(a0),d0
0000D8F0 6A00                       		bpl.s	Obj3C_ChkSpeed
0000D8F2 4440                       		neg.w	d0
0000D8F4                            
0000D8F4                            Obj3C_ChkSpeed:
0000D8F4 0C40 0480                  		cmpi.w	#$480,d0	; is Sonic's speed $480 or higher?
0000D8F8 65E8                       		bcs.s	locret_D180	; if not, branch
0000D8FA 3368 0030 0010             		move.w	$30(a0),$10(a1)
0000D900 5869 0008                  		addq.w	#4,8(a1)
0000D904 49F9 0000 0000             		lea	(Obj3C_FragSpd1).l,a4 ;	use fragments that move	right
0000D90A 3028 0008                  		move.w	8(a0),d0
0000D90E B069 0008                  		cmp.w	8(a1),d0	; is Sonic to the right	of the block?
0000D912 6500                       		bcs.s	Obj3C_Smash	; if yes, branch
0000D914 5169 0008                  		subq.w	#8,8(a1)
0000D918 49F9 0000 0000             		lea	(Obj3C_FragSpd2).l,a4 ;	use fragments that move	left
0000D91E                            
0000D91E                            Obj3C_Smash:
0000D91E 3369 0010 0014             		move.w	$10(a1),$14(a1)
0000D924 08A8 0005 0022             		bclr	#5,$22(a0)
0000D92A 08A9 0005 0022             		bclr	#5,$22(a1)
0000D930 7207                       		moveq	#7,d1		; load 8 fragments
0000D932 343C 0070                  		move.w	#$70,d2
0000D936 6100                       		bsr.s	SmashObject
0000D938                            
0000D938                            Obj3C_FragMove:				; XREF: Obj3C_Index
0000D938 6100 0000                  		bsr.w	SpeedToPos
0000D93C 0668 0070 0012             		addi.w	#$70,$12(a0)	; make fragment	fall faster
0000D942 6100 0000                  		bsr.w	DisplaySprite
0000D946 4A28 0001                  		tst.b	1(a0)
0000D94A 6A00 0000                  		bpl.w	DeleteObject
0000D94E 4E75                       		rts	
0000D950                            
0000D950                            ; ---------------------------------------------------------------------------
0000D950                            ; Subroutine to	smash a	block (GHZ walls and MZ	blocks)
0000D950                            ; ---------------------------------------------------------------------------
0000D950                            
0000D950                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000D950                            
0000D950                            
0000D950                            SmashObject:				; XREF: Obj3C_Smash
0000D950 7000                       		moveq	#0,d0
0000D952 1028 001A                  		move.b	$1A(a0),d0
0000D956 D040                       		add.w	d0,d0
0000D958 2668 0004                  		movea.l	4(a0),a3
0000D95C D6F3 0000                  		adda.w	(a3,d0.w),a3
0000D960 524B                       		addq.w	#1,a3
0000D962 08E8 0005 0001             		bset	#5,1(a0)
0000D968 1810                       		move.b	0(a0),d4
0000D96A 1A28 0001                  		move.b	1(a0),d5
0000D96E 2248                       		movea.l	a0,a1
0000D970 6000                       		bra.s	Smash_LoadFrag
0000D972                            ; ===========================================================================
0000D972                            
0000D972                            Smash_Loop:
0000D972 6100 0000                  		bsr.w	SingleObjLoad
0000D976 6600                       		bne.s	Smash_PlaySnd
0000D978 5A4B                       		addq.w	#5,a3
0000D97A                            
0000D97A                            Smash_LoadFrag:				; XREF: SmashObject
0000D97A 137C 0004 0024             		move.b	#4,$24(a1)
0000D980 1284                       		move.b	d4,0(a1)
0000D982 234B 0004                  		move.l	a3,4(a1)
0000D986 1345 0001                  		move.b	d5,1(a1)
0000D98A 3368 0008 0008             		move.w	8(a0),8(a1)
0000D990 3368 000C 000C             		move.w	$C(a0),$C(a1)
0000D996 3368 0002 0002             		move.w	2(a0),2(a1)
0000D99C 1368 0018 0018             		move.b	$18(a0),$18(a1)
0000D9A2 1368 0019 0019             		move.b	$19(a0),$19(a1)
0000D9A8 335C 0010                  		move.w	(a4)+,$10(a1)
0000D9AC 335C 0012                  		move.w	(a4)+,$12(a1)
0000D9B0 B3C8                       		cmpa.l	a0,a1
0000D9B2 6400                       		bcc.s	loc_D268
0000D9B4 2F08                       		move.l	a0,-(sp)
0000D9B6 2049                       		movea.l	a1,a0
0000D9B8 6100 0000                  		bsr.w	SpeedToPos
0000D9BC D568 0012                  		add.w	d2,$12(a0)
0000D9C0 205F                       		movea.l	(sp)+,a0
0000D9C2 6100 0000                  		bsr.w	DisplaySprite2
0000D9C6                            
0000D9C6                            loc_D268:
0000D9C6 51C9 FFAA                  		dbf	d1,Smash_Loop
0000D9CA                            
0000D9CA                            Smash_PlaySnd:
0000D9CA 303C 00CB                  		move.w	#$CB,d0
0000D9CE 4EF9 0000 15C0             		jmp	(PlaySound_Special).l ;	play smashing sound
0000D9D4                            ; End of function SmashObject
0000D9D4                            
0000D9D4                            ; ===========================================================================
0000D9D4                            ; Smashed block	fragment speeds
0000D9D4                            ;
0000D9D4 0400 FB00                  Obj3C_FragSpd1:	dc.w $400, $FB00	; x-move speed,	y-move speed
0000D9D8 0600 FF00                  		dc.w $600, $FF00
0000D9DC 0600 0100                  		dc.w $600, $100
0000D9E0 0400 0500                  		dc.w $400, $500
0000D9E4 0600 FA00                  		dc.w $600, $FA00
0000D9E8 0800 FE00                  		dc.w $800, $FE00
0000D9EC 0800 0200                  		dc.w $800, $200
0000D9F0 0600 0600                  		dc.w $600, $600
0000D9F4                            
0000D9F4 FA00 FA00                  Obj3C_FragSpd2:	dc.w $FA00, $FA00
0000D9F8 F800 FE00                  		dc.w $F800, $FE00
0000D9FC F800 0200                  		dc.w $F800, $200
0000DA00 FA00 0600                  		dc.w $FA00, $600
0000DA04 FC00 FB00                  		dc.w $FC00, $FB00
0000DA08 FA00 FF00                  		dc.w $FA00, $FF00
0000DA0C FA00 0100                  		dc.w $FA00, $100
0000DA10 FC00 0500                  		dc.w $FC00, $500
0000DA14                            ; ---------------------------------------------------------------------------
0000DA14                            ; Sprite mappings - smashable walls (GHZ, SLZ)
0000DA14                            ; ---------------------------------------------------------------------------
0000DA14                            Map_obj3C:
0000DA14                            	include "_maps\obj3C.asm"
0000DA14                            ; ---------------------------------------------------------------------------
0000DA14                            ; Sprite mappings - smashable walls (GHZ, SLZ)
0000DA14                            ; ---------------------------------------------------------------------------
0000DA14 0000                       		dc.w byte_D2BC-Map_obj3C
0000DA16 0000                       		dc.w byte_D2E5-Map_obj3C
0000DA18 0000                       		dc.w byte_D30E-Map_obj3C
0000DA1A 08                         byte_D2BC:	dc.b 8
0000DA1B E005 0000 F0               		dc.b $E0, 5, 0,	0, $F0
0000DA20 F005 0000 F0               		dc.b $F0, 5, 0,	0, $F0
0000DA25 0005 0000 F0               		dc.b 0,	5, 0, 0, $F0
0000DA2A 1005 0000 F0               		dc.b $10, 5, 0,	0, $F0
0000DA2F E005 0004 00               		dc.b $E0, 5, 0,	4, 0
0000DA34 F005 0004 00               		dc.b $F0, 5, 0,	4, 0
0000DA39 0005 0004 00               		dc.b 0,	5, 0, 4, 0
0000DA3E 1005 0004 00               		dc.b $10, 5, 0,	4, 0
0000DA43 08                         byte_D2E5:	dc.b 8
0000DA44 E005 0004 F0               		dc.b $E0, 5, 0,	4, $F0
0000DA49 F005 0004 F0               		dc.b $F0, 5, 0,	4, $F0
0000DA4E 0005 0004 F0               		dc.b 0,	5, 0, 4, $F0
0000DA53 1005 0004 F0               		dc.b $10, 5, 0,	4, $F0
0000DA58 E005 0004 00               		dc.b $E0, 5, 0,	4, 0
0000DA5D F005 0004 00               		dc.b $F0, 5, 0,	4, 0
0000DA62 0005 0004 00               		dc.b 0,	5, 0, 4, 0
0000DA67 1005 0004 00               		dc.b $10, 5, 0,	4, 0
0000DA6C 08                         byte_D30E:	dc.b 8
0000DA6D E005 0004 F0               		dc.b $E0, 5, 0,	4, $F0
0000DA72 F005 0004 F0               		dc.b $F0, 5, 0,	4, $F0
0000DA77 0005 0004 F0               		dc.b 0,	5, 0, 4, $F0
0000DA7C 1005 0004 F0               		dc.b $10, 5, 0,	4, $F0
0000DA81 E005 0008 00               		dc.b $E0, 5, 0,	8, 0
0000DA86 F005 0008 00               		dc.b $F0, 5, 0,	8, 0
0000DA8B 0005 0008 00               		dc.b 0,	5, 0, 8, 0
0000DA90 1005 0008 00               		dc.b $10, 5, 0,	8, 0
0000DA96 00                         		even
0000DA96 00                         		even
0000DA96                            
0000DA96                            ; ---------------------------------------------------------------------------
0000DA96                            ; Object code loading subroutine
0000DA96                            ; ---------------------------------------------------------------------------
0000DA96                            
0000DA96                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000DA96                            
0000DA96                            
0000DA96                            ObjectsLoad:				; XREF: TitleScreen; et al
0000DA96 41F8 D000                  		lea	($FFFFD000).w,a0 ; set address for object RAM
0000DA9A 7E7F                       		moveq	#$7F,d7
0000DA9C 7000                       		moveq	#0,d0
0000DA9E 0C38 0006 D024             		cmpi.b	#6,($FFFFD024).w
0000DAA4 6400                       		bcc.s	loc_D362
0000DAA6                            
0000DAA6                            loc_D348:
0000DAA6 1010                       		move.b	(a0),d0		; load object number from RAM
0000DAA8 6700                       		beq.s	loc_D358
0000DAAA D040                       		add.w	d0,d0
0000DAAC D040                       		add.w	d0,d0
0000DAAE 227B 0000                  		movea.l	Obj_Index-4(pc,d0.w),a1
0000DAB2 4E91                       		jsr	(a1)		; run the object's code
0000DAB4 7000                       		moveq	#0,d0
0000DAB6                            
0000DAB6                            loc_D358:
0000DAB6 41E8 0040                  		lea	$40(a0),a0	; next object
0000DABA 51CF FFEA                  		dbf	d7,loc_D348
0000DABE 4E75                       		rts	
0000DAC0                            ; ===========================================================================
0000DAC0                            
0000DAC0                            loc_D362:
0000DAC0 7E1F                       		moveq	#$1F,d7
0000DAC2 61E2                       		bsr.s	loc_D348
0000DAC4 7E5F                       		moveq	#$5F,d7
0000DAC6                            
0000DAC6                            loc_D368:
0000DAC6 7000                       		moveq	#0,d0
0000DAC8 1010                       		move.b	(a0),d0
0000DACA 6700                       		beq.s	loc_D378
0000DACC 4A28 0001                  		tst.b	1(a0)
0000DAD0 6A00                       		bpl.s	loc_D378
0000DAD2 6100 0000                  		bsr.w	DisplaySprite
0000DAD6                            
0000DAD6                            loc_D378:
0000DAD6 41E8 0040                  		lea	$40(a0),a0
0000DADA                            
0000DADA                            loc_D37C:
0000DADA 51CF FFEA                  		dbf	d7,loc_D368
0000DADE 4E75                       		rts	
0000DAE0                            ; End of function ObjectsLoad
0000DAE0                            
0000DAE0                            ; ===========================================================================
0000DAE0                            ; ---------------------------------------------------------------------------
0000DAE0                            ; Object pointers
0000DAE0                            ; ---------------------------------------------------------------------------
0000DAE0                            Obj_Index:
0000DAE0                            	include "_inc\Object pointers.asm"
0000DAE0                            ; ---------------------------------------------------------------------------
0000DAE0                            ; Object pointers
0000DAE0                            ; ---------------------------------------------------------------------------
0000DAE0 0000 0000 0000 0000 0000+  	dc.l Obj01, ObjectFall,	ObjectFall, ObjectFall
0000DAF0 0000 0000 0000 0000 0000+  	dc.l ObjectFall, ObjectFall, ObjectFall, Obj08
0000DB00 0000 0000 0000 0000 0000+  	dc.l Obj09, Obj0A, Obj0B, Obj0C
0000DB10 0000 0000 0000 AD26 0000+  	dc.l Obj0D, Obj0E, Obj0F, Obj10
0000DB20 0000 78CC 0000 0000 0000+  	dc.l Obj11, Obj12, Obj13, Obj14
0000DB30 0000 7EF2 0000 0000 0000+  	dc.l Obj15, Obj16, Obj17, Obj18
0000DB40 0000 8740 0000 883A 0000+  	dc.l Obj19, Obj1A, Obj1B, Obj1C
0000DB50 0000 8E84 0000 9172 0000+  	dc.l Obj1D, Obj1E, Obj1F, Obj20
0000DB60 0000 0000 0000 9E22 0000+  	dc.l Obj21, Obj22, Obj23, Obj24
0000DB70 0000 A15A 0000 A746 0000+  	dc.l Obj25, Obj26, Obj27, Obj28
0000DB80 0000 9A7E 0000 8F5A 0000+  	dc.l Obj29, Obj2A, Obj2B, Obj2C
0000DB90 0000 B31E 0000 A93A 0000+  	dc.l Obj2D, Obj2E, Obj2F, Obj30
0000DBA0 0000 BD32 0000 C3E0 0000+  	dc.l Obj31, Obj32, Obj33, Obj34
0000DBB0 0000 B890 0000 D58A 0000+  	dc.l Obj35, Obj36, Obj37, Obj38
0000DBC0 0000 CB66 0000 CC20 0000+  	dc.l Obj39, Obj3A, Obj3B, Obj3C
0000DBD0 0000 0000 0000 0000 0000+  	dc.l Obj3D, Obj3E, Obj3F, Obj40
0000DBE0 0000 0000 0000 0000 0000+  	dc.l Obj41, Obj42, Obj43, Obj44
0000DBF0 0000 C04E 0000 0000 0000+  	dc.l Obj45, Obj46, Obj47, Obj48
0000DC00 0000 D820 0000 0000 0000+  	dc.l Obj49, Obj4A, Obj4B, Obj4C
0000DC10 0000 0000 0000 0000 0000+  	dc.l Obj4D, Obj4E, Obj4F, Obj50
0000DC20 0000 0000 0000 0000 0000+  	dc.l Obj51, Obj52, Obj53, Obj54
0000DC30 0000 0000 0000 0000 0000+  	dc.l Obj55, Obj56, Obj57, Obj58
0000DC40 0000 0000 0000 0000 0000+  	dc.l Obj59, Obj5A, Obj5B, Obj5C
0000DC50 0000 0000 0000 0000 0000+  	dc.l Obj5D, Obj5E, Obj5F, Obj60
0000DC60 0000 0000 0000 0000 0000+  	dc.l Obj61, Obj62, Obj63, Obj64
0000DC70 0000 0000 0000 0000 0000+  	dc.l Obj65, Obj66, Obj67, Obj68
0000DC80 0000 0000 0000 0000 0000+  	dc.l Obj69, Obj6A, Obj6B, Obj6C
0000DC90 0000 0000 0000 0000 0000+  	dc.l Obj6D, Obj6E, Obj6F, Obj70
0000DCA0 0000 0000 0000 0000 0000+  	dc.l Obj71, Obj72, Obj73, Obj74
0000DCB0 0000 0000 0000 0000 0000+  	dc.l Obj75, Obj76, Obj77, Obj78
0000DCC0 0000 0000 0000 0000 0000+  	dc.l Obj79, Obj7A, Obj7B, Obj7C
0000DCD0 0000 0000 0000 CE5A 0000+  	dc.l Obj7D, Obj7E, Obj7F, Obj80
0000DCE0 0000 53D8 0000 0000 0000+  	dc.l Obj81, Obj82, Obj83, Obj84
0000DCF0 0000 0000 0000 0000 0000+  	dc.l Obj85, Obj86, Obj87, Obj88
0000DD00 0000 5A92 0000 0000 0000+  	dc.l Obj89, Obj8A, Obj8B, Obj8C
0000DD00 0000 5A92 0000 0000 0000+  	dc.l Obj89, Obj8A, Obj8B, Obj8C
0000DD10                            
0000DD10                            ; ---------------------------------------------------------------------------
0000DD10                            ; Subroutine to	make an	object fall downwards, increasingly fast
0000DD10                            ; ---------------------------------------------------------------------------
0000DD10                            
0000DD10                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000DD10                            
0000DD10                            
0000DD10                            ObjectFall:
0000DD10 2428 0008                  		move.l	8(a0),d2
0000DD14 2628 000C                  		move.l	$C(a0),d3
0000DD18 3028 0010                  		move.w	$10(a0),d0
0000DD1C 48C0                       		ext.l	d0
0000DD1E E180                       		asl.l	#8,d0
0000DD20 D480                       		add.l	d0,d2
0000DD22 3028 0012                  		move.w	$12(a0),d0
0000DD26 0668 0038 0012             		addi.w	#$38,$12(a0)	; increase vertical speed
0000DD2C 48C0                       		ext.l	d0
0000DD2E E180                       		asl.l	#8,d0
0000DD30 D680                       		add.l	d0,d3
0000DD32 2142 0008                  		move.l	d2,8(a0)
0000DD36 2143 000C                  		move.l	d3,$C(a0)
0000DD3A 4E75                       		rts	
0000DD3C                            ; End of function ObjectFall
0000DD3C                            
0000DD3C                            ; ---------------------------------------------------------------------------
0000DD3C                            ; Subroutine translating object	speed to update	object position
0000DD3C                            ; ---------------------------------------------------------------------------
0000DD3C                            
0000DD3C                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000DD3C                            
0000DD3C                            
0000DD3C                            SpeedToPos:
0000DD3C 2428 0008                  		move.l	8(a0),d2
0000DD40 2628 000C                  		move.l	$C(a0),d3
0000DD44 3028 0010                  		move.w	$10(a0),d0	; load horizontal speed
0000DD48 48C0                       		ext.l	d0
0000DD4A E180                       		asl.l	#8,d0		; multiply speed by $100
0000DD4C D480                       		add.l	d0,d2		; add to x-axis	position
0000DD4E 3028 0012                  		move.w	$12(a0),d0	; load vertical	speed
0000DD52 48C0                       		ext.l	d0
0000DD54 E180                       		asl.l	#8,d0		; multiply by $100
0000DD56 D680                       		add.l	d0,d3		; add to y-axis	position
0000DD58 2142 0008                  		move.l	d2,8(a0)	; update x-axis	position
0000DD5C 2143 000C                  		move.l	d3,$C(a0)	; update y-axis	position
0000DD60 4E75                       		rts	
0000DD62                            ; End of function SpeedToPos
0000DD62                            
0000DD62                            ; ---------------------------------------------------------------------------
0000DD62                            ; Subroutine to	display	a sprite/object, when a0 is the	object RAM
0000DD62                            ; ---------------------------------------------------------------------------
0000DD62                            
0000DD62                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000DD62                            
0000DD62                            
0000DD62                            DisplaySprite:
0000DD62 43F8 AC00                  		lea	($FFFFAC00).w,a1
0000DD66 3028 0018                  		move.w	$18(a0),d0
0000DD6A E248                       		lsr.w	#1,d0
0000DD6C 0240 0380                  		andi.w	#$380,d0
0000DD70 D2C0                       		adda.w	d0,a1
0000DD72 0C51 007E                  		cmpi.w	#$7E,(a1)
0000DD76 6400                       		bcc.s	locret_D620
0000DD78 5451                       		addq.w	#2,(a1)
0000DD7A D2D1                       		adda.w	(a1),a1
0000DD7C 3288                       		move.w	a0,(a1)
0000DD7E                            
0000DD7E                            locret_D620:
0000DD7E 4E75                       		rts	
0000DD80                            ; End of function DisplaySprite
0000DD80                            
0000DD80                            ; ---------------------------------------------------------------------------
0000DD80                            ; Subroutine to	display	a 2nd sprite/object, when a1 is	the object RAM
0000DD80                            ; ---------------------------------------------------------------------------
0000DD80                            
0000DD80                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000DD80                            
0000DD80                            
0000DD80                            DisplaySprite2:
0000DD80 45F8 AC00                  		lea	($FFFFAC00).w,a2
0000DD84 3029 0018                  		move.w	$18(a1),d0
0000DD88 E248                       		lsr.w	#1,d0
0000DD8A 0240 0380                  		andi.w	#$380,d0
0000DD8E D4C0                       		adda.w	d0,a2
0000DD90 0C52 007E                  		cmpi.w	#$7E,(a2)
0000DD94 6400                       		bcc.s	locret_D63E
0000DD96 5452                       		addq.w	#2,(a2)
0000DD98 D4D2                       		adda.w	(a2),a2
0000DD9A 3489                       		move.w	a1,(a2)
0000DD9C                            
0000DD9C                            locret_D63E:
0000DD9C 4E75                       		rts	
0000DD9E                            ; End of function DisplaySprite2
0000DD9E                            
0000DD9E                            ; ---------------------------------------------------------------------------
0000DD9E                            ; Subroutine to	delete an object
0000DD9E                            ; ---------------------------------------------------------------------------
0000DD9E                            
0000DD9E                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000DD9E                            
0000DD9E                            
0000DD9E                            DeleteObject:
0000DD9E 2248                       		movea.l	a0,a1
0000DDA0                            
0000DDA0                            DeleteObject2:
0000DDA0 7200                       		moveq	#0,d1
0000DDA2 700F                       		moveq	#$F,d0
0000DDA4                            
0000DDA4                            loc_D646:
0000DDA4 22C1                       		move.l	d1,(a1)+	; clear	the object RAM
0000DDA6 51C8 FFFC                  		dbf	d0,loc_D646	; repeat $F times (length of object RAM)
0000DDAA 4E75                       		rts	
0000DDAC                            ; End of function DeleteObject
0000DDAC                            
0000DDAC                            ; ===========================================================================
0000DDAC 0000 0000                  BldSpr_ScrPos:	dc.l 0			; blank
0000DDB0 00FF F700                  		dc.l $FFF700		; main screen x-position
0000DDB4 00FF F708                  		dc.l $FFF708		; background x-position	1
0000DDB8 00FF F718                  		dc.l $FFF718		; background x-position	2
0000DDBC                            ; ---------------------------------------------------------------------------
0000DDBC                            ; Subroutine to	convert	mappings (etc) to proper Megadrive sprites
0000DDBC                            ; ---------------------------------------------------------------------------
0000DDBC                            
0000DDBC                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000DDBC                            
0000DDBC                            
0000DDBC                            BuildSprites:				; XREF: TitleScreen; et al
0000DDBC 45F8 F800                  		lea	($FFFFF800).w,a2 ; set address for sprite table
0000DDC0 7A00                       		moveq	#0,d5
0000DDC2 49F8 AC00                  		lea	($FFFFAC00).w,a4
0000DDC6 7E07                       		moveq	#7,d7
0000DDC8                            
0000DDC8                            loc_D66A:
0000DDC8 4A54                       		tst.w	(a4)
0000DDCA 6700 0000                  		beq.w	loc_D72E
0000DDCE 7C02                       		moveq	#2,d6
0000DDD0                            
0000DDD0                            loc_D672:
0000DDD0 3074 6000                  		movea.w	(a4,d6.w),a0
0000DDD4 4A10                       		tst.b	(a0)
0000DDD6 6700 0000                  		beq.w	loc_D726
0000DDDA 08A8 0007 0001             		bclr	#7,1(a0)
0000DDE0 1028 0001                  		move.b	1(a0),d0
0000DDE4 1800                       		move.b	d0,d4
0000DDE6 0240 000C                  		andi.w	#$C,d0
0000DDEA 6700                       		beq.s	loc_D6DE
0000DDEC 227B 00BE                  		movea.l	BldSpr_ScrPos(pc,d0.w),a1
0000DDF0 7000                       		moveq	#0,d0
0000DDF2 1028 0019                  		move.b	$19(a0),d0
0000DDF6 3628 0008                  		move.w	8(a0),d3
0000DDFA 9651                       		sub.w	(a1),d3
0000DDFC 3203                       		move.w	d3,d1
0000DDFE D240                       		add.w	d0,d1
0000DE00 6B00 0000                  		bmi.w	loc_D726
0000DE04 3203                       		move.w	d3,d1
0000DE06 9240                       		sub.w	d0,d1
0000DE08 0C41 0140                  		cmpi.w	#$140,d1
0000DE0C 6C00                       		bge.s	loc_D726
0000DE0E 0643 0080                  		addi.w	#$80,d3
0000DE12 0804 0004                  		btst	#4,d4
0000DE16 6700                       		beq.s	loc_D6E8
0000DE18 7000                       		moveq	#0,d0
0000DE1A 1028 0016                  		move.b	$16(a0),d0
0000DE1E 3428 000C                  		move.w	$C(a0),d2
0000DE22 9469 0004                  		sub.w	4(a1),d2
0000DE26 3202                       		move.w	d2,d1
0000DE28 D240                       		add.w	d0,d1
0000DE2A 6B00                       		bmi.s	loc_D726
0000DE2C 3202                       		move.w	d2,d1
0000DE2E 9240                       		sub.w	d0,d1
0000DE30 0C41 00E0                  		cmpi.w	#$E0,d1
0000DE34 6C00                       		bge.s	loc_D726
0000DE36 0642 0080                  		addi.w	#$80,d2
0000DE3A 6000                       		bra.s	loc_D700
0000DE3C                            ; ===========================================================================
0000DE3C                            
0000DE3C                            loc_D6DE:
0000DE3C 3428 000A                  		move.w	$A(a0),d2
0000DE40 3628 0008                  		move.w	8(a0),d3
0000DE44 6000                       		bra.s	loc_D700
0000DE46                            ; ===========================================================================
0000DE46                            
0000DE46                            loc_D6E8:
0000DE46 3428 000C                  		move.w	$C(a0),d2
0000DE4A 9469 0004                  		sub.w	4(a1),d2
0000DE4E 0642 0080                  		addi.w	#$80,d2
0000DE52 0C42 0060                  		cmpi.w	#$60,d2
0000DE56 6500                       		bcs.s	loc_D726
0000DE58 0C42 0180                  		cmpi.w	#$180,d2
0000DE5C 6400                       		bcc.s	loc_D726
0000DE5E                            
0000DE5E                            loc_D700:
0000DE5E 2268 0004                  		movea.l	4(a0),a1
0000DE62 7200                       		moveq	#0,d1
0000DE64 0804 0005                  		btst	#5,d4
0000DE68 6600                       		bne.s	loc_D71C
0000DE6A 1228 001A                  		move.b	$1A(a0),d1
0000DE6E D201                       		add.b	d1,d1
0000DE70 D2F1 1000                  		adda.w	(a1,d1.w),a1
0000DE74 1219                       		move.b	(a1)+,d1
0000DE76 5301                       		subq.b	#1,d1
0000DE78 6B00                       		bmi.s	loc_D720
0000DE7A                            
0000DE7A                            loc_D71C:
0000DE7A 6100 0000                  		bsr.w	sub_D750
0000DE7E                            
0000DE7E                            loc_D720:
0000DE7E 08E8 0007 0001             		bset	#7,1(a0)
0000DE84                            
0000DE84                            loc_D726:
0000DE84 5446                       		addq.w	#2,d6
0000DE86 5554                       		subq.w	#2,(a4)
0000DE88 6600 FF46                  		bne.w	loc_D672
0000DE8C                            
0000DE8C                            loc_D72E:
0000DE8C 49EC 0080                  		lea	$80(a4),a4
0000DE90 51CF FF36                  		dbf	d7,loc_D66A
0000DE94 11C5 F62C                  		move.b	d5,($FFFFF62C).w
0000DE98 0C05 0050                  		cmpi.b	#$50,d5
0000DE9C 6700                       		beq.s	loc_D748
0000DE9E 24BC 0000 0000             		move.l	#0,(a2)
0000DEA4 4E75                       		rts	
0000DEA6                            ; ===========================================================================
0000DEA6                            
0000DEA6                            loc_D748:
0000DEA6 157C 0000 FFFB             		move.b	#0,-5(a2)
0000DEAC 4E75                       		rts	
0000DEAE                            ; End of function BuildSprites
0000DEAE                            
0000DEAE                            
0000DEAE                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000DEAE                            
0000DEAE                            
0000DEAE                            sub_D750:				; XREF: BuildSprites
0000DEAE 3668 0002                  		movea.w	2(a0),a3
0000DEB2 0804 0000                  		btst	#0,d4
0000DEB6 6600                       		bne.s	loc_D796
0000DEB8 0804 0001                  		btst	#1,d4
0000DEBC 6600 0000                  		bne.w	loc_D7E4
0000DEC0                            ; End of function sub_D750
0000DEC0                            
0000DEC0                            
0000DEC0                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000DEC0                            
0000DEC0                            
0000DEC0                            sub_D762:				; XREF: sub_D762; SS_ShowLayout
0000DEC0 0C05 0050                  		cmpi.b	#$50,d5
0000DEC4 6700                       		beq.s	locret_D794
0000DEC6 1019                       		move.b	(a1)+,d0
0000DEC8 4880                       		ext.w	d0
0000DECA D042                       		add.w	d2,d0
0000DECC 34C0                       		move.w	d0,(a2)+
0000DECE 14D9                       		move.b	(a1)+,(a2)+
0000DED0 5205                       		addq.b	#1,d5
0000DED2 14C5                       		move.b	d5,(a2)+
0000DED4 1019                       		move.b	(a1)+,d0
0000DED6 E148                       		lsl.w	#8,d0
0000DED8 1019                       		move.b	(a1)+,d0
0000DEDA D04B                       		add.w	a3,d0
0000DEDC 34C0                       		move.w	d0,(a2)+
0000DEDE 1019                       		move.b	(a1)+,d0
0000DEE0 4880                       		ext.w	d0
0000DEE2 D043                       		add.w	d3,d0
0000DEE4 0240 01FF                  		andi.w	#$1FF,d0
0000DEE8 6600                       		bne.s	loc_D78E
0000DEEA 5240                       		addq.w	#1,d0
0000DEEC                            
0000DEEC                            loc_D78E:
0000DEEC 34C0                       		move.w	d0,(a2)+
0000DEEE 51C9 FFD0                  		dbf	d1,sub_D762
0000DEF2                            
0000DEF2                            locret_D794:
0000DEF2 4E75                       		rts	
0000DEF4                            ; End of function sub_D762
0000DEF4                            
0000DEF4                            ; ===========================================================================
0000DEF4                            
0000DEF4                            loc_D796:
0000DEF4 0804 0001                  		btst	#1,d4
0000DEF8 6600 0000                  		bne.w	loc_D82A
0000DEFC                            
0000DEFC                            loc_D79E:
0000DEFC 0C05 0050                  		cmpi.b	#$50,d5
0000DF00 6700                       		beq.s	locret_D7E2
0000DF02 1019                       		move.b	(a1)+,d0
0000DF04 4880                       		ext.w	d0
0000DF06 D042                       		add.w	d2,d0
0000DF08 34C0                       		move.w	d0,(a2)+
0000DF0A 1819                       		move.b	(a1)+,d4
0000DF0C 14C4                       		move.b	d4,(a2)+
0000DF0E 5205                       		addq.b	#1,d5
0000DF10 14C5                       		move.b	d5,(a2)+
0000DF12 1019                       		move.b	(a1)+,d0
0000DF14 E148                       		lsl.w	#8,d0
0000DF16 1019                       		move.b	(a1)+,d0
0000DF18 D04B                       		add.w	a3,d0
0000DF1A 0A40 0800                  		eori.w	#$800,d0
0000DF1E 34C0                       		move.w	d0,(a2)+
0000DF20 1019                       		move.b	(a1)+,d0
0000DF22 4880                       		ext.w	d0
0000DF24 4440                       		neg.w	d0
0000DF26 D804                       		add.b	d4,d4
0000DF28 0244 0018                  		andi.w	#$18,d4
0000DF2C 5044                       		addq.w	#8,d4
0000DF2E 9044                       		sub.w	d4,d0
0000DF30 D043                       		add.w	d3,d0
0000DF32 0240 01FF                  		andi.w	#$1FF,d0
0000DF36 6600                       		bne.s	loc_D7DC
0000DF38 5240                       		addq.w	#1,d0
0000DF3A                            
0000DF3A                            loc_D7DC:
0000DF3A 34C0                       		move.w	d0,(a2)+
0000DF3C 51C9 FFBE                  		dbf	d1,loc_D79E
0000DF40                            
0000DF40                            locret_D7E2:
0000DF40 4E75                       		rts	
0000DF42                            ; ===========================================================================
0000DF42                            
0000DF42                            loc_D7E4:				; XREF: sub_D750
0000DF42 0C05 0050                  		cmpi.b	#$50,d5
0000DF46 6700                       		beq.s	locret_D828
0000DF48 1019                       		move.b	(a1)+,d0
0000DF4A 1811                       		move.b	(a1),d4
0000DF4C 4880                       		ext.w	d0
0000DF4E 4440                       		neg.w	d0
0000DF50 E70C                       		lsl.b	#3,d4
0000DF52 0244 0018                  		andi.w	#$18,d4
0000DF56 5044                       		addq.w	#8,d4
0000DF58 9044                       		sub.w	d4,d0
0000DF5A D042                       		add.w	d2,d0
0000DF5C 34C0                       		move.w	d0,(a2)+
0000DF5E 14D9                       		move.b	(a1)+,(a2)+
0000DF60 5205                       		addq.b	#1,d5
0000DF62 14C5                       		move.b	d5,(a2)+
0000DF64 1019                       		move.b	(a1)+,d0
0000DF66 E148                       		lsl.w	#8,d0
0000DF68 1019                       		move.b	(a1)+,d0
0000DF6A D04B                       		add.w	a3,d0
0000DF6C 0A40 1000                  		eori.w	#$1000,d0
0000DF70 34C0                       		move.w	d0,(a2)+
0000DF72 1019                       		move.b	(a1)+,d0
0000DF74 4880                       		ext.w	d0
0000DF76 D043                       		add.w	d3,d0
0000DF78 0240 01FF                  		andi.w	#$1FF,d0
0000DF7C 6600                       		bne.s	loc_D822
0000DF7E 5240                       		addq.w	#1,d0
0000DF80                            
0000DF80                            loc_D822:
0000DF80 34C0                       		move.w	d0,(a2)+
0000DF82 51C9 FFBE                  		dbf	d1,loc_D7E4
0000DF86                            
0000DF86                            locret_D828:
0000DF86 4E75                       		rts	
0000DF88                            ; ===========================================================================
0000DF88                            
0000DF88                            loc_D82A:
0000DF88 0C05 0050                  		cmpi.b	#$50,d5
0000DF8C 6700                       		beq.s	locret_D87C
0000DF8E 1019                       		move.b	(a1)+,d0
0000DF90 1811                       		move.b	(a1),d4
0000DF92 4880                       		ext.w	d0
0000DF94 4440                       		neg.w	d0
0000DF96 E70C                       		lsl.b	#3,d4
0000DF98 0244 0018                  		andi.w	#$18,d4
0000DF9C 5044                       		addq.w	#8,d4
0000DF9E 9044                       		sub.w	d4,d0
0000DFA0 D042                       		add.w	d2,d0
0000DFA2 34C0                       		move.w	d0,(a2)+
0000DFA4 1819                       		move.b	(a1)+,d4
0000DFA6 14C4                       		move.b	d4,(a2)+
0000DFA8 5205                       		addq.b	#1,d5
0000DFAA 14C5                       		move.b	d5,(a2)+
0000DFAC 1019                       		move.b	(a1)+,d0
0000DFAE E148                       		lsl.w	#8,d0
0000DFB0 1019                       		move.b	(a1)+,d0
0000DFB2 D04B                       		add.w	a3,d0
0000DFB4 0A40 1800                  		eori.w	#$1800,d0
0000DFB8 34C0                       		move.w	d0,(a2)+
0000DFBA 1019                       		move.b	(a1)+,d0
0000DFBC 4880                       		ext.w	d0
0000DFBE 4440                       		neg.w	d0
0000DFC0 D804                       		add.b	d4,d4
0000DFC2 0244 0018                  		andi.w	#$18,d4
0000DFC6 5044                       		addq.w	#8,d4
0000DFC8 9044                       		sub.w	d4,d0
0000DFCA D043                       		add.w	d3,d0
0000DFCC 0240 01FF                  		andi.w	#$1FF,d0
0000DFD0 6600                       		bne.s	loc_D876
0000DFD2 5240                       		addq.w	#1,d0
0000DFD4                            
0000DFD4                            loc_D876:
0000DFD4 34C0                       		move.w	d0,(a2)+
0000DFD6 51C9 FFB0                  		dbf	d1,loc_D82A
0000DFDA                            
0000DFDA                            locret_D87C:
0000DFDA 4E75                       		rts	
0000DFDC                            ; ---------------------------------------------------------------------------
0000DFDC                            ; Subroutine to	check if an object is on the screen
0000DFDC                            ; ---------------------------------------------------------------------------
0000DFDC                            
0000DFDC                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000DFDC                            
0000DFDC                            
0000DFDC                            ChkObjOnScreen:
0000DFDC 3028 0008                  		move.w	8(a0),d0	; get object x-position
0000DFE0 9078 F700                  		sub.w	($FFFFF700).w,d0 ; subtract screen x-position
0000DFE4 6B00                       		bmi.s	NotOnScreen
0000DFE6 0C40 0140                  		cmpi.w	#320,d0		; is object on the screen?
0000DFEA 6C00                       		bge.s	NotOnScreen	; if not, branch
0000DFEC                            
0000DFEC 3228 000C                  		move.w	$C(a0),d1	; get object y-position
0000DFF0 9278 F704                  		sub.w	($FFFFF704).w,d1 ; subtract screen y-position
0000DFF4 6B00                       		bmi.s	NotOnScreen
0000DFF6 0C41 00E0                  		cmpi.w	#224,d1		; is object on the screen?
0000DFFA 6C00                       		bge.s	NotOnScreen	; if not, branch
0000DFFC                            
0000DFFC 7000                       		moveq	#0,d0		; set flag to 0
0000DFFE 4E75                       		rts	
0000E000                            ; ===========================================================================
0000E000                            
0000E000                            NotOnScreen:				; XREF: ChkObjOnScreen
0000E000 7001                       		moveq	#1,d0		; set flag to 1
0000E002 4E75                       		rts	
0000E004                            ; End of function ChkObjOnScreen
0000E004                            
0000E004                            
0000E004                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000E004                            
0000E004                            
0000E004                            ChkObjOnScreen2:
0000E004 7200                       		moveq	#0,d1
0000E006 1228 0019                  		move.b	$19(a0),d1
0000E00A 3028 0008                  		move.w	8(a0),d0
0000E00E 9078 F700                  		sub.w	($FFFFF700).w,d0
0000E012 D041                       		add.w	d1,d0
0000E014 6B00                       		bmi.s	NotOnScreen2
0000E016 D241                       		add.w	d1,d1
0000E018 9041                       		sub.w	d1,d0
0000E01A 0C40 0140                  		cmpi.w	#320,d0
0000E01E 6C00                       		bge.s	NotOnScreen2
0000E020                            
0000E020 3228 000C                  		move.w	$C(a0),d1
0000E024 9278 F704                  		sub.w	($FFFFF704).w,d1
0000E028 6B00                       		bmi.s	NotOnScreen2
0000E02A 0C41 00E0                  		cmpi.w	#224,d1
0000E02E 6C00                       		bge.s	NotOnScreen2
0000E030                            
0000E030 7000                       		moveq	#0,d0
0000E032 4E75                       		rts	
0000E034                            ; ===========================================================================
0000E034                            
0000E034                            NotOnScreen2:				; XREF: ChkObjOnScreen2
0000E034 7001                       		moveq	#1,d0
0000E036 4E75                       		rts	
0000E038                            ; End of function ChkObjOnScreen2
0000E038                            
0000E038                            ; ---------------------------------------------------------------------------
0000E038                            ; Subroutine to	load a level's objects
0000E038                            ; ---------------------------------------------------------------------------
0000E038                            
0000E038                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000E038                            
0000E038                            
0000E038                            ObjPosLoad:				; XREF: Level; et al
0000E038 7000                       		moveq	#0,d0
0000E03A 1038 F76C                  		move.b	($FFFFF76C).w,d0
0000E03E 303B 0000                  		move.w	OPL_Index(pc,d0.w),d0
0000E042 4EFB 0000                  		jmp	OPL_Index(pc,d0.w)
0000E046                            ; End of function ObjPosLoad
0000E046                            
0000E046                            ; ===========================================================================
0000E046 0000                       OPL_Index:	dc.w OPL_Main-OPL_Index
0000E048 0000                       		dc.w OPL_Next-OPL_Index
0000E04A                            ; ===========================================================================
0000E04A                            
0000E04A                            OPL_Main:				; XREF: OPL_Index
0000E04A 5438 F76C                  		addq.b	#2,($FFFFF76C).w
0000E04E 3038 FE10                  		move.w	($FFFFFE10).w,d0
0000E052 ED08                       		lsl.b	#6,d0
0000E054 E848                       		lsr.w	#4,d0
0000E056 41F9 0000 0000             		lea	(ObjPos_Index).l,a0
0000E05C 2248                       		movea.l	a0,a1
0000E05E D0F0 0000                  		adda.w	(a0,d0.w),a0
0000E062 21C8 F770                  		move.l	a0,($FFFFF770).w
0000E066 21C8 F774                  		move.l	a0,($FFFFF774).w
0000E06A D2F1 0002                  		adda.w	2(a1,d0.w),a1
0000E06E 21C9 F778                  		move.l	a1,($FFFFF778).w
0000E072 21C9 F77C                  		move.l	a1,($FFFFF77C).w
0000E076 45F8 FC00                  		lea	($FFFFFC00).w,a2
0000E07A 34FC 0101                  		move.w	#$101,(a2)+
0000E07E 303C 005E                  		move.w	#$5E,d0
0000E082                            
0000E082                            OPL_ClrList:
0000E082 429A                       		clr.l	(a2)+
0000E084 51C8 FFFC                  		dbf	d0,OPL_ClrList	; clear	pre-destroyed object list
0000E088                            
0000E088 45F8 FC00                  		lea	($FFFFFC00).w,a2
0000E08C 7400                       		moveq	#0,d2
0000E08E 3C38 F700                  		move.w	($FFFFF700).w,d6
0000E092 0446 0080                  		subi.w	#$80,d6
0000E096 6400                       		bcc.s	loc_D93C
0000E098 7C00                       		moveq	#0,d6
0000E09A                            
0000E09A                            loc_D93C:
0000E09A 0246 FF80                  		andi.w	#$FF80,d6
0000E09E 2078 F770                  		movea.l	($FFFFF770).w,a0
0000E0A2                            
0000E0A2                            loc_D944:
0000E0A2 BC50                       		cmp.w	(a0),d6
0000E0A4 6300                       		bls.s	loc_D956
0000E0A6 4A28 0004                  		tst.b	4(a0)
0000E0AA 6A00                       		bpl.s	loc_D952
0000E0AC 1412                       		move.b	(a2),d2
0000E0AE 5212                       		addq.b	#1,(a2)
0000E0B0                            
0000E0B0                            loc_D952:
0000E0B0 5C48                       		addq.w	#6,a0
0000E0B2 60EE                       		bra.s	loc_D944
0000E0B4                            ; ===========================================================================
0000E0B4                            
0000E0B4                            loc_D956:
0000E0B4 21C8 F770                  		move.l	a0,($FFFFF770).w
0000E0B8 2078 F774                  		movea.l	($FFFFF774).w,a0
0000E0BC 0446 0080                  		subi.w	#$80,d6
0000E0C0 6500                       		bcs.s	loc_D976
0000E0C2                            
0000E0C2                            loc_D964:
0000E0C2 BC50                       		cmp.w	(a0),d6
0000E0C4 6300                       		bls.s	loc_D976
0000E0C6 4A28 0004                  		tst.b	4(a0)
0000E0CA 6A00                       		bpl.s	loc_D972
0000E0CC 522A 0001                  		addq.b	#1,1(a2)
0000E0D0                            
0000E0D0                            loc_D972:
0000E0D0 5C48                       		addq.w	#6,a0
0000E0D2 60EE                       		bra.s	loc_D964
0000E0D4                            ; ===========================================================================
0000E0D4                            
0000E0D4                            loc_D976:
0000E0D4 21C8 F774                  		move.l	a0,($FFFFF774).w
0000E0D8 31FC FFFF F76E             		move.w	#-1,($FFFFF76E).w
0000E0DE                            
0000E0DE                            OPL_Next:				; XREF: OPL_Index
0000E0DE 45F8 FC00                  		lea	($FFFFFC00).w,a2
0000E0E2 7400                       		moveq	#0,d2
0000E0E4 3C38 F700                  		move.w	($FFFFF700).w,d6
0000E0E8 0246 FF80                  		andi.w	#$FF80,d6
0000E0EC BC78 F76E                  		cmp.w	($FFFFF76E).w,d6
0000E0F0 6700 0000                  		beq.w	locret_DA3A
0000E0F4 6C00                       		bge.s	loc_D9F6
0000E0F6 31C6 F76E                  		move.w	d6,($FFFFF76E).w
0000E0FA 2078 F774                  		movea.l	($FFFFF774).w,a0
0000E0FE 0446 0080                  		subi.w	#$80,d6
0000E102 6500                       		bcs.s	loc_D9D2
0000E104                            
0000E104                            loc_D9A6:
0000E104 BC68 FFFA                  		cmp.w	-6(a0),d6
0000E108 6C00                       		bge.s	loc_D9D2
0000E10A 5D48                       		subq.w	#6,a0
0000E10C 4A28 0004                  		tst.b	4(a0)
0000E110 6A00                       		bpl.s	loc_D9BC
0000E112 532A 0001                  		subq.b	#1,1(a2)
0000E116 142A 0001                  		move.b	1(a2),d2
0000E11A                            
0000E11A                            loc_D9BC:
0000E11A 6100 0000                  		bsr.w	loc_DA3C
0000E11E 6600                       		bne.s	loc_D9C6
0000E120 5D48                       		subq.w	#6,a0
0000E122 60E0                       		bra.s	loc_D9A6
0000E124                            ; ===========================================================================
0000E124                            
0000E124                            loc_D9C6:
0000E124 4A28 0004                  		tst.b	4(a0)
0000E128 6A00                       		bpl.s	loc_D9D0
0000E12A 522A 0001                  		addq.b	#1,1(a2)
0000E12E                            
0000E12E                            loc_D9D0:
0000E12E 5C48                       		addq.w	#6,a0
0000E130                            
0000E130                            loc_D9D2:
0000E130 21C8 F774                  		move.l	a0,($FFFFF774).w
0000E134 2078 F770                  		movea.l	($FFFFF770).w,a0
0000E138 0646 0300                  		addi.w	#$300,d6
0000E13C                            
0000E13C                            loc_D9DE:
0000E13C BC68 FFFA                  		cmp.w	-6(a0),d6
0000E140 6E00                       		bgt.s	loc_D9F0
0000E142 4A28 FFFE                  		tst.b	-2(a0)
0000E146 6A00                       		bpl.s	loc_D9EC
0000E148 5312                       		subq.b	#1,(a2)
0000E14A                            
0000E14A                            loc_D9EC:
0000E14A 5D48                       		subq.w	#6,a0
0000E14C 60EE                       		bra.s	loc_D9DE
0000E14E                            ; ===========================================================================
0000E14E                            
0000E14E                            loc_D9F0:
0000E14E 21C8 F770                  		move.l	a0,($FFFFF770).w
0000E152 4E75                       		rts	
0000E154                            ; ===========================================================================
0000E154                            
0000E154                            loc_D9F6:
0000E154 31C6 F76E                  		move.w	d6,($FFFFF76E).w
0000E158 2078 F770                  		movea.l	($FFFFF770).w,a0
0000E15C 0646 0280                  		addi.w	#$280,d6
0000E160                            
0000E160                            loc_DA02:
0000E160 BC50                       		cmp.w	(a0),d6
0000E162 6300                       		bls.s	loc_DA16
0000E164 4A28 0004                  		tst.b	4(a0)
0000E168 6A00                       		bpl.s	loc_DA10
0000E16A 1412                       		move.b	(a2),d2
0000E16C 5212                       		addq.b	#1,(a2)
0000E16E                            
0000E16E                            loc_DA10:
0000E16E 6100 0000                  		bsr.w	loc_DA3C
0000E172 67EC                       		beq.s	loc_DA02
0000E174                            
0000E174                            loc_DA16:
0000E174 21C8 F770                  		move.l	a0,($FFFFF770).w
0000E178 2078 F774                  		movea.l	($FFFFF774).w,a0
0000E17C 0446 0300                  		subi.w	#$300,d6
0000E180 6500                       		bcs.s	loc_DA36
0000E182                            
0000E182                            loc_DA24:
0000E182 BC50                       		cmp.w	(a0),d6
0000E184 6300                       		bls.s	loc_DA36
0000E186 4A28 0004                  		tst.b	4(a0)
0000E18A 6A00                       		bpl.s	loc_DA32
0000E18C 522A 0001                  		addq.b	#1,1(a2)
0000E190                            
0000E190                            loc_DA32:
0000E190 5C48                       		addq.w	#6,a0
0000E192 60EE                       		bra.s	loc_DA24
0000E194                            ; ===========================================================================
0000E194                            
0000E194                            loc_DA36:
0000E194 21C8 F774                  		move.l	a0,($FFFFF774).w
0000E198                            
0000E198                            locret_DA3A:
0000E198 4E75                       		rts	
0000E19A                            ; ===========================================================================
0000E19A                            
0000E19A                            loc_DA3C:
0000E19A 4A28 0004                  		tst.b	4(a0)
0000E19E 6A00                       		bpl.s	OPL_MakeItem
0000E1A0 08F2 0007 2002             		bset	#7,2(a2,d2.w)
0000E1A6 6700                       		beq.s	OPL_MakeItem
0000E1A8 5C48                       		addq.w	#6,a0
0000E1AA 7000                       		moveq	#0,d0
0000E1AC 4E75                       		rts	
0000E1AE                            ; ===========================================================================
0000E1AE                            
0000E1AE                            OPL_MakeItem:
0000E1AE 6100 0000                  		bsr.w	SingleObjLoad
0000E1B2 6600                       		bne.s	locret_DA8A
0000E1B4 3358 0008                  		move.w	(a0)+,8(a1)
0000E1B8 3018                       		move.w	(a0)+,d0
0000E1BA 3200                       		move.w	d0,d1
0000E1BC 0240 0FFF                  		andi.w	#$FFF,d0
0000E1C0 3340 000C                  		move.w	d0,$C(a1)
0000E1C4 E559                       		rol.w	#2,d1
0000E1C6 0201 0003                  		andi.b	#3,d1
0000E1CA 1341 0001                  		move.b	d1,1(a1)
0000E1CE 1341 0022                  		move.b	d1,$22(a1)
0000E1D2 1018                       		move.b	(a0)+,d0
0000E1D4 6A00                       		bpl.s	loc_DA80
0000E1D6 0200 007F                  		andi.b	#$7F,d0
0000E1DA 1342 0023                  		move.b	d2,$23(a1)
0000E1DE                            
0000E1DE                            loc_DA80:
0000E1DE 1280                       		move.b	d0,0(a1)
0000E1E0 1358 0028                  		move.b	(a0)+,$28(a1)
0000E1E4 7000                       		moveq	#0,d0
0000E1E6                            
0000E1E6                            locret_DA8A:
0000E1E6 4E75                       		rts	
0000E1E8                            ; ---------------------------------------------------------------------------
0000E1E8                            ; Single object	loading	subroutine
0000E1E8                            ; ---------------------------------------------------------------------------
0000E1E8                            
0000E1E8                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000E1E8                            
0000E1E8                            
0000E1E8                            SingleObjLoad:
0000E1E8 43F8 D800                  		lea	($FFFFD800).w,a1 ; start address for object RAM
0000E1EC 303C 005F                  		move.w	#$5F,d0
0000E1F0                            
0000E1F0                            loc_DA94:
0000E1F0 4A11                       		tst.b	(a1)		; is object RAM	slot empty?
0000E1F2 6700                       		beq.s	locret_DAA0	; if yes, branch
0000E1F4 43E9 0040                  		lea	$40(a1),a1	; goto next object RAM slot
0000E1F8 51C8 FFF6                  		dbf	d0,loc_DA94	; repeat $5F times
0000E1FC                            
0000E1FC                            locret_DAA0:
0000E1FC 4E75                       		rts	
0000E1FE                            ; End of function SingleObjLoad
0000E1FE                            
0000E1FE                            
0000E1FE                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000E1FE                            
0000E1FE                            
0000E1FE                            SingleObjLoad2:
0000E1FE 2248                       		movea.l	a0,a1
0000E200 303C F000                  		move.w	#-$1000,d0
0000E204 9048                       		sub.w	a0,d0
0000E206 EC48                       		lsr.w	#6,d0
0000E208 5340                       		subq.w	#1,d0
0000E20A 6500                       		bcs.s	locret_DABC
0000E20C                            
0000E20C                            loc_DAB0:
0000E20C 4A11                       		tst.b	(a1)
0000E20E 6700                       		beq.s	locret_DABC
0000E210 43E9 0040                  		lea	$40(a1),a1
0000E214 51C8 FFF6                  		dbf	d0,loc_DAB0
0000E218                            
0000E218                            locret_DABC:
0000E218 4E75                       		rts	
0000E21A                            ; End of function SingleObjLoad2
0000E21A                            
0000E21A                            ; ===========================================================================
0000E21A                            ; ---------------------------------------------------------------------------
0000E21A                            ; Object 41 - springs
0000E21A                            ; ---------------------------------------------------------------------------
0000E21A                            
0000E21A                            Obj41:					; XREF: Obj_Index
0000E21A 7000                       		moveq	#0,d0
0000E21C 1028 0024                  		move.b	$24(a0),d0
0000E220 323B 0000                  		move.w	Obj41_Index(pc,d0.w),d1
0000E224 4EBB 1000                  		jsr	Obj41_Index(pc,d1.w)
0000E228 6100 FB38                  		bsr.w	DisplaySprite
0000E22C 3028 0008                  		move.w	8(a0),d0
0000E230 0240 FF80                  		andi.w	#$FF80,d0
0000E234 3238 F700                  		move.w	($FFFFF700).w,d1
0000E238 0441 0080                  		subi.w	#$80,d1
0000E23C 0241 FF80                  		andi.w	#$FF80,d1
0000E240 9041                       		sub.w	d1,d0
0000E242 0C40 0280                  		cmpi.w	#$280,d0
0000E246 6200 FB56                  		bhi.w	DeleteObject
0000E24A 4E75                       		rts	
0000E24C                            ; ===========================================================================
0000E24C 0000                       Obj41_Index:	dc.w Obj41_Main-Obj41_Index
0000E24E 0000                       		dc.w Obj41_Up-Obj41_Index
0000E250 0000                       		dc.w Obj41_AniUp-Obj41_Index
0000E252 0000                       		dc.w Obj41_ResetUp-Obj41_Index
0000E254 0000                       		dc.w Obj41_LR-Obj41_Index
0000E256 0000                       		dc.w Obj41_AniLR-Obj41_Index
0000E258 0000                       		dc.w Obj41_ResetLR-Obj41_Index
0000E25A 0000                       		dc.w Obj41_Dwn-Obj41_Index
0000E25C 0000                       		dc.w Obj41_AniDwn-Obj41_Index
0000E25E 0000                       		dc.w Obj41_ResetDwn-Obj41_Index
0000E260                            
0000E260 F000                       Obj41_Powers:	dc.w -$1000		; power	of red spring
0000E262 F600                       		dc.w -$A00		; power	of yellow spring
0000E264                            ; ===========================================================================
0000E264                            
0000E264                            Obj41_Main:				; XREF: Obj41_Index
0000E264 5428 0024                  		addq.b	#2,$24(a0)
0000E268 217C 0000 0000 0004        		move.l	#Map_obj41,4(a0)
0000E270 317C 0523 0002             		move.w	#$523,2(a0)
0000E276 0028 0004 0001             		ori.b	#4,1(a0)
0000E27C 117C 0010 0019             		move.b	#$10,$19(a0)
0000E282 117C 0004 0018             		move.b	#4,$18(a0)
0000E288 1028 0028                  		move.b	$28(a0),d0
0000E28C 0800 0004                  		btst	#4,d0		; does the spring face left/right?
0000E290 6700                       		beq.s	loc_DB54	; if not, branch
0000E292 117C 0008 0024             		move.b	#8,$24(a0)	; use "Obj41_LR" routine
0000E298 117C 0001 001C             		move.b	#1,$1C(a0)
0000E29E 117C 0003 001A             		move.b	#3,$1A(a0)
0000E2A4 317C 0533 0002             		move.w	#$533,2(a0)
0000E2AA 117C 0008 0019             		move.b	#8,$19(a0)
0000E2B0                            
0000E2B0                            loc_DB54:
0000E2B0 0800 0005                  		btst	#5,d0		; does the spring face downwards?
0000E2B4 6700                       		beq.s	loc_DB66	; if not, branch
0000E2B6 117C 000E 0024             		move.b	#$E,$24(a0)	; use "Obj41_Dwn" routine
0000E2BC 08E8 0001 0022             		bset	#1,$22(a0)
0000E2C2                            
0000E2C2                            loc_DB66:
0000E2C2 0800 0001                  		btst	#1,d0
0000E2C6 6700                       		beq.s	loc_DB72
0000E2C8 08E8 0005 0002             		bset	#5,2(a0)
0000E2CE                            
0000E2CE                            loc_DB72:
0000E2CE 0240 000F                  		andi.w	#$F,d0
0000E2D2 317B 008C 0030             		move.w	Obj41_Powers(pc,d0.w),$30(a0)
0000E2D8 4E75                       		rts	
0000E2DA                            ; ===========================================================================
0000E2DA                            
0000E2DA                            Obj41_Up:				; XREF: Obj41_Index
0000E2DA 323C 001B                  		move.w	#$1B,d1
0000E2DE 343C 0008                  		move.w	#8,d2
0000E2E2 363C 0010                  		move.w	#$10,d3
0000E2E6 3828 0008                  		move.w	8(a0),d4
0000E2EA 6100 0000                  		bsr.w	SolidObject
0000E2EE 4A28 0025                  		tst.b	$25(a0)		; is Sonic on top of the spring?
0000E2F2 6600                       		bne.s	Obj41_BounceUp	; if yes, branch
0000E2F4 4E75                       		rts	
0000E2F6                            ; ===========================================================================
0000E2F6                            
0000E2F6                            Obj41_BounceUp:				; XREF: Obj41_Up
0000E2F6 5428 0024                  		addq.b	#2,$24(a0)
0000E2FA 5069 000C                  		addq.w	#8,$C(a1)
0000E2FE 3368 0030 0012             		move.w	$30(a0),$12(a1)	; move Sonic upwards
0000E304 08E9 0001 0022             		bset	#1,$22(a1)
0000E30A 08A9 0003 0022             		bclr	#3,$22(a1)
0000E310 137C 0010 001C             		move.b	#$10,$1C(a1)	; use "bouncing" animation
0000E316 137C 0002 0024             		move.b	#2,$24(a1)
0000E31C 08A8 0003 0022             		bclr	#3,$22(a0)
0000E322 4228 0025                  		clr.b	$25(a0)
0000E326 303C 00CC                  		move.w	#$CC,d0
0000E32A 4EB9 0000 15C0             		jsr	(PlaySound_Special).l ;	play spring sound
0000E330                            
0000E330                            Obj41_AniUp:				; XREF: Obj41_Index
0000E330 43F9 0000 0000             		lea	(Ani_obj41).l,a1
0000E336 6000 CAEA                  		bra.w	AnimateSprite
0000E33A                            ; ===========================================================================
0000E33A                            
0000E33A                            Obj41_ResetUp:				; XREF: Obj41_Index
0000E33A 117C 0001 001D             		move.b	#1,$1D(a0)	; reset	animation
0000E340 5928 0024                  		subq.b	#4,$24(a0)	; goto "Obj41_Up" routine
0000E344 4E75                       		rts	
0000E346                            ; ===========================================================================
0000E346                            
0000E346                            Obj41_LR:				; XREF: Obj41_Index
0000E346 323C 0013                  		move.w	#$13,d1
0000E34A 343C 000E                  		move.w	#$E,d2
0000E34E 363C 000F                  		move.w	#$F,d3
0000E352 3828 0008                  		move.w	8(a0),d4
0000E356 6100 0000                  		bsr.w	SolidObject
0000E35A 0C28 0002 0024             		cmpi.b	#2,$24(a0)
0000E360 6600                       		bne.s	loc_DC0C
0000E362 117C 0008 0024             		move.b	#8,$24(a0)
0000E368                            
0000E368                            loc_DC0C:
0000E368 0828 0005 0022             		btst	#5,$22(a0)
0000E36E 6600                       		bne.s	Obj41_BounceLR
0000E370 4E75                       		rts	
0000E372                            ; ===========================================================================
0000E372                            
0000E372                            Obj41_BounceLR:				; XREF: Obj41_LR
0000E372 5428 0024                  		addq.b	#2,$24(a0)
0000E376 3368 0030 0010             		move.w	$30(a0),$10(a1)	; move Sonic to	the left
0000E37C 5069 0008                  		addq.w	#8,8(a1)
0000E380 0828 0000 0022             		btst	#0,$22(a0)	; is object flipped?
0000E386 6600                       		bne.s	loc_DC36	; if yes, branch
0000E388 0469 0010 0008             		subi.w	#$10,8(a1)
0000E38E 4469 0010                  		neg.w	$10(a1)		; move Sonic to	the right
0000E392                            
0000E392                            loc_DC36:
0000E392 337C 000F 003E             		move.w	#$F,$3E(a1)
0000E398 3369 0010 0014             		move.w	$10(a1),$14(a1)
0000E39E 0869 0000 0022             		bchg	#0,$22(a1)
0000E3A4 0829 0002 0022             		btst	#2,$22(a1)
0000E3AA 6600                       		bne.s	loc_DC56
0000E3AC 137C 0000 001C             		move.b	#0,$1C(a1)	; use running animation
0000E3B2                            
0000E3B2                            loc_DC56:
0000E3B2 08A8 0005 0022             		bclr	#5,$22(a0)
0000E3B8 08A9 0005 0022             		bclr	#5,$22(a1)
0000E3BE 303C 00CC                  		move.w	#$CC,d0
0000E3C2 4EB9 0000 15C0             		jsr	(PlaySound_Special).l ;	play spring sound
0000E3C8                            
0000E3C8                            Obj41_AniLR:				; XREF: Obj41_Index
0000E3C8 43F9 0000 0000             		lea	(Ani_obj41).l,a1
0000E3CE 6000 CA52                  		bra.w	AnimateSprite
0000E3D2                            ; ===========================================================================
0000E3D2                            
0000E3D2                            Obj41_ResetLR:				; XREF: Obj41_Index
0000E3D2 117C 0002 001D             		move.b	#2,$1D(a0)	; reset	animation
0000E3D8 5928 0024                  		subq.b	#4,$24(a0)	; goto "Obj41_LR" routine
0000E3DC 4E75                       		rts	
0000E3DE                            ; ===========================================================================
0000E3DE                            
0000E3DE                            Obj41_Dwn:				; XREF: Obj41_Index
0000E3DE 323C 001B                  		move.w	#$1B,d1
0000E3E2 343C 0008                  		move.w	#8,d2
0000E3E6 363C 0010                  		move.w	#$10,d3
0000E3EA 3828 0008                  		move.w	8(a0),d4
0000E3EE 6100 0000                  		bsr.w	SolidObject
0000E3F2 0C28 0002 0024             		cmpi.b	#2,$24(a0)
0000E3F8 6600                       		bne.s	loc_DCA4
0000E3FA 117C 000E 0024             		move.b	#$E,$24(a0)
0000E400                            
0000E400                            loc_DCA4:
0000E400 4A28 0025                  		tst.b	$25(a0)
0000E404 6600                       		bne.s	locret_DCAE
0000E406 4A44                       		tst.w	d4
0000E408 6B00                       		bmi.s	Obj41_BounceDwn
0000E40A                            
0000E40A                            locret_DCAE:
0000E40A 4E75                       		rts	
0000E40C                            ; ===========================================================================
0000E40C                            
0000E40C                            Obj41_BounceDwn:			; XREF: Obj41_Dwn
0000E40C 5428 0024                  		addq.b	#2,$24(a0)
0000E410 5169 000C                  		subq.w	#8,$C(a1)
0000E414 3368 0030 0012             		move.w	$30(a0),$12(a1)
0000E41A 4469 0012                  		neg.w	$12(a1)		; move Sonic downwards
0000E41E 08E9 0001 0022             		bset	#1,$22(a1)
0000E424 08A9 0003 0022             		bclr	#3,$22(a1)
0000E42A 137C 0002 0024             		move.b	#2,$24(a1)
0000E430 08A8 0003 0022             		bclr	#3,$22(a0)
0000E436 4228 0025                  		clr.b	$25(a0)
0000E43A 303C 00CC                  		move.w	#$CC,d0
0000E43E 4EB9 0000 15C0             		jsr	(PlaySound_Special).l ;	play spring sound
0000E444                            
0000E444                            Obj41_AniDwn:				; XREF: Obj41_Index
0000E444 43F9 0000 0000             		lea	(Ani_obj41).l,a1
0000E44A 6000 C9D6                  		bra.w	AnimateSprite
0000E44E                            ; ===========================================================================
0000E44E                            
0000E44E                            Obj41_ResetDwn:				; XREF: Obj41_Index
0000E44E 117C 0001 001D             		move.b	#1,$1D(a0)	; reset	animation
0000E454 5928 0024                  		subq.b	#4,$24(a0)	; goto "Obj41_Dwn" routine
0000E458 4E75                       		rts	
0000E45A                            ; ===========================================================================
0000E45A                            Ani_obj41:
0000E45A                            	include "_anim\obj41.asm"
0000E45A                            ; ---------------------------------------------------------------------------
0000E45A                            ; Animation script - springs
0000E45A                            ; ---------------------------------------------------------------------------
0000E45A 0000                       		dc.w byte_DD02-Ani_obj41
0000E45C 0000                       		dc.w byte_DD0E-Ani_obj41
0000E45E 0001 0000 0202 0202 0202+  byte_DD02:	dc.b 0,	1, 0, 0, 2, 2, 2, 2, 2,	2, 0, $FC
0000E46A 0004 0303 0505 0505 0505+  byte_DD0E:	dc.b 0,	4, 3, 3, 5, 5, 5, 5, 5,	5, 3, $FC
0000E476                            		even
0000E476                            		even
0000E476                            
0000E476                            ; ---------------------------------------------------------------------------
0000E476                            ; Sprite mappings - springs
0000E476                            ; ---------------------------------------------------------------------------
0000E476                            Map_obj41:
0000E476                            	include "_maps\obj41.asm"
0000E476                            ; ---------------------------------------------------------------------------
0000E476                            ; Sprite mappings - springs
0000E476                            ; ---------------------------------------------------------------------------
0000E476 0000                       		dc.w byte_DD26-Map_obj41
0000E478 0000                       		dc.w byte_DD31-Map_obj41
0000E47A 0000                       		dc.w byte_DD37-Map_obj41
0000E47C 0000                       		dc.w byte_DD47-Map_obj41
0000E47E 0000                       		dc.w byte_DD4D-Map_obj41
0000E480 0000                       		dc.w byte_DD53-Map_obj41
0000E482 02                         byte_DD26:	dc.b 2
0000E483 F80C 0000 F0               		dc.b $F8, $C, 0, 0, $F0
0000E488 000C 0004 F0               		dc.b 0,	$C, 0, 4, $F0
0000E48D 01                         byte_DD31:	dc.b 1
0000E48E 000C 0000 F0               		dc.b 0,	$C, 0, 0, $F0
0000E493 03                         byte_DD37:	dc.b 3
0000E494 E80C 0000 F0               		dc.b $E8, $C, 0, 0, $F0
0000E499 F005 0008 F8               		dc.b $F0, 5, 0,	8, $F8
0000E49E 000C 000C F0               		dc.b 0,	$C, 0, $C, $F0
0000E4A3 01                         byte_DD47:	dc.b 1
0000E4A4 F007 0000 F8               		dc.b $F0, 7, 0,	0, $F8
0000E4A9 01                         byte_DD4D:	dc.b 1
0000E4AA F003 0004 F8               		dc.b $F0, 3, 0,	4, $F8
0000E4AF 04                         byte_DD53:	dc.b 4
0000E4B0 F003 0004 10               		dc.b $F0, 3, 0,	4, $10
0000E4B5 F809 0008 F8               		dc.b $F8, 9, 0,	8, $F8
0000E4BA F000 0000 F8               		dc.b $F0, 0, 0,	0, $F8
0000E4BF 0800 0003 F8               		dc.b 8,	0, 0, 3, $F8
0000E4C4                            		even
0000E4C4                            		even
0000E4C4                            
0000E4C4                            ; ===========================================================================
0000E4C4                            ; ---------------------------------------------------------------------------
0000E4C4                            ; Object 42 - Newtron enemy (GHZ)
0000E4C4                            ; ---------------------------------------------------------------------------
0000E4C4                            
0000E4C4                            Obj42:					; XREF: Obj_Index
0000E4C4 7000                       		moveq	#0,d0
0000E4C6 1028 0024                  		move.b	$24(a0),d0
0000E4CA 323B 0000                  		move.w	Obj42_Index(pc,d0.w),d1
0000E4CE 4EFB 1000                  		jmp	Obj42_Index(pc,d1.w)
0000E4D2                            ; ===========================================================================
0000E4D2 0000                       Obj42_Index:	dc.w Obj42_Main-Obj42_Index
0000E4D4 0000                       		dc.w Obj42_Action-Obj42_Index
0000E4D6 0000                       		dc.w Obj42_Delete-Obj42_Index
0000E4D8                            ; ===========================================================================
0000E4D8                            
0000E4D8                            Obj42_Main:				; XREF: Obj42_Index
0000E4D8 5428 0024                  		addq.b	#2,$24(a0)
0000E4DC 217C 0000 0000 0004        		move.l	#Map_obj42,4(a0)
0000E4E4 317C 049B 0002             		move.w	#$49B,2(a0)
0000E4EA 117C 0004 0001             		move.b	#4,1(a0)
0000E4F0 117C 0004 0018             		move.b	#4,$18(a0)
0000E4F6 117C 0014 0019             		move.b	#$14,$19(a0)
0000E4FC 117C 0010 0016             		move.b	#$10,$16(a0)
0000E502 117C 0008 0017             		move.b	#8,$17(a0)
0000E508                            
0000E508                            Obj42_Action:				; XREF: Obj42_Index
0000E508 7000                       		moveq	#0,d0
0000E50A 1028 0025                  		move.b	$25(a0),d0
0000E50E 323B 0000                  		move.w	Obj42_Index2(pc,d0.w),d1
0000E512 4EBB 1000                  		jsr	Obj42_Index2(pc,d1.w)
0000E516 43F9 0000 0000             		lea	(Ani_obj42).l,a1
0000E51C 6100 C904                  		bsr.w	AnimateSprite
0000E520 6000 0000                  		bra.w	MarkObjGone
0000E524                            ; ===========================================================================
0000E524 0000                       Obj42_Index2:	dc.w Obj42_ChkDist-Obj42_Index2
0000E526 0000                       		dc.w Obj42_Type00-Obj42_Index2
0000E528 0000                       		dc.w Obj42_MatchFloor-Obj42_Index2
0000E52A 0000                       		dc.w Obj42_Speed-Obj42_Index2
0000E52C 0000                       		dc.w Obj42_Type01-Obj42_Index2
0000E52E                            ; ===========================================================================
0000E52E                            
0000E52E                            Obj42_ChkDist:				; XREF: Obj42_Index2
0000E52E 08E8 0000 0022             		bset	#0,$22(a0)
0000E534 3038 D008                  		move.w	($FFFFD008).w,d0
0000E538 9068 0008                  		sub.w	8(a0),d0
0000E53C 6400                       		bcc.s	loc_DDEA
0000E53E 4440                       		neg.w	d0
0000E540 08A8 0000 0022             		bclr	#0,$22(a0)
0000E546                            
0000E546                            loc_DDEA:
0000E546 0C40 0080                  		cmpi.w	#$80,d0		; is Sonic within $80 pixels of	the newtron?
0000E54A 6400                       		bcc.s	locret_DE12	; if not, branch
0000E54C 5428 0025                  		addq.b	#2,$25(a0)
0000E550 117C 0001 001C             		move.b	#1,$1C(a0)
0000E556 4A28 0028                  		tst.b	$28(a0)		; check	object type
0000E55A 6700                       		beq.s	locret_DE12	; if type is 00, branch
0000E55C 317C 249B 0002             		move.w	#$249B,2(a0)
0000E562 117C 0008 0025             		move.b	#8,$25(a0)	; run type 01 newtron subroutine
0000E568 117C 0004 001C             		move.b	#4,$1C(a0)	; use different	animation
0000E56E                            
0000E56E                            locret_DE12:
0000E56E 4E75                       		rts	
0000E570                            ; ===========================================================================
0000E570                            
0000E570                            Obj42_Type00:				; XREF: Obj42_Index2
0000E570 0C28 0004 001A             		cmpi.b	#4,$1A(a0)	; has "appearing" animation finished?
0000E576 6400                       		bcc.s	Obj42_Fall	; is yes, branch
0000E578 08E8 0000 0022             		bset	#0,$22(a0)
0000E57E 3038 D008                  		move.w	($FFFFD008).w,d0
0000E582 9068 0008                  		sub.w	8(a0),d0
0000E586 6400                       		bcc.s	locret_DE32
0000E588 08A8 0000 0022             		bclr	#0,$22(a0)
0000E58E                            
0000E58E                            locret_DE32:
0000E58E 4E75                       		rts	
0000E590                            ; ===========================================================================
0000E590                            
0000E590                            Obj42_Fall:				; XREF: Obj42_Type00
0000E590 0C28 0001 001A             		cmpi.b	#1,$1A(a0)
0000E596 6600                       		bne.s	loc_DE42
0000E598 117C 000C 0020             		move.b	#$C,$20(a0)
0000E59E                            
0000E59E                            loc_DE42:
0000E59E 6100 F770                  		bsr.w	ObjectFall
0000E5A2 6100 0000                  		bsr.w	ObjHitFloor
0000E5A6 4A41                       		tst.w	d1		; has newtron hit the floor?
0000E5A8 6A00                       		bpl.s	locret_DE86	; if not, branch
0000E5AA D368 000C                  		add.w	d1,$C(a0)
0000E5AE 317C 0000 0012             		move.w	#0,$12(a0)	; stop newtron falling
0000E5B4 5428 0025                  		addq.b	#2,$25(a0)
0000E5B8 117C 0002 001C             		move.b	#2,$1C(a0)
0000E5BE 0828 0005 0002             		btst	#5,2(a0)
0000E5C4 6700                       		beq.s	Obj42_Move
0000E5C6 5228 001C                  		addq.b	#1,$1C(a0)
0000E5CA                            
0000E5CA                            Obj42_Move:
0000E5CA 117C 000D 0020             		move.b	#$D,$20(a0)
0000E5D0 317C 0200 0010             		move.w	#$200,$10(a0)	; move newtron horizontally
0000E5D6 0828 0000 0022             		btst	#0,$22(a0)
0000E5DC 6600                       		bne.s	locret_DE86
0000E5DE 4468 0010                  		neg.w	$10(a0)
0000E5E2                            
0000E5E2                            locret_DE86:
0000E5E2 4E75                       		rts	
0000E5E4                            ; ===========================================================================
0000E5E4                            
0000E5E4                            Obj42_MatchFloor:			; XREF: Obj42_Index2
0000E5E4 6100 F756                  		bsr.w	SpeedToPos
0000E5E8 6100 0000                  		bsr.w	ObjHitFloor
0000E5EC 0C41 FFF8                  		cmpi.w	#-8,d1
0000E5F0 6D00                       		blt.s	loc_DEA2
0000E5F2 0C41 000C                  		cmpi.w	#$C,d1
0000E5F6 6C00                       		bge.s	loc_DEA2
0000E5F8 D368 000C                  		add.w	d1,$C(a0)	; match	newtron's position with floor
0000E5FC 4E75                       		rts	
0000E5FE                            ; ===========================================================================
0000E5FE                            
0000E5FE                            loc_DEA2:
0000E5FE 5428 0025                  		addq.b	#2,$25(a0)
0000E602 4E75                       		rts	
0000E604                            ; ===========================================================================
0000E604                            
0000E604                            Obj42_Speed:				; XREF: Obj42_Index2
0000E604 6100 F736                  		bsr.w	SpeedToPos
0000E608 4E75                       		rts	
0000E60A                            ; ===========================================================================
0000E60A                            
0000E60A                            Obj42_Type01:				; XREF: Obj42_Index2
0000E60A 0C28 0001 001A             		cmpi.b	#1,$1A(a0)
0000E610 6600                       		bne.s	Obj42_FireMissile
0000E612 117C 000C 0020             		move.b	#$C,$20(a0)
0000E618                            
0000E618                            Obj42_FireMissile:
0000E618 0C28 0002 001A             		cmpi.b	#2,$1A(a0)
0000E61E 6600                       		bne.s	locret_DF14
0000E620 4A28 0032                  		tst.b	$32(a0)
0000E624 6600                       		bne.s	locret_DF14
0000E626 117C 0001 0032             		move.b	#1,$32(a0)
0000E62C 6100 FBBA                  		bsr.w	SingleObjLoad
0000E630 6600                       		bne.s	locret_DF14
0000E632 12BC 0023                  		move.b	#$23,0(a1)	; load missile object
0000E636 3368 0008 0008             		move.w	8(a0),8(a1)
0000E63C 3368 000C 000C             		move.w	$C(a0),$C(a1)
0000E642 5169 000C                  		subq.w	#8,$C(a1)
0000E646 337C 0200 0010             		move.w	#$200,$10(a1)
0000E64C 303C 0014                  		move.w	#$14,d0
0000E650 0828 0000 0022             		btst	#0,$22(a0)
0000E656 6600                       		bne.s	loc_DF04
0000E658 4440                       		neg.w	d0
0000E65A 4469 0010                  		neg.w	$10(a1)
0000E65E                            
0000E65E                            loc_DF04:
0000E65E D169 0008                  		add.w	d0,8(a1)
0000E662 1368 0022 0022             		move.b	$22(a0),$22(a1)
0000E668 137C 0001 0028             		move.b	#1,$28(a1)
0000E66E                            
0000E66E                            locret_DF14:
0000E66E 4E75                       		rts	
0000E670                            ; ===========================================================================
0000E670                            
0000E670                            Obj42_Delete:				; XREF: Obj42_Index
0000E670 6000 F72C                  		bra.w	DeleteObject
0000E674                            ; ===========================================================================
0000E674                            Ani_obj42:
0000E674                            	include "_anim\obj42.asm"
0000E674                            ; ---------------------------------------------------------------------------
0000E674                            ; Animation script - Newtron enemy
0000E674                            ; ---------------------------------------------------------------------------
0000E674 0000                       		dc.w byte_DF24-Ani_obj42
0000E676 0000                       		dc.w byte_DF28-Ani_obj42
0000E678 0000                       		dc.w byte_DF30-Ani_obj42
0000E67A 0000                       		dc.w byte_DF34-Ani_obj42
0000E67C 0000                       		dc.w byte_DF38-Ani_obj42
0000E67E 0F0A FF00                  byte_DF24:	dc.b $F, $A, $FF, 0
0000E682 1300 0103 0405 FE01        byte_DF28:	dc.b $13, 0, 1,	3, 4, 5, $FE, 1
0000E68A 0206 07FF                  byte_DF30:	dc.b 2,	6, 7, $FF
0000E68E 0208 09FF                  byte_DF34:	dc.b 2,	8, 9, $FF
0000E692 1300 0101 0201 0100 FC00   byte_DF38:	dc.b $13, 0, 1,	1, 2, 1, 1, 0, $FC, 0
0000E69C                            		even
0000E69C                            		even
0000E69C                            
0000E69C                            ; ---------------------------------------------------------------------------
0000E69C                            ; Sprite mappings - Newtron enemy (GHZ)
0000E69C                            ; ---------------------------------------------------------------------------
0000E69C                            Map_obj42:
0000E69C                            	include "_maps\obj42.asm"
0000E69C                            ; ---------------------------------------------------------------------------
0000E69C                            ; Sprite mappings - Newtron enemy (GHZ)
0000E69C                            ; ---------------------------------------------------------------------------
0000E69C 0000 0000                  		dc.w byte_DF58-Map_obj42, byte_DF68-Map_obj42
0000E6A0 0000 0000                  		dc.w byte_DF78-Map_obj42, byte_DF88-Map_obj42
0000E6A4 0000 0000                  		dc.w byte_DF9D-Map_obj42, byte_DFAD-Map_obj42
0000E6A8 0000 0000                  		dc.w byte_DFB8-Map_obj42, byte_DFC8-Map_obj42
0000E6AC 0000 0000                  		dc.w byte_DFD8-Map_obj42, byte_DFE8-Map_obj42
0000E6B0 0000                       		dc.w byte_DFF8-Map_obj42
0000E6B2 03                         byte_DF58:	dc.b 3
0000E6B3 EC0D 0000 EC               		dc.b $EC, $D, 0, 0, $EC
0000E6B8 F400 0008 0C               		dc.b $F4, 0, 0,	8, $C
0000E6BD FC0E 0009 F4               		dc.b $FC, $E, 0, 9, $F4
0000E6C2 03                         byte_DF68:	dc.b 3
0000E6C3 EC06 0015 EC               		dc.b $EC, 6, 0,	$15, $EC
0000E6C8 EC09 001B FC               		dc.b $EC, 9, 0,	$1B, $FC
0000E6CD FC0A 0021 FC               		dc.b $FC, $A, 0, $21, $FC
0000E6D2 03                         byte_DF78:	dc.b 3
0000E6D3 EC06 002A EC               		dc.b $EC, 6, 0,	$2A, $EC
0000E6D8 EC09 001B FC               		dc.b $EC, 9, 0,	$1B, $FC
0000E6DD FC0A 0021 FC               		dc.b $FC, $A, 0, $21, $FC
0000E6E2 04                         byte_DF88:	dc.b 4
0000E6E3 EC06 0030 EC               		dc.b $EC, 6, 0,	$30, $EC
0000E6E8 EC09 001B FC               		dc.b $EC, 9, 0,	$1B, $FC
0000E6ED FC09 0036 FC               		dc.b $FC, 9, 0,	$36, $FC
0000E6F2 0C00 003C 0C               		dc.b $C, 0, 0, $3C, $C
0000E6F7 03                         byte_DF9D:	dc.b 3
0000E6F8 F40D 003D EC               		dc.b $F4, $D, 0, $3D, $EC
0000E6FD FC00 0020 0C               		dc.b $FC, 0, 0,	$20, $C
0000E702 0408 0045 FC               		dc.b 4,	8, 0, $45, $FC
0000E707 02                         byte_DFAD:	dc.b 2
0000E708 F80D 0048 EC               		dc.b $F8, $D, 0, $48, $EC
0000E70D F801 0050 0C               		dc.b $F8, 1, 0,	$50, $C
0000E712 03                         byte_DFB8:	dc.b 3
0000E713 F80D 0048 EC               		dc.b $F8, $D, 0, $48, $EC
0000E718 F801 0050 0C               		dc.b $F8, 1, 0,	$50, $C
0000E71D FE00 0052 14               		dc.b $FE, 0, 0,	$52, $14
0000E722 03                         byte_DFC8:	dc.b 3
0000E723 F80D 0048 EC               		dc.b $F8, $D, 0, $48, $EC
0000E728 F801 0050 0C               		dc.b $F8, 1, 0,	$50, $C
0000E72D FE04 0053 14               		dc.b $FE, 4, 0,	$53, $14
0000E732 03                         byte_DFD8:	dc.b 3
0000E733 F80D 0048 EC               		dc.b $F8, $D, 0, $48, $EC
0000E738 F801 0050 0C               		dc.b $F8, 1, 0,	$50, $C
0000E73D FE00 E052 14               		dc.b $FE, 0, $E0, $52, $14
0000E742 03                         byte_DFE8:	dc.b 3
0000E743 F80D 0048 EC               		dc.b $F8, $D, 0, $48, $EC
0000E748 F801 0050 0C               		dc.b $F8, 1, 0,	$50, $C
0000E74D FE04 E053 14               		dc.b $FE, 4, $E0, $53, $14
0000E752 00                         byte_DFF8:	dc.b 0
0000E754 00                         		even
0000E754 00                         		even
0000E754                            
0000E754                            ; ===========================================================================
0000E754                            ; ---------------------------------------------------------------------------
0000E754                            ; Object 43 - Roller enemy (SYZ)
0000E754                            ; ---------------------------------------------------------------------------
0000E754                            
0000E754                            Obj43:					; XREF: Obj_Index
0000E754 7000                       		moveq	#0,d0
0000E756 1028 0024                  		move.b	$24(a0),d0
0000E75A 323B 0000                  		move.w	Obj43_Index(pc,d0.w),d1
0000E75E 4EFB 1000                  		jmp	Obj43_Index(pc,d1.w)
0000E762                            ; ===========================================================================
0000E762 0000                       Obj43_Index:	dc.w Obj43_Main-Obj43_Index
0000E764 0000                       		dc.w Obj43_Action-Obj43_Index
0000E766                            ; ===========================================================================
0000E766                            
0000E766                            Obj43_Main:				; XREF: Obj43_Index
0000E766 117C 000E 0016             		move.b	#$E,$16(a0)
0000E76C 117C 0008 0017             		move.b	#8,$17(a0)
0000E772 6100 F59C                  		bsr.w	ObjectFall
0000E776 6100 0000                  		bsr.w	ObjHitFloor
0000E77A 4A41                       		tst.w	d1
0000E77C 6A00                       		bpl.s	locret_E052
0000E77E D368 000C                  		add.w	d1,$C(a0)	; match	roller's position with the floor
0000E782 317C 0000 0012             		move.w	#0,$12(a0)
0000E788 5428 0024                  		addq.b	#2,$24(a0)
0000E78C 217C 0000 0000 0004        		move.l	#Map_obj43,4(a0)
0000E794 317C 04B8 0002             		move.w	#$4B8,2(a0)
0000E79A 117C 0004 0001             		move.b	#4,1(a0)
0000E7A0 117C 0004 0018             		move.b	#4,$18(a0)
0000E7A6 117C 0010 0019             		move.b	#$10,$19(a0)
0000E7AC                            
0000E7AC                            locret_E052:
0000E7AC 4E75                       		rts	
0000E7AE                            ; ===========================================================================
0000E7AE                            
0000E7AE                            Obj43_Action:				; XREF: Obj43_Index
0000E7AE 7000                       		moveq	#0,d0
0000E7B0 1028 0025                  		move.b	$25(a0),d0
0000E7B4 323B 0000                  		move.w	Obj43_Index2(pc,d0.w),d1
0000E7B8 4EBB 1000                  		jsr	Obj43_Index2(pc,d1.w)
0000E7BC 43F9 0000 0000             		lea	(Ani_obj43).l,a1
0000E7C2 6100 C65E                  		bsr.w	AnimateSprite
0000E7C6 3028 0008                  		move.w	8(a0),d0
0000E7CA 0240 FF80                  		andi.w	#$FF80,d0
0000E7CE 3238 F700                  		move.w	($FFFFF700).w,d1
0000E7D2 0441 0080                  		subi.w	#$80,d1
0000E7D6 0241 FF80                  		andi.w	#$FF80,d1
0000E7DA 9041                       		sub.w	d1,d0
0000E7DC 0C40 0280                  		cmpi.w	#$280,d0
0000E7E0 6E00 0000                  		bgt.w	Obj43_ChkGone
0000E7E4 6000 F57C                  		bra.w	DisplaySprite
0000E7E8                            ; ===========================================================================
0000E7E8                            
0000E7E8                            Obj43_ChkGone:				; XREF: Obj43_Action
0000E7E8 45F8 FC00                  		lea	($FFFFFC00).w,a2
0000E7EC 7000                       		moveq	#0,d0
0000E7EE 1028 0023                  		move.b	$23(a0),d0
0000E7F2 6700                       		beq.s	Obj43_Delete
0000E7F4 08B2 0007 0002             		bclr	#7,2(a2,d0.w)
0000E7FA                            
0000E7FA                            Obj43_Delete:
0000E7FA 6000 F5A2                  		bra.w	DeleteObject
0000E7FE                            ; ===========================================================================
0000E7FE 0000                       Obj43_Index2:	dc.w Obj43_RollChk-Obj43_Index2
0000E800 0000                       		dc.w Obj43_RollNoChk-Obj43_Index2
0000E802 0000                       		dc.w Obj43_ChkJump-Obj43_Index2
0000E804 0000                       		dc.w Obj43_MatchFloor-Obj43_Index2
0000E806                            ; ===========================================================================
0000E806                            
0000E806                            Obj43_RollChk:				; XREF: Obj43_Index2
0000E806 3038 D008                  		move.w	($FFFFD008).w,d0
0000E80A 0440 0100                  		subi.w	#$100,d0
0000E80E 6500                       		bcs.s	loc_E0D2
0000E810 9068 0008                  		sub.w	8(a0),d0	; check	distance between Roller	and Sonic
0000E814 6500                       		bcs.s	loc_E0D2
0000E816 5828 0025                  		addq.b	#4,$25(a0)
0000E81A 117C 0002 001C             		move.b	#2,$1C(a0)
0000E820 317C 0700 0010             		move.w	#$700,$10(a0)	; move Roller horizontally
0000E826 117C 008E 0020             		move.b	#$8E,$20(a0)	; make Roller invincible
0000E82C                            
0000E82C                            loc_E0D2:
0000E82C 588F                       		addq.l	#4,sp
0000E82E 4E75                       		rts	
0000E830                            ; ===========================================================================
0000E830                            
0000E830                            Obj43_RollNoChk:			; XREF: Obj43_Index2
0000E830 0C28 0002 001C             		cmpi.b	#2,$1C(a0)
0000E836 6700                       		beq.s	loc_E0F8
0000E838 5368 0030                  		subq.w	#1,$30(a0)
0000E83C 6A00                       		bpl.s	locret_E0F6
0000E83E 117C 0001 001C             		move.b	#1,$1C(a0)
0000E844 317C 0700 0010             		move.w	#$700,$10(a0)
0000E84A 117C 008E 0020             		move.b	#$8E,$20(a0)
0000E850                            
0000E850                            locret_E0F6:
0000E850 4E75                       		rts	
0000E852                            ; ===========================================================================
0000E852                            
0000E852                            loc_E0F8:
0000E852 5428 0025                  		addq.b	#2,$25(a0)
0000E856 4E75                       		rts	
0000E858                            ; ===========================================================================
0000E858                            
0000E858                            Obj43_ChkJump:				; XREF: Obj43_Index2
0000E858 6100 0000                  		bsr.w	Obj43_Stop
0000E85C 6100 F4DE                  		bsr.w	SpeedToPos
0000E860 6100 0000                  		bsr.w	ObjHitFloor
0000E864 0C41 FFF8                  		cmpi.w	#-8,d1
0000E868 6D00                       		blt.s	Obj43_Jump
0000E86A 0C41 000C                  		cmpi.w	#$C,d1
0000E86E 6C00                       		bge.s	Obj43_Jump
0000E870 D368 000C                  		add.w	d1,$C(a0)
0000E874 4E75                       		rts	
0000E876                            ; ===========================================================================
0000E876                            
0000E876                            Obj43_Jump:
0000E876 5428 0025                  		addq.b	#2,$25(a0)
0000E87A 08E8 0000 0032             		bset	#0,$32(a0)
0000E880 6700                       		beq.s	locret_E12E
0000E882 317C FA00 0012             		move.w	#-$600,$12(a0)	; move Roller vertically
0000E888                            
0000E888                            locret_E12E:
0000E888 4E75                       		rts	
0000E88A                            ; ===========================================================================
0000E88A                            
0000E88A                            Obj43_MatchFloor:			; XREF: Obj43_Index2
0000E88A 6100 F484                  		bsr.w	ObjectFall
0000E88E 4A68 0012                  		tst.w	$12(a0)
0000E892 6B00                       		bmi.s	locret_E150
0000E894 6100 0000                  		bsr.w	ObjHitFloor
0000E898 4A41                       		tst.w	d1
0000E89A 6A00                       		bpl.s	locret_E150
0000E89C D368 000C                  		add.w	d1,$C(a0)	; match	Roller's position with the floor
0000E8A0 5528 0025                  		subq.b	#2,$25(a0)
0000E8A4 317C 0000 0012             		move.w	#0,$12(a0)
0000E8AA                            
0000E8AA                            locret_E150:
0000E8AA 4E75                       		rts	
0000E8AC                            
0000E8AC                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000E8AC                            
0000E8AC                            
0000E8AC                            Obj43_Stop:				; XREF: Obj43_ChkJump
0000E8AC 4A28 0032                  		tst.b	$32(a0)
0000E8B0 6B00                       		bmi.s	locret_E188
0000E8B2 3038 D008                  		move.w	($FFFFD008).w,d0
0000E8B6 0440 0030                  		subi.w	#$30,d0
0000E8BA 9068 0008                  		sub.w	8(a0),d0
0000E8BE 6400                       		bcc.s	locret_E188
0000E8C0 117C 0000 001C             		move.b	#0,$1C(a0)
0000E8C6 117C 000E 0020             		move.b	#$E,$20(a0)
0000E8CC 4268 0010                  		clr.w	$10(a0)
0000E8D0 317C 0078 0030             		move.w	#120,$30(a0)	; set waiting time to 2	seconds
0000E8D6 117C 0002 0025             		move.b	#2,$25(a0)
0000E8DC 08E8 0007 0032             		bset	#7,$32(a0)
0000E8E2                            
0000E8E2                            locret_E188:
0000E8E2 4E75                       		rts	
0000E8E4                            ; End of function Obj43_Stop
0000E8E4                            
0000E8E4                            ; ===========================================================================
0000E8E4                            Ani_obj43:
0000E8E4                            	include "_anim\obj43.asm"
0000E8E4                            ; ---------------------------------------------------------------------------
0000E8E4                            ; Animation script - Roller enemy
0000E8E4                            ; ---------------------------------------------------------------------------
0000E8E4 0000                       		dc.w byte_E190-Ani_obj43
0000E8E6 0000                       		dc.w byte_E196-Ani_obj43
0000E8E8 0000                       		dc.w byte_E19C-Ani_obj43
0000E8EA 0F02 0100 FE01             byte_E190:	dc.b $F, 2, 1, 0, $FE, 1
0000E8F0 0F01 02FD 0200             byte_E196:	dc.b $F, 1, 2, $FD, 2, 0
0000E8F6 0303 0402 FF               byte_E19C:	dc.b 3,	3, 4, 2, $FF
0000E8FC 00                         		even
0000E8FC 00                         		even
0000E8FC                            
0000E8FC                            ; ---------------------------------------------------------------------------
0000E8FC                            ; Sprite mappings - Roller enemy (SYZ)
0000E8FC                            ; ---------------------------------------------------------------------------
0000E8FC                            Map_obj43:
0000E8FC                            	include "_maps\obj43.asm"
0000E8FC                            Map_61da:
0000E8FC 0000                       Map_61da_0: 	dc.w Map_61da_A-Map_61da
0000E8FE 0000                       Map_61da_2: 	dc.w Map_61da_15-Map_61da
0000E900 0000                       Map_61da_4: 	dc.w Map_61da_20-Map_61da
0000E902 0000                       Map_61da_6: 	dc.w Map_61da_26-Map_61da
0000E904 0000                       Map_61da_8: 	dc.w Map_61da_2C-Map_61da
0000E906 02                         Map_61da_A: 	dc.b $2
0000E907 DE0E 0000 F0               	dc.b $DE, $E, $0, $0, $F0
0000E90C F60E 000C F0               	dc.b $F6, $E, $0, $C, $F0
0000E911 02                         Map_61da_15: 	dc.b $2
0000E912 E60E 0000 F0               	dc.b $E6, $E, $0, $0, $F0
0000E917 FE0D 0018 F0               	dc.b $FE, $D, $0, $18, $F0
0000E91C 01                         Map_61da_20: 	dc.b $1
0000E91D F00F 0020 F0               	dc.b $F0, $F, $0, $20, $F0
0000E922 01                         Map_61da_26: 	dc.b $1
0000E923 F00F 0030 F0               	dc.b $F0, $F, $0, $30, $F0
0000E928 01                         Map_61da_2C: 	dc.b $1
0000E929 F00F 0040 F0               	dc.b $F0, $F, $0, $40, $F0
0000E92E                            	even
0000E92E                            	even
0000E92E                            
0000E92E                            ; ===========================================================================
0000E92E                            ; ---------------------------------------------------------------------------
0000E92E                            ; Object 44 - walls (GHZ)
0000E92E                            ; ---------------------------------------------------------------------------
0000E92E                            
0000E92E                            Obj44:					; XREF: Obj_Index
0000E92E 7000                       		moveq	#0,d0
0000E930 1028 0024                  		move.b	$24(a0),d0
0000E934 323B 0000                  		move.w	Obj44_Index(pc,d0.w),d1
0000E938 4EFB 1000                  		jmp	Obj44_Index(pc,d1.w)
0000E93C                            ; ===========================================================================
0000E93C 0000                       Obj44_Index:	dc.w Obj44_Main-Obj44_Index
0000E93E 0000                       		dc.w Obj44_Solid-Obj44_Index
0000E940 0000                       		dc.w Obj44_Display-Obj44_Index
0000E942                            ; ===========================================================================
0000E942                            
0000E942                            Obj44_Main:				; XREF: Obj44_Index
0000E942 5428 0024                  		addq.b	#2,$24(a0)
0000E946 217C 0000 0000 0004        		move.l	#Map_obj44,4(a0)
0000E94E 317C 434C 0002             		move.w	#$434C,2(a0)
0000E954 0028 0004 0001             		ori.b	#4,1(a0)
0000E95A 117C 0008 0019             		move.b	#8,$19(a0)
0000E960 117C 0006 0018             		move.b	#6,$18(a0)
0000E966 1168 0028 001A             		move.b	$28(a0),$1A(a0)	; copy object type number to frame number
0000E96C 08A8 0004 001A             		bclr	#4,$1A(a0)	; clear	4th bit	(deduct	$10)
0000E972 6700                       		beq.s	Obj44_Solid	; make object solid if 4th bit = 0
0000E974 5428 0024                  		addq.b	#2,$24(a0)
0000E978 6000                       		bra.s	Obj44_Display	; don't make it solid if 4th bit = 1
0000E97A                            ; ===========================================================================
0000E97A                            
0000E97A                            Obj44_Solid:				; XREF: Obj44_Index
0000E97A 323C 0013                  		move.w	#$13,d1
0000E97E 343C 0028                  		move.w	#$28,d2
0000E982 6100 A704                  		bsr.w	Obj44_SolidWall
0000E986                            
0000E986                            Obj44_Display:				; XREF: Obj44_Index
0000E986 6100 F3DA                  		bsr.w	DisplaySprite
0000E98A 3028 0008                  		move.w	8(a0),d0
0000E98E 0240 FF80                  		andi.w	#$FF80,d0
0000E992 3238 F700                  		move.w	($FFFFF700).w,d1
0000E996 0441 0080                  		subi.w	#$80,d1
0000E99A 0241 FF80                  		andi.w	#$FF80,d1
0000E99E 9041                       		sub.w	d1,d0
0000E9A0 0C40 0280                  		cmpi.w	#$280,d0
0000E9A4 6200 F3F8                  		bhi.w	DeleteObject
0000E9A8 4E75                       		rts	
0000E9AA                            ; ===========================================================================
0000E9AA                            ; ---------------------------------------------------------------------------
0000E9AA                            ; Sprite mappings - walls (GHZ)
0000E9AA                            ; ---------------------------------------------------------------------------
0000E9AA                            Map_obj44:
0000E9AA                            	include "_maps\obj44.asm"
0000E9AA                            ; ---------------------------------------------------------------------------
0000E9AA                            ; Sprite mappings - walls (GHZ)
0000E9AA                            ; ---------------------------------------------------------------------------
0000E9AA 0000                       		dc.w byte_E256-Map_obj44
0000E9AC 0000                       		dc.w byte_E26B-Map_obj44
0000E9AE 0000                       		dc.w byte_E280-Map_obj44
0000E9B0 04                         byte_E256:	dc.b 4
0000E9B1 E005 0004 F8               		dc.b $E0, 5, 0,	4, $F8
0000E9B6 F005 0008 F8               		dc.b $F0, 5, 0,	8, $F8
0000E9BB 0005 0008 F8               		dc.b 0,	5, 0, 8, $F8
0000E9C0 1005 0008 F8               		dc.b $10, 5, 0,	8, $F8
0000E9C5 04                         byte_E26B:	dc.b 4
0000E9C6 E005 0008 F8               		dc.b $E0, 5, 0,	8, $F8
0000E9CB F005 0008 F8               		dc.b $F0, 5, 0,	8, $F8
0000E9D0 0005 0008 F8               		dc.b 0,	5, 0, 8, $F8
0000E9D5 1005 0008 F8               		dc.b $10, 5, 0,	8, $F8
0000E9DA 04                         byte_E280:	dc.b 4
0000E9DB E005 0000 F8               		dc.b $E0, 5, 0,	0, $F8
0000E9E0 F005 0000 F8               		dc.b $F0, 5, 0,	0, $F8
0000E9E5 0005 0000 F8               		dc.b 0,	5, 0, 0, $F8
0000E9EA 1005 0000 F8               		dc.b $10, 5, 0,	0, $F8
0000E9F0 00                         		even
0000E9F0 00                         		even
0000E9F0                            
0000E9F0                            ; ===========================================================================
0000E9F0                            ; ---------------------------------------------------------------------------
0000E9F0                            ; Object 13 - lava ball	producer (MZ, SLZ)
0000E9F0                            ; ---------------------------------------------------------------------------
0000E9F0                            
0000E9F0                            Obj13:					; XREF: Obj_Index
0000E9F0 7000                       		moveq	#0,d0
0000E9F2 1028 0024                  		move.b	$24(a0),d0
0000E9F6 323B 0000                  		move.w	Obj13_Index(pc,d0.w),d1
0000E9FA 4EBB 1000                  		jsr	Obj13_Index(pc,d1.w)
0000E9FE 6000 0000                  		bra.w	Obj14_ChkDel
0000EA02                            ; ===========================================================================
0000EA02 0000                       Obj13_Index:	dc.w Obj13_Main-Obj13_Index
0000EA04 0000                       		dc.w Obj13_MakeLava-Obj13_Index
0000EA06                            ; ---------------------------------------------------------------------------
0000EA06                            ;
0000EA06                            ; Lava ball production rates
0000EA06                            ;
0000EA06 1E3C 5A78 96B4             Obj13_Rates:	dc.b 30, 60, 90, 120, 150, 180
0000EA0C                            ; ===========================================================================
0000EA0C                            
0000EA0C                            Obj13_Main:				; XREF: Obj13_Index
0000EA0C 5428 0024                  		addq.b	#2,$24(a0)
0000EA10 1028 0028                  		move.b	$28(a0),d0
0000EA14 E848                       		lsr.w	#4,d0
0000EA16 0240 000F                  		andi.w	#$F,d0
0000EA1A 117B 00EA 001F             		move.b	Obj13_Rates(pc,d0.w),$1F(a0)
0000EA20 1168 001F 001E             		move.b	$1F(a0),$1E(a0)	; set time delay for lava balls
0000EA26 0228 000F 0028             		andi.b	#$F,$28(a0)
0000EA2C                            
0000EA2C                            Obj13_MakeLava:				; XREF: Obj13_Index
0000EA2C 5328 001E                  		subq.b	#1,$1E(a0)	; subtract 1 from time delay
0000EA30 6600                       		bne.s	locret_E302	; if time still	remains, branch
0000EA32 1168 001F 001E             		move.b	$1F(a0),$1E(a0)	; reset	time delay
0000EA38 6100 F5A2                  		bsr.w	ChkObjOnScreen
0000EA3C 6600                       		bne.s	locret_E302
0000EA3E 6100 F7A8                  		bsr.w	SingleObjLoad
0000EA42 6600                       		bne.s	locret_E302
0000EA44 12BC 0014                  		move.b	#$14,0(a1)	; load lava ball object
0000EA48 3368 0008 0008             		move.w	8(a0),8(a1)
0000EA4E 3368 000C 000C             		move.w	$C(a0),$C(a1)
0000EA54 1368 0028 0028             		move.b	$28(a0),$28(a1)
0000EA5A                            
0000EA5A                            locret_E302:
0000EA5A 4E75                       		rts	
0000EA5C                            ; ===========================================================================
0000EA5C                            ; ---------------------------------------------------------------------------
0000EA5C                            ; Object 14 - lava balls (MZ, SLZ)
0000EA5C                            ; ---------------------------------------------------------------------------
0000EA5C                            
0000EA5C                            Obj14:					; XREF: Obj_Index
0000EA5C 7000                       		moveq	#0,d0
0000EA5E 1028 0024                  		move.b	$24(a0),d0
0000EA62 323B 0000                  		move.w	Obj14_Index(pc,d0.w),d1
0000EA66 4EBB 1000                  		jsr	Obj14_Index(pc,d1.w)
0000EA6A 6000 F2F6                  		bra.w	DisplaySprite
0000EA6E                            ; ===========================================================================
0000EA6E 0000                       Obj14_Index:	dc.w Obj14_Main-Obj14_Index
0000EA70 0000                       		dc.w Obj14_Action-Obj14_Index
0000EA72 0000                       		dc.w Obj14_Delete-Obj14_Index
0000EA74                            
0000EA74 FC00 FB00 FA00 F900 FE00   Obj14_Speeds:	dc.w $FC00, $FB00, $FA00, $F900, $FE00
0000EA7E 0200 FE00 0200 0000        		dc.w $200, $FE00, $200,	0
0000EA86                            ; ===========================================================================
0000EA86                            
0000EA86                            Obj14_Main:				; XREF: Obj14_Index
0000EA86 5428 0024                  		addq.b	#2,$24(a0)
0000EA8A 117C 0008 0016             		move.b	#8,$16(a0)
0000EA90 117C 0008 0017             		move.b	#8,$17(a0)
0000EA96 217C 0000 BA20 0004        		move.l	#Map_obj14,4(a0)
0000EA9E 317C 0345 0002             		move.w	#$345,2(a0)
0000EAA4 0C38 0003 FE10             		cmpi.b	#3,($FFFFFE10).w ; check if level is SLZ
0000EAAA 6600                       		bne.s	loc_E35A
0000EAAC 317C 0480 0002             		move.w	#$480,2(a0)	; SLZ specific code
0000EAB2                            
0000EAB2                            loc_E35A:
0000EAB2 117C 0004 0001             		move.b	#4,1(a0)
0000EAB8 117C 0003 0018             		move.b	#3,$18(a0)
0000EABE 117C 008B 0020             		move.b	#$8B,$20(a0)
0000EAC4 3168 000C 0030             		move.w	$C(a0),$30(a0)
0000EACA 4A28 0029                  		tst.b	$29(a0)
0000EACE 6700                       		beq.s	Obj14_SetSpeed
0000EAD0 5428 0018                  		addq.b	#2,$18(a0)
0000EAD4                            
0000EAD4                            Obj14_SetSpeed:
0000EAD4 7000                       		moveq	#0,d0
0000EAD6 1028 0028                  		move.b	$28(a0),d0
0000EADA D040                       		add.w	d0,d0
0000EADC 317B 0096 0012             		move.w	Obj14_Speeds(pc,d0.w),$12(a0) ;	load object speed (vertical)
0000EAE2 117C 0008 0019             		move.b	#8,$19(a0)
0000EAE8 0C28 0006 0028             		cmpi.b	#6,$28(a0)	; is object type below $6 ?
0000EAEE 6500                       		bcs.s	Obj14_PlaySnd	; if yes, branch
0000EAF0 117C 0010 0019             		move.b	#$10,$19(a0)
0000EAF6 117C 0002 001C             		move.b	#2,$1C(a0)	; use horizontal animation
0000EAFC 3168 0012 0010             		move.w	$12(a0),$10(a0)	; set horizontal speed
0000EB02 317C 0000 0012             		move.w	#0,$12(a0)	; delete vertical speed
0000EB08                            
0000EB08                            Obj14_PlaySnd:
0000EB08 303C 00AE                  		move.w	#$AE,d0
0000EB0C 4EB9 0000 15C0             		jsr	(PlaySound_Special).l ;	play lava ball sound
0000EB12                            
0000EB12                            Obj14_Action:				; XREF: Obj14_Index
0000EB12 7000                       		moveq	#0,d0
0000EB14 1028 0028                  		move.b	$28(a0),d0
0000EB18 D040                       		add.w	d0,d0
0000EB1A 323B 0000                  		move.w	Obj14_TypeIndex(pc,d0.w),d1
0000EB1E 4EBB 1000                  		jsr	Obj14_TypeIndex(pc,d1.w)
0000EB22 6100 F218                  		bsr.w	SpeedToPos
0000EB26 43F9 0000 0000             		lea	(Ani_obj14).l,a1
0000EB2C 6100 C2F4                  		bsr.w	AnimateSprite
0000EB30                            
0000EB30                            Obj14_ChkDel:				; XREF: Obj13
0000EB30 3028 0008                  		move.w	8(a0),d0
0000EB34 0240 FF80                  		andi.w	#$FF80,d0
0000EB38 3238 F700                  		move.w	($FFFFF700).w,d1
0000EB3C 0441 0080                  		subi.w	#$80,d1
0000EB40 0241 FF80                  		andi.w	#$FF80,d1
0000EB44 9041                       		sub.w	d1,d0
0000EB46 0C40 0280                  		cmpi.w	#$280,d0
0000EB4A 6200 F252                  		bhi.w	DeleteObject
0000EB4E 4E75                       		rts	
0000EB50                            ; ===========================================================================
0000EB50 0000 0000                  Obj14_TypeIndex:dc.w Obj14_Type00-Obj14_TypeIndex, Obj14_Type00-Obj14_TypeIndex
0000EB54 0000 0000                  		dc.w Obj14_Type00-Obj14_TypeIndex, Obj14_Type00-Obj14_TypeIndex
0000EB58 0000 0000                  		dc.w Obj14_Type04-Obj14_TypeIndex, Obj14_Type05-Obj14_TypeIndex
0000EB5C 0000 0000                  		dc.w Obj14_Type06-Obj14_TypeIndex, Obj14_Type07-Obj14_TypeIndex
0000EB60 0000                       		dc.w Obj14_Type08-Obj14_TypeIndex
0000EB62                            ; ===========================================================================
0000EB62                            ; lavaball types 00-03 fly up and fall back down
0000EB62                            
0000EB62                            Obj14_Type00:				; XREF: Obj14_TypeIndex
0000EB62 0668 0018 0012             		addi.w	#$18,$12(a0)	; increase object's downward speed
0000EB68 3028 0030                  		move.w	$30(a0),d0
0000EB6C B068 000C                  		cmp.w	$C(a0),d0	; has object fallen back to its	original position?
0000EB70 6400                       		bcc.s	loc_E41E	; if not, branch
0000EB72 5428 0024                  		addq.b	#2,$24(a0)	; goto "Obj14_Delete" routine
0000EB76                            
0000EB76                            loc_E41E:
0000EB76 08A8 0001 0022             		bclr	#1,$22(a0)
0000EB7C 4A68 0012                  		tst.w	$12(a0)
0000EB80 6A00                       		bpl.s	locret_E430
0000EB82 08E8 0001 0022             		bset	#1,$22(a0)
0000EB88                            
0000EB88                            locret_E430:
0000EB88 4E75                       		rts	
0000EB8A                            ; ===========================================================================
0000EB8A                            ; lavaball type	04 flies up until it hits the ceiling
0000EB8A                            
0000EB8A                            Obj14_Type04:				; XREF: Obj14_TypeIndex
0000EB8A 08E8 0001 0022             		bset	#1,$22(a0)
0000EB90 6100 0000                  		bsr.w	ObjHitCeiling
0000EB94 4A41                       		tst.w	d1
0000EB96 6A00                       		bpl.s	locret_E452
0000EB98 117C 0008 0028             		move.b	#8,$28(a0)
0000EB9E 117C 0001 001C             		move.b	#1,$1C(a0)
0000EBA4 317C 0000 0012             		move.w	#0,$12(a0)	; stop the object when it touches the ceiling
0000EBAA                            
0000EBAA                            locret_E452:
0000EBAA 4E75                       		rts	
0000EBAC                            ; ===========================================================================
0000EBAC                            ; lavaball type	05 falls down until it hits the	floor
0000EBAC                            
0000EBAC                            Obj14_Type05:				; XREF: Obj14_TypeIndex
0000EBAC 08A8 0001 0022             		bclr	#1,$22(a0)
0000EBB2 6100 0000                  		bsr.w	ObjHitFloor
0000EBB6 4A41                       		tst.w	d1
0000EBB8 6A00                       		bpl.s	locret_E474
0000EBBA 117C 0008 0028             		move.b	#8,$28(a0)
0000EBC0 117C 0001 001C             		move.b	#1,$1C(a0)
0000EBC6 317C 0000 0012             		move.w	#0,$12(a0)	; stop the object when it touches the floor
0000EBCC                            
0000EBCC                            locret_E474:
0000EBCC 4E75                       		rts	
0000EBCE                            ; ===========================================================================
0000EBCE                            ; lavaball types 06-07 move sideways
0000EBCE                            
0000EBCE                            Obj14_Type06:				; XREF: Obj14_TypeIndex
0000EBCE 08E8 0000 0022             		bset	#0,$22(a0)
0000EBD4 76F8                       		moveq	#-8,d3
0000EBD6 6100 0000                  		bsr.w	ObjHitWallLeft
0000EBDA 4A41                       		tst.w	d1
0000EBDC 6A00                       		bpl.s	locret_E498
0000EBDE 117C 0008 0028             		move.b	#8,$28(a0)
0000EBE4 117C 0003 001C             		move.b	#3,$1C(a0)
0000EBEA 317C 0000 0010             		move.w	#0,$10(a0)	; stop object when it touches a	wall
0000EBF0                            
0000EBF0                            locret_E498:
0000EBF0 4E75                       		rts	
0000EBF2                            ; ===========================================================================
0000EBF2                            
0000EBF2                            Obj14_Type07:				; XREF: Obj14_TypeIndex
0000EBF2 08A8 0000 0022             		bclr	#0,$22(a0)
0000EBF8 7608                       		moveq	#8,d3
0000EBFA 6100 0000                  		bsr.w	ObjHitWallRight
0000EBFE 4A41                       		tst.w	d1
0000EC00 6A00                       		bpl.s	locret_E4BC
0000EC02 117C 0008 0028             		move.b	#8,$28(a0)
0000EC08 117C 0003 001C             		move.b	#3,$1C(a0)
0000EC0E 317C 0000 0010             		move.w	#0,$10(a0)	; stop object when it touches a	wall
0000EC14                            
0000EC14                            locret_E4BC:
0000EC14 4E75                       		rts	
0000EC16                            ; ===========================================================================
0000EC16                            
0000EC16                            Obj14_Type08:				; XREF: Obj14_TypeIndex
0000EC16 4E75                       		rts	
0000EC18                            ; ===========================================================================
0000EC18                            
0000EC18                            Obj14_Delete:				; XREF: Obj14_Index
0000EC18 6000 F184                  		bra.w	DeleteObject
0000EC1C                            ; ===========================================================================
0000EC1C                            Ani_obj14:
0000EC1C                            	include "_anim\obj14.asm"
0000EC1C                            ; ---------------------------------------------------------------------------
0000EC1C                            ; Animation script - lava balls
0000EC1C                            ; ---------------------------------------------------------------------------
0000EC1C 0000                       		dc.w byte_E4CC-Ani_obj14
0000EC1E 0000                       		dc.w byte_E4D2-Ani_obj14
0000EC20 0000                       		dc.w byte_E4D6-Ani_obj14
0000EC22 0000                       		dc.w byte_E4DC-Ani_obj14
0000EC24 0500 2001 21FF             byte_E4CC:	dc.b 5,	0, $20,	1, $21,	$FF
0000EC2A 0502 FC00                  byte_E4D2:	dc.b 5,	2, $FC,	0
0000EC2E 0503 4304 44FF             byte_E4D6:	dc.b 5,	3, $43,	4, $44,	$FF
0000EC34 0505 FC00                  byte_E4DC:	dc.b 5,	5, $FC,	0
0000EC38                            		even
0000EC38                            		even
0000EC38                            
0000EC38                            ; ===========================================================================
0000EC38                            ; ---------------------------------------------------------------------------
0000EC38                            ; Object 6D - flame thrower (SBZ)
0000EC38                            ; ---------------------------------------------------------------------------
0000EC38                            
0000EC38                            Obj6D:					; XREF: Obj_Index
0000EC38 7000                       		moveq	#0,d0
0000EC3A 1028 0024                  		move.b	$24(a0),d0
0000EC3E 323B 0000                  		move.w	Obj6D_Index(pc,d0.w),d1
0000EC42 4EFB 1000                  		jmp	Obj6D_Index(pc,d1.w)
0000EC46                            ; ===========================================================================
0000EC46 0000                       Obj6D_Index:	dc.w Obj6D_Main-Obj6D_Index
0000EC48 0000                       		dc.w Obj6D_Action-Obj6D_Index
0000EC4A                            ; ===========================================================================
0000EC4A                            
0000EC4A                            Obj6D_Main:				; XREF: Obj6D_Index
0000EC4A 5428 0024                  		addq.b	#2,$24(a0)
0000EC4E 217C 0000 0000 0004        		move.l	#Map_obj6D,4(a0)
0000EC56 317C 83D9 0002             		move.w	#$83D9,2(a0)
0000EC5C 0028 0004 0001             		ori.b	#4,1(a0)
0000EC62 117C 0001 0018             		move.b	#1,$18(a0)
0000EC68 3168 000C 0030             		move.w	$C(a0),$30(a0)
0000EC6E 117C 000C 0019             		move.b	#$C,$19(a0)
0000EC74 1028 0028                  		move.b	$28(a0),d0
0000EC78 0240 00F0                  		andi.w	#$F0,d0		; read 1st digit of object type
0000EC7C D040                       		add.w	d0,d0		; multiply by 2
0000EC7E 3140 0030                  		move.w	d0,$30(a0)
0000EC82 3140 0032                  		move.w	d0,$32(a0)	; set flaming time
0000EC86 1028 0028                  		move.b	$28(a0),d0
0000EC8A 0240 000F                  		andi.w	#$F,d0		; read 2nd digit of object type
0000EC8E EB48                       		lsl.w	#5,d0		; multiply by $20
0000EC90 3140 0034                  		move.w	d0,$34(a0)	; set pause time
0000EC94 117C 000A 0036             		move.b	#$A,$36(a0)
0000EC9A 0828 0001 0022             		btst	#1,$22(a0)
0000ECA0 6700                       		beq.s	Obj6D_Action
0000ECA2 117C 0002 001C             		move.b	#2,$1C(a0)
0000ECA8 117C 0015 0036             		move.b	#$15,$36(a0)
0000ECAE                            
0000ECAE                            Obj6D_Action:				; XREF: Obj6D_Index
0000ECAE 5368 0030                  		subq.w	#1,$30(a0)	; subtract 1 from time
0000ECB2 6A00                       		bpl.s	loc_E57A	; if time remains, branch
0000ECB4 3168 0034 0030             		move.w	$34(a0),$30(a0)	; begin	pause time
0000ECBA 0868 0000 001C             		bchg	#0,$1C(a0)
0000ECC0 6700                       		beq.s	loc_E57A
0000ECC2 3168 0032 0030             		move.w	$32(a0),$30(a0)	; begin	flaming	time
0000ECC8 303C 00B3                  		move.w	#$B3,d0
0000ECCC 4EB9 0000 15C0             		jsr	(PlaySound_Special).l ;	play flame sound
0000ECD2                            
0000ECD2                            loc_E57A:
0000ECD2 43F9 0000 0000             		lea	(Ani_obj6D).l,a1
0000ECD8 6100 C148                  		bsr.w	AnimateSprite
0000ECDC 117C 0000 0020             		move.b	#0,$20(a0)
0000ECE2 1028 0036                  		move.b	$36(a0),d0
0000ECE6 B028 001A                  		cmp.b	$1A(a0),d0
0000ECEA 6600                       		bne.s	Obj6D_ChkDel
0000ECEC 117C 00A3 0020             		move.b	#$A3,$20(a0)
0000ECF2                            
0000ECF2                            Obj6D_ChkDel:
0000ECF2 3028 0008                  		move.w	8(a0),d0
0000ECF6 0240 FF80                  		andi.w	#$FF80,d0
0000ECFA 3238 F700                  		move.w	($FFFFF700).w,d1
0000ECFE 0441 0080                  		subi.w	#$80,d1
0000ED02 0241 FF80                  		andi.w	#$FF80,d1
0000ED06 9041                       		sub.w	d1,d0
0000ED08 0C40 0280                  		cmpi.w	#$280,d0
0000ED0C 6200 F090                  		bhi.w	DeleteObject
0000ED10 6000 F050                  		bra.w	DisplaySprite
0000ED14                            ; ===========================================================================
0000ED14                            Ani_obj6D:
0000ED14                            	include "_anim\obj6D.asm"
0000ED14                            ; ---------------------------------------------------------------------------
0000ED14                            ; Animation script - flamethrower (SBZ)
0000ED14                            ; ---------------------------------------------------------------------------
0000ED14 0000                       		dc.w byte_E5C4-Ani_obj6D
0000ED16 0000                       		dc.w byte_E5D2-Ani_obj6D
0000ED18 0000                       		dc.w byte_E5DC-Ani_obj6D
0000ED1A 0000                       		dc.w byte_E5EA-Ani_obj6D
0000ED1C 0300 0102 0304 0506 0708+  byte_E5C4:	dc.b 3,	0, 1, 2, 3, 4, 5, 6, 7,	8, 9, $A, $FE, 2
0000ED2A 0009 0705 0301 00FE 0100   byte_E5D2:	dc.b 0,	9, 7, 5, 3, 1, 0, $FE, 1, 0
0000ED34 030B 0C0D 0E0F 1011 1213+  byte_E5DC:	dc.b 3,	$B, $C,	$D, $E,	$F, $10, $11, $12, $13,	$14, $15, $FE, 2
0000ED42 0014 1211 0F0D 0BFE 0100   byte_E5EA:	dc.b 0,	$14, $12, $11, $F, $D, $B, $FE,	1, 0
0000ED4C                            		even
0000ED4C                            		even
0000ED4C                            
0000ED4C                            ; ---------------------------------------------------------------------------
0000ED4C                            ; Sprite mappings - flame thrower (SBZ)
0000ED4C                            ; ---------------------------------------------------------------------------
0000ED4C                            Map_obj6D:
0000ED4C                            	include "_maps\obj6D.asm"
0000ED4C                            ; ---------------------------------------------------------------------------
0000ED4C                            ; Sprite mappings - flame thrower (SBZ)
0000ED4C                            ; ---------------------------------------------------------------------------
0000ED4C 0000 0000                  		dc.w byte_E620-Map_obj6D, byte_E626-Map_obj6D
0000ED50 0000 0000                  		dc.w byte_E631-Map_obj6D, byte_E63C-Map_obj6D
0000ED54 0000 0000                  		dc.w byte_E64C-Map_obj6D, byte_E65C-Map_obj6D
0000ED58 0000 0000                  		dc.w byte_E671-Map_obj6D, byte_E686-Map_obj6D
0000ED5C 0000 0000                  		dc.w byte_E6A0-Map_obj6D, byte_E6BA-Map_obj6D
0000ED60 0000 0000                  		dc.w byte_E6D9-Map_obj6D, byte_E6F8-Map_obj6D
0000ED64 0000 0000                  		dc.w byte_E6FE-Map_obj6D, byte_E709-Map_obj6D
0000ED68 0000 0000                  		dc.w byte_E714-Map_obj6D, byte_E724-Map_obj6D
0000ED6C 0000 0000                  		dc.w byte_E734-Map_obj6D, byte_E749-Map_obj6D
0000ED70 0000 0000                  		dc.w byte_E75E-Map_obj6D, byte_E778-Map_obj6D
0000ED74 0000 0000                  		dc.w byte_E792-Map_obj6D, byte_E7B1-Map_obj6D
0000ED78 01                         byte_E620:	dc.b 1
0000ED79 2805 4014 FB               		dc.b $28, 5, $40, $14, $FB
0000ED7E 02                         byte_E626:	dc.b 2
0000ED7F 2001 0000 FD               		dc.b $20, 1, 0,	0, $FD
0000ED84 2805 4014 FB               		dc.b $28, 5, $40, $14, $FB
0000ED89 02                         byte_E631:	dc.b 2
0000ED8A 2001 0800 FC               		dc.b $20, 1, 8,	0, $FC
0000ED8F 2805 4014 FB               		dc.b $28, 5, $40, $14, $FB
0000ED94 03                         byte_E63C:	dc.b 3
0000ED95 1006 0002 F8               		dc.b $10, 6, 0,	2, $F8
0000ED9A 2001 0000 FD               		dc.b $20, 1, 0,	0, $FD
0000ED9F 2805 4014 FB               		dc.b $28, 5, $40, $14, $FB
0000EDA4 03                         byte_E64C:	dc.b 3
0000EDA5 1006 0802 F8               		dc.b $10, 6, 8,	2, $F8
0000EDAA 2001 0800 FC               		dc.b $20, 1, 8,	0, $FC
0000EDAF 2805 4014 FB               		dc.b $28, 5, $40, $14, $FB
0000EDB4 04                         byte_E65C:	dc.b 4
0000EDB5 0806 0002 F8               		dc.b 8,	6, 0, 2, $F8
0000EDBA 1006 0002 F8               		dc.b $10, 6, 0,	2, $F8
0000EDBF 2001 0000 FD               		dc.b $20, 1, 0,	0, $FD
0000EDC4 2805 4014 FB               		dc.b $28, 5, $40, $14, $FB
0000EDC9 04                         byte_E671:	dc.b 4
0000EDCA 0806 0802 F8               		dc.b 8,	6, 8, 2, $F8
0000EDCF 1006 0802 F8               		dc.b $10, 6, 8,	2, $F8
0000EDD4 2001 0800 FC               		dc.b $20, 1, 8,	0, $FC
0000EDD9 2805 4014 FB               		dc.b $28, 5, $40, $14, $FB
0000EDDE 05                         byte_E686:	dc.b 5
0000EDDF F80B 0008 F4               		dc.b $F8, $B, 0, 8, $F4
0000EDE4 0806 0002 F8               		dc.b 8,	6, 0, 2, $F8
0000EDE9 1006 0002 F8               		dc.b $10, 6, 0,	2, $F8
0000EDEE 2001 0000 FD               		dc.b $20, 1, 0,	0, $FD
0000EDF3 2805 4014 FB               		dc.b $28, 5, $40, $14, $FB
0000EDF8 05                         byte_E6A0:	dc.b 5
0000EDF9 F80B 0808 F4               		dc.b $F8, $B, 8, 8, $F4
0000EDFE 0806 0802 F8               		dc.b 8,	6, 8, 2, $F8
0000EE03 1006 0802 F8               		dc.b $10, 6, 8,	2, $F8
0000EE08 2001 0800 FC               		dc.b $20, 1, 8,	0, $FC
0000EE0D 2805 4014 FB               		dc.b $28, 5, $40, $14, $FB
0000EE12 06                         byte_E6BA:	dc.b 6
0000EE13 E80B 0008 F4               		dc.b $E8, $B, 0, 8, $F4
0000EE18 F70B 0008 F4               		dc.b $F7, $B, 0, 8, $F4
0000EE1D 0806 0002 F8               		dc.b 8,	6, 0, 2, $F8
0000EE22 0F06 0002 F8               		dc.b $F, 6, 0, 2, $F8
0000EE27 2001 0000 FD               		dc.b $20, 1, 0,	0, $FD
0000EE2C 2805 4014 FB               		dc.b $28, 5, $40, $14, $FB
0000EE31 06                         byte_E6D9:	dc.b 6
0000EE32 E70B 0808 F4               		dc.b $E7, $B, 8, 8, $F4
0000EE37 F80B 0808 F4               		dc.b $F8, $B, 8, 8, $F4
0000EE3C 0706 0802 F8               		dc.b 7,	6, 8, 2, $F8
0000EE41 1006 0802 F8               		dc.b $10, 6, 8,	2, $F8
0000EE46 2001 0800 FC               		dc.b $20, 1, 8,	0, $FC
0000EE4B 2805 4014 FB               		dc.b $28, 5, $40, $14, $FB
0000EE50 01                         byte_E6F8:	dc.b 1
0000EE51 2805 4018 F9               		dc.b $28, 5, $40, $18, $F9
0000EE56 02                         byte_E6FE:	dc.b 2
0000EE57 2805 4018 F9               		dc.b $28, 5, $40, $18, $F9
0000EE5C 2001 0000 FD               		dc.b $20, 1, 0,	0, $FD
0000EE61 02                         byte_E709:	dc.b 2
0000EE62 2805 4018 F9               		dc.b $28, 5, $40, $18, $F9
0000EE67 2001 0800 FC               		dc.b $20, 1, 8,	0, $FC
0000EE6C 03                         byte_E714:	dc.b 3
0000EE6D 1006 0002 F8               		dc.b $10, 6, 0,	2, $F8
0000EE72 2805 4018 F9               		dc.b $28, 5, $40, $18, $F9
0000EE77 2001 0000 FD               		dc.b $20, 1, 0,	0, $FD
0000EE7C 03                         byte_E724:	dc.b 3
0000EE7D 1006 0802 F8               		dc.b $10, 6, 8,	2, $F8
0000EE82 2805 4018 F9               		dc.b $28, 5, $40, $18, $F9
0000EE87 2001 0800 FC               		dc.b $20, 1, 8,	0, $FC
0000EE8C 04                         byte_E734:	dc.b 4
0000EE8D 0806 0002 F8               		dc.b 8,	6, 0, 2, $F8
0000EE92 1006 0002 F8               		dc.b $10, 6, 0,	2, $F8
0000EE97 2805 4018 F9               		dc.b $28, 5, $40, $18, $F9
0000EE9C 2001 0000 FD               		dc.b $20, 1, 0,	0, $FD
0000EEA1 04                         byte_E749:	dc.b 4
0000EEA2 0806 0802 F8               		dc.b 8,	6, 8, 2, $F8
0000EEA7 1006 0802 F8               		dc.b $10, 6, 8,	2, $F8
0000EEAC 2805 4018 F9               		dc.b $28, 5, $40, $18, $F9
0000EEB1 2001 0800 FC               		dc.b $20, 1, 8,	0, $FC
0000EEB6 05                         byte_E75E:	dc.b 5
0000EEB7 F80B 0008 F4               		dc.b $F8, $B, 0, 8, $F4
0000EEBC 0806 0002 F8               		dc.b 8,	6, 0, 2, $F8
0000EEC1 1006 0002 F8               		dc.b $10, 6, 0,	2, $F8
0000EEC6 2805 4018 F9               		dc.b $28, 5, $40, $18, $F9
0000EECB 2001 0000 FD               		dc.b $20, 1, 0,	0, $FD
0000EED0 05                         byte_E778:	dc.b 5
0000EED1 F80B 0808 F4               		dc.b $F8, $B, 8, 8, $F4
0000EED6 0806 0802 F8               		dc.b 8,	6, 8, 2, $F8
0000EEDB 1006 0802 F8               		dc.b $10, 6, 8,	2, $F8
0000EEE0 2805 4018 F9               		dc.b $28, 5, $40, $18, $F9
0000EEE5 2001 0800 FC               		dc.b $20, 1, 8,	0, $FC
0000EEEA 06                         byte_E792:	dc.b 6
0000EEEB E80B 0008 F4               		dc.b $E8, $B, 0, 8, $F4
0000EEF0 F70B 0008 F4               		dc.b $F7, $B, 0, 8, $F4
0000EEF5 0806 0002 F8               		dc.b 8,	6, 0, 2, $F8
0000EEFA 0F06 0002 F8               		dc.b $F, 6, 0, 2, $F8
0000EEFF 2805 4018 F9               		dc.b $28, 5, $40, $18, $F9
0000EF04 2001 0000 FD               		dc.b $20, 1, 0,	0, $FD
0000EF09 06                         byte_E7B1:	dc.b 6
0000EF0A E70B 0808 F4               		dc.b $E7, $B, 8, 8, $F4
0000EF0F F80B 0808 F4               		dc.b $F8, $B, 8, 8, $F4
0000EF14 0706 0802 F8               		dc.b 7,	6, 8, 2, $F8
0000EF19 1006 0802 F8               		dc.b $10, 6, 8,	2, $F8
0000EF1E 2805 4018 F9               		dc.b $28, 5, $40, $18, $F9
0000EF23 2001 0800 FC               		dc.b $20, 1, 8,	0, $FC
0000EF28                            		even
0000EF28                            		even
0000EF28                            
0000EF28                            ; ===========================================================================
0000EF28                            ; ---------------------------------------------------------------------------
0000EF28                            ; Object 46 - solid blocks and blocks that fall	from the ceiling (MZ)
0000EF28                            ; ---------------------------------------------------------------------------
0000EF28                            
0000EF28                            Obj46:					; XREF: Obj_Index
0000EF28 7000                       		moveq	#0,d0
0000EF2A 1028 0024                  		move.b	$24(a0),d0
0000EF2E 323B 0000                  		move.w	Obj46_Index(pc,d0.w),d1
0000EF32 4EFB 1000                  		jmp	Obj46_Index(pc,d1.w)
0000EF36                            ; ===========================================================================
0000EF36 0000                       Obj46_Index:	dc.w Obj46_Main-Obj46_Index
0000EF38 0000                       		dc.w Obj46_Action-Obj46_Index
0000EF3A                            ; ===========================================================================
0000EF3A                            
0000EF3A                            Obj46_Main:				; XREF: Obj46_Index
0000EF3A 5428 0024                  		addq.b	#2,$24(a0)
0000EF3E 117C 000F 0016             		move.b	#$F,$16(a0)
0000EF44 117C 000F 0017             		move.b	#$F,$17(a0)
0000EF4A 217C 0000 0000 0004        		move.l	#Map_obj46,4(a0)
0000EF52 317C 4000 0002             		move.w	#$4000,2(a0)
0000EF58 117C 0004 0001             		move.b	#4,1(a0)
0000EF5E 117C 0003 0018             		move.b	#3,$18(a0)
0000EF64 117C 0010 0019             		move.b	#$10,$19(a0)
0000EF6A 3168 000C 0030             		move.w	$C(a0),$30(a0)
0000EF70 317C 05C0 0032             		move.w	#$5C0,$32(a0)
0000EF76                            
0000EF76                            Obj46_Action:				; XREF: Obj46_Index
0000EF76 4A28 0001                  		tst.b	1(a0)
0000EF7A 6A00                       		bpl.s	Obj46_ChkDel
0000EF7C 7000                       		moveq	#0,d0
0000EF7E 1028 0028                  		move.b	$28(a0),d0	; get object type
0000EF82 0240 0007                  		andi.w	#7,d0		; read only the	1st digit
0000EF86 D040                       		add.w	d0,d0
0000EF88 323B 0000                  		move.w	Obj46_TypeIndex(pc,d0.w),d1
0000EF8C 4EBB 1000                  		jsr	Obj46_TypeIndex(pc,d1.w)
0000EF90 323C 001B                  		move.w	#$1B,d1
0000EF94 343C 0010                  		move.w	#$10,d2
0000EF98 363C 0011                  		move.w	#$11,d3
0000EF9C 3828 0008                  		move.w	8(a0),d4
0000EFA0 6100 0000                  		bsr.w	SolidObject
0000EFA4                            
0000EFA4                            Obj46_ChkDel:
0000EFA4 6100 EDBC                  		bsr.w	DisplaySprite
0000EFA8 3028 0008                  		move.w	8(a0),d0
0000EFAC 0240 FF80                  		andi.w	#$FF80,d0
0000EFB0 3238 F700                  		move.w	($FFFFF700).w,d1
0000EFB4 0441 0080                  		subi.w	#$80,d1
0000EFB8 0241 FF80                  		andi.w	#$FF80,d1
0000EFBC 9041                       		sub.w	d1,d0
0000EFBE 0C40 0280                  		cmpi.w	#$280,d0
0000EFC2 6200 EDDA                  		bhi.w	DeleteObject
0000EFC6 4E75                       		rts	
0000EFC8                            ; ===========================================================================
0000EFC8 0000                       Obj46_TypeIndex:dc.w Obj46_Type00-Obj46_TypeIndex
0000EFCA 0000                       		dc.w Obj46_Type01-Obj46_TypeIndex
0000EFCC 0000                       		dc.w Obj46_Type02-Obj46_TypeIndex
0000EFCE 0000                       		dc.w Obj46_Type03-Obj46_TypeIndex
0000EFD0 0000                       		dc.w Obj46_Type04-Obj46_TypeIndex
0000EFD2                            ; ===========================================================================
0000EFD2                            
0000EFD2                            Obj46_Type00:				; XREF: Obj46_TypeIndex
0000EFD2 4E75                       		rts	
0000EFD4                            ; ===========================================================================
0000EFD4                            
0000EFD4                            Obj46_Type02:				; XREF: Obj46_TypeIndex
0000EFD4 3038 D008                  		move.w	($FFFFD008).w,d0
0000EFD8 9068 0008                  		sub.w	8(a0),d0
0000EFDC 6400                       		bcc.s	loc_E888
0000EFDE 4440                       		neg.w	d0
0000EFE0                            
0000EFE0                            loc_E888:
0000EFE0 0C40 0090                  		cmpi.w	#$90,d0		; is Sonic within $90 pixels of	the block?
0000EFE4 6400                       		bcc.s	Obj46_Type01	; if not, resume wobbling
0000EFE6 117C 0003 0028             		move.b	#3,$28(a0)	; if yes, make the block fall
0000EFEC                            
0000EFEC                            Obj46_Type01:				; XREF: Obj46_TypeIndex
0000EFEC 7000                       		moveq	#0,d0
0000EFEE 1038 FE74                  		move.b	($FFFFFE74).w,d0
0000EFF2 0828 0003 0028             		btst	#3,$28(a0)
0000EFF8 6700                       		beq.s	loc_E8A8
0000EFFA 4440                       		neg.w	d0
0000EFFC 0640 0010                  		addi.w	#$10,d0
0000F000                            
0000F000                            loc_E8A8:
0000F000 3228 0030                  		move.w	$30(a0),d1
0000F004 9240                       		sub.w	d0,d1
0000F006 3141 000C                  		move.w	d1,$C(a0)	; update the block's position to make it wobble
0000F00A 4E75                       		rts	
0000F00C                            ; ===========================================================================
0000F00C                            
0000F00C                            Obj46_Type03:				; XREF: Obj46_TypeIndex
0000F00C 6100 ED2E                  		bsr.w	SpeedToPos
0000F010 0668 0018 0012             		addi.w	#$18,$12(a0)	; increase falling speed
0000F016 6100 0000                  		bsr.w	ObjHitFloor
0000F01A 4A41                       		tst.w	d1		; has the block	hit the	floor?
0000F01C 6A00 0000                  		bpl.w	locret_E8EE	; if not, branch
0000F020 D368 000C                  		add.w	d1,$C(a0)
0000F024 4268 0012                  		clr.w	$12(a0)		; stop the block falling
0000F028 3168 000C 0030             		move.w	$C(a0),$30(a0)
0000F02E 117C 0004 0028             		move.b	#4,$28(a0)
0000F034 3011                       		move.w	(a1),d0
0000F036 0240 03FF                  		andi.w	#$3FF,d0
0000F03A 0C40 02E8                  		cmpi.w	#$2E8,d0
0000F03E 6400                       		bcc.s	locret_E8EE
0000F040 117C 0000 0028             		move.b	#0,$28(a0)
0000F046                            
0000F046                            locret_E8EE:
0000F046 4E75                       		rts	
0000F048                            ; ===========================================================================
0000F048                            
0000F048                            Obj46_Type04:				; XREF: Obj46_TypeIndex
0000F048 7000                       		moveq	#0,d0
0000F04A 1038 FE70                  		move.b	($FFFFFE70).w,d0
0000F04E E648                       		lsr.w	#3,d0
0000F050 3228 0030                  		move.w	$30(a0),d1
0000F054 9240                       		sub.w	d0,d1
0000F056 3141 000C                  		move.w	d1,$C(a0)	; make the block wobble
0000F05A 4E75                       		rts	
0000F05C                            ; ===========================================================================
0000F05C                            ; ---------------------------------------------------------------------------
0000F05C                            ; Sprite mappings - solid blocks and blocks that fall from the ceiling (MZ)
0000F05C                            ; ---------------------------------------------------------------------------
0000F05C                            Map_obj46:
0000F05C                            	include "_maps\obj46.asm"
0000F05C                            ; ---------------------------------------------------------------------------
0000F05C                            ; Sprite mappings - solid blocks and blocks that fall from the ceiling (MZ)
0000F05C                            ; ---------------------------------------------------------------------------
0000F05C 0000                       		dc.w byte_E906-Map_obj46
0000F05E 01                         byte_E906:	dc.b 1
0000F05F F00F 0001 F0               		dc.b $F0, $F, 0, 1, $F0
0000F064                            		even
0000F064                            		even
0000F064                            
0000F064                            ; ===========================================================================
0000F064                            ; ---------------------------------------------------------------------------
0000F064                            ; Object 12 - lamp (SYZ)
0000F064                            ; ---------------------------------------------------------------------------
0000F064                            
0000F064                            Obj12:					; XREF: Obj_Index
0000F064 7000                       		moveq	#0,d0
0000F066 1028 0024                  		move.b	$24(a0),d0
0000F06A 323B 0000                  		move.w	Obj12_Index(pc,d0.w),d1
0000F06E 4EFB 1000                  		jmp	Obj12_Index(pc,d1.w)
0000F072                            ; ===========================================================================
0000F072 0000                       Obj12_Index:	dc.w Obj12_Main-Obj12_Index
0000F074 0000                       		dc.w Obj12_Animate-Obj12_Index
0000F076                            ; ===========================================================================
0000F076                            
0000F076                            Obj12_Main:				; XREF: Obj12_Index
0000F076 5428 0024                  		addq.b	#2,$24(a0)
0000F07A 217C 0000 0000 0004        		move.l	#Map_obj12,4(a0)
0000F082 317C 0000 0002             		move.w	#0,2(a0)
0000F088 117C 0004 0001             		move.b	#4,1(a0)
0000F08E 117C 0010 0019             		move.b	#$10,$19(a0)
0000F094 117C 0006 0018             		move.b	#6,$18(a0)
0000F09A                            
0000F09A                            Obj12_Animate:				; XREF: Obj12_Index
0000F09A 5328 001E                  		subq.b	#1,$1E(a0)
0000F09E 6A00                       		bpl.s	Obj12_ChkDel
0000F0A0 117C 0007 001E             		move.b	#7,$1E(a0)
0000F0A6 5228 001A                  		addq.b	#1,$1A(a0)
0000F0AA 0C28 0006 001A             		cmpi.b	#6,$1A(a0)
0000F0B0 6500                       		bcs.s	Obj12_ChkDel
0000F0B2 117C 0000 001A             		move.b	#0,$1A(a0)
0000F0B8                            
0000F0B8                            Obj12_ChkDel:
0000F0B8 3028 0008                  		move.w	8(a0),d0
0000F0BC 0240 FF80                  		andi.w	#$FF80,d0
0000F0C0 3238 F700                  		move.w	($FFFFF700).w,d1
0000F0C4 0441 0080                  		subi.w	#$80,d1
0000F0C8 0241 FF80                  		andi.w	#$FF80,d1
0000F0CC 9041                       		sub.w	d1,d0
0000F0CE 0C40 0280                  		cmpi.w	#$280,d0
0000F0D2 6200 ECCA                  		bhi.w	DeleteObject
0000F0D6 6000 EC8A                  		bra.w	DisplaySprite
0000F0DA                            ; ===========================================================================
0000F0DA                            ; ---------------------------------------------------------------------------
0000F0DA                            ; Sprite mappings - lamp (SYZ)
0000F0DA                            ; ---------------------------------------------------------------------------
0000F0DA                            Map_obj12:
0000F0DA                            	include "_maps\obj12.asm"
0000F0DA                            ; ---------------------------------------------------------------------------
0000F0DA                            ; Sprite mappings - lamp (SYZ)
0000F0DA                            ; ---------------------------------------------------------------------------
0000F0DA 0000 0000                  		dc.w byte_E98E-Map_obj12, byte_E999-Map_obj12
0000F0DE 0000 0000                  		dc.w byte_E9A4-Map_obj12, byte_E9AF-Map_obj12
0000F0E2 0000 0000                  		dc.w byte_E9BA-Map_obj12, byte_E9C5-Map_obj12
0000F0E6 02                         byte_E98E:	dc.b 2
0000F0E7 F80C 0031 F0               		dc.b $F8, $C, 0, $31, $F0
0000F0EC 000C 1031 F0               		dc.b 0,	$C, $10, $31, $F0
0000F0F1 02                         byte_E999:	dc.b 2
0000F0F2 F80C 0035 F0               		dc.b $F8, $C, 0, $35, $F0
0000F0F7 000C 1035 F0               		dc.b 0,	$C, $10, $35, $F0
0000F0FC 02                         byte_E9A4:	dc.b 2
0000F0FD F80C 0039 F0               		dc.b $F8, $C, 0, $39, $F0
0000F102 000C 1039 F0               		dc.b 0,	$C, $10, $39, $F0
0000F107 02                         byte_E9AF:	dc.b 2
0000F108 F80C 003D F0               		dc.b $F8, $C, 0, $3D, $F0
0000F10D 000C 103D F0               		dc.b 0,	$C, $10, $3D, $F0
0000F112 02                         byte_E9BA:	dc.b 2
0000F113 F80C 0041 F0               		dc.b $F8, $C, 0, $41, $F0
0000F118 000C 1041 F0               		dc.b 0,	$C, $10, $41, $F0
0000F11D 02                         byte_E9C5:	dc.b 2
0000F11E F80C 0045 F0               		dc.b $F8, $C, 0, $45, $F0
0000F123 000C 1045 F0               		dc.b 0,	$C, $10, $45, $F0
0000F128                            		even
0000F128                            		even
0000F128                            
0000F128                            ; ===========================================================================
0000F128                            ; ---------------------------------------------------------------------------
0000F128                            ; Object 47 - pinball bumper (SYZ)
0000F128                            ; ---------------------------------------------------------------------------
0000F128                            
0000F128                            Obj47:					; XREF: Obj_Index
0000F128 7000                       		moveq	#0,d0
0000F12A 1028 0024                  		move.b	$24(a0),d0
0000F12E 323B 0000                  		move.w	Obj47_Index(pc,d0.w),d1
0000F132 4EFB 1000                  		jmp	Obj47_Index(pc,d1.w)
0000F136                            ; ===========================================================================
0000F136 0000                       Obj47_Index:	dc.w Obj47_Main-Obj47_Index
0000F138 0000                       		dc.w Obj47_Hit-Obj47_Index
0000F13A                            ; ===========================================================================
0000F13A                            
0000F13A                            Obj47_Main:				; XREF: Obj47_Index
0000F13A 5428 0024                  		addq.b	#2,$24(a0)
0000F13E 217C 0000 0000 0004        		move.l	#Map_obj47,4(a0)
0000F146 317C 0380 0002             		move.w	#$380,2(a0)
0000F14C 117C 0004 0001             		move.b	#4,1(a0)
0000F152 117C 0010 0019             		move.b	#$10,$19(a0)
0000F158 117C 0001 0018             		move.b	#1,$18(a0)
0000F15E 117C 00D7 0020             		move.b	#$D7,$20(a0)
0000F164                            
0000F164                            Obj47_Hit:				; XREF: Obj47_Index
0000F164 4A28 0021                  		tst.b	$21(a0)		; has Sonic touched the	bumper?
0000F168 6700 0000                  		beq.w	Obj47_Display	; if not, branch
0000F16C 4228 0021                  		clr.b	$21(a0)
0000F170 43F8 D000                  		lea	($FFFFD000).w,a1
0000F174 3228 0008                  		move.w	8(a0),d1
0000F178 3428 000C                  		move.w	$C(a0),d2
0000F17C 9269 0008                  		sub.w	8(a1),d1
0000F180 9469 000C                  		sub.w	$C(a1),d2
0000F184 4EB9 0000 2F32             		jsr	(CalcAngle).l
0000F18A 4EB9 0000 2C64             		jsr	(CalcSine).l
0000F190 C3FC F900                  		muls.w	#-$700,d1
0000F194 E081                       		asr.l	#8,d1
0000F196 3341 0010                  		move.w	d1,$10(a1)	; bounce Sonic away
0000F19A C1FC F900                  		muls.w	#-$700,d0
0000F19E E080                       		asr.l	#8,d0
0000F1A0 3340 0012                  		move.w	d0,$12(a1)	; bounce Sonic away
0000F1A4 08E9 0001 0022             		bset	#1,$22(a1)
0000F1AA 08A9 0004 0022             		bclr	#4,$22(a1)
0000F1B0 08A9 0005 0022             		bclr	#5,$22(a1)
0000F1B6 4229 003C                  		clr.b	$3C(a1)
0000F1BA 117C 0001 001C             		move.b	#1,$1C(a0)
0000F1C0 303C 00B4                  		move.w	#$B4,d0
0000F1C4 4EB9 0000 15C0             		jsr	(PlaySound_Special).l ;	play bumper sound
0000F1CA 45F8 FC00                  		lea	($FFFFFC00).w,a2
0000F1CE 7000                       		moveq	#0,d0
0000F1D0 1028 0023                  		move.b	$23(a0),d0
0000F1D4 6700                       		beq.s	Obj47_Score
0000F1D6 0C32 008A 0002             		cmpi.b	#$8A,2(a2,d0.w)	; has bumper been hit $8A times?
0000F1DC 6400                       		bcc.s	Obj47_Display	; if yes, Sonic	gets no	points
0000F1DE 5232 0002                  		addq.b	#1,2(a2,d0.w)
0000F1E2                            
0000F1E2                            Obj47_Score:
0000F1E2 7001                       		moveq	#1,d0
0000F1E4 4EB9 0000 0000             		jsr	AddPoints	; add 10 to score
0000F1EA 6100 EFFC                  		bsr.w	SingleObjLoad
0000F1EE 6600                       		bne.s	Obj47_Display
0000F1F0 12BC 0029                  		move.b	#$29,0(a1)	; load points object
0000F1F4 3368 0008 0008             		move.w	8(a0),8(a1)
0000F1FA 3368 000C 000C             		move.w	$C(a0),$C(a1)
0000F200 137C 0004 001A             		move.b	#4,$1A(a1)
0000F206                            
0000F206                            Obj47_Display:
0000F206 43F9 0000 0000             		lea	(Ani_obj47).l,a1
0000F20C 6100 BC14                  		bsr.w	AnimateSprite
0000F210 3028 0008                  		move.w	8(a0),d0
0000F214 0240 FF80                  		andi.w	#$FF80,d0
0000F218 3238 F700                  		move.w	($FFFFF700).w,d1
0000F21C 0441 0080                  		subi.w	#$80,d1
0000F220 0241 FF80                  		andi.w	#$FF80,d1
0000F224 9041                       		sub.w	d1,d0
0000F226 0C40 0280                  		cmpi.w	#$280,d0
0000F22A 6200                       		bhi.s	Obj47_ChkHit
0000F22C 6000 EB34                  		bra.w	DisplaySprite
0000F230                            ; ===========================================================================
0000F230                            
0000F230                            Obj47_ChkHit:				; XREF: Obj47_Display
0000F230 45F8 FC00                  		lea	($FFFFFC00).w,a2
0000F234 7000                       		moveq	#0,d0
0000F236 1028 0023                  		move.b	$23(a0),d0
0000F23A 6700                       		beq.s	Obj47_Delete
0000F23C 08B2 0007 0002             		bclr	#7,2(a2,d0.w)
0000F242                            
0000F242                            Obj47_Delete:
0000F242 6000 EB5A                  		bra.w	DeleteObject
0000F246                            ; ===========================================================================
0000F246                            Ani_obj47:
0000F246                            	include "_anim\obj47.asm"
0000F246                            ; ---------------------------------------------------------------------------
0000F246                            ; Animation script - flamethrower (SBZ)
0000F246                            ; ---------------------------------------------------------------------------
0000F246 0000                       		dc.w byte_EAF4-Ani_obj47
0000F248 0000                       		dc.w byte_EAF8-Ani_obj47
0000F24A 0F00 FF00                  byte_EAF4:	dc.b $F, 0, $FF, 0
0000F24E 0301 0201 02FD 0000        byte_EAF8:	dc.b 3,	1, 2, 1, 2, $FD, 0, 0
0000F256                            		even
0000F256                            		even
0000F256                            
0000F256                            ; ---------------------------------------------------------------------------
0000F256                            ; Sprite mappings - pinball bumper (SYZ)
0000F256                            ; ---------------------------------------------------------------------------
0000F256                            Map_obj47:
0000F256                            	include "_maps\obj47.asm"
0000F256                            ; ---------------------------------------------------------------------------
0000F256                            ; Sprite mappings - pinball bumper (SYZ)
0000F256                            ; ---------------------------------------------------------------------------
0000F256 0000                       		dc.w byte_EB06-Map_obj47
0000F258 0000                       		dc.w byte_EB11-Map_obj47
0000F25A 0000                       		dc.w byte_EB1C-Map_obj47
0000F25C 02                         byte_EB06:	dc.b 2
0000F25D F007 0000 F0               		dc.b $F0, 7, 0,	0, $F0
0000F262 F007 0800 00               		dc.b $F0, 7, 8,	0, 0
0000F267 02                         byte_EB11:	dc.b 2
0000F268 F406 0008 F4               		dc.b $F4, 6, 0,	8, $F4
0000F26D F402 0808 04               		dc.b $F4, 2, 8,	8, 4
0000F272 02                         byte_EB1C:	dc.b 2
0000F273 F007 000E F0               		dc.b $F0, 7, 0,	$E, $F0
0000F278 F007 080E 00               		dc.b $F0, 7, 8,	$E, 0
0000F27E 00                         		even
0000F27E 00                         		even
0000F27E                            
0000F27E                            ; ===========================================================================
0000F27E                            ; ---------------------------------------------------------------------------
0000F27E                            ; Object 0D - signpost at the end of a level
0000F27E                            ; ---------------------------------------------------------------------------
0000F27E                            
0000F27E                            Obj0D:					; XREF: Obj_Index
0000F27E 7000                       		moveq	#0,d0
0000F280 1028 0024                  		move.b	$24(a0),d0
0000F284 323B 0000                  		move.w	Obj0D_Index(pc,d0.w),d1
0000F288 4EBB 1000                  		jsr	Obj0D_Index(pc,d1.w)
0000F28C 43F9 0000 0000             		lea	(Ani_obj0D).l,a1
0000F292 6100 BB8E                  		bsr.w	AnimateSprite
0000F296 6100 EACA                  		bsr.w	DisplaySprite
0000F29A 3028 0008                  		move.w	8(a0),d0
0000F29E 0240 FF80                  		andi.w	#$FF80,d0
0000F2A2 3238 F700                  		move.w	($FFFFF700).w,d1
0000F2A6 0441 0080                  		subi.w	#$80,d1
0000F2AA 0241 FF80                  		andi.w	#$FF80,d1
0000F2AE 9041                       		sub.w	d1,d0
0000F2B0 0C40 0280                  		cmpi.w	#$280,d0
0000F2B4 6200 EAE8                  		bhi.w	DeleteObject
0000F2B8 4E75                       		rts	
0000F2BA                            ; ===========================================================================
0000F2BA 0000                       Obj0D_Index:	dc.w Obj0D_Main-Obj0D_Index
0000F2BC 0000                       		dc.w Obj0D_Touch-Obj0D_Index
0000F2BE 0000                       		dc.w Obj0D_Spin-Obj0D_Index
0000F2C0 0000                       		dc.w Obj0D_SonicRun-Obj0D_Index
0000F2C2 0000                       		dc.w locret_ED1A-Obj0D_Index
0000F2C4                            ; ===========================================================================
0000F2C4                            
0000F2C4                            Obj0D_Main:				; XREF: Obj0D_Index
0000F2C4 5428 0024                  		addq.b	#2,$24(a0)
0000F2C8 217C 0000 0000 0004        		move.l	#Map_obj0D,4(a0)
0000F2D0 317C 0680 0002             		move.w	#$680,2(a0)
0000F2D6 117C 0004 0001             		move.b	#4,1(a0)
0000F2DC 117C 0018 0019             		move.b	#$18,$19(a0)
0000F2E2 117C 0004 0018             		move.b	#4,$18(a0)
0000F2E8                            
0000F2E8                            Obj0D_Touch:				; XREF: Obj0D_Index
0000F2E8 3038 D008                  		move.w	($FFFFD008).w,d0
0000F2EC 9068 0008                  		sub.w	8(a0),d0
0000F2F0 6500                       		bcs.s	locret_EBBA
0000F2F2 0C40 0020                  		cmpi.w	#$20,d0		; is Sonic within $20 pixels of	the signpost?
0000F2F6 6400                       		bcc.s	locret_EBBA	; if not, branch
0000F2F8 303C 00CF                  		move.w	#$CF,d0
0000F2FC 4EB9 0000 15BA             		jsr	(PlaySound).l	; play signpost	sound
0000F302 4238 FE1E                  		clr.b	($FFFFFE1E).w	; stop time counter
0000F306 31F8 F72A F728             		move.w	($FFFFF72A).w,($FFFFF728).w ; lock screen position
0000F30C 5428 0024                  		addq.b	#2,$24(a0)
0000F310                            
0000F310                            locret_EBBA:
0000F310 4E75                       		rts	
0000F312                            ; ===========================================================================
0000F312                            
0000F312                            Obj0D_Spin:				; XREF: Obj0D_Index
0000F312 5368 0030                  		subq.w	#1,$30(a0)	; subtract 1 from spin time
0000F316 6A00                       		bpl.s	Obj0D_Sparkle	; if time remains, branch
0000F318 317C 003C 0030             		move.w	#60,$30(a0)	; set spin cycle time to 1 second
0000F31E 5228 001C                  		addq.b	#1,$1C(a0)	; next spin cycle
0000F322 0C28 0003 001C             		cmpi.b	#3,$1C(a0)	; have 3 spin cycles completed?
0000F328 6600                       		bne.s	Obj0D_Sparkle	; if not, branch
0000F32A 5428 0024                  		addq.b	#2,$24(a0)
0000F32E                            
0000F32E                            Obj0D_Sparkle:
0000F32E 5368 0032                  		subq.w	#1,$32(a0)	; subtract 1 from time delay
0000F332 6A00                       		bpl.s	locret_EC42	; if time remains, branch
0000F334 317C 000B 0032             		move.w	#$B,$32(a0)	; set time between sparkles to $B frames
0000F33A 7000                       		moveq	#0,d0
0000F33C 1028 0034                  		move.b	$34(a0),d0
0000F340 5428 0034                  		addq.b	#2,$34(a0)
0000F344 0228 000E 0034             		andi.b	#$E,$34(a0)
0000F34A 45FB 0000                  		lea	Obj0D_SparkPos(pc,d0.w),a2 ; load sparkle position data
0000F34E 6100 EE98                  		bsr.w	SingleObjLoad
0000F352 6600                       		bne.s	locret_EC42
0000F354 12BC 0025                  		move.b	#$25,0(a1)	; load rings object
0000F358 137C 0006 0024             		move.b	#6,$24(a1)	; jump to ring sparkle subroutine
0000F35E 101A                       		move.b	(a2)+,d0
0000F360 4880                       		ext.w	d0
0000F362 D068 0008                  		add.w	8(a0),d0
0000F366 3340 0008                  		move.w	d0,8(a1)
0000F36A 101A                       		move.b	(a2)+,d0
0000F36C 4880                       		ext.w	d0
0000F36E D068 000C                  		add.w	$C(a0),d0
0000F372 3340 000C                  		move.w	d0,$C(a1)
0000F376 237C 0000 A5C0 0004        		move.l	#Map_obj25,4(a1)
0000F37E 337C 27B2 0002             		move.w	#$27B2,2(a1)
0000F384 137C 0004 0001             		move.b	#4,1(a1)
0000F38A 137C 0002 0018             		move.b	#2,$18(a1)
0000F390 137C 0008 0019             		move.b	#8,$19(a1)
0000F396                            
0000F396                            locret_EC42:
0000F396 4E75                       		rts	
0000F398                            ; ===========================================================================
0000F398 E8F0                       Obj0D_SparkPos:	dc.b -$18,-$10		; x-position, y-position
0000F39A 0808                       		dc.b	8,   8
0000F39C F000                       		dc.b -$10,   0
0000F39E 18F8                       		dc.b  $18,  -8
0000F3A0 00F8                       		dc.b	0,  -8
0000F3A2 1000                       		dc.b  $10,   0
0000F3A4 E808                       		dc.b -$18,   8
0000F3A6 1810                       		dc.b  $18, $10
0000F3A8                            ; ===========================================================================
0000F3A8                            
0000F3A8                            Obj0D_SonicRun:				; XREF: Obj0D_Index
0000F3A8 4A78 FE08                  		tst.w	($FFFFFE08).w	; is debug mode	on?
0000F3AC 6600 0000                  		bne.w	locret_ECEE	; if yes, branch
0000F3B0 0838 0001 D022             		btst	#1,($FFFFD022).w
0000F3B6 6600                       		bne.s	loc_EC70
0000F3B8 11FC 0001 F7CC             		move.b	#1,($FFFFF7CC).w ; lock	controls
0000F3BE 0838 0000 FE2F             		btst	#0,($FFFFFE2F).w	; GMZ: Have we got a reverse control power up?
0000F3C4 6700                       		beq.s	Obj0D_MoveLeft	; GMZ: If not, branch
0000F3C6 31FC 0400 F602             		move.w	#$400,($FFFFF602).w ; make Sonic run to	the right
0000F3CC 6000                       		bra.s	loc_EC70
0000F3CE                            
0000F3CE                            Obj0D_MoveLeft:
0000F3CE 31FC 0800 F602             		move.w	#$800,($FFFFF602).w ; make Sonic run to	the right
0000F3D4                            
0000F3D4                            loc_EC70:
0000F3D4 4A38 D000                  		tst.b	($FFFFD000).w
0000F3D8 6700                       		beq.s	loc_EC86
0000F3DA 3038 D008                  		move.w	($FFFFD008).w,d0
0000F3DE 3238 F72A                  		move.w	($FFFFF72A).w,d1
0000F3E2 0641 0128                  		addi.w	#$128,d1
0000F3E6 B041                       		cmp.w	d1,d0
0000F3E8 6500                       		bcs.s	locret_ECEE
0000F3EA                            
0000F3EA                            loc_EC86:
0000F3EA 5428 0024                  		addq.b	#2,$24(a0)
0000F3EE                            
0000F3EE                            ; ---------------------------------------------------------------------------
0000F3EE                            ; Subroutine to	set up bonuses at the end of an	act
0000F3EE                            ; ---------------------------------------------------------------------------
0000F3EE                            
0000F3EE                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000F3EE                            
0000F3EE                            
0000F3EE                            GotThroughAct:				; XREF: Obj3E_EndAct
0000F3EE 4A38 D5C0                  		tst.b	($FFFFD5C0).w
0000F3F2 6600                       		bne.s	locret_ECEE
0000F3F4 31F8 F72A F728             		move.w	($FFFFF72A).w,($FFFFF728).w
0000F3FA 4238 FE2D                  		clr.b	($FFFFFE2D).w	; disable invincibility
0000F3FE 4238 FE1E                  		clr.b	($FFFFFE1E).w	; stop time counter
0000F402 11FC 003A D5C0             		move.b	#$3A,($FFFFD5C0).w
0000F408 7010                       		moveq	#$10,d0
0000F40A 4EB9 0000 17D6             		jsr	(LoadPLC2).l	; load title card patterns
0000F410 11FC 0001 F7D6             		move.b	#1,($FFFFF7D6).w
0000F416 7000                       		moveq	#0,d0
0000F418 1038 FE23                  		move.b	($FFFFFE23).w,d0
0000F41C C0FC 003C                  		mulu.w	#60,d0		; convert minutes to seconds
0000F420 7200                       		moveq	#0,d1
0000F422 1238 FE24                  		move.b	($FFFFFE24).w,d1
0000F426 D041                       		add.w	d1,d0		; add up your time
0000F428 80FC 000F                  		divu.w	#15,d0		; divide by 15
0000F42C 7214                       		moveq	#$14,d1
0000F42E B041                       		cmp.w	d1,d0		; is time 5 minutes or higher?
0000F430 6500                       		bcs.s	loc_ECD0	; if not, branch
0000F432 3001                       		move.w	d1,d0		; use minimum time bonus (0)
0000F434                            
0000F434                            loc_ECD0:
0000F434 D040                       		add.w	d0,d0
0000F436 31FB 0000 F7D2             		move.w	TimeBonuses(pc,d0.w),($FFFFF7D2).w ; set time bonus
0000F43C 3038 FE20                  		move.w	($FFFFFE20).w,d0 ; load	number of rings
0000F440 C0FC 000A                  		mulu.w	#10,d0		; multiply by 10
0000F444 31C0 F7D4                  		move.w	d0,($FFFFF7D4).w ; set ring bonus
0000F448 303C 008E                  		move.w	#$8E,d0
0000F44C 4EB9 0000 15C0             		jsr	(PlaySound_Special).l ;	play "Sonic got	through" music
0000F452                            
0000F452                            locret_ECEE:
0000F452 4E75                       		rts	
0000F454                            ; End of function GotThroughAct
0000F454                            
0000F454                            ; ===========================================================================
0000F454 1388 1388 03E8 01F4 0190+  TimeBonuses:	dc.w 5000, 5000, 1000, 500, 400, 400, 300, 300,	200, 200
0000F468 00C8 00C8 0064 0064 0064+  		dc.w 200, 200, 100, 100, 100, 100, 50, 50, 50, 50, 0
0000F47E                            ; ===========================================================================
0000F47E                            
0000F47E                            locret_ED1A:				; XREF: Obj0D_Index
0000F47E 4E75                       		rts	
0000F480                            ; ===========================================================================
0000F480                            Ani_obj0D:
0000F480                            	include "_anim\obj0D.asm"
0000F480                            ; ---------------------------------------------------------------------------
0000F480                            ; Animation script - signpost
0000F480                            ; ---------------------------------------------------------------------------
0000F480 0000                       		dc.w byte_ED24-Ani_obj0D
0000F482 0000                       		dc.w byte_ED28-Ani_obj0D
0000F484 0000                       		dc.w byte_ED2E-Ani_obj0D
0000F486 0000                       		dc.w byte_ED34-Ani_obj0D
0000F488 0F00 FF00                  byte_ED24:	dc.b $F, 0, $FF, 0
0000F48C 0100 0102 03FF             byte_ED28:	dc.b 1,	0, 1, 2, 3, $FF
0000F492 0104 0102 03FF             byte_ED2E:	dc.b 1,	4, 1, 2, 3, $FF
0000F498 0F04 FF                    byte_ED34:	dc.b $F, 4, $FF
0000F49C 00                         		even
0000F49C 00                         		even
0000F49C                            
0000F49C                            ; ---------------------------------------------------------------------------
0000F49C                            ; Sprite mappings - signpost
0000F49C                            ; ---------------------------------------------------------------------------
0000F49C                            Map_obj0D:
0000F49C                            	include "_maps\obj0D.asm"
0000F49C                            ; ---------------------------------------------------------------------------
0000F49C                            ; Sprite mappings - signpost
0000F49C                            ; ---------------------------------------------------------------------------
0000F49C 0000 0000                  		dc.w byte_ED42-Map_obj0D, byte_ED52-Map_obj0D
0000F4A0 0000 0000                  		dc.w byte_ED5D-Map_obj0D, byte_ED68-Map_obj0D
0000F4A4 0000                       		dc.w byte_ED73-Map_obj0D
0000F4A6 03                         byte_ED42:	dc.b 3
0000F4A7 F00B 0000 E8               		dc.b $F0, $B, 0, 0, $E8
0000F4AC F00B 0800 00               		dc.b $F0, $B, 8, 0, 0
0000F4B1 1001 0038 FC               		dc.b $10, 1, 0,	$38, $FC
0000F4B6 02                         byte_ED52:	dc.b 2
0000F4B7 F00F 000C F0               		dc.b $F0, $F, 0, $C, $F0
0000F4BC 1001 0038 FC               		dc.b $10, 1, 0,	$38, $FC
0000F4C1 02                         byte_ED5D:	dc.b 2
0000F4C2 F003 001C FC               		dc.b $F0, 3, 0,	$1C, $FC
0000F4C7 1001 0838 FC               		dc.b $10, 1, 8,	$38, $FC
0000F4CC 02                         byte_ED68:	dc.b 2
0000F4CD F00F 080C F0               		dc.b $F0, $F, 8, $C, $F0
0000F4D2 1001 0838 FC               		dc.b $10, 1, 8,	$38, $FC
0000F4D7 03                         byte_ED73:	dc.b 3
0000F4D8 F00B 0020 E8               		dc.b $F0, $B, 0, $20, $E8
0000F4DD F00B 002C 00               		dc.b $F0, $B, 0, $2C, 0
0000F4E2 1001 0038 FC               		dc.b $10, 1, 0,	$38, $FC
0000F4E8 00                         		even
0000F4E8 00                         		even
0000F4E8                            
0000F4E8                            ; ===========================================================================
0000F4E8                            ; ---------------------------------------------------------------------------
0000F4E8                            ; Object 4C - lava geyser / lavafall producer (MZ)
0000F4E8                            ; ---------------------------------------------------------------------------
0000F4E8                            
0000F4E8                            Obj4C:					; XREF: Obj_Index
0000F4E8 7000                       		moveq	#0,d0
0000F4EA 1028 0024                  		move.b	$24(a0),d0
0000F4EE 323B 0000                  		move.w	Obj4C_Index(pc,d0.w),d1
0000F4F2 4EBB 1000                  		jsr	Obj4C_Index(pc,d1.w)
0000F4F6 6000 0000                  		bra.w	Obj4D_ChkDel
0000F4FA                            ; ===========================================================================
0000F4FA 0000                       Obj4C_Index:	dc.w Obj4C_Main-Obj4C_Index
0000F4FC 0000                       		dc.w loc_EDCC-Obj4C_Index
0000F4FE 0000                       		dc.w loc_EE3E-Obj4C_Index
0000F500 0000                       		dc.w Obj4C_MakeLava-Obj4C_Index
0000F502 0000                       		dc.w Obj4C_Display-Obj4C_Index
0000F504 0000                       		dc.w Obj4C_Delete-Obj4C_Index
0000F506                            ; ===========================================================================
0000F506                            
0000F506                            Obj4C_Main:				; XREF: Obj4C_Index
0000F506 5428 0024                  		addq.b	#2,$24(a0)
0000F50A 217C 0000 0000 0004        		move.l	#Map_obj4C,4(a0)
0000F512 317C E3A8 0002             		move.w	#$E3A8,2(a0)
0000F518 117C 0004 0001             		move.b	#4,1(a0)
0000F51E 117C 0001 0018             		move.b	#1,$18(a0)
0000F524 117C 0038 0019             		move.b	#$38,$19(a0)
0000F52A 317C 0078 0034             		move.w	#120,$34(a0)	; set time delay to 2 seconds
0000F530                            
0000F530                            loc_EDCC:				; XREF: Obj4C_Index
0000F530 5368 0032                  		subq.w	#1,$32(a0)
0000F534 6A00                       		bpl.s	locret_EDF0
0000F536 3168 0034 0032             		move.w	$34(a0),$32(a0)
0000F53C 3038 D00C                  		move.w	($FFFFD00C).w,d0
0000F540 3228 000C                  		move.w	$C(a0),d1
0000F544 B041                       		cmp.w	d1,d0
0000F546 6400                       		bcc.s	locret_EDF0
0000F548 0441 0170                  		subi.w	#$170,d1
0000F54C B041                       		cmp.w	d1,d0
0000F54E 6500                       		bcs.s	locret_EDF0
0000F550 5428 0024                  		addq.b	#2,$24(a0)
0000F554                            
0000F554                            locret_EDF0:
0000F554 4E75                       		rts	
0000F556                            ; ===========================================================================
0000F556                            
0000F556                            Obj4C_MakeLava:				; XREF: Obj4C_Index
0000F556 5428 0024                  		addq.b	#2,$24(a0)
0000F55A 6100 ECA2                  		bsr.w	SingleObjLoad2
0000F55E 6600                       		bne.s	loc_EE18
0000F560 12BC 004D                  		move.b	#$4D,0(a1)	; load lavafall	object
0000F564 3368 0008 0008             		move.w	8(a0),8(a1)
0000F56A 3368 000C 000C             		move.w	$C(a0),$C(a1)
0000F570 1368 0028 0028             		move.b	$28(a0),$28(a1)
0000F576 2348 003C                  		move.l	a0,$3C(a1)
0000F57A                            
0000F57A                            loc_EE18:
0000F57A 117C 0001 001C             		move.b	#1,$1C(a0)
0000F580 4A28 0028                  		tst.b	$28(a0)		; is object type 00 (geyser) ?
0000F584 6700                       		beq.s	Obj4C_Type00	; if yes, branch
0000F586 117C 0004 001C             		move.b	#4,$1C(a0)
0000F58C 6000                       		bra.s	Obj4C_Display
0000F58E                            ; ===========================================================================
0000F58E                            
0000F58E                            Obj4C_Type00:				; XREF: Obj4C_MakeLava
0000F58E 2268 003C                  		movea.l	$3C(a0),a1	; load geyser object
0000F592 08E9 0001 0022             		bset	#1,$22(a1)
0000F598 337C FA80 0012             		move.w	#-$580,$12(a1)
0000F59E 6000                       		bra.s	Obj4C_Display
0000F5A0                            ; ===========================================================================
0000F5A0                            
0000F5A0                            loc_EE3E:				; XREF: Obj4C_Index
0000F5A0 4A28 0028                  		tst.b	$28(a0)		; is object type 00 (geyser) ?
0000F5A4 6700                       		beq.s	Obj4C_Display	; if yes, branch
0000F5A6 5428 0024                  		addq.b	#2,$24(a0)
0000F5AA 4E75                       		rts	
0000F5AC                            ; ===========================================================================
0000F5AC                            
0000F5AC                            Obj4C_Display:				; XREF: Obj4C_Index
0000F5AC 43F9 0000 0000             		lea	(Ani_obj4C).l,a1
0000F5B2 6100 B86E                  		bsr.w	AnimateSprite
0000F5B6 6100 E7AA                  		bsr.w	DisplaySprite
0000F5BA 4E75                       		rts	
0000F5BC                            ; ===========================================================================
0000F5BC                            
0000F5BC                            Obj4C_Delete:				; XREF: Obj4C_Index
0000F5BC 117C 0000 001C             		move.b	#0,$1C(a0)
0000F5C2 117C 0002 0024             		move.b	#2,$24(a0)
0000F5C8 4A28 0028                  		tst.b	$28(a0)
0000F5CC 6700 E7D0                  		beq.w	DeleteObject
0000F5D0 4E75                       		rts	
0000F5D2                            ; ===========================================================================
0000F5D2                            ; ---------------------------------------------------------------------------
0000F5D2                            ; Object 4D - lava geyser / lavafall (MZ)
0000F5D2                            ; ---------------------------------------------------------------------------
0000F5D2                            
0000F5D2                            Obj4D:					; XREF: Obj_Index
0000F5D2 7000                       		moveq	#0,d0
0000F5D4 1028 0024                  		move.b	$24(a0),d0
0000F5D8 323B 0000                  		move.w	Obj4D_Index(pc,d0.w),d1
0000F5DC 4EBB 1000                  		jsr	Obj4D_Index(pc,d1.w)
0000F5E0 6000 E780                  		bra.w	DisplaySprite
0000F5E4                            ; ===========================================================================
0000F5E4 0000                       Obj4D_Index:	dc.w Obj4D_Main-Obj4D_Index
0000F5E6 0000                       		dc.w Obj4D_Action-Obj4D_Index
0000F5E8 0000                       		dc.w loc_EFFC-Obj4D_Index
0000F5EA 0000                       		dc.w Obj4D_Delete-Obj4D_Index
0000F5EC                            
0000F5EC FB00 0000                  Obj4D_Speeds:	dc.w $FB00, 0
0000F5F0                            ; ===========================================================================
0000F5F0                            
0000F5F0                            Obj4D_Main:				; XREF: Obj4D_Index
0000F5F0 5428 0024                  		addq.b	#2,$24(a0)
0000F5F4 3168 000C 0030             		move.w	$C(a0),$30(a0)
0000F5FA 4A28 0028                  		tst.b	$28(a0)
0000F5FE 6700                       		beq.s	loc_EEA4
0000F600 0468 0250 000C             		subi.w	#$250,$C(a0)
0000F606                            
0000F606                            loc_EEA4:
0000F606 7000                       		moveq	#0,d0
0000F608 1028 0028                  		move.b	$28(a0),d0
0000F60C D040                       		add.w	d0,d0
0000F60E 317B 00DC 0012             		move.w	Obj4D_Speeds(pc,d0.w),$12(a0)
0000F614 2248                       		movea.l	a0,a1
0000F616 7201                       		moveq	#1,d1
0000F618 6100                       		bsr.s	Obj4D_MakeLava
0000F61A 6000                       		bra.s	loc_EF10
0000F61C                            ; ===========================================================================
0000F61C                            
0000F61C                            Obj4D_Loop:
0000F61C 6100 EBE0                  		bsr.w	SingleObjLoad2
0000F620 6600                       		bne.s	loc_EF0A
0000F622                            
0000F622                            Obj4D_MakeLava:				; XREF: Obj4D_Main
0000F622 12BC 004D                  		move.b	#$4D,0(a1)
0000F626 237C 0000 0000 0004        		move.l	#Map_obj4C,4(a1)
0000F62E 337C 63A8 0002             		move.w	#$63A8,2(a1)
0000F634 137C 0004 0001             		move.b	#4,1(a1)
0000F63A 137C 0020 0019             		move.b	#$20,$19(a1)
0000F640 3368 0008 0008             		move.w	8(a0),8(a1)
0000F646 3368 000C 000C             		move.w	$C(a0),$C(a1)
0000F64C 1368 0028 0028             		move.b	$28(a0),$28(a1)
0000F652 137C 0001 0018             		move.b	#1,$18(a1)
0000F658 137C 0005 001C             		move.b	#5,$1C(a1)
0000F65E 4A28 0028                  		tst.b	$28(a0)
0000F662 6700                       		beq.s	loc_EF0A
0000F664 137C 0002 001C             		move.b	#2,$1C(a1)
0000F66A                            
0000F66A                            loc_EF0A:
0000F66A 51C9 FFB0                  		dbf	d1,Obj4D_Loop
0000F66E 4E75                       		rts	
0000F670                            ; ===========================================================================
0000F670                            
0000F670                            loc_EF10:				; XREF: Obj4D_Main
0000F670 0669 0060 000C             		addi.w	#$60,$C(a1)
0000F676 3368 0030 0030             		move.w	$30(a0),$30(a1)
0000F67C 0669 0060 0030             		addi.w	#$60,$30(a1)
0000F682 137C 0093 0020             		move.b	#$93,$20(a1)
0000F688 137C 0080 0016             		move.b	#$80,$16(a1)
0000F68E 08E9 0004 0001             		bset	#4,1(a1)
0000F694 5829 0024                  		addq.b	#4,$24(a1)
0000F698 2348 003C                  		move.l	a0,$3C(a1)
0000F69C 4A28 0028                  		tst.b	$28(a0)
0000F6A0 6700                       		beq.s	Obj4D_PlaySnd
0000F6A2 7200                       		moveq	#0,d1
0000F6A4 6100 FF76                  		bsr.w	Obj4D_Loop
0000F6A8 5429 0024                  		addq.b	#2,$24(a1)
0000F6AC 08E9 0004 0002             		bset	#4,2(a1)
0000F6B2 0669 0100 000C             		addi.w	#$100,$C(a1)
0000F6B8 137C 0000 0018             		move.b	#0,$18(a1)
0000F6BE 3368 0030 0030             		move.w	$30(a0),$30(a1)
0000F6C4 2368 003C 003C             		move.l	$3C(a0),$3C(a1)
0000F6CA 117C 0000 0028             		move.b	#0,$28(a0)
0000F6D0                            
0000F6D0                            Obj4D_PlaySnd:
0000F6D0 303C 00C8                  		move.w	#$C8,d0
0000F6D4 4EB9 0000 15C0             		jsr	(PlaySound_Special).l ;	play flame sound
0000F6DA                            
0000F6DA                            Obj4D_Action:				; XREF: Obj4D_Index
0000F6DA 7000                       		moveq	#0,d0
0000F6DC 1028 0028                  		move.b	$28(a0),d0
0000F6E0 D040                       		add.w	d0,d0
0000F6E2 323B 0000                  		move.w	Obj4D_TypeIndex(pc,d0.w),d1
0000F6E6 4EBB 1000                  		jsr	Obj4D_TypeIndex(pc,d1.w)
0000F6EA 6100 E650                  		bsr.w	SpeedToPos
0000F6EE 43F9 0000 0000             		lea	(Ani_obj4C).l,a1
0000F6F4 6100 B72C                  		bsr.w	AnimateSprite
0000F6F8                            
0000F6F8                            Obj4D_ChkDel:				; XREF: Obj4C
0000F6F8 3028 0008                  		move.w	8(a0),d0
0000F6FC 0240 FF80                  		andi.w	#$FF80,d0
0000F700 3238 F700                  		move.w	($FFFFF700).w,d1
0000F704 0441 0080                  		subi.w	#$80,d1
0000F708 0241 FF80                  		andi.w	#$FF80,d1
0000F70C 9041                       		sub.w	d1,d0
0000F70E 0C40 0280                  		cmpi.w	#$280,d0
0000F712 6200 E68A                  		bhi.w	DeleteObject
0000F716 4E75                       		rts	
0000F718                            ; ===========================================================================
0000F718 0000                       Obj4D_TypeIndex:dc.w Obj4D_Type00-Obj4D_TypeIndex
0000F71A 0000                       		dc.w Obj4D_Type01-Obj4D_TypeIndex
0000F71C                            ; ===========================================================================
0000F71C                            
0000F71C                            Obj4D_Type00:				; XREF: Obj4D_TypeIndex
0000F71C 0668 0018 0012             		addi.w	#$18,$12(a0)	; increase object's falling speed
0000F722 3028 0030                  		move.w	$30(a0),d0
0000F726 B068 000C                  		cmp.w	$C(a0),d0
0000F72A 6400                       		bcc.s	locret_EFDA
0000F72C 5828 0024                  		addq.b	#4,$24(a0)
0000F730 2268 003C                  		movea.l	$3C(a0),a1
0000F734 137C 0003 001C             		move.b	#3,$1C(a1)
0000F73A                            
0000F73A                            locret_EFDA:
0000F73A 4E75                       		rts	
0000F73C                            ; ===========================================================================
0000F73C                            
0000F73C                            Obj4D_Type01:				; XREF: Obj4D_TypeIndex
0000F73C 0668 0018 0012             		addi.w	#$18,$12(a0)	; increase object's falling speed
0000F742 3028 0030                  		move.w	$30(a0),d0
0000F746 B068 000C                  		cmp.w	$C(a0),d0
0000F74A 6400                       		bcc.s	locret_EFFA
0000F74C 5828 0024                  		addq.b	#4,$24(a0)
0000F750 2268 003C                  		movea.l	$3C(a0),a1
0000F754 137C 0001 001C             		move.b	#1,$1C(a1)
0000F75A                            
0000F75A                            locret_EFFA:
0000F75A 4E75                       		rts	
0000F75C                            ; ===========================================================================
0000F75C                            
0000F75C                            loc_EFFC:				; XREF: Obj4D_Index
0000F75C 2268 003C                  		movea.l	$3C(a0),a1
0000F760 0C29 0006 0024             		cmpi.b	#6,$24(a1)
0000F766 6700 0000                  		beq.w	Obj4D_Delete
0000F76A 3029 000C                  		move.w	$C(a1),d0
0000F76E 0640 0060                  		addi.w	#$60,d0
0000F772 3140 000C                  		move.w	d0,$C(a0)
0000F776 9068 0030                  		sub.w	$30(a0),d0
0000F77A 4440                       		neg.w	d0
0000F77C 7208                       		moveq	#8,d1
0000F77E 0C40 0040                  		cmpi.w	#$40,d0
0000F782 6C00                       		bge.s	loc_F026
0000F784 720B                       		moveq	#$B,d1
0000F786                            
0000F786                            loc_F026:
0000F786 0C40 0080                  		cmpi.w	#$80,d0
0000F78A 6F00                       		ble.s	loc_F02E
0000F78C 720E                       		moveq	#$E,d1
0000F78E                            
0000F78E                            loc_F02E:
0000F78E 5328 001E                  		subq.b	#1,$1E(a0)
0000F792 6A00                       		bpl.s	loc_F04C
0000F794 117C 0007 001E             		move.b	#7,$1E(a0)
0000F79A 5228 001B                  		addq.b	#1,$1B(a0)
0000F79E 0C28 0002 001B             		cmpi.b	#2,$1B(a0)
0000F7A4 6500                       		bcs.s	loc_F04C
0000F7A6 117C 0000 001B             		move.b	#0,$1B(a0)
0000F7AC                            
0000F7AC                            loc_F04C:
0000F7AC 1028 001B                  		move.b	$1B(a0),d0
0000F7B0 D001                       		add.b	d1,d0
0000F7B2 1140 001A                  		move.b	d0,$1A(a0)
0000F7B6 6000 FF40                  		bra.w	Obj4D_ChkDel
0000F7BA                            ; ===========================================================================
0000F7BA                            
0000F7BA                            Obj4D_Delete:				; XREF: Obj4D_Index
0000F7BA 6000 E5E2                  		bra.w	DeleteObject
0000F7BE                            ; ===========================================================================
0000F7BE                            ; ---------------------------------------------------------------------------
0000F7BE                            ; Object 4E - advancing	wall of	lava (MZ)
0000F7BE                            ; ---------------------------------------------------------------------------
0000F7BE                            
0000F7BE                            Obj4E:					; XREF: Obj_Index
0000F7BE 7000                       		moveq	#0,d0
0000F7C0 1028 0024                  		move.b	$24(a0),d0
0000F7C4 323B 0000                  		move.w	Obj4E_Index(pc,d0.w),d1
0000F7C8 4EFB 1000                  		jmp	Obj4E_Index(pc,d1.w)
0000F7CC                            ; ===========================================================================
0000F7CC 0000                       Obj4E_Index:	dc.w Obj4E_Main-Obj4E_Index
0000F7CE 0000                       		dc.w Obj4E_Solid-Obj4E_Index
0000F7D0 0000                       		dc.w Obj4E_Action-Obj4E_Index
0000F7D2 0000                       		dc.w Obj4E_Move2-Obj4E_Index
0000F7D4 0000                       		dc.w Obj4E_Delete-Obj4E_Index
0000F7D6                            ; ===========================================================================
0000F7D6                            
0000F7D6                            Obj4E_Main:				; XREF: Obj4E_Index
0000F7D6 5828 0024                  		addq.b	#4,$24(a0)
0000F7DA 2248                       		movea.l	a0,a1
0000F7DC 7201                       		moveq	#1,d1
0000F7DE 6000                       		bra.s	Obj4E_Main2
0000F7E0                            ; ===========================================================================
0000F7E0                            
0000F7E0                            Obj4E_Loop:
0000F7E0 6100 EA1C                  		bsr.w	SingleObjLoad2
0000F7E4 6600                       		bne.s	loc_F0C8
0000F7E6                            
0000F7E6                            Obj4E_Main2:				; XREF: Obj4E_Main
0000F7E6 12BC 004E                  		move.b	#$4E,0(a1)	; load object
0000F7EA 237C 0000 0000 0004        		move.l	#Map_obj4E,4(a1)
0000F7F2 337C 63A8 0002             		move.w	#$63A8,2(a1)
0000F7F8 137C 0004 0001             		move.b	#4,1(a1)
0000F7FE 137C 0050 0019             		move.b	#$50,$19(a1)
0000F804 3368 0008 0008             		move.w	8(a0),8(a1)
0000F80A 3368 000C 000C             		move.w	$C(a0),$C(a1)
0000F810 137C 0001 0018             		move.b	#1,$18(a1)
0000F816 137C 0000 001C             		move.b	#0,$1C(a1)
0000F81C 137C 0094 0020             		move.b	#$94,$20(a1)
0000F822 2348 003C                  		move.l	a0,$3C(a1)
0000F826                            
0000F826                            loc_F0C8:
0000F826 51C9 FFB8                  		dbf	d1,Obj4E_Loop	; repeat sequence once
0000F82A                            
0000F82A 5C29 0024                  		addq.b	#6,$24(a1)
0000F82E 137C 0004 001A             		move.b	#4,$1A(a1)
0000F834                            
0000F834                            Obj4E_Action:				; XREF: Obj4E_Index
0000F834 3038 D008                  		move.w	($FFFFD008).w,d0
0000F838 9068 0008                  		sub.w	8(a0),d0
0000F83C 6400                       		bcc.s	Obj4E_ChkSonic
0000F83E 4440                       		neg.w	d0
0000F840                            
0000F840                            Obj4E_ChkSonic:
0000F840 0C40 00C0                  		cmpi.w	#$C0,d0		; is Sonic within $C0 pixels (x-axis)?
0000F844 6400                       		bcc.s	Obj4E_Move	; if not, branch
0000F846 3038 D00C                  		move.w	($FFFFD00C).w,d0
0000F84A 9068 000C                  		sub.w	$C(a0),d0
0000F84E 6400                       		bcc.s	loc_F0F4
0000F850 4440                       		neg.w	d0
0000F852                            
0000F852                            loc_F0F4:
0000F852 0C40 0060                  		cmpi.w	#$60,d0		; is Sonic within $60 pixels (y-axis)?
0000F856 6400                       		bcc.s	Obj4E_Move	; if not, branch
0000F858 117C 0001 0036             		move.b	#1,$36(a0)	; set object to	move
0000F85E 6000                       		bra.s	Obj4E_Solid
0000F860                            ; ===========================================================================
0000F860                            
0000F860                            Obj4E_Move:				; XREF: Obj4E_ChkSonic
0000F860 4A28 0036                  		tst.b	$36(a0)		; is object set	to move?
0000F864 6700                       		beq.s	Obj4E_Solid	; if not, branch
0000F866 317C 0180 0010             		move.w	#$180,$10(a0)	; set object speed
0000F86C 5528 0024                  		subq.b	#2,$24(a0)
0000F870                            
0000F870                            Obj4E_Solid:				; XREF: Obj4E_Index
0000F870 323C 002B                  		move.w	#$2B,d1
0000F874 343C 0018                  		move.w	#$18,d2
0000F878 3602                       		move.w	d2,d3
0000F87A 5243                       		addq.w	#1,d3
0000F87C 3828 0008                  		move.w	8(a0),d4
0000F880 1028 0024                  		move.b	$24(a0),d0
0000F884 3F00                       		move.w	d0,-(sp)
0000F886 6100 0000                  		bsr.w	SolidObject
0000F88A 301F                       		move.w	(sp)+,d0
0000F88C 1140 0024                  		move.b	d0,$24(a0)
0000F890 0C68 06A0 0008             		cmpi.w	#$6A0,8(a0)	; has object reached $6A0 on the x-axis?
0000F896 6600                       		bne.s	Obj4E_Animate	; if not, branch
0000F898 4268 0010                  		clr.w	$10(a0)		; stop object moving
0000F89C 4228 0036                  		clr.b	$36(a0)
0000F8A0                            
0000F8A0                            Obj4E_Animate:
0000F8A0 43F9 0000 0000             		lea	(Ani_obj4E).l,a1
0000F8A6 6100 B57A                  		bsr.w	AnimateSprite
0000F8AA 0C38 0004 D024             		cmpi.b	#4,($FFFFD024).w
0000F8B0 6400                       		bcc.s	Obj4E_ChkDel
0000F8B2 6100 E488                  		bsr.w	SpeedToPos
0000F8B6                            
0000F8B6                            Obj4E_ChkDel:
0000F8B6 6100 E4AA                  		bsr.w	DisplaySprite
0000F8BA 4A28 0036                  		tst.b	$36(a0)
0000F8BE 6600                       		bne.s	locret_F17E
0000F8C0 3028 0008                  		move.w	8(a0),d0
0000F8C4 0240 FF80                  		andi.w	#$FF80,d0
0000F8C8 3238 F700                  		move.w	($FFFFF700).w,d1
0000F8CC 0441 0080                  		subi.w	#$80,d1
0000F8D0 0241 FF80                  		andi.w	#$FF80,d1
0000F8D4 9041                       		sub.w	d1,d0
0000F8D6 0C40 0280                  		cmpi.w	#$280,d0
0000F8DA 6200                       		bhi.s	Obj4E_ChkGone
0000F8DC                            
0000F8DC                            locret_F17E:
0000F8DC 4E75                       		rts	
0000F8DE                            ; ===========================================================================
0000F8DE                            
0000F8DE                            Obj4E_ChkGone:				; XREF: Obj4E_ChkDel
0000F8DE 45F8 FC00                  		lea	($FFFFFC00).w,a2
0000F8E2 7000                       		moveq	#0,d0
0000F8E4 1028 0023                  		move.b	$23(a0),d0
0000F8E8 08B2 0007 0002             		bclr	#7,2(a2,d0.w)
0000F8EE 117C 0008 0024             		move.b	#8,$24(a0)
0000F8F4 4E75                       		rts	
0000F8F6                            ; ===========================================================================
0000F8F6                            
0000F8F6                            Obj4E_Move2:				; XREF: Obj4E_Index
0000F8F6 2268 003C                  		movea.l	$3C(a0),a1
0000F8FA 0C29 0008 0024             		cmpi.b	#8,$24(a1)
0000F900 6700                       		beq.s	Obj4E_Delete
0000F902 3169 0008 0008             		move.w	8(a1),8(a0)	; move rest of lava wall
0000F908 0468 0080 0008             		subi.w	#$80,8(a0)
0000F90E 6000 E452                  		bra.w	DisplaySprite
0000F912                            ; ===========================================================================
0000F912                            
0000F912                            Obj4E_Delete:				; XREF: Obj4E_Index
0000F912 6000 E48A                  		bra.w	DeleteObject
0000F916                            ; ===========================================================================
0000F916                            ; ---------------------------------------------------------------------------
0000F916                            ; Object 54 - invisible	lava tag (MZ)
0000F916                            ; ---------------------------------------------------------------------------
0000F916                            
0000F916                            Obj54:					; XREF: Obj_Index
0000F916 7000                       		moveq	#0,d0
0000F918 1028 0024                  		move.b	$24(a0),d0
0000F91C 323B 0000                  		move.w	Obj54_Index(pc,d0.w),d1
0000F920 4EFB 1000                  		jmp	Obj54_Index(pc,d1.w)
0000F924                            ; ===========================================================================
0000F924 0000                       Obj54_Index:	dc.w Obj54_Main-Obj54_Index
0000F926 0000                       		dc.w Obj54_ChkDel-Obj54_Index
0000F928                            
0000F928 9694 9500                  Obj54_Sizes:	dc.b $96, $94, $95, 0
0000F92C                            ; ===========================================================================
0000F92C                            
0000F92C                            Obj54_Main:				; XREF: Obj54_Index
0000F92C 5428 0024                  		addq.b	#2,$24(a0)
0000F930 7000                       		moveq	#0,d0
0000F932 1028 0028                  		move.b	$28(a0),d0
0000F936 117B 00F0 0020             		move.b	Obj54_Sizes(pc,d0.w),$20(a0)
0000F93C 217C 0000 0000 0004        		move.l	#Map_obj54,4(a0)
0000F944 117C 0084 0001             		move.b	#$84,1(a0)
0000F94A                            
0000F94A                            Obj54_ChkDel:				; XREF: Obj54_Index
0000F94A 3028 0008                  		move.w	8(a0),d0
0000F94E 0240 FF80                  		andi.w	#$FF80,d0
0000F952 3238 F700                  		move.w	($FFFFF700).w,d1
0000F956 0441 0080                  		subi.w	#$80,d1
0000F95A 0241 FF80                  		andi.w	#$FF80,d1
0000F95E 9041                       		sub.w	d1,d0
0000F960 6B00 E43C                  		bmi.w	DeleteObject
0000F964 0C40 0280                  		cmpi.w	#$280,d0
0000F968 6200 E434                  		bhi.w	DeleteObject
0000F96C 4E75                       		rts	
0000F96E                            ; ===========================================================================
0000F96E                            ; ---------------------------------------------------------------------------
0000F96E                            ; Sprite mappings - invisible lava tag (MZ)
0000F96E                            ; ---------------------------------------------------------------------------
0000F96E                            Map_obj54:
0000F96E                            	include "_maps\obj54.asm"
0000F96E                            ; ---------------------------------------------------------------------------
0000F96E                            ; Sprite mappings - invisible lava tag (MZ)
0000F96E                            ; ---------------------------------------------------------------------------
0000F96E 0000                       		dc.w byte_F212-Map_obj54
0000F970 00                         byte_F212:	dc.b 0			; no sprite, because the tag is invisible!
0000F972 00                         		even
0000F972 00                         		even
0000F972                            
0000F972                            Ani_obj4C:
0000F972                            	include "_anim\obj4C.asm"
0000F972                            ; ---------------------------------------------------------------------------
0000F972                            ; Animation script - geyser of lava (MZ)
0000F972                            ; ---------------------------------------------------------------------------
0000F972 0000                       		dc.w byte_F220-Ani_obj4C
0000F974 0000                       		dc.w byte_F22A-Ani_obj4C
0000F976 0000                       		dc.w byte_F22E-Ani_obj4C
0000F978 0000                       		dc.w byte_F232-Ani_obj4C
0000F97A 0000                       		dc.w byte_F23A-Ani_obj4C
0000F97C 0000                       		dc.w byte_F23E-Ani_obj4C
0000F97E 0200 0100 0104 0504 05FC   byte_F220:	dc.b 2,	0, 1, 0, 1, 4, 5, 4, 5,	$FC
0000F988 0202 03FF                  byte_F22A:	dc.b 2,	2, 3, $FF
0000F98C 0206 07FF                  byte_F22E:	dc.b 2,	6, 7, $FF
0000F990 0202 0300 0100 01FC        byte_F232:	dc.b 2,	2, 3, 0, 1, 0, 1, $FC
0000F998 0F13 FF00                  byte_F23A:	dc.b $F, $13, $FF, 0
0000F99C 0211 12FF                  byte_F23E:	dc.b 2,	$11, $12, $FF
0000F9A0                            		even
0000F9A0                            		even
0000F9A0                            
0000F9A0                            Ani_obj4E:
0000F9A0                            	include "_anim\obj4E.asm"
0000F9A0                            ; ---------------------------------------------------------------------------
0000F9A0                            ; Animation script - advancing wall of lava (MZ)
0000F9A0                            ; ---------------------------------------------------------------------------
0000F9A0 0000                       		dc.w byte_F244-Ani_obj4E
0000F9A2 0900 0102 03FF             byte_F244:	dc.b 9,	0, 1, 2, 3, $FF
0000F9A8                            		even
0000F9A8                            		even
0000F9A8                            
0000F9A8                            ; ---------------------------------------------------------------------------
0000F9A8                            ; Sprite mappings - lava geyser / lava that falls from the ceiling (MZ)
0000F9A8                            ; ---------------------------------------------------------------------------
0000F9A8                            Map_obj4C:
0000F9A8                            	include "_maps\obj4C.asm"
0000F9A8                            ; ---------------------------------------------------------------------------
0000F9A8                            ; Sprite mappings - lava geyser / lava that falls from the ceiling (MZ)
0000F9A8                            ; ---------------------------------------------------------------------------
0000F9A8 0000 0000                  		dc.w byte_F272-Map_obj4C, byte_F27D-Map_obj4C
0000F9AC 0000 0000                  		dc.w byte_F288-Map_obj4C, byte_F29D-Map_obj4C
0000F9B0 0000 0000                  		dc.w byte_F2B2-Map_obj4C, byte_F2D1-Map_obj4C
0000F9B4 0000 0000                  		dc.w byte_F2F0-Map_obj4C, byte_F2FB-Map_obj4C
0000F9B8 0000 0000                  		dc.w byte_F306-Map_obj4C, byte_F339-Map_obj4C
0000F9BC 0000 0000                  		dc.w byte_F36C-Map_obj4C, byte_F39F-Map_obj4C
0000F9C0 0000 0000                  		dc.w byte_F3BE-Map_obj4C, byte_F3DD-Map_obj4C
0000F9C4 0000 0000                  		dc.w byte_F3FC-Map_obj4C, byte_F44D-Map_obj4C
0000F9C8 0000 0000                  		dc.w byte_F49E-Map_obj4C, byte_F4EF-Map_obj4C
0000F9CC 0000 0000                  		dc.w byte_F50E-Map_obj4C, byte_F52D-Map_obj4C
0000F9D0 02                         byte_F272:	dc.b 2
0000F9D1 EC0B 0000 E8               		dc.b $EC, $B, 0, 0, $E8
0000F9D6 EC0B 0800 00               		dc.b $EC, $B, 8, 0, 0
0000F9DB 02                         byte_F27D:	dc.b 2
0000F9DC EC0B 0018 E8               		dc.b $EC, $B, 0, $18, $E8
0000F9E1 EC0B 0818 00               		dc.b $EC, $B, 8, $18, 0
0000F9E6 04                         byte_F288:	dc.b 4
0000F9E7 EC0B 0000 C8               		dc.b $EC, $B, 0, 0, $C8
0000F9EC F40E 000C E0               		dc.b $F4, $E, 0, $C, $E0
0000F9F1 F40E 080C 00               		dc.b $F4, $E, 8, $C, 0
0000F9F6 EC0B 0800 20               		dc.b $EC, $B, 8, 0, $20
0000F9FB 04                         byte_F29D:	dc.b 4
0000F9FC EC0B 0018 C8               		dc.b $EC, $B, 0, $18, $C8
0000FA01 F40E 0024 E0               		dc.b $F4, $E, 0, $24, $E0
0000FA06 F40E 0824 00               		dc.b $F4, $E, 8, $24, 0
0000FA0B EC0B 0818 20               		dc.b $EC, $B, 8, $18, $20
0000FA10 06                         byte_F2B2:	dc.b 6
0000FA11 EC0B 0000 C8               		dc.b $EC, $B, 0, 0, $C8
0000FA16 F40E 000C E0               		dc.b $F4, $E, 0, $C, $E0
0000FA1B F40E 080C 00               		dc.b $F4, $E, 8, $C, 0
0000FA20 EC0B 0800 20               		dc.b $EC, $B, 8, 0, $20
0000FA25 E80E 0090 E0               		dc.b $E8, $E, 0, $90, $E0
0000FA2A E80E 0890 00               		dc.b $E8, $E, 8, $90, 0
0000FA2F 06                         byte_F2D1:	dc.b 6
0000FA30 EC0B 0018 C8               		dc.b $EC, $B, 0, $18, $C8
0000FA35 F40E 0024 E0               		dc.b $F4, $E, 0, $24, $E0
0000FA3A F40E 0824 00               		dc.b $F4, $E, 8, $24, 0
0000FA3F EC0B 0818 20               		dc.b $EC, $B, 8, $18, $20
0000FA44 E80E 0890 E0               		dc.b $E8, $E, 8, $90, $E0
0000FA49 E80E 0090 00               		dc.b $E8, $E, 0, $90, 0
0000FA4E 02                         byte_F2F0:	dc.b 2
0000FA4F E00F 0030 E0               		dc.b $E0, $F, 0, $30, $E0
0000FA54 E00F 0830 00               		dc.b $E0, $F, 8, $30, 0
0000FA59 02                         byte_F2FB:	dc.b 2
0000FA5A E00F 0830 E0               		dc.b $E0, $F, 8, $30, $E0
0000FA5F E00F 0030 00               		dc.b $E0, $F, 0, $30, 0
0000FA64 0A                         byte_F306:	dc.b $A
0000FA65 900F 0040 E0               		dc.b $90, $F, 0, $40, $E0
0000FA6A 900F 0840 00               		dc.b $90, $F, 8, $40, 0
0000FA6F B00F 0040 E0               		dc.b $B0, $F, 0, $40, $E0
0000FA74 B00F 0840 00               		dc.b $B0, $F, 8, $40, 0
0000FA79 D00F 0040 E0               		dc.b $D0, $F, 0, $40, $E0
0000FA7E D00F 0840 00               		dc.b $D0, $F, 8, $40, 0
0000FA83 F00F 0040 E0               		dc.b $F0, $F, 0, $40, $E0
0000FA88 F00F 0840 00               		dc.b $F0, $F, 8, $40, 0
0000FA8D 100F 0040 E0               		dc.b $10, $F, 0, $40, $E0
0000FA92 100F 0840 00               		dc.b $10, $F, 8, $40, 0
0000FA97 0A                         byte_F339:	dc.b $A
0000FA98 900F 0050 E0               		dc.b $90, $F, 0, $50, $E0
0000FA9D 900F 0850 00               		dc.b $90, $F, 8, $50, 0
0000FAA2 B00F 0050 E0               		dc.b $B0, $F, 0, $50, $E0
0000FAA7 B00F 0850 00               		dc.b $B0, $F, 8, $50, 0
0000FAAC D00F 0050 E0               		dc.b $D0, $F, 0, $50, $E0
0000FAB1 D00F 0850 00               		dc.b $D0, $F, 8, $50, 0
0000FAB6 F00F 0050 E0               		dc.b $F0, $F, 0, $50, $E0
0000FABB F00F 0850 00               		dc.b $F0, $F, 8, $50, 0
0000FAC0 100F 0050 E0               		dc.b $10, $F, 0, $50, $E0
0000FAC5 100F 0850 00               		dc.b $10, $F, 8, $50, 0
0000FACA 0A                         byte_F36C:	dc.b $A
0000FACB 900F 0060 E0               		dc.b $90, $F, 0, $60, $E0
0000FAD0 900F 0860 00               		dc.b $90, $F, 8, $60, 0
0000FAD5 B00F 0060 E0               		dc.b $B0, $F, 0, $60, $E0
0000FADA B00F 0860 00               		dc.b $B0, $F, 8, $60, 0
0000FADF D00F 0060 E0               		dc.b $D0, $F, 0, $60, $E0
0000FAE4 D00F 0860 00               		dc.b $D0, $F, 8, $60, 0
0000FAE9 F00F 0060 E0               		dc.b $F0, $F, 0, $60, $E0
0000FAEE F00F 0860 00               		dc.b $F0, $F, 8, $60, 0
0000FAF3 100F 0060 E0               		dc.b $10, $F, 0, $60, $E0
0000FAF8 100F 0860 00               		dc.b $10, $F, 8, $60, 0
0000FAFD 06                         byte_F39F:	dc.b 6
0000FAFE 900F 0040 E0               		dc.b $90, $F, 0, $40, $E0
0000FB03 900F 0840 00               		dc.b $90, $F, 8, $40, 0
0000FB08 B00F 0040 E0               		dc.b $B0, $F, 0, $40, $E0
0000FB0D B00F 0840 00               		dc.b $B0, $F, 8, $40, 0
0000FB12 D00F 0040 E0               		dc.b $D0, $F, 0, $40, $E0
0000FB17 D00F 0840 00               		dc.b $D0, $F, 8, $40, 0
0000FB1C 06                         byte_F3BE:	dc.b 6
0000FB1D 900F 0050 E0               		dc.b $90, $F, 0, $50, $E0
0000FB22 900F 0850 00               		dc.b $90, $F, 8, $50, 0
0000FB27 B00F 0050 E0               		dc.b $B0, $F, 0, $50, $E0
0000FB2C B00F 0850 00               		dc.b $B0, $F, 8, $50, 0
0000FB31 D00F 0050 E0               		dc.b $D0, $F, 0, $50, $E0
0000FB36 D00F 0850 00               		dc.b $D0, $F, 8, $50, 0
0000FB3B 06                         byte_F3DD:	dc.b 6
0000FB3C 900F 0060 E0               		dc.b $90, $F, 0, $60, $E0
0000FB41 900F 0860 00               		dc.b $90, $F, 8, $60, 0
0000FB46 B00F 0060 E0               		dc.b $B0, $F, 0, $60, $E0
0000FB4B B00F 0860 00               		dc.b $B0, $F, 8, $60, 0
0000FB50 D00F 0060 E0               		dc.b $D0, $F, 0, $60, $E0
0000FB55 D00F 0860 00               		dc.b $D0, $F, 8, $60, 0
0000FB5A 10                         byte_F3FC:	dc.b $10
0000FB5B 900F 0040 E0               		dc.b $90, $F, 0, $40, $E0
0000FB60 900F 0840 00               		dc.b $90, $F, 8, $40, 0
0000FB65 B00F 0040 E0               		dc.b $B0, $F, 0, $40, $E0
0000FB6A B00F 0840 00               		dc.b $B0, $F, 8, $40, 0
0000FB6F D00F 0040 E0               		dc.b $D0, $F, 0, $40, $E0
0000FB74 D00F 0840 00               		dc.b $D0, $F, 8, $40, 0
0000FB79 F00F 0040 E0               		dc.b $F0, $F, 0, $40, $E0
0000FB7E F00F 0840 00               		dc.b $F0, $F, 8, $40, 0
0000FB83 100F 0040 E0               		dc.b $10, $F, 0, $40, $E0
0000FB88 100F 0840 00               		dc.b $10, $F, 8, $40, 0
0000FB8D 300F 0040 E0               		dc.b $30, $F, 0, $40, $E0
0000FB92 300F 0840 00               		dc.b $30, $F, 8, $40, 0
0000FB97 500F 0040 E0               		dc.b $50, $F, 0, $40, $E0
0000FB9C 500F 0840 00               		dc.b $50, $F, 8, $40, 0
0000FBA1 700F 0040 E0               		dc.b $70, $F, 0, $40, $E0
0000FBA6 700F 0840 00               		dc.b $70, $F, 8, $40, 0
0000FBAB 10                         byte_F44D:	dc.b $10
0000FBAC 900F 0050 E0               		dc.b $90, $F, 0, $50, $E0
0000FBB1 900F 0850 00               		dc.b $90, $F, 8, $50, 0
0000FBB6 B00F 0050 E0               		dc.b $B0, $F, 0, $50, $E0
0000FBBB B00F 0850 00               		dc.b $B0, $F, 8, $50, 0
0000FBC0 D00F 0050 E0               		dc.b $D0, $F, 0, $50, $E0
0000FBC5 D00F 0850 00               		dc.b $D0, $F, 8, $50, 0
0000FBCA F00F 0050 E0               		dc.b $F0, $F, 0, $50, $E0
0000FBCF F00F 0850 00               		dc.b $F0, $F, 8, $50, 0
0000FBD4 100F 0050 E0               		dc.b $10, $F, 0, $50, $E0
0000FBD9 100F 0850 00               		dc.b $10, $F, 8, $50, 0
0000FBDE 300F 0050 E0               		dc.b $30, $F, 0, $50, $E0
0000FBE3 300F 0850 00               		dc.b $30, $F, 8, $50, 0
0000FBE8 500F 0050 E0               		dc.b $50, $F, 0, $50, $E0
0000FBED 500F 0850 00               		dc.b $50, $F, 8, $50, 0
0000FBF2 700F 0050 E0               		dc.b $70, $F, 0, $50, $E0
0000FBF7 700F 0850 00               		dc.b $70, $F, 8, $50, 0
0000FBFC 10                         byte_F49E:	dc.b $10
0000FBFD 900F 0060 E0               		dc.b $90, $F, 0, $60, $E0
0000FC02 900F 0860 00               		dc.b $90, $F, 8, $60, 0
0000FC07 B00F 0060 E0               		dc.b $B0, $F, 0, $60, $E0
0000FC0C B00F 0860 00               		dc.b $B0, $F, 8, $60, 0
0000FC11 D00F 0060 E0               		dc.b $D0, $F, 0, $60, $E0
0000FC16 D00F 0860 00               		dc.b $D0, $F, 8, $60, 0
0000FC1B F00F 0060 E0               		dc.b $F0, $F, 0, $60, $E0
0000FC20 F00F 0860 00               		dc.b $F0, $F, 8, $60, 0
0000FC25 100F 0060 E0               		dc.b $10, $F, 0, $60, $E0
0000FC2A 100F 0860 00               		dc.b $10, $F, 8, $60, 0
0000FC2F 300F 0060 E0               		dc.b $30, $F, 0, $60, $E0
0000FC34 300F 0860 00               		dc.b $30, $F, 8, $60, 0
0000FC39 500F 0060 E0               		dc.b $50, $F, 0, $60, $E0
0000FC3E 500F 0860 00               		dc.b $50, $F, 8, $60, 0
0000FC43 700F 0060 E0               		dc.b $70, $F, 0, $60, $E0
0000FC48 700F 0860 00               		dc.b $70, $F, 8, $60, 0
0000FC4D 06                         byte_F4EF:	dc.b 6
0000FC4E E00B 0000 C8               		dc.b $E0, $B, 0, 0, $C8
0000FC53 E80E 000C E0               		dc.b $E8, $E, 0, $C, $E0
0000FC58 E80E 080C 00               		dc.b $E8, $E, 8, $C, 0
0000FC5D E00B 0800 20               		dc.b $E0, $B, 8, 0, $20
0000FC62 D80E 0090 E0               		dc.b $D8, $E, 0, $90, $E0
0000FC67 D80E 0890 00               		dc.b $D8, $E, 8, $90, 0
0000FC6C 06                         byte_F50E:	dc.b 6
0000FC6D E00B 0018 C8               		dc.b $E0, $B, 0, $18, $C8
0000FC72 E80E 0024 E0               		dc.b $E8, $E, 0, $24, $E0
0000FC77 E80E 0824 00               		dc.b $E8, $E, 8, $24, 0
0000FC7C E00B 0818 20               		dc.b $E0, $B, 8, $18, $20
0000FC81 D80E 0890 E0               		dc.b $D8, $E, 8, $90, $E0
0000FC86 D80E 0090 00               		dc.b $D8, $E, 0, $90, 0
0000FC8B 00                         byte_F52D:	dc.b 0
0000FC8C                            		even
0000FC8C                            		even
0000FC8C                            
0000FC8C                            ; ---------------------------------------------------------------------------
0000FC8C                            ; Sprite mappings - advancing wall of lava (MZ)
0000FC8C                            ; ---------------------------------------------------------------------------
0000FC8C                            Map_obj4E:
0000FC8C                            	include "_maps\obj4E.asm"
0000FC8C                            ; ---------------------------------------------------------------------------
0000FC8C                            ; Sprite mappings - advancing wall of lava (MZ)
0000FC8C                            ; ---------------------------------------------------------------------------
0000FC8C 0000                       		dc.w byte_F538-Map_obj4E
0000FC8E 0000                       		dc.w byte_F566-Map_obj4E
0000FC90 0000                       		dc.w byte_F594-Map_obj4E
0000FC92 0000                       		dc.w byte_F5C2-Map_obj4E
0000FC94 0000                       		dc.w byte_F5F0-Map_obj4E
0000FC96 09                         byte_F538:	dc.b 9
0000FC97 E00F 0060 20               		dc.b $E0, $F, 0, $60, $20
0000FC9C 000F 0070 3C               		dc.b 0,	$F, 0, $70, $3C
0000FCA1 000F FF2A 20               		dc.b 0,	$F, $FF, $2A, $20
0000FCA6 E00F FF2A 00               		dc.b $E0, $F, $FF, $2A,	0
0000FCAB 000F FF2A 00               		dc.b 0,	$F, $FF, $2A, 0
0000FCB0 E00F FF2A E0               		dc.b $E0, $F, $FF, $2A,	$E0
0000FCB5 000F FF2A E0               		dc.b 0,	$F, $FF, $2A, $E0
0000FCBA E00F FF2A C0               		dc.b $E0, $F, $FF, $2A,	$C0
0000FCBF 000F FF2A C0               		dc.b 0,	$F, $FF, $2A, $C0
0000FCC4 09                         byte_F566:	dc.b 9
0000FCC5 E00F 0070 20               		dc.b $E0, $F, 0, $70, $20
0000FCCA 000F 0080 3C               		dc.b 0,	$F, 0, $80, $3C
0000FCCF 000F FF2A 20               		dc.b 0,	$F, $FF, $2A, $20
0000FCD4 E00F FF2A 00               		dc.b $E0, $F, $FF, $2A,	0
0000FCD9 000F FF2A 00               		dc.b 0,	$F, $FF, $2A, 0
0000FCDE E00F FF2A E0               		dc.b $E0, $F, $FF, $2A,	$E0
0000FCE3 000F FF2A E0               		dc.b 0,	$F, $FF, $2A, $E0
0000FCE8 E00F FF2A C0               		dc.b $E0, $F, $FF, $2A,	$C0
0000FCED 000F FF2A C0               		dc.b 0,	$F, $FF, $2A, $C0
0000FCF2 09                         byte_F594:	dc.b 9
0000FCF3 E00F 0080 20               		dc.b $E0, $F, 0, $80, $20
0000FCF8 000F 0070 3C               		dc.b 0,	$F, 0, $70, $3C
0000FCFD 000F FF2A 20               		dc.b 0,	$F, $FF, $2A, $20
0000FD02 E00F FF2A 00               		dc.b $E0, $F, $FF, $2A,	0
0000FD07 000F FF2A 00               		dc.b 0,	$F, $FF, $2A, 0
0000FD0C E00F FF2A E0               		dc.b $E0, $F, $FF, $2A,	$E0
0000FD11 000F FF2A E0               		dc.b 0,	$F, $FF, $2A, $E0
0000FD16 E00F FF2A C0               		dc.b $E0, $F, $FF, $2A,	$C0
0000FD1B 000F FF2A C0               		dc.b 0,	$F, $FF, $2A, $C0
0000FD20 09                         byte_F5C2:	dc.b 9
0000FD21 E00F 0070 20               		dc.b $E0, $F, 0, $70, $20
0000FD26 000F 0060 3C               		dc.b 0,	$F, 0, $60, $3C
0000FD2B 000F FF2A 20               		dc.b 0,	$F, $FF, $2A, $20
0000FD30 E00F FF2A 00               		dc.b $E0, $F, $FF, $2A,	0
0000FD35 000F FF2A 00               		dc.b 0,	$F, $FF, $2A, 0
0000FD3A E00F FF2A E0               		dc.b $E0, $F, $FF, $2A,	$E0
0000FD3F 000F FF2A E0               		dc.b 0,	$F, $FF, $2A, $E0
0000FD44 E00F FF2A C0               		dc.b $E0, $F, $FF, $2A,	$C0
0000FD49 000F FF2A C0               		dc.b 0,	$F, $FF, $2A, $C0
0000FD4E 08                         byte_F5F0:	dc.b 8
0000FD4F E00F FF2A 20               		dc.b $E0, $F, $FF, $2A,	$20
0000FD54 000F FF2A 20               		dc.b 0,	$F, $FF, $2A, $20
0000FD59 E00F FF2A 00               		dc.b $E0, $F, $FF, $2A,	0
0000FD5E 000F FF2A 00               		dc.b 0,	$F, $FF, $2A, 0
0000FD63 E00F FF2A E0               		dc.b $E0, $F, $FF, $2A,	$E0
0000FD68 000F FF2A E0               		dc.b 0,	$F, $FF, $2A, $E0
0000FD6D E00F FF2A C0               		dc.b $E0, $F, $FF, $2A,	$C0
0000FD72 000F FF2A C0               		dc.b 0,	$F, $FF, $2A, $C0
0000FD78 00                         		even
0000FD78 00                         		even
0000FD78                            
0000FD78                            ; ===========================================================================
0000FD78                            ; ---------------------------------------------------------------------------
0000FD78                            ; Object 40 - Moto Bug enemy (GHZ)
0000FD78                            ; ---------------------------------------------------------------------------
0000FD78                            
0000FD78                            Obj40:					; XREF: Obj_Index
0000FD78 7000                       		moveq	#0,d0
0000FD7A 1028 0024                  		move.b	$24(a0),d0
0000FD7E 323B 0000                  		move.w	Obj40_Index(pc,d0.w),d1
0000FD82 4EFB 1000                  		jmp	Obj40_Index(pc,d1.w)
0000FD86                            ; ===========================================================================
0000FD86 0000                       Obj40_Index:	dc.w Obj40_Main-Obj40_Index
0000FD88 0000                       		dc.w Obj40_Action-Obj40_Index
0000FD8A 0000                       		dc.w Obj40_Animate-Obj40_Index
0000FD8C 0000                       		dc.w Obj40_Delete-Obj40_Index
0000FD8E                            ; ===========================================================================
0000FD8E                            
0000FD8E                            Obj40_Main:				; XREF: Obj40_Index
0000FD8E 217C 0000 0000 0004        		move.l	#Map_obj40,4(a0)
0000FD96 317C 04F0 0002             		move.w	#$4F0,2(a0)
0000FD9C 117C 0004 0001             		move.b	#4,1(a0)
0000FDA2 117C 0004 0018             		move.b	#4,$18(a0)
0000FDA8 117C 0014 0019             		move.b	#$14,$19(a0)
0000FDAE 4A28 001C                  		tst.b	$1C(a0)		; is object a smoke trail?
0000FDB2 6600                       		bne.s	Obj40_SetSmoke	; if yes, branch
0000FDB4 117C 000E 0016             		move.b	#$E,$16(a0)
0000FDBA 117C 0008 0017             		move.b	#8,$17(a0)
0000FDC0 117C 000C 0020             		move.b	#$C,$20(a0)
0000FDC6 6100 DF48                  		bsr.w	ObjectFall
0000FDCA 4EB9 0000 0000             		jsr	ObjHitFloor
0000FDD0 4A41                       		tst.w	d1
0000FDD2 6A00                       		bpl.s	locret_F68A
0000FDD4 D368 000C                  		add.w	d1,$C(a0)	; match	object's position with the floor
0000FDD8 317C 0000 0012             		move.w	#0,$12(a0)
0000FDDE 5428 0024                  		addq.b	#2,$24(a0)
0000FDE2 0868 0000 0022             		bchg	#0,$22(a0)
0000FDE8                            
0000FDE8                            locret_F68A:
0000FDE8 4E75                       		rts	
0000FDEA                            ; ===========================================================================
0000FDEA                            
0000FDEA                            Obj40_SetSmoke:				; XREF: Obj40_Main
0000FDEA 5828 0024                  		addq.b	#4,$24(a0)
0000FDEE 6000 0000                  		bra.w	Obj40_Animate
0000FDF2                            ; ===========================================================================
0000FDF2                            
0000FDF2                            Obj40_Action:				; XREF: Obj40_Index
0000FDF2 7000                       		moveq	#0,d0
0000FDF4 1028 0025                  		move.b	$25(a0),d0
0000FDF8 323B 0000                  		move.w	Obj40_Index2(pc,d0.w),d1
0000FDFC 4EBB 1000                  		jsr	Obj40_Index2(pc,d1.w)
0000FE00 43F9 0000 0000             		lea	(Ani_obj40).l,a1
0000FE06 6100 B01A                  		bsr.w	AnimateSprite
0000FE0A                            
0000FE0A                            ; ---------------------------------------------------------------------------
0000FE0A                            ; Routine to mark an enemy/monitor/ring	as destroyed
0000FE0A                            ; ---------------------------------------------------------------------------
0000FE0A                            
0000FE0A                            MarkObjGone:
0000FE0A 3028 0008                  		move.w	8(a0),d0
0000FE0E 0240 FF80                  		andi.w	#$FF80,d0
0000FE12 3238 F700                  		move.w	($FFFFF700).w,d1
0000FE16 0441 0080                  		subi.w	#$80,d1
0000FE1A 0241 FF80                  		andi.w	#$FF80,d1
0000FE1E 9041                       		sub.w	d1,d0
0000FE20 0C40 0280                  		cmpi.w	#$280,d0
0000FE24 6200 0000                  		bhi.w	Mark_ChkGone
0000FE28 6000 DF38                  		bra.w	DisplaySprite
0000FE2C                            ; ===========================================================================
0000FE2C                            
0000FE2C                            Mark_ChkGone:
0000FE2C 45F8 FC00                  		lea	($FFFFFC00).w,a2
0000FE30 7000                       		moveq	#0,d0
0000FE32 1028 0023                  		move.b	$23(a0),d0
0000FE36 6700                       		beq.s	Mark_Delete
0000FE38 08B2 0007 0002             		bclr	#7,2(a2,d0.w)
0000FE3E                            
0000FE3E                            Mark_Delete:
0000FE3E 6000 DF5E                  		bra.w	DeleteObject
0000FE42                            
0000FE42                            ; ===========================================================================
0000FE42 0000                       Obj40_Index2:	dc.w Obj40_Move-Obj40_Index2
0000FE44 0000                       		dc.w Obj40_FixToFloor-Obj40_Index2
0000FE46                            ; ===========================================================================
0000FE46                            
0000FE46                            Obj40_Move:				; XREF: Obj40_Index2
0000FE46 5368 0030                  		subq.w	#1,$30(a0)	; subtract 1 from pause	time
0000FE4A 6A00                       		bpl.s	locret_F70A	; if time remains, branch
0000FE4C 5428 0025                  		addq.b	#2,$25(a0)
0000FE50 317C FF00 0010             		move.w	#-$100,$10(a0)	; move object to the left
0000FE56 117C 0001 001C             		move.b	#1,$1C(a0)
0000FE5C 0868 0000 0022             		bchg	#0,$22(a0)
0000FE62 6600                       		bne.s	locret_F70A
0000FE64 4468 0010                  		neg.w	$10(a0)		; change direction
0000FE68                            
0000FE68                            locret_F70A:
0000FE68 4E75                       		rts	
0000FE6A                            ; ===========================================================================
0000FE6A                            
0000FE6A                            Obj40_FixToFloor:			; XREF: Obj40_Index2
0000FE6A 6100 DED0                  		bsr.w	SpeedToPos
0000FE6E 4EB9 0000 0000             		jsr	ObjHitFloor
0000FE74 0C41 FFF8                  		cmpi.w	#-8,d1
0000FE78 6D00                       		blt.s	Obj40_Pause
0000FE7A 0C41 000C                  		cmpi.w	#$C,d1
0000FE7E 6C00                       		bge.s	Obj40_Pause
0000FE80 D368 000C                  		add.w	d1,$C(a0)	; match	object's position with the floor
0000FE84 5328 0033                  		subq.b	#1,$33(a0)
0000FE88 6A00                       		bpl.s	locret_F756
0000FE8A 117C 000F 0033             		move.b	#$F,$33(a0)
0000FE90 6100 E356                  		bsr.w	SingleObjLoad
0000FE94 6600                       		bne.s	locret_F756
0000FE96 12BC 0040                  		move.b	#$40,0(a1)	; load exhaust smoke object
0000FE9A 3368 0008 0008             		move.w	8(a0),8(a1)
0000FEA0 3368 000C 000C             		move.w	$C(a0),$C(a1)
0000FEA6 1368 0022 0022             		move.b	$22(a0),$22(a1)
0000FEAC 137C 0002 001C             		move.b	#2,$1C(a1)
0000FEB2                            
0000FEB2                            locret_F756:
0000FEB2 4E75                       		rts	
0000FEB4                            ; ===========================================================================
0000FEB4                            
0000FEB4                            Obj40_Pause:				; XREF: Obj40_FixToFloor
0000FEB4 5528 0025                  		subq.b	#2,$25(a0)
0000FEB8 317C 003B 0030             		move.w	#59,$30(a0)	; set pause time to 1 second
0000FEBE 317C 0000 0010             		move.w	#0,$10(a0)	; stop the object moving
0000FEC4 117C 0000 001C             		move.b	#0,$1C(a0)
0000FECA 4E75                       		rts	
0000FECC                            ; ===========================================================================
0000FECC                            
0000FECC                            Obj40_Animate:				; XREF: Obj40_Index
0000FECC 43F9 0000 0000             		lea	(Ani_obj40).l,a1
0000FED2 6100 AF4E                  		bsr.w	AnimateSprite
0000FED6 6000 DE8A                  		bra.w	DisplaySprite
0000FEDA                            ; ===========================================================================
0000FEDA                            
0000FEDA                            Obj40_Delete:				; XREF: Obj40_Index
0000FEDA 6000 DEC2                  		bra.w	DeleteObject
0000FEDE                            ; ===========================================================================
0000FEDE                            Ani_obj40:
0000FEDE                            	include "_anim\obj40.asm"
0000FEDE                            ; ---------------------------------------------------------------------------
0000FEDE                            ; Animation script - Motobug enemy
0000FEDE                            ; ---------------------------------------------------------------------------
0000FEDE 0000                       		dc.w byte_F788-Ani_obj40
0000FEE0 0000                       		dc.w byte_F78C-Ani_obj40
0000FEE2 0000                       		dc.w byte_F792-Ani_obj40
0000FEE4 0F02 FF00                  byte_F788:	dc.b $F, 2, $FF, 0
0000FEE8 0700 0100 02FF             byte_F78C:	dc.b 7,	0, 1, 0, 2, $FF
0000FEEE 0103 0603 0604 0604 0604+  byte_F792:	dc.b 1,	3, 6, 3, 6, 4, 6, 4, 6,	4, 6, 5, $FC, 0
0000FEFC                            		even
0000FEFC                            		even
0000FEFC                            
0000FEFC                            ; ---------------------------------------------------------------------------
0000FEFC                            ; Sprite mappings - Moto Bug enemy (GHZ)
0000FEFC                            ; ---------------------------------------------------------------------------
0000FEFC                            Map_obj40:
0000FEFC                            	include "_maps\obj40.asm"
0000FEFC                            Map_cedc:
0000FEFC 0000                       Map_cedc_0: 	dc.w Map_cedc_E-Map_cedc
0000FEFE 0000                       Map_cedc_2: 	dc.w Map_cedc_23-Map_cedc
0000FF00 0000                       Map_cedc_4: 	dc.w Map_cedc_38-Map_cedc
0000FF02 0000                       Map_cedc_6: 	dc.w Map_cedc_52-Map_cedc
0000FF04 0000                       Map_cedc_8: 	dc.w Map_cedc_58-Map_cedc
0000FF06 0000                       Map_cedc_A: 	dc.w Map_cedc_5E-Map_cedc
0000FF08 0000                       Map_cedc_C: 	dc.w Map_cedc_64-Map_cedc
0000FF0A 04                         Map_cedc_E: 	dc.b $4
0000FF0B F00D 0000 EC               	dc.b $F0, $D, $0, $0, $EC
0000FF10 000C 0008 EC               	dc.b $0, $C, $0, $8, $EC
0000FF15 F801 000C 0C               	dc.b $F8, $1, $0, $C, $C
0000FF1A 0808 000E F4               	dc.b $8, $8, $0, $E, $F4
0000FF1F 04                         Map_cedc_23: 	dc.b $4
0000FF20 F10D 0000 EC               	dc.b $F1, $D, $0, $0, $EC
0000FF25 010C 0008 EC               	dc.b $1, $C, $0, $8, $EC
0000FF2A F901 000C 0C               	dc.b $F9, $1, $0, $C, $C
0000FF2F 0908 0011 F4               	dc.b $9, $8, $0, $11, $F4
0000FF34 05                         Map_cedc_38: 	dc.b $5
0000FF35 F00D 0000 EC               	dc.b $F0, $D, $0, $0, $EC
0000FF3A 000C 0014 EC               	dc.b $0, $C, $0, $14, $EC
0000FF3F F801 000C 0C               	dc.b $F8, $1, $0, $C, $C
0000FF44 0804 0018 EC               	dc.b $8, $4, $0, $18, $EC
0000FF49 0804 0012 FC               	dc.b $8, $4, $0, $12, $FC
0000FF4E 01                         Map_cedc_52: 	dc.b $1
0000FF4F FA00 001A 10               	dc.b $FA, $0, $0, $1A, $10
0000FF54 01                         Map_cedc_58: 	dc.b $1
0000FF55 FA00 001B 10               	dc.b $FA, $0, $0, $1B, $10
0000FF5A 01                         Map_cedc_5E: 	dc.b $1
0000FF5B FA00 001C 10               	dc.b $FA, $0, $0, $1C, $10
0000FF60 00                         Map_cedc_64: 	dc.b $0
0000FF62 00                         	even
0000FF62 00                         	even
0000FF62                            
0000FF62                            ; ===========================================================================
0000FF62                            ; ---------------------------------------------------------------------------
0000FF62                            ; Object 4F - blank
0000FF62                            ; ---------------------------------------------------------------------------
0000FF62                            
0000FF62                            Obj4F:					; XREF: Obj_Index
0000FF62 4E75                       		rts	
0000FF64                            
0000FF64                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000FF64                            
0000FF64                            
0000FF64                            Obj50_ChkWall:				; XREF: Obj50_FixToFloor
0000FF64 3038 FE04                  		move.w	($FFFFFE04).w,d0
0000FF68 D047                       		add.w	d7,d0
0000FF6A 0240 0003                  		andi.w	#3,d0
0000FF6E 6600                       		bne.s	loc_F836
0000FF70 7600                       		moveq	#0,d3
0000FF72 1628 0019                  		move.b	$19(a0),d3
0000FF76 4A68 0010                  		tst.w	$10(a0)
0000FF7A 6B00                       		bmi.s	loc_F82C
0000FF7C 6100 0000                  		bsr.w	ObjHitWallRight
0000FF80 4A41                       		tst.w	d1
0000FF82 6A00                       		bpl.s	loc_F836
0000FF84                            
0000FF84                            loc_F828:
0000FF84 7001                       		moveq	#1,d0
0000FF86 4E75                       		rts	
0000FF88                            ; ===========================================================================
0000FF88                            
0000FF88                            loc_F82C:
0000FF88 4643                       		not.w	d3
0000FF8A 6100 0000                  		bsr.w	ObjHitWallLeft
0000FF8E 4A41                       		tst.w	d1
0000FF90 6BF2                       		bmi.s	loc_F828
0000FF92                            
0000FF92                            loc_F836:
0000FF92 7000                       		moveq	#0,d0
0000FF94 4E75                       		rts	
0000FF96                            ; End of function Obj50_ChkWall
0000FF96                            
0000FF96                            ; ===========================================================================
0000FF96                            ; ---------------------------------------------------------------------------
0000FF96                            ; Object 50 - Yadrin enemy (SYZ)
0000FF96                            ; ---------------------------------------------------------------------------
0000FF96                            
0000FF96                            Obj50:					; XREF: Obj_Index
0000FF96 7000                       		moveq	#0,d0
0000FF98 1028 0024                  		move.b	$24(a0),d0
0000FF9C 323B 0000                  		move.w	Obj50_Index(pc,d0.w),d1
0000FFA0 4EFB 1000                  		jmp	Obj50_Index(pc,d1.w)
0000FFA4                            ; ===========================================================================
0000FFA4 0000                       Obj50_Index:	dc.w Obj50_Main-Obj50_Index
0000FFA6 0000                       		dc.w Obj50_Action-Obj50_Index
0000FFA8                            ; ===========================================================================
0000FFA8                            
0000FFA8                            Obj50_Main:				; XREF: Obj50_Index
0000FFA8 217C 0000 0000 0004        		move.l	#Map_obj50,4(a0)
0000FFB0 317C 247B 0002             		move.w	#$247B,2(a0)
0000FFB6 117C 0004 0001             		move.b	#4,1(a0)
0000FFBC 117C 0004 0018             		move.b	#4,$18(a0)
0000FFC2 117C 0014 0019             		move.b	#$14,$19(a0)
0000FFC8 117C 0011 0016             		move.b	#$11,$16(a0)
0000FFCE 117C 0008 0017             		move.b	#8,$17(a0)
0000FFD4 117C 00CC 0020             		move.b	#$CC,$20(a0)
0000FFDA 6100 DD34                  		bsr.w	ObjectFall
0000FFDE 6100 0000                  		bsr.w	ObjHitFloor
0000FFE2 4A41                       		tst.w	d1
0000FFE4 6A00                       		bpl.s	locret_F89E
0000FFE6 D368 000C                  		add.w	d1,$C(a0)	; match	object's position with the floor
0000FFEA 317C 0000 0012             		move.w	#0,$12(a0)
0000FFF0 5428 0024                  		addq.b	#2,$24(a0)
0000FFF4 0868 0000 0022             		bchg	#0,$22(a0)
0000FFFA                            
0000FFFA                            locret_F89E:
0000FFFA 4E75                       		rts	
0000FFFC                            ; ===========================================================================
0000FFFC                            
0000FFFC                            Obj50_Action:				; XREF: Obj50_Index
0000FFFC 7000                       		moveq	#0,d0
0000FFFE 1028 0025                  		move.b	$25(a0),d0
00010002 323B 0000                  		move.w	Obj50_Index2(pc,d0.w),d1
00010006 4EBB 1000                  		jsr	Obj50_Index2(pc,d1.w)
0001000A 43F9 0000 0000             		lea	(Ani_obj50).l,a1
00010010 6100 AE10                  		bsr.w	AnimateSprite
00010014 6000 FDF4                  		bra.w	MarkObjGone
00010018                            ; ===========================================================================
00010018 0000                       Obj50_Index2:	dc.w Obj50_Move-Obj50_Index2
0001001A 0000                       		dc.w Obj50_FixToFloor-Obj50_Index2
0001001C                            ; ===========================================================================
0001001C                            
0001001C                            Obj50_Move:				; XREF: Obj50_Index2
0001001C 5368 0030                  		subq.w	#1,$30(a0)	; subtract 1 from pause	time
00010020 6A00                       		bpl.s	locret_F8E2	; if time remains, branch
00010022 5428 0025                  		addq.b	#2,$25(a0)
00010026 317C FF00 0010             		move.w	#-$100,$10(a0)	; move object
0001002C 117C 0001 001C             		move.b	#1,$1C(a0)
00010032 0868 0000 0022             		bchg	#0,$22(a0)
00010038 6600                       		bne.s	locret_F8E2
0001003A 4468 0010                  		neg.w	$10(a0)		; change direction
0001003E                            
0001003E                            locret_F8E2:
0001003E 4E75                       		rts	
00010040                            ; ===========================================================================
00010040                            
00010040                            Obj50_FixToFloor:			; XREF: Obj50_Index2
00010040 6100 DCFA                  		bsr.w	SpeedToPos
00010044 6100 0000                  		bsr.w	ObjHitFloor
00010048 0C41 FFF8                  		cmpi.w	#-8,d1
0001004C 6D00                       		blt.s	Obj50_Pause
0001004E 0C41 000C                  		cmpi.w	#$C,d1
00010052 6C00                       		bge.s	Obj50_Pause
00010054 D368 000C                  		add.w	d1,$C(a0)	; match	object's position to the floor
00010058 6100 FF0A                  		bsr.w	Obj50_ChkWall
0001005C 6600                       		bne.s	Obj50_Pause
0001005E 4E75                       		rts	
00010060                            ; ===========================================================================
00010060                            
00010060                            Obj50_Pause:				; XREF: Obj50_FixToFloor
00010060 5528 0025                  		subq.b	#2,$25(a0)
00010064 317C 003B 0030             		move.w	#59,$30(a0)	; set pause time to 1 second
0001006A 317C 0000 0010             		move.w	#0,$10(a0)
00010070 117C 0000 001C             		move.b	#0,$1C(a0)
00010076 4E75                       		rts	
00010078                            ; ===========================================================================
00010078                            Ani_obj50:
00010078                            	include "_anim\obj50.asm"
00010078                            ; ---------------------------------------------------------------------------
00010078                            ; Animation script - Yadrin enemy
00010078                            ; ---------------------------------------------------------------------------
00010078 0000                       		dc.w byte_F920-Ani_obj50
0001007A 0000                       		dc.w byte_F924-Ani_obj50
0001007C 0700 FF00                  byte_F920:	dc.b 7,	0, $FF,	0
00010080 0700 0301 0400 0302 05FF   byte_F924:	dc.b 7,	0, 3, 1, 4, 0, 3, 2, 5,	$FF
0001008A                            		even
0001008A                            		even
0001008A                            
0001008A                            ; ---------------------------------------------------------------------------
0001008A                            ; Sprite mappings - Yadrin enemy (SYZ)
0001008A                            ; ---------------------------------------------------------------------------
0001008A                            Map_obj50:
0001008A                            	include "_maps\obj50.asm"
0001008A                            Map_ff24:
0001008A 0000                       Map_ff24_0: 	dc.w Map_ff24_C-Map_ff24
0001008C 0000                       Map_ff24_2: 	dc.w Map_ff24_26-Map_ff24
0001008E 0000                       Map_ff24_4: 	dc.w Map_ff24_40-Map_ff24
00010090 0000                       Map_ff24_6: 	dc.w Map_ff24_5A-Map_ff24
00010092 0000                       Map_ff24_8: 	dc.w Map_ff24_74-Map_ff24
00010094 0000                       Map_ff24_A: 	dc.w Map_ff24_8E-Map_ff24
00010096 05                         Map_ff24_C: 	dc.b $5
00010097 F408 0000 F4               	dc.b $F4, $8, $0, $0, $F4
0001009C FC0E 0003 EC               	dc.b $FC, $E, $0, $3, $EC
000100A1 EC04 000F FC               	dc.b $EC, $4, $0, $F, $FC
000100A6 F402 0011 0C               	dc.b $F4, $2, $0, $11, $C
000100AB 0409 0031 FC               	dc.b $4, $9, $0, $31, $FC
000100B0 05                         Map_ff24_26: 	dc.b $5
000100B1 F408 0014 F4               	dc.b $F4, $8, $0, $14, $F4
000100B6 FC0E 0017 EC               	dc.b $FC, $E, $0, $17, $EC
000100BB EC04 000F FC               	dc.b $EC, $4, $0, $F, $FC
000100C0 F402 0011 0C               	dc.b $F4, $2, $0, $11, $C
000100C5 0409 0031 FC               	dc.b $4, $9, $0, $31, $FC
000100CA 05                         Map_ff24_40: 	dc.b $5
000100CB F409 0023 F4               	dc.b $F4, $9, $0, $23, $F4
000100D0 040D 0029 EC               	dc.b $4, $D, $0, $29, $EC
000100D5 EC04 000F FC               	dc.b $EC, $4, $0, $F, $FC
000100DA F402 0011 0C               	dc.b $F4, $2, $0, $11, $C
000100DF 0409 0031 FC               	dc.b $4, $9, $0, $31, $FC
000100E4 05                         Map_ff24_5A: 	dc.b $5
000100E5 F408 0000 F4               	dc.b $F4, $8, $0, $0, $F4
000100EA FC0E 0003 EC               	dc.b $FC, $E, $0, $3, $EC
000100EF EC04 000F FC               	dc.b $EC, $4, $0, $F, $FC
000100F4 F402 0011 0C               	dc.b $F4, $2, $0, $11, $C
000100F9 0409 0037 FC               	dc.b $4, $9, $0, $37, $FC
000100FE 05                         Map_ff24_74: 	dc.b $5
000100FF F408 0014 F4               	dc.b $F4, $8, $0, $14, $F4
00010104 FC0E 0017 EC               	dc.b $FC, $E, $0, $17, $EC
00010109 EC04 000F FC               	dc.b $EC, $4, $0, $F, $FC
0001010E F402 0011 0C               	dc.b $F4, $2, $0, $11, $C
00010113 0409 0037 FC               	dc.b $4, $9, $0, $37, $FC
00010118 05                         Map_ff24_8E: 	dc.b $5
00010119 F409 0023 F4               	dc.b $F4, $9, $0, $23, $F4
0001011E 040D 0029 EC               	dc.b $4, $D, $0, $29, $EC
00010123 EC04 000F FC               	dc.b $EC, $4, $0, $F, $FC
00010128 F402 0011 0C               	dc.b $F4, $2, $0, $11, $C
0001012D 0409 0037 FC               	dc.b $4, $9, $0, $37, $FC
00010132                            	even
00010132                            	even
00010132                            
00010132                            ; ---------------------------------------------------------------------------
00010132                            ; Solid	object subroutine (includes spikes, blocks, rocks etc)
00010132                            ;
00010132                            ; variables:
00010132                            ; d1 = width
00010132                            ; d2 = height /	2 (when	jumping)
00010132                            ; d3 = height /	2 (when	walking)
00010132                            ; d4 = x-axis position
00010132                            ; ---------------------------------------------------------------------------
00010132                            
00010132                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00010132                            
00010132                            
00010132                            SolidObject:
00010132 4A28 0025                  		tst.b	$25(a0)
00010136 6700 0000                  		beq.w	loc_FAC8
0001013A 3401                       		move.w	d1,d2
0001013C D442                       		add.w	d2,d2
0001013E 43F8 D000                  		lea	($FFFFD000).w,a1
00010142 0829 0001 0022             		btst	#1,$22(a1)
00010148 6600                       		bne.s	loc_F9FE
0001014A 3029 0008                  		move.w	8(a1),d0
0001014E 9068 0008                  		sub.w	8(a0),d0
00010152 D041                       		add.w	d1,d0
00010154 6B00                       		bmi.s	loc_F9FE
00010156 B042                       		cmp.w	d2,d0
00010158 6500                       		bcs.s	loc_FA12
0001015A                            
0001015A                            loc_F9FE:
0001015A 08A9 0003 0022             		bclr	#3,$22(a1)
00010160 08A8 0003 0022             		bclr	#3,$22(a0)
00010166 4228 0025                  		clr.b	$25(a0)
0001016A 7800                       		moveq	#0,d4
0001016C 4E75                       		rts	
0001016E                            ; ===========================================================================
0001016E                            
0001016E                            loc_FA12:
0001016E 3404                       		move.w	d4,d2
00010170                            		;bsr.w	MvSonicOnPtfm Causes an error in building (Come back to this)
00010170 7800                       		moveq	#0,d4
00010172 4E75                       		rts	
00010174                            ; ===========================================================================
00010174                            
00010174                            SolidObject71:				; XREF: Obj71_Solid
00010174 4A28 0025                  		tst.b	$25(a0)
00010178 6700 0000                  		beq.w	loc_FAD0
0001017C 3401                       		move.w	d1,d2
0001017E D442                       		add.w	d2,d2
00010180 43F8 D000                  		lea	($FFFFD000).w,a1
00010184 0829 0001 0022             		btst	#1,$22(a1)
0001018A 6600                       		bne.s	loc_FA44
0001018C 3029 0008                  		move.w	8(a1),d0
00010190 9068 0008                  		sub.w	8(a0),d0
00010194 D041                       		add.w	d1,d0
00010196 6B00                       		bmi.s	loc_FA44
00010198 B042                       		cmp.w	d2,d0
0001019A 6500                       		bcs.s	loc_FA58
0001019C                            
0001019C                            loc_FA44:
0001019C 08A9 0003 0022             		bclr	#3,$22(a1)
000101A2 08A8 0003 0022             		bclr	#3,$22(a0)
000101A8 4228 0025                  		clr.b	$25(a0)
000101AC 7800                       		moveq	#0,d4
000101AE 4E75                       		rts	
000101B0                            ; ===========================================================================
000101B0                            
000101B0                            loc_FA58:
000101B0 3404                       		move.w	d4,d2
000101B2                            	;	bsr.w	MvSonicOnPtfm  Causes an error in building (Come back to this)
000101B2 7800                       		moveq	#0,d4
000101B4 4E75                       		rts	
000101B6                            ; ===========================================================================
000101B6                            
000101B6                            SolidObject2F:				; XREF: Obj2F_Solid
000101B6 43F8 D000                  		lea	($FFFFD000).w,a1
000101BA 4A28 0001                  		tst.b	1(a0)
000101BE 6A00 0000                  		bpl.w	loc_FB92
000101C2 3029 0008                  		move.w	8(a1),d0
000101C6 9068 0008                  		sub.w	8(a0),d0
000101CA D041                       		add.w	d1,d0
000101CC 6B00 0000                  		bmi.w	loc_FB92
000101D0 3601                       		move.w	d1,d3
000101D2 D643                       		add.w	d3,d3
000101D4 B043                       		cmp.w	d3,d0
000101D6 6200 0000                  		bhi.w	loc_FB92
000101DA 3A00                       		move.w	d0,d5
000101DC 0828 0000 0001             		btst	#0,1(a0)
000101E2 6700                       		beq.s	loc_FA94
000101E4 4645                       		not.w	d5
000101E6 DA43                       		add.w	d3,d5
000101E8                            
000101E8                            loc_FA94:
000101E8 E24D                       		lsr.w	#1,d5
000101EA 7600                       		moveq	#0,d3
000101EC 1632 5000                  		move.b	(a2,d5.w),d3
000101F0 9612                       		sub.b	(a2),d3
000101F2 3A28 000C                  		move.w	$C(a0),d5
000101F6 9A43                       		sub.w	d3,d5
000101F8 1629 0016                  		move.b	$16(a1),d3
000101FC 4883                       		ext.w	d3
000101FE D443                       		add.w	d3,d2
00010200 3629 000C                  		move.w	$C(a1),d3
00010204 9645                       		sub.w	d5,d3
00010206 5843                       		addq.w	#4,d3
00010208 D642                       		add.w	d2,d3
0001020A 6B00 0000                  		bmi.w	loc_FB92
0001020E 3802                       		move.w	d2,d4
00010210 D844                       		add.w	d4,d4
00010212 B644                       		cmp.w	d4,d3
00010214 6400 0000                  		bcc.w	loc_FB92
00010218 6000 0000                  		bra.w	loc_FB0E
0001021C                            ; ===========================================================================
0001021C                            
0001021C                            loc_FAC8:
0001021C 4A28 0001                  		tst.b	1(a0)
00010220 6A00 0000                  		bpl.w	loc_FB92
00010224                            
00010224                            loc_FAD0:
00010224 43F8 D000                  		lea	($FFFFD000).w,a1
00010228 3029 0008                  		move.w	8(a1),d0
0001022C 9068 0008                  		sub.w	8(a0),d0
00010230 D041                       		add.w	d1,d0
00010232 6B00 0000                  		bmi.w	loc_FB92
00010236 3601                       		move.w	d1,d3
00010238 D643                       		add.w	d3,d3
0001023A B043                       		cmp.w	d3,d0
0001023C 6200 0000                  		bhi.w	loc_FB92
00010240 1629 0016                  		move.b	$16(a1),d3
00010244 4883                       		ext.w	d3
00010246 D443                       		add.w	d3,d2
00010248 3629 000C                  		move.w	$C(a1),d3
0001024C 9668 000C                  		sub.w	$C(a0),d3
00010250 5843                       		addq.w	#4,d3
00010252 D642                       		add.w	d2,d3
00010254 6B00 0000                  		bmi.w	loc_FB92
00010258 3802                       		move.w	d2,d4
0001025A D844                       		add.w	d4,d4
0001025C B644                       		cmp.w	d4,d3
0001025E 6400 0000                  		bcc.w	loc_FB92
00010262                            
00010262                            loc_FB0E:
00010262 4A38 F7C8                  		tst.b	($FFFFF7C8).w
00010266 6B00 0000                  		bmi.w	loc_FB92
0001026A 0C38 0006 D024             		cmpi.b	#6,($FFFFD024).w
00010270 6400 0000                  		bcc.w	loc_FB92
00010274 4A78 FE08                  		tst.w	($FFFFFE08).w
00010278 6600 0000                  		bne.w	loc_FBAC
0001027C 3A00                       		move.w	d0,d5
0001027E B240                       		cmp.w	d0,d1
00010280 6400                       		bcc.s	loc_FB36
00010282 D241                       		add.w	d1,d1
00010284 9041                       		sub.w	d1,d0
00010286 3A00                       		move.w	d0,d5
00010288 4445                       		neg.w	d5
0001028A                            
0001028A                            loc_FB36:
0001028A 3203                       		move.w	d3,d1
0001028C B443                       		cmp.w	d3,d2
0001028E 6400                       		bcc.s	loc_FB44
00010290 5943                       		subq.w	#4,d3
00010292 9644                       		sub.w	d4,d3
00010294 3203                       		move.w	d3,d1
00010296 4441                       		neg.w	d1
00010298                            
00010298                            loc_FB44:
00010298 BA41                       		cmp.w	d1,d5
0001029A 6200 0000                  		bhi.w	loc_FBB0
0001029E 0C41 0004                  		cmpi.w	#4,d1
000102A2 6300                       		bls.s	loc_FB8C
000102A4 4A40                       		tst.w	d0
000102A6 6700                       		beq.s	loc_FB70
000102A8 6B00                       		bmi.s	loc_FB5E
000102AA 4A69 0010                  		tst.w	$10(a1)
000102AE 6B00                       		bmi.s	loc_FB70
000102B0 6000                       		bra.s	loc_FB64
000102B2                            ; ===========================================================================
000102B2                            
000102B2                            loc_FB5E:
000102B2 4A69 0010                  		tst.w	$10(a1)
000102B6 6A00                       		bpl.s	loc_FB70
000102B8                            
000102B8                            loc_FB64:
000102B8 337C 0000 0014             		move.w	#0,$14(a1)	; stop Sonic moving
000102BE 337C 0000 0010             		move.w	#0,$10(a1)
000102C4                            
000102C4                            loc_FB70:
000102C4 9169 0008                  		sub.w	d0,8(a1)
000102C8 0829 0001 0022             		btst	#1,$22(a1)
000102CE 6600                       		bne.s	loc_FB8C
000102D0 08E9 0005 0022             		bset	#5,$22(a1)
000102D6 08E8 0005 0022             		bset	#5,$22(a0)
000102DC 7801                       		moveq	#1,d4
000102DE 4E75                       		rts	
000102E0                            ; ===========================================================================
000102E0                            
000102E0                            loc_FB8C:
000102E0 6100                       		bsr.s	loc_FBA0
000102E2 7801                       		moveq	#1,d4
000102E4 4E75                       		rts	
000102E6                            ; ===========================================================================
000102E6                            
000102E6                            loc_FB92:
000102E6 0828 0005 0022             		btst	#5,$22(a0)
000102EC 6700                       		beq.s	loc_FBAC
000102EE 337C 0001 001C             		move.w	#1,$1C(a1)	; use walking animation
000102F4                            
000102F4                            loc_FBA0:
000102F4 08A8 0005 0022             		bclr	#5,$22(a0)
000102FA 08A9 0005 0022             		bclr	#5,$22(a1)
00010300                            
00010300                            loc_FBAC:
00010300 7800                       		moveq	#0,d4
00010302 4E75                       		rts	
00010304                            ; ===========================================================================
00010304                            
00010304                            loc_FBB0:
00010304 4A43                       		tst.w	d3
00010306 6B00                       		bmi.s	loc_FBBC
00010308 0C43 0010                  		cmpi.w	#$10,d3
0001030C 6500                       		bcs.s	loc_FBEE
0001030E 60D6                       		bra.s	loc_FB92
00010310                            ; ===========================================================================
00010310                            
00010310                            loc_FBBC:
00010310 4A69 0012                  		tst.w	$12(a1)
00010314 6700                       		beq.s	loc_FBD6
00010316 6A00                       		bpl.s	loc_FBD2
00010318 4A43                       		tst.w	d3
0001031A 6A00                       		bpl.s	loc_FBD2
0001031C 9769 000C                  		sub.w	d3,$C(a1)
00010320 337C 0000 0012             		move.w	#0,$12(a1)	; stop Sonic moving
00010326                            
00010326                            loc_FBD2:
00010326 78FF                       		moveq	#-1,d4
00010328 4E75                       		rts	
0001032A                            ; ===========================================================================
0001032A                            
0001032A                            loc_FBD6:
0001032A 0829 0001 0022             		btst	#1,$22(a1)
00010330 66F4                       		bne.s	loc_FBD2
00010332 2F08                       		move.l	a0,-(sp)
00010334 2049                       		movea.l	a1,a0
00010336 4EB9 0000 0000             		jsr	KillSonic
0001033C 205F                       		movea.l	(sp)+,a0
0001033E 78FF                       		moveq	#-1,d4
00010340 4E75                       		rts	
00010342                            ; ===========================================================================
00010342                            
00010342                            loc_FBEE:
00010342 5943                       		subq.w	#4,d3
00010344 7200                       		moveq	#0,d1
00010346 1228 0019                  		move.b	$19(a0),d1
0001034A 3401                       		move.w	d1,d2
0001034C D442                       		add.w	d2,d2
0001034E D269 0008                  		add.w	8(a1),d1
00010352 9268 0008                  		sub.w	8(a0),d1
00010356 6B00                       		bmi.s	loc_FC28
00010358 B242                       		cmp.w	d2,d1
0001035A 6400                       		bcc.s	loc_FC28
0001035C 4A69 0012                  		tst.w	$12(a1)
00010360 6B00                       		bmi.s	loc_FC28
00010362 9769 000C                  		sub.w	d3,$C(a1)
00010366 5369 000C                  		subq.w	#1,$C(a1)
0001036A 6100                       		bsr.s	sub_FC2C
0001036C 117C 0002 0025             		move.b	#2,$25(a0)
00010372 08E8 0003 0022             		bset	#3,$22(a0)
00010378 78FF                       		moveq	#-1,d4
0001037A 4E75                       		rts	
0001037C                            ; ===========================================================================
0001037C                            
0001037C                            loc_FC28:
0001037C 7800                       		moveq	#0,d4
0001037E 4E75                       		rts	
00010380                            ; End of function SolidObject
00010380                            
00010380                            
00010380                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00010380                            
00010380                            
00010380                            sub_FC2C:				; XREF: SolidObject
00010380 0829 0003 0022             		btst	#3,$22(a1)
00010386 6700                       		beq.s	loc_FC4E
00010388 7000                       		moveq	#0,d0
0001038A 1029 003D                  		move.b	$3D(a1),d0
0001038E ED48                       		lsl.w	#6,d0
00010390 0680 00FF D000             		addi.l	#$FFD000,d0
00010396 2440                       		movea.l	d0,a2
00010398 08AA 0003 0022             		bclr	#3,$22(a2)
0001039E 422A 0025                  		clr.b	$25(a2)
000103A2                            
000103A2                            loc_FC4E:
000103A2 3008                       		move.w	a0,d0
000103A4 0440 D000                  		subi.w	#-$3000,d0
000103A8 EC48                       		lsr.w	#6,d0
000103AA 0240 007F                  		andi.w	#$7F,d0
000103AE 1340 003D                  		move.b	d0,$3D(a1)
000103B2 137C 0000 0026             		move.b	#0,$26(a1)
000103B8 337C 0000 0012             		move.w	#0,$12(a1)
000103BE 3369 0010 0014             		move.w	$10(a1),$14(a1)
000103C4 0829 0001 0022             		btst	#1,$22(a1)
000103CA 6700                       		beq.s	loc_FC84
000103CC 2F08                       		move.l	a0,-(sp)
000103CE 2049                       		movea.l	a1,a0
000103D0 4EB9 0000 0000             		jsr	Sonic_ResetOnFloor
000103D6 205F                       		movea.l	(sp)+,a0
000103D8                            
000103D8                            loc_FC84:
000103D8 08E9 0003 0022             		bset	#3,$22(a1)
000103DE 08E8 0003 0022             		bset	#3,$22(a0)
000103E4 4E75                       		rts	
000103E6                            ; End of function sub_FC2C
000103E6                            
000103E6                            ; ===========================================================================
000103E6                            ; ---------------------------------------------------------------------------
000103E6                            ; Object 51 - smashable	green block (MZ)
000103E6                            ; ---------------------------------------------------------------------------
000103E6                            
000103E6                            Obj51:					; XREF: Obj_Index
000103E6 7000                       		moveq	#0,d0
000103E8 1028 0024                  		move.b	$24(a0),d0
000103EC 323B 0000                  		move.w	Obj51_Index(pc,d0.w),d1
000103F0 4EBB 1000                  		jsr	Obj51_Index(pc,d1.w)
000103F4 6000 FA14                  		bra.w	MarkObjGone
000103F8                            ; ===========================================================================
000103F8 0000                       Obj51_Index:	dc.w Obj51_Main-Obj51_Index
000103FA 0000                       		dc.w Obj51_Solid-Obj51_Index
000103FC 0000                       		dc.w Obj51_Display-Obj51_Index
000103FE                            ; ===========================================================================
000103FE                            
000103FE                            Obj51_Main:				; XREF: Obj51_Index
000103FE 5428 0024                  		addq.b	#2,$24(a0)
00010402 217C 0000 0000 0004        		move.l	#Map_obj51,4(a0)
0001040A 317C 42B8 0002             		move.w	#$42B8,2(a0)
00010410 117C 0004 0001             		move.b	#4,1(a0)
00010416 117C 0010 0019             		move.b	#$10,$19(a0)
0001041C 117C 0004 0018             		move.b	#4,$18(a0)
00010422 1168 0028 001A             		move.b	$28(a0),$1A(a0)
00010428                            
00010428                            Obj51_Solid:				; XREF: Obj51_Index
00010428 3178 F7D0 0034             		move.w	($FFFFF7D0).w,$34(a0)
0001042E 1178 D01C 0032             		move.b	($FFFFD01C).w,$32(a0) ;	load Sonic's animation number
00010434 323C 001B                  		move.w	#$1B,d1
00010438 343C 0010                  		move.w	#$10,d2
0001043C 363C 0011                  		move.w	#$11,d3
00010440 3828 0008                  		move.w	8(a0),d4
00010444 6100 FCEC                  		bsr.w	SolidObject
00010448 0828 0003 0022             		btst	#3,$22(a0)
0001044E 6600                       		bne.s	Obj51_Smash
00010450                            
00010450                            locret_FCFC:
00010450 4E75                       		rts	
00010452                            ; ===========================================================================
00010452                            
00010452                            Obj51_Smash:				; XREF: Obj51_Solid
00010452 0C28 0002 0032             		cmpi.b	#2,$32(a0)	; is Sonic rolling/jumping?
00010458 66F6                       		bne.s	locret_FCFC	; if not, branch
0001045A 31E8 0034 F7D0             		move.w	$34(a0),($FFFFF7D0).w
00010460 08E9 0002 0022             		bset	#2,$22(a1)
00010466 137C 000E 0016             		move.b	#$E,$16(a1)
0001046C 137C 0007 0017             		move.b	#7,$17(a1)
00010472 137C 0002 001C             		move.b	#2,$1C(a1)
00010478 337C FD00 0012             		move.w	#-$300,$12(a1)	; bounce Sonic upwards
0001047E 08E9 0001 0022             		bset	#1,$22(a1)
00010484 08A9 0003 0022             		bclr	#3,$22(a1)
0001048A 137C 0002 0024             		move.b	#2,$24(a1)
00010490 08A8 0003 0022             		bclr	#3,$22(a0)
00010496 4228 0025                  		clr.b	$25(a0)
0001049A 117C 0001 001A             		move.b	#1,$1A(a0)
000104A0 49F9 0000 0000             		lea	(Obj51_Speeds).l,a4 ; load broken	fragment speed data
000104A6 7203                       		moveq	#3,d1		; set number of	fragments to 4
000104A8 343C 0038                  		move.w	#$38,d2
000104AC 6100 D4A2                  		bsr.w	SmashObject
000104B0 6100 DD36                  		bsr.w	SingleObjLoad
000104B4 6600                       		bne.s	Obj51_Display
000104B6 12BC 0029                  		move.b	#$29,0(a1)	; load points object
000104BA 3368 0008 0008             		move.w	8(a0),8(a1)
000104C0 3368 000C 000C             		move.w	$C(a0),$C(a1)
000104C6 3438 F7D0                  		move.w	($FFFFF7D0).w,d2
000104CA 5478 F7D0                  		addq.w	#2,($FFFFF7D0).w
000104CE 0C42 0006                  		cmpi.w	#6,d2
000104D2 6500                       		bcs.s	Obj51_Bonus
000104D4 7406                       		moveq	#6,d2
000104D6                            
000104D6                            Obj51_Bonus:
000104D6 7000                       		moveq	#0,d0
000104D8 303B 2000                  		move.w	Obj51_Points(pc,d2.w),d0
000104DC 0C78 0020 F7D0             		cmpi.w	#$20,($FFFFF7D0).w ; have 16 blocks been smashed?
000104E2 6500                       		bcs.s	loc_FD98	; if not, branch
000104E4 303C 03E8                  		move.w	#1000,d0	; give higher points for 16th block
000104E8 740A                       		moveq	#10,d2
000104EA                            
000104EA                            loc_FD98:
000104EA 4EB9 0000 0000             		jsr	AddPoints
000104F0 E24A                       		lsr.w	#1,d2
000104F2 1342 001A                  		move.b	d2,$1A(a1)
000104F6                            
000104F6                            Obj51_Display:				; XREF: Obj51_Index
000104F6 6100 D844                  		bsr.w	SpeedToPos
000104FA 0668 0038 0012             		addi.w	#$38,$12(a0)
00010500 6100 D860                  		bsr.w	DisplaySprite
00010504 4A28 0001                  		tst.b	1(a0)
00010508 6A00 D894                  		bpl.w	DeleteObject
0001050C 4E75                       		rts	
0001050E                            ; ===========================================================================
0001050E FE00 FE00                  Obj51_Speeds:	dc.w $FE00, $FE00	; x-speed, y-speed
00010512 FF00 FF00                  		dc.w $FF00, $FF00
00010516 0200 FE00                  		dc.w $200, $FE00
0001051A 0100 FF00                  		dc.w $100, $FF00
0001051E                            
0001051E 000A 0014 0032 0064        Obj51_Points:	dc.w 10, 20, 50, 100
00010526                            ; ---------------------------------------------------------------------------
00010526                            ; Sprite mappings - smashable green block (MZ)
00010526                            ; ---------------------------------------------------------------------------
00010526                            Map_obj51:
00010526                            	include "_maps\obj51.asm"
00010526                            ; ---------------------------------------------------------------------------
00010526                            ; Sprite mappings - smashable green block (MZ)
00010526                            ; ---------------------------------------------------------------------------
00010526 0000                       		dc.w byte_FDD8-Map_obj51
00010528 0000                       		dc.w byte_FDE3-Map_obj51
0001052A 02                         byte_FDD8:	dc.b 2
0001052B F00D 0000 F0               		dc.b $F0, $D, 0, 0, $F0
00010530 000D 0000 F0               		dc.b 0,	$D, 0, 0, $F0
00010535 04                         byte_FDE3:	dc.b 4
00010536 F005 8000 F0               		dc.b $F0, 5, $80, 0, $F0
0001053B 0005 8000 F0               		dc.b 0,	5, $80,	0, $F0
00010540 F005 8000 00               		dc.b $F0, 5, $80, 0, 0
00010545 0005 8000 00               		dc.b 0,	5, $80,	0, 0
0001054A                            		even
0001054A                            		even
0001054A                            
0001054A                            ; ===========================================================================
0001054A                            ; ---------------------------------------------------------------------------
0001054A                            ; Object 52 - moving platform blocks (MZ, LZ, SBZ)
0001054A                            ; ---------------------------------------------------------------------------
0001054A                            
0001054A                            Obj52:					; XREF: Obj_Index
0001054A 7000                       		moveq	#0,d0
0001054C 1028 0024                  		move.b	$24(a0),d0
00010550 323B 0000                  		move.w	Obj52_Index(pc,d0.w),d1
00010554 4EFB 1000                  		jmp	Obj52_Index(pc,d1.w)
00010558                            ; ===========================================================================
00010558 0000                       Obj52_Index:	dc.w Obj52_Main-Obj52_Index
0001055A 0000                       		dc.w Obj52_Platform-Obj52_Index
0001055C 0000                       		dc.w Obj52_StandOn-Obj52_Index
0001055E                            
0001055E 1000                       Obj52_Var:	dc.b $10, 0		; object width,	frame number
00010560 2001                       		dc.b $20, 1
00010562 2002                       		dc.b $20, 2
00010564 4003                       		dc.b $40, 3
00010566 3004                       		dc.b $30, 4
00010568                            ; ===========================================================================
00010568                            
00010568                            Obj52_Main:				; XREF: Obj52_Index
00010568 5428 0024                  		addq.b	#2,$24(a0)
0001056C 217C 0000 0000 0004        		move.l	#Map_obj52,4(a0)
00010574 317C 42B8 0002             		move.w	#$42B8,2(a0)
0001057A 0C38 0001 FE10             		cmpi.b	#1,($FFFFFE10).w ; check if level is LZ
00010580 6600                       		bne.s	loc_FE44
00010582 217C 0000 0000 0004        		move.l	#Map_obj52a,4(a0) ; LZ specific	code
0001058A 317C 43BC 0002             		move.w	#$43BC,2(a0)
00010590 117C 0007 0016             		move.b	#7,$16(a0)
00010596                            
00010596                            loc_FE44:
00010596 0C38 0005 FE10             		cmpi.b	#5,($FFFFFE10).w ; check if level is SBZ
0001059C 6600                       		bne.s	loc_FE60
0001059E 317C 22C0 0002             		move.w	#$22C0,2(a0)	; SBZ specific code (object 5228)
000105A4 0C28 0028 0028             		cmpi.b	#$28,$28(a0)	; is object 5228 ?
000105AA 6700                       		beq.s	loc_FE60	; if yes, branch
000105AC 317C 4460 0002             		move.w	#$4460,2(a0)	; SBZ specific code (object 523x)
000105B2                            
000105B2                            loc_FE60:
000105B2 117C 0004 0001             		move.b	#4,1(a0)
000105B8 7000                       		moveq	#0,d0
000105BA 1028 0028                  		move.b	$28(a0),d0
000105BE E648                       		lsr.w	#3,d0
000105C0 0240 001E                  		andi.w	#$1E,d0
000105C4 45FB 0098                  		lea	Obj52_Var(pc,d0.w),a2
000105C8 115A 0019                  		move.b	(a2)+,$19(a0)
000105CC 115A 001A                  		move.b	(a2)+,$1A(a0)
000105D0 117C 0004 0018             		move.b	#4,$18(a0)
000105D6 3168 0008 0030             		move.w	8(a0),$30(a0)
000105DC 3168 000C 0032             		move.w	$C(a0),$32(a0)
000105E2 0228 000F 0028             		andi.b	#$F,$28(a0)
000105E8                            
000105E8                            Obj52_Platform:				; XREF: Obj52_Index
000105E8 6100 0000                  		bsr.w	Obj52_Move
000105EC 7200                       		moveq	#0,d1
000105EE 1228 0019                  		move.b	$19(a0),d1
000105F2 4EB9 0000 79EC             		jsr	(PlatformObject).l
000105F8 6000                       		bra.s	Obj52_ChkDel
000105FA                            ; ===========================================================================
000105FA                            
000105FA                            Obj52_StandOn:				; XREF: Obj52_Index
000105FA 7200                       		moveq	#0,d1
000105FC 1228 0019                  		move.b	$19(a0),d1
00010600 4EB9 0000 7B60             		jsr	(ExitPlatform).l
00010606 3F28 0008                  		move.w	8(a0),-(sp)
0001060A 6100 0000                  		bsr.w	Obj52_Move
0001060E 341F                       		move.w	(sp)+,d2
00010610 4EB9 0000 80CA             		jsr	(MvSonicOnPtfm2).l
00010616                            
00010616                            Obj52_ChkDel:				; XREF: Obj52_Platform
00010616 3028 0030                  		move.w	$30(a0),d0
0001061A 0240 FF80                  		andi.w	#$FF80,d0
0001061E 3238 F700                  		move.w	($FFFFF700).w,d1
00010622 0441 0080                  		subi.w	#$80,d1
00010626 0241 FF80                  		andi.w	#$FF80,d1
0001062A 9041                       		sub.w	d1,d0
0001062C 0C40 0280                  		cmpi.w	#$280,d0
00010630 6200 D76C                  		bhi.w	DeleteObject
00010634 6000 D72C                  		bra.w	DisplaySprite
00010638                            ; ===========================================================================
00010638                            
00010638                            Obj52_Move:				; XREF: Obj52_Platform; Obj52_StandOn
00010638 7000                       		moveq	#0,d0
0001063A 1028 0028                  		move.b	$28(a0),d0
0001063E 0240 000F                  		andi.w	#$F,d0
00010642 D040                       		add.w	d0,d0
00010644 323B 0000                  		move.w	Obj52_TypeIndex(pc,d0.w),d1
00010648 4EFB 1000                  		jmp	Obj52_TypeIndex(pc,d1.w)
0001064C                            ; ===========================================================================
0001064C 0000 0000                  Obj52_TypeIndex:dc.w Obj52_Type00-Obj52_TypeIndex, Obj52_Type01-Obj52_TypeIndex
00010650 0000 0000                  		dc.w Obj52_Type02-Obj52_TypeIndex, Obj52_Type03-Obj52_TypeIndex
00010654 0000 0000                  		dc.w Obj52_Type02-Obj52_TypeIndex, Obj52_Type05-Obj52_TypeIndex
00010658 0000 0000                  		dc.w Obj52_Type06-Obj52_TypeIndex, Obj52_Type07-Obj52_TypeIndex
0001065C 0000 0000                  		dc.w Obj52_Type08-Obj52_TypeIndex, Obj52_Type02-Obj52_TypeIndex
00010660 0000                       		dc.w Obj52_Type0A-Obj52_TypeIndex
00010662                            ; ===========================================================================
00010662                            
00010662                            Obj52_Type00:				; XREF: Obj52_TypeIndex
00010662 4E75                       		rts	
00010664                            ; ===========================================================================
00010664                            
00010664                            Obj52_Type01:				; XREF: Obj52_TypeIndex
00010664 1038 FE6C                  		move.b	($FFFFFE6C).w,d0
00010668 323C 0060                  		move.w	#$60,d1
0001066C 0828 0000 0022             		btst	#0,$22(a0)
00010672 6700                       		beq.s	loc_FF26
00010674 4440                       		neg.w	d0
00010676 D041                       		add.w	d1,d0
00010678                            
00010678                            loc_FF26:
00010678 3228 0030                  		move.w	$30(a0),d1
0001067C 9240                       		sub.w	d0,d1
0001067E 3141 0008                  		move.w	d1,8(a0)
00010682 4E75                       		rts	
00010684                            ; ===========================================================================
00010684                            
00010684                            Obj52_Type02:				; XREF: Obj52_TypeIndex
00010684 0C28 0004 0024             		cmpi.b	#4,$24(a0)	; is Sonic standing on the platform?
0001068A 6600                       		bne.s	Obj52_02_Wait
0001068C 5228 0028                  		addq.b	#1,$28(a0)	; if yes, add 1	to type
00010690                            
00010690                            Obj52_02_Wait:
00010690 4E75                       		rts	
00010692                            ; ===========================================================================
00010692                            
00010692                            Obj52_Type03:				; XREF: Obj52_TypeIndex
00010692 7600                       		moveq	#0,d3
00010694 1628 0019                  		move.b	$19(a0),d3
00010698 6100 0000                  		bsr.w	ObjHitWallRight
0001069C 4A41                       		tst.w	d1		; has the platform hit a wall?
0001069E 6B00                       		bmi.s	Obj52_03_End	; if yes, branch
000106A0 5268 0008                  		addq.w	#1,8(a0)	; move platform	to the right
000106A4 3168 0008 0030             		move.w	8(a0),$30(a0)
000106AA 4E75                       		rts	
000106AC                            ; ===========================================================================
000106AC                            
000106AC                            Obj52_03_End:
000106AC 4228 0028                  		clr.b	$28(a0)		; change to type 00 (non-moving	type)
000106B0 4E75                       		rts	
000106B2                            ; ===========================================================================
000106B2                            
000106B2                            Obj52_Type05:				; XREF: Obj52_TypeIndex
000106B2 7600                       		moveq	#0,d3
000106B4 1628 0019                  		move.b	$19(a0),d3
000106B8 6100 0000                  		bsr.w	ObjHitWallRight
000106BC 4A41                       		tst.w	d1		; has the platform hit a wall?
000106BE 6B00                       		bmi.s	Obj52_05_End	; if yes, branch
000106C0 5268 0008                  		addq.w	#1,8(a0)	; move platform	to the right
000106C4 3168 0008 0030             		move.w	8(a0),$30(a0)
000106CA 4E75                       		rts	
000106CC                            ; ===========================================================================
000106CC                            
000106CC                            Obj52_05_End:
000106CC 5228 0028                  		addq.b	#1,$28(a0)	; change to type 06 (falling)
000106D0 4E75                       		rts	
000106D2                            ; ===========================================================================
000106D2                            
000106D2                            Obj52_Type06:				; XREF: Obj52_TypeIndex
000106D2 6100 D668                  		bsr.w	SpeedToPos
000106D6 0668 0018 0012             		addi.w	#$18,$12(a0)	; make the platform fall
000106DC 6100 0000                  		bsr.w	ObjHitFloor
000106E0 4A41                       		tst.w	d1		; has platform hit the floor?
000106E2 6A00 0000                  		bpl.w	locret_FFA0	; if not, branch
000106E6 D368 000C                  		add.w	d1,$C(a0)
000106EA 4268 0012                  		clr.w	$12(a0)		; stop platform	falling
000106EE 4228 0028                  		clr.b	$28(a0)		; change to type 00 (non-moving)
000106F2                            
000106F2                            locret_FFA0:
000106F2 4E75                       		rts	
000106F4                            ; ===========================================================================
000106F4                            
000106F4                            Obj52_Type07:				; XREF: Obj52_TypeIndex
000106F4 4A38 F7E2                  		tst.b	($FFFFF7E2).w	; has switch number 02 been pressed?
000106F8 6700                       		beq.s	Obj52_07_ChkDel
000106FA 5728 0028                  		subq.b	#3,$28(a0)	; if yes, change object	type to	04
000106FE                            
000106FE                            Obj52_07_ChkDel:
000106FE 588F                       		addq.l	#4,sp
00010700 3028 0030                  		move.w	$30(a0),d0
00010704 0240 FF80                  		andi.w	#$FF80,d0
00010708 3238 F700                  		move.w	($FFFFF700).w,d1
0001070C 0441 0080                  		subi.w	#$80,d1
00010710 0241 FF80                  		andi.w	#$FF80,d1
00010714 9041                       		sub.w	d1,d0
00010716 0C40 0280                  		cmpi.w	#$280,d0
0001071A 6200 D682                  		bhi.w	DeleteObject
0001071E 4E75                       		rts	
00010720                            ; ===========================================================================
00010720                            
00010720                            Obj52_Type08:				; XREF: Obj52_TypeIndex
00010720 1038 FE7C                  		move.b	($FFFFFE7C).w,d0
00010724 323C 0080                  		move.w	#$80,d1
00010728 0828 0000 0022             		btst	#0,$22(a0)
0001072E 6700                       		beq.s	loc_FFE2
00010730 4440                       		neg.w	d0
00010732 D041                       		add.w	d1,d0
00010734                            
00010734                            loc_FFE2:
00010734 3228 0032                  		move.w	$32(a0),d1
00010738 9240                       		sub.w	d0,d1
0001073A 3141 000C                  		move.w	d1,$C(a0)
0001073E 4E75                       		rts	
00010740                            ; ===========================================================================
00010740                            
00010740                            Obj52_Type0A:				; XREF: Obj52_TypeIndex
00010740 7600                       		moveq	#0,d3
00010742 1628 0019                  		move.b	$19(a0),d3
00010746 D643                       		add.w	d3,d3
00010748 7208                       		moveq	#8,d1
0001074A 0828 0000 0022             		btst	#0,$22(a0)
00010750 6700                       		beq.s	loc_10004
00010752 4441                       		neg.w	d1
00010754 4443                       		neg.w	d3
00010756                            
00010756                            loc_10004:
00010756 4A68 0036                  		tst.w	$36(a0)		; is platform set to move back?
0001075A 6600                       		bne.s	Obj52_0A_Back	; if yes, branch
0001075C 3028 0008                  		move.w	8(a0),d0
00010760 9068 0030                  		sub.w	$30(a0),d0
00010764 B043                       		cmp.w	d3,d0
00010766 6700                       		beq.s	Obj52_0A_Wait
00010768 D368 0008                  		add.w	d1,8(a0)	; move platform
0001076C 317C 012C 0034             		move.w	#300,$34(a0)	; set time delay to 5 seconds
00010772 4E75                       		rts	
00010774                            ; ===========================================================================
00010774                            
00010774                            Obj52_0A_Wait:
00010774 5368 0034                  		subq.w	#1,$34(a0)	; subtract 1 from time delay
00010778 6600                       		bne.s	locret_1002E	; if time remains, branch
0001077A 317C 0001 0036             		move.w	#1,$36(a0)	; set platform to move back to its original position
00010780                            
00010780                            locret_1002E:
00010780 4E75                       		rts	
00010782                            ; ===========================================================================
00010782                            
00010782                            Obj52_0A_Back:
00010782 3028 0008                  		move.w	8(a0),d0
00010786 9068 0030                  		sub.w	$30(a0),d0
0001078A 6700                       		beq.s	Obj52_0A_Reset
0001078C 9368 0008                  		sub.w	d1,8(a0)	; return platform to its original position
00010790 4E75                       		rts	
00010792                            ; ===========================================================================
00010792                            
00010792                            Obj52_0A_Reset:
00010792 4268 0036                  		clr.w	$36(a0)
00010796 5328 0028                  		subq.b	#1,$28(a0)
0001079A 4E75                       		rts	
0001079C                            ; ===========================================================================
0001079C                            ; ---------------------------------------------------------------------------
0001079C                            ; Sprite mappings - moving blocks (MZ, SBZ)
0001079C                            ; ---------------------------------------------------------------------------
0001079C                            Map_obj52:
0001079C                            	include "_maps\obj52mz.asm"
0001079C                            ; ---------------------------------------------------------------------------
0001079C                            ; Sprite mappings - moving blocks (MZ, SBZ)
0001079C                            ; ---------------------------------------------------------------------------
0001079C 0000 0000                  		dc.w byte_10054-Map_obj52, byte_1005A-Map_obj52
000107A0 0000 0000                  		dc.w byte_10065-Map_obj52, byte_1007A-Map_obj52
000107A4 0000                       		dc.w byte_1008F-Map_obj52
000107A6 01                         byte_10054:	dc.b 1
000107A7 F80F 0008 F0               		dc.b $F8, $F, 0, 8, $F0
000107AC 02                         byte_1005A:	dc.b 2
000107AD F80F 0008 E0               		dc.b $F8, $F, 0, 8, $E0
000107B2 F80F 0008 00               		dc.b $F8, $F, 0, 8, 0
000107B7 04                         byte_10065:	dc.b 4
000107B8 F80C 2000 E0               		dc.b $F8, $C, $20, 0, $E0
000107BD 000D 0004 E0               		dc.b 0,	$D, 0, 4, $E0
000107C2 F80C 2000 00               		dc.b $F8, $C, $20, 0, 0
000107C7 000D 0004 00               		dc.b 0,	$D, 0, 4, 0
000107CC 04                         byte_1007A:	dc.b 4
000107CD F80E 0000 C0               		dc.b $F8, $E, 0, 0, $C0
000107D2 F80E 0003 E0               		dc.b $F8, $E, 0, 3, $E0
000107D7 F80E 0003 00               		dc.b $F8, $E, 0, 3, 0
000107DC F80E 0800 20               		dc.b $F8, $E, 8, 0, $20
000107E1 03                         byte_1008F:	dc.b 3
000107E2 F80F 0008 D0               		dc.b $F8, $F, 0, 8, $D0
000107E7 F80F 0008 F0               		dc.b $F8, $F, 0, 8, $F0
000107EC F80F 0008 10               		dc.b $F8, $F, 0, 8, $10
000107F2 00                         		even
000107F2 00                         		even
000107F2                            
000107F2                            ; ---------------------------------------------------------------------------
000107F2                            ; Sprite mappings - moving block (LZ)
000107F2                            ; ---------------------------------------------------------------------------
000107F2                            Map_obj52a:
000107F2                            	include "_maps\obj52lz.asm"
000107F2                            ; ---------------------------------------------------------------------------
000107F2                            ; Sprite mappings - moving block (LZ)
000107F2                            ; ---------------------------------------------------------------------------
000107F2 0000                       		dc.w byte_100A2-Map_obj52a
000107F4 01                         byte_100A2:	dc.b 1
000107F5 F80D 0000 F0               		dc.b $F8, $D, 0, 0, $F0
000107FA                            		even
000107FA                            		even
000107FA                            
000107FA                            ; ===========================================================================
000107FA                            ; ---------------------------------------------------------------------------
000107FA                            ; Object 55 - Basaran enemy (MZ)
000107FA                            ; ---------------------------------------------------------------------------
000107FA                            
000107FA                            Obj55:					; XREF: Obj_Index
000107FA 7000                       		moveq	#0,d0
000107FC 1028 0024                  		move.b	$24(a0),d0
00010800 323B 0000                  		move.w	Obj55_Index(pc,d0.w),d1
00010804 4EFB 1000                  		jmp	Obj55_Index(pc,d1.w)
00010808                            ; ===========================================================================
00010808 0000                       Obj55_Index:	dc.w Obj55_Main-Obj55_Index
0001080A 0000                       		dc.w Obj55_Action-Obj55_Index
0001080C                            ; ===========================================================================
0001080C                            
0001080C                            Obj55_Main:				; XREF: Obj55_Index
0001080C 5428 0024                  		addq.b	#2,$24(a0)
00010810 217C 0000 0000 0004        		move.l	#Map_obj55,4(a0)
00010818 317C 84B8 0002             		move.w	#$84B8,2(a0)
0001081E 117C 0004 0001             		move.b	#4,1(a0)
00010824 117C 000C 0016             		move.b	#$C,$16(a0)
0001082A 117C 0002 0018             		move.b	#2,$18(a0)
00010830 117C 000B 0020             		move.b	#$B,$20(a0)
00010836 117C 0010 0019             		move.b	#$10,$19(a0)
0001083C                            
0001083C                            Obj55_Action:				; XREF: Obj55_Index
0001083C 7000                       		moveq	#0,d0
0001083E 1028 0025                  		move.b	$25(a0),d0
00010842 323B 0000                  		move.w	Obj55_Index2(pc,d0.w),d1
00010846 4EBB 1000                  		jsr	Obj55_Index2(pc,d1.w)
0001084A 43F9 0000 0000             		lea	(Ani_obj55).l,a1
00010850 6100 A5D0                  		bsr.w	AnimateSprite
00010854 6000 F5B4                  		bra.w	MarkObjGone
00010858                            ; ===========================================================================
00010858 0000                       Obj55_Index2:	dc.w Obj55_ChkDrop-Obj55_Index2
0001085A 0000                       		dc.w Obj55_DropFly-Obj55_Index2
0001085C 0000                       		dc.w Obj55_PlaySnd-Obj55_Index2
0001085E 0000                       		dc.w Obj55_FlyUp-Obj55_Index2
00010860                            ; ===========================================================================
00010860                            
00010860                            Obj55_ChkDrop:				; XREF: Obj55_Index2
00010860 343C 0080                  		move.w	#$80,d2
00010864 6100 0000                  		bsr.w	Obj55_ChkSonic
00010868 6400                       		bcc.s	Obj55_NoDrop
0001086A 3038 D00C                  		move.w	($FFFFD00C).w,d0
0001086E 3140 0036                  		move.w	d0,$36(a0)
00010872 9068 000C                  		sub.w	$C(a0),d0
00010876 6500                       		bcs.s	Obj55_NoDrop
00010878 0C40 0080                  		cmpi.w	#$80,d0		; is Sonic within $80 pixels of	basaran?
0001087C 6400                       		bcc.s	Obj55_NoDrop	; if not, branch
0001087E 4A78 FE08                  		tst.w	($FFFFFE08).w	; is debug mode	on?
00010882 6600                       		bne.s	Obj55_NoDrop	; if yes, branch
00010884 1038 FE0F                  		move.b	($FFFFFE0F).w,d0
00010888 D007                       		add.b	d7,d0
0001088A 0200 0007                  		andi.b	#7,d0
0001088E 6600                       		bne.s	Obj55_NoDrop
00010890 117C 0001 001C             		move.b	#1,$1C(a0)
00010896 5428 0025                  		addq.b	#2,$25(a0)
0001089A                            
0001089A                            Obj55_NoDrop:
0001089A 4E75                       		rts	
0001089C                            ; ===========================================================================
0001089C                            
0001089C                            Obj55_DropFly:				; XREF: Obj55_Index2
0001089C 6100 D49E                  		bsr.w	SpeedToPos
000108A0 0668 0018 0012             		addi.w	#$18,$12(a0)	; make basaran fall
000108A6 343C 0080                  		move.w	#$80,d2
000108AA 6100 0000                  		bsr.w	Obj55_ChkSonic
000108AE 3028 0036                  		move.w	$36(a0),d0
000108B2 9068 000C                  		sub.w	$C(a0),d0
000108B6 6500                       		bcs.s	Obj55_ChkDel
000108B8 0C40 0010                  		cmpi.w	#$10,d0
000108BC 6400                       		bcc.s	locret_10180
000108BE 3141 0010                  		move.w	d1,$10(a0)	; make basaran fly horizontally
000108C2 317C 0000 0012             		move.w	#0,$12(a0)	; stop basaran falling
000108C8 117C 0002 001C             		move.b	#2,$1C(a0)
000108CE 5428 0025                  		addq.b	#2,$25(a0)
000108D2                            
000108D2                            locret_10180:
000108D2 4E75                       		rts	
000108D4                            ; ===========================================================================
000108D4                            
000108D4                            Obj55_ChkDel:				; XREF: Obj55_DropFly
000108D4 4A28 0001                  		tst.b	1(a0)
000108D8 6A00 D4C4                  		bpl.w	DeleteObject
000108DC 4E75                       		rts	
000108DE                            ; ===========================================================================
000108DE                            
000108DE                            Obj55_PlaySnd:				; XREF: Obj55_Index2
000108DE 1038 FE0F                  		move.b	($FFFFFE0F).w,d0
000108E2 0200 000F                  		andi.b	#$F,d0
000108E6 6600                       		bne.s	loc_101A0
000108E8 303C 00C0                  		move.w	#$C0,d0
000108EC 4EB9 0000 15C0             		jsr	(PlaySound_Special).l ;	play flapping sound
000108F2                            
000108F2                            loc_101A0:
000108F2 6100 D448                  		bsr.w	SpeedToPos
000108F6 3038 D008                  		move.w	($FFFFD008).w,d0
000108FA 9068 0008                  		sub.w	8(a0),d0
000108FE 6400                       		bcc.s	loc_101B0
00010900 4440                       		neg.w	d0
00010902                            
00010902                            loc_101B0:
00010902 0C40 0080                  		cmpi.w	#$80,d0
00010906 6500                       		bcs.s	locret_101C6
00010908 1038 FE0F                  		move.b	($FFFFFE0F).w,d0
0001090C D007                       		add.b	d7,d0
0001090E 0200 0007                  		andi.b	#7,d0
00010912 6600                       		bne.s	locret_101C6
00010914 5428 0025                  		addq.b	#2,$25(a0)
00010918                            
00010918                            locret_101C6:
00010918 4E75                       		rts	
0001091A                            ; ===========================================================================
0001091A                            
0001091A                            Obj55_FlyUp:				; XREF: Obj55_Index2
0001091A 6100 D420                  		bsr.w	SpeedToPos
0001091E 0468 0018 0012             		subi.w	#$18,$12(a0)	; make basaran fly upwards
00010924 6100 0000                  		bsr.w	ObjHitCeiling
00010928 4A41                       		tst.w	d1		; has basaran hit the ceiling?
0001092A 6A00                       		bpl.s	locret_101F4	; if not, branch
0001092C 9368 000C                  		sub.w	d1,$C(a0)
00010930 0268 FFF8 0008             		andi.w	#$FFF8,8(a0)
00010936 4268 0010                  		clr.w	$10(a0)		; stop basaran moving
0001093A 4268 0012                  		clr.w	$12(a0)
0001093E 4228 001C                  		clr.b	$1C(a0)
00010942 4228 0025                  		clr.b	$25(a0)
00010946                            
00010946                            locret_101F4:
00010946 4E75                       		rts	
00010948                            ; ===========================================================================
00010948                            
00010948                            Obj55_ChkSonic:				; XREF: Obj55_ChkDrop
00010948 323C 0100                  		move.w	#$100,d1
0001094C 08E8 0000 0022             		bset	#0,$22(a0)
00010952 3038 D008                  		move.w	($FFFFD008).w,d0
00010956 9068 0008                  		sub.w	8(a0),d0
0001095A 6400                       		bcc.s	loc_10214
0001095C 4440                       		neg.w	d0
0001095E 4441                       		neg.w	d1
00010960 08A8 0000 0022             		bclr	#0,$22(a0)
00010966                            
00010966                            loc_10214:
00010966 B042                       		cmp.w	d2,d0
00010968 4E75                       		rts	
0001096A                            ; ===========================================================================
0001096A 6100 D3D0                  		bsr.w	SpeedToPos
0001096E 6100 D3F2                  		bsr.w	DisplaySprite
00010972 4A28 0001                  		tst.b	1(a0)
00010976 6A00 D426                  		bpl.w	DeleteObject
0001097A 4E75                       		rts	
0001097C                            ; ===========================================================================
0001097C                            Ani_obj55:
0001097C                            	include "_anim\obj55.asm"
0001097C                            ; ---------------------------------------------------------------------------
0001097C                            ; Animation script - Basaran enemy
0001097C                            ; ---------------------------------------------------------------------------
0001097C 0000                       		dc.w byte_10230-Ani_obj55
0001097E 0000                       		dc.w byte_10234-Ani_obj55
00010980 0000                       		dc.w byte_10238-Ani_obj55
00010982 0F00 FF00                  byte_10230:	dc.b $F, 0, $FF, 0
00010986 0F01 FF00                  byte_10234:	dc.b $F, 1, $FF, 0
0001098A 0301 0203 02FF             byte_10238:	dc.b 3,	1, 2, 3, 2, $FF
00010990                            		even
00010990                            		even
00010990                            
00010990                            ; ---------------------------------------------------------------------------
00010990                            ; Sprite mappings - Basaran enemy (MZ)
00010990                            ; ---------------------------------------------------------------------------
00010990                            Map_obj55:
00010990                            	include "_maps\obj55.asm"
00010990                            ; ---------------------------------------------------------------------------
00010990                            ; Sprite mappings - Basaran enemy (MZ)
00010990                            ; ---------------------------------------------------------------------------
00010990 0000 0000                  		dc.w byte_10246-Map_obj55, byte_1024C-Map_obj55
00010994 0000 0000                  		dc.w byte_1025C-Map_obj55, byte_10271-Map_obj55
00010998 01                         byte_10246:	dc.b 1
00010999 F406 0000 F8               		dc.b $F4, 6, 0,	0, $F8
0001099E 03                         byte_1024C:	dc.b 3
0001099F F20E 0006 F4               		dc.b $F2, $E, 0, 6, $F4
000109A4 0A04 0012 FC               		dc.b $A, 4, 0, $12, $FC
000109A9 0200 0027 0C               		dc.b 2,	0, 0, $27, $C
000109AE 04                         byte_1025C:	dc.b 4
000109AF F804 0014 F8               		dc.b $F8, 4, 0,	$14, $F8
000109B4 000C 0016 F0               		dc.b 0,	$C, 0, $16, $F0
000109B9 0804 001A 00               		dc.b 8,	4, 0, $1A, 0
000109BE 0000 0028 0C               		dc.b 0,	0, 0, $28, $C
000109C3 04                         byte_10271:	dc.b 4
000109C4 F609 001C F5               		dc.b $F6, 9, 0,	$1C, $F5
000109C9 0608 0022 F4               		dc.b 6,	8, 0, $22, $F4
000109CE 0E04 0025 F4               		dc.b $E, 4, 0, $25, $F4
000109D3 FE00 0027 0C               		dc.b $FE, 0, 0,	$27, $C
000109D8                            		even
000109D8                            		even
000109D8                            
000109D8                            ; ===========================================================================
000109D8                            ; ---------------------------------------------------------------------------
000109D8                            ; Object 56 - moving blocks (SYZ/SLZ), large doors (LZ)
000109D8                            ; ---------------------------------------------------------------------------
000109D8                            
000109D8                            Obj56:					; XREF: Obj_Index
000109D8 7000                       		moveq	#0,d0
000109DA 1028 0024                  		move.b	$24(a0),d0
000109DE 323B 0000                  		move.w	Obj56_Index(pc,d0.w),d1
000109E2 4EFB 1000                  		jmp	Obj56_Index(pc,d1.w)
000109E6                            ; ===========================================================================
000109E6 0000                       Obj56_Index:	dc.w Obj56_Main-Obj56_Index
000109E8 0000                       		dc.w Obj56_Action-Obj56_Index
000109EA                            
000109EA 1010                       Obj56_Var:	dc.b  $10, $10		; width, height
000109EC 2020                       		dc.b  $20, $20
000109EE 1020                       		dc.b  $10, $20
000109F0 201A                       		dc.b  $20, $1A
000109F2 1027                       		dc.b  $10, $27
000109F4 1010                       		dc.b  $10, $10
000109F6 0820                       		dc.b	8, $20
000109F8 4010                       		dc.b  $40, $10
000109FA                            ; ===========================================================================
000109FA                            
000109FA                            Obj56_Main:				; XREF: Obj56_Index
000109FA 5428 0024                  		addq.b	#2,$24(a0)
000109FE 217C 0000 0000 0004        		move.l	#Map_obj56,4(a0)
00010A06 317C 4000 0002             		move.w	#$4000,2(a0)
00010A0C 0C38 0001 FE10             		cmpi.b	#1,($FFFFFE10).w ; check if level is LZ
00010A12 6600                       		bne.s	loc_102C8
00010A14 317C 43C4 0002             		move.w	#$43C4,2(a0)	; LZ specific code
00010A1A                            
00010A1A                            loc_102C8:
00010A1A 117C 0004 0001             		move.b	#4,1(a0)
00010A20 117C 0003 0018             		move.b	#3,$18(a0)
00010A26 7000                       		moveq	#0,d0
00010A28 1028 0028                  		move.b	$28(a0),d0
00010A2C E648                       		lsr.w	#3,d0
00010A2E 0240 000E                  		andi.w	#$E,d0
00010A32 45FB 00B6                  		lea	Obj56_Var(pc,d0.w),a2
00010A36 115A 0019                  		move.b	(a2)+,$19(a0)
00010A3A 1152 0016                  		move.b	(a2),$16(a0)
00010A3E E248                       		lsr.w	#1,d0
00010A40 1140 001A                  		move.b	d0,$1A(a0)
00010A44 3168 0008 0034             		move.w	8(a0),$34(a0)
00010A4A 3168 000C 0030             		move.w	$C(a0),$30(a0)
00010A50 7000                       		moveq	#0,d0
00010A52 1012                       		move.b	(a2),d0
00010A54 D040                       		add.w	d0,d0
00010A56 3140 003A                  		move.w	d0,$3A(a0)
00010A5A 7000                       		moveq	#0,d0
00010A5C 0C38 0001 FE10             		cmpi.b	#1,($FFFFFE10).w ; check if level is LZ
00010A62 6700                       		beq.s	loc_10332
00010A64 1028 0028                  		move.b	$28(a0),d0	; SYZ/SLZ specific code
00010A68 0240 000F                  		andi.w	#$F,d0
00010A6C 5140                       		subq.w	#8,d0
00010A6E 6500                       		bcs.s	loc_10332
00010A70 E548                       		lsl.w	#2,d0
00010A72 45F8 FE8A                  		lea	($FFFFFE8A).w,a2
00010A76 45F2 0000                  		lea	(a2,d0.w),a2
00010A7A 4A52                       		tst.w	(a2)
00010A7C 6A00                       		bpl.s	loc_10332
00010A7E 0868 0000 0022             		bchg	#0,$22(a0)
00010A84                            
00010A84                            loc_10332:
00010A84 1028 0028                  		move.b	$28(a0),d0
00010A88 6A00                       		bpl.s	Obj56_Action
00010A8A 0200 000F                  		andi.b	#$F,d0
00010A8E 1140 003C                  		move.b	d0,$3C(a0)
00010A92 117C 0005 0028             		move.b	#5,$28(a0)
00010A98 0C28 0007 001A             		cmpi.b	#7,$1A(a0)
00010A9E 6600                       		bne.s	Obj56_ChkGone
00010AA0 117C 000C 0028             		move.b	#$C,$28(a0)
00010AA6 317C 0080 003A             		move.w	#$80,$3A(a0)
00010AAC                            
00010AAC                            Obj56_ChkGone:
00010AAC 45F8 FC00                  		lea	($FFFFFC00).w,a2
00010AB0 7000                       		moveq	#0,d0
00010AB2 1028 0023                  		move.b	$23(a0),d0
00010AB6 6700                       		beq.s	Obj56_Action
00010AB8 08B2 0007 0002             		bclr	#7,2(a2,d0.w)
00010ABE 0832 0000 0002             		btst	#0,2(a2,d0.w)
00010AC4 6700                       		beq.s	Obj56_Action
00010AC6 5228 0028                  		addq.b	#1,$28(a0)
00010ACA 4268 003A                  		clr.w	$3A(a0)
00010ACE                            
00010ACE                            Obj56_Action:				; XREF: Obj56_Index
00010ACE 3F28 0008                  		move.w	8(a0),-(sp)
00010AD2 7000                       		moveq	#0,d0
00010AD4 1028 0028                  		move.b	$28(a0),d0	; get object type
00010AD8 0240 000F                  		andi.w	#$F,d0		; read only the	2nd digit
00010ADC D040                       		add.w	d0,d0
00010ADE 323B 0000                  		move.w	Obj56_TypeIndex(pc,d0.w),d1
00010AE2 4EBB 1000                  		jsr	Obj56_TypeIndex(pc,d1.w)
00010AE6 381F                       		move.w	(sp)+,d4
00010AE8 4A28 0001                  		tst.b	1(a0)
00010AEC 6A00                       		bpl.s	Obj56_ChkDel
00010AEE 7200                       		moveq	#0,d1
00010AF0 1228 0019                  		move.b	$19(a0),d1
00010AF4 0641 000B                  		addi.w	#$B,d1
00010AF8 7400                       		moveq	#0,d2
00010AFA 1428 0016                  		move.b	$16(a0),d2
00010AFE 3602                       		move.w	d2,d3
00010B00 5243                       		addq.w	#1,d3
00010B02 6100 F62E                  		bsr.w	SolidObject
00010B06                            
00010B06                            Obj56_ChkDel:
00010B06 3028 0034                  		move.w	$34(a0),d0
00010B0A 0240 FF80                  		andi.w	#$FF80,d0
00010B0E 3238 F700                  		move.w	($FFFFF700).w,d1
00010B12 0441 0080                  		subi.w	#$80,d1
00010B16 0241 FF80                  		andi.w	#$FF80,d1
00010B1A 9041                       		sub.w	d1,d0
00010B1C 0C40 0280                  		cmpi.w	#$280,d0
00010B20 6200 D27C                  		bhi.w	DeleteObject
00010B24 6000 D23C                  		bra.w	DisplaySprite
00010B28                            ; ===========================================================================
00010B28 0000 0000                  Obj56_TypeIndex:dc.w Obj56_Type00-Obj56_TypeIndex, Obj56_Type01-Obj56_TypeIndex
00010B2C 0000 0000                  		dc.w Obj56_Type02-Obj56_TypeIndex, Obj56_Type03-Obj56_TypeIndex
00010B30 0000 0000                  		dc.w Obj56_Type04-Obj56_TypeIndex, Obj56_Type05-Obj56_TypeIndex
00010B34 0000 0000                  		dc.w Obj56_Type06-Obj56_TypeIndex, Obj56_Type07-Obj56_TypeIndex
00010B38 0000 0000                  		dc.w Obj56_Type08-Obj56_TypeIndex, Obj56_Type09-Obj56_TypeIndex
00010B3C 0000 0000                  		dc.w Obj56_Type0A-Obj56_TypeIndex, Obj56_Type0B-Obj56_TypeIndex
00010B40 0000 0000                  		dc.w Obj56_Type0C-Obj56_TypeIndex, Obj56_Type0D-Obj56_TypeIndex
00010B44                            ; ===========================================================================
00010B44                            
00010B44                            Obj56_Type00:				; XREF: Obj56_TypeIndex
00010B44 4E75                       		rts	
00010B46                            ; ===========================================================================
00010B46                            
00010B46                            Obj56_Type01:				; XREF: Obj56_TypeIndex
00010B46 323C 0040                  		move.w	#$40,d1
00010B4A 7000                       		moveq	#0,d0
00010B4C 1038 FE68                  		move.b	($FFFFFE68).w,d0
00010B50 6000                       		bra.s	Obj56_Move_LR
00010B52                            ; ===========================================================================
00010B52                            
00010B52                            Obj56_Type02:				; XREF: Obj56_TypeIndex
00010B52 323C 0080                  		move.w	#$80,d1
00010B56 7000                       		moveq	#0,d0
00010B58 1038 FE7C                  		move.b	($FFFFFE7C).w,d0
00010B5C                            
00010B5C                            Obj56_Move_LR:
00010B5C 0828 0000 0022             		btst	#0,$22(a0)
00010B62 6700                       		beq.s	loc_10416
00010B64 4440                       		neg.w	d0
00010B66 D041                       		add.w	d1,d0
00010B68                            
00010B68                            loc_10416:
00010B68 3228 0034                  		move.w	$34(a0),d1
00010B6C 9240                       		sub.w	d0,d1
00010B6E 3141 0008                  		move.w	d1,8(a0)	; move object horizontally
00010B72 4E75                       		rts	
00010B74                            ; ===========================================================================
00010B74                            
00010B74                            Obj56_Type03:				; XREF: Obj56_TypeIndex
00010B74 323C 0040                  		move.w	#$40,d1
00010B78 7000                       		moveq	#0,d0
00010B7A 1038 FE68                  		move.b	($FFFFFE68).w,d0
00010B7E 6000                       		bra.s	Obj56_Move_UD
00010B80                            ; ===========================================================================
00010B80                            
00010B80                            Obj56_Type04:				; XREF: Obj56_TypeIndex
00010B80 323C 0080                  		move.w	#$80,d1
00010B84 7000                       		moveq	#0,d0
00010B86 1038 FE7C                  		move.b	($FFFFFE7C).w,d0
00010B8A                            
00010B8A                            Obj56_Move_UD:
00010B8A 0828 0000 0022             		btst	#0,$22(a0)
00010B90 6700                       		beq.s	loc_10444
00010B92 4440                       		neg.w	d0
00010B94 D041                       		add.w	d1,d0
00010B96                            
00010B96                            loc_10444:
00010B96 3228 0030                  		move.w	$30(a0),d1
00010B9A 9240                       		sub.w	d0,d1
00010B9C 3141 000C                  		move.w	d1,$C(a0)	; move object vertically
00010BA0 4E75                       		rts	
00010BA2                            ; ===========================================================================
00010BA2                            
00010BA2                            Obj56_Type05:				; XREF: Obj56_TypeIndex
00010BA2 4A28 0038                  		tst.b	$38(a0)
00010BA6 6600                       		bne.s	loc_104A4
00010BA8 0C78 0100 FE10             		cmpi.w	#$100,($FFFFFE10).w ; is level LZ1 ?
00010BAE 6600                       		bne.s	loc_1047A	; if not, branch
00010BB0 0C28 0003 003C             		cmpi.b	#3,$3C(a0)
00010BB6 6600                       		bne.s	loc_1047A
00010BB8 4238 F7C9                  		clr.b	($FFFFF7C9).w
00010BBC 3038 D008                  		move.w	($FFFFD008).w,d0
00010BC0 B068 0008                  		cmp.w	8(a0),d0
00010BC4 6400                       		bcc.s	loc_1047A
00010BC6 11FC 0001 F7C9             		move.b	#1,($FFFFF7C9).w
00010BCC                            
00010BCC                            loc_1047A:
00010BCC 45F8 F7E0                  		lea	($FFFFF7E0).w,a2
00010BD0 7000                       		moveq	#0,d0
00010BD2 1028 003C                  		move.b	$3C(a0),d0
00010BD6 0832 0000 0000             		btst	#0,(a2,d0.w)
00010BDC 6700                       		beq.s	loc_104AE
00010BDE 0C78 0100 FE10             		cmpi.w	#$100,($FFFFFE10).w ; is level LZ1 ?
00010BE4 6600                       		bne.s	loc_1049E	; if not, branch
00010BE6 0C00 0003                  		cmpi.b	#3,d0
00010BEA 6600                       		bne.s	loc_1049E
00010BEC 4238 F7C9                  		clr.b	($FFFFF7C9).w
00010BF0                            
00010BF0                            loc_1049E:
00010BF0 117C 0001 0038             		move.b	#1,$38(a0)
00010BF6                            
00010BF6                            loc_104A4:
00010BF6 4A68 003A                  		tst.w	$3A(a0)
00010BFA 6700                       		beq.s	loc_104C8
00010BFC 5568 003A                  		subq.w	#2,$3A(a0)
00010C00                            
00010C00                            loc_104AE:
00010C00 3028 003A                  		move.w	$3A(a0),d0
00010C04 0828 0000 0022             		btst	#0,$22(a0)
00010C0A 6700                       		beq.s	loc_104BC
00010C0C 4440                       		neg.w	d0
00010C0E                            
00010C0E                            loc_104BC:
00010C0E 3228 0030                  		move.w	$30(a0),d1
00010C12 D240                       		add.w	d0,d1
00010C14 3141 000C                  		move.w	d1,$C(a0)
00010C18 4E75                       		rts	
00010C1A                            ; ===========================================================================
00010C1A                            
00010C1A                            loc_104C8:
00010C1A 5228 0028                  		addq.b	#1,$28(a0)
00010C1E 4228 0038                  		clr.b	$38(a0)
00010C22 45F8 FC00                  		lea	($FFFFFC00).w,a2
00010C26 7000                       		moveq	#0,d0
00010C28 1028 0023                  		move.b	$23(a0),d0
00010C2C 67D2                       		beq.s	loc_104AE
00010C2E 08F2 0000 0002             		bset	#0,2(a2,d0.w)
00010C34 60CA                       		bra.s	loc_104AE
00010C36                            ; ===========================================================================
00010C36                            
00010C36                            Obj56_Type06:				; XREF: Obj56_TypeIndex
00010C36 4A28 0038                  		tst.b	$38(a0)
00010C3A 6600                       		bne.s	loc_10500
00010C3C 45F8 F7E0                  		lea	($FFFFF7E0).w,a2
00010C40 7000                       		moveq	#0,d0
00010C42 1028 003C                  		move.b	$3C(a0),d0
00010C46 4A32 0000                  		tst.b	(a2,d0.w)
00010C4A 6A00                       		bpl.s	loc_10512
00010C4C 117C 0001 0038             		move.b	#1,$38(a0)
00010C52                            
00010C52                            loc_10500:
00010C52 7000                       		moveq	#0,d0
00010C54 1028 0016                  		move.b	$16(a0),d0
00010C58 D040                       		add.w	d0,d0
00010C5A B068 003A                  		cmp.w	$3A(a0),d0
00010C5E 6700                       		beq.s	loc_1052C
00010C60 5468 003A                  		addq.w	#2,$3A(a0)
00010C64                            
00010C64                            loc_10512:
00010C64 3028 003A                  		move.w	$3A(a0),d0
00010C68 0828 0000 0022             		btst	#0,$22(a0)
00010C6E 6700                       		beq.s	loc_10520
00010C70 4440                       		neg.w	d0
00010C72                            
00010C72                            loc_10520:
00010C72 3228 0030                  		move.w	$30(a0),d1
00010C76 D240                       		add.w	d0,d1
00010C78 3141 000C                  		move.w	d1,$C(a0)
00010C7C 4E75                       		rts	
00010C7E                            ; ===========================================================================
00010C7E                            
00010C7E                            loc_1052C:
00010C7E 5328 0028                  		subq.b	#1,$28(a0)
00010C82 4228 0038                  		clr.b	$38(a0)
00010C86 45F8 FC00                  		lea	($FFFFFC00).w,a2
00010C8A 7000                       		moveq	#0,d0
00010C8C 1028 0023                  		move.b	$23(a0),d0
00010C90 67D2                       		beq.s	loc_10512
00010C92 08B2 0000 0002             		bclr	#0,2(a2,d0.w)
00010C98 60CA                       		bra.s	loc_10512
00010C9A                            ; ===========================================================================
00010C9A                            
00010C9A                            Obj56_Type07:				; XREF: Obj56_TypeIndex
00010C9A 4A28 0038                  		tst.b	$38(a0)
00010C9E 6600                       		bne.s	loc_1055E
00010CA0 4A38 F7EF                  		tst.b	($FFFFF7EF).w	; has switch number $F been pressed?
00010CA4 6700                       		beq.s	locret_10578
00010CA6 117C 0001 0038             		move.b	#1,$38(a0)
00010CAC 4268 003A                  		clr.w	$3A(a0)
00010CB0                            
00010CB0                            loc_1055E:
00010CB0 5268 0008                  		addq.w	#1,8(a0)
00010CB4 3168 0008 0034             		move.w	8(a0),$34(a0)
00010CBA 5268 003A                  		addq.w	#1,$3A(a0)
00010CBE 0C68 0380 003A             		cmpi.w	#$380,$3A(a0)
00010CC4 6600                       		bne.s	locret_10578
00010CC6 4228 0028                  		clr.b	$28(a0)
00010CCA                            
00010CCA                            locret_10578:
00010CCA 4E75                       		rts	
00010CCC                            ; ===========================================================================
00010CCC                            
00010CCC                            Obj56_Type0C:				; XREF: Obj56_TypeIndex
00010CCC 4A28 0038                  		tst.b	$38(a0)
00010CD0 6600                       		bne.s	loc_10598
00010CD2 45F8 F7E0                  		lea	($FFFFF7E0).w,a2
00010CD6 7000                       		moveq	#0,d0
00010CD8 1028 003C                  		move.b	$3C(a0),d0
00010CDC 0832 0000 0000             		btst	#0,(a2,d0.w)
00010CE2 6700                       		beq.s	loc_105A2
00010CE4 117C 0001 0038             		move.b	#1,$38(a0)
00010CEA                            
00010CEA                            loc_10598:
00010CEA 4A68 003A                  		tst.w	$3A(a0)
00010CEE 6700                       		beq.s	loc_105C0
00010CF0 5568 003A                  		subq.w	#2,$3A(a0)
00010CF4                            
00010CF4                            loc_105A2:
00010CF4 3028 003A                  		move.w	$3A(a0),d0
00010CF8 0828 0000 0022             		btst	#0,$22(a0)
00010CFE 6700                       		beq.s	loc_105B4
00010D00 4440                       		neg.w	d0
00010D02 0640 0080                  		addi.w	#$80,d0
00010D06                            
00010D06                            loc_105B4:
00010D06 3228 0034                  		move.w	$34(a0),d1
00010D0A D240                       		add.w	d0,d1
00010D0C 3141 0008                  		move.w	d1,8(a0)
00010D10 4E75                       		rts	
00010D12                            ; ===========================================================================
00010D12                            
00010D12                            loc_105C0:
00010D12 5228 0028                  		addq.b	#1,$28(a0)
00010D16 4228 0038                  		clr.b	$38(a0)
00010D1A 45F8 FC00                  		lea	($FFFFFC00).w,a2
00010D1E 7000                       		moveq	#0,d0
00010D20 1028 0023                  		move.b	$23(a0),d0
00010D24 67CE                       		beq.s	loc_105A2
00010D26 08F2 0000 0002             		bset	#0,2(a2,d0.w)
00010D2C 60C6                       		bra.s	loc_105A2
00010D2E                            ; ===========================================================================
00010D2E                            
00010D2E                            Obj56_Type0D:				; XREF: Obj56_TypeIndex
00010D2E 4A28 0038                  		tst.b	$38(a0)
00010D32 6600                       		bne.s	loc_105F8
00010D34 45F8 F7E0                  		lea	($FFFFF7E0).w,a2
00010D38 7000                       		moveq	#0,d0
00010D3A 1028 003C                  		move.b	$3C(a0),d0
00010D3E 4A32 0000                  		tst.b	(a2,d0.w)
00010D42 6A00                       		bpl.s	loc_10606
00010D44 117C 0001 0038             		move.b	#1,$38(a0)
00010D4A                            
00010D4A                            loc_105F8:
00010D4A 303C 0080                  		move.w	#$80,d0
00010D4E B068 003A                  		cmp.w	$3A(a0),d0
00010D52 6700                       		beq.s	loc_10624
00010D54 5468 003A                  		addq.w	#2,$3A(a0)
00010D58                            
00010D58                            loc_10606:
00010D58 3028 003A                  		move.w	$3A(a0),d0
00010D5C 0828 0000 0022             		btst	#0,$22(a0)
00010D62 6700                       		beq.s	loc_10618
00010D64 4440                       		neg.w	d0
00010D66 0640 0080                  		addi.w	#$80,d0
00010D6A                            
00010D6A                            loc_10618:
00010D6A 3228 0034                  		move.w	$34(a0),d1
00010D6E D240                       		add.w	d0,d1
00010D70 3141 0008                  		move.w	d1,8(a0)
00010D74 4E75                       		rts	
00010D76                            ; ===========================================================================
00010D76                            
00010D76                            loc_10624:
00010D76 5328 0028                  		subq.b	#1,$28(a0)
00010D7A 4228 0038                  		clr.b	$38(a0)
00010D7E 45F8 FC00                  		lea	($FFFFFC00).w,a2
00010D82 7000                       		moveq	#0,d0
00010D84 1028 0023                  		move.b	$23(a0),d0
00010D88 67CE                       		beq.s	loc_10606
00010D8A 08B2 0000 0002             		bclr	#0,2(a2,d0.w)
00010D90 60C6                       		bra.s	loc_10606
00010D92                            ; ===========================================================================
00010D92                            
00010D92                            Obj56_Type08:				; XREF: Obj56_TypeIndex
00010D92 323C 0010                  		move.w	#$10,d1
00010D96 7000                       		moveq	#0,d0
00010D98 1038 FE88                  		move.b	($FFFFFE88).w,d0
00010D9C E248                       		lsr.w	#1,d0
00010D9E 3638 FE8A                  		move.w	($FFFFFE8A).w,d3
00010DA2 6000                       		bra.s	Obj56_Move_Sqr
00010DA4                            ; ===========================================================================
00010DA4                            
00010DA4                            Obj56_Type09:				; XREF: Obj56_TypeIndex
00010DA4 323C 0030                  		move.w	#$30,d1
00010DA8 7000                       		moveq	#0,d0
00010DAA 1038 FE8C                  		move.b	($FFFFFE8C).w,d0
00010DAE 3638 FE8E                  		move.w	($FFFFFE8E).w,d3
00010DB2 6000                       		bra.s	Obj56_Move_Sqr
00010DB4                            ; ===========================================================================
00010DB4                            
00010DB4                            Obj56_Type0A:				; XREF: Obj56_TypeIndex
00010DB4 323C 0050                  		move.w	#$50,d1
00010DB8 7000                       		moveq	#0,d0
00010DBA 1038 FE90                  		move.b	($FFFFFE90).w,d0
00010DBE 3638 FE92                  		move.w	($FFFFFE92).w,d3
00010DC2 6000                       		bra.s	Obj56_Move_Sqr
00010DC4                            ; ===========================================================================
00010DC4                            
00010DC4                            Obj56_Type0B:				; XREF: Obj56_TypeIndex
00010DC4 323C 0070                  		move.w	#$70,d1
00010DC8 7000                       		moveq	#0,d0
00010DCA 1038 FE94                  		move.b	($FFFFFE94).w,d0
00010DCE 3638 FE96                  		move.w	($FFFFFE96).w,d3
00010DD2                            
00010DD2                            Obj56_Move_Sqr:
00010DD2 4A43                       		tst.w	d3
00010DD4 6600                       		bne.s	loc_1068E
00010DD6 5228 0022                  		addq.b	#1,$22(a0)
00010DDA 0228 0003 0022             		andi.b	#3,$22(a0)
00010DE0                            
00010DE0                            loc_1068E:
00010DE0 1428 0022                  		move.b	$22(a0),d2
00010DE4 0202 0003                  		andi.b	#3,d2
00010DE8 6600                       		bne.s	loc_106AE
00010DEA 9041                       		sub.w	d1,d0
00010DEC D068 0034                  		add.w	$34(a0),d0
00010DF0 3140 0008                  		move.w	d0,8(a0)
00010DF4 4441                       		neg.w	d1
00010DF6 D268 0030                  		add.w	$30(a0),d1
00010DFA 3141 000C                  		move.w	d1,$C(a0)
00010DFE 4E75                       		rts	
00010E00                            ; ===========================================================================
00010E00                            
00010E00                            loc_106AE:
00010E00 5302                       		subq.b	#1,d2
00010E02 6600                       		bne.s	loc_106CC
00010E04 5341                       		subq.w	#1,d1
00010E06 9041                       		sub.w	d1,d0
00010E08 4440                       		neg.w	d0
00010E0A D068 0030                  		add.w	$30(a0),d0
00010E0E 3140 000C                  		move.w	d0,$C(a0)
00010E12 5241                       		addq.w	#1,d1
00010E14 D268 0034                  		add.w	$34(a0),d1
00010E18 3141 0008                  		move.w	d1,8(a0)
00010E1C 4E75                       		rts	
00010E1E                            ; ===========================================================================
00010E1E                            
00010E1E                            loc_106CC:
00010E1E 5302                       		subq.b	#1,d2
00010E20 6600                       		bne.s	loc_106EA
00010E22 5341                       		subq.w	#1,d1
00010E24 9041                       		sub.w	d1,d0
00010E26 4440                       		neg.w	d0
00010E28 D068 0034                  		add.w	$34(a0),d0
00010E2C 3140 0008                  		move.w	d0,8(a0)
00010E30 5241                       		addq.w	#1,d1
00010E32 D268 0030                  		add.w	$30(a0),d1
00010E36 3141 000C                  		move.w	d1,$C(a0)
00010E3A 4E75                       		rts	
00010E3C                            ; ===========================================================================
00010E3C                            
00010E3C                            loc_106EA:
00010E3C 9041                       		sub.w	d1,d0
00010E3E D068 0030                  		add.w	$30(a0),d0
00010E42 3140 000C                  		move.w	d0,$C(a0)
00010E46 4441                       		neg.w	d1
00010E48 D268 0034                  		add.w	$34(a0),d1
00010E4C 3141 0008                  		move.w	d1,8(a0)
00010E50 4E75                       		rts	
00010E52                            ; ===========================================================================
00010E52                            ; ---------------------------------------------------------------------------
00010E52                            ; Sprite mappings - moving blocks (SYZ/SLZ/LZ)
00010E52                            ; ---------------------------------------------------------------------------
00010E52                            Map_obj56:
00010E52                            	include "_maps\obj56.asm"
00010E52                            ; ---------------------------------------------------------------------------
00010E52                            ; Sprite mappings - moving blocks (SYZ/SLZ/LZ)
00010E52                            ; ---------------------------------------------------------------------------
00010E52 0000 0000                  		dc.w byte_10710-Map_obj56, byte_10716-Map_obj56
00010E56 0000 0000                  		dc.w byte_1072B-Map_obj56, byte_10736-Map_obj56
00010E5A 0000 0000                  		dc.w byte_1074B-Map_obj56, byte_1075B-Map_obj56
00010E5E 0000 0000                  		dc.w byte_10761-Map_obj56, byte_1076C-Map_obj56
00010E62 01                         byte_10710:	dc.b 1
00010E63 F00F 0061 F0               		dc.b $F0, $F, 0, $61, $F0
00010E68 04                         byte_10716:	dc.b 4
00010E69 E00F 0061 E0               		dc.b $E0, $F, 0, $61, $E0
00010E6E E00F 0061 00               		dc.b $E0, $F, 0, $61, 0
00010E73 000F 0061 E0               		dc.b 0,	$F, 0, $61, $E0
00010E78 000F 0061 00               		dc.b 0,	$F, 0, $61, 0
00010E7D 02                         byte_1072B:	dc.b 2
00010E7E E00F 0061 F0               		dc.b $E0, $F, 0, $61, $F0
00010E83 000F 0061 F0               		dc.b 0,	$F, 0, $61, $F0
00010E88 04                         byte_10736:	dc.b 4
00010E89 E60F 0081 E0               		dc.b $E6, $F, 0, $81, $E0
00010E8E E60F 0081 00               		dc.b $E6, $F, 0, $81, 0
00010E93 000F 0081 E0               		dc.b 0,	$F, 0, $81, $E0
00010E98 000F 0081 00               		dc.b 0,	$F, 0, $81, 0
00010E9D 03                         byte_1074B:	dc.b 3
00010E9E D90F 0081 F0               		dc.b $D9, $F, 0, $81, $F0
00010EA3 F30F 0081 F0               		dc.b $F3, $F, 0, $81, $F0
00010EA8 0D0F 0081 F0               		dc.b $D, $F, 0,	$81, $F0
00010EAD 01                         byte_1075B:	dc.b 1
00010EAE F00F 0021 F0               		dc.b $F0, $F, 0, $21, $F0
00010EB3 02                         byte_10761:	dc.b 2
00010EB4 E007 0000 F8               		dc.b $E0, 7, 0,	0, $F8
00010EB9 0007 1000 F8               		dc.b 0,	7, $10,	0, $F8
00010EBE 04                         byte_1076C:	dc.b 4
00010EBF F00F 0022 C0               		dc.b $F0, $F, 0, $22, $C0
00010EC4 F00F 0022 E0               		dc.b $F0, $F, 0, $22, $E0
00010EC9 F00F 0022 00               		dc.b $F0, $F, 0, $22, 0
00010ECE F00F 0022 20               		dc.b $F0, $F, 0, $22, $20
00010ED4 00                         		even
00010ED4 00                         		even
00010ED4                            
00010ED4                            ; ===========================================================================
00010ED4                            ; ---------------------------------------------------------------------------
00010ED4                            ; Object 57 - spiked balls (SYZ, LZ)
00010ED4                            ; ---------------------------------------------------------------------------
00010ED4                            
00010ED4                            Obj57:					; XREF: Obj_Index
00010ED4 7000                       		moveq	#0,d0
00010ED6 1028 0024                  		move.b	$24(a0),d0
00010EDA 323B 0000                  		move.w	Obj57_Index(pc,d0.w),d1
00010EDE 4EFB 1000                  		jmp	Obj57_Index(pc,d1.w)
00010EE2                            ; ===========================================================================
00010EE2 0000                       Obj57_Index:	dc.w Obj57_Main-Obj57_Index
00010EE4 0000                       		dc.w Obj57_Move-Obj57_Index
00010EE6 0000                       		dc.w Obj57_Display-Obj57_Index
00010EE8                            ; ===========================================================================
00010EE8                            
00010EE8                            Obj57_Main:				; XREF: Obj57_Index
00010EE8 5428 0024                  		addq.b	#2,$24(a0)
00010EEC 217C 0000 0000 0004        		move.l	#Map_obj57,4(a0)
00010EF4 317C 03BA 0002             		move.w	#$3BA,2(a0)
00010EFA 117C 0004 0001             		move.b	#4,1(a0)
00010F00 117C 0004 0018             		move.b	#4,$18(a0)
00010F06 117C 0008 0019             		move.b	#8,$19(a0)
00010F0C 3168 0008 003A             		move.w	8(a0),$3A(a0)
00010F12 3168 000C 0038             		move.w	$C(a0),$38(a0)
00010F18 117C 0098 0020             		move.b	#$98,$20(a0)	; SYZ specific code (chain hurts Sonic)
00010F1E 0C38 0001 FE10             		cmpi.b	#1,($FFFFFE10).w ; check if level is LZ
00010F24 6600                       		bne.s	loc_107E8
00010F26 117C 0000 0020             		move.b	#0,$20(a0)	; LZ specific code (chain doesn't hurt)
00010F2C 317C 0310 0002             		move.w	#$310,2(a0)
00010F32 217C 0000 0000 0004        		move.l	#Map_obj57a,4(a0)
00010F3A                            
00010F3A                            loc_107E8:
00010F3A 1228 0028                  		move.b	$28(a0),d1	; get object type
00010F3E 0201 00F0                  		andi.b	#$F0,d1		; read only the	1st digit
00010F42 4881                       		ext.w	d1
00010F44 E741                       		asl.w	#3,d1		; multiply by 8
00010F46 3141 003E                  		move.w	d1,$3E(a0)	; set object twirl speed
00010F4A 1028 0022                  		move.b	$22(a0),d0
00010F4E E418                       		ror.b	#2,d0
00010F50 0200 00C0                  		andi.b	#-$40,d0
00010F54 1140 0026                  		move.b	d0,$26(a0)
00010F58 45E8 0029                  		lea	$29(a0),a2
00010F5C 1228 0028                  		move.b	$28(a0),d1	; get object type
00010F60 0241 0007                  		andi.w	#7,d1		; read only the	2nd digit
00010F64 14FC 0000                  		move.b	#0,(a2)+
00010F68 3601                       		move.w	d1,d3
00010F6A E94B                       		lsl.w	#4,d3
00010F6C 1143 003C                  		move.b	d3,$3C(a0)
00010F70 5341                       		subq.w	#1,d1		; set chain length (type-1)
00010F72 6500                       		bcs.s	loc_10894
00010F74 0828 0003 0028             		btst	#3,$28(a0)
00010F7A 6700                       		beq.s	Obj57_MakeChain
00010F7C 5341                       		subq.w	#1,d1
00010F7E 6500                       		bcs.s	loc_10894
00010F80                            
00010F80                            Obj57_MakeChain:
00010F80 6100 D266                  		bsr.w	SingleObjLoad
00010F84 6600                       		bne.s	loc_10894
00010F86 5228 0029                  		addq.b	#1,$29(a0)
00010F8A 3A09                       		move.w	a1,d5
00010F8C 0445 D000                  		subi.w	#-$3000,d5
00010F90 EC4D                       		lsr.w	#6,d5
00010F92 0245 007F                  		andi.w	#$7F,d5
00010F96 14C5                       		move.b	d5,(a2)+
00010F98 137C 0004 0024             		move.b	#4,$24(a1)
00010F9E 1290                       		move.b	0(a0),0(a1)
00010FA0 2368 0004 0004             		move.l	4(a0),4(a1)
00010FA6 3368 0002 0002             		move.w	2(a0),2(a1)
00010FAC 1368 0001 0001             		move.b	1(a0),1(a1)
00010FB2 1368 0018 0018             		move.b	$18(a0),$18(a1)
00010FB8 1368 0019 0019             		move.b	$19(a0),$19(a1)
00010FBE 1368 0020 0020             		move.b	$20(a0),$20(a1)
00010FC4 0403 0010                  		subi.b	#$10,d3
00010FC8 1343 003C                  		move.b	d3,$3C(a1)
00010FCC 0C38 0001 FE10             		cmpi.b	#1,($FFFFFE10).w
00010FD2 6600                       		bne.s	loc_10890
00010FD4 4A03                       		tst.b	d3
00010FD6 6600                       		bne.s	loc_10890
00010FD8 137C 0002 001A             		move.b	#2,$1A(a1)
00010FDE                            
00010FDE                            loc_10890:
00010FDE 51C9 FFA0                  		dbf	d1,Obj57_MakeChain ; repeat for	length of chain
00010FE2                            
00010FE2                            loc_10894:
00010FE2 3A08                       		move.w	a0,d5
00010FE4 0445 D000                  		subi.w	#-$3000,d5
00010FE8 EC4D                       		lsr.w	#6,d5
00010FEA 0245 007F                  		andi.w	#$7F,d5
00010FEE 14C5                       		move.b	d5,(a2)+
00010FF0 0C38 0001 FE10             		cmpi.b	#1,($FFFFFE10).w ; check if level is LZ
00010FF6 6600                       		bne.s	Obj57_Move
00010FF8 117C 008B 0020             		move.b	#$8B,$20(a0)	; if yes, make last spikeball larger
00010FFE 117C 0001 001A             		move.b	#1,$1A(a0)	; use different	frame
00011004                            
00011004                            Obj57_Move:				; XREF: Obj57_Index
00011004 6100 0000                  		bsr.w	Obj57_MoveSub
00011008 6000 0000                  		bra.w	Obj57_ChkDel
0001100C                            ; ===========================================================================
0001100C                            
0001100C                            Obj57_MoveSub:				; XREF: Obj57_Move
0001100C 3028 003E                  		move.w	$3E(a0),d0
00011010 D168 0026                  		add.w	d0,$26(a0)
00011014 1028 0026                  		move.b	$26(a0),d0
00011018 4EB9 0000 2C64             		jsr	(CalcSine).l
0001101E 3428 0038                  		move.w	$38(a0),d2
00011022 3628 003A                  		move.w	$3A(a0),d3
00011026 45E8 0029                  		lea	$29(a0),a2
0001102A 7C00                       		moveq	#0,d6
0001102C 1C1A                       		move.b	(a2)+,d6
0001102E                            
0001102E                            Obj57_MoveLoop:
0001102E 7800                       		moveq	#0,d4
00011030 181A                       		move.b	(a2)+,d4
00011032 ED4C                       		lsl.w	#6,d4
00011034 0684 00FF D000             		addi.l	#$FFD000,d4
0001103A 2244                       		movea.l	d4,a1
0001103C 7800                       		moveq	#0,d4
0001103E 1829 003C                  		move.b	$3C(a1),d4
00011042 2A04                       		move.l	d4,d5
00011044 C9C0                       		muls.w	d0,d4
00011046 E084                       		asr.l	#8,d4
00011048 CBC1                       		muls.w	d1,d5
0001104A E085                       		asr.l	#8,d5
0001104C D842                       		add.w	d2,d4
0001104E DA43                       		add.w	d3,d5
00011050 3344 000C                  		move.w	d4,$C(a1)
00011054 3345 0008                  		move.w	d5,8(a1)
00011058 51CE FFD4                  		dbf	d6,Obj57_MoveLoop
0001105C 4E75                       		rts	
0001105E                            ; ===========================================================================
0001105E                            
0001105E                            Obj57_ChkDel:				; XREF: Obj57_Move
0001105E 3028 003A                  		move.w	$3A(a0),d0
00011062 0240 FF80                  		andi.w	#$FF80,d0
00011066 3238 F700                  		move.w	($FFFFF700).w,d1
0001106A 0441 0080                  		subi.w	#$80,d1
0001106E 0241 FF80                  		andi.w	#$FF80,d1
00011072 9041                       		sub.w	d1,d0
00011074 0C40 0280                  		cmpi.w	#$280,d0
00011078 6200 0000                  		bhi.w	Obj57_Delete
0001107C 6000 CCE4                  		bra.w	DisplaySprite
00011080                            ; ===========================================================================
00011080                            
00011080                            Obj57_Delete:				; XREF: Obj57_ChkDel
00011080 7400                       		moveq	#0,d2
00011082 45E8 0029                  		lea	$29(a0),a2
00011086 141A                       		move.b	(a2)+,d2
00011088                            
00011088                            Obj57_DelLoop:
00011088 7000                       		moveq	#0,d0
0001108A 101A                       		move.b	(a2)+,d0
0001108C ED48                       		lsl.w	#6,d0
0001108E 0680 00FF D000             		addi.l	#$FFD000,d0
00011094 2240                       		movea.l	d0,a1
00011096 6100 CD08                  		bsr.w	DeleteObject2
0001109A 51CA FFEC                  		dbf	d2,Obj57_DelLoop ; delete all pieces of	chain
0001109E                            
0001109E 4E75                       		rts	
000110A0                            ; ===========================================================================
000110A0                            
000110A0                            Obj57_Display:				; XREF: Obj57_Index
000110A0 6000 CCC0                  		bra.w	DisplaySprite
000110A4                            ; ===========================================================================
000110A4                            ; ---------------------------------------------------------------------------
000110A4                            ; Sprite mappings - chain of spiked balls (SYZ)
000110A4                            ; ---------------------------------------------------------------------------
000110A4                            Map_obj57:
000110A4                            	include "_maps\obj57syz.asm"
000110A4                            ; ---------------------------------------------------------------------------
000110A4                            ; Sprite mappings - chain of spiked balls (SYZ)
000110A4                            ; ---------------------------------------------------------------------------
000110A4 0000                       		dc.w byte_10958-Map_obj57
000110A6 01                         byte_10958:	dc.b 1
000110A7 F805 0000 F8               		dc.b $F8, 5, 0,	0, $F8
000110AC                            		even
000110AC                            		even
000110AC                            
000110AC                            ; ---------------------------------------------------------------------------
000110AC                            ; Sprite mappings - spiked ball	on a chain (LZ)
000110AC                            ; ---------------------------------------------------------------------------
000110AC                            Map_obj57a:
000110AC                            	include "_maps\obj57lz.asm"
000110AC                            ; ---------------------------------------------------------------------------
000110AC                            ; Sprite mappings - spiked ball	on a chain (LZ)
000110AC                            ; ---------------------------------------------------------------------------
000110AC 0000                       		dc.w byte_10964-Map_obj57a
000110AE 0000                       		dc.w byte_1096A-Map_obj57a
000110B0 0000                       		dc.w byte_10970-Map_obj57a
000110B2 01                         byte_10964:	dc.b 1
000110B3 F805 0000 F8               		dc.b $F8, 5, 0,	0, $F8
000110B8 01                         byte_1096A:	dc.b 1
000110B9 F00F 0004 F0               		dc.b $F0, $F, 0, 4, $F0
000110BE 01                         byte_10970:	dc.b 1
000110BF F805 0014 F8               		dc.b $F8, 5, 0,	$14, $F8
000110C4                            		even
000110C4                            		even
000110C4                            
000110C4                            ; ===========================================================================
000110C4                            ; ---------------------------------------------------------------------------
000110C4                            ; Object 58 - giant spiked balls (SYZ)
000110C4                            ; ---------------------------------------------------------------------------
000110C4                            
000110C4                            Obj58:					; XREF: Obj_Index
000110C4 7000                       		moveq	#0,d0
000110C6 1028 0024                  		move.b	$24(a0),d0
000110CA 323B 0000                  		move.w	Obj58_Index(pc,d0.w),d1
000110CE 4EFB 1000                  		jmp	Obj58_Index(pc,d1.w)
000110D2                            ; ===========================================================================
000110D2 0000                       Obj58_Index:	dc.w Obj58_Main-Obj58_Index
000110D4 0000                       		dc.w Obj58_Move-Obj58_Index
000110D6                            ; ===========================================================================
000110D6                            
000110D6                            Obj58_Main:				; XREF: Obj58_Index
000110D6 5428 0024                  		addq.b	#2,$24(a0)
000110DA 217C 0000 0000 0004        		move.l	#Map_obj15b,4(a0)
000110E2 317C 0396 0002             		move.w	#$396,2(a0)
000110E8 117C 0004 0001             		move.b	#4,1(a0)
000110EE 117C 0004 0018             		move.b	#4,$18(a0)
000110F4 117C 0018 0019             		move.b	#$18,$19(a0)
000110FA 3168 0008 003A             		move.w	8(a0),$3A(a0)
00011100 3168 000C 0038             		move.w	$C(a0),$38(a0)
00011106 117C 0086 0020             		move.b	#$86,$20(a0)
0001110C 1228 0028                  		move.b	$28(a0),d1	; get object type
00011110 0201 00F0                  		andi.b	#$F0,d1		; read only the	1st digit
00011114 4881                       		ext.w	d1
00011116 E741                       		asl.w	#3,d1		; multiply by 8
00011118 3141 003E                  		move.w	d1,$3E(a0)	; set object speed
0001111C 1028 0022                  		move.b	$22(a0),d0
00011120 E418                       		ror.b	#2,d0
00011122 0200 00C0                  		andi.b	#$C0,d0
00011126 1140 0026                  		move.b	d0,$26(a0)
0001112A 117C 0050 003C             		move.b	#$50,$3C(a0)	; set diameter of circle of rotation
00011130                            
00011130                            Obj58_Move:				; XREF: Obj58_Index
00011130 7000                       		moveq	#0,d0
00011132 1028 0028                  		move.b	$28(a0),d0	; get object type
00011136 0240 0007                  		andi.w	#7,d0		; read only the	2nd digit
0001113A D040                       		add.w	d0,d0
0001113C 323B 0000                  		move.w	Obj58_TypeIndex(pc,d0.w),d1
00011140 4EBB 1000                  		jsr	Obj58_TypeIndex(pc,d1.w)
00011144 3028 003A                  		move.w	$3A(a0),d0
00011148 0240 FF80                  		andi.w	#$FF80,d0
0001114C 3238 F700                  		move.w	($FFFFF700).w,d1
00011150 0441 0080                  		subi.w	#$80,d1
00011154 0241 FF80                  		andi.w	#$FF80,d1
00011158 9041                       		sub.w	d1,d0
0001115A 0C40 0280                  		cmpi.w	#$280,d0
0001115E 6200 CC3E                  		bhi.w	DeleteObject
00011162 6000 CBFE                  		bra.w	DisplaySprite
00011166                            ; ===========================================================================
00011166 0000                       Obj58_TypeIndex:dc.w Obj58_Type00-Obj58_TypeIndex
00011168 0000                       		dc.w Obj58_Type01-Obj58_TypeIndex
0001116A 0000                       		dc.w Obj58_Type02-Obj58_TypeIndex
0001116C 0000                       		dc.w Obj58_Type03-Obj58_TypeIndex
0001116E                            ; ===========================================================================
0001116E                            
0001116E                            Obj58_Type00:				; XREF: Obj58_TypeIndex
0001116E 4E75                       		rts	
00011170                            ; ===========================================================================
00011170                            
00011170                            Obj58_Type01:				; XREF: Obj58_TypeIndex
00011170 323C 0060                  		move.w	#$60,d1
00011174 7000                       		moveq	#0,d0
00011176 1038 FE6C                  		move.b	($FFFFFE6C).w,d0
0001117A 0828 0000 0022             		btst	#0,$22(a0)
00011180 6700                       		beq.s	loc_10A38
00011182 4440                       		neg.w	d0
00011184 D041                       		add.w	d1,d0
00011186                            
00011186                            loc_10A38:
00011186 3228 003A                  		move.w	$3A(a0),d1
0001118A 9240                       		sub.w	d0,d1
0001118C 3141 0008                  		move.w	d1,8(a0)	; move object horizontally
00011190 4E75                       		rts	
00011192                            ; ===========================================================================
00011192                            
00011192                            Obj58_Type02:				; XREF: Obj58_TypeIndex
00011192 323C 0060                  		move.w	#$60,d1
00011196 7000                       		moveq	#0,d0
00011198 1038 FE6C                  		move.b	($FFFFFE6C).w,d0
0001119C 0828 0000 0022             		btst	#0,$22(a0)
000111A2 6700                       		beq.s	loc_10A5C
000111A4 4440                       		neg.w	d0
000111A6 0640 0080                  		addi.w	#$80,d0
000111AA                            
000111AA                            loc_10A5C:
000111AA 3228 0038                  		move.w	$38(a0),d1
000111AE 9240                       		sub.w	d0,d1
000111B0 3141 000C                  		move.w	d1,$C(a0)	; move object vertically
000111B4 4E75                       		rts	
000111B6                            ; ===========================================================================
000111B6                            
000111B6                            Obj58_Type03:				; XREF: Obj58_TypeIndex
000111B6 3028 003E                  		move.w	$3E(a0),d0
000111BA D168 0026                  		add.w	d0,$26(a0)
000111BE 1028 0026                  		move.b	$26(a0),d0
000111C2 4EB9 0000 2C64             		jsr	(CalcSine).l
000111C8 3428 0038                  		move.w	$38(a0),d2
000111CC 3628 003A                  		move.w	$3A(a0),d3
000111D0 7800                       		moveq	#0,d4
000111D2 1828 003C                  		move.b	$3C(a0),d4
000111D6 2A04                       		move.l	d4,d5
000111D8 C9C0                       		muls.w	d0,d4
000111DA E084                       		asr.l	#8,d4
000111DC CBC1                       		muls.w	d1,d5
000111DE E085                       		asr.l	#8,d5
000111E0 D842                       		add.w	d2,d4
000111E2 DA43                       		add.w	d3,d5
000111E4 3144 000C                  		move.w	d4,$C(a0)
000111E8 3145 0008                  		move.w	d5,8(a0)
000111EC 4E75                       		rts	
000111EE                            ; ===========================================================================
000111EE                            ; ---------------------------------------------------------------------------
000111EE                            ; Sprite mappings - SBZ	spiked ball on a chain
000111EE                            ; ---------------------------------------------------------------------------
000111EE                            Map_obj15b:
000111EE                            	include "_maps\obj15sbz.asm"
000111EE                            ; ---------------------------------------------------------------------------
000111EE                            ; Sprite mappings - spiked ball on a chain (SBZ)
000111EE                            ; ---------------------------------------------------------------------------
000111EE 0000 0000                  		dc.w byte_10AA6-Map_obj15b, byte_10AC0-Map_obj15b
000111F2 0000                       		dc.w byte_10AC6-Map_obj15b
000111F4 05                         byte_10AA6:	dc.b 5
000111F5 E804 0000 F8               		dc.b $E8, 4, 0,	0, $F8
000111FA F00F 0002 F0               		dc.b $F0, $F, 0, 2, $F0
000111FF F801 0012 E8               		dc.b $F8, 1, 0,	$12, $E8
00011204 F801 0014 10               		dc.b $F8, 1, 0,	$14, $10
00011209 1004 0016 F8               		dc.b $10, 4, 0,	$16, $F8
0001120E 01                         byte_10AC0:	dc.b 1
0001120F F805 0020 F8               		dc.b $F8, 5, 0,	$20, $F8
00011214 02                         byte_10AC6:	dc.b 2
00011215 F80D 0018 F0               		dc.b $F8, $D, 0, $18, $F0
0001121A E80D 1018 F0               		dc.b $E8, $D, $10, $18,	$F0
00011220 00                         		even
00011220 00                         		even
00011220                            
00011220                            ; ===========================================================================
00011220                            ; ---------------------------------------------------------------------------
00011220                            ; Object 59 - platforms	that move when you stand on them (SLZ)
00011220                            ; ---------------------------------------------------------------------------
00011220                            
00011220                            Obj59:					; XREF: Obj_Index
00011220 7000                       		moveq	#0,d0
00011222 1028 0024                  		move.b	$24(a0),d0
00011226 323B 0000                  		move.w	Obj59_Index(pc,d0.w),d1
0001122A 4EBB 1000                  		jsr	Obj59_Index(pc,d1.w)
0001122E 3028 0032                  		move.w	$32(a0),d0
00011232 0240 FF80                  		andi.w	#$FF80,d0
00011236 3238 F700                  		move.w	($FFFFF700).w,d1
0001123A 0441 0080                  		subi.w	#$80,d1
0001123E 0241 FF80                  		andi.w	#$FF80,d1
00011242 9041                       		sub.w	d1,d0
00011244 0C40 0280                  		cmpi.w	#$280,d0
00011248 6200 CB54                  		bhi.w	DeleteObject
0001124C 6000 CB14                  		bra.w	DisplaySprite
00011250                            ; ===========================================================================
00011250 0000                       Obj59_Index:	dc.w Obj59_Main-Obj59_Index
00011252 0000                       		dc.w Obj59_Platform-Obj59_Index
00011254 0000                       		dc.w Obj59_Action-Obj59_Index
00011256 0000                       		dc.w Obj59_MakeMulti-Obj59_Index
00011258                            
00011258 2800                       Obj59_Var1:	dc.b $28, 0		; width, frame number
0001125A                            
0001125A 1001                       Obj59_Var2:	dc.b $10, 1		; width, action	type
0001125C 2001                       		dc.b $20, 1
0001125E 3401                       		dc.b $34, 1
00011260 1003                       		dc.b $10, 3
00011262 2003                       		dc.b $20, 3
00011264 3403                       		dc.b $34, 3
00011266 1401                       		dc.b $14, 1
00011268 2401                       		dc.b $24, 1
0001126A 2C01                       		dc.b $2C, 1
0001126C 1403                       		dc.b $14, 3
0001126E 2403                       		dc.b $24, 3
00011270 2C03                       		dc.b $2C, 3
00011272 2005                       		dc.b $20, 5
00011274 2007                       		dc.b $20, 7
00011276 3009                       		dc.b $30, 9
00011278                            ; ===========================================================================
00011278                            
00011278                            Obj59_Main:				; XREF: Obj59_Index
00011278 5428 0024                  		addq.b	#2,$24(a0)
0001127C 7000                       		moveq	#0,d0
0001127E 1028 0028                  		move.b	$28(a0),d0
00011282 6A00                       		bpl.s	Obj59_Main2
00011284 5828 0024                  		addq.b	#4,$24(a0)
00011288 0240 007F                  		andi.w	#$7F,d0
0001128C C0FC 0006                  		mulu.w	#6,d0
00011290 3140 003C                  		move.w	d0,$3C(a0)
00011294 3140 003E                  		move.w	d0,$3E(a0)
00011298 588F                       		addq.l	#4,sp
0001129A 4E75                       		rts	
0001129C                            ; ===========================================================================
0001129C                            
0001129C                            Obj59_Main2:
0001129C E648                       		lsr.w	#3,d0
0001129E 0240 001E                  		andi.w	#$1E,d0
000112A2 45FB 00B4                  		lea	Obj59_Var1(pc,d0.w),a2
000112A6 115A 0019                  		move.b	(a2)+,$19(a0)
000112AA 115A 001A                  		move.b	(a2)+,$1A(a0)
000112AE 7000                       		moveq	#0,d0
000112B0 1028 0028                  		move.b	$28(a0),d0
000112B4 D040                       		add.w	d0,d0
000112B6 0240 001E                  		andi.w	#$1E,d0
000112BA 45FB 009E                  		lea	Obj59_Var2(pc,d0.w),a2
000112BE 101A                       		move.b	(a2)+,d0
000112C0 E548                       		lsl.w	#2,d0
000112C2 3140 003C                  		move.w	d0,$3C(a0)
000112C6 115A 0028                  		move.b	(a2)+,$28(a0)
000112CA 217C 0000 0000 0004        		move.l	#Map_obj59,4(a0)
000112D2 317C 4000 0002             		move.w	#$4000,2(a0)
000112D8 117C 0004 0001             		move.b	#4,1(a0)
000112DE 117C 0004 0018             		move.b	#4,$18(a0)
000112E4 3168 0008 0032             		move.w	8(a0),$32(a0)
000112EA 3168 000C 0030             		move.w	$C(a0),$30(a0)
000112F0                            
000112F0                            Obj59_Platform:				; XREF: Obj59_Index
000112F0 7200                       		moveq	#0,d1
000112F2 1228 0019                  		move.b	$19(a0),d1
000112F6 4EB9 0000 79EC             		jsr	(PlatformObject).l
000112FC 6000 0000                  		bra.w	Obj59_Types
00011300                            ; ===========================================================================
00011300                            
00011300                            Obj59_Action:				; XREF: Obj59_Index
00011300 7200                       		moveq	#0,d1
00011302 1228 0019                  		move.b	$19(a0),d1
00011306 4EB9 0000 7B60             		jsr	(ExitPlatform).l
0001130C 3F28 0008                  		move.w	8(a0),-(sp)
00011310 6100 0000                  		bsr.w	Obj59_Types
00011314 341F                       		move.w	(sp)+,d2
00011316 4A10                       		tst.b	0(a0)
00011318 6700                       		beq.s	locret_10BD4
0001131A 4EF9 0000 80CA             		jmp	(MvSonicOnPtfm2).l
00011320                            ; ===========================================================================
00011320                            
00011320                            locret_10BD4:
00011320 4E75                       		rts	
00011322                            ; ===========================================================================
00011322                            
00011322                            Obj59_Types:
00011322 7000                       		moveq	#0,d0
00011324 1028 0028                  		move.b	$28(a0),d0
00011328 0240 000F                  		andi.w	#$F,d0
0001132C D040                       		add.w	d0,d0
0001132E 323B 0000                  		move.w	Obj59_TypeIndex(pc,d0.w),d1
00011332 4EFB 1000                  		jmp	Obj59_TypeIndex(pc,d1.w)
00011336                            ; ===========================================================================
00011336 0000 0000                  Obj59_TypeIndex:dc.w Obj59_Type00-Obj59_TypeIndex, Obj59_Type01-Obj59_TypeIndex
0001133A 0000 0000                  		dc.w Obj59_Type02-Obj59_TypeIndex, Obj59_Type01-Obj59_TypeIndex
0001133E 0000 0000                  		dc.w Obj59_Type04-Obj59_TypeIndex, Obj59_Type01-Obj59_TypeIndex
00011342 0000 0000                  		dc.w Obj59_Type06-Obj59_TypeIndex, Obj59_Type01-Obj59_TypeIndex
00011346 0000 0000                  		dc.w Obj59_Type08-Obj59_TypeIndex, Obj59_Type09-Obj59_TypeIndex
0001134A                            ; ===========================================================================
0001134A                            
0001134A                            Obj59_Type00:				; XREF: Obj59_TypeIndex
0001134A 4E75                       		rts	
0001134C                            ; ===========================================================================
0001134C                            
0001134C                            Obj59_Type01:				; XREF: Obj59_TypeIndex
0001134C 0C28 0004 0024             		cmpi.b	#4,$24(a0)	; check	if Sonic is standing on	the object
00011352 6600                       		bne.s	locret_10C0C
00011354 5228 0028                  		addq.b	#1,$28(a0)	; if yes, add 1	to type
00011358                            
00011358                            locret_10C0C:
00011358 4E75                       		rts	
0001135A                            ; ===========================================================================
0001135A                            
0001135A                            Obj59_Type02:				; XREF: Obj59_TypeIndex
0001135A 6100 0000                  		bsr.w	Obj59_Move
0001135E 3028 0034                  		move.w	$34(a0),d0
00011362 4440                       		neg.w	d0
00011364 D068 0030                  		add.w	$30(a0),d0
00011368 3140 000C                  		move.w	d0,$C(a0)
0001136C 4E75                       		rts	
0001136E                            ; ===========================================================================
0001136E                            
0001136E                            Obj59_Type04:				; XREF: Obj59_TypeIndex
0001136E 6100 0000                  		bsr.w	Obj59_Move
00011372 3028 0034                  		move.w	$34(a0),d0
00011376 D068 0030                  		add.w	$30(a0),d0
0001137A 3140 000C                  		move.w	d0,$C(a0)
0001137E 4E75                       		rts	
00011380                            ; ===========================================================================
00011380                            
00011380                            Obj59_Type06:				; XREF: Obj59_TypeIndex
00011380 6100 0000                  		bsr.w	Obj59_Move
00011384 3028 0034                  		move.w	$34(a0),d0
00011388 E240                       		asr.w	#1,d0
0001138A 4440                       		neg.w	d0
0001138C D068 0030                  		add.w	$30(a0),d0
00011390 3140 000C                  		move.w	d0,$C(a0)
00011394 3028 0034                  		move.w	$34(a0),d0
00011398 D068 0032                  		add.w	$32(a0),d0
0001139C 3140 0008                  		move.w	d0,8(a0)
000113A0 4E75                       		rts	
000113A2                            ; ===========================================================================
000113A2                            
000113A2                            Obj59_Type08:				; XREF: Obj59_TypeIndex
000113A2 6100 0000                  		bsr.w	Obj59_Move
000113A6 3028 0034                  		move.w	$34(a0),d0
000113AA E240                       		asr.w	#1,d0
000113AC D068 0030                  		add.w	$30(a0),d0
000113B0 3140 000C                  		move.w	d0,$C(a0)
000113B4 3028 0034                  		move.w	$34(a0),d0
000113B8 4440                       		neg.w	d0
000113BA D068 0032                  		add.w	$32(a0),d0
000113BE 3140 0008                  		move.w	d0,8(a0)
000113C2 4E75                       		rts	
000113C4                            ; ===========================================================================
000113C4                            
000113C4                            Obj59_Type09:				; XREF: Obj59_TypeIndex
000113C4 6100 0000                  		bsr.w	Obj59_Move
000113C8 3028 0034                  		move.w	$34(a0),d0
000113CC 4440                       		neg.w	d0
000113CE D068 0030                  		add.w	$30(a0),d0
000113D2 3140 000C                  		move.w	d0,$C(a0)
000113D6 4A28 0028                  		tst.b	$28(a0)
000113DA 6700 0000                  		beq.w	loc_10C94
000113DE 4E75                       		rts	
000113E0                            ; ===========================================================================
000113E0                            
000113E0                            loc_10C94:
000113E0 0828 0003 0022             		btst	#3,$22(a0)
000113E6 6700                       		beq.s	Obj59_Delete
000113E8 08E9 0001 0022             		bset	#1,$22(a1)
000113EE 08A9 0003 0022             		bclr	#3,$22(a1)
000113F4 137C 0002 0024             		move.b	#2,$24(a1)
000113FA                            
000113FA                            Obj59_Delete:
000113FA 6000 C9A2                  		bra.w	DeleteObject
000113FE                            
000113FE                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000113FE                            
000113FE                            
000113FE                            Obj59_Move:				; XREF: Obj59_Type02; et al
000113FE 3028 0038                  		move.w	$38(a0),d0
00011402 4A28 003A                  		tst.b	$3A(a0)
00011406 6600                       		bne.s	loc_10CC8
00011408 0C40 0800                  		cmpi.w	#$800,d0
0001140C 6400                       		bcc.s	loc_10CD0
0001140E 0640 0010                  		addi.w	#$10,d0
00011412 6000                       		bra.s	loc_10CD0
00011414                            ; ===========================================================================
00011414                            
00011414                            loc_10CC8:
00011414 4A40                       		tst.w	d0
00011416 6700                       		beq.s	loc_10CD0
00011418 0440 0010                  		subi.w	#$10,d0
0001141C                            
0001141C                            loc_10CD0:
0001141C 3140 0038                  		move.w	d0,$38(a0)
00011420 48C0                       		ext.l	d0
00011422 E180                       		asl.l	#8,d0
00011424 D0A8 0034                  		add.l	$34(a0),d0
00011428 2140 0034                  		move.l	d0,$34(a0)
0001142C 4840                       		swap	d0
0001142E 3428 003C                  		move.w	$3C(a0),d2
00011432 B042                       		cmp.w	d2,d0
00011434 6300                       		bls.s	loc_10CF0
00011436 117C 0001 003A             		move.b	#1,$3A(a0)
0001143C                            
0001143C                            loc_10CF0:
0001143C D442                       		add.w	d2,d2
0001143E B042                       		cmp.w	d2,d0
00011440 6600                       		bne.s	locret_10CFA
00011442 4228 0028                  		clr.b	$28(a0)
00011446                            
00011446                            locret_10CFA:
00011446 4E75                       		rts	
00011448                            ; End of function Obj59_Move
00011448                            
00011448                            ; ===========================================================================
00011448                            
00011448                            Obj59_MakeMulti:			; XREF: Obj59_Index
00011448 5368 003C                  		subq.w	#1,$3C(a0)
0001144C 6600                       		bne.s	Obj59_ChkDel
0001144E 3168 003E 003C             		move.w	$3E(a0),$3C(a0)
00011454 6100 CD92                  		bsr.w	SingleObjLoad
00011458 6600                       		bne.s	Obj59_ChkDel
0001145A 12BC 0059                  		move.b	#$59,0(a1)	; duplicate the	object
0001145E 3368 0008 0008             		move.w	8(a0),8(a1)
00011464 3368 000C 000C             		move.w	$C(a0),$C(a1)
0001146A 137C 000E 0028             		move.b	#$E,$28(a1)
00011470                            
00011470                            Obj59_ChkDel:
00011470 588F                       		addq.l	#4,sp
00011472 3028 0008                  		move.w	8(a0),d0
00011476 0240 FF80                  		andi.w	#$FF80,d0
0001147A 3238 F700                  		move.w	($FFFFF700).w,d1
0001147E 0441 0080                  		subi.w	#$80,d1
00011482 0241 FF80                  		andi.w	#$FF80,d1
00011486 9041                       		sub.w	d1,d0
00011488 0C40 0280                  		cmpi.w	#$280,d0
0001148C 6200 C910                  		bhi.w	DeleteObject
00011490 4E75                       		rts	
00011492                            ; ===========================================================================
00011492                            ; ---------------------------------------------------------------------------
00011492                            ; Sprite mappings - platforms that move	when you stand on them (SLZ)
00011492                            ; ---------------------------------------------------------------------------
00011492                            Map_obj59:
00011492                            	include "_maps\obj59.asm"
00011492                            ; ---------------------------------------------------------------------------
00011492                            ; Sprite mappings - platforms that move	when you stand on them (SLZ)
00011492                            ; ---------------------------------------------------------------------------
00011492 0000                       		dc.w byte_10D4A-Map_obj59
00011494 03                         byte_10D4A:	dc.b 3
00011495 F80F 0041 D8               		dc.b $F8, $F, 0, $41, $D8
0001149A F80F 0041 F8               		dc.b $F8, $F, 0, $41, $F8
0001149F F807 0041 18               		dc.b $F8, 7, 0,	$41, $18
000114A4                            		even
000114A4                            		even
000114A4                            
000114A4                            ; ===========================================================================
000114A4                            ; ---------------------------------------------------------------------------
000114A4                            ; Object 5A - platforms	moving in circles (SLZ)
000114A4                            ; ---------------------------------------------------------------------------
000114A4                            
000114A4                            Obj5A:					; XREF: Obj_Index
000114A4 7000                       		moveq	#0,d0
000114A6 1028 0024                  		move.b	$24(a0),d0
000114AA 323B 0000                  		move.w	Obj5A_Index(pc,d0.w),d1
000114AE 4EBB 1000                  		jsr	Obj5A_Index(pc,d1.w)
000114B2 3028 0032                  		move.w	$32(a0),d0
000114B6 0240 FF80                  		andi.w	#$FF80,d0
000114BA 3238 F700                  		move.w	($FFFFF700).w,d1
000114BE 0441 0080                  		subi.w	#$80,d1
000114C2 0241 FF80                  		andi.w	#$FF80,d1
000114C6 9041                       		sub.w	d1,d0
000114C8 0C40 0280                  		cmpi.w	#$280,d0
000114CC 6200 C8D0                  		bhi.w	DeleteObject
000114D0 6000 C890                  		bra.w	DisplaySprite
000114D4                            ; ===========================================================================
000114D4 0000                       Obj5A_Index:	dc.w Obj5A_Main-Obj5A_Index
000114D6 0000                       		dc.w Obj5A_Platform-Obj5A_Index
000114D8 0000                       		dc.w Obj5A_Action-Obj5A_Index
000114DA                            ; ===========================================================================
000114DA                            
000114DA                            Obj5A_Main:				; XREF: Obj5A_Index
000114DA 5428 0024                  		addq.b	#2,$24(a0)
000114DE 217C 0000 0000 0004        		move.l	#Map_obj5A,4(a0)
000114E6 317C 4000 0002             		move.w	#$4000,2(a0)
000114EC 117C 0004 0001             		move.b	#4,1(a0)
000114F2 117C 0004 0018             		move.b	#4,$18(a0)
000114F8 117C 0018 0019             		move.b	#$18,$19(a0)
000114FE 3168 0008 0032             		move.w	8(a0),$32(a0)
00011504 3168 000C 0030             		move.w	$C(a0),$30(a0)
0001150A                            
0001150A                            Obj5A_Platform:				; XREF: Obj5A_Index
0001150A 7200                       		moveq	#0,d1
0001150C 1228 0019                  		move.b	$19(a0),d1
00011510 4EB9 0000 79EC             		jsr	(PlatformObject).l
00011516 6000 0000                  		bra.w	Obj5A_Types
0001151A                            ; ===========================================================================
0001151A                            
0001151A                            Obj5A_Action:				; XREF: Obj5A_Index
0001151A 7200                       		moveq	#0,d1
0001151C 1228 0019                  		move.b	$19(a0),d1
00011520 4EB9 0000 7B60             		jsr	(ExitPlatform).l
00011526 3F28 0008                  		move.w	8(a0),-(sp)
0001152A 6100 0000                  		bsr.w	Obj5A_Types
0001152E 341F                       		move.w	(sp)+,d2
00011530 4EF9 0000 80CA             		jmp	(MvSonicOnPtfm2).l
00011536                            ; ===========================================================================
00011536                            
00011536                            Obj5A_Types:
00011536 7000                       		moveq	#0,d0
00011538 1028 0028                  		move.b	$28(a0),d0
0001153C 0240 000C                  		andi.w	#$C,d0
00011540 E248                       		lsr.w	#1,d0
00011542 323B 0000                  		move.w	Obj5A_TypeIndex(pc,d0.w),d1
00011546 4EFB 1000                  		jmp	Obj5A_TypeIndex(pc,d1.w)
0001154A                            ; ===========================================================================
0001154A 0000                       Obj5A_TypeIndex:dc.w Obj5A_Type00-Obj5A_TypeIndex
0001154C 0000                       		dc.w Obj5A_Type04-Obj5A_TypeIndex
0001154E                            ; ===========================================================================
0001154E                            
0001154E                            Obj5A_Type00:				; XREF: Obj5A_TypeIndex
0001154E 1238 FE80                  		move.b	($FFFFFE80).w,d1
00011552 0401 0050                  		subi.b	#$50,d1
00011556 4881                       		ext.w	d1
00011558 1438 FE84                  		move.b	($FFFFFE84).w,d2
0001155C 0402 0050                  		subi.b	#$50,d2
00011560 4882                       		ext.w	d2
00011562 0828 0000 0028             		btst	#0,$28(a0)
00011568 6700                       		beq.s	loc_10E24
0001156A 4441                       		neg.w	d1
0001156C 4442                       		neg.w	d2
0001156E                            
0001156E                            loc_10E24:
0001156E 0828 0001 0028             		btst	#1,$28(a0)
00011574 6700                       		beq.s	loc_10E30
00011576 4441                       		neg.w	d1
00011578 C342                       		exg	d1,d2
0001157A                            
0001157A                            loc_10E30:
0001157A D268 0032                  		add.w	$32(a0),d1
0001157E 3141 0008                  		move.w	d1,8(a0)
00011582 D468 0030                  		add.w	$30(a0),d2
00011586 3142 000C                  		move.w	d2,$C(a0)
0001158A 4E75                       		rts	
0001158C                            ; ===========================================================================
0001158C                            
0001158C                            Obj5A_Type04:				; XREF: Obj5A_TypeIndex
0001158C 1238 FE80                  		move.b	($FFFFFE80).w,d1
00011590 0401 0050                  		subi.b	#$50,d1
00011594 4881                       		ext.w	d1
00011596 1438 FE84                  		move.b	($FFFFFE84).w,d2
0001159A 0402 0050                  		subi.b	#$50,d2
0001159E 4882                       		ext.w	d2
000115A0 0828 0000 0028             		btst	#0,$28(a0)
000115A6 6700                       		beq.s	loc_10E62
000115A8 4441                       		neg.w	d1
000115AA 4442                       		neg.w	d2
000115AC                            
000115AC                            loc_10E62:
000115AC 0828 0001 0028             		btst	#1,$28(a0)
000115B2 6700                       		beq.s	loc_10E6E
000115B4 4441                       		neg.w	d1
000115B6 C342                       		exg	d1,d2
000115B8                            
000115B8                            loc_10E6E:
000115B8 4441                       		neg.w	d1
000115BA D268 0032                  		add.w	$32(a0),d1
000115BE 3141 0008                  		move.w	d1,8(a0)
000115C2 D468 0030                  		add.w	$30(a0),d2
000115C6 3142 000C                  		move.w	d2,$C(a0)
000115CA 4E75                       		rts	
000115CC                            ; ===========================================================================
000115CC                            ; ---------------------------------------------------------------------------
000115CC                            ; Sprite mappings - platforms that move	in circles (SLZ)
000115CC                            ; ---------------------------------------------------------------------------
000115CC                            Map_obj5A:
000115CC                            	include "_maps\obj5A.asm"
000115CC                            ; ---------------------------------------------------------------------------
000115CC                            ; Sprite mappings - platforms that move	in circles (SLZ)
000115CC                            ; ---------------------------------------------------------------------------
000115CC 0000                       		dc.w byte_10E84-Map_obj5A
000115CE 02                         byte_10E84:	dc.b 2
000115CF F809 0051 E8               		dc.b $F8, 9, 0,	$51, $E8
000115D4 F809 0851 00               		dc.b $F8, 9, 8,	$51, 0
000115DA 00                         		even
000115DA 00                         		even
000115DA                            
000115DA                            ; ===========================================================================
000115DA                            ; ---------------------------------------------------------------------------
000115DA                            ; Object 5B - blocks that form a staircase (SLZ)
000115DA                            ; ---------------------------------------------------------------------------
000115DA                            
000115DA                            Obj5B:					; XREF: Obj_Index
000115DA 7000                       		moveq	#0,d0
000115DC 1028 0024                  		move.b	$24(a0),d0
000115E0 323B 0000                  		move.w	Obj5B_Index(pc,d0.w),d1
000115E4 4EBB 1000                  		jsr	Obj5B_Index(pc,d1.w)
000115E8 3028 0030                  		move.w	$30(a0),d0
000115EC 0240 FF80                  		andi.w	#$FF80,d0
000115F0 3238 F700                  		move.w	($FFFFF700).w,d1
000115F4 0441 0080                  		subi.w	#$80,d1
000115F8 0241 FF80                  		andi.w	#$FF80,d1
000115FC 9041                       		sub.w	d1,d0
000115FE 0C40 0280                  		cmpi.w	#$280,d0
00011602 6200 C79A                  		bhi.w	DeleteObject
00011606 6000 C75A                  		bra.w	DisplaySprite
0001160A                            ; ===========================================================================
0001160A 0000                       Obj5B_Index:	dc.w Obj5B_Main-Obj5B_Index
0001160C 0000                       		dc.w Obj5B_Move-Obj5B_Index
0001160E 0000                       		dc.w Obj5B_Solid-Obj5B_Index
00011610                            ; ===========================================================================
00011610                            
00011610                            Obj5B_Main:				; XREF: Obj5B_Index
00011610 5428 0024                  		addq.b	#2,$24(a0)
00011614 7638                       		moveq	#$38,d3
00011616 7801                       		moveq	#1,d4
00011618 0828 0000 0022             		btst	#0,$22(a0)
0001161E 6700                       		beq.s	loc_10EDA
00011620 763B                       		moveq	#$3B,d3
00011622 78FF                       		moveq	#-1,d4
00011624                            
00011624                            loc_10EDA:
00011624 3428 0008                  		move.w	8(a0),d2
00011628 2248                       		movea.l	a0,a1
0001162A 7203                       		moveq	#3,d1
0001162C 6000                       		bra.s	Obj5B_MakeBlocks
0001162E                            ; ===========================================================================
0001162E                            
0001162E                            Obj5B_Loop:
0001162E 6100 CBCE                  		bsr.w	SingleObjLoad2
00011632 6600 0000                  		bne.w	Obj5B_Move
00011636 137C 0004 0024             		move.b	#4,$24(a1)
0001163C                            
0001163C                            Obj5B_MakeBlocks:			; XREF: Obj5B_Main
0001163C 12BC 005B                  		move.b	#$5B,0(a1)	; load another block object
00011640 237C 0000 0000 0004        		move.l	#Map_obj5B,4(a1)
00011648 337C 4000 0002             		move.w	#$4000,2(a1)
0001164E 137C 0004 0001             		move.b	#4,1(a1)
00011654 137C 0003 0018             		move.b	#3,$18(a1)
0001165A 137C 0010 0019             		move.b	#$10,$19(a1)
00011660 1368 0028 0028             		move.b	$28(a0),$28(a1)
00011666 3342 0008                  		move.w	d2,8(a1)
0001166A 3368 000C 000C             		move.w	$C(a0),$C(a1)
00011670 3368 0008 0030             		move.w	8(a0),$30(a1)
00011676 3369 000C 0032             		move.w	$C(a1),$32(a1)
0001167C 0642 0020                  		addi.w	#$20,d2
00011680 1343 0037                  		move.b	d3,$37(a1)
00011684 2348 003C                  		move.l	a0,$3C(a1)
00011688 D604                       		add.b	d4,d3
0001168A 51C9 FFA2                  		dbf	d1,Obj5B_Loop	; repeat sequence 3 times
0001168E                            
0001168E                            Obj5B_Move:				; XREF: Obj5B_Index
0001168E 7000                       		moveq	#0,d0
00011690 1028 0028                  		move.b	$28(a0),d0
00011694 0240 0007                  		andi.w	#7,d0
00011698 D040                       		add.w	d0,d0
0001169A 323B 0000                  		move.w	Obj5B_TypeIndex(pc,d0.w),d1
0001169E 4EBB 1000                  		jsr	Obj5B_TypeIndex(pc,d1.w)
000116A2                            
000116A2                            Obj5B_Solid:				; XREF: Obj5B_Index
000116A2 2468 003C                  		movea.l	$3C(a0),a2
000116A6 7000                       		moveq	#0,d0
000116A8 1028 0037                  		move.b	$37(a0),d0
000116AC 1032 0000                  		move.b	(a2,d0.w),d0
000116B0 D068 0032                  		add.w	$32(a0),d0
000116B4 3140 000C                  		move.w	d0,$C(a0)
000116B8 7200                       		moveq	#0,d1
000116BA 1228 0019                  		move.b	$19(a0),d1
000116BE 0641 000B                  		addi.w	#$B,d1
000116C2 343C 0010                  		move.w	#$10,d2
000116C6 363C 0011                  		move.w	#$11,d3
000116CA 3828 0008                  		move.w	8(a0),d4
000116CE 6100 EA62                  		bsr.w	SolidObject
000116D2 4A04                       		tst.b	d4
000116D4 6A00                       		bpl.s	loc_10F92
000116D6 1544 0036                  		move.b	d4,$36(a2)
000116DA                            
000116DA                            loc_10F92:
000116DA 0828 0003 0022             		btst	#3,$22(a0)
000116E0 6700                       		beq.s	locret_10FA0
000116E2 157C 0001 0036             		move.b	#1,$36(a2)
000116E8                            
000116E8                            locret_10FA0:
000116E8 4E75                       		rts	
000116EA                            ; ===========================================================================
000116EA 0000                       Obj5B_TypeIndex:dc.w Obj5B_Type00-Obj5B_TypeIndex
000116EC 0000                       		dc.w Obj5B_Type01-Obj5B_TypeIndex
000116EE 0000                       		dc.w Obj5B_Type02-Obj5B_TypeIndex
000116F0 0000                       		dc.w Obj5B_Type01-Obj5B_TypeIndex
000116F2                            ; ===========================================================================
000116F2                            
000116F2                            Obj5B_Type00:				; XREF: Obj5B_TypeIndex
000116F2 4A68 0034                  		tst.w	$34(a0)
000116F6 6600                       		bne.s	loc_10FC0
000116F8 0C28 0001 0036             		cmpi.b	#1,$36(a0)
000116FE 6600                       		bne.s	locret_10FBE
00011700 317C 001E 0034             		move.w	#$1E,$34(a0)
00011706                            
00011706                            locret_10FBE:
00011706 4E75                       		rts	
00011708                            ; ===========================================================================
00011708                            
00011708                            loc_10FC0:
00011708 5368 0034                  		subq.w	#1,$34(a0)
0001170C 66F8                       		bne.s	locret_10FBE
0001170E 5228 0028                  		addq.b	#1,$28(a0)	; add 1	to type
00011712 4E75                       		rts	
00011714                            ; ===========================================================================
00011714                            
00011714                            Obj5B_Type02:				; XREF: Obj5B_TypeIndex
00011714 4A68 0034                  		tst.w	$34(a0)
00011718 6600                       		bne.s	loc_10FE0
0001171A 4A28 0036                  		tst.b	$36(a0)
0001171E 6A00                       		bpl.s	locret_10FDE
00011720 317C 003C 0034             		move.w	#$3C,$34(a0)
00011726                            
00011726                            locret_10FDE:
00011726 4E75                       		rts	
00011728                            ; ===========================================================================
00011728                            
00011728                            loc_10FE0:
00011728 5368 0034                  		subq.w	#1,$34(a0)
0001172C 6600                       		bne.s	loc_10FEC
0001172E 5228 0028                  		addq.b	#1,$28(a0)	; add 1	to type
00011732 4E75                       		rts	
00011734                            ; ===========================================================================
00011734                            
00011734                            loc_10FEC:
00011734 43E8 0038                  		lea	$38(a0),a1
00011738 3028 0034                  		move.w	$34(a0),d0
0001173C E408                       		lsr.b	#2,d0
0001173E 0200 0001                  		andi.b	#1,d0
00011742 12C0                       		move.b	d0,(a1)+
00011744 0A00 0001                  		eori.b	#1,d0
00011748 12C0                       		move.b	d0,(a1)+
0001174A 0A00 0001                  		eori.b	#1,d0
0001174E 12C0                       		move.b	d0,(a1)+
00011750 0A00 0001                  		eori.b	#1,d0
00011754 12C0                       		move.b	d0,(a1)+
00011756 4E75                       		rts	
00011758                            ; ===========================================================================
00011758                            
00011758                            Obj5B_Type01:				; XREF: Obj5B_TypeIndex
00011758 43E8 0038                  		lea	$38(a0),a1
0001175C 0C11 0080                  		cmpi.b	#$80,(a1)
00011760 6700                       		beq.s	locret_11038
00011762 5211                       		addq.b	#1,(a1)
00011764 7200                       		moveq	#0,d1
00011766 1219                       		move.b	(a1)+,d1
00011768 4841                       		swap	d1
0001176A E289                       		lsr.l	#1,d1
0001176C 2401                       		move.l	d1,d2
0001176E E289                       		lsr.l	#1,d1
00011770 2601                       		move.l	d1,d3
00011772 D682                       		add.l	d2,d3
00011774 4841                       		swap	d1
00011776 4842                       		swap	d2
00011778 4843                       		swap	d3
0001177A 12C3                       		move.b	d3,(a1)+
0001177C 12C2                       		move.b	d2,(a1)+
0001177E 12C1                       		move.b	d1,(a1)+
00011780                            
00011780                            locret_11038:
00011780 4E75                       		rts	
00011782 4E75                       		rts	
00011784                            ; ===========================================================================
00011784                            ; ---------------------------------------------------------------------------
00011784                            ; Sprite mappings - blocks that	form a staircase (SLZ)
00011784                            ; ---------------------------------------------------------------------------
00011784                            Map_obj5B:
00011784                            	include "_maps\obj5B.asm"
00011784                            ; ---------------------------------------------------------------------------
00011784                            ; Sprite mappings - blocks that	form a staircase (SLZ)
00011784                            ; ---------------------------------------------------------------------------
00011784 0000                       		dc.w byte_1103E-Map_obj5B
00011786 01                         byte_1103E:	dc.b 1
00011787 F00F 0021 F0               		dc.b $F0, $F, 0, $21, $F0
0001178C                            		even
0001178C                            		even
0001178C                            
0001178C                            ; ===========================================================================
0001178C                            ; ---------------------------------------------------------------------------
0001178C                            ; Object 5C - metal girders in foreground (SLZ)
0001178C                            ; ---------------------------------------------------------------------------
0001178C                            
0001178C                            Obj5C:					; XREF: Obj_Index
0001178C 7000                       		moveq	#0,d0
0001178E 1028 0024                  		move.b	$24(a0),d0
00011792 323B 0000                  		move.w	Obj5C_Index(pc,d0.w),d1
00011796 4EFB 1000                  		jmp	Obj5C_Index(pc,d1.w)
0001179A                            ; ===========================================================================
0001179A 0000                       Obj5C_Index:	dc.w Obj5C_Main-Obj5C_Index
0001179C 0000                       		dc.w Obj5C_Display-Obj5C_Index
0001179E                            ; ===========================================================================
0001179E                            
0001179E                            Obj5C_Main:				; XREF: Obj5C_Index
0001179E 5428 0024                  		addq.b	#2,$24(a0)
000117A2 217C 0000 0000 0004        		move.l	#Map_obj5C,4(a0)
000117AA 317C 83CC 0002             		move.w	#$83CC,2(a0)
000117B0 117C 0010 0019             		move.b	#$10,$19(a0)
000117B6                            
000117B6                            Obj5C_Display:				; XREF: Obj5C_Index
000117B6 2238 F700                  		move.l	($FFFFF700).w,d1
000117BA D281                       		add.l	d1,d1
000117BC 4841                       		swap	d1
000117BE 4441                       		neg.w	d1
000117C0 3141 0008                  		move.w	d1,8(a0)
000117C4 2238 F704                  		move.l	($FFFFF704).w,d1
000117C8 D281                       		add.l	d1,d1
000117CA 4841                       		swap	d1
000117CC 0241 003F                  		andi.w	#$3F,d1
000117D0 4441                       		neg.w	d1
000117D2 0641 0100                  		addi.w	#$100,d1
000117D6 3141 000A                  		move.w	d1,$A(a0)
000117DA 6000 C586                  		bra.w	DisplaySprite
000117DE                            ; ===========================================================================
000117DE                            ; ---------------------------------------------------------------------------
000117DE                            ; Sprite mappings - metal girders in foreground	(SLZ)
000117DE                            ; ---------------------------------------------------------------------------
000117DE                            Map_obj5C:
000117DE                            	include "_maps\obj5C.asm"
000117DE                            ; ---------------------------------------------------------------------------
000117DE                            ; Sprite mappings - metal girders in foreground	(SLZ)
000117DE                            ; ---------------------------------------------------------------------------
000117DE 0000                       		dc.w byte_11098-Map_obj5C
000117E0 09                         byte_11098:	dc.b 9
000117E1 800F 0000 F0               		dc.b $80, $F, 0, 0, $F0
000117E6 A00F 1000 F0               		dc.b $A0, $F, $10, 0, $F0
000117EB C00F 0000 F0               		dc.b $C0, $F, 0, 0, $F0
000117F0 E00F 1000 F0               		dc.b $E0, $F, $10, 0, $F0
000117F5 000F 0000 F0               		dc.b 0,	$F, 0, 0, $F0
000117FA 200F 1000 F0               		dc.b $20, $F, $10, 0, $F0
000117FF 400F 0000 F0               		dc.b $40, $F, 0, 0, $F0
00011804 600F 1000 F0               		dc.b $60, $F, $10, 0, $F0
00011809 7F0F 0000 F0               		dc.b $7F, $F, 0, 0, $F0
0001180E                            		even
0001180E                            		even
0001180E                            
0001180E                            ; ===========================================================================
0001180E                            ; ---------------------------------------------------------------------------
0001180E                            ; Object 1B - water surface (LZ)
0001180E                            ; ---------------------------------------------------------------------------
0001180E                            
0001180E                            Obj1B:					; XREF: Obj_Index
0001180E 7000                       		moveq	#0,d0
00011810 1028 0024                  		move.b	$24(a0),d0
00011814 323B 0000                  		move.w	Obj1B_Index(pc,d0.w),d1
00011818 4EFB 1000                  		jmp	Obj1B_Index(pc,d1.w)
0001181C                            ; ===========================================================================
0001181C 0000                       Obj1B_Index:	dc.w Obj1B_Main-Obj1B_Index
0001181E 0000                       		dc.w Obj1B_Action-Obj1B_Index
00011820                            ; ===========================================================================
00011820                            
00011820                            Obj1B_Main:				; XREF: Obj1B_Index
00011820 5428 0024                  		addq.b	#2,$24(a0)
00011824 217C 0000 0000 0004        		move.l	#Map_obj1B,4(a0)
0001182C 317C C300 0002             		move.w	#$C300,2(a0)
00011832 117C 0004 0001             		move.b	#4,1(a0)
00011838 117C 0080 0019             		move.b	#$80,$19(a0)
0001183E 3168 0008 0030             		move.w	8(a0),$30(a0)
00011844                            
00011844                            Obj1B_Action:				; XREF: Obj1B_Index
00011844 3238 F700                  		move.w	($FFFFF700).w,d1
00011848 0241 FFE0                  		andi.w	#$FFE0,d1
0001184C D268 0030                  		add.w	$30(a0),d1
00011850 0838 0000 FE05             		btst	#0,($FFFFFE05).w
00011856 6700                       		beq.s	loc_11114
00011858 0641 0020                  		addi.w	#$20,d1
0001185C                            
0001185C                            loc_11114:
0001185C 3141 0008                  		move.w	d1,8(a0)	; match	obj x-position to screen position
00011860 3238 F646                  		move.w	($FFFFF646).w,d1
00011864 3141 000C                  		move.w	d1,$C(a0)	; match	obj y-position to water	height
00011868 4A28 0032                  		tst.b	$32(a0)
0001186C 6600                       		bne.s	Obj1B_Animate
0001186E 0838 0007 F605             		btst	#7,($FFFFF605).w ; is Start button pressed?
00011874 6700                       		beq.s	loc_1114A	; if not, branch
00011876 5628 001A                  		addq.b	#3,$1A(a0)	; use different	frames
0001187A 117C 0001 0032             		move.b	#1,$32(a0)	; stop animation
00011880 6000                       		bra.s	Obj1B_Display
00011882                            ; ===========================================================================
00011882                            
00011882                            Obj1B_Animate:				; XREF: loc_11114
00011882 4A78 F63A                  		tst.w	($FFFFF63A).w	; is the game paused?
00011886 6600                       		bne.s	Obj1B_Display	; if yes, branch
00011888 117C 0000 0032             		move.b	#0,$32(a0)	; resume animation
0001188E 5728 001A                  		subq.b	#3,$1A(a0)	; use normal frames
00011892                            
00011892                            loc_1114A:				; XREF: loc_11114
00011892 5328 001E                  		subq.b	#1,$1E(a0)
00011896 6A00                       		bpl.s	Obj1B_Display
00011898 117C 0007 001E             		move.b	#7,$1E(a0)
0001189E 5228 001A                  		addq.b	#1,$1A(a0)
000118A2 0C28 0003 001A             		cmpi.b	#3,$1A(a0)
000118A8 6500                       		bcs.s	Obj1B_Display
000118AA 117C 0000 001A             		move.b	#0,$1A(a0)
000118B0                            
000118B0                            Obj1B_Display:
000118B0 6000 C4B0                  		bra.w	DisplaySprite
000118B4                            ; ===========================================================================
000118B4                            ; ---------------------------------------------------------------------------
000118B4                            ; Sprite mappings - water surface (LZ)
000118B4                            ; ---------------------------------------------------------------------------
000118B4                            Map_obj1B:
000118B4                            	include "_maps\obj1B.asm"
000118B4                            ; ---------------------------------------------------------------------------
000118B4                            ; Sprite mappings - water surface (LZ)
000118B4                            ; ---------------------------------------------------------------------------
000118B4 0000 0000                  		dc.w byte_11178-Map_obj1B, byte_11188-Map_obj1B
000118B8 0000 0000                  		dc.w byte_11198-Map_obj1B, byte_111A8-Map_obj1B
000118BC 0000 0000                  		dc.w byte_111C7-Map_obj1B, byte_111E6-Map_obj1B
000118C0 03                         byte_11178:	dc.b 3
000118C1 FD0D 0000 A0               		dc.b $FD, $D, 0, 0, $A0
000118C6 FD0D 0000 E0               		dc.b $FD, $D, 0, 0, $E0
000118CB FD0D 0000 20               		dc.b $FD, $D, 0, 0, $20
000118D0 03                         byte_11188:	dc.b 3
000118D1 FD0D 0008 A0               		dc.b $FD, $D, 0, 8, $A0
000118D6 FD0D 0008 E0               		dc.b $FD, $D, 0, 8, $E0
000118DB FD0D 0008 20               		dc.b $FD, $D, 0, 8, $20
000118E0 03                         byte_11198:	dc.b 3
000118E1 FD0D 0800 A0               		dc.b $FD, $D, 8, 0, $A0
000118E6 FD0D 0800 E0               		dc.b $FD, $D, 8, 0, $E0
000118EB FD0D 0800 20               		dc.b $FD, $D, 8, 0, $20
000118F0 06                         byte_111A8:	dc.b 6
000118F1 FD0D 0000 A0               		dc.b $FD, $D, 0, 0, $A0
000118F6 FD0D 0000 C0               		dc.b $FD, $D, 0, 0, $C0
000118FB FD0D 0000 E0               		dc.b $FD, $D, 0, 0, $E0
00011900 FD0D 0000 00               		dc.b $FD, $D, 0, 0, 0
00011905 FD0D 0000 20               		dc.b $FD, $D, 0, 0, $20
0001190A FD0D 0000 40               		dc.b $FD, $D, 0, 0, $40
0001190F 06                         byte_111C7:	dc.b 6
00011910 FD0D 0008 A0               		dc.b $FD, $D, 0, 8, $A0
00011915 FD0D 0008 C0               		dc.b $FD, $D, 0, 8, $C0
0001191A FD0D 0008 E0               		dc.b $FD, $D, 0, 8, $E0
0001191F FD0D 0008 00               		dc.b $FD, $D, 0, 8, 0
00011924 FD0D 0008 20               		dc.b $FD, $D, 0, 8, $20
00011929 FD0D 0008 40               		dc.b $FD, $D, 0, 8, $40
0001192E 06                         byte_111E6:	dc.b 6
0001192F FD0D 0800 A0               		dc.b $FD, $D, 8, 0, $A0
00011934 FD0D 0800 C0               		dc.b $FD, $D, 8, 0, $C0
00011939 FD0D 0800 E0               		dc.b $FD, $D, 8, 0, $E0
0001193E FD0D 0800 00               		dc.b $FD, $D, 8, 0, 0
00011943 FD0D 0800 20               		dc.b $FD, $D, 8, 0, $20
00011948 FD0D 0800 40               		dc.b $FD, $D, 8, 0, $40
0001194E 00                         		even
0001194E 00                         		even
0001194E                            
0001194E                            ; ===========================================================================
0001194E                            ; ---------------------------------------------------------------------------
0001194E                            ; Object 0B - pole that	breaks (LZ)
0001194E                            ; ---------------------------------------------------------------------------
0001194E                            
0001194E                            Obj0B:					; XREF: Obj_Index
0001194E 7000                       		moveq	#0,d0
00011950 1028 0024                  		move.b	$24(a0),d0
00011954 323B 0000                  		move.w	Obj0B_Index(pc,d0.w),d1
00011958 4EFB 1000                  		jmp	Obj0B_Index(pc,d1.w)
0001195C                            ; ===========================================================================
0001195C 0000                       Obj0B_Index:	dc.w Obj0B_Main-Obj0B_Index
0001195E 0000                       		dc.w Obj0B_Action-Obj0B_Index
00011960 0000                       		dc.w Obj0B_Display-Obj0B_Index
00011962                            ; ===========================================================================
00011962                            
00011962                            Obj0B_Main:				; XREF: Obj0B_Index
00011962 5428 0024                  		addq.b	#2,$24(a0)
00011966 217C 0000 0000 0004        		move.l	#Map_obj0B,4(a0)
0001196E 317C 43DE 0002             		move.w	#$43DE,2(a0)
00011974 117C 0004 0001             		move.b	#4,1(a0)
0001197A 117C 0008 0019             		move.b	#8,$19(a0)
00011980 117C 0004 0018             		move.b	#4,$18(a0)
00011986 117C 00E1 0020             		move.b	#$E1,$20(a0)
0001198C 7000                       		moveq	#0,d0
0001198E 1028 0028                  		move.b	$28(a0),d0	; get object type
00011992 C0FC 003C                  		mulu.w	#60,d0		; multiply by 60 (1 second)
00011996 3140 0030                  		move.w	d0,$30(a0)	; set breakage time
0001199A                            
0001199A                            Obj0B_Action:				; XREF: Obj0B_Index
0001199A 4A28 0032                  		tst.b	$32(a0)
0001199E 6700                       		beq.s	Obj0B_Grab
000119A0 4A68 0030                  		tst.w	$30(a0)
000119A4 6700                       		beq.s	Obj0B_MoveUp
000119A6 5368 0030                  		subq.w	#1,$30(a0)
000119AA 6600                       		bne.s	Obj0B_MoveUp
000119AC 117C 0001 001A             		move.b	#1,$1A(a0)	; break	the pole
000119B2 6000                       		bra.s	Obj0B_Release
000119B4                            ; ===========================================================================
000119B4                            
000119B4                            Obj0B_MoveUp:				; XREF: Obj0B_Action
000119B4 43F8 D000                  		lea	($FFFFD000).w,a1
000119B8 3028 000C                  		move.w	$C(a0),d0
000119BC 0440 0018                  		subi.w	#$18,d0
000119C0 0838 0000 F604             		btst	#0,($FFFFF604).w ; check if "up" is pressed
000119C6 6700                       		beq.s	Obj0B_MoveDown
000119C8 5369 000C                  		subq.w	#1,$C(a1)	; move Sonic up
000119CC B069 000C                  		cmp.w	$C(a1),d0
000119D0 6500                       		bcs.s	Obj0B_MoveDown
000119D2 3340 000C                  		move.w	d0,$C(a1)
000119D6                            
000119D6                            Obj0B_MoveDown:
000119D6 0640 0024                  		addi.w	#$24,d0
000119DA 0838 0001 F604             		btst	#1,($FFFFF604).w ; check if "down" is pressed
000119E0 6700                       		beq.s	Obj0B_LetGo
000119E2 5269 000C                  		addq.w	#1,$C(a1)	; move Sonic down
000119E6 B069 000C                  		cmp.w	$C(a1),d0
000119EA 6400                       		bcc.s	Obj0B_LetGo
000119EC 3340 000C                  		move.w	d0,$C(a1)
000119F0                            
000119F0                            Obj0B_LetGo:
000119F0 1038 F603                  		move.b	($FFFFF603).w,d0
000119F4 0240 0070                  		andi.w	#$70,d0
000119F8 6700                       		beq.s	Obj0B_Display
000119FA                            
000119FA                            Obj0B_Release:				; XREF: Obj0B_Action
000119FA 4228 0020                  		clr.b	$20(a0)
000119FE 5428 0024                  		addq.b	#2,$24(a0)
00011A02 4238 F7C8                  		clr.b	($FFFFF7C8).w
00011A06 4238 F7C9                  		clr.b	($FFFFF7C9).w
00011A0A 4228 0032                  		clr.b	$32(a0)
00011A0E 6000                       		bra.s	Obj0B_Display
00011A10                            ; ===========================================================================
00011A10                            
00011A10                            Obj0B_Grab:				; XREF: Obj0B_Action
00011A10 4A28 0021                  		tst.b	$21(a0)		; has Sonic touched the	pole?
00011A14 6700                       		beq.s	Obj0B_Display	; if not, branch
00011A16 43F8 D000                  		lea	($FFFFD000).w,a1
00011A1A 3028 0008                  		move.w	8(a0),d0
00011A1E 0640 0014                  		addi.w	#$14,d0
00011A22 B069 0008                  		cmp.w	8(a1),d0
00011A26 6400                       		bcc.s	Obj0B_Display
00011A28 4228 0021                  		clr.b	$21(a0)
00011A2C 0C29 0004 0024             		cmpi.b	#4,$24(a1)
00011A32 6400                       		bcc.s	Obj0B_Display
00011A34 4269 0010                  		clr.w	$10(a1)		; stop Sonic moving
00011A38 4269 0012                  		clr.w	$12(a1)		; stop Sonic moving
00011A3C 3028 0008                  		move.w	8(a0),d0
00011A40 0640 0014                  		addi.w	#$14,d0
00011A44 3340 0008                  		move.w	d0,8(a1)
00011A48 08A9 0000 0022             		bclr	#0,$22(a1)
00011A4E 137C 0011 001C             		move.b	#$11,$1C(a1)	; set Sonic's animation to "hanging" ($11)
00011A54 11FC 0001 F7C8             		move.b	#1,($FFFFF7C8).w ; lock	controls
00011A5A 11FC 0001 F7C9             		move.b	#1,($FFFFF7C9).w ; disable wind	tunnel
00011A60 117C 0001 0032             		move.b	#1,$32(a0)	; begin	countdown to breakage
00011A66                            
00011A66                            Obj0B_Display:				; XREF: Obj0B_Index
00011A66 6000 E3A2                  		bra.w	MarkObjGone
00011A6A                            ; ===========================================================================
00011A6A                            ; ---------------------------------------------------------------------------
00011A6A                            ; Sprite mappings - pole that breaks (LZ)
00011A6A                            ; ---------------------------------------------------------------------------
00011A6A                            Map_obj0B:
00011A6A                            	include "_maps\obj0B.asm"
00011A6A                            ; ---------------------------------------------------------------------------
00011A6A                            ; Sprite mappings - pole that breaks (LZ)
00011A6A                            ; ---------------------------------------------------------------------------
00011A6A 0000                       		dc.w byte_11326-Map_obj0B
00011A6C 0000                       		dc.w byte_11331-Map_obj0B
00011A6E 02                         byte_11326:	dc.b 2			; normal pole
00011A6F E003 0000 FC               		dc.b $E0, 3, 0,	0, $FC
00011A74 0003 1000 FC               		dc.b 0,	3, $10,	0, $FC
00011A79 04                         byte_11331:	dc.b 4			; broken pole
00011A7A E001 0000 FC               		dc.b $E0, 1, 0,	0, $FC
00011A7F F005 0004 FC               		dc.b $F0, 5, 0,	4, $FC
00011A84 0005 1004 FC               		dc.b 0,	5, $10,	4, $FC
00011A89 1001 1000 FC               		dc.b $10, 1, $10, 0, $FC
00011A8E                            		even
00011A8E                            		even
00011A8E                            
00011A8E                            ; ===========================================================================
00011A8E                            ; ---------------------------------------------------------------------------
00011A8E                            ; Object 0C - flapping door (LZ)
00011A8E                            ; ---------------------------------------------------------------------------
00011A8E                            
00011A8E                            Obj0C:					; XREF: Obj_Index
00011A8E 7000                       		moveq	#0,d0
00011A90 1028 0024                  		move.b	$24(a0),d0
00011A94 323B 0000                  		move.w	Obj0C_Index(pc,d0.w),d1
00011A98 4EFB 1000                  		jmp	Obj0C_Index(pc,d1.w)
00011A9C                            ; ===========================================================================
00011A9C 0000                       Obj0C_Index:	dc.w Obj0C_Main-Obj0C_Index
00011A9E 0000                       		dc.w Obj0C_OpenClose-Obj0C_Index
00011AA0                            ; ===========================================================================
00011AA0                            
00011AA0                            Obj0C_Main:				; XREF: Obj0C_Index
00011AA0 5428 0024                  		addq.b	#2,$24(a0)
00011AA4 217C 0000 0000 0004        		move.l	#Map_obj0C,4(a0)
00011AAC 317C 4328 0002             		move.w	#$4328,2(a0)
00011AB2 0028 0004 0001             		ori.b	#4,1(a0)
00011AB8 117C 0028 0019             		move.b	#$28,$19(a0)
00011ABE 7000                       		moveq	#0,d0
00011AC0 1028 0028                  		move.b	$28(a0),d0	; get object type
00011AC4 C0FC 003C                  		mulu.w	#60,d0		; multiply by 60 (1 second)
00011AC8 3140 0032                  		move.w	d0,$32(a0)	; set flap delay time
00011ACC                            
00011ACC                            Obj0C_OpenClose:			; XREF: Obj0C_Index
00011ACC 5368 0030                  		subq.w	#1,$30(a0)	; subtract 1 from time delay
00011AD0 6A00                       		bpl.s	Obj0C_Solid	; if time remains, branch
00011AD2 3168 0032 0030             		move.w	$32(a0),$30(a0)	; reset	time delay
00011AD8 0868 0000 001C             		bchg	#0,$1C(a0)	; open/close door
00011ADE 4A28 0001                  		tst.b	1(a0)
00011AE2 6A00                       		bpl.s	Obj0C_Solid
00011AE4 303C 00BB                  		move.w	#$BB,d0
00011AE8 4EB9 0000 15C0             		jsr	(PlaySound_Special).l ;	play door sound
00011AEE                            
00011AEE                            Obj0C_Solid:
00011AEE 43F9 0000 0000             		lea	(Ani_obj0C).l,a1
00011AF4 6100 932C                  		bsr.w	AnimateSprite
00011AF8 4238 F7C9                  		clr.b	($FFFFF7C9).w	; enable wind tunnel
00011AFC 4A28 001A                  		tst.b	$1A(a0)		; is the door open?
00011B00 6600                       		bne.s	Obj0C_Display	; if yes, branch
00011B02 3038 D008                  		move.w	($FFFFD008).w,d0
00011B06 B068 0008                  		cmp.w	8(a0),d0	; is Sonic in front of the door?
00011B0A 6400                       		bcc.s	Obj0C_Display	; if yes, branch
00011B0C 11FC 0001 F7C9             		move.b	#1,($FFFFF7C9).w ; disable wind	tunnel
00011B12 323C 0013                  		move.w	#$13,d1
00011B16 343C 0020                  		move.w	#$20,d2
00011B1A 3602                       		move.w	d2,d3
00011B1C 5243                       		addq.w	#1,d3
00011B1E 3828 0008                  		move.w	8(a0),d4
00011B22 6100 E60E                  		bsr.w	SolidObject	; make the door	solid
00011B26                            
00011B26                            Obj0C_Display:
00011B26 6000 E2E2                  		bra.w	MarkObjGone
00011B2A                            ; ===========================================================================
00011B2A                            Ani_obj0C:
00011B2A                            	include "_anim\obj0C.asm"
00011B2A                            ; ---------------------------------------------------------------------------
00011B2A                            ; Animation script - flapping door (LZ)
00011B2A                            ; ---------------------------------------------------------------------------
00011B2A 0000                       		dc.w byte_113E6-Ani_obj0C
00011B2C 0000                       		dc.w byte_113EC-Ani_obj0C
00011B2E 0300 0102 FE01             byte_113E6:	dc.b 3,	0, 1, 2, $FE, 1
00011B34 0302 0100 FE01             byte_113EC:	dc.b 3,	2, 1, 0, $FE, 1
00011B3A                            		even
00011B3A                            		even
00011B3A                            
00011B3A                            ; ---------------------------------------------------------------------------
00011B3A                            ; Sprite mappings - flapping door (LZ)
00011B3A                            ; ---------------------------------------------------------------------------
00011B3A                            Map_obj0C:
00011B3A                            	include "_maps\obj0C.asm"
00011B3A                            ; ---------------------------------------------------------------------------
00011B3A                            ; Sprite mappings - flapping door (LZ)
00011B3A                            ; ---------------------------------------------------------------------------
00011B3A 0000                       		dc.w byte_113F8-Map_obj0C
00011B3C 0000                       		dc.w byte_11403-Map_obj0C
00011B3E 0000                       		dc.w byte_1140E-Map_obj0C
00011B40 02                         byte_113F8:	dc.b 2
00011B41 E007 0000 F8               		dc.b $E0, 7, 0,	0, $F8
00011B46 0007 1000 F8               		dc.b 0,	7, $10,	0, $F8
00011B4B 02                         byte_11403:	dc.b 2
00011B4C DA0F 0008 FB               		dc.b $DA, $F, 0, 8, $FB
00011B51 060F 1008 FB               		dc.b 6,	$F, $10, 8, $FB
00011B56 02                         byte_1140E:	dc.b 2
00011B57 D80D 0018 00               		dc.b $D8, $D, 0, $18, 0
00011B5C 180D 1018 00               		dc.b $18, $D, $10, $18,	0
00011B62 00                         		even
00011B62 00                         		even
00011B62                            
00011B62                            ; ===========================================================================
00011B62                            ; ---------------------------------------------------------------------------
00011B62                            ; Object 71 - invisible	solid blocks
00011B62                            ; ---------------------------------------------------------------------------
00011B62                            
00011B62                            Obj71:					; XREF: Obj_Index
00011B62 7000                       		moveq	#0,d0
00011B64 1028 0024                  		move.b	$24(a0),d0
00011B68 323B 0000                  		move.w	Obj71_Index(pc,d0.w),d1
00011B6C 4EFB 1000                  		jmp	Obj71_Index(pc,d1.w)
00011B70                            ; ===========================================================================
00011B70 0000                       Obj71_Index:	dc.w Obj71_Main-Obj71_Index
00011B72 0000                       		dc.w Obj71_Solid-Obj71_Index
00011B74                            ; ===========================================================================
00011B74                            
00011B74                            Obj71_Main:				; XREF: Obj71_Index
00011B74 5428 0024                  		addq.b	#2,$24(a0)
00011B78 217C 0000 0000 0004        		move.l	#Map_obj71,4(a0)
00011B80 317C 8680 0002             		move.w	#$8680,2(a0)
00011B86 0028 0004 0001             		ori.b	#4,1(a0)
00011B8C 1028 0028                  		move.b	$28(a0),d0	; get object type
00011B90 1200                       		move.b	d0,d1
00011B92 0240 00F0                  		andi.w	#$F0,d0		; read only the	1st byte
00011B96 0640 0010                  		addi.w	#$10,d0
00011B9A E248                       		lsr.w	#1,d0
00011B9C 1140 0019                  		move.b	d0,$19(a0)	; set object width
00011BA0 0241 000F                  		andi.w	#$F,d1		; read only the	2nd byte
00011BA4 5241                       		addq.w	#1,d1
00011BA6 E749                       		lsl.w	#3,d1
00011BA8 1141 0016                  		move.b	d1,$16(a0)	; set object height
00011BAC                            
00011BAC                            Obj71_Solid:				; XREF: Obj71_Index
00011BAC 6100 C42E                  		bsr.w	ChkObjOnScreen
00011BB0 6600                       		bne.s	Obj71_ChkDel
00011BB2 7200                       		moveq	#0,d1
00011BB4 1228 0019                  		move.b	$19(a0),d1
00011BB8 0641 000B                  		addi.w	#$B,d1
00011BBC 7400                       		moveq	#0,d2
00011BBE 1428 0016                  		move.b	$16(a0),d2
00011BC2 3602                       		move.w	d2,d3
00011BC4 5243                       		addq.w	#1,d3
00011BC6 3828 0008                  		move.w	8(a0),d4
00011BCA 6100 E5A8                  		bsr.w	SolidObject71
00011BCE                            
00011BCE                            Obj71_ChkDel:
00011BCE 3028 0008                  		move.w	8(a0),d0
00011BD2 0240 FF80                  		andi.w	#$FF80,d0
00011BD6 3238 F700                  		move.w	($FFFFF700).w,d1
00011BDA 0441 0080                  		subi.w	#$80,d1
00011BDE 0241 FF80                  		andi.w	#$FF80,d1
00011BE2 9041                       		sub.w	d1,d0
00011BE4 0C40 0280                  		cmpi.w	#$280,d0
00011BE8 6200                       		bhi.s	Obj71_Delete
00011BEA 4A78 FE08                  		tst.w	($FFFFFE08).w	; are you using	debug mode?
00011BEE 6700                       		beq.s	Obj71_NoDisplay	; if not, branch
00011BF0 4EFA C170                  		jmp	DisplaySprite	; if yes, display the object
00011BF4                            ; ===========================================================================
00011BF4                            
00011BF4                            Obj71_NoDisplay:
00011BF4 4E75                       		rts	
00011BF6                            ; ===========================================================================
00011BF6                            
00011BF6                            Obj71_Delete:
00011BF6 4EFA C1A6                  		jmp	DeleteObject
00011BFA                            ; ===========================================================================
00011BFA                            ; ---------------------------------------------------------------------------
00011BFA                            ; Sprite mappings - invisible solid blocks
00011BFA                            ; ---------------------------------------------------------------------------
00011BFA                            Map_obj71:
00011BFA                            	include "_maps\obj71.asm"
00011BFA                            ; ---------------------------------------------------------------------------
00011BFA                            ; Sprite mappings - invisible solid blocks
00011BFA                            ; ---------------------------------------------------------------------------
00011BFA 0000                       		dc.w byte_114BC-Map_obj71
00011BFC 0000                       		dc.w byte_114D1-Map_obj71
00011BFE 0000                       		dc.w byte_114E6-Map_obj71
00011C00 04                         byte_114BC:	dc.b 4
00011C01 F005 0018 F0               		dc.b $F0, 5, 0,	$18, $F0
00011C06 F005 0018 00               		dc.b $F0, 5, 0,	$18, 0
00011C0B 0005 0018 F0               		dc.b 0,	5, 0, $18, $F0
00011C10 0005 0018 00               		dc.b 0,	5, 0, $18, 0
00011C15 04                         byte_114D1:	dc.b 4
00011C16 E005 0018 C0               		dc.b $E0, 5, 0,	$18, $C0
00011C1B E005 0018 30               		dc.b $E0, 5, 0,	$18, $30
00011C20 1005 0018 C0               		dc.b $10, 5, 0,	$18, $C0
00011C25 1005 0018 30               		dc.b $10, 5, 0,	$18, $30
00011C2A 04                         byte_114E6:	dc.b 4
00011C2B E005 0018 80               		dc.b $E0, 5, 0,	$18, $80
00011C30 E005 0018 70               		dc.b $E0, 5, 0,	$18, $70
00011C35 1005 0018 80               		dc.b $10, 5, 0,	$18, $80
00011C3A 1005 0018 70               		dc.b $10, 5, 0,	$18, $70
00011C40 00                         		even
00011C40 00                         		even
00011C40                            
00011C40                            ; ===========================================================================
00011C40                            ; ---------------------------------------------------------------------------
00011C40                            ; Object 5D - fans (SLZ)
00011C40                            ; ---------------------------------------------------------------------------
00011C40                            
00011C40                            Obj5D:					; XREF: Obj_Index
00011C40 7000                       		moveq	#0,d0
00011C42 1028 0024                  		move.b	$24(a0),d0
00011C46 323B 0000                  		move.w	Obj5D_Index(pc,d0.w),d1
00011C4A 4EFB 1000                  		jmp	Obj5D_Index(pc,d1.w)
00011C4E                            ; ===========================================================================
00011C4E 0000                       Obj5D_Index:	dc.w Obj5D_Main-Obj5D_Index
00011C50 0000                       		dc.w Obj5D_Delay-Obj5D_Index
00011C52                            ; ===========================================================================
00011C52                            
00011C52                            Obj5D_Main:				; XREF: Obj5D_Index
00011C52 5428 0024                  		addq.b	#2,$24(a0)
00011C56 217C 0000 0000 0004        		move.l	#Map_obj5D,4(a0)
00011C5E 317C 43A0 0002             		move.w	#$43A0,2(a0)
00011C64 0028 0004 0001             		ori.b	#4,1(a0)
00011C6A 117C 0010 0019             		move.b	#$10,$19(a0)
00011C70 117C 0004 0018             		move.b	#4,$18(a0)
00011C76                            
00011C76                            Obj5D_Delay:				; XREF: Obj5D_Index
00011C76 0828 0001 0028             		btst	#1,$28(a0)	; is object type 02/03?
00011C7C 6600                       		bne.s	Obj5D_Blow	; if yes, branch
00011C7E 5368 0030                  		subq.w	#1,$30(a0)	; subtract 1 from time delay
00011C82 6A00                       		bpl.s	Obj5D_Blow	; if time remains, branch
00011C84 317C 0078 0030             		move.w	#120,$30(a0)	; set delay to 2 seconds
00011C8A 0868 0000 0032             		bchg	#0,$32(a0)	; switch fan on/off
00011C90 6700                       		beq.s	Obj5D_Blow	; if fan is off, branch
00011C92 317C 00B4 0030             		move.w	#180,$30(a0)	; set delay to 3 seconds
00011C98                            
00011C98                            Obj5D_Blow:
00011C98 4A28 0032                  		tst.b	$32(a0)		; is fan switched on?
00011C9C 6600 0000                  		bne.w	Obj5D_ChkDel	; if not, branch
00011CA0 43F8 D000                  		lea	($FFFFD000).w,a1
00011CA4 3029 0008                  		move.w	8(a1),d0
00011CA8 9068 0008                  		sub.w	8(a0),d0
00011CAC 0828 0000 0022             		btst	#0,$22(a0)
00011CB2 6600                       		bne.s	Obj5D_ChkSonic
00011CB4 4440                       		neg.w	d0
00011CB6                            
00011CB6                            Obj5D_ChkSonic:
00011CB6 0640 0050                  		addi.w	#$50,d0
00011CBA 0C40 00F0                  		cmpi.w	#$F0,d0		; is Sonic more	than $A0 pixels	from the fan?
00011CBE 6400                       		bcc.s	Obj5D_Animate	; if yes, branch
00011CC0 3229 000C                  		move.w	$C(a1),d1
00011CC4 0641 0060                  		addi.w	#$60,d1
00011CC8 9268 000C                  		sub.w	$C(a0),d1
00011CCC 6500                       		bcs.s	Obj5D_Animate
00011CCE 0C41 0070                  		cmpi.w	#$70,d1
00011CD2 6400                       		bcc.s	Obj5D_Animate
00011CD4 0440 0050                  		subi.w	#$50,d0
00011CD8 6400                       		bcc.s	loc_1159A
00011CDA 4640                       		not.w	d0
00011CDC D040                       		add.w	d0,d0
00011CDE                            
00011CDE                            loc_1159A:
00011CDE 0640 0060                  		addi.w	#$60,d0
00011CE2 0828 0000 0022             		btst	#0,$22(a0)
00011CE8 6600                       		bne.s	loc_115A8
00011CEA 4440                       		neg.w	d0
00011CEC                            
00011CEC                            loc_115A8:
00011CEC 4400                       		neg.b	d0
00011CEE E840                       		asr.w	#4,d0
00011CF0 0828 0000 0028             		btst	#0,$28(a0)
00011CF6 6700                       		beq.s	Obj5D_MoveSonic
00011CF8 4440                       		neg.w	d0
00011CFA                            
00011CFA                            Obj5D_MoveSonic:
00011CFA D169 0008                  		add.w	d0,8(a1)	; push Sonic away from the fan
00011CFE                            
00011CFE                            Obj5D_Animate:				; XREF: Obj5D_ChkSonic
00011CFE 5328 001E                  		subq.b	#1,$1E(a0)
00011D02 6A00                       		bpl.s	Obj5D_ChkDel
00011D04 117C 0000 001E             		move.b	#0,$1E(a0)
00011D0A 5228 001B                  		addq.b	#1,$1B(a0)
00011D0E 0C28 0003 001B             		cmpi.b	#3,$1B(a0)
00011D14 6500                       		bcs.s	loc_115D8
00011D16 117C 0000 001B             		move.b	#0,$1B(a0)
00011D1C                            
00011D1C                            loc_115D8:
00011D1C 7000                       		moveq	#0,d0
00011D1E 0828 0000 0028             		btst	#0,$28(a0)
00011D24 6700                       		beq.s	loc_115E4
00011D26 7002                       		moveq	#2,d0
00011D28                            
00011D28                            loc_115E4:
00011D28 D028 001B                  		add.b	$1B(a0),d0
00011D2C 1140 001A                  		move.b	d0,$1A(a0)
00011D30                            
00011D30                            Obj5D_ChkDel:				; XREF: Obj5D_Animate
00011D30 6100 C030                  		bsr.w	DisplaySprite
00011D34 3028 0008                  		move.w	8(a0),d0
00011D38 0240 FF80                  		andi.w	#$FF80,d0
00011D3C 3238 F700                  		move.w	($FFFFF700).w,d1
00011D40 0441 0080                  		subi.w	#$80,d1
00011D44 0241 FF80                  		andi.w	#$FF80,d1
00011D48 9041                       		sub.w	d1,d0
00011D4A 0C40 0280                  		cmpi.w	#$280,d0
00011D4E 6200 C04E                  		bhi.w	DeleteObject
00011D52 4E75                       		rts	
00011D54                            ; ===========================================================================
00011D54                            ; ---------------------------------------------------------------------------
00011D54                            ; Sprite mappings - fans (SLZ)
00011D54                            ; ---------------------------------------------------------------------------
00011D54                            Map_obj5D:
00011D54                            	include "_maps\obj5D.asm"
00011D54                            ; ---------------------------------------------------------------------------
00011D54                            ; Sprite mappings - fans (SLZ)
00011D54                            ; ---------------------------------------------------------------------------
00011D54 0000 0000                  		dc.w byte_1161A-Map_obj5D, byte_11625-Map_obj5D
00011D58 0000 0000                  		dc.w byte_11630-Map_obj5D, byte_11625-Map_obj5D
00011D5C 0000                       		dc.w byte_1161A-Map_obj5D
00011D5E 02                         byte_1161A:	dc.b 2
00011D5F F009 0000 F8               		dc.b $F0, 9, 0,	0, $F8
00011D64 000D 0006 F0               		dc.b 0,	$D, 0, 6, $F0
00011D69 02                         byte_11625:	dc.b 2
00011D6A F00D 000E F0               		dc.b $F0, $D, 0, $E, $F0
00011D6F 000D 0016 F0               		dc.b 0,	$D, 0, $16, $F0
00011D74 02                         byte_11630:	dc.b 2
00011D75 F00D 001E F0               		dc.b $F0, $D, 0, $1E, $F0
00011D7A 0009 0026 F8               		dc.b 0,	9, 0, $26, $F8
00011D80 00                         		even
00011D80 00                         		even
00011D80                            
00011D80                            ; ===========================================================================
00011D80                            ; ---------------------------------------------------------------------------
00011D80                            ; Object 5E - seesaws (SLZ)
00011D80                            ; ---------------------------------------------------------------------------
00011D80                            
00011D80                            Obj5E:					; XREF: Obj_Index
00011D80 7000                       		moveq	#0,d0
00011D82 1028 0024                  		move.b	$24(a0),d0
00011D86 323B 0000                  		move.w	Obj5E_Index(pc,d0.w),d1
00011D8A 4EBB 1000                  		jsr	Obj5E_Index(pc,d1.w)
00011D8E 3028 0030                  		move.w	$30(a0),d0
00011D92 0240 FF80                  		andi.w	#$FF80,d0
00011D96 3238 F700                  		move.w	($FFFFF700).w,d1
00011D9A 0441 0080                  		subi.w	#$80,d1
00011D9E 0241 FF80                  		andi.w	#$FF80,d1
00011DA2 9041                       		sub.w	d1,d0
00011DA4 6B00 BFF8                  		bmi.w	DeleteObject
00011DA8 0C40 0280                  		cmpi.w	#$280,d0
00011DAC 6200 BFF0                  		bhi.w	DeleteObject
00011DB0 6000 BFB0                  		bra.w	DisplaySprite
00011DB4                            ; ===========================================================================
00011DB4 0000                       Obj5E_Index:	dc.w Obj5E_Main-Obj5E_Index
00011DB6 0000                       		dc.w Obj5E_Slope-Obj5E_Index
00011DB8 0000                       		dc.w Obj5E_Slope2-Obj5E_Index
00011DBA 0000                       		dc.w Obj5E_Spikeball-Obj5E_Index
00011DBC 0000                       		dc.w Obj5E_MoveSpike-Obj5E_Index
00011DBE 0000                       		dc.w Obj5E_SpikeFall-Obj5E_Index
00011DC0                            ; ===========================================================================
00011DC0                            
00011DC0                            Obj5E_Main:				; XREF: Obj5E_Index
00011DC0 5428 0024                  		addq.b	#2,$24(a0)
00011DC4 217C 0000 0000 0004        		move.l	#Map_obj5E,4(a0)
00011DCC 317C 0374 0002             		move.w	#$374,2(a0)
00011DD2 0028 0004 0001             		ori.b	#4,1(a0)
00011DD8 117C 0004 0018             		move.b	#4,$18(a0)
00011DDE 117C 0030 0019             		move.b	#$30,$19(a0)
00011DE4 3168 0008 0030             		move.w	8(a0),$30(a0)
00011DEA 4A28 0028                  		tst.b	$28(a0)		; is object type 00 ?
00011DEE 6600                       		bne.s	loc_116D2	; if not, branch
00011DF0 6100 C40C                  		bsr.w	SingleObjLoad2
00011DF4 6600                       		bne.s	loc_116D2
00011DF6 12BC 005E                  		move.b	#$5E,0(a1)	; load spikeball object
00011DFA 5C29 0024                  		addq.b	#6,$24(a1)
00011DFE 3368 0008 0008             		move.w	8(a0),8(a1)
00011E04 3368 000C 000C             		move.w	$C(a0),$C(a1)
00011E0A 1368 0022 0022             		move.b	$22(a0),$22(a1)
00011E10 2348 003C                  		move.l	a0,$3C(a1)
00011E14                            
00011E14                            loc_116D2:
00011E14 0828 0000 0022             		btst	#0,$22(a0)
00011E1A 6700                       		beq.s	loc_116E0
00011E1C 117C 0002 001A             		move.b	#2,$1A(a0)
00011E22                            
00011E22                            loc_116E0:
00011E22 1168 001A 003A             		move.b	$1A(a0),$3A(a0)
00011E28                            
00011E28                            Obj5E_Slope:				; XREF: Obj5E_Index
00011E28 1228 003A                  		move.b	$3A(a0),d1
00011E2C 6100 0000                  		bsr.w	loc_11766
00011E30 45F9 0000 0000             		lea	(Obj5E_Data1).l,a2
00011E36 0828 0000 001A             		btst	#0,$1A(a0)
00011E3C 6700                       		beq.s	loc_11702
00011E3E 45F9 0000 0000             		lea	(Obj5E_Data2).l,a2
00011E44                            
00011E44                            loc_11702:
00011E44 43F8 D000                  		lea	($FFFFD000).w,a1
00011E48 3169 0012 0038             		move.w	$12(a1),$38(a0)
00011E4E 323C 0030                  		move.w	#$30,d1
00011E52 4EB9 0000 7AC0             		jsr	(SlopeObject).l
00011E58 4E75                       		rts	
00011E5A                            ; ===========================================================================
00011E5A                            
00011E5A                            Obj5E_Slope2:				; XREF: Obj5E_Index
00011E5A 6100 0000                  		bsr.w	loc_1174A
00011E5E 45F9 0000 0000             		lea	(Obj5E_Data1).l,a2
00011E64 0828 0000 001A             		btst	#0,$1A(a0)
00011E6A 6700                       		beq.s	loc_11730
00011E6C 45F9 0000 0000             		lea	(Obj5E_Data2).l,a2
00011E72                            
00011E72                            loc_11730:
00011E72 323C 0030                  		move.w	#$30,d1
00011E76 4EB9 0000 7B60             		jsr	(ExitPlatform).l
00011E7C 323C 0030                  		move.w	#$30,d1
00011E80 3428 0008                  		move.w	8(a0),d2
00011E84 4EB9 0000 8B50             		jsr	SlopeObject2
00011E8A 4E75                       		rts	
00011E8C                            ; ===========================================================================
00011E8C                            
00011E8C                            loc_1174A:				; XREF: Obj5E_Slope2
00011E8C 7202                       		moveq	#2,d1
00011E8E 43F8 D000                  		lea	($FFFFD000).w,a1
00011E92 3028 0008                  		move.w	8(a0),d0
00011E96 9069 0008                  		sub.w	8(a1),d0
00011E9A 6400                       		bcc.s	loc_1175E
00011E9C 4440                       		neg.w	d0
00011E9E 7200                       		moveq	#0,d1
00011EA0                            
00011EA0                            loc_1175E:
00011EA0 0C40 0008                  		cmpi.w	#8,d0
00011EA4 6400                       		bcc.s	loc_11766
00011EA6 7201                       		moveq	#1,d1
00011EA8                            
00011EA8                            loc_11766:
00011EA8 1028 001A                  		move.b	$1A(a0),d0
00011EAC B001                       		cmp.b	d1,d0
00011EAE 6700                       		beq.s	locret_11790
00011EB0 6400                       		bcc.s	loc_11772
00011EB2 5400                       		addq.b	#2,d0
00011EB4                            
00011EB4                            loc_11772:
00011EB4 5300                       		subq.b	#1,d0
00011EB6 1140 001A                  		move.b	d0,$1A(a0)
00011EBA 1141 003A                  		move.b	d1,$3A(a0)
00011EBE 08A8 0000 0001             		bclr	#0,1(a0)
00011EC4 0828 0001 001A             		btst	#1,$1A(a0)
00011ECA 6700                       		beq.s	locret_11790
00011ECC 08E8 0000 0001             		bset	#0,1(a0)
00011ED2                            
00011ED2                            locret_11790:
00011ED2 4E75                       		rts	
00011ED4                            ; ===========================================================================
00011ED4                            
00011ED4                            Obj5E_Spikeball:			; XREF: Obj5E_Index
00011ED4 5428 0024                  		addq.b	#2,$24(a0)
00011ED8 217C 0000 0000 0004        		move.l	#Map_obj5Ea,4(a0)
00011EE0 317C 04F0 0002             		move.w	#$4F0,2(a0)
00011EE6 0028 0004 0001             		ori.b	#4,1(a0)
00011EEC 117C 0004 0018             		move.b	#4,$18(a0)
00011EF2 117C 008B 0020             		move.b	#$8B,$20(a0)
00011EF8 117C 000C 0019             		move.b	#$C,$19(a0)
00011EFE 3168 0008 0030             		move.w	8(a0),$30(a0)
00011F04 0668 0028 0008             		addi.w	#$28,8(a0)
00011F0A 3168 000C 0034             		move.w	$C(a0),$34(a0)
00011F10 117C 0001 001A             		move.b	#1,$1A(a0)
00011F16 0828 0000 0022             		btst	#0,$22(a0)
00011F1C 6700                       		beq.s	Obj5E_MoveSpike
00011F1E 0468 0050 0008             		subi.w	#$50,8(a0)
00011F24 117C 0002 003A             		move.b	#2,$3A(a0)
00011F2A                            
00011F2A                            Obj5E_MoveSpike:			; XREF: Obj5E_Index
00011F2A 2268 003C                  		movea.l	$3C(a0),a1
00011F2E 7000                       		moveq	#0,d0
00011F30 1028 003A                  		move.b	$3A(a0),d0
00011F34 9029 003A                  		sub.b	$3A(a1),d0
00011F38 6700                       		beq.s	loc_1183E
00011F3A 6400                       		bcc.s	loc_117FC
00011F3C 4400                       		neg.b	d0
00011F3E                            
00011F3E                            loc_117FC:
00011F3E 323C F7E8                  		move.w	#-$818,d1
00011F42 343C FEEC                  		move.w	#-$114,d2
00011F46 0C00 0001                  		cmpi.b	#1,d0
00011F4A 6700                       		beq.s	loc_11822
00011F4C 323C F510                  		move.w	#-$AF0,d1
00011F50 343C FF34                  		move.w	#-$CC,d2
00011F54 0C69 0A00 0038             		cmpi.w	#$A00,$38(a1)
00011F5A 6D00                       		blt.s	loc_11822
00011F5C 323C F200                  		move.w	#-$E00,d1
00011F60 343C FF60                  		move.w	#-$A0,d2
00011F64                            
00011F64                            loc_11822:
00011F64 3141 0012                  		move.w	d1,$12(a0)
00011F68 3142 0010                  		move.w	d2,$10(a0)
00011F6C 3028 0008                  		move.w	8(a0),d0
00011F70 9068 0030                  		sub.w	$30(a0),d0
00011F74 6400                       		bcc.s	loc_11838
00011F76 4468 0010                  		neg.w	$10(a0)
00011F7A                            
00011F7A                            loc_11838:
00011F7A 5428 0024                  		addq.b	#2,$24(a0)
00011F7E 6000                       		bra.s	Obj5E_SpikeFall
00011F80                            ; ===========================================================================
00011F80                            
00011F80                            loc_1183E:				; XREF: Obj5E_MoveSpike
00011F80 45F9 0000 0000             		lea	(Obj5E_Speeds).l,a2
00011F86 7000                       		moveq	#0,d0
00011F88 1029 001A                  		move.b	$1A(a1),d0
00011F8C 343C 0028                  		move.w	#$28,d2
00011F90 3228 0008                  		move.w	8(a0),d1
00011F94 9268 0030                  		sub.w	$30(a0),d1
00011F98 6400                       		bcc.s	loc_1185C
00011F9A 4442                       		neg.w	d2
00011F9C 5440                       		addq.w	#2,d0
00011F9E                            
00011F9E                            loc_1185C:
00011F9E D040                       		add.w	d0,d0
00011FA0 3228 0034                  		move.w	$34(a0),d1
00011FA4 D272 0000                  		add.w	(a2,d0.w),d1
00011FA8 3141 000C                  		move.w	d1,$C(a0)
00011FAC D468 0030                  		add.w	$30(a0),d2
00011FB0 3142 0008                  		move.w	d2,8(a0)
00011FB4 4268 000E                  		clr.w	$E(a0)
00011FB8 4268 000A                  		clr.w	$A(a0)
00011FBC 4E75                       		rts	
00011FBE                            ; ===========================================================================
00011FBE                            
00011FBE                            Obj5E_SpikeFall:			; XREF: Obj5E_Index
00011FBE 4A68 0012                  		tst.w	$12(a0)
00011FC2 6A00                       		bpl.s	loc_1189A
00011FC4 6100 BD4A                  		bsr.w	ObjectFall
00011FC8 3028 0034                  		move.w	$34(a0),d0
00011FCC 0440 002F                  		subi.w	#$2F,d0
00011FD0 B068 000C                  		cmp.w	$C(a0),d0
00011FD4 6E00                       		bgt.s	locret_11898
00011FD6 6100 BD38                  		bsr.w	ObjectFall
00011FDA                            
00011FDA                            locret_11898:
00011FDA 4E75                       		rts	
00011FDC                            ; ===========================================================================
00011FDC                            
00011FDC                            loc_1189A:				; XREF: Obj5E_SpikeFall
00011FDC 6100 BD32                  		bsr.w	ObjectFall
00011FE0 2268 003C                  		movea.l	$3C(a0),a1
00011FE4 45F9 0000 0000             		lea	(Obj5E_Speeds).l,a2
00011FEA 7000                       		moveq	#0,d0
00011FEC 1029 001A                  		move.b	$1A(a1),d0
00011FF0 3228 0008                  		move.w	8(a0),d1
00011FF4 9268 0030                  		sub.w	$30(a0),d1
00011FF8 6400                       		bcc.s	loc_118BA
00011FFA 5440                       		addq.w	#2,d0
00011FFC                            
00011FFC                            loc_118BA:
00011FFC D040                       		add.w	d0,d0
00011FFE 3228 0034                  		move.w	$34(a0),d1
00012002 D272 0000                  		add.w	(a2,d0.w),d1
00012006 B268 000C                  		cmp.w	$C(a0),d1
0001200A 6E00                       		bgt.s	locret_11938
0001200C 2268 003C                  		movea.l	$3C(a0),a1
00012010 7202                       		moveq	#2,d1
00012012 4A68 0010                  		tst.w	$10(a0)
00012016 6B00                       		bmi.s	Obj5E_Spring
00012018 7200                       		moveq	#0,d1
0001201A                            
0001201A                            Obj5E_Spring:
0001201A 1341 003A                  		move.b	d1,$3A(a1)
0001201E 1141 003A                  		move.b	d1,$3A(a0)
00012022 B229 001A                  		cmp.b	$1A(a1),d1
00012026 6700                       		beq.s	loc_1192C
00012028 08A9 0003 0022             		bclr	#3,$22(a1)
0001202E 6700                       		beq.s	loc_1192C
00012030 4229 0025                  		clr.b	$25(a1)
00012034 137C 0002 0024             		move.b	#2,$24(a1)
0001203A 45F8 D000                  		lea	($FFFFD000).w,a2
0001203E 3568 0012 0012             		move.w	$12(a0),$12(a2)
00012044 446A 0012                  		neg.w	$12(a2)
00012048 08EA 0001 0022             		bset	#1,$22(a2)
0001204E 08AA 0003 0022             		bclr	#3,$22(a2)
00012054 422A 003C                  		clr.b	$3C(a2)
00012058 157C 0010 001C             		move.b	#$10,$1C(a2)	; change Sonic's animation to "spring" ($10)
0001205E 157C 0002 0024             		move.b	#2,$24(a2)
00012064 303C 00CC                  		move.w	#$CC,d0
00012068 4EB9 0000 15C0             		jsr	(PlaySound_Special).l ;	play spring sound
0001206E                            
0001206E                            loc_1192C:
0001206E 4268 0010                  		clr.w	$10(a0)
00012072 4268 0012                  		clr.w	$12(a0)
00012076 5528 0024                  		subq.b	#2,$24(a0)
0001207A                            
0001207A                            locret_11938:
0001207A 4E75                       		rts	
0001207C                            ; ===========================================================================
0001207C FFF8 FFE4 FFD1 FFE4 FFF8   Obj5E_Speeds:	dc.w $FFF8, $FFE4, $FFD1, $FFE4, $FFF8
00012086                            
00012086                            Obj5E_Data1:	incbin	misc\slzssaw1.bin
000120B6                            		even
000120B6                            Obj5E_Data2:	incbin	misc\slzssaw2.bin
000120E6                            		even
000120E6                            ; ---------------------------------------------------------------------------
000120E6                            ; Sprite mappings - seesaws (SLZ)
000120E6                            ; ---------------------------------------------------------------------------
000120E6                            Map_obj5E:
000120E6                            	include "_maps\obj5E.asm"
000120E6                            ; ---------------------------------------------------------------------------
000120E6                            ; Sprite mappings - seesaws (SLZ)
000120E6                            ; ---------------------------------------------------------------------------
000120E6 0000 0000                  		dc.w byte_119AC-Map_obj5E, byte_119D0-Map_obj5E
000120EA 0000 0000                  		dc.w byte_119AC-Map_obj5E, byte_119D0-Map_obj5E
000120EE 07                         byte_119AC:	dc.b 7
000120EF D406 0000 D3               		dc.b $D4, 6, 0,	0, $D3
000120F4 DC06 0006 E3               		dc.b $DC, 6, 0,	6, $E3
000120F9 E404 000C F3               		dc.b $E4, 4, 0,	$C, $F3
000120FE EC0D 000E F3               		dc.b $EC, $D, 0, $E, $F3
00012103 FC08 0016 FB               		dc.b $FC, 8, 0,	$16, $FB
00012108 F406 0006 13               		dc.b $F4, 6, 0,	6, $13
0001210D FC05 0019 23               		dc.b $FC, 5, 0,	$19, $23
00012112 04                         byte_119D0:	dc.b 4
00012113 E60A 001D D0               		dc.b $E6, $A, 0, $1D, $D0
00012118 E60A 0023 E8               		dc.b $E6, $A, 0, $23, $E8
0001211D E60A 0823 00               		dc.b $E6, $A, 8, $23, 0
00012122 E60A 081D 18               		dc.b $E6, $A, 8, $1D, $18
00012128 00                         		even
00012128 00                         		even
00012128                            
00012128                            ; ---------------------------------------------------------------------------
00012128                            ; Sprite mappings - spiked balls on the	seesaws	(SLZ)
00012128                            ; ---------------------------------------------------------------------------
00012128                            Map_obj5Ea:
00012128                            	include "_maps\obj5Eballs.asm"
00012128                            ; ---------------------------------------------------------------------------
00012128                            ; Sprite mappings - spiked balls on the	seesaws	(SLZ)
00012128                            ; ---------------------------------------------------------------------------
00012128 0000                       		dc.w byte_119EA-Map_obj5Ea
0001212A 0000                       		dc.w byte_119F0-Map_obj5Ea
0001212C 01                         byte_119EA:	dc.b 1
0001212D F40A 0000 F4               		dc.b $F4, $A, 0, 0, $F4
00012132 01                         byte_119F0:	dc.b 1
00012133 F40A 0009 F4               		dc.b $F4, $A, 0, 9, $F4
00012138                            		even
00012138                            		even
00012138                            
00012138                            ; ===========================================================================
00012138                            ; ---------------------------------------------------------------------------
00012138                            ; Object 5F - walking bomb enemy (SLZ, SBZ)
00012138                            ; ---------------------------------------------------------------------------
00012138                            
00012138                            Obj5F:					; XREF: Obj_Index
00012138 7000                       		moveq	#0,d0
0001213A 1028 0024                  		move.b	$24(a0),d0
0001213E 323B 0000                  		move.w	Obj5F_Index(pc,d0.w),d1
00012142 4EFB 1000                  		jmp	Obj5F_Index(pc,d1.w)
00012146                            ; ===========================================================================
00012146 0000                       Obj5F_Index:	dc.w Obj5F_Main-Obj5F_Index
00012148 0000                       		dc.w Obj5F_Action-Obj5F_Index
0001214A 0000                       		dc.w Obj5F_Display-Obj5F_Index
0001214C 0000                       		dc.w Obj5F_End-Obj5F_Index
0001214E                            ; ===========================================================================
0001214E                            
0001214E                            Obj5F_Main:				; XREF: Obj5F_Index
0001214E 5428 0024                  		addq.b	#2,$24(a0)
00012152 217C 0000 0000 0004        		move.l	#Map_obj5F,4(a0)
0001215A 317C 0400 0002             		move.w	#$400,2(a0)
00012160 0028 0004 0001             		ori.b	#4,1(a0)
00012166 117C 0003 0018             		move.b	#3,$18(a0)
0001216C 117C 000C 0019             		move.b	#$C,$19(a0)
00012172 1028 0028                  		move.b	$28(a0),d0
00012176 6700                       		beq.s	loc_11A3C
00012178 1140 0024                  		move.b	d0,$24(a0)
0001217C 4E75                       		rts	
0001217E                            ; ===========================================================================
0001217E                            
0001217E                            loc_11A3C:
0001217E 117C 009A 0020             		move.b	#$9A,$20(a0)
00012184 0868 0000 0022             		bchg	#0,$22(a0)
0001218A                            
0001218A                            Obj5F_Action:				; XREF: Obj5F_Index
0001218A 7000                       		moveq	#0,d0
0001218C 1028 0025                  		move.b	$25(a0),d0
00012190 323B 0000                  		move.w	Obj5F_Index2(pc,d0.w),d1
00012194 4EBB 1000                  		jsr	Obj5F_Index2(pc,d1.w)
00012198 43F9 0000 0000             		lea	(Ani_obj5F).l,a1
0001219E 6100 8C82                  		bsr.w	AnimateSprite
000121A2 6000 DC66                  		bra.w	MarkObjGone
000121A6                            ; ===========================================================================
000121A6 0000                       Obj5F_Index2:	dc.w Obj5F_Walk-Obj5F_Index2
000121A8 0000                       		dc.w Obj5F_Wait-Obj5F_Index2
000121AA 0000                       		dc.w Obj5F_Explode-Obj5F_Index2
000121AC                            ; ===========================================================================
000121AC                            
000121AC                            Obj5F_Walk:				; XREF: Obj5F_Index2
000121AC 6100 0000                  		bsr.w	Obj5F_ChkSonic
000121B0 5368 0030                  		subq.w	#1,$30(a0)	; subtract 1 from time delay
000121B4 6A00                       		bpl.s	locret_11A96	; if time remains, branch
000121B6 5428 0025                  		addq.b	#2,$25(a0)
000121BA 317C 05FF 0030             		move.w	#1535,$30(a0)	; set time delay to 25 seconds
000121C0 317C 0010 0010             		move.w	#$10,$10(a0)
000121C6 117C 0001 001C             		move.b	#1,$1C(a0)
000121CC 0868 0000 0022             		bchg	#0,$22(a0)
000121D2 6700                       		beq.s	locret_11A96
000121D4 4468 0010                  		neg.w	$10(a0)		; change direction
000121D8                            
000121D8                            locret_11A96:
000121D8 4E75                       		rts	
000121DA                            ; ===========================================================================
000121DA                            
000121DA                            Obj5F_Wait:				; XREF: Obj5F_Index2
000121DA 6100 0000                  		bsr.w	Obj5F_ChkSonic
000121DE 5368 0030                  		subq.w	#1,$30(a0)	; subtract 1 from time delay
000121E2 6B00                       		bmi.s	loc_11AA8
000121E4 6100 BB56                  		bsr.w	SpeedToPos
000121E8 4E75                       		rts	
000121EA                            ; ===========================================================================
000121EA                            
000121EA                            loc_11AA8:
000121EA 5528 0025                  		subq.b	#2,$25(a0)
000121EE 317C 00B3 0030             		move.w	#179,$30(a0)	; set time delay to 3 seconds
000121F4 4268 0010                  		clr.w	$10(a0)		; stop walking
000121F8 117C 0000 001C             		move.b	#0,$1C(a0)	; stop animation
000121FE 4E75                       		rts	
00012200                            ; ===========================================================================
00012200                            
00012200                            Obj5F_Explode:				; XREF: Obj5F_Index2
00012200 5368 0030                  		subq.w	#1,$30(a0)
00012204 6A00                       		bpl.s	locret_11AD0
00012206 10BC 003F                  		move.b	#$3F,0(a0)	; change bomb into an explosion
0001220A 117C 0000 0024             		move.b	#0,$24(a0)
00012210                            
00012210                            locret_11AD0:
00012210 4E75                       		rts	
00012212                            ; ===========================================================================
00012212                            
00012212                            Obj5F_ChkSonic:				; XREF: Obj5F_Walk; Obj5F_Wait
00012212 3038 D008                  		move.w	($FFFFD008).w,d0
00012216 9068 0008                  		sub.w	8(a0),d0
0001221A 6400                       		bcc.s	loc_11ADE
0001221C 4440                       		neg.w	d0
0001221E                            
0001221E                            loc_11ADE:
0001221E 0C40 0060                  		cmpi.w	#$60,d0
00012222 6400                       		bcc.s	locret_11B5E
00012224 3038 D00C                  		move.w	($FFFFD00C).w,d0
00012228 9068 000C                  		sub.w	$C(a0),d0
0001222C 6400                       		bcc.s	Obj5F_MakeFuse
0001222E 4440                       		neg.w	d0
00012230                            
00012230                            Obj5F_MakeFuse:
00012230 0C40 0060                  		cmpi.w	#$60,d0
00012234 6400                       		bcc.s	locret_11B5E
00012236 4A78 FE08                  		tst.w	($FFFFFE08).w
0001223A 6600                       		bne.s	locret_11B5E
0001223C 117C 0004 0025             		move.b	#4,$25(a0)
00012242 317C 008F 0030             		move.w	#143,$30(a0)	; set fuse time
00012248 4268 0010                  		clr.w	$10(a0)
0001224C 117C 0002 001C             		move.b	#2,$1C(a0)
00012252 6100 BFAA                  		bsr.w	SingleObjLoad2
00012256 6600                       		bne.s	locret_11B5E
00012258 12BC 005F                  		move.b	#$5F,0(a1)	; load fuse object
0001225C 3368 0008 0008             		move.w	8(a0),8(a1)
00012262 3368 000C 000C             		move.w	$C(a0),$C(a1)
00012268 3368 000C 0034             		move.w	$C(a0),$34(a1)
0001226E 1368 0022 0022             		move.b	$22(a0),$22(a1)
00012274 137C 0004 0028             		move.b	#4,$28(a1)
0001227A 137C 0003 001C             		move.b	#3,$1C(a1)
00012280 337C 0010 0012             		move.w	#$10,$12(a1)
00012286 0828 0001 0022             		btst	#1,$22(a0)
0001228C 6700                       		beq.s	loc_11B54
0001228E 4469 0012                  		neg.w	$12(a1)
00012292                            
00012292                            loc_11B54:
00012292 337C 008F 0030             		move.w	#143,$30(a1)	; set fuse time
00012298 2348 003C                  		move.l	a0,$3C(a1)
0001229C                            
0001229C                            locret_11B5E:
0001229C 4E75                       		rts	
0001229E                            ; ===========================================================================
0001229E                            
0001229E                            Obj5F_Display:				; XREF: Obj5F_Index
0001229E 6100                       		bsr.s	loc_11B70
000122A0 43F9 0000 0000             		lea	(Ani_obj5F).l,a1
000122A6 6100 8B7A                  		bsr.w	AnimateSprite
000122AA 6000 DB5E                  		bra.w	MarkObjGone
000122AE                            ; ===========================================================================
000122AE                            
000122AE                            loc_11B70:
000122AE 5368 0030                  		subq.w	#1,$30(a0)
000122B2 6B00                       		bmi.s	loc_11B7C
000122B4 6100 BA86                  		bsr.w	SpeedToPos
000122B8 4E75                       		rts	
000122BA                            ; ===========================================================================
000122BA                            
000122BA                            loc_11B7C:
000122BA 4268 0030                  		clr.w	$30(a0)
000122BE 4228 0024                  		clr.b	$24(a0)
000122C2 3168 0034 000C             		move.w	$34(a0),$C(a0)
000122C8 7203                       		moveq	#3,d1
000122CA 2248                       		movea.l	a0,a1
000122CC 45F9 0000 0000             		lea	(Obj5F_ShrSpeed).l,a2 ;	load shrapnel speed data
000122D2 6000                       		bra.s	Obj5F_MakeShrap
000122D4                            ; ===========================================================================
000122D4                            
000122D4                            Obj5F_Loop:
000122D4 6100 BF28                  		bsr.w	SingleObjLoad2
000122D8 6600                       		bne.s	loc_11BCE
000122DA                            
000122DA                            Obj5F_MakeShrap:			; XREF: loc_11B7C
000122DA 12BC 005F                  		move.b	#$5F,0(a1)	; load shrapnel	object
000122DE 3368 0008 0008             		move.w	8(a0),8(a1)
000122E4 3368 000C 000C             		move.w	$C(a0),$C(a1)
000122EA 137C 0006 0028             		move.b	#6,$28(a1)
000122F0 137C 0004 001C             		move.b	#4,$1C(a1)
000122F6 335A 0010                  		move.w	(a2)+,$10(a1)
000122FA 335A 0012                  		move.w	(a2)+,$12(a1)
000122FE 137C 0098 0020             		move.b	#$98,$20(a1)
00012304 08E9 0007 0001             		bset	#7,1(a1)
0001230A                            
0001230A                            loc_11BCE:
0001230A 51C9 FFC8                  		dbf	d1,Obj5F_Loop	; repeat 3 more	times
0001230E                            
0001230E 117C 0006 0024             		move.b	#6,$24(a0)
00012314                            
00012314                            Obj5F_End:				; XREF: Obj5F_Index
00012314 6100 BA26                  		bsr.w	SpeedToPos
00012318 0668 0018 0012             		addi.w	#$18,$12(a0)
0001231E 43F9 0000 0000             		lea	(Ani_obj5F).l,a1
00012324 6100 8AFC                  		bsr.w	AnimateSprite
00012328 4A28 0001                  		tst.b	1(a0)
0001232C 6A00 BA70                  		bpl.w	DeleteObject
00012330 6000 BA30                  		bra.w	DisplaySprite
00012334                            ; ===========================================================================
00012334 FE00 FD00 FF00 FE00 0200+  Obj5F_ShrSpeed:	dc.w $FE00, $FD00, $FF00, $FE00, $200, $FD00, $100, $FE00
00012344                            
00012344                            Ani_obj5F:
00012344                            	include "_anim\obj5F.asm"
00012344                            ; ---------------------------------------------------------------------------
00012344                            ; Animation script - Bomb enemy
00012344                            ; ---------------------------------------------------------------------------
00012344 0000                       		dc.w byte_11C12-Ani_obj5F
00012346 0000                       		dc.w byte_11C16-Ani_obj5F
00012348 0000                       		dc.w byte_11C1C-Ani_obj5F
0001234A 0000                       		dc.w byte_11C20-Ani_obj5F
0001234C 0000                       		dc.w byte_11C24-Ani_obj5F
0001234E 1301 00FF                  byte_11C12:	dc.b $13, 1, 0,	$FF
00012352 1305 0403 02FF             byte_11C16:	dc.b $13, 5, 4,	3, 2, $FF
00012358 1307 06FF                  byte_11C1C:	dc.b $13, 7, 6,	$FF
0001235C 0308 09FF                  byte_11C20:	dc.b 3,	8, 9, $FF
00012360 030A 0BFF                  byte_11C24:	dc.b 3,	$A, $B,	$FF
00012364                            		even
00012364                            		even
00012364                            
00012364                            ; ---------------------------------------------------------------------------
00012364                            ; Sprite mappings - walking bomb enemy (SLZ, SBZ)
00012364                            ; ---------------------------------------------------------------------------
00012364                            Map_obj5F:
00012364                            	include "_maps\obj5F.asm"
00012364                            ; ---------------------------------------------------------------------------
00012364                            ; Sprite mappings - walking bomb enemy (SLZ, SBZ)
00012364                            ; ---------------------------------------------------------------------------
00012364 0000 0000                  		dc.w byte_11C40-Map_obj5F, byte_11C50-Map_obj5F
00012368 0000 0000                  		dc.w byte_11C60-Map_obj5F, byte_11C70-Map_obj5F
0001236C 0000 0000                  		dc.w byte_11C80-Map_obj5F, byte_11C90-Map_obj5F
00012370 0000 0000                  		dc.w byte_11CA0-Map_obj5F, byte_11CAB-Map_obj5F
00012374 0000 0000                  		dc.w byte_11CB6-Map_obj5F, byte_11CBC-Map_obj5F
00012378 0000 0000                  		dc.w byte_11CC2-Map_obj5F, byte_11CC8-Map_obj5F
0001237C 03                         byte_11C40:	dc.b 3
0001237D F10A 0000 F4               		dc.b $F1, $A, 0, 0, $F4
00012382 0908 0012 F4               		dc.b 9,	8, 0, $12, $F4
00012387 E701 0021 FC               		dc.b $E7, 1, 0,	$21, $FC
0001238C 03                         byte_11C50:	dc.b 3
0001238D F10A 0009 F4               		dc.b $F1, $A, 0, 9, $F4
00012392 0908 0012 F4               		dc.b 9,	8, 0, $12, $F4
00012397 E701 0021 FC               		dc.b $E7, 1, 0,	$21, $FC
0001239C 03                         byte_11C60:	dc.b 3
0001239D F00A 0000 F4               		dc.b $F0, $A, 0, 0, $F4
000123A2 0808 0015 F4               		dc.b 8,	8, 0, $15, $F4
000123A7 E601 0021 FC               		dc.b $E6, 1, 0,	$21, $FC
000123AC 03                         byte_11C70:	dc.b 3
000123AD F10A 0009 F4               		dc.b $F1, $A, 0, 9, $F4
000123B2 0908 0018 F4               		dc.b 9,	8, 0, $18, $F4
000123B7 E701 0021 FC               		dc.b $E7, 1, 0,	$21, $FC
000123BC 03                         byte_11C80:	dc.b 3
000123BD F00A 0000 F4               		dc.b $F0, $A, 0, 0, $F4
000123C2 0808 001B F4               		dc.b 8,	8, 0, $1B, $F4
000123C7 E601 0021 FC               		dc.b $E6, 1, 0,	$21, $FC
000123CC 03                         byte_11C90:	dc.b 3
000123CD F10A 0009 F4               		dc.b $F1, $A, 0, 9, $F4
000123D2 0908 001E F4               		dc.b 9,	8, 0, $1E, $F4
000123D7 E701 0021 FC               		dc.b $E7, 1, 0,	$21, $FC
000123DC 02                         byte_11CA0:	dc.b 2
000123DD F10A 0000 F4               		dc.b $F1, $A, 0, 0, $F4
000123E2 0908 0012 F4               		dc.b 9,	8, 0, $12, $F4
000123E7 02                         byte_11CAB:	dc.b 2
000123E8 F10A 0009 F4               		dc.b $F1, $A, 0, 9, $F4
000123ED 0908 0012 F4               		dc.b 9,	8, 0, $12, $F4
000123F2 01                         byte_11CB6:	dc.b 1			; fuse	(just before it	explodes)
000123F3 E701 0023 FC               		dc.b $E7, 1, 0,	$23, $FC
000123F8 01                         byte_11CBC:	dc.b 1			; fuse
000123F9 E701 0025 FC               		dc.b $E7, 1, 0,	$25, $FC
000123FE 01                         byte_11CC2:	dc.b 1			; fireball (after it exploded)
000123FF FC00 0027 FC               		dc.b $FC, 0, 0,	$27, $FC
00012404 01                         byte_11CC8:	dc.b 1			; fireball
00012405 FC00 0028 FC               		dc.b $FC, 0, 0,	$28, $FC
0001240A                            		even
0001240A                            		even
0001240A                            
0001240A                            ; ===========================================================================
0001240A                            ; ---------------------------------------------------------------------------
0001240A                            ; Object 60 - Orbinaut enemy (LZ, SLZ, SBZ)
0001240A                            ; ---------------------------------------------------------------------------
0001240A                            
0001240A                            Obj60:					; XREF: Obj_Index
0001240A 7000                       		moveq	#0,d0
0001240C 1028 0024                  		move.b	$24(a0),d0
00012410 323B 0000                  		move.w	Obj60_Index(pc,d0.w),d1
00012414 4EFB 1000                  		jmp	Obj60_Index(pc,d1.w)
00012418                            ; ===========================================================================
00012418 0000                       Obj60_Index:	dc.w Obj60_Main-Obj60_Index
0001241A 0000                       		dc.w Obj60_ChkSonic-Obj60_Index
0001241C 0000                       		dc.w Obj60_Display-Obj60_Index
0001241E 0000                       		dc.w Obj60_MoveOrb-Obj60_Index
00012420 0000                       		dc.w Obj60_ChkDel2-Obj60_Index
00012422                            ; ===========================================================================
00012422                            
00012422                            Obj60_Main:				; XREF: Obj60_Index
00012422 217C 0000 0000 0004        		move.l	#Map_obj60,4(a0)
0001242A 317C 0429 0002             		move.w	#$429,2(a0)	; SBZ specific code
00012430 0C38 0005 FE10             		cmpi.b	#5,($FFFFFE10).w ; check if level is SBZ
00012436 6700                       		beq.s	loc_11D02
00012438 317C 2429 0002             		move.w	#$2429,2(a0)	; SLZ specific code
0001243E                            
0001243E                            loc_11D02:
0001243E 0C38 0001 FE10             		cmpi.b	#1,($FFFFFE10).w ; check if level is LZ
00012444 6600                       		bne.s	loc_11D10
00012446 317C 0467 0002             		move.w	#$467,2(a0)	; LZ specific code
0001244C                            
0001244C                            loc_11D10:
0001244C 0028 0004 0001             		ori.b	#4,1(a0)
00012452 117C 0004 0018             		move.b	#4,$18(a0)
00012458 117C 000B 0020             		move.b	#$B,$20(a0)
0001245E 117C 000C 0019             		move.b	#$C,$19(a0)
00012464 7400                       		moveq	#0,d2
00012466 45E8 0037                  		lea	$37(a0),a2
0001246A 264A                       		movea.l	a2,a3
0001246C 524A                       		addq.w	#1,a2
0001246E 7203                       		moveq	#3,d1
00012470                            
00012470                            Obj60_MakeOrbs:
00012470 6100 BD8C                  		bsr.w	SingleObjLoad2
00012474 6600                       		bne.s	loc_11D90
00012476 5213                       		addq.b	#1,(a3)
00012478 3A09                       		move.w	a1,d5
0001247A 0445 D000                  		subi.w	#-$3000,d5
0001247E EC4D                       		lsr.w	#6,d5
00012480 0245 007F                  		andi.w	#$7F,d5
00012484 14C5                       		move.b	d5,(a2)+
00012486 1290                       		move.b	0(a0),0(a1)	; load spiked orb object
00012488 137C 0006 0024             		move.b	#6,$24(a1)
0001248E 2368 0004 0004             		move.l	4(a0),4(a1)
00012494 3368 0002 0002             		move.w	2(a0),2(a1)
0001249A 0029 0004 0001             		ori.b	#4,1(a1)
000124A0 137C 0004 0018             		move.b	#4,$18(a1)
000124A6 137C 0008 0019             		move.b	#8,$19(a1)
000124AC 137C 0003 001A             		move.b	#3,$1A(a1)
000124B2 137C 0098 0020             		move.b	#$98,$20(a1)
000124B8 1342 0026                  		move.b	d2,$26(a1)
000124BC 0602 0040                  		addi.b	#$40,d2
000124C0 2348 003C                  		move.l	a0,$3C(a1)
000124C4 51C9 FFAA                  		dbf	d1,Obj60_MakeOrbs ; repeat sequence 3 more times
000124C8                            
000124C8                            loc_11D90:
000124C8 7001                       		moveq	#1,d0
000124CA 0828 0000 0022             		btst	#0,$22(a0)
000124D0 6700                       		beq.s	Obj60_Move
000124D2 4440                       		neg.w	d0
000124D4                            
000124D4                            Obj60_Move:
000124D4 1140 0036                  		move.b	d0,$36(a0)
000124D8 1168 0028 0024             		move.b	$28(a0),$24(a0)	; if type is 02, skip the firing rountine
000124DE 5428 0024                  		addq.b	#2,$24(a0)
000124E2 317C FFC0 0010             		move.w	#-$40,$10(a0)	; move orbinaut	to the left
000124E8 0828 0000 0022             		btst	#0,$22(a0)	; is orbinaut reversed?
000124EE 6700                       		beq.s	locret_11DBC	; if not, branch
000124F0 4468 0010                  		neg.w	$10(a0)		; move orbinaut	to the right
000124F4                            
000124F4                            locret_11DBC:
000124F4 4E75                       		rts	
000124F6                            ; ===========================================================================
000124F6                            
000124F6                            Obj60_ChkSonic:				; XREF: Obj60_Index
000124F6 3038 D008                  		move.w	($FFFFD008).w,d0
000124FA 9068 0008                  		sub.w	8(a0),d0
000124FE 6400                       		bcc.s	loc_11DCA
00012500 4440                       		neg.w	d0
00012502                            
00012502                            loc_11DCA:
00012502 0C40 00A0                  		cmpi.w	#$A0,d0		; is Sonic within $A0 pixels of	orbinaut?
00012506 6400                       		bcc.s	Obj60_Animate	; if not, branch
00012508 3038 D00C                  		move.w	($FFFFD00C).w,d0
0001250C 9068 000C                  		sub.w	$C(a0),d0
00012510 6400                       		bcc.s	loc_11DDC
00012512 4440                       		neg.w	d0
00012514                            
00012514                            loc_11DDC:
00012514 0C40 0050                  		cmpi.w	#$50,d0		; is Sonic within $50 pixels of	orbinaut?
00012518 6400                       		bcc.s	Obj60_Animate	; if not, branch
0001251A 4A78 FE08                  		tst.w	($FFFFFE08).w	; is debug mode	on?
0001251E 6600                       		bne.s	Obj60_Animate	; if yes, branch
00012520 117C 0001 001C             		move.b	#1,$1C(a0)	; use "angry" animation
00012526                            
00012526                            Obj60_Animate:
00012526 43F9 0000 0000             		lea	(Ani_obj60).l,a1
0001252C 6100 88F4                  		bsr.w	AnimateSprite
00012530 6000 0000                  		bra.w	Obj60_ChkDel
00012534                            ; ===========================================================================
00012534                            
00012534                            Obj60_Display:				; XREF: Obj60_Index
00012534 6100 B806                  		bsr.w	SpeedToPos
00012538                            
00012538                            Obj60_ChkDel:				; XREF: Obj60_Animate
00012538 3028 0008                  		move.w	8(a0),d0
0001253C 0240 FF80                  		andi.w	#$FF80,d0
00012540 3238 F700                  		move.w	($FFFFF700).w,d1
00012544 0441 0080                  		subi.w	#$80,d1
00012548 0241 FF80                  		andi.w	#$FF80,d1
0001254C 9041                       		sub.w	d1,d0
0001254E 0C40 0280                  		cmpi.w	#$280,d0
00012552 6200 0000                  		bhi.w	Obj60_ChkGone
00012556 6000 B80A                  		bra.w	DisplaySprite
0001255A                            ; ===========================================================================
0001255A                            
0001255A                            Obj60_ChkGone:				; XREF: Obj60_ChkDel
0001255A 45F8 FC00                  		lea	($FFFFFC00).w,a2
0001255E 7000                       		moveq	#0,d0
00012560 1028 0023                  		move.b	$23(a0),d0
00012564 6700                       		beq.s	loc_11E34
00012566 08B2 0007 0002             		bclr	#7,2(a2,d0.w)
0001256C                            
0001256C                            loc_11E34:
0001256C 45E8 0037                  		lea	$37(a0),a2
00012570 7400                       		moveq	#0,d2
00012572 141A                       		move.b	(a2)+,d2
00012574 5342                       		subq.w	#1,d2
00012576 6500                       		bcs.s	Obj60_Delete
00012578                            
00012578                            loc_11E40:
00012578 7000                       		moveq	#0,d0
0001257A 101A                       		move.b	(a2)+,d0
0001257C ED48                       		lsl.w	#6,d0
0001257E 0680 00FF D000             		addi.l	#$FFD000,d0
00012584 2240                       		movea.l	d0,a1
00012586 6100 B818                  		bsr.w	DeleteObject2
0001258A 51CA FFEC                  		dbf	d2,loc_11E40
0001258E                            
0001258E                            Obj60_Delete:
0001258E 6000 B80E                  		bra.w	DeleteObject
00012592                            ; ===========================================================================
00012592                            
00012592                            Obj60_MoveOrb:				; XREF: Obj60_Index
00012592 2268 003C                  		movea.l	$3C(a0),a1
00012596 0C11 0060                  		cmpi.b	#$60,0(a1)
0001259A 6600 B802                  		bne.w	DeleteObject
0001259E 0C29 0002 001A             		cmpi.b	#2,$1A(a1)
000125A4 6600                       		bne.s	Obj60_Circle
000125A6 0C28 0040 0026             		cmpi.b	#$40,$26(a0)
000125AC 6600                       		bne.s	Obj60_Circle
000125AE 5428 0024                  		addq.b	#2,$24(a0)
000125B2 5329 0037                  		subq.b	#1,$37(a1)
000125B6 6600                       		bne.s	Obj60_FireOrb
000125B8 5429 0024                  		addq.b	#2,$24(a1)
000125BC                            
000125BC                            Obj60_FireOrb:
000125BC 317C FE00 0010             		move.w	#-$200,$10(a0)	; move orb to the left (quickly)
000125C2 0829 0000 0022             		btst	#0,$22(a1)
000125C8 6700                       		beq.s	Obj60_Display2
000125CA 4468 0010                  		neg.w	$10(a0)
000125CE                            
000125CE                            Obj60_Display2:
000125CE 6000 B792                  		bra.w	DisplaySprite
000125D2                            ; ===========================================================================
000125D2                            
000125D2                            Obj60_Circle:				; XREF: Obj60_MoveOrb
000125D2 1028 0026                  		move.b	$26(a0),d0
000125D6 4EB9 0000 2C64             		jsr	(CalcSine).l
000125DC E841                       		asr.w	#4,d1
000125DE D269 0008                  		add.w	8(a1),d1
000125E2 3141 0008                  		move.w	d1,8(a0)
000125E6 E840                       		asr.w	#4,d0
000125E8 D069 000C                  		add.w	$C(a1),d0
000125EC 3140 000C                  		move.w	d0,$C(a0)
000125F0 1029 0036                  		move.b	$36(a1),d0
000125F4 D128 0026                  		add.b	d0,$26(a0)
000125F8 6000 B768                  		bra.w	DisplaySprite
000125FC                            ; ===========================================================================
000125FC                            
000125FC                            Obj60_ChkDel2:				; XREF: Obj60_Index
000125FC 6100 B73E                  		bsr.w	SpeedToPos
00012600 4A28 0001                  		tst.b	1(a0)
00012604 6A00 B798                  		bpl.w	DeleteObject
00012608 6000 B758                  		bra.w	DisplaySprite
0001260C                            ; ===========================================================================
0001260C                            Ani_obj60:
0001260C                            	include "_anim\obj60.asm"
0001260C                            ; ---------------------------------------------------------------------------
0001260C                            ; Animation script - Orbinaut enemy
0001260C                            ; ---------------------------------------------------------------------------
0001260C 0000                       		dc.w byte_11EDA-Ani_obj60
0001260E 0000                       		dc.w byte_11EDE-Ani_obj60
00012610 0F00 FF00                  byte_11EDA:	dc.b $F, 0, $FF, 0
00012614 0F01 02FE 0100             byte_11EDE:	dc.b $F, 1, 2, $FE, 1, 0
0001261A                            		even
0001261A                            		even
0001261A                            
0001261A                            ; ---------------------------------------------------------------------------
0001261A                            ; Sprite mappings - Orbinaut enemy (LZ,	SLZ, SBZ)
0001261A                            ; ---------------------------------------------------------------------------
0001261A                            Map_obj60:
0001261A                            	include "_maps\obj60.asm"
0001261A                            ; ---------------------------------------------------------------------------
0001261A                            ; Sprite mappings - Orbinaut enemy (LZ,	SLZ, SBZ)
0001261A                            ; ---------------------------------------------------------------------------
0001261A 0000 0000                  		dc.w byte_11EEC-Map_obj60, byte_11EF2-Map_obj60
0001261E 0000 0000                  		dc.w byte_11EF8-Map_obj60, byte_11EFE-Map_obj60
00012622 01                         byte_11EEC:	dc.b 1
00012623 F40A 0000 F4               		dc.b $F4, $A, 0, 0, $F4
00012628 01                         byte_11EF2:	dc.b 1
00012629 F40A 2009 F4               		dc.b $F4, $A, $20, 9, $F4
0001262E 01                         byte_11EF8:	dc.b 1
0001262F F40A 0012 F4               		dc.b $F4, $A, 0, $12, $F4
00012634 01                         byte_11EFE:	dc.b 1
00012635 F805 001B F8               		dc.b $F8, 5, 0,	$1B, $F8
0001263A                            		even
0001263A                            		even
0001263A                            
0001263A                            ; ===========================================================================
0001263A                            ; ---------------------------------------------------------------------------
0001263A                            ; Object 16 - harpoon (LZ)
0001263A                            ; ---------------------------------------------------------------------------
0001263A                            
0001263A                            Obj16:					; XREF: Obj_Index
0001263A 7000                       		moveq	#0,d0
0001263C 1028 0024                  		move.b	$24(a0),d0
00012640 323B 0000                  		move.w	Obj16_Index(pc,d0.w),d1
00012644 4EFB 1000                  		jmp	Obj16_Index(pc,d1.w)
00012648                            ; ===========================================================================
00012648 0000                       Obj16_Index:	dc.w Obj16_Main-Obj16_Index
0001264A 0000                       		dc.w Obj16_Move-Obj16_Index
0001264C 0000                       		dc.w Obj16_Wait-Obj16_Index
0001264E                            ; ===========================================================================
0001264E                            
0001264E                            Obj16_Main:				; XREF: Obj16_Index
0001264E 5428 0024                  		addq.b	#2,$24(a0)
00012652 217C 0000 0000 0004        		move.l	#Map_obj16,4(a0)
0001265A 317C 03CC 0002             		move.w	#$3CC,2(a0)
00012660 0028 0004 0001             		ori.b	#4,1(a0)
00012666 117C 0004 0018             		move.b	#4,$18(a0)
0001266C 1168 0028 001C             		move.b	$28(a0),$1C(a0)
00012672 117C 0014 0019             		move.b	#$14,$19(a0)
00012678 317C 003C 0030             		move.w	#60,$30(a0)
0001267E                            
0001267E                            Obj16_Move:				; XREF: Obj16_Index
0001267E 43F9 0000 0000             		lea	(Ani_obj16).l,a1
00012684 6100 879C                  		bsr.w	AnimateSprite
00012688 7000                       		moveq	#0,d0
0001268A 1028 001A                  		move.b	$1A(a0),d0	; move frame number to d0
0001268E 117B 0000 0020             		move.b	Obj16_Data(pc,d0.w),$20(a0) ; load collision response (based on	d0)
00012694 6000 D774                  		bra.w	MarkObjGone
00012698                            ; ===========================================================================
00012698 9B9C 9D9E 9FA0             Obj16_Data:	dc.b $9B, $9C, $9D, $9E, $9F, $A0
0001269E                            ; ===========================================================================
0001269E                            
0001269E                            Obj16_Wait:				; XREF: Obj16_Index
0001269E 5368 0030                  		subq.w	#1,$30(a0)
000126A2 6A00                       		bpl.s	Obj16_ChkDel
000126A4 317C 003C 0030             		move.w	#60,$30(a0)
000126AA 5528 0024                  		subq.b	#2,$24(a0)	; run "Obj16_Move" subroutine
000126AE 0868 0000 001C             		bchg	#0,$1C(a0)	; reverse animation
000126B4                            
000126B4                            Obj16_ChkDel:
000126B4 6000 D754                  		bra.w	MarkObjGone
000126B8                            ; ===========================================================================
000126B8                            Ani_obj16:
000126B8                            	include "_anim\obj16.asm"
000126B8                            ; ---------------------------------------------------------------------------
000126B8                            ; Animation script - harpoon (LZ)
000126B8                            ; ---------------------------------------------------------------------------
000126B8 0000                       		dc.w byte_11F8A-Ani_obj16
000126BA 0000                       		dc.w byte_11F8E-Ani_obj16
000126BC 0000                       		dc.w byte_11F92-Ani_obj16
000126BE 0000                       		dc.w byte_11F96-Ani_obj16
000126C0 0301 02FC                  byte_11F8A:	dc.b 3,	1, 2, $FC
000126C4 0301 00FC                  byte_11F8E:	dc.b 3,	1, 0, $FC
000126C8 0304 05FC                  byte_11F92:	dc.b 3,	4, 5, $FC
000126CC 0304 03FC                  byte_11F96:	dc.b 3,	4, 3, $FC
000126D0                            		even
000126D0                            		even
000126D0                            
000126D0                            ; ---------------------------------------------------------------------------
000126D0                            ; Sprite mappings - harpoon (LZ)
000126D0                            ; ---------------------------------------------------------------------------
000126D0                            Map_obj16:
000126D0                            	include "_maps\obj16.asm"
000126D0                            ; ---------------------------------------------------------------------------
000126D0                            ; Sprite mappings - harpoon (LZ)
000126D0                            ; ---------------------------------------------------------------------------
000126D0 0000 0000                  		dc.w byte_11FA6-Map_obj16, byte_11FAC-Map_obj16
000126D4 0000 0000                  		dc.w byte_11FB2-Map_obj16, byte_11FBD-Map_obj16
000126D8 0000 0000                  		dc.w byte_11FC3-Map_obj16, byte_11FC9-Map_obj16
000126DC 01                         byte_11FA6:	dc.b 1
000126DD FC04 0000 F8               		dc.b $FC, 4, 0,	0, $F8
000126E2 01                         byte_11FAC:	dc.b 1
000126E3 FC0C 0002 F8               		dc.b $FC, $C, 0, 2, $F8
000126E8 02                         byte_11FB2:	dc.b 2
000126E9 FC08 0006 F8               		dc.b $FC, 8, 0,	6, $F8
000126EE FC08 0003 10               		dc.b $FC, 8, 0,	3, $10
000126F3 01                         byte_11FBD:	dc.b 1
000126F4 F801 0009 FC               		dc.b $F8, 1, 0,	9, $FC
000126F9 01                         byte_11FC3:	dc.b 1
000126FA E803 000B FC               		dc.b $E8, 3, 0,	$B, $FC
000126FF 02                         byte_11FC9:	dc.b 2
00012700 D802 000B FC               		dc.b $D8, 2, 0,	$B, $FC
00012705 F002 000F FC               		dc.b $F0, 2, 0,	$F, $FC
0001270A                            		even
0001270A                            		even
0001270A                            
0001270A                            ; ===========================================================================
0001270A                            ; ---------------------------------------------------------------------------
0001270A                            ; Object 61 - blocks (LZ)
0001270A                            ; ---------------------------------------------------------------------------
0001270A                            
0001270A                            Obj61:					; XREF: Obj_Index
0001270A 7000                       		moveq	#0,d0
0001270C 1028 0024                  		move.b	$24(a0),d0
00012710 323B 0000                  		move.w	Obj61_Index(pc,d0.w),d1
00012714 4EFB 1000                  		jmp	Obj61_Index(pc,d1.w)
00012718                            ; ===========================================================================
00012718 0000                       Obj61_Index:	dc.w Obj61_Main-Obj61_Index
0001271A 0000                       		dc.w Obj61_Action-Obj61_Index
0001271C                            
0001271C 1010                       Obj61_Var:	dc.b $10, $10		; width, height
0001271E 200C                       		dc.b $20, $C
00012720 1010                       		dc.b $10, $10
00012722 1010                       		dc.b $10, $10
00012724                            ; ===========================================================================
00012724                            
00012724                            Obj61_Main:				; XREF: Obj61_Index
00012724 5428 0024                  		addq.b	#2,$24(a0)
00012728 217C 0000 0000 0004        		move.l	#Map_obj61,4(a0)
00012730 317C 43E6 0002             		move.w	#$43E6,2(a0)
00012736 117C 0004 0001             		move.b	#4,1(a0)
0001273C 117C 0003 0018             		move.b	#3,$18(a0)
00012742 7000                       		moveq	#0,d0
00012744 1028 0028                  		move.b	$28(a0),d0
00012748 E648                       		lsr.w	#3,d0
0001274A 0240 000E                  		andi.w	#$E,d0
0001274E 45FB 00CC                  		lea	Obj61_Var(pc,d0.w),a2
00012752 115A 0019                  		move.b	(a2)+,$19(a0)
00012756 1152 0016                  		move.b	(a2),$16(a0)
0001275A E248                       		lsr.w	#1,d0
0001275C 1140 001A                  		move.b	d0,$1A(a0)
00012760 3168 0008 0034             		move.w	8(a0),$34(a0)
00012766 3168 000C 0030             		move.w	$C(a0),$30(a0)
0001276C 1028 0028                  		move.b	$28(a0),d0
00012770 0200 000F                  		andi.b	#$F,d0
00012774 6700                       		beq.s	Obj61_Action
00012776 0C00 0007                  		cmpi.b	#7,d0
0001277A 6700                       		beq.s	Obj61_Action
0001277C 117C 0001 0038             		move.b	#1,$38(a0)
00012782                            
00012782                            Obj61_Action:				; XREF: Obj61_Index
00012782 3F28 0008                  		move.w	8(a0),-(sp)
00012786 7000                       		moveq	#0,d0
00012788 1028 0028                  		move.b	$28(a0),d0
0001278C 0240 000F                  		andi.w	#$F,d0
00012790 D040                       		add.w	d0,d0
00012792 323B 0000                  		move.w	Obj61_TypeIndex(pc,d0.w),d1
00012796 4EBB 1000                  		jsr	Obj61_TypeIndex(pc,d1.w)
0001279A 381F                       		move.w	(sp)+,d4
0001279C 4A28 0001                  		tst.b	1(a0)
000127A0 6A00                       		bpl.s	Obj61_ChkDel
000127A2 7200                       		moveq	#0,d1
000127A4 1228 0019                  		move.b	$19(a0),d1
000127A8 0641 000B                  		addi.w	#$B,d1
000127AC 7400                       		moveq	#0,d2
000127AE 1428 0016                  		move.b	$16(a0),d2
000127B2 3602                       		move.w	d2,d3
000127B4 5243                       		addq.w	#1,d3
000127B6 6100 D97A                  		bsr.w	SolidObject
000127BA 1144 003F                  		move.b	d4,$3F(a0)
000127BE 6100 0000                  		bsr.w	loc_12180
000127C2                            
000127C2                            Obj61_ChkDel:
000127C2 3028 0034                  		move.w	$34(a0),d0
000127C6 0240 FF80                  		andi.w	#$FF80,d0
000127CA 3238 F700                  		move.w	($FFFFF700).w,d1
000127CE 0441 0080                  		subi.w	#$80,d1
000127D2 0241 FF80                  		andi.w	#$FF80,d1
000127D6 9041                       		sub.w	d1,d0
000127D8 0C40 0280                  		cmpi.w	#$280,d0
000127DC 6200 B5C0                  		bhi.w	DeleteObject
000127E0 6000 B580                  		bra.w	DisplaySprite
000127E4                            ; ===========================================================================
000127E4 0000 0000                  Obj61_TypeIndex:dc.w Obj61_Type00-Obj61_TypeIndex, Obj61_Type01-Obj61_TypeIndex
000127E8 0000 0000                  		dc.w Obj61_Type02-Obj61_TypeIndex, Obj61_Type01-Obj61_TypeIndex
000127EC 0000 0000                  		dc.w Obj61_Type04-Obj61_TypeIndex, Obj61_Type05-Obj61_TypeIndex
000127F0 0000 0000                  		dc.w Obj61_Type02-Obj61_TypeIndex, Obj61_Type07-Obj61_TypeIndex
000127F4                            ; ===========================================================================
000127F4                            
000127F4                            Obj61_Type00:				; XREF: Obj61_TypeIndex
000127F4 4E75                       		rts	
000127F6                            ; ===========================================================================
000127F6                            
000127F6                            Obj61_Type01:				; XREF: Obj61_TypeIndex
000127F6 4A68 0036                  		tst.w	$36(a0)		; is Sonic standing on the object?
000127FA 6600                       		bne.s	loc_120D6	; if yes, branch
000127FC 0828 0003 0022             		btst	#3,$22(a0)
00012802 6700                       		beq.s	locret_120D4
00012804 317C 001E 0036             		move.w	#30,$36(a0)	; wait for ยซ second
0001280A                            
0001280A                            locret_120D4:
0001280A 4E75                       		rts	
0001280C                            ; ===========================================================================
0001280C                            
0001280C                            loc_120D6:
0001280C 5368 0036                  		subq.w	#1,$36(a0)	; subtract 1 from waiting time
00012810 66F8                       		bne.s	locret_120D4	; if time remains, branch
00012812 5228 0028                  		addq.b	#1,$28(a0)	; add 1	to type
00012816 4228 0038                  		clr.b	$38(a0)
0001281A 4E75                       		rts	
0001281C                            ; ===========================================================================
0001281C                            
0001281C                            Obj61_Type02:				; XREF: Obj61_TypeIndex
0001281C 6100 B51E                  		bsr.w	SpeedToPos
00012820 5068 0012                  		addq.w	#8,$12(a0)	; make object fall
00012824 6100 0000                  		bsr.w	ObjHitFloor
00012828 4A41                       		tst.w	d1
0001282A 6A00 0000                  		bpl.w	locret_12106
0001282E 5241                       		addq.w	#1,d1
00012830 D368 000C                  		add.w	d1,$C(a0)
00012834 4268 0012                  		clr.w	$12(a0)		; stop when it touches the floor
00012838 4228 0028                  		clr.b	$28(a0)		; set type to 00 (non-moving type)
0001283C                            
0001283C                            locret_12106:
0001283C 4E75                       		rts	
0001283E                            ; ===========================================================================
0001283E                            
0001283E                            Obj61_Type04:				; XREF: Obj61_TypeIndex
0001283E 6100 B4FC                  		bsr.w	SpeedToPos
00012842 5168 0012                  		subq.w	#8,$12(a0)	; make object rise
00012846 6100 0000                  		bsr.w	ObjHitCeiling
0001284A 4A41                       		tst.w	d1
0001284C 6A00 0000                  		bpl.w	locret_12126
00012850 9368 000C                  		sub.w	d1,$C(a0)
00012854 4268 0012                  		clr.w	$12(a0)		; stop when it touches the ceiling
00012858 4228 0028                  		clr.b	$28(a0)		; set type to 00 (non-moving type)
0001285C                            
0001285C                            locret_12126:
0001285C 4E75                       		rts	
0001285E                            ; ===========================================================================
0001285E                            
0001285E                            Obj61_Type05:				; XREF: Obj61_TypeIndex
0001285E 0C28 0001 003F             		cmpi.b	#1,$3F(a0)	; is Sonic touching the	object?
00012864 6600                       		bne.s	locret_12138	; if not, branch
00012866 5228 0028                  		addq.b	#1,$28(a0)	; if yes, add 1	to type
0001286A 4228 0038                  		clr.b	$38(a0)
0001286E                            
0001286E                            locret_12138:
0001286E 4E75                       		rts	
00012870                            ; ===========================================================================
00012870                            
00012870                            Obj61_Type07:				; XREF: Obj61_TypeIndex
00012870 3038 F646                  		move.w	($FFFFF646).w,d0
00012874 9068 000C                  		sub.w	$C(a0),d0
00012878 6700                       		beq.s	locret_1217E
0001287A 6400                       		bcc.s	loc_12162
0001287C 0C40 FFFE                  		cmpi.w	#-2,d0
00012880 6C00                       		bge.s	loc_1214E
00012882 70FE                       		moveq	#-2,d0
00012884                            
00012884                            loc_1214E:
00012884 D168 000C                  		add.w	d0,$C(a0)	; make the block rise with water level
00012888 6100 0000                  		bsr.w	ObjHitCeiling
0001288C 4A41                       		tst.w	d1
0001288E 6A00 0000                  		bpl.w	locret_12160
00012892 9368 000C                  		sub.w	d1,$C(a0)
00012896                            
00012896                            locret_12160:
00012896 4E75                       		rts	
00012898                            ; ===========================================================================
00012898                            
00012898                            loc_12162:				; XREF: Obj61_Type07
00012898 0C40 0002                  		cmpi.w	#2,d0
0001289C 6F00                       		ble.s	loc_1216A
0001289E 7002                       		moveq	#2,d0
000128A0                            
000128A0                            loc_1216A:
000128A0 D168 000C                  		add.w	d0,$C(a0)	; make the block sink with water level
000128A4 6100 0000                  		bsr.w	ObjHitFloor
000128A8 4A41                       		tst.w	d1
000128AA 6A00 0000                  		bpl.w	locret_1217E
000128AE 5241                       		addq.w	#1,d1
000128B0 D368 000C                  		add.w	d1,$C(a0)
000128B4                            
000128B4                            locret_1217E:
000128B4 4E75                       		rts	
000128B6                            ; ===========================================================================
000128B6                            
000128B6                            loc_12180:				; XREF: Obj61_Action
000128B6 4A28 0038                  		tst.b	$38(a0)
000128BA 6700                       		beq.s	locret_121C0
000128BC 0828 0003 0022             		btst	#3,$22(a0)
000128C2 6600                       		bne.s	loc_1219A
000128C4 4A28 003E                  		tst.b	$3E(a0)
000128C8 6700                       		beq.s	locret_121C0
000128CA 5928 003E                  		subq.b	#4,$3E(a0)
000128CE 6000                       		bra.s	loc_121A6
000128D0                            ; ===========================================================================
000128D0                            
000128D0                            loc_1219A:
000128D0 0C28 0040 003E             		cmpi.b	#$40,$3E(a0)
000128D6 6700                       		beq.s	locret_121C0
000128D8 5828 003E                  		addq.b	#4,$3E(a0)
000128DC                            
000128DC                            loc_121A6:
000128DC 1028 003E                  		move.b	$3E(a0),d0
000128E0 4EB9 0000 2C64             		jsr	(CalcSine).l
000128E6 323C 0400                  		move.w	#$400,d1
000128EA C1C1                       		muls.w	d1,d0
000128EC 4840                       		swap	d0
000128EE D068 0030                  		add.w	$30(a0),d0
000128F2 3140 000C                  		move.w	d0,$C(a0)
000128F6                            
000128F6                            locret_121C0:
000128F6 4E75                       		rts	
000128F8                            ; ===========================================================================
000128F8                            ; ---------------------------------------------------------------------------
000128F8                            ; Sprite mappings - blocks (LZ)
000128F8                            ; ---------------------------------------------------------------------------
000128F8                            Map_obj61:
000128F8                            	include "_maps\obj61.asm"
000128F8                            ; ---------------------------------------------------------------------------
000128F8                            ; Sprite mappings - blocks (LZ)
000128F8                            ; ---------------------------------------------------------------------------
000128F8 0000 0000                  		dc.w byte_121CA-Map_obj61, byte_121D0-Map_obj61
000128FC 0000 0000                  		dc.w byte_121DB-Map_obj61, byte_121E1-Map_obj61
00012900 01                         byte_121CA:	dc.b 1
00012901 F00F 0000 F0               		dc.b $F0, $F, 0, 0, $F0
00012906 02                         byte_121D0:	dc.b 2
00012907 F40E 0069 E0               		dc.b $F4, $E, 0, $69, $E0
0001290C F40E 0075 00               		dc.b $F4, $E, 0, $75, 0
00012911 01                         byte_121DB:	dc.b 1
00012912 F00F 011A F0               		dc.b $F0, $F, 1, $1A, $F0
00012917 01                         byte_121E1:	dc.b 1
00012918 F00F FDFA F0               		dc.b $F0, $F, $FD, $FA,	$F0
0001291E 00                         		even
0001291E 00                         		even
0001291E                            
0001291E                            ; ===========================================================================
0001291E                            ; ---------------------------------------------------------------------------
0001291E                            ; Object 62 - gargoyle head (LZ)
0001291E                            ; ---------------------------------------------------------------------------
0001291E                            
0001291E                            Obj62:					; XREF: Obj_Index
0001291E 7000                       		moveq	#0,d0
00012920 1028 0024                  		move.b	$24(a0),d0
00012924 323B 0000                  		move.w	Obj62_Index(pc,d0.w),d1
00012928 4EBB 1000                  		jsr	Obj62_Index(pc,d1.w)
0001292C 6000 D4DC                  		bra.w	MarkObjGone
00012930                            ; ===========================================================================
00012930 0000                       Obj62_Index:	dc.w Obj62_Main-Obj62_Index
00012932 0000                       		dc.w Obj62_MakeFire-Obj62_Index
00012934 0000                       		dc.w Obj62_FireBall-Obj62_Index
00012936 0000                       		dc.w Obj62_AniFire-Obj62_Index
00012938                            
00012938 1E3C 5A78 96B4 D2F0        Obj62_SpitRate:	dc.b 30, 60, 90, 120, 150, 180,	210, 240
00012940                            ; ===========================================================================
00012940                            
00012940                            Obj62_Main:				; XREF: Obj62_Index
00012940 5428 0024                  		addq.b	#2,$24(a0)
00012944 217C 0000 0000 0004        		move.l	#Map_obj62,4(a0)
0001294C 317C 42E9 0002             		move.w	#$42E9,2(a0)
00012952 0028 0004 0001             		ori.b	#4,1(a0)
00012958 117C 0003 0018             		move.b	#3,$18(a0)
0001295E 117C 0010 0019             		move.b	#$10,$19(a0)
00012964 1028 0028                  		move.b	$28(a0),d0	; get object type
00012968 0240 000F                  		andi.w	#$F,d0		; read only the	2nd digit
0001296C 117B 00CA 001F             		move.b	Obj62_SpitRate(pc,d0.w),$1F(a0)	; set fireball spit rate
00012972 1168 001F 001E             		move.b	$1F(a0),$1E(a0)
00012978 0228 000F 0028             		andi.b	#$F,$28(a0)
0001297E                            
0001297E                            Obj62_MakeFire:				; XREF: Obj62_Index
0001297E 5328 001E                  		subq.b	#1,$1E(a0)
00012982 6600                       		bne.s	Obj62_NoFire
00012984 1168 001F 001E             		move.b	$1F(a0),$1E(a0)
0001298A 6100 B650                  		bsr.w	ChkObjOnScreen
0001298E 6600                       		bne.s	Obj62_NoFire
00012990 6100 B856                  		bsr.w	SingleObjLoad
00012994 6600                       		bne.s	Obj62_NoFire
00012996 12BC 0062                  		move.b	#$62,0(a1)	; load fireball	object
0001299A 5829 0024                  		addq.b	#4,$24(a1)
0001299E 3368 0008 0008             		move.w	8(a0),8(a1)
000129A4 3368 000C 000C             		move.w	$C(a0),$C(a1)
000129AA 1368 0001 0001             		move.b	1(a0),1(a1)
000129B0 1368 0022 0022             		move.b	$22(a0),$22(a1)
000129B6                            
000129B6                            Obj62_NoFire:
000129B6 4E75                       		rts	
000129B8                            ; ===========================================================================
000129B8                            
000129B8                            Obj62_FireBall:				; XREF: Obj62_Index
000129B8 5428 0024                  		addq.b	#2,$24(a0)
000129BC 117C 0008 0016             		move.b	#8,$16(a0)
000129C2 117C 0008 0017             		move.b	#8,$17(a0)
000129C8 217C 0000 0000 0004        		move.l	#Map_obj62,4(a0)
000129D0 317C 02E9 0002             		move.w	#$2E9,2(a0)
000129D6 0028 0004 0001             		ori.b	#4,1(a0)
000129DC 117C 0004 0018             		move.b	#4,$18(a0)
000129E2 117C 0098 0020             		move.b	#$98,$20(a0)
000129E8 117C 0008 0019             		move.b	#8,$19(a0)
000129EE 117C 0002 001A             		move.b	#2,$1A(a0)
000129F4 5068 000C                  		addq.w	#8,$C(a0)
000129F8 317C 0200 0010             		move.w	#$200,$10(a0)
000129FE 0828 0000 0022             		btst	#0,$22(a0)
00012A04 6600                       		bne.s	Obj62_Sound
00012A06 4468 0010                  		neg.w	$10(a0)
00012A0A                            
00012A0A                            Obj62_Sound:
00012A0A 303C 00AE                  		move.w	#$AE,d0
00012A0E 4EB9 0000 15C0             		jsr	(PlaySound_Special).l ;	play lava ball sound
00012A14                            
00012A14                            Obj62_AniFire:				; XREF: Obj62_Index
00012A14 1038 FE05                  		move.b	($FFFFFE05).w,d0
00012A18 0200 0007                  		andi.b	#7,d0
00012A1C 6600                       		bne.s	Obj62_StopFire
00012A1E 0868 0000 001A             		bchg	#0,$1A(a0)	; switch between frame 01 and 02
00012A24                            
00012A24                            Obj62_StopFire:
00012A24 6100 B316                  		bsr.w	SpeedToPos
00012A28 0828 0000 0022             		btst	#0,$22(a0)
00012A2E 6600                       		bne.s	Obj62_StopFire2
00012A30 76F8                       		moveq	#-8,d3
00012A32 6100 0000                  		bsr.w	ObjHitWallLeft
00012A36 4A41                       		tst.w	d1
00012A38 6B00 B364                  		bmi.w	DeleteObject	; delete if the	fireball hits a	wall
00012A3C 4E75                       		rts	
00012A3E                            ; ===========================================================================
00012A3E                            
00012A3E                            Obj62_StopFire2:
00012A3E 7608                       		moveq	#8,d3
00012A40 6100 0000                  		bsr.w	ObjHitWallRight
00012A44 4A41                       		tst.w	d1
00012A46 6B00 B356                  		bmi.w	DeleteObject
00012A4A 4E75                       		rts	
00012A4C                            ; ===========================================================================
00012A4C                            ; ---------------------------------------------------------------------------
00012A4C                            ; Sprite mappings - gargoyle head (LZ)
00012A4C                            ; ---------------------------------------------------------------------------
00012A4C                            Map_obj62:
00012A4C                            	include "_maps\obj62.asm"
00012A4C                            ; ---------------------------------------------------------------------------
00012A4C                            ; Sprite mappings - gargoyle head (LZ)
00012A4C                            ; ---------------------------------------------------------------------------
00012A4C 0000 0000                  		dc.w byte_12320-Map_obj62, byte_12320-Map_obj62
00012A50 0000 0000                  		dc.w byte_12330-Map_obj62, byte_12336-Map_obj62
00012A54 03                         byte_12320:	dc.b 3
00012A55 F004 0000 00               		dc.b $F0, 4, 0,	0, 0
00012A5A F80D 0002 F0               		dc.b $F8, $D, 0, 2, $F0
00012A5F 0808 000A F8               		dc.b 8,	8, 0, $A, $F8
00012A64 01                         byte_12330:	dc.b 1
00012A65 FC04 000D F8               		dc.b $FC, 4, 0,	$D, $F8
00012A6A 01                         byte_12336:	dc.b 1
00012A6B FC04 000F F8               		dc.b $FC, 4, 0,	$F, $F8
00012A70                            		even
00012A70                            		even
00012A70                            
00012A70                            ; ===========================================================================
00012A70                            ; ---------------------------------------------------------------------------
00012A70                            ; Object 63 - platforms	on a conveyor belt (LZ)
00012A70                            ; ---------------------------------------------------------------------------
00012A70                            
00012A70                            Obj63:					; XREF: Obj_Index
00012A70 7000                       		moveq	#0,d0
00012A72 1028 0024                  		move.b	$24(a0),d0
00012A76 323B 0000                  		move.w	Obj63_Index(pc,d0.w),d1
00012A7A 4EBB 1000                  		jsr	Obj63_Index(pc,d1.w)
00012A7E 3028 0030                  		move.w	$30(a0),d0
00012A82 0240 FF80                  		andi.w	#$FF80,d0
00012A86 3238 F700                  		move.w	($FFFFF700).w,d1
00012A8A 0441 0080                  		subi.w	#$80,d1
00012A8E 0241 FF80                  		andi.w	#$FF80,d1
00012A92 9041                       		sub.w	d1,d0
00012A94 0C40 0280                  		cmpi.w	#$280,d0
00012A98 6200                       		bhi.s	loc_1236A
00012A9A                            
00012A9A                            Obj63_Display:				; XREF: loc_1236A
00012A9A 6000 B2C6                  		bra.w	DisplaySprite
00012A9E                            ; ===========================================================================
00012A9E                            
00012A9E                            loc_1236A:				; XREF: Obj63
00012A9E 0C38 0002 FE11             		cmpi.b	#2,($FFFFFE11).w
00012AA4 6600                       		bne.s	loc_12378
00012AA6 0C40 FF80                  		cmpi.w	#-$80,d0
00012AAA 64EE                       		bcc.s	Obj63_Display
00012AAC                            
00012AAC                            loc_12378:
00012AAC 1028 002F                  		move.b	$2F(a0),d0
00012AB0 6A00 B2EC                  		bpl.w	DeleteObject
00012AB4 0240 007F                  		andi.w	#$7F,d0
00012AB8 45F8 F7C1                  		lea	($FFFFF7C1).w,a2
00012ABC 08B2 0000 0000             		bclr	#0,(a2,d0.w)
00012AC2 6000 B2DA                  		bra.w	DeleteObject
00012AC6                            ; ===========================================================================
00012AC6 0000                       Obj63_Index:	dc.w Obj63_Main-Obj63_Index
00012AC8 0000                       		dc.w loc_124B2-Obj63_Index
00012ACA 0000                       		dc.w loc_124C2-Obj63_Index
00012ACC 0000                       		dc.w loc_124DE-Obj63_Index
00012ACE                            ; ===========================================================================
00012ACE                            
00012ACE                            Obj63_Main:				; XREF: Obj63_Index
00012ACE 1028 0028                  		move.b	$28(a0),d0
00012AD2 6B00 0000                  		bmi.w	loc_12460
00012AD6 5428 0024                  		addq.b	#2,$24(a0)
00012ADA 217C 0000 0000 0004        		move.l	#Map_obj63,4(a0)
00012AE2 317C 43F6 0002             		move.w	#$43F6,2(a0)
00012AE8 0028 0004 0001             		ori.b	#4,1(a0)
00012AEE 117C 0010 0019             		move.b	#$10,$19(a0)
00012AF4 117C 0004 0018             		move.b	#4,$18(a0)
00012AFA 0C28 007F 0028             		cmpi.b	#$7F,$28(a0)
00012B00 6600                       		bne.s	loc_123E2
00012B02 5828 0024                  		addq.b	#4,$24(a0)
00012B06 317C 03F6 0002             		move.w	#$3F6,2(a0)
00012B0C 117C 0001 0018             		move.b	#1,$18(a0)
00012B12 6000 0000                  		bra.w	loc_124DE
00012B16                            ; ===========================================================================
00012B16                            
00012B16                            loc_123E2:
00012B16 117C 0004 001A             		move.b	#4,$1A(a0)
00012B1C 7000                       		moveq	#0,d0
00012B1E 1028 0028                  		move.b	$28(a0),d0
00012B22 3200                       		move.w	d0,d1
00012B24 E648                       		lsr.w	#3,d0
00012B26 0240 001E                  		andi.w	#$1E,d0
00012B2A 45FA 0000                  		lea	Obj63_Data(pc),a2
00012B2E D4F2 0000                  		adda.w	(a2,d0.w),a2
00012B32 315A 0038                  		move.w	(a2)+,$38(a0)
00012B36 315A 0030                  		move.w	(a2)+,$30(a0)
00012B3A 214A 003C                  		move.l	a2,$3C(a0)
00012B3E 0241 000F                  		andi.w	#$F,d1
00012B42 E549                       		lsl.w	#2,d1
00012B44 1141 0038                  		move.b	d1,$38(a0)
00012B48 117C 0004 003A             		move.b	#4,$3A(a0)
00012B4E 4A38 F7C0                  		tst.b	($FFFFF7C0).w
00012B52 6700                       		beq.s	loc_1244C
00012B54 117C 0001 003B             		move.b	#1,$3B(a0)
00012B5A 4428 003A                  		neg.b	$3A(a0)
00012B5E 7200                       		moveq	#0,d1
00012B60 1228 0038                  		move.b	$38(a0),d1
00012B64 D228 003A                  		add.b	$3A(a0),d1
00012B68 B228 0039                  		cmp.b	$39(a0),d1
00012B6C 6500                       		bcs.s	loc_12448
00012B6E 1001                       		move.b	d1,d0
00012B70 7200                       		moveq	#0,d1
00012B72 4A00                       		tst.b	d0
00012B74 6A00                       		bpl.s	loc_12448
00012B76 1228 0039                  		move.b	$39(a0),d1
00012B7A 5901                       		subq.b	#4,d1
00012B7C                            
00012B7C                            loc_12448:
00012B7C 1141 0038                  		move.b	d1,$38(a0)
00012B80                            
00012B80                            loc_1244C:
00012B80 3172 1000 0034             		move.w	(a2,d1.w),$34(a0)
00012B86 3172 1002 0036             		move.w	2(a2,d1.w),$36(a0)
00012B8C 6100 0000                  		bsr.w	Obj63_ChangeDir
00012B90 6000 0000                  		bra.w	loc_124B2
00012B94                            ; ===========================================================================
00012B94                            
00012B94                            loc_12460:				; XREF: Obj63_Main
00012B94 1140 002F                  		move.b	d0,$2F(a0)
00012B98 0240 007F                  		andi.w	#$7F,d0
00012B9C 45F8 F7C1                  		lea	($FFFFF7C1).w,a2
00012BA0 08F2 0000 0000             		bset	#0,(a2,d0.w)
00012BA6 6600 B1F6                  		bne.w	DeleteObject
00012BAA D040                       		add.w	d0,d0
00012BAC 0240 001E                  		andi.w	#$1E,d0
00012BB0 0640 0070                  		addi.w	#$70,d0
00012BB4 45F9 0000 0000             		lea	(ObjPos_Index).l,a2
00012BBA D4F2 0000                  		adda.w	(a2,d0.w),a2
00012BBE 321A                       		move.w	(a2)+,d1
00012BC0 2248                       		movea.l	a0,a1
00012BC2 6000                       		bra.s	Obj63_MakePtfms
00012BC4                            ; ===========================================================================
00012BC4                            
00012BC4                            Obj63_Loop:
00012BC4 6100 B622                  		bsr.w	SingleObjLoad
00012BC8 6600                       		bne.s	loc_124AA
00012BCA                            
00012BCA                            Obj63_MakePtfms:			; XREF: loc_12460
00012BCA 12BC 0063                  		move.b	#$63,0(a1)
00012BCE 335A 0008                  		move.w	(a2)+,8(a1)
00012BD2 335A 000C                  		move.w	(a2)+,$C(a1)
00012BD6 301A                       		move.w	(a2)+,d0
00012BD8 1340 0028                  		move.b	d0,$28(a1)
00012BDC                            
00012BDC                            loc_124AA:
00012BDC 51C9 FFE6                  		dbf	d1,Obj63_Loop
00012BE0                            
00012BE0 588F                       		addq.l	#4,sp
00012BE2 4E75                       		rts	
00012BE4                            ; ===========================================================================
00012BE4                            
00012BE4                            loc_124B2:				; XREF: Obj63_Index
00012BE4 7200                       		moveq	#0,d1
00012BE6 1228 0019                  		move.b	$19(a0),d1
00012BEA 4EB9 0000 79EC             		jsr	(PlatformObject).l
00012BF0 6000 0000                  		bra.w	sub_12502
00012BF4                            ; ===========================================================================
00012BF4                            
00012BF4                            loc_124C2:				; XREF: Obj63_Index
00012BF4 7200                       		moveq	#0,d1
00012BF6 1228 0019                  		move.b	$19(a0),d1
00012BFA 4EB9 0000 7B60             		jsr	(ExitPlatform).l
00012C00 3F28 0008                  		move.w	8(a0),-(sp)
00012C04 6100 0000                  		bsr.w	sub_12502
00012C08 341F                       		move.w	(sp)+,d2
00012C0A 4EF9 0000 80CA             		jmp	(MvSonicOnPtfm2).l
00012C10                            ; ===========================================================================
00012C10                            
00012C10                            loc_124DE:				; XREF: Obj63_Index
00012C10 3038 FE04                  		move.w	($FFFFFE04).w,d0
00012C14 0240 0003                  		andi.w	#3,d0
00012C18 6600                       		bne.s	loc_124FC
00012C1A 7201                       		moveq	#1,d1
00012C1C 4A38 F7C0                  		tst.b	($FFFFF7C0).w
00012C20 6700                       		beq.s	loc_124F2
00012C22 4401                       		neg.b	d1
00012C24                            
00012C24                            loc_124F2:
00012C24 D328 001A                  		add.b	d1,$1A(a0)
00012C28 0228 0003 001A             		andi.b	#3,$1A(a0)
00012C2E                            
00012C2E                            loc_124FC:
00012C2E 588F                       		addq.l	#4,sp
00012C30 6000 D1D8                  		bra.w	MarkObjGone
00012C34                            
00012C34                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00012C34                            
00012C34                            
00012C34                            sub_12502:				; XREF: loc_124B2; loc_124C2
00012C34 4A38 F7EE                  		tst.b	($FFFFF7EE).w
00012C38 6700                       		beq.s	loc_12520
00012C3A 4A28 003B                  		tst.b	$3B(a0)
00012C3E 6600                       		bne.s	loc_12520
00012C40 117C 0001 003B             		move.b	#1,$3B(a0)
00012C46 11FC 0001 F7C0             		move.b	#1,($FFFFF7C0).w
00012C4C 4428 003A                  		neg.b	$3A(a0)
00012C50 6000                       		bra.s	loc_12534
00012C52                            ; ===========================================================================
00012C52                            
00012C52                            loc_12520:
00012C52 3028 0008                  		move.w	8(a0),d0
00012C56 B068 0034                  		cmp.w	$34(a0),d0
00012C5A 6600                       		bne.s	loc_1256A
00012C5C 3028 000C                  		move.w	$C(a0),d0
00012C60 B068 0036                  		cmp.w	$36(a0),d0
00012C64 6600                       		bne.s	loc_1256A
00012C66                            
00012C66                            loc_12534:
00012C66 7200                       		moveq	#0,d1
00012C68 1228 0038                  		move.b	$38(a0),d1
00012C6C D228 003A                  		add.b	$3A(a0),d1
00012C70 B228 0039                  		cmp.b	$39(a0),d1
00012C74 6500                       		bcs.s	loc_12552
00012C76 1001                       		move.b	d1,d0
00012C78 7200                       		moveq	#0,d1
00012C7A 4A00                       		tst.b	d0
00012C7C 6A00                       		bpl.s	loc_12552
00012C7E 1228 0039                  		move.b	$39(a0),d1
00012C82 5901                       		subq.b	#4,d1
00012C84                            
00012C84                            loc_12552:
00012C84 1141 0038                  		move.b	d1,$38(a0)
00012C88 2268 003C                  		movea.l	$3C(a0),a1
00012C8C 3171 1000 0034             		move.w	(a1,d1.w),$34(a0)
00012C92 3171 1002 0036             		move.w	2(a1,d1.w),$36(a0)
00012C98 6100 0000                  		bsr.w	Obj63_ChangeDir
00012C9C                            
00012C9C                            loc_1256A:
00012C9C 6100 B09E                  		bsr.w	SpeedToPos
00012CA0 4E75                       		rts	
00012CA2                            ; End of function sub_12502
00012CA2                            
00012CA2                            
00012CA2                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00012CA2                            
00012CA2                            
00012CA2                            Obj63_ChangeDir:			; XREF: loc_123E2; sub_12502
00012CA2 7000                       		moveq	#0,d0
00012CA4 343C FF00                  		move.w	#-$100,d2
00012CA8 3028 0008                  		move.w	8(a0),d0
00012CAC 9068 0034                  		sub.w	$34(a0),d0
00012CB0 6400                       		bcc.s	loc_12584
00012CB2 4440                       		neg.w	d0
00012CB4 4442                       		neg.w	d2
00012CB6                            
00012CB6                            loc_12584:
00012CB6 7200                       		moveq	#0,d1
00012CB8 363C FF00                  		move.w	#-$100,d3
00012CBC 3228 000C                  		move.w	$C(a0),d1
00012CC0 9268 0036                  		sub.w	$36(a0),d1
00012CC4 6400                       		bcc.s	loc_12598
00012CC6 4441                       		neg.w	d1
00012CC8 4443                       		neg.w	d3
00012CCA                            
00012CCA                            loc_12598:
00012CCA B240                       		cmp.w	d0,d1
00012CCC 6500                       		bcs.s	loc_125C2
00012CCE 3028 0008                  		move.w	8(a0),d0
00012CD2 9068 0034                  		sub.w	$34(a0),d0
00012CD6 6700                       		beq.s	loc_125AE
00012CD8 48C0                       		ext.l	d0
00012CDA E180                       		asl.l	#8,d0
00012CDC 81C1                       		divs.w	d1,d0
00012CDE 4440                       		neg.w	d0
00012CE0                            
00012CE0                            loc_125AE:
00012CE0 3140 0010                  		move.w	d0,$10(a0)
00012CE4 3143 0012                  		move.w	d3,$12(a0)
00012CE8 4840                       		swap	d0
00012CEA 3140 000A                  		move.w	d0,$A(a0)
00012CEE 4268 000E                  		clr.w	$E(a0)
00012CF2 4E75                       		rts	
00012CF4                            ; ===========================================================================
00012CF4                            
00012CF4                            loc_125C2:				; XREF: Obj63_ChangeDir
00012CF4 3228 000C                  		move.w	$C(a0),d1
00012CF8 9268 0036                  		sub.w	$36(a0),d1
00012CFC 6700                       		beq.s	loc_125D4
00012CFE 48C1                       		ext.l	d1
00012D00 E181                       		asl.l	#8,d1
00012D02 83C0                       		divs.w	d0,d1
00012D04 4441                       		neg.w	d1
00012D06                            
00012D06                            loc_125D4:
00012D06 3141 0012                  		move.w	d1,$12(a0)
00012D0A 3142 0010                  		move.w	d2,$10(a0)
00012D0E 4841                       		swap	d1
00012D10 3141 000E                  		move.w	d1,$E(a0)
00012D14 4268 000A                  		clr.w	$A(a0)
00012D18 4E75                       		rts	
00012D1A                            ; End of function Obj63_ChangeDir
00012D1A                            
00012D1A                            ; ===========================================================================
00012D1A 0000                       Obj63_Data:	dc.w word_125F4-Obj63_Data
00012D1C 0000                       		dc.w word_12610-Obj63_Data
00012D1E 0000                       		dc.w word_12628-Obj63_Data
00012D20 0000                       		dc.w word_1263C-Obj63_Data
00012D22 0000                       		dc.w word_12650-Obj63_Data
00012D24 0000                       		dc.w word_12668-Obj63_Data
00012D26 0018 1070 1078 021A 10BE+  word_125F4:	dc.w $18, $1070, $1078,	$21A, $10BE, $260, $10BE, $393
00012D36 108C 03C5 1022 0390 1022+  		dc.w $108C, $3C5, $1022, $390, $1022, $244
00012D42 0014 1280 127E 0280 12CE+  word_12610:	dc.w $14, $1280, $127E,	$280, $12CE, $2D0, $12CE, $46E
00012D52 1232 0420 1232 02CC        		dc.w $1232, $420, $1232, $2CC
00012D5A 0010 0D68 0D22 0482 0D22+  word_12628:	dc.w $10, $D68,	$D22, $482, $D22, $5DE,	$DAE, $5DE, $DAE, $482
00012D6E 0010 0DA0 0D62 03A2 0DEE+  word_1263C:	dc.w $10, $DA0,	$D62, $3A2, $DEE, $3A2,	$DEE, $4DE, $D62, $4DE
00012D82 0014 0D00 0CAC 0242 0DDE+  word_12650:	dc.w $14, $D00,	$CAC, $242, $DDE, $242,	$DDE, $3DE, $C52, $3DE,	$C52, $29C
00012D9A 0010 1300 1252 020A 13DE+  word_12668:	dc.w $10, $1300, $1252,	$20A, $13DE, $20A, $13DE, $2BE,	$1252, $2BE
00012DAE                            
00012DAE                            ; ---------------------------------------------------------------------------
00012DAE                            ; Sprite mappings - platforms on a conveyor belt (LZ)
00012DAE                            ; ---------------------------------------------------------------------------
00012DAE                            Map_obj63:
00012DAE                            	include "_maps\obj63.asm"
00012DAE                            ; ---------------------------------------------------------------------------
00012DAE                            ; Sprite mappings - platforms on a conveyor belt (LZ)
00012DAE                            ; ---------------------------------------------------------------------------
00012DAE 0000 0000                  		dc.w byte_12686-Map_obj63, byte_1268C-Map_obj63
00012DB2 0000 0000                  		dc.w byte_12692-Map_obj63, byte_12698-Map_obj63
00012DB6 0000                       		dc.w byte_1269E-Map_obj63
00012DB8 01                         byte_12686:	dc.b 1
00012DB9 F00F 0000 F0               		dc.b $F0, $F, 0, 0, $F0
00012DBE 01                         byte_1268C:	dc.b 1
00012DBF F00F 0010 F0               		dc.b $F0, $F, 0, $10, $F0
00012DC4 01                         byte_12692:	dc.b 1
00012DC5 F00F 0020 F0               		dc.b $F0, $F, 0, $20, $F0
00012DCA 01                         byte_12698:	dc.b 1
00012DCB F00F 0030 F0               		dc.b $F0, $F, 0, $30, $F0
00012DD0 01                         byte_1269E:	dc.b 1
00012DD1 F80D 0040 F0               		dc.b $F8, $D, 0, $40, $F0
00012DD6                            		even
00012DD6                            		even
00012DD6                            
00012DD6                            ; ===========================================================================
00012DD6                            ; ---------------------------------------------------------------------------
00012DD6                            ; Object 64 - bubbles (LZ)
00012DD6                            ; ---------------------------------------------------------------------------
00012DD6                            
00012DD6                            Obj64:					; XREF: Obj_Index
00012DD6 7000                       		moveq	#0,d0
00012DD8 1028 0024                  		move.b	$24(a0),d0
00012DDC 323B 0000                  		move.w	Obj64_Index(pc,d0.w),d1
00012DE0 4EFB 1000                  		jmp	Obj64_Index(pc,d1.w)
00012DE4                            ; ===========================================================================
00012DE4 0000                       Obj64_Index:	dc.w Obj64_Main-Obj64_Index
00012DE6 0000                       		dc.w Obj64_Animate-Obj64_Index
00012DE8 0000                       		dc.w Obj64_ChkWater-Obj64_Index
00012DEA 0000                       		dc.w Obj64_Display2-Obj64_Index
00012DEC 0000                       		dc.w Obj64_Delete3-Obj64_Index
00012DEE 0000                       		dc.w Obj64_BblMaker-Obj64_Index
00012DF0                            ; ===========================================================================
00012DF0                            
00012DF0                            Obj64_Main:				; XREF: Obj64_Index
00012DF0 5428 0024                  		addq.b	#2,$24(a0)
00012DF4 217C 0000 0000 0004        		move.l	#Map_obj64,4(a0)
00012DFC 317C 8348 0002             		move.w	#$8348,2(a0)
00012E02 117C 0084 0001             		move.b	#$84,1(a0)
00012E08 117C 0010 0019             		move.b	#$10,$19(a0)
00012E0E 117C 0001 0018             		move.b	#1,$18(a0)
00012E14 1028 0028                  		move.b	$28(a0),d0	; get object type
00012E18 6A00                       		bpl.s	Obj64_Bubble	; if type is $0-$7F, branch
00012E1A 5028 0024                  		addq.b	#8,$24(a0)
00012E1E 0240 007F                  		andi.w	#$7F,d0		; read only last 7 bits	(deduct	$80)
00012E22 1140 0032                  		move.b	d0,$32(a0)
00012E26 1140 0033                  		move.b	d0,$33(a0)
00012E2A 117C 0006 001C             		move.b	#6,$1C(a0)
00012E30 6000 0000                  		bra.w	Obj64_BblMaker
00012E34                            ; ===========================================================================
00012E34                            
00012E34                            Obj64_Bubble:				; XREF: Obj64_Main
00012E34 1140 001C                  		move.b	d0,$1C(a0)
00012E38 3168 0008 0030             		move.w	8(a0),$30(a0)
00012E3E 317C FF78 0012             		move.w	#-$88,$12(a0)	; float	bubble upwards
00012E44 4EB9 0000 2C3E             		jsr	(RandomNumber).l
00012E4A 1140 0026                  		move.b	d0,$26(a0)
00012E4E                            
00012E4E                            Obj64_Animate:				; XREF: Obj64_Index
00012E4E 43F9 0000 0000             		lea	(Ani_obj64).l,a1
00012E54 4EB9 0000 AE22             		jsr	AnimateSprite
00012E5A 0C28 0006 001A             		cmpi.b	#6,$1A(a0)
00012E60 6600                       		bne.s	Obj64_ChkWater
00012E62 117C 0001 002E             		move.b	#1,$2E(a0)
00012E68                            
00012E68                            Obj64_ChkWater:				; XREF: Obj64_Index
00012E68 3038 F646                  		move.w	($FFFFF646).w,d0
00012E6C B068 000C                  		cmp.w	$C(a0),d0	; is bubble underwater?
00012E70 6500                       		bcs.s	Obj64_Wobble	; if yes, branch
00012E72                            
00012E72                            Obj64_Burst:				; XREF: Obj64_Wobble
00012E72 117C 0006 0024             		move.b	#6,$24(a0)
00012E78 5628 001C                  		addq.b	#3,$1C(a0)	; run "bursting" animation
00012E7C 6000 0000                  		bra.w	Obj64_Display2
00012E80                            ; ===========================================================================
00012E80                            
00012E80                            Obj64_Wobble:				; XREF: Obj64_ChkWater
00012E80 1028 0026                  		move.b	$26(a0),d0
00012E84 5228 0026                  		addq.b	#1,$26(a0)
00012E88 0240 007F                  		andi.w	#$7F,d0
00012E8C 43F9 0000 0000             		lea	(Obj0A_WobbleData).l,a1
00012E92 1031 0000                  		move.b	(a1,d0.w),d0
00012E96 4880                       		ext.w	d0
00012E98 D068 0030                  		add.w	$30(a0),d0
00012E9C 3140 0008                  		move.w	d0,8(a0)	; change bubble's horizontal position
00012EA0 4A28 002E                  		tst.b	$2E(a0)
00012EA4 6700                       		beq.s	Obj64_Display
00012EA6 6100 0000                  		bsr.w	Obj64_ChkSonic	; has Sonic touched the	bubble?
00012EAA 6700                       		beq.s	Obj64_Display	; if not, branch
00012EAC                            
00012EAC 6100 0000                  		bsr.w	ResumeMusic	; cancel countdown music
00012EB0 303C 00AD                  		move.w	#$AD,d0
00012EB4 4EB9 0000 15C0             		jsr	(PlaySound_Special).l ;	play collecting	bubble sound
00012EBA 43F8 D000                  		lea	($FFFFD000).w,a1
00012EBE 4269 0010                  		clr.w	$10(a1)
00012EC2 4269 0012                  		clr.w	$12(a1)
00012EC6 4269 0014                  		clr.w	$14(a1)
00012ECA 137C 0015 001C             		move.b	#$15,$1C(a1)
00012ED0 337C 0023 003E             		move.w	#$23,$3E(a1)
00012ED6 137C 0000 003C             		move.b	#0,$3C(a1)
00012EDC 08A9 0005 0022             		bclr	#5,$22(a1)
00012EE2 08A9 0004 0022             		bclr	#4,$22(a1)
00012EE8 0829 0002 0022             		btst	#2,$22(a1)
00012EEE 6700 FF82                  		beq.w	Obj64_Burst
00012EF2 08A9 0002 0022             		bclr	#2,$22(a1)
00012EF8 137C 0013 0016             		move.b	#$13,$16(a1)
00012EFE 137C 0009 0017             		move.b	#9,$17(a1)
00012F04 5B69 000C                  		subq.w	#5,$C(a1)
00012F08 6000 FF68                  		bra.w	Obj64_Burst
00012F0C                            ; ===========================================================================
00012F0C                            
00012F0C                            Obj64_Display:				; XREF: Obj64_Wobble
00012F0C 6100 AE2E                  		bsr.w	SpeedToPos
00012F10 4A28 0001                  		tst.b	1(a0)
00012F14 6A00                       		bpl.s	Obj64_Delete
00012F16 4EFA AE4A                  		jmp	DisplaySprite
00012F1A                            ; ===========================================================================
00012F1A                            
00012F1A                            Obj64_Delete:
00012F1A 4EFA AE82                  		jmp	DeleteObject
00012F1E                            ; ===========================================================================
00012F1E                            
00012F1E                            Obj64_Display2:				; XREF: Obj64_Index
00012F1E 43F9 0000 0000             		lea	(Ani_obj64).l,a1
00012F24 4EB9 0000 AE22             		jsr	AnimateSprite
00012F2A 4A28 0001                  		tst.b	1(a0)
00012F2E 6A00                       		bpl.s	Obj64_Delete2
00012F30 4EFA AE30                  		jmp	DisplaySprite
00012F34                            ; ===========================================================================
00012F34                            
00012F34                            Obj64_Delete2:
00012F34 4EFA AE68                  		jmp	DeleteObject
00012F38                            ; ===========================================================================
00012F38                            
00012F38                            Obj64_Delete3:				; XREF: Obj64_Index
00012F38 6000 AE64                  		bra.w	DeleteObject
00012F3C                            ; ===========================================================================
00012F3C                            
00012F3C                            Obj64_BblMaker:				; XREF: Obj64_Index
00012F3C 4A68 0036                  		tst.w	$36(a0)
00012F40 6600                       		bne.s	loc_12874
00012F42 3038 F646                  		move.w	($FFFFF646).w,d0
00012F46 B068 000C                  		cmp.w	$C(a0),d0	; is bubble maker underwater?
00012F4A 6400 0000                  		bcc.w	Obj64_ChkDel	; if not, branch
00012F4E 4A28 0001                  		tst.b	1(a0)
00012F52 6A00 0000                  		bpl.w	Obj64_ChkDel
00012F56 5368 0038                  		subq.w	#1,$38(a0)
00012F5A 6A00 0000                  		bpl.w	loc_12914
00012F5E 317C 0001 0036             		move.w	#1,$36(a0)
00012F64                            
00012F64                            loc_1283A:
00012F64 4EB9 0000 2C3E             		jsr	(RandomNumber).l
00012F6A 3200                       		move.w	d0,d1
00012F6C 0240 0007                  		andi.w	#7,d0
00012F70 0C40 0006                  		cmpi.w	#6,d0
00012F74 64EE                       		bcc.s	loc_1283A
00012F76                            
00012F76 1140 0034                  		move.b	d0,$34(a0)
00012F7A 0241 000C                  		andi.w	#$C,d1
00012F7E 43F9 0000 0000             		lea	(Obj64_BblTypes).l,a1
00012F84 D2C1                       		adda.w	d1,a1
00012F86 2149 003C                  		move.l	a1,$3C(a0)
00012F8A 5328 0032                  		subq.b	#1,$32(a0)
00012F8E 6A00                       		bpl.s	loc_12872
00012F90 1168 0033 0032             		move.b	$33(a0),$32(a0)
00012F96 08E8 0007 0036             		bset	#7,$36(a0)
00012F9C                            
00012F9C                            loc_12872:
00012F9C 6000                       		bra.s	loc_1287C
00012F9E                            ; ===========================================================================
00012F9E                            
00012F9E                            loc_12874:				; XREF: Obj64_BblMaker
00012F9E 5368 0038                  		subq.w	#1,$38(a0)
00012FA2 6A00 0000                  		bpl.w	loc_12914
00012FA6                            
00012FA6                            loc_1287C:
00012FA6 4EB9 0000 2C3E             		jsr	(RandomNumber).l
00012FAC 0240 001F                  		andi.w	#$1F,d0
00012FB0 3140 0038                  		move.w	d0,$38(a0)
00012FB4 6100 B232                  		bsr.w	SingleObjLoad
00012FB8 6600                       		bne.s	loc_128F8
00012FBA 12BC 0064                  		move.b	#$64,0(a1)	; load bubble object
00012FBE 3368 0008 0008             		move.w	8(a0),8(a1)
00012FC4 4EB9 0000 2C3E             		jsr	(RandomNumber).l
00012FCA 0240 000F                  		andi.w	#$F,d0
00012FCE 5140                       		subq.w	#8,d0
00012FD0 D169 0008                  		add.w	d0,8(a1)
00012FD4 3368 000C 000C             		move.w	$C(a0),$C(a1)
00012FDA 7000                       		moveq	#0,d0
00012FDC 1028 0034                  		move.b	$34(a0),d0
00012FE0 2468 003C                  		movea.l	$3C(a0),a2
00012FE4 1372 0000 0028             		move.b	(a2,d0.w),$28(a1)
00012FEA 0828 0007 0036             		btst	#7,$36(a0)
00012FF0 6700                       		beq.s	loc_128F8
00012FF2 4EB9 0000 2C3E             		jsr	(RandomNumber).l
00012FF8 0240 0003                  		andi.w	#3,d0
00012FFC 6600                       		bne.s	loc_128E4
00012FFE 08E8 0006 0036             		bset	#6,$36(a0)
00013004 6600                       		bne.s	loc_128F8
00013006 137C 0002 0028             		move.b	#2,$28(a1)
0001300C                            
0001300C                            loc_128E4:
0001300C 4A28 0034                  		tst.b	$34(a0)
00013010 6600                       		bne.s	loc_128F8
00013012 08E8 0006 0036             		bset	#6,$36(a0)
00013018 6600                       		bne.s	loc_128F8
0001301A 137C 0002 0028             		move.b	#2,$28(a1)
00013020                            
00013020                            loc_128F8:
00013020 5328 0034                  		subq.b	#1,$34(a0)
00013024 6A00                       		bpl.s	loc_12914
00013026 4EB9 0000 2C3E             		jsr	(RandomNumber).l
0001302C 0240 007F                  		andi.w	#$7F,d0
00013030 0640 0080                  		addi.w	#$80,d0
00013034 D168 0038                  		add.w	d0,$38(a0)
00013038 4268 0036                  		clr.w	$36(a0)
0001303C                            
0001303C                            loc_12914:
0001303C 43F9 0000 0000             		lea	(Ani_obj64).l,a1
00013042 4EB9 0000 AE22             		jsr	AnimateSprite
00013048                            
00013048                            Obj64_ChkDel:				; XREF: Obj64_BblMaker
00013048 3028 0008                  		move.w	8(a0),d0
0001304C 0240 FF80                  		andi.w	#$FF80,d0
00013050 3238 F700                  		move.w	($FFFFF700).w,d1
00013054 0441 0080                  		subi.w	#$80,d1
00013058 0241 FF80                  		andi.w	#$FF80,d1
0001305C 9041                       		sub.w	d1,d0
0001305E 0C40 0280                  		cmpi.w	#$280,d0
00013062 6200 AD3A                  		bhi.w	DeleteObject
00013066 3038 F646                  		move.w	($FFFFF646).w,d0
0001306A B068 000C                  		cmp.w	$C(a0),d0
0001306E 6500 ACF2                  		bcs.w	DisplaySprite
00013072 4E75                       		rts	
00013074                            ; ===========================================================================
00013074                            ; bubble production sequence
00013074                            
00013074                            ; 0 = small bubble, 1 =	large bubble
00013074                            
00013074 0001 0000 0000 0100 0000+  Obj64_BblTypes:	dc.b 0,	1, 0, 0, 0, 0, 1, 0, 0,	0, 0, 1, 0, 1, 0, 0, 1,	0
00013086                            
00013086                            ; ===========================================================================
00013086                            
00013086                            Obj64_ChkSonic:				; XREF: Obj64_Wobble
00013086 4A38 F7C8                  		tst.b	($FFFFF7C8).w
0001308A 6B00                       		bmi.s	loc_12998
0001308C 43F8 D000                  		lea	($FFFFD000).w,a1
00013090 3029 0008                  		move.w	8(a1),d0
00013094 3228 0008                  		move.w	8(a0),d1
00013098 0441 0010                  		subi.w	#$10,d1
0001309C B240                       		cmp.w	d0,d1
0001309E 6400                       		bcc.s	loc_12998
000130A0 0641 0020                  		addi.w	#$20,d1
000130A4 B240                       		cmp.w	d0,d1
000130A6 6500                       		bcs.s	loc_12998
000130A8 3029 000C                  		move.w	$C(a1),d0
000130AC 3228 000C                  		move.w	$C(a0),d1
000130B0 B240                       		cmp.w	d0,d1
000130B2 6400                       		bcc.s	loc_12998
000130B4 0641 0010                  		addi.w	#$10,d1
000130B8 B240                       		cmp.w	d0,d1
000130BA 6500                       		bcs.s	loc_12998
000130BC 7001                       		moveq	#1,d0
000130BE 4E75                       		rts	
000130C0                            ; ===========================================================================
000130C0                            
000130C0                            loc_12998:
000130C0 7000                       		moveq	#0,d0
000130C2 4E75                       		rts	
000130C4                            ; ===========================================================================
000130C4                            Ani_obj64:
000130C4                            	include "_anim\obj64.asm"
000130C4                            ; ---------------------------------------------------------------------------
000130C4                            ; Animation script - bubbles (LZ)
000130C4                            ; ---------------------------------------------------------------------------
000130C4 0000                       		dc.w byte_129AA-Ani_obj64
000130C6 0000                       		dc.w byte_129B0-Ani_obj64
000130C8 0000                       		dc.w byte_129B6-Ani_obj64
000130CA 0000                       		dc.w byte_129BE-Ani_obj64
000130CC 0000                       		dc.w byte_129BE-Ani_obj64
000130CE 0000                       		dc.w byte_129C0-Ani_obj64
000130D0 0000                       		dc.w byte_129C6-Ani_obj64
000130D2 0E00 0102 FC00             byte_129AA:	dc.b $E, 0, 1, 2, $FC, 0
000130D8 0E01 0203 04FC             byte_129B0:	dc.b $E, 1, 2, 3, 4, $FC
000130DE 0E02 0304 0506 FC00        byte_129B6:	dc.b $E, 2, 3, 4, 5, 6,	$FC, 0
000130E6 04FC                       byte_129BE:	dc.b 4,	$FC
000130E8 0406 0708 FC00             byte_129C0:	dc.b 4,	6, 7, 8, $FC, 0
000130EE 0F13 1415 FF               byte_129C6:	dc.b $F, $13, $14, $15,	$FF
000130F4 00                         		even
000130F4 00                         		even
000130F4                            
000130F4                            ; ---------------------------------------------------------------------------
000130F4                            ; Sprite mappings - bubbles (LZ)
000130F4                            ; ---------------------------------------------------------------------------
000130F4                            Map_obj64:
000130F4                            	include "_maps\obj64.asm"
000130F4                            ; ---------------------------------------------------------------------------
000130F4                            ; Sprite mappings - bubbles (LZ)
000130F4                            ; ---------------------------------------------------------------------------
000130F4 0000 0000                  		dc.w byte_129FA-Map_obj64, byte_12A00-Map_obj64
000130F8 0000 0000                  		dc.w byte_12A06-Map_obj64, byte_12A0C-Map_obj64
000130FC 0000 0000                  		dc.w byte_12A12-Map_obj64, byte_12A18-Map_obj64
00013100 0000 0000                  		dc.w byte_12A1E-Map_obj64, byte_12A24-Map_obj64
00013104 0000 0000                  		dc.w byte_12A39-Map_obj64, byte_12A4E-Map_obj64
00013108 0000 0000                  		dc.w byte_12A54-Map_obj64, byte_12A5A-Map_obj64
0001310C 0000 0000                  		dc.w byte_12A60-Map_obj64, byte_12A66-Map_obj64
00013110 0000 0000                  		dc.w byte_12A6C-Map_obj64, byte_12A72-Map_obj64
00013114 0000 0000                  		dc.w byte_12A78-Map_obj64, byte_12A7E-Map_obj64
00013118 0000 0000                  		dc.w byte_12A84-Map_obj64, byte_12A8A-Map_obj64
0001311C 0000 0000                  		dc.w byte_12A90-Map_obj64, byte_12A96-Map_obj64
00013120 0000                       		dc.w byte_12A9C-Map_obj64
00013122 01                         byte_129FA:	dc.b 1
00013123 FC00 0000 FC               		dc.b $FC, 0, 0,	0, $FC
00013128 01                         byte_12A00:	dc.b 1
00013129 FC00 0001 FC               		dc.b $FC, 0, 0,	1, $FC
0001312E 01                         byte_12A06:	dc.b 1
0001312F FC00 0002 FC               		dc.b $FC, 0, 0,	2, $FC
00013134 01                         byte_12A0C:	dc.b 1
00013135 F805 0003 F8               		dc.b $F8, 5, 0,	3, $F8
0001313A 01                         byte_12A12:	dc.b 1
0001313B F805 0007 F8               		dc.b $F8, 5, 0,	7, $F8
00013140 01                         byte_12A18:	dc.b 1
00013141 F40A 000B F4               		dc.b $F4, $A, 0, $B, $F4
00013146 01                         byte_12A1E:	dc.b 1
00013147 F00F 0014 F0               		dc.b $F0, $F, 0, $14, $F0
0001314C 04                         byte_12A24:	dc.b 4
0001314D F005 0024 F0               		dc.b $F0, 5, 0,	$24, $F0
00013152 F005 0824 00               		dc.b $F0, 5, 8,	$24, 0
00013157 0005 1024 F0               		dc.b 0,	5, $10,	$24, $F0
0001315C 0005 1824 00               		dc.b 0,	5, $18,	$24, 0
00013161 04                         byte_12A39:	dc.b 4
00013162 F005 0028 F0               		dc.b $F0, 5, 0,	$28, $F0
00013167 F005 0828 00               		dc.b $F0, 5, 8,	$28, 0
0001316C 0005 1028 F0               		dc.b 0,	5, $10,	$28, $F0
00013171 0005 1828 00               		dc.b 0,	5, $18,	$28, 0
00013176 01                         byte_12A4E:	dc.b 1
00013177 F406 002C F8               		dc.b $F4, 6, 0,	$2C, $F8
0001317C 01                         byte_12A54:	dc.b 1
0001317D F406 0032 F8               		dc.b $F4, 6, 0,	$32, $F8
00013182 01                         byte_12A5A:	dc.b 1
00013183 F406 0038 F8               		dc.b $F4, 6, 0,	$38, $F8
00013188 01                         byte_12A60:	dc.b 1
00013189 F406 003E F8               		dc.b $F4, 6, 0,	$3E, $F8
0001318E 01                         byte_12A66:	dc.b 1
0001318F F406 2044 F8               		dc.b $F4, 6, $20, $44, $F8
00013194 01                         byte_12A6C:	dc.b 1
00013195 F406 204A F8               		dc.b $F4, 6, $20, $4A, $F8
0001319A 01                         byte_12A72:	dc.b 1
0001319B F406 2050 F8               		dc.b $F4, 6, $20, $50, $F8
000131A0 01                         byte_12A78:	dc.b 1
000131A1 F406 2056 F8               		dc.b $F4, 6, $20, $56, $F8
000131A6 01                         byte_12A7E:	dc.b 1
000131A7 F406 205C F8               		dc.b $F4, 6, $20, $5C, $F8
000131AC 01                         byte_12A84:	dc.b 1
000131AD F406 2062 F8               		dc.b $F4, 6, $20, $62, $F8
000131B2 01                         byte_12A8A:	dc.b 1
000131B3 F805 0068 F8               		dc.b $F8, 5, 0,	$68, $F8
000131B8 01                         byte_12A90:	dc.b 1
000131B9 F805 006C F8               		dc.b $F8, 5, 0,	$6C, $F8
000131BE 01                         byte_12A96:	dc.b 1
000131BF F805 0070 F8               		dc.b $F8, 5, 0,	$70, $F8
000131C4 00                         byte_12A9C:	dc.b 0
000131C6 00                         		even
000131C6 00                         		even
000131C6                            
000131C6                            ; ===========================================================================
000131C6                            ; ---------------------------------------------------------------------------
000131C6                            ; Object 65 - waterfalls (LZ)
000131C6                            ; ---------------------------------------------------------------------------
000131C6                            
000131C6                            Obj65:					; XREF: Obj_Index
000131C6 7000                       		moveq	#0,d0
000131C8 1028 0024                  		move.b	$24(a0),d0
000131CC 323B 0000                  		move.w	Obj65_Index(pc,d0.w),d1
000131D0 4EFB 1000                  		jmp	Obj65_Index(pc,d1.w)
000131D4                            ; ===========================================================================
000131D4 0000                       Obj65_Index:	dc.w Obj65_Main-Obj65_Index
000131D6 0000                       		dc.w Obj65_Animate-Obj65_Index
000131D8 0000                       		dc.w Obj65_ChkDel-Obj65_Index
000131DA 0000                       		dc.w Obj65_FixHeight-Obj65_Index
000131DC 0000                       		dc.w loc_12B36-Obj65_Index
000131DE                            ; ===========================================================================
000131DE                            
000131DE                            Obj65_Main:				; XREF: Obj65_Index
000131DE 5828 0024                  		addq.b	#4,$24(a0)
000131E2 217C 0000 0000 0004        		move.l	#Map_obj65,4(a0)
000131EA 317C 4259 0002             		move.w	#$4259,2(a0)
000131F0 0028 0004 0001             		ori.b	#4,1(a0)
000131F6 117C 0018 0019             		move.b	#$18,$19(a0)
000131FC 117C 0001 0018             		move.b	#1,$18(a0)
00013202 1028 0028                  		move.b	$28(a0),d0	; get object type
00013206 6A00                       		bpl.s	loc_12AE6
00013208 08E8 0007 0002             		bset	#7,2(a0)
0001320E                            
0001320E                            loc_12AE6:
0001320E 0200 000F                  		andi.b	#$F,d0		; read only the	2nd byte
00013212 1140 001A                  		move.b	d0,$1A(a0)	; set frame number
00013216 0C00 0009                  		cmpi.b	#9,d0		; is object type $x9 ?
0001321A 6600                       		bne.s	Obj65_ChkDel	; if not, branch
0001321C 4228 0018                  		clr.b	$18(a0)
00013220 5528 0024                  		subq.b	#2,$24(a0)
00013224 0828 0006 0028             		btst	#6,$28(a0)	; is object type $4x ?
0001322A 6700                       		beq.s	loc_12B0A	; if not, branch
0001322C 117C 0006 0024             		move.b	#6,$24(a0)
00013232                            
00013232                            loc_12B0A:
00013232 0828 0005 0028             		btst	#5,$28(a0)	; is object type $Ax ?
00013238 6700                       		beq.s	Obj65_Animate	; if not, branch
0001323A 117C 0008 0024             		move.b	#8,$24(a0)
00013240                            
00013240                            Obj65_Animate:				; XREF: Obj65_Index
00013240 43F9 0000 0000             		lea	(Ani_obj65).l,a1
00013246 4EB9 0000 AE22             		jsr	AnimateSprite
0001324C                            
0001324C                            Obj65_ChkDel:				; XREF: Obj65_Index
0001324C 6000 CBBC                  		bra.w	MarkObjGone
00013250                            ; ===========================================================================
00013250                            
00013250                            Obj65_FixHeight:			; XREF: Obj65_Index
00013250 3038 F646                  		move.w	($FFFFF646).w,d0
00013254 0440 0010                  		subi.w	#$10,d0
00013258 3140 000C                  		move.w	d0,$C(a0)	; match	object position	to water height
0001325C 60E2                       		bra.s	Obj65_Animate
0001325E                            ; ===========================================================================
0001325E                            
0001325E                            loc_12B36:				; XREF: Obj65_Index
0001325E 08A8 0007 0002             		bclr	#7,2(a0)
00013264 0C38 0007 A506             		cmpi.b	#7,($FFFFA506).w
0001326A 6600                       		bne.s	Obj65_Animate2
0001326C 08E8 0007 0002             		bset	#7,2(a0)
00013272                            
00013272                            Obj65_Animate2:
00013272 60CC                       		bra.s	Obj65_Animate
00013274                            ; ===========================================================================
00013274                            Ani_obj65:
00013274                            	include "_anim\obj65.asm"
00013274                            ; ---------------------------------------------------------------------------
00013274                            ; Animation script - waterfall (LZ)
00013274                            ; ---------------------------------------------------------------------------
00013274 0000                       		dc.w byte_12B4E-Ani_obj65
00013276 0509 0A0B FF               byte_12B4E:	dc.b 5,	9, $A, $B, $FF
0001327C 00                         		even
0001327C 00                         		even
0001327C                            
0001327C                            ; ---------------------------------------------------------------------------
0001327C                            ; Sprite mappings - waterfalls (LZ)
0001327C                            ; ---------------------------------------------------------------------------
0001327C                            Map_obj65:
0001327C                            	include "_maps\obj65.asm"
0001327C                            ; ---------------------------------------------------------------------------
0001327C                            ; Sprite mappings - waterfalls (LZ)
0001327C                            ; ---------------------------------------------------------------------------
0001327C 0000 0000                  		dc.w byte_12B6C-Map_obj65, byte_12B72-Map_obj65
00013280 0000 0000                  		dc.w byte_12B7D-Map_obj65, byte_12B88-Map_obj65
00013284 0000 0000                  		dc.w byte_12B8E-Map_obj65, byte_12B99-Map_obj65
00013288 0000 0000                  		dc.w byte_12B9F-Map_obj65, byte_12BA5-Map_obj65
0001328C 0000 0000                  		dc.w byte_12BAB-Map_obj65, byte_12BB6-Map_obj65
00013290 0000 0000                  		dc.w byte_12BC1-Map_obj65, byte_12BCC-Map_obj65
00013294 01                         byte_12B6C:	dc.b 1
00013295 F007 0000 F8               		dc.b $F0, 7, 0,	0, $F8
0001329A 02                         byte_12B72:	dc.b 2
0001329B F804 0008 FC               		dc.b $F8, 4, 0,	8, $FC
000132A0 0008 000A F4               		dc.b 0,	8, 0, $A, $F4
000132A5 02                         byte_12B7D:	dc.b 2
000132A6 F800 0008 00               		dc.b $F8, 0, 0,	8, 0
000132AB 0004 000D F8               		dc.b 0,	4, 0, $D, $F8
000132B0 01                         byte_12B88:	dc.b 1
000132B1 F801 000F 00               		dc.b $F8, 1, 0,	$F, 0
000132B6 02                         byte_12B8E:	dc.b 2
000132B7 F800 0008 00               		dc.b $F8, 0, 0,	8, 0
000132BC 0004 000D F8               		dc.b 0,	4, 0, $D, $F8
000132C1 01                         byte_12B99:	dc.b 1
000132C2 F801 0011 00               		dc.b $F8, 1, 0,	$11, 0
000132C7 01                         byte_12B9F:	dc.b 1
000132C8 F801 0013 00               		dc.b $F8, 1, 0,	$13, 0
000132CD 01                         byte_12BA5:	dc.b 1
000132CE F007 0015 F8               		dc.b $F0, 7, 0,	$15, $F8
000132D3 02                         byte_12BAB:	dc.b 2
000132D4 F80C 001D F6               		dc.b $F8, $C, 0, $1D, $F6
000132D9 000C 0021 E8               		dc.b 0,	$C, 0, $21, $E8
000132DE 02                         byte_12BB6:	dc.b 2
000132DF F00B 0025 E8               		dc.b $F0, $B, 0, $25, $E8
000132E4 F00B 0031 00               		dc.b $F0, $B, 0, $31, 0
000132E9 02                         byte_12BC1:	dc.b 2
000132EA F00B 003D E8               		dc.b $F0, $B, 0, $3D, $E8
000132EF F00B 0049 00               		dc.b $F0, $B, 0, $49, 0
000132F4 02                         byte_12BCC:	dc.b 2
000132F5 F00B 0055 E8               		dc.b $F0, $B, 0, $55, $E8
000132FA F00B 0061 00               		dc.b $F0, $B, 0, $61, 0
00013300 00                         		even
00013300 00                         		even
00013300                            
00013300                            ; ===========================================================================
00013300                            ; ---------------------------------------------------------------------------
00013300                            ; Object 01 - Sonic
00013300                            ; ---------------------------------------------------------------------------
00013300                            
00013300                            Obj01:					; XREF: Obj_Index
00013300 4A78 FE08                  		tst.w	($FFFFFE08).w	; is debug mode	being used?
00013304 6700                       		beq.s	Obj01_Normal	; if not, branch
00013306 4EF9 0000 0000             		jmp	DebugMode
0001330C                            ; ===========================================================================
0001330C                            
0001330C                            Obj01_Normal:
0001330C 7000                       		moveq	#0,d0
0001330E 1028 0024                  		move.b	$24(a0),d0
00013312 323B 0000                  		move.w	Obj01_Index(pc,d0.w),d1
00013316 4EFB 1000                  		jmp	Obj01_Index(pc,d1.w)
0001331A                            ; ===========================================================================
0001331A 0000                       Obj01_Index:	dc.w Obj01_Main-Obj01_Index
0001331C 0000                       		dc.w Obj01_Control-Obj01_Index
0001331E 0000                       		dc.w Obj01_Hurt-Obj01_Index
00013320 0000                       		dc.w Obj01_Death-Obj01_Index
00013322 0000                       		dc.w Obj01_ResetLevel-Obj01_Index
00013324                            ; ===========================================================================
00013324                            
00013324                            Player_Maps:
00013324 0000 0000                  	dc.l	Map_Sonic
00013328 0000 0000                  	dc.l	Map_Sonic ; gronic
0001332C                            	; insert player mapping here
0001332C                            	
0001332C                            Obj01_Main:				; XREF: Obj01_Index
0001332C 5428 0024                  		addq.b	#2,$24(a0)
00013330 117C 0013 0016             		move.b	#$13,$16(a0)
00013336 117C 0009 0017             		move.b	#9,$17(a0)
0001333C                            		
0001333C 7000                       		moveq	#0,d0
0001333E 1038 FFE8                  		move.b	(v_character),d0
00013342 E548                       		lsl.w	#2,d0
00013344 43FA FFDE                  		lea 	Player_Maps(pc),a1
00013348 2171 0000 0004             		move.l	(a1,d0.w),4(a0)	; load Map patterns
0001334E                            		
0001334E 317C 0780 0002             		move.w	#$780,2(a0)
00013354 117C 0002 0018             		move.b	#2,$18(a0)
0001335A 117C 0018 0019             		move.b	#$18,$19(a0)
00013360 117C 0004 0001             		move.b	#4,1(a0)
00013366 31FC 0600 F760             		move.w	#$600,($FFFFF760).w ; Sonic's top speed
0001336C 31FC 000C F762             		move.w	#$C,($FFFFF762).w ; Sonic's acceleration
00013372 31FC 0080 F764             		move.w	#$80,($FFFFF764).w ; Sonic's deceleration
00013378                            
00013378                            Obj01_Control:				; XREF: Obj01_Index
00013378 4A78 FFFA                  		tst.w	($FFFFFFFA).w	; is debug cheat enabled?
0001337C 6700                       		beq.s	loc_12C58	; if not, branch
0001337E 0838 0004 F605             		btst	#4,($FFFFF605).w ; is button C pressed?
00013384 6700                       		beq.s	loc_12C58	; if not, branch
00013386 31FC 0001 FE08             		move.w	#1,($FFFFFE08).w ; change Sonic	into a ring/item
0001338C 4238 F7CC                  		clr.b	($FFFFF7CC).w
00013390 4E75                       		rts	
00013392                            ; ===========================================================================
00013392                            
00013392                            loc_12C58:
00013392 4A38 F7CC                  		tst.b	($FFFFF7CC).w	; are controls locked?
00013396 6600                       		bne.s	loc_12C64	; if yes, branch
00013398 31F8 F604 F602             		move.w	($FFFFF604).w,($FFFFF602).w ; enable joypad control
0001339E                            
0001339E                            loc_12C64:
0001339E 0838 0000 F7C8             		btst	#0,($FFFFF7C8).w ; are controls	locked?
000133A4 6600                       		bne.s	loc_12C7E	; if yes, branch
000133A6 7000                       		moveq	#0,d0
000133A8 1028 0022                  		move.b	$22(a0),d0
000133AC 0240 0006                  		andi.w	#6,d0
000133B0 323B 0000                  		move.w	Obj01_Modes(pc,d0.w),d1
000133B4 4EBB 1000                  		jsr	Obj01_Modes(pc,d1.w)
000133B8                            
000133B8                            loc_12C7E:
000133B8 6100                       		bsr.s	Sonic_Display
000133BA 6100 0000                  		bsr.w	Sonic_RecordPos
000133BE 6100 0000                  		bsr.w	Sonic_Water
000133C2 1178 F768 0036             		move.b	($FFFFF768).w,$36(a0)
000133C8 1178 F76A 0037             		move.b	($FFFFF76A).w,$37(a0)
000133CE 4A38 F7C7                  		tst.b	($FFFFF7C7).w
000133D2 6700                       		beq.s	loc_12CA6
000133D4 4A28 001C                  		tst.b	$1C(a0)
000133D8 6600                       		bne.s	loc_12CA6
000133DA 1168 001D 001C             		move.b	$1D(a0),$1C(a0)
000133E0                            
000133E0                            loc_12CA6:
000133E0 6100 0000                  		bsr.w	Sonic_Animate
000133E4 4A38 F7C8                  		tst.b	($FFFFF7C8).w
000133E8 6B00                       		bmi.s	loc_12CB6
000133EA 4EB9 0000 0000             		jsr	TouchResponse
000133F0                            
000133F0                            loc_12CB6:
000133F0 6100 0000                  		bsr.w	Sonic_Loops
000133F4 6100 0000                  		bsr.w	LoadSonicDynPLC
000133F8 4E75                       		rts	
000133FA                            ; ===========================================================================
000133FA 0000                       Obj01_Modes:	dc.w Obj01_MdNormal-Obj01_Modes
000133FC 0000                       		dc.w Obj01_MdJump-Obj01_Modes
000133FE 0000                       		dc.w Obj01_MdRoll-Obj01_Modes
00013400 0000                       		dc.w Obj01_MdJump2-Obj01_Modes
00013402                            ; ---------------------------------------------------------------------------
00013402                            ; Music	to play	after invincibility wears off
00013402                            ; ---------------------------------------------------------------------------
00013402                            ; ===========================================================================
00013402                            
00013402                            Sonic_Display:				; XREF: loc_12C7E
00013402 3028 0030                  		move.w	$30(a0),d0
00013406 6700                       		beq.s	Obj01_Display
00013408 5368 0030                  		subq.w	#1,$30(a0)
0001340C E648                       		lsr.w	#3,d0
0001340E 6400                       		bcc.s	Obj01_ChkInvin
00013410                            
00013410                            Obj01_Display:
00013410 4EBA A950                  		jsr	DisplaySprite
00013414                            
00013414                            ; Second part of the NineKode. Play different music on different acts - after invincibility wears off
00013414                             
00013414                            Obj01_ChkInvin:
00013414 4A38 FE2D                  		tst.b	($FFFFFE2D).w	; does Sonic have invincibility?
00013418 6700 0000                  		beq.w	Obj01_ChkShoes	; if not, branch	; change to beq.w
0001341C 4A68 0032                  		tst.w	$32(a0)		; check	time remaining for invinciblity
00013420 6700 0000                  		beq.w	Obj01_ChkShoes	; if no	time remains, branch	; change to beq.w
00013424 5368 0032                  		subq.w	#1,$32(a0)	; subtract 1 from time
00013428 6600 0000                  		bne.w	Obj01_ChkShoes	; change to bne.w
0001342C 4A38 F7AA                  		tst.b	($FFFFF7AA).w
00013430 6600 0000                  		bne.w	Obj01_RmvInvin	; change to bne.w
00013434 0C78 000C FE14             		cmpi.w	#$C,($FFFFFE14).w
0001343A 6500 0000                  		bcs.w	Obj01_RmvInvin	; change to bcs.w
0001343E 7000                       		moveq	#0,d0
00013440 1038 FE10                  		move.b	($FFFFFE10).w,d0
00013444                             
00013444 0C38 0000 FE11             		cmpi.b	#$0,($FFFFFE11).w	; is this act 1?
0001344A 6600                       		bne.s	Obj01_GetBgm2	; if not, branch
0001344C 43F9 0000 3BDE             		lea	(MusicList1).l,a1	; load Music Playlist for Acts 1
00013452 6000                       		bra.s	Obj01_PlayMusic	; go to PlayMusic
00013454                             
00013454                            Obj01_GetBgm2:
00013454 0C38 0001 FE11             		cmpi.b	#$1,($FFFFFE11).w	; is this act 2?
0001345A 6600                       		bne.s	Obj01_GetBgm3	; if not, branch
0001345C 43F9 0000 3BE6             		lea	(MusicList2).l,a1	; load Music Playlist for Acts 2
00013462 6000                       		bra.s	Obj01_PlayMusic	; go to PlayMusic
00013464                             
00013464                            Obj01_GetBgm3:
00013464 0C38 0002 FE11             		cmpi.b	#$2,($FFFFFE11).w	; is this act 3?
0001346A 6600                       		bne.s	Obj01_GetBgm4	; if not, branch
0001346C 43F9 0000 3BEC             		lea	(MusicList3).l,a1	; load Music Playlist for Acts 3
00013472 6000                       		bra.s	Obj01_PlayMusic	; go to PlayMusic
00013474                             
00013474                            Obj01_GetBgm4:
00013474 0C38 0003 FE11             		cmpi.b	#$3,($FFFFFE11).w	; is this act 4?
0001347A 6600                       		bne.s	Obj01_PlayMusic	; if not, branch
0001347C 43F9 0000 3BF2             		lea	(MusicList4).l,a1	; load Music Playlist for Acts 4
00013482                             
00013482                            Obj01_PlayMusic:
00013482 1031 0000                  		move.b	(a1,d0.w),d0
00013486 4EB9 0000 15BA             		jsr	(PlaySound).l	; play normal music
0001348C                             
0001348C                            ; NineKode ends here.
0001348C                            
0001348C                            Obj01_RmvInvin:
0001348C 11FC 0000 FE2D             		move.b	#0,($FFFFFE2D).w ; cancel invincibility
00013492                            
00013492                            Obj01_ChkShoes:
00013492 4A38 FE2E                  		tst.b	($FFFFFE2E).w	; does Sonic have speed	shoes?
00013496 6700                       		beq.s	Obj01_ExitChk	; if not, branch
00013498 4A68 0034                  		tst.w	$34(a0)		; check	time remaining
0001349C 6700                       		beq.s	Obj01_ExitChk
0001349E 5368 0034                  		subq.w	#1,$34(a0)	; subtract 1 from time
000134A2 6600                       		bne.s	Obj01_ExitChk
000134A4 31FC 0600 F760             		move.w	#$600,($FFFFF760).w ; restore Sonic's speed
000134AA 31FC 000C F762             		move.w	#$C,($FFFFF762).w ; restore Sonic's acceleration
000134B0 31FC 0080 F764             		move.w	#$80,($FFFFF764).w ; restore Sonic's deceleration
000134B6 11FC 0000 FE2E             		move.b	#0,($FFFFFE2E).w ; cancel speed	shoes
000134BC 303C 00E3                  		move.w	#$E3,d0
000134C0 4EF9 0000 15BA             		jmp	(PlaySound).l	; run music at normal speed
000134C6                            ; ===========================================================================
000134C6                            
000134C6                            Obj01_ExitChk:
000134C6 4E75                       		rts	
000134C8                            
000134C8                            ; ---------------------------------------------------------------------------
000134C8                            ; Subroutine to	record Sonic's previous positions for invincibility stars
000134C8                            ; ---------------------------------------------------------------------------
000134C8                            
000134C8                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000134C8                            
000134C8                            
000134C8                            Sonic_RecordPos:			; XREF: loc_12C7E; Obj01_Hurt; Obj01_Death
000134C8 3038 F7A8                  		move.w	($FFFFF7A8).w,d0
000134CC 43F8 CB00                  		lea	($FFFFCB00).w,a1
000134D0 43F1 0000                  		lea	(a1,d0.w),a1
000134D4 32E8 0008                  		move.w	8(a0),(a1)+
000134D8 32E8 000C                  		move.w	$C(a0),(a1)+
000134DC 5838 F7A9                  		addq.b	#4,($FFFFF7A9).w
000134E0 4E75                       		rts	
000134E2                            ; End of function Sonic_RecordPos
000134E2                            
000134E2                            ; ---------------------------------------------------------------------------
000134E2                            ; Subroutine for Sonic when he's underwater
000134E2                            ; ---------------------------------------------------------------------------
000134E2                            
000134E2                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000134E2                            
000134E2                            
000134E2                            Sonic_Water:				; XREF: loc_12C7E
000134E2 0C38 0001 FE10             		cmpi.b	#1,($FFFFFE10).w ; is level LZ?
000134E8 6700                       		beq.s	Obj01_InWater	; if yes, branch
000134EA                            
000134EA                            locret_12D80:
000134EA 4E75                       		rts	
000134EC                            ; ===========================================================================
000134EC                            
000134EC                            Obj01_InWater:
000134EC 3038 F646                  		move.w	($FFFFF646).w,d0
000134F0 B068 000C                  		cmp.w	$C(a0),d0	; is Sonic above the water?
000134F4 6C00                       		bge.s	Obj01_OutWater	; if yes, branch
000134F6 08E8 0006 0022             		bset	#6,$22(a0)
000134FC 66EC                       		bne.s	locret_12D80
000134FE 6100 0000                  		bsr.w	ResumeMusic
00013502 11FC 000A D340             		move.b	#$A,($FFFFD340).w ; load bubbles object	from Sonic's mouth
00013508 11FC 0081 D368             		move.b	#$81,($FFFFD368).w
0001350E 31FC 0300 F760             		move.w	#$300,($FFFFF760).w ; change Sonic's top speed
00013514 31FC 0006 F762             		move.w	#6,($FFFFF762).w ; change Sonic's acceleration
0001351A 31FC 0040 F764             		move.w	#$40,($FFFFF764).w ; change Sonic's deceleration
00013520 E0E8 0010                  		asr	$10(a0)
00013524 E0E8 0012                  		asr	$12(a0)
00013528 E0E8 0012                  		asr	$12(a0)
0001352C 67BC                       		beq.s	locret_12D80
0001352E 11FC 0008 D300             		move.b	#8,($FFFFD300).w ; load	splash object
00013534 303C 00AA                  		move.w	#$AA,d0
00013538 4EF9 0000 15C0             		jmp	(PlaySound_Special).l ;	play splash sound
0001353E                            ; ===========================================================================
0001353E                            
0001353E                            Obj01_OutWater:
0001353E 08A8 0006 0022             		bclr	#6,$22(a0)
00013544 67A4                       		beq.s	locret_12D80
00013546 6100 0000                  		bsr.w	ResumeMusic
0001354A 31FC 0600 F760             		move.w	#$600,($FFFFF760).w ; restore Sonic's speed
00013550 31FC 000C F762             		move.w	#$C,($FFFFF762).w ; restore Sonic's acceleration
00013556 31FC 0080 F764             		move.w	#$80,($FFFFF764).w ; restore Sonic's deceleration
0001355C E1E8 0012                  		asl	$12(a0)
00013560 6700 FF88                  		beq.w	locret_12D80
00013564 11FC 0008 D300             		move.b	#8,($FFFFD300).w ; load	splash object
0001356A 0C68 F000 0012             		cmpi.w	#-$1000,$12(a0)
00013570 6E00                       		bgt.s	loc_12E0E
00013572 317C F000 0012             		move.w	#-$1000,$12(a0)	; set maximum speed on leaving water
00013578                            
00013578                            loc_12E0E:
00013578 303C 00AA                  		move.w	#$AA,d0
0001357C 4EF9 0000 15C0             		jmp	(PlaySound_Special).l ;	play splash sound
00013582                            ; End of function Sonic_Water
00013582                            
00013582                            ; ===========================================================================
00013582                            ; ---------------------------------------------------------------------------
00013582                            ; Modes	for controlling	Sonic
00013582                            ; ---------------------------------------------------------------------------
00013582                            
00013582                            Obj01_MdNormal:				; XREF: Obj01_Modes
00013582 6100 0000                  		bsr.w	Sonic_Jump
00013586 6100 0000                  		bsr.w	Sonic_SlopeResist
0001358A 6100 0000                  		bsr.w	Sonic_Move
0001358E 6100 0000                  		bsr.w	Sonic_Roll
00013592 6100 0000                  		bsr.w	Sonic_LevelBound
00013596 4EBA A7A4                  		jsr	SpeedToPos
0001359A 6100 0000                  		bsr.w	Sonic_AnglePos
0001359E 6100 0000                  		bsr.w	Sonic_SlopeRepel
000135A2 4E75                       		rts	
000135A4                            ; ===========================================================================
000135A4                            
000135A4                            Obj01_MdJump:				; XREF: Obj01_Modes
000135A4 6100 0000                  		bsr.w	Sonic_JumpHeight
000135A8 6100 0000                  		bsr.w	Sonic_ChgJumpDir
000135AC 6100 0000                  		bsr.w	Sonic_LevelBound
000135B0 4EBA A75E                  		jsr	ObjectFall
000135B4 0828 0006 0022             		btst	#6,$22(a0)
000135BA 6700                       		beq.s	loc_12E5C
000135BC 0468 0028 0012             		subi.w	#$28,$12(a0)
000135C2                            
000135C2                            loc_12E5C:
000135C2 6100 0000                  		bsr.w	Sonic_JumpAngle
000135C6 6100 0000                  		bsr.w	Sonic_Floor
000135CA 4E75                       		rts	
000135CC                            ; ===========================================================================
000135CC                            
000135CC                            Obj01_MdRoll:				; XREF: Obj01_Modes
000135CC 6100 0000                  		bsr.w	Sonic_Jump
000135D0 6100 0000                  		bsr.w	Sonic_RollRepel
000135D4 6100 0000                  		bsr.w	Sonic_RollSpeed
000135D8 6100 0000                  		bsr.w	Sonic_LevelBound
000135DC 4EBA A75E                  		jsr	SpeedToPos
000135E0 6100 0000                  		bsr.w	Sonic_AnglePos
000135E4 6100 0000                  		bsr.w	Sonic_SlopeRepel
000135E8 4E75                       		rts	
000135EA                            ; ===========================================================================
000135EA                            
000135EA                            Obj01_MdJump2:				; XREF: Obj01_Modes
000135EA 6100 0000                  		bsr.w	Sonic_JumpHeight
000135EE 6100 0000                  		bsr.w	Sonic_ChgJumpDir
000135F2 6100 0000                  		bsr.w	Sonic_LevelBound
000135F6 6100 0000                  		bsr.w	Sonic_AirUnroll
000135FA 4EBA A714                  		jsr	ObjectFall
000135FE 0828 0006 0022             		btst	#6,$22(a0)
00013604 6700                       		beq.s	loc_12EA6
00013606 0468 0028 0012             		subi.w	#$28,$12(a0)
0001360C                            
0001360C                            loc_12EA6:
0001360C 6100 0000                  		bsr.w	Sonic_JumpAngle
00013610 6100 0000                  		bsr.w	Sonic_Floor
00013614 4E75                       		rts	
00013616                            ; ---------------------------------------------------------------------------
00013616                            ; Subroutine to	make Sonic walk/run
00013616                            ; ---------------------------------------------------------------------------
00013616                            
00013616                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00013616                            
00013616                            
00013616                            Sonic_Move:				; XREF: Obj01_MdNormal
00013616 3C38 F760                  		move.w	($FFFFF760).w,d6
0001361A 3A38 F762                  		move.w	($FFFFF762).w,d5
0001361E 3838 F764                  		move.w	($FFFFF764).w,d4
00013622 4A38 F7CA                  		tst.b	($FFFFF7CA).w
00013626 6600 0000                  		bne.w	loc_12FEE
0001362A 4A68 003E                  		tst.w	$3E(a0)
0001362E 6600 0000                  		bne.w	Obj01_ResetScr
00013632 0838 0002 F602             		btst	#2,($FFFFF602).w ; is left being pressed?
00013638 6700                       		beq.s	Obj01_NotLeft	; if not, branch
0001363A 0838 0000 FE2F             		btst	#0,($FFFFFE2F).w	; GMZ: Have we got a reverse control power up?
00013640 6600                       		bne.s	Obj01_MoveRight	; GMZ: If yes, branch
00013642 6100 0000                  		bsr.w	Sonic_MoveLeft
00013646                            
00013646                            Obj01_NotLeft:
00013646 0838 0003 F602             		btst	#3,($FFFFF602).w ; is right being pressed?
0001364C 6700                       		beq.s	Obj01_NotRight	; if not, branch
0001364E 0838 0000 FE2F             		btst	#0,($FFFFFE2F).w	; GMZ: Have we got a reverse control power up?
00013654 6700                       		beq.s	Obj01_MoveRight	; GMZ: If not, branch
00013656 6100 0000                  		bsr.w	Sonic_MoveLeft
0001365A 6000                       		bra.s	Obj01_NotRight
0001365C                            
0001365C                            Obj01_MoveRight:
0001365C 6100 0000                  		bsr.w	Sonic_MoveRight
00013660                            
00013660                            Obj01_NotRight:
00013660 1028 0026                  		move.b	$26(a0),d0
00013664 0600 0020                  		addi.b	#$20,d0
00013668 0200 00C0                  		andi.b	#$C0,d0		; is Sonic on a	slope?
0001366C 6600 0000                  		bne.w	Obj01_ResetScr	; if yes, branch
00013670 4A68 0014                  		tst.w	$14(a0)		; is Sonic moving?
00013674 6600 0000                  		bne.w	Obj01_ResetScr	; if yes, branch
00013678 08A8 0005 0022             		bclr	#5,$22(a0)
0001367E 117C 0005 001C             		move.b	#5,$1C(a0)	; use "standing" animation
00013684 0828 0003 0022             		btst	#3,$22(a0)
0001368A 6700                       		beq.s	Sonic_Balance
0001368C 7000                       		moveq	#0,d0
0001368E 1028 003D                  		move.b	$3D(a0),d0
00013692 ED48                       		lsl.w	#6,d0
00013694 43F8 D000                  		lea	($FFFFD000).w,a1
00013698 43F1 0000                  		lea	(a1,d0.w),a1
0001369C 4A29 0022                  		tst.b	$22(a1)
000136A0 6B00                       		bmi.s	Sonic_LookUp
000136A2 7200                       		moveq	#0,d1
000136A4 1229 0019                  		move.b	$19(a1),d1
000136A8 3401                       		move.w	d1,d2
000136AA D442                       		add.w	d2,d2
000136AC 5942                       		subq.w	#4,d2
000136AE D268 0008                  		add.w	8(a0),d1
000136B2 9269 0008                  		sub.w	8(a1),d1
000136B6 0C41 0004                  		cmpi.w	#4,d1
000136BA 6D00                       		blt.s	loc_12F6A
000136BC B242                       		cmp.w	d2,d1
000136BE 6C00                       		bge.s	loc_12F5A
000136C0 6000                       		bra.s	Sonic_LookUp
000136C2                            ; ===========================================================================
000136C2                            
000136C2                            Sonic_Balance:
000136C2 4EB9 0000 0000             		jsr	ObjHitFloor
000136C8 0C41 000C                  		cmpi.w	#$C,d1
000136CC 6D00                       		blt.s	Sonic_LookUp
000136CE 0C28 0003 0036             		cmpi.b	#3,$36(a0)
000136D4 6600                       		bne.s	loc_12F62
000136D6                            
000136D6                            loc_12F5A:
000136D6 08A8 0000 0022             		bclr	#0,$22(a0)
000136DC 6000                       		bra.s	loc_12F70
000136DE                            ; ===========================================================================
000136DE                            
000136DE                            loc_12F62:
000136DE 0C28 0003 0037             		cmpi.b	#3,$37(a0)
000136E4 6600                       		bne.s	Sonic_LookUp
000136E6                            
000136E6                            loc_12F6A:
000136E6 08E8 0000 0022             		bset	#0,$22(a0)
000136EC                            
000136EC                            loc_12F70:
000136EC 117C 0006 001C             		move.b	#6,$1C(a0)	; use "balancing" animation
000136F2 6000                       		bra.s	Obj01_ResetScr
000136F4                            ; ===========================================================================
000136F4                            
000136F4                            Sonic_LookUp:
000136F4 0838 0000 F602             		btst	#0,($FFFFF602).w ; is up being pressed?
000136FA 6700                       		beq.s	Sonic_Duck	; if not, branch
000136FC 117C 0007 001C             		move.b	#7,$1C(a0)	; use "looking up" animation
00013702 0C78 00C8 F73E             		cmpi.w	#$C8,($FFFFF73E).w
00013708 6700                       		beq.s	loc_12FC2
0001370A 5478 F73E                  		addq.w	#2,($FFFFF73E).w
0001370E 6000                       		bra.s	loc_12FC2
00013710                            ; ===========================================================================
00013710                            
00013710                            Sonic_Duck:
00013710 0838 0001 F602             		btst	#1,($FFFFF602).w ; is down being pressed?
00013716 6700                       		beq.s	Obj01_ResetScr	; if not, branch
00013718 117C 0008 001C             		move.b	#8,$1C(a0)	; use "ducking"	animation
0001371E 0C78 0008 F73E             		cmpi.w	#8,($FFFFF73E).w
00013724 6700                       		beq.s	loc_12FC2
00013726 5578 F73E                  		subq.w	#2,($FFFFF73E).w
0001372A 6000                       		bra.s	loc_12FC2
0001372C                            ; ===========================================================================
0001372C                            
0001372C                            Obj01_ResetScr:
0001372C 0C78 0060 F73E             		cmpi.w	#$60,($FFFFF73E).w ; is	screen in its default position?
00013732 6700                       		beq.s	loc_12FC2	; if yes, branch
00013734 6400                       		bcc.s	loc_12FBE
00013736 5878 F73E                  		addq.w	#4,($FFFFF73E).w ; move	screen back to default
0001373A                            
0001373A                            loc_12FBE:
0001373A 5578 F73E                  		subq.w	#2,($FFFFF73E).w ; move	screen back to default
0001373E                            
0001373E                            loc_12FC2:
0001373E 1038 F602                  		move.b	($FFFFF602).w,d0
00013742 0200 000C                  		andi.b	#$C,d0		; is left/right	pressed?
00013746 6600                       		bne.s	loc_12FEE	; if yes, branch
00013748 3028 0014                  		move.w	$14(a0),d0
0001374C 6700                       		beq.s	loc_12FEE
0001374E 6B00                       		bmi.s	loc_12FE2
00013750 9045                       		sub.w	d5,d0
00013752 6400                       		bcc.s	loc_12FDC
00013754 303C 0000                  		move.w	#0,d0
00013758                            
00013758                            loc_12FDC:
00013758 3140 0014                  		move.w	d0,$14(a0)
0001375C 6000                       		bra.s	loc_12FEE
0001375E                            ; ===========================================================================
0001375E                            
0001375E                            loc_12FE2:
0001375E D045                       		add.w	d5,d0
00013760 6400                       		bcc.s	loc_12FEA
00013762 303C 0000                  		move.w	#0,d0
00013766                            
00013766                            loc_12FEA:
00013766 3140 0014                  		move.w	d0,$14(a0)
0001376A                            
0001376A                            loc_12FEE:
0001376A 1028 0026                  		move.b	$26(a0),d0
0001376E 4EB9 0000 2C64             		jsr	(CalcSine).l
00013774 C3E8 0014                  		muls.w	$14(a0),d1
00013778 E081                       		asr.l	#8,d1
0001377A 3141 0010                  		move.w	d1,$10(a0)
0001377E C1E8 0014                  		muls.w	$14(a0),d0
00013782 E080                       		asr.l	#8,d0
00013784 3140 0012                  		move.w	d0,$12(a0)
00013788                            
00013788                            loc_1300C:
00013788 1028 0026                  		move.b	$26(a0),d0
0001378C 0600 0040                  		addi.b	#$40,d0
00013790 6B00                       		bmi.s	locret_1307C
00013792 123C 0040                  		move.b	#$40,d1
00013796 4A68 0014                  		tst.w	$14(a0)
0001379A 6700                       		beq.s	locret_1307C
0001379C 6B00                       		bmi.s	loc_13024
0001379E 4441                       		neg.w	d1
000137A0                            
000137A0                            loc_13024:
000137A0 1028 0026                  		move.b	$26(a0),d0
000137A4 D001                       		add.b	d1,d0
000137A6 3F00                       		move.w	d0,-(sp)
000137A8 6100 0000                  		bsr.w	Sonic_WalkSpeed
000137AC 301F                       		move.w	(sp)+,d0
000137AE 4A41                       		tst.w	d1
000137B0 6A00                       		bpl.s	locret_1307C
000137B2 E141                       		asl.w	#8,d1
000137B4 0600 0020                  		addi.b	#$20,d0
000137B8 0200 00C0                  		andi.b	#$C0,d0
000137BC 6700                       		beq.s	loc_13078
000137BE 0C00 0040                  		cmpi.b	#$40,d0
000137C2 6700                       		beq.s	loc_13066
000137C4 0C00 0080                  		cmpi.b	#$80,d0
000137C8 6700                       		beq.s	loc_13060
000137CA D368 0010                  		add.w	d1,$10(a0)
000137CE 08E8 0005 0022             		bset	#5,$22(a0)
000137D4 317C 0000 0014             		move.w	#0,$14(a0)
000137DA 4E75                       		rts	
000137DC                            ; ===========================================================================
000137DC                            
000137DC                            loc_13060:
000137DC 9368 0012                  		sub.w	d1,$12(a0)
000137E0 4E75                       		rts	
000137E2                            ; ===========================================================================
000137E2                            
000137E2                            loc_13066:
000137E2 9368 0010                  		sub.w	d1,$10(a0)
000137E6 08E8 0005 0022             		bset	#5,$22(a0)
000137EC 317C 0000 0014             		move.w	#0,$14(a0)
000137F2 4E75                       		rts	
000137F4                            ; ===========================================================================
000137F4                            
000137F4                            loc_13078:
000137F4 D368 0012                  		add.w	d1,$12(a0)
000137F8                            
000137F8                            locret_1307C:
000137F8 4E75                       		rts	
000137FA                            ; End of function Sonic_Move
000137FA                            
000137FA                            
000137FA                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000137FA                            
000137FA                            
000137FA                            Sonic_MoveLeft:				; XREF: Sonic_Move
000137FA 3028 0014                  		move.w	$14(a0),d0
000137FE 6700                       		beq.s	loc_13086
00013800 6A00                       		bpl.s	loc_130B2
00013802                            
00013802                            loc_13086:
00013802 08E8 0000 0022             		bset	#0,$22(a0)
00013808 6600                       		bne.s	loc_1309A
0001380A 08A8 0005 0022             		bclr	#5,$22(a0)
00013810 117C 0001 001D             		move.b	#1,$1D(a0)
00013816                            
00013816                            loc_1309A:
00013816 9045                       		sub.w	d5,d0
00013818 3206                       		move.w	d6,d1
0001381A 4441                       		neg.w	d1
0001381C B041                       		cmp.w	d1,d0
0001381E 6E00                       		bgt.s	loc_130A6
00013820 3001                       		move.w	d1,d0
00013822                            
00013822                            loc_130A6:
00013822 3140 0014                  		move.w	d0,$14(a0)
00013826 117C 0000 001C             		move.b	#0,$1C(a0)	; use walking animation
0001382C 4E75                       		rts	
0001382E                            ; ===========================================================================
0001382E                            
0001382E                            loc_130B2:				; XREF: Sonic_MoveLeft
0001382E 9044                       		sub.w	d4,d0
00013830 6400                       		bcc.s	loc_130BA
00013832 303C FF80                  		move.w	#-$80,d0
00013836                            
00013836                            loc_130BA:
00013836 3140 0014                  		move.w	d0,$14(a0)
0001383A 1028 0026                  		move.b	$26(a0),d0
0001383E 0600 0020                  		addi.b	#$20,d0
00013842 0200 00C0                  		andi.b	#$C0,d0
00013846 6600                       		bne.s	locret_130E8
00013848 0C40 0400                  		cmpi.w	#$400,d0
0001384C 6D00                       		blt.s	locret_130E8
0001384E 117C 000D 001C             		move.b	#$D,$1C(a0)	; use "stopping" animation
00013854 08A8 0000 0022             		bclr	#0,$22(a0)
0001385A 303C 00A4                  		move.w	#$A4,d0
0001385E 4EB9 0000 15C0             		jsr	(PlaySound_Special).l ;	play stopping sound
00013864                            
00013864                            locret_130E8:
00013864 4E75                       		rts	
00013866                            ; End of function Sonic_MoveLeft
00013866                            
00013866                            
00013866                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00013866                            
00013866                            
00013866                            Sonic_MoveRight:			; XREF: Sonic_Move
00013866 3028 0014                  		move.w	$14(a0),d0
0001386A 6B00                       		bmi.s	loc_13118
0001386C 08A8 0000 0022             		bclr	#0,$22(a0)
00013872 6700                       		beq.s	loc_13104
00013874 08A8 0005 0022             		bclr	#5,$22(a0)
0001387A 117C 0001 001D             		move.b	#1,$1D(a0)
00013880                            
00013880                            loc_13104:
00013880 D045                       		add.w	d5,d0
00013882 B046                       		cmp.w	d6,d0
00013884 6D00                       		blt.s	loc_1310C
00013886 3006                       		move.w	d6,d0
00013888                            
00013888                            loc_1310C:
00013888 3140 0014                  		move.w	d0,$14(a0)
0001388C 117C 0000 001C             		move.b	#0,$1C(a0)	; use walking animation
00013892 4E75                       		rts	
00013894                            ; ===========================================================================
00013894                            
00013894                            loc_13118:				; XREF: Sonic_MoveRight
00013894 D044                       		add.w	d4,d0
00013896 6400                       		bcc.s	loc_13120
00013898 303C 0080                  		move.w	#$80,d0
0001389C                            
0001389C                            loc_13120:
0001389C 3140 0014                  		move.w	d0,$14(a0)
000138A0 1028 0026                  		move.b	$26(a0),d0
000138A4 0600 0020                  		addi.b	#$20,d0
000138A8 0200 00C0                  		andi.b	#$C0,d0
000138AC 6600                       		bne.s	locret_1314E
000138AE 0C40 FC00                  		cmpi.w	#-$400,d0
000138B2 6E00                       		bgt.s	locret_1314E
000138B4 117C 000D 001C             		move.b	#$D,$1C(a0)	; use "stopping" animation
000138BA 08E8 0000 0022             		bset	#0,$22(a0)
000138C0 303C 00A4                  		move.w	#$A4,d0
000138C4 4EB9 0000 15C0             		jsr	(PlaySound_Special).l ;	play stopping sound
000138CA                            
000138CA                            locret_1314E:
000138CA 4E75                       		rts	
000138CC                            ; End of function Sonic_MoveRight
000138CC                            
000138CC                            ; ---------------------------------------------------------------------------
000138CC                            ; Subroutine to	change Sonic's speed as he rolls
000138CC                            ; ---------------------------------------------------------------------------
000138CC                            
000138CC                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000138CC                            
000138CC                            
000138CC                            Sonic_RollSpeed:			; XREF: Obj01_MdRoll
000138CC 3C38 F760                  		move.w	($FFFFF760).w,d6
000138D0 E346                       		asl.w	#1,d6
000138D2 3A38 F762                  		move.w	($FFFFF762).w,d5
000138D6 E245                       		asr.w	#1,d5
000138D8 3838 F764                  		move.w	($FFFFF764).w,d4
000138DC E444                       		asr.w	#2,d4
000138DE 4A38 F7CA                  		tst.b	($FFFFF7CA).w
000138E2 6600 0000                  		bne.w	loc_131CC
000138E6 4A68 003E                  		tst.w	$3E(a0)
000138EA 6600                       		bne.s	loc_13188
000138EC 0838 0002 F602             		btst	#2,($FFFFF602).w ; is left being pressed?
000138F2 6700                       		beq.s	loc_1317C	; if not, branch
000138F4 0838 0000 FE2F             		btst	#0,($FFFFFE2F).w	; GMZ: Have we got a reverse control power up?
000138FA 6600                       		bne.s	SonicRS_RollRight	; GMZ: If yes, branch
000138FC 6100 0000                  		bsr.w	Sonic_RollLeft
00013900                            
00013900                            loc_1317C:
00013900 0838 0003 F602             		btst	#3,($FFFFF602).w ; is right being pressed?
00013906 6700                       		beq.s	loc_13188	; if not, branch
00013908 0838 0000 FE2F             		btst	#0,($FFFFFE2F).w	; GMZ: Have we got a reverse control power up?
0001390E 6700                       		beq.s	SonicRS_RollRight	; GMZ: If not, branch
00013910 6100 0000                  		bsr.w	Sonic_RollLeft
00013914 6000                       		bra.s	loc_13188
00013916                            
00013916                            SonicRS_RollRight:
00013916 6100 0000                  		bsr.w	Sonic_RollRight
0001391A                            
0001391A                            loc_13188:
0001391A 3028 0014                  		move.w	$14(a0),d0
0001391E 6700                       		beq.s	loc_131AA
00013920 6B00                       		bmi.s	loc_1319E
00013922 9045                       		sub.w	d5,d0
00013924 6400                       		bcc.s	loc_13198
00013926 303C 0000                  		move.w	#0,d0
0001392A                            
0001392A                            loc_13198:
0001392A 3140 0014                  		move.w	d0,$14(a0)
0001392E 6000                       		bra.s	loc_131AA
00013930                            ; ===========================================================================
00013930                            
00013930                            loc_1319E:				; XREF: Sonic_RollSpeed
00013930 D045                       		add.w	d5,d0
00013932 6400                       		bcc.s	loc_131A6
00013934 303C 0000                  		move.w	#0,d0
00013938                            
00013938                            loc_131A6:
00013938 3140 0014                  		move.w	d0,$14(a0)
0001393C                            
0001393C                            loc_131AA:
0001393C 4A68 0014                  		tst.w	$14(a0)		; is Sonic moving?
00013940 6600                       		bne.s	loc_131CC	; if yes, branch
00013942 08A8 0002 0022             		bclr	#2,$22(a0)
00013948 117C 0013 0016             		move.b	#$13,$16(a0)
0001394E 117C 0009 0017             		move.b	#9,$17(a0)
00013954 117C 0005 001C             		move.b	#5,$1C(a0)	; use "standing" animation
0001395A 5B68 000C                  		subq.w	#5,$C(a0)
0001395E                            
0001395E                            loc_131CC:
0001395E 1028 0026                  		move.b	$26(a0),d0
00013962 4EB9 0000 2C64             		jsr	(CalcSine).l
00013968 C1E8 0014                  		muls.w	$14(a0),d0
0001396C E080                       		asr.l	#8,d0
0001396E 3140 0012                  		move.w	d0,$12(a0)
00013972 C3E8 0014                  		muls.w	$14(a0),d1
00013976 E081                       		asr.l	#8,d1
00013978 0C41 1000                  		cmpi.w	#$1000,d1
0001397C 6F00                       		ble.s	loc_131F0
0001397E 323C 1000                  		move.w	#$1000,d1
00013982                            
00013982                            loc_131F0:
00013982 0C41 F000                  		cmpi.w	#-$1000,d1
00013986 6C00                       		bge.s	loc_131FA
00013988 323C F000                  		move.w	#-$1000,d1
0001398C                            
0001398C                            loc_131FA:
0001398C 3141 0010                  		move.w	d1,$10(a0)
00013990 6000 FDF6                  		bra.w	loc_1300C
00013994                            ; End of function Sonic_RollSpeed
00013994                            
00013994                            
00013994                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00013994                            
00013994                            
00013994                            Sonic_RollLeft:				; XREF: Sonic_RollSpeed
00013994 3028 0014                  		move.w	$14(a0),d0
00013998 6700                       		beq.s	loc_1320A
0001399A 6A00                       		bpl.s	loc_13218
0001399C                            
0001399C                            loc_1320A:
0001399C 08E8 0000 0022             		bset	#0,$22(a0)
000139A2 117C 0002 001C             		move.b	#2,$1C(a0)	; use "rolling"	animation
000139A8 4E75                       		rts	
000139AA                            ; ===========================================================================
000139AA                            
000139AA                            loc_13218:
000139AA 9044                       		sub.w	d4,d0
000139AC 6400                       		bcc.s	loc_13220
000139AE 303C FF80                  		move.w	#-$80,d0
000139B2                            
000139B2                            loc_13220:
000139B2 3140 0014                  		move.w	d0,$14(a0)
000139B6 4E75                       		rts	
000139B8                            ; End of function Sonic_RollLeft
000139B8                            
000139B8                            
000139B8                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000139B8                            
000139B8                            
000139B8                            Sonic_RollRight:			; XREF: Sonic_RollSpeed
000139B8 3028 0014                  		move.w	$14(a0),d0
000139BC 6B00                       		bmi.s	loc_1323A
000139BE 08A8 0000 0022             		bclr	#0,$22(a0)
000139C4 117C 0002 001C             		move.b	#2,$1C(a0)	; use "rolling"	animation
000139CA 4E75                       		rts	
000139CC                            ; ===========================================================================
000139CC                            
000139CC                            loc_1323A:
000139CC D044                       		add.w	d4,d0
000139CE 6400                       		bcc.s	loc_13242
000139D0 303C 0080                  		move.w	#$80,d0
000139D4                            
000139D4                            loc_13242:
000139D4 3140 0014                  		move.w	d0,$14(a0)
000139D8 4E75                       		rts	
000139DA                            ; End of function Sonic_RollRight
000139DA                            
000139DA                            Sonic_AirUnroll:
000139DA                            		
000139DA 4A28 003A                  		tst.b	$3A(a0) ; check jump height control
000139DE 6600                       		bne.s	@timer
000139E0 1038 F605                  		move.b	($FFFFF605).w,d0
000139E4 0200 0070                  		andi.b	#$70,d0 ; is abc being pressed?
000139E8 6700                       		beq.s	@end	; if not, branch
000139EA 08A8 0002 0022             		bclr	#2,$22(a0)
000139F0 117C 0013 0016             		move.b	#$13,$16(a0)
000139F6 117C 0009 0017             		move.b	#9,$17(a0)
000139FC 117C 000E 001C             		move.b	#14,$1C(a0)	; use dunk animation
00013A02 303C 00A5                  		move.w	#$A5,d0
00013A06 4EB9 0000 15C0             		jsr	(PlaySound_Special).l ;	play fart sound
00013A0C 2028 0010                  		move.l	$10(a0),d0
00013A10 D080                       		add.l	d0,d0
00013A12 2140 0010                  		move.l	d0,$10(a0)
00013A16 5B68 000C                  		subq.w	#5,$C(a0)
00013A1A                            	@end:
00013A1A 4E75                       		rts
00013A1C                            	@timer:
00013A1C 5328 003A                  		subq.b	#1,$3A(a0)
00013A20 4E75                       		rts
00013A22                            
00013A22                            ; ---------------------------------------------------------------------------
00013A22                            ; Subroutine to	change Sonic's direction while jumping
00013A22                            ; ---------------------------------------------------------------------------
00013A22                            
00013A22                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00013A22                            
00013A22                            
00013A22                            Sonic_ChgJumpDir:			; XREF: Obj01_MdJump; Obj01_MdJump2
00013A22 3C38 F760                  		move.w	($FFFFF760).w,d6
00013A26 3A38 F762                  		move.w	($FFFFF762).w,d5
00013A2A E345                       		asl.w	#1,d5
00013A2C 0828 0004 0022             		btst	#4,$22(a0)
00013A32 6600                       		bne.s	Obj01_ResetScr2
00013A34 3028 0010                  		move.w	$10(a0),d0
00013A38 0838 0002 F602             		btst	#2,($FFFFF602).w ; is left being pressed?
00013A3E 6700                       		beq.s	loc_13278	; if not, branch
00013A40 0838 0000 FE2F             		btst	#0,($FFFFFE2F).w	; GMZ: Have we got a reverse control power up?
00013A46 6600                       		bne.s	SonicCJD_JumpRight	; GMZ: If yes, branch
00013A48 6100 0000                  		bsr.w	SonicCJD_JumpLeft
00013A4C 6E00                       		bgt.s	loc_13278
00013A4E 3001                       		move.w	d1,d0
00013A50                            
00013A50                            loc_13278:
00013A50 0838 0003 F602             		btst	#3,($FFFFF602).w ; is right being pressed?
00013A56 6700                       		beq.s	Obj01_JumpMove	; if not, branch
00013A58 0838 0000 FE2F             		btst	#0,($FFFFFE2F).w	; GMZ: Have we got a reverse control power up?
00013A5E 6700                       		beq.s	SonicCJD_JumpRight	; GMZ: If not, branch
00013A60 6100 0000                  		bsr.w	SonicCJD_JumpLeft
00013A64 6E00                       		bgt.s	Obj01_JumpMove
00013A66 3001                       		move.w	d1,d0
00013A68 6000                       		bra.s	Obj01_JumpMove
00013A6A                            
00013A6A                            SonicCJD_JumpLeft:
00013A6A 08E8 0000 0022             		bset	#0,$22(a0)
00013A70 9045                       		sub.w	d5,d0
00013A72 3206                       		move.w	d6,d1
00013A74 4441                       		neg.w	d1
00013A76 B041                       		cmp.w	d1,d0
00013A78                            		; bgt.s	loc_13278
00013A78                            		; move.w	d1,d0
00013A78 4E75                       		rts
00013A7A                            
00013A7A                            SonicCJD_JumpRight:
00013A7A 08A8 0000 0022             		bclr	#0,$22(a0)
00013A80 D045                       		add.w	d5,d0
00013A82 B046                       		cmp.w	d6,d0
00013A84 6D00                       		blt.s	Obj01_JumpMove
00013A86 3006                       		move.w	d6,d0
00013A88                            
00013A88                            Obj01_JumpMove:
00013A88 3140 0010                  		move.w	d0,$10(a0)	; change Sonic's horizontal speed
00013A8C                            
00013A8C                            Obj01_ResetScr2:
00013A8C 0C78 0060 F73E             		cmpi.w	#$60,($FFFFF73E).w ; is	the screen in its default position?
00013A92 6700                       		beq.s	loc_132A4	; if yes, branch
00013A94 6400                       		bcc.s	loc_132A0
00013A96 5878 F73E                  		addq.w	#4,($FFFFF73E).w
00013A9A                            
00013A9A                            loc_132A0:
00013A9A 5578 F73E                  		subq.w	#2,($FFFFF73E).w
00013A9E                            
00013A9E                            loc_132A4:
00013A9E 0C68 FC00 0012             		cmpi.w	#-$400,$12(a0)	; is Sonic moving faster than -$400 upwards?
00013AA4 6500                       		bcs.s	locret_132D2	; if yes, branch
00013AA6 3028 0010                  		move.w	$10(a0),d0
00013AAA 3200                       		move.w	d0,d1
00013AAC EA41                       		asr.w	#5,d1
00013AAE 6700                       		beq.s	locret_132D2
00013AB0 6B00                       		bmi.s	loc_132C6
00013AB2 9041                       		sub.w	d1,d0
00013AB4 6400                       		bcc.s	loc_132C0
00013AB6 303C 0000                  		move.w	#0,d0
00013ABA                            
00013ABA                            loc_132C0:
00013ABA 3140 0010                  		move.w	d0,$10(a0)
00013ABE 4E75                       		rts	
00013AC0                            ; ===========================================================================
00013AC0                            
00013AC0                            loc_132C6:
00013AC0 9041                       		sub.w	d1,d0
00013AC2 6500                       		bcs.s	loc_132CE
00013AC4 303C 0000                  		move.w	#0,d0
00013AC8                            
00013AC8                            loc_132CE:
00013AC8 3140 0010                  		move.w	d0,$10(a0)
00013ACC                            
00013ACC                            locret_132D2:
00013ACC 4E75                       		rts	
00013ACE                            ; End of function Sonic_ChgJumpDir
00013ACE                            
00013ACE                            ; ===========================================================================
00013ACE                            ; ---------------------------------------------------------------------------
00013ACE                            ; Unused subroutine to squash Sonic
00013ACE                            ; ---------------------------------------------------------------------------
00013ACE 1028 0026                  		move.b	$26(a0),d0
00013AD2 0600 0020                  		addi.b	#$20,d0
00013AD6 0200 00C0                  		andi.b	#$C0,d0
00013ADA 6600                       		bne.s	locret_13302
00013ADC 6100 0000                  		bsr.w	Sonic_DontRunOnWalls
00013AE0 4A41                       		tst.w	d1
00013AE2 6A00                       		bpl.s	locret_13302
00013AE4 317C 0000 0014             		move.w	#0,$14(a0)	; stop Sonic moving
00013AEA 317C 0000 0010             		move.w	#0,$10(a0)
00013AF0 317C 0000 0012             		move.w	#0,$12(a0)
00013AF6 117C 000B 001C             		move.b	#$B,$1C(a0)	; use "warping"	animation
00013AFC                            
00013AFC                            locret_13302:
00013AFC 4E75                       		rts	
00013AFE                            ; ---------------------------------------------------------------------------
00013AFE                            ; Subroutine to	prevent	Sonic leaving the boundaries of	a level
00013AFE                            ; ---------------------------------------------------------------------------
00013AFE                            
00013AFE                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00013AFE                            
00013AFE                            
00013AFE                            Sonic_LevelBound:			; XREF: Obj01_MdNormal; et al
00013AFE 2228 0008                  		move.l	8(a0),d1
00013B02 3028 0010                  		move.w	$10(a0),d0
00013B06 48C0                       		ext.l	d0
00013B08 E180                       		asl.l	#8,d0
00013B0A D280                       		add.l	d0,d1
00013B0C 4841                       		swap	d1
00013B0E 3038 F728                  		move.w	($FFFFF728).w,d0
00013B12 0640 0010                  		addi.w	#$10,d0
00013B16 B041                       		cmp.w	d1,d0		; has Sonic touched the	side boundary?
00013B18 6200                       		bhi.s	Boundary_Sides	; if yes, branch
00013B1A 3038 F72A                  		move.w	($FFFFF72A).w,d0
00013B1E 0640 0128                  		addi.w	#$128,d0
00013B22 4A38 F7AA                  		tst.b	($FFFFF7AA).w
00013B26 6600                       		bne.s	loc_13332
00013B28 0640 0040                  		addi.w	#$40,d0
00013B2C                            
00013B2C                            loc_13332:
00013B2C B041                       		cmp.w	d1,d0		; has Sonic touched the	side boundary?
00013B2E 6300                       		bls.s	Boundary_Sides	; if yes, branch
00013B30                            
00013B30                            loc_13336:
00013B30 3038 F72E                  		move.w	($FFFFF72E).w,d0
00013B34 0640 00E0                  		addi.w	#$E0,d0
00013B38 B068 000C                  		cmp.w	$C(a0),d0	; has Sonic touched the	bottom boundary?
00013B3C 6D00                       		blt.s	Boundary_Bottom	; if yes, branch
00013B3E 4E75                       		rts	
00013B40                            ; ===========================================================================
00013B40                            
00013B40                            Boundary_Bottom:
00013B40 0C78 0501 FE10             		cmpi.w	#$501,($FFFFFE10).w ; is level SBZ2 ?
00013B46 6600 0000                  		bne.w	KillSonic	; if not, kill Sonic
00013B4A 0C78 2000 D008             		cmpi.w	#$2000,($FFFFD008).w
00013B50 6500 0000                  		bcs.w	KillSonic
00013B54 4238 FE30                  		clr.b	($FFFFFE30).w	; clear	lamppost counter
00013B58 31FC 0001 FE02             		move.w	#1,($FFFFFE02).w ; restart the level
00013B5E 31FC 0103 FE10             		move.w	#$103,($FFFFFE10).w ; set level	to SBZ3	(LZ4)
00013B64 4E75                       		rts	
00013B66                            ; ===========================================================================
00013B66                            
00013B66                            Boundary_Sides:
00013B66 3140 0008                  		move.w	d0,8(a0)
00013B6A 317C 0000 000A             		move.w	#0,$A(a0)
00013B70 317C 0000 0010             		move.w	#0,$10(a0)	; stop Sonic moving
00013B76 317C 0000 0014             		move.w	#0,$14(a0)
00013B7C 60B2                       		bra.s	loc_13336
00013B7E                            ; End of function Sonic_LevelBound
00013B7E                            
00013B7E                            ; ---------------------------------------------------------------------------
00013B7E                            ; Subroutine allowing Sonic to roll when he's moving
00013B7E                            ; ---------------------------------------------------------------------------
00013B7E                            
00013B7E                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00013B7E                            
00013B7E                            
00013B7E                            Sonic_Roll:				; XREF: Obj01_MdNormal
00013B7E 4A38 F7CA                  		tst.b	($FFFFF7CA).w
00013B82 6600                       		bne.s	Obj01_NoRoll
00013B84 3028 0014                  		move.w	$14(a0),d0
00013B88 6A00                       		bpl.s	loc_13392
00013B8A 4440                       		neg.w	d0
00013B8C                            
00013B8C                            loc_13392:
00013B8C 0C40 0080                  		cmpi.w	#$80,d0		; is Sonic moving at $80 speed or faster?
00013B90 6500                       		bcs.s	Obj01_NoRoll	; if not, branch
00013B92 1038 F602                  		move.b	($FFFFF602).w,d0
00013B96 0200 000C                  		andi.b	#$C,d0		; is left/right	being pressed?
00013B9A 6600                       		bne.s	Obj01_NoRoll	; if yes, branch
00013B9C 0838 0001 F602             		btst	#1,($FFFFF602).w ; is down being pressed?
00013BA2 6600                       		bne.s	Obj01_ChkRoll	; if yes, branch
00013BA4                            
00013BA4                            Obj01_NoRoll:
00013BA4 4E75                       		rts	
00013BA6                            ; ===========================================================================
00013BA6                            
00013BA6                            Obj01_ChkRoll:
00013BA6 0828 0002 0022             		btst	#2,$22(a0)	; is Sonic already rolling?
00013BAC 6700                       		beq.s	Obj01_DoRoll	; if not, branch
00013BAE 4E75                       		rts	
00013BB0                            ; ===========================================================================
00013BB0                            
00013BB0                            Obj01_DoRoll:
00013BB0 08E8 0002 0022             		bset	#2,$22(a0)
00013BB6 117C 000E 0016             		move.b	#$E,$16(a0)
00013BBC 117C 0007 0017             		move.b	#7,$17(a0)
00013BC2 117C 0002 001C             		move.b	#2,$1C(a0)	; use "rolling"	animation
00013BC8 5A68 000C                  		addq.w	#5,$C(a0)
00013BCC 303C 00BE                  		move.w	#$BE,d0
00013BD0 4EB9 0000 15C0             		jsr	(PlaySound_Special).l ;	play rolling sound
00013BD6 4A68 0014                  		tst.w	$14(a0)
00013BDA 6600                       		bne.s	locret_133E8
00013BDC 317C 0200 0014             		move.w	#$200,$14(a0)
00013BE2                            
00013BE2                            locret_133E8:
00013BE2 4E75                       		rts	
00013BE4                            ; End of function Sonic_Roll
00013BE4                            
00013BE4                            ; ---------------------------------------------------------------------------
00013BE4                            ; Subroutine allowing Sonic to jump
00013BE4                            ; ---------------------------------------------------------------------------
00013BE4                            
00013BE4                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00013BE4                            
00013BE4                            
00013BE4                            Sonic_Jump:				; XREF: Obj01_MdNormal; Obj01_MdRoll
00013BE4 1038 F603                  		move.b	($FFFFF603).w,d0
00013BE8 0200 0070                  		andi.b	#$70,d0		; is A,	B or C pressed?
00013BEC 6700 0000                  		beq.w	locret_1348E	; if not, branch
00013BF0 7000                       		moveq	#0,d0
00013BF2 1028 0026                  		move.b	$26(a0),d0
00013BF6 0600 0080                  		addi.b	#$80,d0
00013BFA 6100 0000                  		bsr.w	sub_14D48
00013BFE 0C41 0006                  		cmpi.w	#6,d1
00013C02 6D00 0000                  		blt.w	locret_1348E
00013C06 343C 0680                  		move.w	#$680,d2
00013C0A 0828 0006 0022             		btst	#6,$22(a0)
00013C10 6700                       		beq.s	loc_1341C
00013C12 343C 0380                  		move.w	#$380,d2
00013C16                            
00013C16                            loc_1341C:
00013C16 7000                       		moveq	#0,d0
00013C18 1028 0026                  		move.b	$26(a0),d0
00013C1C 0400 0040                  		subi.b	#$40,d0
00013C20 4EB9 0000 2C64             		jsr	(CalcSine).l
00013C26 C3C2                       		muls.w	d2,d1
00013C28 E081                       		asr.l	#8,d1
00013C2A D368 0010                  		add.w	d1,$10(a0)	; make Sonic jump
00013C2E C1C2                       		muls.w	d2,d0
00013C30 E080                       		asr.l	#8,d0
00013C32 D168 0012                  		add.w	d0,$12(a0)	; make Sonic jump
00013C36 08E8 0001 0022             		bset	#1,$22(a0)
00013C3C 08A8 0005 0022             		bclr	#5,$22(a0)
00013C42 588F                       		addq.l	#4,sp
00013C44 117C 0001 003C             		move.b	#1,$3C(a0)
00013C4A 4228 0038                  		clr.b	$38(a0)
00013C4E 303C 00A0                  		move.w	#$A0,d0
00013C52 4EB9 0000 15C0             		jsr	(PlaySound_Special).l ;	play jumping sound
00013C58 117C 0013 0016             		move.b	#$13,$16(a0)
00013C5E 117C 0009 0017             		move.b	#9,$17(a0)
00013C64 0828 0002 0022             		btst	#2,$22(a0)
00013C6A 6600                       		bne.s	loc_13490
00013C6C 117C 000E 0016             		move.b	#$E,$16(a0)
00013C72 117C 0007 0017             		move.b	#7,$17(a0)
00013C78 117C 0002 001C             		move.b	#2,$1C(a0)	; use "jumping"	animation
00013C7E 08E8 0002 0022             		bset	#2,$22(a0)
00013C84 5A68 000C                  		addq.w	#5,$C(a0)
00013C88 117C 000A 003A             		move.b	#10,$3A(a0) ; timer
00013C8E                            
00013C8E                            locret_1348E:
00013C8E 4E75                       		rts	
00013C90                            ; ===========================================================================
00013C90                            
00013C90                            loc_13490:
00013C90 08E8 0004 0022             		bset	#4,$22(a0)
00013C96 4E75                       		rts	
00013C98                            ; End of function Sonic_Jump
00013C98                            
00013C98                            
00013C98                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00013C98                            
00013C98                            
00013C98                            Sonic_JumpHeight:			; XREF: Obj01_MdJump; Obj01_MdJump2
00013C98 4A28 003C                  		tst.b	$3C(a0)
00013C9C 6700                       		beq.s	loc_134C4
00013C9E 323C FC00                  		move.w	#-$400,d1
00013CA2 0828 0006 0022             		btst	#6,$22(a0)
00013CA8 6700                       		beq.s	loc_134AE
00013CAA 323C FE00                  		move.w	#-$200,d1
00013CAE                            
00013CAE                            loc_134AE:
00013CAE B268 0012                  		cmp.w	$12(a0),d1
00013CB2 6F00                       		ble.s	locret_134C2
00013CB4 1038 F602                  		move.b	($FFFFF602).w,d0
00013CB8 0200 0070                  		andi.b	#$70,d0		; is A,	B or C pressed?
00013CBC 6600                       		bne.s	locret_134C2	; if yes, branch
00013CBE 3141 0012                  		move.w	d1,$12(a0)
00013CC2                            
00013CC2                            locret_134C2:
00013CC2 4E75                       		rts	
00013CC4                            ; ===========================================================================
00013CC4                            
00013CC4                            loc_134C4:
00013CC4 0C68 F040 0012             		cmpi.w	#-$FC0,$12(a0)
00013CCA 6C00                       		bge.s	locret_134D2
00013CCC 317C F040 0012             		move.w	#-$FC0,$12(a0)
00013CD2                            
00013CD2                            locret_134D2:
00013CD2 4E75                       		rts	
00013CD4                            ; End of function Sonic_JumpHeight
00013CD4                            
00013CD4                            ; ---------------------------------------------------------------------------
00013CD4                            ; Subroutine to	slow Sonic walking up a	slope
00013CD4                            ; ---------------------------------------------------------------------------
00013CD4                            
00013CD4                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00013CD4                            
00013CD4                            
00013CD4                            Sonic_SlopeResist:			; XREF: Obj01_MdNormal
00013CD4 1028 0026                  		move.b	$26(a0),d0
00013CD8 0600 0060                  		addi.b	#$60,d0
00013CDC 0C00 00C0                  		cmpi.b	#$C0,d0
00013CE0 6400                       		bcc.s	locret_13508
00013CE2 1028 0026                  		move.b	$26(a0),d0
00013CE6 4EB9 0000 2C64             		jsr	(CalcSine).l
00013CEC C1FC 0020                  		muls.w	#$20,d0
00013CF0 E080                       		asr.l	#8,d0
00013CF2 4A68 0014                  		tst.w	$14(a0)
00013CF6 6700                       		beq.s	locret_13508
00013CF8 6B00                       		bmi.s	loc_13504
00013CFA 4A40                       		tst.w	d0
00013CFC 6700                       		beq.s	locret_13502
00013CFE D168 0014                  		add.w	d0,$14(a0)	; change Sonic's inertia
00013D02                            
00013D02                            locret_13502:
00013D02 4E75                       		rts	
00013D04                            ; ===========================================================================
00013D04                            
00013D04                            loc_13504:
00013D04 D168 0014                  		add.w	d0,$14(a0)
00013D08                            
00013D08                            locret_13508:
00013D08 4E75                       		rts	
00013D0A                            ; End of function Sonic_SlopeResist
00013D0A                            
00013D0A                            ; ---------------------------------------------------------------------------
00013D0A                            ; Subroutine to	push Sonic down	a slope	while he's rolling
00013D0A                            ; ---------------------------------------------------------------------------
00013D0A                            
00013D0A                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00013D0A                            
00013D0A                            
00013D0A                            Sonic_RollRepel:			; XREF: Obj01_MdRoll
00013D0A 1028 0026                  		move.b	$26(a0),d0
00013D0E 0600 0060                  		addi.b	#$60,d0
00013D12 0C00 00C0                  		cmpi.b	#-$40,d0
00013D16 6400                       		bcc.s	locret_13544
00013D18 1028 0026                  		move.b	$26(a0),d0
00013D1C 4EB9 0000 2C64             		jsr	(CalcSine).l
00013D22 C1FC 0050                  		muls.w	#$50,d0
00013D26 E080                       		asr.l	#8,d0
00013D28 4A68 0014                  		tst.w	$14(a0)
00013D2C 6B00                       		bmi.s	loc_1353A
00013D2E 4A40                       		tst.w	d0
00013D30 6A00                       		bpl.s	loc_13534
00013D32 E480                       		asr.l	#2,d0
00013D34                            
00013D34                            loc_13534:
00013D34 D168 0014                  		add.w	d0,$14(a0)
00013D38 4E75                       		rts	
00013D3A                            ; ===========================================================================
00013D3A                            
00013D3A                            loc_1353A:
00013D3A 4A40                       		tst.w	d0
00013D3C 6B00                       		bmi.s	loc_13540
00013D3E E480                       		asr.l	#2,d0
00013D40                            
00013D40                            loc_13540:
00013D40 D168 0014                  		add.w	d0,$14(a0)
00013D44                            
00013D44                            locret_13544:
00013D44 4E75                       		rts	
00013D46                            ; End of function Sonic_RollRepel
00013D46                            
00013D46                            ; ---------------------------------------------------------------------------
00013D46                            ; Subroutine to	push Sonic down	a slope
00013D46                            ; ---------------------------------------------------------------------------
00013D46                            
00013D46                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00013D46                            
00013D46                            
00013D46                            Sonic_SlopeRepel:			; XREF: Obj01_MdNormal; Obj01_MdRoll
00013D46 4E71                       		nop	
00013D48 4A28 0038                  		tst.b	$38(a0)
00013D4C 6600                       		bne.s	locret_13580
00013D4E 4A68 003E                  		tst.w	$3E(a0)
00013D52 6600                       		bne.s	loc_13582
00013D54 1028 0026                  		move.b	$26(a0),d0
00013D58 0600 0020                  		addi.b	#$20,d0
00013D5C 0200 00C0                  		andi.b	#$C0,d0
00013D60 6700                       		beq.s	locret_13580
00013D62 3028 0014                  		move.w	$14(a0),d0
00013D66 6A00                       		bpl.s	loc_1356A
00013D68 4440                       		neg.w	d0
00013D6A                            
00013D6A                            loc_1356A:
00013D6A 0C40 0280                  		cmpi.w	#$280,d0
00013D6E 6400                       		bcc.s	locret_13580
00013D70 4268 0014                  		clr.w	$14(a0)
00013D74 08E8 0001 0022             		bset	#1,$22(a0)
00013D7A 317C 001E 003E             		move.w	#$1E,$3E(a0)
00013D80                            
00013D80                            locret_13580:
00013D80 4E75                       		rts	
00013D82                            ; ===========================================================================
00013D82                            
00013D82                            loc_13582:
00013D82 5368 003E                  		subq.w	#1,$3E(a0)
00013D86 4E75                       		rts	
00013D88                            ; End of function Sonic_SlopeRepel
00013D88                            
00013D88                            ; ---------------------------------------------------------------------------
00013D88                            ; Subroutine to	return Sonic's angle to 0 as he jumps
00013D88                            ; ---------------------------------------------------------------------------
00013D88                            
00013D88                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00013D88                            
00013D88                            
00013D88                            Sonic_JumpAngle:			; XREF: Obj01_MdJump; Obj01_MdJump2
00013D88 1028 0026                  		move.b	$26(a0),d0	; get Sonic's angle
00013D8C 6700                       		beq.s	locret_135A2	; if already 0,	branch
00013D8E 6A00                       		bpl.s	loc_13598	; if higher than 0, branch
00013D90                            
00013D90 5400                       		addq.b	#2,d0		; increase angle
00013D92 6400                       		bcc.s	loc_13596
00013D94 7000                       		moveq	#0,d0
00013D96                            
00013D96                            loc_13596:
00013D96 6000                       		bra.s	loc_1359E
00013D98                            ; ===========================================================================
00013D98                            
00013D98                            loc_13598:
00013D98 5500                       		subq.b	#2,d0		; decrease angle
00013D9A 6400                       		bcc.s	loc_1359E
00013D9C 7000                       		moveq	#0,d0
00013D9E                            
00013D9E                            loc_1359E:
00013D9E 1140 0026                  		move.b	d0,$26(a0)
00013DA2                            
00013DA2                            locret_135A2:
00013DA2 4E75                       		rts	
00013DA4                            ; End of function Sonic_JumpAngle
00013DA4                            
00013DA4                            ; ---------------------------------------------------------------------------
00013DA4                            ; Subroutine for Sonic to interact with	the floor after	jumping/falling
00013DA4                            ; ---------------------------------------------------------------------------
00013DA4                            
00013DA4                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00013DA4                            
00013DA4                            
00013DA4                            Sonic_Floor:				; XREF: Obj01_MdJump; Obj01_MdJump2
00013DA4 3228 0010                  		move.w	$10(a0),d1
00013DA8 3428 0012                  		move.w	$12(a0),d2
00013DAC 4EB9 0000 2F32             		jsr	(CalcAngle).l
00013DB2 11C0 FFEC                  		move.b	d0,($FFFFFFEC).w
00013DB6 0400 0020                  		subi.b	#$20,d0
00013DBA 11C0 FFED                  		move.b	d0,($FFFFFFED).w
00013DBE 0200 00C0                  		andi.b	#$C0,d0
00013DC2 11C0 FFEE                  		move.b	d0,($FFFFFFEE).w
00013DC6 0C00 0040                  		cmpi.b	#$40,d0
00013DCA 6700 0000                  		beq.w	loc_13680
00013DCE 0C00 0080                  		cmpi.b	#$80,d0
00013DD2 6700 0000                  		beq.w	loc_136E2
00013DD6 0C00 00C0                  		cmpi.b	#-$40,d0
00013DDA 6700 0000                  		beq.w	loc_1373E
00013DDE 6100 0000                  		bsr.w	Sonic_HitWall
00013DE2 4A41                       		tst.w	d1
00013DE4 6A00                       		bpl.s	loc_135F0
00013DE6 9368 0008                  		sub.w	d1,8(a0)
00013DEA 317C 0000 0010             		move.w	#0,$10(a0)
00013DF0                            
00013DF0                            loc_135F0:
00013DF0 6100 0000                  		bsr.w	sub_14EB4
00013DF4 4A41                       		tst.w	d1
00013DF6 6A00                       		bpl.s	loc_13602
00013DF8 D368 0008                  		add.w	d1,8(a0)
00013DFC 317C 0000 0010             		move.w	#0,$10(a0)
00013E02                            
00013E02                            loc_13602:
00013E02 6100 0000                  		bsr.w	Sonic_HitFloor
00013E06 11C1 FFEF                  		move.b	d1,($FFFFFFEF).w
00013E0A 4A41                       		tst.w	d1
00013E0C 6A00                       		bpl.s	locret_1367E
00013E0E 1428 0012                  		move.b	$12(a0),d2
00013E12 5002                       		addq.b	#8,d2
00013E14 4402                       		neg.b	d2
00013E16 B202                       		cmp.b	d2,d1
00013E18 6C00                       		bge.s	loc_1361E
00013E1A B002                       		cmp.b	d2,d0
00013E1C 6D00                       		blt.s	locret_1367E
00013E1E                            
00013E1E                            loc_1361E:
00013E1E D368 000C                  		add.w	d1,$C(a0)
00013E22 1143 0026                  		move.b	d3,$26(a0)
00013E26 6100 0000                  		bsr.w	Sonic_ResetOnFloor
00013E2A 117C 0000 001C             		move.b	#0,$1C(a0)
00013E30 1003                       		move.b	d3,d0
00013E32 0600 0020                  		addi.b	#$20,d0
00013E36 0200 0040                  		andi.b	#$40,d0
00013E3A 6600                       		bne.s	loc_1365C
00013E3C 1003                       		move.b	d3,d0
00013E3E 0600 0010                  		addi.b	#$10,d0
00013E42 0200 0020                  		andi.b	#$20,d0
00013E46 6700                       		beq.s	loc_1364E
00013E48 E0E8 0012                  		asr	$12(a0)
00013E4C 6000                       		bra.s	loc_13670
00013E4E                            ; ===========================================================================
00013E4E                            
00013E4E                            loc_1364E:
00013E4E 317C 0000 0012             		move.w	#0,$12(a0)
00013E54 3168 0010 0014             		move.w	$10(a0),$14(a0)
00013E5A 4E75                       		rts	
00013E5C                            ; ===========================================================================
00013E5C                            
00013E5C                            loc_1365C:
00013E5C 317C 0000 0010             		move.w	#0,$10(a0)
00013E62 0C68 0FC0 0012             		cmpi.w	#$FC0,$12(a0)
00013E68 6F00                       		ble.s	loc_13670
00013E6A 317C 0FC0 0012             		move.w	#$FC0,$12(a0)
00013E70                            
00013E70                            loc_13670:
00013E70 3168 0012 0014             		move.w	$12(a0),$14(a0)
00013E76 4A03                       		tst.b	d3
00013E78 6A00                       		bpl.s	locret_1367E
00013E7A 4468 0014                  		neg.w	$14(a0)
00013E7E                            
00013E7E                            locret_1367E:
00013E7E 4E75                       		rts	
00013E80                            ; ===========================================================================
00013E80                            
00013E80                            loc_13680:
00013E80 6100 0000                  		bsr.w	Sonic_HitWall
00013E84 4A41                       		tst.w	d1
00013E86 6A00                       		bpl.s	loc_1369A
00013E88 9368 0008                  		sub.w	d1,8(a0)
00013E8C 317C 0000 0010             		move.w	#0,$10(a0)
00013E92 3168 0012 0014             		move.w	$12(a0),$14(a0)
00013E98 4E75                       		rts	
00013E9A                            ; ===========================================================================
00013E9A                            
00013E9A                            loc_1369A:
00013E9A 6100 0000                  		bsr.w	Sonic_DontRunOnWalls
00013E9E 4A41                       		tst.w	d1
00013EA0 6A00                       		bpl.s	loc_136B4
00013EA2 9368 000C                  		sub.w	d1,$C(a0)
00013EA6 4A68 0012                  		tst.w	$12(a0)
00013EAA 6A00                       		bpl.s	locret_136B2
00013EAC 317C 0000 0012             		move.w	#0,$12(a0)
00013EB2                            
00013EB2                            locret_136B2:
00013EB2 4E75                       		rts	
00013EB4                            ; ===========================================================================
00013EB4                            
00013EB4                            loc_136B4:
00013EB4 4A68 0012                  		tst.w	$12(a0)
00013EB8 6B00                       		bmi.s	locret_136E0
00013EBA 6100 0000                  		bsr.w	Sonic_HitFloor
00013EBE 4A41                       		tst.w	d1
00013EC0 6A00                       		bpl.s	locret_136E0
00013EC2 D368 000C                  		add.w	d1,$C(a0)
00013EC6 1143 0026                  		move.b	d3,$26(a0)
00013ECA 6100 0000                  		bsr.w	Sonic_ResetOnFloor
00013ECE 117C 0000 001C             		move.b	#0,$1C(a0)
00013ED4 317C 0000 0012             		move.w	#0,$12(a0)
00013EDA 3168 0010 0014             		move.w	$10(a0),$14(a0)
00013EE0                            
00013EE0                            locret_136E0:
00013EE0 4E75                       		rts	
00013EE2                            ; ===========================================================================
00013EE2                            
00013EE2                            loc_136E2:
00013EE2 6100 0000                  		bsr.w	Sonic_HitWall
00013EE6 4A41                       		tst.w	d1
00013EE8 6A00                       		bpl.s	loc_136F4
00013EEA 9368 0008                  		sub.w	d1,8(a0)
00013EEE 317C 0000 0010             		move.w	#0,$10(a0)
00013EF4                            
00013EF4                            loc_136F4:
00013EF4 6100 0000                  		bsr.w	sub_14EB4
00013EF8 4A41                       		tst.w	d1
00013EFA 6A00                       		bpl.s	loc_13706
00013EFC D368 0008                  		add.w	d1,8(a0)
00013F00 317C 0000 0010             		move.w	#0,$10(a0)
00013F06                            
00013F06                            loc_13706:
00013F06 6100 0000                  		bsr.w	Sonic_DontRunOnWalls
00013F0A 4A41                       		tst.w	d1
00013F0C 6A00                       		bpl.s	locret_1373C
00013F0E 9368 000C                  		sub.w	d1,$C(a0)
00013F12 1003                       		move.b	d3,d0
00013F14 0600 0020                  		addi.b	#$20,d0
00013F18 0200 0040                  		andi.b	#$40,d0
00013F1C 6600                       		bne.s	loc_13726
00013F1E 317C 0000 0012             		move.w	#0,$12(a0)
00013F24 4E75                       		rts	
00013F26                            ; ===========================================================================
00013F26                            
00013F26                            loc_13726:
00013F26 1143 0026                  		move.b	d3,$26(a0)
00013F2A 6100 0000                  		bsr.w	Sonic_ResetOnFloor
00013F2E 3168 0012 0014             		move.w	$12(a0),$14(a0)
00013F34 4A03                       		tst.b	d3
00013F36 6A00                       		bpl.s	locret_1373C
00013F38 4468 0014                  		neg.w	$14(a0)
00013F3C                            
00013F3C                            locret_1373C:
00013F3C 4E75                       		rts	
00013F3E                            ; ===========================================================================
00013F3E                            
00013F3E                            loc_1373E:
00013F3E 6100 0000                  		bsr.w	sub_14EB4
00013F42 4A41                       		tst.w	d1
00013F44 6A00                       		bpl.s	loc_13758
00013F46 D368 0008                  		add.w	d1,8(a0)
00013F4A 317C 0000 0010             		move.w	#0,$10(a0)
00013F50 3168 0012 0014             		move.w	$12(a0),$14(a0)
00013F56 4E75                       		rts	
00013F58                            ; ===========================================================================
00013F58                            
00013F58                            loc_13758:
00013F58 6100 0000                  		bsr.w	Sonic_DontRunOnWalls
00013F5C 4A41                       		tst.w	d1
00013F5E 6A00                       		bpl.s	loc_13772
00013F60 9368 000C                  		sub.w	d1,$C(a0)
00013F64 4A68 0012                  		tst.w	$12(a0)
00013F68 6A00                       		bpl.s	locret_13770
00013F6A 317C 0000 0012             		move.w	#0,$12(a0)
00013F70                            
00013F70                            locret_13770:
00013F70 4E75                       		rts	
00013F72                            ; ===========================================================================
00013F72                            
00013F72                            loc_13772:
00013F72 4A68 0012                  		tst.w	$12(a0)
00013F76 6B00                       		bmi.s	locret_1379E
00013F78 6100 0000                  		bsr.w	Sonic_HitFloor
00013F7C 4A41                       		tst.w	d1
00013F7E 6A00                       		bpl.s	locret_1379E
00013F80 D368 000C                  		add.w	d1,$C(a0)
00013F84 1143 0026                  		move.b	d3,$26(a0)
00013F88 6100 0000                  		bsr.w	Sonic_ResetOnFloor
00013F8C 117C 0000 001C             		move.b	#0,$1C(a0)
00013F92 317C 0000 0012             		move.w	#0,$12(a0)
00013F98 3168 0010 0014             		move.w	$10(a0),$14(a0)
00013F9E                            
00013F9E                            locret_1379E:
00013F9E 4E75                       		rts	
00013FA0                            ; End of function Sonic_Floor
00013FA0                            
00013FA0                            ; ---------------------------------------------------------------------------
00013FA0                            ; Subroutine to	reset Sonic's mode when he lands on the floor
00013FA0                            ; ---------------------------------------------------------------------------
00013FA0                            
00013FA0                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00013FA0                            
00013FA0                            
00013FA0                            Sonic_ResetOnFloor:			; XREF: PlatformObject; et al
00013FA0 0828 0004 0022             		btst	#4,$22(a0)
00013FA6 6700                       		beq.s	loc_137AE
00013FA8 4E71                       		nop	
00013FAA 4E71                       		nop	
00013FAC 4E71                       		nop	
00013FAE                            
00013FAE                            loc_137AE:
00013FAE 08A8 0005 0022             		bclr	#5,$22(a0)
00013FB4 08A8 0001 0022             		bclr	#1,$22(a0)
00013FBA 08A8 0004 0022             		bclr	#4,$22(a0)
00013FC0 0828 0002 0022             		btst	#2,$22(a0)
00013FC6 6700                       		beq.s	loc_137E4
00013FC8 08A8 0002 0022             		bclr	#2,$22(a0)
00013FCE 117C 0013 0016             		move.b	#$13,$16(a0)
00013FD4 117C 0009 0017             		move.b	#9,$17(a0)
00013FDA 117C 0000 001C             		move.b	#0,$1C(a0)	; use running/walking animation
00013FE0 5B68 000C                  		subq.w	#5,$C(a0)
00013FE4                            
00013FE4                            loc_137E4:
00013FE4 117C 0000 003C             		move.b	#0,$3C(a0)
00013FEA 31FC 0000 F7D0             		move.w	#0,($FFFFF7D0).w
00013FF0 4E75                       		rts	
00013FF2                            ; End of function Sonic_ResetOnFloor
00013FF2                            
00013FF2                            ; ===========================================================================
00013FF2                            ; ---------------------------------------------------------------------------
00013FF2                            ; Sonic	when he	gets hurt
00013FF2                            ; ---------------------------------------------------------------------------
00013FF2                            
00013FF2                            Obj01_Hurt:				; XREF: Obj01_Index
00013FF2 4EBA 9D48                  		jsr	SpeedToPos
00013FF6 0668 0030 0012             		addi.w	#$30,$12(a0)
00013FFC 0828 0006 0022             		btst	#6,$22(a0)
00014002 6700                       		beq.s	loc_1380C
00014004 0468 0020 0012             		subi.w	#$20,$12(a0)
0001400A                            
0001400A                            loc_1380C:
0001400A 6100 0000                  		bsr.w	Sonic_HurtStop
0001400E 6100 FAEE                  		bsr.w	Sonic_LevelBound
00014012 6100 F4B4                  		bsr.w	Sonic_RecordPos
00014016 6100 0000                  		bsr.w	Sonic_Animate
0001401A 6100 0000                  		bsr.w	LoadSonicDynPLC
0001401E 4EFA 9D42                  		jmp	DisplaySprite
00014022                            
00014022                            ; ---------------------------------------------------------------------------
00014022                            ; Subroutine to	stop Sonic falling after he's been hurt
00014022                            ; ---------------------------------------------------------------------------
00014022                            
00014022                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00014022                            
00014022                            
00014022                            Sonic_HurtStop:				; XREF: Obj01_Hurt
00014022 3038 F72E                  		move.w	($FFFFF72E).w,d0
00014026 0640 00E0                  		addi.w	#$E0,d0
0001402A B068 000C                  		cmp.w	$C(a0),d0
0001402E 6500 0000                  		bcs.w	KillSonic
00014032 6100 FD70                  		bsr.w	Sonic_Floor
00014036 0828 0001 0022             		btst	#1,$22(a0)
0001403C 6600                       		bne.s	locret_13860
0001403E 7000                       		moveq	#0,d0
00014040 3140 0012                  		move.w	d0,$12(a0)
00014044 3140 0010                  		move.w	d0,$10(a0)
00014048 3140 0014                  		move.w	d0,$14(a0)
0001404C 117C 0000 001C             		move.b	#0,$1C(a0)
00014052 5528 0024                  		subq.b	#2,$24(a0)
00014056 317C 0078 0030             		move.w	#$78,$30(a0)
0001405C                            
0001405C                            locret_13860:
0001405C 4E75                       		rts	
0001405E                            ; End of function Sonic_HurtStop
0001405E                            
0001405E                            ; ===========================================================================
0001405E                            ; ---------------------------------------------------------------------------
0001405E                            ; Sonic	when he	dies
0001405E                            ; ---------------------------------------------------------------------------
0001405E                            
0001405E                            Obj01_Death:				; XREF: Obj01_Index
0001405E 6100 0000                  		bsr.w	GameOver
00014062 4EBA 9CAC                  		jsr	ObjectFall
00014066 6100 F460                  		bsr.w	Sonic_RecordPos
0001406A 6100 0000                  		bsr.w	Sonic_Animate
0001406E 6100 0000                  		bsr.w	LoadSonicDynPLC
00014072 4EFA 9CEE                  		jmp	DisplaySprite
00014076                            
00014076                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00014076                            
00014076                            
00014076                            GameOver:				; XREF: Obj01_Death
00014076 3038 F72E                  		move.w	($FFFFF72E).w,d0
0001407A 0640 0100                  		addi.w	#$100,d0
0001407E B068 000C                  		cmp.w	$C(a0),d0
00014082 6400 0000                  		bcc.w	locret_13900
00014086 317C FFC8 0012             		move.w	#-$38,$12(a0)
0001408C 5428 0024                  		addq.b	#2,$24(a0)
00014090 4238 FE1E                  		clr.b	($FFFFFE1E).w	; stop time counter
00014094 5238 FE1C                  		addq.b	#1,($FFFFFE1C).w ; update lives	counter
00014098 5338 FE12                  		subq.b	#1,($FFFFFE12).w ; subtract 1 from number of lives
0001409C 6600                       		bne.s	loc_138D4
0001409E 317C 0000 003A             		move.w	#0,$3A(a0)
000140A4 11FC 0039 D080             		move.b	#$39,($FFFFD080).w ; load GAME object
000140AA 11FC 0039 D0C0             		move.b	#$39,($FFFFD0C0).w ; load OVER object
000140B0 11FC 0001 D0DA             		move.b	#1,($FFFFD0DA).w ; set OVER object to correct frame
000140B6 4238 FE1A                  		clr.b	($FFFFFE1A).w
000140BA                            
000140BA                            loc_138C2:
000140BA 303C 008F                  		move.w	#$8F,d0
000140BE 4EB9 0000 15BA             		jsr	(PlaySound).l	; play game over music
000140C4 7003                       		moveq	#3,d0
000140C6 4EF9 0000 17A4             		jmp	(LoadPLC).l	; load game over patterns
000140CC                            ; ===========================================================================
000140CC                            
000140CC                            loc_138D4:
000140CC 317C 003C 003A             		move.w	#60,$3A(a0)	; set time delay to 1 second
000140D2 4A38 FE1A                  		tst.b	($FFFFFE1A).w	; is TIME OVER tag set?
000140D6 6700                       		beq.s	locret_13900	; if not, branch
000140D8 317C 0000 003A             		move.w	#0,$3A(a0)
000140DE 11FC 0039 D080             		move.b	#$39,($FFFFD080).w ; load TIME object
000140E4 11FC 0039 D0C0             		move.b	#$39,($FFFFD0C0).w ; load OVER object
000140EA 11FC 0002 D09A             		move.b	#2,($FFFFD09A).w
000140F0 11FC 0003 D0DA             		move.b	#3,($FFFFD0DA).w
000140F6 60C2                       		bra.s	loc_138C2
000140F8                            ; ===========================================================================
000140F8                            
000140F8                            locret_13900:
000140F8 4E75                       		rts	
000140FA                            ; End of function GameOver
000140FA                            
000140FA                            ; ===========================================================================
000140FA                            ; ---------------------------------------------------------------------------
000140FA                            ; Sonic	when the level is restarted
000140FA                            ; ---------------------------------------------------------------------------
000140FA                            
000140FA                            Obj01_ResetLevel:			; XREF: Obj01_Index
000140FA 4A68 003A                  		tst.w	$3A(a0)
000140FE 6700                       		beq.s	locret_13914
00014100 5368 003A                  		subq.w	#1,$3A(a0)	; subtract 1 from time delay
00014104 6600                       		bne.s	locret_13914
00014106 31FC 0001 FE02             		move.w	#1,($FFFFFE02).w ; restart the level
0001410C                            
0001410C                            locret_13914:
0001410C 4E75                       		rts	
0001410E                            
0001410E                            ; ---------------------------------------------------------------------------
0001410E                            ; Subroutine to	make Sonic run around loops (GHZ/SLZ)
0001410E                            ; ---------------------------------------------------------------------------
0001410E                            
0001410E                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0001410E                            
0001410E                            
0001410E                            Sonic_Loops:				; XREF: Obj01_Control
0001410E 0C38 0003 FE10             		cmpi.b	#3,($FFFFFE10).w ; is level SLZ	?
00014114 6700                       		beq.s	loc_13926	; if yes, branch
00014116 4A38 FE10                  		tst.b	($FFFFFE10).w	; is level GHZ ?
0001411A 6600 0000                  		bne.w	locret_139C2	; if not, branch
0001411E                            
0001411E                            loc_13926:
0001411E 3028 000C                  		move.w	$C(a0),d0
00014122 E248                       		lsr.w	#1,d0
00014124 0240 0380                  		andi.w	#$380,d0
00014128 1228 0008                  		move.b	8(a0),d1
0001412C 0241 007F                  		andi.w	#$7F,d1
00014130 D041                       		add.w	d1,d0
00014132 43F8 A400                  		lea	($FFFFA400).w,a1
00014136 1231 0000                  		move.b	(a1,d0.w),d1	; d1 is	the 256x256 tile Sonic is currently on
0001413A B238 F7AE                  		cmp.b	($FFFFF7AE).w,d1
0001413E 6700 FA66                  		beq.w	Obj01_ChkRoll
00014142 B238 F7AF                  		cmp.b	($FFFFF7AF).w,d1
00014146 6700 FA5E                  		beq.w	Obj01_ChkRoll
0001414A B238 F7AC                  		cmp.b	($FFFFF7AC).w,d1
0001414E 6700                       		beq.s	loc_13976
00014150 B238 F7AD                  		cmp.b	($FFFFF7AD).w,d1
00014154 6700                       		beq.s	loc_13966
00014156 08A8 0006 0001             		bclr	#6,1(a0)
0001415C 4E75                       		rts	
0001415E                            ; ===========================================================================
0001415E                            
0001415E                            loc_13966:
0001415E 0828 0001 0022             		btst	#1,$22(a0)
00014164 6700                       		beq.s	loc_13976
00014166 08A8 0006 0001             		bclr	#6,1(a0)	; send Sonic to	high plane
0001416C 4E75                       		rts	
0001416E                            ; ===========================================================================
0001416E                            
0001416E                            loc_13976:
0001416E 3428 0008                  		move.w	8(a0),d2
00014172 0C02 002C                  		cmpi.b	#$2C,d2
00014176 6400                       		bcc.s	loc_13988
00014178 08A8 0006 0001             		bclr	#6,1(a0)	; send Sonic to	high plane
0001417E 4E75                       		rts	
00014180                            ; ===========================================================================
00014180                            
00014180                            loc_13988:
00014180 0C02 00E0                  		cmpi.b	#-$20,d2
00014184 6500                       		bcs.s	loc_13996
00014186 08E8 0006 0001             		bset	#6,1(a0)	; send Sonic to	low plane
0001418C 4E75                       		rts	
0001418E                            ; ===========================================================================
0001418E                            
0001418E                            loc_13996:
0001418E 0828 0006 0001             		btst	#6,1(a0)
00014194 6600                       		bne.s	loc_139B2
00014196 1228 0026                  		move.b	$26(a0),d1
0001419A 6700                       		beq.s	locret_139C2
0001419C 0C01 0080                  		cmpi.b	#-$80,d1
000141A0 6200                       		bhi.s	locret_139C2
000141A2 08E8 0006 0001             		bset	#6,1(a0)	; send Sonic to	low plane
000141A8 4E75                       		rts	
000141AA                            ; ===========================================================================
000141AA                            
000141AA                            loc_139B2:
000141AA 1228 0026                  		move.b	$26(a0),d1
000141AE 0C01 0080                  		cmpi.b	#-$80,d1
000141B2 6300                       		bls.s	locret_139C2
000141B4 08A8 0006 0001             		bclr	#6,1(a0)	; send Sonic to	high plane
000141BA                            
000141BA                            locret_139C2:
000141BA 4E75                       		rts	
000141BC                            ; End of function Sonic_Loops
000141BC                            
000141BC                            ; ---------------------------------------------------------------------------
000141BC                            ; Subroutine to	animate	Sonic's sprites
000141BC                            ; ---------------------------------------------------------------------------
000141BC                            
000141BC                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000141BC                            
000141BC                            Player_Anim:
000141BC 0000 0000                  	dc.l	SonicAniData
000141C0 0000 0000                  	dc.l	SonicAniData ; gronic
000141C4                            	; Insert more animation data for other characters here
000141C4                            	
000141C4                            Sonic_Animate:				; XREF: Obj01_Control; et al
000141C4 7000                       			moveq	#0,d0
000141C6 1038 FFE8                  		move.b	(v_character),d0
000141CA E548                       		lsl.w	#2,d0
000141CC 43FA FFEE                  		lea 	Player_Anim(pc),a1
000141D0                            		
000141D0 2271 0000                  		movea.l	(a1,d0.w),a1	; load Sonic dplc
000141D4                            	
000141D4 7000                       		moveq	#0,d0
000141D6 1028 001C                  		move.b	$1C(a0),d0
000141DA B028 001D                  		cmp.b	$1D(a0),d0	; is animation set to restart?
000141DE 6700                       		beq.s	SAnim_Do	; if not, branch
000141E0 1140 001D                  		move.b	d0,$1D(a0)	; set to "no restart"
000141E4 117C 0000 001B             		move.b	#0,$1B(a0)	; reset	animation
000141EA 117C 0000 001E             		move.b	#0,$1E(a0)	; reset	frame duration
000141F0                            
000141F0                            SAnim_Do:
000141F0 D040                       		add.w	d0,d0
000141F2 D2F1 0000                  		adda.w	(a1,d0.w),a1	; jump to appropriate animation	script
000141F6 1011                       		move.b	(a1),d0
000141F8 6B00                       		bmi.s	SAnim_WalkRun	; if animation is walk/run/roll/jump, branch
000141FA 1228 0022                  		move.b	$22(a0),d1
000141FE 0201 0001                  		andi.b	#1,d1
00014202 0228 00FC 0001             		andi.b	#$FC,1(a0)
00014208 8328 0001                  		or.b	d1,1(a0)
0001420C 5328 001E                  		subq.b	#1,$1E(a0)	; subtract 1 from frame	duration
00014210 6A00                       		bpl.s	SAnim_Delay	; if time remains, branch
00014212 1140 001E                  		move.b	d0,$1E(a0)	; load frame duration
00014216                            
00014216                            SAnim_Do2:
00014216 7200                       		moveq	#0,d1
00014218 1228 001B                  		move.b	$1B(a0),d1	; load current frame number
0001421C 1031 1001                  		move.b	1(a1,d1.w),d0	; read sprite number from script
00014220 6B00                       		bmi.s	SAnim_End_FF	; if animation is complete, branch
00014222                            
00014222                            SAnim_Next:
00014222 1140 001A                  		move.b	d0,$1A(a0)	; load sprite number
00014226 5228 001B                  		addq.b	#1,$1B(a0)	; next frame number
0001422A                            
0001422A                            SAnim_Delay:
0001422A 4E75                       		rts	
0001422C                            ; ===========================================================================
0001422C                            
0001422C                            SAnim_End_FF:
0001422C 5200                       		addq.b	#1,d0		; is the end flag = $FF	?
0001422E 6600                       		bne.s	SAnim_End_FE	; if not, branch
00014230 117C 0000 001B             		move.b	#0,$1B(a0)	; restart the animation
00014236 1029 0001                  		move.b	1(a1),d0	; read sprite number
0001423A 60E6                       		bra.s	SAnim_Next
0001423C                            ; ===========================================================================
0001423C                            
0001423C                            SAnim_End_FE:
0001423C 5200                       		addq.b	#1,d0		; is the end flag = $FE	?
0001423E 6600                       		bne.s	SAnim_End_FD	; if not, branch
00014240 1031 1002                  		move.b	2(a1,d1.w),d0	; read the next	byte in	the script
00014244 9128 001B                  		sub.b	d0,$1B(a0)	; jump back d0 bytes in	the script
00014248 9200                       		sub.b	d0,d1
0001424A 1031 1001                  		move.b	1(a1,d1.w),d0	; read sprite number
0001424E 60D2                       		bra.s	SAnim_Next
00014250                            ; ===========================================================================
00014250                            
00014250                            SAnim_End_FD:
00014250 5200                       		addq.b	#1,d0		; is the end flag = $FD	?
00014252 6600                       		bne.s	SAnim_End	; if not, branch
00014254 1171 1002 001C             		move.b	2(a1,d1.w),$1C(a0) ; read next byte, run that animation
0001425A                            
0001425A                            SAnim_End:
0001425A 4E75                       		rts	
0001425C                            ; ===========================================================================
0001425C                            
0001425C                            SAnim_WalkRun:				; XREF: SAnim_Do
0001425C 5328 001E                  		subq.b	#1,$1E(a0)	; subtract 1 from frame	duration
00014260 6AC8                       		bpl.s	SAnim_Delay	; if time remains, branch
00014262 5200                       		addq.b	#1,d0		; is animation walking/running?
00014264 6600 0000                  		bne.w	SAnim_RollJump	; if not, branch
00014268 7200                       		moveq	#0,d1
0001426A 1028 0026                  		move.b	$26(a0),d0	; get Sonic's angle
0001426E 1428 0022                  		move.b	$22(a0),d2
00014272 0202 0001                  		andi.b	#1,d2		; is Sonic mirrored horizontally?
00014276 6600                       		bne.s	loc_13A70	; if yes, branch
00014278 4600                       		not.b	d0		; reverse angle
0001427A                            
0001427A                            loc_13A70:
0001427A 0600 0010                  		addi.b	#$10,d0		; add $10 to angle
0001427E 6A00                       		bpl.s	loc_13A78	; if angle is $0-$7F, branch
00014280 7203                       		moveq	#3,d1
00014282                            
00014282                            loc_13A78:
00014282 0228 00FC 0001             		andi.b	#$FC,1(a0)
00014288 B302                       		eor.b	d1,d2
0001428A 8528 0001                  		or.b	d2,1(a0)
0001428E 0828 0005 0022             		btst	#5,$22(a0)
00014294 6600 0000                  		bne.w	SAnim_Push
00014298 E808                       		lsr.b	#4,d0		; divide angle by $10
0001429A 0200 0006                  		andi.b	#6,d0		; angle	must be	0, 2, 4	or 6
0001429E 3428 0014                  		move.w	$14(a0),d2	; get Sonic's speed
000142A2 6A00                       		bpl.s	loc_13A9C
000142A4 4442                       		neg.w	d2
000142A6                            
000142A6                            loc_13A9C:
000142A6 43F9 0000 0000             		lea	(SonAni_Run).l,a1 ; use	running	animation
000142AC 0C42 0600                  		cmpi.w	#$600,d2	; is Sonic at running speed?
000142B0 6400                       		bcc.s	loc_13AB4	; if yes, branch
000142B2 43F9 0000 0000             		lea	(SonAni_Walk).l,a1 ; use walking animation
000142B8 1200                       		move.b	d0,d1
000142BA E209                       		lsr.b	#1,d1
000142BC D001                       		add.b	d1,d0
000142BE                            
000142BE                            loc_13AB4:
000142BE D000                       		add.b	d0,d0
000142C0 1600                       		move.b	d0,d3
000142C2 4442                       		neg.w	d2
000142C4 0642 0800                  		addi.w	#$800,d2
000142C8 6A00                       		bpl.s	loc_13AC2
000142CA 7400                       		moveq	#0,d2
000142CC                            
000142CC                            loc_13AC2:
000142CC E04A                       		lsr.w	#8,d2
000142CE 1142 001E                  		move.b	d2,$1E(a0)	; modify frame duration
000142D2 6100 FF42                  		bsr.w	SAnim_Do2
000142D6 D728 001A                  		add.b	d3,$1A(a0)	; modify frame number
000142DA 4E75                       		rts	
000142DC                            ; ===========================================================================
000142DC                            
000142DC                            SAnim_RollJump:				; XREF: SAnim_WalkRun
000142DC 5200                       		addq.b	#1,d0		; is animation rolling/jumping?
000142DE 6600                       		bne.s	SAnim_Push	; if not, branch
000142E0 3428 0014                  		move.w	$14(a0),d2	; get Sonic's speed
000142E4 6A00                       		bpl.s	loc_13ADE
000142E6 4442                       		neg.w	d2
000142E8                            
000142E8                            loc_13ADE:
000142E8 43F9 0000 0000             		lea	(SonAni_Roll2).l,a1 ; use fast animation
000142EE 0C42 0600                  		cmpi.w	#$600,d2	; is Sonic moving fast?
000142F2 6400                       		bcc.s	loc_13AF0	; if yes, branch
000142F4 43F9 0000 0000             		lea	(SonAni_Roll).l,a1 ; use slower	animation
000142FA                            
000142FA                            loc_13AF0:
000142FA 4442                       		neg.w	d2
000142FC 0642 0400                  		addi.w	#$400,d2
00014300 6A00                       		bpl.s	loc_13AFA
00014302 7400                       		moveq	#0,d2
00014304                            
00014304                            loc_13AFA:
00014304 E04A                       		lsr.w	#8,d2
00014306 1142 001E                  		move.b	d2,$1E(a0)	; modify frame duration
0001430A 1228 0022                  		move.b	$22(a0),d1
0001430E 0201 0001                  		andi.b	#1,d1
00014312 0228 00FC 0001             		andi.b	#$FC,1(a0)
00014318 8328 0001                  		or.b	d1,1(a0)
0001431C 6000 FEF8                  		bra.w	SAnim_Do2
00014320                            ; ===========================================================================
00014320                            
00014320                            SAnim_Push:				; XREF: SAnim_RollJump
00014320 3428 0014                  		move.w	$14(a0),d2	; get Sonic's speed
00014324 6B00                       		bmi.s	loc_13B1E
00014326 4442                       		neg.w	d2
00014328                            
00014328                            loc_13B1E:
00014328 0642 0800                  		addi.w	#$800,d2
0001432C 6A00                       		bpl.s	loc_13B26
0001432E 7400                       		moveq	#0,d2
00014330                            
00014330                            loc_13B26:
00014330 EC4A                       		lsr.w	#6,d2
00014332 1142 001E                  		move.b	d2,$1E(a0)	; modify frame duration
00014336 43F9 0000 0000             		lea	(SonAni_Push).l,a1
0001433C 1228 0022                  		move.b	$22(a0),d1
00014340 0201 0001                  		andi.b	#1,d1
00014344 0228 00FC 0001             		andi.b	#$FC,1(a0)
0001434A 8328 0001                  		or.b	d1,1(a0)
0001434E 6000 FEC6                  		bra.w	SAnim_Do2
00014352                            ; End of function Sonic_Animate
00014352                            
00014352                            ; ===========================================================================
00014352                            SonicAniData:
00014352                            	include "_anim\Sonic.asm"
00014352                            ; ---------------------------------------------------------------------------
00014352                            ; Animation script - Sonic
00014352                            ; ---------------------------------------------------------------------------
00014352 0000                       		dc.w SonAni_Walk-SonicAniData
00014354 0000                       		dc.w SonAni_Run-SonicAniData
00014356 0000                       		dc.w SonAni_Roll-SonicAniData
00014358 0000                       		dc.w SonAni_Roll2-SonicAniData
0001435A 0000                       		dc.w SonAni_Push-SonicAniData
0001435C 0000                       		dc.w SonAni_Wait-SonicAniData
0001435E 0000                       		dc.w SonAni_Balance-SonicAniData
00014360 0000                       		dc.w SonAni_LookUp-SonicAniData
00014362 0000                       		dc.w SonAni_Duck-SonicAniData
00014364 0000                       		dc.w SonAni_Warp1-SonicAniData
00014366 0000                       		dc.w SonAni_Warp2-SonicAniData
00014368 0000                       		dc.w SonAni_Warp3-SonicAniData
0001436A 0000                       		dc.w SonAni_Warp4-SonicAniData
0001436C 0000                       		dc.w SonAni_Stop-SonicAniData
0001436E 0000                       		dc.w SonAni_Float1-SonicAniData
00014370 0000                       		dc.w SonAni_Float2-SonicAniData
00014372 0000                       		dc.w SonAni_Spring-SonicAniData
00014374 0000                       		dc.w SonAni_LZHang-SonicAniData
00014376 0000                       		dc.w SonAni_Leap1-SonicAniData
00014378 0000                       		dc.w SonAni_Leap2-SonicAniData
0001437A 0000                       		dc.w SonAni_Surf-SonicAniData
0001437C 0000                       		dc.w SonAni_Bubble-SonicAniData
0001437E 0000                       		dc.w SonAni_Death1-SonicAniData
00014380 0000                       		dc.w SonAni_Drown-SonicAniData
00014382 0000                       		dc.w SonAni_Death2-SonicAniData
00014384 0000                       		dc.w SonAni_Shrink-SonicAniData
00014386 0000                       		dc.w SonAni_Hurt-SonicAniData
00014388 0000                       		dc.w SonAni_LZSlide-SonicAniData
0001438A 0000                       		dc.w SonAni_Blank-SonicAniData
0001438C 0000                       		dc.w SonAni_Float3-SonicAniData
0001438E 0000                       		dc.w SonAni_Float4-SonicAniData
00014390 FF08 095A 0A0B 0659 07FF   SonAni_Walk:	dc.b $FF, 8, 9, $5A, $A, $B, 6, $59, 7, $FF
0001439A FF1E 1F20 21FF FFFF        SonAni_Run:	dc.b $FF, $1E, $1F, $20, $21, $FF, $FF,	$FF
000143A2 FE2E 2F30 3132 FFFF        SonAni_Roll:	dc.b $FE, $2E, $2F, $30, $31, $32, $FF,	$FF
000143AA FE2E 2F32 3031 32FF        SonAni_Roll2:	dc.b $FE, $2E, $2F, $32, $30, $31, $32,	$FF
000143B2 FD45 4647 48FF FFFF        SonAni_Push:	dc.b $FD, $45, $46, $47, $48, $FF, $FF,	$FF
000143BA 1701 0101 0101 0101 0101+  SonAni_Wait:	dc.b $17, 1, 1,	1, 1, 1, 1, 1, 1, 1, 1,	1, 1, 3, 2, 2, 2, 3, 4, $FE, 2, 0
000143D0 1E3A 3BFF                  SonAni_Balance:	dc.b $1E, $3A, $3B, $FF
000143D4 3F05 FF00                  SonAni_LookUp:	dc.b $3F, 5, $FF, 0
000143D8 3F39 FF00                  SonAni_Duck:	dc.b $3F, $39, $FF, 0
000143DC 3F33 FF00                  SonAni_Warp1:	dc.b $3F, $33, $FF, 0
000143E0 3F34 FF00                  SonAni_Warp2:	dc.b $3F, $34, $FF, 0
000143E4 3F35 FF00                  SonAni_Warp3:	dc.b $3F, $35, $FF, 0
000143E8 3F36 FF00                  SonAni_Warp4:	dc.b $3F, $36, $FF, 0
000143EC 0737 38FF                  SonAni_Stop:	dc.b 7,	$37, $38, $FF
000143F0 073C 3FFF                  SonAni_Float1:	dc.b 7,	$3C, $3F, $FF
000143F4 073C 3D53 3E54 FF00        SonAni_Float2:	dc.b 7,	$3C, $3D, $53, $3E, $54, $FF, 0
000143FC 2F40 FD00                  SonAni_Spring:	dc.b $2F, $40, $FD, 0
00014400 0441 42FF                  SonAni_LZHang:	dc.b 4,	$41, $42, $FF
00014404 0F43 4343 FE01             SonAni_Leap1:	dc.b $F, $43, $43, $43,	$FE, 1
0001440A 0F43 44FE 0100             SonAni_Leap2:	dc.b $F, $43, $44, $FE,	1, 0
00014410 3F49 FF00                  SonAni_Surf:	dc.b $3F, $49, $FF, 0
00014414 0B56 560A 0BFD 0000        SonAni_Bubble:	dc.b $B, $56, $56, $A, $B, $FD,	0, 0
0001441C 204B FF00                  SonAni_Death1:	dc.b $20, $4B, $FF, 0
00014420 2F4C FF00                  SonAni_Drown:	dc.b $2F, $4C, $FF, 0
00014424 034D FF00                  SonAni_Death2:	dc.b 3,	$4D, $FF, 0
00014428 034E 4F50 5152 00FE 0100   SonAni_Shrink:	dc.b 3,	$4E, $4F, $50, $51, $52, 0, $FE, 1, 0
00014432 035B FF00                  SonAni_Hurt:	dc.b 3,	$5B, $FF, 0
00014436 0755 57FF                  SonAni_LZSlide:	dc.b 7, $55, $57, $FF
0001443A 7700 FD00                  SonAni_Blank:	dc.b $77, 0, $FD, 0
0001443E 033C 3D53 3E54 FF00        SonAni_Float3:	dc.b 3,	$3C, $3D, $53, $3E, $54, $FF, 0
00014446 033C FD00                  SonAni_Float4:	dc.b 3,	$3C, $FD, 0
0001444A                            		even
0001444A                            		even
0001444A                            
0001444A                            ; ---------------------------------------------------------------------------
0001444A                            ; Sonic	pattern	loading	subroutine
0001444A                            ; ---------------------------------------------------------------------------
0001444A                            
0001444A                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0001444A                            Player_DPLC:
0001444A 0000 0000                  	dc.l	SonicDynPLC
0001444E 0000 0000                  	dc.l	SonicDynPLC ; gronic
00014452                            	; add pointers for player dplc here
00014452                            Player_Art:
00014452 0000 0000                  	dc.l	Art_Sonic
00014456 0000 0000                  	dc.l	Art_Sonic ; gronic
0001445A                            	; add pointers for player art here
0001445A                            
0001445A                            LoadSonicDynPLC:			; XREF: Obj01_Control; et al
0001445A 7000                       		moveq	#0,d0
0001445C 1028 001A                  		move.b	$1A(a0),d0	; load frame number
00014460 B038 F766                  		cmp.b	($FFFFF766).w,d0
00014464 6700                       		beq.s	locret_13C96
00014466 11C0 F766                  		move.b	d0,($FFFFF766).w
0001446A                            		
0001446A 323C 0000                  		move.w	#0,d1
0001446E 1238 FFE8                  		move.b	(v_character),d1
00014472 E549                       		lsl.w	#2,d1
00014474 45FA FFD4                  		lea 	Player_DPLC(pc),a2
00014478                            
00014478 2472 1000                  		movea.l	(a2,d1.w),a2	; load Sonic dplc
0001447C                            		
0001447C D040                       		add.w	d0,d0
0001447E D4F2 0000                  		adda.w	(a2,d0.w),a2
00014482 7200                       		moveq	#0,d1
00014484 121A                       		move.b	(a2)+,d1	; read "number of entries" value
00014486 5301                       		subq.b	#1,d1
00014488 6B00                       		bmi.s	locret_13C96
0001448A 47F8 C800                  		lea	($FFFFC800).w,a3
0001448E 11FC 0001 F767             		move.b	#1,($FFFFF767).w
00014494                            
00014494                            SPLC_ReadEntry:
00014494 303C 0000                  		move.w	#0,d0
00014498 1038 FFE8                  		move.b	(v_character),d0
0001449C E548                       		lsl.w	#2,d0
0001449E 43FA FFB2                  		lea 	Player_Art(pc),a1
000144A2                            
000144A2 2271 0000                  		movea.l	(a1,d0.w),a1	; load Sonic art
000144A6                            
000144A6 7400                       		moveq	#0,d2
000144A8 141A                       		move.b	(a2)+,d2
000144AA 3002                       		move.w	d2,d0
000144AC E808                       		lsr.b	#4,d0
000144AE E14A                       		lsl.w	#8,d2
000144B0 141A                       		move.b	(a2)+,d2
000144B2 EB4A                       		lsl.w	#5,d2
000144B4 D3C2                       		adda.l	d2,a1
000144B6                            
000144B6                            SPLC_LoadTile:
000144B6 4CD9 707C                  		movem.l	(a1)+,d2-d6/a4-a6
000144BA 48D3 707C                  		movem.l	d2-d6/a4-a6,(a3)
000144BE 47EB 0020                  		lea	$20(a3),a3	; next tile
000144C2 51C8 FFF2                  		dbf	d0,SPLC_LoadTile ; repeat for number of	tiles
000144C6                            
000144C6 51C9 FFCC                  		dbf	d1,SPLC_ReadEntry ; repeat for number of entries
000144CA                            
000144CA                            locret_13C96:
000144CA 4E75                       		rts	
000144CC                            ; End of function LoadSonicDynPLC
000144CC                            
000144CC                            ; ===========================================================================
000144CC                            ; ---------------------------------------------------------------------------
000144CC                            ; Object 0A - drowning countdown numbers and small bubbles (LZ)
000144CC                            ; ---------------------------------------------------------------------------
000144CC                            
000144CC                            Obj0A:					; XREF: Obj_Index
000144CC 7000                       		moveq	#0,d0
000144CE 1028 0024                  		move.b	$24(a0),d0
000144D2 323B 0000                  		move.w	Obj0A_Index(pc,d0.w),d1
000144D6 4EFB 1000                  		jmp	Obj0A_Index(pc,d1.w)
000144DA                            ; ===========================================================================
000144DA 0000 0000                  Obj0A_Index:	dc.w Obj0A_Main-Obj0A_Index, Obj0A_Animate-Obj0A_Index
000144DE 0000 0000                  		dc.w Obj0A_ChkWater-Obj0A_Index, Obj0A_Display-Obj0A_Index
000144E2 0000 0000                  		dc.w Obj0A_Delete2-Obj0A_Index,	Obj0A_Countdown-Obj0A_Index
000144E6 0000 0000                  		dc.w Obj0A_AirLeft-Obj0A_Index,	Obj0A_Display-Obj0A_Index
000144EA 0000                       		dc.w Obj0A_Delete2-Obj0A_Index
000144EC                            ; ===========================================================================
000144EC                            
000144EC                            Obj0A_Main:				; XREF: Obj0A_Index
000144EC 5428 0024                  		addq.b	#2,$24(a0)
000144F0 217C 0001 30F4 0004        		move.l	#Map_obj64,4(a0)
000144F8 317C 8348 0002             		move.w	#$8348,2(a0)
000144FE 117C 0084 0001             		move.b	#$84,1(a0)
00014504 117C 0010 0019             		move.b	#$10,$19(a0)
0001450A 117C 0001 0018             		move.b	#1,$18(a0)
00014510 1028 0028                  		move.b	$28(a0),d0
00014514 6A00                       		bpl.s	loc_13D00
00014516 5028 0024                  		addq.b	#8,$24(a0)
0001451A 217C 0000 0000 0004        		move.l	#Map_obj0A,4(a0)
00014522 317C 0440 0002             		move.w	#$440,2(a0)
00014528 0240 007F                  		andi.w	#$7F,d0
0001452C 1140 0033                  		move.b	d0,$33(a0)
00014530 6000 0000                  		bra.w	Obj0A_Countdown
00014534                            ; ===========================================================================
00014534                            
00014534                            loc_13D00:
00014534 1140 001C                  		move.b	d0,$1C(a0)
00014538 3168 0008 0030             		move.w	8(a0),$30(a0)
0001453E 317C FF78 0012             		move.w	#-$88,$12(a0)
00014544                            
00014544                            Obj0A_Animate:				; XREF: Obj0A_Index
00014544 43F9 0000 0000             		lea	(Ani_obj0A).l,a1
0001454A 4EB9 0000 AE22             		jsr	AnimateSprite
00014550                            
00014550                            Obj0A_ChkWater:				; XREF: Obj0A_Index
00014550 3038 F646                  		move.w	($FFFFF646).w,d0
00014554 B068 000C                  		cmp.w	$C(a0),d0	; has bubble reached the water surface?
00014558 6500                       		bcs.s	Obj0A_Wobble	; if not, branch
0001455A 117C 0006 0024             		move.b	#6,$24(a0)
00014560 5E28 001C                  		addq.b	#7,$1C(a0)
00014564 0C28 000D 001C             		cmpi.b	#$D,$1C(a0)
0001456A 6700                       		beq.s	Obj0A_Display
0001456C 6000                       		bra.s	Obj0A_Display
0001456E                            ; ===========================================================================
0001456E                            
0001456E                            Obj0A_Wobble:
0001456E 4A38 F7C7                  		tst.b	($FFFFF7C7).w
00014572 6700                       		beq.s	loc_13D44
00014574 5868 0030                  		addq.w	#4,$30(a0)
00014578                            
00014578                            loc_13D44:
00014578 1028 0026                  		move.b	$26(a0),d0
0001457C 5228 0026                  		addq.b	#1,$26(a0)
00014580 0240 007F                  		andi.w	#$7F,d0
00014584 43F9 0000 0000             		lea	(Obj0A_WobbleData).l,a1
0001458A 1031 0000                  		move.b	(a1,d0.w),d0
0001458E 4880                       		ext.w	d0
00014590 D068 0030                  		add.w	$30(a0),d0
00014594 3140 0008                  		move.w	d0,8(a0)
00014598 6100                       		bsr.s	Obj0A_ShowNumber
0001459A 4EBA 97A0                  		jsr	SpeedToPos
0001459E 4A28 0001                  		tst.b	1(a0)
000145A2 6A00                       		bpl.s	Obj0A_Delete
000145A4 4EFA 97BC                  		jmp	DisplaySprite
000145A8                            ; ===========================================================================
000145A8                            
000145A8                            Obj0A_Delete:
000145A8 4EFA 97F4                  		jmp	DeleteObject
000145AC                            ; ===========================================================================
000145AC                            
000145AC                            Obj0A_Display:				; XREF: Obj0A_Index
000145AC 6100                       		bsr.s	Obj0A_ShowNumber
000145AE 43F9 0000 0000             		lea	(Ani_obj0A).l,a1
000145B4 4EB9 0000 AE22             		jsr	AnimateSprite
000145BA 4EFA 97A6                  		jmp	DisplaySprite
000145BE                            ; ===========================================================================
000145BE                            
000145BE                            Obj0A_Delete2:				; XREF: Obj0A_Index
000145BE 4EFA 97DE                  		jmp	DeleteObject
000145C2                            ; ===========================================================================
000145C2                            
000145C2                            Obj0A_AirLeft:				; XREF: Obj0A_Index
000145C2 0C78 000C FE14             		cmpi.w	#$C,($FFFFFE14).w ; check air remaining
000145C8 6200                       		bhi.s	Obj0A_Delete3	; if higher than $C, branch
000145CA 5368 0038                  		subq.w	#1,$38(a0)
000145CE 6600                       		bne.s	Obj0A_Display2
000145D0 117C 000E 0024             		move.b	#$E,$24(a0)
000145D6 5E28 001C                  		addq.b	#7,$1C(a0)
000145DA 60D0                       		bra.s	Obj0A_Display
000145DC                            ; ===========================================================================
000145DC                            
000145DC                            Obj0A_Display2:
000145DC 43F9 0000 0000             		lea	(Ani_obj0A).l,a1
000145E2 4EB9 0000 AE22             		jsr	AnimateSprite
000145E8 4A28 0001                  		tst.b	1(a0)
000145EC 6A00                       		bpl.s	Obj0A_Delete3
000145EE 4EFA 9772                  		jmp	DisplaySprite
000145F2                            ; ===========================================================================
000145F2                            
000145F2                            Obj0A_Delete3:
000145F2 4EFA 97AA                  		jmp	DeleteObject
000145F6                            ; ===========================================================================
000145F6                            
000145F6                            Obj0A_ShowNumber:			; XREF: Obj0A_Wobble; Obj0A_Display
000145F6 4A68 0038                  		tst.w	$38(a0)
000145FA 6700                       		beq.s	locret_13E1A
000145FC 5368 0038                  		subq.w	#1,$38(a0)
00014600 6600                       		bne.s	locret_13E1A
00014602 0C28 0007 001C             		cmpi.b	#7,$1C(a0)
00014608 6400                       		bcc.s	locret_13E1A
0001460A 317C 000F 0038             		move.w	#$F,$38(a0)
00014610 4268 0012                  		clr.w	$12(a0)
00014614 117C 0080 0001             		move.b	#$80,1(a0)
0001461A 3028 0008                  		move.w	8(a0),d0
0001461E 9078 F700                  		sub.w	($FFFFF700).w,d0
00014622 0640 0080                  		addi.w	#$80,d0
00014626 3140 0008                  		move.w	d0,8(a0)
0001462A 3028 000C                  		move.w	$C(a0),d0
0001462E 9078 F704                  		sub.w	($FFFFF704).w,d0
00014632 0640 0080                  		addi.w	#$80,d0
00014636 3140 000A                  		move.w	d0,$A(a0)
0001463A 117C 000C 0024             		move.b	#$C,$24(a0)
00014640                            
00014640                            locret_13E1A:
00014640 4E75                       		rts	
00014642                            ; ===========================================================================
00014642                            Obj0A_WobbleData:
00014642 0000 0000 0000 0101 0101+  		dc.b 0, 0, 0, 0, 0, 0,	1, 1, 1, 1, 1, 2, 2, 2,	2, 2, 2
00014653 0203 0303 0303 0303 0303+  		dc.b 2,	3, 3, 3, 3, 3, 3, 3, 3,	3, 3, 3, 3, 3, 3, 4, 3
00014664 0303 0303 0303 0303 0303+  		dc.b 3,	3, 3, 3, 3, 3, 3, 3, 3,	3, 3, 3, 3, 2, 2, 2, 2
00014675 0202 0201 0101 0101 0000+  		dc.b 2,	2, 2, 1, 1, 1, 1, 1, 0,	0, 0, 0, 0, 0, -1, -1
00014685 FFFF FFFE FEFE FEFE FDFD+  		dc.b -1, -1, -1, -2, -2, -2, -2, -2, -3, -3, -3, -3, -3
00014692 FDFD FCFC FCFC FCFC FCFC+  		dc.b -3, -3, -4, -4, -4, -4, -4, -4, -4, -4, -4, -4, -4
0001469F FCFC FCFC FCFC FCFC FCFC+  		dc.b -4, -4, -4, -4, -4, -4, -4, -4, -4, -4, -4, -4, -4
000146AC FCFC FCFC FCFD FDFD FDFD+  		dc.b -4, -4, -4, -4, -4, -3, -3, -3, -3, -3, -3, -3, -2
000146B9 FEFE FEFE FFFF FFFF FF     		dc.b -2, -2, -2, -2, -1, -1, -1, -1, -1
000146C2                            ; ===========================================================================
000146C2                            
000146C2                            Obj0A_Countdown:			; XREF: Obj0A_Index
000146C2 4A68 002C                  		tst.w	$2C(a0)
000146C6 6600 0000                  		bne.w	loc_13F86
000146CA 0C38 0006 D024             		cmpi.b	#6,($FFFFD024).w
000146D0 6400 0000                  		bcc.w	locret_1408C
000146D4 0838 0006 D022             		btst	#6,($FFFFD022).w
000146DA 6700 0000                  		beq.w	locret_1408C
000146DE 5368 0038                  		subq.w	#1,$38(a0)
000146E2 6A00 0000                  		bpl.w	loc_13FAC
000146E6 317C 003B 0038             		move.w	#59,$38(a0)
000146EC 317C 0001 0036             		move.w	#1,$36(a0)
000146F2 4EB9 0000 2C3E             		jsr	(RandomNumber).l
000146F8 0240 0001                  		andi.w	#1,d0
000146FC 1140 0034                  		move.b	d0,$34(a0)
00014700 3038 FE14                  		move.w	($FFFFFE14).w,d0 ; check air remaining
00014704 0C40 0019                  		cmpi.w	#$19,d0
00014708 6700                       		beq.s	Obj0A_WarnSound	; play sound if	air is $19
0001470A 0C40 0014                  		cmpi.w	#$14,d0
0001470E 6700                       		beq.s	Obj0A_WarnSound
00014710 0C40 000F                  		cmpi.w	#$F,d0
00014714 6700                       		beq.s	Obj0A_WarnSound
00014716 0C40 000C                  		cmpi.w	#$C,d0
0001471A 6200                       		bhi.s	Obj0A_ReduceAir	; if air is above $C, branch
0001471C 6600                       		bne.s	loc_13F02
0001471E 303C 0092                  		move.w	#$92,d0
00014722 4EB9 0000 15BA             		jsr	(PlaySound).l	; play countdown music
00014728                            
00014728                            loc_13F02:
00014728 5328 0032                  		subq.b	#1,$32(a0)
0001472C 6A00                       		bpl.s	Obj0A_ReduceAir
0001472E 1168 0033 0032             		move.b	$33(a0),$32(a0)
00014734 08E8 0007 0036             		bset	#7,$36(a0)
0001473A 6000                       		bra.s	Obj0A_ReduceAir
0001473C                            ; ===========================================================================
0001473C                            
0001473C                            Obj0A_WarnSound:			; XREF: Obj0A_Countdown
0001473C 303C 00C2                  		move.w	#$C2,d0
00014740 4EB9 0000 15C0             		jsr	(PlaySound_Special).l ;	play "ding-ding" warning sound
00014746                            
00014746                            Obj0A_ReduceAir:
00014746 5378 FE14                  		subq.w	#1,($FFFFFE14).w ; subtract 1 from air remaining
0001474A 6400 0000                  		bcc.w	Obj0A_GoMakeItem ; if air is above 0, branch
0001474E 6100 0000                  		bsr.w	ResumeMusic
00014752 11FC 0081 F7C8             		move.b	#$81,($FFFFF7C8).w ; lock controls
00014758 303C 00B2                  		move.w	#$B2,d0
0001475C 4EB9 0000 15C0             		jsr	(PlaySound_Special).l ;	play drowning sound
00014762 117C 000A 0034             		move.b	#$A,$34(a0)
00014768 317C 0001 0036             		move.w	#1,$36(a0)
0001476E 317C 0078 002C             		move.w	#$78,$2C(a0)
00014774 2F08                       		move.l	a0,-(sp)
00014776 41F8 D000                  		lea	($FFFFD000).w,a0
0001477A 6100 F824                  		bsr.w	Sonic_ResetOnFloor
0001477E 117C 0017 001C             		move.b	#$17,$1C(a0)	; use Sonic's drowning animation
00014784 08E8 0001 0022             		bset	#1,$22(a0)
0001478A 08E8 0007 0002             		bset	#7,2(a0)
00014790 317C 0000 0012             		move.w	#0,$12(a0)
00014796 317C 0000 0010             		move.w	#0,$10(a0)
0001479C 317C 0000 0014             		move.w	#0,$14(a0)
000147A2 11FC 0001 F744             		move.b	#1,($FFFFF744).w
000147A8 205F                       		movea.l	(sp)+,a0
000147AA 4E75                       		rts	
000147AC                            ; ===========================================================================
000147AC                            
000147AC                            loc_13F86:
000147AC 5368 002C                  		subq.w	#1,$2C(a0)
000147B0 6600                       		bne.s	loc_13F94
000147B2 11FC 0006 D024             		move.b	#6,($FFFFD024).w
000147B8 4E75                       		rts	
000147BA                            ; ===========================================================================
000147BA                            
000147BA                            loc_13F94:
000147BA 2F08                       		move.l	a0,-(sp)
000147BC 41F8 D000                  		lea	($FFFFD000).w,a0
000147C0 4EBA 957A                  		jsr	SpeedToPos
000147C4 0668 0010 0012             		addi.w	#$10,$12(a0)
000147CA 205F                       		movea.l	(sp)+,a0
000147CC 6000                       		bra.s	loc_13FAC
000147CE                            ; ===========================================================================
000147CE                            
000147CE                            Obj0A_GoMakeItem:			; XREF: Obj0A_ReduceAir
000147CE 6000                       		bra.s	Obj0A_MakeItem
000147D0                            ; ===========================================================================
000147D0                            
000147D0                            loc_13FAC:
000147D0 4A68 0036                  		tst.w	$36(a0)
000147D4 6700 0000                  		beq.w	locret_1408C
000147D8 5368 003A                  		subq.w	#1,$3A(a0)
000147DC 6A00 0000                  		bpl.w	locret_1408C
000147E0                            
000147E0                            Obj0A_MakeItem:
000147E0 4EB9 0000 2C3E             		jsr	(RandomNumber).l
000147E6 0240 000F                  		andi.w	#$F,d0
000147EA 3140 003A                  		move.w	d0,$3A(a0)
000147EE 4EBA 99F8                  		jsr	SingleObjLoad
000147F2 6600 0000                  		bne.w	locret_1408C
000147F6 12BC 000A                  		move.b	#$A,0(a1)	; load object
000147FA 3378 D008 0008             		move.w	($FFFFD008).w,8(a1) ; match X position to Sonic
00014800 7006                       		moveq	#6,d0
00014802 0838 0000 D022             		btst	#0,($FFFFD022).w
00014808 6700                       		beq.s	loc_13FF2
0001480A 4440                       		neg.w	d0
0001480C 137C 0040 0026             		move.b	#$40,$26(a1)
00014812                            
00014812                            loc_13FF2:
00014812 D169 0008                  		add.w	d0,8(a1)
00014816 3378 D00C 000C             		move.w	($FFFFD00C).w,$C(a1)
0001481C 137C 0006 0028             		move.b	#6,$28(a1)
00014822 4A68 002C                  		tst.w	$2C(a0)
00014826 6700 0000                  		beq.w	loc_1403E
0001482A 0268 0007 003A             		andi.w	#7,$3A(a0)
00014830 0668 0000 003A             		addi.w	#0,$3A(a0)
00014836 3038 D00C                  		move.w	($FFFFD00C).w,d0
0001483A 0440 000C                  		subi.w	#$C,d0
0001483E 3340 000C                  		move.w	d0,$C(a1)
00014842 4EB9 0000 2C3E             		jsr	(RandomNumber).l
00014848 1340 0026                  		move.b	d0,$26(a1)
0001484C 3038 FE04                  		move.w	($FFFFFE04).w,d0
00014850 0200 0003                  		andi.b	#3,d0
00014854 6600                       		bne.s	loc_14082
00014856 137C 000E 0028             		move.b	#$E,$28(a1)
0001485C 6000                       		bra.s	loc_14082
0001485E                            ; ===========================================================================
0001485E                            
0001485E                            loc_1403E:
0001485E 0828 0007 0036             		btst	#7,$36(a0)
00014864 6700                       		beq.s	loc_14082
00014866 3438 FE14                  		move.w	($FFFFFE14).w,d2
0001486A E24A                       		lsr.w	#1,d2
0001486C 4EB9 0000 2C3E             		jsr	(RandomNumber).l
00014872 0240 0003                  		andi.w	#3,d0
00014876 6600                       		bne.s	loc_1406A
00014878 08E8 0006 0036             		bset	#6,$36(a0)
0001487E 6600                       		bne.s	loc_14082
00014880 1342 0028                  		move.b	d2,$28(a1)
00014884 337C 001C 0038             		move.w	#$1C,$38(a1)
0001488A                            
0001488A                            loc_1406A:
0001488A 4A28 0034                  		tst.b	$34(a0)
0001488E 6600                       		bne.s	loc_14082
00014890 08E8 0006 0036             		bset	#6,$36(a0)
00014896 6600                       		bne.s	loc_14082
00014898 1342 0028                  		move.b	d2,$28(a1)
0001489C 337C 001C 0038             		move.w	#$1C,$38(a1)
000148A2                            
000148A2                            loc_14082:
000148A2 5328 0034                  		subq.b	#1,$34(a0)
000148A6 6A00                       		bpl.s	locret_1408C
000148A8 4268 0036                  		clr.w	$36(a0)
000148AC                            
000148AC                            locret_1408C:
000148AC 4E75                       		rts	
000148AE                            
000148AE                            ; ---------------------------------------------------------------------------
000148AE                            ; Subroutine to	play music for LZ/SBZ3 after a countdown
000148AE                            ; ---------------------------------------------------------------------------
000148AE                            
000148AE                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000148AE                            
000148AE                            
000148AE                            ResumeMusic:				; XREF: Obj64_Wobble; Sonic_Water; Obj0A_ReduceAir
000148AE 0C78 000C FE14             		cmpi.w	#$C,($FFFFFE14).w
000148B4                             
000148B4                            ; Third section of the NineKode - Play correct music after the countdown (if you breathe)
000148B4                             
000148B4 6200 0000                  		bhi.w	loc_140AC	; change to bhi.w!
000148B8                             
000148B8 0C38 0000 FE11             		cmpi.b	#$0,($FFFFFE11).w	; is this act 1?
000148BE 6600                       		bne.s	Air_GetBgm2	; if not, branch
000148C0 43F9 0000 3BDE             		lea	(MusicList1).l,a1	; load Music Playlist for Acts 1
000148C6 6000                       		bra.s	Air_PlayMusic	; go to PlayMusic
000148C8                             
000148C8                            Air_GetBgm2:
000148C8 0C38 0001 FE11             		cmpi.b	#$1,($FFFFFE11).w	; is this act 2?
000148CE 6600                       		bne.s	Air_GetBgm3	; if not, branch
000148D0 43F9 0000 3BE6             		lea	(MusicList2).l,a1	; load Music Playlist for Acts 2
000148D6 6000                       		bra.s	Air_PlayMusic	; go to PlayMusic
000148D8                             
000148D8                            Air_GetBgm3:
000148D8 0C38 0002 FE11             		cmpi.b	#$2,($FFFFFE11).w	; is this act 3?
000148DE 6600                       		bne.s	Air_GetBgm4	; if not, branch
000148E0 43F9 0000 3BEC             		lea	(MusicList3).l,a1	; load Music Playlist for Acts 39
000148E6 6000                       		bra.s	Air_PlayMusic	; go to PlayMusic
000148E8                             
000148E8                            Air_GetBgm4:
000148E8 0C38 0003 FE11             		cmpi.b	#$3,($FFFFFE11).w	; is this act 4?
000148EE 6600                       		bne.s	Air_PlayMusic	; if not, branch
000148F0 43F9 0000 3BF2             		lea	(MusicList4).l,a1	; load Music Playlist for Acts 4
000148F6                             
000148F6                            Air_PlayMusic:
000148F6 1029 0001                  		move.b	1(a1),d0	; load entry $1 from the playlist
000148FA                             
000148FA                            loc_140A6:
000148FA 4EB9 0000 15BA             		jsr	(PlaySound).l
00014900                             
00014900                            ; NineKode ends here
00014900                            
00014900                            loc_140AC:
00014900 31FC 001E FE14             		move.w	#$1E,($FFFFFE14).w
00014906 4238 D372                  		clr.b	($FFFFD372).w
0001490A 4E75                       		rts	
0001490C                            ; End of function ResumeMusic
0001490C                            
0001490C                            ; ===========================================================================
0001490C                            Ani_obj0A:
0001490C                            	include "_anim\obj0A.asm"
0001490C                            ; ---------------------------------------------------------------------------
0001490C                            ; Animation script - countdown numbers and bubbles (LZ)
0001490C                            ; ---------------------------------------------------------------------------
0001490C 0000                       		dc.w byte_140D6-Ani_obj0A
0001490E 0000                       		dc.w byte_140E0-Ani_obj0A
00014910 0000                       		dc.w byte_140EA-Ani_obj0A
00014912 0000                       		dc.w byte_140F4-Ani_obj0A
00014914 0000                       		dc.w byte_140FE-Ani_obj0A
00014916 0000                       		dc.w byte_14108-Ani_obj0A
00014918 0000                       		dc.w byte_14112-Ani_obj0A
0001491A 0000                       		dc.w byte_14118-Ani_obj0A
0001491C 0000                       		dc.w byte_14120-Ani_obj0A
0001491E 0000                       		dc.w byte_14128-Ani_obj0A
00014920 0000                       		dc.w byte_14130-Ani_obj0A
00014922 0000                       		dc.w byte_14138-Ani_obj0A
00014924 0000                       		dc.w byte_14140-Ani_obj0A
00014926 0000                       		dc.w byte_14148-Ani_obj0A
00014928 0000                       		dc.w byte_1414A-Ani_obj0A
0001492A 0500 0102 0304 090D FC00   byte_140D6:	dc.b 5,	0, 1, 2, 3, 4, 9, $D, $FC, 0
00014934 0500 0102 0304 0C12 FC00   byte_140E0:	dc.b 5,	0, 1, 2, 3, 4, $C, $12,	$FC, 0
0001493E 0500 0102 0304 0C11 FC00   byte_140EA:	dc.b 5,	0, 1, 2, 3, 4, $C, $11,	$FC, 0
00014948 0500 0102 0304 0B10 FC00   byte_140F4:	dc.b 5,	0, 1, 2, 3, 4, $B, $10,	$FC, 0
00014952 0500 0102 0304 090F FC00   byte_140FE:	dc.b 5,	0, 1, 2, 3, 4, 9, $F, $FC, 0
0001495C 0500 0102 0304 0A0E FC00   byte_14108:	dc.b 5,	0, 1, 2, 3, 4, $A, $E, $FC, 0
00014966 0E00 0102 FC00             byte_14112:	dc.b $E, 0, 1, 2, $FC, 0
0001496C 0716 0D16 0D16 0DFC        byte_14118:	dc.b 7,	$16, $D, $16, $D, $16, $D, $FC
00014974 0716 1216 1216 12FC        byte_14120:	dc.b 7,	$16, $12, $16, $12, $16, $12, $FC
0001497C 0716 1116 1116 11FC        byte_14128:	dc.b 7,	$16, $11, $16, $11, $16, $11, $FC
00014984 0716 1016 1016 10FC        byte_14130:	dc.b 7,	$16, $10, $16, $10, $16, $10, $FC
0001498C 0716 0F16 0F16 0FFC        byte_14138:	dc.b 7,	$16, $F, $16, $F, $16, $F, $FC
00014994 0716 0E16 0E16 0EFC        byte_14140:	dc.b 7,	$16, $E, $16, $E, $16, $E, $FC
0001499C 0EFC                       byte_14148:	dc.b $E, $FC
0001499E 0E01 0203 04FC             byte_1414A:	dc.b $E, 1, 2, 3, 4, $FC
000149A4                            		even
000149A4                            		even
000149A4                            
000149A4                            ; ---------------------------------------------------------------------------
000149A4                            ; Sprite mappings - drowning countdown numbers (LZ)
000149A4                            ; ---------------------------------------------------------------------------
000149A4                            Map_obj0A:
000149A4                            	include "_maps\obj0A.asm"
000149A4                            ; ---------------------------------------------------------------------------
000149A4                            ; Sprite mappings - drowning countdown numbers (LZ)
000149A4                            ; ---------------------------------------------------------------------------
000149A4 0000                       		dc.w byte_14152-Map_obj0A
000149A6 01                         byte_14152:	dc.b 1
000149A7 E80E 0000 F2               		dc.b $E8, $E, 0, 0, $F2
000149AC                            		even
000149AC                            		even
000149AC                            
000149AC                            ; ===========================================================================
000149AC                            ; ---------------------------------------------------------------------------
000149AC                            ; Object 38 - shield and invincibility stars
000149AC                            ; ---------------------------------------------------------------------------
000149AC                            
000149AC                            Obj38:					; XREF: Obj_Index
000149AC 7000                       		moveq	#0,d0
000149AE 1028 0024                  		move.b	$24(a0),d0
000149B2 323B 0000                  		move.w	Obj38_Index(pc,d0.w),d1
000149B6 4EFB 1000                  		jmp	Obj38_Index(pc,d1.w)
000149BA                            ; ===========================================================================
000149BA 0000                       Obj38_Index:	dc.w Obj38_Main-Obj38_Index
000149BC 0000                       		dc.w Obj38_Shield-Obj38_Index
000149BE 0000                       		dc.w Obj38_Stars-Obj38_Index
000149C0                            ; ===========================================================================
000149C0                            
000149C0                            Obj38_Main:				; XREF: Obj38_Index
000149C0 5428 0024                  		addq.b	#2,$24(a0)
000149C4 217C 0000 0000 0004        		move.l	#Map_obj38,4(a0)
000149CC 117C 0004 0001             		move.b	#4,1(a0)
000149D2 117C 0001 0018             		move.b	#1,$18(a0)
000149D8 117C 0010 0019             		move.b	#$10,$19(a0)
000149DE 4A28 001C                  		tst.b	$1C(a0)		; is object a shield?
000149E2 6600                       		bne.s	Obj38_DoStars	; if not, branch
000149E4 317C 0541 0002             		move.w	#$541,2(a0)	; shield specific code
000149EA 4E75                       		rts	
000149EC                            ; ===========================================================================
000149EC                            
000149EC                            Obj38_DoStars:
000149EC 5428 0024                  		addq.b	#2,$24(a0)	; stars	specific code
000149F0 317C 055C 0002             		move.w	#$55C,2(a0)
000149F6 4E75                       		rts	
000149F8                            ; ===========================================================================
000149F8                            
000149F8                            Obj38_Shield:				; XREF: Obj38_Index
000149F8 4A38 FE2D                  		tst.b	($FFFFFE2D).w	; does Sonic have invincibility?
000149FC 6600                       		bne.s	Obj38_RmvShield	; if yes, branch
000149FE 4A38 FE2C                  		tst.b	($FFFFFE2C).w	; does Sonic have shield?
00014A02 6700                       		beq.s	Obj38_Delete	; if not, branch
00014A04 3178 D008 0008             		move.w	($FFFFD008).w,8(a0)
00014A0A 3178 D00C 000C             		move.w	($FFFFD00C).w,$C(a0)
00014A10 1178 D022 0022             		move.b	($FFFFD022).w,$22(a0)
00014A16 43F9 0000 0000             		lea	(Ani_obj38).l,a1
00014A1C 4EB9 0000 AE22             		jsr	AnimateSprite
00014A22 4EFA 933E                  		jmp	DisplaySprite
00014A26                            ; ===========================================================================
00014A26                            
00014A26                            Obj38_RmvShield:
00014A26 4E75                       		rts	
00014A28                            ; ===========================================================================
00014A28                            
00014A28                            Obj38_Delete:
00014A28 4EFA 9374                  		jmp	DeleteObject
00014A2C                            ; ===========================================================================
00014A2C                            
00014A2C                            Obj38_Stars:				; XREF: Obj38_Index
00014A2C 4A38 FE2D                  		tst.b	($FFFFFE2D).w	; does Sonic have invincibility?
00014A30 6700                       		beq.s	Obj38_Delete2	; if not, branch
00014A32 3038 F7A8                  		move.w	($FFFFF7A8).w,d0
00014A36 1228 001C                  		move.b	$1C(a0),d1
00014A3A 5301                       		subq.b	#1,d1
00014A3C 6000                       		bra.s	Obj38_StarTrail
00014A3E                            ; ===========================================================================
00014A3E E909                       		lsl.b	#4,d1
00014A40 5801                       		addq.b	#4,d1
00014A42 9001                       		sub.b	d1,d0
00014A44 1228 0030                  		move.b	$30(a0),d1
00014A48 9001                       		sub.b	d1,d0
00014A4A 5801                       		addq.b	#4,d1
00014A4C 0201 000F                  		andi.b	#$F,d1
00014A50 1141 0030                  		move.b	d1,$30(a0)
00014A54 6000                       		bra.s	Obj38_StarTrail2a
00014A56                            ; ===========================================================================
00014A56                            
00014A56                            Obj38_StarTrail:			; XREF: Obj38_Stars
00014A56 E709                       		lsl.b	#3,d1
00014A58 1401                       		move.b	d1,d2
00014A5A D201                       		add.b	d1,d1
00014A5C D202                       		add.b	d2,d1
00014A5E 5801                       		addq.b	#4,d1
00014A60 9001                       		sub.b	d1,d0
00014A62 1228 0030                  		move.b	$30(a0),d1
00014A66 9001                       		sub.b	d1,d0
00014A68 5801                       		addq.b	#4,d1
00014A6A 0C01 0018                  		cmpi.b	#$18,d1
00014A6E 6500                       		bcs.s	Obj38_StarTrail2
00014A70 7200                       		moveq	#0,d1
00014A72                            
00014A72                            Obj38_StarTrail2:
00014A72 1141 0030                  		move.b	d1,$30(a0)
00014A76                            
00014A76                            Obj38_StarTrail2a:
00014A76 43F8 CB00                  		lea	($FFFFCB00).w,a1
00014A7A 43F1 0000                  		lea	(a1,d0.w),a1
00014A7E 3159 0008                  		move.w	(a1)+,8(a0)
00014A82 3159 000C                  		move.w	(a1)+,$C(a0)
00014A86 1178 D022 0022             		move.b	($FFFFD022).w,$22(a0)
00014A8C 43F9 0000 0000             		lea	(Ani_obj38).l,a1
00014A92 4EB9 0000 AE22             		jsr	AnimateSprite
00014A98 4EFA 92C8                  		jmp	DisplaySprite
00014A9C                            ; ===========================================================================
00014A9C                            
00014A9C                            Obj38_Delete2:				; XREF: Obj38_Stars
00014A9C 4EFA 9300                  		jmp	DeleteObject
00014AA0                            ; ===========================================================================
00014AA0                            ; ---------------------------------------------------------------------------
00014AA0                            ; Object 4A - special stage entry from beta
00014AA0                            ; ---------------------------------------------------------------------------
00014AA0                            
00014AA0                            Obj4A:					; XREF: Obj_Index
00014AA0 7000                       		moveq	#0,d0
00014AA2 1028 0024                  		move.b	$24(a0),d0
00014AA6 323B 0000                  		move.w	Obj4A_Index(pc,d0.w),d1
00014AAA 4EFB 1000                  		jmp	Obj4A_Index(pc,d1.w)
00014AAE                            ; ===========================================================================
00014AAE 0000                       Obj4A_Index:	dc.w Obj4A_Main-Obj4A_Index
00014AB0 0000                       		dc.w Obj4A_RmvSonic-Obj4A_Index
00014AB2 0000                       		dc.w Obj4A_LoadSonic-Obj4A_Index
00014AB4                            ; ===========================================================================
00014AB4                            
00014AB4                            Obj4A_Main:				; XREF: Obj4A_Index
00014AB4 4AB8 F680                  		tst.l	($FFFFF680).w	; are pattern load cues	empty?
00014AB8 6700                       		beq.s	Obj4A_Main2	; if yes, branch
00014ABA 4E75                       		rts	
00014ABC                            ; ===========================================================================
00014ABC                            
00014ABC                            Obj4A_Main2:
00014ABC 5428 0024                  		addq.b	#2,$24(a0)
00014AC0 217C 0000 0000 0004        		move.l	#Map_obj4A,4(a0)
00014AC8 117C 0004 0001             		move.b	#4,1(a0)
00014ACE 117C 0001 0018             		move.b	#1,$18(a0)
00014AD4 117C 0038 0019             		move.b	#$38,$19(a0)
00014ADA 317C 0541 0002             		move.w	#$541,2(a0)
00014AE0 317C 0078 0030             		move.w	#120,$30(a0)	; set time for Sonic's disappearance to 2 seconds
00014AE6                            
00014AE6                            Obj4A_RmvSonic:				; XREF: Obj4A_Index
00014AE6 3178 D008 0008             		move.w	($FFFFD008).w,8(a0)
00014AEC 3178 D00C 000C             		move.w	($FFFFD00C).w,$C(a0)
00014AF2 1178 D022 0022             		move.b	($FFFFD022).w,$22(a0)
00014AF8 43F9 0000 0000             		lea	(Ani_obj4A).l,a1
00014AFE 4EB9 0000 AE22             		jsr	AnimateSprite
00014B04 0C28 0002 001A             		cmpi.b	#2,$1A(a0)
00014B0A 6600                       		bne.s	Obj4A_Display
00014B0C 4A38 D000                  		tst.b	($FFFFD000).w
00014B10 6700                       		beq.s	Obj4A_Display
00014B12 11FC 0000 D000             		move.b	#0,($FFFFD000).w ; remove Sonic
00014B18 303C 00A8                  		move.w	#$A8,d0
00014B1C 4EB9 0000 15C0             		jsr	(PlaySound_Special).l ;	play Special Stage "GOAL" sound
00014B22                            
00014B22                            Obj4A_Display:
00014B22 4EFA 923E                  		jmp	DisplaySprite
00014B26                            ; ===========================================================================
00014B26                            
00014B26                            Obj4A_LoadSonic:			; XREF: Obj4A_Index
00014B26 5368 0030                  		subq.w	#1,$30(a0)	; subtract 1 from time
00014B2A 6600                       		bne.s	Obj4A_Wait	; if time remains, branch
00014B2C 11FC 0001 D000             		move.b	#1,($FFFFD000).w ; load	Sonic object
00014B32 4EFA 926A                  		jmp	DeleteObject
00014B36                            ; ===========================================================================
00014B36                            
00014B36                            Obj4A_Wait:
00014B36 4E75                       		rts	
00014B38                            ; ===========================================================================
00014B38                            ; ---------------------------------------------------------------------------
00014B38                            ; Object 08 - water splash (LZ)
00014B38                            ; ---------------------------------------------------------------------------
00014B38                            
00014B38                            Obj08:					; XREF: Obj_Index
00014B38 7000                       		moveq	#0,d0
00014B3A 1028 0024                  		move.b	$24(a0),d0
00014B3E 323B 0000                  		move.w	Obj08_Index(pc,d0.w),d1
00014B42 4EFB 1000                  		jmp	Obj08_Index(pc,d1.w)
00014B46                            ; ===========================================================================
00014B46 0000                       Obj08_Index:	dc.w Obj08_Main-Obj08_Index
00014B48 0000                       		dc.w Obj08_Display-Obj08_Index
00014B4A 0000                       		dc.w Obj08_Delete-Obj08_Index
00014B4C                            ; ===========================================================================
00014B4C                            
00014B4C                            Obj08_Main:				; XREF: Obj08_Index
00014B4C 5428 0024                  		addq.b	#2,$24(a0)
00014B50 217C 0000 0000 0004        		move.l	#Map_obj08,4(a0)
00014B58 0028 0004 0001             		ori.b	#4,1(a0)
00014B5E 117C 0001 0018             		move.b	#1,$18(a0)
00014B64 117C 0010 0019             		move.b	#$10,$19(a0)
00014B6A 317C 4259 0002             		move.w	#$4259,2(a0)
00014B70 3178 D008 0008             		move.w	($FFFFD008).w,8(a0) ; copy x-position from Sonic
00014B76                            
00014B76                            Obj08_Display:				; XREF: Obj08_Index
00014B76 3178 F646 000C             		move.w	($FFFFF646).w,$C(a0) ; copy y-position from water height
00014B7C 43F9 0000 0000             		lea	(Ani_obj08).l,a1
00014B82 4EB9 0000 AE22             		jsr	AnimateSprite
00014B88 4EFA 91D8                  		jmp	DisplaySprite
00014B8C                            ; ===========================================================================
00014B8C                            
00014B8C                            Obj08_Delete:				; XREF: Obj08_Index
00014B8C 4EFA 9210                  		jmp	DeleteObject	; delete when animation	is complete
00014B90                            ; ===========================================================================
00014B90                            Ani_obj38:
00014B90                            	include "_anim\obj38.asm"
00014B90                            ; ---------------------------------------------------------------------------
00014B90                            ; Animation script - shield and invincibility stars
00014B90                            ; ---------------------------------------------------------------------------
00014B90 0000                       		dc.w byte_14356-Ani_obj38
00014B92 0000                       		dc.w byte_1435E-Ani_obj38
00014B94 0000                       		dc.w byte_14364-Ani_obj38
00014B96 0000                       		dc.w byte_1437E-Ani_obj38
00014B98 0000                       		dc.w byte_14398-Ani_obj38
00014B9A 0101 0002 0003 00FF        byte_14356:	dc.b 1,	1, 0, 2, 0, 3, 0, $FF
00014BA2 0504 0506 07FF             byte_1435E:	dc.b 5,	4, 5, 6, 7, $FF
00014BA8 0004 0400 0404 0005 0500+  byte_14364:	dc.b 0,	4, 4, 0, 4, 4, 0, 5, 5,	0, 5, 5, 0, 6, 6, 0, 6
00014BB9 0600 0707 0007 0700 FF     		dc.b 6,	0, 7, 7, 0, 7, 7, 0, $FF
00014BC2 0004 0400 0400 0005 0500+  byte_1437E:	dc.b 0,	4, 4, 0, 4, 0, 0, 5, 5,	0, 5, 0, 0, 6, 6, 0, 6
00014BD3 0000 0707 0007 0000 FF     		dc.b 0,	0, 7, 7, 0, 7, 0, 0, $FF
00014BDC 0004 0000 0400 0005 0000+  byte_14398:	dc.b 0,	4, 0, 0, 4, 0, 0, 5, 0,	0, 5, 0, 0, 6, 0, 0, 6
00014BED 0000 0700 0007 0000 FF     		dc.b 0,	0, 7, 0, 0, 7, 0, 0, $FF
00014BF6                            		even
00014BF6                            		even
00014BF6                            
00014BF6                            ; ---------------------------------------------------------------------------
00014BF6                            ; Sprite mappings - shield and invincibility stars
00014BF6                            ; ---------------------------------------------------------------------------
00014BF6                            Map_obj38:
00014BF6                            	include "_maps\obj38.asm"
00014BF6                            ; ---------------------------------------------------------------------------
00014BF6                            ; Sprite mappings - shield and invincibility stars
00014BF6                            ; ---------------------------------------------------------------------------
00014BF6 0000 0000                  		dc.w byte_143CD-Map_obj38, byte_143C2-Map_obj38
00014BFA 0000 0000                  		dc.w byte_143D7-Map_obj38, byte_143EC-Map_obj38
00014BFE 0000 0000                  		dc.w byte_14401-Map_obj38, byte_14416-Map_obj38
00014C02 0000 0000                  		dc.w byte_1442B-Map_obj38, byte_14440-Map_obj38
00014C06 04                         byte_143C2:	dc.b 4
00014C07 E80A 0000 E8               		dc.b $E8, $A, 0, 0, $E8
00014C0C E80A 0009 00               		dc.b $E8, $A, 0, 9, 0
00014C11 000A 1000 E8               byte_143CD:	dc.b 0,	$A, $10, 0, $E8
00014C16 000A 1009 00               		dc.b 0,	$A, $10, 9, 0
00014C1B 04                         byte_143D7:	dc.b 4
00014C1C E80A 0812 E9               		dc.b $E8, $A, 8, $12, $E9
00014C21 E80A 0012 00               		dc.b $E8, $A, 0, $12, 0
00014C26 000A 1812 E9               		dc.b 0,	$A, $18, $12, $E9
00014C2B 000A 1012 00               		dc.b 0,	$A, $10, $12, 0
00014C30 04                         byte_143EC:	dc.b 4
00014C31 E80A 0809 E8               		dc.b $E8, $A, 8, 9, $E8
00014C36 E80A 0800 00               		dc.b $E8, $A, 8, 0, 0
00014C3B 000A 1809 E8               		dc.b 0,	$A, $18, 9, $E8
00014C40 000A 1800 00               		dc.b 0,	$A, $18, 0, 0
00014C45 04                         byte_14401:	dc.b 4
00014C46 E80A 0000 E8               		dc.b $E8, $A, 0, 0, $E8
00014C4B E80A 0009 00               		dc.b $E8, $A, 0, 9, 0
00014C50 000A 1809 E8               		dc.b 0,	$A, $18, 9, $E8
00014C55 000A 1800 00               		dc.b 0,	$A, $18, 0, 0
00014C5A 04                         byte_14416:	dc.b 4
00014C5B E80A 0809 E8               		dc.b $E8, $A, 8, 9, $E8
00014C60 E80A 0800 00               		dc.b $E8, $A, 8, 0, 0
00014C65 000A 1000 E8               		dc.b 0,	$A, $10, 0, $E8
00014C6A 000A 1009 00               		dc.b 0,	$A, $10, 9, 0
00014C6F 04                         byte_1442B:	dc.b 4
00014C70 E80A 0012 E8               		dc.b $E8, $A, 0, $12, $E8
00014C75 E80A 001B 00               		dc.b $E8, $A, 0, $1B, 0
00014C7A 000A 181B E8               		dc.b 0,	$A, $18, $1B, $E8
00014C7F 000A 1812 00               		dc.b 0,	$A, $18, $12, 0
00014C84 04                         byte_14440:	dc.b 4
00014C85 E80A 081B E8               		dc.b $E8, $A, 8, $1B, $E8
00014C8A E80A 0812 00               		dc.b $E8, $A, 8, $12, 0
00014C8F 000A 1012 E8               		dc.b 0,	$A, $10, $12, $E8
00014C94 000A 101B 00               		dc.b 0,	$A, $10, $1B, 0
00014C9A 00                         		even
00014C9A 00                         		even
00014C9A                            
00014C9A                            Ani_obj4A:
00014C9A                            	include "_anim\obj4A.asm"
00014C9A                            ; ---------------------------------------------------------------------------
00014C9A                            ; Animation script - special stage entry effect from beta
00014C9A                            ; ---------------------------------------------------------------------------
00014C9A 0000                       		dc.w byte_14458-Ani_obj4A
00014C9C 0500 0100 0100 0701 0702+  byte_14458:	dc.b 5,	0, 1, 0, 1, 0, 7, 1, 7,	2, 7, 3, 7, 4, 7, 5, 7, 6, 7, $FC
00014CB0                            		even
00014CB0                            		even
00014CB0                            
00014CB0                            ; ---------------------------------------------------------------------------
00014CB0                            ; Sprite mappings - special stage entry	from beta
00014CB0                            ; ---------------------------------------------------------------------------
00014CB0                            Map_obj4A:
00014CB0                            	include "_maps\obj4A.asm"
00014CB0                            ; ---------------------------------------------------------------------------
00014CB0                            ; Sprite mappings - special stage entry	from beta
00014CB0                            ; ---------------------------------------------------------------------------
00014CB0 0000 0000                  		dc.w byte_1447C-Map_obj4A, byte_1448C-Map_obj4A
00014CB4 0000 0000                  		dc.w byte_1449C-Map_obj4A, byte_144B6-Map_obj4A
00014CB8 0000 0000                  		dc.w byte_144E4-Map_obj4A, byte_1453F-Map_obj4A
00014CBC 0000 0000                  		dc.w byte_14595-Map_obj4A, byte_145BF-Map_obj4A
00014CC0 03                         byte_1447C:	dc.b 3
00014CC1 F800 0000 08               		dc.b $F8, 0, 0,	0, 8
00014CC6 0004 0001 00               		dc.b 0,	4, 0, 1, 0
00014CCB 0800 1000 08               		dc.b 8,	0, $10,	0, 8
00014CD0 03                         byte_1448C:	dc.b 3
00014CD1 F00D 0003 F0               		dc.b $F0, $D, 0, 3, $F0
00014CD6 000C 000B F0               		dc.b 0,	$C, 0, $B, $F0
00014CDB 080D 1003 F0               		dc.b 8,	$D, $10, 3, $F0
00014CE0 05                         byte_1449C:	dc.b 5
00014CE1 E40E 000F F4               		dc.b $E4, $E, 0, $F, $F4
00014CE6 EC02 001B EC               		dc.b $EC, 2, 0,	$1B, $EC
00014CEB FC0C 001E F4               		dc.b $FC, $C, 0, $1E, $F4
00014CF0 040E 100F F4               		dc.b 4,	$E, $10, $F, $F4
00014CF5 0401 101B EC               		dc.b 4,	1, $10,	$1B, $EC
00014CFA 09                         byte_144B6:	dc.b 9
00014CFB F008 0022 F8               		dc.b $F0, 8, 0,	$22, $F8
00014D00 F80E 0025 F0               		dc.b $F8, $E, 0, $25, $F0
00014D05 1008 0031 F0               		dc.b $10, 8, 0,	$31, $F0
00014D0A 0005 0034 10               		dc.b 0,	5, 0, $34, $10
00014D0F F800 0825 10               		dc.b $F8, 0, 8,	$25, $10
00014D14 F000 1836 18               		dc.b $F0, 0, $18, $36, $18
00014D19 F800 1825 20               		dc.b $F8, 0, $18, $25, $20
00014D1E 0000 0825 28               		dc.b 0,	0, 8, $25, $28
00014D23 F800 0025 30               		dc.b $F8, 0, 0,	$25, $30
00014D28 12                         byte_144E4:	dc.b $12
00014D29 0000 1825 F0               		dc.b 0,	0, $18,	$25, $F0
00014D2E F804 0038 F8               		dc.b $F8, 4, 0,	$38, $F8
00014D33 F000 0026 08               		dc.b $F0, 0, 0,	$26, 8
00014D38 0000 0025 00               		dc.b 0,	0, 0, $25, 0
00014D3D 0800 1825 F8               		dc.b 8,	0, $18,	$25, $F8
00014D42 1000 1026 00               		dc.b $10, 0, $10, $26, 0
00014D47 0800 1038 08               		dc.b 8,	0, $10,	$38, 8
00014D4C F800 0029 10               		dc.b $F8, 0, 0,	$29, $10
00014D51 0000 0026 10               		dc.b 0,	0, 0, $26, $10
00014D56 0000 002D 18               		dc.b 0,	0, 0, $2D, $18
00014D5B 0800 0826 18               		dc.b 8,	0, 8, $26, $18
00014D60 0800 0029 20               		dc.b 8,	0, 0, $29, $20
00014D65 F800 0026 20               		dc.b $F8, 0, 0,	$26, $20
00014D6A F800 002D 28               		dc.b $F8, 0, 0,	$2D, $28
00014D6F 0000 003A 28               		dc.b 0,	0, 0, $3A, $28
00014D74 F800 1826 30               		dc.b $F8, 0, $18, $26, $30
00014D79 0000 1025 38               		dc.b 0,	0, $10,	$25, $38
00014D7E F800 1025 40               		dc.b $F8, 0, $10, $25, $40
00014D83 11                         byte_1453F:	dc.b $11
00014D84 F800 0825 00               		dc.b $F8, 0, 8,	$25, 0
00014D89 F000 0038 10               		dc.b $F0, 0, 0,	$38, $10
00014D8E 1000 0825 00               		dc.b $10, 0, 8,	$25, 0
00014D93 0000 1825 10               		dc.b 0,	0, $18,	$25, $10
00014D98 0800 1025 18               		dc.b 8,	0, $10,	$25, $18
00014D9D F800 1825 20               		dc.b $F8, 0, $18, $25, $20
00014DA2 0000 1026 28               		dc.b 0,	0, $10,	$26, $28
00014DA7 F800 1025 30               		dc.b $F8, 0, $10, $25, $30
00014DAC 0000 0025 30               		dc.b 0,	0, 0, $25, $30
00014DB1 0800 0825 30               		dc.b 8,	0, 8, $25, $30
00014DB6 0000 0826 38               		dc.b 0,	0, 8, $26, $38
00014DBB 0800 0029 38               		dc.b 8,	0, 0, $29, $38
00014DC0 F800 0826 40               		dc.b $F8, 0, 8,	$26, $40
00014DC5 0000 002D 40               		dc.b 0,	0, 0, $2D, $40
00014DCA F800 0825 48               		dc.b $F8, 0, 8,	$25, $48
00014DCF 0000 0025 48               		dc.b 0,	0, 0, $25, $48
00014DD4 0000 1025 50               		dc.b 0,	0, $10,	$25, $50
00014DD9 09                         byte_14595:	dc.b 9
00014DDA FC00 0826 30               		dc.b $FC, 0, 8,	$26, $30
00014DDF 0400 0825 28               		dc.b 4,	0, 8, $25, $28
00014DE4 0400 1027 38               		dc.b 4,	0, $10,	$27, $38
00014DE9 0400 0826 40               		dc.b 4,	0, 8, $26, $40
00014DEE FC00 1025 40               		dc.b $FC, 0, $10, $25, $40
00014DF3 FC00 1026 48               		dc.b $FC, 0, $10, $26, $48
00014DF8 0C00 0827 48               		dc.b $C, 0, 8, $27, $48
00014DFD 0400 1826 50               		dc.b 4,	0, $18,	$26, $50
00014E02 04                         		dc.b 4
00014E03 0008 2758 00               byte_145BF:	dc.b 0,	8, $27,	$58, 0
00014E08                            		even
00014E08                            		even
00014E08                            
00014E08                            Ani_obj08:
00014E08                            	include "_anim\obj08.asm"
00014E08                            ; ---------------------------------------------------------------------------
00014E08                            ; Animation script - water splash (LZ)
00014E08                            ; ---------------------------------------------------------------------------
00014E08 0000                       		dc.w byte_145C6-Ani_obj08
00014E0A 0400 0102 FC00             byte_145C6:	dc.b 4,	0, 1, 2, $FC, 0
00014E10                            		even
00014E10                            		even
00014E10                            
00014E10                            ; ---------------------------------------------------------------------------
00014E10                            ; Sprite mappings - water splash (LZ)
00014E10                            ; ---------------------------------------------------------------------------
00014E10                            Map_obj08:
00014E10                            	include "_maps\obj08.asm"
00014E10                            ; ---------------------------------------------------------------------------
00014E10                            ; Sprite mappings - water splash (LZ)
00014E10                            ; ---------------------------------------------------------------------------
00014E10 0000                       		dc.w byte_145D2-Map_obj08
00014E12 0000                       		dc.w byte_145DD-Map_obj08
00014E14 0000                       		dc.w byte_145E8-Map_obj08
00014E16 02                         byte_145D2:	dc.b 2
00014E17 F204 006D F8               		dc.b $F2, 4, 0,	$6D, $F8
00014E1C FA0C 006F F0               		dc.b $FA, $C, 0, $6F, $F0
00014E21 02                         byte_145DD:	dc.b 2
00014E22 E200 0073 F8               		dc.b $E2, 0, 0,	$73, $F8
00014E27 EA0E 0074 F0               		dc.b $EA, $E, 0, $74, $F0
00014E2C 01                         byte_145E8:	dc.b 1
00014E2D E20F 0080 F0               		dc.b $E2, $F, 0, $80, $F0
00014E32                            		even
00014E32                            		even
00014E32                            
00014E32                            ; ---------------------------------------------------------------------------
00014E32                            ; Subroutine to	change Sonic's angle & position as he walks along the floor
00014E32                            ; ---------------------------------------------------------------------------
00014E32                            
00014E32                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00014E32                            
00014E32                            
00014E32                            Sonic_AnglePos:				; XREF: Obj01_MdNormal; Obj01_MdRoll
00014E32 0828 0003 0022             		btst	#3,$22(a0)
00014E38 6700                       		beq.s	loc_14602
00014E3A 7000                       		moveq	#0,d0
00014E3C 11C0 F768                  		move.b	d0,($FFFFF768).w
00014E40 11C0 F76A                  		move.b	d0,($FFFFF76A).w
00014E44 4E75                       		rts	
00014E46                            ; ===========================================================================
00014E46                            
00014E46                            loc_14602:
00014E46 7003                       		moveq	#3,d0
00014E48 11C0 F768                  		move.b	d0,($FFFFF768).w
00014E4C 11C0 F76A                  		move.b	d0,($FFFFF76A).w
00014E50 1028 0026                  		move.b	$26(a0),d0
00014E54 0600 0020                  		addi.b	#$20,d0
00014E58 6A00                       		bpl.s	loc_14624
00014E5A 1028 0026                  		move.b	$26(a0),d0
00014E5E 6A00                       		bpl.s	loc_1461E
00014E60 5300                       		subq.b	#1,d0
00014E62                            
00014E62                            loc_1461E:
00014E62 0600 0020                  		addi.b	#$20,d0
00014E66 6000                       		bra.s	loc_14630
00014E68                            ; ===========================================================================
00014E68                            
00014E68                            loc_14624:
00014E68 1028 0026                  		move.b	$26(a0),d0
00014E6C 6A00                       		bpl.s	loc_1462C
00014E6E 5200                       		addq.b	#1,d0
00014E70                            
00014E70                            loc_1462C:
00014E70 0600 001F                  		addi.b	#$1F,d0
00014E74                            
00014E74                            loc_14630:
00014E74 0200 00C0                  		andi.b	#$C0,d0
00014E78 0C00 0040                  		cmpi.b	#$40,d0
00014E7C 6700 0000                  		beq.w	Sonic_WalkVertL
00014E80 0C00 0080                  		cmpi.b	#$80,d0
00014E84 6700 0000                  		beq.w	Sonic_WalkCeiling
00014E88 0C00 00C0                  		cmpi.b	#$C0,d0
00014E8C 6700 0000                  		beq.w	Sonic_WalkVertR
00014E90 3428 000C                  		move.w	$C(a0),d2
00014E94 3628 0008                  		move.w	8(a0),d3
00014E98 7000                       		moveq	#0,d0
00014E9A 1028 0016                  		move.b	$16(a0),d0
00014E9E 4880                       		ext.w	d0
00014EA0 D440                       		add.w	d0,d2
00014EA2 1028 0017                  		move.b	$17(a0),d0
00014EA6 4880                       		ext.w	d0
00014EA8 D640                       		add.w	d0,d3
00014EAA 49F8 F768                  		lea	($FFFFF768).w,a4
00014EAE 367C 0010                  		movea.w	#$10,a3
00014EB2 3C3C 0000                  		move.w	#0,d6
00014EB6 7A0D                       		moveq	#$D,d5
00014EB8 6100 0000                  		bsr.w	FindFloor
00014EBC 3F01                       		move.w	d1,-(sp)
00014EBE 3428 000C                  		move.w	$C(a0),d2
00014EC2 3628 0008                  		move.w	8(a0),d3
00014EC6 7000                       		moveq	#0,d0
00014EC8 1028 0016                  		move.b	$16(a0),d0
00014ECC 4880                       		ext.w	d0
00014ECE D440                       		add.w	d0,d2
00014ED0 1028 0017                  		move.b	$17(a0),d0
00014ED4 4880                       		ext.w	d0
00014ED6 4440                       		neg.w	d0
00014ED8 D640                       		add.w	d0,d3
00014EDA 49F8 F76A                  		lea	($FFFFF76A).w,a4
00014EDE 367C 0010                  		movea.w	#$10,a3
00014EE2 3C3C 0000                  		move.w	#0,d6
00014EE6 7A0D                       		moveq	#$D,d5
00014EE8 6100 0000                  		bsr.w	FindFloor
00014EEC 301F                       		move.w	(sp)+,d0
00014EEE 6100 0000                  		bsr.w	Sonic_Angle
00014EF2 4A41                       		tst.w	d1
00014EF4 6700                       		beq.s	locret_146BE
00014EF6 6A00                       		bpl.s	loc_146C0
00014EF8 0C41 FFF2                  		cmpi.w	#-$E,d1
00014EFC 6D00                       		blt.s	locret_146E6
00014EFE D368 000C                  		add.w	d1,$C(a0)
00014F02                            
00014F02                            locret_146BE:
00014F02 4E75                       		rts	
00014F04                            ; ===========================================================================
00014F04                            
00014F04                            loc_146C0:
00014F04 0C41 000E                  		cmpi.w	#$E,d1
00014F08 6E00                       		bgt.s	loc_146CC
00014F0A                            
00014F0A                            loc_146C6:
00014F0A D368 000C                  		add.w	d1,$C(a0)
00014F0E 4E75                       		rts	
00014F10                            ; ===========================================================================
00014F10                            
00014F10                            loc_146CC:
00014F10 4A28 0038                  		tst.b	$38(a0)
00014F14 66F4                       		bne.s	loc_146C6
00014F16 08E8 0001 0022             		bset	#1,$22(a0)
00014F1C 08A8 0005 0022             		bclr	#5,$22(a0)
00014F22 117C 0001 001D             		move.b	#1,$1D(a0)
00014F28 4E75                       		rts	
00014F2A                            ; ===========================================================================
00014F2A                            
00014F2A                            locret_146E6:
00014F2A 4E75                       		rts	
00014F2C                            ; End of function Sonic_AnglePos
00014F2C                            
00014F2C                            ; ===========================================================================
00014F2C 2428 0008                  		move.l	8(a0),d2
00014F30 3028 0010                  		move.w	$10(a0),d0
00014F34 48C0                       		ext.l	d0
00014F36 E180                       		asl.l	#8,d0
00014F38 9480                       		sub.l	d0,d2
00014F3A 2142 0008                  		move.l	d2,8(a0)
00014F3E 303C 0038                  		move.w	#$38,d0
00014F42 48C0                       		ext.l	d0
00014F44 E180                       		asl.l	#8,d0
00014F46 9680                       		sub.l	d0,d3
00014F48 2143 000C                  		move.l	d3,$C(a0)
00014F4C 4E75                       		rts	
00014F4E                            ; ===========================================================================
00014F4E                            
00014F4E                            locret_1470A:
00014F4E 4E75                       		rts	
00014F50                            ; ===========================================================================
00014F50 2628 000C                  		move.l	$C(a0),d3
00014F54 3028 0012                  		move.w	$12(a0),d0
00014F58 0440 0038                  		subi.w	#$38,d0
00014F5C 3140 0012                  		move.w	d0,$12(a0)
00014F60 48C0                       		ext.l	d0
00014F62 E180                       		asl.l	#8,d0
00014F64 9680                       		sub.l	d0,d3
00014F66 2143 000C                  		move.l	d3,$C(a0)
00014F6A 4E75                       		rts	
00014F6C 4E75                       		rts	
00014F6E                            ; ===========================================================================
00014F6E 2428 0008                  		move.l	8(a0),d2
00014F72 2628 000C                  		move.l	$C(a0),d3
00014F76 3028 0010                  		move.w	$10(a0),d0
00014F7A 48C0                       		ext.l	d0
00014F7C E180                       		asl.l	#8,d0
00014F7E 9480                       		sub.l	d0,d2
00014F80 3028 0012                  		move.w	$12(a0),d0
00014F84 48C0                       		ext.l	d0
00014F86 E180                       		asl.l	#8,d0
00014F88 9680                       		sub.l	d0,d3
00014F8A 2142 0008                  		move.l	d2,8(a0)
00014F8E 2143 000C                  		move.l	d3,$C(a0)
00014F92 4E75                       		rts	
00014F94                            
00014F94                            ; ---------------------------------------------------------------------------
00014F94                            ; Subroutine to	change Sonic's angle as he walks along the floor
00014F94                            ; ---------------------------------------------------------------------------
00014F94                            
00014F94                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00014F94                            
00014F94                            
00014F94                            Sonic_Angle:				; XREF: Sonic_AnglePos; et al
00014F94 1438 F76A                  		move.b	($FFFFF76A).w,d2
00014F98 B240                       		cmp.w	d0,d1
00014F9A 6F00                       		ble.s	loc_1475E
00014F9C 1438 F768                  		move.b	($FFFFF768).w,d2
00014FA0 3200                       		move.w	d0,d1
00014FA2                            
00014FA2                            loc_1475E:
00014FA2 0802 0000                  		btst	#0,d2
00014FA6 6600                       		bne.s	loc_1476A
00014FA8 1142 0026                  		move.b	d2,$26(a0)
00014FAC 4E75                       		rts	
00014FAE                            ; ===========================================================================
00014FAE                            
00014FAE                            loc_1476A:
00014FAE 1428 0026                  		move.b	$26(a0),d2
00014FB2 0602 0020                  		addi.b	#$20,d2
00014FB6 0202 00C0                  		andi.b	#$C0,d2
00014FBA 1142 0026                  		move.b	d2,$26(a0)
00014FBE 4E75                       		rts	
00014FC0                            ; End of function Sonic_Angle
00014FC0                            
00014FC0                            ; ---------------------------------------------------------------------------
00014FC0                            ; Subroutine allowing Sonic to walk up a vertical slope/wall to	his right
00014FC0                            ; ---------------------------------------------------------------------------
00014FC0                            
00014FC0                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00014FC0                            
00014FC0                            
00014FC0                            Sonic_WalkVertR:			; XREF: Sonic_AnglePos
00014FC0 3428 000C                  		move.w	$C(a0),d2
00014FC4 3628 0008                  		move.w	8(a0),d3
00014FC8 7000                       		moveq	#0,d0
00014FCA 1028 0017                  		move.b	$17(a0),d0
00014FCE 4880                       		ext.w	d0
00014FD0 4440                       		neg.w	d0
00014FD2 D440                       		add.w	d0,d2
00014FD4 1028 0016                  		move.b	$16(a0),d0
00014FD8 4880                       		ext.w	d0
00014FDA D640                       		add.w	d0,d3
00014FDC 49F8 F768                  		lea	($FFFFF768).w,a4
00014FE0 367C 0010                  		movea.w	#$10,a3
00014FE4 3C3C 0000                  		move.w	#0,d6
00014FE8 7A0D                       		moveq	#$D,d5
00014FEA 6100 0000                  		bsr.w	FindWall
00014FEE 3F01                       		move.w	d1,-(sp)
00014FF0 3428 000C                  		move.w	$C(a0),d2
00014FF4 3628 0008                  		move.w	8(a0),d3
00014FF8 7000                       		moveq	#0,d0
00014FFA 1028 0017                  		move.b	$17(a0),d0
00014FFE 4880                       		ext.w	d0
00015000 D440                       		add.w	d0,d2
00015002 1028 0016                  		move.b	$16(a0),d0
00015006 4880                       		ext.w	d0
00015008 D640                       		add.w	d0,d3
0001500A 49F8 F76A                  		lea	($FFFFF76A).w,a4
0001500E 367C 0010                  		movea.w	#$10,a3
00015012 3C3C 0000                  		move.w	#0,d6
00015016 7A0D                       		moveq	#$D,d5
00015018 6100 0000                  		bsr.w	FindWall
0001501C 301F                       		move.w	(sp)+,d0
0001501E 6100 FF74                  		bsr.w	Sonic_Angle
00015022 4A41                       		tst.w	d1
00015024 6700                       		beq.s	locret_147F0
00015026 6A00                       		bpl.s	loc_147F2
00015028 0C41 FFF2                  		cmpi.w	#-$E,d1
0001502C 6D00 FF20                  		blt.w	locret_1470A
00015030 D368 0008                  		add.w	d1,8(a0)
00015034                            
00015034                            locret_147F0:
00015034 4E75                       		rts	
00015036                            ; ===========================================================================
00015036                            
00015036                            loc_147F2:
00015036 0C41 000E                  		cmpi.w	#$E,d1
0001503A 6E00                       		bgt.s	loc_147FE
0001503C                            
0001503C                            loc_147F8:
0001503C D368 0008                  		add.w	d1,8(a0)
00015040 4E75                       		rts	
00015042                            ; ===========================================================================
00015042                            
00015042                            loc_147FE:
00015042 4A28 0038                  		tst.b	$38(a0)
00015046 66F4                       		bne.s	loc_147F8
00015048 08E8 0001 0022             		bset	#1,$22(a0)
0001504E 08A8 0005 0022             		bclr	#5,$22(a0)
00015054 117C 0001 001D             		move.b	#1,$1D(a0)
0001505A 4E75                       		rts	
0001505C                            ; End of function Sonic_WalkVertR
0001505C                            
0001505C                            ; ---------------------------------------------------------------------------
0001505C                            ; Subroutine allowing Sonic to walk upside-down
0001505C                            ; ---------------------------------------------------------------------------
0001505C                            
0001505C                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0001505C                            
0001505C                            
0001505C                            Sonic_WalkCeiling:			; XREF: Sonic_AnglePos
0001505C 3428 000C                  		move.w	$C(a0),d2
00015060 3628 0008                  		move.w	8(a0),d3
00015064 7000                       		moveq	#0,d0
00015066 1028 0016                  		move.b	$16(a0),d0
0001506A 4880                       		ext.w	d0
0001506C 9440                       		sub.w	d0,d2
0001506E 0A42 000F                  		eori.w	#$F,d2
00015072 1028 0017                  		move.b	$17(a0),d0
00015076 4880                       		ext.w	d0
00015078 D640                       		add.w	d0,d3
0001507A 49F8 F768                  		lea	($FFFFF768).w,a4
0001507E 367C FFF0                  		movea.w	#-$10,a3
00015082 3C3C 1000                  		move.w	#$1000,d6
00015086 7A0D                       		moveq	#$D,d5
00015088 6100 0000                  		bsr.w	FindFloor
0001508C 3F01                       		move.w	d1,-(sp)
0001508E 3428 000C                  		move.w	$C(a0),d2
00015092 3628 0008                  		move.w	8(a0),d3
00015096 7000                       		moveq	#0,d0
00015098 1028 0016                  		move.b	$16(a0),d0
0001509C 4880                       		ext.w	d0
0001509E 9440                       		sub.w	d0,d2
000150A0 0A42 000F                  		eori.w	#$F,d2
000150A4 1028 0017                  		move.b	$17(a0),d0
000150A8 4880                       		ext.w	d0
000150AA 9640                       		sub.w	d0,d3
000150AC 49F8 F76A                  		lea	($FFFFF76A).w,a4
000150B0 367C FFF0                  		movea.w	#-$10,a3
000150B4 3C3C 1000                  		move.w	#$1000,d6
000150B8 7A0D                       		moveq	#$D,d5
000150BA 6100 0000                  		bsr.w	FindFloor
000150BE 301F                       		move.w	(sp)+,d0
000150C0 6100 FED2                  		bsr.w	Sonic_Angle
000150C4 4A41                       		tst.w	d1
000150C6 6700                       		beq.s	locret_14892
000150C8 6A00                       		bpl.s	loc_14894
000150CA 0C41 FFF2                  		cmpi.w	#-$E,d1
000150CE 6D00 FE5A                  		blt.w	locret_146E6
000150D2 9368 000C                  		sub.w	d1,$C(a0)
000150D6                            
000150D6                            locret_14892:
000150D6 4E75                       		rts	
000150D8                            ; ===========================================================================
000150D8                            
000150D8                            loc_14894:
000150D8 0C41 000E                  		cmpi.w	#$E,d1
000150DC 6E00                       		bgt.s	loc_148A0
000150DE                            
000150DE                            loc_1489A:
000150DE 9368 000C                  		sub.w	d1,$C(a0)
000150E2 4E75                       		rts	
000150E4                            ; ===========================================================================
000150E4                            
000150E4                            loc_148A0:
000150E4 4A28 0038                  		tst.b	$38(a0)
000150E8 66F4                       		bne.s	loc_1489A
000150EA 08E8 0001 0022             		bset	#1,$22(a0)
000150F0 08A8 0005 0022             		bclr	#5,$22(a0)
000150F6 117C 0001 001D             		move.b	#1,$1D(a0)
000150FC 4E75                       		rts	
000150FE                            ; End of function Sonic_WalkCeiling
000150FE                            
000150FE                            ; ---------------------------------------------------------------------------
000150FE                            ; Subroutine allowing Sonic to walk up a vertical slope/wall to	his left
000150FE                            ; ---------------------------------------------------------------------------
000150FE                            
000150FE                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000150FE                            
000150FE                            
000150FE                            Sonic_WalkVertL:			; XREF: Sonic_AnglePos
000150FE 3428 000C                  		move.w	$C(a0),d2
00015102 3628 0008                  		move.w	8(a0),d3
00015106 7000                       		moveq	#0,d0
00015108 1028 0017                  		move.b	$17(a0),d0
0001510C 4880                       		ext.w	d0
0001510E 9440                       		sub.w	d0,d2
00015110 1028 0016                  		move.b	$16(a0),d0
00015114 4880                       		ext.w	d0
00015116 9640                       		sub.w	d0,d3
00015118 0A43 000F                  		eori.w	#$F,d3
0001511C 49F8 F768                  		lea	($FFFFF768).w,a4
00015120 367C FFF0                  		movea.w	#-$10,a3
00015124 3C3C 0800                  		move.w	#$800,d6
00015128 7A0D                       		moveq	#$D,d5
0001512A 6100 0000                  		bsr.w	FindWall
0001512E 3F01                       		move.w	d1,-(sp)
00015130 3428 000C                  		move.w	$C(a0),d2
00015134 3628 0008                  		move.w	8(a0),d3
00015138 7000                       		moveq	#0,d0
0001513A 1028 0017                  		move.b	$17(a0),d0
0001513E 4880                       		ext.w	d0
00015140 D440                       		add.w	d0,d2
00015142 1028 0016                  		move.b	$16(a0),d0
00015146 4880                       		ext.w	d0
00015148 9640                       		sub.w	d0,d3
0001514A 0A43 000F                  		eori.w	#$F,d3
0001514E 49F8 F76A                  		lea	($FFFFF76A).w,a4
00015152 367C FFF0                  		movea.w	#-$10,a3
00015156 3C3C 0800                  		move.w	#$800,d6
0001515A 7A0D                       		moveq	#$D,d5
0001515C 6100 0000                  		bsr.w	FindWall
00015160 301F                       		move.w	(sp)+,d0
00015162 6100 FE30                  		bsr.w	Sonic_Angle
00015166 4A41                       		tst.w	d1
00015168 6700                       		beq.s	locret_14934
0001516A 6A00                       		bpl.s	loc_14936
0001516C 0C41 FFF2                  		cmpi.w	#-$E,d1
00015170 6D00 FDDC                  		blt.w	locret_1470A
00015174 9368 0008                  		sub.w	d1,8(a0)
00015178                            
00015178                            locret_14934:
00015178 4E75                       		rts	
0001517A                            ; ===========================================================================
0001517A                            
0001517A                            loc_14936:
0001517A 0C41 000E                  		cmpi.w	#$E,d1
0001517E 6E00                       		bgt.s	loc_14942
00015180                            
00015180                            loc_1493C:
00015180 9368 0008                  		sub.w	d1,8(a0)
00015184 4E75                       		rts	
00015186                            ; ===========================================================================
00015186                            
00015186                            loc_14942:
00015186 4A28 0038                  		tst.b	$38(a0)
0001518A 66F4                       		bne.s	loc_1493C
0001518C 08E8 0001 0022             		bset	#1,$22(a0)
00015192 08A8 0005 0022             		bclr	#5,$22(a0)
00015198 117C 0001 001D             		move.b	#1,$1D(a0)
0001519E 4E75                       		rts	
000151A0                            ; End of function Sonic_WalkVertL
000151A0                            
000151A0                            ; ---------------------------------------------------------------------------
000151A0                            ; Subroutine to	find which tile	the object is standing on
000151A0                            ; ---------------------------------------------------------------------------
000151A0                            
000151A0                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000151A0                            
000151A0                            
000151A0                            Floor_ChkTile:				; XREF: FindFloor; et al
000151A0 3002                       		move.w	d2,d0
000151A2 E248                       		lsr.w	#1,d0
000151A4 0240 0380                  		andi.w	#$380,d0
000151A8 3203                       		move.w	d3,d1
000151AA E049                       		lsr.w	#8,d1
000151AC 0241 007F                  		andi.w	#$7F,d1
000151B0 D041                       		add.w	d1,d0
000151B2 72FF                       		moveq	#-1,d1
000151B4 43F8 A400                  		lea	($FFFFA400).w,a1
000151B8 1231 0000                  		move.b	(a1,d0.w),d1
000151BC 6700                       		beq.s	loc_14996
000151BE 6B00                       		bmi.s	loc_1499A
000151C0 5301                       		subq.b	#1,d1
000151C2 4881                       		ext.w	d1
000151C4 EE59                       		ror.w	#7,d1
000151C6 3002                       		move.w	d2,d0
000151C8 D040                       		add.w	d0,d0
000151CA 0240 01E0                  		andi.w	#$1E0,d0
000151CE D240                       		add.w	d0,d1
000151D0 3003                       		move.w	d3,d0
000151D2 E648                       		lsr.w	#3,d0
000151D4 0240 001E                  		andi.w	#$1E,d0
000151D8 D240                       		add.w	d0,d1
000151DA                            
000151DA                            loc_14996:
000151DA 2241                       		movea.l	d1,a1
000151DC 4E75                       		rts	
000151DE                            ; ===========================================================================
000151DE                            
000151DE                            loc_1499A:
000151DE 0241 007F                  		andi.w	#$7F,d1
000151E2 0828 0006 0001             		btst	#6,1(a0)
000151E8 6700                       		beq.s	loc_149B2
000151EA 5241                       		addq.w	#1,d1
000151EC 0C41 0029                  		cmpi.w	#$29,d1
000151F0 6600                       		bne.s	loc_149B2
000151F2 323C 0051                  		move.w	#$51,d1
000151F6                            
000151F6                            loc_149B2:
000151F6 5301                       		subq.b	#1,d1
000151F8 EE59                       		ror.w	#7,d1
000151FA 3002                       		move.w	d2,d0
000151FC D040                       		add.w	d0,d0
000151FE 0240 01E0                  		andi.w	#$1E0,d0
00015202 D240                       		add.w	d0,d1
00015204 3003                       		move.w	d3,d0
00015206 E648                       		lsr.w	#3,d0
00015208 0240 001E                  		andi.w	#$1E,d0
0001520C D240                       		add.w	d0,d1
0001520E 2241                       		movea.l	d1,a1
00015210 4E75                       		rts	
00015212                            ; End of function Floor_ChkTile
00015212                            
00015212                            
00015212                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00015212                            
00015212                            
00015212                            FindFloor:				; XREF: Sonic_AnglePos; et al
00015212 618C                       		bsr.s	Floor_ChkTile
00015214 3011                       		move.w	(a1),d0
00015216 3800                       		move.w	d0,d4
00015218 0240 07FF                  		andi.w	#$7FF,d0
0001521C 6700                       		beq.s	loc_149DE
0001521E 0B04                       		btst	d5,d4
00015220 6600                       		bne.s	loc_149EC
00015222                            
00015222                            loc_149DE:
00015222 D44B                       		add.w	a3,d2
00015224 6100 0000                  		bsr.w	FindFloor2
00015228 944B                       		sub.w	a3,d2
0001522A 0641 0010                  		addi.w	#$10,d1
0001522E 4E75                       		rts	
00015230                            ; ===========================================================================
00015230                            
00015230                            loc_149EC:
00015230 2478 F796                  		movea.l	($FFFFF796).w,a2 ; load	collision index
00015234 1032 0000                  		move.b	(a2,d0.w),d0
00015238 0240 00FF                  		andi.w	#$FF,d0
0001523C 67E4                       		beq.s	loc_149DE
0001523E 45F9 0000 0000             		lea	(AngleMap).l,a2
00015244 18B2 0000                  		move.b	(a2,d0.w),(a4)
00015248 E948                       		lsl.w	#4,d0
0001524A 3203                       		move.w	d3,d1
0001524C 0804 000B                  		btst	#$B,d4
00015250 6700                       		beq.s	loc_14A12
00015252 4641                       		not.w	d1
00015254 4414                       		neg.b	(a4)
00015256                            
00015256                            loc_14A12:
00015256 0804 000C                  		btst	#$C,d4
0001525A 6700                       		beq.s	loc_14A22
0001525C 0614 0040                  		addi.b	#$40,(a4)
00015260 4414                       		neg.b	(a4)
00015262 0414 0040                  		subi.b	#$40,(a4)
00015266                            
00015266                            loc_14A22:
00015266 0241 000F                  		andi.w	#$F,d1
0001526A D240                       		add.w	d0,d1
0001526C 45F9 0000 0000             		lea	(CollArray1).l,a2
00015272 1032 1000                  		move.b	(a2,d1.w),d0
00015276 4880                       		ext.w	d0
00015278 BD44                       		eor.w	d6,d4
0001527A 0804 000C                  		btst	#$C,d4
0001527E 6700                       		beq.s	loc_14A3E
00015280 4440                       		neg.w	d0
00015282                            
00015282                            loc_14A3E:
00015282 4A40                       		tst.w	d0
00015284 679C                       		beq.s	loc_149DE
00015286 6B00                       		bmi.s	loc_14A5A
00015288 0C00 0010                  		cmpi.b	#$10,d0
0001528C 6700                       		beq.s	loc_14A66
0001528E 3202                       		move.w	d2,d1
00015290 0241 000F                  		andi.w	#$F,d1
00015294 D041                       		add.w	d1,d0
00015296 323C 000F                  		move.w	#$F,d1
0001529A 9240                       		sub.w	d0,d1
0001529C 4E75                       		rts	
0001529E                            ; ===========================================================================
0001529E                            
0001529E                            loc_14A5A:
0001529E 3202                       		move.w	d2,d1
000152A0 0241 000F                  		andi.w	#$F,d1
000152A4 D041                       		add.w	d1,d0
000152A6 6A00 FF7A                  		bpl.w	loc_149DE
000152AA                            
000152AA                            loc_14A66:
000152AA 944B                       		sub.w	a3,d2
000152AC 6100 0000                  		bsr.w	FindFloor2
000152B0 D44B                       		add.w	a3,d2
000152B2 0441 0010                  		subi.w	#$10,d1
000152B6 4E75                       		rts	
000152B8                            ; End of function FindFloor
000152B8                            
000152B8                            
000152B8                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000152B8                            
000152B8                            
000152B8                            FindFloor2:				; XREF: FindFloor
000152B8 6100 FEE6                  		bsr.w	Floor_ChkTile
000152BC 3011                       		move.w	(a1),d0
000152BE 3800                       		move.w	d0,d4
000152C0 0240 07FF                  		andi.w	#$7FF,d0
000152C4 6700                       		beq.s	loc_14A86
000152C6 0B04                       		btst	d5,d4
000152C8 6600                       		bne.s	loc_14A94
000152CA                            
000152CA                            loc_14A86:
000152CA 323C 000F                  		move.w	#$F,d1
000152CE 3002                       		move.w	d2,d0
000152D0 0240 000F                  		andi.w	#$F,d0
000152D4 9240                       		sub.w	d0,d1
000152D6 4E75                       		rts	
000152D8                            ; ===========================================================================
000152D8                            
000152D8                            loc_14A94:
000152D8 2478 F796                  		movea.l	($FFFFF796).w,a2
000152DC 1032 0000                  		move.b	(a2,d0.w),d0
000152E0 0240 00FF                  		andi.w	#$FF,d0
000152E4 67E4                       		beq.s	loc_14A86
000152E6 45F9 0000 0000             		lea	(AngleMap).l,a2
000152EC 18B2 0000                  		move.b	(a2,d0.w),(a4)
000152F0 E948                       		lsl.w	#4,d0
000152F2 3203                       		move.w	d3,d1
000152F4 0804 000B                  		btst	#$B,d4
000152F8 6700                       		beq.s	loc_14ABA
000152FA 4641                       		not.w	d1
000152FC 4414                       		neg.b	(a4)
000152FE                            
000152FE                            loc_14ABA:
000152FE 0804 000C                  		btst	#$C,d4
00015302 6700                       		beq.s	loc_14ACA
00015304 0614 0040                  		addi.b	#$40,(a4)
00015308 4414                       		neg.b	(a4)
0001530A 0414 0040                  		subi.b	#$40,(a4)
0001530E                            
0001530E                            loc_14ACA:
0001530E 0241 000F                  		andi.w	#$F,d1
00015312 D240                       		add.w	d0,d1
00015314 45F9 0000 0000             		lea	(CollArray1).l,a2
0001531A 1032 1000                  		move.b	(a2,d1.w),d0
0001531E 4880                       		ext.w	d0
00015320 BD44                       		eor.w	d6,d4
00015322 0804 000C                  		btst	#$C,d4
00015326 6700                       		beq.s	loc_14AE6
00015328 4440                       		neg.w	d0
0001532A                            
0001532A                            loc_14AE6:
0001532A 4A40                       		tst.w	d0
0001532C 679C                       		beq.s	loc_14A86
0001532E 6B00                       		bmi.s	loc_14AFC
00015330 3202                       		move.w	d2,d1
00015332 0241 000F                  		andi.w	#$F,d1
00015336 D041                       		add.w	d1,d0
00015338 323C 000F                  		move.w	#$F,d1
0001533C 9240                       		sub.w	d0,d1
0001533E 4E75                       		rts	
00015340                            ; ===========================================================================
00015340                            
00015340                            loc_14AFC:
00015340 3202                       		move.w	d2,d1
00015342 0241 000F                  		andi.w	#$F,d1
00015346 D041                       		add.w	d1,d0
00015348 6A00 FF80                  		bpl.w	loc_14A86
0001534C 4641                       		not.w	d1
0001534E 4E75                       		rts	
00015350                            ; End of function FindFloor2
00015350                            
00015350                            
00015350                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00015350                            
00015350                            
00015350                            FindWall:				; XREF: Sonic_WalkVertR; et al
00015350 6100 FE4E                  		bsr.w	Floor_ChkTile
00015354 3011                       		move.w	(a1),d0
00015356 3800                       		move.w	d0,d4
00015358 0240 07FF                  		andi.w	#$7FF,d0
0001535C 6700                       		beq.s	loc_14B1E
0001535E 0B04                       		btst	d5,d4
00015360 6600                       		bne.s	loc_14B2C
00015362                            
00015362                            loc_14B1E:
00015362 D64B                       		add.w	a3,d3
00015364 6100 0000                  		bsr.w	FindWall2
00015368 964B                       		sub.w	a3,d3
0001536A 0641 0010                  		addi.w	#$10,d1
0001536E 4E75                       		rts	
00015370                            ; ===========================================================================
00015370                            
00015370                            loc_14B2C:
00015370 2478 F796                  		movea.l	($FFFFF796).w,a2
00015374 1032 0000                  		move.b	(a2,d0.w),d0
00015378 0240 00FF                  		andi.w	#$FF,d0
0001537C 67E4                       		beq.s	loc_14B1E
0001537E 45F9 0000 0000             		lea	(AngleMap).l,a2
00015384 18B2 0000                  		move.b	(a2,d0.w),(a4)
00015388 E948                       		lsl.w	#4,d0
0001538A 3202                       		move.w	d2,d1
0001538C 0804 000C                  		btst	#$C,d4
00015390 6700                       		beq.s	loc_14B5A
00015392 4641                       		not.w	d1
00015394 0614 0040                  		addi.b	#$40,(a4)
00015398 4414                       		neg.b	(a4)
0001539A 0414 0040                  		subi.b	#$40,(a4)
0001539E                            
0001539E                            loc_14B5A:
0001539E 0804 000B                  		btst	#$B,d4
000153A2 6700                       		beq.s	loc_14B62
000153A4 4414                       		neg.b	(a4)
000153A6                            
000153A6                            loc_14B62:
000153A6 0241 000F                  		andi.w	#$F,d1
000153AA D240                       		add.w	d0,d1
000153AC 45F9 0000 0000             		lea	(CollArray2).l,a2
000153B2 1032 1000                  		move.b	(a2,d1.w),d0
000153B6 4880                       		ext.w	d0
000153B8 BD44                       		eor.w	d6,d4
000153BA 0804 000B                  		btst	#$B,d4
000153BE 6700                       		beq.s	loc_14B7E
000153C0 4440                       		neg.w	d0
000153C2                            
000153C2                            loc_14B7E:
000153C2 4A40                       		tst.w	d0
000153C4 679C                       		beq.s	loc_14B1E
000153C6 6B00                       		bmi.s	loc_14B9A
000153C8 0C00 0010                  		cmpi.b	#$10,d0
000153CC 6700                       		beq.s	loc_14BA6
000153CE 3203                       		move.w	d3,d1
000153D0 0241 000F                  		andi.w	#$F,d1
000153D4 D041                       		add.w	d1,d0
000153D6 323C 000F                  		move.w	#$F,d1
000153DA 9240                       		sub.w	d0,d1
000153DC 4E75                       		rts	
000153DE                            ; ===========================================================================
000153DE                            
000153DE                            loc_14B9A:
000153DE 3203                       		move.w	d3,d1
000153E0 0241 000F                  		andi.w	#$F,d1
000153E4 D041                       		add.w	d1,d0
000153E6 6A00 FF7A                  		bpl.w	loc_14B1E
000153EA                            
000153EA                            loc_14BA6:
000153EA 964B                       		sub.w	a3,d3
000153EC 6100 0000                  		bsr.w	FindWall2
000153F0 D64B                       		add.w	a3,d3
000153F2 0441 0010                  		subi.w	#$10,d1
000153F6 4E75                       		rts	
000153F8                            ; End of function FindWall
000153F8                            
000153F8                            
000153F8                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000153F8                            
000153F8                            
000153F8                            FindWall2:				; XREF: FindWall
000153F8 6100 FDA6                  		bsr.w	Floor_ChkTile
000153FC 3011                       		move.w	(a1),d0
000153FE 3800                       		move.w	d0,d4
00015400 0240 07FF                  		andi.w	#$7FF,d0
00015404 6700                       		beq.s	loc_14BC6
00015406 0B04                       		btst	d5,d4
00015408 6600                       		bne.s	loc_14BD4
0001540A                            
0001540A                            loc_14BC6:
0001540A 323C 000F                  		move.w	#$F,d1
0001540E 3003                       		move.w	d3,d0
00015410 0240 000F                  		andi.w	#$F,d0
00015414 9240                       		sub.w	d0,d1
00015416 4E75                       		rts	
00015418                            ; ===========================================================================
00015418                            
00015418                            loc_14BD4:
00015418 2478 F796                  		movea.l	($FFFFF796).w,a2
0001541C 1032 0000                  		move.b	(a2,d0.w),d0
00015420 0240 00FF                  		andi.w	#$FF,d0
00015424 67E4                       		beq.s	loc_14BC6
00015426 45F9 0000 0000             		lea	(AngleMap).l,a2
0001542C 18B2 0000                  		move.b	(a2,d0.w),(a4)
00015430 E948                       		lsl.w	#4,d0
00015432 3202                       		move.w	d2,d1
00015434 0804 000C                  		btst	#$C,d4
00015438 6700                       		beq.s	loc_14C02
0001543A 4641                       		not.w	d1
0001543C 0614 0040                  		addi.b	#$40,(a4)
00015440 4414                       		neg.b	(a4)
00015442 0414 0040                  		subi.b	#$40,(a4)
00015446                            
00015446                            loc_14C02:
00015446 0804 000B                  		btst	#$B,d4
0001544A 6700                       		beq.s	loc_14C0A
0001544C 4414                       		neg.b	(a4)
0001544E                            
0001544E                            loc_14C0A:
0001544E 0241 000F                  		andi.w	#$F,d1
00015452 D240                       		add.w	d0,d1
00015454 45F9 0000 0000             		lea	(CollArray2).l,a2
0001545A 1032 1000                  		move.b	(a2,d1.w),d0
0001545E 4880                       		ext.w	d0
00015460 BD44                       		eor.w	d6,d4
00015462 0804 000B                  		btst	#$B,d4
00015466 6700                       		beq.s	loc_14C26
00015468 4440                       		neg.w	d0
0001546A                            
0001546A                            loc_14C26:
0001546A 4A40                       		tst.w	d0
0001546C 679C                       		beq.s	loc_14BC6
0001546E 6B00                       		bmi.s	loc_14C3C
00015470 3203                       		move.w	d3,d1
00015472 0241 000F                  		andi.w	#$F,d1
00015476 D041                       		add.w	d1,d0
00015478 323C 000F                  		move.w	#$F,d1
0001547C 9240                       		sub.w	d0,d1
0001547E 4E75                       		rts	
00015480                            ; ===========================================================================
00015480                            
00015480                            loc_14C3C:
00015480 3203                       		move.w	d3,d1
00015482 0241 000F                  		andi.w	#$F,d1
00015486 D041                       		add.w	d1,d0
00015488 6A00 FF80                  		bpl.w	loc_14BC6
0001548C 4641                       		not.w	d1
0001548E 4E75                       		rts	
00015490                            ; End of function FindWall2
00015490                            
00015490                            ; ---------------------------------------------------------------------------
00015490                            ; Unused floor/wall subroutine - logs something	to do with collision
00015490                            ; ---------------------------------------------------------------------------
00015490                            
00015490                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00015490                            
00015490                            
00015490                            FloorLog_Unk:				; XREF: Level
00015490 4E75                       		rts	
00015492                            
00015492 43F9 0000 0000             		lea	(CollArray1).l,a1
00015498 45F9 0000 0000             		lea	(CollArray1).l,a2
0001549E 363C 00FF                  		move.w	#$FF,d3
000154A2                            
000154A2                            loc_14C5E:
000154A2 7A10                       		moveq	#$10,d5
000154A4 343C 000F                  		move.w	#$F,d2
000154A8                            
000154A8                            loc_14C64:
000154A8 7800                       		moveq	#0,d4
000154AA 323C 000F                  		move.w	#$F,d1
000154AE                            
000154AE                            loc_14C6A:
000154AE 3019                       		move.w	(a1)+,d0
000154B0 EAA8                       		lsr.l	d5,d0
000154B2 D944                       		addx.w	d4,d4
000154B4 51C9 FFF8                  		dbf	d1,loc_14C6A
000154B8                            
000154B8 34C4                       		move.w	d4,(a2)+
000154BA 92FC 0020                  		suba.w	#$20,a1
000154BE 5345                       		subq.w	#1,d5
000154C0 51CA FFE6                  		dbf	d2,loc_14C64
000154C4                            
000154C4 D2FC 0020                  		adda.w	#$20,a1
000154C8 51CB FFD8                  		dbf	d3,loc_14C5E
000154CC                            
000154CC 43F9 0000 0000             		lea	(CollArray1).l,a1
000154D2 45F9 0000 0000             		lea	(CollArray2).l,a2
000154D8 6100                       		bsr.s	FloorLog_Unk2
000154DA 43F9 0000 0000             		lea	(CollArray1).l,a1
000154E0 45F9 0000 0000             		lea	(CollArray1).l,a2
000154E6                            
000154E6                            ; End of function FloorLog_Unk
000154E6                            
000154E6                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000154E6                            
000154E6                            
000154E6                            FloorLog_Unk2:				; XREF: FloorLog_Unk
000154E6 363C 0FFF                  		move.w	#$FFF,d3
000154EA                            
000154EA                            loc_14CA6:
000154EA 7400                       		moveq	#0,d2
000154EC 323C 000F                  		move.w	#$F,d1
000154F0 3019                       		move.w	(a1)+,d0
000154F2 6700                       		beq.s	loc_14CD4
000154F4 6B00                       		bmi.s	loc_14CBE
000154F6                            
000154F6                            loc_14CB2:
000154F6 E248                       		lsr.w	#1,d0
000154F8 6400                       		bcc.s	loc_14CB8
000154FA 5202                       		addq.b	#1,d2
000154FC                            
000154FC                            loc_14CB8:
000154FC 51C9 FFF8                  		dbf	d1,loc_14CB2
00015500                            
00015500 6000                       		bra.s	loc_14CD6
00015502                            ; ===========================================================================
00015502                            
00015502                            loc_14CBE:
00015502 0C40 FFFF                  		cmpi.w	#-1,d0
00015506 6700                       		beq.s	loc_14CD0
00015508                            
00015508                            loc_14CC4:
00015508 E348                       		lsl.w	#1,d0
0001550A 6400                       		bcc.s	loc_14CCA
0001550C 5302                       		subq.b	#1,d2
0001550E                            
0001550E                            loc_14CCA:
0001550E 51C9 FFF8                  		dbf	d1,loc_14CC4
00015512                            
00015512 6000                       		bra.s	loc_14CD6
00015514                            ; ===========================================================================
00015514                            
00015514                            loc_14CD0:
00015514 303C 0010                  		move.w	#$10,d0
00015518                            
00015518                            loc_14CD4:
00015518 3400                       		move.w	d0,d2
0001551A                            
0001551A                            loc_14CD6:
0001551A 14C2                       		move.b	d2,(a2)+
0001551C 51CB FFCC                  		dbf	d3,loc_14CA6
00015520                            
00015520 4E75                       		rts	
00015522                            
00015522                            ; End of function FloorLog_Unk2
00015522                            
00015522                            
00015522                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00015522                            
00015522                            
00015522                            Sonic_WalkSpeed:			; XREF: Sonic_Move
00015522 2628 0008                  		move.l	8(a0),d3
00015526 2428 000C                  		move.l	$C(a0),d2
0001552A 3228 0010                  		move.w	$10(a0),d1
0001552E 48C1                       		ext.l	d1
00015530 E181                       		asl.l	#8,d1
00015532 D681                       		add.l	d1,d3
00015534 3228 0012                  		move.w	$12(a0),d1
00015538 48C1                       		ext.l	d1
0001553A E181                       		asl.l	#8,d1
0001553C D481                       		add.l	d1,d2
0001553E 4842                       		swap	d2
00015540 4843                       		swap	d3
00015542 11C0 F768                  		move.b	d0,($FFFFF768).w
00015546 11C0 F76A                  		move.b	d0,($FFFFF76A).w
0001554A 1200                       		move.b	d0,d1
0001554C 0600 0020                  		addi.b	#$20,d0
00015550 6A00                       		bpl.s	loc_14D1A
00015552 1001                       		move.b	d1,d0
00015554 6A00                       		bpl.s	loc_14D14
00015556 5300                       		subq.b	#1,d0
00015558                            
00015558                            loc_14D14:
00015558 0600 0020                  		addi.b	#$20,d0
0001555C 6000                       		bra.s	loc_14D24
0001555E                            ; ===========================================================================
0001555E                            
0001555E                            loc_14D1A:
0001555E 1001                       		move.b	d1,d0
00015560 6A00                       		bpl.s	loc_14D20
00015562 5200                       		addq.b	#1,d0
00015564                            
00015564                            loc_14D20:
00015564 0600 001F                  		addi.b	#$1F,d0
00015568                            
00015568                            loc_14D24:
00015568 0200 00C0                  		andi.b	#$C0,d0
0001556C 6700 0000                  		beq.w	loc_14DF0
00015570 0C00 0080                  		cmpi.b	#$80,d0
00015574 6700 0000                  		beq.w	loc_14F7C
00015578 0201 0038                  		andi.b	#$38,d1
0001557C 6600                       		bne.s	loc_14D3C
0001557E 5042                       		addq.w	#8,d2
00015580                            
00015580                            loc_14D3C:
00015580 0C00 0040                  		cmpi.b	#$40,d0
00015584 6700 0000                  		beq.w	loc_1504A
00015588 6000 0000                  		bra.w	loc_14EBC
0001558C                            
0001558C                            ; End of function Sonic_WalkSpeed
0001558C                            
0001558C                            
0001558C                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0001558C                            
0001558C                            
0001558C                            sub_14D48:				; XREF: Sonic_Jump
0001558C 11C0 F768                  		move.b	d0,($FFFFF768).w
00015590 11C0 F76A                  		move.b	d0,($FFFFF76A).w
00015594 0600 0020                  		addi.b	#$20,d0
00015598 0200 00C0                  		andi.b	#$C0,d0
0001559C 0C00 0040                  		cmpi.b	#$40,d0
000155A0 6700 0000                  		beq.w	loc_14FD6
000155A4 0C00 0080                  		cmpi.b	#$80,d0
000155A8 6700 0000                  		beq.w	Sonic_DontRunOnWalls
000155AC 0C00 00C0                  		cmpi.b	#$C0,d0
000155B0 6700 0000                  		beq.w	sub_14E50
000155B4                            
000155B4                            ; End of function sub_14D48
000155B4                            
000155B4                            ; ---------------------------------------------------------------------------
000155B4                            ; Subroutine to	make Sonic land	on the floor after jumping
000155B4                            ; ---------------------------------------------------------------------------
000155B4                            
000155B4                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000155B4                            
000155B4                            
000155B4                            Sonic_HitFloor:				; XREF: Sonic_Floor
000155B4 3428 000C                  		move.w	$C(a0),d2
000155B8 3628 0008                  		move.w	8(a0),d3
000155BC 7000                       		moveq	#0,d0
000155BE 1028 0016                  		move.b	$16(a0),d0
000155C2 4880                       		ext.w	d0
000155C4 D440                       		add.w	d0,d2
000155C6 1028 0017                  		move.b	$17(a0),d0
000155CA 4880                       		ext.w	d0
000155CC D640                       		add.w	d0,d3
000155CE 49F8 F768                  		lea	($FFFFF768).w,a4
000155D2 367C 0010                  		movea.w	#$10,a3
000155D6 3C3C 0000                  		move.w	#0,d6
000155DA 7A0D                       		moveq	#$D,d5
000155DC 6100 FC34                  		bsr.w	FindFloor
000155E0 3F01                       		move.w	d1,-(sp)
000155E2 3428 000C                  		move.w	$C(a0),d2
000155E6 3628 0008                  		move.w	8(a0),d3
000155EA 7000                       		moveq	#0,d0
000155EC 1028 0016                  		move.b	$16(a0),d0
000155F0 4880                       		ext.w	d0
000155F2 D440                       		add.w	d0,d2
000155F4 1028 0017                  		move.b	$17(a0),d0
000155F8 4880                       		ext.w	d0
000155FA 9640                       		sub.w	d0,d3
000155FC 49F8 F76A                  		lea	($FFFFF76A).w,a4
00015600 367C 0010                  		movea.w	#$10,a3
00015604 3C3C 0000                  		move.w	#0,d6
00015608 7A0D                       		moveq	#$D,d5
0001560A 6100 FC06                  		bsr.w	FindFloor
0001560E 301F                       		move.w	(sp)+,d0
00015610 143C 0000                  		move.b	#0,d2
00015614                            
00015614                            loc_14DD0:
00015614 1638 F76A                  		move.b	($FFFFF76A).w,d3
00015618 B240                       		cmp.w	d0,d1
0001561A 6F00                       		ble.s	loc_14DDE
0001561C 1638 F768                  		move.b	($FFFFF768).w,d3
00015620 C141                       		exg	d0,d1
00015622                            
00015622                            loc_14DDE:
00015622 0803 0000                  		btst	#0,d3
00015626 6700                       		beq.s	locret_14DE6
00015628 1602                       		move.b	d2,d3
0001562A                            
0001562A                            locret_14DE6:
0001562A 4E75                       		rts	
0001562C                            
0001562C                            ; End of function Sonic_HitFloor
0001562C                            
0001562C                            ; ===========================================================================
0001562C 3428 000C                  		move.w	$C(a0),d2
00015630 3628 0008                  		move.w	8(a0),d3
00015634                            
00015634                            loc_14DF0:				; XREF: Sonic_WalkSpeed
00015634 0642 000A                  		addi.w	#$A,d2
00015638 49F8 F768                  		lea	($FFFFF768).w,a4
0001563C 367C 0010                  		movea.w	#$10,a3
00015640 3C3C 0000                  		move.w	#0,d6
00015644 7A0E                       		moveq	#$E,d5
00015646 6100 FBCA                  		bsr.w	FindFloor
0001564A 143C 0000                  		move.b	#0,d2
0001564E                            
0001564E                            loc_14E0A:				; XREF: sub_14EB4
0001564E 1638 F768                  		move.b	($FFFFF768).w,d3
00015652 0803 0000                  		btst	#0,d3
00015656 6700                       		beq.s	locret_14E16
00015658 1602                       		move.b	d2,d3
0001565A                            
0001565A                            locret_14E16:
0001565A 4E75                       		rts	
0001565C                            
0001565C                            ; ---------------------------------------------------------------------------
0001565C                            ; Subroutine allowing objects to interact with the floor
0001565C                            ; ---------------------------------------------------------------------------
0001565C                            
0001565C                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0001565C                            
0001565C                            
0001565C                            ObjHitFloor:
0001565C 3628 0008                  		move.w	8(a0),d3
00015660                            
00015660                            ; End of function ObjHitFloor
00015660                            
00015660                            
00015660                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00015660                            
00015660                            
00015660                            ObjHitFloor2:
00015660 3428 000C                  		move.w	$C(a0),d2
00015664 7000                       		moveq	#0,d0
00015666 1028 0016                  		move.b	$16(a0),d0
0001566A 4880                       		ext.w	d0
0001566C D440                       		add.w	d0,d2
0001566E 49F8 F768                  		lea	($FFFFF768).w,a4
00015672 18BC 0000                  		move.b	#0,(a4)
00015676 367C 0010                  		movea.w	#$10,a3
0001567A 3C3C 0000                  		move.w	#0,d6
0001567E 7A0D                       		moveq	#$D,d5
00015680 6100 FB90                  		bsr.w	FindFloor
00015684 1638 F768                  		move.b	($FFFFF768).w,d3
00015688 0803 0000                  		btst	#0,d3
0001568C 6700                       		beq.s	locret_14E4E
0001568E 163C 0000                  		move.b	#0,d3
00015692                            
00015692                            locret_14E4E:
00015692 4E75                       		rts	
00015694                            ; End of function ObjHitFloor2
00015694                            
00015694                            
00015694                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00015694                            
00015694                            
00015694                            sub_14E50:				; XREF: sub_14D48
00015694 3428 000C                  		move.w	$C(a0),d2
00015698 3628 0008                  		move.w	8(a0),d3
0001569C 7000                       		moveq	#0,d0
0001569E 1028 0017                  		move.b	$17(a0),d0
000156A2 4880                       		ext.w	d0
000156A4 9440                       		sub.w	d0,d2
000156A6 1028 0016                  		move.b	$16(a0),d0
000156AA 4880                       		ext.w	d0
000156AC D640                       		add.w	d0,d3
000156AE 49F8 F768                  		lea	($FFFFF768).w,a4
000156B2 367C 0010                  		movea.w	#$10,a3
000156B6 3C3C 0000                  		move.w	#0,d6
000156BA 7A0E                       		moveq	#$E,d5
000156BC 6100 FC92                  		bsr.w	FindWall
000156C0 3F01                       		move.w	d1,-(sp)
000156C2 3428 000C                  		move.w	$C(a0),d2
000156C6 3628 0008                  		move.w	8(a0),d3
000156CA 7000                       		moveq	#0,d0
000156CC 1028 0017                  		move.b	$17(a0),d0
000156D0 4880                       		ext.w	d0
000156D2 D440                       		add.w	d0,d2
000156D4 1028 0016                  		move.b	$16(a0),d0
000156D8 4880                       		ext.w	d0
000156DA D640                       		add.w	d0,d3
000156DC 49F8 F76A                  		lea	($FFFFF76A).w,a4
000156E0 367C 0010                  		movea.w	#$10,a3
000156E4 3C3C 0000                  		move.w	#0,d6
000156E8 7A0E                       		moveq	#$E,d5
000156EA 6100 FC64                  		bsr.w	FindWall
000156EE 301F                       		move.w	(sp)+,d0
000156F0 143C 00C0                  		move.b	#-$40,d2
000156F4 6000 FF1E                  		bra.w	loc_14DD0
000156F8                            
000156F8                            ; End of function sub_14E50
000156F8                            
000156F8                            
000156F8                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000156F8                            
000156F8                            
000156F8                            sub_14EB4:				; XREF: Sonic_Floor
000156F8 3428 000C                  		move.w	$C(a0),d2
000156FC 3628 0008                  		move.w	8(a0),d3
00015700                            
00015700                            loc_14EBC:
00015700 0643 000A                  		addi.w	#$A,d3
00015704 49F8 F768                  		lea	($FFFFF768).w,a4
00015708 367C 0010                  		movea.w	#$10,a3
0001570C 3C3C 0000                  		move.w	#0,d6
00015710 7A0E                       		moveq	#$E,d5
00015712 6100 FC3C                  		bsr.w	FindWall
00015716 143C 00C0                  		move.b	#-$40,d2
0001571A 6000 FF32                  		bra.w	loc_14E0A
0001571E                            
0001571E                            ; End of function sub_14EB4
0001571E                            
0001571E                            ; ---------------------------------------------------------------------------
0001571E                            ; Subroutine to	detect when an object hits a wall to its right
0001571E                            ; ---------------------------------------------------------------------------
0001571E                            
0001571E                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0001571E                            
0001571E                            
0001571E                            ObjHitWallRight:
0001571E D668 0008                  		add.w	8(a0),d3
00015722 3428 000C                  		move.w	$C(a0),d2
00015726 49F8 F768                  		lea	($FFFFF768).w,a4
0001572A 18BC 0000                  		move.b	#0,(a4)
0001572E 367C 0010                  		movea.w	#$10,a3
00015732 3C3C 0000                  		move.w	#0,d6
00015736 7A0E                       		moveq	#$E,d5
00015738 6100 FC16                  		bsr.w	FindWall
0001573C 1638 F768                  		move.b	($FFFFF768).w,d3
00015740 0803 0000                  		btst	#0,d3
00015744 6700                       		beq.s	locret_14F06
00015746 163C 00C0                  		move.b	#-$40,d3
0001574A                            
0001574A                            locret_14F06:
0001574A 4E75                       		rts	
0001574C                            
0001574C                            ; End of function ObjHitWallRight
0001574C                            
0001574C                            ; ---------------------------------------------------------------------------
0001574C                            ; Subroutine preventing	Sonic from running on walls and	ceilings when he
0001574C                            ; touches them
0001574C                            ; ---------------------------------------------------------------------------
0001574C                            
0001574C                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0001574C                            
0001574C                            
0001574C                            Sonic_DontRunOnWalls:			; XREF: Sonic_Floor; et al
0001574C 3428 000C                  		move.w	$C(a0),d2
00015750 3628 0008                  		move.w	8(a0),d3
00015754 7000                       		moveq	#0,d0
00015756 1028 0016                  		move.b	$16(a0),d0
0001575A 4880                       		ext.w	d0
0001575C 9440                       		sub.w	d0,d2
0001575E 0A42 000F                  		eori.w	#$F,d2
00015762 1028 0017                  		move.b	$17(a0),d0
00015766 4880                       		ext.w	d0
00015768 D640                       		add.w	d0,d3
0001576A 49F8 F768                  		lea	($FFFFF768).w,a4
0001576E 367C FFF0                  		movea.w	#-$10,a3
00015772 3C3C 1000                  		move.w	#$1000,d6
00015776 7A0E                       		moveq	#$E,d5
00015778 6100 FA98                  		bsr.w	FindFloor
0001577C 3F01                       		move.w	d1,-(sp)
0001577E 3428 000C                  		move.w	$C(a0),d2
00015782 3628 0008                  		move.w	8(a0),d3
00015786 7000                       		moveq	#0,d0
00015788 1028 0016                  		move.b	$16(a0),d0
0001578C 4880                       		ext.w	d0
0001578E 9440                       		sub.w	d0,d2
00015790 0A42 000F                  		eori.w	#$F,d2
00015794 1028 0017                  		move.b	$17(a0),d0
00015798 4880                       		ext.w	d0
0001579A 9640                       		sub.w	d0,d3
0001579C 49F8 F76A                  		lea	($FFFFF76A).w,a4
000157A0 367C FFF0                  		movea.w	#-$10,a3
000157A4 3C3C 1000                  		move.w	#$1000,d6
000157A8 7A0E                       		moveq	#$E,d5
000157AA 6100 FA66                  		bsr.w	FindFloor
000157AE 301F                       		move.w	(sp)+,d0
000157B0 143C 0080                  		move.b	#-$80,d2
000157B4 6000 FE5E                  		bra.w	loc_14DD0
000157B8                            ; End of function Sonic_DontRunOnWalls
000157B8                            
000157B8                            ; ===========================================================================
000157B8 3428 000C                  		move.w	$C(a0),d2
000157BC 3628 0008                  		move.w	8(a0),d3
000157C0                            
000157C0                            loc_14F7C:
000157C0 0442 000A                  		subi.w	#$A,d2
000157C4 0A42 000F                  		eori.w	#$F,d2
000157C8 49F8 F768                  		lea	($FFFFF768).w,a4
000157CC 367C FFF0                  		movea.w	#-$10,a3
000157D0 3C3C 1000                  		move.w	#$1000,d6
000157D4 7A0E                       		moveq	#$E,d5
000157D6 6100 FA3A                  		bsr.w	FindFloor
000157DA 143C 0080                  		move.b	#-$80,d2
000157DE 6000 FE6E                  		bra.w	loc_14E0A
000157E2                            
000157E2                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000157E2                            
000157E2                            
000157E2                            ObjHitCeiling:
000157E2 3428 000C                  		move.w	$C(a0),d2
000157E6 3628 0008                  		move.w	8(a0),d3
000157EA 7000                       		moveq	#0,d0
000157EC 1028 0016                  		move.b	$16(a0),d0
000157F0 4880                       		ext.w	d0
000157F2 9440                       		sub.w	d0,d2
000157F4 0A42 000F                  		eori.w	#$F,d2
000157F8 49F8 F768                  		lea	($FFFFF768).w,a4
000157FC 367C FFF0                  		movea.w	#-$10,a3
00015800 3C3C 1000                  		move.w	#$1000,d6
00015804 7A0E                       		moveq	#$E,d5
00015806 6100 FA0A                  		bsr.w	FindFloor
0001580A 1638 F768                  		move.b	($FFFFF768).w,d3
0001580E 0803 0000                  		btst	#0,d3
00015812 6700                       		beq.s	locret_14FD4
00015814 163C 0080                  		move.b	#-$80,d3
00015818                            
00015818                            locret_14FD4:
00015818 4E75                       		rts	
0001581A                            ; End of function ObjHitCeiling
0001581A                            
0001581A                            ; ===========================================================================
0001581A                            
0001581A                            loc_14FD6:				; XREF: sub_14D48
0001581A 3428 000C                  		move.w	$C(a0),d2
0001581E 3628 0008                  		move.w	8(a0),d3
00015822 7000                       		moveq	#0,d0
00015824 1028 0017                  		move.b	$17(a0),d0
00015828 4880                       		ext.w	d0
0001582A 9440                       		sub.w	d0,d2
0001582C 1028 0016                  		move.b	$16(a0),d0
00015830 4880                       		ext.w	d0
00015832 9640                       		sub.w	d0,d3
00015834 0A43 000F                  		eori.w	#$F,d3
00015838 49F8 F768                  		lea	($FFFFF768).w,a4
0001583C 367C FFF0                  		movea.w	#-$10,a3
00015840 3C3C 0800                  		move.w	#$800,d6
00015844 7A0E                       		moveq	#$E,d5
00015846 6100 FB08                  		bsr.w	FindWall
0001584A 3F01                       		move.w	d1,-(sp)
0001584C 3428 000C                  		move.w	$C(a0),d2
00015850 3628 0008                  		move.w	8(a0),d3
00015854 7000                       		moveq	#0,d0
00015856 1028 0017                  		move.b	$17(a0),d0
0001585A 4880                       		ext.w	d0
0001585C D440                       		add.w	d0,d2
0001585E 1028 0016                  		move.b	$16(a0),d0
00015862 4880                       		ext.w	d0
00015864 9640                       		sub.w	d0,d3
00015866 0A43 000F                  		eori.w	#$F,d3
0001586A 49F8 F76A                  		lea	($FFFFF76A).w,a4
0001586E 367C FFF0                  		movea.w	#-$10,a3
00015872 3C3C 0800                  		move.w	#$800,d6
00015876 7A0E                       		moveq	#$E,d5
00015878 6100 FAD6                  		bsr.w	FindWall
0001587C 301F                       		move.w	(sp)+,d0
0001587E 143C 0040                  		move.b	#$40,d2
00015882 6000 FD90                  		bra.w	loc_14DD0
00015886                            
00015886                            ; ---------------------------------------------------------------------------
00015886                            ; Subroutine to	stop Sonic when	he jumps at a wall
00015886                            ; ---------------------------------------------------------------------------
00015886                            
00015886                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00015886                            
00015886                            
00015886                            Sonic_HitWall:				; XREF: Sonic_Floor
00015886 3428 000C                  		move.w	$C(a0),d2
0001588A 3628 0008                  		move.w	8(a0),d3
0001588E                            
0001588E                            loc_1504A:
0001588E 0443 000A                  		subi.w	#$A,d3
00015892 0A43 000F                  		eori.w	#$F,d3
00015896 49F8 F768                  		lea	($FFFFF768).w,a4
0001589A 367C FFF0                  		movea.w	#-$10,a3
0001589E 3C3C 0800                  		move.w	#$800,d6
000158A2 7A0E                       		moveq	#$E,d5
000158A4 6100 FAAA                  		bsr.w	FindWall
000158A8 143C 0040                  		move.b	#$40,d2
000158AC 6000 FDA0                  		bra.w	loc_14E0A
000158B0                            ; End of function Sonic_HitWall
000158B0                            
000158B0                            ; ---------------------------------------------------------------------------
000158B0                            ; Subroutine to	detect when an object hits a wall to its left
000158B0                            ; ---------------------------------------------------------------------------
000158B0                            
000158B0                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000158B0                            
000158B0                            
000158B0                            ObjHitWallLeft:
000158B0 D668 0008                  		add.w	8(a0),d3
000158B4 3428 000C                  		move.w	$C(a0),d2
000158B8 49F8 F768                  		lea	($FFFFF768).w,a4
000158BC 18BC 0000                  		move.b	#0,(a4)
000158C0 367C FFF0                  		movea.w	#-$10,a3
000158C4 3C3C 0800                  		move.w	#$800,d6
000158C8 7A0E                       		moveq	#$E,d5
000158CA 6100 FA84                  		bsr.w	FindWall
000158CE 1638 F768                  		move.b	($FFFFF768).w,d3
000158D2 0803 0000                  		btst	#0,d3
000158D6 6700                       		beq.s	locret_15098
000158D8 163C 0040                  		move.b	#$40,d3
000158DC                            
000158DC                            locret_15098:
000158DC 4E75                       		rts	
000158DE                            ; End of function ObjHitWallLeft
000158DE                            
000158DE                            ; ===========================================================================
000158DE                            ; ---------------------------------------------------------------------------
000158DE                            ; Object 66 - rotating disc that grabs Sonic (SBZ)
000158DE                            ; ---------------------------------------------------------------------------
000158DE                            
000158DE                            Obj66:					; XREF: Obj_Index
000158DE 7000                       		moveq	#0,d0
000158E0 1028 0024                  		move.b	$24(a0),d0
000158E4 323B 0000                  		move.w	Obj66_Index(pc,d0.w),d1
000158E8 4EFB 1000                  		jmp	Obj66_Index(pc,d1.w)
000158EC                            ; ===========================================================================
000158EC 0000                       Obj66_Index:	dc.w Obj66_Main-Obj66_Index
000158EE 0000                       		dc.w Obj66_Action-Obj66_Index
000158F0 0000                       		dc.w Obj66_Display-Obj66_Index
000158F2 0000                       		dc.w Obj66_Release-Obj66_Index
000158F4                            ; ===========================================================================
000158F4                            
000158F4                            Obj66_Main:				; XREF: Obj66_Index
000158F4 5428 0024                  		addq.b	#2,$24(a0)
000158F8 323C 0001                  		move.w	#1,d1
000158FC 2248                       		movea.l	a0,a1
000158FE 6000                       		bra.s	Obj66_MakeItem
00015900                            ; ===========================================================================
00015900                            
00015900                            Obj66_Loop:
00015900 6100 88E6                  		bsr.w	SingleObjLoad
00015904 6600                       		bne.s	loc_150FE
00015906 12BC 0066                  		move.b	#$66,0(a1)
0001590A 5829 0024                  		addq.b	#4,$24(a1)
0001590E 3368 0008 0008             		move.w	8(a0),8(a1)
00015914 3368 000C 000C             		move.w	$C(a0),$C(a1)
0001591A 137C 0003 0018             		move.b	#3,$18(a1)
00015920 137C 0010 001A             		move.b	#$10,$1A(a1)
00015926                            
00015926                            Obj66_MakeItem:				; XREF: Obj66_Main
00015926 237C 0000 0000 0004        		move.l	#Map_obj66,4(a1)
0001592E 337C 4348 0002             		move.w	#$4348,2(a1)
00015934 0029 0004 0001             		ori.b	#4,1(a1)
0001593A 137C 0038 0019             		move.b	#$38,$19(a1)
00015940                            
00015940                            loc_150FE:
00015940 51C9 FFBE                  		dbf	d1,Obj66_Loop
00015944                            
00015944 117C 0030 0019             		move.b	#$30,$19(a0)
0001594A 117C 0004 0018             		move.b	#4,$18(a0)
00015950 317C 003C 0030             		move.w	#$3C,$30(a0)
00015956 117C 0001 0034             		move.b	#1,$34(a0)
0001595C 1168 0028 0038             		move.b	$28(a0),$38(a0)
00015962                            
00015962                            Obj66_Action:				; XREF: Obj66_Index
00015962 6100 0000                  		bsr.w	Obj66_ChkSwitch
00015966 4A28 0001                  		tst.b	1(a0)
0001596A 6A00 0000                  		bpl.w	Obj66_Display
0001596E 323C 0030                  		move.w	#$30,d1
00015972 3401                       		move.w	d1,d2
00015974 3602                       		move.w	d2,d3
00015976 5243                       		addq.w	#1,d3
00015978 3828 0008                  		move.w	8(a0),d4
0001597C 6100 A7B4                  		bsr.w	SolidObject
00015980 0828 0005 0022             		btst	#5,$22(a0)
00015986 6700 0000                  		beq.w	Obj66_Display
0001598A 43F8 D000                  		lea	($FFFFD000).w,a1
0001598E 720E                       		moveq	#$E,d1
00015990 3029 0008                  		move.w	8(a1),d0
00015994 B068 0008                  		cmp.w	8(a0),d0
00015998 6500                       		bcs.s	Obj66_GrabSonic
0001599A 7207                       		moveq	#7,d1
0001599C                            
0001599C                            Obj66_GrabSonic:
0001599C B228 001A                  		cmp.b	$1A(a0),d1
000159A0 6600                       		bne.s	Obj66_Display
000159A2 1141 0032                  		move.b	d1,$32(a0)
000159A6 5828 0024                  		addq.b	#4,$24(a0)
000159AA 11FC 0001 F7C8             		move.b	#1,($FFFFF7C8).w ; lock	controls
000159B0 137C 0002 001C             		move.b	#2,$1C(a1)	; make Sonic use "rolling" animation
000159B6 337C 0800 0014             		move.w	#$800,$14(a1)
000159BC 337C 0000 0010             		move.w	#0,$10(a1)
000159C2 337C 0000 0012             		move.w	#0,$12(a1)
000159C8 08A8 0005 0022             		bclr	#5,$22(a0)
000159CE 08A9 0005 0022             		bclr	#5,$22(a1)
000159D4 08E9 0001 0022             		bset	#1,$22(a1)
000159DA 3429 0008                  		move.w	8(a1),d2
000159DE 3629 000C                  		move.w	$C(a1),d3
000159E2 6100 0000                  		bsr.w	Obj66_ChgPos
000159E6 D569 0008                  		add.w	d2,8(a1)
000159EA D769 000C                  		add.w	d3,$C(a1)
000159EE E0E9 0008                  		asr	8(a1)
000159F2 E0E9 000C                  		asr	$C(a1)
000159F6                            
000159F6                            Obj66_Display:				; XREF: Obj66_Index
000159F6 6000 A412                  		bra.w	MarkObjGone
000159FA                            ; ===========================================================================
000159FA                            
000159FA                            Obj66_Release:				; XREF: Obj66_Index
000159FA 1028 001A                  		move.b	$1A(a0),d0
000159FE 0C00 0004                  		cmpi.b	#4,d0
00015A02 6700                       		beq.s	loc_151C8
00015A04 0C00 0007                  		cmpi.b	#7,d0
00015A08 6600                       		bne.s	loc_151F8
00015A0A                            
00015A0A                            loc_151C8:
00015A0A B028 0032                  		cmp.b	$32(a0),d0
00015A0E 6700                       		beq.s	loc_151F8
00015A10 43F8 D000                  		lea	($FFFFD000).w,a1
00015A14 337C 0000 0010             		move.w	#0,$10(a1)
00015A1A 337C 0800 0012             		move.w	#$800,$12(a1)
00015A20 0C00 0004                  		cmpi.b	#4,d0
00015A24 6700                       		beq.s	loc_151F0
00015A26 337C 0800 0010             		move.w	#$800,$10(a1)
00015A2C 337C 0800 0012             		move.w	#$800,$12(a1)
00015A32                            
00015A32                            loc_151F0:
00015A32 4238 F7C8                  		clr.b	($FFFFF7C8).w	; unlock controls
00015A36 5928 0024                  		subq.b	#4,$24(a0)
00015A3A                            
00015A3A                            loc_151F8:
00015A3A 6100                       		bsr.s	Obj66_ChkSwitch
00015A3C 6100                       		bsr.s	Obj66_ChgPos
00015A3E 6000 A3CA                  		bra.w	MarkObjGone
00015A42                            
00015A42                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00015A42                            
00015A42                            
00015A42                            Obj66_ChkSwitch:			; XREF: Obj66_Action
00015A42 45F8 F7E0                  		lea	($FFFFF7E0).w,a2
00015A46 7000                       		moveq	#0,d0
00015A48 1028 0038                  		move.b	$38(a0),d0
00015A4C 0832 0000 0000             		btst	#0,(a2,d0.w)	; is switch pressed?
00015A52 6700                       		beq.s	loc_15224	; if not, branch
00015A54 4A28 0036                  		tst.b	$36(a0)		; has switch previously	been pressed?
00015A58 6600                       		bne.s	Obj66_Animate	; if yes, branch
00015A5A 4428 0034                  		neg.b	$34(a0)
00015A5E 117C 0001 0036             		move.b	#1,$36(a0)	; set to "previously pressed"
00015A64 6000                       		bra.s	Obj66_Animate
00015A66                            ; ===========================================================================
00015A66                            
00015A66                            loc_15224:
00015A66 4228 0036                  		clr.b	$36(a0)		; set to "not yet pressed"
00015A6A                            
00015A6A                            Obj66_Animate:
00015A6A 5328 001E                  		subq.b	#1,$1E(a0)
00015A6E 6A00                       		bpl.s	locret_15246
00015A70 117C 0007 001E             		move.b	#7,$1E(a0)
00015A76 1228 0034                  		move.b	$34(a0),d1
00015A7A 1028 001A                  		move.b	$1A(a0),d0
00015A7E D001                       		add.b	d1,d0
00015A80 0200 000F                  		andi.b	#$F,d0
00015A84 1140 001A                  		move.b	d0,$1A(a0)
00015A88                            
00015A88                            locret_15246:
00015A88 4E75                       		rts	
00015A8A                            ; End of function Obj66_ChkSwitch
00015A8A                            
00015A8A                            
00015A8A                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00015A8A                            
00015A8A                            
00015A8A                            Obj66_ChgPos:				; XREF: Obj66_GrabSonic
00015A8A 43F8 D000                  		lea	($FFFFD000).w,a1
00015A8E 7000                       		moveq	#0,d0
00015A90 1028 001A                  		move.b	$1A(a0),d0
00015A94 D040                       		add.w	d0,d0
00015A96 45FB 0000                  		lea	Obj66_PosData(pc,d0.w),a2
00015A9A 101A                       		move.b	(a2)+,d0
00015A9C 4880                       		ext.w	d0
00015A9E D068 0008                  		add.w	8(a0),d0
00015AA2 3340 0008                  		move.w	d0,8(a1)
00015AA6 101A                       		move.b	(a2)+,d0
00015AA8 4880                       		ext.w	d0
00015AAA D068 000C                  		add.w	$C(a0),d0
00015AAE 3340 000C                  		move.w	d0,$C(a1)
00015AB2 4E75                       		rts	
00015AB4                            ; End of function Obj66_ChgPos
00015AB4                            
00015AB4                            ; ===========================================================================
00015AB4 E000 E20E                  Obj66_PosData:	dc.b  $E0,   0,	$E2,  $E ; disc	x-pos, Sonic x-pos, disc y-pos,	Sonic y-pos
00015AB8 E818 F21E                  		dc.b  $E8, $18,	$F2, $1E
00015ABC 0020 0E1E                  		dc.b	0, $20,	 $E, $1E
00015AC0 1818 1E0E                  		dc.b  $18, $18,	$1E,  $E
00015AC4 2000 1EF2                  		dc.b  $20,   0,	$1E, $F2
00015AC8 18E8 0EE2                  		dc.b  $18, $E8,	 $E, $E2
00015ACC 00E0 F2E2                  		dc.b	0, $E0,	$F2, $E2
00015AD0 E8E8 E2F2                  		dc.b  $E8, $E8,	$E2, $F2
00015AD4                            ; ---------------------------------------------------------------------------
00015AD4                            ; Sprite mappings - rotating disc that grabs Sonic (SBZ)
00015AD4                            ; ---------------------------------------------------------------------------
00015AD4                            Map_obj66:
00015AD4                            	include "_maps\obj66.asm"
00015AD4                            ; ---------------------------------------------------------------------------
00015AD4                            ; Sprite mappings - rotating disc that grabs Sonic (SBZ)
00015AD4                            ; ---------------------------------------------------------------------------
00015AD4 0000 0000                  		dc.w byte_152B4-Map_obj66, byte_152D3-Map_obj66
00015AD8 0000 0000                  		dc.w byte_152F2-Map_obj66, byte_15311-Map_obj66
00015ADC 0000 0000                  		dc.w byte_15330-Map_obj66, byte_1534F-Map_obj66
00015AE0 0000 0000                  		dc.w byte_1536E-Map_obj66, byte_1538D-Map_obj66
00015AE4 0000 0000                  		dc.w byte_153AC-Map_obj66, byte_153CB-Map_obj66
00015AE8 0000 0000                  		dc.w byte_153EA-Map_obj66, byte_15409-Map_obj66
00015AEC 0000 0000                  		dc.w byte_15428-Map_obj66, byte_15447-Map_obj66
00015AF0 0000 0000                  		dc.w byte_15466-Map_obj66, byte_15485-Map_obj66
00015AF4 0000                       		dc.w byte_154A4-Map_obj66
00015AF6 06                         byte_152B4:	dc.b 6
00015AF7 E805 0022 D0               		dc.b $E8, 5, 0,	$22, $D0
00015AFC 0805 1022 D0               		dc.b 8,	5, $10,	$22, $D0
00015B01 E80A 0000 C8               		dc.b $E8, $A, 0, 0, $C8
00015B06 E80A 0800 E0               		dc.b $E8, $A, 8, 0, $E0
00015B0B 000A 1000 C8               		dc.b 0,	$A, $10, 0, $C8
00015B10 000A 1800 E0               		dc.b 0,	$A, $18, 0, $E0
00015B15 06                         byte_152D3:	dc.b 6
00015B16 F803 0026 D0               		dc.b $F8, 3, 0,	$26, $D0
00015B1B 1805 002A D8               		dc.b $18, 5, 0,	$2A, $D8
00015B20 F60A 0000 CA               		dc.b $F6, $A, 0, 0, $CA
00015B25 F60A 0800 E2               		dc.b $F6, $A, 8, 0, $E2
00015B2A 0E0A 1000 CA               		dc.b $E, $A, $10, 0, $CA
00015B2F 0E0A 1800 E2               		dc.b $E, $A, $18, 0, $E2
00015B34 06                         byte_152F2:	dc.b 6
00015B35 0006 002E D0               		dc.b 0,	6, 0, $2E, $D0
00015B3A 2009 0034 E8               		dc.b $20, 9, 0,	$34, $E8
00015B3F 000A 0000 D0               		dc.b 0,	$A, 0, 0, $D0
00015B44 000A 0800 E8               		dc.b 0,	$A, 8, 0, $E8
00015B49 180A 1000 D0               		dc.b $18, $A, $10, 0, $D0
00015B4E 180A 1800 E8               		dc.b $18, $A, $18, 0, $E8
00015B53 06                         byte_15311:	dc.b 6
00015B54 0807 003A D8               		dc.b 8,	7, 0, $3A, $D8
00015B59 2808 0042 F0               		dc.b $28, 8, 0,	$42, $F0
00015B5E 060A 0000 DA               		dc.b 6,	$A, 0, 0, $DA
00015B63 060A 0800 F2               		dc.b 6,	$A, 8, 0, $F2
00015B68 1E0A 1000 DA               		dc.b $1E, $A, $10, 0, $DA
00015B6D 1E0A 1800 F2               		dc.b $1E, $A, $18, 0, $F2
00015B72 06                         byte_15330:	dc.b 6
00015B73 2005 0045 E8               		dc.b $20, 5, 0,	$45, $E8
00015B78 2005 0845 08               		dc.b $20, 5, 8,	$45, 8
00015B7D 080A 0000 E8               		dc.b 8,	$A, 0, 0, $E8
00015B82 080A 0800 00               		dc.b 8,	$A, 8, 0, 0
00015B87 200A 1000 E8               		dc.b $20, $A, $10, 0, $E8
00015B8C 200A 1800 00               		dc.b $20, $A, $18, 0, 0
00015B91 06                         byte_1534F:	dc.b 6
00015B92 2808 0842 F8               		dc.b $28, 8, 8,	$42, $F8
00015B97 0807 083A 18               		dc.b 8,	7, 8, $3A, $18
00015B9C 060A 0000 F6               		dc.b 6,	$A, 0, 0, $F6
00015BA1 060A 0800 0E               		dc.b 6,	$A, 8, 0, $E
00015BA6 1E0A 1000 F6               		dc.b $1E, $A, $10, 0, $F6
00015BAB 1E0A 1800 0E               		dc.b $1E, $A, $18, 0, $E
00015BB0 06                         byte_1536E:	dc.b 6
00015BB1 2009 0834 00               		dc.b $20, 9, 8,	$34, 0
00015BB6 0006 082E 20               		dc.b 0,	6, 8, $2E, $20
00015BBB 000A 0000 00               		dc.b 0,	$A, 0, 0, 0
00015BC0 000A 0800 18               		dc.b 0,	$A, 8, 0, $18
00015BC5 180A 1000 00               		dc.b $18, $A, $10, 0, 0
00015BCA 180A 1800 18               		dc.b $18, $A, $18, 0, $18
00015BCF 06                         byte_1538D:	dc.b 6
00015BD0 1805 082A 18               		dc.b $18, 5, 8,	$2A, $18
00015BD5 F803 0826 28               		dc.b $F8, 3, 8,	$26, $28
00015BDA F60A 0000 06               		dc.b $F6, $A, 0, 0, 6
00015BDF F60A 0800 1E               		dc.b $F6, $A, 8, 0, $1E
00015BE4 0E0A 1000 06               		dc.b $E, $A, $10, 0, 6
00015BE9 0E0A 1800 1E               		dc.b $E, $A, $18, 0, $1E
00015BEE 06                         byte_153AC:	dc.b 6
00015BEF E805 0822 20               		dc.b $E8, 5, 8,	$22, $20
00015BF4 0805 1822 20               		dc.b 8,	5, $18,	$22, $20
00015BF9 E80A 0000 08               		dc.b $E8, $A, 0, 0, 8
00015BFE E80A 0800 20               		dc.b $E8, $A, 8, 0, $20
00015C03 000A 1000 08               		dc.b 0,	$A, $10, 0, 8
00015C08 000A 1800 20               		dc.b 0,	$A, $18, 0, $20
00015C0D 06                         byte_153CB:	dc.b 6
00015C0E D805 182A 18               		dc.b $D8, 5, $18, $2A, $18
00015C13 E803 1826 28               		dc.b $E8, 3, $18, $26, $28
00015C18 DA0A 0000 06               		dc.b $DA, $A, 0, 0, 6
00015C1D DA0A 0800 1E               		dc.b $DA, $A, 8, 0, $1E
00015C22 F20A 1000 06               		dc.b $F2, $A, $10, 0, 6
00015C27 F20A 1800 1E               		dc.b $F2, $A, $18, 0, $1E
00015C2C 06                         byte_153EA:	dc.b 6
00015C2D D009 1834 00               		dc.b $D0, 9, $18, $34, 0
00015C32 E806 182E 20               		dc.b $E8, 6, $18, $2E, $20
00015C37 D00A 0000 00               		dc.b $D0, $A, 0, 0, 0
00015C3C D00A 0800 18               		dc.b $D0, $A, 8, 0, $18
00015C41 E80A 1000 00               		dc.b $E8, $A, $10, 0, 0
00015C46 E80A 1800 18               		dc.b $E8, $A, $18, 0, $18
00015C4B 06                         byte_15409:	dc.b 6
00015C4C D008 1842 F8               		dc.b $D0, 8, $18, $42, $F8
00015C51 D807 183A 18               		dc.b $D8, 7, $18, $3A, $18
00015C56 CA0A 0000 F6               		dc.b $CA, $A, 0, 0, $F6
00015C5B CA0A 0800 0E               		dc.b $CA, $A, 8, 0, $E
00015C60 E20A 1000 F6               		dc.b $E2, $A, $10, 0, $F6
00015C65 E20A 1800 0E               		dc.b $E2, $A, $18, 0, $E
00015C6A 06                         byte_15428:	dc.b 6
00015C6B D005 1045 E8               		dc.b $D0, 5, $10, $45, $E8
00015C70 D005 1845 08               		dc.b $D0, 5, $18, $45, 8
00015C75 C80A 0000 E8               		dc.b $C8, $A, 0, 0, $E8
00015C7A C80A 0800 00               		dc.b $C8, $A, 8, 0, 0
00015C7F E00A 1000 E8               		dc.b $E0, $A, $10, 0, $E8
00015C84 E00A 1800 00               		dc.b $E0, $A, $18, 0, 0
00015C89 06                         byte_15447:	dc.b 6
00015C8A D807 103A D8               		dc.b $D8, 7, $10, $3A, $D8
00015C8F D008 1042 F0               		dc.b $D0, 8, $10, $42, $F0
00015C94 CA0A 0000 DA               		dc.b $CA, $A, 0, 0, $DA
00015C99 CA0A 0800 F2               		dc.b $CA, $A, 8, 0, $F2
00015C9E E20A 1000 DA               		dc.b $E2, $A, $10, 0, $DA
00015CA3 E20A 1800 F2               		dc.b $E2, $A, $18, 0, $F2
00015CA8 06                         byte_15466:	dc.b 6
00015CA9 E806 102E D0               		dc.b $E8, 6, $10, $2E, $D0
00015CAE D009 1034 E8               		dc.b $D0, 9, $10, $34, $E8
00015CB3 D00A 0000 D0               		dc.b $D0, $A, 0, 0, $D0
00015CB8 D00A 0800 E8               		dc.b $D0, $A, 8, 0, $E8
00015CBD E80A 1000 D0               		dc.b $E8, $A, $10, 0, $D0
00015CC2 E80A 1800 E8               		dc.b $E8, $A, $18, 0, $E8
00015CC7 06                         byte_15485:	dc.b 6
00015CC8 E803 1026 D0               		dc.b $E8, 3, $10, $26, $D0
00015CCD D805 102A D8               		dc.b $D8, 5, $10, $2A, $D8
00015CD2 DA0A 0000 CA               		dc.b $DA, $A, 0, 0, $CA
00015CD7 DA0A 0800 E2               		dc.b $DA, $A, 8, 0, $E2
00015CDC F20A 1000 CA               		dc.b $F2, $A, $10, 0, $CA
00015CE1 F20A 1800 E2               		dc.b $F2, $A, $18, 0, $E2
00015CE6 0C                         byte_154A4:	dc.b $C
00015CE7 C80D 0009 E0               		dc.b $C8, $D, 0, 9, $E0
00015CEC D00A 0011 D0               		dc.b $D0, $A, 0, $11, $D0
00015CF1 E007 001A C8               		dc.b $E0, 7, 0,	$1A, $C8
00015CF6 C80D 0809 00               		dc.b $C8, $D, 8, 9, 0
00015CFB D00A 0811 18               		dc.b $D0, $A, 8, $11, $18
00015D00 E007 081A 28               		dc.b $E0, 7, 8,	$1A, $28
00015D05 0007 101A C8               		dc.b 0,	7, $10,	$1A, $C8
00015D0A 180A 1011 D0               		dc.b $18, $A, $10, $11,	$D0
00015D0F 280D 1009 E0               		dc.b $28, $D, $10, 9, $E0
00015D14 280D 1809 00               		dc.b $28, $D, $18, 9, 0
00015D19 180A 1811 18               		dc.b $18, $A, $18, $11,	$18
00015D1E 0007 181A 28               		dc.b 0,	7, $18,	$1A, $28
00015D24 00                         		even
00015D24 00                         		even
00015D24                            
00015D24                            ; ===========================================================================
00015D24                            ; ---------------------------------------------------------------------------
00015D24                            ; Object 67 - disc that	you run	around (SBZ)
00015D24                            ; ---------------------------------------------------------------------------
00015D24                            
00015D24                            Obj67:					; XREF: Obj_Index
00015D24 7000                       		moveq	#0,d0
00015D26 1028 0024                  		move.b	$24(a0),d0
00015D2A 323B 0000                  		move.w	Obj67_Index(pc,d0.w),d1
00015D2E 4EFB 1000                  		jmp	Obj67_Index(pc,d1.w)
00015D32                            ; ===========================================================================
00015D32 0000                       Obj67_Index:	dc.w Obj67_Main-Obj67_Index
00015D34 0000                       		dc.w Obj67_Action-Obj67_Index
00015D36                            ; ===========================================================================
00015D36                            
00015D36                            Obj67_Main:				; XREF: Obj67_Index
00015D36 5428 0024                  		addq.b	#2,$24(a0)
00015D3A 217C 0000 0000 0004        		move.l	#Map_obj67,4(a0)
00015D42 317C C344 0002             		move.w	#$C344,2(a0)
00015D48 117C 0004 0001             		move.b	#4,1(a0)
00015D4E 117C 0004 0018             		move.b	#4,$18(a0)
00015D54 117C 0008 0019             		move.b	#8,$19(a0)
00015D5A 3168 0008 0032             		move.w	8(a0),$32(a0)
00015D60 3168 000C 0030             		move.w	$C(a0),$30(a0)
00015D66 117C 0018 0034             		move.b	#$18,$34(a0)
00015D6C 117C 0048 0038             		move.b	#$48,$38(a0)
00015D72 1228 0028                  		move.b	$28(a0),d1	; get object type
00015D76 0201 000F                  		andi.b	#$F,d1		; read only the	2nd digit
00015D7A 6700                       		beq.s	loc_15546
00015D7C 117C 0010 0034             		move.b	#$10,$34(a0)
00015D82 117C 0038 0038             		move.b	#$38,$38(a0)
00015D88                            
00015D88                            loc_15546:
00015D88 1228 0028                  		move.b	$28(a0),d1	; get object type
00015D8C 0201 00F0                  		andi.b	#$F0,d1		; read only the	1st digit
00015D90 4881                       		ext.w	d1
00015D92 E741                       		asl.w	#3,d1
00015D94 3141 0036                  		move.w	d1,$36(a0)
00015D98 1028 0022                  		move.b	$22(a0),d0
00015D9C E418                       		ror.b	#2,d0
00015D9E 0200 00C0                  		andi.b	#-$40,d0
00015DA2 1140 0026                  		move.b	d0,$26(a0)
00015DA6                            
00015DA6                            Obj67_Action:				; XREF: Obj67_Index
00015DA6 6100 0000                  		bsr.w	Obj67_MoveSonic
00015DAA 6100 0000                  		bsr.w	Obj67_MoveSpot
00015DAE 6000 0000                  		bra.w	Obj67_ChkDel
00015DB2                            ; ===========================================================================
00015DB2                            
00015DB2                            Obj67_MoveSonic:			; XREF: Obj67_Action
00015DB2 7400                       		moveq	#0,d2
00015DB4 1428 0038                  		move.b	$38(a0),d2
00015DB8 3602                       		move.w	d2,d3
00015DBA D643                       		add.w	d3,d3
00015DBC 43F8 D000                  		lea	($FFFFD000).w,a1
00015DC0 3029 0008                  		move.w	8(a1),d0
00015DC4 9068 0032                  		sub.w	$32(a0),d0
00015DC8 D042                       		add.w	d2,d0
00015DCA B043                       		cmp.w	d3,d0
00015DCC 6400                       		bcc.s	loc_155A8
00015DCE 3229 000C                  		move.w	$C(a1),d1
00015DD2 9268 0030                  		sub.w	$30(a0),d1
00015DD6 D242                       		add.w	d2,d1
00015DD8 B243                       		cmp.w	d3,d1
00015DDA 6400                       		bcc.s	loc_155A8
00015DDC 0829 0001 0022             		btst	#1,$22(a1)
00015DE2 6700                       		beq.s	loc_155B8
00015DE4 4228 003A                  		clr.b	$3A(a0)
00015DE8 4E75                       		rts	
00015DEA                            ; ===========================================================================
00015DEA                            
00015DEA                            loc_155A8:
00015DEA 4A28 003A                  		tst.b	$3A(a0)
00015DEE 6700                       		beq.s	locret_155B6
00015DF0 4229 0038                  		clr.b	$38(a1)
00015DF4 4228 003A                  		clr.b	$3A(a0)
00015DF8                            
00015DF8                            locret_155B6:
00015DF8 4E75                       		rts	
00015DFA                            ; ===========================================================================
00015DFA                            
00015DFA                            loc_155B8:
00015DFA 4A28 003A                  		tst.b	$3A(a0)
00015DFE 6600                       		bne.s	loc_155E2
00015E00 117C 0001 003A             		move.b	#1,$3A(a0)
00015E06 0829 0002 0022             		btst	#2,$22(a1)
00015E0C 6600                       		bne.s	loc_155D0
00015E0E 4229 001C                  		clr.b	$1C(a1)
00015E12                            
00015E12                            loc_155D0:
00015E12 08A9 0005 0022             		bclr	#5,$22(a1)
00015E18 137C 0001 001D             		move.b	#1,$1D(a1)
00015E1E 137C 0001 0038             		move.b	#1,$38(a1)
00015E24                            
00015E24                            loc_155E2:
00015E24 3029 0014                  		move.w	$14(a1),d0
00015E28 4A68 0036                  		tst.w	$36(a0)
00015E2C 6A00                       		bpl.s	loc_15608
00015E2E 0C40 FC00                  		cmpi.w	#-$400,d0
00015E32 6F00                       		ble.s	loc_155FA
00015E34 337C FC00 0014             		move.w	#-$400,$14(a1)
00015E3A 4E75                       		rts	
00015E3C                            ; ===========================================================================
00015E3C                            
00015E3C                            loc_155FA:
00015E3C 0C40 F100                  		cmpi.w	#-$F00,d0
00015E40 6C00                       		bge.s	locret_15606
00015E42 337C F100 0014             		move.w	#-$F00,$14(a1)
00015E48                            
00015E48                            locret_15606:
00015E48 4E75                       		rts	
00015E4A                            ; ===========================================================================
00015E4A                            
00015E4A                            loc_15608:
00015E4A 0C40 0400                  		cmpi.w	#$400,d0
00015E4E 6C00                       		bge.s	loc_15616
00015E50 337C 0400 0014             		move.w	#$400,$14(a1)
00015E56 4E75                       		rts	
00015E58                            ; ===========================================================================
00015E58                            
00015E58                            loc_15616:
00015E58 0C40 0F00                  		cmpi.w	#$F00,d0
00015E5C 6F00                       		ble.s	locret_15622
00015E5E 337C 0F00 0014             		move.w	#$F00,$14(a1)
00015E64                            
00015E64                            locret_15622:
00015E64 4E75                       		rts	
00015E66                            ; ===========================================================================
00015E66                            
00015E66                            Obj67_MoveSpot:				; XREF: Obj67_Action
00015E66 3028 0036                  		move.w	$36(a0),d0
00015E6A D168 0026                  		add.w	d0,$26(a0)
00015E6E 1028 0026                  		move.b	$26(a0),d0
00015E72 4EB9 0000 2C64             		jsr	(CalcSine).l
00015E78 3428 0030                  		move.w	$30(a0),d2
00015E7C 3628 0032                  		move.w	$32(a0),d3
00015E80 7800                       		moveq	#0,d4
00015E82 1828 0034                  		move.b	$34(a0),d4
00015E86 E14C                       		lsl.w	#8,d4
00015E88 2A04                       		move.l	d4,d5
00015E8A C9C0                       		muls.w	d0,d4
00015E8C 4844                       		swap	d4
00015E8E CBC1                       		muls.w	d1,d5
00015E90 4845                       		swap	d5
00015E92 D842                       		add.w	d2,d4
00015E94 DA43                       		add.w	d3,d5
00015E96 3144 000C                  		move.w	d4,$C(a0)
00015E9A 3145 0008                  		move.w	d5,8(a0)
00015E9E 4E75                       		rts	
00015EA0                            ; ===========================================================================
00015EA0                            
00015EA0                            Obj67_ChkDel:				; XREF: Obj67_Action
00015EA0 3028 0032                  		move.w	$32(a0),d0
00015EA4 0240 FF80                  		andi.w	#-$80,d0
00015EA8 3238 F700                  		move.w	($FFFFF700).w,d1
00015EAC 0441 0080                  		subi.w	#$80,d1
00015EB0 0241 FF80                  		andi.w	#-$80,d1
00015EB4 9041                       		sub.w	d1,d0
00015EB6 0C40 0280                  		cmpi.w	#$280,d0
00015EBA 6200                       		bhi.s	Obj67_Delete
00015EBC 4EF9 0000 DD62             		jmp	DisplaySprite
00015EC2                            ; ===========================================================================
00015EC2                            
00015EC2                            Obj67_Delete:
00015EC2 4EF9 0000 DD9E             		jmp	DeleteObject
00015EC8                            ; ===========================================================================
00015EC8                            ; ---------------------------------------------------------------------------
00015EC8                            ; Sprite mappings - disc that you run around (SBZ)
00015EC8                            ; (It's just a small blob that moves around in a circle. The disc itself is
00015EC8                            ; part of the level tiles.)
00015EC8                            ; ---------------------------------------------------------------------------
00015EC8                            Map_obj67:
00015EC8                            	include "_maps\obj67.asm"
00015EC8                            ; ---------------------------------------------------------------------------
00015EC8                            ; Sprite mappings - disc that you run around (SBZ)
00015EC8                            ; (It's just a small blob that moves around in a circle. The disc itself is
00015EC8                            ; part of the level tiles.)
00015EC8                            ; ---------------------------------------------------------------------------
00015EC8 0000                       		dc.w byte_15688-Map_obj67
00015ECA 01                         byte_15688:	dc.b 1
00015ECB F805 0000 F8               		dc.b $F8, 5, 0,	0, $F8
00015ED0                            		even
00015ED0                            		even
00015ED0                            
00015ED0                            ; ===========================================================================
00015ED0                            ; ---------------------------------------------------------------------------
00015ED0                            ; Object 68 - conveyor belts (SBZ)
00015ED0                            ; ---------------------------------------------------------------------------
00015ED0                            
00015ED0                            Obj68:					; XREF: Obj_Index
00015ED0 7000                       		moveq	#0,d0
00015ED2 1028 0024                  		move.b	$24(a0),d0
00015ED6 323B 0000                  		move.w	Obj68_Index(pc,d0.w),d1
00015EDA 4EFB 1000                  		jmp	Obj68_Index(pc,d1.w)
00015EDE                            ; ===========================================================================
00015EDE 0000                       Obj68_Index:	dc.w Obj68_Main-Obj68_Index
00015EE0 0000                       		dc.w Obj68_Action-Obj68_Index
00015EE2                            ; ===========================================================================
00015EE2                            
00015EE2                            Obj68_Main:				; XREF: Obj68_Index
00015EE2 5428 0024                  		addq.b	#2,$24(a0)
00015EE6 117C 0080 0038             		move.b	#128,$38(a0)	; set width to 128 pixels
00015EEC 1228 0028                  		move.b	$28(a0),d1	; get object type
00015EF0 0201 000F                  		andi.b	#$F,d1		; read only the	2nd digit
00015EF4 6700                       		beq.s	loc_156BA	; if zero, branch
00015EF6 117C 0038 0038             		move.b	#56,$38(a0)	; set width to 56 pixels
00015EFC                            
00015EFC                            loc_156BA:
00015EFC 1228 0028                  		move.b	$28(a0),d1	; get object type
00015F00 0201 00F0                  		andi.b	#$F0,d1		; read only the	1st digit
00015F04 4881                       		ext.w	d1
00015F06 E841                       		asr.w	#4,d1
00015F08 3141 0036                  		move.w	d1,$36(a0)	; set belt speed
00015F0C                            
00015F0C                            Obj68_Action:				; XREF: Obj68_Index
00015F0C 6100                       		bsr.s	Obj68_MoveSonic
00015F0E 3028 0008                  		move.w	8(a0),d0
00015F12 0240 FF80                  		andi.w	#$FF80,d0
00015F16 3238 F700                  		move.w	($FFFFF700).w,d1
00015F1A 0441 0080                  		subi.w	#$80,d1
00015F1E 0241 FF80                  		andi.w	#$FF80,d1
00015F22 9041                       		sub.w	d1,d0
00015F24 0C40 0280                  		cmpi.w	#$280,d0
00015F28 6200                       		bhi.s	Obj68_Delete
00015F2A 4E75                       		rts	
00015F2C                            ; ===========================================================================
00015F2C                            
00015F2C                            Obj68_Delete:
00015F2C 4EF9 0000 DD9E             		jmp	DeleteObject
00015F32                            ; ===========================================================================
00015F32                            
00015F32                            Obj68_MoveSonic:			; XREF: Obj68_Action
00015F32 7400                       		moveq	#0,d2
00015F34 1428 0038                  		move.b	$38(a0),d2
00015F38 3602                       		move.w	d2,d3
00015F3A D643                       		add.w	d3,d3
00015F3C 43F8 D000                  		lea	($FFFFD000).w,a1
00015F40 3029 0008                  		move.w	8(a1),d0
00015F44 9068 0008                  		sub.w	8(a0),d0
00015F48 D042                       		add.w	d2,d0
00015F4A B043                       		cmp.w	d3,d0
00015F4C 6400                       		bcc.s	locret_1572E
00015F4E 3229 000C                  		move.w	$C(a1),d1
00015F52 9268 000C                  		sub.w	$C(a0),d1
00015F56 0641 0030                  		addi.w	#$30,d1
00015F5A 0C41 0030                  		cmpi.w	#$30,d1
00015F5E 6400                       		bcc.s	locret_1572E
00015F60 0829 0001 0022             		btst	#1,$22(a1)
00015F66 6600                       		bne.s	locret_1572E
00015F68 3028 0036                  		move.w	$36(a0),d0
00015F6C D169 0008                  		add.w	d0,8(a1)
00015F70                            
00015F70                            locret_1572E:
00015F70 4E75                       		rts	
00015F72                            
00015F72                            ; ===========================================================================
00015F72                            ; ---------------------------------------------------------------------------
00015F72                            ; Object 69 - spinning platforms and trapdoors (SBZ)
00015F72                            ; ---------------------------------------------------------------------------
00015F72                            
00015F72                            Obj69:					; XREF: Obj_Index
00015F72 7000                       		moveq	#0,d0
00015F74 1028 0024                  		move.b	$24(a0),d0
00015F78 323B 0000                  		move.w	Obj69_Index(pc,d0.w),d1
00015F7C 4EFB 1000                  		jmp	Obj69_Index(pc,d1.w)
00015F80                            ; ===========================================================================
00015F80 0000                       Obj69_Index:	dc.w Obj69_Main-Obj69_Index
00015F82 0000                       		dc.w Obj69_Trapdoor-Obj69_Index
00015F84 0000                       		dc.w Obj69_Spinner-Obj69_Index
00015F86                            ; ===========================================================================
00015F86                            
00015F86                            Obj69_Main:				; XREF: Obj69_Index
00015F86 5428 0024                  		addq.b	#2,$24(a0)
00015F8A 217C 0000 0000 0004        		move.l	#Map_obj69,4(a0)
00015F92 317C 4492 0002             		move.w	#$4492,2(a0)
00015F98 0028 0004 0001             		ori.b	#4,1(a0)
00015F9E 117C 0080 0019             		move.b	#$80,$19(a0)
00015FA4 7000                       		moveq	#0,d0
00015FA6 1028 0028                  		move.b	$28(a0),d0
00015FAA 0240 000F                  		andi.w	#$F,d0
00015FAE C0FC 003C                  		mulu.w	#$3C,d0
00015FB2 3140 0032                  		move.w	d0,$32(a0)
00015FB6 4A28 0028                  		tst.b	$28(a0)
00015FBA 6A00                       		bpl.s	Obj69_Trapdoor
00015FBC 5428 0024                  		addq.b	#2,$24(a0)
00015FC0 217C 0000 0000 0004        		move.l	#Map_obj69a,4(a0)
00015FC8 317C 04DF 0002             		move.w	#$4DF,2(a0)
00015FCE 117C 0010 0019             		move.b	#$10,$19(a0)
00015FD4 117C 0002 001C             		move.b	#2,$1C(a0)
00015FDA 7000                       		moveq	#0,d0
00015FDC 1028 0028                  		move.b	$28(a0),d0	; get object type
00015FE0 3200                       		move.w	d0,d1
00015FE2 0240 000F                  		andi.w	#$F,d0		; read only the	2nd digit
00015FE6 C0FC 0006                  		mulu.w	#6,d0		; multiply by 6
00015FEA 3140 0030                  		move.w	d0,$30(a0)	; set time delay
00015FEE 3140 0032                  		move.w	d0,$32(a0)
00015FF2 0241 0070                  		andi.w	#$70,d1
00015FF6 0641 0010                  		addi.w	#$10,d1
00015FFA E549                       		lsl.w	#2,d1
00015FFC 5341                       		subq.w	#1,d1
00015FFE 3141 0036                  		move.w	d1,$36(a0)
00016002 6000                       		bra.s	Obj69_Spinner
00016004                            ; ===========================================================================
00016004                            
00016004                            Obj69_Trapdoor:				; XREF: Obj69_Index
00016004 5368 0030                  		subq.w	#1,$30(a0)
00016008 6A00                       		bpl.s	Obj69_Animate
0001600A 3168 0032 0030             		move.w	$32(a0),$30(a0)
00016010 0868 0000 001C             		bchg	#0,$1C(a0)
00016016 4A28 0001                  		tst.b	1(a0)
0001601A 6A00                       		bpl.s	Obj69_Animate
0001601C 303C 00BB                  		move.w	#$BB,d0
00016020 4EB9 0000 15C0             		jsr	(PlaySound_Special).l ;	play door sound
00016026                            
00016026                            Obj69_Animate:
00016026 43F9 0000 0000             		lea	(Ani_obj69).l,a1
0001602C 4EB9 0000 AE22             		jsr	AnimateSprite
00016032 4A28 001A                  		tst.b	$1A(a0)		; is frame number 0 displayed?
00016036 6600                       		bne.s	Obj69_NotSolid	; if not, branch
00016038 323C 004B                  		move.w	#$4B,d1
0001603C 343C 000C                  		move.w	#$C,d2
00016040 3602                       		move.w	d2,d3
00016042 5243                       		addq.w	#1,d3
00016044 3828 0008                  		move.w	8(a0),d4
00016048 6100 A0E8                  		bsr.w	SolidObject
0001604C 6000 9DBC                  		bra.w	MarkObjGone
00016050                            ; ===========================================================================
00016050                            
00016050                            Obj69_NotSolid:
00016050 0828 0003 0022             		btst	#3,$22(a0)
00016056 6700                       		beq.s	Obj69_Display
00016058 43F8 D000                  		lea	($FFFFD000).w,a1
0001605C 08A9 0003 0022             		bclr	#3,$22(a1)
00016062 08A8 0003 0022             		bclr	#3,$22(a0)
00016068 4228 0025                  		clr.b	$25(a0)
0001606C                            
0001606C                            Obj69_Display:
0001606C 6000 9D9C                  		bra.w	MarkObjGone
00016070                            ; ===========================================================================
00016070                            
00016070                            Obj69_Spinner:				; XREF: Obj69_Index
00016070 3038 FE04                  		move.w	($FFFFFE04).w,d0
00016074 C068 0036                  		and.w	$36(a0),d0
00016078 6600                       		bne.s	Obj69_Delay
0001607A 117C 0001 0034             		move.b	#1,$34(a0)
00016080                            
00016080                            Obj69_Delay:
00016080 4A28 0034                  		tst.b	$34(a0)
00016084 6700                       		beq.s	Obj69_Animate2
00016086 5368 0030                  		subq.w	#1,$30(a0)
0001608A 6A00                       		bpl.s	Obj69_Animate2
0001608C 3168 0032 0030             		move.w	$32(a0),$30(a0)
00016092 4228 0034                  		clr.b	$34(a0)
00016096 0868 0000 001C             		bchg	#0,$1C(a0)
0001609C                            
0001609C                            Obj69_Animate2:
0001609C 43F9 0000 0000             		lea	(Ani_obj69).l,a1
000160A2 4EB9 0000 AE22             		jsr	AnimateSprite
000160A8 4A28 001A                  		tst.b	$1A(a0)		; check	if frame number	0 is displayed
000160AC 6600                       		bne.s	Obj69_NotSolid2	; if not, branch
000160AE 323C 001B                  		move.w	#$1B,d1
000160B2 343C 0007                  		move.w	#7,d2
000160B6 3602                       		move.w	d2,d3
000160B8 5243                       		addq.w	#1,d3
000160BA 3828 0008                  		move.w	8(a0),d4
000160BE 6100 A072                  		bsr.w	SolidObject
000160C2 6000 9D46                  		bra.w	MarkObjGone
000160C6                            ; ===========================================================================
000160C6                            
000160C6                            Obj69_NotSolid2:
000160C6 0828 0003 0022             		btst	#3,$22(a0)
000160CC 6700                       		beq.s	Obj69_Display2
000160CE 43F8 D000                  		lea	($FFFFD000).w,a1
000160D2 08A9 0003 0022             		bclr	#3,$22(a1)
000160D8 08A8 0003 0022             		bclr	#3,$22(a0)
000160DE 4228 0025                  		clr.b	$25(a0)
000160E2                            
000160E2                            Obj69_Display2:
000160E2 6000 9D26                  		bra.w	MarkObjGone
000160E6                            ; ===========================================================================
000160E6                            Ani_obj69:
000160E6                            	include "_anim\obj69.asm"
000160E6                            ; ---------------------------------------------------------------------------
000160E6                            ; Animation script - trapdoor (SBZ)
000160E6                            ; ---------------------------------------------------------------------------
000160E6 0000                       		dc.w byte_158AC-Ani_obj69
000160E8 0000                       		dc.w byte_158B2-Ani_obj69
000160EA 0000                       		dc.w byte_158B8-Ani_obj69
000160EC 0000                       		dc.w byte_158CC-Ani_obj69
000160EE 0300 0102 FE01             byte_158AC:	dc.b 3,	0, 1, 2, $FE, 1
000160F4 0302 0100 FE01             byte_158B2:	dc.b 3,	2, 1, 0, $FE, 1
000160FA 0100 0102 0304 4342 4140+  byte_158B8:	dc.b 1,	0, 1, 2, 3, 4, $43, $42, $41, $40, $61,	$62, $63
00016107 6423 2221 00FE 01          		dc.b $64, $23, $22, $21, 0, $FE, 1
0001610E 0100 0102 0304 4342 4140+  byte_158CC:	dc.b 1,	0, 1, 2, 3, 4, $43, $42, $41, $40, $61,	$62, $63
0001611B 6423 2221 00FE 01          		dc.b $64, $23, $22, $21, 0, $FE, 1
00016122                            		even
00016122                            		even
00016122                            
00016122                            ; ---------------------------------------------------------------------------
00016122                            ; Sprite mappings - trapdoor (SBZ)
00016122                            ; ---------------------------------------------------------------------------
00016122                            Map_obj69:
00016122                            	include "_maps\obj69.asm"
00016122                            ; ---------------------------------------------------------------------------
00016122                            ; Sprite mappings - trapdoor (SBZ)
00016122                            ; ---------------------------------------------------------------------------
00016122 0000                       		dc.w byte_158E6-Map_obj69
00016124 0000                       		dc.w byte_158FB-Map_obj69
00016126 0000                       		dc.w byte_15924-Map_obj69
00016128 04                         byte_158E6:	dc.b 4
00016129 F40E 0000 C0               		dc.b $F4, $E, 0, 0, $C0
0001612E F40E 0800 E0               		dc.b $F4, $E, 8, 0, $E0
00016133 F40E 0000 00               		dc.b $F4, $E, 0, 0, 0
00016138 F40E 0800 20               		dc.b $F4, $E, 8, 0, $20
0001613D 08                         byte_158FB:	dc.b 8
0001613E F20F 000C B6               		dc.b $F2, $F, 0, $C, $B6
00016143 1A0F 180C D6               		dc.b $1A, $F, $18, $C, $D6
00016148 020A 001C D6               		dc.b 2,	$A, 0, $1C, $D6
0001614D 120A 181C BE               		dc.b $12, $A, $18, $1C,	$BE
00016152 F20F 080C 2A               		dc.b $F2, $F, 8, $C, $2A
00016157 1A0F 100C 0A               		dc.b $1A, $F, $10, $C, $A
0001615C 020A 081C 12               		dc.b 2,	$A, 8, $1C, $12
00016161 120A 101C 2A               		dc.b $12, $A, $10, $1C,	$2A
00016166 04                         byte_15924:	dc.b 4
00016167 000B 0025 B4               		dc.b 0,	$B, 0, $25, $B4
0001616C 200B 1025 B4               		dc.b $20, $B, $10, $25,	$B4
00016171 000B 0025 34               		dc.b 0,	$B, 0, $25, $34
00016176 200B 1025 34               		dc.b $20, $B, $10, $25,	$34
0001617C 00                         		even
0001617C 00                         		even
0001617C                            
0001617C                            ; ---------------------------------------------------------------------------
0001617C                            ; Sprite mappings - spinning platforms (SBZ)
0001617C                            ; ---------------------------------------------------------------------------
0001617C                            Map_obj69a:
0001617C                            	include "_maps\obj69a.asm"
0001617C                            ; ---------------------------------------------------------------------------
0001617C                            ; Sprite mappings - spinning platforms (SBZ)
0001617C                            ; ---------------------------------------------------------------------------
0001617C 0000 0000                  		dc.w byte_15944-Map_obj69a, byte_1594F-Map_obj69a
00016180 0000 0000                  		dc.w byte_1595A-Map_obj69a, byte_15965-Map_obj69a
00016184 0000                       		dc.w byte_15970-Map_obj69a
00016186 02                         byte_15944:	dc.b 2
00016187 F805 0000 F0               		dc.b $F8, 5, 0,	0, $F0
0001618C F805 0800 00               		dc.b $F8, 5, 8,	0, 0
00016191 02                         byte_1594F:	dc.b 2
00016192 F00D 0014 F0               		dc.b $F0, $D, 0, $14, $F0
00016197 000D 001C F0               		dc.b 0,	$D, 0, $1C, $F0
0001619C 02                         byte_1595A:	dc.b 2
0001619D F009 0004 F0               		dc.b $F0, 9, 0,	4, $F0
000161A2 0009 000A F8               		dc.b 0,	9, 0, $A, $F8
000161A7 02                         byte_15965:	dc.b 2
000161A8 F009 0024 F0               		dc.b $F0, 9, 0,	$24, $F0
000161AD 0009 002A F8               		dc.b 0,	9, 0, $2A, $F8
000161B2 02                         byte_15970:	dc.b 2
000161B3 F005 0010 F8               		dc.b $F0, 5, 0,	$10, $F8
000161B8 0005 1010 F8               		dc.b 0,	5, $10,	$10, $F8
000161BE 00                         		even
000161BE 00                         		even
000161BE                            
000161BE                            ; ===========================================================================
000161BE                            ; ---------------------------------------------------------------------------
000161BE                            ; Object 6A - ground saws and pizza cutters (SBZ)
000161BE                            ; ---------------------------------------------------------------------------
000161BE                            
000161BE                            Obj6A:					; XREF: Obj_Index
000161BE 7000                       		moveq	#0,d0
000161C0 1028 0024                  		move.b	$24(a0),d0
000161C4 323B 0000                  		move.w	Obj6A_Index(pc,d0.w),d1
000161C8 4EFB 1000                  		jmp	Obj6A_Index(pc,d1.w)
000161CC                            ; ===========================================================================
000161CC 0000                       Obj6A_Index:	dc.w Obj6A_Main-Obj6A_Index
000161CE 0000                       		dc.w Obj6A_Action-Obj6A_Index
000161D0                            ; ===========================================================================
000161D0                            
000161D0                            Obj6A_Main:				; XREF: Obj6A_Index
000161D0 5428 0024                  		addq.b	#2,$24(a0)
000161D4 217C 0000 0000 0004        		move.l	#Map_obj6A,4(a0)
000161DC 317C 43B5 0002             		move.w	#$43B5,2(a0)
000161E2 117C 0004 0001             		move.b	#4,1(a0)
000161E8 117C 0004 0018             		move.b	#4,$18(a0)
000161EE 117C 0020 0019             		move.b	#$20,$19(a0)
000161F4 3168 0008 003A             		move.w	8(a0),$3A(a0)
000161FA 3168 000C 0038             		move.w	$C(a0),$38(a0)
00016200 0C28 0003 0028             		cmpi.b	#3,$28(a0)
00016206 6400                       		bcc.s	Obj6A_Action
00016208 117C 00A2 0020             		move.b	#$A2,$20(a0)
0001620E                            
0001620E                            Obj6A_Action:				; XREF: Obj6A_Index
0001620E 7000                       		moveq	#0,d0
00016210 1028 0028                  		move.b	$28(a0),d0
00016214 0240 0007                  		andi.w	#7,d0
00016218 D040                       		add.w	d0,d0
0001621A 323B 0000                  		move.w	Obj6A_TypeIndex(pc,d0.w),d1
0001621E 4EBB 1000                  		jsr	Obj6A_TypeIndex(pc,d1.w)
00016222 3028 003A                  		move.w	$3A(a0),d0
00016226 0240 FF80                  		andi.w	#$FF80,d0
0001622A 3238 F700                  		move.w	($FFFFF700).w,d1
0001622E 0441 0080                  		subi.w	#$80,d1
00016232 0241 FF80                  		andi.w	#$FF80,d1
00016236 9041                       		sub.w	d1,d0
00016238 0C40 0280                  		cmpi.w	#$280,d0
0001623C 6200                       		bhi.s	Obj6A_Delete
0001623E 4EF9 0000 DD62             		jmp	DisplaySprite
00016244                            ; ===========================================================================
00016244                            
00016244                            Obj6A_Delete:
00016244 4EF9 0000 DD9E             		jmp	DeleteObject
0001624A                            ; ===========================================================================
0001624A 0000 0000                  Obj6A_TypeIndex:dc.w Obj6A_Type00-Obj6A_TypeIndex, Obj6A_Type01-Obj6A_TypeIndex
0001624E 0000 0000                  		dc.w Obj6A_Type02-Obj6A_TypeIndex, Obj6A_Type03-Obj6A_TypeIndex
00016252 0000                       		dc.w Obj6A_Type04-Obj6A_TypeIndex
00016254                            ; ===========================================================================
00016254                            
00016254                            Obj6A_Type00:				; XREF: Obj6A_TypeIndex
00016254 4E75                       		rts	
00016256                            ; ===========================================================================
00016256                            
00016256                            Obj6A_Type01:				; XREF: Obj6A_TypeIndex
00016256 323C 0060                  		move.w	#$60,d1
0001625A 7000                       		moveq	#0,d0
0001625C 1038 FE6C                  		move.b	($FFFFFE6C).w,d0
00016260 0828 0000 0022             		btst	#0,$22(a0)
00016266 6700                       		beq.s	Obj6A_Animate01
00016268 4440                       		neg.w	d0
0001626A D041                       		add.w	d1,d0
0001626C                            
0001626C                            Obj6A_Animate01:
0001626C 3228 003A                  		move.w	$3A(a0),d1
00016270 9240                       		sub.w	d0,d1
00016272 3141 0008                  		move.w	d1,8(a0)	; move saw sideways
00016276 5328 001E                  		subq.b	#1,$1E(a0)
0001627A 6A00                       		bpl.s	loc_15A46
0001627C 117C 0002 001E             		move.b	#2,$1E(a0)	; time between frame changes
00016282 0868 0000 001A             		bchg	#0,$1A(a0)	; change frame
00016288                            
00016288                            loc_15A46:
00016288 4A28 0001                  		tst.b	1(a0)
0001628C 6A00                       		bpl.s	locret_15A60
0001628E 3038 FE04                  		move.w	($FFFFFE04).w,d0
00016292 0240 000F                  		andi.w	#$F,d0
00016296 6600                       		bne.s	locret_15A60
00016298 303C 00B0                  		move.w	#$B0,d0
0001629C 4EB9 0000 15C0             		jsr	(PlaySound_Special).l ;	play saw sound
000162A2                            
000162A2                            locret_15A60:
000162A2 4E75                       		rts	
000162A4                            ; ===========================================================================
000162A4                            
000162A4                            Obj6A_Type02:				; XREF: Obj6A_TypeIndex
000162A4 323C 0030                  		move.w	#$30,d1
000162A8 7000                       		moveq	#0,d0
000162AA 1038 FE64                  		move.b	($FFFFFE64).w,d0
000162AE 0828 0000 0022             		btst	#0,$22(a0)
000162B4 6700                       		beq.s	Obj6A_Animate02
000162B6 4440                       		neg.w	d0
000162B8 0640 0080                  		addi.w	#$80,d0
000162BC                            
000162BC                            Obj6A_Animate02:
000162BC 3228 0038                  		move.w	$38(a0),d1
000162C0 9240                       		sub.w	d0,d1
000162C2 3141 000C                  		move.w	d1,$C(a0)	; move saw vertically
000162C6 5328 001E                  		subq.b	#1,$1E(a0)
000162CA 6A00                       		bpl.s	loc_15A96
000162CC 117C 0002 001E             		move.b	#2,$1E(a0)
000162D2 0868 0000 001A             		bchg	#0,$1A(a0)
000162D8                            
000162D8                            loc_15A96:
000162D8 4A28 0001                  		tst.b	1(a0)
000162DC 6A00                       		bpl.s	locret_15AB0
000162DE 1038 FE64                  		move.b	($FFFFFE64).w,d0
000162E2 0C00 0018                  		cmpi.b	#$18,d0
000162E6 6600                       		bne.s	locret_15AB0
000162E8 303C 00B0                  		move.w	#$B0,d0
000162EC 4EB9 0000 15C0             		jsr	(PlaySound_Special).l ;	play saw sound
000162F2                            
000162F2                            locret_15AB0:
000162F2 4E75                       		rts	
000162F4                            ; ===========================================================================
000162F4                            
000162F4                            Obj6A_Type03:				; XREF: Obj6A_TypeIndex
000162F4 4A28 003D                  		tst.b	$3D(a0)
000162F8 6600                       		bne.s	Obj6A_Animate03
000162FA 3038 D008                  		move.w	($FFFFD008).w,d0
000162FE 0440 00C0                  		subi.w	#$C0,d0
00016302 6500                       		bcs.s	loc_15B02
00016304 9068 0008                  		sub.w	8(a0),d0
00016308 6500                       		bcs.s	loc_15B02
0001630A 3038 D00C                  		move.w	($FFFFD00C).w,d0
0001630E 0440 0080                  		subi.w	#$80,d0
00016312 B068 000C                  		cmp.w	$C(a0),d0
00016316 6400                       		bcc.s	locret_15B04
00016318 0640 0100                  		addi.w	#$100,d0
0001631C B068 000C                  		cmp.w	$C(a0),d0
00016320 6500                       		bcs.s	locret_15B04
00016322 117C 0001 003D             		move.b	#1,$3D(a0)
00016328 317C 0600 0010             		move.w	#$600,$10(a0)	; move object to the right
0001632E 117C 00A2 0020             		move.b	#$A2,$20(a0)
00016334 117C 0002 001A             		move.b	#2,$1A(a0)
0001633A 303C 00B0                  		move.w	#$B0,d0
0001633E 4EB9 0000 15C0             		jsr	(PlaySound_Special).l ;	play saw sound
00016344                            
00016344                            loc_15B02:
00016344 588F                       		addq.l	#4,sp
00016346                            
00016346                            locret_15B04:
00016346 4E75                       		rts	
00016348                            ; ===========================================================================
00016348                            
00016348                            Obj6A_Animate03:			; XREF: ROM:00015AB6j
00016348 4EB9 0000 DD3C             		jsr	SpeedToPos
0001634E 3168 0008 003A             		move.w	8(a0),$3A(a0)
00016354 5328 001E                  		subq.b	#1,$1E(a0)
00016358 6A00                       		bpl.s	locret_15B24
0001635A 117C 0002 001E             		move.b	#2,$1E(a0)
00016360 0868 0000 001A             		bchg	#0,$1A(a0)
00016366                            
00016366                            locret_15B24:
00016366 4E75                       		rts	
00016368                            ; ===========================================================================
00016368                            
00016368                            Obj6A_Type04:				; XREF: Obj6A_TypeIndex
00016368 4A28 003D                  		tst.b	$3D(a0)
0001636C 6600                       		bne.s	Obj6A_Animate04
0001636E 3038 D008                  		move.w	($FFFFD008).w,d0
00016372 0640 00E0                  		addi.w	#$E0,d0
00016376 9068 0008                  		sub.w	8(a0),d0
0001637A 6400                       		bcc.s	loc_15B74
0001637C 3038 D00C                  		move.w	($FFFFD00C).w,d0
00016380 0440 0080                  		subi.w	#$80,d0
00016384 B068 000C                  		cmp.w	$C(a0),d0
00016388 6400                       		bcc.s	locret_15B76
0001638A 0640 0100                  		addi.w	#$100,d0
0001638E B068 000C                  		cmp.w	$C(a0),d0
00016392 6500                       		bcs.s	locret_15B76
00016394 117C 0001 003D             		move.b	#1,$3D(a0)
0001639A 317C FA00 0010             		move.w	#-$600,$10(a0)	; move object to the left
000163A0 117C 00A2 0020             		move.b	#$A2,$20(a0)
000163A6 117C 0002 001A             		move.b	#2,$1A(a0)
000163AC 303C 00B0                  		move.w	#$B0,d0
000163B0 4EB9 0000 15C0             		jsr	(PlaySound_Special).l ;	play saw sound
000163B6                            
000163B6                            loc_15B74:
000163B6 588F                       		addq.l	#4,sp
000163B8                            
000163B8                            locret_15B76:
000163B8 4E75                       		rts	
000163BA                            ; ===========================================================================
000163BA                            
000163BA                            Obj6A_Animate04:
000163BA 4EB9 0000 DD3C             		jsr	SpeedToPos
000163C0 3168 0008 003A             		move.w	8(a0),$3A(a0)
000163C6 5328 001E                  		subq.b	#1,$1E(a0)
000163CA 6A00                       		bpl.s	locret_15B96
000163CC 117C 0002 001E             		move.b	#2,$1E(a0)
000163D2 0868 0000 001A             		bchg	#0,$1A(a0)
000163D8                            
000163D8                            locret_15B96:
000163D8 4E75                       		rts	
000163DA                            ; ===========================================================================
000163DA                            ; ---------------------------------------------------------------------------
000163DA                            ; Sprite mappings - ground saws	and pizza cutters (SBZ)
000163DA                            ; ---------------------------------------------------------------------------
000163DA                            Map_obj6A:
000163DA                            	include "_maps\obj6A.asm"
000163DA                            ; ---------------------------------------------------------------------------
000163DA                            ; Sprite mappings - ground saws	and pizza cutters (SBZ)
000163DA                            ; ---------------------------------------------------------------------------
000163DA 0000 0000                  		dc.w byte_15BA0-Map_obj6A, byte_15BC4-Map_obj6A
000163DE 0000 0000                  		dc.w byte_15BE8-Map_obj6A, byte_15BFD-Map_obj6A
000163E2 07                         byte_15BA0:	dc.b 7
000163E3 C401 0020 FC               		dc.b $C4, 1, 0,	$20, $FC
000163E8 D401 0020 FC               		dc.b $D4, 1, 0,	$20, $FC
000163ED E403 0020 FC               		dc.b $E4, 3, 0,	$20, $FC
000163F2 E00F 0000 E0               		dc.b $E0, $F, 0, 0, $E0
000163F7 E00F 0800 00               		dc.b $E0, $F, 8, 0, 0
000163FC 000F 1000 E0               		dc.b 0,	$F, $10, 0, $E0
00016401 000F 1800 00               		dc.b 0,	$F, $18, 0, 0
00016406 07                         byte_15BC4:	dc.b 7
00016407 C401 0020 FC               		dc.b $C4, 1, 0,	$20, $FC
0001640C D401 0020 FC               		dc.b $D4, 1, 0,	$20, $FC
00016411 E403 0020 FC               		dc.b $E4, 3, 0,	$20, $FC
00016416 E00F 0010 E0               		dc.b $E0, $F, 0, $10, $E0
0001641B E00F 0810 00               		dc.b $E0, $F, 8, $10, 0
00016420 000F 1010 E0               		dc.b 0,	$F, $10, $10, $E0
00016425 000F 1810 00               		dc.b 0,	$F, $18, $10, 0
0001642A 04                         byte_15BE8:	dc.b 4
0001642B E00F 0000 E0               		dc.b $E0, $F, 0, 0, $E0
00016430 E00F 0800 00               		dc.b $E0, $F, 8, 0, 0
00016435 000F 1000 E0               		dc.b 0,	$F, $10, 0, $E0
0001643A 000F 1800 00               		dc.b 0,	$F, $18, 0, 0
0001643F 04                         byte_15BFD:	dc.b 4
00016440 E00F 0010 E0               		dc.b $E0, $F, 0, $10, $E0
00016445 E00F 0810 00               		dc.b $E0, $F, 8, $10, 0
0001644A 000F 1010 E0               		dc.b 0,	$F, $10, $10, $E0
0001644F 000F 1810 00               		dc.b 0,	$F, $18, $10, 0
00016454                            		even
00016454                            		even
00016454                            
00016454                            ; ===========================================================================
00016454                            ; ---------------------------------------------------------------------------
00016454                            ; Object 6B - stomper (SBZ)
00016454                            ; ---------------------------------------------------------------------------
00016454                            
00016454                            Obj6B:					; XREF: Obj_Index
00016454 7000                       		moveq	#0,d0
00016456 1028 0024                  		move.b	$24(a0),d0
0001645A 323B 0000                  		move.w	Obj6B_Index(pc,d0.w),d1
0001645E 4EFB 1000                  		jmp	Obj6B_Index(pc,d1.w)
00016462                            ; ===========================================================================
00016462 0000                       Obj6B_Index:	dc.w Obj6B_Main-Obj6B_Index
00016464 0000                       		dc.w Obj6B_Action-Obj6B_Index
00016466                            
00016466 400C 8001                  Obj6B_Var:	dc.b  $40,  $C,	$80,   1 ; width, height, ????,	type number
0001646A 1C20 3803                  		dc.b  $1C, $20,	$38,   3
0001646E 1C20 4004                  		dc.b  $1C, $20,	$40,   4
00016472 1C20 6004                  		dc.b  $1C, $20,	$60,   4
00016476 8040 0005                  		dc.b  $80, $40,	  0,   5
0001647A                            ; ===========================================================================
0001647A                            
0001647A                            Obj6B_Main:				; XREF: Obj6B_Index
0001647A 5428 0024                  		addq.b	#2,$24(a0)
0001647E 7000                       		moveq	#0,d0
00016480 1028 0028                  		move.b	$28(a0),d0
00016484 E448                       		lsr.w	#2,d0
00016486 0240 001C                  		andi.w	#$1C,d0
0001648A 47FB 00DA                  		lea	Obj6B_Var(pc,d0.w),a3
0001648E 115B 0019                  		move.b	(a3)+,$19(a0)
00016492 115B 0016                  		move.b	(a3)+,$16(a0)
00016496 E448                       		lsr.w	#2,d0
00016498 1140 001A                  		move.b	d0,$1A(a0)
0001649C 217C 0000 0000 0004        		move.l	#Map_obj6B,4(a0)
000164A4 317C 22C0 0002             		move.w	#$22C0,2(a0)
000164AA 0C38 0001 FE10             		cmpi.b	#1,($FFFFFE10).w ; check if level is LZ/SBZ3
000164B0 6600                       		bne.s	Obj6B_SBZ12	; if not, branch
000164B2 08F8 0000 F7CB             		bset	#0,($FFFFF7CB).w
000164B8 6700                       		beq.s	Obj6B_SBZ3
000164BA                            
000164BA                            Obj6B_ChkGone:				; XREF: Obj6B_SBZ3
000164BA 45F8 FC00                  		lea	($FFFFFC00).w,a2
000164BE 7000                       		moveq	#0,d0
000164C0 1028 0023                  		move.b	$23(a0),d0
000164C4 6700                       		beq.s	Obj6B_Delete
000164C6 08B2 0007 0002             		bclr	#7,2(a2,d0.w)
000164CC                            
000164CC                            Obj6B_Delete:
000164CC 4EF9 0000 DD9E             		jmp	DeleteObject
000164D2                            ; ===========================================================================
000164D2                            
000164D2                            Obj6B_SBZ3:				; XREF: Obj6B_Main
000164D2 317C 41F0 0002             		move.w	#$41F0,2(a0)
000164D8 0C68 0A80 0008             		cmpi.w	#$A80,8(a0)
000164DE 6600                       		bne.s	Obj6B_SBZ12
000164E0 45F8 FC00                  		lea	($FFFFFC00).w,a2
000164E4 7000                       		moveq	#0,d0
000164E6 1028 0023                  		move.b	$23(a0),d0
000164EA 6700                       		beq.s	Obj6B_SBZ12
000164EC 0832 0000 0002             		btst	#0,2(a2,d0.w)
000164F2 6700                       		beq.s	Obj6B_SBZ12
000164F4 4238 F7CB                  		clr.b	($FFFFF7CB).w
000164F8 60C0                       		bra.s	Obj6B_ChkGone
000164FA                            ; ===========================================================================
000164FA                            
000164FA                            Obj6B_SBZ12:				; XREF: Obj6B_Main
000164FA 0028 0004 0001             		ori.b	#4,1(a0)
00016500 117C 0004 0018             		move.b	#4,$18(a0)
00016506 3168 0008 0034             		move.w	8(a0),$34(a0)
0001650C 3168 000C 0030             		move.w	$C(a0),$30(a0)
00016512 7000                       		moveq	#0,d0
00016514 101B                       		move.b	(a3)+,d0
00016516 3140 003C                  		move.w	d0,$3C(a0)
0001651A 7000                       		moveq	#0,d0
0001651C 1028 0028                  		move.b	$28(a0),d0
00016520 6A00                       		bpl.s	Obj6B_Action
00016522 0200 000F                  		andi.b	#$F,d0
00016526 1140 003E                  		move.b	d0,$3E(a0)
0001652A 1153 0028                  		move.b	(a3),$28(a0)
0001652E 0C13 0005                  		cmpi.b	#5,(a3)
00016532 6600                       		bne.s	Obj6B_ChkGone2
00016534 08E8 0004 0001             		bset	#4,1(a0)
0001653A                            
0001653A                            Obj6B_ChkGone2:
0001653A 45F8 FC00                  		lea	($FFFFFC00).w,a2
0001653E 7000                       		moveq	#0,d0
00016540 1028 0023                  		move.b	$23(a0),d0
00016544 6700                       		beq.s	Obj6B_Action
00016546 08B2 0007 0002             		bclr	#7,2(a2,d0.w)
0001654C                            
0001654C                            Obj6B_Action:				; XREF: Obj6B_Index
0001654C 3F28 0008                  		move.w	8(a0),-(sp)
00016550 7000                       		moveq	#0,d0
00016552 1028 0028                  		move.b	$28(a0),d0
00016556 0240 000F                  		andi.w	#$F,d0
0001655A D040                       		add.w	d0,d0
0001655C 323B 0000                  		move.w	Obj6B_TypeIndex(pc,d0.w),d1
00016560 4EBB 1000                  		jsr	Obj6B_TypeIndex(pc,d1.w)
00016564 381F                       		move.w	(sp)+,d4
00016566 4A28 0001                  		tst.b	1(a0)
0001656A 6A00                       		bpl.s	Obj6B_ChkDel
0001656C 7200                       		moveq	#0,d1
0001656E 1228 0019                  		move.b	$19(a0),d1
00016572 0641 000B                  		addi.w	#$B,d1
00016576 7400                       		moveq	#0,d2
00016578 1428 0016                  		move.b	$16(a0),d2
0001657C 3602                       		move.w	d2,d3
0001657E 5243                       		addq.w	#1,d3
00016580 6100 9BB0                  		bsr.w	SolidObject
00016584                            
00016584                            Obj6B_ChkDel:
00016584 3028 0034                  		move.w	$34(a0),d0
00016588 0240 FF80                  		andi.w	#$FF80,d0
0001658C 3238 F700                  		move.w	($FFFFF700).w,d1
00016590 0441 0080                  		subi.w	#$80,d1
00016594 0241 FF80                  		andi.w	#$FF80,d1
00016598 9041                       		sub.w	d1,d0
0001659A 0C40 0280                  		cmpi.w	#$280,d0
0001659E 6200                       		bhi.s	loc_15D64
000165A0 4EF9 0000 DD62             		jmp	DisplaySprite
000165A6                            ; ===========================================================================
000165A6                            
000165A6                            loc_15D64:
000165A6 0C38 0001 FE10             		cmpi.b	#1,($FFFFFE10).w
000165AC 6600                       		bne.s	Obj6B_Delete2
000165AE 4238 F7CB                  		clr.b	($FFFFF7CB).w
000165B2 45F8 FC00                  		lea	($FFFFFC00).w,a2
000165B6 7000                       		moveq	#0,d0
000165B8 1028 0023                  		move.b	$23(a0),d0
000165BC 6700                       		beq.s	Obj6B_Delete2
000165BE 08B2 0007 0002             		bclr	#7,2(a2,d0.w)
000165C4                            
000165C4                            Obj6B_Delete2:
000165C4 4EF9 0000 DD9E             		jmp	DeleteObject
000165CA                            ; ===========================================================================
000165CA 0000 0000                  Obj6B_TypeIndex:dc.w Obj6B_Type00-Obj6B_TypeIndex, Obj6B_Type01-Obj6B_TypeIndex
000165CE 0000 0000                  		dc.w Obj6B_Type02-Obj6B_TypeIndex, Obj6B_Type03-Obj6B_TypeIndex
000165D2 0000 0000                  		dc.w Obj6B_Type04-Obj6B_TypeIndex, Obj6B_Type05-Obj6B_TypeIndex
000165D6                            ; ===========================================================================
000165D6                            
000165D6                            Obj6B_Type00:				; XREF: Obj6B_TypeIndex
000165D6 4E75                       		rts	
000165D8                            ; ===========================================================================
000165D8                            
000165D8                            Obj6B_Type01:				; XREF: Obj6B_TypeIndex
000165D8 4A28 0038                  		tst.b	$38(a0)
000165DC 6600                       		bne.s	loc_15DB4
000165DE 45F8 F7E0                  		lea	($FFFFF7E0).w,a2
000165E2 7000                       		moveq	#0,d0
000165E4 1028 003E                  		move.b	$3E(a0),d0
000165E8 0832 0000 0000             		btst	#0,(a2,d0.w)
000165EE 6700                       		beq.s	loc_15DC2
000165F0 117C 0001 0038             		move.b	#1,$38(a0)
000165F6                            
000165F6                            loc_15DB4:
000165F6 3028 003C                  		move.w	$3C(a0),d0
000165FA B068 003A                  		cmp.w	$3A(a0),d0
000165FE 6700                       		beq.s	loc_15DE0
00016600 5468 003A                  		addq.w	#2,$3A(a0)
00016604                            
00016604                            loc_15DC2:
00016604 3028 003A                  		move.w	$3A(a0),d0
00016608 0828 0000 0022             		btst	#0,$22(a0)
0001660E 6700                       		beq.s	loc_15DD4
00016610 4440                       		neg.w	d0
00016612 0640 0080                  		addi.w	#$80,d0
00016616                            
00016616                            loc_15DD4:
00016616 3228 0034                  		move.w	$34(a0),d1
0001661A 9240                       		sub.w	d0,d1
0001661C 3141 0008                  		move.w	d1,8(a0)
00016620 4E75                       		rts	
00016622                            ; ===========================================================================
00016622                            
00016622                            loc_15DE0:
00016622 5228 0028                  		addq.b	#1,$28(a0)
00016626 317C 00B4 0036             		move.w	#$B4,$36(a0)
0001662C 4228 0038                  		clr.b	$38(a0)
00016630 45F8 FC00                  		lea	($FFFFFC00).w,a2
00016634 7000                       		moveq	#0,d0
00016636 1028 0023                  		move.b	$23(a0),d0
0001663A 67C8                       		beq.s	loc_15DC2
0001663C 08F2 0000 0002             		bset	#0,2(a2,d0.w)
00016642 60C0                       		bra.s	loc_15DC2
00016644                            ; ===========================================================================
00016644                            
00016644                            Obj6B_Type02:				; XREF: Obj6B_TypeIndex
00016644 4A28 0038                  		tst.b	$38(a0)
00016648 6600                       		bne.s	loc_15E14
0001664A 5368 0036                  		subq.w	#1,$36(a0)
0001664E 6600                       		bne.s	loc_15E1E
00016650 117C 0001 0038             		move.b	#1,$38(a0)
00016656                            
00016656                            loc_15E14:
00016656 4A68 003A                  		tst.w	$3A(a0)
0001665A 6700                       		beq.s	loc_15E3C
0001665C 5568 003A                  		subq.w	#2,$3A(a0)
00016660                            
00016660                            loc_15E1E:
00016660 3028 003A                  		move.w	$3A(a0),d0
00016664 0828 0000 0022             		btst	#0,$22(a0)
0001666A 6700                       		beq.s	loc_15E30
0001666C 4440                       		neg.w	d0
0001666E 0640 0080                  		addi.w	#$80,d0
00016672                            
00016672                            loc_15E30:
00016672 3228 0034                  		move.w	$34(a0),d1
00016676 9240                       		sub.w	d0,d1
00016678 3141 0008                  		move.w	d1,8(a0)
0001667C 4E75                       		rts	
0001667E                            ; ===========================================================================
0001667E                            
0001667E                            loc_15E3C:
0001667E 5328 0028                  		subq.b	#1,$28(a0)
00016682 4228 0038                  		clr.b	$38(a0)
00016686 45F8 FC00                  		lea	($FFFFFC00).w,a2
0001668A 7000                       		moveq	#0,d0
0001668C 1028 0023                  		move.b	$23(a0),d0
00016690 67CE                       		beq.s	loc_15E1E
00016692 08B2 0000 0002             		bclr	#0,2(a2,d0.w)
00016698 60C6                       		bra.s	loc_15E1E
0001669A                            ; ===========================================================================
0001669A                            
0001669A                            Obj6B_Type03:				; XREF: Obj6B_TypeIndex
0001669A 4A28 0038                  		tst.b	$38(a0)
0001669E 6600                       		bne.s	loc_15E7C
000166A0 4A68 003A                  		tst.w	$3A(a0)
000166A4 6700                       		beq.s	loc_15E6A
000166A6 5368 003A                  		subq.w	#1,$3A(a0)
000166AA 6000                       		bra.s	loc_15E8E
000166AC                            ; ===========================================================================
000166AC                            
000166AC                            loc_15E6A:
000166AC 5368 0036                  		subq.w	#1,$36(a0)
000166B0 6A00                       		bpl.s	loc_15E8E
000166B2 317C 003C 0036             		move.w	#$3C,$36(a0)
000166B8 117C 0001 0038             		move.b	#1,$38(a0)
000166BE                            
000166BE                            loc_15E7C:
000166BE 5068 003A                  		addq.w	#8,$3A(a0)
000166C2 3028 003A                  		move.w	$3A(a0),d0
000166C6 B068 003C                  		cmp.w	$3C(a0),d0
000166CA 6600                       		bne.s	loc_15E8E
000166CC 4228 0038                  		clr.b	$38(a0)
000166D0                            
000166D0                            loc_15E8E:
000166D0 3028 003A                  		move.w	$3A(a0),d0
000166D4 0828 0000 0022             		btst	#0,$22(a0)
000166DA 6700                       		beq.s	loc_15EA0
000166DC 4440                       		neg.w	d0
000166DE 0640 0038                  		addi.w	#$38,d0
000166E2                            
000166E2                            loc_15EA0:
000166E2 3228 0030                  		move.w	$30(a0),d1
000166E6 D240                       		add.w	d0,d1
000166E8 3141 000C                  		move.w	d1,$C(a0)
000166EC 4E75                       		rts	
000166EE                            ; ===========================================================================
000166EE                            
000166EE                            Obj6B_Type04:				; XREF: Obj6B_TypeIndex
000166EE 4A28 0038                  		tst.b	$38(a0)
000166F2 6600                       		bne.s	loc_15ED0
000166F4 4A68 003A                  		tst.w	$3A(a0)
000166F8 6700                       		beq.s	loc_15EBE
000166FA 5168 003A                  		subq.w	#8,$3A(a0)
000166FE 6000                       		bra.s	loc_15EF0
00016700                            ; ===========================================================================
00016700                            
00016700                            loc_15EBE:
00016700 5368 0036                  		subq.w	#1,$36(a0)
00016704 6A00                       		bpl.s	loc_15EF0
00016706 317C 003C 0036             		move.w	#$3C,$36(a0)
0001670C 117C 0001 0038             		move.b	#1,$38(a0)
00016712                            
00016712                            loc_15ED0:
00016712 3028 003A                  		move.w	$3A(a0),d0
00016716 B068 003C                  		cmp.w	$3C(a0),d0
0001671A 6700                       		beq.s	loc_15EE0
0001671C 5068 003A                  		addq.w	#8,$3A(a0)
00016720 6000                       		bra.s	loc_15EF0
00016722                            ; ===========================================================================
00016722                            
00016722                            loc_15EE0:
00016722 5368 0036                  		subq.w	#1,$36(a0)
00016726 6A00                       		bpl.s	loc_15EF0
00016728 317C 003C 0036             		move.w	#$3C,$36(a0)
0001672E 4228 0038                  		clr.b	$38(a0)
00016732                            
00016732                            loc_15EF0:
00016732 3028 003A                  		move.w	$3A(a0),d0
00016736 0828 0000 0022             		btst	#0,$22(a0)
0001673C 6700                       		beq.s	loc_15F02
0001673E 4440                       		neg.w	d0
00016740 0640 0038                  		addi.w	#$38,d0
00016744                            
00016744                            loc_15F02:
00016744 3228 0030                  		move.w	$30(a0),d1
00016748 D240                       		add.w	d0,d1
0001674A 3141 000C                  		move.w	d1,$C(a0)
0001674E 4E75                       		rts	
00016750                            ; ===========================================================================
00016750                            
00016750                            Obj6B_Type05:				; XREF: Obj6B_TypeIndex
00016750 4A28 0038                  		tst.b	$38(a0)
00016754 6600                       		bne.s	loc_15F3E
00016756 45F8 F7E0                  		lea	($FFFFF7E0).w,a2
0001675A 7000                       		moveq	#0,d0
0001675C 1028 003E                  		move.b	$3E(a0),d0
00016760 0832 0000 0000             		btst	#0,(a2,d0.w)
00016766 6700                       		beq.s	locret_15F5C
00016768 117C 0001 0038             		move.b	#1,$38(a0)
0001676E 45F8 FC00                  		lea	($FFFFFC00).w,a2
00016772 7000                       		moveq	#0,d0
00016774 1028 0023                  		move.b	$23(a0),d0
00016778 6700                       		beq.s	loc_15F3E
0001677A 08F2 0000 0002             		bset	#0,2(a2,d0.w)
00016780                            
00016780                            loc_15F3E:
00016780 04A8 0001 0000 0008        		subi.l	#$10000,8(a0)
00016788 06A8 0000 8000 000C        		addi.l	#$8000,$C(a0)
00016790 3168 0008 0034             		move.w	8(a0),$34(a0)
00016796 0C68 0980 0008             		cmpi.w	#$980,8(a0)
0001679C 6700                       		beq.s	loc_15F5E
0001679E                            
0001679E                            locret_15F5C:
0001679E 4E75                       		rts	
000167A0                            ; ===========================================================================
000167A0                            
000167A0                            loc_15F5E:
000167A0 4228 0028                  		clr.b	$28(a0)
000167A4 4228 0038                  		clr.b	$38(a0)
000167A8 4E75                       		rts	
000167AA                            ; ===========================================================================
000167AA                            ; ---------------------------------------------------------------------------
000167AA                            ; Sprite mappings - stomper and	platforms (SBZ)
000167AA                            ; ---------------------------------------------------------------------------
000167AA                            Map_obj6B:
000167AA                            	include "_maps\obj6B.asm"
000167AA                            ; ---------------------------------------------------------------------------
000167AA                            ; Sprite mappings - stomper and	platforms (SBZ)
000167AA                            ; ---------------------------------------------------------------------------
000167AA 0000 0000                  		dc.w byte_15F72-Map_obj6B, byte_15F87-Map_obj6B
000167AE 0000 0000                  		dc.w byte_15F87-Map_obj6B, byte_15F87-Map_obj6B
000167B2 0000                       		dc.w byte_15FB0-Map_obj6B
000167B4 04                         byte_15F72:	dc.b 4
000167B5 F40E 21AF C0               		dc.b $F4, $E, $21, $AF,	$C0
000167BA F40E 21B2 E0               		dc.b $F4, $E, $21, $B2,	$E0
000167BF F40E 21B2 00               		dc.b $F4, $E, $21, $B2,	0
000167C4 F40E 29AF 20               		dc.b $F4, $E, $29, $AF,	$20
000167C9 08                         byte_15F87:	dc.b 8
000167CA E00C 000C E4               		dc.b $E0, $C, 0, $C, $E4
000167CF E008 0010 04               		dc.b $E0, 8, 0,	$10, 4
000167D4 E80E 2013 E4               		dc.b $E8, $E, $20, $13,	$E4
000167D9 E80A 201F 04               		dc.b $E8, $A, $20, $1F,	4
000167DE 000E 2013 E4               		dc.b 0,	$E, $20, $13, $E4
000167E3 000A 201F 04               		dc.b 0,	$A, $20, $1F, 4
000167E8 180C 000C E4               		dc.b $18, $C, 0, $C, $E4
000167ED 1808 0010 04               		dc.b $18, 8, 0,	$10, 4
000167F2 0E                         byte_15FB0:	dc.b $E
000167F3 C00F 0000 80               		dc.b $C0, $F, 0, 0, $80
000167F8 C00F 0010 A0               		dc.b $C0, $F, 0, $10, $A0
000167FD C00F 0020 C0               		dc.b $C0, $F, 0, $20, $C0
00016802 C00F 0010 E0               		dc.b $C0, $F, 0, $10, $E0
00016807 C00F 0020 00               		dc.b $C0, $F, 0, $20, 0
0001680C C00F 0010 20               		dc.b $C0, $F, 0, $10, $20
00016811 C00F 0030 40               		dc.b $C0, $F, 0, $30, $40
00016816 C00D 0040 60               		dc.b $C0, $D, 0, $40, $60
0001681B E00F 0048 80               		dc.b $E0, $F, 0, $48, $80
00016820 E00F 0048 C0               		dc.b $E0, $F, 0, $48, $C0
00016825 E00F 0058 00               		dc.b $E0, $F, 0, $58, 0
0001682A 000F 0048 80               		dc.b 0,	$F, 0, $48, $80
0001682F 000F 0058 C0               		dc.b 0,	$F, 0, $58, $C0
00016834 200F 0058 80               		dc.b $20, $F, 0, $58, $80
0001683A 00                         		even
0001683A 00                         		even
0001683A                            
0001683A                            ; ===========================================================================
0001683A                            ; ---------------------------------------------------------------------------
0001683A                            ; Object 6C - vanishing	platforms (SBZ)
0001683A                            ; ---------------------------------------------------------------------------
0001683A                            
0001683A                            Obj6C:					; XREF: Obj_Index
0001683A 7000                       		moveq	#0,d0
0001683C 1028 0024                  		move.b	$24(a0),d0
00016840 323B 0000                  		move.w	Obj6C_Index(pc,d0.w),d1
00016844 4EFB 1000                  		jmp	Obj6C_Index(pc,d1.w)
00016848                            ; ===========================================================================
00016848 0000                       Obj6C_Index:	dc.w Obj6C_Main-Obj6C_Index
0001684A 0000                       		dc.w Obj6C_Vanish-Obj6C_Index
0001684C 0000                       		dc.w Obj6C_Vanish-Obj6C_Index
0001684E 0000                       		dc.w loc_16068-Obj6C_Index
00016850                            ; ===========================================================================
00016850                            
00016850                            Obj6C_Main:				; XREF: Obj6C_Index
00016850 5C28 0024                  		addq.b	#6,$24(a0)
00016854 217C 0000 0000 0004        		move.l	#Map_obj6C,4(a0)
0001685C 317C 44C3 0002             		move.w	#$44C3,2(a0)
00016862 0028 0004 0001             		ori.b	#4,1(a0)
00016868 117C 0010 0019             		move.b	#$10,$19(a0)
0001686E 117C 0004 0018             		move.b	#4,$18(a0)
00016874 7000                       		moveq	#0,d0
00016876 1028 0028                  		move.b	$28(a0),d0	; get object type
0001687A 0240 000F                  		andi.w	#$F,d0		; read only the	2nd digit
0001687E 5240                       		addq.w	#1,d0		; add 1
00016880 EF48                       		lsl.w	#7,d0		; multiply by $80
00016882 3200                       		move.w	d0,d1
00016884 5340                       		subq.w	#1,d0
00016886 3140 0030                  		move.w	d0,$30(a0)
0001688A 3140 0032                  		move.w	d0,$32(a0)
0001688E 7000                       		moveq	#0,d0
00016890 1028 0028                  		move.b	$28(a0),d0	; get object type
00016894 0240 00F0                  		andi.w	#$F0,d0		; read only the	1st digit
00016898 0641 0080                  		addi.w	#$80,d1
0001689C C0C1                       		mulu.w	d1,d0
0001689E E088                       		lsr.l	#8,d0
000168A0 3140 0036                  		move.w	d0,$36(a0)
000168A4 5341                       		subq.w	#1,d1
000168A6 3141 0038                  		move.w	d1,$38(a0)
000168AA                            
000168AA                            loc_16068:				; XREF: Obj6C_Index
000168AA 3038 FE04                  		move.w	($FFFFFE04).w,d0
000168AE 9068 0036                  		sub.w	$36(a0),d0
000168B2 C068 0038                  		and.w	$38(a0),d0
000168B6 6600                       		bne.s	Obj6C_Animate
000168B8 5928 0024                  		subq.b	#4,$24(a0)
000168BC 6000                       		bra.s	Obj6C_Vanish
000168BE                            ; ===========================================================================
000168BE                            
000168BE                            Obj6C_Animate:
000168BE 43F9 0000 0000             		lea	(Ani_obj6C).l,a1
000168C4 4EB9 0000 AE22             		jsr	AnimateSprite
000168CA 6000 953E                  		bra.w	MarkObjGone
000168CE                            ; ===========================================================================
000168CE                            
000168CE                            Obj6C_Vanish:				; XREF: Obj6C_Index
000168CE 5368 0030                  		subq.w	#1,$30(a0)
000168D2 6A00                       		bpl.s	loc_160AA
000168D4 317C 007F 0030             		move.w	#127,$30(a0)
000168DA 4A28 001C                  		tst.b	$1C(a0)
000168DE 6700                       		beq.s	loc_160A4
000168E0 3168 0032 0030             		move.w	$32(a0),$30(a0)
000168E6                            
000168E6                            loc_160A4:
000168E6 0868 0000 001C             		bchg	#0,$1C(a0)
000168EC                            
000168EC                            loc_160AA:
000168EC 43F9 0000 0000             		lea	(Ani_obj6C).l,a1
000168F2 4EB9 0000 AE22             		jsr	AnimateSprite
000168F8 0828 0001 001A             		btst	#1,$1A(a0)	; has platform vanished?
000168FE 6600                       		bne.s	Obj6C_NotSolid	; if yes, branch
00016900 0C28 0002 0024             		cmpi.b	#2,$24(a0)
00016906 6600                       		bne.s	loc_160D6
00016908 7200                       		moveq	#0,d1
0001690A 1228 0019                  		move.b	$19(a0),d1
0001690E 4EB9 0000 79EC             		jsr	(PlatformObject).l
00016914 6000 94F4                  		bra.w	MarkObjGone
00016918                            ; ===========================================================================
00016918                            
00016918                            loc_160D6:
00016918 7200                       		moveq	#0,d1
0001691A 1228 0019                  		move.b	$19(a0),d1
0001691E 4EB9 0000 7B60             		jsr	(ExitPlatform).l
00016924 3428 0008                  		move.w	8(a0),d2
00016928 4EB9 0000 80CA             		jsr	(MvSonicOnPtfm2).l
0001692E 6000 94DA                  		bra.w	MarkObjGone
00016932                            ; ===========================================================================
00016932                            
00016932                            Obj6C_NotSolid:				; XREF: Obj6C_Vanish
00016932 0828 0003 0022             		btst	#3,$22(a0)
00016938 6700                       		beq.s	Obj6C_Display
0001693A 43F8 D000                  		lea	($FFFFD000).w,a1
0001693E 08A9 0003 0022             		bclr	#3,$22(a1)
00016944 08A8 0003 0022             		bclr	#3,$22(a0)
0001694A 117C 0002 0024             		move.b	#2,$24(a0)
00016950 4228 0025                  		clr.b	$25(a0)
00016954                            
00016954                            Obj6C_Display:
00016954 6000 94B4                  		bra.w	MarkObjGone
00016958                            ; ===========================================================================
00016958                            Ani_obj6C:
00016958                            	include "_anim\obj6C.asm"
00016958                            ; ---------------------------------------------------------------------------
00016958                            ; Animation script - vanishing platforms (SBZ)
00016958                            ; ---------------------------------------------------------------------------
00016958 0000                       		dc.w byte_1611A-Ani_obj6C
0001695A 0000                       		dc.w byte_16122-Ani_obj6C
0001695C 0700 0102 03FE 0100        byte_1611A:	dc.b 7,	0, 1, 2, 3, $FE, 1, 0
00016964 0703 0201 00FE 0100        byte_16122:	dc.b 7,	3, 2, 1, 0, $FE, 1, 0
0001696C                            		even
0001696C                            		even
0001696C                            
0001696C                            ; ---------------------------------------------------------------------------
0001696C                            ; Sprite mappings - vanishing platforms	(SBZ)
0001696C                            ; ---------------------------------------------------------------------------
0001696C                            Map_obj6C:
0001696C                            	include "_maps\obj6C.asm"
0001696C                            ; ---------------------------------------------------------------------------
0001696C                            ; Sprite mappings - vanishing platforms	(SBZ)
0001696C                            ; ---------------------------------------------------------------------------
0001696C 0000 0000                  		dc.w byte_16132-Map_obj6C, byte_16138-Map_obj6C
00016970 0000 0000                  		dc.w byte_1613E-Map_obj6C, byte_16144-Map_obj6C
00016974 01                         byte_16132:	dc.b 1
00016975 F80F 0000 F0               		dc.b $F8, $F, 0, 0, $F0
0001697A 01                         byte_16138:	dc.b 1
0001697B F807 0010 F8               		dc.b $F8, 7, 0,	$10, $F8
00016980 01                         byte_1613E:	dc.b 1
00016981 F803 0018 FC               		dc.b $F8, 3, 0,	$18, $FC
00016986 00                         byte_16144:	dc.b 0
00016988 00                         		even
00016988 00                         		even
00016988                            
00016988                            ; ===========================================================================
00016988                            ; ---------------------------------------------------------------------------
00016988                            ; Object 6E - electrocution orbs (SBZ)
00016988                            ; ---------------------------------------------------------------------------
00016988                            
00016988                            Obj6E:					; XREF: Obj_Index
00016988 7000                       		moveq	#0,d0
0001698A 1028 0024                  		move.b	$24(a0),d0
0001698E 323B 0000                  		move.w	Obj6E_Index(pc,d0.w),d1
00016992 4EFB 1000                  		jmp	Obj6E_Index(pc,d1.w)
00016996                            ; ===========================================================================
00016996 0000                       Obj6E_Index:	dc.w Obj6E_Main-Obj6E_Index
00016998 0000                       		dc.w Obj6E_Shock-Obj6E_Index
0001699A                            ; ===========================================================================
0001699A                            
0001699A                            Obj6E_Main:				; XREF: Obj6E_Index
0001699A 5428 0024                  		addq.b	#2,$24(a0)
0001699E 217C 0000 0000 0004        		move.l	#Map_obj6E,4(a0)
000169A6 317C 047E 0002             		move.w	#$47E,2(a0)
000169AC 0028 0004 0001             		ori.b	#4,1(a0)
000169B2 117C 0028 0019             		move.b	#$28,$19(a0)
000169B8 7000                       		moveq	#0,d0
000169BA 1028 0028                  		move.b	$28(a0),d0	; read object type
000169BE E948                       		lsl.w	#4,d0		; multiply by $10
000169C0 5340                       		subq.w	#1,d0
000169C2 3140 0034                  		move.w	d0,$34(a0)
000169C6                            
000169C6                            Obj6E_Shock:				; XREF: Obj6E_Index
000169C6 3038 FE04                  		move.w	($FFFFFE04).w,d0
000169CA C068 0034                  		and.w	$34(a0),d0
000169CE 6600                       		bne.s	Obj6E_Animate
000169D0 117C 0001 001C             		move.b	#1,$1C(a0)	; run "shocking" animation
000169D6 4A28 0001                  		tst.b	1(a0)
000169DA 6A00                       		bpl.s	Obj6E_Animate
000169DC 303C 00B1                  		move.w	#$B1,d0
000169E0 4EB9 0000 15C0             		jsr	(PlaySound_Special).l ;	play electricity sound
000169E6                            
000169E6                            Obj6E_Animate:
000169E6 43F9 0000 0000             		lea	(Ani_obj6E).l,a1
000169EC 4EB9 0000 AE22             		jsr	AnimateSprite
000169F2 117C 0000 0020             		move.b	#0,$20(a0)
000169F8 0C28 0004 001A             		cmpi.b	#4,$1A(a0)	; is frame number 4 displayed?
000169FE 6600                       		bne.s	Obj6E_Display	; if not, branch
00016A00 117C 00A4 0020             		move.b	#$A4,$20(a0)	; if yes, make object hurt Sonic
00016A06                            
00016A06                            Obj6E_Display:
00016A06 6000 9402                  		bra.w	MarkObjGone
00016A0A                            ; ===========================================================================
00016A0A                            Ani_obj6E:
00016A0A                            	include "_anim\obj6E.asm"
00016A0A                            ; ---------------------------------------------------------------------------
00016A0A                            ; Animation script - electrocution orbs (SBZ)
00016A0A                            ; ---------------------------------------------------------------------------
00016A0A 0000                       		dc.w byte_161CC-Ani_obj6E
00016A0C 0000                       		dc.w byte_161D0-Ani_obj6E
00016A0E 0700 FF00                  byte_161CC:	dc.b 7,	0, $FF,	0
00016A12 0001 0101 0203 0304 0404+  byte_161D0:	dc.b 0,	1, 1, 1, 2, 3, 3, 4, 4,	4, 5, 5, 5, 0, $FD, 0
00016A22                            		even
00016A22                            		even
00016A22                            
00016A22                            ; ---------------------------------------------------------------------------
00016A22                            ; Sprite mappings - electrocution orbs (SBZ)
00016A22                            ; ---------------------------------------------------------------------------
00016A22                            Map_obj6E:
00016A22                            	include "_maps\obj6E.asm"
00016A22                            Map_26ed:
00016A22 0000                       Map_26ed_0: 	dc.w Map_26ed_C-Map_26ed
00016A24 0000                       Map_26ed_2: 	dc.w Map_26ed_12-Map_26ed
00016A26 0000                       Map_26ed_4: 	dc.w Map_26ed_1D-Map_26ed
00016A28 0000                       Map_26ed_6: 	dc.w Map_26ed_3C-Map_26ed
00016A2A 0000                       Map_26ed_8: 	dc.w Map_26ed_65-Map_26ed
00016A2C 0000                       Map_26ed_A: 	dc.w Map_26ed_84-Map_26ed
00016A2E 01                         Map_26ed_C: 	dc.b $1
00016A2F 0805 0000 F8               	dc.b $8, $5, $0, $0, $F8
00016A34 02                         Map_26ed_12: 	dc.b $2
00016A35 F80A 0004 F4               	dc.b $F8, $A, $0, $4, $F4
00016A3A 1008 000D F4               	dc.b $10, $8, $0, $D, $F4
00016A3F 06                         Map_26ed_1D: 	dc.b $6
00016A40 F80A 0004 F4               	dc.b $F8, $A, $0, $4, $F4
00016A45 1008 000D F4               	dc.b $10, $8, $0, $D, $F4
00016A4A F605 0010 0C               	dc.b $F6, $5, $0, $10, $C
00016A4F F605 0010 1C               	dc.b $F6, $5, $0, $10, $1C
00016A54 F605 0810 D4               	dc.b $F6, $5, $8, $10, $D4
00016A59 F605 0810 E4               	dc.b $F6, $5, $8, $10, $E4
00016A5E 08                         Map_26ed_3C: 	dc.b $8
00016A5F F80A 0004 F4               	dc.b $F8, $A, $0, $4, $F4
00016A64 1008 000D F4               	dc.b $10, $8, $0, $D, $F4
00016A69 F605 0010 0C               	dc.b $F6, $5, $0, $10, $C
00016A6E F605 0010 1C               	dc.b $F6, $5, $0, $10, $1C
00016A73 F605 0810 E4               	dc.b $F6, $5, $8, $10, $E4
00016A78 F605 0010 2C               	dc.b $F6, $5, $0, $10, $2C
00016A7D F605 0810 D4               	dc.b $F6, $5, $8, $10, $D4
00016A82 F605 0810 C4               	dc.b $F6, $5, $8, $10, $C4
00016A87 06                         Map_26ed_65: 	dc.b $6
00016A88 F80A 0004 F4               	dc.b $F8, $A, $0, $4, $F4
00016A8D 1008 000D F4               	dc.b $10, $8, $0, $D, $F4
00016A92 F605 0010 1C               	dc.b $F6, $5, $0, $10, $1C
00016A97 F605 0010 2C               	dc.b $F6, $5, $0, $10, $2C
00016A9C F605 0810 D4               	dc.b $F6, $5, $8, $10, $D4
00016AA1 F605 0810 C4               	dc.b $F6, $5, $8, $10, $C4
00016AA6 04                         Map_26ed_84: 	dc.b $4
00016AA7 F80A 0004 F4               	dc.b $F8, $A, $0, $4, $F4
00016AAC 1008 000D F4               	dc.b $10, $8, $0, $D, $F4
00016AB1 F605 0010 2C               	dc.b $F6, $5, $0, $10, $2C
00016AB6 F605 0810 C4               	dc.b $F6, $5, $8, $10, $C4
00016ABC 00                         	even
00016ABC 00                         	even
00016ABC                            
00016ABC                            ; ===========================================================================
00016ABC                            ; ---------------------------------------------------------------------------
00016ABC                            ; Object 6F - spinning platforms that move around a conveyor belt (SBZ)
00016ABC                            ; ---------------------------------------------------------------------------
00016ABC                            
00016ABC                            Obj6F:					; XREF: Obj_Index
00016ABC 7000                       		moveq	#0,d0
00016ABE 1028 0024                  		move.b	$24(a0),d0
00016AC2 323B 0000                  		move.w	Obj6F_Index(pc,d0.w),d1
00016AC6 4EBB 1000                  		jsr	Obj6F_Index(pc,d1.w)
00016ACA 3028 0030                  		move.w	$30(a0),d0
00016ACE 0240 FF80                  		andi.w	#$FF80,d0
00016AD2 3238 F700                  		move.w	($FFFFF700).w,d1
00016AD6 0441 0080                  		subi.w	#$80,d1
00016ADA 0241 FF80                  		andi.w	#$FF80,d1
00016ADE 9041                       		sub.w	d1,d0
00016AE0 0C40 0280                  		cmpi.w	#$280,d0
00016AE4 6200                       		bhi.s	loc_1629A
00016AE6                            
00016AE6                            Obj6F_Display:
00016AE6 4EF9 0000 DD62             		jmp	DisplaySprite
00016AEC                            ; ===========================================================================
00016AEC                            
00016AEC                            loc_1629A:
00016AEC 0C38 0002 FE11             		cmpi.b	#2,($FFFFFE11).w ; check if act	is 3
00016AF2 6600                       		bne.s	Obj6F_Act1or2	; if not, branch
00016AF4 0C40 FF80                  		cmpi.w	#-$80,d0
00016AF8 64EC                       		bcc.s	Obj6F_Display
00016AFA                            
00016AFA                            Obj6F_Act1or2:
00016AFA 1028 002F                  		move.b	$2F(a0),d0
00016AFE 6A00                       		bpl.s	Obj6F_Delete
00016B00 0240 007F                  		andi.w	#$7F,d0
00016B04 45F8 F7C1                  		lea	($FFFFF7C1).w,a2
00016B08 08B2 0000 0000             		bclr	#0,(a2,d0.w)
00016B0E                            
00016B0E                            Obj6F_Delete:
00016B0E 4EF9 0000 DD9E             		jmp	DeleteObject
00016B14                            ; ===========================================================================
00016B14 0000                       Obj6F_Index:	dc.w Obj6F_Main-Obj6F_Index
00016B16 0000                       		dc.w loc_163D8-Obj6F_Index
00016B18                            ; ===========================================================================
00016B18                            
00016B18                            Obj6F_Main:				; XREF: Obj6F_Index
00016B18 1028 0028                  		move.b	$28(a0),d0
00016B1C 6B00 0000                  		bmi.w	loc_16380
00016B20 5428 0024                  		addq.b	#2,$24(a0)
00016B24 217C 0001 617C 0004        		move.l	#Map_obj69a,4(a0)
00016B2C 317C 04DF 0002             		move.w	#$4DF,2(a0)
00016B32 117C 0010 0019             		move.b	#$10,$19(a0)
00016B38 0028 0004 0001             		ori.b	#4,1(a0)
00016B3E 117C 0004 0018             		move.b	#4,$18(a0)
00016B44 7000                       		moveq	#0,d0
00016B46 1028 0028                  		move.b	$28(a0),d0
00016B4A 3200                       		move.w	d0,d1
00016B4C E648                       		lsr.w	#3,d0
00016B4E 0240 001E                  		andi.w	#$1E,d0
00016B52 45FA 0000                  		lea	off_164A6(pc),a2
00016B56 D4F2 0000                  		adda.w	(a2,d0.w),a2
00016B5A 315A 0038                  		move.w	(a2)+,$38(a0)
00016B5E 315A 0030                  		move.w	(a2)+,$30(a0)
00016B62 214A 003C                  		move.l	a2,$3C(a0)
00016B66 0241 000F                  		andi.w	#$F,d1
00016B6A E549                       		lsl.w	#2,d1
00016B6C 1141 0038                  		move.b	d1,$38(a0)
00016B70 117C 0004 003A             		move.b	#4,$3A(a0)
00016B76 4A38 F7C0                  		tst.b	($FFFFF7C0).w
00016B7A 6700                       		beq.s	loc_16356
00016B7C 117C 0001 003B             		move.b	#1,$3B(a0)
00016B82 4428 003A                  		neg.b	$3A(a0)
00016B86 7200                       		moveq	#0,d1
00016B88 1228 0038                  		move.b	$38(a0),d1
00016B8C D228 003A                  		add.b	$3A(a0),d1
00016B90 B228 0039                  		cmp.b	$39(a0),d1
00016B94 6500                       		bcs.s	loc_16352
00016B96 1001                       		move.b	d1,d0
00016B98 7200                       		moveq	#0,d1
00016B9A 4A00                       		tst.b	d0
00016B9C 6A00                       		bpl.s	loc_16352
00016B9E 1228 0039                  		move.b	$39(a0),d1
00016BA2 5901                       		subq.b	#4,d1
00016BA4                            
00016BA4                            loc_16352:
00016BA4 1141 0038                  		move.b	d1,$38(a0)
00016BA8                            
00016BA8                            loc_16356:
00016BA8 3172 1000 0034             		move.w	(a2,d1.w),$34(a0)
00016BAE 3172 1002 0036             		move.w	2(a2,d1.w),$36(a0)
00016BB4 4A41                       		tst.w	d1
00016BB6 6600                       		bne.s	loc_1636C
00016BB8 117C 0001 001C             		move.b	#1,$1C(a0)
00016BBE                            
00016BBE                            loc_1636C:
00016BBE 0C41 0008                  		cmpi.w	#8,d1
00016BC2 6600                       		bne.s	loc_16378
00016BC4 117C 0000 001C             		move.b	#0,$1C(a0)
00016BCA                            
00016BCA                            loc_16378:
00016BCA 6100 C0D6                  		bsr.w	Obj63_ChangeDir
00016BCE 6000 0000                  		bra.w	loc_163D8
00016BD2                            ; ===========================================================================
00016BD2                            
00016BD2                            loc_16380:				; XREF: Obj6F_Main
00016BD2 1140 002F                  		move.b	d0,$2F(a0)
00016BD6 0240 007F                  		andi.w	#$7F,d0
00016BDA 45F8 F7C1                  		lea	($FFFFF7C1).w,a2
00016BDE 08F2 0000 0000             		bset	#0,(a2,d0.w)
00016BE4 6700                       		beq.s	loc_1639A
00016BE6 4EF9 0000 DD9E             		jmp	DeleteObject
00016BEC                            ; ===========================================================================
00016BEC                            
00016BEC                            loc_1639A:
00016BEC D040                       		add.w	d0,d0
00016BEE 0240 001E                  		andi.w	#$1E,d0
00016BF2 0640 0080                  		addi.w	#$80,d0
00016BF6 45F9 0000 0000             		lea	(ObjPos_Index).l,a2
00016BFC D4F2 0000                  		adda.w	(a2,d0.w),a2
00016C00 321A                       		move.w	(a2)+,d1
00016C02 2248                       		movea.l	a0,a1
00016C04 6000                       		bra.s	Obj6F_LoadPform
00016C06                            ; ===========================================================================
00016C06                            
00016C06                            Obj6F_Loop:
00016C06 4EB9 0000 E1E8             		jsr	SingleObjLoad
00016C0C 6600                       		bne.s	loc_163D0
00016C0E                            
00016C0E                            Obj6F_LoadPform:			; XREF: loc_1639A
00016C0E 12BC 006F                  		move.b	#$6F,0(a1)
00016C12 335A 0008                  		move.w	(a2)+,8(a1)
00016C16 335A 000C                  		move.w	(a2)+,$C(a1)
00016C1A 301A                       		move.w	(a2)+,d0
00016C1C 1340 0028                  		move.b	d0,$28(a1)
00016C20                            
00016C20                            loc_163D0:
00016C20 51C9 FFE4                  		dbf	d1,Obj6F_Loop
00016C24                            
00016C24 588F                       		addq.l	#4,sp
00016C26 4E75                       		rts	
00016C28                            ; ===========================================================================
00016C28                            
00016C28                            loc_163D8:				; XREF: Obj6F_Index
00016C28 43F9 0000 0000             		lea	(Ani_obj6F).l,a1
00016C2E 4EB9 0000 AE22             		jsr	AnimateSprite
00016C34 4A28 001A                  		tst.b	$1A(a0)
00016C38 6600                       		bne.s	loc_16404
00016C3A 3F28 0008                  		move.w	8(a0),-(sp)
00016C3E 6100 0000                  		bsr.w	loc_16424
00016C42 323C 001B                  		move.w	#$1B,d1
00016C46 343C 0007                  		move.w	#7,d2
00016C4A 3602                       		move.w	d2,d3
00016C4C 5243                       		addq.w	#1,d3
00016C4E 381F                       		move.w	(sp)+,d4
00016C50 6000 94E0                  		bra.w	SolidObject
00016C54                            ; ===========================================================================
00016C54                            
00016C54                            loc_16404:
00016C54 0828 0003 0022             		btst	#3,$22(a0)
00016C5A 6700                       		beq.s	loc_16420
00016C5C 43F8 D000                  		lea	($FFFFD000).w,a1
00016C60 08A9 0003 0022             		bclr	#3,$22(a1)
00016C66 08A8 0003 0022             		bclr	#3,$22(a0)
00016C6C 4228 0025                  		clr.b	$25(a0)
00016C70                            
00016C70                            loc_16420:
00016C70 6000 0002                  		bra.w	*+4
00016C74                            
00016C74                            loc_16424:
00016C74 3028 0008                  		move.w	8(a0),d0
00016C78 B068 0034                  		cmp.w	$34(a0),d0
00016C7C 6600                       		bne.s	loc_16484
00016C7E 3028 000C                  		move.w	$C(a0),d0
00016C82 B068 0036                  		cmp.w	$36(a0),d0
00016C86 6600                       		bne.s	loc_16484
00016C88 7200                       		moveq	#0,d1
00016C8A 1228 0038                  		move.b	$38(a0),d1
00016C8E D228 003A                  		add.b	$3A(a0),d1
00016C92 B228 0039                  		cmp.b	$39(a0),d1
00016C96 6500                       		bcs.s	loc_16456
00016C98 1001                       		move.b	d1,d0
00016C9A 7200                       		moveq	#0,d1
00016C9C 4A00                       		tst.b	d0
00016C9E 6A00                       		bpl.s	loc_16456
00016CA0 1228 0039                  		move.b	$39(a0),d1
00016CA4 5901                       		subq.b	#4,d1
00016CA6                            
00016CA6                            loc_16456:
00016CA6 1141 0038                  		move.b	d1,$38(a0)
00016CAA 2268 003C                  		movea.l	$3C(a0),a1
00016CAE 3171 1000 0034             		move.w	(a1,d1.w),$34(a0)
00016CB4 3171 1002 0036             		move.w	2(a1,d1.w),$36(a0)
00016CBA 4A41                       		tst.w	d1
00016CBC 6600                       		bne.s	loc_16474
00016CBE 117C 0001 001C             		move.b	#1,$1C(a0)
00016CC4                            
00016CC4                            loc_16474:
00016CC4 0C41 0008                  		cmpi.w	#8,d1
00016CC8 6600                       		bne.s	loc_16480
00016CCA 117C 0000 001C             		move.b	#0,$1C(a0)
00016CD0                            
00016CD0                            loc_16480:
00016CD0 6100 BFD0                  		bsr.w	Obj63_ChangeDir
00016CD4                            
00016CD4                            loc_16484:
00016CD4 4EF9 0000 DD3C             		jmp	SpeedToPos
00016CDA                            ; ===========================================================================
00016CDA                            Ani_obj6F:
00016CDA                            	include "_anim\obj6F.asm"
00016CDA                            ; ---------------------------------------------------------------------------
00016CDA                            ; Animation script - platform on conveyor belt (SBZ)
00016CDA                            ; ---------------------------------------------------------------------------
00016CDA 0000                       		dc.w byte_1648E-Ani_obj6F
00016CDC 0000                       		dc.w byte_164A2-Ani_obj6F
00016CDE 0000 0102 0304 4342 4140+  byte_1648E:	dc.b 0,	0, 1, 2, 3, 4, $43, $42, $41, $40, $61,	$62, $63
00016CEB 6423 2221 00FF 00          		dc.b $64, $23, $22, $21, 0, $FF, 0
00016CF2 0F00 FF                    byte_164A2:	dc.b $F, 0, $FF
00016CF6 00                         		even
00016CF6 00                         		even
00016CF6                            
00016CF6 0000 0000 0000             off_164A6:	dc.w word_164B2-off_164A6, word_164C6-off_164A6, word_164DA-off_164A6
00016CFC 0000 0000 0000             		dc.w word_164EE-off_164A6, word_16502-off_164A6, word_16516-off_164A6
00016D02 0010 0E80 0E14 0370 0EEF+  word_164B2:	dc.w $10, $E80,	$E14, $370, $EEF, $302,	$EEF, $340, $E14, $3AE
00016D16 0010 0F80 0F14 02E0 0FEF+  word_164C6:	dc.w $10, $F80,	$F14, $2E0, $FEF, $272,	$FEF, $2B0, $F14, $31E
00016D2A 0010 1080 1014 0270 10EF+  word_164DA:	dc.w $10, $1080, $1014,	$270, $10EF, $202, $10EF, $240,	$1014, $2AE
00016D3E 0010 0F80 0F14 0570 0FEF+  word_164EE:	dc.w $10, $F80,	$F14, $570, $FEF, $502,	$FEF, $540, $F14, $5AE
00016D52 0010 1B80 1B14 0670 1BEF+  word_16502:	dc.w $10, $1B80, $1B14,	$670, $1BEF, $602, $1BEF, $640,	$1B14, $6AE
00016D66 0010 1C80 1C14 05E0 1CEF+  word_16516:	dc.w $10, $1C80, $1C14,	$5E0, $1CEF, $572, $1CEF, $5B0,	$1C14, $61E
00016D7A                            ; ===========================================================================
00016D7A                            ; ---------------------------------------------------------------------------
00016D7A                            ; Object 70 - large girder block (SBZ)
00016D7A                            ; ---------------------------------------------------------------------------
00016D7A                            
00016D7A                            Obj70:					; XREF: Obj_Index
00016D7A 7000                       		moveq	#0,d0
00016D7C 1028 0024                  		move.b	$24(a0),d0
00016D80 323B 0000                  		move.w	Obj70_Index(pc,d0.w),d1
00016D84 4EFB 1000                  		jmp	Obj70_Index(pc,d1.w)
00016D88                            ; ===========================================================================
00016D88 0000                       Obj70_Index:	dc.w Obj70_Main-Obj70_Index
00016D8A 0000                       		dc.w Obj70_Action-Obj70_Index
00016D8C                            ; ===========================================================================
00016D8C                            
00016D8C                            Obj70_Main:				; XREF: Obj70_Index
00016D8C 5428 0024                  		addq.b	#2,$24(a0)
00016D90 217C 0000 0000 0004        		move.l	#Map_obj70,4(a0)
00016D98 317C 42F0 0002             		move.w	#$42F0,2(a0)
00016D9E 0028 0004 0001             		ori.b	#4,1(a0)
00016DA4 117C 0004 0018             		move.b	#4,$18(a0)
00016DAA 117C 0060 0019             		move.b	#$60,$19(a0)
00016DB0 117C 0018 0016             		move.b	#$18,$16(a0)
00016DB6 3168 0008 0032             		move.w	8(a0),$32(a0)
00016DBC 3168 000C 0030             		move.w	$C(a0),$30(a0)
00016DC2 6100 0000                  		bsr.w	Obj70_Move2
00016DC6                            
00016DC6                            Obj70_Action:				; XREF: Obj70_Index
00016DC6 3F28 0008                  		move.w	8(a0),-(sp)
00016DCA 4A68 003A                  		tst.w	$3A(a0)
00016DCE 6700                       		beq.s	Obj70_Move
00016DD0 5368 003A                  		subq.w	#1,$3A(a0)
00016DD4 6600                       		bne.s	Obj70_Solid
00016DD6                            
00016DD6                            Obj70_Move:
00016DD6 4EB9 0000 DD3C             		jsr	SpeedToPos
00016DDC 5368 0034                  		subq.w	#1,$34(a0)	; subtract 1 from movement duration
00016DE0 6600                       		bne.s	Obj70_Solid	; if time remains, branch
00016DE2 6100 0000                  		bsr.w	Obj70_Move2	; if time is zero, branch
00016DE6                            
00016DE6                            Obj70_Solid:
00016DE6 381F                       		move.w	(sp)+,d4
00016DE8 4A28 0001                  		tst.b	1(a0)
00016DEC 6A00                       		bpl.s	Obj70_ChkDel
00016DEE 7200                       		moveq	#0,d1
00016DF0 1228 0019                  		move.b	$19(a0),d1
00016DF4 0641 000B                  		addi.w	#$B,d1
00016DF8 7400                       		moveq	#0,d2
00016DFA 1428 0016                  		move.b	$16(a0),d2
00016DFE 3602                       		move.w	d2,d3
00016E00 5243                       		addq.w	#1,d3
00016E02 6100 932E                  		bsr.w	SolidObject
00016E06                            
00016E06                            Obj70_ChkDel:
00016E06 3028 0032                  		move.w	$32(a0),d0
00016E0A 0240 FF80                  		andi.w	#$FF80,d0
00016E0E 3238 F700                  		move.w	($FFFFF700).w,d1
00016E12 0441 0080                  		subi.w	#$80,d1
00016E16 0241 FF80                  		andi.w	#$FF80,d1
00016E1A 9041                       		sub.w	d1,d0
00016E1C 0C40 0280                  		cmpi.w	#$280,d0
00016E20 6200                       		bhi.s	Obj70_Delete
00016E22 4EF9 0000 DD62             		jmp	DisplaySprite
00016E28                            ; ===========================================================================
00016E28                            
00016E28                            Obj70_Delete:
00016E28 4EF9 0000 DD9E             		jmp	DeleteObject
00016E2E                            ; ===========================================================================
00016E2E                            
00016E2E                            Obj70_Move2:				; XREF: Obj70_Main
00016E2E 1028 0038                  		move.b	$38(a0),d0
00016E32 0240 0018                  		andi.w	#$18,d0
00016E36 43F9 0000 0000             		lea	(Obj70_MoveData).l,a1
00016E3C 43F1 0000                  		lea	(a1,d0.w),a1
00016E40 3159 0010                  		move.w	(a1)+,$10(a0)
00016E44 3159 0012                  		move.w	(a1)+,$12(a0)
00016E48 3159 0034                  		move.w	(a1)+,$34(a0)
00016E4C 5028 0038                  		addq.b	#8,$38(a0)	; use next movedata set
00016E50 317C 0007 003A             		move.w	#7,$3A(a0)
00016E56 4E75                       		rts	
00016E58                            ; ===========================================================================
00016E58 0100 0000 0060 0000        Obj70_MoveData:	dc.w   $100,	 0,   $60,     0 ; x-speed, y-speed, duration, blank
00016E60 0000 0100 0030 0000        		dc.w	  0,  $100,   $30,     0
00016E68 FF00 FFC0 0060 0000        		dc.w  $FF00, $FFC0,   $60,     0
00016E70 0000 FF00 0018 0000        		dc.w	  0, $FF00,   $18,     0
00016E78                            ; ---------------------------------------------------------------------------
00016E78                            ; Sprite mappings - large girder block (SBZ)
00016E78                            ; ---------------------------------------------------------------------------
00016E78                            Map_obj70:
00016E78                            	include "_maps\obj70.asm"
00016E78                            ; ---------------------------------------------------------------------------
00016E78                            ; Sprite mappings - large girder block (SBZ)
00016E78                            ; ---------------------------------------------------------------------------
00016E78 0000                       		dc.w byte_1662A-Map_obj70
00016E7A 0C                         byte_1662A:	dc.b $C
00016E7B E80E 0000 A0               		dc.b $E8, $E, 0, 0, $A0
00016E80 000E 1000 A0               		dc.b 0,	$E, $10, 0, $A0
00016E85 E80E 0006 C0               		dc.b $E8, $E, 0, 6, $C0
00016E8A 000E 1006 C0               		dc.b 0,	$E, $10, 6, $C0
00016E8F E80E 0006 E0               		dc.b $E8, $E, 0, 6, $E0
00016E94 000E 1006 E0               		dc.b 0,	$E, $10, 6, $E0
00016E99 E80E 0006 00               		dc.b $E8, $E, 0, 6, 0
00016E9E 000E 1006 00               		dc.b 0,	$E, $10, 6, 0
00016EA3 E80E 0006 20               		dc.b $E8, $E, 0, 6, $20
00016EA8 000E 1006 20               		dc.b 0,	$E, $10, 6, $20
00016EAD E80E 0006 40               		dc.b $E8, $E, 0, 6, $40
00016EB2 000E 1006 40               		dc.b 0,	$E, $10, 6, $40
00016EB8 00                         		even
00016EB8 00                         		even
00016EB8                            
00016EB8                            ; ===========================================================================
00016EB8                            ; ---------------------------------------------------------------------------
00016EB8                            ; Object 72 - teleporter (SBZ)
00016EB8                            ; ---------------------------------------------------------------------------
00016EB8                            
00016EB8                            Obj72:					; XREF: Obj_Index
00016EB8 7000                       		moveq	#0,d0
00016EBA 1028 0024                  		move.b	$24(a0),d0
00016EBE 323B 0000                  		move.w	Obj72_Index(pc,d0.w),d1
00016EC2 4EBB 1000                  		jsr	Obj72_Index(pc,d1.w)
00016EC6 3028 0008                  		move.w	8(a0),d0
00016ECA 0240 FF80                  		andi.w	#$FF80,d0
00016ECE 3238 F700                  		move.w	($FFFFF700).w,d1
00016ED2 0441 0080                  		subi.w	#$80,d1
00016ED6 0241 FF80                  		andi.w	#$FF80,d1
00016EDA 9041                       		sub.w	d1,d0
00016EDC 0C40 0280                  		cmpi.w	#$280,d0
00016EE0 6200                       		bhi.s	Obj72_Delete
00016EE2 4E75                       		rts	
00016EE4                            ; ===========================================================================
00016EE4                            
00016EE4                            Obj72_Delete:
00016EE4 4EF9 0000 DD9E             		jmp	DeleteObject
00016EEA                            ; ===========================================================================
00016EEA 0000                       Obj72_Index:	dc.w Obj72_Main-Obj72_Index
00016EEC 0000                       		dc.w loc_166C8-Obj72_Index
00016EEE 0000                       		dc.w loc_1675E-Obj72_Index
00016EF0 0000                       		dc.w loc_16798-Obj72_Index
00016EF2                            ; ===========================================================================
00016EF2                            
00016EF2                            Obj72_Main:				; XREF: Obj72_Index
00016EF2 5428 0024                  		addq.b	#2,$24(a0)
00016EF6 1028 0028                  		move.b	$28(a0),d0
00016EFA D040                       		add.w	d0,d0
00016EFC 0240 001E                  		andi.w	#$1E,d0
00016F00 45FA 0000                  		lea	Obj72_Data(pc),a2
00016F04 D4F2 0000                  		adda.w	(a2,d0.w),a2
00016F08 315A 003A                  		move.w	(a2)+,$3A(a0)
00016F0C 214A 003C                  		move.l	a2,$3C(a0)
00016F10 315A 0036                  		move.w	(a2)+,$36(a0)
00016F14 315A 0038                  		move.w	(a2)+,$38(a0)
00016F18                            
00016F18                            loc_166C8:				; XREF: Obj72_Index
00016F18 43F8 D000                  		lea	($FFFFD000).w,a1
00016F1C 3029 0008                  		move.w	8(a1),d0
00016F20 9068 0008                  		sub.w	8(a0),d0
00016F24 0828 0000 0022             		btst	#0,$22(a0)
00016F2A 6700                       		beq.s	loc_166E0
00016F2C 0640 000F                  		addi.w	#$F,d0
00016F30                            
00016F30                            loc_166E0:
00016F30 0C40 0010                  		cmpi.w	#$10,d0
00016F34 6400                       		bcc.s	locret_1675C
00016F36 3229 000C                  		move.w	$C(a1),d1
00016F3A 9268 000C                  		sub.w	$C(a0),d1
00016F3E 0641 0020                  		addi.w	#$20,d1
00016F42 0C41 0040                  		cmpi.w	#$40,d1
00016F46 6400                       		bcc.s	locret_1675C
00016F48 4A38 F7C8                  		tst.b	($FFFFF7C8).w
00016F4C 6600                       		bne.s	locret_1675C
00016F4E 0C28 0007 0028             		cmpi.b	#7,$28(a0)
00016F54 6600                       		bne.s	loc_1670E
00016F56 0C78 0032 FE20             		cmpi.w	#50,($FFFFFE20).w
00016F5C 6500                       		bcs.s	locret_1675C
00016F5E                            
00016F5E                            loc_1670E:
00016F5E 5428 0024                  		addq.b	#2,$24(a0)
00016F62 11FC 0081 F7C8             		move.b	#$81,($FFFFF7C8).w ; lock controls
00016F68 137C 0002 001C             		move.b	#2,$1C(a1)	; use Sonic's rolling animation
00016F6E 337C 0800 0014             		move.w	#$800,$14(a1)
00016F74 337C 0000 0010             		move.w	#0,$10(a1)
00016F7A 337C 0000 0012             		move.w	#0,$12(a1)
00016F80 08A8 0005 0022             		bclr	#5,$22(a0)
00016F86 08A9 0005 0022             		bclr	#5,$22(a1)
00016F8C 08E9 0001 0022             		bset	#1,$22(a1)
00016F92 3368 0008 0008             		move.w	8(a0),8(a1)
00016F98 3368 000C 000C             		move.w	$C(a0),$C(a1)
00016F9E 4228 0032                  		clr.b	$32(a0)
00016FA2 303C 00BE                  		move.w	#$BE,d0
00016FA6 4EB9 0000 15C0             		jsr	(PlaySound_Special).l ;	play Sonic rolling sound
00016FAC                            
00016FAC                            locret_1675C:
00016FAC 4E75                       		rts	
00016FAE                            ; ===========================================================================
00016FAE                            
00016FAE                            loc_1675E:				; XREF: Obj72_Index
00016FAE 43F8 D000                  		lea	($FFFFD000).w,a1
00016FB2 1028 0032                  		move.b	$32(a0),d0
00016FB6 5428 0032                  		addq.b	#2,$32(a0)
00016FBA 4EB9 0000 2C64             		jsr	(CalcSine).l
00016FC0 EA40                       		asr.w	#5,d0
00016FC2 3428 000C                  		move.w	$C(a0),d2
00016FC6 9440                       		sub.w	d0,d2
00016FC8 3342 000C                  		move.w	d2,$C(a1)
00016FCC 0C28 0080 0032             		cmpi.b	#$80,$32(a0)
00016FD2 6600                       		bne.s	locret_16796
00016FD4 6100 0000                  		bsr.w	sub_1681C
00016FD8 5428 0024                  		addq.b	#2,$24(a0)
00016FDC 303C 00BC                  		move.w	#$BC,d0
00016FE0 4EB9 0000 15C0             		jsr	(PlaySound_Special).l ;	play teleport sound
00016FE6                            
00016FE6                            locret_16796:
00016FE6 4E75                       		rts	
00016FE8                            ; ===========================================================================
00016FE8                            
00016FE8                            loc_16798:				; XREF: Obj72_Index
00016FE8 588F                       		addq.l	#4,sp
00016FEA 43F8 D000                  		lea	($FFFFD000).w,a1
00016FEE 5328 002E                  		subq.b	#1,$2E(a0)
00016FF2 6A00                       		bpl.s	loc_167DA
00016FF4 3368 0036 0008             		move.w	$36(a0),8(a1)
00016FFA 3368 0038 000C             		move.w	$38(a0),$C(a1)
00017000 7200                       		moveq	#0,d1
00017002 1228 003A                  		move.b	$3A(a0),d1
00017006 5801                       		addq.b	#4,d1
00017008 B228 003B                  		cmp.b	$3B(a0),d1
0001700C 6500                       		bcs.s	loc_167C2
0001700E 7200                       		moveq	#0,d1
00017010 6000                       		bra.s	loc_16800
00017012                            ; ===========================================================================
00017012                            
00017012                            loc_167C2:
00017012 1141 003A                  		move.b	d1,$3A(a0)
00017016 2468 003C                  		movea.l	$3C(a0),a2
0001701A 3172 1000 0036             		move.w	(a2,d1.w),$36(a0)
00017020 3172 1002 0038             		move.w	2(a2,d1.w),$38(a0)
00017026 6000 0000                  		bra.w	sub_1681C
0001702A                            ; ===========================================================================
0001702A                            
0001702A                            loc_167DA:
0001702A 2429 0008                  		move.l	8(a1),d2
0001702E 2629 000C                  		move.l	$C(a1),d3
00017032 3029 0010                  		move.w	$10(a1),d0
00017036 48C0                       		ext.l	d0
00017038 E180                       		asl.l	#8,d0
0001703A D480                       		add.l	d0,d2
0001703C 3029 0012                  		move.w	$12(a1),d0
00017040 48C0                       		ext.l	d0
00017042 E180                       		asl.l	#8,d0
00017044 D680                       		add.l	d0,d3
00017046 2342 0008                  		move.l	d2,8(a1)
0001704A 2343 000C                  		move.l	d3,$C(a1)
0001704E 4E75                       		rts	
00017050                            ; ===========================================================================
00017050                            
00017050                            loc_16800:
00017050 0269 07FF 000C             		andi.w	#$7FF,$C(a1)
00017056 4228 0024                  		clr.b	$24(a0)
0001705A 4238 F7C8                  		clr.b	($FFFFF7C8).w
0001705E 337C 0000 0010             		move.w	#0,$10(a1)
00017064 337C 0200 0012             		move.w	#$200,$12(a1)
0001706A 4E75                       		rts	
0001706C                            
0001706C                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0001706C                            
0001706C                            
0001706C                            sub_1681C:
0001706C 7000                       		moveq	#0,d0
0001706E 343C 1000                  		move.w	#$1000,d2
00017072 3028 0036                  		move.w	$36(a0),d0
00017076 9069 0008                  		sub.w	8(a1),d0
0001707A 6C00                       		bge.s	loc_16830
0001707C 4440                       		neg.w	d0
0001707E 4442                       		neg.w	d2
00017080                            
00017080                            loc_16830:
00017080 7200                       		moveq	#0,d1
00017082 363C 1000                  		move.w	#$1000,d3
00017086 3228 0038                  		move.w	$38(a0),d1
0001708A 9269 000C                  		sub.w	$C(a1),d1
0001708E 6C00                       		bge.s	loc_16844
00017090 4441                       		neg.w	d1
00017092 4443                       		neg.w	d3
00017094                            
00017094                            loc_16844:
00017094 B240                       		cmp.w	d0,d1
00017096 6500                       		bcs.s	loc_1687A
00017098 7200                       		moveq	#0,d1
0001709A 3228 0038                  		move.w	$38(a0),d1
0001709E 9269 000C                  		sub.w	$C(a1),d1
000170A2 4841                       		swap	d1
000170A4 83C3                       		divs.w	d3,d1
000170A6 7000                       		moveq	#0,d0
000170A8 3028 0036                  		move.w	$36(a0),d0
000170AC 9069 0008                  		sub.w	8(a1),d0
000170B0 6700                       		beq.s	loc_16866
000170B2 4840                       		swap	d0
000170B4 81C1                       		divs.w	d1,d0
000170B6                            
000170B6                            loc_16866:
000170B6 3340 0010                  		move.w	d0,$10(a1)
000170BA 3343 0012                  		move.w	d3,$12(a1)
000170BE 4A41                       		tst.w	d1
000170C0 6A00                       		bpl.s	loc_16874
000170C2 4441                       		neg.w	d1
000170C4                            
000170C4                            loc_16874:
000170C4 3141 002E                  		move.w	d1,$2E(a0)
000170C8 4E75                       		rts	
000170CA                            ; ===========================================================================
000170CA                            
000170CA                            loc_1687A:
000170CA 7000                       		moveq	#0,d0
000170CC 3028 0036                  		move.w	$36(a0),d0
000170D0 9069 0008                  		sub.w	8(a1),d0
000170D4 4840                       		swap	d0
000170D6 81C2                       		divs.w	d2,d0
000170D8 7200                       		moveq	#0,d1
000170DA 3228 0038                  		move.w	$38(a0),d1
000170DE 9269 000C                  		sub.w	$C(a1),d1
000170E2 6700                       		beq.s	loc_16898
000170E4 4841                       		swap	d1
000170E6 83C0                       		divs.w	d0,d1
000170E8                            
000170E8                            loc_16898:
000170E8 3341 0012                  		move.w	d1,$12(a1)
000170EC 3342 0010                  		move.w	d2,$10(a1)
000170F0 4A40                       		tst.w	d0
000170F2 6A00                       		bpl.s	loc_168A6
000170F4 4440                       		neg.w	d0
000170F6                            
000170F6                            loc_168A6:
000170F6 3140 002E                  		move.w	d0,$2E(a0)
000170FA 4E75                       		rts	
000170FC                            ; End of function sub_1681C
000170FC                            
000170FC                            ; ===========================================================================
000170FC 0000 0000 0000             Obj72_Data:	dc.w word_168BC-Obj72_Data, word_168C2-Obj72_Data, word_168C8-Obj72_Data
00017102 0000 0000 0000             		dc.w word_168E6-Obj72_Data, word_168EC-Obj72_Data, word_1690A-Obj72_Data
00017108 0000 0000                  		dc.w word_16910-Obj72_Data, word_1692E-Obj72_Data
0001710C 0004 0794 098C             word_168BC:	dc.w 4,	$794, $98C
00017112 0004 0094 038C             word_168C2:	dc.w 4,	$94, $38C
00017118 001C 0794 02E8             word_168C8:	dc.w $1C, $794,	$2E8
0001711E 07A4 02C0 07D0             		dc.w $7A4, $2C0, $7D0
00017124 02AC 0858 02AC             		dc.w $2AC, $858, $2AC
0001712A 0884 0298 0894             		dc.w $884, $298, $894
00017130 0270 0894 0190             		dc.w $270, $894, $190
00017136 0004 0894 0690             word_168E6:	dc.w 4,	$894, $690
0001713C 001C 1194 0470             word_168EC:	dc.w $1C, $1194, $470
00017142 1184 0498 1158             		dc.w $1184, $498, $1158
00017148 04AC 0FD0 04AC             		dc.w $4AC, $FD0, $4AC
0001714E 0FA4 04C0 0F94             		dc.w $FA4, $4C0, $F94
00017154 04E8 0F94 0590             		dc.w $4E8, $F94, $590
0001715A 0004 1294 0490             word_1690A:	dc.w 4,	$1294, $490
00017160 001C 1594 FFE8             word_16910:	dc.w $1C, $1594, $FFE8
00017166 1584 FFC0 1560             		dc.w $1584, $FFC0, $1560
0001716C FFAC 14D0 FFAC             		dc.w $FFAC, $14D0, $FFAC
00017172 14A4 FF98 1494             		dc.w $14A4, $FF98, $1494
00017178 FF70 1494 FD90             		dc.w $FF70, $1494, $FD90
0001717E 0004 0894 0090             word_1692E:	dc.w 4,	$894, $90
00017184                            ; ===========================================================================
00017184                            ; ---------------------------------------------------------------------------
00017184                            ; Object 78 - Caterkiller enemy	(MZ, SBZ)
00017184                            ; ---------------------------------------------------------------------------
00017184                            
00017184                            Obj78:					; XREF: Obj_Index
00017184 7000                       		moveq	#0,d0
00017186 1028 0024                  		move.b	$24(a0),d0
0001718A 323B 0000                  		move.w	Obj78_Index(pc,d0.w),d1
0001718E 4EFB 1000                  		jmp	Obj78_Index(pc,d1.w)
00017192                            ; ===========================================================================
00017192 0000                       Obj78_Index:	dc.w Obj78_Main-Obj78_Index
00017194 0000                       		dc.w Obj78_Action-Obj78_Index
00017196 0000                       		dc.w Obj78_BodySeg1-Obj78_Index
00017198 0000                       		dc.w Obj78_BodySeg2-Obj78_Index
0001719A 0000                       		dc.w Obj78_BodySeg1-Obj78_Index
0001719C 0000                       		dc.w Obj78_Delete-Obj78_Index
0001719E 0000                       		dc.w loc_16CC0-Obj78_Index
000171A0                            ; ===========================================================================
000171A0                            
000171A0                            locret_16950:
000171A0 4E75                       		rts	
000171A2                            ; ===========================================================================
000171A2                            
000171A2                            Obj78_Main:				; XREF: Obj78_Index
000171A2 117C 0007 0016             		move.b	#7,$16(a0)
000171A8 117C 0008 0017             		move.b	#8,$17(a0)
000171AE 4EB9 0000 DD10             		jsr	ObjectFall
000171B4 4EBA E4A6                  		jsr	ObjHitFloor
000171B8 4A41                       		tst.w	d1
000171BA 6AE4                       		bpl.s	locret_16950
000171BC D368 000C                  		add.w	d1,$C(a0)
000171C0 4268 0012                  		clr.w	$12(a0)
000171C4 5428 0024                  		addq.b	#2,$24(a0)
000171C8 217C 0000 0000 0004        		move.l	#Map_obj78,4(a0)
000171D0 317C 22B0 0002             		move.w	#$22B0,2(a0)
000171D6 0C38 0005 FE10             		cmpi.b	#5,($FFFFFE10).w ; if level is SBZ, branch
000171DC 6700                       		beq.s	loc_16996
000171DE 317C 24FF 0002             		move.w	#$24FF,2(a0)	; MZ specific code
000171E4                            
000171E4                            loc_16996:
000171E4 0228 0003 0001             		andi.b	#3,1(a0)
000171EA 0028 0004 0001             		ori.b	#4,1(a0)
000171F0 1168 0001 0022             		move.b	1(a0),$22(a0)
000171F6 117C 0004 0018             		move.b	#4,$18(a0)
000171FC 117C 0008 0019             		move.b	#8,$19(a0)
00017202 117C 000B 0020             		move.b	#$B,$20(a0)
00017208 3428 0008                  		move.w	8(a0),d2
0001720C 7A0C                       		moveq	#$C,d5
0001720E 0828 0000 0022             		btst	#0,$22(a0)
00017214 6700                       		beq.s	loc_169CA
00017216 4445                       		neg.w	d5
00017218                            
00017218                            loc_169CA:
00017218 1C3C 0004                  		move.b	#4,d6
0001721C 7600                       		moveq	#0,d3
0001721E 7804                       		moveq	#4,d4
00017220 2448                       		movea.l	a0,a2
00017222 7202                       		moveq	#2,d1
00017224                            
00017224                            Obj78_LoadBody:
00017224 4EB9 0000 E1FE             		jsr	SingleObjLoad2
0001722A 6600                       		bne.s	Obj78_QuitLoad
0001722C 12BC 0078                  		move.b	#$78,0(a1)	; load body segment object
00017230 1346 0024                  		move.b	d6,$24(a1)
00017234 5406                       		addq.b	#2,d6
00017236 2368 0004 0004             		move.l	4(a0),4(a1)
0001723C 3368 0002 0002             		move.w	2(a0),2(a1)
00017242 137C 0005 0018             		move.b	#5,$18(a1)
00017248 137C 0008 0019             		move.b	#8,$19(a1)
0001724E 137C 00CB 0020             		move.b	#$CB,$20(a1)
00017254 D445                       		add.w	d5,d2
00017256 3342 0008                  		move.w	d2,8(a1)
0001725A 3368 000C 000C             		move.w	$C(a0),$C(a1)
00017260 1368 0022 0022             		move.b	$22(a0),$22(a1)
00017266 1368 0022 0001             		move.b	$22(a0),1(a1)
0001726C 137C 0008 001A             		move.b	#8,$1A(a1)
00017272 234A 003C                  		move.l	a2,$3C(a1)
00017276 1344 003C                  		move.b	d4,$3C(a1)
0001727A 5804                       		addq.b	#4,d4
0001727C 2449                       		movea.l	a1,a2
0001727E                            
0001727E                            Obj78_QuitLoad:
0001727E 51C9 FFA4                  		dbf	d1,Obj78_LoadBody ; repeat sequence 2 more times
00017282                            
00017282 117C 0007 002A             		move.b	#7,$2A(a0)
00017288 4228 003C                  		clr.b	$3C(a0)
0001728C                            
0001728C                            Obj78_Action:				; XREF: Obj78_Index
0001728C 4A28 0022                  		tst.b	$22(a0)
00017290 6B00 0000                  		bmi.w	loc_16C96
00017294 7000                       		moveq	#0,d0
00017296 1028 0025                  		move.b	$25(a0),d0
0001729A 323B 0000                  		move.w	Obj78_Index2(pc,d0.w),d1
0001729E 4EBB 1000                  		jsr	Obj78_Index2(pc,d1.w)
000172A2 1228 002B                  		move.b	$2B(a0),d1
000172A6 6A00                       		bpl.s	Obj78_Display
000172A8 43F9 0000 0000             		lea	(Ani_obj78).l,a1
000172AE 1028 0026                  		move.b	$26(a0),d0
000172B2 0240 007F                  		andi.w	#$7F,d0
000172B6 5828 0026                  		addq.b	#4,$26(a0)
000172BA 1031 0000                  		move.b	(a1,d0.w),d0
000172BE 6A00                       		bpl.s	Obj78_AniHead
000172C0 08A8 0007 002B             		bclr	#7,$2B(a0)
000172C6 6000                       		bra.s	Obj78_Display
000172C8                            ; ===========================================================================
000172C8                            
000172C8                            Obj78_AniHead:
000172C8 0201 0010                  		andi.b	#$10,d1
000172CC D001                       		add.b	d1,d0
000172CE 1140 001A                  		move.b	d0,$1A(a0)
000172D2                            
000172D2                            Obj78_Display:
000172D2 3028 0008                  		move.w	8(a0),d0
000172D6 0240 FF80                  		andi.w	#$FF80,d0
000172DA 3238 F700                  		move.w	($FFFFF700).w,d1
000172DE 0441 0080                  		subi.w	#$80,d1
000172E2 0241 FF80                  		andi.w	#$FF80,d1
000172E6 9041                       		sub.w	d1,d0
000172E8 0C40 0280                  		cmpi.w	#$280,d0
000172EC 6200 0000                  		bhi.w	Obj78_ChkGone
000172F0 4EF9 0000 DD62             		jmp	DisplaySprite
000172F6                            ; ===========================================================================
000172F6                            
000172F6                            Obj78_ChkGone:
000172F6 45F8 FC00                  		lea	($FFFFFC00).w,a2
000172FA 7000                       		moveq	#0,d0
000172FC 1028 0023                  		move.b	$23(a0),d0
00017300 6700                       		beq.s	loc_16ABC
00017302 08B2 0007 0002             		bclr	#7,2(a2,d0.w)
00017308                            
00017308                            loc_16ABC:
00017308 117C 000A 0024             		move.b	#$A,$24(a0)	; run "Obj78_Delete" routine
0001730E 4E75                       		rts	
00017310                            ; ===========================================================================
00017310                            
00017310                            Obj78_Delete:				; XREF: Obj78_Index
00017310 4EF9 0000 DD9E             		jmp	DeleteObject
00017316                            ; ===========================================================================
00017316 0000                       Obj78_Index2:	dc.w Obj78_Move-Obj78_Index2
00017318 0000                       		dc.w loc_16B02-Obj78_Index2
0001731A                            ; ===========================================================================
0001731A                            
0001731A                            Obj78_Move:				; XREF: Obj78_Index2
0001731A 5328 002A                  		subq.b	#1,$2A(a0)
0001731E 6B00                       		bmi.s	Obj78_Move2
00017320 4E75                       		rts	
00017322                            ; ===========================================================================
00017322                            
00017322                            Obj78_Move2:
00017322 5428 0025                  		addq.b	#2,$25(a0)
00017326 117C 0010 002A             		move.b	#$10,$2A(a0)
0001732C 317C FF40 0010             		move.w	#-$C0,$10(a0)
00017332 317C 0040 0014             		move.w	#$40,$14(a0)
00017338 0868 0004 002B             		bchg	#4,$2B(a0)
0001733E 6600                       		bne.s	loc_16AFC
00017340 4268 0010                  		clr.w	$10(a0)
00017344 4468 0014                  		neg.w	$14(a0)
00017348                            
00017348                            loc_16AFC:
00017348 08E8 0007 002B             		bset	#7,$2B(a0)
0001734E                            
0001734E                            loc_16B02:				; XREF: Obj78_Index2
0001734E 5328 002A                  		subq.b	#1,$2A(a0)
00017352 6B00                       		bmi.s	loc_16B5E
00017354 2F28 0008                  		move.l	8(a0),-(sp)
00017358 2428 0008                  		move.l	8(a0),d2
0001735C 3028 0010                  		move.w	$10(a0),d0
00017360 0828 0000 0022             		btst	#0,$22(a0)
00017366 6700                       		beq.s	loc_16B1E
00017368 4440                       		neg.w	d0
0001736A                            
0001736A                            loc_16B1E:
0001736A 48C0                       		ext.l	d0
0001736C E180                       		asl.l	#8,d0
0001736E D480                       		add.l	d0,d2
00017370 2142 0008                  		move.l	d2,8(a0)
00017374 4EBA E2E6                  		jsr	ObjHitFloor
00017378 241F                       		move.l	(sp)+,d2
0001737A 0C41 FFF8                  		cmpi.w	#-8,d1
0001737E 6D00                       		blt.s	loc_16B70
00017380 0C41 000C                  		cmpi.w	#$C,d1
00017384 6C00                       		bge.s	loc_16B70
00017386 D368 000C                  		add.w	d1,$C(a0)
0001738A 4842                       		swap	d2
0001738C B468 0008                  		cmp.w	8(a0),d2
00017390 6700                       		beq.s	locret_16B5C
00017392 7000                       		moveq	#0,d0
00017394 1028 003C                  		move.b	$3C(a0),d0
00017398 5228 003C                  		addq.b	#1,$3C(a0)
0001739C 0228 000F 003C             		andi.b	#$F,$3C(a0)
000173A2 1181 002C                  		move.b	d1,$2C(a0,d0.w)
000173A6                            
000173A6                            locret_16B5C:
000173A6 4E75                       		rts	
000173A8                            ; ===========================================================================
000173A8                            
000173A8                            loc_16B5E:
000173A8 5528 0025                  		subq.b	#2,$25(a0)
000173AC 117C 0007 002A             		move.b	#7,$2A(a0)
000173B2 317C 0000 0010             		move.w	#0,$10(a0)
000173B8 4E75                       		rts	
000173BA                            ; ===========================================================================
000173BA                            
000173BA                            loc_16B70:
000173BA 2142 0008                  		move.l	d2,8(a0)
000173BE 0868 0000 0022             		bchg	#0,$22(a0)
000173C4 1168 0022 0001             		move.b	$22(a0),1(a0)
000173CA 7000                       		moveq	#0,d0
000173CC 1028 003C                  		move.b	$3C(a0),d0
000173D0 11BC 0080 002C             		move.b	#$80,$2C(a0,d0.w)
000173D6 5228 003C                  		addq.b	#1,$3C(a0)
000173DA 0228 000F 003C             		andi.b	#$F,$3C(a0)
000173E0 4E75                       		rts	
000173E2                            ; ===========================================================================
000173E2                            
000173E2                            Obj78_BodySeg2:				; XREF: Obj78_Index
000173E2 2268 003C                  		movea.l	$3C(a0),a1
000173E6 1169 002B 002B             		move.b	$2B(a1),$2B(a0)
000173EC 6A00                       		bpl.s	Obj78_BodySeg1
000173EE 43F9 0000 0000             		lea	(Ani_obj78).l,a1
000173F4 1028 0026                  		move.b	$26(a0),d0
000173F8 0240 007F                  		andi.w	#$7F,d0
000173FC 5828 0026                  		addq.b	#4,$26(a0)
00017400 4A31 0004                  		tst.b	4(a1,d0.w)
00017404 6A00                       		bpl.s	Obj78_AniBody
00017406 5828 0026                  		addq.b	#4,$26(a0)
0001740A                            
0001740A                            Obj78_AniBody:
0001740A 1031 0000                  		move.b	(a1,d0.w),d0
0001740E 5000                       		addq.b	#8,d0
00017410 1140 001A                  		move.b	d0,$1A(a0)
00017414                            
00017414                            Obj78_BodySeg1:				; XREF: Obj78_Index
00017414 2268 003C                  		movea.l	$3C(a0),a1
00017418 4A28 0022                  		tst.b	$22(a0)
0001741C 6B00 0000                  		bmi.w	loc_16C90
00017420 1169 002B 002B             		move.b	$2B(a1),$2B(a0)
00017426 1169 0025 0025             		move.b	$25(a1),$25(a0)
0001742C 6700 0000                  		beq.w	loc_16C64
00017430 3169 0014 0014             		move.w	$14(a1),$14(a0)
00017436 3029 0010                  		move.w	$10(a1),d0
0001743A D069 0014                  		add.w	$14(a1),d0
0001743E 3140 0010                  		move.w	d0,$10(a0)
00017442 2428 0008                  		move.l	8(a0),d2
00017446 2602                       		move.l	d2,d3
00017448 3028 0010                  		move.w	$10(a0),d0
0001744C 0828 0000 0022             		btst	#0,$22(a0)
00017452 6700                       		beq.s	loc_16C0C
00017454 4440                       		neg.w	d0
00017456                            
00017456                            loc_16C0C:
00017456 48C0                       		ext.l	d0
00017458 E180                       		asl.l	#8,d0
0001745A D480                       		add.l	d0,d2
0001745C 2142 0008                  		move.l	d2,8(a0)
00017460 4843                       		swap	d3
00017462 B668 0008                  		cmp.w	8(a0),d3
00017466 6700                       		beq.s	loc_16C64
00017468 7000                       		moveq	#0,d0
0001746A 1028 003C                  		move.b	$3C(a0),d0
0001746E 1231 002C                  		move.b	$2C(a1,d0.w),d1
00017472 0C01 0080                  		cmpi.b	#-$80,d1
00017476 6600                       		bne.s	loc_16C50
00017478 4843                       		swap	d3
0001747A 2143 0008                  		move.l	d3,8(a0)
0001747E 1181 002C                  		move.b	d1,$2C(a0,d0.w)
00017482 0868 0000 0022             		bchg	#0,$22(a0)
00017488 1168 0022 0001             		move.b	$22(a0),1(a0)
0001748E 5228 003C                  		addq.b	#1,$3C(a0)
00017492 0228 000F 003C             		andi.b	#$F,$3C(a0)
00017498 6000                       		bra.s	loc_16C64
0001749A                            ; ===========================================================================
0001749A                            
0001749A                            loc_16C50:
0001749A 4881                       		ext.w	d1
0001749C D368 000C                  		add.w	d1,$C(a0)
000174A0 5228 003C                  		addq.b	#1,$3C(a0)
000174A4 0228 000F 003C             		andi.b	#$F,$3C(a0)
000174AA 1181 002C                  		move.b	d1,$2C(a0,d0.w)
000174AE                            
000174AE                            loc_16C64:
000174AE 0C29 000C 0024             		cmpi.b	#$C,$24(a1)
000174B4 6700                       		beq.s	loc_16C90
000174B6 0C11 0027                  		cmpi.b	#$27,0(a1)
000174BA 6700                       		beq.s	loc_16C7C
000174BC 0C29 000A 0024             		cmpi.b	#$A,$24(a1)
000174C2 6600                       		bne.s	loc_16C82
000174C4                            
000174C4                            loc_16C7C:
000174C4 117C 000A 0024             		move.b	#$A,$24(a0)
000174CA                            
000174CA                            loc_16C82:
000174CA 4EF9 0000 DD62             		jmp	DisplaySprite
000174D0                            
000174D0                            ; ===========================================================================
000174D0 FE00 FE80 0180 0200        Obj78_FragSpeed:dc.w $FE00, $FE80, $180, $200
000174D8                            ; ===========================================================================
000174D8                            
000174D8                            loc_16C90:
000174D8 08E9 0007 0022             		bset	#7,$22(a1)
000174DE                            
000174DE                            loc_16C96:
000174DE 7000                       		moveq	#0,d0
000174E0 1028 0024                  		move.b	$24(a0),d0
000174E4 303B 00E8                  		move.w	Obj78_FragSpeed-2(pc,d0.w),d0
000174E8 0828 0000 0022             		btst	#0,$22(a0)
000174EE 6700                       		beq.s	loc_16CAA
000174F0 4440                       		neg.w	d0
000174F2                            
000174F2                            loc_16CAA:
000174F2 3140 0010                  		move.w	d0,$10(a0)
000174F6 317C FC00 0012             		move.w	#-$400,$12(a0)
000174FC 117C 000C 0024             		move.b	#$C,$24(a0)
00017502 0228 00F8 001A             		andi.b	#-8,$1A(a0)
00017508                            
00017508                            loc_16CC0:				; XREF: Obj78_Index
00017508 4EB9 0000 DD10             		jsr	ObjectFall
0001750E 4A68 0012                  		tst.w	$12(a0)
00017512 6B00                       		bmi.s	loc_16CE0
00017514 4EBA E146                  		jsr	ObjHitFloor
00017518 4A41                       		tst.w	d1
0001751A 6A00                       		bpl.s	loc_16CE0
0001751C D368 000C                  		add.w	d1,$C(a0)
00017520 317C FC00 0012             		move.w	#-$400,$12(a0)
00017526                            
00017526                            loc_16CE0:
00017526 4A28 0001                  		tst.b	1(a0)
0001752A 6A00 FDCA                  		bpl.w	Obj78_ChkGone
0001752E 4EF9 0000 DD62             		jmp	DisplaySprite
00017534                            ; ===========================================================================
00017534                            Ani_obj78:
00017534                            	include "_anim\obj78.asm"
00017534                            ; ---------------------------------------------------------------------------
00017534                            ; Animation script - Caterkiller enemy (uses non-standard format)
00017534                            ; ---------------------------------------------------------------------------
00017534 0000 0000 0000 0000 0000+  	dc.b 0,	0, 0, 0, 0, 0, 0, 0, 0,	0, 0, 0, 0, 0, 0, 1
00017544 0101 0101 0101 0202 0202+  	dc.b 1,	1, 1, 1, 1, 1, 2, 2, 2,	2, 2, 3, 3, 3, 3, 3
00017554 0404 0404 0404 0505 0505+  	dc.b 4,	4, 4, 4, 4, 4, 5, 5, 5,	5, 5, 6, 6, 6, 6, 6
00017564 0606 0707 0707 0707 0707+  	dc.b 6,	6, 7, 7, 7, 7, 7, 7, 7,	7, 7, 7, $FF, 7, 7, $FF
00017574 0707 0707 0707 0707 0707+  	dc.b 7,	7, 7, 7, 7, 7, 7, 7, 7,	7, 7, 7, 7, 7, 7, 6
00017584 0606 0606 0606 0505 0505+  	dc.b 6,	6, 6, 6, 6, 6, 5, 5, 5,	5, 5, 4, 4, 4, 4, 4
00017594 0403 0303 0303 0202 0202+  	dc.b 4,	3, 3, 3, 3, 3, 2, 2, 2,	2, 2, 1, 1, 1, 1, 1
000175A4 0101 0000 0000 0000 0000+  	dc.b 1,	1, 0, 0, 0, 0, 0, 0, 0,	0, 0, 0, $FF, 0, 0, $FF
000175B4                            	even
000175B4                            	even
000175B4                            
000175B4                            ; ---------------------------------------------------------------------------
000175B4                            ; Sprite mappings - Caterkiller	enemy (MZ, SBZ)
000175B4                            ; ---------------------------------------------------------------------------
000175B4                            Map_obj78:
000175B4                            	include "_maps\obj78.asm"
000175B4                            ; ---------------------------------------------------------------------------
000175B4                            ; Sprite mappings - Caterkiller	enemy (MZ, SBZ)
000175B4                            ; ---------------------------------------------------------------------------
000175B4 0000 0000                  		dc.w byte_16D9E-Map_obj78, byte_16DA4-Map_obj78
000175B8 0000 0000                  		dc.w byte_16DAA-Map_obj78, byte_16DB0-Map_obj78
000175BC 0000 0000                  		dc.w byte_16DB6-Map_obj78, byte_16DBC-Map_obj78
000175C0 0000 0000                  		dc.w byte_16DC2-Map_obj78, byte_16DC8-Map_obj78
000175C4 0000 0000                  		dc.w byte_16DCE-Map_obj78, byte_16DD4-Map_obj78
000175C8 0000 0000                  		dc.w byte_16DDA-Map_obj78, byte_16DE0-Map_obj78
000175CC 0000 0000                  		dc.w byte_16DE6-Map_obj78, byte_16DEC-Map_obj78
000175D0 0000 0000                  		dc.w byte_16DF2-Map_obj78, byte_16DF8-Map_obj78
000175D4 0000 0000                  		dc.w byte_16DFE-Map_obj78, byte_16E04-Map_obj78
000175D8 0000 0000                  		dc.w byte_16E0A-Map_obj78, byte_16E10-Map_obj78
000175DC 0000 0000                  		dc.w byte_16E16-Map_obj78, byte_16E1C-Map_obj78
000175E0 0000 0000                  		dc.w byte_16E22-Map_obj78, byte_16E28-Map_obj78
000175E4 01                         byte_16D9E:	dc.b 1
000175E5 F206 0000 F8               		dc.b $F2, 6, 0,	0, $F8
000175EA 01                         byte_16DA4:	dc.b 1
000175EB F106 0000 F8               		dc.b $F1, 6, 0,	0, $F8
000175F0 01                         byte_16DAA:	dc.b 1
000175F1 F006 0000 F8               		dc.b $F0, 6, 0,	0, $F8
000175F6 01                         byte_16DB0:	dc.b 1
000175F7 EF06 0000 F8               		dc.b $EF, 6, 0,	0, $F8
000175FC 01                         byte_16DB6:	dc.b 1
000175FD EE06 0000 F8               		dc.b $EE, 6, 0,	0, $F8
00017602 01                         byte_16DBC:	dc.b 1
00017603 ED06 0000 F8               		dc.b $ED, 6, 0,	0, $F8
00017608 01                         byte_16DC2:	dc.b 1
00017609 EC06 0000 F8               		dc.b $EC, 6, 0,	0, $F8
0001760E 01                         byte_16DC8:	dc.b 1
0001760F EB06 0000 F8               		dc.b $EB, 6, 0,	0, $F8
00017614 01                         byte_16DCE:	dc.b 1
00017615 F805 000C F8               		dc.b $F8, 5, 0,	$C, $F8
0001761A 01                         byte_16DD4:	dc.b 1
0001761B F705 000C F8               		dc.b $F7, 5, 0,	$C, $F8
00017620 01                         byte_16DDA:	dc.b 1
00017621 F605 000C F8               		dc.b $F6, 5, 0,	$C, $F8
00017626 01                         byte_16DE0:	dc.b 1
00017627 F505 000C F8               		dc.b $F5, 5, 0,	$C, $F8
0001762C 01                         byte_16DE6:	dc.b 1
0001762D F405 000C F8               		dc.b $F4, 5, 0,	$C, $F8
00017632 01                         byte_16DEC:	dc.b 1
00017633 F305 000C F8               		dc.b $F3, 5, 0,	$C, $F8
00017638 01                         byte_16DF2:	dc.b 1
00017639 F205 000C F8               		dc.b $F2, 5, 0,	$C, $F8
0001763E 01                         byte_16DF8:	dc.b 1
0001763F F105 000C F8               		dc.b $F1, 5, 0,	$C, $F8
00017644 01                         byte_16DFE:	dc.b 1
00017645 F206 0006 F8               		dc.b $F2, 6, 0,	6, $F8
0001764A 01                         byte_16E04:	dc.b 1
0001764B F106 0006 F8               		dc.b $F1, 6, 0,	6, $F8
00017650 01                         byte_16E0A:	dc.b 1
00017651 F006 0006 F8               		dc.b $F0, 6, 0,	6, $F8
00017656 01                         byte_16E10:	dc.b 1
00017657 EF06 0006 F8               		dc.b $EF, 6, 0,	6, $F8
0001765C 01                         byte_16E16:	dc.b 1
0001765D EE06 0006 F8               		dc.b $EE, 6, 0,	6, $F8
00017662 01                         byte_16E1C:	dc.b 1
00017663 ED06 0006 F8               		dc.b $ED, 6, 0,	6, $F8
00017668 01                         byte_16E22:	dc.b 1
00017669 EC06 0006 F8               		dc.b $EC, 6, 0,	6, $F8
0001766E 01                         byte_16E28:	dc.b 1
0001766F EB06 0006 F8               		dc.b $EB, 6, 0,	6, $F8
00017674                            		even
00017674                            		even
00017674                            
00017674                            ; ===========================================================================
00017674                            ; ---------------------------------------------------------------------------
00017674                            ; Object 79 - lamppost
00017674                            ; ---------------------------------------------------------------------------
00017674                            
00017674                            Obj79:					; XREF: Obj_Index
00017674 7000                       		moveq	#0,d0
00017676 1028 0024                  		move.b	$24(a0),d0
0001767A 323B 0000                  		move.w	Obj79_Index(pc,d0.w),d1
0001767E 4EBB 1000                  		jsr	Obj79_Index(pc,d1.w)
00017682 4EFA 8786                  		jmp	MarkObjGone
00017686                            ; ===========================================================================
00017686 0000                       Obj79_Index:	dc.w Obj79_Main-Obj79_Index
00017688 0000                       		dc.w Obj79_BlueLamp-Obj79_Index
0001768A 0000                       		dc.w Obj79_AfterHit-Obj79_Index
0001768C 0000                       		dc.w Obj79_Twirl-Obj79_Index
0001768E                            ; ===========================================================================
0001768E                            
0001768E                            Obj79_Main:				; XREF: Obj79_Index
0001768E 5428 0024                  		addq.b	#2,$24(a0)
00017692 217C 0000 0000 0004        		move.l	#Map_obj79,4(a0)
0001769A 317C 07A0 0002             		move.w	#$7A0,2(a0)
000176A0 117C 0004 0001             		move.b	#4,1(a0)
000176A6 117C 0008 0019             		move.b	#8,$19(a0)
000176AC 117C 0005 0018             		move.b	#5,$18(a0)
000176B2 45F8 FC00                  		lea	($FFFFFC00).w,a2
000176B6 7000                       		moveq	#0,d0
000176B8 1028 0023                  		move.b	$23(a0),d0
000176BC 08B2 0007 0002             		bclr	#7,2(a2,d0.w)
000176C2 0832 0000 0002             		btst	#0,2(a2,d0.w)
000176C8 6600                       		bne.s	Obj79_RedLamp
000176CA 1238 FE30                  		move.b	($FFFFFE30).w,d1
000176CE 0201 007F                  		andi.b	#$7F,d1
000176D2 1428 0028                  		move.b	$28(a0),d2	; get lamppost number
000176D6 0202 007F                  		andi.b	#$7F,d2
000176DA B202                       		cmp.b	d2,d1		; is lamppost number higher than the number hit?
000176DC 6500                       		bcs.s	Obj79_BlueLamp	; if yes, branch
000176DE                            
000176DE                            Obj79_RedLamp:
000176DE 08F2 0000 0002             		bset	#0,2(a2,d0.w)
000176E4 117C 0004 0024             		move.b	#4,$24(a0)	; run "Obj79_AfterHit" routine
000176EA 117C 0003 001A             		move.b	#3,$1A(a0)	; use red lamppost frame
000176F0 4E75                       		rts	
000176F2                            ; ===========================================================================
000176F2                            
000176F2                            Obj79_BlueLamp:				; XREF: Obj79_Index
000176F2 4A78 FE08                  		tst.w	($FFFFFE08).w	; is debug mode	being used?
000176F6 6600 0000                  		bne.w	locret_16F90	; if yes, branch
000176FA 4A38 F7C8                  		tst.b	($FFFFF7C8).w
000176FE 6B00 0000                  		bmi.w	locret_16F90
00017702 1238 FE30                  		move.b	($FFFFFE30).w,d1
00017706 0201 007F                  		andi.b	#$7F,d1
0001770A 1428 0028                  		move.b	$28(a0),d2
0001770E 0202 007F                  		andi.b	#$7F,d2
00017712 B202                       		cmp.b	d2,d1
00017714 6500                       		bcs.s	Obj79_HitLamp
00017716 45F8 FC00                  		lea	($FFFFFC00).w,a2
0001771A 7000                       		moveq	#0,d0
0001771C 1028 0023                  		move.b	$23(a0),d0
00017720 08F2 0000 0002             		bset	#0,2(a2,d0.w)
00017726 117C 0004 0024             		move.b	#4,$24(a0)
0001772C 117C 0003 001A             		move.b	#3,$1A(a0)
00017732 6000 0000                  		bra.w	locret_16F90
00017736                            ; ===========================================================================
00017736                            
00017736                            Obj79_HitLamp:
00017736 3038 D008                  		move.w	($FFFFD008).w,d0
0001773A 9068 0008                  		sub.w	8(a0),d0
0001773E 5040                       		addq.w	#8,d0
00017740 0C40 0010                  		cmpi.w	#$10,d0
00017744 6400 0000                  		bcc.w	locret_16F90
00017748 3038 D00C                  		move.w	($FFFFD00C).w,d0
0001774C 9068 000C                  		sub.w	$C(a0),d0
00017750 0640 0040                  		addi.w	#$40,d0
00017754 0C40 0068                  		cmpi.w	#$68,d0
00017758 6400                       		bcc.s	locret_16F90
0001775A 303C 00A1                  		move.w	#$A1,d0
0001775E 4EB9 0000 15C0             		jsr	(PlaySound_Special).l ;	play lamppost sound
00017764 5428 0024                  		addq.b	#2,$24(a0)
00017768 4EB9 0000 E1E8             		jsr	SingleObjLoad
0001776E 6600                       		bne.s	loc_16F76
00017770 12BC 0079                  		move.b	#$79,0(a1)	; load twirling	lamp object
00017774 137C 0006 0024             		move.b	#6,$24(a1)	; use "Obj79_Twirl" routine
0001777A 3368 0008 0030             		move.w	8(a0),$30(a1)
00017780 3368 000C 0032             		move.w	$C(a0),$32(a1)
00017786 0469 0018 0032             		subi.w	#$18,$32(a1)
0001778C 237C 0000 0000 0004        		move.l	#Map_obj79,4(a1)
00017794 337C 07A0 0002             		move.w	#$7A0,2(a1)
0001779A 137C 0004 0001             		move.b	#4,1(a1)
000177A0 137C 0008 0019             		move.b	#8,$19(a1)
000177A6 137C 0004 0018             		move.b	#4,$18(a1)
000177AC 137C 0002 001A             		move.b	#2,$1A(a1)
000177B2 337C 0020 0036             		move.w	#$20,$36(a1)
000177B8                            
000177B8                            loc_16F76:
000177B8 117C 0001 001A             		move.b	#1,$1A(a0)	; use "post only" frame, with no lamp
000177BE 6100 0000                  		bsr.w	Obj79_StoreInfo
000177C2 45F8 FC00                  		lea	($FFFFFC00).w,a2
000177C6 7000                       		moveq	#0,d0
000177C8 1028 0023                  		move.b	$23(a0),d0
000177CC 08F2 0000 0002             		bset	#0,2(a2,d0.w)
000177D2                            
000177D2                            locret_16F90:
000177D2 4E75                       		rts	
000177D4                            ; ===========================================================================
000177D4                            
000177D4                            Obj79_AfterHit:				; XREF: Obj79_Index
000177D4 4E75                       		rts	
000177D6                            ; ===========================================================================
000177D6                            
000177D6                            Obj79_Twirl:				; XREF: Obj79_Index
000177D6 5368 0036                  		subq.w	#1,$36(a0)
000177DA 6A00                       		bpl.s	loc_16FA0
000177DC 117C 0004 0024             		move.b	#4,$24(a0)
000177E2                            
000177E2                            loc_16FA0:
000177E2 1028 0026                  		move.b	$26(a0),d0
000177E6 0428 0010 0026             		subi.b	#$10,$26(a0)
000177EC 0400 0040                  		subi.b	#$40,d0
000177F0 4EB9 0000 2C64             		jsr	(CalcSine).l
000177F6 C3FC 0C00                  		muls.w	#$C00,d1
000177FA 4841                       		swap	d1
000177FC D268 0030                  		add.w	$30(a0),d1
00017800 3141 0008                  		move.w	d1,8(a0)
00017804 C1FC 0C00                  		muls.w	#$C00,d0
00017808 4840                       		swap	d0
0001780A D068 0032                  		add.w	$32(a0),d0
0001780E 3140 000C                  		move.w	d0,$C(a0)
00017812 4E75                       		rts	
00017814                            ; ===========================================================================
00017814                            ; ---------------------------------------------------------------------------
00017814                            ; Subroutine to	store information when you hit a lamppost
00017814                            ; ---------------------------------------------------------------------------
00017814                            
00017814                            Obj79_StoreInfo:			; XREF: Obj79_HitLamp
00017814 11E8 0028 FE30             		move.b	$28(a0),($FFFFFE30).w 		; lamppost number
0001781A 11F8 FE30 FE31             		move.b	($FFFFFE30).w,($FFFFFE31).w
00017820 31E8 0008 FE32             		move.w	8(a0),($FFFFFE32).w		; x-position
00017826 31E8 000C FE34             		move.w	$C(a0),($FFFFFE34).w		; y-position
0001782C 31F8 FE20 FE36             		move.w	($FFFFFE20).w,($FFFFFE36).w 	; rings
00017832 11F8 FE1B FE54             		move.b	($FFFFFE1B).w,($FFFFFE54).w 	; lives
00017838 21F8 FE22 FE38             		move.l	($FFFFFE22).w,($FFFFFE38).w 	; time
0001783E 11F8 F742 FE3C             		move.b	($FFFFF742).w,($FFFFFE3C).w 	; routine counter for dynamic level mod
00017844 31F8 F72E FE3E             		move.w	($FFFFF72E).w,($FFFFFE3E).w 	; lower y-boundary of level
0001784A 31F8 F700 FE40             		move.w	($FFFFF700).w,($FFFFFE40).w 	; screen x-position
00017850 31F8 F704 FE42             		move.w	($FFFFF704).w,($FFFFFE42).w 	; screen y-position
00017856 31F8 F708 FE44             		move.w	($FFFFF708).w,($FFFFFE44).w 	; bg position
0001785C 31F8 F70C FE46             		move.w	($FFFFF70C).w,($FFFFFE46).w 	; bg position
00017862 31F8 F710 FE48             		move.w	($FFFFF710).w,($FFFFFE48).w 	; bg position
00017868 31F8 F714 FE4A             		move.w	($FFFFF714).w,($FFFFFE4A).w 	; bg position
0001786E 31F8 F718 FE4C             		move.w	($FFFFF718).w,($FFFFFE4C).w 	; bg position
00017874 31F8 F71C FE4E             		move.w	($FFFFF71C).w,($FFFFFE4E).w 	; bg position
0001787A 31F8 F648 FE50             		move.w	($FFFFF648).w,($FFFFFE50).w 	; water height
00017880 11F8 F64D FE52             		move.b	($FFFFF64D).w,($FFFFFE52).w 	; rountine counter for water
00017886 11F8 F64E FE53             		move.b	($FFFFF64E).w,($FFFFFE53).w 	; water direction
0001788C 4E75                       		rts	
0001788E                            
0001788E                            ; ---------------------------------------------------------------------------
0001788E                            ; Subroutine to	load stored info when you start	a level	from a lamppost
0001788E                            ; ---------------------------------------------------------------------------
0001788E                            
0001788E                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0001788E                            
0001788E                            
0001788E                            Obj79_LoadInfo:				; XREF: LevelSizeLoad
0001788E 11F8 FE31 FE30             		move.b	($FFFFFE31).w,($FFFFFE30).w
00017894 31F8 FE32 D008             		move.w	($FFFFFE32).w,($FFFFD008).w
0001789A 31F8 FE34 D00C             		move.w	($FFFFFE34).w,($FFFFD00C).w
000178A0 31F8 FE36 FE20             		move.w	($FFFFFE36).w,($FFFFFE20).w
000178A6 11F8 FE54 FE1B             		move.b	($FFFFFE54).w,($FFFFFE1B).w
000178AC 4278 FE20                  		clr.w	($FFFFFE20).w
000178B0 4238 FE1B                  		clr.b	($FFFFFE1B).w
000178B4 21F8 FE38 FE22             		move.l	($FFFFFE38).w,($FFFFFE22).w
000178BA 11FC 003B FE25             		move.b	#59,($FFFFFE25).w
000178C0 5338 FE24                  		subq.b	#1,($FFFFFE24).w
000178C4 11F8 FE3C F742             		move.b	($FFFFFE3C).w,($FFFFF742).w
000178CA 11F8 FE52 F64D             		move.b	($FFFFFE52).w,($FFFFF64D).w
000178D0 31F8 FE3E F72E             		move.w	($FFFFFE3E).w,($FFFFF72E).w
000178D6 31F8 FE3E F726             		move.w	($FFFFFE3E).w,($FFFFF726).w
000178DC 31F8 FE40 F700             		move.w	($FFFFFE40).w,($FFFFF700).w
000178E2 31F8 FE42 F704             		move.w	($FFFFFE42).w,($FFFFF704).w
000178E8 31F8 FE44 F708             		move.w	($FFFFFE44).w,($FFFFF708).w
000178EE 31F8 FE46 F70C             		move.w	($FFFFFE46).w,($FFFFF70C).w
000178F4 31F8 FE48 F710             		move.w	($FFFFFE48).w,($FFFFF710).w
000178FA 31F8 FE4A F714             		move.w	($FFFFFE4A).w,($FFFFF714).w
00017900 31F8 FE4C F718             		move.w	($FFFFFE4C).w,($FFFFF718).w
00017906 31F8 FE4E F71C             		move.w	($FFFFFE4E).w,($FFFFF71C).w
0001790C 0C38 0001 FE10             		cmpi.b	#1,($FFFFFE10).w
00017912 6600                       		bne.s	loc_170E4
00017914 31F8 FE50 F648             		move.w	($FFFFFE50).w,($FFFFF648).w
0001791A 11F8 FE52 F64D             		move.b	($FFFFFE52).w,($FFFFF64D).w
00017920 11F8 FE53 F64E             		move.b	($FFFFFE53).w,($FFFFF64E).w
00017926                            
00017926                            loc_170E4:
00017926 4A38 FE30                  		tst.b	($FFFFFE30).w
0001792A 6A00                       		bpl.s	locret_170F6
0001792C 3038 FE32                  		move.w	($FFFFFE32).w,d0
00017930 0440 00A0                  		subi.w	#$A0,d0
00017934 31C0 F728                  		move.w	d0,($FFFFF728).w
00017938                            
00017938                            locret_170F6:
00017938 4E75                       		rts	
0001793A                            ; End of function Obj79_LoadInfo
0001793A                            
0001793A                            ; ===========================================================================
0001793A                            ; ---------------------------------------------------------------------------
0001793A                            ; Sprite mappings - lamppost
0001793A                            ; ---------------------------------------------------------------------------
0001793A                            Map_obj79:
0001793A                            	include "_maps\obj79.asm"
0001793A                            ; ---------------------------------------------------------------------------
0001793A                            ; Sprite mappings - lamppost
0001793A                            ; ---------------------------------------------------------------------------
0001793A 0000 0000                  		dc.w byte_17100-Map_obj79, byte_1711F-Map_obj79
0001793E 0000 0000                  		dc.w byte_17134-Map_obj79, byte_1713F-Map_obj79
00017942 06                         byte_17100:	dc.b 6
00017943 E401 0000 F8               		dc.b $E4, 1, 0,	0, $F8
00017948 E401 0800 00               		dc.b $E4, 1, 8,	0, 0
0001794D F403 2002 F8               		dc.b $F4, 3, $20, 2, $F8
00017952 F403 2802 00               		dc.b $F4, 3, $28, 2, 0
00017957 D401 0006 F8               		dc.b $D4, 1, 0,	6, $F8
0001795C D401 0806 00               		dc.b $D4, 1, 8,	6, 0
00017961 04                         byte_1711F:	dc.b 4
00017962 E401 0000 F8               		dc.b $E4, 1, 0,	0, $F8
00017967 E401 0800 00               		dc.b $E4, 1, 8,	0, 0
0001796C F403 2002 F8               		dc.b $F4, 3, $20, 2, $F8
00017971 F403 2802 00               		dc.b $F4, 3, $28, 2, 0
00017976 02                         byte_17134:	dc.b 2
00017977 F801 0008 F8               		dc.b $F8, 1, 0,	8, $F8
0001797C F801 0808 00               		dc.b $F8, 1, 8,	8, 0
00017981 06                         byte_1713F:	dc.b 6
00017982 E401 0000 F8               		dc.b $E4, 1, 0,	0, $F8
00017987 E401 0800 00               		dc.b $E4, 1, 8,	0, 0
0001798C F403 2002 F8               		dc.b $F4, 3, $20, 2, $F8
00017991 F403 2802 00               		dc.b $F4, 3, $28, 2, 0
00017996 D401 0008 F8               		dc.b $D4, 1, 0,	8, $F8
0001799B D401 0808 00               		dc.b $D4, 1, 8,	8, 0
000179A0                            		even
000179A0                            		even
000179A0                            
000179A0                            ; ===========================================================================
000179A0                            ; ---------------------------------------------------------------------------
000179A0                            ; Object 7D - hidden points at the end of a level
000179A0                            ; ---------------------------------------------------------------------------
000179A0                            
000179A0                            Obj7D:					; XREF: Obj_Index
000179A0 7000                       		moveq	#0,d0
000179A2 1028 0024                  		move.b	$24(a0),d0
000179A6 323B 0000                  		move.w	Obj7D_Index(pc,d0.w),d1
000179AA 4EFB 1000                  		jmp	Obj7D_Index(pc,d1.w)
000179AE                            ; ===========================================================================
000179AE 0000                       Obj7D_Index:	dc.w Obj7D_Main-Obj7D_Index
000179B0 0000                       		dc.w Obj7D_DelayDel-Obj7D_Index
000179B2                            ; ===========================================================================
000179B2                            
000179B2                            Obj7D_Main:				; XREF: Obj7D_Index
000179B2 7410                       		moveq	#$10,d2
000179B4 3602                       		move.w	d2,d3
000179B6 D643                       		add.w	d3,d3
000179B8 43F8 D000                  		lea	($FFFFD000).w,a1
000179BC 3029 0008                  		move.w	8(a1),d0
000179C0 9068 0008                  		sub.w	8(a0),d0
000179C4 D042                       		add.w	d2,d0
000179C6 B043                       		cmp.w	d3,d0
000179C8 6400                       		bcc.s	Obj7D_ChkDel
000179CA 3229 000C                  		move.w	$C(a1),d1
000179CE 9268 000C                  		sub.w	$C(a0),d1
000179D2 D242                       		add.w	d2,d1
000179D4 B243                       		cmp.w	d3,d1
000179D6 6400                       		bcc.s	Obj7D_ChkDel
000179D8 4A78 FE08                  		tst.w	($FFFFFE08).w
000179DC 6600                       		bne.s	Obj7D_ChkDel
000179DE 4A38 F7CD                  		tst.b	($FFFFF7CD).w
000179E2 6600                       		bne.s	Obj7D_ChkDel
000179E4 5428 0024                  		addq.b	#2,$24(a0)
000179E8 217C 0000 0000 0004        		move.l	#Map_obj7D,4(a0)
000179F0 317C 84B6 0002             		move.w	#$84B6,2(a0)
000179F6 0028 0004 0001             		ori.b	#4,1(a0)
000179FC 117C 0000 0018             		move.b	#0,$18(a0)
00017A02 117C 0010 0019             		move.b	#$10,$19(a0)
00017A08 1168 0028 001A             		move.b	$28(a0),$1A(a0)
00017A0E 317C 0077 0030             		move.w	#119,$30(a0)	; set display time to 2	seconds
00017A14 303C 00C9                  		move.w	#$C9,d0
00017A18 4EB9 0000 15C0             		jsr	(PlaySound_Special).l ;	play bonus sound
00017A1E 7000                       		moveq	#0,d0
00017A20 1028 0028                  		move.b	$28(a0),d0
00017A24 D040                       		add.w	d0,d0
00017A26 303B 0000                  		move.w	Obj7D_Points(pc,d0.w),d0 ; load	bonus points array
00017A2A 4EB9 0000 0000             		jsr	AddPoints
00017A30                            
00017A30                            Obj7D_ChkDel:
00017A30 3028 0008                  		move.w	8(a0),d0
00017A34 0240 FF80                  		andi.w	#$FF80,d0
00017A38 3238 F700                  		move.w	($FFFFF700).w,d1
00017A3C 0441 0080                  		subi.w	#$80,d1
00017A40 0241 FF80                  		andi.w	#$FF80,d1
00017A44 9041                       		sub.w	d1,d0
00017A46 0C40 0280                  		cmpi.w	#$280,d0
00017A4A 6200                       		bhi.s	Obj7D_Delete
00017A4C 4E75                       		rts	
00017A4E                            ; ===========================================================================
00017A4E                            
00017A4E                            Obj7D_Delete:
00017A4E 4EF9 0000 DD9E             		jmp	DeleteObject
00017A54                            ; ===========================================================================
00017A54 0000                       Obj7D_Points:	dc.w 0			; Bonus	points array
00017A56 03E8                       		dc.w 1000
00017A58 0064                       		dc.w 100
00017A5A 0001                       		dc.w 1
00017A5C                            ; ===========================================================================
00017A5C                            
00017A5C                            Obj7D_DelayDel:				; XREF: Obj7D_Index
00017A5C 5368 0030                  		subq.w	#1,$30(a0)	; subtract 1 from display time
00017A60 6B00                       		bmi.s	Obj7D_Delete2	; if time is zero, branch
00017A62 3028 0008                  		move.w	8(a0),d0
00017A66 0240 FF80                  		andi.w	#-$80,d0
00017A6A 3238 F700                  		move.w	($FFFFF700).w,d1
00017A6E 0441 0080                  		subi.w	#$80,d1
00017A72 0241 FF80                  		andi.w	#-$80,d1
00017A76 9041                       		sub.w	d1,d0
00017A78 0C40 0280                  		cmpi.w	#$280,d0
00017A7C 6200                       		bhi.s	Obj7D_Delete2
00017A7E 4EF9 0000 DD62             		jmp	DisplaySprite
00017A84                            ; ===========================================================================
00017A84                            
00017A84                            Obj7D_Delete2:
00017A84 4EF9 0000 DD9E             		jmp	DeleteObject
00017A8A                            ; ===========================================================================
00017A8A                            ; ---------------------------------------------------------------------------
00017A8A                            ; Sprite mappings - hidden points at the end of	a level
00017A8A                            ; ---------------------------------------------------------------------------
00017A8A                            Map_obj7D:
00017A8A                            	include "_maps\obj7D.asm"
00017A8A                            ; ---------------------------------------------------------------------------
00017A8A                            ; Sprite mappings - hidden points at the end of	a level
00017A8A                            ; ---------------------------------------------------------------------------
00017A8A 0000 0000                  		dc.w byte_17250-Map_obj7D, byte_17251-Map_obj7D
00017A8E 0000 0000                  		dc.w byte_17257-Map_obj7D, byte_1725D-Map_obj7D
00017A92 00                         byte_17250:	dc.b 0
00017A93 01                         byte_17251:	dc.b 1
00017A94 F40E 0000 F0               		dc.b $F4, $E, 0, 0, $F0
00017A99 01                         byte_17257:	dc.b 1
00017A9A F40E 000C F0               		dc.b $F4, $E, 0, $C, $F0
00017A9F 01                         byte_1725D:	dc.b 1
00017AA0 F40E 0018 F0               		dc.b $F4, $E, 0, $18, $F0
00017AA6 00                         		even
00017AA6 00                         		even
00017AA6                            
00017AA6                            ; ===========================================================================
00017AA6                            ; ---------------------------------------------------------------------------
00017AA6                            ; Object 8A - "SONIC TEAM PRESENTS" and	credits
00017AA6                            ; ---------------------------------------------------------------------------
00017AA6                            
00017AA6                            Obj8A:					; XREF: Obj_Index
00017AA6 7000                       		moveq	#0,d0
00017AA8 1028 0024                  		move.b	$24(a0),d0
00017AAC 323B 0000                  		move.w	Obj8A_Index(pc,d0.w),d1
00017AB0 4EFB 1000                  		jmp	Obj8A_Index(pc,d1.w)
00017AB4                            ; ===========================================================================
00017AB4 0000                       Obj8A_Index:	dc.w Obj8A_Main-Obj8A_Index
00017AB6 0000                       		dc.w Obj8A_Display-Obj8A_Index
00017AB8                            ; ===========================================================================
00017AB8                            
00017AB8                            Obj8A_Main:				; XREF: Obj8A_Index
00017AB8 5428 0024                  		addq.b	#2,$24(a0)
00017ABC 317C 0120 0008             		move.w	#$120,8(a0)
00017AC2 317C 00F0 000A             		move.w	#$F0,$A(a0)
00017AC8 217C 0000 0000 0004        		move.l	#Map_obj8A,4(a0)
00017AD0 317C 05A0 0002             		move.w	#$5A0,2(a0)
00017AD6 3038 FFF4                  		move.w	($FFFFFFF4).w,d0 ; load	credits	index number
00017ADA 1140 001A                  		move.b	d0,$1A(a0)	; display appropriate sprite
00017ADE 117C 0000 0001             		move.b	#0,1(a0)
00017AE4 117C 0000 0018             		move.b	#0,$18(a0)
00017AEA 0C38 0004 F600             		cmpi.b	#4,($FFFFF600).w ; is the scene	number 04 (title screen)?
00017AF0 6600                       		bne.s	Obj8A_Display	; if not, branch
00017AF2 317C 00A6 0002             		move.w	#$A6,2(a0)
00017AF8 117C 000A 001A             		move.b	#$A,$1A(a0)	; display "SONIC TEAM PRESENTS"
00017AFE 4A38 FFE3                  		tst.b	($FFFFFFE3).w	; is hidden credits cheat on?
00017B02 6700                       		beq.s	Obj8A_Display	; if not, branch
00017B04 0C38 0072 F604             		cmpi.b	#$72,($FFFFF604).w ; is	Start+A+C+Down being pressed?
00017B0A 6600                       		bne.s	Obj8A_Display	; if not, branch
00017B0C 31FC 0EEE FBC0             		move.w	#$EEE,($FFFFFBC0).w ; 3rd pallet, 1st entry = white
00017B12 31FC 0880 FBC2             		move.w	#$880,($FFFFFBC2).w ; 3rd pallet, 2nd entry = cyan
00017B18 4EF9 0000 DD9E             		jmp	DeleteObject
00017B1E                            ; ===========================================================================
00017B1E                            
00017B1E                            Obj8A_Display:				; XREF: Obj8A_Index
00017B1E 4EF9 0000 DD62             		jmp	DisplaySprite
00017B24                            ; ===========================================================================
00017B24                            ; ---------------------------------------------------------------------------
00017B24                            ; Sprite mappings - "SONIC TEAM	PRESENTS" and credits
00017B24                            ; ---------------------------------------------------------------------------
00017B24                            Map_obj8A:
00017B24                            	include "_maps\obj8A.asm"
00017B24                            ; ================================================================================
00017B24                            ; Sprite Mappings - generated by Flex 2 Sun Mar 23 2025 20:55:17 GMT-0500 (Central Daylight Time)
00017B24                            ; ================================================================================
00017B24                            
00017B24                            DATAV02AM357W0A:
00017B24 0000 0000                  	dc.w DATAV02AM357W0A_0-DATAV02AM357W0A, DATAV02AM357W0A_1-DATAV02AM357W0A
00017B28 0000 0000                  	dc.w DATAV02AM357W0A_2-DATAV02AM357W0A, DATAV02AM357W0A_3-DATAV02AM357W0A
00017B2C 0000 0000                  	dc.w DATAV02AM357W0A_4-DATAV02AM357W0A, DATAV02AM357W0A_5-DATAV02AM357W0A
00017B30 0000 0000                  	dc.w DATAV02AM357W0A_6-DATAV02AM357W0A, DATAV02AM357W0A_7-DATAV02AM357W0A
00017B34 0000 0000                  	dc.w DATAV02AM357W0A_8-DATAV02AM357W0A, DATAV02AM357W0A_9-DATAV02AM357W0A
00017B38 0000                       	dc.w DATAV02AM357W0A_A-DATAV02AM357W0A
00017B3A 0E                         DATAV02AM357W0A_0: dc.b $E
00017B3B F805 802E 88               	dc.b $F8, $5, $80, $2E, $88
00017B40 F805 8026 98               	dc.b $F8, $5, $80, $26, $98
00017B45 F805 801A A8               	dc.b $F8, $5, $80, $1A, $A8
00017B4A F801 8046 B8               	dc.b $F8, $1, $80, $46, $B8
00017B4F F805 801E C0               	dc.b $F8, $5, $80, $1E, $C0
00017B54 F805 803E D8               	dc.b $F8, $5, $80, $3E, $D8
00017B59 F805 800E E8               	dc.b $F8, $5, $80, $E, $E8
00017B5E F805 8004 F8               	dc.b $F8, $5, $80, $4, $F8
00017B63 F809 8008 08               	dc.b $F8, $9, $80, $8, $8
00017B68 F805 802E 28               	dc.b $F8, $5, $80, $2E, $28
00017B6D F805 803E 38               	dc.b $F8, $5, $80, $3E, $38
00017B72 F805 8004 48               	dc.b $F8, $5, $80, $4, $48
00017B77 F805 805C 58               	dc.b $F8, $5, $80, $5C, $58
00017B7C F805 805C 68               	dc.b $F8, $5, $80, $5C, $68
00017B81 10                         DATAV02AM357W0A_1: dc.b $10
00017B82 D805 0000 80               	dc.b $D8, $5, $0, $0, $80
00017B87 D805 0004 90               	dc.b $D8, $5, $0, $4, $90
00017B8C D809 0008 A0               	dc.b $D8, $9, $0, $8, $A0
00017B91 D805 000E B4               	dc.b $D8, $5, $0, $E, $B4
00017B96 D805 0012 D0               	dc.b $D8, $5, $0, $12, $D0
00017B9B D805 0016 E0               	dc.b $D8, $5, $0, $16, $E0
00017BA0 D805 0004 F0               	dc.b $D8, $5, $0, $4, $F0
00017BA5 D805 001A 00               	dc.b $D8, $5, $0, $1A, $0
00017BAA 0805 001E C8               	dc.b $8, $5, $0, $1E, $C8
00017BAF 0805 0004 D8               	dc.b $8, $5, $0, $4, $D8
00017BB4 0805 0022 E8               	dc.b $8, $5, $0, $22, $E8
00017BB9 0805 0026 F8               	dc.b $8, $5, $0, $26, $F8
00017BBE 0805 0016 08               	dc.b $8, $5, $0, $16, $8
00017BC3 0805 002A 20               	dc.b $8, $5, $0, $2A, $20
00017BC8 0805 0004 30               	dc.b $8, $5, $0, $4, $30
00017BCD 0805 002E 44               	dc.b $8, $5, $0, $2E, $44
00017BD2 0A                         DATAV02AM357W0A_2: dc.b $A
00017BD3 D805 0012 80               	dc.b $D8, $5, $0, $12, $80
00017BD8 D805 0022 90               	dc.b $D8, $5, $0, $22, $90
00017BDD D805 0026 A0               	dc.b $D8, $5, $0, $26, $A0
00017BE2 D805 0000 B0               	dc.b $D8, $5, $0, $0, $B0
00017BE7 D805 0022 C0               	dc.b $D8, $5, $0, $22, $C0
00017BEC D805 0004 D0               	dc.b $D8, $5, $0, $4, $D0
00017BF1 D809 0008 E0               	dc.b $D8, $9, $0, $8, $E0
00017BF6 0805 002A E8               	dc.b $8, $5, $0, $2A, $E8
00017BFB 0805 0032 F8               	dc.b $8, $5, $0, $32, $F8
00017C00 0805 0036 08               	dc.b $8, $5, $0, $36, $8
00017C05 18                         DATAV02AM357W0A_3: dc.b $18
00017C06 D805 001E 88               	dc.b $D8, $5, $0, $1E, $88
00017C0B D805 003A 98               	dc.b $D8, $5, $0, $3A, $98
00017C10 D805 0004 A8               	dc.b $D8, $5, $0, $4, $A8
00017C15 D805 0022 B8               	dc.b $D8, $5, $0, $22, $B8
00017C1A D805 0004 C8               	dc.b $D8, $5, $0, $4, $C8
00017C1F D805 001E D8               	dc.b $D8, $5, $0, $1E, $D8
00017C24 D805 003E E8               	dc.b $D8, $5, $0, $3E, $E8
00017C29 D805 000E F8               	dc.b $D8, $5, $0, $E, $F8
00017C2E D805 0022 08               	dc.b $D8, $5, $0, $22, $8
00017C33 D805 0042 20               	dc.b $D8, $5, $0, $42, $20
00017C38 D805 000E 30               	dc.b $D8, $5, $0, $E, $30
00017C3D D805 002E 40               	dc.b $D8, $5, $0, $2E, $40
00017C42 D801 0046 50               	dc.b $D8, $1, $0, $46, $50
00017C47 D805 0000 58               	dc.b $D8, $5, $0, $0, $58
00017C4C D805 001A 68               	dc.b $D8, $5, $0, $1A, $68
00017C51 0805 0048 C0               	dc.b $8, $5, $0, $48, $C0
00017C56 0801 0046 D0               	dc.b $8, $1, $0, $46, $D0
00017C5B 0805 0000 D8               	dc.b $8, $5, $0, $0, $D8
00017C60 0801 0046 E8               	dc.b $8, $1, $0, $46, $E8
00017C65 0805 002E F0               	dc.b $8, $5, $0, $2E, $F0
00017C6A 0805 0016 00               	dc.b $8, $5, $0, $16, $0
00017C6F 0805 0004 10               	dc.b $8, $5, $0, $4, $10
00017C74 0805 001A 20               	dc.b $8, $5, $0, $1A, $20
00017C79 0805 0042 30               	dc.b $8, $5, $0, $42, $30
00017C7E 14                         DATAV02AM357W0A_4: dc.b $14
00017C7F D005 0042 A0               	dc.b $D0, $5, $0, $42, $A0
00017C84 D005 000E B0               	dc.b $D0, $5, $0, $E, $B0
00017C89 D005 002E C0               	dc.b $D0, $5, $0, $2E, $C0
00017C8E D001 0046 D0               	dc.b $D0, $1, $0, $46, $D0
00017C93 D005 0000 D8               	dc.b $D0, $5, $0, $0, $D8
00017C98 D005 001A E8               	dc.b $D0, $5, $0, $1A, $E8
00017C9D 0005 004C E8               	dc.b $0, $5, $0, $4C, $E8
00017CA2 0001 0046 F8               	dc.b $0, $1, $0, $46, $F8
00017CA7 0005 001A 04               	dc.b $0, $5, $0, $1A, $4
00017CAC 0005 002A 14               	dc.b $0, $5, $0, $2A, $14
00017CB1 0005 0004 24               	dc.b $0, $5, $0, $4, $24
00017CB6 2005 0012 D0               	dc.b $20, $5, $0, $12, $D0
00017CBB 2005 003A E0               	dc.b $20, $5, $0, $3A, $E0
00017CC0 2005 000E F0               	dc.b $20, $5, $0, $E, $F0
00017CC5 2005 001A 00               	dc.b $20, $5, $0, $1A, $0
00017CCA 2001 0046 10               	dc.b $20, $1, $0, $46, $10
00017CCF 2005 0050 18               	dc.b $20, $5, $0, $50, $18
00017CD4 2005 0022 30               	dc.b $20, $5, $0, $22, $30
00017CD9 2001 0046 40               	dc.b $20, $1, $0, $46, $40
00017CDE 2005 000E 48               	dc.b $20, $5, $0, $E, $48
00017CE3 1A                         DATAV02AM357W0A_5: dc.b $1A
00017CE4 D805 002E 98               	dc.b $D8, $5, $0, $2E, $98
00017CE9 D805 0026 A8               	dc.b $D8, $5, $0, $26, $A8
00017CEE D805 0032 B8               	dc.b $D8, $5, $0, $32, $B8
00017CF3 D805 001A C8               	dc.b $D8, $5, $0, $1A, $C8
00017CF8 D805 0054 D8               	dc.b $D8, $5, $0, $54, $D8
00017CFD D805 0012 F8               	dc.b $D8, $5, $0, $12, $F8
00017D02 D805 0022 08               	dc.b $D8, $5, $0, $22, $8
00017D07 D805 0026 18               	dc.b $D8, $5, $0, $26, $18
00017D0C D805 0042 28               	dc.b $D8, $5, $0, $42, $28
00017D11 D805 0032 38               	dc.b $D8, $5, $0, $32, $38
00017D16 D805 001E 48               	dc.b $D8, $5, $0, $1E, $48
00017D1B D805 000E 58               	dc.b $D8, $5, $0, $E, $58
00017D20 0809 0008 88               	dc.b $8, $9, $0, $8, $88
00017D25 0805 0004 9C               	dc.b $8, $5, $0, $4, $9C
00017D2A 0805 002E AC               	dc.b $8, $5, $0, $2E, $AC
00017D2F 0805 0004 BC               	dc.b $8, $5, $0, $4, $BC
00017D34 0805 003E CC               	dc.b $8, $5, $0, $3E, $CC
00017D39 0805 0026 DC               	dc.b $8, $5, $0, $26, $DC
00017D3E 0805 001A F8               	dc.b $8, $5, $0, $1A, $F8
00017D43 0805 0004 08               	dc.b $8, $5, $0, $4, $8
00017D48 0805 0058 18               	dc.b $8, $5, $0, $58, $18
00017D4D 0805 0004 28               	dc.b $8, $5, $0, $4, $28
00017D52 0809 0008 38               	dc.b $8, $9, $0, $8, $38
00017D57 0805 0032 4C               	dc.b $8, $5, $0, $32, $4C
00017D5C 0805 0022 5C               	dc.b $8, $5, $0, $22, $5C
00017D61 0805 0004 6C               	dc.b $8, $5, $0, $4, $6C
00017D66 17                         DATAV02AM357W0A_6: dc.b $17
00017D67 D005 002E 98               	dc.b $D0, $5, $0, $2E, $98
00017D6C D005 0026 A8               	dc.b $D0, $5, $0, $26, $A8
00017D71 D005 0032 B8               	dc.b $D0, $5, $0, $32, $B8
00017D76 D005 001A C8               	dc.b $D0, $5, $0, $1A, $C8
00017D7B D005 0054 D8               	dc.b $D0, $5, $0, $54, $D8
00017D80 D005 0012 F8               	dc.b $D0, $5, $0, $12, $F8
00017D85 D005 0022 08               	dc.b $D0, $5, $0, $22, $8
00017D8A D005 0026 18               	dc.b $D0, $5, $0, $26, $18
00017D8F D005 0000 28               	dc.b $D0, $5, $0, $0, $28
00017D94 D005 0022 38               	dc.b $D0, $5, $0, $22, $38
00017D99 D005 0004 48               	dc.b $D0, $5, $0, $4, $48
00017D9E D009 0008 58               	dc.b $D0, $9, $0, $8, $58
00017DA3 0005 004C D0               	dc.b $0, $5, $0, $4C, $D0
00017DA8 0001 0046 E0               	dc.b $0, $1, $0, $46, $E0
00017DAD 0009 0008 E8               	dc.b $0, $9, $0, $8, $E8
00017DB2 0001 0046 FC               	dc.b $0, $1, $0, $46, $FC
00017DB7 0005 003E 04               	dc.b $0, $5, $0, $3E, $4
00017DBC 0005 0004 14               	dc.b $0, $5, $0, $4, $14
00017DC1 2009 0008 D0               	dc.b $20, $9, $0, $8, $D0
00017DC6 2005 0004 E4               	dc.b $20, $5, $0, $4, $E4
00017DCB 2005 001E F4               	dc.b $20, $5, $0, $1E, $F4
00017DD0 2005 0058 04               	dc.b $20, $5, $0, $58, $4
00017DD5 2005 002A 14               	dc.b $20, $5, $0, $2A, $14
00017DDA 1F                         DATAV02AM357W0A_7: dc.b $1F
00017DDB D805 002E 80               	dc.b $D8, $5, $0, $2E, $80
00017DE0 D805 0012 90               	dc.b $D8, $5, $0, $12, $90
00017DE5 D805 000E A0               	dc.b $D8, $5, $0, $E, $A0
00017DEA D805 001E B0               	dc.b $D8, $5, $0, $1E, $B0
00017DEF D801 0046 C0               	dc.b $D8, $1, $0, $46, $C0
00017DF4 D805 0004 C8               	dc.b $D8, $5, $0, $4, $C8
00017DF9 D805 0016 D8               	dc.b $D8, $5, $0, $16, $D8
00017DFE D805 003E F8               	dc.b $D8, $5, $0, $3E, $F8
00017E03 D805 003A 08               	dc.b $D8, $5, $0, $3A, $8
00017E08 D805 0004 18               	dc.b $D8, $5, $0, $4, $18
00017E0D D805 001A 28               	dc.b $D8, $5, $0, $1A, $28
00017E12 D805 0058 38               	dc.b $D8, $5, $0, $58, $38
00017E17 D805 002E 48               	dc.b $D8, $5, $0, $2E, $48
00017E1C 0005 005C B0               	dc.b $0, $5, $0, $5C, $B0
00017E21 0005 0032 C0               	dc.b $0, $5, $0, $32, $C0
00017E26 0005 004C D0               	dc.b $0, $5, $0, $4C, $D0
00017E2B 0001 0046 E0               	dc.b $0, $1, $0, $46, $E0
00017E30 0005 0026 E8               	dc.b $0, $5, $0, $26, $E8
00017E35 0009 0008 00               	dc.b $0, $9, $0, $8, $0
00017E3A 0001 0046 14               	dc.b $0, $1, $0, $46, $14
00017E3F 0005 001A 1C               	dc.b $0, $5, $0, $1A, $1C
00017E44 0005 000E 2C               	dc.b $0, $5, $0, $E, $2C
00017E49 0005 0000 3C               	dc.b $0, $5, $0, $0, $3C
00017E4E 0001 0046 4C               	dc.b $0, $1, $0, $46, $4C
00017E53 0005 002E 54               	dc.b $0, $5, $0, $2E, $54
00017E58 0005 003A 64               	dc.b $0, $5, $0, $3A, $64
00017E5D 0001 0046 74               	dc.b $0, $1, $0, $46, $74
00017E62 2005 0012 F8               	dc.b $20, $5, $0, $12, $F8
00017E67 2005 0004 08               	dc.b $20, $5, $0, $4, $8
00017E6C 2005 0012 18               	dc.b $20, $5, $0, $12, $18
00017E71 2005 0004 28               	dc.b $20, $5, $0, $4, $28
00017E76 0F                         DATAV02AM357W0A_8: dc.b $F
00017E77 F805 0012 80               	dc.b $F8, $5, $0, $12, $80
00017E7C F805 0022 90               	dc.b $F8, $5, $0, $22, $90
00017E81 F805 000E A0               	dc.b $F8, $5, $0, $E, $A0
00017E86 F805 002E B0               	dc.b $F8, $5, $0, $2E, $B0
00017E8B F805 000E C0               	dc.b $F8, $5, $0, $E, $C0
00017E90 F805 001A D0               	dc.b $F8, $5, $0, $1A, $D0
00017E95 F805 003E E0               	dc.b $F8, $5, $0, $3E, $E0
00017E9A F805 000E F0               	dc.b $F8, $5, $0, $E, $F0
00017E9F F805 0042 00               	dc.b $F8, $5, $0, $42, $0
00017EA4 F805 0048 18               	dc.b $F8, $5, $0, $48, $18
00017EA9 F805 002A 28               	dc.b $F8, $5, $0, $2A, $28
00017EAE F805 002E 40               	dc.b $F8, $5, $0, $2E, $40
00017EB3 F805 000E 50               	dc.b $F8, $5, $0, $E, $50
00017EB8 F805 0000 60               	dc.b $F8, $5, $0, $0, $60
00017EBD F805 0004 70               	dc.b $F8, $5, $0, $4, $70
00017EC2 08                         DATAV02AM357W0A_9: dc.b $8
00017EC3 3005 003E C0               	dc.b $30, $5, $0, $3E, $C0
00017EC8 3005 0022 D0               	dc.b $30, $5, $0, $22, $D0
00017ECD 3005 002A E0               	dc.b $30, $5, $0, $2A, $E0
00017ED2 3005 0004 F8               	dc.b $30, $5, $0, $4, $F8
00017ED7 3005 0000 08               	dc.b $30, $5, $0, $0, $8
00017EDC 3005 0004 18               	dc.b $30, $5, $0, $4, $18
00017EE1 3001 0046 28               	dc.b $30, $1, $0, $46, $28
00017EE6 3005 001A 30               	dc.b $30, $5, $0, $1A, $30
00017EEB 20                         DATAV02AM357W0A_A: dc.b $20
00017EEC ED05 002E BF               	dc.b $ED, $5, $0, $2E, $BF
00017EF1 ED05 0026 CD               	dc.b $ED, $5, $0, $26, $CD
00017EF6 ED09 0008 DD               	dc.b $ED, $9, $0, $8, $DD
00017EFB ED05 000E F1               	dc.b $ED, $5, $0, $E, $F1
00017F00 ED05 0026 00               	dc.b $ED, $5, $0, $26, $0
00017F05 ED05 001A 10               	dc.b $ED, $5, $0, $1A, $10
00017F0A ED05 000E 1F               	dc.b $ED, $5, $0, $E, $1F
00017F0F FD05 0012 BF               	dc.b $FD, $5, $0, $12, $BF
00017F14 FD05 0016 CE               	dc.b $FD, $5, $0, $16, $CE
00017F19 FD05 000E DD               	dc.b $FD, $5, $0, $E, $DD
00017F1E FD05 0004 EC               	dc.b $FD, $5, $0, $4, $EC
00017F23 FD05 002E FC               	dc.b $FD, $5, $0, $2E, $FC
00017F28 FD05 000E 0A               	dc.b $FD, $5, $0, $E, $A
00017F2D 0D05 0004 BE               	dc.b $D, $5, $0, $4, $BE
00017F32 0D05 0054 CE               	dc.b $D, $5, $0, $54, $CE
00017F37 0D05 0054 DD               	dc.b $D, $5, $0, $54, $DD
00017F3C 0D05 0032 F2               	dc.b $D, $5, $0, $32, $F2
00017F41 0D05 001A 02               	dc.b $D, $5, $0, $1A, $2
00017F46 0D05 0054 11               	dc.b $D, $5, $0, $54, $11
00017F4B 0D05 002A 20               	dc.b $D, $5, $0, $2A, $20
00017F50 0D01 0046 30               	dc.b $D, $1, $0, $46, $30
00017F55 0D05 001A 38               	dc.b $D, $5, $0, $1A, $38
00017F5A 0D05 0000 47               	dc.b $D, $5, $0, $0, $47
00017F5F 1D05 003E BE               	dc.b $1D, $5, $0, $3E, $BE
00017F64 1D05 0026 CE               	dc.b $1D, $5, $0, $26, $CE
00017F69 1D05 003E E4               	dc.b $1D, $5, $0, $3E, $E4
00017F6E 1D05 003A F4               	dc.b $1D, $5, $0, $3A, $F4
00017F73 1D05 000E 04               	dc.b $1D, $5, $0, $E, $4
00017F78 1D05 000E 2A               	dc.b $1D, $5, $0, $E, $2A
00017F7D 1D05 0022 1A               	dc.b $1D, $5, $0, $22, $1A
00017F82 1D05 0012 39               	dc.b $1D, $5, $0, $12, $39
00017F87 1D05 0026 48               	dc.b $1D, $5, $0, $26, $48
00017F8C                            	even
00017F8C                            	even
00017F8C                            
00017F8C                            ; ===========================================================================
00017F8C                            ; ---------------------------------------------------------------------------
00017F8C                            ; Object 3D - matthew boss - modified by GK89
00017F8C                            ; ---------------------------------------------------------------------------
00017F8C                            
00017F8C                            Obj3D:					; XREF: Obj_Index
00017F8C 7000                       		moveq	#0,d0
00017F8E 1028 0024                  		move.b	$24(a0),d0
00017F92 323B 0000                  		move.w	Obj3D_Index(pc,d0.w),d1
00017F96 4EFB 1000                  		jmp	Obj3D_Index(pc,d1.w)
00017F9A                            ; ===========================================================================
00017F9A 0000                       Obj3D_Index:	dc.w Obj3D_Main-Obj3D_Index
00017F9C 0000                       		dc.w Obj3D_ShipMain-Obj3D_Index
00017F9E 0000                       		dc.w Obj3D_FaceMain-Obj3D_Index
00017FA0 0000                       		dc.w Obj3D_FlameMain-Obj3D_Index
00017FA2                            
00017FA2 0200                       Obj3D_ObjData:	dc.b 2,	0		; routine counter, animation
00017FA4 0401                       		dc.b 4,	1
00017FA6 0607                       		dc.b 6,	7
00017FA8                            ; ===========================================================================
00017FA8                            
00017FA8                            Obj3D_Main:				; XREF: Obj3D_Index
00017FA8 45F9 0001 7FA2             		lea	(Obj3D_ObjData).l,a2
00017FAE 2248                       		movea.l	a0,a1
00017FB0 7202                       		moveq	#2,d1
00017FB2 6000                       		bra.s	Obj3D_LoadBoss
00017FB4                            ; ===========================================================================
00017FB4                            
00017FB4                            Obj3D_Loop:
00017FB4 4EB9 0000 E1FE             		jsr	SingleObjLoad2
00017FBA 6600                       		bne.s	loc_17772
00017FBC                            
00017FBC                            Obj3D_LoadBoss:				; XREF: Obj3D_Main
00017FBC 135A 0024                  		move.b	(a2)+,$24(a1)
00017FC0 12BC 003D                  		move.b	#$3D,0(a1)
00017FC4 3368 0008 0008             		move.w	8(a0),8(a1)
00017FCA 3368 000C 000C             		move.w	$C(a0),$C(a1)
00017FD0 237C 0000 0000 0004        		move.l	#Map_Eggman,4(a1)
00017FD8 337C 0400 0002             		move.w	#$400,2(a1)
00017FDE 137C 0004 0001             		move.b	#4,1(a1)
00017FE4 137C 0020 0019             		move.b	#$20,$19(a1)
00017FEA 137C 0003 0018             		move.b	#3,$18(a1)
00017FF0 135A 001C                  		move.b	(a2)+,$1C(a1)
00017FF4 2348 0034                  		move.l	a0,$34(a1)
00017FF8 51C9 FFBA                  		dbf	d1,Obj3D_Loop	; repeat sequence 2 more times
00017FFC                            
00017FFC                            loc_17772:
00017FFC 3168 0008 0030             		move.w	8(a0),$30(a0)
00018002 3168 000C 0038             		move.w	$C(a0),$38(a0)
00018008 117C 000F 0020             		move.b	#$F,$20(a0)
0001800E 117C 0028 0021             		move.b	#$28,$21(a0)	; set number of	hits to	8
00018014                            
00018014                            Obj3D_ShipMain:				; XREF: Obj3D_Index
00018014 7000                       		moveq	#0,d0
00018016 1028 0025                  		move.b	$25(a0),d0
0001801A 323B 0000                  		move.w	Obj3D_ShipIndex(pc,d0.w),d1
0001801E 4EBB 1000                  		jsr	Obj3D_ShipIndex(pc,d1.w)
00018022 43F9 0000 0000             		lea	(Ani_Eggman).l,a1
00018028 4EB9 0000 AE22             		jsr	AnimateSprite
0001802E 1028 0022                  		move.b	$22(a0),d0
00018032 0200 0003                  		andi.b	#3,d0
00018036 0228 00FC 0001             		andi.b	#$FC,1(a0)
0001803C 8128 0001                  		or.b	d0,1(a0)
00018040 4EF9 0000 DD62             		jmp	DisplaySprite
00018046                            ; ===========================================================================
00018046 0000                       Obj3D_ShipIndex:dc.w Obj3D_ShipStart-Obj3D_ShipIndex
00018048 0000                       		dc.w Obj3D_MakeBall-Obj3D_ShipIndex
0001804A 0000                       		dc.w Obj3D_ShipMove-Obj3D_ShipIndex
0001804C 0000                       		dc.w loc_17954-Obj3D_ShipIndex
0001804E 0000                       		dc.w loc_1797A-Obj3D_ShipIndex
00018050 0000                       		dc.w loc_179AC-Obj3D_ShipIndex
00018052 0000                       		dc.w loc_179F6-Obj3D_ShipIndex
00018054                            ; ===========================================================================
00018054                            
00018054                            Obj3D_ShipStart:			; XREF: Obj3D_ShipIndex
00018054 4EB9 0000 0000             		jsr    Obj3D_ShipMove
0001805A 6100 0000                  		bsr.w	BossMove
0001805E 0C68 0338 0038             		cmpi.w	#$338,$38(a0)
00018064 6600                       		bne.s	loc_177E6
00018066 317C 0000 0012             		move.w	#0,$12(a0)	; stop ship
0001806C 5428 0025                  		addq.b	#2,$25(a0)	; goto next routine
00018070                            
00018070                            loc_177E6:
00018070 1028 003F                  		move.b	$3F(a0),d0
00018074 4EB9 0000 2C64             		jsr	(CalcSine).l
0001807A EC40                       		asr.w	#6,d0
0001807C D068 0038                  		add.w	$38(a0),d0
00018080 3140 000C                  		move.w	d0,$C(a0)
00018084 3168 0030 0008             		move.w	$30(a0),8(a0)
0001808A 5428 003F                  		addq.b	#2,$3F(a0)
0001808E 0C28 0008 0025             		cmpi.b	#8,$25(a0)
00018094 6400                       		bcc.s	locret_1784A
00018096 4A28 0022                  		tst.b	$22(a0)
0001809A 6B00                       		bmi.s	loc_1784C
0001809C 4A28 0020                  		tst.b	$20(a0)
000180A0 6600                       		bne.s	locret_1784A
000180A2 4A28 003E                  		tst.b	$3E(a0)
000180A6 6600                       		bne.s	Obj3D_ShipFlash
000180A8 117C 0020 003E             		move.b	#$20,$3E(a0)	; set number of	times for ship to flash
000180AE 303C 00AC                  		move.w	#$AC,d0
000180B2 4EB9 0000 15C0             		jsr	(PlaySound_Special).l ;	play boss damage sound
000180B8                            
000180B8                            Obj3D_ShipFlash:
000180B8 43F8 FB22                  		lea	($FFFFFB22).w,a1 ; load	2nd pallet, 2nd	entry
000180BC 7000                       		moveq	#0,d0		; move 0 (black) to d0
000180BE 4A51                       		tst.w	(a1)
000180C0 6600                       		bne.s	loc_1783C
000180C2 303C 0EEE                  		move.w	#$EEE,d0	; move 0EEE (white) to d0
000180C6                            
000180C6                            loc_1783C:
000180C6 3280                       		move.w	d0,(a1)		; load colour stored in	d0
000180C8 5328 003E                  		subq.b	#1,$3E(a0)
000180CC 6600                       		bne.s	locret_1784A
000180CE 117C 000F 0020             		move.b	#$F,$20(a0)
000180D4                            
000180D4                            locret_1784A:
000180D4 4E75                       		rts	
000180D6                            ; ===========================================================================
000180D6                            
000180D6                            loc_1784C:				; XREF: loc_177E6
000180D6 7064                       		moveq	#100,d0
000180D8 6100 0000                  		bsr.w	AddPoints
000180DC 117C 0008 0025             		move.b	#8,$25(a0)
000180E2 317C 00B3 003C             		move.w	#$B3,$3C(a0)
000180E8 4E75                       		rts	
000180EA                            
000180EA                            ; ---------------------------------------------------------------------------
000180EA                            ; Defeated boss	subroutine
000180EA                            ; ---------------------------------------------------------------------------
000180EA                            
000180EA                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000180EA                            
000180EA                            
000180EA                            BossDefeated:
000180EA 1038 FE0F                  		move.b	($FFFFFE0F).w,d0
000180EE 0200 0007                  		andi.b	#7,d0
000180F2 6600                       		bne.s	locret_178A2
000180F4 4EB9 0000 E1E8             		jsr	SingleObjLoad
000180FA 6600                       		bne.s	locret_178A2
000180FC 12BC 003F                  		move.b	#$3F,0(a1)	; load explosion object
00018100 3368 0008 0008             		move.w	8(a0),8(a1)
00018106 3368 000C 000C             		move.w	$C(a0),$C(a1)
0001810C 4EB9 0000 2C3E             		jsr	(RandomNumber).l
00018112 3200                       		move.w	d0,d1
00018114 7200                       		moveq	#0,d1
00018116 1200                       		move.b	d0,d1
00018118 E409                       		lsr.b	#2,d1
0001811A 0441 0020                  		subi.w	#$20,d1
0001811E D369 0008                  		add.w	d1,8(a1)
00018122 E048                       		lsr.w	#8,d0
00018124 E608                       		lsr.b	#3,d0
00018126 D169 000C                  		add.w	d0,$C(a1)
0001812A                            
0001812A                            locret_178A2:
0001812A 4E75                       		rts	
0001812C                            ; End of function BossDefeated
0001812C                            
0001812C                            ; ---------------------------------------------------------------------------
0001812C                            ; Subroutine to	move a boss
0001812C                            ; ---------------------------------------------------------------------------
0001812C                            
0001812C                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0001812C                            
0001812C                            
0001812C                            BossMove:
0001812C 2428 0030                  		move.l	$30(a0),d2
00018130 2628 0038                  		move.l	$38(a0),d3
00018134 3028 0010                  		move.w	$10(a0),d0
00018138 48C0                       		ext.l	d0
0001813A E180                       		asl.l	#8,d0
0001813C D480                       		add.l	d0,d2
0001813E 3028 0012                  		move.w	$12(a0),d0
00018142 48C0                       		ext.l	d0
00018144 E180                       		asl.l	#8,d0
00018146 D680                       		add.l	d0,d3
00018148 2142 0030                  		move.l	d2,$30(a0)
0001814C 2143 0038                  		move.l	d3,$38(a0)
00018150 4E75                       		rts	
00018152                            ; End of function BossMove
00018152                            
00018152                            ; ===========================================================================
00018152                            
00018152                            Obj3D_MakeBall:				; XREF: Obj3D_ShipIndex		
00018152 6100 FFD8                  		bsr.w	BossMove
00018156 0C68 2A00 0030             		cmpi.w	#$2A00,$30(a0)
0001815C 6600                       		bne.s	loc_17916
0001815E 317C 0000 0010             		move.w	#0,$10(a0)
00018164 317C 0000 0012             		move.w	#0,$12(a0)
0001816A 5428 0025                  		addq.b	#2,$25(a0)
0001816E 4EB9 0000 E1FE             		jsr	SingleObjLoad2
00018174 6600                       		bne.s	loc_17910
00018176 12BC 0048                  		move.b	#$48,0(a1)	; load swinging	ball object
0001817A 3368 0030 0008             		move.w	$30(a0),8(a1)
00018180 3368 0038 000C             		move.w	$38(a0),$C(a1)
00018186 2348 0034                  		move.l	a0,$34(a1)
0001818A                            
0001818A                            loc_17910:
0001818A 317C 0077 003C             		move.w	#$77,$3C(a0)
00018190                            
00018190                            loc_17916:
00018190 6000 FEDE                  		bra.w	loc_177E6
00018194                            ; ===========================================================================
00018194                            
00018194                            Obj3D_ShipMove:				; XREF:  sonic follow move
00018194 5368 003C                  		subq.w	#1,$3C(a0)
00018198 4EB9 0000 0000             		jsr 	Obj3D_UpStuff
0001819E 5428 0025                  		addq.b	#2,$25(a0)
000181A2 317C 003F 003C             		move.w	#$3F,$3C(a0)
000181A8 3038 D008                  		move.w	($FFFFD008).w,d0	 
000181AC 9068 0008                  		sub.w	8(a0),d0		 
000181B0 6A00                       		bpl.s	Obj3D_left			 
000181B2 08A8 0000 0022             		bclr	#0,$22(a0)		 
000181B8 6000                       		bra.s	Obj3D_right		 
000181BA 08A8 0005 0022             		bclr	#5,$22(a0)
000181C0 4EB9 0000 0000              		jsr     loc_17950
000181C6 4E75                       		rts
000181C8                            ; ===========================================================================
000181C8                            
000181C8                            Obj3D_right:
000181C8 317C FF00 0010             		move.w	#-$100,$10(a0)	
000181CE 4E75                       		Rts
000181D0                            
000181D0                            Obj3D_left:
000181D0 317C 0100 0010             		move.w	#$100,$10(a0)	 
000181D6 0828 0000 0022             		btst	#0,$22(a0)	; is matt facing	left?
000181DC 6600                       		bne.s	RTSboss  	; if not, branch
000181DE 0868 0000 0022              		bchg	#0,$22(a0)
000181E4                            
000181E4                            RTSboss:	    
000181E4 4E75                       		rts
000181E6                             ; ===========================================================================
000181E6                            
000181E6                            Obj3D_UpStuff:
000181E6 3038 D00C                  		move.w	($FFFFD00C).w,d0	 
000181EA 9068 000C                  		sub.w	$C(a0),d0		 
000181EE 6A00                       		bpl.s	Obj3D_down			 
000181F0 6000                        		bra.s	Obj3D_up		 
000181F2 08A8 0005 0022             		bclr	#5,$22(a0)
000181F8                             
000181F8                            Obj3D_up:		
000181F8 317C FEE0 0012             		move.w	#-$120,$12(a0)           ; Up	 
000181FE 4E75                        	    rts
00018200                            
00018200                            Obj3D_down:
00018200 317C 0120 0012              		move.w	#$120, $12(a0)           ; Down
00018206                            
00018206                            loc_17950:
00018206 6000 FE68                  		bra.w	loc_177E6
0001820A                            ; ===========================================================================
0001820A                            
0001820A                            loc_17954:				; XREF: Obj3D_ShipIndex
0001820A 5368 003C                  		subq.w	#1,$3C(a0)
0001820E 6B00                       		bmi.s	loc_17960
00018210 6100 FF1A                  		bsr.w	BossMove
00018214 6000                       		bra.s	loc_17976
00018216                            ; ===========================================================================
00018216                            
00018216                            loc_17960:
00018216 0868 0000 0022             		bchg	#0,$22(a0)
0001821C 317C 003F 003C             		move.w	#$3F,$3C(a0)
00018222 5528 0025                  		subq.b	#2,$25(a0)
00018226 317C 0000 0010             		move.w	#0,$10(a0)
0001822C                            
0001822C                            loc_17976:
0001822C 6000 FE42                  		bra.w	loc_177E6
00018230                            ; ===========================================================================
00018230                            
00018230                            loc_1797A:				; XREF: Obj3D_ShipIndex
00018230 5368 003C                  		subq.w	#1,$3C(a0)
00018234 6B00                       		bmi.s	loc_17984
00018236 6000 FEB2                  		bra.w	BossDefeated
0001823A                            ; ===========================================================================
0001823A                            
0001823A                            loc_17984:
0001823A 08E8 0000 0022             		bset	#0,$22(a0)
00018240 08A8 0007 0022             		bclr	#7,$22(a0)
00018246 4268 0010                  		clr.w	$10(a0)
0001824A 5428 0025                  		addq.b	#2,$25(a0)
0001824E 317C FFDA 003C             		move.w	#-$26,$3C(a0)
00018254 4A38 F7A7                  		tst.b	($FFFFF7A7).w
00018258 6600                       		bne.s	locret_179AA
0001825A 11FC 0001 F7A7             		move.b	#1,($FFFFF7A7).w
00018260 31FC 0300 F726             		move.w	#$300,($FFFFF726).w
00018266 6000 FE82                  		bra.w	BossDefeated
0001826A                            
0001826A                            locret_179AA:
0001826A 4E75                       		rts	
0001826C                            ; ===========================================================================
0001826C                            
0001826C                            loc_179AC:				; XREF: Obj3D_ShipIndex
0001826C 4EB9 0000 DD10             		jsr ObjectFall		
00018272 5268 003C                  		addq.w	#1,$3C(a0)
00018276 6700                       		beq.s	loc_179BC
00018278 6A00                       		bpl.s	loc_179C2
0001827A 6000                       		bra.s	loc_179EE
0001827C                            ; ===========================================================================
0001827C                            
0001827C                            loc_179BC:
0001827C 4268 0012                  		clr.w	$12(a0)
00018280 6000                       		bra.s	loc_179EE
00018282                            ; ===========================================================================
00018282                            
00018282                            loc_179C2:
00018282 0C68 0030 003C             		cmpi.w	#$30,$3C(a0)
00018288 6500                       		bcs.s	loc_179DA
0001828A 6700                       		beq.s	loc_179E0
0001828C 0C68 0038 003C             		cmpi.w	#$38,$3C(a0)
00018292 6500                       		bcs.s	loc_179EE
00018294 5428 0025                  		addq.b	#2,$25(a0)
00018298 6000                       		bra.s	loc_179EE
0001829A                            ; ===========================================================================
0001829A                            
0001829A                            loc_179DA:
0001829A 5168 0012                  		subq.w	#8,$12(a0)
0001829E 6000                       		bra.s	loc_179EE
000182A0 6000 FE48                  		bra.w	BossDefeated
000182A4                            ; ===========================================================================
000182A4                            
000182A4                            loc_179E0:
000182A4 4268 0012                  		clr.w	$12(a0)
000182A8 303C 0081                  		move.w	#$81,d0
000182AC 4EB9 0000 15BA             		jsr	(PlaySound).l	; play GHZ music
000182B2                            
000182B2                            loc_179EE:
000182B2 6100 FE78                  		bsr.w	BossMove
000182B6 6000 FDB8                  		bra.w	loc_177E6
000182BA                            ; ===========================================================================
000182BA                            
000182BA                            loc_179F6:				; XREF: Obj3D_ShipIndex
000182BA 0C78 2AC0 F72A             		cmpi.w	#$2AC0,($FFFFF72A).w
000182C0 6700                       		beq.s	loc_17A10
000182C2 5478 F72A                  		addq.w	#2,($FFFFF72A).w
000182C6 6000                       		bra.s	loc_17A16
000182C8                            ; ===========================================================================
000182C8                            
000182C8                            loc_17A10:
000182C8 4A28 0001                  		tst.b	1(a0)
000182CC 6A00                       		bpl.s	Obj3D_ShipDel
000182CE                            
000182CE                            loc_17A16:
000182CE 6100 FE5C                  		bsr.w	BossMove
000182D2 6000 FD9C                  		bra.w	loc_177E6
000182D6                            ; ===========================================================================
000182D6                            
000182D6                            Obj3D_ShipDel:
000182D6 4EF9 0000 DD9E             		jmp	DeleteObject
000182DC                            ; ===========================================================================
000182DC                            
000182DC                            Obj3D_FaceMain:				; XREF: Obj3D_Index
000182DC 7000                       		moveq	#0,d0
000182DE 7201                       		moveq	#1,d1
000182E0 2268 0034                  		movea.l	$34(a0),a1
000182E4 1029 0025                  		move.b	$25(a1),d0
000182E8 5900                       		subq.b	#4,d0
000182EA 6600                       		bne.s	loc_17A3E
000182EC 0C69 2A00 0030             		cmpi.w	#$2A00,$30(a1)
000182F2 6600                       		bne.s	loc_17A46
000182F4 7204                       		moveq	#4,d1
000182F6                            
000182F6                            loc_17A3E:
000182F6 5D00                       		subq.b	#6,d0
000182F8 6B00                       		bmi.s	loc_17A46
000182FA 720A                       		moveq	#$A,d1
000182FC 6000                       		bra.s	loc_17A5A
000182FE                            ; ===========================================================================
000182FE                            
000182FE                            loc_17A46:
000182FE 4A29 0020                  		tst.b	$20(a1)
00018302 6600                       		bne.s	loc_17A50
00018304 7205                       		moveq	#5,d1
00018306 6000                       		bra.s	loc_17A5A
00018308                            ; ===========================================================================
00018308                            
00018308                            loc_17A50:
00018308 0C38 0004 D024             		cmpi.b	#4,($FFFFD024).w
0001830E 6500                       		bcs.s	loc_17A5A
00018310 7204                       		moveq	#4,d1
00018312                            
00018312                            loc_17A5A:
00018312 1141 001C                  		move.b	d1,$1C(a0)
00018316 5500                       		subq.b	#2,d0
00018318 6600                       		bne.s	Obj3D_FaceDisp
0001831A 117C 0006 001C             		move.b	#6,$1C(a0)
00018320 4A28 0001                  		tst.b	1(a0)
00018324 6A00                       		bpl.s	Obj3D_FaceDel
00018326                            
00018326                            Obj3D_FaceDisp:
00018326 6000                       		bra.s	Obj3D_Display
00018328                            ; ===========================================================================
00018328                            
00018328                            Obj3D_FaceDel:
00018328 4EF9 0000 DD9E             		jmp	DeleteObject
0001832E                            ; ===========================================================================
0001832E                            
0001832E                            Obj3D_FlameMain:			; XREF: Obj3D_Index
0001832E 117C 0007 001C             		move.b	#7,$1C(a0)
00018334 2268 0034                  		movea.l	$34(a0),a1
00018338 0C29 000C 0025             		cmpi.b	#$C,$25(a1)
0001833E 6600                       		bne.s	loc_17A96
00018340 117C 000B 001C             		move.b	#$B,$1C(a0)
00018346 4A28 0001                  		tst.b	1(a0)
0001834A 6A00                       		bpl.s	Obj3D_FlameDel
0001834C 6000                       		bra.s	Obj3D_FlameDisp
0001834E                            ; ===========================================================================
0001834E                            
0001834E                            loc_17A96:
0001834E 3029 0010                  		move.w	$10(a1),d0
00018352 6700                       		beq.s	Obj3D_FlameDisp
00018354 117C 0008 001C             		move.b	#8,$1C(a0)
0001835A                            
0001835A                            Obj3D_FlameDisp:
0001835A 6000                       		bra.s	Obj3D_Display
0001835C                            ; ===========================================================================
0001835C                            
0001835C                            Obj3D_FlameDel:
0001835C 4EF9 0000 DD9E             		jmp	DeleteObject
00018362                            ; ===========================================================================
00018362                            
00018362                            Obj3D_Display:				; XREF: Obj3D_FaceDisp; Obj3D_FlameDisp
00018362 2268 0034                  		movea.l	$34(a0),a1
00018366 3169 0008 0008             		move.w	8(a1),8(a0)
0001836C 3169 000C 000C             		move.w	$C(a1),$C(a0)
00018372 1169 0022 0022             		move.b	$22(a1),$22(a0)
00018378 43F9 0000 0000             		lea	(Ani_Eggman).l,a1
0001837E 4EB9 0000 AE22             		jsr	AnimateSprite
00018384 1028 0022                  		move.b	$22(a0),d0
00018388 0200 0003                  		andi.b	#3,d0
0001838C 0228 00FC 0001             		andi.b	#$FC,1(a0)
00018392 8128 0001                  		or.b	d0,1(a0)
00018396 4EF9 0000 DD62             		jmp	DisplaySprite
0001839C                            ; ===========================================================================
0001839C                            ; ---------------------------------------------------------------------------
0001839C                            ; Object 48 - ball on a	chain that Eggman swings (GHZ)
0001839C                            ; ---------------------------------------------------------------------------
0001839C                            
0001839C                            Obj48:					; XREF: Obj_Index
0001839C 7000                       		moveq	#0,d0
0001839E 1028 0024                  		move.b	$24(a0),d0
000183A2 323B 0000                  		move.w	Obj48_Index(pc,d0.w),d1
000183A6 4EFB 1000                  		jmp	Obj48_Index(pc,d1.w)
000183AA                            ; ===========================================================================
000183AA 0000                       Obj48_Index:	dc.w Obj48_Main-Obj48_Index
000183AC 0000                       		dc.w Obj48_Base-Obj48_Index
000183AE 0000                       		dc.w Obj48_Display2-Obj48_Index
000183B0 0000                       		dc.w loc_17C68-Obj48_Index
000183B2 0000                       		dc.w Obj48_ChkVanish-Obj48_Index
000183B4                            ; ===========================================================================
000183B4                            
000183B4                            Obj48_Main:				; XREF: Obj48_Index
000183B4 5428 0024                  		addq.b	#2,$24(a0)
000183B8 317C 4080 0026             		move.w	#$4080,$26(a0)
000183BE 317C FE00 003E             		move.w	#-$200,$3E(a0)
000183C4 217C 0000 0000 0004        		move.l	#Map_BossItems,4(a0)
000183CC 317C 046C 0002             		move.w	#$46C,2(a0)
000183D2 45E8 0028                  		lea	$28(a0),a2
000183D6 14FC 0000                  		move.b	#0,(a2)+
000183DA 7205                       		moveq	#5,d1
000183DC 2248                       		movea.l	a0,a1
000183DE 6000                       		bra.s	loc_17B60
000183E0                            ; ===========================================================================
000183E0                            
000183E0                            Obj48_MakeLinks:
000183E0 4EB9 0000 E1FE             		jsr	SingleObjLoad2
000183E6 6600                       		bne.s	Obj48_MakeBall
000183E8 3368 0008 0008             		move.w	8(a0),8(a1)
000183EE 3368 000C 000C             		move.w	$C(a0),$C(a1)
000183F4 12BC 0048                  		move.b	#$48,0(a1)	; load chain link object
000183F8 137C 0006 0024             		move.b	#6,$24(a1)
000183FE 237C 0000 81E4 0004        		move.l	#Map_obj15,4(a1)
00018406 337C 0380 0002             		move.w	#$380,2(a1)
0001840C 137C 0001 001A             		move.b	#1,$1A(a1)
00018412 5228 0028                  		addq.b	#1,$28(a0)
00018416                            
00018416                            loc_17B60:				; XREF: Obj48_Main
00018416 3A09                       		move.w	a1,d5
00018418 0445 D000                  		subi.w	#$D000,d5
0001841C EC4D                       		lsr.w	#6,d5
0001841E 0245 007F                  		andi.w	#$7F,d5
00018422 14C5                       		move.b	d5,(a2)+
00018424 137C 0004 0001             		move.b	#4,1(a1)
0001842A 137C 0008 0019             		move.b	#8,$19(a1)
00018430 137C 0006 0018             		move.b	#6,$18(a1)
00018436 2368 0034 0034             		move.l	$34(a0),$34(a1)
0001843C 51C9 FFA2                  		dbf	d1,Obj48_MakeLinks ; repeat sequence 5 more times
00018440                            
00018440                            Obj48_MakeBall:
00018440 137C 0008 0024             		move.b	#8,$24(a1)
00018446 237C 0000 87D4 0004        		move.l	#Map_obj48,4(a1) ; load	different mappings for final link
0001844E 337C 43AA 0002             		move.w	#$43AA,2(a1)	; use different	graphics
00018454 137C 0001 001A             		move.b	#1,$1A(a1)
0001845A 137C 0005 0018             		move.b	#5,$18(a1)
00018460 137C 0081 0020             		move.b	#$81,$20(a1)	; make object hurt Sonic
00018466 4E75                       		rts	
00018468                            ; ===========================================================================
00018468                            
00018468 0010 2030 4060             Obj48_PosData:	dc.b 0,	$10, $20, $30, $40, $60	; y-position data for links and	giant ball
0001846E                            
0001846E                            ; ===========================================================================
0001846E                            
0001846E                            Obj48_Base:				; XREF: Obj48_Index
0001846E 47F9 0001 8468             		lea	(Obj48_PosData).l,a3
00018474 45E8 0028                  		lea	$28(a0),a2
00018478 7C00                       		moveq	#0,d6
0001847A 1C1A                       		move.b	(a2)+,d6
0001847C                            
0001847C                            loc_17BC6:
0001847C 7800                       		moveq	#0,d4
0001847E 181A                       		move.b	(a2)+,d4
00018480 ED4C                       		lsl.w	#6,d4
00018482 0684 00FF D000             		addi.l	#$FFD000,d4
00018488 2244                       		movea.l	d4,a1
0001848A 101B                       		move.b	(a3)+,d0
0001848C B029 003C                  		cmp.b	$3C(a1),d0
00018490 6700                       		beq.s	loc_17BE0
00018492 5229 003C                  		addq.b	#1,$3C(a1)
00018496                            
00018496                            loc_17BE0:
00018496 51CE FFE4                  		dbf	d6,loc_17BC6
0001849A                            
0001849A B029 003C                  		cmp.b	$3C(a1),d0
0001849E 6600                       		bne.s	loc_17BFA
000184A0 2268 0034                  		movea.l	$34(a0),a1
000184A4 0C29 0006 0025             		cmpi.b	#6,$25(a1)
000184AA 6600                       		bne.s	loc_17BFA
000184AC 5428 0024                  		addq.b	#2,$24(a0)
000184B0                            
000184B0                            loc_17BFA:
000184B0 0C68 0020 0032             		cmpi.w	#$20,$32(a0)
000184B6 6700                       		beq.s	Obj48_Display
000184B8 5268 0032                  		addq.w	#1,$32(a0)
000184BC                            
000184BC                            Obj48_Display:
000184BC 6100 0000                  		bsr.w	sub_17C2A
000184C0 1028 0026                  		move.b	$26(a0),d0
000184C4 4EB9 0000 8156             		jsr	(Obj15_Move2).l
000184CA 4EF9 0000 DD62             		jmp	DisplaySprite
000184D0                            ; ===========================================================================
000184D0                            
000184D0                            Obj48_Display2:				; XREF: Obj48_Index
000184D0 6100 0000                  		bsr.w	sub_17C2A
000184D4 4EB9 0000 8116             		jsr	(Obj48_Move).l
000184DA 4EF9 0000 DD62             		jmp	DisplaySprite
000184E0                            
000184E0                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000184E0                            
000184E0                            
000184E0                            sub_17C2A:				; XREF: Obj48_Display; Obj48_Display2
000184E0 2268 0034                  		movea.l	$34(a0),a1
000184E4 0628 0020 001B             		addi.b	#$20,$1B(a0)
000184EA 6400                       		bcc.s	loc_17C3C
000184EC 0868 0000 001A             		bchg	#0,$1A(a0)
000184F2                            
000184F2                            loc_17C3C:
000184F2 3169 0008 003A             		move.w	8(a1),$3A(a0)
000184F8 3029 000C                  		move.w	$C(a1),d0
000184FC D068 0032                  		add.w	$32(a0),d0
00018500 3140 0038                  		move.w	d0,$38(a0)
00018504 1169 0022 0022             		move.b	$22(a1),$22(a0)
0001850A 4A29 0022                  		tst.b	$22(a1)
0001850E 6A00                       		bpl.s	locret_17C66
00018510 10BC 003F                  		move.b	#$3F,0(a0)
00018514 117C 0000 0024             		move.b	#0,$24(a0)
0001851A                            
0001851A                            locret_17C66:
0001851A 4E75                       		rts	
0001851C                            ; End of function sub_17C2A
0001851C                            
0001851C                            ; ===========================================================================
0001851C                            
0001851C                            loc_17C68:				; XREF: Obj48_Index
0001851C 2268 0034                  		movea.l	$34(a0),a1
00018520 4A29 0022                  		tst.b	$22(a1)
00018524 6A00                       		bpl.s	Obj48_Display3
00018526 10BC 003F                  		move.b	#$3F,0(a0)
0001852A 117C 0000 0024             		move.b	#0,$24(a0)
00018530                            
00018530                            Obj48_Display3:
00018530 4EF9 0000 DD62             		jmp	DisplaySprite
00018536                            ; ===========================================================================
00018536                            
00018536                            Obj48_ChkVanish:			; XREF: Obj48_Index
00018536 7000                       		moveq	#0,d0
00018538 4A28 001A                  		tst.b	$1A(a0)
0001853C 6600                       		bne.s	Obj48_Vanish
0001853E 5200                       		addq.b	#1,d0
00018540                            
00018540                            Obj48_Vanish:
00018540 1140 001A                  		move.b	d0,$1A(a0)
00018544 2268 0034                  		movea.l	$34(a0),a1
00018548 4A29 0022                  		tst.b	$22(a1)
0001854C 6A00                       		bpl.s	Obj48_Display4
0001854E 117C 0000 0020             		move.b	#0,$20(a0)
00018554 6100 FB94                  		bsr.w	BossDefeated
00018558 5328 003C                  		subq.b	#1,$3C(a0)
0001855C 6A00                       		bpl.s	Obj48_Display4
0001855E 10BC 003F                  		move.b	#$3F,(a0)
00018562 117C 0000 0024             		move.b	#0,$24(a0)
00018568                            
00018568                            Obj48_Display4:
00018568 4EF9 0000 DD62             		jmp	DisplaySprite
0001856E                            ; ===========================================================================
0001856E                            Ani_Eggman:
0001856E                            	include "_anim\Eggman.asm"
0001856E                            ; ---------------------------------------------------------------------------
0001856E                            ; Animation script - Eggman (bosses)
0001856E                            ; ---------------------------------------------------------------------------
0001856E 0000                       		dc.w byte_17CD4-Ani_Eggman
00018570 0000                       		dc.w byte_17CD8-Ani_Eggman
00018572 0000                       		dc.w byte_17CDC-Ani_Eggman
00018574 0000                       		dc.w byte_17CE0-Ani_Eggman
00018576 0000                       		dc.w byte_17CE4-Ani_Eggman
00018578 0000                       		dc.w byte_17CE8-Ani_Eggman
0001857A 0000                       		dc.w byte_17CEC-Ani_Eggman
0001857C 0000                       		dc.w byte_17CF0-Ani_Eggman
0001857E 0000                       		dc.w byte_17CF4-Ani_Eggman
00018580 0000                       		dc.w byte_17CF8-Ani_Eggman
00018582 0000                       		dc.w byte_17CFC-Ani_Eggman
00018584 0000                       		dc.w byte_17D00-Ani_Eggman
00018586 0F00 FF00                  byte_17CD4:	dc.b $F, 0, $FF, 0
0001858A 0501 02FF                  byte_17CD8:	dc.b 5,	1, 2, $FF
0001858E 0301 02FF                  byte_17CDC:	dc.b 3,	1, 2, $FF
00018592 0101 02FF                  byte_17CE0:	dc.b 1,	1, 2, $FF
00018596 0403 04FF                  byte_17CE4:	dc.b 4,	3, 4, $FF
0001859A 1F05 01FF                  byte_17CE8:	dc.b $1F, 5, 1,	$FF
0001859E 0306 01FF                  byte_17CEC:	dc.b 3,	6, 1, $FF
000185A2 0F0A FF00                  byte_17CF0:	dc.b $F, $A, $FF, 0
000185A6 0308 09FF                  byte_17CF4:	dc.b 3,	8, 9, $FF
000185AA 0108 09FF                  byte_17CF8:	dc.b 1,	8, 9, $FF
000185AE 0F07 FF00                  byte_17CFC:	dc.b $F, 7, $FF, 0
000185B2 0209 080B 0C0B 0C09 08FE+  byte_17D00:	dc.b 2,	9, 8, $B, $C, $B, $C, 9, 8, $FE, 2, 0
000185BE                            		even
000185BE                            		even
000185BE                            Ani_TetoB:
000185BE                            	include "_anim\TetoB.asm"
000185BE                            ; ---------------------------------------------------------------------------
000185BE                            ; Animation script - Eggman (bosses)
000185BE                            ; ---------------------------------------------------------------------------
000185BE 0000                       		dc.w spin-Ani_TetoB
000185C0 0000                       		dc.w static-Ani_TetoB
000185C2 0000                       		dc.w static2-Ani_TetoB
000185C4 0400 0102 03FF 00          spin:	dc.b 4, 0, 1, 2, 3, $FF, 0
000185CB 0500 FF                    static:	dc.b 5,	0, $FF
000185CE 0501 FF                    static2:	dc.b 5,	1, $FF
000185D2 00                         		even
000185D2 00                         		even
000185D2                            ; ---------------------------------------------------------------------------
000185D2                            ; Sprite mappings - Eggman (boss levels)
000185D2                            ; ---------------------------------------------------------------------------
000185D2                            Map_Eggman:
000185D2                            	include "_maps\Eggman.asm"
000185D2                            Map_dc7e:
000185D2 0000                       Map_dc7e_0: 	dc.w Map_dc7e_1A-Map_dc7e
000185D4 0000                       Map_dc7e_2: 	dc.w Map_dc7e_39-Map_dc7e
000185D6 0000                       Map_dc7e_4: 	dc.w Map_dc7e_44-Map_dc7e
000185D8 0000                       Map_dc7e_6: 	dc.w Map_dc7e_4F-Map_dc7e
000185DA 0000                       Map_dc7e_8: 	dc.w Map_dc7e_5F-Map_dc7e
000185DC 0000                       Map_dc7e_A: 	dc.w Map_dc7e_6F-Map_dc7e
000185DE 0000                       Map_dc7e_C: 	dc.w Map_dc7e_7F-Map_dc7e
000185E0 0000                       Map_dc7e_E: 	dc.w Map_dc7e_8F-Map_dc7e
000185E2 0000                       Map_dc7e_10: 	dc.w Map_dc7e_A4-Map_dc7e
000185E4 0000                       Map_dc7e_12: 	dc.w Map_dc7e_AA-Map_dc7e
000185E6 0000                       Map_dc7e_14: 	dc.w Map_dc7e_B0-Map_dc7e
000185E8 0000                       Map_dc7e_16: 	dc.w Map_dc7e_B1-Map_dc7e
000185EA 0000                       Map_dc7e_18: 	dc.w Map_dc7e_BC-Map_dc7e
000185EC 06                         Map_dc7e_1A: 	dc.b $6
000185ED EC01 000A E4               	dc.b $EC, $1, $0, $A, $E4
000185F2 EC05 000C 0C               	dc.b $EC, $5, $0, $C, $C
000185F7 FC0E 2010 E4               	dc.b $FC, $E, $20, $10, $E4
000185FC FC0E 201C 04               	dc.b $FC, $E, $20, $1C, $4
00018601 140C 2028 EC               	dc.b $14, $C, $20, $28, $EC
00018606 1400 202C 0C               	dc.b $14, $0, $20, $2C, $C
0001860B 02                         Map_dc7e_39: 	dc.b $2
0001860C E404 0000 F4               	dc.b $E4, $4, $0, $0, $F4
00018611 EC0D 0002 EC               	dc.b $EC, $D, $0, $2, $EC
00018616 02                         Map_dc7e_44: 	dc.b $2
00018617 E404 0000 F4               	dc.b $E4, $4, $0, $0, $F4
0001861C EC0D 0035 EC               	dc.b $EC, $D, $0, $35, $EC
00018621 03                         Map_dc7e_4F: 	dc.b $3
00018622 E408 003D F4               	dc.b $E4, $8, $0, $3D, $F4
00018627 EC09 0040 EC               	dc.b $EC, $9, $0, $40, $EC
0001862C EC05 0046 04               	dc.b $EC, $5, $0, $46, $4
00018631 03                         Map_dc7e_5F: 	dc.b $3
00018632 E408 004A F4               	dc.b $E4, $8, $0, $4A, $F4
00018637 EC09 004D EC               	dc.b $EC, $9, $0, $4D, $EC
0001863C EC05 0053 04               	dc.b $EC, $5, $0, $53, $4
00018641 03                         Map_dc7e_6F: 	dc.b $3
00018642 E408 0057 F4               	dc.b $E4, $8, $0, $57, $F4
00018647 EC09 005A EC               	dc.b $EC, $9, $0, $5A, $EC
0001864C EC05 0060 04               	dc.b $EC, $5, $0, $60, $4
00018651 03                         Map_dc7e_7F: 	dc.b $3
00018652 E404 0064 04               	dc.b $E4, $4, $0, $64, $4
00018657 E404 0000 F4               	dc.b $E4, $4, $0, $0, $F4
0001865C EC0D 0035 EC               	dc.b $EC, $D, $0, $35, $EC
00018661 04                         Map_dc7e_8F: 	dc.b $4
00018662 E409 0066 F4               	dc.b $E4, $9, $0, $66, $F4
00018667 E408 0057 F4               	dc.b $E4, $8, $0, $57, $F4
0001866C EC09 005A EC               	dc.b $EC, $9, $0, $5A, $EC
00018671 EC05 0060 04               	dc.b $EC, $5, $0, $60, $4
00018676 01                         Map_dc7e_A4: 	dc.b $1
00018677 0405 002D 22               	dc.b $4, $5, $0, $2D, $22
0001867C 01                         Map_dc7e_AA: 	dc.b $1
0001867D 0405 0031 22               	dc.b $4, $5, $0, $31, $22
00018682 00                         Map_dc7e_B0: 	dc.b $0
00018683 02                         Map_dc7e_B1: 	dc.b $2
00018684 0008 012A 22               	dc.b $0, $8, $1, $2A, $22
00018689 0808 112A 22               	dc.b $8, $8, $11, $2A, $22
0001868E 02                         Map_dc7e_BC: 	dc.b $2
0001868F F80B 012D 22               	dc.b $F8, $B, $1, $2D, $22
00018694 0001 0139 3A               	dc.b $0, $1, $1, $39, $3A
0001869A 00                         	even
0001869A 00                         	even
0001869A                            
0001869A                            ; ---------------------------------------------------------------------------
0001869A                            ; Sprite mappings - extra boss items (e.g. swinging ball on a chain in GHZ)
0001869A                            ; ---------------------------------------------------------------------------
0001869A                            Map_BossItems:
0001869A                            	include "_maps\Boss items.asm"
0001869A                            ; ---------------------------------------------------------------------------
0001869A                            ; Sprite mappings - extra boss items (e.g. swinging ball on a chain in GHZ)
0001869A                            ; ---------------------------------------------------------------------------
0001869A 0000 0000                  		dc.w byte_17DE4-Map_BossItems, byte_17DEA-Map_BossItems
0001869E 0000 0000                  		dc.w byte_17DF6-Map_BossItems, byte_17DFC-Map_BossItems
000186A2 0000 0000                  		dc.w byte_17E02-Map_BossItems, byte_17E08-Map_BossItems
000186A6 0000 0000                  		dc.w byte_17E1E-Map_BossItems, byte_17E2A-Map_BossItems
000186AA 01                         byte_17DE4:	dc.b 1
000186AB F805 0000 F8               		dc.b $F8, 5, 0,	0, $F8
000186B0 02                         byte_17DEA:	dc.b 2
000186B1 FC04 0004 F8               		dc.b $FC, 4, 0,	4, $F8
000186B6 F805 0000 F8               		dc.b $F8, 5, 0,	0, $F8
000186BB 00                         		dc.b 0
000186BC 01                         byte_17DF6:	dc.b 1
000186BD FC00 0006 FC               		dc.b $FC, 0, 0,	6, $FC
000186C2 01                         byte_17DFC:	dc.b 1
000186C3 1409 0007 F4               		dc.b $14, 9, 0,	7, $F4
000186C8 01                         byte_17E02:	dc.b 1
000186C9 1405 000D F8               		dc.b $14, 5, 0,	$D, $F8
000186CE 04                         byte_17E08:	dc.b 4
000186CF F004 0011 F8               		dc.b $F0, 4, 0,	$11, $F8
000186D4 F801 0013 F8               		dc.b $F8, 1, 0,	$13, $F8
000186D9 F801 0813 00               		dc.b $F8, 1, 8,	$13, 0
000186DE 0804 0015 F8               		dc.b 8,	4, 0, $15, $F8
000186E3 00                         		dc.b 0
000186E4 02                         byte_17E1E:	dc.b 2
000186E5 0005 0017 00               		dc.b 0,	5, 0, $17, 0
000186EA 0000 001B 10               		dc.b 0,	0, 0, $1B, $10
000186EF 00                         		dc.b 0
000186F0 02                         byte_17E2A:	dc.b 2
000186F1 1804 001C 00               		dc.b $18, 4, 0,	$1C, 0
000186F6 000B 001E 10               		dc.b 0,	$B, 0, $1E, $10
000186FC 00                         		even
000186FC 00                         		even
000186FC                            
000186FC                            ; ===========================================================================
000186FC                            ; ---------------------------------------------------------------------------
000186FC                            ; Object 77 - Fatass teto boss fight in LZ -STDH
000186FC                            ; ---------------------------------------------------------------------------
000186FC                            
000186FC                            
000186FC                            obj77:					; XREF: Obj_Index
000186FC 7000                       		moveq	#0,d0
000186FE 1028 0024                  		move.b	$24(a0),d0
00018702 323B 0000                  		move.w	obj77_Index(pc,d0.w),d1
00018706 4EFB 1000                  		jmp	obj77_Index(pc,d1.w)
0001870A                            ; ===========================================================================
0001870A 0000                       obj77_Index:	dc.w obj77_Main-obj77_Index
0001870C 0000                       		dc.w obj77_ShipMain-obj77_Index
0001870E 0000                       		dc.w obj77_FaceMain-obj77_Index
00018710 0000                       		dc.w obj77_FlameMain-obj77_Index
00018712                            
00018712 0200                       obj77_ObjData:	dc.b 2,	0		; routine counter, animation
00018714 0401                       		dc.b 4,	1
00018716 0607                       		dc.b 6,	7
00018718                            ; ===========================================================================
00018718                            
00018718                            obj77_Main:				; XREF: obj77_Index
00018718 45F9 0001 8712             		lea	(obj77_ObjData).l,a2
0001871E 2248                       		movea.l	a0,a1
00018720 7202                       		moveq	#2,d1
00018722 6000                       		bra.s	obj77_LoadBoss
00018724                            ; ===========================================================================
00018724                            
00018724                            obj77_Loop:
00018724 4EB9 0000 E1FE             		jsr	SingleObjLoad2
0001872A 6600                       		bne.s	loc2_17772
0001872C                            
0001872C                            obj77_LoadBoss:				; XREF: obj77_Main
0001872C 135A 0024                  		move.b	(a2)+,$24(a1)
00018730 12BC 0077                  		move.b	#$77,0(a1)
00018734 3368 0008 0008             		move.w	8(a0),8(a1)
0001873A 3368 000C 000C             		move.w	$C(a0),$C(a1)
00018740 237C 0000 0000 0004        		move.l	#Map_TetoBoss,4(a1)
00018748 337C 0400 0002             		move.w	#$400,2(a1)
0001874E 137C 0004 0001             		move.b	#4,1(a1)
00018754 137C 0020 0019             		move.b	#$20,$19(a1)
0001875A 137C 0003 0018             		move.b	#3,$18(a1)
00018760 135A 001C                  		move.b	(a2)+,$1C(a1)
00018764 2348 0034                  		move.l	a0,$34(a1)
00018768 51C9 FFBA                  		dbf	d1,obj77_Loop	; repeat sequence 2 more times
0001876C                            
0001876C                            loc2_17772:
0001876C 3168 0008 0030             		move.w	8(a0),$30(a0)
00018772 3168 000C 0038             		move.w	$C(a0),$38(a0)
00018778 117C 000F 0020             		move.b	#$F,$20(a0)
0001877E 117C 0008 0021             		move.b	#8,$21(a0)	; set number of	hits to	8
00018784                            
00018784                            obj77_ShipMain:				; XREF: obj77_Index
00018784 7000                       		moveq	#0,d0
00018786 1028 0025                  		move.b	$25(a0),d0
0001878A 323B 0000                  		move.w	obj77_ShipIndex(pc,d0.w),d1
0001878E 4EBB 1000                  		jsr	obj77_ShipIndex(pc,d1.w)
00018792 43F9 0001 85BE             		lea	(Ani_TetoB).l,a1
00018798 4EB9 0000 AE22             		jsr	AnimateSprite
0001879E 1028 0022                  		move.b	$22(a0),d0
000187A2 0200 0003                  		andi.b	#3,d0
000187A6 0228 00FC 0001             		andi.b	#$FC,1(a0)
000187AC 8128 0001                  		or.b	d0,1(a0)
000187B0 4EF9 0000 DD62             		jmp	DisplaySprite
000187B6                            ; ===========================================================================
000187B6 0000                       obj77_ShipIndex:dc.w obj77_ShipStart-obj77_ShipIndex
000187B8 0000                       		dc.w obj77_MakeBall-obj77_ShipIndex
000187BA 0000                       		dc.w obj77_ShipMove-obj77_ShipIndex
000187BC 0000                       		dc.w loc2_17954-obj77_ShipIndex
000187BE 0000                       		dc.w fatassruns-obj77_ShipIndex		
000187C0 0000                       		dc.w loc2_1797A-obj77_ShipIndex
000187C2 0000                       		dc.w loc2_179AC-obj77_ShipIndex
000187C4 0000                       		dc.w loc2_179F6-obj77_ShipIndex
000187C6                            ; ===========================================================================
000187C6                            
000187C6                            obj77_ShipStart:			; XREF: obj77_ShipIndex
000187C6                            	;	move.w	#$100,$12(a0)	; move ship down
000187C6 6100 F964                  		bsr.w	BossMove
000187CA 0C68 06E0 0038             		cmpi.w	#$6E0,$38(a0)
000187D0 6600                       		bne.s	loc2_177E6
000187D2 317C 0000 0012             		move.w	#0,$12(a0)	; stop ship
000187D8 5428 0025                  		addq.b	#2,$25(a0)	; goto next routine
000187DC                            
000187DC                            loc2_177E6:
000187DC                            ;		move.b	$3F(a0),d0
000187DC                            ;		jsr	(CalcSine).l
000187DC EC40                       		asr.w	#6,d0
000187DE D068 0038                  		add.w	$38(a0),d0
000187E2 3140 000C                  		move.w	d0,$C(a0)
000187E6 3168 0030 0008             		move.w	$30(a0),8(a0)
000187EC 5428 003F                  		addq.b	#2,$3F(a0)
000187F0 0C28 000A 0025             		cmpi.b	#$A,$25(a0)
000187F6 6400                       		bcc.s	locret_1784A2
000187F8 4A28 0022                  		tst.b	$22(a0)
000187FC 6B00                       		bmi.s	loc2_1784C
000187FE 4A28 0020                  		tst.b	$20(a0)
00018802 6600                       		bne.s	locret_1784A2
00018804 4A28 003E                  		tst.b	$3E(a0)
00018808 6600                       		bne.s	obj77_ShipFlash
0001880A 117C 0060 003E             		move.b	#$60,$3E(a0)	; set number of	times for ship to flash
00018810 303C 00AC                  		move.w	#$AC,d0
00018814 4EB9 0000 15C0             		jsr	(PlaySound_Special).l ;	play boss damage sound
0001881A                            
0001881A                            obj77_ShipFlash:
0001881A 43F8 FB22                  		lea	($FFFFFB22).w,a1 ; load	2nd pallet, 2nd	entry
0001881E 7000                       		moveq	#0,d0		; move 0 (black) to d0
00018820 4A51                       		tst.w	(a1)
00018822 6600                       		bne.s	loc2_1783C
00018824 303C 0EEE                  		move.w	#$EEE,d0	; move 0EEE (white) to d0
00018828                            
00018828                            loc2_1783C:
00018828 3280                       		move.w	d0,(a1)		; load colour stored in	d0
0001882A 5328 003E                  		subq.b	#1,$3E(a0)
0001882E 6600                       		bne.s	locret_1784A2
00018830 117C 000F 0020             		move.b	#$F,$20(a0)
00018836                            
00018836                            locret_1784A2:
00018836 4E75                       		rts	
00018838                            ; ===========================================================================
00018838                            
00018838                            loc2_1784C:				; XREF: loc2_177E6
00018838 7064                       		moveq	#100,d0
0001883A 6100 0000                  		bsr.w	AddPoints
0001883E 117C 000A 0025             		move.b	#$A,$25(a0)
00018844 317C 00B3 003C             		move.w	#$B3,$3C(a0)
0001884A 4E75                       		rts	
0001884C                            ; ===========================================================================
0001884C                            
0001884C                            obj77_MakeBall:				; XREF: obj77_ShipIndex
0001884C 317C FF00 0010             		move.w	#-$100,$10(a0)
00018852 117C 0001 001C             		move.b	#1,$1C(a0)	; it runs
00018858 6100 F8D2                  		bsr.w	BossMove
0001885C 0C68 1E00 0030             		cmpi.w	#$1E00,$30(a0)
00018862 6600                       		bne.s	loc2_17916
00018864 317C 0000 0010             		move.w	#0,$10(a0)
0001886A 117C 0002 001C             		move.b	#2,$1C(a0)	; stare
00018870 317C 0000 0012             		move.w	#0,$12(a0)
00018876 5428 0025                  		addq.b	#2,$25(a0)
0001887A                            
0001887A                            loc2_17910:
0001887A 317C 0077 003C             		move.w	#$77,$3C(a0)
00018880                            
00018880                            loc2_17916:
00018880 6000 FF5A                  		bra.w	loc2_177E6
00018884                            ; ===========================================================================
00018884                            
00018884                            obj77_ShipMove:				; XREF: obj77_ShipIndex
00018884 6100 F8A6                  		bsr.w	BossMove
00018888 5368 003C                  		subq.w	#1,$3C(a0)
0001888C 6A00                       		bpl.s	loc2_17950 ; if time remains go here
0001888E 117C 0000 001C             		move.b	#0,$1C(a0)	; make it spin
00018894 117C 0087 0020             		move.b	#$87,$20(a0) ; the spinning hurts you
0001889A 317C FE00 0010             		move.w	#-$200,$10(a0)	; move the ship	sideways
000188A0 0C68 1D10 0030             		cmpi.w	#$1D10,$30(a0) ; is teto here
000188A6 6600                       		bne.s	loc2_17950 ; if not branch
000188A8                            
000188A8                            fatass_attack:
000188A8 317C 0000 0010             		move.w	#0,$10(a0) ; stop her
000188AE 317C FE00 0012             		move.w	#-$200,$12(a0) ; OH SHIT SHES GOING UP
000188B4 0C68 0680 0038              		cmpi.w	#$680,$38(a0) ; is she here
000188BA 6600                       		bne.s	loc2_17950    ; if not you know the drill
000188BC 5428 0025                  		addq.b	#2,$25(a0)	; next routine!
000188C0 317C 0000 0012             		move.w	#0,$12(a0) ; stop her		
000188C6                            
000188C6                            loc2_17950:
000188C6 6000 FF14                  		bra.w	loc2_177E6
000188CA                            ; ===========================================================================
000188CA                            
000188CA                            loc2_17954:				; XREF: obj77_ShipIndex
000188CA 6100 F860                  		bsr.w	BossMove
000188CE 317C 0400 0012             		move.w	#$400,$12(a0) ; RUN A EARTHQUAKE!!
000188D4                            		; i suck at programming
000188D4 0C68 06E0 0038              		cmpi.w	#$6E0,$38(a0) ; is she back to the ground
000188DA 6600                       		bne.s	loc2_17976    ; if not blah blah
000188DC 317C 0000 0012             		move.w	#0,$12(a0) ; stop her		
000188E2 5428 0025                  		addq.b	#2,$25(a0)	; next routine!
000188E6 303C 00B9                  		move.w	#$B9,d0
000188EA 4EB9 0000 15BA             		jsr	(PlaySound).l	; play the earthquake sound
000188F0                            
000188F0                            Peartobombs:	
000188F0 4EB9 0000 E1FE                		jsr	SingleObjLoad2
000188F6 6600                       		bne.s	secondone
000188F8 12BC 0019                  		move.b	#$19,0(a1)	; load pearto bomb
000188FC 337C 1D70 0008             		move.w	#$1D70,8(a1)
00018902 337C 0670 000C             		move.w	#$670,$C(a1)
00018908                            secondone:		
00018908 4EB9 0000 E1FE                		jsr	SingleObjLoad2
0001890E 6600                       		bne.s	loc2_17976		
00018910 12BC 0019                  		move.b	#$19,0(a1)	; load pearto bomb 2
00018914 337C 1D20 0008             		move.w	#$1D20,8(a1)
0001891A 337C 0670 000C             		move.w	#$670,$C(a1)
00018920                            lastone:
00018920 4EB9 0000 E1FE                		jsr	SingleObjLoad2
00018926 6600                       		bne.s	loc2_17976		
00018928 12BC 0019                  		move.b	#$19,0(a1)	; load pearto bomb 3
0001892C 337C 1E00 0008             		move.w	#$1E00,8(a1)
00018932 337C 0670 000C             		move.w	#$670,$C(a1)
00018938                            		
00018938                            loc2_17976:
00018938 6000 FEA2                  		bra.w	loc2_177E6
0001893C                            		
0001893C                            ; ===========================================================================
0001893C                            Fatassruns:
0001893C 6100 F7EE                   		bsr.w	BossMove
00018940 317C 0200 0010             		move.w	#$200,$10(a0)	; IT RUNS!!
00018946 0C68 1E00 0030             		cmpi.w	#$1E00,$30(a0) ; is she back here
0001894C 6600                       		bne.s	processstuff ; is not go here
0001894E 317C 0000 0010             		move.w	#0,$10(a0)	; stop'
00018954 117C 0002 001C             		move.b	#2,$1C(a0)	; stareeeee
0001895A 5928 0025                  		subq.b	#4,$25(a0) ; make the boss loop
0001895E 317C 0077 003C             		move.w	#$77,$3C(a0) ; timeerr
00018964 117C 000F 0020             		move.b	#$F,$20(a0) ; now you can hit her
0001896A                            		
0001896A                            		
0001896A                            processstuff:
0001896A 6000 FE70                  		bra.w	loc2_177E6
0001896E                            ; ===========================================================================
0001896E                            
0001896E                            loc2_1797A:				; XREF: obj77_ShipIndex
0001896E 5368 003C                  		subq.w	#1,$3C(a0)
00018972 6B00                       		bmi.s	loc2_17984
00018974 6000 F774                  		bra.w	BossDefeated
00018978                            ; ===========================================================================
00018978                            
00018978                            loc2_17984:
00018978 08E8 0000 0022             		bset	#0,$22(a0)
0001897E 08A8 0007 0022             		bclr	#7,$22(a0)
00018984 4268 0010                  		clr.w	$10(a0)
00018988 5428 0025                  		addq.b	#2,$25(a0)
0001898C 317C FFDA 003C             		move.w	#-$26,$3C(a0)
00018992 4A38 F7A7                  		tst.b	($FFFFF7A7).w
00018996 6600                       		bne.s	locret_179AA2
00018998 11FC 0001 F7A7             		move.b	#1,($FFFFF7A7).w
0001899E                            
0001899E                            locret_179AA2:
0001899E 4E75                       		rts	
000189A0                            ; ===========================================================================
000189A0                            
000189A0                            loc2_179AC:				; XREF: obj77_ShipIndex
000189A0 5268 003C                  		addq.w	#1,$3C(a0)
000189A4 6700                       		beq.s	loc2_179BC
000189A6 6A00                       		bpl.s	loc2_179C2
000189A8 0668 0018 0012             		addi.w	#$18,$12(a0)
000189AE 6000                       		bra.s	loc2_179EE
000189B0                            ; ===========================================================================
000189B0                            
000189B0                            loc2_179BC:
000189B0 4268 0012                  		clr.w	$12(a0)
000189B4 6000                       		bra.s	loc2_179EE
000189B6                            ; ===========================================================================
000189B6                            
000189B6                            loc2_179C2:
000189B6 0C68 0030 003C             		cmpi.w	#$30,$3C(a0)
000189BC 6500                       		bcs.s	loc2_179DA
000189BE 6700                       		beq.s	loc2_179E0
000189C0 0C68 0038 003C             		cmpi.w	#$38,$3C(a0)
000189C6 6500                       		bcs.s	loc2_179EE
000189C8 5428 0025                  		addq.b	#2,$25(a0)
000189CC 6000                       		bra.s	loc2_179EE
000189CE                            ; ===========================================================================
000189CE                            
000189CE                            loc2_179DA:
000189CE 5168 0012                  		subq.w	#8,$12(a0)
000189D2 6000                       		bra.s	loc2_179EE
000189D4                            ; ===========================================================================
000189D4                            
000189D4                            loc2_179E0:
000189D4 4268 0012                  		clr.w	$12(a0)
000189D8 303C 0097                  		move.w	#$97,d0
000189DC 4EB9 0000 15BA             		jsr	(PlaySound).l	; play lz3 music
000189E2                            
000189E2                            loc2_179EE:
000189E2 6100 F748                  		bsr.w	BossMove
000189E6 6000 FDF4                  		bra.w	loc2_177E6
000189EA                            ; ===========================================================================
000189EA                            
000189EA                            loc2_179F6:				; XREF: obj77_ShipIndex
000189EA 317C 0400 0010             		move.w	#$400,$10(a0)
000189F0 317C FFC0 0012             		move.w	#-$40,$12(a0)
000189F6 0C78 1F00 F72A             		cmpi.w	#$1F00,($FFFFF72A).w
000189FC 6700                       		beq.s	loc2_17A10
000189FE 5478 F72A                  		addq.w	#2,($FFFFF72A).w
00018A02 6000                       		bra.s	loc2_17A16
00018A04                            ; ===========================================================================
00018A04                            
00018A04                            loc2_17A10:
00018A04 4A28 0001                  		tst.b	1(a0)
00018A08 6A00                       		bpl.s	obj77_ShipDel
00018A0A                            
00018A0A                            loc2_17A16:
00018A0A 6100 F720                  		bsr.w	BossMove
00018A0E 6000 FDCC                  		bra.w	loc2_177E6
00018A12                            ; ===========================================================================
00018A12                            
00018A12                            obj77_ShipDel:
00018A12 4EF9 0000 DD9E             		jmp	DeleteObject
00018A18                            ; ===========================================================================
00018A18                            
00018A18                            obj77_FaceMain:				; XREF: obj77_Index
00018A18 4E75                       		rts
00018A1A                            ; ===========================================================================
00018A1A                            
00018A1A                            obj77_FlameMain:			; XREF: obj77_Index
00018A1A 4E75                       		rts
00018A1C                            ; ===========================================================================
00018A1C                            
00018A1C                            obj77_Display:				; XREF: obj77_FaceDisp; obj77_FlameDisp
00018A1C 43F9 0001 85BE             		lea	(Ani_TetoB).l,a1
00018A22 4EB9 0000 AE22             		jsr	AnimateSprite
00018A28 4EF9 0000 DD62             		jmp	DisplaySprite
00018A2E                            ; ---------------------------------------------------------------------------
00018A2E                            ; Sprite mappings - Fatass teto boss
00018A2E                            ; ---------------------------------------------------------------------------
00018A2E                            Map_TetoBoss:
00018A2E                            	include "_maps\tetoboss.asm"
00018A2E                            Map_f09a:
00018A2E 0000                       Map_f09a_0: 	dc.w Map_f09a_8-Map_f09a
00018A30 0000                       Map_f09a_2: 	dc.w Map_f09a_18-Map_f09a
00018A32 0000                       Map_f09a_4: 	dc.w Map_f09a_37-Map_f09a
00018A34 0000                       Map_f09a_6: 	dc.w Map_f09a_47-Map_f09a
00018A36 03                         Map_f09a_8: 	dc.b $3
00018A37 E50F 602B F0               	dc.b $E5, $F, $60, $2B, $F0
00018A3C 050E 603B F0               	dc.b $5, $E, $60, $3B, $F0
00018A41 DD00 6047 F8               	dc.b $DD, $0, $60, $47, $F8
00018A46 06                         Map_f09a_18: 	dc.b $6
00018A47 EC0E 6000 E4               	dc.b $EC, $E, $60, $0, $E4
00018A4C 040E 600C EC               	dc.b $4, $E, $60, $C, $EC
00018A51 E408 6018 F4               	dc.b $E4, $8, $60, $18, $F4
00018A56 1C00 601B F4               	dc.b $1C, $0, $60, $1B, $F4
00018A5B EC0A 601C 04               	dc.b $EC, $A, $60, $1C, $4
00018A60 0406 6025 0C               	dc.b $4, $6, $60, $25, $C
00018A65 03                         Map_f09a_37: 	dc.b $3
00018A66 E50F 682B F0               	dc.b $E5, $F, $68, $2B, $F0
00018A6B 050E 683B F0               	dc.b $5, $E, $68, $3B, $F0
00018A70 DD00 6847 00               	dc.b $DD, $0, $68, $47, $0
00018A75 06                         Map_f09a_47: 	dc.b $6
00018A76 ED0E 6048 E4               	dc.b $ED, $E, $60, $48, $E4
00018A7B 050E 6054 EC               	dc.b $5, $E, $60, $54, $EC
00018A80 E508 6060 F4               	dc.b $E5, $8, $60, $60, $F4
00018A85 DD00 6063 FC               	dc.b $DD, $0, $60, $63, $FC
00018A8A ED0A 6064 04               	dc.b $ED, $A, $60, $64, $4
00018A8F 0502 606D 0C               	dc.b $5, $2, $60, $6D, $C
00018A94                            	even
00018A94                            	even
00018A94                            ; ===========================================================================
00018A94                            ; ---------------------------------------------------------------------------
00018A94                            ; Object 73 - Eggman (MZ)
00018A94                            ; ---------------------------------------------------------------------------
00018A94                            
00018A94                            Obj73:					; XREF: Obj_Index
00018A94 7000                       		moveq	#0,d0
00018A96 1028 0024                  		move.b	$24(a0),d0
00018A9A 323B 0000                  		move.w	Obj73_Index(pc,d0.w),d1
00018A9E 4EFB 1000                  		jmp	Obj73_Index(pc,d1.w)
00018AA2                            ; ===========================================================================
00018AA2 0000                       Obj73_Index:	dc.w Obj73_Main-Obj73_Index
00018AA4 0000                       		dc.w Obj73_ShipMain-Obj73_Index
00018AA6 0000                       		dc.w Obj73_FaceMain-Obj73_Index
00018AA8 0000                       		dc.w Obj73_FlameMain-Obj73_Index
00018AAA 0000                       		dc.w Obj73_TubeMain-Obj73_Index
00018AAC                            
00018AAC 0200 04                    Obj73_ObjData:	dc.b 2,	0, 4		; routine number, animation, priority
00018AAF 0401 04                    		dc.b 4,	1, 4
00018AB2 0607 04                    		dc.b 6,	7, 4
00018AB5 0800 03                    		dc.b 8,	0, 3
00018AB8                            ; ===========================================================================
00018AB8                            
00018AB8                            Obj73_Main:				; XREF: Obj73_Index
00018AB8 3168 0008 0030             		move.w	8(a0),$30(a0)
00018ABE 3168 000C 0038             		move.w	$C(a0),$38(a0)
00018AC4 117C 000F 0020             		move.b	#$F,$20(a0)
00018ACA 117C 0008 0021             		move.b	#8,$21(a0)	; set number of	hits to	8
00018AD0 45FA FFDA                  		lea	Obj73_ObjData(pc),a2
00018AD4 2248                       		movea.l	a0,a1
00018AD6 7203                       		moveq	#3,d1
00018AD8 6000                       		bra.s	Obj73_LoadBoss
00018ADA                            ; ===========================================================================
00018ADA                            
00018ADA                            Obj73_Loop:
00018ADA 4EB9 0000 E1FE             		jsr	SingleObjLoad2
00018AE0 6600                       		bne.s	Obj73_ShipMain
00018AE2 12BC 0073                  		move.b	#$73,0(a1)
00018AE6 3368 0008 0008             		move.w	8(a0),8(a1)
00018AEC 3368 000C 000C             		move.w	$C(a0),$C(a1)
00018AF2                            
00018AF2                            Obj73_LoadBoss:				; XREF: Obj73_Main
00018AF2 08A8 0000 0022             		bclr	#0,$22(a0)
00018AF8 4229 0025                  		clr.b	$25(a1)
00018AFC 135A 0024                  		move.b	(a2)+,$24(a1)
00018B00 135A 001C                  		move.b	(a2)+,$1C(a1)
00018B04 135A 0018                  		move.b	(a2)+,$18(a1)
00018B08 237C 0001 85D2 0004        		move.l	#Map_Eggman,4(a1)
00018B10 337C 0400 0002             		move.w	#$400,2(a1)
00018B16 137C 0004 0001             		move.b	#4,1(a1)
00018B1C 137C 0020 0019             		move.b	#$20,$19(a1)
00018B22 2348 0034                  		move.l	a0,$34(a1)
00018B26 51C9 FFB2                  		dbf	d1,Obj73_Loop	; repeat sequence 3 more times
00018B2A                            
00018B2A                            Obj73_ShipMain:
00018B2A 7000                       		moveq	#0,d0
00018B2C 1028 0025                  		move.b	$25(a0),d0
00018B30 323B 0000                  		move.w	Obj73_ShipIndex(pc,d0.w),d1
00018B34 4EBB 1000                  		jsr	Obj73_ShipIndex(pc,d1.w)
00018B38 43F9 0001 856E             		lea	(Ani_Eggman).l,a1
00018B3E 4EB9 0000 AE22             		jsr	AnimateSprite
00018B44 7003                       		moveq	#3,d0
00018B46 C028 0022                  		and.b	$22(a0),d0
00018B4A 0228 00FC 0001             		andi.b	#$FC,1(a0)
00018B50 8128 0001                  		or.b	d0,1(a0)
00018B54 4EF9 0000 DD62             		jmp	DisplaySprite
00018B5A                            ; ===========================================================================
00018B5A 0000                       Obj73_ShipIndex:dc.w loc_18302-Obj73_ShipIndex
00018B5C 0000                       		dc.w loc_183AA-Obj73_ShipIndex
00018B5E 0000                       		dc.w loc_184F6-Obj73_ShipIndex
00018B60 0000                       		dc.w loc_1852C-Obj73_ShipIndex
00018B62 0000                       		dc.w loc_18582-Obj73_ShipIndex
00018B64                            ; ===========================================================================
00018B64                            
00018B64                            loc_18302:				; XREF: Obj73_ShipIndex
00018B64 1028 003F                  		move.b	$3F(a0),d0
00018B68 5428 003F                  		addq.b	#2,$3F(a0)
00018B6C 4EB9 0000 2C64             		jsr	(CalcSine).l
00018B72 E440                       		asr.w	#2,d0
00018B74 3140 0012                  		move.w	d0,$12(a0)
00018B78 317C FF00 0010             		move.w	#-$100,$10(a0)
00018B7E 6100 F5AC                  		bsr.w	BossMove
00018B82 0C68 1910 0030             		cmpi.w	#$1910,$30(a0)
00018B88 6600                       		bne.s	loc_18334
00018B8A 5428 0025                  		addq.b	#2,$25(a0)
00018B8E 4228 0028                  		clr.b	$28(a0)
00018B92 42A8 0010                  		clr.l	$10(a0)
00018B96                            
00018B96                            loc_18334:
00018B96 4EB9 0000 2C3E             		jsr	(RandomNumber).l
00018B9C 1140 0034                  		move.b	d0,$34(a0)
00018BA0                            
00018BA0                            loc_1833E:
00018BA0 3168 0038 000C             		move.w	$38(a0),$C(a0)
00018BA6 3168 0030 0008             		move.w	$30(a0),8(a0)
00018BAC 0C28 0004 0025             		cmpi.b	#4,$25(a0)
00018BB2 6400                       		bcc.s	locret_18390
00018BB4 4A28 0022                  		tst.b	$22(a0)
00018BB8 6B00                       		bmi.s	loc_18392
00018BBA 4A28 0020                  		tst.b	$20(a0)
00018BBE 6600                       		bne.s	locret_18390
00018BC0 4A28 003E                  		tst.b	$3E(a0)
00018BC4 6600                       		bne.s	loc_18374
00018BC6 117C 0028 003E             		move.b	#$28,$3E(a0)
00018BCC 303C 00AC                  		move.w	#$AC,d0
00018BD0 4EB9 0000 15C0             		jsr	(PlaySound_Special).l ;	play boss damage sound
00018BD6                            
00018BD6                            loc_18374:
00018BD6 43F8 FB22                  		lea	($FFFFFB22).w,a1
00018BDA 7000                       		moveq	#0,d0
00018BDC 4A51                       		tst.w	(a1)
00018BDE 6600                       		bne.s	loc_18382
00018BE0 303C 0EEE                  		move.w	#$EEE,d0
00018BE4                            
00018BE4                            loc_18382:
00018BE4 3280                       		move.w	d0,(a1)
00018BE6 5328 003E                  		subq.b	#1,$3E(a0)
00018BEA 6600                       		bne.s	locret_18390
00018BEC 117C 000F 0020             		move.b	#$F,$20(a0)
00018BF2                            
00018BF2                            locret_18390:
00018BF2 4E75                       		rts	
00018BF4                            ; ===========================================================================
00018BF4                            
00018BF4                            loc_18392:				; XREF: loc_1833E
00018BF4 7064                       		moveq	#100,d0
00018BF6 6100 0000                  		bsr.w	AddPoints
00018BFA 117C 0004 0025             		move.b	#4,$25(a0)
00018C00 317C 00B4 003C             		move.w	#$B4,$3C(a0)
00018C06 4268 0010                  		clr.w	$10(a0)
00018C0A 4E75                       		rts	
00018C0C                            ; ===========================================================================
00018C0C                            
00018C0C                            loc_183AA:				; XREF: Obj73_ShipIndex
00018C0C 7000                       		moveq	#0,d0
00018C0E 1028 0028                  		move.b	$28(a0),d0
00018C12 303B 0000                  		move.w	off_183C2(pc,d0.w),d0
00018C16 4EBB 0000                  		jsr	off_183C2(pc,d0.w)
00018C1A 0228 0006 0028             		andi.b	#6,$28(a0)
00018C20 6000 FF7E                  		bra.w	loc_1833E
00018C24                            ; ===========================================================================
00018C24 0000                       off_183C2:	dc.w loc_183CA-off_183C2
00018C26 0000                       		dc.w Obj73_MakeLava2-off_183C2
00018C28 0000                       		dc.w loc_183CA-off_183C2
00018C2A 0000                       		dc.w Obj73_MakeLava2-off_183C2
00018C2C                            ; ===========================================================================
00018C2C                            
00018C2C                            loc_183CA:				; XREF: off_183C2
00018C2C 4A68 0010                  		tst.w	$10(a0)
00018C30 6600                       		bne.s	loc_183FE
00018C32 7040                       		moveq	#$40,d0
00018C34 0C68 022C 0038             		cmpi.w	#$22C,$38(a0)
00018C3A 6700                       		beq.s	loc_183E6
00018C3C 6500                       		bcs.s	loc_183DE
00018C3E 4440                       		neg.w	d0
00018C40                            
00018C40                            loc_183DE:
00018C40 3140 0012                  		move.w	d0,$12(a0)
00018C44 6000 F4E6                  		bra.w	BossMove
00018C48                            ; ===========================================================================
00018C48                            
00018C48                            loc_183E6:
00018C48 317C 0200 0010             		move.w	#$200,$10(a0)
00018C4E 317C 0100 0012             		move.w	#$100,$12(a0)
00018C54 0828 0000 0022             		btst	#0,$22(a0)
00018C5A 6600                       		bne.s	loc_183FE
00018C5C 4468 0010                  		neg.w	$10(a0)
00018C60                            
00018C60                            loc_183FE:
00018C60 0C28 0018 003E             		cmpi.b	#$18,$3E(a0)
00018C66 6400                       		bcc.s	Obj73_MakeLava
00018C68 6100 F4C2                  		bsr.w	BossMove
00018C6C 5968 0012                  		subq.w	#4,$12(a0)
00018C70                            
00018C70                            Obj73_MakeLava:
00018C70 5328 0034                  		subq.b	#1,$34(a0)
00018C74 6400                       		bcc.s	loc_1845C
00018C76 4EB9 0000 E1E8             		jsr	SingleObjLoad
00018C7C 6600                       		bne.s	loc_1844A
00018C7E 12BC 0014                  		move.b	#$14,0(a1)	; load lava ball object
00018C82 337C 02E8 000C             		move.w	#$2E8,$C(a1)	; set Y	position
00018C88 4EB9 0000 2C3E             		jsr	(RandomNumber).l
00018C8E 0280 0000 FFFF             		andi.l	#$FFFF,d0
00018C94 80FC 0050                  		divu.w	#$50,d0
00018C98 4840                       		swap	d0
00018C9A 0640 1878                  		addi.w	#$1878,d0
00018C9E 3340 0008                  		move.w	d0,8(a1)
00018CA2 EE09                       		lsr.b	#7,d1
00018CA4 337C 00FF 0028             		move.w	#$FF,$28(a1)
00018CAA                            
00018CAA                            loc_1844A:
00018CAA 4EB9 0000 2C3E             		jsr	(RandomNumber).l
00018CB0 0200 001F                  		andi.b	#$1F,d0
00018CB4 0600 0040                  		addi.b	#$40,d0
00018CB8 1140 0034                  		move.b	d0,$34(a0)
00018CBC                            
00018CBC                            loc_1845C:
00018CBC 0828 0000 0022             		btst	#0,$22(a0)
00018CC2 6700                       		beq.s	loc_18474
00018CC4 0C68 1910 0030             		cmpi.w	#$1910,$30(a0)
00018CCA 6D00                       		blt.s	locret_1849C
00018CCC 317C 1910 0030             		move.w	#$1910,$30(a0)
00018CD2 6000                       		bra.s	loc_18482
00018CD4                            ; ===========================================================================
00018CD4                            
00018CD4                            loc_18474:
00018CD4 0C68 1830 0030             		cmpi.w	#$1830,$30(a0)
00018CDA 6E00                       		bgt.s	locret_1849C
00018CDC 317C 1830 0030             		move.w	#$1830,$30(a0)
00018CE2                            
00018CE2                            loc_18482:
00018CE2 4268 0010                  		clr.w	$10(a0)
00018CE6 317C FE80 0012             		move.w	#-$180,$12(a0)
00018CEC 0C68 022C 0038             		cmpi.w	#$22C,$38(a0)
00018CF2 6400                       		bcc.s	loc_18498
00018CF4 4468 0012                  		neg.w	$12(a0)
00018CF8                            
00018CF8                            loc_18498:
00018CF8 5428 0028                  		addq.b	#2,$28(a0)
00018CFC                            
00018CFC                            locret_1849C:
00018CFC 4E75                       		rts	
00018CFE                            ; ===========================================================================
00018CFE                            
00018CFE                            Obj73_MakeLava2:			; XREF: off_183C2
00018CFE 6100 F42C                  		bsr.w	BossMove
00018D02 3028 0038                  		move.w	$38(a0),d0
00018D06 0440 022C                  		subi.w	#$22C,d0
00018D0A 6E00                       		bgt.s	locret_184F4
00018D0C 303C 022C                  		move.w	#$22C,d0
00018D10 4A68 0012                  		tst.w	$12(a0)
00018D14 6700                       		beq.s	loc_184EA
00018D16 4268 0012                  		clr.w	$12(a0)
00018D1A 317C 0050 003C             		move.w	#$50,$3C(a0)
00018D20 0868 0000 0022             		bchg	#0,$22(a0)
00018D26 4EB9 0000 E1E8             		jsr	SingleObjLoad
00018D2C 6600                       		bne.s	loc_184EA
00018D2E 3368 0030 0008             		move.w	$30(a0),8(a1)
00018D34 3368 0038 000C             		move.w	$38(a0),$C(a1)
00018D3A 0669 0018 000C             		addi.w	#$18,$C(a1)
00018D40 12BC 0074                  		move.b	#$74,(a1)	; load lava ball object
00018D44 137C 0001 0028             		move.b	#1,$28(a1)
00018D4A                            
00018D4A                            loc_184EA:
00018D4A 5368 003C                  		subq.w	#1,$3C(a0)
00018D4E 6600                       		bne.s	locret_184F4
00018D50 5428 0028                  		addq.b	#2,$28(a0)
00018D54                            
00018D54                            locret_184F4:
00018D54 4E75                       		rts	
00018D56                            ; ===========================================================================
00018D56                            
00018D56                            loc_184F6:				; XREF: Obj73_ShipIndex
00018D56 5368 003C                  		subq.w	#1,$3C(a0)
00018D5A 6B00                       		bmi.s	loc_18500
00018D5C 6000 F38C                  		bra.w	BossDefeated
00018D60                            ; ===========================================================================
00018D60                            
00018D60                            loc_18500:
00018D60 08E8 0000 0022             		bset	#0,$22(a0)
00018D66 08A8 0007 0022             		bclr	#7,$22(a0)
00018D6C 4268 0010                  		clr.w	$10(a0)
00018D70 5428 0025                  		addq.b	#2,$25(a0)
00018D74 317C FFDA 003C             		move.w	#-$26,$3C(a0)
00018D7A 4A38 F7A7                  		tst.b	($FFFFF7A7).w
00018D7E 6600                       		bne.s	locret_1852A
00018D80 11FC 0001 F7A7             		move.b	#1,($FFFFF7A7).w
00018D86 4268 0012                  		clr.w	$12(a0)
00018D8A                            
00018D8A                            locret_1852A:
00018D8A 4E75                       		rts	
00018D8C                            ; ===========================================================================
00018D8C                            
00018D8C                            loc_1852C:				; XREF: Obj73_ShipIndex
00018D8C 5268 003C                  		addq.w	#1,$3C(a0)
00018D90 6700                       		beq.s	loc_18544
00018D92 6A00                       		bpl.s	loc_1854E
00018D94 0C68 0270 0038             		cmpi.w	#$270,$38(a0)
00018D9A 6400                       		bcc.s	loc_18544
00018D9C 0668 0018 0012             		addi.w	#$18,$12(a0)
00018DA2 6000                       		bra.s	loc_1857A
00018DA4                            ; ===========================================================================
00018DA4                            
00018DA4                            loc_18544:
00018DA4 4268 0012                  		clr.w	$12(a0)
00018DA8 4268 003C                  		clr.w	$3C(a0)
00018DAC 6000                       		bra.s	loc_1857A
00018DAE                            ; ===========================================================================
00018DAE                            
00018DAE                            loc_1854E:
00018DAE 0C68 0030 003C             		cmpi.w	#$30,$3C(a0)
00018DB4 6500                       		bcs.s	loc_18566
00018DB6 6700                       		beq.s	loc_1856C
00018DB8 0C68 0038 003C             		cmpi.w	#$38,$3C(a0)
00018DBE 6500                       		bcs.s	loc_1857A
00018DC0 5428 0025                  		addq.b	#2,$25(a0)
00018DC4 6000                       		bra.s	loc_1857A
00018DC6                            ; ===========================================================================
00018DC6                            
00018DC6                            loc_18566:
00018DC6 5168 0012                  		subq.w	#8,$12(a0)
00018DCA 6000                       		bra.s	loc_1857A
00018DCC                            ; ===========================================================================
00018DCC                            
00018DCC                            loc_1856C:
00018DCC 4268 0012                  		clr.w	$12(a0)
00018DD0 303C 0083                  		move.w	#$83,d0
00018DD4 4EB9 0000 15BA             		jsr	(PlaySound).l	; play MZ music
00018DDA                            
00018DDA                            loc_1857A:
00018DDA 6100 F350                  		bsr.w	BossMove
00018DDE 6000 FDC0                  		bra.w	loc_1833E
00018DE2                            ; ===========================================================================
00018DE2                            
00018DE2                            loc_18582:				; XREF: Obj73_ShipIndex
00018DE2 317C 0500 0010             		move.w	#$500,$10(a0)
00018DE8 317C FFC0 0012             		move.w	#-$40,$12(a0)
00018DEE 0C78 1960 F72A             		cmpi.w	#$1960,($FFFFF72A).w
00018DF4 6400                       		bcc.s	loc_1859C
00018DF6 5478 F72A                  		addq.w	#2,($FFFFF72A).w
00018DFA 6000                       		bra.s	loc_185A2
00018DFC                            ; ===========================================================================
00018DFC                            
00018DFC                            loc_1859C:
00018DFC 4A28 0001                  		tst.b	1(a0)
00018E00 6A00                       		bpl.s	Obj73_ShipDel
00018E02                            
00018E02                            loc_185A2:
00018E02 6100 F328                  		bsr.w	BossMove
00018E06 6000 FD98                  		bra.w	loc_1833E
00018E0A                            ; ===========================================================================
00018E0A                            
00018E0A                            Obj73_ShipDel:
00018E0A 4EF9 0000 DD9E             		jmp	DeleteObject
00018E10                            ; ===========================================================================
00018E10                            
00018E10                            Obj73_FaceMain:				; XREF: Obj73_Index
00018E10 7000                       		moveq	#0,d0
00018E12 7201                       		moveq	#1,d1
00018E14 2268 0034                  		movea.l	$34(a0),a1
00018E18 1029 0025                  		move.b	$25(a1),d0
00018E1C 5540                       		subq.w	#2,d0
00018E1E 6600                       		bne.s	loc_185D2
00018E20 0829 0001 0028             		btst	#1,$28(a1)
00018E26 6700                       		beq.s	loc_185DA
00018E28 4A69 0012                  		tst.w	$12(a1)
00018E2C 6600                       		bne.s	loc_185DA
00018E2E 7204                       		moveq	#4,d1
00018E30 6000                       		bra.s	loc_185EE
00018E32                            ; ===========================================================================
00018E32                            
00018E32                            loc_185D2:
00018E32 5500                       		subq.b	#2,d0
00018E34 6B00                       		bmi.s	loc_185DA
00018E36 720A                       		moveq	#$A,d1
00018E38 6000                       		bra.s	loc_185EE
00018E3A                            ; ===========================================================================
00018E3A                            
00018E3A                            loc_185DA:
00018E3A 4A29 0020                  		tst.b	$20(a1)
00018E3E 6600                       		bne.s	loc_185E4
00018E40 7205                       		moveq	#5,d1
00018E42 6000                       		bra.s	loc_185EE
00018E44                            ; ===========================================================================
00018E44                            
00018E44                            loc_185E4:
00018E44 0C38 0004 D024             		cmpi.b	#4,($FFFFD024).w
00018E4A 6500                       		bcs.s	loc_185EE
00018E4C 7204                       		moveq	#4,d1
00018E4E                            
00018E4E                            loc_185EE:
00018E4E 1141 001C                  		move.b	d1,$1C(a0)
00018E52 5900                       		subq.b	#4,d0
00018E54 6600                       		bne.s	loc_18602
00018E56 117C 0006 001C             		move.b	#6,$1C(a0)
00018E5C 4A28 0001                  		tst.b	1(a0)
00018E60 6A00                       		bpl.s	Obj73_FaceDel
00018E62                            
00018E62                            loc_18602:
00018E62 6000                       		bra.s	Obj73_Display
00018E64                            ; ===========================================================================
00018E64                            
00018E64                            Obj73_FaceDel:
00018E64 4EF9 0000 DD9E             		jmp	DeleteObject
00018E6A                            ; ===========================================================================
00018E6A                            
00018E6A                            Obj73_FlameMain:			; XREF: Obj73_Index
00018E6A 117C 0007 001C             		move.b	#7,$1C(a0)
00018E70 2268 0034                  		movea.l	$34(a0),a1
00018E74 0C29 0008 0025             		cmpi.b	#8,$25(a1)
00018E7A 6D00                       		blt.s	loc_1862A
00018E7C 117C 000B 001C             		move.b	#$B,$1C(a0)
00018E82 4A28 0001                  		tst.b	1(a0)
00018E86 6A00                       		bpl.s	Obj73_FlameDel
00018E88 6000                       		bra.s	loc_18636
00018E8A                            ; ===========================================================================
00018E8A                            
00018E8A                            loc_1862A:
00018E8A 4A69 0010                  		tst.w	$10(a1)
00018E8E 6700                       		beq.s	loc_18636
00018E90 117C 0008 001C             		move.b	#8,$1C(a0)
00018E96                            
00018E96                            loc_18636:
00018E96 6000                       		bra.s	Obj73_Display
00018E98                            ; ===========================================================================
00018E98                            
00018E98                            Obj73_FlameDel:				; XREF: Obj73_FlameMain
00018E98 4EF9 0000 DD9E             		jmp	DeleteObject
00018E9E                            ; ===========================================================================
00018E9E                            
00018E9E                            Obj73_Display:
00018E9E 43F9 0001 856E             		lea	(Ani_Eggman).l,a1
00018EA4 4EB9 0000 AE22             		jsr	AnimateSprite
00018EAA                            
00018EAA                            loc_1864A:
00018EAA 2268 0034                  		movea.l	$34(a0),a1
00018EAE 3169 0008 0008             		move.w	8(a1),8(a0)
00018EB4 3169 000C 000C             		move.w	$C(a1),$C(a0)
00018EBA 1169 0022 0022             		move.b	$22(a1),$22(a0)
00018EC0 7003                       		moveq	#3,d0
00018EC2 C028 0022                  		and.b	$22(a0),d0
00018EC6 0228 00FC 0001             		andi.b	#-4,1(a0)
00018ECC 8128 0001                  		or.b	d0,1(a0)
00018ED0 4EF9 0000 DD62             		jmp	DisplaySprite
00018ED6                            ; ===========================================================================
00018ED6                            
00018ED6                            Obj73_TubeMain:				; XREF: Obj73_Index
00018ED6 2268 0034                  		movea.l	$34(a0),a1
00018EDA 0C29 0008 0025             		cmpi.b	#8,$25(a1)
00018EE0 6600                       		bne.s	loc_18688
00018EE2 4A28 0001                  		tst.b	1(a0)
00018EE6 6A00                       		bpl.s	Obj73_TubeDel
00018EE8                            
00018EE8                            loc_18688:
00018EE8 217C 0001 869A 0004        		move.l	#Map_BossItems,4(a0)
00018EF0 317C 246C 0002             		move.w	#$246C,2(a0)
00018EF6 117C 0004 001A             		move.b	#4,$1A(a0)
00018EFC 60AC                       		bra.s	loc_1864A
00018EFE                            ; ===========================================================================
00018EFE                            
00018EFE                            Obj73_TubeDel:
00018EFE 4EF9 0000 DD9E             		jmp	DeleteObject
00018F04                            ; ===========================================================================
00018F04                            ; ---------------------------------------------------------------------------
00018F04                            ; Object 74 - lava that	Eggman drops (MZ)
00018F04                            ; ---------------------------------------------------------------------------
00018F04                            
00018F04                            Obj74:					; XREF: Obj_Index
00018F04 7000                       		moveq	#0,d0
00018F06 1028 0024                  		move.b	$24(a0),d0
00018F0A 303B 0000                  		move.w	Obj74_Index(pc,d0.w),d0
00018F0E 4EBB 0000                  		jsr	Obj74_Index(pc,d0.w)
00018F12 4EF9 0000 DD62             		jmp	DisplaySprite
00018F18                            ; ===========================================================================
00018F18 0000                       Obj74_Index:	dc.w Obj74_Main-Obj74_Index
00018F1A 0000                       		dc.w Obj74_Action-Obj74_Index
00018F1C 0000                       		dc.w loc_18886-Obj74_Index
00018F1E 0000                       		dc.w Obj74_Delete3-Obj74_Index
00018F20                            ; ===========================================================================
00018F20                            
00018F20                            Obj74_Main:				; XREF: Obj74_Index
00018F20 117C 0008 0016             		move.b	#8,$16(a0)
00018F26 117C 0008 0017             		move.b	#8,$17(a0)
00018F2C 217C 0000 BA20 0004        		move.l	#Map_obj14,4(a0)
00018F34 317C 0345 0002             		move.w	#$345,2(a0)
00018F3A 117C 0004 0001             		move.b	#4,1(a0)
00018F40 117C 0005 0018             		move.b	#5,$18(a0)
00018F46 3168 000C 0038             		move.w	$C(a0),$38(a0)
00018F4C 117C 0008 0019             		move.b	#8,$19(a0)
00018F52 5428 0024                  		addq.b	#2,$24(a0)
00018F56 4A28 0028                  		tst.b	$28(a0)
00018F5A 6600                       		bne.s	loc_1870A
00018F5C 117C 008B 0020             		move.b	#$8B,$20(a0)
00018F62 5428 0024                  		addq.b	#2,$24(a0)
00018F66 6000 0000                  		bra.w	loc_18886
00018F6A                            ; ===========================================================================
00018F6A                            
00018F6A                            loc_1870A:
00018F6A 117C 001E 0029             		move.b	#$1E,$29(a0)
00018F70 303C 00AE                  		move.w	#$AE,d0
00018F74 4EB9 0000 15C0             		jsr	(PlaySound_Special).l ;	play lava sound
00018F7A                            
00018F7A                            Obj74_Action:				; XREF: Obj74_Index
00018F7A 7000                       		moveq	#0,d0
00018F7C 1028 0025                  		move.b	$25(a0),d0
00018F80 303B 0000                  		move.w	Obj74_Index2(pc,d0.w),d0
00018F84 4EBB 0000                  		jsr	Obj74_Index2(pc,d0.w)
00018F88 4EB9 0000 DD3C             		jsr	SpeedToPos
00018F8E 43F9 0000 EC1C             		lea	(Ani_obj14).l,a1
00018F94 4EB9 0000 AE22             		jsr	AnimateSprite
00018F9A 0C68 02E8 000C             		cmpi.w	#$2E8,$C(a0)
00018FA0 6200                       		bhi.s	Obj74_Delete
00018FA2 4E75                       		rts	
00018FA4                            ; ===========================================================================
00018FA4                            
00018FA4                            Obj74_Delete:
00018FA4 4EF9 0000 DD9E             		jmp	DeleteObject
00018FAA                            ; ===========================================================================
00018FAA 0000                       Obj74_Index2:	dc.w Obj74_Drop-Obj74_Index2
00018FAC 0000                       		dc.w Obj74_MakeFlame-Obj74_Index2
00018FAE 0000                       		dc.w Obj74_Duplicate-Obj74_Index2
00018FB0 0000                       		dc.w Obj74_FallEdge-Obj74_Index2
00018FB2                            ; ===========================================================================
00018FB2                            
00018FB2                            Obj74_Drop:				; XREF: Obj74_Index2
00018FB2 08E8 0001 0022             		bset	#1,$22(a0)
00018FB8 5328 0029                  		subq.b	#1,$29(a0)
00018FBC 6A00                       		bpl.s	locret_18780
00018FBE 117C 008B 0020             		move.b	#$8B,$20(a0)
00018FC4 4228 0028                  		clr.b	$28(a0)
00018FC8 0668 0018 0012             		addi.w	#$18,$12(a0)
00018FCE 08A8 0001 0022             		bclr	#1,$22(a0)
00018FD4 6100 C686                  		bsr.w	ObjHitFloor
00018FD8 4A41                       		tst.w	d1
00018FDA 6A00                       		bpl.s	locret_18780
00018FDC 5428 0025                  		addq.b	#2,$25(a0)
00018FE0                            
00018FE0                            locret_18780:
00018FE0 4E75                       		rts	
00018FE2                            ; ===========================================================================
00018FE2                            
00018FE2                            Obj74_MakeFlame:			; XREF: Obj74_Index2
00018FE2 5568 000C                  		subq.w	#2,$C(a0)
00018FE6 08E8 0007 0002             		bset	#7,2(a0)
00018FEC 317C 00A0 0010             		move.w	#$A0,$10(a0)
00018FF2 4268 0012                  		clr.w	$12(a0)
00018FF6 3168 0008 0030             		move.w	8(a0),$30(a0)
00018FFC 3168 000C 0038             		move.w	$C(a0),$38(a0)
00019002 117C 0003 0029             		move.b	#3,$29(a0)
00019008 4EB9 0000 E1FE             		jsr	SingleObjLoad2
0001900E 6600                       		bne.s	loc_187CA
00019010 47D1                       		lea	(a1),a3
00019012 45D0                       		lea	(a0),a2
00019014 7003                       		moveq	#3,d0
00019016                            
00019016                            Obj74_Loop:
00019016 26DA                       		move.l	(a2)+,(a3)+
00019018 26DA                       		move.l	(a2)+,(a3)+
0001901A 26DA                       		move.l	(a2)+,(a3)+
0001901C 26DA                       		move.l	(a2)+,(a3)+
0001901E 51C8 FFF6                  		dbf	d0,Obj74_Loop
00019022                            
00019022 4469 0010                  		neg.w	$10(a1)
00019026 5429 0025                  		addq.b	#2,$25(a1)
0001902A                            
0001902A                            loc_187CA:
0001902A 5428 0025                  		addq.b	#2,$25(a0)
0001902E 4E75                       		rts	
00019030                            
00019030                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00019030                            
00019030                            
00019030                            Obj74_Duplicate2:			; XREF: Obj74_Duplicate
00019030 4EB9 0000 E1FE             		jsr	SingleObjLoad2
00019036 6600                       		bne.s	locret_187EE
00019038 3368 0008 0008             		move.w	8(a0),8(a1)
0001903E 3368 000C 000C             		move.w	$C(a0),$C(a1)
00019044 12BC 0074                  		move.b	#$74,(a1)
00019048 337C 0067 0028             		move.w	#$67,$28(a1)
0001904E                            
0001904E                            locret_187EE:
0001904E 4E75                       		rts	
00019050                            ; End of function Obj74_Duplicate2
00019050                            
00019050                            ; ===========================================================================
00019050                            
00019050                            Obj74_Duplicate:			; XREF: Obj74_Index2
00019050 6100 C60A                  		bsr.w	ObjHitFloor
00019054 4A41                       		tst.w	d1
00019056 6A00                       		bpl.s	loc_18826
00019058 3028 0008                  		move.w	8(a0),d0
0001905C 0C40 1940                  		cmpi.w	#$1940,d0
00019060 6E00                       		bgt.s	loc_1882C
00019062 3228 0030                  		move.w	$30(a0),d1
00019066 B240                       		cmp.w	d0,d1
00019068 6700                       		beq.s	loc_1881E
0001906A 0240 0010                  		andi.w	#$10,d0
0001906E 0241 0010                  		andi.w	#$10,d1
00019072 B240                       		cmp.w	d0,d1
00019074 6700                       		beq.s	loc_1881E
00019076 61B8                       		bsr.s	Obj74_Duplicate2
00019078 3168 0008 0032             		move.w	8(a0),$32(a0)
0001907E                            
0001907E                            loc_1881E:
0001907E 3168 0008 0030             		move.w	8(a0),$30(a0)
00019084 4E75                       		rts	
00019086                            ; ===========================================================================
00019086                            
00019086                            loc_18826:
00019086 5428 0025                  		addq.b	#2,$25(a0)
0001908A 4E75                       		rts	
0001908C                            ; ===========================================================================
0001908C                            
0001908C                            loc_1882C:
0001908C 5428 0024                  		addq.b	#2,$24(a0)
00019090 4E75                       		rts	
00019092                            ; ===========================================================================
00019092                            
00019092                            Obj74_FallEdge:				; XREF: Obj74_Index2
00019092 08A8 0001 0022             		bclr	#1,$22(a0)
00019098 0668 0024 0012             		addi.w	#$24,$12(a0)	; make flame fall
0001909E 3028 0008                  		move.w	8(a0),d0
000190A2 9068 0032                  		sub.w	$32(a0),d0
000190A6 6A00                       		bpl.s	loc_1884A
000190A8 4440                       		neg.w	d0
000190AA                            
000190AA                            loc_1884A:
000190AA 0C40 0012                  		cmpi.w	#$12,d0
000190AE 6600                       		bne.s	loc_18856
000190B0 08A8 0007 0002             		bclr	#7,2(a0)
000190B6                            
000190B6                            loc_18856:
000190B6 6100 C5A4                  		bsr.w	ObjHitFloor
000190BA 4A41                       		tst.w	d1
000190BC 6A00                       		bpl.s	locret_1887E
000190BE 5328 0029                  		subq.b	#1,$29(a0)
000190C2 6700                       		beq.s	Obj74_Delete2
000190C4 4268 0012                  		clr.w	$12(a0)
000190C8 3168 0032 0008             		move.w	$32(a0),8(a0)
000190CE 3168 0038 000C             		move.w	$38(a0),$C(a0)
000190D4 08E8 0007 0002             		bset	#7,2(a0)
000190DA 5528 0025                  		subq.b	#2,$25(a0)
000190DE                            
000190DE                            locret_1887E:
000190DE 4E75                       		rts	
000190E0                            ; ===========================================================================
000190E0                            
000190E0                            Obj74_Delete2:
000190E0 4EF9 0000 DD9E             		jmp	DeleteObject
000190E6                            ; ===========================================================================
000190E6                            
000190E6                            loc_18886:				; XREF: Obj74_Index
000190E6 08E8 0007 0002             		bset	#7,2(a0)
000190EC 5328 0029                  		subq.b	#1,$29(a0)
000190F0 6600                       		bne.s	Obj74_Animate
000190F2 117C 0001 001C             		move.b	#1,$1C(a0)
000190F8 5968 000C                  		subq.w	#4,$C(a0)
000190FC 4228 0020                  		clr.b	$20(a0)
00019100                            
00019100                            Obj74_Animate:
00019100 43F9 0000 EC1C             		lea	(Ani_obj14).l,a1
00019106 4EF9 0000 AE22             		jmp	AnimateSprite
0001910C                            ; ===========================================================================
0001910C                            
0001910C                            Obj74_Delete3:				; XREF: Obj74_Index
0001910C 4EF9 0000 DD9E             		jmp	DeleteObject
00019112                            ; ===========================================================================
00019112                            
00019112                            Obj7A_Delete:
00019112 4EF9 0000 DD9E             		jmp	DeleteObject
00019118                            ; ===========================================================================
00019118                            ; ---------------------------------------------------------------------------
00019118                            ; Object 7A - Eggman (SLZ)
00019118                            ; ---------------------------------------------------------------------------
00019118                            
00019118                            Obj7A:					; XREF: Obj_Index
00019118 7000                       		moveq	#0,d0
0001911A 1028 0024                  		move.b	$24(a0),d0
0001911E 323B 0000                  		move.w	Obj7A_Index(pc,d0.w),d1
00019122 4EFB 1000                  		jmp	Obj7A_Index(pc,d1.w)
00019126                            ; ===========================================================================
00019126 0000                       Obj7A_Index:	dc.w Obj7A_Main-Obj7A_Index
00019128 0000                       		dc.w Obj7A_ShipMain-Obj7A_Index
0001912A 0000                       		dc.w Obj7A_FaceMain-Obj7A_Index
0001912C 0000                       		dc.w Obj7A_FlameMain-Obj7A_Index
0001912E 0000                       		dc.w Obj7A_TubeMain-Obj7A_Index
00019130                            
00019130 0200 04                    Obj7A_ObjData:	dc.b 2,	0, 4		; routine number, animation, priority
00019133 0401 04                    		dc.b 4,	1, 4
00019136 0607 04                    		dc.b 6,	7, 4
00019139 0800 03                    		dc.b 8,	0, 3
0001913C                            ; ===========================================================================
0001913C                            
0001913C                            Obj7A_Main:				; XREF: Obj7A_Index
0001913C 317C 2188 0008             		move.w	#$2188,8(a0)
00019142 317C 0228 000C             		move.w	#$228,$C(a0)
00019148 3168 0008 0030             		move.w	8(a0),$30(a0)
0001914E 3168 000C 0038             		move.w	$C(a0),$38(a0)
00019154 117C 000F 0020             		move.b	#$F,$20(a0)
0001915A 117C 0008 0021             		move.b	#8,$21(a0)	; set number of	hits to	8
00019160 45FA FFCE                  		lea	Obj7A_ObjData(pc),a2
00019164 2248                       		movea.l	a0,a1
00019166 7203                       		moveq	#3,d1
00019168 6000                       		bra.s	Obj7A_LoadBoss
0001916A                            ; ===========================================================================
0001916A                            
0001916A                            Obj7A_Loop:
0001916A 4EB9 0000 E1FE             		jsr	SingleObjLoad2
00019170 6600                       		bne.s	loc_1895C
00019172 12BC 007A                  		move.b	#$7A,0(a1)
00019176 3368 0008 0008             		move.w	8(a0),8(a1)
0001917C 3368 000C 000C             		move.w	$C(a0),$C(a1)
00019182                            
00019182                            Obj7A_LoadBoss:				; XREF: Obj7A_Main
00019182 08A8 0000 0022             		bclr	#0,$22(a0)
00019188 4229 0025                  		clr.b	$25(a1)
0001918C 135A 0024                  		move.b	(a2)+,$24(a1)
00019190 135A 001C                  		move.b	(a2)+,$1C(a1)
00019194 135A 0018                  		move.b	(a2)+,$18(a1)
00019198 237C 0001 85D2 0004        		move.l	#Map_Eggman,4(a1)
000191A0 337C 0400 0002             		move.w	#$400,2(a1)
000191A6 137C 0004 0001             		move.b	#4,1(a1)
000191AC 137C 0020 0019             		move.b	#$20,$19(a1)
000191B2 2348 0034                  		move.l	a0,$34(a1)
000191B6 51C9 FFB2                  		dbf	d1,Obj7A_Loop	; repeat sequence 3 more times
000191BA                            
000191BA                            loc_1895C:
000191BA 43F8 D040                  		lea	($FFFFD040).w,a1
000191BE 45E8 002A                  		lea	$2A(a0),a2
000191C2 705E                       		moveq	#$5E,d0
000191C4 723E                       		moveq	#$3E,d1
000191C6                            
000191C6                            loc_18968:
000191C6 B011                       		cmp.b	(a1),d0
000191C8 6600                       		bne.s	loc_18974
000191CA 4A29 0028                  		tst.b	$28(a1)
000191CE 6700                       		beq.s	loc_18974
000191D0 34C9                       		move.w	a1,(a2)+
000191D2                            
000191D2                            loc_18974:
000191D2 D2FC 0040                  		adda.w	#$40,a1
000191D6 51C9 FFEE                  		dbf	d1,loc_18968
000191DA                            
000191DA                            Obj7A_ShipMain:				; XREF: Obj7A_Index
000191DA 7000                       		moveq	#0,d0
000191DC 1028 0025                  		move.b	$25(a0),d0
000191E0 303B 0000                  		move.w	Obj7A_ShipIndex(pc,d0.w),d0
000191E4 4EBB 0000                  		jsr	Obj7A_ShipIndex(pc,d0.w)
000191E8 43F9 0001 856E             		lea	(Ani_Eggman).l,a1
000191EE 4EB9 0000 AE22             		jsr	AnimateSprite
000191F4 7003                       		moveq	#3,d0
000191F6 C028 0022                  		and.b	$22(a0),d0
000191FA 0228 00FC 0001             		andi.b	#$FC,1(a0)
00019200 8128 0001                  		or.b	d0,1(a0)
00019204 4EF9 0000 DD62             		jmp	DisplaySprite
0001920A                            ; ===========================================================================
0001920A 0000                       Obj7A_ShipIndex:dc.w loc_189B8-Obj7A_ShipIndex
0001920C 0000                       		dc.w loc_18A5E-Obj7A_ShipIndex
0001920E 0000                       		dc.w Obj7A_MakeBall-Obj7A_ShipIndex
00019210 0000                       		dc.w loc_18B48-Obj7A_ShipIndex
00019212 0000                       		dc.w loc_18B80-Obj7A_ShipIndex
00019214 0000                       		dc.w loc_18BC6-Obj7A_ShipIndex
00019216                            ; ===========================================================================
00019216                            
00019216                            loc_189B8:				; XREF: Obj7A_ShipIndex
00019216 317C FF00 0010             		move.w	#-$100,$10(a0)
0001921C 0C68 2120 0030             		cmpi.w	#$2120,$30(a0)
00019222 6400                       		bcc.s	loc_189CA
00019224 5428 0025                  		addq.b	#2,$25(a0)
00019228                            
00019228                            loc_189CA:
00019228 6100 EF02                  		bsr.w	BossMove
0001922C 1028 003F                  		move.b	$3F(a0),d0
00019230 5428 003F                  		addq.b	#2,$3F(a0)
00019234 4EB9 0000 2C64             		jsr	(CalcSine).l
0001923A EC40                       		asr.w	#6,d0
0001923C D068 0038                  		add.w	$38(a0),d0
00019240 3140 000C                  		move.w	d0,$C(a0)
00019244 3168 0030 0008             		move.w	$30(a0),8(a0)
0001924A 6000                       		bra.s	loc_189FE
0001924C                            ; ===========================================================================
0001924C                            
0001924C                            loc_189EE:
0001924C 6100 EEDE                  		bsr.w	BossMove
00019250 3168 0038 000C             		move.w	$38(a0),$C(a0)
00019256 3168 0030 0008             		move.w	$30(a0),8(a0)
0001925C                            
0001925C                            loc_189FE:
0001925C 0C28 0006 0025             		cmpi.b	#6,$25(a0)
00019262 6400                       		bcc.s	locret_18A44
00019264 4A28 0022                  		tst.b	$22(a0)
00019268 6B00                       		bmi.s	loc_18A46
0001926A 4A28 0020                  		tst.b	$20(a0)
0001926E 6600                       		bne.s	locret_18A44
00019270 4A28 003E                  		tst.b	$3E(a0)
00019274 6600                       		bne.s	loc_18A28
00019276 117C 0020 003E             		move.b	#$20,$3E(a0)
0001927C 303C 00AC                  		move.w	#$AC,d0
00019280 4EB9 0000 15C0             		jsr	(PlaySound_Special).l ;	play boss damage sound
00019286                            
00019286                            loc_18A28:
00019286 43F8 FB22                  		lea	($FFFFFB22).w,a1
0001928A 7000                       		moveq	#0,d0
0001928C 4A51                       		tst.w	(a1)
0001928E 6600                       		bne.s	loc_18A36
00019290 303C 0EEE                  		move.w	#$EEE,d0
00019294                            
00019294                            loc_18A36:
00019294 3280                       		move.w	d0,(a1)
00019296 5328 003E                  		subq.b	#1,$3E(a0)
0001929A 6600                       		bne.s	locret_18A44
0001929C 117C 000F 0020             		move.b	#$F,$20(a0)
000192A2                            
000192A2                            locret_18A44:
000192A2 4E75                       		rts	
000192A4                            ; ===========================================================================
000192A4                            
000192A4                            loc_18A46:
000192A4 7064                       		moveq	#100,d0
000192A6 6100 0000                  		bsr.w	AddPoints
000192AA 117C 0006 0025             		move.b	#6,$25(a0)
000192B0 117C 0078 003C             		move.b	#$78,$3C(a0)
000192B6 4268 0010                  		clr.w	$10(a0)
000192BA 4E75                       		rts	
000192BC                            ; ===========================================================================
000192BC                            
000192BC                            loc_18A5E:				; XREF: Obj7A_ShipIndex
000192BC 3028 0030                  		move.w	$30(a0),d0
000192C0 317C 0200 0010             		move.w	#$200,$10(a0)
000192C6 0828 0000 0022             		btst	#0,$22(a0)
000192CC 6600                       		bne.s	loc_18A7C
000192CE 4468 0010                  		neg.w	$10(a0)
000192D2 0C40 2008                  		cmpi.w	#$2008,d0
000192D6 6E00                       		bgt.s	loc_18A88
000192D8 6000                       		bra.s	loc_18A82
000192DA                            ; ===========================================================================
000192DA                            
000192DA                            loc_18A7C:
000192DA 0C40 2138                  		cmpi.w	#$2138,d0
000192DE 6D00                       		blt.s	loc_18A88
000192E0                            
000192E0                            loc_18A82:
000192E0 0868 0000 0022             		bchg	#0,$22(a0)
000192E6                            
000192E6                            loc_18A88:
000192E6 3028 0008                  		move.w	8(a0),d0
000192EA 72FF                       		moveq	#-1,d1
000192EC 7402                       		moveq	#2,d2
000192EE 45E8 002A                  		lea	$2A(a0),a2
000192F2 7828                       		moveq	#$28,d4
000192F4 4A68 0010                  		tst.w	$10(a0)
000192F8 6A00                       		bpl.s	loc_18A9E
000192FA 4444                       		neg.w	d4
000192FC                            
000192FC                            loc_18A9E:
000192FC 321A                       		move.w	(a2)+,d1
000192FE 2641                       		movea.l	d1,a3
00019300 082B 0003 0022             		btst	#3,$22(a3)
00019306 6600                       		bne.s	loc_18AB4
00019308 362B 0008                  		move.w	8(a3),d3
0001930C D644                       		add.w	d4,d3
0001930E 9640                       		sub.w	d0,d3
00019310 6700                       		beq.s	loc_18AC0
00019312                            
00019312                            loc_18AB4:
00019312 51CA FFE8                  		dbf	d2,loc_18A9E
00019316                            
00019316 1142 0028                  		move.b	d2,$28(a0)
0001931A 6000 FF0C                  		bra.w	loc_189CA
0001931E                            ; ===========================================================================
0001931E                            
0001931E                            loc_18AC0:
0001931E 1142 0028                  		move.b	d2,$28(a0)
00019322 5428 0025                  		addq.b	#2,$25(a0)
00019326 117C 0028 003C             		move.b	#$28,$3C(a0)
0001932C 6000 FEFA                  		bra.w	loc_189CA
00019330                            ; ===========================================================================
00019330                            
00019330                            Obj7A_MakeBall:				; XREF: Obj7A_ShipIndex
00019330 0C28 0028 003C             		cmpi.b	#$28,$3C(a0)
00019336 6600                       		bne.s	loc_18B36
00019338 70FF                       		moveq	#-1,d0
0001933A 1028 0028                  		move.b	$28(a0),d0
0001933E 4880                       		ext.w	d0
00019340 6B00                       		bmi.s	loc_18B40
00019342 5540                       		subq.w	#2,d0
00019344 4440                       		neg.w	d0
00019346 D040                       		add.w	d0,d0
00019348 43E8 002A                  		lea	$2A(a0),a1
0001934C 3031 0000                  		move.w	(a1,d0.w),d0
00019350 2440                       		movea.l	d0,a2
00019352 43F8 D040                  		lea	($FFFFD040).w,a1
00019356 723E                       		moveq	#$3E,d1
00019358                            
00019358                            loc_18AFA:
00019358 B0A9 003C                  		cmp.l	$3C(a1),d0
0001935C 6700                       		beq.s	loc_18B40
0001935E D2FC 0040                  		adda.w	#$40,a1
00019362 51C9 FFF4                  		dbf	d1,loc_18AFA
00019366                            
00019366 2F08                       		move.l	a0,-(sp)
00019368 41D2                       		lea	(a2),a0
0001936A 4EB9 0000 E1FE             		jsr	SingleObjLoad2
00019370 205F                       		movea.l	(sp)+,a0
00019372 6600                       		bne.s	loc_18B40
00019374 12BC 007B                  		move.b	#$7B,(a1)	; load spiked ball object
00019378 3368 0008 0008             		move.w	8(a0),8(a1)
0001937E 3368 000C 000C             		move.w	$C(a0),$C(a1)
00019384 0669 0020 000C             		addi.w	#$20,$C(a1)
0001938A 136A 0022 0022             		move.b	$22(a2),$22(a1)
00019390 234A 003C                  		move.l	a2,$3C(a1)
00019394                            
00019394                            loc_18B36:
00019394 5328 003C                  		subq.b	#1,$3C(a0)
00019398 6700                       		beq.s	loc_18B40
0001939A 6000 FEC0                  		bra.w	loc_189FE
0001939E                            ; ===========================================================================
0001939E                            
0001939E                            loc_18B40:
0001939E 5528 0025                  		subq.b	#2,$25(a0)
000193A2 6000 FE84                  		bra.w	loc_189CA
000193A6                            ; ===========================================================================
000193A6                            
000193A6                            loc_18B48:				; XREF: Obj7A_ShipIndex
000193A6 5328 003C                  		subq.b	#1,$3C(a0)
000193AA 6B00                       		bmi.s	loc_18B52
000193AC 6000 ED3C                  		bra.w	BossDefeated
000193B0                            ; ===========================================================================
000193B0                            
000193B0                            loc_18B52:
000193B0 5428 0025                  		addq.b	#2,$25(a0)
000193B4 4268 0012                  		clr.w	$12(a0)
000193B8 08E8 0000 0022             		bset	#0,$22(a0)
000193BE 08A8 0007 0022             		bclr	#7,$22(a0)
000193C4 4268 0010                  		clr.w	$10(a0)
000193C8 117C 00E8 003C             		move.b	#-$18,$3C(a0)
000193CE 4A38 F7A7                  		tst.b	($FFFFF7A7).w
000193D2 6600                       		bne.s	loc_18B7C
000193D4 11FC 0001 F7A7             		move.b	#1,($FFFFF7A7).w
000193DA                            
000193DA                            loc_18B7C:
000193DA 6000 FE80                  		bra.w	loc_189FE
000193DE                            ; ===========================================================================
000193DE                            
000193DE                            loc_18B80:				; XREF: Obj7A_ShipIndex
000193DE 5228 003C                  		addq.b	#1,$3C(a0)
000193E2 6700                       		beq.s	loc_18B90
000193E4 6A00                       		bpl.s	loc_18B96
000193E6 0668 0018 0012             		addi.w	#$18,$12(a0)
000193EC 6000                       		bra.s	loc_18BC2
000193EE                            ; ===========================================================================
000193EE                            
000193EE                            loc_18B90:
000193EE 4268 0012                  		clr.w	$12(a0)
000193F2 6000                       		bra.s	loc_18BC2
000193F4                            ; ===========================================================================
000193F4                            
000193F4                            loc_18B96:
000193F4 0C28 0020 003C             		cmpi.b	#$20,$3C(a0)
000193FA 6500                       		bcs.s	loc_18BAE
000193FC 6700                       		beq.s	loc_18BB4
000193FE 0C28 002A 003C             		cmpi.b	#$2A,$3C(a0)
00019404 6500                       		bcs.s	loc_18BC2
00019406 5428 0025                  		addq.b	#2,$25(a0)
0001940A 6000                       		bra.s	loc_18BC2
0001940C                            ; ===========================================================================
0001940C                            
0001940C                            loc_18BAE:
0001940C 5168 0012                  		subq.w	#8,$12(a0)
00019410 6000                       		bra.s	loc_18BC2
00019412                            ; ===========================================================================
00019412                            
00019412                            loc_18BB4:
00019412 4268 0012                  		clr.w	$12(a0)
00019416 303C 0084                  		move.w	#$84,d0
0001941A 4EB9 0000 15BA             		jsr	(PlaySound).l	; play SLZ music
00019420                            
00019420                            loc_18BC2:
00019420 6000 FE2A                  		bra.w	loc_189EE
00019424                            ; ===========================================================================
00019424                            
00019424                            loc_18BC6:				; XREF: Obj7A_ShipIndex
00019424 317C 0400 0010             		move.w	#$400,$10(a0)
0001942A 317C FFC0 0012             		move.w	#-$40,$12(a0)
00019430 0C78 2160 F72A             		cmpi.w	#$2160,($FFFFF72A).w
00019436 6400                       		bcc.s	loc_18BE0
00019438 5478 F72A                  		addq.w	#2,($FFFFF72A).w
0001943C 6000                       		bra.s	loc_18BE8
0001943E                            ; ===========================================================================
0001943E                            
0001943E                            loc_18BE0:
0001943E 4A28 0001                  		tst.b	1(a0)
00019442 6A00 FCCE                  		bpl.w	Obj7A_Delete
00019446                            
00019446                            loc_18BE8:
00019446 6100 ECE4                  		bsr.w	BossMove
0001944A 6000 FDDC                  		bra.w	loc_189CA
0001944E                            ; ===========================================================================
0001944E                            
0001944E                            Obj7A_FaceMain:				; XREF: Obj7A_Index
0001944E 7000                       		moveq	#0,d0
00019450 7201                       		moveq	#1,d1
00019452 2268 0034                  		movea.l	$34(a0),a1
00019456 1029 0025                  		move.b	$25(a1),d0
0001945A 0C00 0006                  		cmpi.b	#6,d0
0001945E 6B00                       		bmi.s	loc_18C06
00019460 720A                       		moveq	#$A,d1
00019462 6000                       		bra.s	loc_18C1A
00019464                            ; ===========================================================================
00019464                            
00019464                            loc_18C06:
00019464 4A29 0020                  		tst.b	$20(a1)
00019468 6600                       		bne.s	loc_18C10
0001946A 7205                       		moveq	#5,d1
0001946C 6000                       		bra.s	loc_18C1A
0001946E                            ; ===========================================================================
0001946E                            
0001946E                            loc_18C10:
0001946E 0C38 0004 D024             		cmpi.b	#4,($FFFFD024).w
00019474 6500                       		bcs.s	loc_18C1A
00019476 7204                       		moveq	#4,d1
00019478                            
00019478                            loc_18C1A:
00019478 1141 001C                  		move.b	d1,$1C(a0)
0001947C 0C00 000A                  		cmpi.b	#$A,d0
00019480 6600                       		bne.s	loc_18C32
00019482 117C 0006 001C             		move.b	#6,$1C(a0)
00019488 4A28 0001                  		tst.b	1(a0)
0001948C 6A00 FC84                  		bpl.w	Obj7A_Delete
00019490                            
00019490                            loc_18C32:
00019490 6000                       		bra.s	loc_18C6C
00019492                            ; ===========================================================================
00019492                            
00019492                            Obj7A_FlameMain:			; XREF: Obj7A_Index
00019492 117C 0008 001C             		move.b	#8,$1C(a0)
00019498 2268 0034                  		movea.l	$34(a0),a1
0001949C 0C29 000A 0025             		cmpi.b	#$A,$25(a1)
000194A2 6600                       		bne.s	loc_18C56
000194A4 4A28 0001                  		tst.b	1(a0)
000194A8 6A00 FC68                  		bpl.w	Obj7A_Delete
000194AC 117C 000B 001C             		move.b	#$B,$1C(a0)
000194B2 6000                       		bra.s	loc_18C6C
000194B4                            ; ===========================================================================
000194B4                            
000194B4                            loc_18C56:
000194B4 0C29 0008 0025             		cmpi.b	#8,$25(a1)
000194BA 6E00                       		bgt.s	loc_18C6C
000194BC 0C29 0004 0025             		cmpi.b	#4,$25(a1)
000194C2 6D00                       		blt.s	loc_18C6C
000194C4 117C 0007 001C             		move.b	#7,$1C(a0)
000194CA                            
000194CA                            loc_18C6C:
000194CA 43F9 0001 856E             		lea	(Ani_Eggman).l,a1
000194D0 4EB9 0000 AE22             		jsr	AnimateSprite
000194D6                            
000194D6                            loc_18C78:
000194D6 2268 0034                  		movea.l	$34(a0),a1
000194DA 3169 0008 0008             		move.w	8(a1),8(a0)
000194E0 3169 000C 000C             		move.w	$C(a1),$C(a0)
000194E6 1169 0022 0022             		move.b	$22(a1),$22(a0)
000194EC 7003                       		moveq	#3,d0
000194EE C028 0022                  		and.b	$22(a0),d0
000194F2 0228 00FC 0001             		andi.b	#-4,1(a0)
000194F8 8128 0001                  		or.b	d0,1(a0)
000194FC 4EF9 0000 DD62             		jmp	DisplaySprite
00019502                            ; ===========================================================================
00019502                            
00019502                            Obj7A_TubeMain:				; XREF: Obj7A_Index
00019502 2268 0034                  		movea.l	$34(a0),a1
00019506 0C29 000A 0025             		cmpi.b	#$A,$25(a1)
0001950C 6600                       		bne.s	loc_18CB8
0001950E 4A28 0001                  		tst.b	1(a0)
00019512 6A00 FBFE                  		bpl.w	Obj7A_Delete
00019516                            
00019516                            loc_18CB8:
00019516 217C 0001 869A 0004        		move.l	#Map_BossItems,4(a0)
0001951E 317C 246C 0002             		move.w	#$246C,2(a0)
00019524 117C 0003 001A             		move.b	#3,$1A(a0)
0001952A 60AA                       		bra.s	loc_18C78
0001952C                            ; ===========================================================================
0001952C                            ; ---------------------------------------------------------------------------
0001952C                            ; Object 7B - exploding	spikeys	that Eggman drops (SLZ)
0001952C                            ; ---------------------------------------------------------------------------
0001952C                            
0001952C                            Obj7B:					; XREF: Obj_Index
0001952C 7000                       		moveq	#0,d0
0001952E 1028 0024                  		move.b	$24(a0),d0
00019532 303B 0000                  		move.w	Obj7B_Index(pc,d0.w),d0
00019536 4EBB 0000                  		jsr	Obj7B_Index(pc,d0.w)
0001953A 3028 0030                  		move.w	$30(a0),d0
0001953E 0240 FF80                  		andi.w	#$FF80,d0
00019542 3238 F700                  		move.w	($FFFFF700).w,d1
00019546 0441 0080                  		subi.w	#$80,d1
0001954A 0241 FF80                  		andi.w	#$FF80,d1
0001954E 9041                       		sub.w	d1,d0
00019550 6B00 FBC0                  		bmi.w	Obj7A_Delete
00019554 0C40 0280                  		cmpi.w	#$280,d0
00019558 6200 FBB8                  		bhi.w	Obj7A_Delete
0001955C 4EF9 0000 DD62             		jmp	DisplaySprite
00019562                            ; ===========================================================================
00019562 0000                       Obj7B_Index:	dc.w Obj7B_Main-Obj7B_Index
00019564 0000                       		dc.w Obj7B_Fall-Obj7B_Index
00019566 0000                       		dc.w loc_18DC6-Obj7B_Index
00019568 0000                       		dc.w loc_18EAA-Obj7B_Index
0001956A 0000                       		dc.w Obj7B_Explode-Obj7B_Index
0001956C 0000                       		dc.w Obj7B_MoveFrag-Obj7B_Index
0001956E                            ; ===========================================================================
0001956E                            
0001956E                            Obj7B_Main:				; XREF: Obj7B_Index
0001956E 217C 0001 2128 0004        		move.l	#Map_obj5Ea,4(a0)
00019576 317C 0518 0002             		move.w	#$518,2(a0)
0001957C 117C 0001 001A             		move.b	#1,$1A(a0)
00019582 0028 0004 0001             		ori.b	#4,1(a0)
00019588 117C 0004 0018             		move.b	#4,$18(a0)
0001958E 117C 008B 0020             		move.b	#$8B,$20(a0)
00019594 117C 000C 0019             		move.b	#$C,$19(a0)
0001959A 2268 003C                  		movea.l	$3C(a0),a1
0001959E 3169 0008 0030             		move.w	8(a1),$30(a0)
000195A4 3169 000C 0034             		move.w	$C(a1),$34(a0)
000195AA 08E8 0000 0022             		bset	#0,$22(a0)
000195B0 3028 0008                  		move.w	8(a0),d0
000195B4 B069 0008                  		cmp.w	8(a1),d0
000195B8 6E00                       		bgt.s	loc_18D68
000195BA 08A8 0000 0022             		bclr	#0,$22(a0)
000195C0 117C 0002 003A             		move.b	#2,$3A(a0)
000195C6                            
000195C6                            loc_18D68:
000195C6 5428 0024                  		addq.b	#2,$24(a0)
000195CA                            
000195CA                            Obj7B_Fall:				; XREF: Obj7B_Index
000195CA 4EB9 0000 DD10             		jsr	ObjectFall
000195D0 2268 003C                  		movea.l	$3C(a0),a1
000195D4 45F9 0000 0000             		lea	(word_19018).l,a2
000195DA 7000                       		moveq	#0,d0
000195DC 1029 001A                  		move.b	$1A(a1),d0
000195E0 3228 0008                  		move.w	8(a0),d1
000195E4 9268 0030                  		sub.w	$30(a0),d1
000195E8 6400                       		bcc.s	loc_18D8E
000195EA 5440                       		addq.w	#2,d0
000195EC                            
000195EC                            loc_18D8E:
000195EC D040                       		add.w	d0,d0
000195EE 3228 0034                  		move.w	$34(a0),d1
000195F2 D272 0000                  		add.w	(a2,d0.w),d1
000195F6 B268 000C                  		cmp.w	$C(a0),d1
000195FA 6E00                       		bgt.s	locret_18DC4
000195FC 2268 003C                  		movea.l	$3C(a0),a1
00019600 7202                       		moveq	#2,d1
00019602 0828 0000 0022             		btst	#0,$22(a0)
00019608 6700                       		beq.s	loc_18DAE
0001960A 7200                       		moveq	#0,d1
0001960C                            
0001960C                            loc_18DAE:
0001960C 317C 00F0 0028             		move.w	#$F0,$28(a0)
00019612 117C 000A 001F             		move.b	#10,$1F(a0)	; set frame duration to	10 frames
00019618 1168 001F 001E             		move.b	$1F(a0),$1E(a0)
0001961E 6000 0000                  		bra.w	loc_18FA2
00019622                            ; ===========================================================================
00019622                            
00019622                            locret_18DC4:
00019622 4E75                       		rts	
00019624                            ; ===========================================================================
00019624                            
00019624                            loc_18DC6:				; XREF: Obj7B_Index
00019624 2268 003C                  		movea.l	$3C(a0),a1
00019628 7000                       		moveq	#0,d0
0001962A 1028 003A                  		move.b	$3A(a0),d0
0001962E 9029 003A                  		sub.b	$3A(a1),d0
00019632 6700                       		beq.s	loc_18E2A
00019634 6400                       		bcc.s	loc_18DDA
00019636 4400                       		neg.b	d0
00019638                            
00019638                            loc_18DDA:
00019638 323C F7E8                  		move.w	#-$818,d1
0001963C 343C FEEC                  		move.w	#-$114,d2
00019640 0C00 0001                  		cmpi.b	#1,d0
00019644 6700                       		beq.s	loc_18E00
00019646 323C F6A0                  		move.w	#-$960,d1
0001964A 343C FF0C                  		move.w	#-$F4,d2
0001964E 0C69 09C0 0038             		cmpi.w	#$9C0,$38(a1)
00019654 6D00                       		blt.s	loc_18E00
00019656 323C F5E0                  		move.w	#-$A20,d1
0001965A 343C FF80                  		move.w	#-$80,d2
0001965E                            
0001965E                            loc_18E00:
0001965E 3141 0012                  		move.w	d1,$12(a0)
00019662 3142 0010                  		move.w	d2,$10(a0)
00019666 3028 0008                  		move.w	8(a0),d0
0001966A 9068 0030                  		sub.w	$30(a0),d0
0001966E 6400                       		bcc.s	loc_18E16
00019670 4468 0010                  		neg.w	$10(a0)
00019674                            
00019674                            loc_18E16:
00019674 117C 0001 001A             		move.b	#1,$1A(a0)
0001967A 317C 0020 0028             		move.w	#$20,$28(a0)
00019680 5428 0024                  		addq.b	#2,$24(a0)
00019684 6000 0000                  		bra.w	loc_18EAA
00019688                            ; ===========================================================================
00019688                            
00019688                            loc_18E2A:				; XREF: loc_18DC6
00019688 45F9 0000 0000             		lea	(word_19018).l,a2
0001968E 7000                       		moveq	#0,d0
00019690 1029 001A                  		move.b	$1A(a1),d0
00019694 343C 0028                  		move.w	#$28,d2
00019698 3228 0008                  		move.w	8(a0),d1
0001969C 9268 0030                  		sub.w	$30(a0),d1
000196A0 6400                       		bcc.s	loc_18E48
000196A2 4442                       		neg.w	d2
000196A4 5440                       		addq.w	#2,d0
000196A6                            
000196A6                            loc_18E48:
000196A6 D040                       		add.w	d0,d0
000196A8 3228 0034                  		move.w	$34(a0),d1
000196AC D272 0000                  		add.w	(a2,d0.w),d1
000196B0 3141 000C                  		move.w	d1,$C(a0)
000196B4 D468 0030                  		add.w	$30(a0),d2
000196B8 3142 0008                  		move.w	d2,8(a0)
000196BC 4268 000E                  		clr.w	$E(a0)
000196C0 4268 000A                  		clr.w	$A(a0)
000196C4 5368 0028                  		subq.w	#1,$28(a0)
000196C8 6600                       		bne.s	loc_18E7A
000196CA 317C 0020 0028             		move.w	#$20,$28(a0)
000196D0 117C 0008 0024             		move.b	#8,$24(a0)
000196D6 4E75                       		rts	
000196D8                            ; ===========================================================================
000196D8                            
000196D8                            loc_18E7A:
000196D8 0C68 0078 0028             		cmpi.w	#$78,$28(a0)
000196DE 6600                       		bne.s	loc_18E88
000196E0 117C 0005 001F             		move.b	#5,$1F(a0)
000196E6                            
000196E6                            loc_18E88:
000196E6 0C68 003C 0028             		cmpi.w	#$3C,$28(a0)
000196EC 6600                       		bne.s	loc_18E96
000196EE 117C 0002 001F             		move.b	#2,$1F(a0)
000196F4                            
000196F4                            loc_18E96:
000196F4 5328 001E                  		subq.b	#1,$1E(a0)
000196F8 6E00                       		bgt.s	locret_18EA8
000196FA 0868 0000 001A             		bchg	#0,$1A(a0)
00019700 1168 001F 001E             		move.b	$1F(a0),$1E(a0)
00019706                            
00019706                            locret_18EA8:
00019706 4E75                       		rts	
00019708                            ; ===========================================================================
00019708                            
00019708                            loc_18EAA:				; XREF: Obj7B_Index
00019708 43F8 D040                  		lea	($FFFFD040).w,a1
0001970C 707A                       		moveq	#$7A,d0
0001970E 7240                       		moveq	#$40,d1
00019710 743E                       		moveq	#$3E,d2
00019712                            
00019712                            loc_18EB4:
00019712 B011                       		cmp.b	(a1),d0
00019714 6700                       		beq.s	loc_18EC0
00019716 D2C1                       		adda.w	d1,a1
00019718 51CA FFF8                  		dbf	d2,loc_18EB4
0001971C                            
0001971C 6000                       		bra.s	loc_18F38
0001971E                            ; ===========================================================================
0001971E                            
0001971E                            loc_18EC0:
0001971E 3029 0008                  		move.w	8(a1),d0
00019722 3229 000C                  		move.w	$C(a1),d1
00019726 3428 0008                  		move.w	8(a0),d2
0001972A 3628 000C                  		move.w	$C(a0),d3
0001972E 45FA 0000                  		lea	byte_19022(pc),a2
00019732 47FA 0000                  		lea	byte_19026(pc),a3
00019736 181A                       		move.b	(a2)+,d4
00019738 4884                       		ext.w	d4
0001973A D044                       		add.w	d4,d0
0001973C 181B                       		move.b	(a3)+,d4
0001973E 4884                       		ext.w	d4
00019740 D444                       		add.w	d4,d2
00019742 B440                       		cmp.w	d0,d2
00019744 6500                       		bcs.s	loc_18F38
00019746 181A                       		move.b	(a2)+,d4
00019748 4884                       		ext.w	d4
0001974A D044                       		add.w	d4,d0
0001974C 181B                       		move.b	(a3)+,d4
0001974E 4884                       		ext.w	d4
00019750 D444                       		add.w	d4,d2
00019752 B042                       		cmp.w	d2,d0
00019754 6500                       		bcs.s	loc_18F38
00019756 181A                       		move.b	(a2)+,d4
00019758 4884                       		ext.w	d4
0001975A D244                       		add.w	d4,d1
0001975C 181B                       		move.b	(a3)+,d4
0001975E 4884                       		ext.w	d4
00019760 D644                       		add.w	d4,d3
00019762 B641                       		cmp.w	d1,d3
00019764 6500                       		bcs.s	loc_18F38
00019766 181A                       		move.b	(a2)+,d4
00019768 4884                       		ext.w	d4
0001976A D244                       		add.w	d4,d1
0001976C 181B                       		move.b	(a3)+,d4
0001976E 4884                       		ext.w	d4
00019770 D644                       		add.w	d4,d3
00019772 B243                       		cmp.w	d3,d1
00019774 6500                       		bcs.s	loc_18F38
00019776 5428 0024                  		addq.b	#2,$24(a0)
0001977A 4268 0028                  		clr.w	$28(a0)
0001977E 4229 0020                  		clr.b	$20(a1)
00019782 5329 0021                  		subq.b	#1,$21(a1)
00019786 6600                       		bne.s	loc_18F38
00019788 08E9 0007 0022             		bset	#7,$22(a1)
0001978E 4268 0010                  		clr.w	$10(a0)
00019792 4268 0012                  		clr.w	$12(a0)
00019796                            
00019796                            loc_18F38:
00019796 4A68 0012                  		tst.w	$12(a0)
0001979A 6A00                       		bpl.s	loc_18F5C
0001979C 4EB9 0000 DD10             		jsr	ObjectFall
000197A2 3028 0034                  		move.w	$34(a0),d0
000197A6 0440 002F                  		subi.w	#$2F,d0
000197AA B068 000C                  		cmp.w	$C(a0),d0
000197AE 6E00                       		bgt.s	loc_18F58
000197B0 4EB9 0000 DD10             		jsr	ObjectFall
000197B6                            
000197B6                            loc_18F58:
000197B6 6000 FF20                  		bra.w	loc_18E7A
000197BA                            ; ===========================================================================
000197BA                            
000197BA                            loc_18F5C:
000197BA 4EB9 0000 DD10             		jsr	ObjectFall
000197C0 2268 003C                  		movea.l	$3C(a0),a1
000197C4 45F9 0000 0000             		lea	(word_19018).l,a2
000197CA 7000                       		moveq	#0,d0
000197CC 1029 001A                  		move.b	$1A(a1),d0
000197D0 3228 0008                  		move.w	8(a0),d1
000197D4 9268 0030                  		sub.w	$30(a0),d1
000197D8 6400                       		bcc.s	loc_18F7E
000197DA 5440                       		addq.w	#2,d0
000197DC                            
000197DC                            loc_18F7E:
000197DC D040                       		add.w	d0,d0
000197DE 3228 0034                  		move.w	$34(a0),d1
000197E2 D272 0000                  		add.w	(a2,d0.w),d1
000197E6 B268 000C                  		cmp.w	$C(a0),d1
000197EA 6ECA                       		bgt.s	loc_18F58
000197EC 2268 003C                  		movea.l	$3C(a0),a1
000197F0 7202                       		moveq	#2,d1
000197F2 4A68 0010                  		tst.w	$10(a0)
000197F6 6B00                       		bmi.s	loc_18F9C
000197F8 7200                       		moveq	#0,d1
000197FA                            
000197FA                            loc_18F9C:
000197FA 317C 0000 0028             		move.w	#0,$28(a0)
00019800                            
00019800                            loc_18FA2:
00019800 1341 003A                  		move.b	d1,$3A(a1)
00019804 1141 003A                  		move.b	d1,$3A(a0)
00019808 B229 001A                  		cmp.b	$1A(a1),d1
0001980C 6700                       		beq.s	loc_19008
0001980E 08A9 0003 0022             		bclr	#3,$22(a1)
00019814 6700                       		beq.s	loc_19008
00019816 4229 0025                  		clr.b	$25(a1)
0001981A 137C 0002 0024             		move.b	#2,$24(a1)
00019820 45F8 D000                  		lea	($FFFFD000).w,a2
00019824 3568 0012 0012             		move.w	$12(a0),$12(a2)
0001982A 446A 0012                  		neg.w	$12(a2)
0001982E 0C29 0001 001A             		cmpi.b	#1,$1A(a1)
00019834 6600                       		bne.s	loc_18FDC
00019836 E0EA 0012                  		asr	$12(a2)
0001983A                            
0001983A                            loc_18FDC:
0001983A 08EA 0001 0022             		bset	#1,$22(a2)
00019840 08AA 0003 0022             		bclr	#3,$22(a2)
00019846 422A 003C                  		clr.b	$3C(a2)
0001984A 2F08                       		move.l	a0,-(sp)
0001984C 41D2                       		lea	(a2),a0
0001984E 4EBA A356                  		jsr	Obj01_ChkRoll
00019852 205F                       		movea.l	(sp)+,a0
00019854 157C 0002 0024             		move.b	#2,$24(a2)
0001985A 303C 00CC                  		move.w	#$CC,d0
0001985E 4EB9 0000 15C0             		jsr	(PlaySound_Special).l ;	play "spring" sound
00019864                            
00019864                            loc_19008:
00019864 4268 0010                  		clr.w	$10(a0)
00019868 4268 0012                  		clr.w	$12(a0)
0001986C 5428 0024                  		addq.b	#2,$24(a0)
00019870 6000 FE66                  		bra.w	loc_18E7A
00019874                            ; ===========================================================================
00019874 FFF8 FFE4 FFD1 FFE4 FFF8   word_19018:	dc.w $FFF8, $FFE4, $FFD1, $FFE4, $FFF8
0001987E                            		even
0001987E E830 E830                  byte_19022:	dc.b $E8, $30, $E8, $30
00019882                            		even
00019882 08F0 08F0                  byte_19026:	dc.b 8,	$F0, 8,	$F0
00019886                            		even
00019886                            ; ===========================================================================
00019886                            
00019886                            Obj7B_Explode:				; XREF: Obj7B_Index
00019886 10BC 003F                  		move.b	#$3F,(a0)
0001988A 4228 0024                  		clr.b	$24(a0)
0001988E 0C68 0020 0028             		cmpi.w	#$20,$28(a0)
00019894 6700                       		beq.s	Obj7B_MakeFrag
00019896 4E75                       		rts	
00019898                            ; ===========================================================================
00019898                            
00019898                            Obj7B_MakeFrag:
00019898 3168 0034 000C             		move.w	$34(a0),$C(a0)
0001989E 7203                       		moveq	#3,d1
000198A0 45FA 0000                  		lea	Obj7B_FragSpeed(pc),a2
000198A4                            
000198A4                            Obj7B_Loop:
000198A4 4EB9 0000 E1E8             		jsr	SingleObjLoad
000198AA 6600                       		bne.s	loc_1909A
000198AC 12BC 007B                  		move.b	#$7B,(a1)	; load shrapnel	object
000198B0 137C 000A 0024             		move.b	#$A,$24(a1)
000198B6 237C 0000 0000 0004        		move.l	#Map_obj7B,4(a1)
000198BE 137C 0003 0018             		move.b	#3,$18(a1)
000198C4 337C 0518 0002             		move.w	#$518,2(a1)
000198CA 3368 0008 0008             		move.w	8(a0),8(a1)
000198D0 3368 000C 000C             		move.w	$C(a0),$C(a1)
000198D6 335A 0010                  		move.w	(a2)+,$10(a1)
000198DA 335A 0012                  		move.w	(a2)+,$12(a1)
000198DE 137C 0098 0020             		move.b	#$98,$20(a1)
000198E4 0029 0004 0001             		ori.b	#4,1(a1)
000198EA 08E9 0007 0001             		bset	#7,1(a1)
000198F0 137C 000C 0019             		move.b	#$C,$19(a1)
000198F6                            
000198F6                            loc_1909A:
000198F6 51C9 FFAC                  		dbf	d1,Obj7B_Loop	; repeat sequence 3 more times
000198FA                            
000198FA 4E75                       		rts	
000198FC                            ; ===========================================================================
000198FC FF00 FCC0                  Obj7B_FragSpeed:dc.w $FF00, $FCC0	; horizontal, vertical
00019900 FF60 FDC0                  		dc.w $FF60, $FDC0
00019904 0100 FCC0                  		dc.w $100, $FCC0
00019908 00A0 FDC0                  		dc.w $A0, $FDC0
0001990C                            ; ===========================================================================
0001990C                            
0001990C                            Obj7B_MoveFrag:				; XREF: Obj7B_Index
0001990C 4EB9 0000 DD3C             		jsr	SpeedToPos
00019912 3168 0008 0030             		move.w	8(a0),$30(a0)
00019918 3168 000C 0034             		move.w	$C(a0),$34(a0)
0001991E 0668 0018 0012             		addi.w	#$18,$12(a0)
00019924 7004                       		moveq	#4,d0
00019926 C078 FE0E                  		and.w	($FFFFFE0E).w,d0
0001992A E448                       		lsr.w	#2,d0
0001992C 1140 001A                  		move.b	d0,$1A(a0)
00019930 4A28 0001                  		tst.b	1(a0)
00019934 6A00 F7DC                  		bpl.w	Obj7A_Delete
00019938 4E75                       		rts	
0001993A                            ; ===========================================================================
0001993A                            ; ---------------------------------------------------------------------------
0001993A                            ; Sprite mappings - exploding spikeys that the SLZ boss	drops
0001993A                            ; ---------------------------------------------------------------------------
0001993A                            Map_obj7B:
0001993A                            	include "_maps\obj7B.asm"
0001993A                            ; ---------------------------------------------------------------------------
0001993A                            ; Sprite mappings - exploding spikeys that the SLZ boss	drops
0001993A                            ; ---------------------------------------------------------------------------
0001993A 0000                       		dc.w byte_190E2-Map_obj7B
0001993C 0000                       		dc.w byte_190E8-Map_obj7B
0001993E 01                         byte_190E2:	dc.b 1
0001993F FC00 0027 FC               		dc.b $FC, 0, 0,	$27, $FC
00019944 01                         byte_190E8:	dc.b 1
00019945 FC00 0028 FC               		dc.b $FC, 0, 0,	$28, $FC
0001994A                            		even
0001994A                            		even
0001994A                            
0001994A                            ; ===========================================================================
0001994A                            ; ---------------------------------------------------------------------------
0001994A                            ; Object 75 - Eggman (SYZ)
0001994A                            ; ---------------------------------------------------------------------------
0001994A                            
0001994A                            Obj75:					; XREF: Obj_Index
0001994A 7000                       		moveq	#0,d0
0001994C 1028 0024                  		move.b	$24(a0),d0
00019950 323B 0000                  		move.w	Obj75_Index(pc,d0.w),d1
00019954 4EFB 1000                  		jmp	Obj75_Index(pc,d1.w)
00019958                            ; ===========================================================================
00019958 0000                       Obj75_Index:	dc.w Obj75_Main-Obj75_Index
0001995A 0000                       		dc.w Obj75_ShipMain-Obj75_Index
0001995C 0000                       		dc.w Obj75_FaceMain-Obj75_Index
0001995E 0000                       		dc.w Obj75_FlameMain-Obj75_Index
00019960 0000                       		dc.w Obj75_SpikeMain-Obj75_Index
00019962                            
00019962 0200 05                    Obj75_ObjData:	dc.b 2,	0, 5		; routine number, animation, priority
00019965 0401 05                    		dc.b 4,	1, 5
00019968 0607 05                    		dc.b 6,	7, 5
0001996B 0800 05                    		dc.b 8,	0, 5
0001996E                            ; ===========================================================================
0001996E                            
0001996E                            Obj75_Main:				; XREF: Obj75_Index
0001996E 317C 2DB0 0008             		move.w	#$2DB0,8(a0)
00019974 317C 04DA 000C             		move.w	#$4DA,$C(a0)
0001997A 3168 0008 0030             		move.w	8(a0),$30(a0)
00019980 3168 000C 0038             		move.w	$C(a0),$38(a0)
00019986 117C 000F 0020             		move.b	#$F,$20(a0)
0001998C 117C 0008 0021             		move.b	#8,$21(a0)	; set number of	hits to	8
00019992 45FA FFCE                  		lea	Obj75_ObjData(pc),a2
00019996 2248                       		movea.l	a0,a1
00019998 7203                       		moveq	#3,d1
0001999A 6000                       		bra.s	Obj75_LoadBoss
0001999C                            ; ===========================================================================
0001999C                            
0001999C                            Obj75_Loop:
0001999C 4EB9 0000 E1FE             		jsr	SingleObjLoad2
000199A2 6600                       		bne.s	Obj75_ShipMain
000199A4 12BC 0075                  		move.b	#$75,(a1)
000199A8 3368 0008 0008             		move.w	8(a0),8(a1)
000199AE 3368 000C 000C             		move.w	$C(a0),$C(a1)
000199B4                            
000199B4                            Obj75_LoadBoss:				; XREF: Obj75_Main
000199B4 08A8 0000 0022             		bclr	#0,$22(a0)
000199BA 4229 0025                  		clr.b	$25(a1)
000199BE 135A 0024                  		move.b	(a2)+,$24(a1)
000199C2 135A 001C                  		move.b	(a2)+,$1C(a1)
000199C6 135A 0018                  		move.b	(a2)+,$18(a1)
000199CA 237C 0001 85D2 0004        		move.l	#Map_Eggman,4(a1)
000199D2 337C 0400 0002             		move.w	#$400,2(a1)
000199D8 137C 0004 0001             		move.b	#4,1(a1)
000199DE 137C 0020 0019             		move.b	#$20,$19(a1)
000199E4 2348 0034                  		move.l	a0,$34(a1)
000199E8 51C9 FFB2                  		dbf	d1,Obj75_Loop	; repeat sequence 3 more times
000199EC                            
000199EC                            Obj75_ShipMain:				; XREF: Obj75_Index
000199EC 7000                       		moveq	#0,d0
000199EE 1028 0025                  		move.b	$25(a0),d0
000199F2 323B 0000                  		move.w	Obj75_ShipIndex(pc,d0.w),d1
000199F6 4EBB 1000                  		jsr	Obj75_ShipIndex(pc,d1.w)
000199FA 43F9 0001 856E             		lea	(Ani_Eggman).l,a1
00019A00 4EB9 0000 AE22             		jsr	AnimateSprite
00019A06 7003                       		moveq	#3,d0
00019A08 C028 0022                  		and.b	$22(a0),d0
00019A0C 0228 00FC 0001             		andi.b	#$FC,1(a0)
00019A12 8128 0001                  		or.b	d0,1(a0)
00019A16 4EF9 0000 DD62             		jmp	DisplaySprite
00019A1C                            ; ===========================================================================
00019A1C 0000 0000                  Obj75_ShipIndex:dc.w loc_191CC-Obj75_ShipIndex,	loc_19270-Obj75_ShipIndex
00019A20 0000 0000                  		dc.w loc_192EC-Obj75_ShipIndex,	loc_19474-Obj75_ShipIndex
00019A24 0000 0000                  		dc.w loc_194AC-Obj75_ShipIndex,	loc_194F2-Obj75_ShipIndex
00019A28                            ; ===========================================================================
00019A28                            
00019A28                            loc_191CC:				; XREF: Obj75_ShipIndex
00019A28 317C FF00 0010             		move.w	#-$100,$10(a0)
00019A2E 0C68 2D38 0030             		cmpi.w	#$2D38,$30(a0)
00019A34 6400                       		bcc.s	loc_191DE
00019A36 5428 0025                  		addq.b	#2,$25(a0)
00019A3A                            
00019A3A                            loc_191DE:
00019A3A 1028 003F                  		move.b	$3F(a0),d0
00019A3E 5428 003F                  		addq.b	#2,$3F(a0)
00019A42 4EB9 0000 2C64             		jsr	(CalcSine).l
00019A48 E440                       		asr.w	#2,d0
00019A4A 3140 0012                  		move.w	d0,$12(a0)
00019A4E                            
00019A4E                            loc_191F2:
00019A4E 6100 E6DC                  		bsr.w	BossMove
00019A52 3168 0038 000C             		move.w	$38(a0),$C(a0)
00019A58 3168 0030 0008             		move.w	$30(a0),8(a0)
00019A5E                            
00019A5E                            loc_19202:
00019A5E 3028 0008                  		move.w	8(a0),d0
00019A62 0440 2C00                  		subi.w	#$2C00,d0
00019A66 EA48                       		lsr.w	#5,d0
00019A68 1140 0034                  		move.b	d0,$34(a0)
00019A6C 0C28 0006 0025             		cmpi.b	#6,$25(a0)
00019A72 6400                       		bcc.s	locret_19256
00019A74 4A28 0022                  		tst.b	$22(a0)
00019A78 6B00                       		bmi.s	loc_19258
00019A7A 4A28 0020                  		tst.b	$20(a0)
00019A7E 6600                       		bne.s	locret_19256
00019A80 4A28 003E                  		tst.b	$3E(a0)
00019A84 6600                       		bne.s	loc_1923A
00019A86 117C 0020 003E             		move.b	#$20,$3E(a0)
00019A8C 303C 00AC                  		move.w	#$AC,d0
00019A90 4EB9 0000 15C0             		jsr	(PlaySound_Special).l ;	play boss damage sound
00019A96                            
00019A96                            loc_1923A:
00019A96 43F8 FB22                  		lea	($FFFFFB22).w,a1
00019A9A 7000                       		moveq	#0,d0
00019A9C 4A51                       		tst.w	(a1)
00019A9E 6600                       		bne.s	loc_19248
00019AA0 303C 0EEE                  		move.w	#$EEE,d0
00019AA4                            
00019AA4                            loc_19248:
00019AA4 3280                       		move.w	d0,(a1)
00019AA6 5328 003E                  		subq.b	#1,$3E(a0)
00019AAA 6600                       		bne.s	locret_19256
00019AAC 117C 000F 0020             		move.b	#$F,$20(a0)
00019AB2                            
00019AB2                            locret_19256:
00019AB2 4E75                       		rts	
00019AB4                            ; ===========================================================================
00019AB4                            
00019AB4                            loc_19258:				; XREF: loc_19202
00019AB4 7064                       		moveq	#100,d0
00019AB6 6100 0000                  		bsr.w	AddPoints
00019ABA 117C 0006 0025             		move.b	#6,$25(a0)
00019AC0 317C 00B4 003C             		move.w	#$B4,$3C(a0)
00019AC6 4268 0010                  		clr.w	$10(a0)
00019ACA 4E75                       		rts	
00019ACC                            ; ===========================================================================
00019ACC                            
00019ACC                            loc_19270:				; XREF: Obj75_ShipIndex
00019ACC 3028 0030                  		move.w	$30(a0),d0
00019AD0 317C 0140 0010             		move.w	#$140,$10(a0)
00019AD6 0828 0000 0022             		btst	#0,$22(a0)
00019ADC 6600                       		bne.s	loc_1928E
00019ADE 4468 0010                  		neg.w	$10(a0)
00019AE2 0C40 2C08                  		cmpi.w	#$2C08,d0
00019AE6 6E00                       		bgt.s	loc_1929E
00019AE8 6000                       		bra.s	loc_19294
00019AEA                            ; ===========================================================================
00019AEA                            
00019AEA                            loc_1928E:
00019AEA 0C40 2D38                  		cmpi.w	#$2D38,d0
00019AEE 6D00                       		blt.s	loc_1929E
00019AF0                            
00019AF0                            loc_19294:
00019AF0 0868 0000 0022             		bchg	#0,$22(a0)
00019AF6 4228 003D                  		clr.b	$3D(a0)
00019AFA                            
00019AFA                            loc_1929E:
00019AFA 0440 2C10                  		subi.w	#$2C10,d0
00019AFE 0240 001F                  		andi.w	#$1F,d0
00019B02 0440 001F                  		subi.w	#$1F,d0
00019B06 6A00                       		bpl.s	loc_192AE
00019B08 4440                       		neg.w	d0
00019B0A                            
00019B0A                            loc_192AE:
00019B0A 5340                       		subq.w	#1,d0
00019B0C 6E00                       		bgt.s	loc_192E8
00019B0E 4A28 003D                  		tst.b	$3D(a0)
00019B12 6600                       		bne.s	loc_192E8
00019B14 3238 D008                  		move.w	($FFFFD008).w,d1
00019B18 0441 2C00                  		subi.w	#$2C00,d1
00019B1C EA41                       		asr.w	#5,d1
00019B1E B228 0034                  		cmp.b	$34(a0),d1
00019B22 6600                       		bne.s	loc_192E8
00019B24 7000                       		moveq	#0,d0
00019B26 1028 0034                  		move.b	$34(a0),d0
00019B2A EB40                       		asl.w	#5,d0
00019B2C 0640 2C10                  		addi.w	#$2C10,d0
00019B30 3140 0030                  		move.w	d0,$30(a0)
00019B34 6100 0000                  		bsr.w	Obj75_FindBlocks
00019B38 5428 0025                  		addq.b	#2,$25(a0)
00019B3C 4268 0028                  		clr.w	$28(a0)
00019B40 4268 0010                  		clr.w	$10(a0)
00019B44                            
00019B44                            loc_192E8:
00019B44 6000 FEF4                  		bra.w	loc_191DE
00019B48                            ; ===========================================================================
00019B48                            
00019B48                            loc_192EC:				; XREF: Obj75_ShipIndex
00019B48 7000                       		moveq	#0,d0
00019B4A 1028 0028                  		move.b	$28(a0),d0
00019B4E 303B 0000                  		move.w	off_192FA(pc,d0.w),d0
00019B52 4EFB 0000                  		jmp	off_192FA(pc,d0.w)
00019B56                            ; ===========================================================================
00019B56 0000                       off_192FA:	dc.w loc_19302-off_192FA
00019B58 0000                       		dc.w loc_19348-off_192FA
00019B5A 0000                       		dc.w loc_1938E-off_192FA
00019B5C 0000                       		dc.w loc_193D0-off_192FA
00019B5E                            ; ===========================================================================
00019B5E                            
00019B5E                            loc_19302:				; XREF: off_192FA
00019B5E 317C 0180 0012             		move.w	#$180,$12(a0)
00019B64 3028 0038                  		move.w	$38(a0),d0
00019B68 0C40 0556                  		cmpi.w	#$556,d0
00019B6C 6500                       		bcs.s	loc_19344
00019B6E 317C 0556 0038             		move.w	#$556,$38(a0)
00019B74 4268 003C                  		clr.w	$3C(a0)
00019B78 70FF                       		moveq	#-1,d0
00019B7A 3028 0036                  		move.w	$36(a0),d0
00019B7E 6700                       		beq.s	loc_1933C
00019B80 2240                       		movea.l	d0,a1
00019B82 137C 00FF 0029             		move.b	#-1,$29(a1)
00019B88 117C 00FF 0029             		move.b	#-1,$29(a0)
00019B8E 2348 0034                  		move.l	a0,$34(a1)
00019B92 317C 0032 003C             		move.w	#$32,$3C(a0)
00019B98                            
00019B98                            loc_1933C:
00019B98 4268 0012                  		clr.w	$12(a0)
00019B9C 5428 0028                  		addq.b	#2,$28(a0)
00019BA0                            
00019BA0                            loc_19344:
00019BA0 6000 FEAC                  		bra.w	loc_191F2
00019BA4                            ; ===========================================================================
00019BA4                            
00019BA4                            loc_19348:				; XREF: off_192FA
00019BA4 5368 003C                  		subq.w	#1,$3C(a0)
00019BA8 6A00                       		bpl.s	loc_19366
00019BAA 5428 0028                  		addq.b	#2,$28(a0)
00019BAE 317C F800 0012             		move.w	#-$800,$12(a0)
00019BB4 4A68 0036                  		tst.w	$36(a0)
00019BB8 6600                       		bne.s	loc_19362
00019BBA E0E8 0012                  		asr	$12(a0)
00019BBE                            
00019BBE                            loc_19362:
00019BBE 7000                       		moveq	#0,d0
00019BC0 6000                       		bra.s	loc_1937C
00019BC2                            ; ===========================================================================
00019BC2                            
00019BC2                            loc_19366:
00019BC2 7000                       		moveq	#0,d0
00019BC4 0C68 001E 003C             		cmpi.w	#$1E,$3C(a0)
00019BCA 6E00                       		bgt.s	loc_1937C
00019BCC 7002                       		moveq	#2,d0
00019BCE 0828 0001 003D             		btst	#1,$3D(a0)
00019BD4 6700                       		beq.s	loc_1937C
00019BD6 4440                       		neg.w	d0
00019BD8                            
00019BD8                            loc_1937C:
00019BD8 D068 0038                  		add.w	$38(a0),d0
00019BDC 3140 000C                  		move.w	d0,$C(a0)
00019BE0 3168 0030 0008             		move.w	$30(a0),8(a0)
00019BE6 6000 FE76                  		bra.w	loc_19202
00019BEA                            ; ===========================================================================
00019BEA                            
00019BEA                            loc_1938E:				; XREF: off_192FA
00019BEA 303C 04DA                  		move.w	#$4DA,d0
00019BEE 4A68 0036                  		tst.w	$36(a0)
00019BF2 6700                       		beq.s	loc_1939C
00019BF4 0440 0018                  		subi.w	#$18,d0
00019BF8                            
00019BF8                            loc_1939C:
00019BF8 B068 0038                  		cmp.w	$38(a0),d0
00019BFC 6D00                       		blt.s	loc_193BE
00019BFE 317C 0008 003C             		move.w	#8,$3C(a0)
00019C04 4A68 0036                  		tst.w	$36(a0)
00019C08 6700                       		beq.s	loc_193B4
00019C0A 317C 002D 003C             		move.w	#$2D,$3C(a0)
00019C10                            
00019C10                            loc_193B4:
00019C10 5428 0028                  		addq.b	#2,$28(a0)
00019C14 4268 0012                  		clr.w	$12(a0)
00019C18 6000                       		bra.s	loc_193CC
00019C1A                            ; ===========================================================================
00019C1A                            
00019C1A                            loc_193BE:
00019C1A 0C68 FFC0 0012             		cmpi.w	#-$40,$12(a0)
00019C20 6C00                       		bge.s	loc_193CC
00019C22 0668 000C 0012             		addi.w	#$C,$12(a0)
00019C28                            
00019C28                            loc_193CC:
00019C28 6000 FE24                  		bra.w	loc_191F2
00019C2C                            ; ===========================================================================
00019C2C                            
00019C2C                            loc_193D0:				; XREF: off_192FA
00019C2C 5368 003C                  		subq.w	#1,$3C(a0)
00019C30 6E00                       		bgt.s	loc_19406
00019C32 6B00                       		bmi.s	loc_193EE
00019C34 70FF                       		moveq	#-1,d0
00019C36 3028 0036                  		move.w	$36(a0),d0
00019C3A 6700                       		beq.s	loc_193E8
00019C3C 2240                       		movea.l	d0,a1
00019C3E 137C 000A 0029             		move.b	#$A,$29(a1)
00019C44                            
00019C44                            loc_193E8:
00019C44 4268 0036                  		clr.w	$36(a0)
00019C48 6000                       		bra.s	loc_19406
00019C4A                            ; ===========================================================================
00019C4A                            
00019C4A                            loc_193EE:
00019C4A 0C68 FFE2 003C             		cmpi.w	#-$1E,$3C(a0)
00019C50 6600                       		bne.s	loc_19406
00019C52 4228 0029                  		clr.b	$29(a0)
00019C56 5528 0025                  		subq.b	#2,$25(a0)
00019C5A 117C 00FF 003D             		move.b	#-1,$3D(a0)
00019C60 6000                       		bra.s	loc_19446
00019C62                            ; ===========================================================================
00019C62                            
00019C62                            loc_19406:
00019C62 7001                       		moveq	#1,d0
00019C64 4A68 0036                  		tst.w	$36(a0)
00019C68 6700                       		beq.s	loc_19410
00019C6A 7002                       		moveq	#2,d0
00019C6C                            
00019C6C                            loc_19410:
00019C6C 0C68 04DA 0038             		cmpi.w	#$4DA,$38(a0)
00019C72 6700                       		beq.s	loc_19424
00019C74 6D00                       		blt.s	loc_1941C
00019C76 4440                       		neg.w	d0
00019C78                            
00019C78                            loc_1941C:
00019C78 4A68 0036                  		tst.w	$36(a0)
00019C7C D168 0038                  		add.w	d0,$38(a0)
00019C80                            
00019C80                            loc_19424:
00019C80 7000                       		moveq	#0,d0
00019C82 4A68 0036                  		tst.w	$36(a0)
00019C86 6700                       		beq.s	loc_19438
00019C88 7002                       		moveq	#2,d0
00019C8A 0828 0000 003D             		btst	#0,$3D(a0)
00019C90 6700                       		beq.s	loc_19438
00019C92 4440                       		neg.w	d0
00019C94                            
00019C94                            loc_19438:
00019C94 D068 0038                  		add.w	$38(a0),d0
00019C98 3140 000C                  		move.w	d0,$C(a0)
00019C9C 3168 0030 0008             		move.w	$30(a0),8(a0)
00019CA2                            
00019CA2                            loc_19446:
00019CA2 6000 FDBA                  		bra.w	loc_19202
00019CA6                            
00019CA6                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00019CA6                            
00019CA6                            
00019CA6                            Obj75_FindBlocks:			; XREF: loc_192AE
00019CA6 4268 0036                  		clr.w	$36(a0)
00019CAA 43F8 D040                  		lea	($FFFFD040).w,a1
00019CAE 703E                       		moveq	#$3E,d0
00019CB0 7276                       		moveq	#$76,d1
00019CB2 1428 0034                  		move.b	$34(a0),d2
00019CB6                            
00019CB6                            Obj75_FindLoop:
00019CB6 B211                       		cmp.b	(a1),d1		; is object a SYZ boss block?
00019CB8 6600                       		bne.s	loc_1946A	; if not, branch
00019CBA B429 0028                  		cmp.b	$28(a1),d2
00019CBE 6600                       		bne.s	loc_1946A
00019CC0 3149 0036                  		move.w	a1,$36(a0)
00019CC4 6000                       		bra.s	locret_19472
00019CC6                            ; ===========================================================================
00019CC6                            
00019CC6                            loc_1946A:
00019CC6 43E9 0040                  		lea	$40(a1),a1	; next object RAM entry
00019CCA 51C8 FFEA                  		dbf	d0,Obj75_FindLoop
00019CCE                            
00019CCE                            locret_19472:
00019CCE 4E75                       		rts	
00019CD0                            ; End of function Obj75_FindBlocks
00019CD0                            
00019CD0                            ; ===========================================================================
00019CD0                            
00019CD0                            loc_19474:				; XREF: Obj75_ShipIndex
00019CD0 5368 003C                  		subq.w	#1,$3C(a0)
00019CD4 6B00                       		bmi.s	loc_1947E
00019CD6 6000 E412                  		bra.w	BossDefeated
00019CDA                            ; ===========================================================================
00019CDA                            
00019CDA                            loc_1947E:
00019CDA 5428 0025                  		addq.b	#2,$25(a0)
00019CDE 4268 0012                  		clr.w	$12(a0)
00019CE2 08E8 0000 0022             		bset	#0,$22(a0)
00019CE8 08A8 0007 0022             		bclr	#7,$22(a0)
00019CEE 4268 0010                  		clr.w	$10(a0)
00019CF2 317C FFFF 003C             		move.w	#-1,$3C(a0)
00019CF8 4A38 F7A7                  		tst.b	($FFFFF7A7).w
00019CFC 6600                       		bne.s	loc_194A8
00019CFE 11FC 0001 F7A7             		move.b	#1,($FFFFF7A7).w
00019D04                            
00019D04                            loc_194A8:
00019D04 6000 FD58                  		bra.w	loc_19202
00019D08                            ; ===========================================================================
00019D08                            
00019D08                            loc_194AC:				; XREF: Obj75_ShipIndex
00019D08 5268 003C                  		addq.w	#1,$3C(a0)
00019D0C 6700                       		beq.s	loc_194BC
00019D0E 6A00                       		bpl.s	loc_194C2
00019D10 0668 0018 0012             		addi.w	#$18,$12(a0)
00019D16 6000                       		bra.s	loc_194EE
00019D18                            ; ===========================================================================
00019D18                            
00019D18                            loc_194BC:
00019D18 4268 0012                  		clr.w	$12(a0)
00019D1C 6000                       		bra.s	loc_194EE
00019D1E                            ; ===========================================================================
00019D1E                            
00019D1E                            loc_194C2:
00019D1E 0C68 0020 003C             		cmpi.w	#$20,$3C(a0)
00019D24 6500                       		bcs.s	loc_194DA
00019D26 6700                       		beq.s	loc_194E0
00019D28 0C68 002A 003C             		cmpi.w	#$2A,$3C(a0)
00019D2E 6500                       		bcs.s	loc_194EE
00019D30 5428 0025                  		addq.b	#2,$25(a0)
00019D34 6000                       		bra.s	loc_194EE
00019D36                            ; ===========================================================================
00019D36                            
00019D36                            loc_194DA:
00019D36 5168 0012                  		subq.w	#8,$12(a0)
00019D3A 6000                       		bra.s	loc_194EE
00019D3C                            ; ===========================================================================
00019D3C                            
00019D3C                            loc_194E0:
00019D3C 4268 0012                  		clr.w	$12(a0)
00019D40 303C 0085                  		move.w	#$85,d0
00019D44 4EB9 0000 15BA             		jsr	(PlaySound).l	; play SYZ music
00019D4A                            
00019D4A                            loc_194EE:
00019D4A 6000 FD02                  		bra.w	loc_191F2
00019D4E                            ; ===========================================================================
00019D4E                            
00019D4E                            loc_194F2:				; XREF: Obj75_ShipIndex
00019D4E 317C 0400 0010             		move.w	#$400,$10(a0)
00019D54 317C FFC0 0012             		move.w	#-$40,$12(a0)
00019D5A 0C78 2D40 F72A             		cmpi.w	#$2D40,($FFFFF72A).w
00019D60 6400                       		bcc.s	loc_1950C
00019D62 5478 F72A                  		addq.w	#2,($FFFFF72A).w
00019D66 6000                       		bra.s	loc_19512
00019D68                            ; ===========================================================================
00019D68                            
00019D68                            loc_1950C:
00019D68 4A28 0001                  		tst.b	1(a0)
00019D6C 6A00                       		bpl.s	Obj75_ShipDelete
00019D6E                            
00019D6E                            loc_19512:
00019D6E 6100 E3BC                  		bsr.w	BossMove
00019D72 6000 FCC6                  		bra.w	loc_191DE
00019D76                            ; ===========================================================================
00019D76                            
00019D76                            Obj75_ShipDelete:
00019D76 4EF9 0000 DD9E             		jmp	DeleteObject
00019D7C                            ; ===========================================================================
00019D7C                            
00019D7C                            Obj75_FaceMain:				; XREF: Obj75_Index
00019D7C 7201                       		moveq	#1,d1
00019D7E 2268 0034                  		movea.l	$34(a0),a1
00019D82 7000                       		moveq	#0,d0
00019D84 1029 0025                  		move.b	$25(a1),d0
00019D88 303B 0000                  		move.w	off_19546(pc,d0.w),d0
00019D8C 4EBB 0000                  		jsr	off_19546(pc,d0.w)
00019D90 1141 001C                  		move.b	d1,$1C(a0)
00019D94 1010                       		move.b	(a0),d0
00019D96 B011                       		cmp.b	(a1),d0
00019D98 6600                       		bne.s	Obj75_FaceDelete
00019D9A 6000                       		bra.s	loc_195BE
00019D9C                            ; ===========================================================================
00019D9C                            
00019D9C                            Obj75_FaceDelete:
00019D9C 4EF9 0000 DD9E             		jmp	DeleteObject
00019DA2                            ; ===========================================================================
00019DA2 0000 0000                  off_19546:	dc.w loc_19574-off_19546, loc_19574-off_19546
00019DA6 0000 0000                  		dc.w loc_1955A-off_19546, loc_19552-off_19546
00019DAA 0000 0000                  		dc.w loc_19552-off_19546, loc_19556-off_19546
00019DAE                            ; ===========================================================================
00019DAE                            
00019DAE                            loc_19552:				; XREF: off_19546
00019DAE 720A                       		moveq	#$A,d1
00019DB0 4E75                       		rts	
00019DB2                            ; ===========================================================================
00019DB2                            
00019DB2                            loc_19556:				; XREF: off_19546
00019DB2 7206                       		moveq	#6,d1
00019DB4 4E75                       		rts	
00019DB6                            ; ===========================================================================
00019DB6                            
00019DB6                            loc_1955A:				; XREF: off_19546
00019DB6 7000                       		moveq	#0,d0
00019DB8 1029 0028                  		move.b	$28(a1),d0
00019DBC 303B 0000                  		move.w	off_19568(pc,d0.w),d0
00019DC0 4EFB 0000                  		jmp	off_19568(pc,d0.w)
00019DC4                            ; ===========================================================================
00019DC4 0000 0000                  off_19568:	dc.w loc_19570-off_19568, loc_19572-off_19568
00019DC8 0000 0000                  		dc.w loc_19570-off_19568, loc_19570-off_19568
00019DCC                            ; ===========================================================================
00019DCC                            
00019DCC                            loc_19570:				; XREF: off_19568
00019DCC 6000                       		bra.s	loc_19574
00019DCE                            ; ===========================================================================
00019DCE                            
00019DCE                            loc_19572:				; XREF: off_19568
00019DCE 7206                       		moveq	#6,d1
00019DD0                            
00019DD0                            loc_19574:				; XREF: off_19546
00019DD0 4A29 0020                  		tst.b	$20(a1)
00019DD4 6600                       		bne.s	loc_1957E
00019DD6 7205                       		moveq	#5,d1
00019DD8 4E75                       		rts	
00019DDA                            ; ===========================================================================
00019DDA                            
00019DDA                            loc_1957E:
00019DDA 0C38 0004 D024             		cmpi.b	#4,($FFFFD024).w
00019DE0 6500                       		bcs.s	locret_19588
00019DE2 7204                       		moveq	#4,d1
00019DE4                            
00019DE4                            locret_19588:
00019DE4 4E75                       		rts	
00019DE6                            ; ===========================================================================
00019DE6                            
00019DE6                            Obj75_FlameMain:			; XREF: Obj75_Index
00019DE6 117C 0007 001C             		move.b	#7,$1C(a0)
00019DEC 2268 0034                  		movea.l	$34(a0),a1
00019DF0 0C29 000A 0025             		cmpi.b	#$A,$25(a1)
00019DF6 6600                       		bne.s	loc_195AA
00019DF8 117C 000B 001C             		move.b	#$B,$1C(a0)
00019DFE 4A28 0001                  		tst.b	1(a0)
00019E02 6A00                       		bpl.s	Obj75_FlameDelete
00019E04 6000                       		bra.s	loc_195B6
00019E06                            ; ===========================================================================
00019E06                            
00019E06                            loc_195AA:
00019E06 4A69 0010                  		tst.w	$10(a1)
00019E0A 6700                       		beq.s	loc_195B6
00019E0C 117C 0008 001C             		move.b	#8,$1C(a0)
00019E12                            
00019E12                            loc_195B6:
00019E12 6000                       		bra.s	loc_195BE
00019E14                            ; ===========================================================================
00019E14                            
00019E14                            Obj75_FlameDelete:
00019E14 4EF9 0000 DD9E             		jmp	DeleteObject
00019E1A                            ; ===========================================================================
00019E1A                            
00019E1A                            loc_195BE:
00019E1A 43F9 0001 856E             		lea	(Ani_Eggman).l,a1
00019E20 4EB9 0000 AE22             		jsr	AnimateSprite
00019E26 2268 0034                  		movea.l	$34(a0),a1
00019E2A 3169 0008 0008             		move.w	8(a1),8(a0)
00019E30 3169 000C 000C             		move.w	$C(a1),$C(a0)
00019E36                            
00019E36                            loc_195DA:
00019E36 1169 0022 0022             		move.b	$22(a1),$22(a0)
00019E3C 7003                       		moveq	#3,d0
00019E3E C028 0022                  		and.b	$22(a0),d0
00019E42 0228 00FC 0001             		andi.b	#$FC,1(a0)
00019E48 8128 0001                  		or.b	d0,1(a0)
00019E4C 4EF9 0000 DD62             		jmp	DisplaySprite
00019E52                            ; ===========================================================================
00019E52                            
00019E52                            Obj75_SpikeMain:			; XREF: Obj75_Index
00019E52 217C 0001 869A 0004        		move.l	#Map_BossItems,4(a0)
00019E5A 317C 246C 0002             		move.w	#$246C,2(a0)
00019E60 117C 0005 001A             		move.b	#5,$1A(a0)
00019E66 2268 0034                  		movea.l	$34(a0),a1
00019E6A 0C29 000A 0025             		cmpi.b	#$A,$25(a1)
00019E70 6600                       		bne.s	loc_1961C
00019E72 4A28 0001                  		tst.b	1(a0)
00019E76 6A00                       		bpl.s	Obj75_SpikeDelete
00019E78                            
00019E78                            loc_1961C:
00019E78 3169 0008 0008             		move.w	8(a1),8(a0)
00019E7E 3169 000C 000C             		move.w	$C(a1),$C(a0)
00019E84 3028 003C                  		move.w	$3C(a0),d0
00019E88 0C29 0004 0025             		cmpi.b	#4,$25(a1)
00019E8E 6600                       		bne.s	loc_19652
00019E90 0C29 0006 0028             		cmpi.b	#6,$28(a1)
00019E96 6700                       		beq.s	loc_1964C
00019E98 4A29 0028                  		tst.b	$28(a1)
00019E9C 6600                       		bne.s	loc_19658
00019E9E 0C40 0094                  		cmpi.w	#$94,d0
00019EA2 6C00                       		bge.s	loc_19658
00019EA4 5E40                       		addq.w	#7,d0
00019EA6 6000                       		bra.s	loc_19658
00019EA8                            ; ===========================================================================
00019EA8                            
00019EA8                            loc_1964C:
00019EA8 4A69 003C                  		tst.w	$3C(a1)
00019EAC 6A00                       		bpl.s	loc_19658
00019EAE                            
00019EAE                            loc_19652:
00019EAE 4A40                       		tst.w	d0
00019EB0 6F00                       		ble.s	loc_19658
00019EB2 5B40                       		subq.w	#5,d0
00019EB4                            
00019EB4                            loc_19658:
00019EB4 3140 003C                  		move.w	d0,$3C(a0)
00019EB8 E440                       		asr.w	#2,d0
00019EBA D168 000C                  		add.w	d0,$C(a0)
00019EBE 117C 0008 0019             		move.b	#8,$19(a0)
00019EC4 117C 000C 0016             		move.b	#$C,$16(a0)
00019ECA 4228 0020                  		clr.b	$20(a0)
00019ECE 2268 0034                  		movea.l	$34(a0),a1
00019ED2 4A29 0020                  		tst.b	$20(a1)
00019ED6 6700                       		beq.s	loc_19688
00019ED8 4A29 0029                  		tst.b	$29(a1)
00019EDC 6600                       		bne.s	loc_19688
00019EDE 117C 0084 0020             		move.b	#$84,$20(a0)
00019EE4                            
00019EE4                            loc_19688:
00019EE4 6000 FF50                  		bra.w	loc_195DA
00019EE8                            ; ===========================================================================
00019EE8                            
00019EE8                            Obj75_SpikeDelete:
00019EE8 4EF9 0000 DD9E             		jmp	DeleteObject
00019EEE                            ; ===========================================================================
00019EEE                            ; ---------------------------------------------------------------------------
00019EEE                            ; Object 76 - blocks that Eggman picks up (SYZ)
00019EEE                            ; ---------------------------------------------------------------------------
00019EEE                            
00019EEE                            Obj76:					; XREF: Obj_Index
00019EEE 7000                       		moveq	#0,d0
00019EF0 1028 0024                  		move.b	$24(a0),d0
00019EF4 323B 0000                  		move.w	Obj76_Index(pc,d0.w),d1
00019EF8 4EFB 1000                  		jmp	Obj76_Index(pc,d1.w)
00019EFC                            ; ===========================================================================
00019EFC 0000                       Obj76_Index:	dc.w Obj76_Main-Obj76_Index
00019EFE 0000                       		dc.w Obj76_Action-Obj76_Index
00019F00 0000                       		dc.w loc_19762-Obj76_Index
00019F02                            ; ===========================================================================
00019F02                            
00019F02                            Obj76_Main:				; XREF: Obj76_Index
00019F02 7800                       		moveq	#0,d4
00019F04 3A3C 2C10                  		move.w	#$2C10,d5
00019F08 7C09                       		moveq	#9,d6
00019F0A 43D0                       		lea	(a0),a1
00019F0C 6000                       		bra.s	Obj76_MakeBlock
00019F0E                            ; ===========================================================================
00019F0E                            
00019F0E                            Obj76_Loop:
00019F0E 4EB9 0000 E1E8             		jsr	SingleObjLoad
00019F14 6600                       		bne.s	Obj76_ExitLoop
00019F16                            
00019F16                            Obj76_MakeBlock:			; XREF: Obj76_Main
00019F16 12BC 0076                  		move.b	#$76,(a1)
00019F1A 237C 0000 0000 0004        		move.l	#Map_obj76,4(a1)
00019F22 337C 4000 0002             		move.w	#$4000,2(a1)
00019F28 137C 0004 0001             		move.b	#4,1(a1)
00019F2E 137C 0010 0019             		move.b	#$10,$19(a1)
00019F34 137C 0010 0016             		move.b	#$10,$16(a1)
00019F3A 137C 0003 0018             		move.b	#3,$18(a1)
00019F40 3345 0008                  		move.w	d5,8(a1)	; set x-position
00019F44 337C 0582 000C             		move.w	#$582,$C(a1)
00019F4A 3344 0028                  		move.w	d4,$28(a1)
00019F4E 0644 0101                  		addi.w	#$101,d4
00019F52 0645 0020                  		addi.w	#$20,d5		; add $20 to next x-position
00019F56 5429 0024                  		addq.b	#2,$24(a1)
00019F5A 51CE FFB2                  		dbf	d6,Obj76_Loop	; repeat sequence 9 more times
00019F5E                            
00019F5E                            Obj76_ExitLoop:
00019F5E 4E75                       		rts	
00019F60                            ; ===========================================================================
00019F60                            
00019F60                            Obj76_Action:				; XREF: Obj76_Index
00019F60 1028 0029                  		move.b	$29(a0),d0
00019F64 B028 0028                  		cmp.b	$28(a0),d0
00019F68 6700                       		beq.s	Obj76_Solid
00019F6A 4A00                       		tst.b	d0
00019F6C 6B00                       		bmi.s	loc_19718
00019F6E                            
00019F6E                            loc_19712:
00019F6E 6100 0000                  		bsr.w	Obj76_Break
00019F72 6000                       		bra.s	Obj76_Display
00019F74                            ; ===========================================================================
00019F74                            
00019F74                            loc_19718:
00019F74 2268 0034                  		movea.l	$34(a0),a1
00019F78 4A29 0021                  		tst.b	$21(a1)
00019F7C 67F0                       		beq.s	loc_19712
00019F7E 3169 0008 0008             		move.w	8(a1),8(a0)
00019F84 3169 000C 000C             		move.w	$C(a1),$C(a0)
00019F8A 0668 002C 000C             		addi.w	#$2C,$C(a0)
00019F90 B2C8                       		cmpa.w	a0,a1
00019F92 6500                       		bcs.s	Obj76_Display
00019F94 3029 0012                  		move.w	$12(a1),d0
00019F98 48C0                       		ext.l	d0
00019F9A E080                       		asr.l	#8,d0
00019F9C D168 000C                  		add.w	d0,$C(a0)
00019FA0 6000                       		bra.s	Obj76_Display
00019FA2                            ; ===========================================================================
00019FA2                            
00019FA2                            Obj76_Solid:				; XREF: Obj76_Action
00019FA2 323C 001B                  		move.w	#$1B,d1
00019FA6 343C 0010                  		move.w	#$10,d2
00019FAA 363C 0011                  		move.w	#$11,d3
00019FAE 3828 0008                  		move.w	8(a0),d4
00019FB2 4EB9 0001 0132             		jsr	SolidObject
00019FB8                            
00019FB8                            Obj76_Display:				; XREF: Obj76_Action
00019FB8 4EF9 0000 DD62             		jmp	DisplaySprite
00019FBE                            ; ===========================================================================
00019FBE                            
00019FBE                            loc_19762:				; XREF: Obj76_Index
00019FBE 4A28 0001                  		tst.b	1(a0)
00019FC2 6A00                       		bpl.s	Obj76_Delete
00019FC4 4EB9 0000 DD10             		jsr	ObjectFall
00019FCA 4EF9 0000 DD62             		jmp	DisplaySprite
00019FD0                            ; ===========================================================================
00019FD0                            
00019FD0                            Obj76_Delete:
00019FD0 4EF9 0000 DD9E             		jmp	DeleteObject
00019FD6                            
00019FD6                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00019FD6                            
00019FD6                            
00019FD6                            Obj76_Break:				; XREF: Obj76_Action
00019FD6 49FA 0000                  		lea	Obj76_FragSpeed(pc),a4
00019FDA 4BFA 0000                  		lea	Obj76_FragPos(pc),a5
00019FDE 7801                       		moveq	#1,d4
00019FE0 7203                       		moveq	#3,d1
00019FE2 7438                       		moveq	#$38,d2
00019FE4 5428 0024                  		addq.b	#2,$24(a0)
00019FE8 117C 0008 0019             		move.b	#8,$19(a0)
00019FEE 117C 0008 0016             		move.b	#8,$16(a0)
00019FF4 43D0                       		lea	(a0),a1
00019FF6 6000                       		bra.s	Obj76_MakeFrag
00019FF8                            ; ===========================================================================
00019FF8                            
00019FF8                            Obj76_LoopFrag:
00019FF8 4EB9 0000 E1FE             		jsr	SingleObjLoad2
00019FFE 6600                       		bne.s	loc_197D4
0001A000                            
0001A000                            Obj76_MakeFrag:
0001A000 45D0                       		lea	(a0),a2
0001A002 47D1                       		lea	(a1),a3
0001A004 7603                       		moveq	#3,d3
0001A006                            
0001A006                            loc_197AA:
0001A006 26DA                       		move.l	(a2)+,(a3)+
0001A008 26DA                       		move.l	(a2)+,(a3)+
0001A00A 26DA                       		move.l	(a2)+,(a3)+
0001A00C 26DA                       		move.l	(a2)+,(a3)+
0001A00E 51CB FFF6                  		dbf	d3,loc_197AA
0001A012                            
0001A012 335C 0010                  		move.w	(a4)+,$10(a1)
0001A016 335C 0012                  		move.w	(a4)+,$12(a1)
0001A01A 361D                       		move.w	(a5)+,d3
0001A01C D769 0008                  		add.w	d3,8(a1)
0001A020 361D                       		move.w	(a5)+,d3
0001A022 D769 000C                  		add.w	d3,$C(a1)
0001A026 1344 001A                  		move.b	d4,$1A(a1)
0001A02A 5244                       		addq.w	#1,d4
0001A02C 51C9 FFCA                  		dbf	d1,Obj76_LoopFrag ; repeat sequence 3 more times
0001A030                            
0001A030                            loc_197D4:
0001A030 303C 00CB                  		move.w	#$CB,d0
0001A034 4EF9 0000 15C0             		jmp	(PlaySound_Special).l ;	play smashing sound
0001A03A                            ; End of function Obj76_Break
0001A03A                            
0001A03A                            ; ===========================================================================
0001A03A FE80 FE00                  Obj76_FragSpeed:dc.w $FE80, $FE00
0001A03E 0180 FE00                  		dc.w $180, $FE00
0001A042 FF00 FF00                  		dc.w $FF00, $FF00
0001A046 0100 FF00                  		dc.w $100, $FF00
0001A04A FFF8 FFF8                  Obj76_FragPos:	dc.w $FFF8, $FFF8
0001A04E 0010 0000                  		dc.w $10, 0
0001A052 0000 0010                  		dc.w 0,	$10
0001A056 0010 0010                  		dc.w $10, $10
0001A05A                            ; ---------------------------------------------------------------------------
0001A05A                            ; Sprite mappings - blocks that	Eggman picks up (SYZ)
0001A05A                            ; ---------------------------------------------------------------------------
0001A05A                            Map_obj76:
0001A05A                            	include "_maps\obj76.asm"
0001A05A                            ; ---------------------------------------------------------------------------
0001A05A                            ; Sprite mappings - blocks that	Robotnik picks up (SYZ)
0001A05A                            ; ---------------------------------------------------------------------------
0001A05A 0000 0000                  		dc.w byte_19808-Map_obj76, byte_19814-Map_obj76
0001A05E 0000 0000                  		dc.w byte_1981A-Map_obj76, byte_19820-Map_obj76
0001A062 0000                       		dc.w byte_19826-Map_obj76
0001A064 02                         byte_19808:	dc.b 2
0001A065 F00D 0071 F0               		dc.b $F0, $D, 0, $71, $F0
0001A06A 000D 0079 F0               		dc.b 0,	$D, 0, $79, $F0
0001A06F 00                         		dc.b 0
0001A070 01                         byte_19814:	dc.b 1
0001A071 F805 0071 F8               		dc.b $F8, 5, 0,	$71, $F8
0001A076 01                         byte_1981A:	dc.b 1
0001A077 F805 0075 F8               		dc.b $F8, 5, 0,	$75, $F8
0001A07C 01                         byte_19820:	dc.b 1
0001A07D F805 0079 F8               		dc.b $F8, 5, 0,	$79, $F8
0001A082 01                         byte_19826:	dc.b 1
0001A083 F805 007D F8               		dc.b $F8, 5, 0,	$7D, $F8
0001A088                            		even
0001A088                            		even
0001A088                            
0001A088                            ; ===========================================================================
0001A088                            
0001A088                            loc_1982C:				; XREF: loc_19C62; loc_19C80
0001A088 4EF9 0000 DD9E             		jmp	DeleteObject
0001A08E                            ; ===========================================================================
0001A08E                            ; ---------------------------------------------------------------------------
0001A08E                            ; Object 82 - Eggman (SBZ2)
0001A08E                            ; ---------------------------------------------------------------------------
0001A08E                            
0001A08E                            Obj82:					; XREF: Obj_Index
0001A08E 7000                       		moveq	#0,d0
0001A090 1028 0024                  		move.b	$24(a0),d0
0001A094 323B 0000                  		move.w	Obj82_Index(pc,d0.w),d1
0001A098 4EFB 1000                  		jmp	Obj82_Index(pc,d1.w)
0001A09C                            ; ===========================================================================
0001A09C 0000                       Obj82_Index:	dc.w Obj82_Main-Obj82_Index
0001A09E 0000                       		dc.w Obj82_Eggman-Obj82_Index
0001A0A0 0000                       		dc.w Obj82_Switch-Obj82_Index
0001A0A2                            
0001A0A2 0200 03                    Obj82_ObjData:	dc.b 2,	0, 3		; routine number, animation, priority
0001A0A5 0400 03                    		dc.b 4,	0, 3
0001A0A8                            ; ===========================================================================
0001A0A8                            
0001A0A8                            Obj82_Main:				; XREF: Obj82_Index
0001A0A8 45FA FFF8                  		lea	Obj82_ObjData(pc),a2
0001A0AC 317C 2160 0008             		move.w	#$2160,8(a0)
0001A0B2 317C 05A4 000C             		move.w	#$5A4,$C(a0)
0001A0B8 117C 000F 0020             		move.b	#$F,$20(a0)
0001A0BE 117C 0010 0021             		move.b	#$10,$21(a0)
0001A0C4 08A8 0000 0022             		bclr	#0,$22(a0)
0001A0CA 4228 0025                  		clr.b	$25(a0)
0001A0CE 115A 0024                  		move.b	(a2)+,$24(a0)
0001A0D2 115A 001C                  		move.b	(a2)+,$1C(a0)
0001A0D6 115A 0018                  		move.b	(a2)+,$18(a0)
0001A0DA 217C 0000 0000 0004        		move.l	#Map_obj82,4(a0)
0001A0E2 317C 0400 0002             		move.w	#$400,2(a0)
0001A0E8 117C 0004 0001             		move.b	#4,1(a0)
0001A0EE 08E8 0007 0001             		bset	#7,1(a0)
0001A0F4 117C 0020 0019             		move.b	#$20,$19(a0)
0001A0FA 4EB9 0000 E1FE             		jsr	SingleObjLoad2
0001A100 6600                       		bne.s	Obj82_Eggman
0001A102 2348 0034                  		move.l	a0,$34(a1)
0001A106 12BC 0082                  		move.b	#$82,(a1)	; load switch object
0001A10A 337C 2130 0008             		move.w	#$2130,8(a1)
0001A110 337C 05BC 000C             		move.w	#$5BC,$C(a1)
0001A116 4228 0025                  		clr.b	$25(a0)
0001A11A 135A 0024                  		move.b	(a2)+,$24(a1)
0001A11E 135A 001C                  		move.b	(a2)+,$1C(a1)
0001A122 135A 0018                  		move.b	(a2)+,$18(a1)
0001A126 237C 0000 C556 0004        		move.l	#Map_obj32,4(a1)
0001A12E 337C 04A4 0002             		move.w	#$4A4,2(a1)
0001A134 137C 0004 0001             		move.b	#4,1(a1)
0001A13A 08E9 0007 0001             		bset	#7,1(a1)
0001A140 137C 0010 0019             		move.b	#$10,$19(a1)
0001A146 137C 0000 001A             		move.b	#0,$1A(a1)
0001A14C                            
0001A14C                            Obj82_Eggman:				; XREF: Obj82_Index
0001A14C 7000                       		moveq	#0,d0
0001A14E 1028 0025                  		move.b	$25(a0),d0
0001A152 323B 0000                  		move.w	Obj82_EggIndex(pc,d0.w),d1
0001A156 4EBB 1000                  		jsr	Obj82_EggIndex(pc,d1.w)
0001A15A 43FA 0000                  		lea	Ani_obj82(pc),a1
0001A15E 4EB9 0000 AE22             		jsr	AnimateSprite
0001A164 4EF9 0000 DD62             		jmp	DisplaySprite
0001A16A                            ; ===========================================================================
0001A16A 0000                       Obj82_EggIndex:	dc.w Obj82_ChkSonic-Obj82_EggIndex
0001A16C 0000                       		dc.w Obj82_PreLeap-Obj82_EggIndex
0001A16E 0000                       		dc.w Obj82_Leap-Obj82_EggIndex
0001A170 0000                       		dc.w loc_19934-Obj82_EggIndex
0001A172                            ; ===========================================================================
0001A172                            
0001A172                            Obj82_ChkSonic:				; XREF: Obj82_EggIndex
0001A172 3028 0008                  		move.w	8(a0),d0
0001A176 9078 D008                  		sub.w	($FFFFD008).w,d0
0001A17A 0C40 0080                  		cmpi.w	#128,d0		; is Sonic within 128 pixels of	Eggman?
0001A17E 6400                       		bcc.s	loc_19934	; if not, branch
0001A180 5428 0025                  		addq.b	#2,$25(a0)
0001A184 317C 00B4 003C             		move.w	#180,$3C(a0)	; set delay to 3 seconds
0001A18A 117C 0001 001C             		move.b	#1,$1C(a0)
0001A190                            
0001A190                            loc_19934:				; XREF: Obj82_EggIndex
0001A190 4EF9 0000 DD3C             		jmp	SpeedToPos
0001A196                            ; ===========================================================================
0001A196                            
0001A196                            Obj82_PreLeap:				; XREF: Obj82_EggIndex
0001A196 5368 003C                  		subq.w	#1,$3C(a0)	; subtract 1 from time delay
0001A19A 6600                       		bne.s	loc_19954	; if time remains, branch
0001A19C 5428 0025                  		addq.b	#2,$25(a0)
0001A1A0 117C 0002 001C             		move.b	#2,$1C(a0)
0001A1A6 5868 000C                  		addq.w	#4,$C(a0)
0001A1AA 317C 000F 003C             		move.w	#15,$3C(a0)
0001A1B0                            
0001A1B0                            loc_19954:
0001A1B0 60DE                       		bra.s	loc_19934
0001A1B2                            ; ===========================================================================
0001A1B2                            
0001A1B2                            Obj82_Leap:				; XREF: Obj82_EggIndex
0001A1B2 5368 003C                  		subq.w	#1,$3C(a0)
0001A1B6 6E00                       		bgt.s	loc_199D0
0001A1B8 6600                       		bne.s	loc_1996A
0001A1BA 317C FF04 0010             		move.w	#-$FC,$10(a0)	; make Eggman leap
0001A1C0 317C FC40 0012             		move.w	#-$3C0,$12(a0)
0001A1C6                            
0001A1C6                            loc_1996A:
0001A1C6 0C68 2132 0008             		cmpi.w	#$2132,8(a0)
0001A1CC 6E00                       		bgt.s	loc_19976
0001A1CE 4268 0010                  		clr.w	$10(a0)
0001A1D2                            
0001A1D2                            loc_19976:
0001A1D2 0668 0024 0012             		addi.w	#$24,$12(a0)
0001A1D8 4A68 0012                  		tst.w	$12(a0)
0001A1DC 6B00                       		bmi.s	Obj82_FindBlocks
0001A1DE 0C68 0595 000C             		cmpi.w	#$595,$C(a0)
0001A1E4 6500                       		bcs.s	Obj82_FindBlocks
0001A1E6 317C 5357 0028             		move.w	#$5357,$28(a0)
0001A1EC 0C68 059B 000C             		cmpi.w	#$59B,$C(a0)
0001A1F2 6500                       		bcs.s	Obj82_FindBlocks
0001A1F4 317C 059B 000C             		move.w	#$59B,$C(a0)
0001A1FA 4268 0012                  		clr.w	$12(a0)
0001A1FE                            
0001A1FE                            Obj82_FindBlocks:
0001A1FE 3028 0010                  		move.w	$10(a0),d0
0001A202 8068 0012                  		or.w	$12(a0),d0
0001A206 6600                       		bne.s	loc_199D0
0001A208 43F8 D000                  		lea	($FFFFD000).w,a1 ; start at the	first object RAM
0001A20C 703E                       		moveq	#$3E,d0
0001A20E 7240                       		moveq	#$40,d1
0001A210                            
0001A210                            Obj82_FindLoop:	
0001A210 D2C1                       		adda.w	d1,a1		; jump to next object RAM
0001A212 0C11 0083                  		cmpi.b	#$83,(a1)	; is object a block? (object $83)
0001A216 57C8 FFF8                  		dbeq	d0,Obj82_FindLoop ; if not, repeat (max	$3E times)
0001A21A                            
0001A21A 6600                       		bne.s	loc_199D0
0001A21C 337C 474F 0028             		move.w	#$474F,$28(a1)	; set block to disintegrate
0001A222 5428 0025                  		addq.b	#2,$25(a0)
0001A226 117C 0001 001C             		move.b	#1,$1C(a0)
0001A22C                            
0001A22C                            loc_199D0:
0001A22C 6000 FF62                  		bra.w	loc_19934
0001A230                            ; ===========================================================================
0001A230                            
0001A230                            Obj82_Switch:				; XREF: Obj82_Index
0001A230 7000                       		moveq	#0,d0
0001A232 1028 0025                  		move.b	$25(a0),d0
0001A236 303B 0000                  		move.w	Obj82_SwIndex(pc,d0.w),d0
0001A23A 4EFB 0000                  		jmp	Obj82_SwIndex(pc,d0.w)
0001A23E                            ; ===========================================================================
0001A23E 0000                       Obj82_SwIndex:	dc.w loc_199E6-Obj82_SwIndex
0001A240 0000                       		dc.w Obj82_SwDisplay-Obj82_SwIndex
0001A242                            ; ===========================================================================
0001A242                            
0001A242                            loc_199E6:				; XREF: Obj82_SwIndex
0001A242 2268 0034                  		movea.l	$34(a0),a1
0001A246 0C69 5357 0028             		cmpi.w	#$5357,$28(a1)
0001A24C 6600                       		bne.s	Obj82_SwDisplay
0001A24E 117C 0001 001A             		move.b	#1,$1A(a0)
0001A254 5428 0025                  		addq.b	#2,$25(a0)
0001A258                            
0001A258                            Obj82_SwDisplay:			; XREF: Obj82_SwIndex
0001A258 4EF9 0000 DD62             		jmp	DisplaySprite
0001A25E                            ; ===========================================================================
0001A25E                            Ani_obj82:
0001A25E                            	include "_anim\obj82.asm"
0001A25E                            ; ---------------------------------------------------------------------------
0001A25E                            ; Animation script - Eggman (SBZ2)
0001A25E                            ; ---------------------------------------------------------------------------
0001A25E 0000                       		dc.w byte_19A10-Ani_obj82
0001A260 0000                       		dc.w byte_19A14-Ani_obj82
0001A262 0000                       		dc.w byte_19A18-Ani_obj82
0001A264 0000                       		dc.w byte_19A20-Ani_obj82
0001A266 0000                       		dc.w byte_19A24-Ani_obj82
0001A268 0000                       		dc.w byte_19A2A-Ani_obj82
0001A26A 0000                       		dc.w byte_19A30-Ani_obj82
0001A26C 7E00 FF00                  byte_19A10:	dc.b $7E, 0, $FF, 0
0001A270 0601 02FF                  byte_19A14:	dc.b 6,	1, 2, $FF
0001A274 0E03 0404 0000 00FF        byte_19A18:	dc.b $E, 3, 4, 4, 0, 0,	0, $FF
0001A27C 0005 09FF                  byte_19A20:	dc.b 0,	5, 9, $FF
0001A280 0607 0408 04FF             byte_19A24:	dc.b 6,	7, 4, 8, 4, $FF
0001A286 0F04 0303 FF00             byte_19A2A:	dc.b $F, 4, 3, 3, $FF, 0
0001A28C 7E06 FF00                  byte_19A30:	dc.b $7E, 6, $FF, 0
0001A290                            		even
0001A290                            		even
0001A290                            
0001A290                            ; ---------------------------------------------------------------------------
0001A290                            ; Sprite mappings - Eggman (SBZ2)
0001A290                            ; ---------------------------------------------------------------------------
0001A290                            Map_obj82:
0001A290                            	include "_maps\obj82.asm"
0001A290                            ; ================================================================================
0001A290                            ; Sprite Mappings - generated by Flex 2 Fri Mar 21 2025 21:13:29 GMT-0500 (Central Daylight Time)
0001A290                            ; ================================================================================
0001A290                            
0001A290                            DATAA16Z12RYSAF:
0001A290 0000 0000                  	dc.w DATAA16Z12RYSAF_0-DATAA16Z12RYSAF, DATAA16Z12RYSAF_1-DATAA16Z12RYSAF
0001A294 0000 0000                  	dc.w DATAA16Z12RYSAF_2-DATAA16Z12RYSAF, DATAA16Z12RYSAF_3-DATAA16Z12RYSAF
0001A298 0000 0000                  	dc.w DATAA16Z12RYSAF_4-DATAA16Z12RYSAF, DATAA16Z12RYSAF_5-DATAA16Z12RYSAF
0001A29C 0000 0000                  	dc.w DATAA16Z12RYSAF_6-DATAA16Z12RYSAF, DATAA16Z12RYSAF_7-DATAA16Z12RYSAF
0001A2A0 0000 0000                  	dc.w DATAA16Z12RYSAF_8-DATAA16Z12RYSAF, DATAA16Z12RYSAF_9-DATAA16Z12RYSAF
0001A2A4 0000                       	dc.w DATAA16Z12RYSAF_A-DATAA16Z12RYSAF
0001A2A6 03                         DATAA16Z12RYSAF_0: dc.b $3
0001A2A7 FC00 006D E8               	dc.b $FC, $0, $0, $6D, $E8
0001A2AC E80E 0000 F0               	dc.b $E8, $E, $0, $0, $F0
0001A2B1 000F 004D F0               	dc.b $0, $F, $0, $4D, $F0
0001A2B6 04                         DATAA16Z12RYSAF_1: dc.b $4
0001A2B7 E80D 000C F0               	dc.b $E8, $D, $0, $C, $F0
0001A2BC E80E 0000 F0               	dc.b $E8, $E, $0, $0, $F0
0001A2C1 000F 004D F0               	dc.b $0, $F, $0, $4D, $F0
0001A2C6 FC00 006D E8               	dc.b $FC, $0, $0, $6D, $E8
0001A2CB 04                         DATAA16Z12RYSAF_2: dc.b $4
0001A2CC E90D 000C F0               	dc.b $E9, $D, $0, $C, $F0
0001A2D1 E90E 0000 F0               	dc.b $E9, $E, $0, $0, $F0
0001A2D6 010F 005D F0               	dc.b $1, $F, $0, $5D, $F0
0001A2DB FD00 006D E8               	dc.b $FD, $0, $0, $6D, $E8
0001A2E0 03                         DATAA16Z12RYSAF_3: dc.b $3
0001A2E1 E80F 006E E8               	dc.b $E8, $F, $0, $6E, $E8
0001A2E6 080D 007E E8               	dc.b $8, $D, $0, $7E, $E8
0001A2EB F005 0086 08               	dc.b $F0, $5, $0, $86, $8
0001A2F0 04                         DATAA16Z12RYSAF_4: dc.b $4
0001A2F1 E00F 008A E8               	dc.b $E0, $F, $0, $8A, $E8
0001A2F6 000C 009A E8               	dc.b $0, $C, $0, $9A, $E8
0001A2FB 0806 009E F0               	dc.b $8, $6, $0, $9E, $F0
0001A300 E805 00A4 08               	dc.b $E8, $5, $0, $A4, $8
0001A305 04                         DATAA16Z12RYSAF_5: dc.b $4
0001A306 E80D 0014 EC               	dc.b $E8, $D, $0, $14, $EC
0001A30B E801 001C 0C               	dc.b $E8, $1, $0, $1C, $C
0001A310 E80E 0000 F0               	dc.b $E8, $E, $0, $0, $F0
0001A315 000F 004D F0               	dc.b $0, $F, $0, $4D, $F0
0001A31A 07                         DATAA16Z12RYSAF_6: dc.b $7
0001A31B E80D 0014 EC               	dc.b $E8, $D, $0, $14, $EC
0001A320 E801 001C 0C               	dc.b $E8, $1, $0, $1C, $C
0001A325 0409 082E 00               	dc.b $4, $9, $8, $2E, $0
0001A32A 0405 0834 E8               	dc.b $4, $5, $8, $34, $E8
0001A32F F00F 081E F0               	dc.b $F0, $F, $8, $1E, $F0
0001A334 F104 0838 10               	dc.b $F1, $4, $8, $38, $10
0001A339 F104 0038 E0               	dc.b $F1, $4, $0, $38, $E0
0001A33E 04                         DATAA16Z12RYSAF_7: dc.b $4
0001A33F 080D 00A8 E4               	dc.b $8, $D, $0, $A8, $E4
0001A344 E80F 00B0 EC               	dc.b $E8, $F, $0, $B0, $EC
0001A349 0805 00C0 04               	dc.b $8, $5, $0, $C0, $4
0001A34E F005 00C4 0C               	dc.b $F0, $5, $0, $C4, $C
0001A353 05                         DATAA16Z12RYSAF_8: dc.b $5
0001A354 0C05 00C8 E4               	dc.b $C, $5, $0, $C8, $E4
0001A359 E40F 00CC EC               	dc.b $E4, $F, $0, $CC, $EC
0001A35E 040C 00DC EC               	dc.b $4, $C, $0, $DC, $EC
0001A363 0C05 00E0 FC               	dc.b $C, $5, $0, $E0, $FC
0001A368 EC04 00E4 0C               	dc.b $EC, $4, $0, $E4, $C
0001A36D 08                         DATAA16Z12RYSAF_9: dc.b $8
0001A36E E80D 0014 EC               	dc.b $E8, $D, $0, $14, $EC
0001A373 E801 001C 0C               	dc.b $E8, $1, $0, $1C, $C
0001A378 E80E 0000 F0               	dc.b $E8, $E, $0, $0, $F0
0001A37D 000F 004D F0               	dc.b $0, $F, $0, $4D, $F0
0001A382 E00D 3ECE F0               	dc.b $E0, $D, $3E, $CE, $F0
0001A387 F00D 3ECE F0               	dc.b $F0, $D, $3E, $CE, $F0
0001A38C 000D 3ECE F0               	dc.b $0, $D, $3E, $CE, $F0
0001A391 100D 3ECE F0               	dc.b $10, $D, $3E, $CE, $F0
0001A396 03                         DATAA16Z12RYSAF_A: dc.b $3
0001A397 EC0D 003A E4               	dc.b $EC, $D, $0, $3A, $E4
0001A39C F408 0042 04               	dc.b $F4, $8, $0, $42, $4
0001A3A1 EC0D 0045 FC               	dc.b $EC, $D, $0, $45, $FC
0001A3A6                            	even
0001A3A6                            	even
0001A3A6                            
0001A3A6                            ; ===========================================================================
0001A3A6                            ; ---------------------------------------------------------------------------
0001A3A6                            ; Object 83 - blocks that disintegrate Eggman	presses	a switch (SBZ2)
0001A3A6                            ; ---------------------------------------------------------------------------
0001A3A6                            
0001A3A6                            Obj83:					; XREF: Obj_Index
0001A3A6 7000                       		moveq	#0,d0
0001A3A8 1028 0024                  		move.b	$24(a0),d0
0001A3AC 323B 0000                  		move.w	Obj83_Index(pc,d0.w),d1
0001A3B0 4EFB 1000                  		jmp	Obj83_Index(pc,d1.w)
0001A3B4                            ; ===========================================================================
0001A3B4 0000                       Obj83_Index:	dc.w Obj83_Main-Obj83_Index
0001A3B6 0000                       		dc.w Obj83_ChkBreak-Obj83_Index
0001A3B8 0000                       		dc.w loc_19C36-Obj83_Index
0001A3BA 0000                       		dc.w loc_19C62-Obj83_Index
0001A3BC 0000                       		dc.w loc_19C72-Obj83_Index
0001A3BE 0000                       		dc.w loc_19C80-Obj83_Index
0001A3C0                            ; ===========================================================================
0001A3C0                            
0001A3C0                            Obj83_Main:				; XREF: Obj83_Index
0001A3C0 317C 2080 0008             		move.w	#$2080,8(a0)
0001A3C6 317C 05D0 000C             		move.w	#$5D0,$C(a0)
0001A3CC 117C 0080 0019             		move.b	#$80,$19(a0)
0001A3D2 117C 0010 0016             		move.b	#$10,$16(a0)
0001A3D8 117C 0004 0001             		move.b	#4,1(a0)
0001A3DE 08E8 0007 0001             		bset	#7,1(a0)
0001A3E4 7800                       		moveq	#0,d4
0001A3E6 3A3C 2010                  		move.w	#$2010,d5
0001A3EA 7C07                       		moveq	#7,d6
0001A3EC 45E8 0030                  		lea	$30(a0),a2
0001A3F0                            
0001A3F0                            Obj83_MakeBlock:
0001A3F0 4EB9 0000 E1E8             		jsr	SingleObjLoad
0001A3F6 6600                       		bne.s	Obj83_ExitMake
0001A3F8 34C9                       		move.w	a1,(a2)+
0001A3FA 12BC 0083                  		move.b	#$83,(a1)	; load block object
0001A3FE 237C 0000 0000 0004        		move.l	#Map_obj83,4(a1)
0001A406 337C 4518 0002             		move.w	#$4518,2(a1)
0001A40C 137C 0004 0001             		move.b	#4,1(a1)
0001A412 137C 0010 0019             		move.b	#$10,$19(a1)
0001A418 137C 0010 0016             		move.b	#$10,$16(a1)
0001A41E 137C 0003 0018             		move.b	#3,$18(a1)
0001A424 3345 0008                  		move.w	d5,8(a1)	; set X	position
0001A428 337C 05D0 000C             		move.w	#$5D0,$C(a1)
0001A42E 0645 0020                  		addi.w	#$20,d5		; add $20 for next X position
0001A432 137C 0008 0024             		move.b	#8,$24(a1)
0001A438 51CE FFB6                  		dbf	d6,Obj83_MakeBlock ; repeat sequence 7 more times
0001A43C                            
0001A43C                            Obj83_ExitMake:
0001A43C 5428 0024                  		addq.b	#2,$24(a0)
0001A440 4E75                       		rts	
0001A442                            ; ===========================================================================
0001A442                            
0001A442                            Obj83_ChkBreak:				; XREF: Obj83_Index
0001A442 0C68 474F 0028             		cmpi.w	#$474F,$28(a0)	; is object set	to disintegrate?
0001A448 6600                       		bne.s	Obj83_Solid	; if not, branch
0001A44A 4228 001A                  		clr.b	$1A(a0)
0001A44E 5428 0024                  		addq.b	#2,$24(a0)	; next subroutine
0001A452                            
0001A452                            Obj83_Solid:
0001A452 7000                       		moveq	#0,d0
0001A454 1028 001A                  		move.b	$1A(a0),d0
0001A458 4400                       		neg.b	d0
0001A45A 4880                       		ext.w	d0
0001A45C 5040                       		addq.w	#8,d0
0001A45E E940                       		asl.w	#4,d0
0001A460 383C 2100                  		move.w	#$2100,d4
0001A464 9840                       		sub.w	d0,d4
0001A466 1140 0019                  		move.b	d0,$19(a0)
0001A46A 3144 0008                  		move.w	d4,8(a0)
0001A46E 720B                       		moveq	#$B,d1
0001A470 D240                       		add.w	d0,d1
0001A472 7410                       		moveq	#$10,d2
0001A474 7611                       		moveq	#$11,d3
0001A476 4EF9 0001 0132             		jmp	SolidObject
0001A47C                            ; ===========================================================================
0001A47C                            
0001A47C                            loc_19C36:				; XREF: Obj83_Index
0001A47C 0428 000E 001E             		subi.b	#$E,$1E(a0)
0001A482 6400                       		bcc.s	Obj83_Solid2
0001A484 70FF                       		moveq	#-1,d0
0001A486 1028 001A                  		move.b	$1A(a0),d0
0001A48A 4880                       		ext.w	d0
0001A48C D040                       		add.w	d0,d0
0001A48E 3030 0030                  		move.w	$30(a0,d0.w),d0
0001A492 2240                       		movea.l	d0,a1
0001A494 337C 474F 0028             		move.w	#$474F,$28(a1)
0001A49A 5228 001A                  		addq.b	#1,$1A(a0)
0001A49E 0C28 0008 001A             		cmpi.b	#8,$1A(a0)
0001A4A4 6700                       		beq.s	loc_19C62
0001A4A6                            
0001A4A6                            Obj83_Solid2:
0001A4A6 60AA                       		bra.s	Obj83_Solid
0001A4A8                            ; ===========================================================================
0001A4A8                            
0001A4A8                            loc_19C62:				; XREF: Obj83_Index
0001A4A8 08A8 0003 0022             		bclr	#3,$22(a0)
0001A4AE 08B8 0003 D022             		bclr	#3,($FFFFD022).w
0001A4B4 6000 FBD2                  		bra.w	loc_1982C
0001A4B8                            ; ===========================================================================
0001A4B8                            
0001A4B8                            loc_19C72:				; XREF: Obj83_Index
0001A4B8 0C68 474F 0028             		cmpi.w	#$474F,$28(a0)	; is object set	to disintegrate?
0001A4BE 6700                       		beq.s	Obj83_Break	; if yes, branch
0001A4C0 4EF9 0000 DD62             		jmp	DisplaySprite
0001A4C6                            ; ===========================================================================
0001A4C6                            
0001A4C6                            loc_19C80:				; XREF: Obj83_Index
0001A4C6 4A28 0001                  		tst.b	1(a0)
0001A4CA 6A00 FBBC                  		bpl.w	loc_1982C
0001A4CE 4EB9 0000 DD10             		jsr	ObjectFall
0001A4D4 4EF9 0000 DD62             		jmp	DisplaySprite
0001A4DA                            ; ===========================================================================
0001A4DA                            
0001A4DA                            Obj83_Break:				; XREF: loc_19C72
0001A4DA 49FA 0000                  		lea	Obj83_FragSpeed(pc),a4
0001A4DE 4BFA 0000                  		lea	Obj83_FragPos(pc),a5
0001A4E2 7801                       		moveq	#1,d4
0001A4E4 7203                       		moveq	#3,d1
0001A4E6 7438                       		moveq	#$38,d2
0001A4E8 5428 0024                  		addq.b	#2,$24(a0)
0001A4EC 117C 0008 0019             		move.b	#8,$19(a0)
0001A4F2 117C 0008 0016             		move.b	#8,$16(a0)
0001A4F8 43D0                       		lea	(a0),a1
0001A4FA 6000                       		bra.s	Obj83_MakeFrag
0001A4FC                            ; ===========================================================================
0001A4FC                            
0001A4FC                            Obj83_LoopFrag:
0001A4FC 4EB9 0000 E1FE             		jsr	SingleObjLoad2
0001A502 6600                       		bne.s	Obj83_BreakSnd
0001A504                            
0001A504                            Obj83_MakeFrag:				; XREF: Obj83_Break
0001A504 45D0                       		lea	(a0),a2
0001A506 47D1                       		lea	(a1),a3
0001A508 7603                       		moveq	#3,d3
0001A50A                            
0001A50A                            loc_19CC4:
0001A50A 26DA                       		move.l	(a2)+,(a3)+
0001A50C 26DA                       		move.l	(a2)+,(a3)+
0001A50E 26DA                       		move.l	(a2)+,(a3)+
0001A510 26DA                       		move.l	(a2)+,(a3)+
0001A512 51CB FFF6                  		dbf	d3,loc_19CC4
0001A516                            
0001A516 335C 0012                  		move.w	(a4)+,$12(a1)
0001A51A 361D                       		move.w	(a5)+,d3
0001A51C D769 0008                  		add.w	d3,8(a1)
0001A520 361D                       		move.w	(a5)+,d3
0001A522 D769 000C                  		add.w	d3,$C(a1)
0001A526 1344 001A                  		move.b	d4,$1A(a1)
0001A52A 5244                       		addq.w	#1,d4
0001A52C 51C9 FFCE                  		dbf	d1,Obj83_LoopFrag ; repeat sequence 3 more times
0001A530                            
0001A530                            Obj83_BreakSnd:
0001A530 303C 00CB                  		move.w	#$CB,d0
0001A534 4EB9 0000 15C0             		jsr	(PlaySound_Special).l ;	play smashing sound
0001A53A 4EF9 0000 DD62             		jmp	DisplaySprite
0001A540                            ; ===========================================================================
0001A540 0080 0000                  Obj83_FragSpeed:dc.w $80, 0
0001A544 0120 00C0                  		dc.w $120, $C0
0001A548 FFF8 FFF8                  Obj83_FragPos:	dc.w $FFF8, $FFF8
0001A54C 0010 0000                  		dc.w $10, 0
0001A550 0000 0010                  		dc.w 0,	$10
0001A554 0010 0010                  		dc.w $10, $10
0001A558                            ; ---------------------------------------------------------------------------
0001A558                            ; Sprite mappings - blocks that	disintegrate when Eggman presses a switch
0001A558                            ; ---------------------------------------------------------------------------
0001A558                            Map_obj83:
0001A558                            	include "_maps\obj83.asm"
0001A558                            ; ---------------------------------------------------------------------------
0001A558                            ; Sprite mappings - blocks that	disintegrate when Eggman presses a switch
0001A558                            ; ---------------------------------------------------------------------------
0001A558 0000 0000                  		dc.w byte_19D1C-Map_obj83, byte_19D22-Map_obj83
0001A55C 0000 0000                  		dc.w byte_19D2E-Map_obj83, byte_19D3A-Map_obj83
0001A560 0000                       		dc.w byte_19D46-Map_obj83
0001A562 01                         byte_19D1C:	dc.b 1
0001A563 F00F 0000 F0               		dc.b $F0, $F, 0, 0, $F0
0001A568 02                         byte_19D22:	dc.b 2
0001A569 F801 0000 F8               		dc.b $F8, 1, 0,	0, $F8
0001A56E F801 0004 00               		dc.b $F8, 1, 0,	4, 0
0001A573 00                         		dc.b 0
0001A574 02                         byte_19D2E:	dc.b 2
0001A575 F801 0008 F8               		dc.b $F8, 1, 0,	8, $F8
0001A57A F801 000C 00               		dc.b $F8, 1, 0,	$C, 0
0001A57F 00                         		dc.b 0
0001A580 02                         byte_19D3A:	dc.b 2
0001A581 F801 0002 F8               		dc.b $F8, 1, 0,	2, $F8
0001A586 F801 0006 00               		dc.b $F8, 1, 0,	6, 0
0001A58B 00                         		dc.b 0
0001A58C 02                         byte_19D46:	dc.b 2
0001A58D F801 000A F8               		dc.b $F8, 1, 0,	$A, $F8
0001A592 F801 000E 00               		dc.b $F8, 1, 0,	$E, 0
0001A598 00                         		even
0001A598 00                         		even
0001A598                            
0001A598                            ; ===========================================================================
0001A598                            ; ---------------------------------------------------------------------------
0001A598                            ; Object 85 - Eggman (FZ)
0001A598                            ; ---------------------------------------------------------------------------
0001A598                            
0001A598                            Obj85_Delete:
0001A598 4EF9 0000 DD9E             		jmp	DeleteObject
0001A59E                            ; ===========================================================================
0001A59E                            
0001A59E                            Obj85:					; XREF: Obj_Index
0001A59E 7000                       		moveq	#0,d0
0001A5A0 1028 0024                  		move.b	$24(a0),d0
0001A5A4 303B 0000                  		move.w	Obj85_Index(pc,d0.w),d0
0001A5A8 4EFB 0000                  		jmp	Obj85_Index(pc,d0.w)
0001A5AC                            ; ===========================================================================
0001A5AC 0000                       Obj85_Index:	dc.w Obj85_Main-Obj85_Index
0001A5AE 0000                       		dc.w Obj85_Eggman-Obj85_Index
0001A5B0 0000                       		dc.w loc_1A38E-Obj85_Index
0001A5B2 0000                       		dc.w loc_1A346-Obj85_Index
0001A5B4 0000                       		dc.w loc_1A2C6-Obj85_Index
0001A5B6 0000                       		dc.w loc_1A3AC-Obj85_Index
0001A5B8 0000                       		dc.w loc_1A264-Obj85_Index
0001A5BA                            
0001A5BA 0100 0100 0470             Obj85_ObjData:	dc.w $100, $100, $470	; X pos, Y pos,	VRAM setting
0001A5C0 0001 A290                  		dc.l Map_obj82		; mappings pointer
0001A5C4 25B0 0590 0300             		dc.w $25B0, $590, $300
0001A5CA 0000 0000                  		dc.l Map_obj84
0001A5CE 26E0 0596 03A0             		dc.w $26E0, $596, $3A0
0001A5D4 0000 0000                  		dc.l Map_FZBoss
0001A5D8 26E0 0596 0470             		dc.w $26E0, $596, $470
0001A5DE 0001 A290                  		dc.l Map_obj82
0001A5E2 26E0 0596 0400             		dc.w $26E0, $596, $400
0001A5E8 0001 85D2                  		dc.l Map_Eggman
0001A5EC 26E0 0596 0400             		dc.w $26E0, $596, $400
0001A5F2 0001 85D2                  		dc.l Map_Eggman
0001A5F6                            
0001A5F6 0200 0420 19               Obj85_ObjData2:	dc.b 2,	0, 4, $20, $19	; routine num, animation, sprite priority, width, height
0001A5FB 0400 0112 08               		dc.b 4,	0, 1, $12, 8
0001A600 0600 0300 00               		dc.b 6,	0, 3, 0, 0
0001A605 0800 0300 00               		dc.b 8,	0, 3, 0, 0
0001A60A 0A00 0320 20               		dc.b $A, 0, 3, $20, $20
0001A60F 0C00 0300 00               		dc.b $C, 0, 3, 0, 0
0001A614                            ; ===========================================================================
0001A614                            
0001A614                            Obj85_Main:				; XREF: Obj85_Index
0001A614 45FA FFA4                  		lea	Obj85_ObjData(pc),a2
0001A618 47FA FFDC                  		lea	Obj85_ObjData2(pc),a3
0001A61C 2248                       		movea.l	a0,a1
0001A61E 7205                       		moveq	#5,d1
0001A620 6000                       		bra.s	Obj85_LoadBoss
0001A622                            ; ===========================================================================
0001A622                            
0001A622                            Obj85_Loop:
0001A622 4EB9 0000 E1FE             		jsr	SingleObjLoad2
0001A628 6600                       		bne.s	loc_19E20
0001A62A                            
0001A62A                            Obj85_LoadBoss:				; XREF: Obj85_Main
0001A62A 12BC 0085                  		move.b	#$85,(a1)
0001A62E 335A 0008                  		move.w	(a2)+,8(a1)
0001A632 335A 000C                  		move.w	(a2)+,$C(a1)
0001A636 335A 0002                  		move.w	(a2)+,2(a1)
0001A63A 235A 0004                  		move.l	(a2)+,4(a1)
0001A63E 135B 0024                  		move.b	(a3)+,$24(a1)
0001A642 135B 001C                  		move.b	(a3)+,$1C(a1)
0001A646 135B 0018                  		move.b	(a3)+,$18(a1)
0001A64A 135B 0017                  		move.b	(a3)+,$17(a1)
0001A64E 135B 0016                  		move.b	(a3)+,$16(a1)
0001A652 137C 0004 0001             		move.b	#4,1(a1)
0001A658 08E8 0007 0001             		bset	#7,1(a0)
0001A65E 2348 0034                  		move.l	a0,$34(a1)
0001A662 51C9 FFBE                  		dbf	d1,Obj85_Loop
0001A666                            
0001A666                            loc_19E20:
0001A666 45E8 0036                  		lea	$36(a0),a2
0001A66A 4EB9 0000 E1E8             		jsr	SingleObjLoad
0001A670 6600                       		bne.s	loc_19E5A
0001A672 12BC 0086                  		move.b	#$86,(a1)	; load energy ball object
0001A676 3489                       		move.w	a1,(a2)
0001A678 2348 0034                  		move.l	a0,$34(a1)
0001A67C 45E8 0038                  		lea	$38(a0),a2
0001A680 7400                       		moveq	#0,d2
0001A682 7203                       		moveq	#3,d1
0001A684                            
0001A684                            loc_19E3E:
0001A684 4EB9 0000 E1FE             		jsr	SingleObjLoad2
0001A68A 6600                       		bne.s	loc_19E5A
0001A68C 34C9                       		move.w	a1,(a2)+
0001A68E 12BC 0084                  		move.b	#$84,(a1)	; load crushing	cylinder object
0001A692 2348 0034                  		move.l	a0,$34(a1)
0001A696 1342 0028                  		move.b	d2,$28(a1)
0001A69A 5442                       		addq.w	#2,d2
0001A69C 51C9 FFE6                  		dbf	d1,loc_19E3E
0001A6A0                            
0001A6A0                            loc_19E5A:
0001A6A0 317C 0000 0034             		move.w	#0,$34(a0)
0001A6A6 117C 0008 0021             		move.b	#8,$21(a0)	; set number of	hits to	8
0001A6AC 317C FFFF 0030             		move.w	#-1,$30(a0)
0001A6B2                            
0001A6B2                            Obj85_Eggman:				; XREF: Obj85_Index
0001A6B2 7000                       		moveq	#0,d0
0001A6B4 1028 0034                  		move.b	$34(a0),d0
0001A6B8 303B 0000                  		move.w	off_19E80(pc,d0.w),d0
0001A6BC 4EBB 0000                  		jsr	off_19E80(pc,d0.w)
0001A6C0 4EF9 0000 DD62             		jmp	DisplaySprite
0001A6C6                            ; ===========================================================================
0001A6C6 0000 0000                  off_19E80:	dc.w loc_19E90-off_19E80, loc_19EA8-off_19E80
0001A6CA 0000 0000                  		dc.w loc_19FE6-off_19E80, loc_1A02A-off_19E80
0001A6CE 0000 0000                  		dc.w loc_1A074-off_19E80, loc_1A112-off_19E80
0001A6D2 0000 0000                  		dc.w loc_1A192-off_19E80, loc_1A1D4-off_19E80
0001A6D6                            ; ===========================================================================
0001A6D6                            
0001A6D6                            loc_19E90:				; XREF: off_19E80
0001A6D6 4AB8 F680                  		tst.l	($FFFFF680).w
0001A6DA 6600                       		bne.s	loc_19EA2
0001A6DC 0C78 2450 F700             		cmpi.w	#$2450,($FFFFF700).w
0001A6E2 6500                       		bcs.s	loc_19EA2
0001A6E4 5428 0034                  		addq.b	#2,$34(a0)
0001A6E8                            
0001A6E8                            loc_19EA2:
0001A6E8 52B8 F636                  		addq.l	#1,($FFFFF636).w
0001A6EC 4E75                       		rts	
0001A6EE                            ; ===========================================================================
0001A6EE                            
0001A6EE                            loc_19EA8:				; XREF: off_19E80
0001A6EE 4A68 0030                  		tst.w	$30(a0)
0001A6F2 6A00                       		bpl.s	loc_19F10
0001A6F4 4268 0030                  		clr.w	$30(a0)
0001A6F8 4EB9 0000 2C3E             		jsr	(RandomNumber).l
0001A6FE 0240 000C                  		andi.w	#$C,d0
0001A702 3200                       		move.w	d0,d1
0001A704 5441                       		addq.w	#2,d1
0001A706 4A80                       		tst.l	d0
0001A708 6A00                       		bpl.s	loc_19EC6
0001A70A C141                       		exg	d1,d0
0001A70C                            
0001A70C                            loc_19EC6:
0001A70C 43FA 0000                  		lea	word_19FD6(pc),a1
0001A710 3031 0000                  		move.w	(a1,d0.w),d0
0001A714 3231 1000                  		move.w	(a1,d1.w),d1
0001A718 3140 0030                  		move.w	d0,$30(a0)
0001A71C 74FF                       		moveq	#-1,d2
0001A71E 3430 0038                  		move.w	$38(a0,d0.w),d2
0001A722 2242                       		movea.l	d2,a1
0001A724 137C 00FF 0029             		move.b	#-1,$29(a1)
0001A72A 337C FFFF 0030             		move.w	#-1,$30(a1)
0001A730 3430 1038                  		move.w	$38(a0,d1.w),d2
0001A734 2242                       		movea.l	d2,a1
0001A736 137C 0001 0029             		move.b	#1,$29(a1)
0001A73C 337C 0000 0030             		move.w	#0,$30(a1)
0001A742 317C 0001 0032             		move.w	#1,$32(a0)
0001A748 4228 0035                  		clr.b	$35(a0)
0001A74C 303C 00B7                  		move.w	#$B7,d0
0001A750 4EB9 0000 15C0             		jsr	(PlaySound_Special).l ;	play rumbling sound
0001A756                            
0001A756                            loc_19F10:
0001A756 4A68 0032                  		tst.w	$32(a0)
0001A75A 6B00 0000                  		bmi.w	loc_19FA6
0001A75E 08A8 0000 0022             		bclr	#0,$22(a0)
0001A764 3038 D008                  		move.w	($FFFFD008).w,d0
0001A768 9068 0008                  		sub.w	8(a0),d0
0001A76C 6500                       		bcs.s	loc_19F2E
0001A76E 08E8 0000 0022             		bset	#0,$22(a0)
0001A774                            
0001A774                            loc_19F2E:
0001A774 323C 002B                  		move.w	#$2B,d1
0001A778 343C 0014                  		move.w	#$14,d2
0001A77C 363C 0014                  		move.w	#$14,d3
0001A780 3828 0008                  		move.w	8(a0),d4
0001A784 4EB9 0001 0132             		jsr	SolidObject
0001A78A 4A44                       		tst.w	d4
0001A78C 6E00                       		bgt.s	loc_19F50
0001A78E                            
0001A78E                            loc_19F48:
0001A78E 4A28 0035                  		tst.b	$35(a0)
0001A792 6600                       		bne.s	loc_19F88
0001A794 6000                       		bra.s	loc_19F96
0001A796                            ; ===========================================================================
0001A796                            
0001A796                            loc_19F50:
0001A796 5E78 F636                  		addq.w	#7,($FFFFF636).w
0001A79A 0C38 0002 D01C             		cmpi.b	#2,($FFFFD01C).w
0001A7A0 66EC                       		bne.s	loc_19F48
0001A7A2 303C 0300                  		move.w	#$300,d0
0001A7A6 0828 0000 0022             		btst	#0,$22(a0)
0001A7AC 6600                       		bne.s	loc_19F6A
0001A7AE 4440                       		neg.w	d0
0001A7B0                            
0001A7B0                            loc_19F6A:
0001A7B0 31C0 D010                  		move.w	d0,($FFFFD010).w
0001A7B4 4A28 0035                  		tst.b	$35(a0)
0001A7B8 6600                       		bne.s	loc_19F88
0001A7BA 5328 0021                  		subq.b	#1,$21(a0)
0001A7BE 117C 0064 0035             		move.b	#$64,$35(a0)
0001A7C4 303C 00AC                  		move.w	#$AC,d0
0001A7C8 4EB9 0000 15C0             		jsr	(PlaySound_Special).l ;	play boss damage sound
0001A7CE                            
0001A7CE                            loc_19F88:
0001A7CE 5328 0035                  		subq.b	#1,$35(a0)
0001A7D2 6700                       		beq.s	loc_19F96
0001A7D4 117C 0003 001C             		move.b	#3,$1C(a0)
0001A7DA 6000                       		bra.s	loc_19F9C
0001A7DC                            ; ===========================================================================
0001A7DC                            
0001A7DC                            loc_19F96:
0001A7DC 117C 0001 001C             		move.b	#1,$1C(a0)
0001A7E2                            
0001A7E2                            loc_19F9C:
0001A7E2 43FA FA7A                  		lea	Ani_obj82(pc),a1
0001A7E6 4EF9 0000 AE22             		jmp	AnimateSprite
0001A7EC                            ; ===========================================================================
0001A7EC                            
0001A7EC                            loc_19FA6:
0001A7EC 4A28 0021                  		tst.b	$21(a0)
0001A7F0 6700                       		beq.s	loc_19FBC
0001A7F2 5428 0034                  		addq.b	#2,$34(a0)
0001A7F6 317C FFFF 0030             		move.w	#-1,$30(a0)
0001A7FC 4268 0032                  		clr.w	$32(a0)
0001A800 4E75                       		rts	
0001A802                            ; ===========================================================================
0001A802                            
0001A802                            loc_19FBC:
0001A802 117C 0006 0034             		move.b	#6,$34(a0)
0001A808 317C 25C0 0008             		move.w	#$25C0,8(a0)
0001A80E 317C 053C 000C             		move.w	#$53C,$C(a0)
0001A814 117C 0014 0016             		move.b	#$14,$16(a0)
0001A81A 4E75                       		rts	
0001A81C                            ; ===========================================================================
0001A81C 0000 0002 0002 0004 0004+  word_19FD6:	dc.w 0,	2, 2, 4, 4, 6, 6, 0
0001A82C                            ; ===========================================================================
0001A82C                            
0001A82C                            loc_19FE6:				; XREF: off_19E80
0001A82C 70FF                       		moveq	#-1,d0
0001A82E 3028 0036                  		move.w	$36(a0),d0
0001A832 2240                       		movea.l	d0,a1
0001A834 4A68 0030                  		tst.w	$30(a0)
0001A838 6A00                       		bpl.s	loc_1A000
0001A83A 4268 0030                  		clr.w	$30(a0)
0001A83E 137C 00FF 0029             		move.b	#-1,$29(a1)
0001A844 6100                       		bsr.s	loc_1A020
0001A846                            
0001A846                            loc_1A000:
0001A846 700F                       		moveq	#$F,d0
0001A848 C078 FE0E                  		and.w	($FFFFFE0E).w,d0
0001A84C 6600                       		bne.s	loc_1A00A
0001A84E 6100                       		bsr.s	loc_1A020
0001A850                            
0001A850                            loc_1A00A:
0001A850 4A68 0032                  		tst.w	$32(a0)
0001A854 6700                       		beq.s	locret_1A01E
0001A856 5528 0034                  		subq.b	#2,$34(a0)
0001A85A 317C FFFF 0030             		move.w	#-1,$30(a0)
0001A860 4268 0032                  		clr.w	$32(a0)
0001A864                            
0001A864                            locret_1A01E:
0001A864 4E75                       		rts	
0001A866                            ; ===========================================================================
0001A866                            
0001A866                            loc_1A020:
0001A866 303C 00B1                  		move.w	#$B1,d0
0001A86A 4EF9 0000 15C0             		jmp	(PlaySound_Special).l ;	play electricity sound
0001A870                            ; ===========================================================================
0001A870                            
0001A870                            loc_1A02A:				; XREF: off_19E80
0001A870 117C 0030 0017             		move.b	#$30,$17(a0)
0001A876 08E8 0000 0022             		bset	#0,$22(a0)
0001A87C 4EB9 0000 DD3C             		jsr	SpeedToPos
0001A882 117C 0006 001A             		move.b	#6,$1A(a0)
0001A888 0668 0010 0012             		addi.w	#$10,$12(a0)
0001A88E 0C68 059C 000C             		cmpi.w	#$59C,$C(a0)
0001A894 6500                       		bcs.s	loc_1A070
0001A896 317C 059C 000C             		move.w	#$59C,$C(a0)
0001A89C 5428 0034                  		addq.b	#2,$34(a0)
0001A8A0 117C 0020 0017             		move.b	#$20,$17(a0)
0001A8A6 317C 0100 0010             		move.w	#$100,$10(a0)
0001A8AC 317C FF00 0012             		move.w	#-$100,$12(a0)
0001A8B2 5438 F742                  		addq.b	#2,($FFFFF742).w
0001A8B6                            
0001A8B6                            loc_1A070:
0001A8B6 6000 0000                  		bra.w	loc_1A166
0001A8BA                            ; ===========================================================================
0001A8BA                            
0001A8BA                            loc_1A074:				; XREF: off_19E80
0001A8BA 08E8 0000 0022             		bset	#0,$22(a0)
0001A8C0 117C 0004 001C             		move.b	#4,$1C(a0)
0001A8C6 4EB9 0000 DD3C             		jsr	SpeedToPos
0001A8CC 0668 0010 0012             		addi.w	#$10,$12(a0)
0001A8D2 0C68 05A3 000C             		cmpi.w	#$5A3,$C(a0)
0001A8D8 6500                       		bcs.s	loc_1A09A
0001A8DA 317C FFC0 0012             		move.w	#-$40,$12(a0)
0001A8E0                            
0001A8E0                            loc_1A09A:
0001A8E0 317C 0400 0010             		move.w	#$400,$10(a0)
0001A8E6 3028 0008                  		move.w	8(a0),d0
0001A8EA 9078 D008                  		sub.w	($FFFFD008).w,d0
0001A8EE 6A00                       		bpl.s	loc_1A0B4
0001A8F0 317C 0500 0010             		move.w	#$500,$10(a0)
0001A8F6 6000 0000                  		bra.w	loc_1A0F2
0001A8FA                            ; ===========================================================================
0001A8FA                            
0001A8FA                            loc_1A0B4:
0001A8FA 0440 0070                  		subi.w	#$70,d0
0001A8FE 6500                       		bcs.s	loc_1A0F2
0001A900 0468 0100 0010             		subi.w	#$100,$10(a0)
0001A906 5140                       		subq.w	#8,d0
0001A908 6500                       		bcs.s	loc_1A0F2
0001A90A 0468 0100 0010             		subi.w	#$100,$10(a0)
0001A910 5140                       		subq.w	#8,d0
0001A912 6500                       		bcs.s	loc_1A0F2
0001A914 0468 0080 0010             		subi.w	#$80,$10(a0)
0001A91A 5140                       		subq.w	#8,d0
0001A91C 6500                       		bcs.s	loc_1A0F2
0001A91E 0468 0080 0010             		subi.w	#$80,$10(a0)
0001A924 5140                       		subq.w	#8,d0
0001A926 6500                       		bcs.s	loc_1A0F2
0001A928 0468 0080 0010             		subi.w	#$80,$10(a0)
0001A92E 0440 0038                  		subi.w	#$38,d0
0001A932 6500                       		bcs.s	loc_1A0F2
0001A934 4268 0010                  		clr.w	$10(a0)
0001A938                            
0001A938                            loc_1A0F2:
0001A938 0C68 26A0 0008             		cmpi.w	#$26A0,8(a0)
0001A93E 6500                       		bcs.s	loc_1A110
0001A940 317C 26A0 0008             		move.w	#$26A0,8(a0)
0001A946 317C 0240 0010             		move.w	#$240,$10(a0)
0001A94C 317C FB40 0012             		move.w	#-$4C0,$12(a0)
0001A952 5428 0034                  		addq.b	#2,$34(a0)
0001A956                            
0001A956                            loc_1A110:
0001A956 6000                       		bra.s	loc_1A15C
0001A958                            ; ===========================================================================
0001A958                            
0001A958                            loc_1A112:				; XREF: off_19E80
0001A958 4EB9 0000 DD3C             		jsr	SpeedToPos
0001A95E 0C68 26E0 0008             		cmpi.w	#$26E0,8(a0)
0001A964 6500                       		bcs.s	loc_1A124
0001A966 4268 0010                  		clr.w	$10(a0)
0001A96A                            
0001A96A                            loc_1A124:
0001A96A 0668 0034 0012             		addi.w	#$34,$12(a0)
0001A970 4A68 0012                  		tst.w	$12(a0)
0001A974 6B00                       		bmi.s	loc_1A142
0001A976 0C68 0592 000C             		cmpi.w	#$592,$C(a0)
0001A97C 6500                       		bcs.s	loc_1A142
0001A97E 317C 0592 000C             		move.w	#$592,$C(a0)
0001A984 4268 0012                  		clr.w	$12(a0)
0001A988                            
0001A988                            loc_1A142:
0001A988 3028 0010                  		move.w	$10(a0),d0
0001A98C 8068 0012                  		or.w	$12(a0),d0
0001A990 6600                       		bne.s	loc_1A15C
0001A992 5428 0034                  		addq.b	#2,$34(a0)
0001A996 317C FE80 0012             		move.w	#-$180,$12(a0)
0001A99C 117C 0001 0021             		move.b	#1,$21(a0)
0001A9A2                            
0001A9A2                            loc_1A15C:
0001A9A2 43FA F8BA                  		lea	Ani_obj82(pc),a1
0001A9A6 4EB9 0000 AE22             		jsr	AnimateSprite
0001A9AC                            
0001A9AC                            loc_1A166:
0001A9AC 0C78 2700 F72A             		cmpi.w	#$2700,($FFFFF72A).w
0001A9B2 6C00                       		bge.s	loc_1A172
0001A9B4 5478 F72A                  		addq.w	#2,($FFFFF72A).w
0001A9B8                            
0001A9B8                            loc_1A172:
0001A9B8 0C28 000C 0034             		cmpi.b	#$C,$34(a0)
0001A9BE 6C00                       		bge.s	locret_1A190
0001A9C0 323C 001B                  		move.w	#$1B,d1
0001A9C4 343C 0070                  		move.w	#$70,d2
0001A9C8 363C 0071                  		move.w	#$71,d3
0001A9CC 3828 0008                  		move.w	8(a0),d4
0001A9D0 4EF9 0001 0132             		jmp	SolidObject
0001A9D6                            ; ===========================================================================
0001A9D6                            
0001A9D6                            locret_1A190:
0001A9D6 4E75                       		rts	
0001A9D8                            ; ===========================================================================
0001A9D8                            
0001A9D8                            loc_1A192:				; XREF: off_19E80
0001A9D8 217C 0001 85D2 0004        		move.l	#Map_Eggman,4(a0)
0001A9E0 317C 0400 0002             		move.w	#$400,2(a0)
0001A9E6 117C 0000 001C             		move.b	#0,$1C(a0)
0001A9EC 08E8 0000 0022             		bset	#0,$22(a0)
0001A9F2 4EB9 0000 DD3C             		jsr	SpeedToPos
0001A9F8 0C68 0544 000C             		cmpi.w	#$544,$C(a0)
0001A9FE 6400                       		bcc.s	loc_1A1D0
0001AA00 317C 0180 0010             		move.w	#$180,$10(a0)
0001AA06 317C FFE8 0012             		move.w	#-$18,$12(a0)
0001AA0C 117C 000F 0020             		move.b	#$F,$20(a0)
0001AA12 5428 0034                  		addq.b	#2,$34(a0)
0001AA16                            
0001AA16                            loc_1A1D0:
0001AA16 6000 FF8A                  		bra.w	loc_1A15C
0001AA1A                            ; ===========================================================================
0001AA1A                            
0001AA1A                            loc_1A1D4:				; XREF: off_19E80
0001AA1A 08E8 0000 0022             		bset	#0,$22(a0)
0001AA20 4EB9 0000 DD3C             		jsr	SpeedToPos
0001AA26 4A68 0030                  		tst.w	$30(a0)
0001AA2A 6600                       		bne.s	loc_1A1FC
0001AA2C 4A28 0020                  		tst.b	$20(a0)
0001AA30 6600                       		bne.s	loc_1A216
0001AA32 317C 001E 0030             		move.w	#$1E,$30(a0)
0001AA38 303C 00AC                  		move.w	#$AC,d0
0001AA3C 4EB9 0000 15C0             		jsr	(PlaySound_Special).l ;	play boss damage sound
0001AA42                            
0001AA42                            loc_1A1FC:
0001AA42 5368 0030                  		subq.w	#1,$30(a0)
0001AA46 6600                       		bne.s	loc_1A216
0001AA48 4A28 0022                  		tst.b	$22(a0)
0001AA4C 6A00                       		bpl.s	loc_1A210
0001AA4E 317C 0060 0012             		move.w	#$60,$12(a0)
0001AA54 6000                       		bra.s	loc_1A216
0001AA56                            ; ===========================================================================
0001AA56                            
0001AA56                            loc_1A210:
0001AA56 117C 000F 0020             		move.b	#$F,$20(a0)
0001AA5C                            
0001AA5C                            loc_1A216:
0001AA5C 0C78 2790 D008             		cmpi.w	#$2790,($FFFFD008).w
0001AA62 6D00                       		blt.s	loc_1A23A
0001AA64 11FC 0001 F7CC             		move.b	#1,($FFFFF7CC).w
0001AA6A 31FC 0000 F602             		move.w	#0,($FFFFF602).w
0001AA70 4278 D014                  		clr.w	($FFFFD014).w
0001AA74 4A68 0012                  		tst.w	$12(a0)
0001AA78 6A00                       		bpl.s	loc_1A248
0001AA7A 31FC 0100 F602             		move.w	#$100,($FFFFF602).w
0001AA80                            
0001AA80                            loc_1A23A:
0001AA80 0C78 27E0 D008             		cmpi.w	#$27E0,($FFFFD008).w
0001AA86 6D00                       		blt.s	loc_1A248
0001AA88 31FC 27E0 D008             		move.w	#$27E0,($FFFFD008).w
0001AA8E                            
0001AA8E                            loc_1A248:
0001AA8E 0C68 2900 0008             		cmpi.w	#$2900,8(a0)
0001AA94 6500                       		bcs.s	loc_1A260
0001AA96 4A28 0001                  		tst.b	1(a0)
0001AA9A 6B00                       		bmi.s	loc_1A260
0001AA9C 11FC 0018 F600             		move.b	#$18,($FFFFF600).w
0001AAA2 6000 FAF4                  		bra.w	Obj85_Delete
0001AAA6                            ; ===========================================================================
0001AAA6                            
0001AAA6                            loc_1A260:
0001AAA6 6000 FEFA                  		bra.w	loc_1A15C
0001AAAA                            ; ===========================================================================
0001AAAA                            
0001AAAA                            loc_1A264:				; XREF: Obj85_Index
0001AAAA 2268 0034                  		movea.l	$34(a0),a1
0001AAAE 1011                       		move.b	(a1),d0
0001AAB0 B010                       		cmp.b	(a0),d0
0001AAB2 6600 FAE4                  		bne.w	Obj85_Delete
0001AAB6 117C 0007 001C             		move.b	#7,$1C(a0)
0001AABC 0C29 000C 0034             		cmpi.b	#$C,$34(a1)
0001AAC2 6C00                       		bge.s	loc_1A280
0001AAC4 6000                       		bra.s	loc_1A2A6
0001AAC6                            ; ===========================================================================
0001AAC6                            
0001AAC6                            loc_1A280:
0001AAC6 4A69 0010                  		tst.w	$10(a1)
0001AACA 6700                       		beq.s	loc_1A28C
0001AACC 117C 000B 001C             		move.b	#$B,$1C(a0)
0001AAD2                            
0001AAD2                            loc_1A28C:
0001AAD2 43FA DA9A                  		lea	Ani_Eggman(pc),a1
0001AAD6 4EB9 0000 AE22             		jsr	AnimateSprite
0001AADC                            
0001AADC                            loc_1A296:
0001AADC 2268 0034                  		movea.l	$34(a0),a1
0001AAE0 3169 0008 0008             		move.w	8(a1),8(a0)
0001AAE6 3169 000C 000C             		move.w	$C(a1),$C(a0)
0001AAEC                            
0001AAEC                            loc_1A2A6:
0001AAEC 2268 0034                  		movea.l	$34(a0),a1
0001AAF0 1169 0022 0022             		move.b	$22(a1),$22(a0)
0001AAF6 7003                       		moveq	#3,d0
0001AAF8 C028 0022                  		and.b	$22(a0),d0
0001AAFC 0228 00FC 0001             		andi.b	#-4,1(a0)
0001AB02 8128 0001                  		or.b	d0,1(a0)
0001AB06 4EF9 0000 DD62             		jmp	DisplaySprite
0001AB0C                            ; ===========================================================================
0001AB0C                            
0001AB0C                            loc_1A2C6:				; XREF: Obj85_Index
0001AB0C 2268 0034                  		movea.l	$34(a0),a1
0001AB10 1011                       		move.b	(a1),d0
0001AB12 B010                       		cmp.b	(a0),d0
0001AB14 6600 FA82                  		bne.w	Obj85_Delete
0001AB18 0CA9 0001 85D2 0004        		cmpi.l	#Map_Eggman,4(a1)
0001AB20 6700                       		beq.s	loc_1A2E4
0001AB22 117C 000A 001A             		move.b	#$A,$1A(a0)
0001AB28 60C2                       		bra.s	loc_1A2A6
0001AB2A                            ; ===========================================================================
0001AB2A                            
0001AB2A                            loc_1A2E4:
0001AB2A 117C 0001 001C             		move.b	#1,$1C(a0)
0001AB30 4A29 0021                  		tst.b	$21(a1)
0001AB34 6F00                       		ble.s	loc_1A312
0001AB36 117C 0006 001C             		move.b	#6,$1C(a0)
0001AB3C 217C 0001 85D2 0004        		move.l	#Map_Eggman,4(a0)
0001AB44 317C 0400 0002             		move.w	#$400,2(a0)
0001AB4A 43FA DA22                  		lea	Ani_Eggman(pc),a1
0001AB4E 4EB9 0000 AE22             		jsr	AnimateSprite
0001AB54 6000 FF86                  		bra.w	loc_1A296
0001AB58                            ; ===========================================================================
0001AB58                            
0001AB58                            loc_1A312:
0001AB58 4A28 0001                  		tst.b	1(a0)
0001AB5C 6A00 FA3A                  		bpl.w	Obj85_Delete
0001AB60 6100 D588                  		bsr.w	BossDefeated
0001AB64 117C 0002 0018             		move.b	#2,$18(a0)
0001AB6A 117C 0000 001C             		move.b	#0,$1C(a0)
0001AB70 217C 0000 0000 0004        		move.l	#Map_Eggman2,4(a0)
0001AB78 317C 03A0 0002             		move.w	#$3A0,2(a0)
0001AB7E 43FA 0000                  		lea	Ani_obj85(pc),a1
0001AB82 4EB9 0000 AE22             		jsr	AnimateSprite
0001AB88 6000 FF52                  		bra.w	loc_1A296
0001AB8C                            ; ===========================================================================
0001AB8C                            
0001AB8C                            loc_1A346:				; XREF: Obj85_Index
0001AB8C 08E8 0000 0022             		bset	#0,$22(a0)
0001AB92 2268 0034                  		movea.l	$34(a0),a1
0001AB96 0CA9 0001 85D2 0004        		cmpi.l	#Map_Eggman,4(a1)
0001AB9E 6700                       		beq.s	loc_1A35E
0001ABA0 6000 FF4A                  		bra.w	loc_1A2A6
0001ABA4                            ; ===========================================================================
0001ABA4                            
0001ABA4                            loc_1A35E:
0001ABA4 3169 0008 0008             		move.w	8(a1),8(a0)
0001ABAA 3169 000C 000C             		move.w	$C(a1),$C(a0)
0001ABB0 4A28 001E                  		tst.b	$1E(a0)
0001ABB4 6600                       		bne.s	loc_1A376
0001ABB6 117C 0014 001E             		move.b	#$14,$1E(a0)
0001ABBC                            
0001ABBC                            loc_1A376:
0001ABBC 5328 001E                  		subq.b	#1,$1E(a0)
0001ABC0 6E00                       		bgt.s	loc_1A38A
0001ABC2 5228 001A                  		addq.b	#1,$1A(a0)
0001ABC6 0C28 0002 001A             		cmpi.b	#2,$1A(a0)
0001ABCC 6E00 F9CA                  		bgt.w	Obj85_Delete
0001ABD0                            
0001ABD0                            loc_1A38A:
0001ABD0 6000 FF0A                  		bra.w	loc_1A296
0001ABD4                            ; ===========================================================================
0001ABD4                            
0001ABD4                            loc_1A38E:				; XREF: Obj85_Index
0001ABD4 117C 000B 001A             		move.b	#$B,$1A(a0)
0001ABDA 3038 D008                  		move.w	($FFFFD008).w,d0
0001ABDE 9068 0008                  		sub.w	8(a0),d0
0001ABE2 6500                       		bcs.s	loc_1A3A6
0001ABE4 4A28 0001                  		tst.b	1(a0)
0001ABE8 6A00 F9AE                  		bpl.w	Obj85_Delete
0001ABEC                            
0001ABEC                            loc_1A3A6:
0001ABEC 4EF9 0000 DD62             		jmp	DisplaySprite
0001ABF2                            ; ===========================================================================
0001ABF2                            
0001ABF2                            loc_1A3AC:				; XREF: Obj85_Index
0001ABF2 117C 0000 001A             		move.b	#0,$1A(a0)
0001ABF8 08E8 0000 0022             		bset	#0,$22(a0)
0001ABFE 2268 0034                  		movea.l	$34(a0),a1
0001AC02 0C29 000C 0034             		cmpi.b	#$C,$34(a1)
0001AC08 6600                       		bne.s	loc_1A3D0
0001AC0A 0CA9 0001 85D2 0004        		cmpi.l	#Map_Eggman,4(a1)
0001AC12 6700 F984                  		beq.w	Obj85_Delete
0001AC16                            
0001AC16                            loc_1A3D0:
0001AC16 6000 FED4                  		bra.w	loc_1A2A6
0001AC1A                            ; ===========================================================================
0001AC1A                            Ani_obj85:
0001AC1A                            	include "_anim\obj85.asm"
0001AC1A                            ; ---------------------------------------------------------------------------
0001AC1A                            ; Animation script - Eggman (FZ)
0001AC1A                            ; ---------------------------------------------------------------------------
0001AC1A 0000                       		dc.w byte_1A3D6-Ani_obj85
0001AC1C 0300 01FF                  byte_1A3D6:	dc.b 3,	0, 1, $FF
0001AC20                            		even
0001AC20                            		even
0001AC20                            
0001AC20                            Map_Eggman2:
0001AC20                            	include "_maps\Eggman2.asm"
0001AC20                            ; ---------------------------------------------------------------------------
0001AC20                            ; Sprite mappings - Eggman (FZ)
0001AC20                            ; ---------------------------------------------------------------------------
0001AC20 0000                       		dc.w byte_1A3DE-Map_Eggman2
0001AC22 0000                       		dc.w byte_1A3FD-Map_Eggman2
0001AC24 06                         byte_1A3DE:	dc.b 6
0001AC25 E408 0020 F4               		dc.b $E4, 8, 0,	$20, $F4
0001AC2A EC0D 0023 E4               		dc.b $EC, $D, 0, $23, $E4
0001AC2F EC09 002B 04               		dc.b $EC, 9, 0,	$2B, 4
0001AC34 FC05 203A E4               		dc.b $FC, 5, $20, $3A, $E4
0001AC39 FC0E 203E 04               		dc.b $FC, $E, $20, $3E,	4
0001AC3E 1404 204A 04               		dc.b $14, 4, $20, $4A, 4
0001AC43 06                         byte_1A3FD:	dc.b 6
0001AC44 E40A 0031 F4               		dc.b $E4, $A, 0, $31, $F4
0001AC49 EC05 0023 E4               		dc.b $EC, 5, 0,	$23, $E4
0001AC4E EC09 002B 04               		dc.b $EC, 9, 0,	$2B, 4
0001AC53 FC05 203A E4               		dc.b $FC, 5, $20, $3A, $E4
0001AC58 FC0E 203E 04               		dc.b $FC, $E, $20, $3E,	4
0001AC5D 1404 204A 04               		dc.b $14, 4, $20, $4A, 4
0001AC62                            		even
0001AC62                            		even
0001AC62                            
0001AC62                            Map_FZBoss:
0001AC62                            	include "_maps\FZ boss.asm"
0001AC62                            ; ---------------------------------------------------------------------------
0001AC62                            ; Sprite mappings - boss (FZ)
0001AC62                            ; ---------------------------------------------------------------------------
0001AC62 0000                       		dc.w byte_1A422-Map_FZBoss
0001AC64 0000                       		dc.w byte_1A42D-Map_FZBoss
0001AC66 0000                       		dc.w byte_1A43D-Map_FZBoss
0001AC68 02                         byte_1A422:	dc.b 2
0001AC69 140E 2800 F4               		dc.b $14, $E, $28, 0, $F4
0001AC6E 2400 280C EC               		dc.b $24, 0, $28, $C, $EC
0001AC73 03                         byte_1A42D:	dc.b 3
0001AC74 0C05 280D 0C               		dc.b $C, 5, $28, $D, $C
0001AC79 1C00 2811 0C               		dc.b $1C, 0, $28, $11, $C
0001AC7E 140D 2812 EC               		dc.b $14, $D, $28, $12,	$EC
0001AC83 02                         byte_1A43D:	dc.b 2
0001AC84 0C01 281A 0C               		dc.b $C, 1, $28, $1A, $C
0001AC89 140C 281C EC               		dc.b $14, $C, $28, $1C,	$EC
0001AC8E                            		even
0001AC8E                            		even
0001AC8E                            
0001AC8E                            ; ===========================================================================
0001AC8E                            
0001AC8E                            Obj84_Delete:
0001AC8E 4EF9 0000 DD9E             		jmp	DeleteObject
0001AC94                            ; ===========================================================================
0001AC94                            ; ---------------------------------------------------------------------------
0001AC94                            ; Object 84 - cylinder Eggman	hides in (FZ)
0001AC94                            ; ---------------------------------------------------------------------------
0001AC94                            
0001AC94                            Obj84:					; XREF: Obj_Index
0001AC94 7000                       		moveq	#0,d0
0001AC96 1028 0024                  		move.b	$24(a0),d0
0001AC9A 303B 0000                  		move.w	Obj84_Index(pc,d0.w),d0
0001AC9E 4EFB 0000                  		jmp	Obj84_Index(pc,d0.w)
0001ACA2                            ; ===========================================================================
0001ACA2 0000                       Obj84_Index:	dc.w Obj84_Main-Obj84_Index
0001ACA4 0000                       		dc.w loc_1A4CE-Obj84_Index
0001ACA6 0000                       		dc.w loc_1A57E-Obj84_Index
0001ACA8                            
0001ACA8 24D0 0620                  Obj84_PosData:	dc.w $24D0, $620
0001ACAC 2550 0620                  		dc.w $2550, $620
0001ACB0 2490 04C0                  		dc.w $2490, $4C0
0001ACB4 2510 04C0                  		dc.w $2510, $4C0
0001ACB8                            ; ===========================================================================
0001ACB8                            
0001ACB8                            Obj84_Main:				; XREF: Obj84_Index
0001ACB8 43FA FFEE                  		lea	Obj84_PosData(pc),a1
0001ACBC 7000                       		moveq	#0,d0
0001ACBE 1028 0028                  		move.b	$28(a0),d0
0001ACC2 D040                       		add.w	d0,d0
0001ACC4 D2C0                       		adda.w	d0,a1
0001ACC6 117C 0004 0001             		move.b	#4,1(a0)
0001ACCC 08E8 0007 0001             		bset	#7,1(a0)
0001ACD2 08E8 0004 0001             		bset	#4,1(a0)
0001ACD8 317C 0300 0002             		move.w	#$300,2(a0)
0001ACDE 217C 0000 0000 0004        		move.l	#Map_obj84,4(a0)
0001ACE6 3159 0008                  		move.w	(a1)+,8(a0)
0001ACEA 3151 000C                  		move.w	(a1),$C(a0)
0001ACEE 3159 0038                  		move.w	(a1)+,$38(a0)
0001ACF2 117C 0020 0016             		move.b	#$20,$16(a0)
0001ACF8 117C 0060 0017             		move.b	#$60,$17(a0)
0001ACFE 117C 0020 0019             		move.b	#$20,$19(a0)
0001AD04 117C 0060 0016             		move.b	#$60,$16(a0)
0001AD0A 117C 0003 0018             		move.b	#3,$18(a0)
0001AD10 5428 0024                  		addq.b	#2,$24(a0)
0001AD14                            
0001AD14                            loc_1A4CE:				; XREF: Obj84_Index
0001AD14 0C28 0002 0028             		cmpi.b	#2,$28(a0)
0001AD1A 6F00                       		ble.s	loc_1A4DC
0001AD1C 08E8 0001 0001             		bset	#1,1(a0)
0001AD22                            
0001AD22                            loc_1A4DC:
0001AD22 42A8 003C                  		clr.l	$3C(a0)
0001AD26 4A28 0029                  		tst.b	$29(a0)
0001AD2A 6700                       		beq.s	loc_1A4EA
0001AD2C 5428 0024                  		addq.b	#2,$24(a0)
0001AD30                            
0001AD30                            loc_1A4EA:
0001AD30 2028 003C                  		move.l	$3C(a0),d0
0001AD34 2228 0038                  		move.l	$38(a0),d1
0001AD38 D280                       		add.l	d0,d1
0001AD3A 4841                       		swap	d1
0001AD3C 3141 000C                  		move.w	d1,$C(a0)
0001AD40 0C28 0004 0024             		cmpi.b	#4,$24(a0)
0001AD46 6600                       		bne.s	loc_1A524
0001AD48 4A68 0030                  		tst.w	$30(a0)
0001AD4C 6A00                       		bpl.s	loc_1A524
0001AD4E 70F6                       		moveq	#-$A,d0
0001AD50 0C28 0002 0028             		cmpi.b	#2,$28(a0)
0001AD56 6F00                       		ble.s	loc_1A514
0001AD58 700E                       		moveq	#$E,d0
0001AD5A                            
0001AD5A                            loc_1A514:
0001AD5A D240                       		add.w	d0,d1
0001AD5C 2268 0034                  		movea.l	$34(a0),a1
0001AD60 3341 000C                  		move.w	d1,$C(a1)
0001AD64 3368 0008 0008             		move.w	8(a0),8(a1)
0001AD6A                            
0001AD6A                            loc_1A524:
0001AD6A 323C 002B                  		move.w	#$2B,d1
0001AD6E 343C 0060                  		move.w	#$60,d2
0001AD72 363C 0061                  		move.w	#$61,d3
0001AD76 3828 0008                  		move.w	8(a0),d4
0001AD7A 4EB9 0001 0132             		jsr	SolidObject
0001AD80 7000                       		moveq	#0,d0
0001AD82 3228 003C                  		move.w	$3C(a0),d1
0001AD86 6A00                       		bpl.s	loc_1A550
0001AD88 4441                       		neg.w	d1
0001AD8A 5141                       		subq.w	#8,d1
0001AD8C 6500                       		bcs.s	loc_1A55C
0001AD8E 5200                       		addq.b	#1,d0
0001AD90 E841                       		asr.w	#4,d1
0001AD92 D041                       		add.w	d1,d0
0001AD94 6000                       		bra.s	loc_1A55C
0001AD96                            ; ===========================================================================
0001AD96                            
0001AD96                            loc_1A550:
0001AD96 0441 0027                  		subi.w	#$27,d1
0001AD9A 6500                       		bcs.s	loc_1A55C
0001AD9C 5200                       		addq.b	#1,d0
0001AD9E E841                       		asr.w	#4,d1
0001ADA0 D041                       		add.w	d1,d0
0001ADA2                            
0001ADA2                            loc_1A55C:
0001ADA2 1140 001A                  		move.b	d0,$1A(a0)
0001ADA6 3038 D008                  		move.w	($FFFFD008).w,d0
0001ADAA 9068 0008                  		sub.w	8(a0),d0
0001ADAE 6B00                       		bmi.s	loc_1A578
0001ADB0 0440 0140                  		subi.w	#$140,d0
0001ADB4 6B00                       		bmi.s	loc_1A578
0001ADB6 4A28 0001                  		tst.b	1(a0)
0001ADBA 6A00 FED2                  		bpl.w	Obj84_Delete
0001ADBE                            
0001ADBE                            loc_1A578:
0001ADBE 4EF9 0000 DD62             		jmp	DisplaySprite
0001ADC4                            ; ===========================================================================
0001ADC4                            
0001ADC4                            loc_1A57E:				; XREF: Obj84_Index
0001ADC4 7000                       		moveq	#0,d0
0001ADC6 1028 0028                  		move.b	$28(a0),d0
0001ADCA 303B 0000                  		move.w	off_1A590(pc,d0.w),d0
0001ADCE 4EBB 0000                  		jsr	off_1A590(pc,d0.w)
0001ADD2 6000 FF5C                  		bra.w	loc_1A4EA
0001ADD6                            ; ===========================================================================
0001ADD6 0000                       off_1A590:	dc.w loc_1A598-off_1A590
0001ADD8 0000                       		dc.w loc_1A598-off_1A590
0001ADDA 0000                       		dc.w loc_1A604-off_1A590
0001ADDC 0000                       		dc.w loc_1A604-off_1A590
0001ADDE                            ; ===========================================================================
0001ADDE                            
0001ADDE                            loc_1A598:				; XREF: off_1A590
0001ADDE 4A28 0029                  		tst.b	$29(a0)
0001ADE2 6600                       		bne.s	loc_1A5D4
0001ADE4 2268 0034                  		movea.l	$34(a0),a1
0001ADE8 4A29 0021                  		tst.b	$21(a1)
0001ADEC 6600                       		bne.s	loc_1A5B4
0001ADEE 6100 D2FA                  		bsr.w	BossDefeated
0001ADF2 04A8 0001 0000 003C        		subi.l	#$10000,$3C(a0)
0001ADFA                            
0001ADFA                            loc_1A5B4:
0001ADFA 06A8 0002 0000 003C        		addi.l	#$20000,$3C(a0)
0001AE02 6400                       		bcc.s	locret_1A602
0001AE04 42A8 003C                  		clr.l	$3C(a0)
0001AE08 2268 0034                  		movea.l	$34(a0),a1
0001AE0C 5369 0032                  		subq.w	#1,$32(a1)
0001AE10 4269 0030                  		clr.w	$30(a1)
0001AE14 5528 0024                  		subq.b	#2,$24(a0)
0001AE18 4E75                       		rts	
0001AE1A                            ; ===========================================================================
0001AE1A                            
0001AE1A                            loc_1A5D4:
0001AE1A 0C68 FFF0 003C             		cmpi.w	#-$10,$3C(a0)
0001AE20 6C00                       		bge.s	loc_1A5E4
0001AE22 04A8 0002 8000 003C        		subi.l	#$28000,$3C(a0)
0001AE2A                            
0001AE2A                            loc_1A5E4:
0001AE2A 04A8 0000 8000 003C        		subi.l	#$8000,$3C(a0)
0001AE32 0C68 FF60 003C             		cmpi.w	#-$A0,$3C(a0)
0001AE38 6E00                       		bgt.s	locret_1A602
0001AE3A 4268 003E                  		clr.w	$3E(a0)
0001AE3E 317C FF60 003C             		move.w	#-$A0,$3C(a0)
0001AE44 4228 0029                  		clr.b	$29(a0)
0001AE48                            
0001AE48                            locret_1A602:
0001AE48 4E75                       		rts	
0001AE4A                            ; ===========================================================================
0001AE4A                            
0001AE4A                            loc_1A604:				; XREF: off_1A590
0001AE4A 08E8 0001 0001             		bset	#1,1(a0)
0001AE50 4A28 0029                  		tst.b	$29(a0)
0001AE54 6600                       		bne.s	loc_1A646
0001AE56 2268 0034                  		movea.l	$34(a0),a1
0001AE5A 4A29 0021                  		tst.b	$21(a1)
0001AE5E 6600                       		bne.s	loc_1A626
0001AE60 6100 D288                  		bsr.w	BossDefeated
0001AE64 06A8 0001 0000 003C        		addi.l	#$10000,$3C(a0)
0001AE6C                            
0001AE6C                            loc_1A626:
0001AE6C 04A8 0002 0000 003C        		subi.l	#$20000,$3C(a0)
0001AE74 6400                       		bcc.s	locret_1A674
0001AE76 42A8 003C                  		clr.l	$3C(a0)
0001AE7A 2268 0034                  		movea.l	$34(a0),a1
0001AE7E 5369 0032                  		subq.w	#1,$32(a1)
0001AE82 4269 0030                  		clr.w	$30(a1)
0001AE86 5528 0024                  		subq.b	#2,$24(a0)
0001AE8A 4E75                       		rts	
0001AE8C                            ; ===========================================================================
0001AE8C                            
0001AE8C                            loc_1A646:
0001AE8C 0C68 0010 003C             		cmpi.w	#$10,$3C(a0)
0001AE92 6D00                       		blt.s	loc_1A656
0001AE94 06A8 0002 8000 003C        		addi.l	#$28000,$3C(a0)
0001AE9C                            
0001AE9C                            loc_1A656:
0001AE9C 06A8 0000 8000 003C        		addi.l	#$8000,$3C(a0)
0001AEA4 0C68 00A0 003C             		cmpi.w	#$A0,$3C(a0)
0001AEAA 6D00                       		blt.s	locret_1A674
0001AEAC 4268 003E                  		clr.w	$3E(a0)
0001AEB0 317C 00A0 003C             		move.w	#$A0,$3C(a0)
0001AEB6 4228 0029                  		clr.b	$29(a0)
0001AEBA                            
0001AEBA                            locret_1A674:
0001AEBA 4E75                       		rts	
0001AEBC                            ; ===========================================================================
0001AEBC                            ; ---------------------------------------------------------------------------
0001AEBC                            ; Sprite mappings - cylinders Eggman hides in (FZ)
0001AEBC                            ; ---------------------------------------------------------------------------
0001AEBC                            Map_obj84:
0001AEBC                            	include "_maps\obj84.asm"
0001AEBC                            ; ---------------------------------------------------------------------------
0001AEBC                            ; Sprite mappings - cylinders Eggman hides in (FZ)
0001AEBC                            ; ---------------------------------------------------------------------------
0001AEBC 0000 0000                  		dc.w byte_1A68E-Map_obj84, byte_1A6AD-Map_obj84
0001AEC0 0000 0000                  		dc.w byte_1A6D6-Map_obj84, byte_1A709-Map_obj84
0001AEC4 0000 0000                  		dc.w byte_1A746-Map_obj84, byte_1A788-Map_obj84
0001AEC8 0000 0000                  		dc.w byte_1A788-Map_obj84, byte_1A788-Map_obj84
0001AECC 0000 0000                  		dc.w byte_1A788-Map_obj84, byte_1A788-Map_obj84
0001AED0 0000 0000                  		dc.w byte_1A788-Map_obj84, byte_1A7CF-Map_obj84
0001AED4 06                         byte_1A68E:	dc.b 6
0001AED5 A00D 4000 E0               		dc.b $A0, $D, $40, 0, $E0
0001AEDA A00D 4800 00               		dc.b $A0, $D, $48, 0, 0
0001AEDF B00C 2008 E0               		dc.b $B0, $C, $20, 8, $E0
0001AEE4 B00C 200C 00               		dc.b $B0, $C, $20, $C, 0
0001AEE9 B80F 4010 E0               		dc.b $B8, $F, $40, $10,	$E0
0001AEEE B80F 4810 00               		dc.b $B8, $F, $48, $10,	0
0001AEF3 08                         byte_1A6AD:	dc.b 8
0001AEF4 A00D 4000 E0               		dc.b $A0, $D, $40, 0, $E0
0001AEF9 A00D 4800 00               		dc.b $A0, $D, $48, 0, 0
0001AEFE B00C 2008 E0               		dc.b $B0, $C, $20, 8, $E0
0001AF03 B00C 200C 00               		dc.b $B0, $C, $20, $C, 0
0001AF08 B80F 4010 E0               		dc.b $B8, $F, $40, $10,	$E0
0001AF0D B80F 4810 00               		dc.b $B8, $F, $48, $10,	0
0001AF12 D80F 4020 E0               		dc.b $D8, $F, $40, $20,	$E0
0001AF17 D80F 4820 00               		dc.b $D8, $F, $48, $20,	0
0001AF1C 0A                         byte_1A6D6:	dc.b $A
0001AF1D A00D 4000 E0               		dc.b $A0, $D, $40, 0, $E0
0001AF22 A00D 4800 00               		dc.b $A0, $D, $48, 0, 0
0001AF27 B00C 2008 E0               		dc.b $B0, $C, $20, 8, $E0
0001AF2C B00C 200C 00               		dc.b $B0, $C, $20, $C, 0
0001AF31 B80F 4010 E0               		dc.b $B8, $F, $40, $10,	$E0
0001AF36 B80F 4810 00               		dc.b $B8, $F, $48, $10,	0
0001AF3B D80F 4020 E0               		dc.b $D8, $F, $40, $20,	$E0
0001AF40 D80F 4820 00               		dc.b $D8, $F, $48, $20,	0
0001AF45 F80F 4030 E0               		dc.b $F8, $F, $40, $30,	$E0
0001AF4A F80F 4830 00               		dc.b $F8, $F, $48, $30,	0
0001AF4F 0C                         byte_1A709:	dc.b $C
0001AF50 A00D 4000 E0               		dc.b $A0, $D, $40, 0, $E0
0001AF55 A00D 4800 00               		dc.b $A0, $D, $48, 0, 0
0001AF5A B00C 2008 E0               		dc.b $B0, $C, $20, 8, $E0
0001AF5F B00C 200C 00               		dc.b $B0, $C, $20, $C, 0
0001AF64 B80F 4010 E0               		dc.b $B8, $F, $40, $10,	$E0
0001AF69 B80F 4810 00               		dc.b $B8, $F, $48, $10,	0
0001AF6E D80F 4020 E0               		dc.b $D8, $F, $40, $20,	$E0
0001AF73 D80F 4820 00               		dc.b $D8, $F, $48, $20,	0
0001AF78 F80F 4030 E0               		dc.b $F8, $F, $40, $30,	$E0
0001AF7D F80F 4830 00               		dc.b $F8, $F, $48, $30,	0
0001AF82 180F 4040 E0               		dc.b $18, $F, $40, $40,	$E0
0001AF87 180F 4840 00               		dc.b $18, $F, $48, $40,	0
0001AF8C 0D                         byte_1A746:	dc.b $D
0001AF8D A00D 4000 E0               		dc.b $A0, $D, $40, 0, $E0
0001AF92 A00D 4800 00               		dc.b $A0, $D, $48, 0, 0
0001AF97 B00C 2008 E0               		dc.b $B0, $C, $20, 8, $E0
0001AF9C B00C 200C 00               		dc.b $B0, $C, $20, $C, 0
0001AFA1 B80F 4010 E0               		dc.b $B8, $F, $40, $10,	$E0
0001AFA6 B80F 4810 00               		dc.b $B8, $F, $48, $10,	0
0001AFAB D80F 4020 E0               		dc.b $D8, $F, $40, $20,	$E0
0001AFB0 D80F 4820 00               		dc.b $D8, $F, $48, $20,	0
0001AFB5 F80F 4030 E0               		dc.b $F8, $F, $40, $30,	$E0
0001AFBA F80F 4830 00               		dc.b $F8, $F, $48, $30,	0
0001AFBF 180F 4040 E0               		dc.b $18, $F, $40, $40,	$E0
0001AFC4 180F 4840 00               		dc.b $18, $F, $48, $40,	0
0001AFC9 380F 4050 F0               		dc.b $38, $F, $40, $50,	$F0
0001AFCE 0E                         byte_1A788:	dc.b $E
0001AFCF A00D 4000 E0               		dc.b $A0, $D, $40, 0, $E0
0001AFD4 A00D 4800 00               		dc.b $A0, $D, $48, 0, 0
0001AFD9 B00C 2008 E0               		dc.b $B0, $C, $20, 8, $E0
0001AFDE B00C 200C 00               		dc.b $B0, $C, $20, $C, 0
0001AFE3 B80F 4010 E0               		dc.b $B8, $F, $40, $10,	$E0
0001AFE8 B80F 4810 00               		dc.b $B8, $F, $48, $10,	0
0001AFED D80F 4020 E0               		dc.b $D8, $F, $40, $20,	$E0
0001AFF2 D80F 4820 00               		dc.b $D8, $F, $48, $20,	0
0001AFF7 F80F 4030 E0               		dc.b $F8, $F, $40, $30,	$E0
0001AFFC F80F 4830 00               		dc.b $F8, $F, $48, $30,	0
0001B001 180F 4040 E0               		dc.b $18, $F, $40, $40,	$E0
0001B006 180F 4840 00               		dc.b $18, $F, $48, $40,	0
0001B00B 380F 4050 F0               		dc.b $38, $F, $40, $50,	$F0
0001B010 580F 4050 F0               		dc.b $58, $F, $40, $50,	$F0
0001B015 02                         byte_1A7CF:	dc.b 2
0001B016 F804 0068 F0               		dc.b $F8, 4, 0,	$68, $F0
0001B01B 000C 006A F0               		dc.b 0,	$C, 0, $6A, $F0
0001B020                            		even
0001B020                            		even
0001B020                            
0001B020                            ; ===========================================================================
0001B020                            ; ---------------------------------------------------------------------------
0001B020                            ; Object 86 - energy balls (FZ)
0001B020                            ; ---------------------------------------------------------------------------
0001B020                            
0001B020                            Obj86:					; XREF: Obj_Index
0001B020 7000                       		moveq	#0,d0
0001B022 1028 0024                  		move.b	$24(a0),d0
0001B026 303B 0000                  		move.w	Obj86_Index(pc,d0.w),d0
0001B02A 4EFB 0000                  		jmp	Obj86_Index(pc,d0.w)
0001B02E                            ; ===========================================================================
0001B02E 0000                       Obj86_Index:	dc.w Obj86_Main-Obj86_Index
0001B030 0000                       		dc.w Obj86_Generator-Obj86_Index
0001B032 0000                       		dc.w Obj86_MakeBalls-Obj86_Index
0001B034 0000                       		dc.w loc_1A962-Obj86_Index
0001B036 0000                       		dc.w loc_1A982-Obj86_Index
0001B038                            ; ===========================================================================
0001B038                            
0001B038                            Obj86_Main:				; XREF: Obj86_Index
0001B038 317C 2588 0008             		move.w	#$2588,8(a0)
0001B03E 317C 053C 000C             		move.w	#$53C,$C(a0)
0001B044 317C 0300 0002             		move.w	#$300,2(a0)
0001B04A 217C 0000 0000 0004        		move.l	#Map_obj86,4(a0)
0001B052 117C 0000 001C             		move.b	#0,$1C(a0)
0001B058 117C 0003 0018             		move.b	#3,$18(a0)
0001B05E 117C 0008 0017             		move.b	#8,$17(a0)
0001B064 117C 0008 0016             		move.b	#8,$16(a0)
0001B06A 117C 0004 0001             		move.b	#4,1(a0)
0001B070 08E8 0007 0001             		bset	#7,1(a0)
0001B076 5428 0024                  		addq.b	#2,$24(a0)
0001B07A                            
0001B07A                            Obj86_Generator:			; XREF: Obj86_Index
0001B07A 2268 0034                  		movea.l	$34(a0),a1
0001B07E 0C29 0006 0034             		cmpi.b	#6,$34(a1)
0001B084 6600                       		bne.s	loc_1A850
0001B086 10BC 003F                  		move.b	#$3F,(a0)
0001B08A 117C 0000 0024             		move.b	#0,$24(a0)
0001B090 4EF9 0000 DD62             		jmp	DisplaySprite
0001B096                            ; ===========================================================================
0001B096                            
0001B096                            loc_1A850:
0001B096 117C 0000 001C             		move.b	#0,$1C(a0)
0001B09C 4A28 0029                  		tst.b	$29(a0)
0001B0A0 6700                       		beq.s	loc_1A86C
0001B0A2 5428 0024                  		addq.b	#2,$24(a0)
0001B0A6 117C 0001 001C             		move.b	#1,$1C(a0)
0001B0AC 117C 003E 0028             		move.b	#$3E,$28(a0)
0001B0B2                            
0001B0B2                            loc_1A86C:
0001B0B2 323C 0013                  		move.w	#$13,d1
0001B0B6 343C 0008                  		move.w	#8,d2
0001B0BA 363C 0011                  		move.w	#$11,d3
0001B0BE 3828 0008                  		move.w	8(a0),d4
0001B0C2 4EB9 0001 0132             		jsr	SolidObject
0001B0C8 3038 D008                  		move.w	($FFFFD008).w,d0
0001B0CC 9068 0008                  		sub.w	8(a0),d0
0001B0D0 6B00                       		bmi.s	loc_1A89A
0001B0D2 0440 0140                  		subi.w	#$140,d0
0001B0D6 6B00                       		bmi.s	loc_1A89A
0001B0D8 4A28 0001                  		tst.b	1(a0)
0001B0DC 6A00 FBB0                  		bpl.w	Obj84_Delete
0001B0E0                            
0001B0E0                            loc_1A89A:
0001B0E0 43FA 0000                  		lea	Ani_obj86(pc),a1
0001B0E4 4EB9 0000 AE22             		jsr	AnimateSprite
0001B0EA 4EF9 0000 DD62             		jmp	DisplaySprite
0001B0F0                            ; ===========================================================================
0001B0F0                            
0001B0F0                            Obj86_MakeBalls:			; XREF: Obj86_Index
0001B0F0 4A28 0029                  		tst.b	$29(a0)
0001B0F4 6700 0000                  		beq.w	loc_1A954
0001B0F8 4228 0029                  		clr.b	$29(a0)
0001B0FC D068 0030                  		add.w	$30(a0),d0
0001B100 0240 001E                  		andi.w	#$1E,d0
0001B104 D4C0                       		adda.w	d0,a2
0001B106 5868 0030                  		addq.w	#4,$30(a0)
0001B10A 4268 0032                  		clr.w	$32(a0)
0001B10E 7403                       		moveq	#3,d2
0001B110                            
0001B110                            Obj86_Loop:
0001B110 4EB9 0000 E1FE             		jsr	SingleObjLoad2
0001B116 6600 0000                  		bne.w	loc_1A954
0001B11A 12BC 0086                  		move.b	#$86,(a1)
0001B11E 3368 0008 0008             		move.w	8(a0),8(a1)
0001B124 337C 053C 000C             		move.w	#$53C,$C(a1)
0001B12A 137C 0008 0024             		move.b	#8,$24(a1)
0001B130 337C 2300 0002             		move.w	#$2300,2(a1)
0001B136 237C 0000 0000 0004        		move.l	#Map_obj86a,4(a1)
0001B13E 137C 000C 0016             		move.b	#$C,$16(a1)
0001B144 137C 000C 0017             		move.b	#$C,$17(a1)
0001B14A 137C 0000 0020             		move.b	#0,$20(a1)
0001B150 137C 0003 0018             		move.b	#3,$18(a1)
0001B156 337C 003E 0028             		move.w	#$3E,$28(a1)
0001B15C 137C 0004 0001             		move.b	#4,1(a1)
0001B162 08E9 0007 0001             		bset	#7,1(a1)
0001B168 2348 0034                  		move.l	a0,$34(a1)
0001B16C 4EB9 0000 2C3E             		jsr	(RandomNumber).l
0001B172 3228 0032                  		move.w	$32(a0),d1
0001B176 C3FC FFB1                  		muls.w	#-$4F,d1
0001B17A 0641 2578                  		addi.w	#$2578,d1
0001B17E 0240 001F                  		andi.w	#$1F,d0
0001B182 0440 0010                  		subi.w	#$10,d0
0001B186 D041                       		add.w	d1,d0
0001B188 3340 0030                  		move.w	d0,$30(a1)
0001B18C 5268 0032                  		addq.w	#1,$32(a0)
0001B190 3168 0032 0038             		move.w	$32(a0),$38(a0)
0001B196 51CA FF78                  		dbf	d2,Obj86_Loop	; repeat sequence 3 more times
0001B19A                            
0001B19A                            loc_1A954:
0001B19A 4A68 0032                  		tst.w	$32(a0)
0001B19E 6600                       		bne.s	loc_1A95E
0001B1A0 5428 0024                  		addq.b	#2,$24(a0)
0001B1A4                            
0001B1A4                            loc_1A95E:
0001B1A4 6000 FF0C                  		bra.w	loc_1A86C
0001B1A8                            ; ===========================================================================
0001B1A8                            
0001B1A8                            loc_1A962:				; XREF: Obj86_Index
0001B1A8 117C 0002 001C             		move.b	#2,$1C(a0)
0001B1AE 4A68 0038                  		tst.w	$38(a0)
0001B1B2 6600                       		bne.s	loc_1A97E
0001B1B4 117C 0002 0024             		move.b	#2,$24(a0)
0001B1BA 2268 0034                  		movea.l	$34(a0),a1
0001B1BE 337C FFFF 0032             		move.w	#-1,$32(a1)
0001B1C4                            
0001B1C4                            loc_1A97E:
0001B1C4 6000 FEEC                  		bra.w	loc_1A86C
0001B1C8                            ; ===========================================================================
0001B1C8                            
0001B1C8                            loc_1A982:				; XREF: Obj86_Index
0001B1C8 7000                       		moveq	#0,d0
0001B1CA 1028 0025                  		move.b	$25(a0),d0
0001B1CE 303B 0000                  		move.w	Obj86_Index2(pc,d0.w),d0
0001B1D2 4EBB 0000                  		jsr	Obj86_Index2(pc,d0.w)
0001B1D6 43FA 0000                  		lea	Ani_obj86a(pc),a1
0001B1DA 4EB9 0000 AE22             		jsr	AnimateSprite
0001B1E0 4EF9 0000 DD62             		jmp	DisplaySprite
0001B1E6                            ; ===========================================================================
0001B1E6 0000                       Obj86_Index2:	dc.w loc_1A9A6-Obj86_Index2
0001B1E8 0000                       		dc.w loc_1A9C0-Obj86_Index2
0001B1EA 0000                       		dc.w loc_1AA1E-Obj86_Index2
0001B1EC                            ; ===========================================================================
0001B1EC                            
0001B1EC                            loc_1A9A6:				; XREF: Obj86_Index2
0001B1EC 3028 0030                  		move.w	$30(a0),d0
0001B1F0 9068 0008                  		sub.w	8(a0),d0
0001B1F4 E940                       		asl.w	#4,d0
0001B1F6 3140 0010                  		move.w	d0,$10(a0)
0001B1FA 317C 00B4 0028             		move.w	#$B4,$28(a0)
0001B200 5428 0025                  		addq.b	#2,$25(a0)
0001B204 4E75                       		rts	
0001B206                            ; ===========================================================================
0001B206                            
0001B206                            loc_1A9C0:				; XREF: Obj86_Index2
0001B206 4A68 0010                  		tst.w	$10(a0)
0001B20A 6700                       		beq.s	loc_1A9E6
0001B20C 4EB9 0000 DD3C             		jsr	SpeedToPos
0001B212 3028 0008                  		move.w	8(a0),d0
0001B216 9068 0030                  		sub.w	$30(a0),d0
0001B21A 6400                       		bcc.s	loc_1A9E6
0001B21C 4268 0010                  		clr.w	$10(a0)
0001B220 D168 0008                  		add.w	d0,8(a0)
0001B224 2268 0034                  		movea.l	$34(a0),a1
0001B228 5369 0032                  		subq.w	#1,$32(a1)
0001B22C                            
0001B22C                            loc_1A9E6:
0001B22C 117C 0000 001C             		move.b	#0,$1C(a0)
0001B232 5368 0028                  		subq.w	#1,$28(a0)
0001B236 6600                       		bne.s	locret_1AA1C
0001B238 5428 0025                  		addq.b	#2,$25(a0)
0001B23C 117C 0001 001C             		move.b	#1,$1C(a0)
0001B242 117C 009A 0020             		move.b	#$9A,$20(a0)
0001B248 317C 00B4 0028             		move.w	#$B4,$28(a0)
0001B24E 7000                       		moveq	#0,d0
0001B250 3038 D008                  		move.w	($FFFFD008).w,d0
0001B254 9068 0008                  		sub.w	8(a0),d0
0001B258 3140 0010                  		move.w	d0,$10(a0)
0001B25C 317C 0140 0012             		move.w	#$140,$12(a0)
0001B262                            
0001B262                            locret_1AA1C:
0001B262 4E75                       		rts	
0001B264                            ; ===========================================================================
0001B264                            
0001B264                            loc_1AA1E:				; XREF: Obj86_Index2
0001B264 4EB9 0000 DD3C             		jsr	SpeedToPos
0001B26A 0C68 05E0 000C             		cmpi.w	#$5E0,$C(a0)
0001B270 6400                       		bcc.s	loc_1AA34
0001B272 5368 0028                  		subq.w	#1,$28(a0)
0001B276 6700                       		beq.s	loc_1AA34
0001B278 4E75                       		rts	
0001B27A                            ; ===========================================================================
0001B27A                            
0001B27A                            loc_1AA34:
0001B27A 2268 0034                  		movea.l	$34(a0),a1
0001B27E 5369 0038                  		subq.w	#1,$38(a1)
0001B282 6000 FA0A                  		bra.w	Obj84_Delete
0001B286                            ; ===========================================================================
0001B286                            Ani_obj86:
0001B286                            	include "_anim\obj86.asm"
0001B286                            ; ---------------------------------------------------------------------------
0001B286                            ; Animation script - energy ball launcher (FZ)
0001B286                            ; ---------------------------------------------------------------------------
0001B286 0000                       		dc.w byte_1AA46-Ani_obj86
0001B288 0000                       		dc.w byte_1AA4A-Ani_obj86
0001B28A 0000                       		dc.w byte_1AA50-Ani_obj86
0001B28C 7E00 FF00                  byte_1AA46:	dc.b $7E, 0, $FF, 0
0001B290 0100 0200 03FF             byte_1AA4A:	dc.b 1,	0, 2, 0, 3, $FF
0001B296 0101 0201 03FF             byte_1AA50:	dc.b 1,	1, 2, 1, 3, $FF
0001B29C                            		even
0001B29C                            		even
0001B29C                            
0001B29C                            ; ---------------------------------------------------------------------------
0001B29C                            ; Sprite mappings - energy ball	launcher (FZ)
0001B29C                            ; ---------------------------------------------------------------------------
0001B29C                            Map_obj86:
0001B29C                            	include "_maps\obj86.asm"
0001B29C                            ; ---------------------------------------------------------------------------
0001B29C                            ; Sprite mappings - energy ball	launcher (FZ)
0001B29C                            ; ---------------------------------------------------------------------------
0001B29C 0000 0000                  		dc.w byte_1AA5E-Map_obj86, byte_1AA64-Map_obj86
0001B2A0 0000 0000                  		dc.w byte_1AA6A-Map_obj86, byte_1AA70-Map_obj86
0001B2A4 01                         byte_1AA5E:	dc.b 1
0001B2A5 F805 006E F8               		dc.b $F8, 5, 0,	$6E, $F8
0001B2AA 01                         byte_1AA64:	dc.b 1
0001B2AB F805 0076 F8               		dc.b $F8, 5, 0,	$76, $F8
0001B2B0 01                         byte_1AA6A:	dc.b 1
0001B2B1 F805 0072 F8               		dc.b $F8, 5, 0,	$72, $F8
0001B2B6 01                         byte_1AA70:	dc.b 1
0001B2B7 F805 1072 F8               		dc.b $F8, 5, $10, $72, $F8
0001B2BC                            		even
0001B2BC                            		even
0001B2BC                            
0001B2BC                            Ani_obj86a:
0001B2BC                            	include "_anim\obj86a.asm"
0001B2BC                            ; ---------------------------------------------------------------------------
0001B2BC                            ; Animation script - energy balls (FZ)
0001B2BC                            ; ---------------------------------------------------------------------------
0001B2BC 0000                       		dc.w byte_1AA7A-Ani_obj86a
0001B2BE 0000                       		dc.w byte_1AA9C-Ani_obj86a
0001B2C0 0100 0A08 0A01 0A09 0A06+  byte_1AA7A:	dc.b 1,	0, $A, 8, $A, 1, $A, 9,	$A, 6, $A, 7, $A, 0, $A
0001B2CF 080A 010A 090A 060A 070A+  		dc.b 8,	$A, 1, $A, 9, $A, 6, $A, 7, $A,	2, $A, 3, $A, 4
0001B2DE 0A05 FF00                  		dc.b $A, 5, $FF, 0
0001B2E2 0006 0501 0507 0501 05FF   byte_1AA9C:	dc.b 0,	6, 5, 1, 5, 7, 5, 1, 5,	$FF
0001B2EC                            		even
0001B2EC                            		even
0001B2EC                            
0001B2EC                            ; ---------------------------------------------------------------------------
0001B2EC                            ; Sprite mappings - energy balls (FZ)
0001B2EC                            ; ---------------------------------------------------------------------------
0001B2EC                            Map_obj86a:
0001B2EC                            	include "_maps\obj86a.asm"
0001B2EC                            ; ---------------------------------------------------------------------------
0001B2EC                            ; Sprite mappings - energy balls (FZ)
0001B2EC                            ; ---------------------------------------------------------------------------
0001B2EC 0000 0000                  		dc.w byte_1AABC-Map_obj86a, byte_1AAC7-Map_obj86a
0001B2F0 0000 0000                  		dc.w byte_1AAD2-Map_obj86a, byte_1AADD-Map_obj86a
0001B2F4 0000 0000                  		dc.w byte_1AAE8-Map_obj86a, byte_1AAF3-Map_obj86a
0001B2F8 0000 0000                  		dc.w byte_1AAFE-Map_obj86a, byte_1AB04-Map_obj86a
0001B2FC 0000 0000                  		dc.w byte_1AB0A-Map_obj86a, byte_1AB15-Map_obj86a
0001B300 0000                       		dc.w byte_1AB20-Map_obj86a
0001B302 02                         byte_1AABC:	dc.b 2
0001B303 F00D 007A F0               		dc.b $F0, $D, 0, $7A, $F0
0001B308 000D 187A F0               		dc.b 0,	$D, $18, $7A, $F0
0001B30D 02                         byte_1AAC7:	dc.b 2
0001B30E F406 0082 F4               		dc.b $F4, 6, 0,	$82, $F4
0001B313 F402 1882 04               		dc.b $F4, 2, $18, $82, 4
0001B318 02                         byte_1AAD2:	dc.b 2
0001B319 F804 0088 F8               		dc.b $F8, 4, 0,	$88, $F8
0001B31E 0004 1088 F8               		dc.b 0,	4, $10,	$88, $F8
0001B323 02                         byte_1AADD:	dc.b 2
0001B324 F804 008A F8               		dc.b $F8, 4, 0,	$8A, $F8
0001B329 0004 108A F8               		dc.b 0,	4, $10,	$8A, $F8
0001B32E 02                         byte_1AAE8:	dc.b 2
0001B32F F804 008C F8               		dc.b $F8, 4, 0,	$8C, $F8
0001B334 0004 108C F8               		dc.b 0,	4, $10,	$8C, $F8
0001B339 02                         byte_1AAF3:	dc.b 2
0001B33A F406 008E F4               		dc.b $F4, 6, 0,	$8E, $F4
0001B33F F402 188E 04               		dc.b $F4, 2, $18, $8E, 4
0001B344 01                         byte_1AAFE:	dc.b 1
0001B345 F805 0094 F8               		dc.b $F8, 5, 0,	$94, $F8
0001B34A 01                         byte_1AB04:	dc.b 1
0001B34B F805 0098 F8               		dc.b $F8, 5, 0,	$98, $F8
0001B350 02                         byte_1AB0A:	dc.b 2
0001B351 F00D 087A F0               		dc.b $F0, $D, 8, $7A, $F0
0001B356 000D 107A F0               		dc.b 0,	$D, $10, $7A, $F0
0001B35B 02                         byte_1AB15:	dc.b 2
0001B35C F406 1082 F4               		dc.b $F4, 6, $10, $82, $F4
0001B361 F402 0882 04               		dc.b $F4, 2, 8,	$82, 4
0001B366 00                         byte_1AB20:	dc.b 0
0001B368 00                         		even
0001B368 00                         		even
0001B368                            
0001B368                            ; ===========================================================================
0001B368                            ; ---------------------------------------------------------------------------
0001B368                            ; Object 3E - prison capsule
0001B368                            ; ---------------------------------------------------------------------------
0001B368                            
0001B368                            Obj3E:					; XREF: Obj_Index
0001B368 7000                       		moveq	#0,d0
0001B36A 1028 0024                  		move.b	$24(a0),d0
0001B36E 323B 0000                  		move.w	Obj3E_Index(pc,d0.w),d1
0001B372 4EBB 1000                  		jsr	Obj3E_Index(pc,d1.w)
0001B376 3028 0008                  		move.w	8(a0),d0
0001B37A 0240 FF80                  		andi.w	#$FF80,d0
0001B37E 3238 F700                  		move.w	($FFFFF700).w,d1
0001B382 0441 0080                  		subi.w	#$80,d1
0001B386 0241 FF80                  		andi.w	#$FF80,d1
0001B38A 9041                       		sub.w	d1,d0
0001B38C 0C40 0280                  		cmpi.w	#$280,d0
0001B390 6200                       		bhi.s	Obj3E_Delete
0001B392 4EF9 0000 DD62             		jmp	DisplaySprite
0001B398                            ; ===========================================================================
0001B398                            
0001B398                            Obj3E_Delete:
0001B398 4EF9 0000 DD9E             		jmp	DeleteObject
0001B39E                            ; ===========================================================================
0001B39E 0000                       Obj3E_Index:	dc.w Obj3E_Main-Obj3E_Index
0001B3A0 0000                       		dc.w Obj3E_BodyMain-Obj3E_Index
0001B3A2 0000                       		dc.w Obj3E_Switched-Obj3E_Index
0001B3A4 0000                       		dc.w Obj3E_Explosion-Obj3E_Index
0001B3A6 0000                       		dc.w Obj3E_Explosion-Obj3E_Index
0001B3A8 0000                       		dc.w Obj3E_Explosion-Obj3E_Index
0001B3AA 0000                       		dc.w Obj3E_Animals-Obj3E_Index
0001B3AC 0000                       		dc.w Obj3E_EndAct-Obj3E_Index
0001B3AE                            
0001B3AE 0220 0400                  Obj3E_Var:	dc.b 2,	$20, 4,	0	; routine, width, priority, frame
0001B3B2 040C 0501                  		dc.b 4,	$C, 5, 1
0001B3B6 0610 0403                  		dc.b 6,	$10, 4,	3
0001B3BA 0810 0305                  		dc.b 8,	$10, 3,	5
0001B3BE                            ; ===========================================================================
0001B3BE                            
0001B3BE                            Obj3E_Main:				; XREF: Obj3E_Index
0001B3BE 217C 0000 0000 0004        		move.l	#Map_obj3E,4(a0)
0001B3C6 317C 049D 0002             		move.w	#$49D,2(a0)
0001B3CC 117C 0004 0001             		move.b	#4,1(a0)
0001B3D2 3168 000C 0030             		move.w	$C(a0),$30(a0)
0001B3D8 7000                       		moveq	#0,d0
0001B3DA 1028 0028                  		move.b	$28(a0),d0
0001B3DE E548                       		lsl.w	#2,d0
0001B3E0 43FB 00CC                  		lea	Obj3E_Var(pc,d0.w),a1
0001B3E4 1159 0024                  		move.b	(a1)+,$24(a0)
0001B3E8 1159 0019                  		move.b	(a1)+,$19(a0)
0001B3EC 1159 0018                  		move.b	(a1)+,$18(a0)
0001B3F0 1159 001A                  		move.b	(a1)+,$1A(a0)
0001B3F4 0C40 0008                  		cmpi.w	#8,d0		; is object type number	02?
0001B3F8 6600                       		bne.s	Obj3E_Not02	; if not, branch
0001B3FA 117C 0006 0020             		move.b	#6,$20(a0)
0001B400 117C 0008 0021             		move.b	#8,$21(a0)
0001B406                            
0001B406                            Obj3E_Not02:
0001B406 4E75                       		rts	
0001B408                            ; ===========================================================================
0001B408                            
0001B408                            Obj3E_BodyMain:				; XREF: Obj3E_Index
0001B408 0C38 0002 F7A7             		cmpi.b	#2,($FFFFF7A7).w
0001B40E 6700                       		beq.s	Obj3E_ChkOpened
0001B410 323C 002B                  		move.w	#$2B,d1
0001B414 343C 0018                  		move.w	#$18,d2
0001B418 363C 0018                  		move.w	#$18,d3
0001B41C 3828 0008                  		move.w	8(a0),d4
0001B420 4EF9 0001 0132             		jmp	SolidObject
0001B426                            ; ===========================================================================
0001B426                            
0001B426                            Obj3E_ChkOpened:
0001B426 4A28 0025                  		tst.b	$25(a0)		; has the prison been opened?
0001B42A 6700                       		beq.s	Obj3E_DoOpen	; if yes, branch
0001B42C 4228 0025                  		clr.b	$25(a0)
0001B430 08B8 0003 D022             		bclr	#3,($FFFFD022).w
0001B436 08F8 0001 D022             		bset	#1,($FFFFD022).w
0001B43C                            
0001B43C                            Obj3E_DoOpen:
0001B43C 117C 0002 001A             		move.b	#2,$1A(a0)	; use frame number 2 (destroyed	prison)
0001B442 4E75                       		rts	
0001B444                            ; ===========================================================================
0001B444                            
0001B444                            Obj3E_Switched:				; XREF: Obj3E_Index
0001B444 323C 0017                  		move.w	#$17,d1
0001B448 343C 0008                  		move.w	#8,d2
0001B44C 363C 0008                  		move.w	#8,d3
0001B450 3828 0008                  		move.w	8(a0),d4
0001B454 4EB9 0001 0132             		jsr	SolidObject
0001B45A 43F9 0000 0000             		lea	(Ani_obj3E).l,a1
0001B460 4EB9 0000 AE22             		jsr	AnimateSprite
0001B466 3168 0030 000C             		move.w	$30(a0),$C(a0)
0001B46C 4A28 0025                  		tst.b	$25(a0)
0001B470 6700                       		beq.s	locret_1AC60
0001B472 5068 000C                  		addq.w	#8,$C(a0)
0001B476 117C 000A 0024             		move.b	#$A,$24(a0)
0001B47C 317C 003C 001E             		move.w	#$3C,$1E(a0)
0001B482 4238 FE1E                  		clr.b	($FFFFFE1E).w	; stop time counter
0001B486 4238 F7AA                  		clr.b	($FFFFF7AA).w	; lock screen position
0001B48A 11FC 0001 F7CC             		move.b	#1,($FFFFF7CC).w ; lock	controls
0001B490 0838 0000 FE2F             		btst	#0,($FFFFFE2F).w	; GMZ: Have we got a reverse control power up?
0001B496 6700                       		beq.s	Obj3E_MoveLeft	; GMZ: If not, branch
0001B498 31FC 0400 F602             		move.w	#$400,($FFFFF602).w ; make Sonic run to	the right
0001B49E 6000                       		bra.s	Obj3E_ContinueCode
0001B4A0                            
0001B4A0                            Obj3E_MoveLeft:
0001B4A0 31FC 0800 F602             		move.w	#$800,($FFFFF602).w ; make Sonic run to	the right
0001B4A6                            
0001B4A6                            Obj3E_ContinueCode:
0001B4A6 4228 0025                  		clr.b	$25(a0)
0001B4AA 08B8 0003 D022             		bclr	#3,($FFFFD022).w
0001B4B0 08F8 0001 D022             		bset	#1,($FFFFD022).w
0001B4B6                            
0001B4B6                            locret_1AC60:
0001B4B6 4E75                       		rts	
0001B4B8                            ; ===========================================================================
0001B4B8                            
0001B4B8                            Obj3E_Explosion:			; XREF: Obj3E_Index
0001B4B8 7007                       		moveq	#7,d0
0001B4BA C038 FE0F                  		and.b	($FFFFFE0F).w,d0
0001B4BE 6600                       		bne.s	loc_1ACA0
0001B4C0 4EB9 0000 E1E8             		jsr	SingleObjLoad
0001B4C6 6600                       		bne.s	loc_1ACA0
0001B4C8 12BC 003F                  		move.b	#$3F,0(a1)	; load explosion object
0001B4CC 3368 0008 0008             		move.w	8(a0),8(a1)
0001B4D2 3368 000C 000C             		move.w	$C(a0),$C(a1)
0001B4D8 4EB9 0000 2C3E             		jsr	(RandomNumber).l
0001B4DE 7200                       		moveq	#0,d1
0001B4E0 1200                       		move.b	d0,d1
0001B4E2 E409                       		lsr.b	#2,d1
0001B4E4 0441 0020                  		subi.w	#$20,d1
0001B4E8 D369 0008                  		add.w	d1,8(a1)
0001B4EC E048                       		lsr.w	#8,d0
0001B4EE E608                       		lsr.b	#3,d0
0001B4F0 D169 000C                  		add.w	d0,$C(a1)
0001B4F4                            
0001B4F4                            loc_1ACA0:
0001B4F4 5368 001E                  		subq.w	#1,$1E(a0)
0001B4F8 6700                       		beq.s	Obj3E_MakeAnimal
0001B4FA 4E75                       		rts	
0001B4FC                            ; ===========================================================================
0001B4FC                            
0001B4FC                            Obj3E_MakeAnimal:
0001B4FC 11FC 0002 F7A7             		move.b	#2,($FFFFF7A7).w
0001B502 117C 000C 0024             		move.b	#$C,$24(a0)	; replace explosions with animals
0001B508 117C 0006 001A             		move.b	#6,$1A(a0)
0001B50E 317C 0096 001E             		move.w	#$96,$1E(a0)
0001B514 0668 0020 000C             		addi.w	#$20,$C(a0)
0001B51A 7C07                       		moveq	#7,d6
0001B51C 3A3C 009A                  		move.w	#$9A,d5
0001B520 78E4                       		moveq	#-$1C,d4
0001B522                            
0001B522                            Obj3E_Loop:
0001B522 4EB9 0000 E1E8             		jsr	SingleObjLoad
0001B528 6600                       		bne.s	locret_1ACF8
0001B52A 12BC 0028                  		move.b	#$28,0(a1)	; load animal object
0001B52E 3368 0008 0008             		move.w	8(a0),8(a1)
0001B534 3368 000C 000C             		move.w	$C(a0),$C(a1)
0001B53A D969 0008                  		add.w	d4,8(a1)
0001B53E 5E44                       		addq.w	#7,d4
0001B540 3345 0036                  		move.w	d5,$36(a1)
0001B544 5145                       		subq.w	#8,d5
0001B546 51CE FFDA                  		dbf	d6,Obj3E_Loop	; repeat 7 more	times
0001B54A                            
0001B54A                            locret_1ACF8:
0001B54A 4E75                       		rts	
0001B54C                            ; ===========================================================================
0001B54C                            
0001B54C                            Obj3E_Animals:				; XREF: Obj3E_Index
0001B54C 7007                       		moveq	#7,d0
0001B54E C038 FE0F                  		and.b	($FFFFFE0F).w,d0
0001B552 6600                       		bne.s	loc_1AD38
0001B554 4EB9 0000 E1E8             		jsr	SingleObjLoad
0001B55A 6600                       		bne.s	loc_1AD38
0001B55C 12BC 0028                  		move.b	#$28,0(a1)	; load animal object
0001B560 3368 0008 0008             		move.w	8(a0),8(a1)
0001B566 3368 000C 000C             		move.w	$C(a0),$C(a1)
0001B56C 4EB9 0000 2C3E             		jsr	(RandomNumber).l
0001B572 0240 001F                  		andi.w	#$1F,d0
0001B576 5D40                       		subq.w	#6,d0
0001B578 4A41                       		tst.w	d1
0001B57A 6A00                       		bpl.s	loc_1AD2E
0001B57C 4440                       		neg.w	d0
0001B57E                            
0001B57E                            loc_1AD2E:
0001B57E D169 0008                  		add.w	d0,8(a1)
0001B582 337C 000C 0036             		move.w	#$C,$36(a1)
0001B588                            
0001B588                            loc_1AD38:
0001B588 5368 001E                  		subq.w	#1,$1E(a0)
0001B58C 6600                       		bne.s	locret_1AD48
0001B58E 5428 0024                  		addq.b	#2,$24(a0)
0001B592 317C 00B4 001E             		move.w	#180,$1E(a0)
0001B598                            
0001B598                            locret_1AD48:
0001B598 4E75                       		rts	
0001B59A                            ; ===========================================================================
0001B59A                            
0001B59A                            Obj3E_EndAct:				; XREF: Obj3E_Index
0001B59A 703E                       		moveq	#$3E,d0
0001B59C 7228                       		moveq	#$28,d1
0001B59E 7440                       		moveq	#$40,d2
0001B5A0 43F8 D040                  		lea	($FFFFD040).w,a1 ; load	object RAM
0001B5A4                            
0001B5A4                            Obj3E_FindObj28:
0001B5A4 B211                       		cmp.b	(a1),d1		; is object $28	(animal) loaded?
0001B5A6 6700                       		beq.s	Obj3E_Obj28Found ; if yes, branch
0001B5A8 D2C2                       		adda.w	d2,a1		; next object RAM
0001B5AA 51C8 FFF8                  		dbf	d0,Obj3E_FindObj28 ; repeat $3E	times
0001B5AE                            
0001B5AE 4EB9 0000 F3EE             		jsr	GotThroughAct
0001B5B4 4EF9 0000 DD9E             		jmp	DeleteObject
0001B5BA                            ; ===========================================================================
0001B5BA                            
0001B5BA                            Obj3E_Obj28Found:
0001B5BA 4E75                       		rts	
0001B5BC                            ; ===========================================================================
0001B5BC                            Ani_obj3E:
0001B5BC                            	include "_anim\obj3E.asm"
0001B5BC                            ; ---------------------------------------------------------------------------
0001B5BC                            ; Animation script - prison capsule
0001B5BC                            ; ---------------------------------------------------------------------------
0001B5BC 0000                       		dc.w byte_1AD70-Ani_obj3E
0001B5BE 0000                       		dc.w byte_1AD70-Ani_obj3E
0001B5C0 0201 03FF                  byte_1AD70:	dc.b 2,	1, 3, $FF
0001B5C4                            		even
0001B5C4                            		even
0001B5C4                            
0001B5C4                            ; ---------------------------------------------------------------------------
0001B5C4                            ; Sprite mappings - prison capsule
0001B5C4                            ; ---------------------------------------------------------------------------
0001B5C4                            Map_obj3E:
0001B5C4                            	include "_maps\obj3E.asm"
0001B5C4                            ; ---------------------------------------------------------------------------
0001B5C4                            ; Sprite mappings - prison capsule
0001B5C4                            ; ---------------------------------------------------------------------------
0001B5C4 0000 0000                  		dc.w byte_1AD82-Map_obj3E, byte_1ADA6-Map_obj3E
0001B5C8 0000 0000                  		dc.w byte_1ADAC-Map_obj3E, byte_1ADCB-Map_obj3E
0001B5CC 0000 0000                  		dc.w byte_1ADD1-Map_obj3E, byte_1ADDC-Map_obj3E
0001B5D0 0000                       		dc.w byte_1ADE2-Map_obj3E
0001B5D2 07                         byte_1AD82:	dc.b 7
0001B5D3 E00C 2000 F0               		dc.b $E0, $C, $20, 0, $F0
0001B5D8 E80D 2004 E0               		dc.b $E8, $D, $20, 4, $E0
0001B5DD E80D 200C 00               		dc.b $E8, $D, $20, $C, 0
0001B5E2 F80E 2014 E0               		dc.b $F8, $E, $20, $14,	$E0
0001B5E7 F80E 2020 00               		dc.b $F8, $E, $20, $20,	0
0001B5EC 100D 202C E0               		dc.b $10, $D, $20, $2C,	$E0
0001B5F1 100D 2034 00               		dc.b $10, $D, $20, $34,	0
0001B5F6 01                         byte_1ADA6:	dc.b 1
0001B5F7 F809 003C F4               		dc.b $F8, 9, 0,	$3C, $F4
0001B5FC 06                         byte_1ADAC:	dc.b 6
0001B5FD 0008 2042 E0               		dc.b 0,	8, $20,	$42, $E0
0001B602 080C 2045 E0               		dc.b 8,	$C, $20, $45, $E0
0001B607 0004 2049 10               		dc.b 0,	4, $20,	$49, $10
0001B60C 080C 204B 00               		dc.b 8,	$C, $20, $4B, 0
0001B611 100D 202C E0               		dc.b $10, $D, $20, $2C,	$E0
0001B616 100D 2034 00               		dc.b $10, $D, $20, $34,	0
0001B61B 01                         byte_1ADCB:	dc.b 1
0001B61C F809 004F F4               		dc.b $F8, 9, 0,	$4F, $F4
0001B621 02                         byte_1ADD1:	dc.b 2
0001B622 E80E 2055 F0               		dc.b $E8, $E, $20, $55,	$F0
0001B627 000E 2061 F0               		dc.b 0,	$E, $20, $61, $F0
0001B62C 01                         byte_1ADDC:	dc.b 1
0001B62D F007 206D F8               		dc.b $F0, 7, $20, $6D, $F8
0001B632 00                         byte_1ADE2:	dc.b 0
0001B634 00                         		even
0001B634 00                         		even
0001B634                            
0001B634                            ; ---------------------------------------------------------------------------
0001B634                            ; Object touch response	subroutine - $20(a0) in	the object RAM
0001B634                            ; ---------------------------------------------------------------------------
0001B634                            
0001B634                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0001B634                            
0001B634                            
0001B634                            TouchResponse:				; XREF: Obj01
0001B634 4E71                       		nop	
0001B636 3428 0008                  		move.w	8(a0),d2	; load Sonic's x-axis value
0001B63A 3628 000C                  		move.w	$C(a0),d3	; load Sonic's y-axis value
0001B63E 5142                       		subq.w	#8,d2
0001B640 7A00                       		moveq	#0,d5
0001B642 1A28 0016                  		move.b	$16(a0),d5	; load Sonic's height
0001B646 5705                       		subq.b	#3,d5
0001B648 9645                       		sub.w	d5,d3
0001B64A 0C28 0039 001A             		cmpi.b	#$39,$1A(a0)	; is Sonic ducking?
0001B650 6600                       		bne.s	Touch_NoDuck	; if not, branch
0001B652 0643 000C                  		addi.w	#$C,d3
0001B656 7A0A                       		moveq	#$A,d5
0001B658                            
0001B658                            Touch_NoDuck:
0001B658 383C 0010                  		move.w	#$10,d4
0001B65C DA45                       		add.w	d5,d5
0001B65E 43F8 D800                  		lea	($FFFFD800).w,a1 ; begin checking the object RAM
0001B662 3C3C 005F                  		move.w	#$5F,d6
0001B666                            
0001B666                            Touch_Loop:
0001B666 4A29 0001                  		tst.b	1(a1)
0001B66A 6A00                       		bpl.s	Touch_NextObj
0001B66C 1029 0020                  		move.b	$20(a1),d0	; load touch response number
0001B670 6600                       		bne.s	Touch_Height	; if touch response is not 0, branch
0001B672                            
0001B672                            Touch_NextObj:
0001B672 43E9 0040                  		lea	$40(a1),a1	; next object RAM
0001B676 51CE FFEE                  		dbf	d6,Touch_Loop	; repeat $5F more times
0001B67A                            
0001B67A 7000                       		moveq	#0,d0
0001B67C 4E75                       		rts	
0001B67E                            ; ===========================================================================
0001B67E 1414                       Touch_Sizes:	dc.b  $14, $14		; width, height
0001B680 0C14                       		dc.b   $C, $14
0001B682 140C                       		dc.b  $14,  $C
0001B684 0410                       		dc.b	4, $10
0001B686 0C12                       		dc.b   $C, $12
0001B688 1010                       		dc.b  $10, $10
0001B68A 0606                       		dc.b	6,   6
0001B68C 180C                       		dc.b  $18,  $C
0001B68E 0C10                       		dc.b   $C, $10
0001B690 100C                       		dc.b  $10,  $C
0001B692 0808                       		dc.b	8,   8
0001B694 1410                       		dc.b  $14, $10
0001B696 1408                       		dc.b  $14,   8
0001B698 0E0E                       		dc.b   $E,  $E
0001B69A 1818                       		dc.b  $18, $18
0001B69C 2810                       		dc.b  $28, $10
0001B69E 1018                       		dc.b  $10, $18
0001B6A0 0810                       		dc.b	8, $10
0001B6A2 2070                       		dc.b  $20, $70
0001B6A4 4020                       		dc.b  $40, $20
0001B6A6 8020                       		dc.b  $80, $20
0001B6A8 2020                       		dc.b  $20, $20
0001B6AA 0808                       		dc.b	8,   8
0001B6AC 0404                       		dc.b	4,   4
0001B6AE 2008                       		dc.b  $20,   8
0001B6B0 0C0C                       		dc.b   $C,  $C
0001B6B2 0804                       		dc.b	8,   4
0001B6B4 1804                       		dc.b  $18,   4
0001B6B6 2804                       		dc.b  $28,   4
0001B6B8 0408                       		dc.b	4,   8
0001B6BA 0418                       		dc.b	4, $18
0001B6BC 0428                       		dc.b	4, $28
0001B6BE 0420                       		dc.b	4, $20
0001B6C0 1818                       		dc.b  $18, $18
0001B6C2 0C18                       		dc.b   $C, $18
0001B6C4 4808                       		dc.b  $48,   8
0001B6C6                            ; ===========================================================================
0001B6C6                            
0001B6C6                            Touch_Height:				; XREF: TouchResponse
0001B6C6 0240 003F                  		andi.w	#$3F,d0
0001B6CA D040                       		add.w	d0,d0
0001B6CC 45FB 00AE                  		lea	Touch_Sizes-2(pc,d0.w),a2
0001B6D0 7200                       		moveq	#0,d1
0001B6D2 121A                       		move.b	(a2)+,d1
0001B6D4 3029 0008                  		move.w	8(a1),d0
0001B6D8 9041                       		sub.w	d1,d0
0001B6DA 9042                       		sub.w	d2,d0
0001B6DC 6400                       		bcc.s	loc_1AE98
0001B6DE D241                       		add.w	d1,d1
0001B6E0 D041                       		add.w	d1,d0
0001B6E2 6500                       		bcs.s	Touch_Width
0001B6E4 6000 FF8C                  		bra.w	Touch_NextObj
0001B6E8                            ; ===========================================================================
0001B6E8                            
0001B6E8                            loc_1AE98:
0001B6E8 B044                       		cmp.w	d4,d0
0001B6EA 6200 FF86                  		bhi.w	Touch_NextObj
0001B6EE                            
0001B6EE                            Touch_Width:
0001B6EE 7200                       		moveq	#0,d1
0001B6F0 121A                       		move.b	(a2)+,d1
0001B6F2 3029 000C                  		move.w	$C(a1),d0
0001B6F6 9041                       		sub.w	d1,d0
0001B6F8 9043                       		sub.w	d3,d0
0001B6FA 6400                       		bcc.s	loc_1AEB6
0001B6FC D241                       		add.w	d1,d1
0001B6FE D240                       		add.w	d0,d1
0001B700 6500                       		bcs.s	Touch_ChkValue
0001B702 6000 FF6E                  		bra.w	Touch_NextObj
0001B706                            ; ===========================================================================
0001B706                            
0001B706                            loc_1AEB6:
0001B706 B045                       		cmp.w	d5,d0
0001B708 6200 FF68                  		bhi.w	Touch_NextObj
0001B70C                            
0001B70C                            Touch_ChkValue:
0001B70C 1229 0020                  		move.b	$20(a1),d1	; load touch response number
0001B710 0201 00C0                  		andi.b	#$C0,d1		; is touch response $40	or higher?
0001B714 6700 0000                  		beq.w	Touch_Enemy	; if not, branch
0001B718 0C01 00C0                  		cmpi.b	#$C0,d1		; is touch response $C0	or higher?
0001B71C 6700 0000                  		beq.w	Touch_Special	; if yes, branch
0001B720 4A01                       		tst.b	d1		; is touch response $80-$BF ?
0001B722 6B00 0000                  		bmi.w	Touch_ChkHurt	; if yes, branch
0001B726                            
0001B726                            ; touch	response is $40-$7F
0001B726                            
0001B726 1029 0020                  		move.b	$20(a1),d0
0001B72A 0200 003F                  		andi.b	#$3F,d0
0001B72E 0C00 0006                  		cmpi.b	#6,d0		; is touch response $46	?
0001B732 6700                       		beq.s	Touch_Monitor	; if yes, branch
0001B734 0C68 005A 0030             		cmpi.w	#$5A,$30(a0)
0001B73A 6400 0000                  		bcc.w	locret_1AEF2
0001B73E 5429 0024                  		addq.b	#2,$24(a1)	; advance the object's routine counter
0001B742                            
0001B742                            locret_1AEF2:
0001B742 4E75                       		rts	
0001B744                            ; ===========================================================================
0001B744                            
0001B744                            Touch_Monitor:
0001B744 4A68 0012                  		tst.w	$12(a0)		; is Sonic moving upwards?
0001B748 6A00                       		bpl.s	loc_1AF1E	; if not, branch
0001B74A 3028 000C                  		move.w	$C(a0),d0
0001B74E 0440 0010                  		subi.w	#$10,d0
0001B752 B069 000C                  		cmp.w	$C(a1),d0
0001B756 6500                       		bcs.s	locret_1AF2E
0001B758 4468 0012                  		neg.w	$12(a0)		; reverse Sonic's y-motion
0001B75C 337C FE80 0012             		move.w	#-$180,$12(a1)
0001B762 4A29 0025                  		tst.b	$25(a1)
0001B766 6600                       		bne.s	locret_1AF2E
0001B768 5829 0025                  		addq.b	#4,$25(a1)	; advance the monitor's routine counter
0001B76C 4E75                       		rts	
0001B76E                            ; ===========================================================================
0001B76E                            
0001B76E                            loc_1AF1E:
0001B76E 0C28 0002 001C             		cmpi.b	#2,$1C(a0)	; is Sonic rolling/jumping?
0001B774 6600                       		bne.s	locret_1AF2E
0001B776 4468 0012                  		neg.w	$12(a0)		; reverse Sonic's y-motion
0001B77A 5429 0024                  		addq.b	#2,$24(a1)	; advance the monitor's routine counter
0001B77E                            
0001B77E                            locret_1AF2E:
0001B77E 4E75                       		rts	
0001B780                            ; ===========================================================================
0001B780                            
0001B780                            Touch_Enemy:				; XREF: Touch_ChkValue
0001B780 4A38 FE2D                  		tst.b	($FFFFFE2D).w	; is Sonic invincible?
0001B784 6600                       		bne.s	loc_1AF40	; if yes, branch
0001B786 0C28 0002 001C             		cmpi.b	#2,$1C(a0)	; is Sonic rolling?
0001B78C 6600 0000                  		bne.w	Touch_ChkHurt	; if not, branch
0001B790                            
0001B790                            loc_1AF40:
0001B790 4A29 0021                  		tst.b	$21(a1)
0001B794 6700                       		beq.s	Touch_KillEnemy
0001B796 4468 0010                  		neg.w	$10(a0)
0001B79A 4468 0012                  		neg.w	$12(a0)
0001B79E E0E8 0010                  		asr	$10(a0)
0001B7A2 E0E8 0012                  		asr	$12(a0)
0001B7A6 137C 0000 0020             		move.b	#0,$20(a1)
0001B7AC 5329 0021                  		subq.b	#1,$21(a1)
0001B7B0 6600                       		bne.s	locret_1AF68
0001B7B2 08E9 0007 0022             		bset	#7,$22(a1)
0001B7B8                            
0001B7B8                            locret_1AF68:
0001B7B8 4E75                       		rts	
0001B7BA                            ; ===========================================================================
0001B7BA                            
0001B7BA                            Touch_KillEnemy:
0001B7BA 08E9 0007 0022             		bset	#7,$22(a1)
0001B7C0 7000                       		moveq	#0,d0
0001B7C2 3038 F7D0                  		move.w	($FFFFF7D0).w,d0
0001B7C6 5478 F7D0                  		addq.w	#2,($FFFFF7D0).w ; add 2 to item bonus counter
0001B7CA 0C40 0006                  		cmpi.w	#6,d0
0001B7CE 6500                       		bcs.s	loc_1AF82
0001B7D0 7006                       		moveq	#6,d0
0001B7D2                            
0001B7D2                            loc_1AF82:
0001B7D2 3340 003E                  		move.w	d0,$3E(a1)
0001B7D6 303B 0000                  		move.w	Enemy_Points(pc,d0.w),d0
0001B7DA 0C78 0020 F7D0             		cmpi.w	#$20,($FFFFF7D0).w ; have 16 enemies been destroyed?
0001B7E0 6500                       		bcs.s	loc_1AF9C	; if not, branch
0001B7E2 303C 03E8                  		move.w	#1000,d0	; fix bonus to 10000
0001B7E6 337C 000A 003E             		move.w	#$A,$3E(a1)
0001B7EC                            
0001B7EC                            loc_1AF9C:
0001B7EC 6100 0000                  		bsr.w	AddPoints
0001B7F0 7400                       		moveq	#0,d2	; GMZ
0001B7F2 7205                       		moveq	#5,d1	; GMZ: Amount of explosion objects
0001B7F4 2449                       		move.l	a1,a2	; GMZ: Save a1 address on a2
0001B7F6                            
0001B7F6                            TouchKE_Explode:
0001B7F6 12BC 0027                  		move.b	#$27,0(a1)	; change object	to points
0001B7FA 137C 0000 0024             		move.b	#0,$24(a1)
0001B800 1342 0028                  		move.b	d2,$28(a1)	; GMZ: Set subtype
0001B804                            
0001B804                            TouchKE_NextExplosion:
0001B804 5802                       		addq.b	#4,d2
0001B806 4EB9 0000 E1E8             		jsr	SingleObjLoad
0001B80C 6600                       		bne.s	TouchKE_NoExplosion
0001B80E 336A 0008 0008             		move.w	8(a2),8(a1)
0001B814 336A 000C 000C             		move.w	$C(a2),$C(a1)
0001B81A 51C9 FFDA                  		dbf	d1,TouchKE_Explode
0001B81E                            
0001B81E                            TouchKE_NoExplosion:
0001B81E 224A                       		move.l	a2,a1	; GMZ: Restore original a1 address
0001B820 4A68 0012                  		tst.w	$12(a0)
0001B824 6B00                       		bmi.s	loc_1AFC2
0001B826 3028 000C                  		move.w	$C(a0),d0
0001B82A B069 000C                  		cmp.w	$C(a1),d0
0001B82E 6400                       		bcc.s	loc_1AFCA
0001B830 4468 0012                  		neg.w	$12(a0)
0001B834 4E75                       		rts	
0001B836                            ; ===========================================================================
0001B836                            
0001B836                            loc_1AFC2:
0001B836 0668 0100 0012             		addi.w	#$100,$12(a0)
0001B83C 4E75                       		rts	
0001B83E                            ; ===========================================================================
0001B83E                            
0001B83E                            loc_1AFCA:
0001B83E 0468 0100 0012             		subi.w	#$100,$12(a0)
0001B844 4E75                       		rts	
0001B846                            ; ===========================================================================
0001B846 000A 0014 0032 0064        Enemy_Points:	dc.w 10, 20, 50, 100
0001B84E                            ; ===========================================================================
0001B84E                            
0001B84E                            loc_1AFDA:				; XREF: Touch_CatKiller
0001B84E 08E9 0007 0022             		bset	#7,$22(a1)
0001B854                            
0001B854                            Touch_ChkHurt:				; XREF: Touch_ChkValue
0001B854 4A38 FE2D                  		tst.b	($FFFFFE2D).w	; is Sonic invincible?
0001B858 6700                       		beq.s	Touch_Hurt	; if not, branch
0001B85A                            
0001B85A                            loc_1AFE6:				; XREF: Touch_Hurt
0001B85A 70FF                       		moveq	#-1,d0
0001B85C 4E75                       		rts	
0001B85E                            ; ===========================================================================
0001B85E                            
0001B85E                            Touch_Hurt:				; XREF: Touch_ChkHurt
0001B85E 4E71                       		nop	
0001B860 4A68 0030                  		tst.w	$30(a0)
0001B864 66F4                       		bne.s	loc_1AFE6
0001B866 2449                       		movea.l	a1,a2
0001B868                            
0001B868                            ; End of function TouchResponse
0001B868                            ; continue straight to HurtSonic
0001B868                            
0001B868                            ; ---------------------------------------------------------------------------
0001B868                            ; Hurting Sonic	subroutine
0001B868                            ; ---------------------------------------------------------------------------
0001B868                            
0001B868                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0001B868                            
0001B868                            
0001B868                            HurtSonic:
0001B868 4A38 FE2C                  		tst.b	($FFFFFE2C).w	; does Sonic have a shield?
0001B86C 6600                       		bne.s	Hurt_Shield	; if yes, branch
0001B86E 4A78 FE20                  		tst.w	($FFFFFE20).w	; does Sonic have any rings?
0001B872 6700 0000                  		beq.w	Hurt_NoRings	; if not, branch
0001B876 4EB9 0000 E1E8             		jsr	SingleObjLoad
0001B87C 6600                       		bne.s	Hurt_Shield
0001B87E 12BC 0037                  		move.b	#$37,0(a1)	; load bouncing	multi rings object
0001B882 3368 0008 0008             		move.w	8(a0),8(a1)
0001B888 3368 000C 000C             		move.w	$C(a0),$C(a1)
0001B88E                            
0001B88E                            Hurt_Shield:
0001B88E 11FC 0000 FE2C             		move.b	#0,($FFFFFE2C).w ; remove shield
0001B894 117C 0004 0024             		move.b	#4,$24(a0)
0001B89A 6100 8704                  		bsr.w	Sonic_ResetOnFloor
0001B89E 08E8 0001 0022             		bset	#1,$22(a0)
0001B8A4 317C FC00 0012             		move.w	#-$400,$12(a0)	; make Sonic bounce away from the object
0001B8AA 317C FE00 0010             		move.w	#-$200,$10(a0)
0001B8B0 0828 0006 0022             		btst	#6,$22(a0)
0001B8B6 6700                       		beq.s	Hurt_Reverse
0001B8B8 317C FE00 0012             		move.w	#-$200,$12(a0)
0001B8BE 317C FF00 0010             		move.w	#-$100,$10(a0)
0001B8C4                            
0001B8C4                            Hurt_Reverse:
0001B8C4 3028 0008                  		move.w	8(a0),d0
0001B8C8 B06A 0008                  		cmp.w	8(a2),d0
0001B8CC 6500                       		bcs.s	Hurt_ChkSpikes	; if Sonic is left of the object, branch
0001B8CE 4468 0010                  		neg.w	$10(a0)		; if Sonic is right of the object, reverse
0001B8D2                            
0001B8D2                            Hurt_ChkSpikes:
0001B8D2 317C 0000 0014             		move.w	#0,$14(a0)
0001B8D8 117C 001A 001C             		move.b	#$1A,$1C(a0)
0001B8DE 317C 0078 0030             		move.w	#$78,$30(a0)
0001B8E4 303C 00A3                  		move.w	#$A3,d0		; load normal damage sound
0001B8E8 0C12 0036                  		cmpi.b	#$36,(a2)	; was damage caused by spikes?
0001B8EC 6600                       		bne.s	Hurt_Sound	; if not, branch
0001B8EE 0C12 0016                  		cmpi.b	#$16,(a2)	; was damage caused by LZ harpoon?
0001B8F2 6600                       		bne.s	Hurt_Sound	; if not, branch
0001B8F4 303C 00A6                  		move.w	#$A6,d0		; load spikes damage sound
0001B8F8                            
0001B8F8                            Hurt_Sound:
0001B8F8 4EB9 0000 15C0             		jsr	(PlaySound_Special).l
0001B8FE 70FF                       		moveq	#-1,d0
0001B900 4E75                       		rts	
0001B902                            ; ===========================================================================
0001B902                            
0001B902                            Hurt_NoRings:
0001B902 4A78 FFFA                  		tst.w	($FFFFFFFA).w	; is debug mode	cheat on?
0001B906 6600 FF86                  		bne.w	Hurt_Shield	; if yes, branch
0001B90A                            ; End of function HurtSonic
0001B90A                            
0001B90A                            ; ---------------------------------------------------------------------------
0001B90A                            ; Subroutine to	kill Sonic
0001B90A                            ; ---------------------------------------------------------------------------
0001B90A                            
0001B90A                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0001B90A                            
0001B90A                            
0001B90A                            KillSonic:
0001B90A 4A78 FE08                  		tst.w	($FFFFFE08).w	; is debug mode	active?
0001B90E 6600                       		bne.s	Kill_NoDeath	; if yes, branch
0001B910 11FC 0000 FE2D             		move.b	#0,($FFFFFE2D).w ; remove invincibility
0001B916 117C 0006 0024             		move.b	#6,$24(a0)
0001B91C 6100 8682                  		bsr.w	Sonic_ResetOnFloor
0001B920 08E8 0001 0022             		bset	#1,$22(a0)
0001B926 317C F900 0012             		move.w	#-$700,$12(a0)
0001B92C 317C 0000 0010             		move.w	#0,$10(a0)
0001B932 317C 0000 0014             		move.w	#0,$14(a0)
0001B938 3168 000C 0038             		move.w	$C(a0),$38(a0)
0001B93E 117C 0018 001C             		move.b	#$18,$1C(a0)
0001B944 08E8 0007 0002             		bset	#7,2(a0)
0001B94A 303C 00A3                  		move.w	#$A3,d0		; play normal death sound
0001B94E 0C12 0036                  		cmpi.b	#$36,(a2)	; check	if you were killed by spikes
0001B952 6600                       		bne.s	Kill_Sound
0001B954 303C 00A6                  		move.w	#$A6,d0		; play spikes death sound
0001B958                            
0001B958                            Kill_Sound:
0001B958 4EB9 0000 15C0             		jsr	(PlaySound_Special).l
0001B95E                            
0001B95E                            Kill_NoDeath:
0001B95E 70FF                       		moveq	#-1,d0
0001B960 4E75                       		rts	
0001B962                            ; End of function KillSonic
0001B962                            
0001B962                            
0001B962                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0001B962                            
0001B962                            
0001B962                            Touch_Special:				; XREF: Touch_ChkValue
0001B962 1229 0020                  		move.b	$20(a1),d1
0001B966 0201 003F                  		andi.b	#$3F,d1
0001B96A 0C01 000B                  		cmpi.b	#$B,d1		; is touch response $CB	?
0001B96E 6700                       		beq.s	Touch_CatKiller	; if yes, branch
0001B970 0C01 000C                  		cmpi.b	#$C,d1		; is touch response $CC	?
0001B974 6700                       		beq.s	Touch_Yadrin	; if yes, branch
0001B976 0C01 0017                  		cmpi.b	#$17,d1		; is touch response $D7	?
0001B97A 6700                       		beq.s	Touch_D7orE1	; if yes, branch
0001B97C 0C01 0021                  		cmpi.b	#$21,d1		; is touch response $E1	?
0001B980 6700                       		beq.s	Touch_D7orE1	; if yes, branch
0001B982 4E75                       		rts	
0001B984                            ; ===========================================================================
0001B984                            
0001B984                            Touch_CatKiller:			; XREF: Touch_Special
0001B984 6000 FEC8                  		bra.w	loc_1AFDA
0001B988                            ; ===========================================================================
0001B988                            
0001B988                            Touch_Yadrin:				; XREF: Touch_Special
0001B988 9A40                       		sub.w	d0,d5
0001B98A 0C45 0008                  		cmpi.w	#8,d5
0001B98E 6400                       		bcc.s	loc_1B144
0001B990 3029 0008                  		move.w	8(a1),d0
0001B994 5940                       		subq.w	#4,d0
0001B996 0829 0000 0022             		btst	#0,$22(a1)
0001B99C 6700                       		beq.s	loc_1B130
0001B99E 0440 0010                  		subi.w	#$10,d0
0001B9A2                            
0001B9A2                            loc_1B130:
0001B9A2 9042                       		sub.w	d2,d0
0001B9A4 6400                       		bcc.s	loc_1B13C
0001B9A6 0640 0018                  		addi.w	#$18,d0
0001B9AA 6500                       		bcs.s	loc_1B140
0001B9AC 6000                       		bra.s	loc_1B144
0001B9AE                            ; ===========================================================================
0001B9AE                            
0001B9AE                            loc_1B13C:
0001B9AE B044                       		cmp.w	d4,d0
0001B9B0 6200                       		bhi.s	loc_1B144
0001B9B2                            
0001B9B2                            loc_1B140:
0001B9B2 6000 FEA0                  		bra.w	Touch_ChkHurt
0001B9B6                            ; ===========================================================================
0001B9B6                            
0001B9B6                            loc_1B144:
0001B9B6 6000 FDC8                  		bra.w	Touch_Enemy
0001B9BA                            ; ===========================================================================
0001B9BA                            
0001B9BA                            Touch_D7orE1:				; XREF: Touch_Special
0001B9BA 5229 0021                  		addq.b	#1,$21(a1)
0001B9BE 4E75                       		rts	
0001B9C0                            ; End of function Touch_Special
0001B9C0                            
0001B9C0                            ; ---------------------------------------------------------------------------
0001B9C0                            ; Subroutine to	show the special stage layout
0001B9C0                            ; ---------------------------------------------------------------------------
0001B9C0                            
0001B9C0                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0001B9C0                            
0001B9C0                            
0001B9C0                            SS_ShowLayout:				; XREF: SpecialStage
0001B9C0 6100 0000                  		bsr.w	SS_AniWallsRings
0001B9C4 6100 0000                  		bsr.w	SS_AniItems
0001B9C8 3F05                       		move.w	d5,-(sp)
0001B9CA 43F8 8000                  		lea	($FFFF8000).w,a1
0001B9CE 1038 F780                  		move.b	($FFFFF780).w,d0
0001B9D2 0200 00FC                  		andi.b	#$FC,d0
0001B9D6 4EB9 0000 2C64             		jsr	(CalcSine).l
0001B9DC 3800                       		move.w	d0,d4
0001B9DE 3A01                       		move.w	d1,d5
0001B9E0 C9FC 0018                  		muls.w	#$18,d4
0001B9E4 CBFC 0018                  		muls.w	#$18,d5
0001B9E8 7400                       		moveq	#0,d2
0001B9EA 3438 F700                  		move.w	($FFFFF700).w,d2
0001B9EE 84FC 0018                  		divu.w	#$18,d2
0001B9F2 4842                       		swap	d2
0001B9F4 4442                       		neg.w	d2
0001B9F6 0642 FF4C                  		addi.w	#-$B4,d2
0001B9FA 7600                       		moveq	#0,d3
0001B9FC 3638 F704                  		move.w	($FFFFF704).w,d3
0001BA00 86FC 0018                  		divu.w	#$18,d3
0001BA04 4843                       		swap	d3
0001BA06 4443                       		neg.w	d3
0001BA08 0643 FF4C                  		addi.w	#-$B4,d3
0001BA0C 3E3C 000F                  		move.w	#$F,d7
0001BA10                            
0001BA10                            loc_1B19E:
0001BA10 48A7 E000                  		movem.w	d0-d2,-(sp)
0001BA14 48A7 C000                  		movem.w	d0-d1,-(sp)
0001BA18 4440                       		neg.w	d0
0001BA1A C3C2                       		muls.w	d2,d1
0001BA1C C1C3                       		muls.w	d3,d0
0001BA1E 2C00                       		move.l	d0,d6
0001BA20 DC81                       		add.l	d1,d6
0001BA22 4C9F 0003                  		movem.w	(sp)+,d0-d1
0001BA26 C1C2                       		muls.w	d2,d0
0001BA28 C3C3                       		muls.w	d3,d1
0001BA2A D280                       		add.l	d0,d1
0001BA2C 2406                       		move.l	d6,d2
0001BA2E 3C3C 000F                  		move.w	#$F,d6
0001BA32                            
0001BA32                            loc_1B1C0:
0001BA32 2002                       		move.l	d2,d0
0001BA34 E080                       		asr.l	#8,d0
0001BA36 32C0                       		move.w	d0,(a1)+
0001BA38 2001                       		move.l	d1,d0
0001BA3A E080                       		asr.l	#8,d0
0001BA3C 32C0                       		move.w	d0,(a1)+
0001BA3E D485                       		add.l	d5,d2
0001BA40 D284                       		add.l	d4,d1
0001BA42 51CE FFEE                  		dbf	d6,loc_1B1C0
0001BA46                            
0001BA46 4C9F 0007                  		movem.w	(sp)+,d0-d2
0001BA4A 0643 0018                  		addi.w	#$18,d3
0001BA4E 51CF FFC0                  		dbf	d7,loc_1B19E
0001BA52                            
0001BA52 3A1F                       		move.w	(sp)+,d5
0001BA54 41F9 00FF 0000             		lea	($FF0000).l,a0
0001BA5A 7000                       		moveq	#0,d0
0001BA5C 3038 F704                  		move.w	($FFFFF704).w,d0
0001BA60 80FC 0018                  		divu.w	#$18,d0
0001BA64 C0FC 0080                  		mulu.w	#$80,d0
0001BA68 D1C0                       		adda.l	d0,a0
0001BA6A 7000                       		moveq	#0,d0
0001BA6C 3038 F700                  		move.w	($FFFFF700).w,d0
0001BA70 80FC 0018                  		divu.w	#$18,d0
0001BA74 D0C0                       		adda.w	d0,a0
0001BA76 49F8 8000                  		lea	($FFFF8000).w,a4
0001BA7A 3E3C 000F                  		move.w	#$F,d7
0001BA7E                            
0001BA7E                            loc_1B20C:
0001BA7E 3C3C 000F                  		move.w	#$F,d6
0001BA82                            
0001BA82                            loc_1B210:
0001BA82 7000                       		moveq	#0,d0
0001BA84 1018                       		move.b	(a0)+,d0
0001BA86 6700                       		beq.s	loc_1B268
0001BA88 0C00 004E                  		cmpi.b	#$4E,d0
0001BA8C 6200                       		bhi.s	loc_1B268
0001BA8E 3614                       		move.w	(a4),d3
0001BA90 0643 0120                  		addi.w	#$120,d3
0001BA94 0C43 0070                  		cmpi.w	#$70,d3
0001BA98 6500                       		bcs.s	loc_1B268
0001BA9A 0C43 01D0                  		cmpi.w	#$1D0,d3
0001BA9E 6400                       		bcc.s	loc_1B268
0001BAA0 342C 0002                  		move.w	2(a4),d2
0001BAA4 0642 00F0                  		addi.w	#$F0,d2
0001BAA8 0C42 0070                  		cmpi.w	#$70,d2
0001BAAC 6500                       		bcs.s	loc_1B268
0001BAAE 0C42 0170                  		cmpi.w	#$170,d2
0001BAB2 6400                       		bcc.s	loc_1B268
0001BAB4 4BF9 00FF 4000             		lea	($FF4000).l,a5
0001BABA E748                       		lsl.w	#3,d0
0001BABC 4BF5 0000                  		lea	(a5,d0.w),a5
0001BAC0 225D                       		movea.l	(a5)+,a1
0001BAC2 321D                       		move.w	(a5)+,d1
0001BAC4 D241                       		add.w	d1,d1
0001BAC6 D2F1 1000                  		adda.w	(a1,d1.w),a1
0001BACA 365D                       		movea.w	(a5)+,a3
0001BACC 7200                       		moveq	#0,d1
0001BACE 1219                       		move.b	(a1)+,d1
0001BAD0 5301                       		subq.b	#1,d1
0001BAD2 6B00                       		bmi.s	loc_1B268
0001BAD4 4EB9 0000 DEC0             		jsr	sub_D762
0001BADA                            
0001BADA                            loc_1B268:
0001BADA 584C                       		addq.w	#4,a4
0001BADC 51CE FFA4                  		dbf	d6,loc_1B210
0001BAE0                            
0001BAE0 41E8 0070                  		lea	$70(a0),a0
0001BAE4 51CF FF98                  		dbf	d7,loc_1B20C
0001BAE8                            
0001BAE8 11C5 F62C                  		move.b	d5,($FFFFF62C).w
0001BAEC 0C05 0050                  		cmpi.b	#$50,d5
0001BAF0 6700                       		beq.s	loc_1B288
0001BAF2 24BC 0000 0000             		move.l	#0,(a2)
0001BAF8 4E75                       		rts	
0001BAFA                            ; ===========================================================================
0001BAFA                            
0001BAFA                            loc_1B288:
0001BAFA 157C 0000 FFFB             		move.b	#0,-5(a2)
0001BB00 4E75                       		rts	
0001BB02                            ; End of function SS_ShowLayout
0001BB02                            
0001BB02                            ; ---------------------------------------------------------------------------
0001BB02                            ; Subroutine to	animate	walls and rings	in the special stage
0001BB02                            ; ---------------------------------------------------------------------------
0001BB02                            
0001BB02                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0001BB02                            
0001BB02                            
0001BB02                            SS_AniWallsRings:			; XREF: SS_ShowLayout
0001BB02 43F9 00FF 400C             		lea	($FF400C).l,a1
0001BB08 7000                       		moveq	#0,d0
0001BB0A 1038 F780                  		move.b	($FFFFF780).w,d0
0001BB0E E408                       		lsr.b	#2,d0
0001BB10 0240 000F                  		andi.w	#$F,d0
0001BB14 7223                       		moveq	#$23,d1
0001BB16                            
0001BB16                            loc_1B2A4:
0001BB16 3280                       		move.w	d0,(a1)
0001BB18 5049                       		addq.w	#8,a1
0001BB1A 51C9 FFFA                  		dbf	d1,loc_1B2A4
0001BB1E                            
0001BB1E 43F9 00FF 4005             		lea	($FF4005).l,a1
0001BB24 5338 FEC2                  		subq.b	#1,($FFFFFEC2).w
0001BB28 6A00                       		bpl.s	loc_1B2C8
0001BB2A 11FC 0007 FEC2             		move.b	#7,($FFFFFEC2).w
0001BB30 5238 FEC3                  		addq.b	#1,($FFFFFEC3).w
0001BB34 0238 0003 FEC3             		andi.b	#3,($FFFFFEC3).w
0001BB3A                            
0001BB3A                            loc_1B2C8:
0001BB3A 1378 FEC3 01D0             		move.b	($FFFFFEC3).w,$1D0(a1)
0001BB40 5338 FEC4                  		subq.b	#1,($FFFFFEC4).w
0001BB44 6A00                       		bpl.s	loc_1B2E4
0001BB46 11FC 0007 FEC4             		move.b	#7,($FFFFFEC4).w
0001BB4C 5238 FEC5                  		addq.b	#1,($FFFFFEC5).w
0001BB50 0238 0001 FEC5             		andi.b	#1,($FFFFFEC5).w
0001BB56                            
0001BB56                            loc_1B2E4:
0001BB56 1038 FEC5                  		move.b	($FFFFFEC5).w,d0
0001BB5A 1340 0138                  		move.b	d0,$138(a1)
0001BB5E 1340 0160                  		move.b	d0,$160(a1)
0001BB62 1340 0148                  		move.b	d0,$148(a1)
0001BB66 1340 0150                  		move.b	d0,$150(a1)
0001BB6A 1340 01D8                  		move.b	d0,$1D8(a1)
0001BB6E 1340 01E0                  		move.b	d0,$1E0(a1)
0001BB72 1340 01E8                  		move.b	d0,$1E8(a1)
0001BB76 1340 01F0                  		move.b	d0,$1F0(a1)
0001BB7A 1340 01F8                  		move.b	d0,$1F8(a1)
0001BB7E 1340 0200                  		move.b	d0,$200(a1)
0001BB82 5338 FEC6                  		subq.b	#1,($FFFFFEC6).w
0001BB86 6A00                       		bpl.s	loc_1B326
0001BB88 11FC 0004 FEC6             		move.b	#4,($FFFFFEC6).w
0001BB8E 5238 FEC7                  		addq.b	#1,($FFFFFEC7).w
0001BB92 0238 0003 FEC7             		andi.b	#3,($FFFFFEC7).w
0001BB98                            
0001BB98                            loc_1B326:
0001BB98 1038 FEC7                  		move.b	($FFFFFEC7).w,d0
0001BB9C 1340 0168                  		move.b	d0,$168(a1)
0001BBA0 1340 0170                  		move.b	d0,$170(a1)
0001BBA4 1340 0178                  		move.b	d0,$178(a1)
0001BBA8 1340 0180                  		move.b	d0,$180(a1)
0001BBAC 5338 FEC0                  		subq.b	#1,($FFFFFEC0).w
0001BBB0 6A00                       		bpl.s	loc_1B350
0001BBB2 11FC 0007 FEC0             		move.b	#7,($FFFFFEC0).w
0001BBB8 5338 FEC1                  		subq.b	#1,($FFFFFEC1).w
0001BBBC 0238 0007 FEC1             		andi.b	#7,($FFFFFEC1).w
0001BBC2                            
0001BBC2                            loc_1B350:
0001BBC2 43F9 00FF 4016             		lea	($FF4016).l,a1
0001BBC8 41F9 0000 0000             		lea	(SS_WaRiVramSet).l,a0
0001BBCE 7000                       		moveq	#0,d0
0001BBD0 1038 FEC1                  		move.b	($FFFFFEC1).w,d0
0001BBD4 D040                       		add.w	d0,d0
0001BBD6 41F0 0000                  		lea	(a0,d0.w),a0
0001BBDA 3290                       		move.w	(a0),(a1)
0001BBDC 3368 0002 0008             		move.w	2(a0),8(a1)
0001BBE2 3368 0004 0010             		move.w	4(a0),$10(a1)
0001BBE8 3368 0006 0018             		move.w	6(a0),$18(a1)
0001BBEE 3368 0008 0020             		move.w	8(a0),$20(a1)
0001BBF4 3368 000A 0028             		move.w	$A(a0),$28(a1)
0001BBFA 3368 000C 0030             		move.w	$C(a0),$30(a1)
0001BC00 3368 000E 0038             		move.w	$E(a0),$38(a1)
0001BC06 D0FC 0020                  		adda.w	#$20,a0
0001BC0A D2FC 0048                  		adda.w	#$48,a1
0001BC0E 3290                       		move.w	(a0),(a1)
0001BC10 3368 0002 0008             		move.w	2(a0),8(a1)
0001BC16 3368 0004 0010             		move.w	4(a0),$10(a1)
0001BC1C 3368 0006 0018             		move.w	6(a0),$18(a1)
0001BC22 3368 0008 0020             		move.w	8(a0),$20(a1)
0001BC28 3368 000A 0028             		move.w	$A(a0),$28(a1)
0001BC2E 3368 000C 0030             		move.w	$C(a0),$30(a1)
0001BC34 3368 000E 0038             		move.w	$E(a0),$38(a1)
0001BC3A D0FC 0020                  		adda.w	#$20,a0
0001BC3E D2FC 0048                  		adda.w	#$48,a1
0001BC42 3290                       		move.w	(a0),(a1)
0001BC44 3368 0002 0008             		move.w	2(a0),8(a1)
0001BC4A 3368 0004 0010             		move.w	4(a0),$10(a1)
0001BC50 3368 0006 0018             		move.w	6(a0),$18(a1)
0001BC56 3368 0008 0020             		move.w	8(a0),$20(a1)
0001BC5C 3368 000A 0028             		move.w	$A(a0),$28(a1)
0001BC62 3368 000C 0030             		move.w	$C(a0),$30(a1)
0001BC68 3368 000E 0038             		move.w	$E(a0),$38(a1)
0001BC6E D0FC 0020                  		adda.w	#$20,a0
0001BC72 D2FC 0048                  		adda.w	#$48,a1
0001BC76 3290                       		move.w	(a0),(a1)
0001BC78 3368 0002 0008             		move.w	2(a0),8(a1)
0001BC7E 3368 0004 0010             		move.w	4(a0),$10(a1)
0001BC84 3368 0006 0018             		move.w	6(a0),$18(a1)
0001BC8A 3368 0008 0020             		move.w	8(a0),$20(a1)
0001BC90 3368 000A 0028             		move.w	$A(a0),$28(a1)
0001BC96 3368 000C 0030             		move.w	$C(a0),$30(a1)
0001BC9C 3368 000E 0038             		move.w	$E(a0),$38(a1)
0001BCA2 D0FC 0020                  		adda.w	#$20,a0
0001BCA6 D2FC 0048                  		adda.w	#$48,a1
0001BCAA 4E75                       		rts	
0001BCAC                            ; End of function SS_AniWallsRings
0001BCAC                            
0001BCAC                            ; ===========================================================================
0001BCAC 0142 6142 0142 0142 0142+  SS_WaRiVramSet:	dc.w $142, $6142, $142,	$142, $142, $142, $142,	$6142
0001BCBC 0142 6142 0142 0142 0142+  		dc.w $142, $6142, $142,	$142, $142, $142, $142,	$6142
0001BCCC 2142 0142 2142 2142 2142+  		dc.w $2142, $142, $2142, $2142,	$2142, $2142, $2142, $142
0001BCDC 2142 0142 2142 2142 2142+  		dc.w $2142, $142, $2142, $2142,	$2142, $2142, $2142, $142
0001BCEC 4142 2142 4142 4142 4142+  		dc.w $4142, $2142, $4142, $4142, $4142,	$4142, $4142, $2142
0001BCFC 4142 2142 4142 4142 4142+  		dc.w $4142, $2142, $4142, $4142, $4142,	$4142, $4142, $2142
0001BD0C 6142 4142 6142 6142 6142+  		dc.w $6142, $4142, $6142, $6142, $6142,	$6142, $6142, $4142
0001BD1C 6142 4142 6142 6142 6142+  		dc.w $6142, $4142, $6142, $6142, $6142,	$6142, $6142, $4142
0001BD2C                            ; ---------------------------------------------------------------------------
0001BD2C                            ; Subroutine to	remove items when you collect them in the special stage
0001BD2C                            ; ---------------------------------------------------------------------------
0001BD2C                            
0001BD2C                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0001BD2C                            
0001BD2C                            
0001BD2C                            SS_RemoveCollectedItem:			; XREF: Obj09_ChkItems
0001BD2C 45F9 00FF 4400             		lea	($FF4400).l,a2
0001BD32 303C 001F                  		move.w	#$1F,d0
0001BD36                            
0001BD36                            loc_1B4C4:
0001BD36 4A12                       		tst.b	(a2)
0001BD38 6700                       		beq.s	locret_1B4CE
0001BD3A 504A                       		addq.w	#8,a2
0001BD3C 51C8 FFF8                  		dbf	d0,loc_1B4C4
0001BD40                            
0001BD40                            locret_1B4CE:
0001BD40 4E75                       		rts	
0001BD42                            ; End of function SS_RemoveCollectedItem
0001BD42                            
0001BD42                            ; ---------------------------------------------------------------------------
0001BD42                            ; Subroutine to	animate	special	stage items when you touch them
0001BD42                            ; ---------------------------------------------------------------------------
0001BD42                            
0001BD42                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0001BD42                            
0001BD42                            
0001BD42                            SS_AniItems:				; XREF: SS_ShowLayout
0001BD42 41F9 00FF 4400             		lea	($FF4400).l,a0
0001BD48 3E3C 001F                  		move.w	#$1F,d7
0001BD4C                            
0001BD4C                            loc_1B4DA:
0001BD4C 7000                       		moveq	#0,d0
0001BD4E 1010                       		move.b	(a0),d0
0001BD50 6700                       		beq.s	loc_1B4E8
0001BD52 E548                       		lsl.w	#2,d0
0001BD54 227B 0000                  		movea.l	SS_AniIndex-4(pc,d0.w),a1
0001BD58 4E91                       		jsr	(a1)
0001BD5A                            
0001BD5A                            loc_1B4E8:
0001BD5A 5048                       		addq.w	#8,a0
0001BD5C                            
0001BD5C                            loc_1B4EA:
0001BD5C 51CF FFEE                  		dbf	d7,loc_1B4DA
0001BD60                            
0001BD60 4E75                       		rts	
0001BD62                            ; End of function SS_AniItems
0001BD62                            
0001BD62                            ; ===========================================================================
0001BD62 0000 0000                  SS_AniIndex:	dc.l SS_AniRingSparks
0001BD66 0000 0000                  		dc.l SS_AniBumper
0001BD6A 0000 0000                  		dc.l SS_Ani1Up
0001BD6E 0000 0000                  		dc.l SS_AniReverse
0001BD72 0000 0000                  		dc.l SS_AniEmeraldSparks
0001BD76 0000 0000                  		dc.l SS_AniGlassBlock
0001BD7A                            ; ===========================================================================
0001BD7A                            
0001BD7A                            SS_AniRingSparks:			; XREF: SS_AniIndex
0001BD7A 5328 0002                  		subq.b	#1,2(a0)
0001BD7E 6A00                       		bpl.s	locret_1B530
0001BD80 117C 0005 0002             		move.b	#5,2(a0)
0001BD86 7000                       		moveq	#0,d0
0001BD88 1028 0003                  		move.b	3(a0),d0
0001BD8C 5228 0003                  		addq.b	#1,3(a0)
0001BD90 2268 0004                  		movea.l	4(a0),a1
0001BD94 103B 0000                  		move.b	SS_AniRingData(pc,d0.w),d0
0001BD98 1280                       		move.b	d0,(a1)
0001BD9A 6600                       		bne.s	locret_1B530
0001BD9C 4290                       		clr.l	(a0)
0001BD9E 42A8 0004                  		clr.l	4(a0)
0001BDA2                            
0001BDA2                            locret_1B530:
0001BDA2 4E75                       		rts	
0001BDA4                            ; ===========================================================================
0001BDA4 4243 4445 0000             SS_AniRingData:	dc.b $42, $43, $44, $45, 0, 0
0001BDAA                            ; ===========================================================================
0001BDAA                            
0001BDAA                            SS_AniBumper:				; XREF: SS_AniIndex
0001BDAA 5328 0002                  		subq.b	#1,2(a0)
0001BDAE 6A00                       		bpl.s	locret_1B566
0001BDB0 117C 0007 0002             		move.b	#7,2(a0)
0001BDB6 7000                       		moveq	#0,d0
0001BDB8 1028 0003                  		move.b	3(a0),d0
0001BDBC 5228 0003                  		addq.b	#1,3(a0)
0001BDC0 2268 0004                  		movea.l	4(a0),a1
0001BDC4 103B 0000                  		move.b	SS_AniBumpData(pc,d0.w),d0
0001BDC8 6600                       		bne.s	loc_1B564
0001BDCA 4290                       		clr.l	(a0)
0001BDCC 42A8 0004                  		clr.l	4(a0)
0001BDD0 12BC 0025                  		move.b	#$25,(a1)
0001BDD4 4E75                       		rts	
0001BDD6                            ; ===========================================================================
0001BDD6                            
0001BDD6                            loc_1B564:
0001BDD6 1280                       		move.b	d0,(a1)
0001BDD8                            
0001BDD8                            locret_1B566:
0001BDD8 4E75                       		rts	
0001BDDA                            ; ===========================================================================
0001BDDA 3233 3233 0000             SS_AniBumpData:	dc.b $32, $33, $32, $33, 0, 0
0001BDE0                            ; ===========================================================================
0001BDE0                            
0001BDE0                            SS_Ani1Up:				; XREF: SS_AniIndex
0001BDE0 5328 0002                  		subq.b	#1,2(a0)
0001BDE4 6A00                       		bpl.s	locret_1B596
0001BDE6 117C 0005 0002             		move.b	#5,2(a0)
0001BDEC 7000                       		moveq	#0,d0
0001BDEE 1028 0003                  		move.b	3(a0),d0
0001BDF2 5228 0003                  		addq.b	#1,3(a0)
0001BDF6 2268 0004                  		movea.l	4(a0),a1
0001BDFA 103B 0000                  		move.b	SS_Ani1UpData(pc,d0.w),d0
0001BDFE 1280                       		move.b	d0,(a1)
0001BE00 6600                       		bne.s	locret_1B596
0001BE02 4290                       		clr.l	(a0)
0001BE04 42A8 0004                  		clr.l	4(a0)
0001BE08                            
0001BE08                            locret_1B596:
0001BE08 4E75                       		rts	
0001BE0A                            ; ===========================================================================
0001BE0A 4647 4849 0000             SS_Ani1UpData:	dc.b $46, $47, $48, $49, 0, 0
0001BE10                            ; ===========================================================================
0001BE10                            
0001BE10                            SS_AniReverse:				; XREF: SS_AniIndex
0001BE10 5328 0002                  		subq.b	#1,2(a0)
0001BE14 6A00                       		bpl.s	locret_1B5CC
0001BE16 117C 0007 0002             		move.b	#7,2(a0)
0001BE1C 7000                       		moveq	#0,d0
0001BE1E 1028 0003                  		move.b	3(a0),d0
0001BE22 5228 0003                  		addq.b	#1,3(a0)
0001BE26 2268 0004                  		movea.l	4(a0),a1
0001BE2A 103B 0000                  		move.b	SS_AniRevData(pc,d0.w),d0
0001BE2E 6600                       		bne.s	loc_1B5CA
0001BE30 4290                       		clr.l	(a0)
0001BE32 42A8 0004                  		clr.l	4(a0)
0001BE36 12BC 002B                  		move.b	#$2B,(a1)
0001BE3A 4E75                       		rts	
0001BE3C                            ; ===========================================================================
0001BE3C                            
0001BE3C                            loc_1B5CA:
0001BE3C 1280                       		move.b	d0,(a1)
0001BE3E                            
0001BE3E                            locret_1B5CC:
0001BE3E 4E75                       		rts	
0001BE40                            ; ===========================================================================
0001BE40 2B31 2B31 0000             SS_AniRevData:	dc.b $2B, $31, $2B, $31, 0, 0
0001BE46                            ; ===========================================================================
0001BE46                            
0001BE46                            SS_AniEmeraldSparks:			; XREF: SS_AniIndex
0001BE46 5328 0002                  		subq.b	#1,2(a0)
0001BE4A 6A00                       		bpl.s	locret_1B60C
0001BE4C 117C 0005 0002             		move.b	#5,2(a0)
0001BE52 7000                       		moveq	#0,d0
0001BE54 1028 0003                  		move.b	3(a0),d0
0001BE58 5228 0003                  		addq.b	#1,3(a0)
0001BE5C 2268 0004                  		movea.l	4(a0),a1
0001BE60 103B 0000                  		move.b	SS_AniEmerData(pc,d0.w),d0
0001BE64 1280                       		move.b	d0,(a1)
0001BE66 6600                       		bne.s	locret_1B60C
0001BE68 4290                       		clr.l	(a0)
0001BE6A 42A8 0004                  		clr.l	4(a0)
0001BE6E 11FC 0004 D024             		move.b	#4,($FFFFD024).w
0001BE74 303C 00A8                  		move.w	#$A8,d0
0001BE78 4EB9 0000 15C0             		jsr	(PlaySound_Special).l ;	play special stage GOAL	sound
0001BE7E                            
0001BE7E                            locret_1B60C:
0001BE7E 4E75                       		rts	
0001BE80                            ; ===========================================================================
0001BE80 4647 4849 0000             SS_AniEmerData:	dc.b $46, $47, $48, $49, 0, 0
0001BE86                            ; ===========================================================================
0001BE86                            
0001BE86                            SS_AniGlassBlock:			; XREF: SS_AniIndex
0001BE86 5328 0002                  		subq.b	#1,2(a0)
0001BE8A 6A00                       		bpl.s	locret_1B640
0001BE8C 117C 0001 0002             		move.b	#1,2(a0)
0001BE92 7000                       		moveq	#0,d0
0001BE94 1028 0003                  		move.b	3(a0),d0
0001BE98 5228 0003                  		addq.b	#1,3(a0)
0001BE9C 2268 0004                  		movea.l	4(a0),a1
0001BEA0 103B 0000                  		move.b	SS_AniGlassData(pc,d0.w),d0
0001BEA4 1280                       		move.b	d0,(a1)
0001BEA6 6600                       		bne.s	locret_1B640
0001BEA8 12A8 0004                  		move.b	4(a0),(a1)
0001BEAC 4290                       		clr.l	(a0)
0001BEAE 42A8 0004                  		clr.l	4(a0)
0001BEB2                            
0001BEB2                            locret_1B640:
0001BEB2 4E75                       		rts	
0001BEB4                            ; ===========================================================================
0001BEB4 4B4C 4D4E 4B4C 4D4E 0000   SS_AniGlassData:dc.b $4B, $4C, $4D, $4E, $4B, $4C, $4D,	$4E, 0,	0
0001BEBE                            ; ---------------------------------------------------------------------------
0001BEBE                            ; Special stage	layout pointers
0001BEBE                            ; ---------------------------------------------------------------------------
0001BEBE                            SS_LayoutIndex:
0001BEBE                            	include "_inc\Special stage layout pointers.asm"
0001BEBE                            ; ---------------------------------------------------------------------------
0001BEBE                            ; Special stage	layout pointers
0001BEBE                            ; ---------------------------------------------------------------------------
0001BEBE 0000 0000                  	dc.l SS_1
0001BEC2 0000 0000                  	dc.l SS_2
0001BEC6 0000 0000                  	dc.l SS_3
0001BECA 0000 0000                  	dc.l SS_4
0001BECE 0000 0000                  	dc.l SS_5
0001BED2 0000 0000                  	dc.l SS_6
0001BED6                            	even
0001BED6                            	even
0001BED6                            
0001BED6                            ; ---------------------------------------------------------------------------
0001BED6                            ; Special stage	start locations
0001BED6                            ; ---------------------------------------------------------------------------
0001BED6                            SS_StartLoc:	incbin	misc\sloc_ss.bin
0001BEEE                            		even
0001BEEE                            
0001BEEE                            ; ---------------------------------------------------------------------------
0001BEEE                            ; Subroutine to	load special stage layout
0001BEEE                            ; ---------------------------------------------------------------------------
0001BEEE                            
0001BEEE                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0001BEEE                            
0001BEEE                            
0001BEEE                            SS_Load:				; XREF: SpecialStage
0001BEEE 7000                       		moveq	#0,d0
0001BEF0 1038 FE16                  		move.b	($FFFFFE16).w,d0 ; load	number of last special stage entered
0001BEF4 5238 FE16                  		addq.b	#1,($FFFFFE16).w
0001BEF8 0C38 0006 FE16             		cmpi.b	#6,($FFFFFE16).w
0001BEFE 6500                       		bcs.s	SS_ChkEmldNum
0001BF00 11FC 0000 FE16             		move.b	#0,($FFFFFE16).w ; reset if higher than	6
0001BF06                            
0001BF06                            SS_ChkEmldNum:
0001BF06 0C38 0006 FE57             		cmpi.b	#6,($FFFFFE57).w ; do you have all emeralds?
0001BF0C 6700                       		beq.s	SS_LoadData	; if yes, branch
0001BF0E 7200                       		moveq	#0,d1
0001BF10 1238 FE57                  		move.b	($FFFFFE57).w,d1
0001BF14 5301                       		subq.b	#1,d1
0001BF16 6500                       		bcs.s	SS_LoadData
0001BF18 47F8 FE58                  		lea	($FFFFFE58).w,a3 ; check which emeralds	you have
0001BF1C                            
0001BF1C                            SS_ChkEmldLoop:	
0001BF1C B033 1000                  		cmp.b	(a3,d1.w),d0
0001BF20 6600                       		bne.s	SS_ChkEmldRepeat
0001BF22 60CA                       		bra.s	SS_Load
0001BF24                            ; ===========================================================================
0001BF24                            
0001BF24                            SS_ChkEmldRepeat:
0001BF24 51C9 FFF6                  		dbf	d1,SS_ChkEmldLoop
0001BF28                            
0001BF28                            SS_LoadData:
0001BF28 E548                       		lsl.w	#2,d0
0001BF2A 43FB 00AA                  		lea	SS_StartLoc(pc,d0.w),a1
0001BF2E 31D9 D008                  		move.w	(a1)+,($FFFFD008).w
0001BF32 31D9 D00C                  		move.w	(a1)+,($FFFFD00C).w
0001BF36 207B 0086                  		movea.l	SS_LayoutIndex(pc,d0.w),a0
0001BF3A 43F9 00FF 4000             		lea	($FF4000).l,a1
0001BF40 303C 0000                  		move.w	#0,d0
0001BF44 4EB9 0000 1942             		jsr	(EniDec).l
0001BF4A 43F9 00FF 0000             		lea	($FF0000).l,a1
0001BF50 303C 0FFF                  		move.w	#$FFF,d0
0001BF54                            
0001BF54                            SS_ClrRAM3:
0001BF54 4299                       		clr.l	(a1)+
0001BF56 51C8 FFFC                  		dbf	d0,SS_ClrRAM3
0001BF5A                            
0001BF5A 43F9 00FF 1020             		lea	($FF1020).l,a1
0001BF60 41F9 00FF 4000             		lea	($FF4000).l,a0
0001BF66 723F                       		moveq	#$3F,d1
0001BF68                            
0001BF68                            loc_1B6F6:
0001BF68 743F                       		moveq	#$3F,d2
0001BF6A                            
0001BF6A                            loc_1B6F8:
0001BF6A 12D8                       		move.b	(a0)+,(a1)+
0001BF6C 51CA FFFC                  		dbf	d2,loc_1B6F8
0001BF70                            
0001BF70 43E9 0040                  		lea	$40(a1),a1
0001BF74 51C9 FFF2                  		dbf	d1,loc_1B6F6
0001BF78                            
0001BF78 43F9 00FF 4008             		lea	($FF4008).l,a1
0001BF7E 41F9 0000 0000             		lea	(SS_MapIndex).l,a0
0001BF84 724D                       		moveq	#$4D,d1
0001BF86                            
0001BF86                            loc_1B714:
0001BF86 22D8                       		move.l	(a0)+,(a1)+
0001BF88 32FC 0000                  		move.w	#0,(a1)+
0001BF8C 1368 FFFC FFFF             		move.b	-4(a0),-1(a1)
0001BF92 32D8                       		move.w	(a0)+,(a1)+
0001BF94 51C9 FFF0                  		dbf	d1,loc_1B714
0001BF98                            
0001BF98 43F9 00FF 4400             		lea	($FF4400).l,a1
0001BF9E 323C 003F                  		move.w	#$3F,d1
0001BFA2                            
0001BFA2                            loc_1B730:
0001BFA2                            
0001BFA2 4299                       		clr.l	(a1)+
0001BFA4 51C9 FFFC                  		dbf	d1,loc_1B730
0001BFA8                            
0001BFA8 4E75                       		rts	
0001BFAA                            ; End of function SS_Load
0001BFAA                            
0001BFAA                            ; ===========================================================================
0001BFAA                            ; ---------------------------------------------------------------------------
0001BFAA                            ; Special stage	mappings and VRAM pointers
0001BFAA                            ; ---------------------------------------------------------------------------
0001BFAA                            SS_MapIndex:
0001BFAA                            	include "_inc\Special stage mappings and VRAM pointers.asm"
0001BFAA                            ; ---------------------------------------------------------------------------
0001BFAA                            ; Special stage	mappings and VRAM pointers
0001BFAA                            ; ---------------------------------------------------------------------------
0001BFAA 0000 0000                  	dc.l Map_SSWalls	; address of mappings
0001BFAE 0142                       	dc.w $142		; VRAM setting
0001BFB0 0000 0000                  	dc.l Map_SSWalls
0001BFB4 0142                       	dc.w $142
0001BFB6 0000 0000                  	dc.l Map_SSWalls
0001BFBA 0142                       	dc.w $142
0001BFBC 0000 0000                  	dc.l Map_SSWalls
0001BFC0 0142                       	dc.w $142
0001BFC2 0000 0000                  	dc.l Map_SSWalls
0001BFC6 0142                       	dc.w $142
0001BFC8 0000 0000                  	dc.l Map_SSWalls
0001BFCC 0142                       	dc.w $142
0001BFCE 0000 0000                  	dc.l Map_SSWalls
0001BFD2 0142                       	dc.w $142
0001BFD4 0000 0000                  	dc.l Map_SSWalls
0001BFD8 0142                       	dc.w $142
0001BFDA 0000 0000                  	dc.l Map_SSWalls
0001BFDE 0142                       	dc.w $142
0001BFE0 0000 0000                  	dc.l Map_SSWalls
0001BFE4 2142                       	dc.w $2142
0001BFE6 0000 0000                  	dc.l Map_SSWalls
0001BFEA 2142                       	dc.w $2142
0001BFEC 0000 0000                  	dc.l Map_SSWalls
0001BFF0 2142                       	dc.w $2142
0001BFF2 0000 0000                  	dc.l Map_SSWalls
0001BFF6 2142                       	dc.w $2142
0001BFF8 0000 0000                  	dc.l Map_SSWalls
0001BFFC 2142                       	dc.w $2142
0001BFFE 0000 0000                  	dc.l Map_SSWalls
0001C002 2142                       	dc.w $2142
0001C004 0000 0000                  	dc.l Map_SSWalls
0001C008 2142                       	dc.w $2142
0001C00A 0000 0000                  	dc.l Map_SSWalls
0001C00E 2142                       	dc.w $2142
0001C010 0000 0000                  	dc.l Map_SSWalls
0001C014 2142                       	dc.w $2142
0001C016 0000 0000                  	dc.l Map_SSWalls
0001C01A 4142                       	dc.w $4142
0001C01C 0000 0000                  	dc.l Map_SSWalls
0001C020 4142                       	dc.w $4142
0001C022 0000 0000                  	dc.l Map_SSWalls
0001C026 4142                       	dc.w $4142
0001C028 0000 0000                  	dc.l Map_SSWalls
0001C02C 4142                       	dc.w $4142
0001C02E 0000 0000                  	dc.l Map_SSWalls
0001C032 4142                       	dc.w $4142
0001C034 0000 0000                  	dc.l Map_SSWalls
0001C038 4142                       	dc.w $4142
0001C03A 0000 0000                  	dc.l Map_SSWalls
0001C03E 4142                       	dc.w $4142
0001C040 0000 0000                  	dc.l Map_SSWalls
0001C044 4142                       	dc.w $4142
0001C046 0000 0000                  	dc.l Map_SSWalls
0001C04A 4142                       	dc.w $4142
0001C04C 0000 0000                  	dc.l Map_SSWalls
0001C050 6142                       	dc.w $6142
0001C052 0000 0000                  	dc.l Map_SSWalls
0001C056 6142                       	dc.w $6142
0001C058 0000 0000                  	dc.l Map_SSWalls
0001C05C 6142                       	dc.w $6142
0001C05E 0000 0000                  	dc.l Map_SSWalls
0001C062 6142                       	dc.w $6142
0001C064 0000 0000                  	dc.l Map_SSWalls
0001C068 6142                       	dc.w $6142
0001C06A 0000 0000                  	dc.l Map_SSWalls
0001C06E 6142                       	dc.w $6142
0001C070 0000 0000                  	dc.l Map_SSWalls
0001C074 6142                       	dc.w $6142
0001C076 0000 0000                  	dc.l Map_SSWalls
0001C07A 6142                       	dc.w $6142
0001C07C 0000 0000                  	dc.l Map_SSWalls
0001C080 6142                       	dc.w $6142
0001C082 0000 F256                  	dc.l Map_obj47
0001C086 023B                       	dc.w $23B
0001C088 0000 0000                  	dc.l Map_SS_R
0001C08C 0570                       	dc.w $570
0001C08E 0000 0000                  	dc.l Map_SS_R
0001C092 0251                       	dc.w $251
0001C094 0000 0000                  	dc.l Map_SS_R
0001C098 0370                       	dc.w $370
0001C09A 0000 0000                  	dc.l Map_SS_Up
0001C09E 0263                       	dc.w $263
0001C0A0 0000 0000                  	dc.l Map_SS_Down
0001C0A4 0263                       	dc.w $263
0001C0A6 0000 0000                  	dc.l Map_SS_R
0001C0AA 22F0                       	dc.w $22F0
0001C0AC 0000 0000                  	dc.l Map_SS_Glass
0001C0B0 0470                       	dc.w $470
0001C0B2 0000 0000                  	dc.l Map_SS_Glass
0001C0B6 05F0                       	dc.w $5F0
0001C0B8 0000 0000                  	dc.l Map_SS_Glass
0001C0BC 65F0                       	dc.w $65F0
0001C0BE 0000 0000                  	dc.l Map_SS_Glass
0001C0C2 25F0                       	dc.w $25F0
0001C0C4 0000 0000                  	dc.l Map_SS_Glass
0001C0C8 45F0                       	dc.w $45F0
0001C0CA 0000 0000                  	dc.l Map_SS_R
0001C0CE 02F0                       	dc.w $2F0
0001C0D0 0100 F256                  	dc.l Map_obj47+$1000000	; add frame no.	* $1000000
0001C0D4 023B                       	dc.w $23B
0001C0D6 0200 F256                  	dc.l Map_obj47+$2000000
0001C0DA 023B                       	dc.w $23B
0001C0DC 0000 0000                  	dc.l Map_SS_R
0001C0E0 0797                       	dc.w $797
0001C0E2 0000 0000                  	dc.l Map_SS_R
0001C0E6 07A0                       	dc.w $7A0
0001C0E8 0000 0000                  	dc.l Map_SS_R
0001C0EC 07A9                       	dc.w $7A9
0001C0EE 0000 0000                  	dc.l Map_SS_R
0001C0F2 0797                       	dc.w $797
0001C0F4 0000 0000                  	dc.l Map_SS_R
0001C0F8 07A0                       	dc.w $7A0
0001C0FA 0000 0000                  	dc.l Map_SS_R
0001C0FE 07A9                       	dc.w $7A9
0001C100 0000 A5C0                  	dc.l Map_obj25
0001C104 27B2                       	dc.w $27B2
0001C106 0000 0000                  	dc.l Map_SS_Chaos3
0001C10A 0770                       	dc.w $770
0001C10C 0000 0000                  	dc.l Map_SS_Chaos3
0001C110 2770                       	dc.w $2770
0001C112 0000 0000                  	dc.l Map_SS_Chaos3
0001C116 4770                       	dc.w $4770
0001C118 0000 0000                  	dc.l Map_SS_Chaos3
0001C11C 6770                       	dc.w $6770
0001C11E 0000 0000                  	dc.l Map_SS_Chaos1
0001C122 0770                       	dc.w $770
0001C124 0000 0000                  	dc.l Map_SS_Chaos2
0001C128 0770                       	dc.w $770
0001C12A 0000 0000                  	dc.l Map_SS_R
0001C12E 04F0                       	dc.w $4F0
0001C130 0400 A5C0                  	dc.l Map_obj25+$4000000
0001C134 27B2                       	dc.w $27B2
0001C136 0500 A5C0                  	dc.l Map_obj25+$5000000
0001C13A 27B2                       	dc.w $27B2
0001C13C 0600 A5C0                  	dc.l Map_obj25+$6000000
0001C140 27B2                       	dc.w $27B2
0001C142 0700 A5C0                  	dc.l Map_obj25+$7000000
0001C146 27B2                       	dc.w $27B2
0001C148 0000 0000                  	dc.l Map_SS_Glass
0001C14C 23F0                       	dc.w $23F0
0001C14E 0000 0000                  	dc.l Map_SS_Glass+$1000000
0001C152 23F0                       	dc.w $23F0
0001C154 0000 0000                  	dc.l Map_SS_Glass+$2000000
0001C158 23F0                       	dc.w $23F0
0001C15A 0000 0000                  	dc.l Map_SS_Glass+$3000000
0001C15E 23F0                       	dc.w $23F0
0001C160 0000 0000                  	dc.l Map_SS_R+$2000000
0001C164 04F0                       	dc.w $4F0
0001C166 0000 0000                  	dc.l Map_SS_Glass
0001C16A 05F0                       	dc.w $5F0
0001C16C 0000 0000                  	dc.l Map_SS_Glass
0001C170 65F0                       	dc.w $65F0
0001C172 0000 0000                  	dc.l Map_SS_Glass
0001C176 25F0                       	dc.w $25F0
0001C178 0000 0000                  	dc.l Map_SS_Glass
0001C17C 45F0                       	dc.w $45F0
0001C17C 45F0                       	dc.w $45F0
0001C17E                            
0001C17E                            ; ---------------------------------------------------------------------------
0001C17E                            ; Sprite mappings - special stage "R" block
0001C17E                            ; ---------------------------------------------------------------------------
0001C17E                            Map_SS_R:
0001C17E                            	include "_maps\SSRblock.asm"
0001C17E                            ; ---------------------------------------------------------------------------
0001C17E                            ; Sprite mappings - special stage "R" block
0001C17E                            ; ---------------------------------------------------------------------------
0001C17E 0000 0000                  		dc.w byte_1B912-Map_SS_R, byte_1B918-Map_SS_R
0001C182 0000                       		dc.w byte_1B91E-Map_SS_R
0001C184 01                         byte_1B912:	dc.b 1
0001C185 F40A 0000 F4               		dc.b $F4, $A, 0, 0, $F4
0001C18A 01                         byte_1B918:	dc.b 1
0001C18B F40A 0009 F4               		dc.b $F4, $A, 0, 9, $F4
0001C190 00                         byte_1B91E:	dc.b 0
0001C192 00                         		even
0001C192 00                         		even
0001C192                            
0001C192                            ; ---------------------------------------------------------------------------
0001C192                            ; Sprite mappings - special stage breakable glass blocks and red-white blocks
0001C192                            ; ---------------------------------------------------------------------------
0001C192                            Map_SS_Glass:
0001C192                            	include "_maps\SSglassblock.asm"
0001C192                            ; ---------------------------------------------------------------------------
0001C192                            ; Sprite mappings - special stage breakable glass blocks and red-white blocks
0001C192                            ; ---------------------------------------------------------------------------
0001C192 0000 0000                  		dc.w byte_1B928-Map_SS_Glass, byte_1B92E-Map_SS_Glass
0001C196 0000 0000                  		dc.w byte_1B934-Map_SS_Glass, byte_1B93A-Map_SS_Glass
0001C19A 01                         byte_1B928:	dc.b 1
0001C19B F40A 0000 F4               		dc.b $F4, $A, 0, 0, $F4
0001C1A0 01                         byte_1B92E:	dc.b 1
0001C1A1 F40A 0800 F4               		dc.b $F4, $A, 8, 0, $F4
0001C1A6 01                         byte_1B934:	dc.b 1
0001C1A7 F40A 1800 F4               		dc.b $F4, $A, $18, 0, $F4
0001C1AC 01                         byte_1B93A:	dc.b 1
0001C1AD F40A 1000 F4               		dc.b $F4, $A, $10, 0, $F4
0001C1B2                            		even
0001C1B2                            		even
0001C1B2                            
0001C1B2                            ; ---------------------------------------------------------------------------
0001C1B2                            ; Sprite mappings - special stage "UP" block
0001C1B2                            ; ---------------------------------------------------------------------------
0001C1B2                            Map_SS_Up:
0001C1B2                            	include "_maps\SSUPblock.asm"
0001C1B2                            ; ---------------------------------------------------------------------------
0001C1B2                            ; Sprite mappings - special stage "UP" block
0001C1B2                            ; ---------------------------------------------------------------------------
0001C1B2 0000                       		dc.w byte_1B944-Map_SS_Up
0001C1B4 0000                       		dc.w byte_1B94A-Map_SS_Up
0001C1B6 01                         byte_1B944:	dc.b 1
0001C1B7 F40A 0000 F4               		dc.b $F4, $A, 0, 0, $F4
0001C1BC 01                         byte_1B94A:	dc.b 1
0001C1BD F40A 0012 F4               		dc.b $F4, $A, 0, $12, $F4
0001C1C2                            		even
0001C1C2                            		even
0001C1C2                            
0001C1C2                            ; ---------------------------------------------------------------------------
0001C1C2                            ; Sprite mappings - special stage "DOWN" block
0001C1C2                            ; ---------------------------------------------------------------------------
0001C1C2                            Map_SS_Down:
0001C1C2                            	include "_maps\SSDOWNblock.asm"
0001C1C2                            ; ---------------------------------------------------------------------------
0001C1C2                            ; Sprite mappings - special stage "DOWN" block
0001C1C2                            ; ---------------------------------------------------------------------------
0001C1C2 0000                       		dc.w byte_1B954-Map_SS_Down
0001C1C4 0000                       		dc.w byte_1B95A-Map_SS_Down
0001C1C6 01                         byte_1B954:	dc.b 1
0001C1C7 F40A 0009 F4               		dc.b $F4, $A, 0, 9, $F4
0001C1CC 01                         byte_1B95A:	dc.b 1
0001C1CD F40A 0012 F4               		dc.b $F4, $A, 0, $12, $F4
0001C1D2                            		even
0001C1D2                            		even
0001C1D2                            
0001C1D2                            ; ---------------------------------------------------------------------------
0001C1D2                            ; Sprite mappings - special stage chaos	emeralds
0001C1D2                            ; ---------------------------------------------------------------------------
0001C1D2 0000                       Map_SS_Chaos1:	dc.w byte_1B96C-Map_SS_Chaos1
0001C1D4 0000                       		dc.w byte_1B97E-Map_SS_Chaos1
0001C1D6 0000                       Map_SS_Chaos2:	dc.w byte_1B972-Map_SS_Chaos2
0001C1D8 0000                       		dc.w byte_1B97E-Map_SS_Chaos2
0001C1DA 0000                       Map_SS_Chaos3:	dc.w byte_1B978-Map_SS_Chaos3
0001C1DC 0000                       		dc.w byte_1B97E-Map_SS_Chaos3
0001C1DE 01                         byte_1B96C:	dc.b 1
0001C1DF F805 0000 F8               		dc.b $F8, 5, 0,	0, $F8
0001C1E4 01                         byte_1B972:	dc.b 1
0001C1E5 F805 0004 F8               		dc.b $F8, 5, 0,	4, $F8
0001C1EA 01                         byte_1B978:	dc.b 1
0001C1EB F805 0008 F8               		dc.b $F8, 5, 0,	8, $F8
0001C1F0 01                         byte_1B97E:	dc.b 1
0001C1F1 F805 000C F8               		dc.b $F8, 5, 0,	$C, $F8
0001C1F6                            		even
0001C1F6                            ; ===========================================================================
0001C1F6                            ; ---------------------------------------------------------------------------
0001C1F6                            ; Object 09 - Sonic (special stage)
0001C1F6                            ; ---------------------------------------------------------------------------
0001C1F6                            
0001C1F6                            Obj09:					; XREF: Obj_Index
0001C1F6 4A78 FE08                  		tst.w	($FFFFFE08).w	; is debug mode	being used?
0001C1FA 6700                       		beq.s	Obj09_Normal	; if not, branch
0001C1FC 6100 0000                  		bsr.w	SS_FixCamera
0001C200 6000 0000                  		bra.w	DebugMode
0001C204                            ; ===========================================================================
0001C204                            
0001C204                            Obj09_Normal:
0001C204 7000                       		moveq	#0,d0
0001C206 1028 0024                  		move.b	$24(a0),d0
0001C20A 323B 0000                  		move.w	Obj09_Index(pc,d0.w),d1
0001C20E 4EFB 1000                  		jmp	Obj09_Index(pc,d1.w)
0001C212                            ; ===========================================================================
0001C212 0000                       Obj09_Index:	dc.w Obj09_Main-Obj09_Index
0001C214 0000                       		dc.w Obj09_ChkDebug-Obj09_Index
0001C216 0000                       		dc.w Obj09_ExitStage-Obj09_Index
0001C218 0000                       		dc.w Obj09_Exit2-Obj09_Index
0001C21A                            ; ===========================================================================
0001C21A                            
0001C21A                            Obj09_Main:				; XREF: Obj09_Index
0001C21A 5428 0024                  		addq.b	#2,$24(a0)
0001C21E 117C 000E 0016             		move.b	#$E,$16(a0)
0001C224 117C 0007 0017             		move.b	#7,$17(a0)
0001C22A 217C 0000 0000 0004        		move.l	#Map_Sonic,4(a0)
0001C232 317C 0780 0002             		move.w	#$780,2(a0)
0001C238 117C 0004 0001             		move.b	#4,1(a0)
0001C23E 117C 0000 0018             		move.b	#0,$18(a0)
0001C244 117C 0002 001C             		move.b	#2,$1C(a0)
0001C24A 08E8 0002 0022             		bset	#2,$22(a0)
0001C250 08E8 0001 0022             		bset	#1,$22(a0)
0001C256                            
0001C256                            Obj09_ChkDebug:				; XREF: Obj09_Index
0001C256 4A78 FFFA                  		tst.w	($FFFFFFFA).w	; is debug mode	cheat enabled?
0001C25A 6700                       		beq.s	Obj09_NoDebug	; if not, branch
0001C25C 0838 0004 F605             		btst	#4,($FFFFF605).w ; is button B pressed?
0001C262 6700                       		beq.s	Obj09_NoDebug	; if not, branch
0001C264 31FC 0001 FE08             		move.w	#1,($FFFFFE08).w ; change Sonic	into a ring
0001C26A                            
0001C26A                            Obj09_NoDebug:
0001C26A 117C 0000 0030             		move.b	#0,$30(a0)
0001C270 7000                       		moveq	#0,d0
0001C272 1028 0022                  		move.b	$22(a0),d0
0001C276 0240 0002                  		andi.w	#2,d0
0001C27A 323B 0000                  		move.w	Obj09_Modes(pc,d0.w),d1
0001C27E 4EBB 1000                  		jsr	Obj09_Modes(pc,d1.w)
0001C282 4EBA 81D6                  		jsr	LoadSonicDynPLC
0001C286 4EF9 0000 DD62             		jmp	DisplaySprite
0001C28C                            ; ===========================================================================
0001C28C 0000                       Obj09_Modes:	dc.w Obj09_OnWall-Obj09_Modes
0001C28E 0000                       		dc.w Obj09_InAir-Obj09_Modes
0001C290                            ; ===========================================================================
0001C290                            
0001C290                            Obj09_OnWall:				; XREF: Obj09_Modes
0001C290 6100 0000                  		bsr.w	Obj09_Jump
0001C294 6100 0000                  		bsr.w	Obj09_Move
0001C298 6100 0000                  		bsr.w	Obj09_Fall
0001C29C 6000                       		bra.s	Obj09_Display
0001C29E                            ; ===========================================================================
0001C29E                            
0001C29E                            Obj09_InAir:				; XREF: Obj09_Modes
0001C29E 6100 0000                  		bsr.w	nullsub_2
0001C2A2 6100 0000                  		bsr.w	Obj09_Move
0001C2A6 6100 0000                  		bsr.w	Obj09_Fall
0001C2AA                            
0001C2AA                            Obj09_Display:				; XREF: Obj09_OnWall
0001C2AA 6100 0000                  		bsr.w	Obj09_ChkItems
0001C2AE 6100 0000                  		bsr.w	Obj09_ChkItems2
0001C2B2 4EB9 0000 DD3C             		jsr	SpeedToPos
0001C2B8 6100 0000                  		bsr.w	SS_FixCamera
0001C2BC 3038 F780                  		move.w	($FFFFF780).w,d0
0001C2C0 D078 F782                  		add.w	($FFFFF782).w,d0
0001C2C4 31C0 F780                  		move.w	d0,($FFFFF780).w
0001C2C8 4EB9 0001 41C4             		jsr	Sonic_Animate
0001C2CE 4E75                       		rts	
0001C2D0                            
0001C2D0                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0001C2D0                            
0001C2D0                            
0001C2D0                            Obj09_Move:				; XREF: Obj09_OnWall; Obj09_InAir
0001C2D0 0838 0002 F602             		btst	#2,($FFFFF602).w ; is left being pressed?
0001C2D6 6700                       		beq.s	Obj09_ChkRight	; if not, branch
0001C2D8 6100 0000                  		bsr.w	Obj09_MoveLeft
0001C2DC                            
0001C2DC                            Obj09_ChkRight:
0001C2DC 0838 0003 F602             		btst	#3,($FFFFF602).w ; is right being pressed?
0001C2E2 6700                       		beq.s	loc_1BA78	; if not, branch
0001C2E4 6100 0000                  		bsr.w	Obj09_MoveRight
0001C2E8                            
0001C2E8                            loc_1BA78:
0001C2E8 1038 F602                  		move.b	($FFFFF602).w,d0
0001C2EC 0200 000C                  		andi.b	#$C,d0
0001C2F0 6600                       		bne.s	loc_1BAA8
0001C2F2 3028 0014                  		move.w	$14(a0),d0
0001C2F6 6700                       		beq.s	loc_1BAA8
0001C2F8 6B00                       		bmi.s	loc_1BA9A
0001C2FA 0440 000C                  		subi.w	#$C,d0
0001C2FE 6400                       		bcc.s	loc_1BA94
0001C300 303C 0000                  		move.w	#0,d0
0001C304                            
0001C304                            loc_1BA94:
0001C304 3140 0014                  		move.w	d0,$14(a0)
0001C308 6000                       		bra.s	loc_1BAA8
0001C30A                            ; ===========================================================================
0001C30A                            
0001C30A                            loc_1BA9A:
0001C30A 0640 000C                  		addi.w	#$C,d0
0001C30E 6400                       		bcc.s	loc_1BAA4
0001C310 303C 0000                  		move.w	#0,d0
0001C314                            
0001C314                            loc_1BAA4:
0001C314 3140 0014                  		move.w	d0,$14(a0)
0001C318                            
0001C318                            loc_1BAA8:
0001C318 1038 F780                  		move.b	($FFFFF780).w,d0
0001C31C 0600 0020                  		addi.b	#$20,d0
0001C320 0200 00C0                  		andi.b	#$C0,d0
0001C324 4400                       		neg.b	d0
0001C326 4EB9 0000 2C64             		jsr	(CalcSine).l
0001C32C C3E8 0014                  		muls.w	$14(a0),d1
0001C330 D3A8 0008                  		add.l	d1,8(a0)
0001C334 C1E8 0014                  		muls.w	$14(a0),d0
0001C338 D1A8 000C                  		add.l	d0,$C(a0)
0001C33C 48E7 C000                  		movem.l	d0-d1,-(sp)
0001C340 2428 000C                  		move.l	$C(a0),d2
0001C344 2628 0008                  		move.l	8(a0),d3
0001C348 6100 0000                  		bsr.w	sub_1BCE8
0001C34C 6700                       		beq.s	loc_1BAF2
0001C34E 4CDF 0003                  		movem.l	(sp)+,d0-d1
0001C352 93A8 0008                  		sub.l	d1,8(a0)
0001C356 91A8 000C                  		sub.l	d0,$C(a0)
0001C35A 317C 0000 0014             		move.w	#0,$14(a0)
0001C360 4E75                       		rts	
0001C362                            ; ===========================================================================
0001C362                            
0001C362                            loc_1BAF2:
0001C362 4CDF 0003                  		movem.l	(sp)+,d0-d1
0001C366 4E75                       		rts	
0001C368                            ; End of function Obj09_Move
0001C368                            
0001C368                            
0001C368                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0001C368                            
0001C368                            
0001C368                            Obj09_MoveLeft:				; XREF: Obj09_Move
0001C368 08E8 0000 0022             		bset	#0,$22(a0)
0001C36E 3028 0014                  		move.w	$14(a0),d0
0001C372 6700                       		beq.s	loc_1BB06
0001C374 6A00                       		bpl.s	loc_1BB1A
0001C376                            
0001C376                            loc_1BB06:
0001C376 0440 000C                  		subi.w	#$C,d0
0001C37A 0C40 F800                  		cmpi.w	#-$800,d0
0001C37E 6E00                       		bgt.s	loc_1BB14
0001C380 303C F800                  		move.w	#-$800,d0
0001C384                            
0001C384                            loc_1BB14:
0001C384 3140 0014                  		move.w	d0,$14(a0)
0001C388 4E75                       		rts	
0001C38A                            ; ===========================================================================
0001C38A                            
0001C38A                            loc_1BB1A:
0001C38A 0440 0040                  		subi.w	#$40,d0
0001C38E 6400                       		bcc.s	loc_1BB22
0001C390 4E71                       		nop	
0001C392                            
0001C392                            loc_1BB22:
0001C392 3140 0014                  		move.w	d0,$14(a0)
0001C396 4E75                       		rts	
0001C398                            ; End of function Obj09_MoveLeft
0001C398                            
0001C398                            
0001C398                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0001C398                            
0001C398                            
0001C398                            Obj09_MoveRight:			; XREF: Obj09_Move
0001C398 08A8 0000 0022             		bclr	#0,$22(a0)
0001C39E 3028 0014                  		move.w	$14(a0),d0
0001C3A2 6B00                       		bmi.s	loc_1BB48
0001C3A4 0640 000C                  		addi.w	#$C,d0
0001C3A8 0C40 0800                  		cmpi.w	#$800,d0
0001C3AC 6D00                       		blt.s	loc_1BB42
0001C3AE 303C 0800                  		move.w	#$800,d0
0001C3B2                            
0001C3B2                            loc_1BB42:
0001C3B2 3140 0014                  		move.w	d0,$14(a0)
0001C3B6 6000                       		bra.s	locret_1BB54
0001C3B8                            ; ===========================================================================
0001C3B8                            
0001C3B8                            loc_1BB48:
0001C3B8 0640 0040                  		addi.w	#$40,d0
0001C3BC 6400                       		bcc.s	loc_1BB50
0001C3BE 4E71                       		nop	
0001C3C0                            
0001C3C0                            loc_1BB50:
0001C3C0 3140 0014                  		move.w	d0,$14(a0)
0001C3C4                            
0001C3C4                            locret_1BB54:
0001C3C4 4E75                       		rts	
0001C3C6                            ; End of function Obj09_MoveRight
0001C3C6                            
0001C3C6                            
0001C3C6                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0001C3C6                            
0001C3C6                            
0001C3C6                            Obj09_Jump:				; XREF: Obj09_OnWall
0001C3C6 1038 F603                  		move.b	($FFFFF603).w,d0
0001C3CA 0200 0070                  		andi.b	#$70,d0		; is A,	B or C pressed?
0001C3CE 6700                       		beq.s	Obj09_NoJump	; if not, branch
0001C3D0 1038 F780                  		move.b	($FFFFF780).w,d0
0001C3D4 0200 00FC                  		andi.b	#$FC,d0
0001C3D8 4400                       		neg.b	d0
0001C3DA 0400 0040                  		subi.b	#$40,d0
0001C3DE 4EB9 0000 2C64             		jsr	(CalcSine).l
0001C3E4 C3FC 0680                  		muls.w	#$680,d1
0001C3E8 E081                       		asr.l	#8,d1
0001C3EA 3141 0010                  		move.w	d1,$10(a0)
0001C3EE C1FC 0680                  		muls.w	#$680,d0
0001C3F2 E080                       		asr.l	#8,d0
0001C3F4 3140 0012                  		move.w	d0,$12(a0)
0001C3F8 08E8 0001 0022             		bset	#1,$22(a0)
0001C3FE 303C 00A0                  		move.w	#$A0,d0
0001C402 4EB9 0000 15C0             		jsr	(PlaySound_Special).l ;	play jumping sound
0001C408                            
0001C408                            Obj09_NoJump:
0001C408 4E75                       		rts	
0001C40A                            ; End of function Obj09_Jump
0001C40A                            
0001C40A                            
0001C40A                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0001C40A                            
0001C40A                            
0001C40A                            nullsub_2:				; XREF: Obj09_InAir
0001C40A 4E75                       		rts	
0001C40C                            ; End of function nullsub_2
0001C40C                            
0001C40C                            ; ===========================================================================
0001C40C                            ; ---------------------------------------------------------------------------
0001C40C                            ; unused subroutine to limit Sonic's upward vertical speed
0001C40C                            ; ---------------------------------------------------------------------------
0001C40C 323C FC00                  		move.w	#-$400,d1
0001C410 B268 0012                  		cmp.w	$12(a0),d1
0001C414 6F00                       		ble.s	locret_1BBB4
0001C416 1038 F602                  		move.b	($FFFFF602).w,d0
0001C41A 0200 0070                  		andi.b	#$70,d0
0001C41E 6600                       		bne.s	locret_1BBB4
0001C420 3141 0012                  		move.w	d1,$12(a0)
0001C424                            
0001C424                            locret_1BBB4:
0001C424 4E75                       		rts	
0001C426                            ; ---------------------------------------------------------------------------
0001C426                            ; Subroutine to	fix the	camera on Sonic's position (special stage)
0001C426                            ; ---------------------------------------------------------------------------
0001C426                            
0001C426                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0001C426                            
0001C426                            
0001C426                            SS_FixCamera:				; XREF: Obj09
0001C426 3428 000C                  		move.w	$C(a0),d2
0001C42A 3628 0008                  		move.w	8(a0),d3
0001C42E 3038 F700                  		move.w	($FFFFF700).w,d0
0001C432 0443 00A0                  		subi.w	#$A0,d3
0001C436 6500                       		bcs.s	loc_1BBCE
0001C438 9043                       		sub.w	d3,d0
0001C43A 9178 F700                  		sub.w	d0,($FFFFF700).w
0001C43E                            
0001C43E                            loc_1BBCE:
0001C43E 3038 F704                  		move.w	($FFFFF704).w,d0
0001C442 0442 0070                  		subi.w	#$70,d2
0001C446 6500                       		bcs.s	locret_1BBDE
0001C448 9042                       		sub.w	d2,d0
0001C44A 9178 F704                  		sub.w	d0,($FFFFF704).w
0001C44E                            
0001C44E                            locret_1BBDE:
0001C44E 4E75                       		rts	
0001C450                            ; End of function SS_FixCamera
0001C450                            
0001C450                            ; ===========================================================================
0001C450                            
0001C450                            Obj09_ExitStage:			; XREF: Obj09_Index
0001C450 0678 0040 F782             		addi.w	#$40,($FFFFF782).w
0001C456 0C78 1800 F782             		cmpi.w	#$1800,($FFFFF782).w
0001C45C 6600                       		bne.s	loc_1BBF4
0001C45E 11FC 000C F600             		move.b	#$C,($FFFFF600).w
0001C464                            
0001C464                            loc_1BBF4:
0001C464 0C78 3000 F782             		cmpi.w	#$3000,($FFFFF782).w
0001C46A 6D00                       		blt.s	loc_1BC12
0001C46C 31FC 0000 F782             		move.w	#0,($FFFFF782).w
0001C472 31FC 4000 F780             		move.w	#$4000,($FFFFF780).w
0001C478 5428 0024                  		addq.b	#2,$24(a0)
0001C47C 317C 003C 0038             		move.w	#$3C,$38(a0)
0001C482                            
0001C482                            loc_1BC12:
0001C482 3038 F780                  		move.w	($FFFFF780).w,d0
0001C486 D078 F782                  		add.w	($FFFFF782).w,d0
0001C48A 31C0 F780                  		move.w	d0,($FFFFF780).w
0001C48E 4EB9 0001 41C4             		jsr	Sonic_Animate
0001C494 4EB9 0001 445A             		jsr	LoadSonicDynPLC
0001C49A 6100 FF8A                  		bsr.w	SS_FixCamera
0001C49E 4EF9 0000 DD62             		jmp	DisplaySprite
0001C4A4                            ; ===========================================================================
0001C4A4                            
0001C4A4                            Obj09_Exit2:				; XREF: Obj09_Index
0001C4A4 5368 0038                  		subq.w	#1,$38(a0)
0001C4A8 6600                       		bne.s	loc_1BC40
0001C4AA 11FC 000C F600             		move.b	#$C,($FFFFF600).w
0001C4B0                            
0001C4B0                            loc_1BC40:
0001C4B0 4EB9 0001 41C4             		jsr	Sonic_Animate
0001C4B6 4EB9 0001 445A             		jsr	LoadSonicDynPLC
0001C4BC 6100 FF68                  		bsr.w	SS_FixCamera
0001C4C0 4EF9 0000 DD62             		jmp	DisplaySprite
0001C4C6                            
0001C4C6                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0001C4C6                            
0001C4C6                            
0001C4C6                            Obj09_Fall:				; XREF: Obj09_OnWall; Obj09_InAir
0001C4C6 2428 000C                  		move.l	$C(a0),d2
0001C4CA 2628 0008                  		move.l	8(a0),d3
0001C4CE 1038 F780                  		move.b	($FFFFF780).w,d0
0001C4D2 0200 00FC                  		andi.b	#$FC,d0
0001C4D6 4EB9 0000 2C64             		jsr	(CalcSine).l
0001C4DC 3828 0010                  		move.w	$10(a0),d4
0001C4E0 48C4                       		ext.l	d4
0001C4E2 E184                       		asl.l	#8,d4
0001C4E4 C1FC 002A                  		muls.w	#$2A,d0
0001C4E8 D084                       		add.l	d4,d0
0001C4EA 3828 0012                  		move.w	$12(a0),d4
0001C4EE 48C4                       		ext.l	d4
0001C4F0 E184                       		asl.l	#8,d4
0001C4F2 C3FC 002A                  		muls.w	#$2A,d1
0001C4F6 D284                       		add.l	d4,d1
0001C4F8 D680                       		add.l	d0,d3
0001C4FA 6100 0000                  		bsr.w	sub_1BCE8
0001C4FE 6700                       		beq.s	loc_1BCB0
0001C500 9680                       		sub.l	d0,d3
0001C502 7000                       		moveq	#0,d0
0001C504 3140 0010                  		move.w	d0,$10(a0)
0001C508 08A8 0001 0022             		bclr	#1,$22(a0)
0001C50E D481                       		add.l	d1,d2
0001C510 6100 0000                  		bsr.w	sub_1BCE8
0001C514 6700                       		beq.s	loc_1BCC6
0001C516 9481                       		sub.l	d1,d2
0001C518 7200                       		moveq	#0,d1
0001C51A 3141 0012                  		move.w	d1,$12(a0)
0001C51E 4E75                       		rts	
0001C520                            ; ===========================================================================
0001C520                            
0001C520                            loc_1BCB0:
0001C520 D481                       		add.l	d1,d2
0001C522 6100 0000                  		bsr.w	sub_1BCE8
0001C526 6700                       		beq.s	loc_1BCD4
0001C528 9481                       		sub.l	d1,d2
0001C52A 7200                       		moveq	#0,d1
0001C52C 3141 0012                  		move.w	d1,$12(a0)
0001C530 08A8 0001 0022             		bclr	#1,$22(a0)
0001C536                            
0001C536                            loc_1BCC6:
0001C536 E080                       		asr.l	#8,d0
0001C538 E081                       		asr.l	#8,d1
0001C53A 3140 0010                  		move.w	d0,$10(a0)
0001C53E 3141 0012                  		move.w	d1,$12(a0)
0001C542 4E75                       		rts	
0001C544                            ; ===========================================================================
0001C544                            
0001C544                            loc_1BCD4:
0001C544 E080                       		asr.l	#8,d0
0001C546 E081                       		asr.l	#8,d1
0001C548 3140 0010                  		move.w	d0,$10(a0)
0001C54C 3141 0012                  		move.w	d1,$12(a0)
0001C550 08E8 0001 0022             		bset	#1,$22(a0)
0001C556 4E75                       		rts	
0001C558                            ; End of function Obj09_Fall
0001C558                            
0001C558                            
0001C558                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0001C558                            
0001C558                            
0001C558                            sub_1BCE8:				; XREF: Obj09_Move; Obj09_Fall
0001C558 43F9 00FF 0000             		lea	($FF0000).l,a1
0001C55E 7800                       		moveq	#0,d4
0001C560 4842                       		swap	d2
0001C562 3802                       		move.w	d2,d4
0001C564 4842                       		swap	d2
0001C566 0644 0044                  		addi.w	#$44,d4
0001C56A 88FC 0018                  		divu.w	#$18,d4
0001C56E C8FC 0080                  		mulu.w	#$80,d4
0001C572 D3C4                       		adda.l	d4,a1
0001C574 7800                       		moveq	#0,d4
0001C576 4843                       		swap	d3
0001C578 3803                       		move.w	d3,d4
0001C57A 4843                       		swap	d3
0001C57C 0644 0014                  		addi.w	#$14,d4
0001C580 88FC 0018                  		divu.w	#$18,d4
0001C584 D2C4                       		adda.w	d4,a1
0001C586 7A00                       		moveq	#0,d5
0001C588 1819                       		move.b	(a1)+,d4
0001C58A 6100                       		bsr.s	sub_1BD30
0001C58C 1819                       		move.b	(a1)+,d4
0001C58E 6100                       		bsr.s	sub_1BD30
0001C590 D2FC 007E                  		adda.w	#$7E,a1
0001C594 1819                       		move.b	(a1)+,d4
0001C596 6100                       		bsr.s	sub_1BD30
0001C598 1819                       		move.b	(a1)+,d4
0001C59A 6100                       		bsr.s	sub_1BD30
0001C59C 4A05                       		tst.b	d5
0001C59E 4E75                       		rts	
0001C5A0                            ; End of function sub_1BCE8
0001C5A0                            
0001C5A0                            
0001C5A0                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0001C5A0                            
0001C5A0                            
0001C5A0                            sub_1BD30:				; XREF: sub_1BCE8
0001C5A0 6700                       		beq.s	locret_1BD44
0001C5A2 0C04 0028                  		cmpi.b	#$28,d4
0001C5A6 6700                       		beq.s	locret_1BD44
0001C5A8 0C04 003A                  		cmpi.b	#$3A,d4
0001C5AC 6500                       		bcs.s	loc_1BD46
0001C5AE 0C04 004B                  		cmpi.b	#$4B,d4
0001C5B2 6400                       		bcc.s	loc_1BD46
0001C5B4                            
0001C5B4                            locret_1BD44:
0001C5B4 4E75                       		rts	
0001C5B6                            ; ===========================================================================
0001C5B6                            
0001C5B6                            loc_1BD46:
0001C5B6 1144 0030                  		move.b	d4,$30(a0)
0001C5BA 2149 0032                  		move.l	a1,$32(a0)
0001C5BE 7AFF                       		moveq	#-1,d5
0001C5C0 4E75                       		rts	
0001C5C2                            ; End of function sub_1BD30
0001C5C2                            
0001C5C2                            
0001C5C2                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0001C5C2                            
0001C5C2                            
0001C5C2                            Obj09_ChkItems:				; XREF: Obj09_Display
0001C5C2 43F9 00FF 0000             		lea	($FF0000).l,a1
0001C5C8 7800                       		moveq	#0,d4
0001C5CA 3828 000C                  		move.w	$C(a0),d4
0001C5CE 0644 0050                  		addi.w	#$50,d4
0001C5D2 88FC 0018                  		divu.w	#$18,d4
0001C5D6 C8FC 0080                  		mulu.w	#$80,d4
0001C5DA D3C4                       		adda.l	d4,a1
0001C5DC 7800                       		moveq	#0,d4
0001C5DE 3828 0008                  		move.w	8(a0),d4
0001C5E2 0644 0020                  		addi.w	#$20,d4
0001C5E6 88FC 0018                  		divu.w	#$18,d4
0001C5EA D2C4                       		adda.w	d4,a1
0001C5EC 1811                       		move.b	(a1),d4
0001C5EE 6600                       		bne.s	Obj09_ChkCont
0001C5F0 4A28 003A                  		tst.b	$3A(a0)
0001C5F4 6600 0000                  		bne.w	Obj09_MakeGhostSolid
0001C5F8 7800                       		moveq	#0,d4
0001C5FA 4E75                       		rts	
0001C5FC                            ; ===========================================================================
0001C5FC                            
0001C5FC                            Obj09_ChkCont:
0001C5FC 0C04 003A                  		cmpi.b	#$3A,d4		; is the item a	ring?
0001C600 6600                       		bne.s	Obj09_Chk1Up
0001C602 6100 F728                  		bsr.w	SS_RemoveCollectedItem
0001C606 6600                       		bne.s	Obj09_GetCont
0001C608 14BC 0001                  		move.b	#1,(a2)
0001C60C 2549 0004                  		move.l	a1,4(a2)
0001C610                            
0001C610                            Obj09_GetCont:
0001C610 4EB9 0000 A2A8             		jsr	CollectRing
0001C616 0C78 0032 FE20             		cmpi.w	#50,($FFFFFE20).w ; check if you have 50 rings
0001C61C 6500                       		bcs.s	Obj09_NoCont
0001C61E 08F8 0000 FE1B             		bset	#0,($FFFFFE1B).w
0001C624 6600                       		bne.s	Obj09_NoCont
0001C626 5238 FE18                  		addq.b	#1,($FFFFFE18).w ; add 1 to number of continues
0001C62A 303C 00BF                  		move.w	#$BF,d0
0001C62E 4EB9 0000 15BA             		jsr	(PlaySound).l	; play extra continue sound
0001C634                            
0001C634                            Obj09_NoCont:
0001C634 7800                       		moveq	#0,d4
0001C636 4E75                       		rts	
0001C638                            ; ===========================================================================
0001C638                            
0001C638                            Obj09_Chk1Up:
0001C638 0C04 0028                  		cmpi.b	#$28,d4		; is the item an extra life?
0001C63C 6600                       		bne.s	Obj09_ChkEmer
0001C63E 6100 F6EC                  		bsr.w	SS_RemoveCollectedItem
0001C642 6600                       		bne.s	Obj09_Get1Up
0001C644 14BC 0003                  		move.b	#3,(a2)
0001C648 2549 0004                  		move.l	a1,4(a2)
0001C64C                            
0001C64C                            Obj09_Get1Up:
0001C64C 5238 FE12                  		addq.b	#1,($FFFFFE12).w ; add 1 to number of lives
0001C650 5238 FE1C                  		addq.b	#1,($FFFFFE1C).w ; add 1 to lives counter
0001C654 303C 0088                  		move.w	#$88,d0
0001C658 4EB9 0000 15BA             		jsr	(PlaySound).l	; play extra life music
0001C65E 7800                       		moveq	#0,d4
0001C660 4E75                       		rts	
0001C662                            ; ===========================================================================
0001C662                            
0001C662                            Obj09_ChkEmer:
0001C662 0C04 003B                  		cmpi.b	#$3B,d4		; is the item an emerald?
0001C666 6500                       		bcs.s	Obj09_ChkGhost
0001C668 0C04 0040                  		cmpi.b	#$40,d4
0001C66C 6200                       		bhi.s	Obj09_ChkGhost
0001C66E 6100 F6BC                  		bsr.w	SS_RemoveCollectedItem
0001C672 6600                       		bne.s	Obj09_GetEmer
0001C674 14BC 0005                  		move.b	#5,(a2)
0001C678 2549 0004                  		move.l	a1,4(a2)
0001C67C                            
0001C67C                            Obj09_GetEmer:
0001C67C 0C38 0006 FE57             		cmpi.b	#6,($FFFFFE57).w ; do you have all the emeralds?
0001C682 6700                       		beq.s	Obj09_NoEmer	; if yes, branch
0001C684 0404 003B                  		subi.b	#$3B,d4
0001C688 7000                       		moveq	#0,d0
0001C68A 1038 FE57                  		move.b	($FFFFFE57).w,d0
0001C68E 45F8 FE58                  		lea	($FFFFFE58).w,a2
0001C692 1584 0000                  		move.b	d4,(a2,d0.w)
0001C696 5238 FE57                  		addq.b	#1,($FFFFFE57).w ; add 1 to number of emeralds
0001C69A                            
0001C69A                            Obj09_NoEmer:
0001C69A 303C 0093                  		move.w	#$93,d0
0001C69E 4EB9 0000 15C0             		jsr	(PlaySound_Special).l ;	play emerald music
0001C6A4 7800                       		moveq	#0,d4
0001C6A6 4E75                       		rts	
0001C6A8                            ; ===========================================================================
0001C6A8                            
0001C6A8                            Obj09_ChkGhost:
0001C6A8 0C04 0041                  		cmpi.b	#$41,d4		; is the item a	ghost block?
0001C6AC 6600                       		bne.s	Obj09_ChkGhostTag
0001C6AE 117C 0001 003A             		move.b	#1,$3A(a0)	; mark the ghost block as "passed"
0001C6B4                            
0001C6B4                            Obj09_ChkGhostTag:
0001C6B4 0C04 004A                  		cmpi.b	#$4A,d4		; is the item a	switch for ghost blocks?
0001C6B8 6600                       		bne.s	Obj09_NoGhost
0001C6BA 0C28 0001 003A             		cmpi.b	#1,$3A(a0)	; have the ghost blocks	been passed?
0001C6C0 6600                       		bne.s	Obj09_NoGhost	; if not, branch
0001C6C2 117C 0002 003A             		move.b	#2,$3A(a0)	; mark the ghost blocks	as "solid"
0001C6C8                            
0001C6C8                            Obj09_NoGhost:
0001C6C8 78FF                       		moveq	#-1,d4
0001C6CA 4E75                       		rts	
0001C6CC                            ; ===========================================================================
0001C6CC                            
0001C6CC                            Obj09_MakeGhostSolid:
0001C6CC 0C28 0002 003A             		cmpi.b	#2,$3A(a0)	; is the ghost marked as "solid"?
0001C6D2 6600                       		bne.s	Obj09_GhostNotSolid ; if not, branch
0001C6D4 43F9 00FF 1020             		lea	($FF1020).l,a1
0001C6DA 723F                       		moveq	#$3F,d1
0001C6DC                            
0001C6DC                            Obj09_GhostLoop2:
0001C6DC 743F                       		moveq	#$3F,d2
0001C6DE                            
0001C6DE                            Obj09_GhostLoop:
0001C6DE 0C11 0041                  		cmpi.b	#$41,(a1)	; is the item a	ghost block?
0001C6E2 6600                       		bne.s	Obj09_NoReplace	; if not, branch
0001C6E4 12BC 002C                  		move.b	#$2C,(a1)	; replace ghost	block with a solid block
0001C6E8                            
0001C6E8                            Obj09_NoReplace:
0001C6E8 5249                       		addq.w	#1,a1
0001C6EA 51CA FFF2                  		dbf	d2,Obj09_GhostLoop
0001C6EE 43E9 0040                  		lea	$40(a1),a1
0001C6F2 51C9 FFE8                  		dbf	d1,Obj09_GhostLoop2
0001C6F6                            
0001C6F6                            Obj09_GhostNotSolid:
0001C6F6 4228 003A                  		clr.b	$3A(a0)
0001C6FA 7800                       		moveq	#0,d4
0001C6FC 4E75                       		rts	
0001C6FE                            ; End of function Obj09_ChkItems
0001C6FE                            
0001C6FE                            
0001C6FE                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0001C6FE                            
0001C6FE                            
0001C6FE                            Obj09_ChkItems2:			; XREF: Obj09_Display
0001C6FE 1028 0030                  		move.b	$30(a0),d0
0001C702 6600                       		bne.s	Obj09_ChkBumper
0001C704 5328 0036                  		subq.b	#1,$36(a0)
0001C708 6A00                       		bpl.s	loc_1BEA0
0001C70A 117C 0000 0036             		move.b	#0,$36(a0)
0001C710                            
0001C710                            loc_1BEA0:
0001C710 5328 0037                  		subq.b	#1,$37(a0)
0001C714 6A00                       		bpl.s	locret_1BEAC
0001C716 117C 0000 0037             		move.b	#0,$37(a0)
0001C71C                            
0001C71C                            locret_1BEAC:
0001C71C 4E75                       		rts	
0001C71E                            ; ===========================================================================
0001C71E                            
0001C71E                            Obj09_ChkBumper:
0001C71E 0C00 0025                  		cmpi.b	#$25,d0		; is the item a	bumper?
0001C722 6600                       		bne.s	Obj09_GOAL
0001C724 2228 0032                  		move.l	$32(a0),d1
0001C728 0481 00FF 0001             		subi.l	#$FF0001,d1
0001C72E 3401                       		move.w	d1,d2
0001C730 0241 007F                  		andi.w	#$7F,d1
0001C734 C2FC 0018                  		mulu.w	#$18,d1
0001C738 0441 0014                  		subi.w	#$14,d1
0001C73C EE4A                       		lsr.w	#7,d2
0001C73E 0242 007F                  		andi.w	#$7F,d2
0001C742 C4FC 0018                  		mulu.w	#$18,d2
0001C746 0442 0044                  		subi.w	#$44,d2
0001C74A 9268 0008                  		sub.w	8(a0),d1
0001C74E 9468 000C                  		sub.w	$C(a0),d2
0001C752 4EB9 0000 2F32             		jsr	(CalcAngle).l
0001C758 4EB9 0000 2C64             		jsr	(CalcSine).l
0001C75E C3FC F900                  		muls.w	#-$700,d1
0001C762 E081                       		asr.l	#8,d1
0001C764 3141 0010                  		move.w	d1,$10(a0)
0001C768 C1FC F900                  		muls.w	#-$700,d0
0001C76C E080                       		asr.l	#8,d0
0001C76E 3140 0012                  		move.w	d0,$12(a0)
0001C772 08E8 0001 0022             		bset	#1,$22(a0)
0001C778 6100 F5B2                  		bsr.w	SS_RemoveCollectedItem
0001C77C 6600                       		bne.s	Obj09_BumpSnd
0001C77E 14BC 0002                  		move.b	#2,(a2)
0001C782 2028 0032                  		move.l	$32(a0),d0
0001C786 5380                       		subq.l	#1,d0
0001C788 2540 0004                  		move.l	d0,4(a2)
0001C78C                            
0001C78C                            Obj09_BumpSnd:
0001C78C 303C 00B4                  		move.w	#$B4,d0
0001C790 4EF9 0000 15C0             		jmp	(PlaySound_Special).l ;	play bumper sound
0001C796                            ; ===========================================================================
0001C796                            
0001C796                            Obj09_GOAL:
0001C796 0C00 0027                  		cmpi.b	#$27,d0		; is the item a	"GOAL"?
0001C79A 6600                       		bne.s	Obj09_UPblock
0001C79C 5428 0024                  		addq.b	#2,$24(a0)	; run routine "Obj09_ExitStage"
0001C7A0 303C 00A8                  		move.w	#$A8,d0		; change item
0001C7A4 4EB9 0000 15C0             		jsr	(PlaySound_Special).l ;	play "GOAL" sound
0001C7AA 4E75                       		rts	
0001C7AC                            ; ===========================================================================
0001C7AC                            
0001C7AC                            Obj09_UPblock:
0001C7AC 0C00 0029                  		cmpi.b	#$29,d0		; is the item an "UP" block?
0001C7B0 6600                       		bne.s	Obj09_DOWNblock
0001C7B2 4A28 0036                  		tst.b	$36(a0)
0001C7B6 6600 0000                  		bne.w	Obj09_NoGlass
0001C7BA 117C 001E 0036             		move.b	#$1E,$36(a0)
0001C7C0 0838 0006 F783             		btst	#6,($FFFFF783).w
0001C7C6 6700                       		beq.s	Obj09_UPsnd
0001C7C8 E1F8 F782                  		asl	($FFFFF782).w	; increase stage rotation speed
0001C7CC 2268 0032                  		movea.l	$32(a0),a1
0001C7D0 5389                       		subq.l	#1,a1
0001C7D2 12BC 002A                  		move.b	#$2A,(a1)	; change item to a "DOWN" block
0001C7D6                            
0001C7D6                            Obj09_UPsnd:
0001C7D6 303C 00A9                  		move.w	#$A9,d0
0001C7DA 4EF9 0000 15C0             		jmp	(PlaySound_Special).l ;	play up/down sound
0001C7E0                            ; ===========================================================================
0001C7E0                            
0001C7E0                            Obj09_DOWNblock:
0001C7E0 0C00 002A                  		cmpi.b	#$2A,d0		; is the item a	"DOWN" block?
0001C7E4 6600                       		bne.s	Obj09_Rblock
0001C7E6 4A28 0036                  		tst.b	$36(a0)
0001C7EA 6600 0000                  		bne.w	Obj09_NoGlass
0001C7EE 117C 001E 0036             		move.b	#$1E,$36(a0)
0001C7F4 0838 0006 F783             		btst	#6,($FFFFF783).w
0001C7FA 6600                       		bne.s	Obj09_DOWNsnd
0001C7FC E0F8 F782                  		asr	($FFFFF782).w	; reduce stage rotation	speed
0001C800 2268 0032                  		movea.l	$32(a0),a1
0001C804 5389                       		subq.l	#1,a1
0001C806 12BC 0029                  		move.b	#$29,(a1)	; change item to an "UP" block
0001C80A                            
0001C80A                            Obj09_DOWNsnd:
0001C80A 303C 00A9                  		move.w	#$A9,d0
0001C80E 4EF9 0000 15C0             		jmp	(PlaySound_Special).l ;	play up/down sound
0001C814                            ; ===========================================================================
0001C814                            
0001C814                            Obj09_Rblock:
0001C814 0C00 002B                  		cmpi.b	#$2B,d0		; is the item an "R" block?
0001C818 6600                       		bne.s	Obj09_ChkGlass
0001C81A 4A28 0037                  		tst.b	$37(a0)
0001C81E 6600 0000                  		bne.w	Obj09_NoGlass
0001C822 117C 001E 0037             		move.b	#$1E,$37(a0)
0001C828 6100 F502                  		bsr.w	SS_RemoveCollectedItem
0001C82C 6600                       		bne.s	Obj09_RevStage
0001C82E 14BC 0004                  		move.b	#4,(a2)
0001C832 2028 0032                  		move.l	$32(a0),d0
0001C836 5380                       		subq.l	#1,d0
0001C838 2540 0004                  		move.l	d0,4(a2)
0001C83C                            
0001C83C                            Obj09_RevStage:
0001C83C 4478 F782                  		neg.w	($FFFFF782).w	; reverse stage	rotation
0001C840 303C 00A9                  		move.w	#$A9,d0
0001C844 4EF9 0000 15C0             		jmp	(PlaySound_Special).l ;	play sound
0001C84A                            ; ===========================================================================
0001C84A                            
0001C84A                            Obj09_ChkGlass:
0001C84A 0C00 002D                  		cmpi.b	#$2D,d0		; is the item a	glass block?
0001C84E 6700                       		beq.s	Obj09_Glass	; if yes, branch
0001C850 0C00 002E                  		cmpi.b	#$2E,d0
0001C854 6700                       		beq.s	Obj09_Glass
0001C856 0C00 002F                  		cmpi.b	#$2F,d0
0001C85A 6700                       		beq.s	Obj09_Glass
0001C85C 0C00 0030                  		cmpi.b	#$30,d0
0001C860 6600                       		bne.s	Obj09_NoGlass	; if not, branch
0001C862                            
0001C862                            Obj09_Glass:
0001C862 6100 F4C8                  		bsr.w	SS_RemoveCollectedItem
0001C866 6600                       		bne.s	Obj09_GlassSnd
0001C868 14BC 0006                  		move.b	#6,(a2)
0001C86C 2268 0032                  		movea.l	$32(a0),a1
0001C870 5389                       		subq.l	#1,a1
0001C872 2549 0004                  		move.l	a1,4(a2)
0001C876 1011                       		move.b	(a1),d0
0001C878 5200                       		addq.b	#1,d0		; change glass type when touched
0001C87A 0C00 0030                  		cmpi.b	#$30,d0
0001C87E 6300                       		bls.s	Obj09_GlassUpdate ; if glass is	still there, branch
0001C880 4200                       		clr.b	d0		; remove the glass block when it's destroyed
0001C882                            
0001C882                            Obj09_GlassUpdate:
0001C882 1540 0004                  		move.b	d0,4(a2)	; update the stage layout
0001C886                            
0001C886                            Obj09_GlassSnd:
0001C886 303C 00BA                  		move.w	#$BA,d0
0001C88A 4EF9 0000 15C0             		jmp	(PlaySound_Special).l ;	play glass block sound
0001C890                            ; ===========================================================================
0001C890                            
0001C890                            Obj09_NoGlass:
0001C890 4E75                       		rts	
0001C892                            ; End of function Obj09_ChkItems2
0001C892                            
0001C892                            ; ===========================================================================
0001C892                            ; ---------------------------------------------------------------------------
0001C892                            ; Object 10 - blank
0001C892                            ; ---------------------------------------------------------------------------
0001C892                            
0001C892                            Obj10:					; XREF: Obj_Index
0001C892 4E75                       		rts	
0001C894                            ; ---------------------------------------------------------------------------
0001C894                            ; Subroutine to	animate	level graphics
0001C894                            ; ---------------------------------------------------------------------------
0001C894                            
0001C894                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0001C894                            
0001C894                            
0001C894                            AniArt_Load:				; XREF: Demo_Time; loc_F54
0001C894 4A78 F63A                  		tst.w	($FFFFF63A).w	; is the game paused?
0001C898 6600                       		bne.s	AniArt_Pause	; if yes, branch
0001C89A 4DF9 00C0 0000             		lea	($C00000).l,a6
0001C8A0 6100 0000                  		bsr.w	AniArt_GiantRing
0001C8A4 7000                       		moveq	#0,d0
0001C8A6 1038 FE10                  		move.b	($FFFFFE10).w,d0
0001C8AA D040                       		add.w	d0,d0
0001C8AC 303B 0000                  		move.w	AniArt_Index(pc,d0.w),d0
0001C8B0 4EFB 0000                  		jmp	AniArt_Index(pc,d0.w)
0001C8B4                            ; ===========================================================================
0001C8B4                            
0001C8B4                            AniArt_Pause:
0001C8B4 4E75                       		rts	
0001C8B6                            ; End of function AniArt_Load
0001C8B6                            
0001C8B6                            ; ===========================================================================
0001C8B6 0000 0000                  AniArt_Index:	dc.w AniArt_GHZ-AniArt_Index, AniArt_none-AniArt_Index
0001C8BA 0000 0000                  		dc.w AniArt_MZ-AniArt_Index, AniArt_none-AniArt_Index
0001C8BE 0000 0000                  		dc.w AniArt_none-AniArt_Index, AniArt_SBZ-AniArt_Index
0001C8C2 0000                       		dc.w AniArt_Ending-AniArt_Index
0001C8C4                            ; ===========================================================================
0001C8C4                            ; ---------------------------------------------------------------------------
0001C8C4                            ; Animated pattern routine - Green Hill
0001C8C4                            ; ---------------------------------------------------------------------------
0001C8C4                            
0001C8C4                            AniArt_GHZ:				; XREF: AniArt_Index
0001C8C4 5338 F7B1                  		subq.b	#1,($FFFFF7B1).w
0001C8C8 6A00                       		bpl.s	loc_1C08A
0001C8CA 11FC 0005 F7B1             		move.b	#5,($FFFFF7B1).w ; time	to display each	frame for
0001C8D0 43F9 0000 0000             		lea	(Art_GhzWater).l,a1 ; load waterfall patterns
0001C8D6 1038 F7B0                  		move.b	($FFFFF7B0).w,d0
0001C8DA 5238 F7B0                  		addq.b	#1,($FFFFF7B0).w
0001C8DE 0240 0001                  		andi.w	#1,d0
0001C8E2 6700                       		beq.s	loc_1C078
0001C8E4 43E9 0100                  		lea	$100(a1),a1	; load next frame
0001C8E8                            
0001C8E8                            loc_1C078:
0001C8E8 23FC 6F00 0001 00C0 0004   		move.l	#$6F000001,($C00004).l ; VRAM address
0001C8F2 323C 0007                  		move.w	#7,d1		; number of 8x8	tiles
0001C8F6 6000 0000                  		bra.w	LoadTiles
0001C8FA                            ; ===========================================================================
0001C8FA                            
0001C8FA                            loc_1C08A:
0001C8FA 5338 F7B3                  		subq.b	#1,($FFFFF7B3).w
0001C8FE 6A00                       		bpl.s	loc_1C0C0
0001C900 11FC 000F F7B3             		move.b	#$F,($FFFFF7B3).w
0001C906 43F9 0000 0000             		lea	(Art_GhzFlower1).l,a1 ;	load big flower	patterns
0001C90C 1038 F7B2                  		move.b	($FFFFF7B2).w,d0
0001C910 5238 F7B2                  		addq.b	#1,($FFFFF7B2).w
0001C914 0240 0001                  		andi.w	#1,d0
0001C918 6700                       		beq.s	loc_1C0AE
0001C91A 43E9 0200                  		lea	$200(a1),a1
0001C91E                            
0001C91E                            loc_1C0AE:
0001C91E 23FC 6B80 0001 00C0 0004   		move.l	#$6B800001,($C00004).l
0001C928 323C 000F                  		move.w	#$F,d1
0001C92C 6000 0000                  		bra.w	LoadTiles
0001C930                            ; ===========================================================================
0001C930                            
0001C930                            loc_1C0C0:
0001C930 5338 F7B5                  		subq.b	#1,($FFFFF7B5).w
0001C934 6A00                       		bpl.s	locret_1C10C
0001C936 11FC 0007 F7B5             		move.b	#7,($FFFFF7B5).w
0001C93C 1038 F7B4                  		move.b	($FFFFF7B4).w,d0
0001C940 5238 F7B4                  		addq.b	#1,($FFFFF7B4).w
0001C944 0240 0003                  		andi.w	#3,d0
0001C948 103B 0000                  		move.b	byte_1C10E(pc,d0.w),d0
0001C94C 0800 0000                  		btst	#0,d0
0001C950 6600                       		bne.s	loc_1C0E8
0001C952 11FC 007F F7B5             		move.b	#$7F,($FFFFF7B5).w
0001C958                            
0001C958                            loc_1C0E8:
0001C958 EF48                       		lsl.w	#7,d0
0001C95A 3200                       		move.w	d0,d1
0001C95C D040                       		add.w	d0,d0
0001C95E D041                       		add.w	d1,d0
0001C960 23FC 6D80 0001 00C0 0004   		move.l	#$6D800001,($C00004).l
0001C96A 43F9 0000 0000             		lea	(Art_GhzFlower2).l,a1 ;	load small flower patterns
0001C970 43F1 0000                  		lea	(a1,d0.w),a1
0001C974 323C 000B                  		move.w	#$B,d1
0001C978 6100 0000                  		bsr.w	LoadTiles
0001C97C                            
0001C97C                            locret_1C10C:
0001C97C 4E75                       		rts	
0001C97E                            ; ===========================================================================
0001C97E 0001 0201                  byte_1C10E:	dc.b 0,	1, 2, 1
0001C982                            ; ===========================================================================
0001C982                            ; ---------------------------------------------------------------------------
0001C982                            ; Animated pattern routine - Marble
0001C982                            ; ---------------------------------------------------------------------------
0001C982                            
0001C982                            AniArt_MZ:				; XREF: AniArt_Index
0001C982 5338 F7B1                  		subq.b	#1,($FFFFF7B1).w
0001C986 6A00                       		bpl.s	loc_1C150
0001C988 11FC 0013 F7B1             		move.b	#$13,($FFFFF7B1).w
0001C98E 43F9 0000 0000             		lea	(Art_MzLava1).l,a1 ; load lava surface patterns
0001C994 7000                       		moveq	#0,d0
0001C996 1038 F7B0                  		move.b	($FFFFF7B0).w,d0
0001C99A 5200                       		addq.b	#1,d0
0001C99C 0C00 0003                  		cmpi.b	#3,d0
0001C9A0 6600                       		bne.s	loc_1C134
0001C9A2 7000                       		moveq	#0,d0
0001C9A4                            
0001C9A4                            loc_1C134:
0001C9A4 11C0 F7B0                  		move.b	d0,($FFFFF7B0).w
0001C9A8 C0FC 0100                  		mulu.w	#$100,d0
0001C9AC D2C0                       		adda.w	d0,a1
0001C9AE 23FC 5C40 0001 00C0 0004   		move.l	#$5C400001,($C00004).l
0001C9B8 323C 0007                  		move.w	#7,d1
0001C9BC 6100 0000                  		bsr.w	LoadTiles
0001C9C0                            
0001C9C0                            loc_1C150:
0001C9C0 5338 F7B3                  		subq.b	#1,($FFFFF7B3).w
0001C9C4 6A00                       		bpl.s	loc_1C1AE
0001C9C6 11FC 0001 F7B3             		move.b	#1,($FFFFF7B3).w
0001C9CC 7000                       		moveq	#0,d0
0001C9CE 1038 F7B0                  		move.b	($FFFFF7B0).w,d0
0001C9D2 49F9 0000 0000             		lea	(Art_MzLava2).l,a4 ; load lava patterns
0001C9D8 EE58                       		ror.w	#7,d0
0001C9DA D8C0                       		adda.w	d0,a4
0001C9DC 23FC 5A40 0001 00C0 0004   		move.l	#$5A400001,($C00004).l
0001C9E6 7600                       		moveq	#0,d3
0001C9E8 1638 F7B2                  		move.b	($FFFFF7B2).w,d3
0001C9EC 5238 F7B2                  		addq.b	#1,($FFFFF7B2).w
0001C9F0 1638 FE68                  		move.b	($FFFFFE68).w,d3
0001C9F4 343C 0003                  		move.w	#3,d2
0001C9F8                            
0001C9F8                            loc_1C188:
0001C9F8 3003                       		move.w	d3,d0
0001C9FA D040                       		add.w	d0,d0
0001C9FC 0240 001E                  		andi.w	#$1E,d0
0001CA00 47F9 0000 0000             		lea	(AniArt_MZextra).l,a3
0001CA06 3033 0000                  		move.w	(a3,d0.w),d0
0001CA0A 47F3 0000                  		lea	(a3,d0.w),a3
0001CA0E 224C                       		movea.l	a4,a1
0001CA10 323C 001F                  		move.w	#$1F,d1
0001CA14 4E93                       		jsr	(a3)
0001CA16 5843                       		addq.w	#4,d3
0001CA18 51CA FFDE                  		dbf	d2,loc_1C188
0001CA1C 4E75                       		rts	
0001CA1E                            ; ===========================================================================
0001CA1E                            
0001CA1E                            loc_1C1AE:
0001CA1E 5338 F7B5                  		subq.b	#1,($FFFFF7B5).w
0001CA22 6A00 0000                  		bpl.w	locret_1C1EA
0001CA26 11FC 0007 F7B5             		move.b	#7,($FFFFF7B5).w
0001CA2C 43F9 0000 0000             		lea	(Art_MzTorch).l,a1 ; load torch	patterns
0001CA32 7000                       		moveq	#0,d0
0001CA34 1038 F7B6                  		move.b	($FFFFF7B6).w,d0
0001CA38 5238 F7B6                  		addq.b	#1,($FFFFF7B6).w
0001CA3C 0238 0003 F7B6             		andi.b	#3,($FFFFF7B6).w
0001CA42 C0FC 00C0                  		mulu.w	#$C0,d0
0001CA46 D2C0                       		adda.w	d0,a1
0001CA48 23FC 5E40 0001 00C0 0004   		move.l	#$5E400001,($C00004).l
0001CA52 323C 0005                  		move.w	#5,d1
0001CA56 6000 0000                  		bra.w	LoadTiles
0001CA5A                            ; ===========================================================================
0001CA5A                            
0001CA5A                            locret_1C1EA:
0001CA5A 4E75                       		rts	
0001CA5C                            ; ===========================================================================
0001CA5C                            ; ---------------------------------------------------------------------------
0001CA5C                            ; Animated pattern routine - Scrap Brain
0001CA5C                            ; ---------------------------------------------------------------------------
0001CA5C                            
0001CA5C                            AniArt_SBZ:				; XREF: AniArt_Index
0001CA5C 4A38 F7B4                  		tst.b	($FFFFF7B4).w
0001CA60 6700                       		beq.s	loc_1C1F8
0001CA62 5338 F7B4                  		subq.b	#1,($FFFFF7B4).w
0001CA66 6000                       		bra.s	loc_1C250
0001CA68                            ; ===========================================================================
0001CA68                            
0001CA68                            loc_1C1F8:
0001CA68 5338 F7B1                  		subq.b	#1,($FFFFF7B1).w
0001CA6C 6A00                       		bpl.s	loc_1C250
0001CA6E 11FC 0007 F7B1             		move.b	#7,($FFFFF7B1).w
0001CA74 43F9 0000 0000             		lea	(Art_SbzSmoke).l,a1 ; load smoke patterns
0001CA7A 23FC 4900 0002 00C0 0004   		move.l	#$49000002,($C00004).l
0001CA84 1038 F7B0                  		move.b	($FFFFF7B0).w,d0
0001CA88 5238 F7B0                  		addq.b	#1,($FFFFF7B0).w
0001CA8C 0240 0007                  		andi.w	#7,d0
0001CA90 6700                       		beq.s	loc_1C234
0001CA92 5340                       		subq.w	#1,d0
0001CA94 C0FC 0180                  		mulu.w	#$180,d0
0001CA98 43F1 0000                  		lea	(a1,d0.w),a1
0001CA9C 323C 000B                  		move.w	#$B,d1
0001CAA0 6000 0000                  		bra.w	LoadTiles
0001CAA4                            ; ===========================================================================
0001CAA4                            
0001CAA4                            loc_1C234:
0001CAA4 11FC 00B4 F7B4             		move.b	#$B4,($FFFFF7B4).w
0001CAAA                            
0001CAAA                            loc_1C23A:
0001CAAA 323C 0005                  		move.w	#5,d1
0001CAAE 6100 0000                  		bsr.w	LoadTiles
0001CAB2 43F9 0000 0000             		lea	(Art_SbzSmoke).l,a1
0001CAB8 323C 0005                  		move.w	#5,d1
0001CABC 6000 0000                  		bra.w	LoadTiles
0001CAC0                            ; ===========================================================================
0001CAC0                            
0001CAC0                            loc_1C250:
0001CAC0 4A38 F7B5                  		tst.b	($FFFFF7B5).w
0001CAC4 6700                       		beq.s	loc_1C25C
0001CAC6 5338 F7B5                  		subq.b	#1,($FFFFF7B5).w
0001CACA 6000                       		bra.s	locret_1C2A0
0001CACC                            ; ===========================================================================
0001CACC                            
0001CACC                            loc_1C25C:
0001CACC 5338 F7B3                  		subq.b	#1,($FFFFF7B3).w
0001CAD0 6A00                       		bpl.s	locret_1C2A0
0001CAD2 11FC 0007 F7B3             		move.b	#7,($FFFFF7B3).w
0001CAD8 43F9 0000 0000             		lea	(Art_SbzSmoke).l,a1
0001CADE 23FC 4A80 0002 00C0 0004   		move.l	#$4A800002,($C00004).l
0001CAE8 1038 F7B2                  		move.b	($FFFFF7B2).w,d0
0001CAEC 5238 F7B2                  		addq.b	#1,($FFFFF7B2).w
0001CAF0 0240 0007                  		andi.w	#7,d0
0001CAF4 6700                       		beq.s	loc_1C298
0001CAF6 5340                       		subq.w	#1,d0
0001CAF8 C0FC 0180                  		mulu.w	#$180,d0
0001CAFC 43F1 0000                  		lea	(a1,d0.w),a1
0001CB00 323C 000B                  		move.w	#$B,d1
0001CB04 6000 0000                  		bra.w	LoadTiles
0001CB08                            ; ===========================================================================
0001CB08                            
0001CB08                            loc_1C298:
0001CB08 11FC 0078 F7B5             		move.b	#$78,($FFFFF7B5).w
0001CB0E 609A                       		bra.s	loc_1C23A
0001CB10                            ; ===========================================================================
0001CB10                            
0001CB10                            locret_1C2A0:
0001CB10 4E75                       		rts	
0001CB12                            ; ===========================================================================
0001CB12                            ; ---------------------------------------------------------------------------
0001CB12                            ; Animated pattern routine - ending sequence
0001CB12                            ; ---------------------------------------------------------------------------
0001CB12                            
0001CB12                            AniArt_Ending:				; XREF: AniArt_Index
0001CB12 5338 F7B3                  		subq.b	#1,($FFFFF7B3).w
0001CB16 6A00                       		bpl.s	loc_1C2F4
0001CB18 11FC 0007 F7B3             		move.b	#7,($FFFFF7B3).w
0001CB1E 43F9 0000 0000             		lea	(Art_GhzFlower1).l,a1 ;	load big flower	patterns
0001CB24 45F8 9400                  		lea	($FFFF9400).w,a2
0001CB28 1038 F7B2                  		move.b	($FFFFF7B2).w,d0
0001CB2C 5238 F7B2                  		addq.b	#1,($FFFFF7B2).w
0001CB30 0240 0001                  		andi.w	#1,d0
0001CB34 6700                       		beq.s	loc_1C2CE
0001CB36 43E9 0200                  		lea	$200(a1),a1
0001CB3A 45EA 0200                  		lea	$200(a2),a2
0001CB3E                            
0001CB3E                            loc_1C2CE:
0001CB3E 23FC 6B80 0001 00C0 0004   		move.l	#$6B800001,($C00004).l
0001CB48 323C 000F                  		move.w	#$F,d1
0001CB4C 6100 0000                  		bsr.w	LoadTiles
0001CB50 224A                       		movea.l	a2,a1
0001CB52 23FC 7200 0001 00C0 0004   		move.l	#$72000001,($C00004).l
0001CB5C 323C 000F                  		move.w	#$F,d1
0001CB60 6000 0000                  		bra.w	LoadTiles
0001CB64                            ; ===========================================================================
0001CB64                            
0001CB64                            loc_1C2F4:
0001CB64 5338 F7B5                  		subq.b	#1,($FFFFF7B5).w
0001CB68 6A00                       		bpl.s	loc_1C33C
0001CB6A 11FC 0007 F7B5             		move.b	#7,($FFFFF7B5).w
0001CB70 1038 F7B4                  		move.b	($FFFFF7B4).w,d0
0001CB74 5238 F7B4                  		addq.b	#1,($FFFFF7B4).w
0001CB78 0240 0007                  		andi.w	#7,d0
0001CB7C 103B 0000                  		move.b	byte_1C334(pc,d0.w),d0
0001CB80 EF48                       		lsl.w	#7,d0
0001CB82 3200                       		move.w	d0,d1
0001CB84 D040                       		add.w	d0,d0
0001CB86 D041                       		add.w	d1,d0
0001CB88 23FC 6D80 0001 00C0 0004   		move.l	#$6D800001,($C00004).l
0001CB92 43F9 0000 0000             		lea	(Art_GhzFlower2).l,a1 ;	load small flower patterns
0001CB98 43F1 0000                  		lea	(a1,d0.w),a1
0001CB9C 323C 000B                  		move.w	#$B,d1
0001CBA0 6000 0000                  		bra.w	LoadTiles
0001CBA4                            ; ===========================================================================
0001CBA4 0000 0001 0202 0201        byte_1C334:	dc.b 0,	0, 0, 1, 2, 2, 2, 1
0001CBAC                            ; ===========================================================================
0001CBAC                            
0001CBAC                            loc_1C33C:
0001CBAC 5338 F7B9                  		subq.b	#1,($FFFFF7B9).w
0001CBB0 6A00                       		bpl.s	loc_1C37A
0001CBB2 11FC 000E F7B9             		move.b	#$E,($FFFFF7B9).w
0001CBB8 1038 F7B8                  		move.b	($FFFFF7B8).w,d0
0001CBBC 5238 F7B8                  		addq.b	#1,($FFFFF7B8).w
0001CBC0 0240 0003                  		andi.w	#3,d0
0001CBC4 103B 0000                  		move.b	byte_1C376(pc,d0.w),d0
0001CBC8 E148                       		lsl.w	#8,d0
0001CBCA D040                       		add.w	d0,d0
0001CBCC 23FC 7000 0001 00C0 0004   		move.l	#$70000001,($C00004).l
0001CBD6 43F8 9800                  		lea	($FFFF9800).w,a1 ; load	special	flower patterns	(from RAM)
0001CBDA 43F1 0000                  		lea	(a1,d0.w),a1
0001CBDE 323C 000F                  		move.w	#$F,d1
0001CBE2 6000 0000                  		bra.w	LoadTiles
0001CBE6                            ; ===========================================================================
0001CBE6 0001 0201                  byte_1C376:	dc.b 0,	1, 2, 1
0001CBEA                            ; ===========================================================================
0001CBEA                            
0001CBEA                            loc_1C37A:
0001CBEA 5338 F7BB                  		subq.b	#1,($FFFFF7BB).w
0001CBEE 6A00                       		bpl.s	locret_1C3B4
0001CBF0 11FC 000B F7BB             		move.b	#$B,($FFFFF7BB).w
0001CBF6 1038 F7BA                  		move.b	($FFFFF7BA).w,d0
0001CBFA 5238 F7BA                  		addq.b	#1,($FFFFF7BA).w
0001CBFE 0240 0003                  		andi.w	#3,d0
0001CC02 103B 00E2                  		move.b	byte_1C376(pc,d0.w),d0
0001CC06 E148                       		lsl.w	#8,d0
0001CC08 D040                       		add.w	d0,d0
0001CC0A 23FC 6800 0001 00C0 0004   		move.l	#$68000001,($C00004).l
0001CC14 43F8 9E00                  		lea	($FFFF9E00).w,a1 ; load	special	flower patterns	(from RAM)
0001CC18 43F1 0000                  		lea	(a1,d0.w),a1
0001CC1C 323C 000F                  		move.w	#$F,d1
0001CC20 6000 0000                  		bra.w	LoadTiles
0001CC24                            ; ===========================================================================
0001CC24                            
0001CC24                            locret_1C3B4:
0001CC24 4E75                       		rts	
0001CC26                            ; ===========================================================================
0001CC26                            
0001CC26                            AniArt_none:				; XREF: AniArt_Index
0001CC26 4E75                       		rts	
0001CC28                            
0001CC28                            ; ---------------------------------------------------------------------------
0001CC28                            ; Subroutine to	load (d1 - 1) 8x8 tiles
0001CC28                            ; ---------------------------------------------------------------------------
0001CC28                            
0001CC28                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0001CC28                            
0001CC28                            
0001CC28                            LoadTiles:
0001CC28 2C99                       		move.l	(a1)+,(a6)
0001CC2A 2C99                       		move.l	(a1)+,(a6)
0001CC2C 2C99                       		move.l	(a1)+,(a6)
0001CC2E 2C99                       		move.l	(a1)+,(a6)
0001CC30 2C99                       		move.l	(a1)+,(a6)
0001CC32 2C99                       		move.l	(a1)+,(a6)
0001CC34 2C99                       		move.l	(a1)+,(a6)
0001CC36 2C99                       		move.l	(a1)+,(a6)
0001CC38 51C9 FFEE                  		dbf	d1,LoadTiles
0001CC3C 4E75                       		rts	
0001CC3E                            ; End of function LoadTiles
0001CC3E                            
0001CC3E                            ; ===========================================================================
0001CC3E                            ; ---------------------------------------------------------------------------
0001CC3E                            ; Animated pattern routine - more Marble Zone
0001CC3E                            ; ---------------------------------------------------------------------------
0001CC3E 0000 0000                  AniArt_MZextra:	dc.w loc_1C3EE-AniArt_MZextra, loc_1C3FA-AniArt_MZextra
0001CC42 0000 0000                  		dc.w loc_1C410-AniArt_MZextra, loc_1C41E-AniArt_MZextra
0001CC46 0000 0000                  		dc.w loc_1C434-AniArt_MZextra, loc_1C442-AniArt_MZextra
0001CC4A 0000 0000                  		dc.w loc_1C458-AniArt_MZextra, loc_1C466-AniArt_MZextra
0001CC4E 0000 0000                  		dc.w loc_1C47C-AniArt_MZextra, loc_1C48A-AniArt_MZextra
0001CC52 0000 0000                  		dc.w loc_1C4A0-AniArt_MZextra, loc_1C4AE-AniArt_MZextra
0001CC56 0000 0000                  		dc.w loc_1C4C4-AniArt_MZextra, loc_1C4D2-AniArt_MZextra
0001CC5A 0000 0000                  		dc.w loc_1C4E8-AniArt_MZextra, loc_1C4FA-AniArt_MZextra
0001CC5E                            ; ===========================================================================
0001CC5E                            
0001CC5E                            loc_1C3EE:				; XREF: AniArt_MZextra
0001CC5E 2C91                       		move.l	(a1),(a6)
0001CC60 43E9 0010                  		lea	$10(a1),a1
0001CC64 51C9 FFF8                  		dbf	d1,loc_1C3EE
0001CC68 4E75                       		rts	
0001CC6A                            ; ===========================================================================
0001CC6A                            
0001CC6A                            loc_1C3FA:				; XREF: AniArt_MZextra
0001CC6A 2029 0002                  		move.l	2(a1),d0
0001CC6E 1029 0001                  		move.b	1(a1),d0
0001CC72 E098                       		ror.l	#8,d0
0001CC74 2C80                       		move.l	d0,(a6)
0001CC76 43E9 0010                  		lea	$10(a1),a1
0001CC7A 51C9 FFEE                  		dbf	d1,loc_1C3FA
0001CC7E 4E75                       		rts	
0001CC80                            ; ===========================================================================
0001CC80                            
0001CC80                            loc_1C410:				; XREF: AniArt_MZextra
0001CC80 2CA9 0002                  		move.l	2(a1),(a6)
0001CC84 43E9 0010                  		lea	$10(a1),a1
0001CC88 51C9 FFF6                  		dbf	d1,loc_1C410
0001CC8C 4E75                       		rts	
0001CC8E                            ; ===========================================================================
0001CC8E                            
0001CC8E                            loc_1C41E:				; XREF: AniArt_MZextra
0001CC8E 2029 0004                  		move.l	4(a1),d0
0001CC92 1029 0003                  		move.b	3(a1),d0
0001CC96 E098                       		ror.l	#8,d0
0001CC98 2C80                       		move.l	d0,(a6)
0001CC9A 43E9 0010                  		lea	$10(a1),a1
0001CC9E 51C9 FFEE                  		dbf	d1,loc_1C41E
0001CCA2 4E75                       		rts	
0001CCA4                            ; ===========================================================================
0001CCA4                            
0001CCA4                            loc_1C434:				; XREF: AniArt_MZextra
0001CCA4 2CA9 0004                  		move.l	4(a1),(a6)
0001CCA8 43E9 0010                  		lea	$10(a1),a1
0001CCAC 51C9 FFF6                  		dbf	d1,loc_1C434
0001CCB0 4E75                       		rts	
0001CCB2                            ; ===========================================================================
0001CCB2                            
0001CCB2                            loc_1C442:				; XREF: AniArt_MZextra
0001CCB2 2029 0006                  		move.l	6(a1),d0
0001CCB6 1029 0005                  		move.b	5(a1),d0
0001CCBA E098                       		ror.l	#8,d0
0001CCBC 2C80                       		move.l	d0,(a6)
0001CCBE 43E9 0010                  		lea	$10(a1),a1
0001CCC2 51C9 FFEE                  		dbf	d1,loc_1C442
0001CCC6 4E75                       		rts	
0001CCC8                            ; ===========================================================================
0001CCC8                            
0001CCC8                            loc_1C458:				; XREF: AniArt_MZextra
0001CCC8 2CA9 0006                  		move.l	6(a1),(a6)
0001CCCC 43E9 0010                  		lea	$10(a1),a1
0001CCD0 51C9 FFF6                  		dbf	d1,loc_1C458
0001CCD4 4E75                       		rts	
0001CCD6                            ; ===========================================================================
0001CCD6                            
0001CCD6                            loc_1C466:				; XREF: AniArt_MZextra
0001CCD6 2029 0008                  		move.l	8(a1),d0
0001CCDA 1029 0007                  		move.b	7(a1),d0
0001CCDE E098                       		ror.l	#8,d0
0001CCE0 2C80                       		move.l	d0,(a6)
0001CCE2 43E9 0010                  		lea	$10(a1),a1
0001CCE6 51C9 FFEE                  		dbf	d1,loc_1C466
0001CCEA 4E75                       		rts	
0001CCEC                            ; ===========================================================================
0001CCEC                            
0001CCEC                            loc_1C47C:				; XREF: AniArt_MZextra
0001CCEC 2CA9 0008                  		move.l	8(a1),(a6)
0001CCF0 43E9 0010                  		lea	$10(a1),a1
0001CCF4 51C9 FFF6                  		dbf	d1,loc_1C47C
0001CCF8 4E75                       		rts	
0001CCFA                            ; ===========================================================================
0001CCFA                            
0001CCFA                            loc_1C48A:				; XREF: AniArt_MZextra
0001CCFA 2029 000A                  		move.l	$A(a1),d0
0001CCFE 1029 0009                  		move.b	9(a1),d0
0001CD02 E098                       		ror.l	#8,d0
0001CD04 2C80                       		move.l	d0,(a6)
0001CD06 43E9 0010                  		lea	$10(a1),a1
0001CD0A 51C9 FFEE                  		dbf	d1,loc_1C48A
0001CD0E 4E75                       		rts	
0001CD10                            ; ===========================================================================
0001CD10                            
0001CD10                            loc_1C4A0:				; XREF: AniArt_MZextra
0001CD10 2CA9 000A                  		move.l	$A(a1),(a6)
0001CD14 43E9 0010                  		lea	$10(a1),a1
0001CD18 51C9 FFF6                  		dbf	d1,loc_1C4A0
0001CD1C 4E75                       		rts	
0001CD1E                            ; ===========================================================================
0001CD1E                            
0001CD1E                            loc_1C4AE:				; XREF: AniArt_MZextra
0001CD1E 2029 000C                  		move.l	$C(a1),d0
0001CD22 1029 000B                  		move.b	$B(a1),d0
0001CD26 E098                       		ror.l	#8,d0
0001CD28 2C80                       		move.l	d0,(a6)
0001CD2A 43E9 0010                  		lea	$10(a1),a1
0001CD2E 51C9 FFEE                  		dbf	d1,loc_1C4AE
0001CD32 4E75                       		rts	
0001CD34                            ; ===========================================================================
0001CD34                            
0001CD34                            loc_1C4C4:				; XREF: AniArt_MZextra
0001CD34 2CA9 000C                  		move.l	$C(a1),(a6)
0001CD38 43E9 0010                  		lea	$10(a1),a1
0001CD3C 51C9 FFF6                  		dbf	d1,loc_1C4C4
0001CD40 4E75                       		rts	
0001CD42                            ; ===========================================================================
0001CD42                            
0001CD42                            loc_1C4D2:				; XREF: AniArt_MZextra
0001CD42 2029 000C                  		move.l	$C(a1),d0
0001CD46 E198                       		rol.l	#8,d0
0001CD48 1011                       		move.b	0(a1),d0
0001CD4A 2C80                       		move.l	d0,(a6)
0001CD4C 43E9 0010                  		lea	$10(a1),a1
0001CD50 51C9 FFF0                  		dbf	d1,loc_1C4D2
0001CD54 4E75                       		rts	
0001CD56                            ; ===========================================================================
0001CD56                            
0001CD56                            loc_1C4E8:				; XREF: AniArt_MZextra
0001CD56 3CA9 000E                  		move.w	$E(a1),(a6)
0001CD5A 3C91                       		move.w	0(a1),(a6)
0001CD5C 43E9 0010                  		lea	$10(a1),a1
0001CD60 51C9 FFF4                  		dbf	d1,loc_1C4E8
0001CD64 4E75                       		rts	
0001CD66                            ; ===========================================================================
0001CD66                            
0001CD66                            loc_1C4FA:				; XREF: AniArt_MZextra
0001CD66 2011                       		move.l	0(a1),d0
0001CD68 1029 000F                  		move.b	$F(a1),d0
0001CD6C E098                       		ror.l	#8,d0
0001CD6E 2C80                       		move.l	d0,(a6)
0001CD70 43E9 0010                  		lea	$10(a1),a1
0001CD74 51C9 FFF0                  		dbf	d1,loc_1C4FA
0001CD78 4E75                       		rts	
0001CD7A                            
0001CD7A                            ; ---------------------------------------------------------------------------
0001CD7A                            ; Animated pattern routine - giant ring
0001CD7A                            ; ---------------------------------------------------------------------------
0001CD7A                            
0001CD7A                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0001CD7A                            
0001CD7A                            
0001CD7A                            AniArt_GiantRing:			; XREF: AniArt_Load
0001CD7A 4A78 F7BE                  		tst.w	($FFFFF7BE).w
0001CD7E 6600                       		bne.s	loc_1C518
0001CD80 4E75                       		rts	
0001CD82                            ; ===========================================================================
0001CD82                            
0001CD82                            loc_1C518:
0001CD82 0478 01C0 F7BE             		subi.w	#$1C0,($FFFFF7BE).w
0001CD88 43F9 0000 0000             		lea	(Art_BigRing).l,a1 ; load giant	ring patterns
0001CD8E 7000                       		moveq	#0,d0
0001CD90 3038 F7BE                  		move.w	($FFFFF7BE).w,d0
0001CD94 43F1 0000                  		lea	(a1,d0.w),a1
0001CD98 0640 8000                  		addi.w	#$8000,d0
0001CD9C E588                       		lsl.l	#2,d0
0001CD9E E448                       		lsr.w	#2,d0
0001CDA0 0040 4000                  		ori.w	#$4000,d0
0001CDA4 4840                       		swap	d0
0001CDA6 2D40 0004                  		move.l	d0,4(a6)
0001CDAA 323C 000D                  		move.w	#$D,d1
0001CDAE 6000 FE78                  		bra.w	LoadTiles
0001CDB2                            ; End of function AniArt_GiantRing
0001CDB2                            
0001CDB2                            ; ===========================================================================
0001CDB2                            ; ---------------------------------------------------------------------------
0001CDB2                            ; Object 21 - SCORE, TIME, RINGS
0001CDB2                            ; ---------------------------------------------------------------------------
0001CDB2                            
0001CDB2                            Obj21:					; XREF: Obj_Index
0001CDB2 7000                       		moveq	#0,d0
0001CDB4 1028 0024                  		move.b	$24(a0),d0
0001CDB8 323B 0000                  		move.w	Obj21_Index(pc,d0.w),d1
0001CDBC 4EFB 1000                  		jmp	Obj21_Index(pc,d1.w)
0001CDC0                            ; ===========================================================================
0001CDC0 0000                       Obj21_Index:	dc.w Obj21_Main-Obj21_Index
0001CDC2 0000                       		dc.w Obj21_Flash-Obj21_Index
0001CDC4                            ; ===========================================================================
0001CDC4                            
0001CDC4                            Obj21_Main:				; XREF: Obj21_Main
0001CDC4 5428 0024                  		addq.b	#2,$24(a0)
0001CDC8 317C 0090 0008             		move.w	#$90,8(a0)
0001CDCE 317C 0108 000A             		move.w	#$108,$A(a0)
0001CDD4 217C 0000 0000 0004        		move.l	#Map_obj21,4(a0)
0001CDDC 317C 06CA 0002             		move.w	#$6CA,2(a0)
0001CDE2 117C 0000 0001             		move.b	#0,1(a0)
0001CDE8 117C 0000 0018             		move.b	#0,$18(a0)
0001CDEE                            
0001CDEE                            Obj21_Flash:				; XREF: Obj21_Main
0001CDEE 4A78 FE20                  		tst.w	($FFFFFE20).w	; do you have any rings?
0001CDF2 6700                       		beq.s	Obj21_Flash2	; if not, branch
0001CDF4 4228 001A                  		clr.b	$1A(a0)		; make all counters yellow
0001CDF8 4EF9 0000 DD62             		jmp	DisplaySprite
0001CDFE                            ; ===========================================================================
0001CDFE                            
0001CDFE                            Obj21_Flash2:
0001CDFE 7000                       		moveq	#0,d0
0001CE00 0838 0003 FE05             		btst	#3,($FFFFFE05).w
0001CE06 6600                       		bne.s	Obj21_Display
0001CE08 5240                       		addq.w	#1,d0		; make ring counter flash red
0001CE0A 0C38 0009 FE23             		cmpi.b	#9,($FFFFFE23).w ; have	9 minutes elapsed?
0001CE10 6600                       		bne.s	Obj21_Display	; if not, branch
0001CE12 5440                       		addq.w	#2,d0		; make time counter flash red
0001CE14                            
0001CE14                            Obj21_Display:
0001CE14 1140 001A                  		move.b	d0,$1A(a0)
0001CE18 4EF9 0000 DD62             		jmp	DisplaySprite
0001CE1E                            ; ===========================================================================
0001CE1E                            ; ---------------------------------------------------------------------------
0001CE1E                            ; Sprite mappings - SCORE, TIME, RINGS
0001CE1E                            ; ---------------------------------------------------------------------------
0001CE1E                            Map_obj21:
0001CE1E                            	include "_maps\obj21.asm"
0001CE1E                            ; ---------------------------------------------------------------------------
0001CE1E                            ; Sprite mappings - SCORE, TIME, RINGS
0001CE1E                            ; ---------------------------------------------------------------------------
0001CE1E 0000 0000                  		dc.w byte_1C5BC-Map_obj21, byte_1C5F0-Map_obj21
0001CE22 0000 0000                  		dc.w byte_1C624-Map_obj21, byte_1C658-Map_obj21
0001CE26 0A                         byte_1C5BC:	dc.b $A
0001CE27 800D 8000 00               		dc.b $80, $D, $80, 0, 0
0001CE2C 800D 8018 20               		dc.b $80, $D, $80, $18,	$20
0001CE31 800D 8020 40               		dc.b $80, $D, $80, $20,	$40
0001CE36 900D 8010 00               		dc.b $90, $D, $80, $10,	0
0001CE3B 900D 8028 28               		dc.b $90, $D, $80, $28,	$28
0001CE40 A00D 8008 00               		dc.b $A0, $D, $80, 8, 0
0001CE45 A001 8000 20               		dc.b $A0, 1, $80, 0, $20
0001CE4A A009 8030 30               		dc.b $A0, 9, $80, $30, $30
0001CE4F 4005 810A 00               		dc.b $40, 5, $81, $A, 0
0001CE54 400D 810E 10               		dc.b $40, $D, $81, $E, $10
0001CE59 00                         		dc.b 0
0001CE5A 0A                         byte_1C5F0:	dc.b $A
0001CE5B 800D 8000 00               		dc.b $80, $D, $80, 0, 0
0001CE60 800D 8018 20               		dc.b $80, $D, $80, $18,	$20
0001CE65 800D 8020 40               		dc.b $80, $D, $80, $20,	$40
0001CE6A 900D 8010 00               		dc.b $90, $D, $80, $10,	0
0001CE6F 900D 8028 28               		dc.b $90, $D, $80, $28,	$28
0001CE74 A00D A008 00               		dc.b $A0, $D, $A0, 8, 0
0001CE79 A001 A000 20               		dc.b $A0, 1, $A0, 0, $20
0001CE7E A009 8030 30               		dc.b $A0, 9, $80, $30, $30
0001CE83 4005 810A 00               		dc.b $40, 5, $81, $A, 0
0001CE88 400D 810E 10               		dc.b $40, $D, $81, $E, $10
0001CE8D 00                         		dc.b 0
0001CE8E 0A                         byte_1C624:	dc.b $A
0001CE8F 800D 8000 00               		dc.b $80, $D, $80, 0, 0
0001CE94 800D 8018 20               		dc.b $80, $D, $80, $18,	$20
0001CE99 800D 8020 40               		dc.b $80, $D, $80, $20,	$40
0001CE9E 900D A010 00               		dc.b $90, $D, $A0, $10,	0
0001CEA3 900D 8028 28               		dc.b $90, $D, $80, $28,	$28
0001CEA8 A00D 8008 00               		dc.b $A0, $D, $80, 8, 0
0001CEAD A001 8000 20               		dc.b $A0, 1, $80, 0, $20
0001CEB2 A009 8030 30               		dc.b $A0, 9, $80, $30, $30
0001CEB7 4005 810A 00               		dc.b $40, 5, $81, $A, 0
0001CEBC 400D 810E 10               		dc.b $40, $D, $81, $E, $10
0001CEC1 00                         		dc.b 0
0001CEC2 0A                         byte_1C658:	dc.b $A
0001CEC3 800D 8000 00               		dc.b $80, $D, $80, 0, 0
0001CEC8 800D 8018 20               		dc.b $80, $D, $80, $18,	$20
0001CECD 800D 8020 40               		dc.b $80, $D, $80, $20,	$40
0001CED2 900D A010 00               		dc.b $90, $D, $A0, $10,	0
0001CED7 900D 8028 28               		dc.b $90, $D, $80, $28,	$28
0001CEDC A00D A008 00               		dc.b $A0, $D, $A0, 8, 0
0001CEE1 A001 A000 20               		dc.b $A0, 1, $A0, 0, $20
0001CEE6 A009 8030 30               		dc.b $A0, 9, $80, $30, $30
0001CEEB 4005 810A 00               		dc.b $40, 5, $81, $A, 0
0001CEF0 400D 810E 10               		dc.b $40, $D, $81, $E, $10
0001CEF6 00                         		even
0001CEF6 00                         		even
0001CEF6                            
0001CEF6                            ; ---------------------------------------------------------------------------
0001CEF6                            ; Add points subroutine
0001CEF6                            ; ---------------------------------------------------------------------------
0001CEF6                            
0001CEF6                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0001CEF6                            
0001CEF6                            
0001CEF6                            AddPoints:
0001CEF6 11FC 0001 FE1F             		move.b	#1,($FFFFFE1F).w ; set score counter to	update
0001CEFC 45F8 FFC0                  		lea	($FFFFFFC0).w,a2
0001CF00 47F8 FE26                  		lea	($FFFFFE26).w,a3
0001CF04 D193                       		add.l	d0,(a3)		; add d0*10 to the score
0001CF06 223C 000F 423F             		move.l	#999999,d1
0001CF0C B293                       		cmp.l	(a3),d1		; is #999999 higher than the score?
0001CF0E 6200 0000                  		bhi.w	loc_1C6AC	; if yes, branch
0001CF12 2681                       		move.l	d1,(a3)		; reset	score to #999999
0001CF14 2481                       		move.l	d1,(a2)
0001CF16                            
0001CF16                            loc_1C6AC:
0001CF16 2013                       		move.l	(a3),d0
0001CF18 B092                       		cmp.l	(a2),d0
0001CF1A 6500 0000                  		bcs.w	locret_1C6B6
0001CF1E 2480                       		move.l	d0,(a2)
0001CF20                            
0001CF20                            locret_1C6B6:
0001CF20 4E75                       		rts	
0001CF22                            ; End of function AddPoints
0001CF22                            
0001CF22                            ; ---------------------------------------------------------------------------
0001CF22                            ; Subroutine to	update the HUD
0001CF22                            ; ---------------------------------------------------------------------------
0001CF22                            
0001CF22                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0001CF22                            
0001CF22                            
0001CF22                            HudUpdate:
0001CF22 4A78 FFFA                  		tst.w	($FFFFFFFA).w	; is debug mode	on?
0001CF26 6600 0000                  		bne.w	HudDebug	; if yes, branch
0001CF2A 4A38 FE1F                  		tst.b	($FFFFFE1F).w	; does the score need updating?
0001CF2E 6700                       		beq.s	Hud_ChkRings	; if not, branch
0001CF30 4238 FE1F                  		clr.b	($FFFFFE1F).w
0001CF34 203C 5C80 0003             		move.l	#$5C800003,d0	; set VRAM address
0001CF3A 2238 FE26                  		move.l	($FFFFFE26).w,d1 ; load	score
0001CF3E 6100 0000                  		bsr.w	Hud_Score
0001CF42                            
0001CF42                            Hud_ChkRings:
0001CF42 4A38 FE1D                  		tst.b	($FFFFFE1D).w	; does the ring	counter	need updating?
0001CF46 6700                       		beq.s	Hud_ChkTime	; if not, branch
0001CF48 6A00                       		bpl.s	loc_1C6E4
0001CF4A 6100 0000                  		bsr.w	Hud_LoadZero
0001CF4E                            
0001CF4E                            loc_1C6E4:
0001CF4E 4238 FE1D                  		clr.b	($FFFFFE1D).w
0001CF52 203C 5F40 0003             		move.l	#$5F400003,d0	; set VRAM address
0001CF58 7200                       		moveq	#0,d1
0001CF5A 3238 FE20                  		move.w	($FFFFFE20).w,d1 ; load	number of rings
0001CF5E 6100 0000                  		bsr.w	Hud_Rings
0001CF62                            
0001CF62                            Hud_ChkTime:
0001CF62 4A38 FE1E                  		tst.b	($FFFFFE1E).w	; does the time	need updating?
0001CF66 6700                       		beq.s	Hud_ChkLives	; if not, branch
0001CF68 4A78 F63A                  		tst.w	($FFFFF63A).w	; is the game paused?
0001CF6C 6600                       		bne.s	Hud_ChkLives	; if yes, branch
0001CF6E 43F8 FE22                  		lea	($FFFFFE22).w,a1
0001CF72 0C99 0009 3B3B             		cmpi.l	#$93B3B,(a1)+	; is the time 9.59?
0001CF78 6700                       		beq.s	TimeOver	; if yes, branch
0001CF7A 5221                       		addq.b	#1,-(a1)
0001CF7C 0C11 003C                  		cmpi.b	#60,(a1)
0001CF80 6500                       		bcs.s	Hud_ChkLives
0001CF82 12BC 0000                  		move.b	#0,(a1)
0001CF86 5221                       		addq.b	#1,-(a1)
0001CF88 0C11 003C                  		cmpi.b	#60,(a1)
0001CF8C 6500                       		bcs.s	loc_1C734
0001CF8E 12BC 0000                  		move.b	#0,(a1)
0001CF92 5221                       		addq.b	#1,-(a1)
0001CF94 0C11 0009                  		cmpi.b	#9,(a1)
0001CF98 6500                       		bcs.s	loc_1C734
0001CF9A 12BC 0009                  		move.b	#9,(a1)
0001CF9E                            
0001CF9E                            loc_1C734:
0001CF9E 203C 5E40 0003             		move.l	#$5E400003,d0
0001CFA4 7200                       		moveq	#0,d1
0001CFA6 1238 FE23                  		move.b	($FFFFFE23).w,d1 ; load	minutes
0001CFAA 6100 0000                  		bsr.w	Hud_Mins
0001CFAE 203C 5EC0 0003             		move.l	#$5EC00003,d0
0001CFB4 7200                       		moveq	#0,d1
0001CFB6 1238 FE24                  		move.b	($FFFFFE24).w,d1 ; load	seconds
0001CFBA 6100 0000                  		bsr.w	Hud_Secs
0001CFBE                            
0001CFBE                            Hud_ChkLives:
0001CFBE 4A38 FE1C                  		tst.b	($FFFFFE1C).w	; does the lives counter need updating?
0001CFC2 6700                       		beq.s	Hud_ChkBonus	; if not, branch
0001CFC4 4238 FE1C                  		clr.b	($FFFFFE1C).w
0001CFC8 6100 0000                  		bsr.w	Hud_Lives
0001CFCC                            
0001CFCC                            Hud_ChkBonus:
0001CFCC 4A38 F7D6                  		tst.b	($FFFFF7D6).w	; do time/ring bonus counters need updating?
0001CFD0 6700                       		beq.s	Hud_End		; if not, branch
0001CFD2 4238 F7D6                  		clr.b	($FFFFF7D6).w
0001CFD6 23FC 6E00 0002 00C0 0004   		move.l	#$6E000002,($C00004).l
0001CFE0 7200                       		moveq	#0,d1
0001CFE2 3238 F7D2                  		move.w	($FFFFF7D2).w,d1 ; load	time bonus
0001CFE6 6100 0000                  		bsr.w	Hud_TimeRingBonus
0001CFEA 7200                       		moveq	#0,d1
0001CFEC 3238 F7D4                  		move.w	($FFFFF7D4).w,d1 ; load	ring bonus
0001CFF0 6100 0000                  		bsr.w	Hud_TimeRingBonus
0001CFF4                            
0001CFF4                            Hud_End:
0001CFF4 4E75                       		rts	
0001CFF6                            ; ===========================================================================
0001CFF6                            
0001CFF6                            TimeOver:				; XREF: Hud_ChkTime
0001CFF6 4238 FE1E                  		clr.b	($FFFFFE1E).w
0001CFFA 41F8 D000                  		lea	($FFFFD000).w,a0
0001CFFE 2448                       		movea.l	a0,a2
0001D000 6100 E908                  		bsr.w	KillSonic
0001D004 11FC 0001 FE1A             		move.b	#1,($FFFFFE1A).w
0001D00A 4E75                       		rts	
0001D00C                            ; ===========================================================================
0001D00C                            
0001D00C                            HudDebug:				; XREF: HudUpdate
0001D00C 6100 0000                  		bsr.w	HudDb_XY
0001D010 4A38 FE1D                  		tst.b	($FFFFFE1D).w	; does the ring	counter	need updating?
0001D014 6700                       		beq.s	HudDb_ObjCount	; if not, branch
0001D016 6A00                       		bpl.s	HudDb_Rings
0001D018 6100 0000                  		bsr.w	Hud_LoadZero
0001D01C                            
0001D01C                            HudDb_Rings:
0001D01C 4238 FE1D                  		clr.b	($FFFFFE1D).w
0001D020 203C 5F40 0003             		move.l	#$5F400003,d0	; set VRAM address
0001D026 7200                       		moveq	#0,d1
0001D028 3238 FE20                  		move.w	($FFFFFE20).w,d1 ; load	number of rings
0001D02C 6100 0000                  		bsr.w	Hud_Rings
0001D030                            
0001D030                            HudDb_ObjCount:
0001D030 203C 5EC0 0003             		move.l	#$5EC00003,d0	; set VRAM address
0001D036 7200                       		moveq	#0,d1
0001D038 1238 F62C                  		move.b	($FFFFF62C).w,d1 ; load	"number	of objects" counter
0001D03C 6100 0000                  		bsr.w	Hud_Secs
0001D040 4A38 FE1C                  		tst.b	($FFFFFE1C).w	; does the lives counter need updating?
0001D044 6700                       		beq.s	HudDb_ChkBonus	; if not, branch
0001D046 4238 FE1C                  		clr.b	($FFFFFE1C).w
0001D04A 6100 0000                  		bsr.w	Hud_Lives
0001D04E                            
0001D04E                            HudDb_ChkBonus:
0001D04E 4A38 F7D6                  		tst.b	($FFFFF7D6).w	; does the ring/time bonus counter need	updating?
0001D052 6700                       		beq.s	HudDb_End	; if not, branch
0001D054 4238 F7D6                  		clr.b	($FFFFF7D6).w
0001D058 23FC 6E00 0002 00C0 0004   		move.l	#$6E000002,($C00004).l ; set VRAM address
0001D062 7200                       		moveq	#0,d1
0001D064 3238 F7D2                  		move.w	($FFFFF7D2).w,d1 ; load	time bonus
0001D068 6100 0000                  		bsr.w	Hud_TimeRingBonus
0001D06C 7200                       		moveq	#0,d1
0001D06E 3238 F7D4                  		move.w	($FFFFF7D4).w,d1 ; load	ring bonus
0001D072 6100 0000                  		bsr.w	Hud_TimeRingBonus
0001D076                            
0001D076                            HudDb_End:
0001D076 4E75                       		rts	
0001D078                            ; End of function HudUpdate
0001D078                            
0001D078                            ; ---------------------------------------------------------------------------
0001D078                            ; Subroutine to	load "0" on the	HUD
0001D078                            ; ---------------------------------------------------------------------------
0001D078                            
0001D078                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0001D078                            
0001D078                            
0001D078                            Hud_LoadZero:				; XREF: HudUpdate
0001D078 23FC 5F40 0003 00C0 0004   		move.l	#$5F400003,($C00004).l
0001D082 45FA 0000                  		lea	Hud_TilesZero(pc),a2
0001D086 343C 0002                  		move.w	#2,d2
0001D08A 6000                       		bra.s	loc_1C83E
0001D08C                            ; End of function Hud_LoadZero
0001D08C                            
0001D08C                            ; ---------------------------------------------------------------------------
0001D08C                            ; Subroutine to	load uncompressed HUD patterns ("E", "0", colon)
0001D08C                            ; ---------------------------------------------------------------------------
0001D08C                            
0001D08C                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0001D08C                            
0001D08C                            
0001D08C                            Hud_Base:				; XREF: Level; SS_EndLoop; EndingSequence
0001D08C 4DF9 00C0 0000             		lea	($C00000).l,a6
0001D092 6100 0000                  		bsr.w	Hud_Lives
0001D096 23FC 5C40 0003 00C0 0004   		move.l	#$5C400003,($C00004).l
0001D0A0 45FA 0000                  		lea	Hud_TilesBase(pc),a2
0001D0A4 343C 000E                  		move.w	#$E,d2
0001D0A8                            
0001D0A8                            loc_1C83E:				; XREF: Hud_LoadZero
0001D0A8 43FA 0000                  		lea	Art_Hud(pc),a1
0001D0AC                            
0001D0AC                            loc_1C842:
0001D0AC 323C 000F                  		move.w	#$F,d1
0001D0B0 101A                       		move.b	(a2)+,d0
0001D0B2 6B00                       		bmi.s	loc_1C85E
0001D0B4 4880                       		ext.w	d0
0001D0B6 EB48                       		lsl.w	#5,d0
0001D0B8 47F1 0000                  		lea	(a1,d0.w),a3
0001D0BC                            
0001D0BC                            loc_1C852:
0001D0BC 2C9B                       		move.l	(a3)+,(a6)
0001D0BE 51C9 FFFC                  		dbf	d1,loc_1C852
0001D0C2                            
0001D0C2                            loc_1C858:
0001D0C2 51CA FFE8                  		dbf	d2,loc_1C842
0001D0C6                            
0001D0C6 4E75                       		rts	
0001D0C8                            ; ===========================================================================
0001D0C8                            
0001D0C8                            loc_1C85E:
0001D0C8 2CBC 0000 0000             		move.l	#0,(a6)
0001D0CE 51C9 FFF8                  		dbf	d1,loc_1C85E
0001D0D2                            
0001D0D2 60EE                       		bra.s	loc_1C858
0001D0D4                            ; End of function Hud_Base
0001D0D4                            
0001D0D4                            ; ===========================================================================
0001D0D4 16FF FFFF FFFF FF00 0014+  Hud_TilesBase:	dc.b $16, $FF, $FF, $FF, $FF, $FF, $FF,	0, 0, $14, 0, 0
0001D0E0 FFFF 0000                  Hud_TilesZero:	dc.b $FF, $FF, 0, 0
0001D0E4                            ; ---------------------------------------------------------------------------
0001D0E4                            ; Subroutine to	load debug mode	numbers	patterns
0001D0E4                            ; ---------------------------------------------------------------------------
0001D0E4                            
0001D0E4                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0001D0E4                            
0001D0E4                            
0001D0E4                            HudDb_XY:				; XREF: HudDebug
0001D0E4 23FC 5C40 0003 00C0 0004   		move.l	#$5C400003,($C00004).l ; set VRAM address
0001D0EE 3238 F700                  		move.w	($FFFFF700).w,d1 ; load	camera x-position
0001D0F2 4841                       		swap	d1
0001D0F4 3238 D008                  		move.w	($FFFFD008).w,d1 ; load	Sonic's x-position
0001D0F8 6100                       		bsr.s	HudDb_XY2
0001D0FA 3238 F704                  		move.w	($FFFFF704).w,d1 ; load	camera y-position
0001D0FE 4841                       		swap	d1
0001D100 3238 D00C                  		move.w	($FFFFD00C).w,d1 ; load	Sonic's y-position
0001D104                            ; End of function HudDb_XY
0001D104                            
0001D104                            
0001D104                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0001D104                            
0001D104                            
0001D104                            HudDb_XY2:
0001D104 7C07                       		moveq	#7,d6
0001D106 43F9 0000 05F4             		lea	(Art_Text).l,a1
0001D10C                            
0001D10C                            HudDb_XYLoop:
0001D10C E959                       		rol.w	#4,d1
0001D10E 3401                       		move.w	d1,d2
0001D110 0242 000F                  		andi.w	#$F,d2
0001D114 0C42 000A                  		cmpi.w	#$A,d2
0001D118 6500                       		bcs.s	loc_1C8B2
0001D11A 5E42                       		addq.w	#7,d2
0001D11C                            
0001D11C                            loc_1C8B2:
0001D11C EB4A                       		lsl.w	#5,d2
0001D11E 47F1 2000                  		lea	(a1,d2.w),a3
0001D122 2C9B                       		move.l	(a3)+,(a6)
0001D124 2C9B                       		move.l	(a3)+,(a6)
0001D126 2C9B                       		move.l	(a3)+,(a6)
0001D128 2C9B                       		move.l	(a3)+,(a6)
0001D12A 2C9B                       		move.l	(a3)+,(a6)
0001D12C 2C9B                       		move.l	(a3)+,(a6)
0001D12E 2C9B                       		move.l	(a3)+,(a6)
0001D130 2C9B                       		move.l	(a3)+,(a6)
0001D132 4841                       		swap	d1
0001D134 51CE FFD6                  		dbf	d6,HudDb_XYLoop	; repeat 7 more	times
0001D138                            
0001D138 4E75                       		rts	
0001D13A                            ; End of function HudDb_XY2
0001D13A                            
0001D13A                            ; ---------------------------------------------------------------------------
0001D13A                            ; Subroutine to	load rings numbers patterns
0001D13A                            ; ---------------------------------------------------------------------------
0001D13A                            
0001D13A                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0001D13A                            
0001D13A                            
0001D13A                            Hud_Rings:				; XREF: HudUpdate
0001D13A 45F9 0000 0000             		lea	(Hud_100).l,a2
0001D140 7C02                       		moveq	#2,d6
0001D142 6000                       		bra.s	Hud_LoadArt
0001D144                            ; End of function Hud_Rings
0001D144                            
0001D144                            ; ---------------------------------------------------------------------------
0001D144                            ; Subroutine to	load score numbers patterns
0001D144                            ; ---------------------------------------------------------------------------
0001D144                            
0001D144                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0001D144                            
0001D144                            
0001D144                            Hud_Score:				; XREF: HudUpdate
0001D144 45F9 0000 0000             		lea	(Hud_100000).l,a2
0001D14A 7C05                       		moveq	#5,d6
0001D14C                            
0001D14C                            Hud_LoadArt:
0001D14C 7800                       		moveq	#0,d4
0001D14E 43FA 0000                  		lea	Art_Hud(pc),a1
0001D152                            
0001D152                            Hud_ScoreLoop:
0001D152 7400                       		moveq	#0,d2
0001D154 261A                       		move.l	(a2)+,d3
0001D156                            
0001D156                            loc_1C8EC:
0001D156 9283                       		sub.l	d3,d1
0001D158 6500                       		bcs.s	loc_1C8F4
0001D15A 5242                       		addq.w	#1,d2
0001D15C 60F8                       		bra.s	loc_1C8EC
0001D15E                            ; ===========================================================================
0001D15E                            
0001D15E                            loc_1C8F4:
0001D15E D283                       		add.l	d3,d1
0001D160 4A42                       		tst.w	d2
0001D162 6700                       		beq.s	loc_1C8FE
0001D164 383C 0001                  		move.w	#1,d4
0001D168                            
0001D168                            loc_1C8FE:
0001D168 4A44                       		tst.w	d4
0001D16A 6700                       		beq.s	loc_1C92C
0001D16C ED4A                       		lsl.w	#6,d2
0001D16E 2D40 0004                  		move.l	d0,4(a6)
0001D172 47F1 2000                  		lea	(a1,d2.w),a3
0001D176 2C9B                       		move.l	(a3)+,(a6)
0001D178 2C9B                       		move.l	(a3)+,(a6)
0001D17A 2C9B                       		move.l	(a3)+,(a6)
0001D17C 2C9B                       		move.l	(a3)+,(a6)
0001D17E 2C9B                       		move.l	(a3)+,(a6)
0001D180 2C9B                       		move.l	(a3)+,(a6)
0001D182 2C9B                       		move.l	(a3)+,(a6)
0001D184 2C9B                       		move.l	(a3)+,(a6)
0001D186 2C9B                       		move.l	(a3)+,(a6)
0001D188 2C9B                       		move.l	(a3)+,(a6)
0001D18A 2C9B                       		move.l	(a3)+,(a6)
0001D18C 2C9B                       		move.l	(a3)+,(a6)
0001D18E 2C9B                       		move.l	(a3)+,(a6)
0001D190 2C9B                       		move.l	(a3)+,(a6)
0001D192 2C9B                       		move.l	(a3)+,(a6)
0001D194 2C9B                       		move.l	(a3)+,(a6)
0001D196                            
0001D196                            loc_1C92C:
0001D196 0680 0040 0000             		addi.l	#$400000,d0
0001D19C 51CE FFB4                  		dbf	d6,Hud_ScoreLoop
0001D1A0                            
0001D1A0 4E75                       		rts	
0001D1A2                            ; End of function Hud_Score
0001D1A2                            
0001D1A2                            ; ---------------------------------------------------------------------------
0001D1A2                            ; Subroutine to	load countdown numbers on the continue screen
0001D1A2                            ; ---------------------------------------------------------------------------
0001D1A2                            
0001D1A2                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0001D1A2                            
0001D1A2                            
0001D1A2                            ContScrCounter:				; XREF: ContinueScreen
0001D1A2 23FC 5F80 0003 00C0 0004   		move.l	#$5F800003,($C00004).l ; set VRAM address
0001D1AC 4DF9 00C0 0000             		lea	($C00000).l,a6
0001D1B2 45F9 0000 0000             		lea	(Hud_10).l,a2
0001D1B8 7C01                       		moveq	#1,d6
0001D1BA 7800                       		moveq	#0,d4
0001D1BC 43FA 0000                  		lea	Art_Hud(pc),a1 ; load numbers patterns
0001D1C0                            
0001D1C0                            ContScr_Loop:
0001D1C0 7400                       		moveq	#0,d2
0001D1C2 261A                       		move.l	(a2)+,d3
0001D1C4                            
0001D1C4                            loc_1C95A:
0001D1C4 9283                       		sub.l	d3,d1
0001D1C6 6500                       		bcs.s	loc_1C962
0001D1C8 5242                       		addq.w	#1,d2
0001D1CA 60F8                       		bra.s	loc_1C95A
0001D1CC                            ; ===========================================================================
0001D1CC                            
0001D1CC                            loc_1C962:
0001D1CC D283                       		add.l	d3,d1
0001D1CE ED4A                       		lsl.w	#6,d2
0001D1D0 47F1 2000                  		lea	(a1,d2.w),a3
0001D1D4 2C9B                       		move.l	(a3)+,(a6)
0001D1D6 2C9B                       		move.l	(a3)+,(a6)
0001D1D8 2C9B                       		move.l	(a3)+,(a6)
0001D1DA 2C9B                       		move.l	(a3)+,(a6)
0001D1DC 2C9B                       		move.l	(a3)+,(a6)
0001D1DE 2C9B                       		move.l	(a3)+,(a6)
0001D1E0 2C9B                       		move.l	(a3)+,(a6)
0001D1E2 2C9B                       		move.l	(a3)+,(a6)
0001D1E4 2C9B                       		move.l	(a3)+,(a6)
0001D1E6 2C9B                       		move.l	(a3)+,(a6)
0001D1E8 2C9B                       		move.l	(a3)+,(a6)
0001D1EA 2C9B                       		move.l	(a3)+,(a6)
0001D1EC 2C9B                       		move.l	(a3)+,(a6)
0001D1EE 2C9B                       		move.l	(a3)+,(a6)
0001D1F0 2C9B                       		move.l	(a3)+,(a6)
0001D1F2 2C9B                       		move.l	(a3)+,(a6)
0001D1F4 51CE FFCA                  		dbf	d6,ContScr_Loop	; repeat 1 more	time
0001D1F8                            
0001D1F8 4E75                       		rts	
0001D1FA                            ; End of function ContScrCounter
0001D1FA                            
0001D1FA                            ; ===========================================================================
0001D1FA                            ; ---------------------------------------------------------------------------
0001D1FA                            ; HUD counter sizes
0001D1FA                            ; ---------------------------------------------------------------------------
0001D1FA 0001 86A0                  Hud_100000:	dc.l 100000		; XREF: Hud_Score
0001D1FE 0000 2710                  Hud_10000:	dc.l 10000
0001D202 0000 03E8                  Hud_1000:	dc.l 1000		; XREF: Hud_TimeRingBonus
0001D206 0000 0064                  Hud_100:	dc.l 100		; XREF: Hud_Rings
0001D20A 0000 000A                  Hud_10:		dc.l 10			; XREF: ContScrCounter; Hud_Secs; Hud_Lives
0001D20E 0000 0001                  Hud_1:		dc.l 1			; XREF: Hud_Mins
0001D212                            
0001D212                            ; ---------------------------------------------------------------------------
0001D212                            ; Subroutine to	load time numbers patterns
0001D212                            ; ---------------------------------------------------------------------------
0001D212                            
0001D212                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0001D212                            
0001D212                            
0001D212                            Hud_Mins:				; XREF: Hud_ChkTime
0001D212 45F9 0001 D20E             		lea	(Hud_1).l,a2
0001D218 7C00                       		moveq	#0,d6
0001D21A 6000                       		bra.s	loc_1C9BA
0001D21C                            ; End of function Hud_Mins
0001D21C                            
0001D21C                            
0001D21C                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0001D21C                            
0001D21C                            
0001D21C                            Hud_Secs:				; XREF: Hud_ChkTime
0001D21C 45F9 0001 D20A             		lea	(Hud_10).l,a2
0001D222 7C01                       		moveq	#1,d6
0001D224                            
0001D224                            loc_1C9BA:
0001D224 7800                       		moveq	#0,d4
0001D226 43FA 0000                  		lea	Art_Hud(pc),a1
0001D22A                            
0001D22A                            Hud_TimeLoop:
0001D22A 7400                       		moveq	#0,d2
0001D22C 261A                       		move.l	(a2)+,d3
0001D22E                            
0001D22E                            loc_1C9C4:
0001D22E 9283                       		sub.l	d3,d1
0001D230 6500                       		bcs.s	loc_1C9CC
0001D232 5242                       		addq.w	#1,d2
0001D234 60F8                       		bra.s	loc_1C9C4
0001D236                            ; ===========================================================================
0001D236                            
0001D236                            loc_1C9CC:
0001D236 D283                       		add.l	d3,d1
0001D238 4A42                       		tst.w	d2
0001D23A 6700                       		beq.s	loc_1C9D6
0001D23C 383C 0001                  		move.w	#1,d4
0001D240                            
0001D240                            loc_1C9D6:
0001D240 ED4A                       		lsl.w	#6,d2
0001D242 2D40 0004                  		move.l	d0,4(a6)
0001D246 47F1 2000                  		lea	(a1,d2.w),a3
0001D24A 2C9B                       		move.l	(a3)+,(a6)
0001D24C 2C9B                       		move.l	(a3)+,(a6)
0001D24E 2C9B                       		move.l	(a3)+,(a6)
0001D250 2C9B                       		move.l	(a3)+,(a6)
0001D252 2C9B                       		move.l	(a3)+,(a6)
0001D254 2C9B                       		move.l	(a3)+,(a6)
0001D256 2C9B                       		move.l	(a3)+,(a6)
0001D258 2C9B                       		move.l	(a3)+,(a6)
0001D25A 2C9B                       		move.l	(a3)+,(a6)
0001D25C 2C9B                       		move.l	(a3)+,(a6)
0001D25E 2C9B                       		move.l	(a3)+,(a6)
0001D260 2C9B                       		move.l	(a3)+,(a6)
0001D262 2C9B                       		move.l	(a3)+,(a6)
0001D264 2C9B                       		move.l	(a3)+,(a6)
0001D266 2C9B                       		move.l	(a3)+,(a6)
0001D268 2C9B                       		move.l	(a3)+,(a6)
0001D26A 0680 0040 0000             		addi.l	#$400000,d0
0001D270 51CE FFB8                  		dbf	d6,Hud_TimeLoop
0001D274                            
0001D274 4E75                       		rts	
0001D276                            ; End of function Hud_Secs
0001D276                            
0001D276                            ; ---------------------------------------------------------------------------
0001D276                            ; Subroutine to	load time/ring bonus numbers patterns
0001D276                            ; ---------------------------------------------------------------------------
0001D276                            
0001D276                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0001D276                            
0001D276                            
0001D276                            Hud_TimeRingBonus:			; XREF: Hud_ChkBonus
0001D276 45F9 0001 D202             		lea	(Hud_1000).l,a2
0001D27C 7C03                       		moveq	#3,d6
0001D27E 7800                       		moveq	#0,d4
0001D280 43FA 0000                  		lea	Art_Hud(pc),a1
0001D284                            
0001D284                            Hud_BonusLoop:
0001D284 7400                       		moveq	#0,d2
0001D286 261A                       		move.l	(a2)+,d3
0001D288                            
0001D288                            loc_1CA1E:
0001D288 9283                       		sub.l	d3,d1
0001D28A 6500                       		bcs.s	loc_1CA26
0001D28C 5242                       		addq.w	#1,d2
0001D28E 60F8                       		bra.s	loc_1CA1E
0001D290                            ; ===========================================================================
0001D290                            
0001D290                            loc_1CA26:
0001D290 D283                       		add.l	d3,d1
0001D292 4A42                       		tst.w	d2
0001D294 6700                       		beq.s	loc_1CA30
0001D296 383C 0001                  		move.w	#1,d4
0001D29A                            
0001D29A                            loc_1CA30:
0001D29A 4A44                       		tst.w	d4
0001D29C 6700                       		beq.s	Hud_ClrBonus
0001D29E ED4A                       		lsl.w	#6,d2
0001D2A0 47F1 2000                  		lea	(a1,d2.w),a3
0001D2A4 2C9B                       		move.l	(a3)+,(a6)
0001D2A6 2C9B                       		move.l	(a3)+,(a6)
0001D2A8 2C9B                       		move.l	(a3)+,(a6)
0001D2AA 2C9B                       		move.l	(a3)+,(a6)
0001D2AC 2C9B                       		move.l	(a3)+,(a6)
0001D2AE 2C9B                       		move.l	(a3)+,(a6)
0001D2B0 2C9B                       		move.l	(a3)+,(a6)
0001D2B2 2C9B                       		move.l	(a3)+,(a6)
0001D2B4 2C9B                       		move.l	(a3)+,(a6)
0001D2B6 2C9B                       		move.l	(a3)+,(a6)
0001D2B8 2C9B                       		move.l	(a3)+,(a6)
0001D2BA 2C9B                       		move.l	(a3)+,(a6)
0001D2BC 2C9B                       		move.l	(a3)+,(a6)
0001D2BE 2C9B                       		move.l	(a3)+,(a6)
0001D2C0 2C9B                       		move.l	(a3)+,(a6)
0001D2C2 2C9B                       		move.l	(a3)+,(a6)
0001D2C4                            
0001D2C4                            loc_1CA5A:
0001D2C4 51CE FFBE                  		dbf	d6,Hud_BonusLoop ; repeat 3 more times
0001D2C8                            
0001D2C8 4E75                       		rts	
0001D2CA                            ; ===========================================================================
0001D2CA                            
0001D2CA                            Hud_ClrBonus:
0001D2CA 7A0F                       		moveq	#$F,d5
0001D2CC                            
0001D2CC                            Hud_ClrBonusLoop:
0001D2CC 2CBC 0000 0000             		move.l	#0,(a6)
0001D2D2 51CD FFF8                  		dbf	d5,Hud_ClrBonusLoop
0001D2D6                            
0001D2D6 60EC                       		bra.s	loc_1CA5A
0001D2D8                            ; End of function Hud_TimeRingBonus
0001D2D8                            
0001D2D8                            ; ---------------------------------------------------------------------------
0001D2D8                            ; Subroutine to	load uncompressed lives	counter	patterns
0001D2D8                            ; ---------------------------------------------------------------------------
0001D2D8                            
0001D2D8                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0001D2D8                            
0001D2D8                            
0001D2D8                            Hud_Lives:				; XREF: Hud_ChkLives
0001D2D8 203C 7BA0 0003             		move.l	#$7BA00003,d0	; set VRAM address
0001D2DE 7200                       		moveq	#0,d1
0001D2E0 1238 FE12                  		move.b	($FFFFFE12).w,d1 ; load	number of lives
0001D2E4 45F9 0001 D20A             		lea	(Hud_10).l,a2
0001D2EA 7C01                       		moveq	#1,d6
0001D2EC 7800                       		moveq	#0,d4
0001D2EE 43FA 0000                  		lea	Art_LivesNums(pc),a1
0001D2F2                            
0001D2F2                            Hud_LivesLoop:
0001D2F2 2D40 0004                  		move.l	d0,4(a6)
0001D2F6 7400                       		moveq	#0,d2
0001D2F8 261A                       		move.l	(a2)+,d3
0001D2FA                            
0001D2FA                            loc_1CA90:
0001D2FA 9283                       		sub.l	d3,d1
0001D2FC 6500                       		bcs.s	loc_1CA98
0001D2FE 5242                       		addq.w	#1,d2
0001D300 60F8                       		bra.s	loc_1CA90
0001D302                            ; ===========================================================================
0001D302                            
0001D302                            loc_1CA98:
0001D302 D283                       		add.l	d3,d1
0001D304 4A42                       		tst.w	d2
0001D306 6700                       		beq.s	loc_1CAA2
0001D308 383C 0001                  		move.w	#1,d4
0001D30C                            
0001D30C                            loc_1CAA2:
0001D30C 4A44                       		tst.w	d4
0001D30E 6700                       		beq.s	Hud_ClrLives
0001D310                            
0001D310                            loc_1CAA6:
0001D310 EB4A                       		lsl.w	#5,d2
0001D312 47F1 2000                  		lea	(a1,d2.w),a3
0001D316 2C9B                       		move.l	(a3)+,(a6)
0001D318 2C9B                       		move.l	(a3)+,(a6)
0001D31A 2C9B                       		move.l	(a3)+,(a6)
0001D31C 2C9B                       		move.l	(a3)+,(a6)
0001D31E 2C9B                       		move.l	(a3)+,(a6)
0001D320 2C9B                       		move.l	(a3)+,(a6)
0001D322 2C9B                       		move.l	(a3)+,(a6)
0001D324 2C9B                       		move.l	(a3)+,(a6)
0001D326                            
0001D326                            loc_1CABC:
0001D326 0680 0040 0000             		addi.l	#$400000,d0
0001D32C 51CE FFC4                  		dbf	d6,Hud_LivesLoop ; repeat 1 more time
0001D330                            
0001D330 4E75                       		rts	
0001D332                            ; ===========================================================================
0001D332                            
0001D332                            Hud_ClrLives:
0001D332 4A46                       		tst.w	d6
0001D334 67DA                       		beq.s	loc_1CAA6
0001D336 7A07                       		moveq	#7,d5
0001D338                            
0001D338                            Hud_ClrLivesLoop:
0001D338 2CBC 0000 0000             		move.l	#0,(a6)
0001D33E 51CD FFF8                  		dbf	d5,Hud_ClrLivesLoop
0001D342 60E2                       		bra.s	loc_1CABC
0001D344                            ; End of function Hud_Lives
0001D344                            
0001D344                            ; ===========================================================================
0001D344                            Art_Hud:	incbin	artunc\HUD.bin		; 8x16 pixel numbers on HUD
0001D644                            		even
0001D644                            Art_LivesNums:	incbin	artunc\livescnt.bin	; 8x8 pixel numbers on lives counter
0001D784                            		even
0001D784                            ; ===========================================================================
0001D784                            ; ---------------------------------------------------------------------------
0001D784                            ; When debug mode is currently in use
0001D784                            ; ---------------------------------------------------------------------------
0001D784                            
0001D784                            DebugMode:				; XREF: Obj01; Obj09
0001D784 7000                       		moveq	#0,d0
0001D786 1038 FE08                  		move.b	($FFFFFE08).w,d0
0001D78A 323B 0000                  		move.w	Debug_Index(pc,d0.w),d1
0001D78E 4EFB 1000                  		jmp	Debug_Index(pc,d1.w)
0001D792                            ; ===========================================================================
0001D792 0000                       Debug_Index:	dc.w Debug_Main-Debug_Index
0001D794 0000                       		dc.w Debug_Skip-Debug_Index
0001D796                            ; ===========================================================================
0001D796                            
0001D796                            Debug_Main:				; XREF: Debug_Index
0001D796 5438 FE08                  		addq.b	#2,($FFFFFE08).w
0001D79A 31F8 F72C FEF0             		move.w	($FFFFF72C).w,($FFFFFEF0).w ; buffer level x-boundary
0001D7A0 31F8 F726 FEF2             		move.w	($FFFFF726).w,($FFFFFEF2).w ; buffer level y-boundary
0001D7A6 31FC 0000 F72C             		move.w	#0,($FFFFF72C).w
0001D7AC 31FC 0720 F726             		move.w	#$720,($FFFFF726).w
0001D7B2 0278 07FF D00C             		andi.w	#$7FF,($FFFFD00C).w
0001D7B8 0278 07FF F704             		andi.w	#$7FF,($FFFFF704).w
0001D7BE 0278 03FF F70C             		andi.w	#$3FF,($FFFFF70C).w
0001D7C4 117C 0000 001A             		move.b	#0,$1A(a0)
0001D7CA 117C 0000 001C             		move.b	#0,$1C(a0)
0001D7D0 0C38 0010 F600             		cmpi.b	#$10,($FFFFF600).w ; is	game mode = $10	(special stage)?
0001D7D6 6600                       		bne.s	Debug_Zone	; if not, branch
0001D7D8 31FC 0000 F782             		move.w	#0,($FFFFF782).w ; stop	special	stage rotating
0001D7DE 31FC 0000 F780             		move.w	#0,($FFFFF780).w ; make	special	stage "upright"
0001D7E4 7006                       		moveq	#6,d0		; use 6th debug	item list
0001D7E6 6000                       		bra.s	Debug_UseList
0001D7E8                            ; ===========================================================================
0001D7E8                            
0001D7E8                            Debug_Zone:
0001D7E8 7000                       		moveq	#0,d0
0001D7EA 1038 FE10                  		move.b	($FFFFFE10).w,d0
0001D7EE                            
0001D7EE                            Debug_UseList:
0001D7EE 45F9 0000 0000             		lea	(DebugList).l,a2
0001D7F4 D040                       		add.w	d0,d0
0001D7F6 D4F2 0000                  		adda.w	(a2,d0.w),a2
0001D7FA 3C1A                       		move.w	(a2)+,d6
0001D7FC BC38 FE06                  		cmp.b	($FFFFFE06).w,d6
0001D800 6200                       		bhi.s	loc_1CF9E
0001D802 11FC 0000 FE06             		move.b	#0,($FFFFFE06).w
0001D808                            
0001D808                            loc_1CF9E:
0001D808 6100 0000                  		bsr.w	Debug_ShowItem
0001D80C 11FC 000C FE0A             		move.b	#$C,($FFFFFE0A).w
0001D812 11FC 0001 FE0B             		move.b	#1,($FFFFFE0B).w
0001D818                            
0001D818                            Debug_Skip:				; XREF: Debug_Index
0001D818 7006                       		moveq	#6,d0
0001D81A 0C38 0010 F600             		cmpi.b	#$10,($FFFFF600).w
0001D820 6700                       		beq.s	loc_1CFBE
0001D822 7000                       		moveq	#0,d0
0001D824 1038 FE10                  		move.b	($FFFFFE10).w,d0
0001D828                            
0001D828                            loc_1CFBE:
0001D828 45F9 0000 0000             		lea	(DebugList).l,a2
0001D82E D040                       		add.w	d0,d0
0001D830 D4F2 0000                  		adda.w	(a2,d0.w),a2
0001D834 3C1A                       		move.w	(a2)+,d6
0001D836 6100 0000                  		bsr.w	Debug_Control
0001D83A 4EF9 0000 DD62             		jmp	DisplaySprite
0001D840                            
0001D840                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0001D840                            
0001D840                            
0001D840                            Debug_Control:
0001D840 7800                       		moveq	#0,d4
0001D842 323C 0001                  		move.w	#1,d1
0001D846 1838 F605                  		move.b	($FFFFF605).w,d4
0001D84A 0244 000F                  		andi.w	#$F,d4		; is up/down/left/right	pressed?
0001D84E 6600                       		bne.s	loc_1D018	; if yes, branch
0001D850 1038 F604                  		move.b	($FFFFF604).w,d0
0001D854 0240 000F                  		andi.w	#$F,d0
0001D858 6600                       		bne.s	loc_1D000
0001D85A 11FC 000C FE0A             		move.b	#$C,($FFFFFE0A).w
0001D860 11FC 000F FE0B             		move.b	#$F,($FFFFFE0B).w
0001D866 6000 0000                  		bra.w	Debug_BackItem
0001D86A                            ; ===========================================================================
0001D86A                            
0001D86A                            loc_1D000:
0001D86A 5338 FE0A                  		subq.b	#1,($FFFFFE0A).w
0001D86E 6600                       		bne.s	loc_1D01C
0001D870 11FC 0001 FE0A             		move.b	#1,($FFFFFE0A).w
0001D876 5238 FE0B                  		addq.b	#1,($FFFFFE0B).w
0001D87A 6600                       		bne.s	loc_1D018
0001D87C 11FC 00FF FE0B             		move.b	#-1,($FFFFFE0B).w
0001D882                            
0001D882                            loc_1D018:
0001D882 1838 F604                  		move.b	($FFFFF604).w,d4
0001D886                            
0001D886                            loc_1D01C:
0001D886 7200                       		moveq	#0,d1
0001D888 1238 FE0B                  		move.b	($FFFFFE0B).w,d1
0001D88C 5241                       		addq.w	#1,d1
0001D88E 4841                       		swap	d1
0001D890 E881                       		asr.l	#4,d1
0001D892 2428 000C                  		move.l	$C(a0),d2
0001D896 2628 0008                  		move.l	8(a0),d3
0001D89A 0804 0000                  		btst	#0,d4		; is up	being pressed?
0001D89E 6700                       		beq.s	loc_1D03C	; if not, branch
0001D8A0 9481                       		sub.l	d1,d2
0001D8A2 6400                       		bcc.s	loc_1D03C
0001D8A4 7400                       		moveq	#0,d2
0001D8A6                            
0001D8A6                            loc_1D03C:
0001D8A6 0804 0001                  		btst	#1,d4		; is down being	pressed?
0001D8AA 6700                       		beq.s	loc_1D052	; if not, branch
0001D8AC D481                       		add.l	d1,d2
0001D8AE 0C82 07FF 0000             		cmpi.l	#$7FF0000,d2
0001D8B4 6500                       		bcs.s	loc_1D052
0001D8B6 243C 07FF 0000             		move.l	#$7FF0000,d2
0001D8BC                            
0001D8BC                            loc_1D052:
0001D8BC 0804 0002                  		btst	#2,d4
0001D8C0 6700                       		beq.s	loc_1D05E
0001D8C2 9681                       		sub.l	d1,d3
0001D8C4 6400                       		bcc.s	loc_1D05E
0001D8C6 7600                       		moveq	#0,d3
0001D8C8                            
0001D8C8                            loc_1D05E:
0001D8C8 0804 0003                  		btst	#3,d4
0001D8CC 6700                       		beq.s	loc_1D066
0001D8CE D681                       		add.l	d1,d3
0001D8D0                            
0001D8D0                            loc_1D066:
0001D8D0 2142 000C                  		move.l	d2,$C(a0)
0001D8D4 2143 0008                  		move.l	d3,8(a0)
0001D8D8                            
0001D8D8                            Debug_BackItem:
0001D8D8 0838 0006 F604             		btst	#6,($FFFFF604).w ; is button A pressed?
0001D8DE 6700                       		beq.s	Debug_MakeItem	; if not, branch
0001D8E0 0838 0005 F605             		btst	#5,($FFFFF605).w ; is button C pressed?
0001D8E6 6700                       		beq.s	Debug_NextItem	; if not, branch
0001D8E8 5338 FE06                  		subq.b	#1,($FFFFFE06).w ; go back 1 item
0001D8EC 6400                       		bcc.s	Debug_NoLoop
0001D8EE DD38 FE06                  		add.b	d6,($FFFFFE06).w
0001D8F2 6000                       		bra.s	Debug_NoLoop
0001D8F4                            ; ===========================================================================
0001D8F4                            
0001D8F4                            Debug_NextItem:
0001D8F4 0838 0006 F605             		btst	#6,($FFFFF605).w ; is button A pressed?
0001D8FA 6700                       		beq.s	Debug_MakeItem	; if not, branch
0001D8FC 5238 FE06                  		addq.b	#1,($FFFFFE06).w ; go forwards 1 item
0001D900 BC38 FE06                  		cmp.b	($FFFFFE06).w,d6
0001D904 6200                       		bhi.s	Debug_NoLoop
0001D906 11FC 0000 FE06             		move.b	#0,($FFFFFE06).w ; loop	back to	first item
0001D90C                            
0001D90C                            Debug_NoLoop:
0001D90C 6000 0000                  		bra.w	Debug_ShowItem
0001D910                            ; ===========================================================================
0001D910                            
0001D910                            Debug_MakeItem:
0001D910 0838 0005 F605             		btst	#5,($FFFFF605).w ; is button C pressed?
0001D916 6700                       		beq.s	Debug_Exit	; if not, branch
0001D918 4EB9 0000 E1E8             		jsr	SingleObjLoad
0001D91E 6600                       		bne.s	Debug_Exit
0001D920 3368 0008 0008             		move.w	8(a0),8(a1)
0001D926 3368 000C 000C             		move.w	$C(a0),$C(a1)
0001D92C 12A8 0004                  		move.b	4(a0),0(a1)	; create object
0001D930 1368 0001 0001             		move.b	1(a0),1(a1)
0001D936 1368 0001 0022             		move.b	1(a0),$22(a1)
0001D93C 0229 007F 0022             		andi.b	#$7F,$22(a1)
0001D942 7000                       		moveq	#0,d0
0001D944 1038 FE06                  		move.b	($FFFFFE06).w,d0
0001D948 E748                       		lsl.w	#3,d0
0001D94A 1372 0004 0028             		move.b	4(a2,d0.w),$28(a1)
0001D950 4E75                       		rts	
0001D952                            ; ===========================================================================
0001D952                            
0001D952                            Debug_Exit:
0001D952 0838 0004 F605             		btst	#4,($FFFFF605).w ; is button B pressed?
0001D958 6700                       		beq.s	Debug_DoNothing	; if not, branch
0001D95A 7000                       		moveq	#0,d0
0001D95C 31C0 FE08                  		move.w	d0,($FFFFFE08).w ; deactivate debug mode
0001D960 21FC 0000 0000 D004        		move.l	#Map_Sonic,($FFFFD004).w
0001D968 31FC 0780 D002             		move.w	#$780,($FFFFD002).w
0001D96E 11C0 D01C                  		move.b	d0,($FFFFD01C).w
0001D972 3140 000A                  		move.w	d0,$A(a0)
0001D976 3140 000E                  		move.w	d0,$E(a0)
0001D97A 31F8 FEF0 F72C             		move.w	($FFFFFEF0).w,($FFFFF72C).w ; restore level boundaries
0001D980 31F8 FEF2 F726             		move.w	($FFFFFEF2).w,($FFFFF726).w
0001D986 0C38 0010 F600             		cmpi.b	#$10,($FFFFF600).w ; are you in	the special stage?
0001D98C 6600                       		bne.s	Debug_DoNothing	; if not, branch
0001D98E 4278 F780                  		clr.w	($FFFFF780).w
0001D992 31FC 0040 F782             		move.w	#$40,($FFFFF782).w ; set new level rotation speed
0001D998 21FC 0000 0000 D004        		move.l	#Map_Sonic,($FFFFD004).w
0001D9A0 31FC 0780 D002             		move.w	#$780,($FFFFD002).w
0001D9A6 11FC 0002 D01C             		move.b	#2,($FFFFD01C).w
0001D9AC 08F8 0002 D022             		bset	#2,($FFFFD022).w
0001D9B2 08F8 0001 D022             		bset	#1,($FFFFD022).w
0001D9B8                            
0001D9B8                            Debug_DoNothing:
0001D9B8 4E75                       		rts	
0001D9BA                            ; End of function Debug_Control
0001D9BA                            
0001D9BA                            
0001D9BA                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0001D9BA                            
0001D9BA                            
0001D9BA                            Debug_ShowItem:				; XREF: Debug_Main
0001D9BA 7000                       		moveq	#0,d0
0001D9BC 1038 FE06                  		move.b	($FFFFFE06).w,d0
0001D9C0 E748                       		lsl.w	#3,d0
0001D9C2 2172 0000 0004             		move.l	(a2,d0.w),4(a0)	; load mappings	for item
0001D9C8 3172 0006 0002             		move.w	6(a2,d0.w),2(a0) ; load	VRAM setting for item
0001D9CE 1172 0005 001A             		move.b	5(a2,d0.w),$1A(a0) ; load frame	number for item
0001D9D4 4E75                       		rts	
0001D9D6                            ; End of function Debug_ShowItem
0001D9D6                            
0001D9D6                            ; ===========================================================================
0001D9D6                            ; ---------------------------------------------------------------------------
0001D9D6                            ; Debug	list pointers
0001D9D6                            ; ---------------------------------------------------------------------------
0001D9D6                            DebugList:
0001D9D6                            	include "_inc\Debug list pointers.asm"
0001D9D6                            ; ---------------------------------------------------------------------------
0001D9D6                            ; Debug	list pointers
0001D9D6                            ; ---------------------------------------------------------------------------
0001D9D6 0000                       	dc.w Debug_GHZ-DebugList
0001D9D8 0000                       	dc.w Debug_LZ-DebugList
0001D9DA 0000                       	dc.w Debug_MZ-DebugList
0001D9DC 0000                       	dc.w Debug_SLZ-DebugList
0001D9DE 0000                       	dc.w Debug_SYZ-DebugList
0001D9E0 0000                       	dc.w Debug_SBZ-DebugList
0001D9E2 0000                       	dc.w Debug_Ending-DebugList
0001D9E2 0000                       	dc.w Debug_Ending-DebugList
0001D9E4                            
0001D9E4                            ; ---------------------------------------------------------------------------
0001D9E4                            ; Debug	list - Green Hill
0001D9E4                            ; ---------------------------------------------------------------------------
0001D9E4                            Debug_GHZ:
0001D9E4                            	include "_inc\Debug list - GHZ.asm"
0001D9E4                            ; ---------------------------------------------------------------------------
0001D9E4                            ; Debug	list - Green Hill
0001D9E4                            ; ---------------------------------------------------------------------------
0001D9E4 0010                       	dc.w $10			; number of items in list
0001D9E6 2500 A5C0                  	dc.l Map_obj25+$25000000	; mappings pointer, object type * 10^6
0001D9EA 0000 27B2                  	dc.b 0,	0, $27,	$B2		; subtype, frame, VRAM setting (2 bytes)
0001D9EE 2600 ABC6                  	dc.l Map_obj26+$26000000
0001D9F2 0000 0680                  	dc.b 0,	0, 6, $80
0001D9F6 1F00 9DB8                  	dc.l Map_obj1F+$1F000000
0001D9FA 0000 0400                  	dc.b 0,	0, 4, 0
0001D9FE 2200 A074                  	dc.l Map_obj22+$22000000
0001DA02 0000 0444                  	dc.b 0,	0, 4, $44
0001DA06 2B00 B23A                  	dc.l Map_obj2B+$2B000000
0001DA0A 0000 047B                  	dc.b 0,	0, 4, $7B
0001DA0E 3600 D74A                  	dc.l Map_obj36+$36000000
0001DA12 0000 051B                  	dc.b 0,	0, 5, $1B
0001DA16 1800 86D4                  	dc.l Map_obj18+$18000000
0001DA1A 0000 4000                  	dc.b 0,	0, $40,	0
0001DA1E 3B00 D870                  	dc.l Map_obj3B+$3B000000
0001DA22 0000 63D0                  	dc.b 0,	0, $63,	$D0
0001DA26 4000 FEFC                  	dc.l Map_obj40+$40000000
0001DA2A 0000 04F0                  	dc.b 0,	0, 4, $F0
0001DA2E 4100 E476                  	dc.l Map_obj41+$41000000
0001DA32 0000 0523                  	dc.b 0,	0, 5, $23
0001DA36 4200 E69C                  	dc.l Map_obj42+$42000000
0001DA3A 0000 249B                  	dc.b 0,	0, $24,	$9B
0001DA3E 4400 E9AA                  	dc.l Map_obj44+$44000000
0001DA42 0000 434C                  	dc.b 0,	0, $43,	$4C
0001DA46 1900 87D4                  	dc.l Map_obj48+$19000000
0001DA4A 0000 43AA                  	dc.b 0,	0, $43,	$AA
0001DA4E 7901 793A                  	dc.l Map_obj79+$79000000
0001DA52 0100 07A0                  	dc.b 1,	0, 7, $A0
0001DA56 4B00 A600                  	dc.l Map_obj4B+$4B000000
0001DA5A 0000 2400                  	dc.b 0,	0, $24,	0
0001DA5E 7D01 7A8A                  	dc.l Map_obj7D+$7D000000
0001DA62 0101 84B6                  	dc.b 1,	1, $84,	$B6
0001DA66                            	even
0001DA66                            	even
0001DA66                            
0001DA66                            ; ---------------------------------------------------------------------------
0001DA66                            ; Debug	list - Labyrinth
0001DA66                            ; ---------------------------------------------------------------------------
0001DA66                            Debug_LZ:
0001DA66                            	include "_inc\Debug list - LZ.asm"
0001DA66                            ; ---------------------------------------------------------------------------
0001DA66                            ; Debug	list - Labyrinth
0001DA66                            ; ---------------------------------------------------------------------------
0001DA66 0019                       	dc.w $19
0001DA68 2500 A5C0                  	dc.l Map_obj25+$25000000
0001DA6C 0000 27B2                  	dc.b 0,	0, $27,	$B2
0001DA70 2600 ABC6                  	dc.l Map_obj26+$26000000
0001DA74 0000 0680                  	dc.b 0,	0, 6, $80
0001DA78 4100 E476                  	dc.l Map_obj41+$41000000
0001DA7C 0000 0523                  	dc.b 0,	0, 5, $23
0001DA80 2C00 B2EA                  	dc.l Map_obj2C+$2C000000
0001DA84 0800 2486                  	dc.b 8,	0, $24,	$86
0001DA88 2D00 B4DE                  	dc.l Map_obj2D+$2D000000
0001DA8C 0002 84A6                  	dc.b 0,	2, $84,	$A6
0001DA90 1601 26D0                  	dc.l Map_obj16+$16000000
0001DA94 0000 03CC                  	dc.b 0,	0, 3, $CC
0001DA98 1601 26D0                  	dc.l Map_obj16+$16000000
0001DA9C 0203 03CC                  	dc.b 2,	3, 3, $CC
0001DAA0 3300 C996                  	dc.l Map_obj33+$33000000
0001DAA4 0000 43DE                  	dc.b 0,	0, $43,	$DE
0001DAA8 3200 C556                  	dc.l Map_obj32+$32000000
0001DAAC 0000 0513                  	dc.b 0,	0, 5, $13
0001DAB0 3600 D74A                  	dc.l Map_obj36+$36000000
0001DAB4 0000 051B                  	dc.b 0,	0, 5, $1B
0001DAB8 5201 07F2                  	dc.l Map_obj52a+$52000000
0001DABC 0400 43BC                  	dc.b 4,	0, $43,	$BC
0001DAC0 6101 28F8                  	dc.l Map_obj61+$61000000
0001DAC4 0100 43E6                  	dc.b 1,	0, $43,	$E6
0001DAC8 6101 28F8                  	dc.l Map_obj61+$61000000
0001DACC 1301 43E6                  	dc.b $13, 1, $43, $E6
0001DAD0 6101 28F8                  	dc.l Map_obj61+$61000000
0001DAD4 0500 43E6                  	dc.b 5,	0, $43,	$E6
0001DAD8 6201 2A4C                  	dc.l Map_obj62+$62000000
0001DADC 0000 443E                  	dc.b 0,	0, $44,	$3E
0001DAE0 6101 28F8                  	dc.l Map_obj61+$61000000
0001DAE4 2702 43E6                  	dc.b $27, 2, $43, $E6
0001DAE8 6101 28F8                  	dc.l Map_obj61+$61000000
0001DAEC 3003 43E6                  	dc.b $30, 3, $43, $E6
0001DAF0 6301 2DAE                  	dc.l Map_obj63+$63000000
0001DAF4 7F00 03F6                  	dc.b $7F, 0, 3,	$F6
0001DAF8 6001 261A                  	dc.l Map_obj60+$60000000
0001DAFC 0000 0467                  	dc.b 0,	0, 4, $67
0001DB00 6401 30F4                  	dc.l Map_obj64+$64000000
0001DB04 8413 8348                  	dc.b $84, $13, $83, $48
0001DB08 6501 327C                  	dc.l Map_obj65+$65000000
0001DB0C 0202 C259                  	dc.b 2,	2, $C2,	$59
0001DB10 6501 327C                  	dc.l Map_obj65+$65000000
0001DB14 0909 C259                  	dc.b 9,	9, $C2,	$59
0001DB18 0B01 1A6A                  	dc.l Map_obj0B+$B000000
0001DB1C 0000 43DE                  	dc.b 0,	0, $43,	$DE
0001DB20 0C01 1B3A                  	dc.l Map_obj0C+$C000000
0001DB24 0200 4328                  	dc.b 2,	0, $43,	$28
0001DB28 7901 793A                  	dc.l Map_obj79+$79000000
0001DB2C 0100 07A0                  	dc.b 1,	0, 7, $A0
0001DB30                            	even
0001DB30                            	even
0001DB30                            
0001DB30                            ; ---------------------------------------------------------------------------
0001DB30                            ; Debug	list - Marble
0001DB30                            ; ---------------------------------------------------------------------------
0001DB30                            Debug_MZ:
0001DB30                            	include "_inc\Debug list - MZ.asm"
0001DB30                            ; ---------------------------------------------------------------------------
0001DB30                            ; Debug	list - Marble
0001DB30                            ; ---------------------------------------------------------------------------
0001DB30 0012                       	dc.w $12
0001DB32 2500 A5C0                  	dc.l Map_obj25+$25000000
0001DB36 0000 27B2                  	dc.b 0,	0, $27,	$B2
0001DB3A 2600 ABC6                  	dc.l Map_obj26+$26000000
0001DB3E 0000 0680                  	dc.b 0,	0, 6, $80
0001DB42 2200 A074                  	dc.l Map_obj22+$22000000
0001DB46 0000 0444                  	dc.b 0,	0, 4, $44
0001DB4A 3600 D74A                  	dc.l Map_obj36+$36000000
0001DB4E 0000 051B                  	dc.b 0,	0, 5, $1B
0001DB52 4100 E476                  	dc.l Map_obj41+$41000000
0001DB56 0000 0523                  	dc.b 0,	0, 5, $23
0001DB5A 1300 BA20                  	dc.l Map_obj14+$13000000
0001DB5E 0000 0345                  	dc.b 0,	0, 3, $45
0001DB62 4600 F05C                  	dc.l Map_obj46+$46000000
0001DB66 0000 4000                  	dc.b 0,	0, $40,	0
0001DB6A 4C00 F9A8                  	dc.l Map_obj4C+$4C000000
0001DB6E 0000 63A8                  	dc.b 0,	0, $63,	$A8
0001DB72 4E00 FC8C                  	dc.l Map_obj4E+$4E000000
0001DB76 0000 63A8                  	dc.b 0,	0, $63,	$A8
0001DB7A 3300 C996                  	dc.l Map_obj33+$33000000
0001DB7E 0000 42B8                  	dc.b 0,	0, $42,	$B8
0001DB82 5001 008A                  	dc.l Map_obj50+$50000000
0001DB86 0000 247B                  	dc.b 0,	0, $24,	$7B
0001DB8A 5101 0526                  	dc.l Map_obj51+$51000000
0001DB8E 0000 42B8                  	dc.b 0,	0, $42,	$B8
0001DB92 5201 079C                  	dc.l Map_obj52+$52000000
0001DB96 0000 02B8                  	dc.b 0,	0, 2, $B8
0001DB9A 5300 8D6C                  	dc.l Map_obj53+$53000000
0001DB9E 0000 62B8                  	dc.b 0,	0, $62,	$B8
0001DBA2 5400 F96E                  	dc.l Map_obj54+$54000000
0001DBA6 0000 8680                  	dc.b 0,	0, $86,	$80
0001DBAA 5501 0990                  	dc.l Map_obj55+$55000000
0001DBAE 0000 04B8                  	dc.b 0,	0, 4, $B8
0001DBB2 7801 75B4                  	dc.l Map_obj78+$78000000
0001DBB6 0000 24FF                  	dc.b 0,	0, $24,	$FF
0001DBBA 7901 793A                  	dc.l Map_obj79+$79000000
0001DBBE 0100 07A0                  	dc.b 1,	0, 7, $A0
0001DBC2                            	even
0001DBC2                            	even
0001DBC2                            
0001DBC2                            ; ---------------------------------------------------------------------------
0001DBC2                            ; Debug	list - Star Light
0001DBC2                            ; ---------------------------------------------------------------------------
0001DBC2                            Debug_SLZ:
0001DBC2                            	include "_inc\Debug list - SLZ.asm"
0001DBC2                            ; ---------------------------------------------------------------------------
0001DBC2                            ; Debug	list - Star Light
0001DBC2                            ; ---------------------------------------------------------------------------
0001DBC2 000F                       	dc.w $F
0001DBC4 2500 A5C0                  	dc.l Map_obj25+$25000000
0001DBC8 0000 27B2                  	dc.b 0,	0, $27,	$B2
0001DBCC 2600 ABC6                  	dc.l Map_obj26+$26000000
0001DBD0 0000 0680                  	dc.b 0,	0, 6, $80
0001DBD4 5901 1492                  	dc.l Map_obj59+$59000000
0001DBD8 0000 4000                  	dc.b 0,	0, $40,	0
0001DBDC 5300 8D6C                  	dc.l Map_obj53+$53000000
0001DBE0 0002 44E0                  	dc.b 0,	2, $44,	$E0
0001DBE4 1800 8732                  	dc.l Map_obj18b+$18000000
0001DBE8 0000 4000                  	dc.b 0,	0, $40,	0
0001DBEC 5A01 15CC                  	dc.l Map_obj5A+$5A000000
0001DBF0 0000 4000                  	dc.b 0,	0, $40,	0
0001DBF4 5B01 1784                  	dc.l Map_obj5B+$5B000000
0001DBF8 0000 4000                  	dc.b 0,	0, $40,	0
0001DBFC 5D01 1D54                  	dc.l Map_obj5D+$5D000000
0001DC00 0000 43A0                  	dc.b 0,	0, $43,	$A0
0001DC04 5E01 20E6                  	dc.l Map_obj5E+$5E000000
0001DC08 0000 0374                  	dc.b 0,	0, 3, $74
0001DC0C 4100 E476                  	dc.l Map_obj41+$41000000
0001DC10 0000 0523                  	dc.b 0,	0, 5, $23
0001DC14 1300 BA20                  	dc.l Map_obj14+$13000000
0001DC18 0000 0480                  	dc.b 0,	0, 4, $80
0001DC1C 1C00 8E7C                  	dc.l Map_obj1C+$1C000000
0001DC20 0000 44D8                  	dc.b 0,	0, $44,	$D8
0001DC24 5F01 2364                  	dc.l Map_obj5F+$5F000000
0001DC28 0000 0400                  	dc.b 0,	0, 4, 0
0001DC2C 6001 261A                  	dc.l Map_obj60+$60000000
0001DC30 0000 2429                  	dc.b 0,	0, $24,	$29
0001DC34 7901 793A                  	dc.l Map_obj79+$79000000
0001DC38 0100 07A0                  	dc.b 1,	0, 7, $A0
0001DC3C                            	even
0001DC3C                            	even
0001DC3C                            
0001DC3C                            ; ---------------------------------------------------------------------------
0001DC3C                            ; Debug	list - Spring Yard
0001DC3C                            ; ---------------------------------------------------------------------------
0001DC3C                            Debug_SYZ:
0001DC3C                            	include "_inc\Debug list - SYZ.asm"
0001DC3C                            ; ---------------------------------------------------------------------------
0001DC3C                            ; Debug	list - Spring Yard
0001DC3C                            ; ---------------------------------------------------------------------------
0001DC3C 000F                       	dc.w $F
0001DC3E 2500 A5C0                  	dc.l Map_obj25+$25000000
0001DC42 0000 27B2                  	dc.b 0,	0, $27,	$B2
0001DC46 2600 ABC6                  	dc.l Map_obj26+$26000000
0001DC4A 0000 0680                  	dc.b 0,	0, 6, $80
0001DC4E 3600 D74A                  	dc.l Map_obj36+$36000000
0001DC52 0000 051B                  	dc.b 0,	0, 5, $1B
0001DC56 4100 E476                  	dc.l Map_obj41+$41000000
0001DC5A 0000 0523                  	dc.b 0,	0, 5, $23
0001DC5E 4300 E8FC                  	dc.l Map_obj43+$43000000
0001DC62 0000 04B8                  	dc.b 0,	0, 4, $B8
0001DC66 1200 F0DA                  	dc.l Map_obj12+$12000000
0001DC6A 0000 0000                  	dc.b 0,	0, 0, 0
0001DC6E 4700 F256                  	dc.l Map_obj47+$47000000
0001DC72 0000 0380                  	dc.b 0,	0, 3, $80
0001DC76 1F00 9DB8                  	dc.l Map_obj1F+$1F000000
0001DC7A 0000 0400                  	dc.b 0,	0, 4, 0
0001DC7E 2200 A074                  	dc.l Map_obj22+$22000000
0001DC82 0000 0444                  	dc.b 0,	0, 4, $44
0001DC86 5001 008A                  	dc.l Map_obj50+$50000000
0001DC8A 0000 247B                  	dc.b 0,	0, $24,	$7B
0001DC8E 1800 8720                  	dc.l Map_obj18a+$18000000
0001DC92 0000 4000                  	dc.b 0,	0, $40,	0
0001DC96 5601 0E52                  	dc.l Map_obj56+$56000000
0001DC9A 0000 4000                  	dc.b 0,	0, $40,	0
0001DC9E 3200 C556                  	dc.l Map_obj32+$32000000
0001DCA2 0000 0513                  	dc.b 0,	0, 5, $13
0001DCA6 7801 75B4                  	dc.l Map_obj78+$78000000
0001DCAA 0000 24FF                  	dc.b 0,	0, $24,	$FF
0001DCAE 7901 793A                  	dc.l Map_obj79+$79000000
0001DCB2 0100 07A0                  	dc.b 1,	0, 7, $A0
0001DCB6                            	even
0001DCB6                            	even
0001DCB6                            
0001DCB6                            ; ---------------------------------------------------------------------------
0001DCB6                            ; Debug	list - Scrap Brain
0001DCB6                            ; ---------------------------------------------------------------------------
0001DCB6                            Debug_SBZ:
0001DCB6                            	include "_inc\Debug list - SBZ.asm"
0001DCB6                            ; ---------------------------------------------------------------------------
0001DCB6                            ; Debug	list - Scrap Brain
0001DCB6                            ; ---------------------------------------------------------------------------
0001DCB6 001D                       	dc.w $1D
0001DCB8 2500 A5C0                  	dc.l Map_obj25+$25000000
0001DCBC 0000 27B2                  	dc.b 0,	0, $27,	$B2
0001DCC0 2600 ABC6                  	dc.l Map_obj26+$26000000
0001DCC4 0000 0680                  	dc.b 0,	0, 6, $80
0001DCC8 5F01 2364                  	dc.l Map_obj5F+$5F000000
0001DCCC 0000 0400                  	dc.b 0,	0, 4, 0
0001DCD0 6001 261A                  	dc.l Map_obj60+$60000000
0001DCD4 0000 0429                  	dc.b 0,	0, 4, $29
0001DCD8 7801 75B4                  	dc.l Map_obj78+$78000000
0001DCDC 0000 22B0                  	dc.b 0,	0, $22,	$B0
0001DCE0 1501 11EE                  	dc.l Map_obj15b+$15000000
0001DCE4 0702 4391                  	dc.b 7,	2, $43,	$91
0001DCE8 6701 5EC8                  	dc.l Map_obj67+$67000000
0001DCEC E000 C344                  	dc.b $E0, 0, $C3, $44
0001DCF0 5201 079C                  	dc.l Map_obj52+$52000000
0001DCF4 2802 22C0                  	dc.b $28, 2, $22, $C0
0001DCF8 3200 C556                  	dc.l Map_obj32+$32000000
0001DCFC 0000 0513                  	dc.b 0,	0, 5, $13
0001DD00 6901 6122                  	dc.l Map_obj69+$69000000
0001DD04 0300 4492                  	dc.b 3,	0, $44,	$92
0001DD08 6901 617C                  	dc.l Map_obj69a+$69000000
0001DD0C 8300 04DF                  	dc.b $83, 0, 4,	$DF
0001DD10 6A01 63DA                  	dc.l Map_obj6A+$6A000000
0001DD14 0200 43B5                  	dc.b 2,	0, $43,	$B5
0001DD18 5300 8D6C                  	dc.l Map_obj53+$53000000
0001DD1C 0000 43F5                  	dc.b 0,	0, $43,	$F5
0001DD20 5201 079C                  	dc.l Map_obj52+$52000000
0001DD24 3903 4460                  	dc.b $39, 3, $44, $60
0001DD28 6B01 67AA                  	dc.l Map_obj6B+$6B000000
0001DD2C 0000 22C0                  	dc.b 0,	0, $22,	$C0
0001DD30 2A00 9012                  	dc.l Map_obj2A+$2A000000
0001DD34 0000 42E8                  	dc.b 0,	0, $42,	$E8
0001DD38 6B01 67AA                  	dc.l Map_obj6B+$6B000000
0001DD3C 1301 22C0                  	dc.b $13, 1, $22, $C0
0001DD40 6A01 63DA                  	dc.l Map_obj6A+$6A000000
0001DD44 0100 43B5                  	dc.b 1,	0, $43,	$B5
0001DD48 6B01 67AA                  	dc.l Map_obj6B+$6B000000
0001DD4C 2401 22C0                  	dc.b $24, 1, $22, $C0
0001DD50 6A01 63DA                  	dc.l Map_obj6A+$6A000000
0001DD54 0402 43B5                  	dc.b 4,	2, $43,	$B5
0001DD58 6B01 67AA                  	dc.l Map_obj6B+$6B000000
0001DD5C 3401 22C0                  	dc.b $34, 1, $22, $C0
0001DD60 6C01 696C                  	dc.l Map_obj6C+$6C000000
0001DD64 0000 44C3                  	dc.b 0,	0, $44,	$C3
0001DD68 6D00 ED4C                  	dc.l Map_obj6D+$6D000000
0001DD6C 6400 83D9                  	dc.b $64, 0, $83, $D9
0001DD70 6D00 ED4C                  	dc.l Map_obj6D+$6D000000
0001DD74 640B 83D9                  	dc.b $64, $B, $83, $D9
0001DD78 6E01 6A22                  	dc.l Map_obj6E+$6E000000
0001DD7C 0400 047E                  	dc.b 4,	0, 4, $7E
0001DD80 7001 6E78                  	dc.l Map_obj70+$70000000
0001DD84 0000 42F0                  	dc.b 0,	0, $42,	$F0
0001DD88 7101 1BFA                  	dc.l Map_obj71+$71000000
0001DD8C 1100 8680                  	dc.b $11, 0, $86, $80
0001DD90 1E00 94D0                  	dc.l Map_obj1E+$1E000000
0001DD94 0400 2302                  	dc.b 4,	0, $23,	2
0001DD98 7901 793A                  	dc.l Map_obj79+$79000000
0001DD9C 0100 07A0                  	dc.b 1,	0, 7, $A0
0001DDA0                            	even
0001DDA0                            	even
0001DDA0                            
0001DDA0                            ; ---------------------------------------------------------------------------
0001DDA0                            ; Debug	list - ending sequence / special stage
0001DDA0                            ; ---------------------------------------------------------------------------
0001DDA0                            Debug_Ending:
0001DDA0                            	include "_inc\Debug list - Ending and SS.asm"
0001DDA0                            ; ---------------------------------------------------------------------------
0001DDA0                            ; Debug	list - ending sequence / special stage
0001DDA0                            ; ---------------------------------------------------------------------------
0001DDA0 000D                       	dc.w $D
0001DDA2 2500 A5C0                  	dc.l Map_obj25+$25000000
0001DDA6 0000 27B2                  	dc.b 0,	0, $27,	$B2
0001DDAA 4700 F256                  	dc.l Map_obj47+$47000000
0001DDAE 0000 0380                  	dc.b 0,	0, 3, $80
0001DDB2 2800 9AEA                  	dc.l Map_obj28a+$28000000
0001DDB6 0A00 05A0                  	dc.b $A, 0, 5, $A0
0001DDBA 2800 9AEA                  	dc.l Map_obj28a+$28000000
0001DDBE 0B00 05A0                  	dc.b $B, 0, 5, $A0
0001DDC2 2800 9AEA                  	dc.l Map_obj28a+$28000000
0001DDC6 0C00 05A0                  	dc.b $C, 0, 5, $A0
0001DDCA 2800 9AD2                  	dc.l Map_obj28+$28000000
0001DDCE 0D00 0553                  	dc.b $D, 0, 5, $53
0001DDD2 2800 9AD2                  	dc.l Map_obj28+$28000000
0001DDD6 0E00 0553                  	dc.b $E, 0, 5, $53
0001DDDA 2800 9AD2                  	dc.l Map_obj28+$28000000
0001DDDE 0F00 0573                  	dc.b $F, 0, 5, $73
0001DDE2 2800 9AD2                  	dc.l Map_obj28+$28000000
0001DDE6 1000 0573                  	dc.b $10, 0, 5,	$73
0001DDEA 2800 9AEA                  	dc.l Map_obj28a+$28000000
0001DDEE 1100 0585                  	dc.b $11, 0, 5,	$85
0001DDF2 2800 9B02                  	dc.l Map_obj28b+$28000000
0001DDF6 1200 0593                  	dc.b $12, 0, 5,	$93
0001DDFA 2800 9AEA                  	dc.l Map_obj28a+$28000000
0001DDFE 1300 0565                  	dc.b $13, 0, 5,	$65
0001DE02 2800 9B02                  	dc.l Map_obj28b+$28000000
0001DE06 1400 05B3                  	dc.b $14, 0, 5,	$B3
0001DE0A                            	even
0001DE0A                            	even
0001DE0A                            
0001DE0A                            ; ---------------------------------------------------------------------------
0001DE0A                            ; Main level load blocks
0001DE0A                            ; ---------------------------------------------------------------------------
0001DE0A                            MainLoadBlocks:
0001DE0A                            	include "_inc\Main level load blocks.asm"
0001DE0A                            ; ---------------------------------------------------------------------------
0001DE0A                            ; Main level load blocks
0001DE0A                            ;
0001DE0A                            ; ===FORMAT===
0001DE0A                            ; level	patterns + (1st	PLC num	* 10^6)
0001DE0A                            ; 16x16	mappings + (2nd	PLC num	* 10^6)
0001DE0A                            ; 256x256 mappings
0001DE0A                            ; blank, music (unused), pal index (unused), pal index
0001DE0A                            ; ---------------------------------------------------------------------------
0001DE0A 0000 0000                  	dc.l Nem_GHZ_2nd+$4000000
0001DE0E 0000 0000                  	dc.l Blk16_GHZ+$5000000
0001DE12 0000 0000                  	dc.l Blk256_GHZ
0001DE16 0081 0404                  	dc.b 0,	$81, 4,	4
0001DE1A 0000 0000                  	dc.l Nem_LZ+$6000000
0001DE1E 0000 0000                  	dc.l Blk16_LZ+$7000000
0001DE22 0000 0000                  	dc.l Blk256_LZ
0001DE26 0082 0505                  	dc.b 0,	$82, 5,	5
0001DE2A 0000 0000                  	dc.l Nem_MZ+$8000000
0001DE2E 0000 0000                  	dc.l Blk16_MZ+$9000000
0001DE32 0000 0000                  	dc.l Blk256_MZ
0001DE36 0083 0606                  	dc.b 0,	$83, 6,	6
0001DE3A 0000 0000                  	dc.l Nem_SLZ+$A000000
0001DE3E 0000 0000                  	dc.l Blk16_SLZ+$B000000
0001DE42 0000 0000                  	dc.l Blk256_SLZ
0001DE46 0084 0707                  	dc.b 0,	$84, 7,	7
0001DE4A 0000 0000                  	dc.l Nem_SYZ+$C000000
0001DE4E 0000 0000                  	dc.l Blk16_SYZ+$D000000
0001DE52 0000 0000                  	dc.l Blk256_SYZ
0001DE56 0085 0808                  	dc.b 0,	$85, 8,	8
0001DE5A 0000 0000                  	dc.l Nem_SBZ+$E000000
0001DE5E 0000 0000                  	dc.l Blk16_SBZ+$F000000
0001DE62 0000 0000                  	dc.l Blk256_SBZ
0001DE66 0086 0909                  	dc.b 0,	$86, 9,	9
0001DE6A 0000 0000                  	dc.l Nem_GHZ_2nd	; main load block for ending
0001DE6E 0000 0000                  	dc.l Blk16_GHZ
0001DE72 0000 0000                  	dc.l Blk256_GHZ
0001DE76 0086 1313                  	dc.b 0,	$86, $13, $13
0001DE7A                            	even
0001DE7A                            	even
0001DE7A                            
0001DE7A                            ; ---------------------------------------------------------------------------
0001DE7A                            ; Pattern load cues
0001DE7A                            ; ---------------------------------------------------------------------------
0001DE7A                            ArtLoadCues:
0001DE7A                            	include "_inc\Pattern load cues.asm"
0001DE7A                            ; ---------------------------------------------------------------------------
0001DE7A                            ; Pattern load cues - index
0001DE7A                            ; ---------------------------------------------------------------------------
0001DE7A 0000 0000                  	dc.w PLC_Main-ArtLoadCues, PLC_Main2-ArtLoadCues
0001DE7E 0000 0000                  	dc.w PLC_Explode-ArtLoadCues, PLC_GameOver-ArtLoadCues
0001DE82 0000 0000                  	dc.w PLC_GHZ-ArtLoadCues, PLC_GHZ2-ArtLoadCues
0001DE86 0000 0000                  	dc.w PLC_LZ-ArtLoadCues, PLC_LZ2-ArtLoadCues
0001DE8A 0000 0000                  	dc.w PLC_MZ-ArtLoadCues, PLC_MZ2-ArtLoadCues
0001DE8E 0000 0000                  	dc.w PLC_SLZ-ArtLoadCues, PLC_SLZ2-ArtLoadCues
0001DE92 0000 0000                  	dc.w PLC_SYZ-ArtLoadCues, PLC_SYZ2-ArtLoadCues
0001DE96 0000 0000                  	dc.w PLC_SBZ-ArtLoadCues, PLC_SBZ2-ArtLoadCues
0001DE9A 0000 0000                  	dc.w PLC_TitleCard-ArtLoadCues,	PLC_Boss-ArtLoadCues
0001DE9E 0000 0000                  	dc.w PLC_Signpost-ArtLoadCues, PLC_Warp-ArtLoadCues
0001DEA2 0000 0000                  	dc.w PLC_SpeStage-ArtLoadCues, PLC_GHZAnimals-ArtLoadCues
0001DEA6 0000 0000                  	dc.w PLC_LZAnimals-ArtLoadCues,	PLC_MZAnimals-ArtLoadCues
0001DEAA 0000 0000                  	dc.w PLC_SLZAnimals-ArtLoadCues, PLC_SYZAnimals-ArtLoadCues
0001DEAE 0000 0000                  	dc.w PLC_SBZAnimals-ArtLoadCues, PLC_SpeStResult-ArtLoadCues
0001DEB2 0000 0000                  	dc.w PLC_Ending-ArtLoadCues, PLC_TryAgain-ArtLoadCues
0001DEB6 0000 0000                  	dc.w PLC_EggmanSBZ2-ArtLoadCues, PLC_FZBoss-ArtLoadCues
0001DEBA 0000                       	dc.w Plc_TetoBoss-ArtLoadCues
0001DEBC                            ; ---------------------------------------------------------------------------
0001DEBC                            ; Pattern load cues - standard block 1
0001DEBC                            ; ---------------------------------------------------------------------------
0001DEBC 0004                       PLC_Main:	dc.w 4
0001DEBE 0000 0000                  		dc.l Nem_Lamp		; lamppost
0001DEC2 F400                       		dc.w $F400
0001DEC4 0000 0000                  		dc.l Nem_Hud		; HUD
0001DEC8 D940                       		dc.w $D940
0001DECA 0000 0000                  		dc.l Nem_Lives		; lives	counter
0001DECE FA80                       		dc.w $FA80
0001DED0 0000 0000                  		dc.l Nem_Ring		; rings
0001DED4 F640                       		dc.w $F640
0001DED6 0000 0000                  		dc.l Nem_Points		; points from enemy
0001DEDA F2E0                       		dc.w $F2E0
0001DEDC                            ; ---------------------------------------------------------------------------
0001DEDC                            ; Pattern load cues - standard block 2
0001DEDC                            ; ---------------------------------------------------------------------------
0001DEDC 0002                       PLC_Main2:	dc.w 2
0001DEDE 0000 0000                  		dc.l Nem_Monitors	; monitors
0001DEE2 D000                       		dc.w $D000
0001DEE4 0000 0000                  		dc.l Nem_Shield		; shield
0001DEE8 A820                       		dc.w $A820
0001DEEA 0000 0000                  		dc.l Nem_Stars		; invincibility	stars
0001DEEE AB80                       		dc.w $AB80
0001DEF0                            ; ---------------------------------------------------------------------------
0001DEF0                            ; Pattern load cues - explosion
0001DEF0                            ; ---------------------------------------------------------------------------
0001DEF0 0000                       PLC_Explode:	dc.w 0
0001DEF2 0000 0000                  		dc.l Nem_Explode	; explosion
0001DEF6 B400                       		dc.w $B400
0001DEF8                            ; ---------------------------------------------------------------------------
0001DEF8                            ; Pattern load cues - game/time	over
0001DEF8                            ; ---------------------------------------------------------------------------
0001DEF8 0000                       PLC_GameOver:	dc.w 0
0001DEFA 0000 0000                  		dc.l Nem_GameOver	; game/time over
0001DEFE ABC0                       		dc.w $ABC0
0001DF00                            ; ---------------------------------------------------------------------------
0001DF00                            ; Pattern load cues - Green Hill
0001DF00                            ; ---------------------------------------------------------------------------
0001DF00 000B                       PLC_GHZ:	dc.w $B
0001DF02 0000 0000                  		dc.l Nem_GHZ_1st	; GHZ main patterns
0001DF06 0000                       		dc.w 0
0001DF08 0000 0000                  		dc.l Nem_GHZ_2nd	; GHZ secondary	patterns
0001DF0C 39A0                       		dc.w $39A0
0001DF0E 0000 0000                  		dc.l Nem_Stalk		; flower stalk
0001DF12 6B00                       		dc.w $6B00
0001DF14 0000 0000                  		dc.l Nem_PplRock	; purple rock
0001DF18 7A00                       		dc.w $7A00
0001DF1A 0000 0000                  		dc.l Nem_Crabmeat	; crabmeat enemy
0001DF1E 8000                       		dc.w $8000
0001DF20 0000 0000                  		dc.l Nem_Buzz		; buzz bomber enemy
0001DF24 8880                       		dc.w $8880
0001DF26 0000 0000                  		dc.l Nem_Chopper	; chopper enemy
0001DF2A 8F60                       		dc.w $8F60
0001DF2C 0000 0000                  		dc.l Nem_Newtron	; newtron enemy
0001DF30 9360                       		dc.w $9360
0001DF32 0000 0000                  		dc.l Nem_Motobug	; motobug enemy
0001DF36 9E00                       		dc.w $9E00
0001DF38 0000 0000                  		dc.l Nem_Spikes		; spikes
0001DF3C A360                       		dc.w $A360
0001DF3E 0000 0000                  		dc.l Nem_HSpring	; horizontal spring
0001DF42 A460                       		dc.w $A460
0001DF44 0000 0000                  		dc.l Nem_VSpring	; vertical spring
0001DF48 A660                       		dc.w $A660
0001DF4A 0005                       PLC_GHZ2:	dc.w 5
0001DF4C 0000 0000                  		dc.l Nem_Swing		; swinging platform
0001DF50 7000                       		dc.w $7000
0001DF52 0000 0000                  		dc.l Nem_Bridge		; bridge
0001DF56 71C0                       		dc.w $71C0
0001DF58 0000 0000                  		dc.l Nem_SpikePole	; spiked pole
0001DF5C 7300                       		dc.w $7300
0001DF5E 0000 0000                  		dc.l Nem_Ball		; giant	ball
0001DF62 7540                       		dc.w $7540
0001DF64 0000 0000                  		dc.l Nem_GhzWall1	; breakable wall
0001DF68 A1E0                       		dc.w $A1E0
0001DF6A 0000 0000                  		dc.l Nem_GhzWall2	; normal wall
0001DF6E 6980                       		dc.w $6980
0001DF70                            ; ---------------------------------------------------------------------------
0001DF70                            ; Pattern load cues - Labyrinth
0001DF70                            ; ---------------------------------------------------------------------------
0001DF70 000B                       PLC_LZ:		dc.w $B
0001DF72 0000 0000                  		dc.l Nem_LZ		; LZ main patterns
0001DF76 0000                       		dc.w 0
0001DF78 0000 0000                  		dc.l Nem_LzBlock1	; block
0001DF7C 3C00                       		dc.w $3C00
0001DF7E 0000 0000                  		dc.l Nem_LzBlock2	; blocks
0001DF82 3E00                       		dc.w $3E00
0001DF84 0000 0000                  		dc.l Nem_Splash		; waterfalls and splash
0001DF88 4B20                       		dc.w $4B20
0001DF8A 0000 0000                  		dc.l Nem_Water		; water	surface
0001DF8E 6000                       		dc.w $6000
0001DF90 0000 0000                  		dc.l Nem_LzSpikeBall	; spiked ball
0001DF94 6200                       		dc.w $6200
0001DF96 0000 0000                  		dc.l Nem_FlapDoor	; flapping door
0001DF9A 6500                       		dc.w $6500
0001DF9C 0000 0000                  		dc.l Nem_Bubbles	; bubbles and numbers
0001DFA0 6900                       		dc.w $6900
0001DFA2 0000 0000                  		dc.l Nem_LzBlock3	; block
0001DFA6 7780                       		dc.w $7780
0001DFA8 0000 0000                  		dc.l Nem_LzDoor1	; vertical door
0001DFAC 7880                       		dc.w $7880
0001DFAE 0000 0000                  		dc.l Nem_Harpoon	; harpoon
0001DFB2 7980                       		dc.w $7980
0001DFB4 0000 0000                  		dc.l Nem_Burrobot	; burrobot enemy
0001DFB8 94C0                       		dc.w $94C0
0001DFBA 000C                       PLC_LZ2:	dc.w $C
0001DFBC 0000 0000                  		dc.l Nem_LzPole		; pole that breaks
0001DFC0 7BC0                       		dc.w $7BC0
0001DFC2 0000 0000                  		dc.l Nem_LzDoor2	; large	horizontal door
0001DFC6 7CC0                       		dc.w $7CC0
0001DFC8 0000 0000                  		dc.l Nem_LzWheel	; wheel
0001DFCC 7EC0                       		dc.w $7EC0
0001DFCE 0000 0000                  		dc.l Nem_Gargoyle	; gargoyle head
0001DFD2 5D20                       		dc.w $5D20
0001DFD4 0000 0000                  		dc.l Nem_LzSonic	; Sonic	holding	his breath
0001DFD8 8800                       		dc.w $8800
0001DFDA 0000 0000                  		dc.l Nem_LzPlatfm	; rising platform
0001DFDE 89E0                       		dc.w $89E0
0001DFE0 0000 0000                  		dc.l Nem_Orbinaut	; orbinaut enemy
0001DFE4 8CE0                       		dc.w $8CE0
0001DFE6 0000 0000                  		dc.l Nem_Jaws		; jaws enemy
0001DFEA 90C0                       		dc.w $90C0
0001DFEC 0000 0000                  		dc.l Nem_LzSwitch	; switch
0001DFF0 A1E0                       		dc.w $A1E0
0001DFF2 0000 0000                  		dc.l Nem_Cork		; cork block
0001DFF6 A000                       		dc.w $A000
0001DFF8 0000 0000                  		dc.l Nem_Spikes		; spikes
0001DFFC A360                       		dc.w $A360
0001DFFE 0000 0000                  		dc.l Nem_HSpring	; horizontal spring
0001E002 A460                       		dc.w $A460
0001E004 0000 0000                  		dc.l Nem_VSpring	; vertical spring
0001E008 A660                       		dc.w $A660
0001E00A                            ; ---------------------------------------------------------------------------
0001E00A                            ; Pattern load cues - Marble
0001E00A                            ; ---------------------------------------------------------------------------
0001E00A 0009                       PLC_MZ:		dc.w 9
0001E00C 0000 0000                  		dc.l Nem_MZ		; MZ main patterns
0001E010 0000                       		dc.w 0
0001E012 0000 0000                  		dc.l Nem_MzMetal	; metal	blocks
0001E016 6000                       		dc.w $6000
0001E018 0000 0000                  		dc.l Nem_MzFire		; fireballs
0001E01C 68A0                       		dc.w $68A0
0001E01E 0000 0000                  		dc.l Nem_Swing		; swinging platform
0001E022 7000                       		dc.w $7000
0001E024 0000 0000                  		dc.l Nem_MzGlass	; green	glassy block
0001E028 71C0                       		dc.w $71C0
0001E02A 0000 0000                  		dc.l Nem_Lava		; lava
0001E02E 7500                       		dc.w $7500
0001E030 0000 0000                  		dc.l Nem_Buzz		; buzz bomber enemy
0001E034 8880                       		dc.w $8880
0001E036 0000 0000                  		dc.l Nem_Yadrin		; yadrin enemy
0001E03A 8F60                       		dc.w $8F60
0001E03C 0000 0000                  		dc.l Nem_Basaran	; basaran enemy
0001E040 9700                       		dc.w $9700
0001E042 0000 0000                  		dc.l Nem_Cater		; caterkiller enemy
0001E046 9FE0                       		dc.w $9FE0
0001E048 0004                       PLC_MZ2:	dc.w 4
0001E04A 0000 0000                  		dc.l Nem_MzSwitch	; switch
0001E04E A260                       		dc.w $A260
0001E050 0000 0000                  		dc.l Nem_Spikes		; spikes
0001E054 A360                       		dc.w $A360
0001E056 0000 0000                  		dc.l Nem_HSpring	; horizontal spring
0001E05A A460                       		dc.w $A460
0001E05C 0000 0000                  		dc.l Nem_VSpring	; vertical spring
0001E060 A660                       		dc.w $A660
0001E062 0000 0000                  		dc.l Nem_MzBlock	; green	stone block
0001E066 5700                       		dc.w $5700
0001E068                            ; ---------------------------------------------------------------------------
0001E068                            ; Pattern load cues - Star Light
0001E068                            ; ---------------------------------------------------------------------------
0001E068 0008                       PLC_SLZ:	dc.w 8
0001E06A 0000 0000                  		dc.l Nem_SLZ		; SLZ main patterns
0001E06E 0000                       		dc.w 0
0001E070 0000 0000                  		dc.l Nem_Bomb		; bomb enemy
0001E074 8000                       		dc.w $8000
0001E076 0000 0000                  		dc.l Nem_Orbinaut	; orbinaut enemy
0001E07A 8520                       		dc.w $8520
0001E07C 0000 0000                  		dc.l Nem_MzFire		; fireballs
0001E080 9000                       		dc.w $9000
0001E082 0000 0000                  		dc.l Nem_SlzBlock	; block
0001E086 9C00                       		dc.w $9C00
0001E088 0000 0000                  		dc.l Nem_SlzWall	; breakable wall
0001E08C A260                       		dc.w $A260
0001E08E 0000 0000                  		dc.l Nem_Spikes		; spikes
0001E092 A360                       		dc.w $A360
0001E094 0000 0000                  		dc.l Nem_HSpring	; horizontal spring
0001E098 A460                       		dc.w $A460
0001E09A 0000 0000                  		dc.l Nem_VSpring	; vertical spring
0001E09E A660                       		dc.w $A660
0001E0A0 0005                       PLC_SLZ2:	dc.w 5
0001E0A2 0000 0000                  		dc.l Nem_Seesaw		; seesaw
0001E0A6 6E80                       		dc.w $6E80
0001E0A8 0000 0000                  		dc.l Nem_Fan		; fan
0001E0AC 7400                       		dc.w $7400
0001E0AE 0000 0000                  		dc.l Nem_Pylon		; foreground pylon
0001E0B2 7980                       		dc.w $7980
0001E0B4 0000 0000                  		dc.l Nem_SlzSwing	; swinging platform
0001E0B8 7B80                       		dc.w $7B80
0001E0BA 0000 0000                  		dc.l Nem_SlzCannon	; fireball launcher
0001E0BE 9B00                       		dc.w $9B00
0001E0C0 0000 0000                  		dc.l Nem_SlzSpike	; spikeball
0001E0C4 9E00                       		dc.w $9E00
0001E0C6                            ; ---------------------------------------------------------------------------
0001E0C6                            ; Pattern load cues - Spring Yard
0001E0C6                            ; ---------------------------------------------------------------------------
0001E0C6 0004                       PLC_SYZ:	dc.w 4
0001E0C8 0000 0000                  		dc.l Nem_SYZ		; SYZ main patterns
0001E0CC 0000                       		dc.w 0
0001E0CE 0000 0000                  		dc.l Nem_Crabmeat	; crabmeat enemy
0001E0D2 8000                       		dc.w $8000
0001E0D4 0000 0000                  		dc.l Nem_Buzz		; buzz bomber enemy
0001E0D8 8880                       		dc.w $8880
0001E0DA 0000 0000                  		dc.l Nem_Yadrin		; yadrin enemy
0001E0DE 8F60                       		dc.w $8F60
0001E0E0 0000 0000                  		dc.l Nem_Roller		; roller enemy
0001E0E4 9700                       		dc.w $9700
0001E0E6 0007                       PLC_SYZ2:	dc.w 7
0001E0E8 0000 0000                  		dc.l Nem_Bumper		; bumper
0001E0EC 7000                       		dc.w $7000
0001E0EE 0000 0000                  		dc.l Nem_SyzSpike1	; large	spikeball
0001E0F2 72C0                       		dc.w $72C0
0001E0F4 0000 0000                  		dc.l Nem_SyzSpike2	; small	spikeball
0001E0F8 7740                       		dc.w $7740
0001E0FA 0000 0000                  		dc.l Nem_Cater		; caterkiller enemy
0001E0FE 9FE0                       		dc.w $9FE0
0001E100 0000 0000                  		dc.l Nem_LzSwitch	; switch
0001E104 A1E0                       		dc.w $A1E0
0001E106 0000 0000                  		dc.l Nem_Spikes		; spikes
0001E10A A360                       		dc.w $A360
0001E10C 0000 0000                  		dc.l Nem_HSpring	; horizontal spring
0001E110 A460                       		dc.w $A460
0001E112 0000 0000                  		dc.l Nem_VSpring	; vertical spring
0001E116 A660                       		dc.w $A660
0001E118                            ; ---------------------------------------------------------------------------
0001E118                            ; Pattern load cues - Scrap Brain
0001E118                            ; ---------------------------------------------------------------------------
0001E118 000B                       PLC_SBZ:	dc.w $B
0001E11A 0000 0000                  		dc.l Nem_SBZ		; SBZ main patterns
0001E11E 0000                       		dc.w 0
0001E120 0000 0000                  		dc.l Nem_Stomper	; moving platform and stomper
0001E124 5800                       		dc.w $5800
0001E126 0000 0000                  		dc.l Nem_SbzDoor1	; door
0001E12A 5D00                       		dc.w $5D00
0001E12C 0000 0000                  		dc.l Nem_Girder		; girder
0001E130 5E00                       		dc.w $5E00
0001E132 0000 0000                  		dc.l Nem_BallHog	; ball hog enemy
0001E136 6040                       		dc.w $6040
0001E138 0000 0000                  		dc.l Nem_SbzWheel1	; spot on large	wheel
0001E13C 6880                       		dc.w $6880
0001E13E 0000 0000                  		dc.l Nem_SbzWheel2	; wheel	that grabs Sonic
0001E142 6900                       		dc.w $6900
0001E144 0000 0000                  		dc.l Nem_SyzSpike1	; large	spikeball
0001E148 7220                       		dc.w $7220
0001E14A 0000 0000                  		dc.l Nem_Cutter		; pizza	cutter
0001E14E 76A0                       		dc.w $76A0
0001E150 0000 0000                  		dc.l Nem_FlamePipe	; flaming pipe
0001E154 7B20                       		dc.w $7B20
0001E156 0000 0000                  		dc.l Nem_SbzFloor	; collapsing floor
0001E15A 7EA0                       		dc.w $7EA0
0001E15C 0000 0000                  		dc.l Nem_SbzBlock	; vanishing block
0001E160 9860                       		dc.w $9860
0001E162 000C                       PLC_SBZ2:	dc.w $C
0001E164 0000 0000                  		dc.l Nem_Cater		; caterkiller enemy
0001E168 5600                       		dc.w $5600
0001E16A 0000 0000                  		dc.l Nem_Bomb		; bomb enemy
0001E16E 8000                       		dc.w $8000
0001E170 0000 0000                  		dc.l Nem_Orbinaut	; orbinaut enemy
0001E174 8520                       		dc.w $8520
0001E176 0000 0000                  		dc.l Nem_SlideFloor	; floor	that slides away
0001E17A 8C00                       		dc.w $8C00
0001E17C 0000 0000                  		dc.l Nem_SbzDoor2	; horizontal door
0001E180 8DE0                       		dc.w $8DE0
0001E182 0000 0000                  		dc.l Nem_Electric	; electric orb
0001E186 8FC0                       		dc.w $8FC0
0001E188 0000 0000                  		dc.l Nem_TrapDoor	; trapdoor
0001E18C 9240                       		dc.w $9240
0001E18E 0000 0000                  		dc.l Nem_SbzFloor	; collapsing floor
0001E192 7F20                       		dc.w $7F20
0001E194 0000 0000                  		dc.l Nem_SpinPform	; small	spinning platform
0001E198 9BE0                       		dc.w $9BE0
0001E19A 0000 0000                  		dc.l Nem_LzSwitch	; switch
0001E19E A1E0                       		dc.w $A1E0
0001E1A0 0000 0000                  		dc.l Nem_Spikes		; spikes
0001E1A4 A360                       		dc.w $A360
0001E1A6 0000 0000                  		dc.l Nem_HSpring	; horizontal spring
0001E1AA A460                       		dc.w $A460
0001E1AC 0000 0000                  		dc.l Nem_VSpring	; vertical spring
0001E1B0 A660                       		dc.w $A660
0001E1B2                            ; ---------------------------------------------------------------------------
0001E1B2                            ; Pattern load cues - title card
0001E1B2                            ; ---------------------------------------------------------------------------
0001E1B2 0000                       PLC_TitleCard:	dc.w 0
0001E1B4 0000 0000                  		dc.l Nem_TitleCard
0001E1B8 B000                       		dc.w $B000
0001E1BA                            ; ---------------------------------------------------------------------------
0001E1BA                            ; Pattern load cues - act 3 boss
0001E1BA                            ; ---------------------------------------------------------------------------
0001E1BA 0005                       PLC_Boss:	dc.w 5
0001E1BC 0000 0000                  		dc.l Nem_Eggman		; Eggman main patterns
0001E1C0 8000                       		dc.w $8000
0001E1C2 0000 0000                  		dc.l Nem_Weapons	; Eggman's weapons
0001E1C6 8D80                       		dc.w $8D80
0001E1C8 0000 0000                  		dc.l Nem_Prison		; prison capsule
0001E1CC 93A0                       		dc.w $93A0
0001E1CE 0000 0000                  		dc.l Nem_Bomb		; bomb enemy (gets overwritten)
0001E1D2 A300                       		dc.w $A300
0001E1D4 0000 0000                  		dc.l Nem_SlzSpike	; spikeball (SLZ boss)
0001E1D8 A300                       		dc.w $A300
0001E1DA 0000 0000                  		dc.l Nem_Exhaust	; exhaust flame
0001E1DE A540                       		dc.w $A540
0001E1E0                            ; ---------------------------------------------------------------------------
0001E1E0                            ; Pattern load cues - act 1/2 signpost
0001E1E0                            ; ---------------------------------------------------------------------------
0001E1E0 0002                       PLC_Signpost:	dc.w 2
0001E1E2 0000 0000                  		dc.l Nem_SignPost	; signpost
0001E1E6 D000                       		dc.w $D000
0001E1E8 0000 0000                  		dc.l Nem_Bonus		; hidden bonus points
0001E1EC 96C0                       		dc.w $96C0
0001E1EE 0000 0000                  		dc.l Nem_BigFlash	; giant	ring flash effect
0001E1F2 8C40                       		dc.w $8C40
0001E1F4                            ; ---------------------------------------------------------------------------
0001E1F4                            ; Pattern load cues - beta special stage warp effect
0001E1F4                            ; ---------------------------------------------------------------------------
0001E1F4 0000                       PLC_Warp:	dc.w 0
0001E1F6 0000 0000                  		dc.l Nem_Warp
0001E1FA A820                       		dc.w $A820
0001E1FC                            ; ---------------------------------------------------------------------------
0001E1FC                            ; Pattern load cues - special stage
0001E1FC                            ; ---------------------------------------------------------------------------
0001E1FC 0010                       PLC_SpeStage:	dc.w $10
0001E1FE 0000 0000                  		dc.l Nem_SSBgCloud	; bubble and cloud background
0001E202 0000                       		dc.w 0
0001E204 0000 0000                  		dc.l Nem_SSBgFish	; bird and fish	background
0001E208 0A20                       		dc.w $A20
0001E20A 0000 0000                  		dc.l Nem_SSWalls	; walls
0001E20E 2840                       		dc.w $2840
0001E210 0000 0000                  		dc.l Nem_Bumper		; bumper
0001E214 4760                       		dc.w $4760
0001E216 0000 0000                  		dc.l Nem_SSGOAL		; GOAL block
0001E21A 4A20                       		dc.w $4A20
0001E21C 0000 0000                  		dc.l Nem_SSUpDown	; UP and DOWN blocks
0001E220 4C60                       		dc.w $4C60
0001E222 0000 0000                  		dc.l Nem_SSRBlock	; R block
0001E226 5E00                       		dc.w $5E00
0001E228 0000 0000                  		dc.l Nem_SS1UpBlock	; 1UP block
0001E22C 6E00                       		dc.w $6E00
0001E22E 0000 0000                  		dc.l Nem_SSEmStars	; emerald collection stars
0001E232 7E00                       		dc.w $7E00
0001E234 0000 0000                  		dc.l Nem_SSRedWhite	; red and white	block
0001E238 8E00                       		dc.w $8E00
0001E23A 0000 0000                  		dc.l Nem_SSGhost	; ghost	block
0001E23E 9E00                       		dc.w $9E00
0001E240 0000 0000                  		dc.l Nem_SSWBlock	; W block
0001E244 AE00                       		dc.w $AE00
0001E246 0000 0000                  		dc.l Nem_SSGlass	; glass	block
0001E24A BE00                       		dc.w $BE00
0001E24C 0000 0000                  		dc.l Nem_SSEmerald	; emeralds
0001E250 EE00                       		dc.w $EE00
0001E252 0000 0000                  		dc.l Nem_SSZone1	; ZONE 1 block
0001E256 F2E0                       		dc.w $F2E0
0001E258 0000 0000                  		dc.l Nem_SSZone2	; ZONE 2 block
0001E25C F400                       		dc.w $F400
0001E25E 0000 0000                  		dc.l Nem_SSZone3	; ZONE 3 block
0001E262 F520                       		dc.w $F520
0001E264 0000 0000                  		dc.l Nem_SSZone4	; ZONE 4 block
0001E268 F2E0                       		dc.w $F2E0
0001E26A 0000 0000                  		dc.l Nem_SSZone5	; ZONE 5 block
0001E26E F400                       		dc.w $F400
0001E270 0000 0000                  		dc.l Nem_SSZone6	; ZONE 6 block
0001E274 F520                       		dc.w $F520
0001E276                            ; ---------------------------------------------------------------------------
0001E276                            ; Pattern load cues - GHZ animals
0001E276                            ; ---------------------------------------------------------------------------
0001E276 0001                       PLC_GHZAnimals:	dc.w 1
0001E278 0000 0000                  		dc.l Nem_Rabbit		; rabbit
0001E27C B000                       		dc.w $B000
0001E27E 0000 0000                  		dc.l Nem_Flicky		; flicky
0001E282 B240                       		dc.w $B240
0001E284                            ; ---------------------------------------------------------------------------
0001E284                            ; Pattern load cues - LZ animals
0001E284                            ; ---------------------------------------------------------------------------
0001E284 0001                       PLC_LZAnimals:	dc.w 1
0001E286 0000 0000                  		dc.l Nem_BlackBird	; blackbird
0001E28A B000                       		dc.w $B000
0001E28C 0000 0000                  		dc.l Nem_Seal		; seal
0001E290 B240                       		dc.w $B240
0001E292                            ; ---------------------------------------------------------------------------
0001E292                            ; Pattern load cues - MZ animals
0001E292                            ; ---------------------------------------------------------------------------
0001E292 0001                       PLC_MZAnimals:	dc.w 1
0001E294 0000 0000                  		dc.l Nem_Squirrel	; squirrel
0001E298 B000                       		dc.w $B000
0001E29A 0000 0000                  		dc.l Nem_Seal		; seal
0001E29E B240                       		dc.w $B240
0001E2A0                            ; ---------------------------------------------------------------------------
0001E2A0                            ; Pattern load cues - SLZ animals
0001E2A0                            ; ---------------------------------------------------------------------------
0001E2A0 0001                       PLC_SLZAnimals:	dc.w 1
0001E2A2 0000 0000                  		dc.l Nem_Pig		; pig
0001E2A6 B000                       		dc.w $B000
0001E2A8 0000 0000                  		dc.l Nem_Flicky		; flicky
0001E2AC B240                       		dc.w $B240
0001E2AE                            ; ---------------------------------------------------------------------------
0001E2AE                            ; Pattern load cues - SYZ animals
0001E2AE                            ; ---------------------------------------------------------------------------
0001E2AE 0001                       PLC_SYZAnimals:	dc.w 1
0001E2B0 0000 0000                  		dc.l Nem_Pig		; pig
0001E2B4 B000                       		dc.w $B000
0001E2B6 0000 0000                  		dc.l Nem_Chicken	; chicken
0001E2BA B240                       		dc.w $B240
0001E2BC                            ; ---------------------------------------------------------------------------
0001E2BC                            ; Pattern load cues - SBZ animals
0001E2BC                            ; ---------------------------------------------------------------------------
0001E2BC 0001                       PLC_SBZAnimals:	dc.w 1
0001E2BE 0000 0000                  		dc.l Nem_Rabbit		; rabbit
0001E2C2 B000                       		dc.w $B000
0001E2C4 0000 0000                  		dc.l Nem_Chicken	; chicken
0001E2C8 B240                       		dc.w $B240
0001E2CA                            ; ---------------------------------------------------------------------------
0001E2CA                            ; Pattern load cues - special stage results screen
0001E2CA                            ; ---------------------------------------------------------------------------
0001E2CA 0001                       PLC_SpeStResult:dc.w 1
0001E2CC 0000 0000                  		dc.l Nem_ResultEm	; emeralds
0001E2D0 A820                       		dc.w $A820
0001E2D2 0000 0000                  		dc.l Nem_MiniSonic	; mini Sonic
0001E2D6 AA20                       		dc.w $AA20
0001E2D8                            ; ---------------------------------------------------------------------------
0001E2D8                            ; Pattern load cues - ending sequence
0001E2D8                            ; ---------------------------------------------------------------------------
0001E2D8 000E                       PLC_Ending:	dc.w $E
0001E2DA 0000 0000                  		dc.l Nem_GHZ_1st	; GHZ main patterns
0001E2DE 0000                       		dc.w 0
0001E2E0 0000 0000                  		dc.l Nem_GHZ_2nd	; GHZ secondary	patterns
0001E2E4 39A0                       		dc.w $39A0
0001E2E6 0000 0000                  		dc.l Nem_Stalk		; flower stalk
0001E2EA 6B00                       		dc.w $6B00
0001E2EC 0000 0000                  		dc.l Nem_EndFlower	; flowers
0001E2F0 7400                       		dc.w $7400
0001E2F2 0000 0000                  		dc.l Nem_EndEm		; emeralds
0001E2F6 78A0                       		dc.w $78A0
0001E2F8 0000 0000                  		dc.l Nem_EndSonic	; Sonic
0001E2FC 7C20                       		dc.w $7C20
0001E2FE 0000 0000                  		dc.l Nem_EndEggman	; Eggman's death (unused)
0001E302 A480                       		dc.w $A480
0001E304 0000 0000                  		dc.l Nem_Rabbit		; rabbit
0001E308 AA60                       		dc.w $AA60
0001E30A 0000 0000                  		dc.l Nem_Chicken	; chicken
0001E30E ACA0                       		dc.w $ACA0
0001E310 0000 0000                  		dc.l Nem_BlackBird	; blackbird
0001E314 AE60                       		dc.w $AE60
0001E316 0000 0000                  		dc.l Nem_Seal		; seal
0001E31A B0A0                       		dc.w $B0A0
0001E31C 0000 0000                  		dc.l Nem_Pig		; pig
0001E320 B260                       		dc.w $B260
0001E322 0000 0000                  		dc.l Nem_Flicky		; flicky
0001E326 B4A0                       		dc.w $B4A0
0001E328 0000 0000                  		dc.l Nem_Squirrel	; squirrel
0001E32C B660                       		dc.w $B660
0001E32E 0000 0000                  		dc.l Nem_EndStH		; "SONIC THE HEDGEHOG"
0001E332 B8A0                       		dc.w $B8A0
0001E334                            ; ---------------------------------------------------------------------------
0001E334                            ; Pattern load cues - "TRY AGAIN" and "END" screens
0001E334                            ; ---------------------------------------------------------------------------
0001E334 0002                       PLC_TryAgain:	dc.w 2
0001E336 0000 0000                  		dc.l Nem_EndEm		; emeralds
0001E33A 78A0                       		dc.w $78A0
0001E33C 0000 0000                  		dc.l Nem_TryAgain	; Eggman
0001E340 7C20                       		dc.w $7C20
0001E342 0000 0000                  		dc.l Nem_CreditText	; credits alphabet
0001E346 B400                       		dc.w $B400
0001E348                            ; ---------------------------------------------------------------------------
0001E348                            ; Pattern load cues - Eggman on SBZ 2
0001E348                            ; ---------------------------------------------------------------------------
0001E348 0002                       PLC_EggmanSBZ2:	dc.w 2
0001E34A 0000 0000                  		dc.l Nem_SbzBlock	; block
0001E34E A300                       		dc.w $A300
0001E350 0000 0000                  		dc.l Nem_Sbz2Eggman	; Eggman
0001E354 8000                       		dc.w $8000
0001E356 0000 0000                  		dc.l Nem_LzSwitch	; switch
0001E35A 9400                       		dc.w $9400
0001E35C                            ; ---------------------------------------------------------------------------
0001E35C                            ; Pattern load cues - final boss
0001E35C                            ; ---------------------------------------------------------------------------
0001E35C 0004                       PLC_FZBoss:	dc.w 4
0001E35E 0000 0000                  		dc.l Nem_FzEggman	; Eggman after boss
0001E362 7400                       		dc.w $7400
0001E364 0000 0000                  		dc.l Nem_FzBoss		; FZ boss
0001E368 6000                       		dc.w $6000
0001E36A 0000 0000                  		dc.l Nem_Eggman		; Eggman main patterns
0001E36E 8000                       		dc.w $8000
0001E370 0000 0000                  		dc.l Nem_Sbz2Eggman	; Eggman without ship
0001E374 8E00                       		dc.w $8E00
0001E376 0000 0000                  		dc.l Nem_Exhaust	; exhaust flame
0001E37A A540                       		dc.w $A540
0001E37C                            ; ---------------------------------------------------------------------------
0001E37C                            ; Pattern load cues - Teto boss
0001E37C                            ; ---------------------------------------------------------------------------
0001E37C 0002                       PLC_TetoBoss:	dc.w 2
0001E37E 0000 0000                  		dc.l Nem_Tetoboss		; Eggman main patterns
0001E382 8000                       		dc.w $8000
0001E384 0000 0000                  		dc.l Nem_Prison		; prison capsule
0001E388 93A0                       		dc.w $93A0
0001E38A 0000 0000                  		dc.l Nem_Peartobomb		; bomb enemy (gets overwritten)
0001E38E 9000                       		dc.w $9000
0001E390                            		even
0001E390                            		even
0001E390                            
0001E390                            		incbin	misc\padding.bin
0001E47E                            		even
0001E47E                            Nem_SegaLogo:	incbin	artnem\segalogo.bin	; large Sega logo
0001E8CE                            		even
0001E8CE                            Eni_SegaLogo:	incbin	mapeni\segalogo.bin	; large Sega logo (mappings)
0001E960                            		even
0001E960                            Nem_Gomer:	incbin	artnem\gomer.bin
0001EAA2                            		even
0001EAA2                            Eni_Gomer:	incbin	mapeni\gomer.bin
0001EAF0                            		even
0001EAF0                            Eni_Title:	incbin	mapeni\titlescr.bin	; title screen foreground (mappings)
0001EC04                            		even
0001EC04                            Nem_TitleFg:	incbin	artnem\titlefor.bin	; title screen foreground
0001FACE                            		even
0001FACE                            Nem_TitleSonic:	incbin	artnem\titleson.bin	; Sonic on title screen
00023BD4                            		even
00023BD4                            Nem_TitleTM:	incbin	artnem\titletm.bin	; TM on title screen
00023C08                            		even
00023C08                            Eni_JapNames:	incbin	mapeni\japcreds.bin	; Japanese credits (mappings)
00023CC6                            		even
00023CC6                            Nem_JapNames:	incbin	artnem\japcreds.bin	; Japanese credits
0002416E                            		even
0002416E                            Eni_Idiot:	incbin	mapeni\idiot.bin	; Idiot (mappings)
000241CC                            		even
000241CC                            Nem_Idiot:	incbin	artnem\idiot.bin	; Idiot
00024DD2                            		even
00024DD2                            ; ---------------------------------------------------------------------------
00024DD2                            ; Sprite mappings - Sonic
00024DD2                            ; ---------------------------------------------------------------------------
00024DD2                            Map_Sonic:
00024DD2                            	include "_maps\Sonic.asm"
00024DD2                            Map_6d2d:
00024DD2 0000                       Map_6d2d_0: 	dc.w Map_6d2d_B8-Map_6d2d
00024DD4 0000                       Map_6d2d_2: 	dc.w Map_6d2d_B9-Map_6d2d
00024DD6 0000                       Map_6d2d_4: 	dc.w Map_6d2d_C4-Map_6d2d
00024DD8 0000                       Map_6d2d_6: 	dc.w Map_6d2d_D4-Map_6d2d
00024DDA 0000                       Map_6d2d_8: 	dc.w Map_6d2d_E4-Map_6d2d
00024DDC 0000                       Map_6d2d_A: 	dc.w Map_6d2d_F4-Map_6d2d
00024DDE 0000                       Map_6d2d_C: 	dc.w Map_6d2d_104-Map_6d2d
00024DE0 0000                       Map_6d2d_E: 	dc.w Map_6d2d_119-Map_6d2d
00024DE2 0000                       Map_6d2d_10: 	dc.w Map_6d2d_124-Map_6d2d
00024DE4 0000                       Map_6d2d_12: 	dc.w Map_6d2d_12F-Map_6d2d
00024DE6 0000                       Map_6d2d_14: 	dc.w Map_6d2d_144-Map_6d2d
00024DE8 0000                       Map_6d2d_16: 	dc.w Map_6d2d_14F-Map_6d2d
00024DEA 0000                       Map_6d2d_18: 	dc.w Map_6d2d_15F-Map_6d2d
00024DEC 0000                       Map_6d2d_1A: 	dc.w Map_6d2d_179-Map_6d2d
00024DEE 0000                       Map_6d2d_1C: 	dc.w Map_6d2d_198-Map_6d2d
00024DF0 0000                       Map_6d2d_1E: 	dc.w Map_6d2d_1AD-Map_6d2d
00024DF2 0000                       Map_6d2d_20: 	dc.w Map_6d2d_1C7-Map_6d2d
00024DF4 0000                       Map_6d2d_22: 	dc.w Map_6d2d_1DC-Map_6d2d
00024DF6 0000                       Map_6d2d_24: 	dc.w Map_6d2d_1F6-Map_6d2d
00024DF8 0000                       Map_6d2d_26: 	dc.w Map_6d2d_20B-Map_6d2d
00024DFA 0000                       Map_6d2d_28: 	dc.w Map_6d2d_216-Map_6d2d
00024DFC 0000                       Map_6d2d_2A: 	dc.w Map_6d2d_221-Map_6d2d
00024DFE 0000                       Map_6d2d_2C: 	dc.w Map_6d2d_236-Map_6d2d
00024E00 0000                       Map_6d2d_2E: 	dc.w Map_6d2d_241-Map_6d2d
00024E02 0000                       Map_6d2d_30: 	dc.w Map_6d2d_251-Map_6d2d
00024E04 0000                       Map_6d2d_32: 	dc.w Map_6d2d_270-Map_6d2d
00024E06 0000                       Map_6d2d_34: 	dc.w Map_6d2d_28F-Map_6d2d
00024E08 0000                       Map_6d2d_36: 	dc.w Map_6d2d_2A4-Map_6d2d
00024E0A 0000                       Map_6d2d_38: 	dc.w Map_6d2d_2BE-Map_6d2d
00024E0C 0000                       Map_6d2d_3A: 	dc.w Map_6d2d_2D3-Map_6d2d
00024E0E 0000                       Map_6d2d_3C: 	dc.w Map_6d2d_2ED-Map_6d2d
00024E10 0000                       Map_6d2d_3E: 	dc.w Map_6d2d_2F8-Map_6d2d
00024E12 0000                       Map_6d2d_40: 	dc.w Map_6d2d_303-Map_6d2d
00024E14 0000                       Map_6d2d_42: 	dc.w Map_6d2d_30E-Map_6d2d
00024E16 0000                       Map_6d2d_44: 	dc.w Map_6d2d_319-Map_6d2d
00024E18 0000                       Map_6d2d_46: 	dc.w Map_6d2d_32E-Map_6d2d
00024E1A 0000                       Map_6d2d_48: 	dc.w Map_6d2d_33E-Map_6d2d
00024E1C 0000                       Map_6d2d_4A: 	dc.w Map_6d2d_353-Map_6d2d
00024E1E 0000                       Map_6d2d_4C: 	dc.w Map_6d2d_363-Map_6d2d
00024E20 0000                       Map_6d2d_4E: 	dc.w Map_6d2d_36E-Map_6d2d
00024E22 0000                       Map_6d2d_50: 	dc.w Map_6d2d_379-Map_6d2d
00024E24 0000                       Map_6d2d_52: 	dc.w Map_6d2d_384-Map_6d2d
00024E26 0000                       Map_6d2d_54: 	dc.w Map_6d2d_38F-Map_6d2d
00024E28 0000                       Map_6d2d_56: 	dc.w Map_6d2d_3A4-Map_6d2d
00024E2A 0000                       Map_6d2d_58: 	dc.w Map_6d2d_3AF-Map_6d2d
00024E2C 0000                       Map_6d2d_5A: 	dc.w Map_6d2d_3C4-Map_6d2d
00024E2E 0000                       Map_6d2d_5C: 	dc.w Map_6d2d_3CF-Map_6d2d
00024E30 0000                       Map_6d2d_5E: 	dc.w Map_6d2d_3D5-Map_6d2d
00024E32 0000                       Map_6d2d_60: 	dc.w Map_6d2d_3DB-Map_6d2d
00024E34 0000                       Map_6d2d_62: 	dc.w Map_6d2d_3E1-Map_6d2d
00024E36 0000                       Map_6d2d_64: 	dc.w Map_6d2d_3E7-Map_6d2d
00024E38 0000                       Map_6d2d_66: 	dc.w Map_6d2d_3ED-Map_6d2d
00024E3A 0000                       Map_6d2d_68: 	dc.w Map_6d2d_3F8-Map_6d2d
00024E3C 0000                       Map_6d2d_6A: 	dc.w Map_6d2d_3FE-Map_6d2d
00024E3E 0000                       Map_6d2d_6C: 	dc.w Map_6d2d_409-Map_6d2d
00024E40 0000                       Map_6d2d_6E: 	dc.w Map_6d2d_40F-Map_6d2d
00024E42 0000                       Map_6d2d_70: 	dc.w Map_6d2d_41A-Map_6d2d
00024E44 0000                       Map_6d2d_72: 	dc.w Map_6d2d_42F-Map_6d2d
00024E46 0000                       Map_6d2d_74: 	dc.w Map_6d2d_44E-Map_6d2d
00024E48 0000                       Map_6d2d_76: 	dc.w Map_6d2d_459-Map_6d2d
00024E4A 0000                       Map_6d2d_78: 	dc.w Map_6d2d_464-Map_6d2d
00024E4C 0000                       Map_6d2d_7A: 	dc.w Map_6d2d_479-Map_6d2d
00024E4E 0000                       Map_6d2d_7C: 	dc.w Map_6d2d_484-Map_6d2d
00024E50 0000                       Map_6d2d_7E: 	dc.w Map_6d2d_494-Map_6d2d
00024E52 0000                       Map_6d2d_80: 	dc.w Map_6d2d_4A9-Map_6d2d
00024E54 0000                       Map_6d2d_82: 	dc.w Map_6d2d_4B9-Map_6d2d
00024E56 0000                       Map_6d2d_84: 	dc.w Map_6d2d_4CE-Map_6d2d
00024E58 0000                       Map_6d2d_86: 	dc.w Map_6d2d_4E3-Map_6d2d
00024E5A 0000                       Map_6d2d_88: 	dc.w Map_6d2d_4FD-Map_6d2d
00024E5C 0000                       Map_6d2d_8A: 	dc.w Map_6d2d_517-Map_6d2d
00024E5E 0000                       Map_6d2d_8C: 	dc.w Map_6d2d_522-Map_6d2d
00024E60 0000                       Map_6d2d_8E: 	dc.w Map_6d2d_532-Map_6d2d
00024E62 0000                       Map_6d2d_90: 	dc.w Map_6d2d_53D-Map_6d2d
00024E64 0000                       Map_6d2d_92: 	dc.w Map_6d2d_54D-Map_6d2d
00024E66 0000                       Map_6d2d_94: 	dc.w Map_6d2d_558-Map_6d2d
00024E68 0000                       Map_6d2d_96: 	dc.w Map_6d2d_568-Map_6d2d
00024E6A 0000                       Map_6d2d_98: 	dc.w Map_6d2d_578-Map_6d2d
00024E6C 0000                       Map_6d2d_9A: 	dc.w Map_6d2d_592-Map_6d2d
00024E6E 0000                       Map_6d2d_9C: 	dc.w Map_6d2d_5AC-Map_6d2d
00024E70 0000                       Map_6d2d_9E: 	dc.w Map_6d2d_5B7-Map_6d2d
00024E72 0000                       Map_6d2d_A0: 	dc.w Map_6d2d_5C7-Map_6d2d
00024E74 0000                       Map_6d2d_A2: 	dc.w Map_6d2d_5CD-Map_6d2d
00024E76 0000                       Map_6d2d_A4: 	dc.w Map_6d2d_5D3-Map_6d2d
00024E78 0000                       Map_6d2d_A6: 	dc.w Map_6d2d_5D9-Map_6d2d
00024E7A 0000                       Map_6d2d_A8: 	dc.w Map_6d2d_5EE-Map_6d2d
00024E7C 0000                       Map_6d2d_AA: 	dc.w Map_6d2d_5FE-Map_6d2d
00024E7E 0000                       Map_6d2d_AC: 	dc.w Map_6d2d_60E-Map_6d2d
00024E80 0000                       Map_6d2d_AE: 	dc.w Map_6d2d_61E-Map_6d2d
00024E82 0000                       Map_6d2d_B0: 	dc.w Map_6d2d_629-Map_6d2d
00024E84 0000                       Map_6d2d_B2: 	dc.w Map_6d2d_634-Map_6d2d
00024E86 0000                       Map_6d2d_B4: 	dc.w Map_6d2d_644-Map_6d2d
00024E88 0000                       Map_6d2d_B6: 	dc.w Map_6d2d_64F-Map_6d2d
00024E8A 00                         Map_6d2d_B8: 	dc.b $0
00024E8B 02                         Map_6d2d_B9: 	dc.b $2
00024E8C ED0E 0000 ED               	dc.b $ED, $E, $0, $0, $ED
00024E91 0509 000C F5               	dc.b $5, $9, $0, $C, $F5
00024E96 03                         Map_6d2d_C4: 	dc.b $3
00024E97 EC09 0000 F0               	dc.b $EC, $9, $0, $0, $F0
00024E9C FC09 0006 F0               	dc.b $FC, $9, $0, $6, $F0
00024EA1 0C08 000C F8               	dc.b $C, $8, $0, $C, $F8
00024EA6 03                         Map_6d2d_D4: 	dc.b $3
00024EA7 EC09 0000 F0               	dc.b $EC, $9, $0, $0, $F0
00024EAC FC09 0006 F0               	dc.b $FC, $9, $0, $6, $F0
00024EB1 0C08 000C F8               	dc.b $C, $8, $0, $C, $F8
00024EB6 03                         Map_6d2d_E4: 	dc.b $3
00024EB7 EC09 0000 F0               	dc.b $EC, $9, $0, $0, $F0
00024EBC FC09 0006 F0               	dc.b $FC, $9, $0, $6, $F0
00024EC1 0C08 000C F8               	dc.b $C, $8, $0, $C, $F8
00024EC6 03                         Map_6d2d_F4: 	dc.b $3
00024EC7 EC0A 0000 F0               	dc.b $EC, $A, $0, $0, $F0
00024ECC 0408 0009 F0               	dc.b $4, $8, $0, $9, $F0
00024ED1 0C08 000C F8               	dc.b $C, $8, $0, $C, $F8
00024ED6 04                         Map_6d2d_104: 	dc.b $4
00024ED7 EB0D 0000 EC               	dc.b $EB, $D, $0, $0, $EC
00024EDC FB09 0008 EC               	dc.b $FB, $9, $0, $8, $EC
00024EE1 FB06 000E 04               	dc.b $FB, $6, $0, $E, $4
00024EE6 0B04 0014 EC               	dc.b $B, $4, $0, $14, $EC
00024EEB 02                         Map_6d2d_119: 	dc.b $2
00024EEC EC0D 0000 ED               	dc.b $EC, $D, $0, $0, $ED
00024EF1 FC0E 0008 F5               	dc.b $FC, $E, $0, $8, $F5
00024EF6 02                         Map_6d2d_124: 	dc.b $2
00024EF7 ED09 0000 F3               	dc.b $ED, $9, $0, $0, $F3
00024EFC FD0A 0006 F3               	dc.b $FD, $A, $0, $6, $F3
00024F01 04                         Map_6d2d_12F: 	dc.b $4
00024F02 EB09 0000 F4               	dc.b $EB, $9, $0, $0, $F4
00024F07 FB09 0006 EC               	dc.b $FB, $9, $0, $6, $EC
00024F0C FB06 000C 04               	dc.b $FB, $6, $0, $C, $4
00024F11 0B04 0012 EC               	dc.b $B, $4, $0, $12, $EC
00024F16 02                         Map_6d2d_144: 	dc.b $2
00024F17 FC0E 0000 EB               	dc.b $FC, $E, $0, $0, $EB
00024F1C EC09 000C F3               	dc.b $EC, $9, $0, $C, $F3
00024F21 03                         Map_6d2d_14F: 	dc.b $3
00024F22 ED0D 0000 EC               	dc.b $ED, $D, $0, $0, $EC
00024F27 FD0C 0008 F4               	dc.b $FD, $C, $0, $8, $F4
00024F2C 0509 000C F4               	dc.b $5, $9, $0, $C, $F4
00024F31 05                         Map_6d2d_15F: 	dc.b $5
00024F32 EB09 0000 EB               	dc.b $EB, $9, $0, $0, $EB
00024F37 EB06 0006 03               	dc.b $EB, $6, $0, $6, $3
00024F3C FB08 000C EB               	dc.b $FB, $8, $0, $C, $EB
00024F41 0309 000F F3               	dc.b $3, $9, $0, $F, $F3
00024F46 1300 0015 FB               	dc.b $13, $0, $0, $15, $FB
00024F4B 06                         Map_6d2d_179: 	dc.b $6
00024F4C EC09 0000 EC               	dc.b $EC, $9, $0, $0, $EC
00024F51 EC01 0006 04               	dc.b $EC, $1, $0, $6, $4
00024F56 FC0C 0008 EC               	dc.b $FC, $C, $0, $8, $EC
00024F5B 0409 000C F4               	dc.b $4, $9, $0, $C, $F4
00024F60 FC05 0012 0C               	dc.b $FC, $5, $0, $12, $C
00024F65 F400 0016 14               	dc.b $F4, $0, $0, $16, $14
00024F6A 04                         Map_6d2d_198: 	dc.b $4
00024F6B ED09 0000 ED               	dc.b $ED, $9, $0, $0, $ED
00024F70 ED01 0006 05               	dc.b $ED, $1, $0, $6, $5
00024F75 FD0D 0008 F5               	dc.b $FD, $D, $0, $8, $F5
00024F7A 0D08 0010 FD               	dc.b $D, $8, $0, $10, $FD
00024F7F 05                         Map_6d2d_1AD: 	dc.b $5
00024F80 EB09 0000 EB               	dc.b $EB, $9, $0, $0, $EB
00024F85 EB05 0006 03               	dc.b $EB, $5, $0, $6, $3
00024F8A FB0D 000A F3               	dc.b $FB, $D, $0, $A, $F3
00024F8F 0B08 0012 F3               	dc.b $B, $8, $0, $12, $F3
00024F94 1304 0015 FB               	dc.b $13, $4, $0, $15, $FB
00024F99 04                         Map_6d2d_1C7: 	dc.b $4
00024F9A EC09 0000 EC               	dc.b $EC, $9, $0, $0, $EC
00024F9F EC01 0006 04               	dc.b $EC, $1, $0, $6, $4
00024FA4 FC0D 0008 F4               	dc.b $FC, $D, $0, $8, $F4
00024FA9 0C08 0010 FC               	dc.b $C, $8, $0, $10, $FC
00024FAE 05                         Map_6d2d_1DC: 	dc.b $5
00024FAF ED09 0000 ED               	dc.b $ED, $9, $0, $0, $ED
00024FB4 ED01 0006 05               	dc.b $ED, $1, $0, $6, $5
00024FB9 FD00 0008 ED               	dc.b $FD, $0, $0, $8, $ED
00024FBE FD0D 0009 F5               	dc.b $FD, $D, $0, $9, $F5
00024FC3 0D08 0011 FD               	dc.b $D, $8, $0, $11, $FD
00024FC8 04                         Map_6d2d_1F6: 	dc.b $4
00024FC9 F407 0000 EB               	dc.b $F4, $7, $0, $0, $EB
00024FCE EC09 0008 FB               	dc.b $EC, $9, $0, $8, $FB
00024FD3 FC04 000E FB               	dc.b $FC, $4, $0, $E, $FB
00024FD8 0409 0010 FB               	dc.b $4, $9, $0, $10, $FB
00024FDD 02                         Map_6d2d_20B: 	dc.b $2
00024FDE F407 0000 EC               	dc.b $F4, $7, $0, $0, $EC
00024FE3 EC0B 0008 FC               	dc.b $EC, $B, $0, $8, $FC
00024FE8 02                         Map_6d2d_216: 	dc.b $2
00024FE9 F406 0000 ED               	dc.b $F4, $6, $0, $0, $ED
00024FEE F40A 0006 FD               	dc.b $F4, $A, $0, $6, $FD
00024FF3 04                         Map_6d2d_221: 	dc.b $4
00024FF4 F406 0000 EB               	dc.b $F4, $6, $0, $0, $EB
00024FF9 EC09 0006 FB               	dc.b $EC, $9, $0, $6, $FB
00024FFE FC04 000C FB               	dc.b $FC, $4, $0, $C, $FB
00025003 0409 000E FB               	dc.b $4, $9, $0, $E, $FB
00025008 02                         Map_6d2d_236: 	dc.b $2
00025009 F406 0000 EC               	dc.b $F4, $6, $0, $0, $EC
0002500E F40B 0006 FC               	dc.b $F4, $B, $0, $6, $FC
00025013 03                         Map_6d2d_241: 	dc.b $3
00025014 F407 0000 ED               	dc.b $F4, $7, $0, $0, $ED
00025019 EC00 0008 FD               	dc.b $EC, $0, $0, $8, $FD
0002501E F40A 0009 FD               	dc.b $F4, $A, $0, $9, $FD
00025023 06                         Map_6d2d_251: 	dc.b $6
00025024 FD06 0000 EB               	dc.b $FD, $6, $0, $0, $EB
00025029 ED04 0006 F3               	dc.b $ED, $4, $0, $6, $F3
0002502E F504 0008 EB               	dc.b $F5, $4, $0, $8, $EB
00025033 F50A 000A FB               	dc.b $F5, $A, $0, $A, $FB
00025038 0D00 0013 FB               	dc.b $D, $0, $0, $13, $FB
0002503D FD00 0014 13               	dc.b $FD, $0, $0, $14, $13
00025042 06                         Map_6d2d_270: 	dc.b $6
00025043 FC06 0000 EC               	dc.b $FC, $6, $0, $0, $EC
00025048 E408 0006 F4               	dc.b $E4, $8, $0, $6, $F4
0002504D EC04 0009 FC               	dc.b $EC, $4, $0, $9, $FC
00025052 F404 000B EC               	dc.b $F4, $4, $0, $B, $EC
00025057 F40A 000D FC               	dc.b $F4, $A, $0, $D, $FC
0002505C 0C00 0016 FC               	dc.b $C, $0, $0, $16, $FC
00025061 04                         Map_6d2d_28F: 	dc.b $4
00025062 FB06 0000 ED               	dc.b $FB, $6, $0, $0, $ED
00025067 F304 0006 ED               	dc.b $F3, $4, $0, $6, $ED
0002506C EB0A 0008 FD               	dc.b $EB, $A, $0, $8, $FD
00025071 0304 0011 FD               	dc.b $3, $4, $0, $11, $FD
00025076 05                         Map_6d2d_2A4: 	dc.b $5
00025077 FD06 0000 EB               	dc.b $FD, $6, $0, $0, $EB
0002507C ED08 0006 F3               	dc.b $ED, $8, $0, $6, $F3
00025081 F504 0009 EB               	dc.b $F5, $4, $0, $9, $EB
00025086 F50D 000B FB               	dc.b $F5, $D, $0, $B, $FB
0002508B 0508 0013 FB               	dc.b $5, $8, $0, $13, $FB
00025090 04                         Map_6d2d_2BE: 	dc.b $4
00025091 FC06 0000 EC               	dc.b $FC, $6, $0, $0, $EC
00025096 F404 0006 EC               	dc.b $F4, $4, $0, $6, $EC
0002509B EC0A 0008 FC               	dc.b $EC, $A, $0, $8, $FC
000250A0 0404 0011 FC               	dc.b $4, $4, $0, $11, $FC
000250A5 05                         Map_6d2d_2D3: 	dc.b $5
000250A6 FB06 0000 ED               	dc.b $FB, $6, $0, $0, $ED
000250AB EB0A 0006 FD               	dc.b $EB, $A, $0, $6, $FD
000250B0 F304 000F ED               	dc.b $F3, $4, $0, $F, $ED
000250B5 0304 0011 FD               	dc.b $3, $4, $0, $11, $FD
000250BA 0B00 0013 FD               	dc.b $B, $0, $0, $13, $FD
000250BF 02                         Map_6d2d_2ED: 	dc.b $2
000250C0 EE09 0000 F4               	dc.b $EE, $9, $0, $0, $F4
000250C5 FE0E 0006 EC               	dc.b $FE, $E, $0, $6, $EC
000250CA 02                         Map_6d2d_2F8: 	dc.b $2
000250CB EE09 0000 F4               	dc.b $EE, $9, $0, $0, $F4
000250D0 FE0E 0006 EC               	dc.b $FE, $E, $0, $6, $EC
000250D5 02                         Map_6d2d_303: 	dc.b $2
000250D6 EE09 0000 F4               	dc.b $EE, $9, $0, $0, $F4
000250DB FE0E 0006 EC               	dc.b $FE, $E, $0, $6, $EC
000250E0 02                         Map_6d2d_30E: 	dc.b $2
000250E1 EE09 0000 F4               	dc.b $EE, $9, $0, $0, $F4
000250E6 FE0E 0006 EC               	dc.b $FE, $E, $0, $6, $EC
000250EB 04                         Map_6d2d_319: 	dc.b $4
000250EC EE09 0000 EE               	dc.b $EE, $9, $0, $0, $EE
000250F1 EE01 0006 06               	dc.b $EE, $1, $0, $6, $6
000250F6 FE0E 0008 F6               	dc.b $FE, $E, $0, $8, $F6
000250FB FE00 0014 EE               	dc.b $FE, $0, $0, $14, $EE
00025100 03                         Map_6d2d_32E: 	dc.b $3
00025101 EE09 0000 EE               	dc.b $EE, $9, $0, $0, $EE
00025106 EE01 0006 06               	dc.b $EE, $1, $0, $6, $6
0002510B FE0E 0008 F6               	dc.b $FE, $E, $0, $8, $F6
00025110 04                         Map_6d2d_33E: 	dc.b $4
00025111 EE09 0000 EE               	dc.b $EE, $9, $0, $0, $EE
00025116 EE01 0006 06               	dc.b $EE, $1, $0, $6, $6
0002511B FE0E 0008 F6               	dc.b $FE, $E, $0, $8, $F6
00025120 FE00 0014 EE               	dc.b $FE, $0, $0, $14, $EE
00025125 03                         Map_6d2d_353: 	dc.b $3
00025126 EE09 0000 EE               	dc.b $EE, $9, $0, $0, $EE
0002512B EE01 0006 06               	dc.b $EE, $1, $0, $6, $6
00025130 FE0E 0008 F6               	dc.b $FE, $E, $0, $8, $F6
00025135 02                         Map_6d2d_363: 	dc.b $2
00025136 F406 0000 EE               	dc.b $F4, $6, $0, $0, $EE
0002513B F40B 0006 FE               	dc.b $F4, $B, $0, $6, $FE
00025140 02                         Map_6d2d_36E: 	dc.b $2
00025141 F406 0000 EE               	dc.b $F4, $6, $0, $0, $EE
00025146 F40B 0006 FE               	dc.b $F4, $B, $0, $6, $FE
0002514B 02                         Map_6d2d_379: 	dc.b $2
0002514C F406 0000 EE               	dc.b $F4, $6, $0, $0, $EE
00025151 F40B 0006 FE               	dc.b $F4, $B, $0, $6, $FE
00025156 02                         Map_6d2d_384: 	dc.b $2
00025157 F406 0000 EE               	dc.b $F4, $6, $0, $0, $EE
0002515C F40B 0006 FE               	dc.b $F4, $B, $0, $6, $FE
00025161 04                         Map_6d2d_38F: 	dc.b $4
00025162 FA06 0000 EE               	dc.b $FA, $6, $0, $0, $EE
00025167 F204 0006 EE               	dc.b $F2, $4, $0, $6, $EE
0002516C EA0B 0008 FE               	dc.b $EA, $B, $0, $8, $FE
00025171 0A00 0014 FE               	dc.b $A, $0, $0, $14, $FE
00025176 02                         Map_6d2d_3A4: 	dc.b $2
00025177 F207 0000 EE               	dc.b $F2, $7, $0, $0, $EE
0002517C EA0B 0008 FE               	dc.b $EA, $B, $0, $8, $FE
00025181 04                         Map_6d2d_3AF: 	dc.b $4
00025182 FA06 0000 EE               	dc.b $FA, $6, $0, $0, $EE
00025187 F204 0006 EE               	dc.b $F2, $4, $0, $6, $EE
0002518C EA0B 0008 FE               	dc.b $EA, $B, $0, $8, $FE
00025191 0A00 0014 FE               	dc.b $A, $0, $0, $14, $FE
00025196 02                         Map_6d2d_3C4: 	dc.b $2
00025197 F207 0000 EE               	dc.b $F2, $7, $0, $0, $EE
0002519C EA0B 0008 FE               	dc.b $EA, $B, $0, $8, $FE
000251A1 01                         Map_6d2d_3CF: 	dc.b $1
000251A2 F00F 0000 F0               	dc.b $F0, $F, $0, $0, $F0
000251A7 01                         Map_6d2d_3D5: 	dc.b $1
000251A8 F00F 0000 F0               	dc.b $F0, $F, $0, $0, $F0
000251AD 01                         Map_6d2d_3DB: 	dc.b $1
000251AE F00F 0000 F0               	dc.b $F0, $F, $0, $0, $F0
000251B3 01                         Map_6d2d_3E1: 	dc.b $1
000251B4 F00F 0000 F0               	dc.b $F0, $F, $0, $0, $F0
000251B9 01                         Map_6d2d_3E7: 	dc.b $1
000251BA F00F 0000 F0               	dc.b $F0, $F, $0, $0, $F0
000251BF 02                         Map_6d2d_3ED: 	dc.b $2
000251C0 F40E 0000 EC               	dc.b $F4, $E, $0, $0, $EC
000251C5 F402 000C 0C               	dc.b $F4, $2, $0, $C, $C
000251CA 01                         Map_6d2d_3F8: 	dc.b $1
000251CB F00F 0000 F0               	dc.b $F0, $F, $0, $0, $F0
000251D0 02                         Map_6d2d_3FE: 	dc.b $2
000251D1 EC0B 0000 F4               	dc.b $EC, $B, $0, $0, $F4
000251D6 0C08 000C F4               	dc.b $C, $8, $0, $C, $F4
000251DB 01                         Map_6d2d_409: 	dc.b $1
000251DC F00F 0000 F0               	dc.b $F0, $F, $0, $0, $F0
000251E1 02                         Map_6d2d_40F: 	dc.b $2
000251E2 ED09 0000 F0               	dc.b $ED, $9, $0, $0, $F0
000251E7 FD0E 0006 F0               	dc.b $FD, $E, $0, $6, $F0
000251EC 04                         Map_6d2d_41A: 	dc.b $4
000251ED ED09 0000 F0               	dc.b $ED, $9, $0, $0, $F0
000251F2 FD0D 0006 F0               	dc.b $FD, $D, $0, $6, $F0
000251F7 0D04 000E 00               	dc.b $D, $4, $0, $E, $0
000251FC 0500 0010 E8               	dc.b $5, $0, $0, $10, $E8
00025201 06                         Map_6d2d_42F: 	dc.b $6
00025202 F404 0000 F4               	dc.b $F4, $4, $0, $0, $F4
00025207 FC0D 0002 EC               	dc.b $FC, $D, $0, $2, $EC
0002520C 0C08 000A F4               	dc.b $C, $8, $0, $A, $F4
00025211 0C00 000D EC               	dc.b $C, $0, $0, $D, $EC
00025216 FC02 000E 0C               	dc.b $FC, $2, $0, $E, $C
0002521B F400 0011 04               	dc.b $F4, $0, $0, $11, $4
00025220 02                         Map_6d2d_44E: 	dc.b $2
00025221 040D 0000 E4               	dc.b $4, $D, $0, $0, $E4
00025226 EC0A 0008 EC               	dc.b $EC, $A, $0, $8, $EC
0002522B 02                         Map_6d2d_459: 	dc.b $2
0002522C 040D 0000 E3               	dc.b $4, $D, $0, $0, $E3
00025231 EC0A 0008 EB               	dc.b $EC, $A, $0, $8, $EB
00025236 04                         Map_6d2d_464: 	dc.b $4
00025237 F40D 0000 FC               	dc.b $F4, $D, $0, $0, $FC
0002523C F705 0008 EC               	dc.b $F7, $5, $0, $8, $EC
00025241 0408 000C 03               	dc.b $4, $8, $0, $C, $3
00025246 0700 000F EC               	dc.b $7, $0, $0, $F, $EC
0002524B 02                         Map_6d2d_479: 	dc.b $2
0002524C F40A 0000 E8               	dc.b $F4, $A, $0, $0, $E8
00025251 F40A 0800 00               	dc.b $F4, $A, $8, $0, $0
00025256 03                         Map_6d2d_484: 	dc.b $3
00025257 F40D 0000 EB               	dc.b $F4, $D, $0, $0, $EB
0002525C FC00 0008 0B               	dc.b $FC, $0, $0, $8, $B
00025261 040C 0009 EC               	dc.b $4, $C, $0, $9, $EC
00025266 04                         Map_6d2d_494: 	dc.b $4
00025267 F40D 0000 FC               	dc.b $F4, $D, $0, $0, $FC
0002526C F705 0008 EC               	dc.b $F7, $5, $0, $8, $EC
00025271 0408 000C 02               	dc.b $4, $8, $0, $C, $2
00025276 0700 000F EC               	dc.b $7, $0, $0, $F, $EC
0002527B 03                         Map_6d2d_4A9: 	dc.b $3
0002527C E80B 0000 F0               	dc.b $E8, $B, $0, $0, $F0
00025281 0804 000C F8               	dc.b $8, $4, $0, $C, $F8
00025286 1000 000E F8               	dc.b $10, $0, $0, $E, $F8
0002528B 04                         Map_6d2d_4B9: 	dc.b $4
0002528C F80E 0000 E8               	dc.b $F8, $E, $0, $0, $E8
00025291 0005 000C 08               	dc.b $0, $5, $0, $C, $8
00025296 F800 0010 08               	dc.b $F8, $0, $0, $10, $8
0002529B F000 0011 F8               	dc.b $F0, $0, $0, $11, $F8
000252A0 04                         Map_6d2d_4CE: 	dc.b $4
000252A1 F80E 0000 E8               	dc.b $F8, $E, $0, $0, $E8
000252A6 0005 000C 08               	dc.b $0, $5, $0, $C, $8
000252AB F800 0010 08               	dc.b $F8, $0, $0, $10, $8
000252B0 F000 0011 F8               	dc.b $F0, $0, $0, $11, $F8
000252B5 05                         Map_6d2d_4E3: 	dc.b $5
000252B6 E80A 0000 F4               	dc.b $E8, $A, $0, $0, $F4
000252BB F001 0009 0C               	dc.b $F0, $1, $0, $9, $C
000252C0 0009 000B F4               	dc.b $0, $9, $0, $B, $F4
000252C5 1004 0011 F4               	dc.b $10, $4, $0, $11, $F4
000252CA 0000 0013 EC               	dc.b $0, $0, $0, $13, $EC
000252CF 05                         Map_6d2d_4FD: 	dc.b $5
000252D0 E80A 0000 F4               	dc.b $E8, $A, $0, $0, $F4
000252D5 E801 0009 0C               	dc.b $E8, $1, $0, $9, $C
000252DA 0009 000B F4               	dc.b $0, $9, $0, $B, $F4
000252DF 1004 0011 F4               	dc.b $10, $4, $0, $11, $F4
000252E4 0000 0013 EC               	dc.b $0, $0, $0, $13, $EC
000252E9 02                         Map_6d2d_517: 	dc.b $2
000252EA ED0A 0000 F3               	dc.b $ED, $A, $0, $0, $F3
000252EF 050D 0009 EB               	dc.b $5, $D, $0, $9, $EB
000252F4 03                         Map_6d2d_522: 	dc.b $3
000252F5 EC0A 0000 F3               	dc.b $EC, $A, $0, $0, $F3
000252FA 0408 0009 F3               	dc.b $4, $8, $0, $9, $F3
000252FF 0C04 000C F3               	dc.b $C, $4, $0, $C, $F3
00025304 02                         Map_6d2d_532: 	dc.b $2
00025305 ED0A 0000 F3               	dc.b $ED, $A, $0, $0, $F3
0002530A 050D 0009 EB               	dc.b $5, $D, $0, $9, $EB
0002530F 03                         Map_6d2d_53D: 	dc.b $3
00025310 EC0A 0000 F3               	dc.b $EC, $A, $0, $0, $F3
00025315 0408 0009 F3               	dc.b $4, $8, $0, $9, $F3
0002531A 0C04 000C F3               	dc.b $C, $4, $0, $C, $F3
0002531F 02                         Map_6d2d_54D: 	dc.b $2
00025320 EC09 0000 F0               	dc.b $EC, $9, $0, $0, $F0
00025325 FC0E 0006 F0               	dc.b $FC, $E, $0, $6, $F0
0002532A 03                         Map_6d2d_558: 	dc.b $3
0002532B EC0A 0000 F0               	dc.b $EC, $A, $0, $0, $F0
00025330 0405 0009 F8               	dc.b $4, $5, $0, $9, $F8
00025335 E400 000D F8               	dc.b $E4, $0, $0, $D, $F8
0002533A 03                         Map_6d2d_568: 	dc.b $3
0002533B E80D 0000 EC               	dc.b $E8, $D, $0, $0, $EC
00025340 E801 0008 0C               	dc.b $E8, $1, $0, $8, $C
00025345 F80B 000A F4               	dc.b $F8, $B, $0, $A, $F4
0002534A 05                         Map_6d2d_578: 	dc.b $5
0002534B E80D 0000 EC               	dc.b $E8, $D, $0, $0, $EC
00025350 E801 0008 0C               	dc.b $E8, $1, $0, $8, $C
00025355 F809 000A F4               	dc.b $F8, $9, $0, $A, $F4
0002535A 080C 0010 F4               	dc.b $8, $C, $0, $10, $F4
0002535F 1000 0014 F4               	dc.b $10, $0, $0, $14, $F4
00025364 05                         Map_6d2d_592: 	dc.b $5
00025365 E80D 0000 EC               	dc.b $E8, $D, $0, $0, $EC
0002536A E801 0008 0C               	dc.b $E8, $1, $0, $8, $C
0002536F F809 000A F4               	dc.b $F8, $9, $0, $A, $F4
00025374 080C 0010 F4               	dc.b $8, $C, $0, $10, $F4
00025379 1000 0014 F4               	dc.b $10, $0, $0, $14, $F4
0002537E 02                         Map_6d2d_5AC: 	dc.b $2
0002537F EC08 0000 F0               	dc.b $EC, $8, $0, $0, $F0
00025384 F40F 0003 F0               	dc.b $F4, $F, $0, $3, $F0
00025389 03                         Map_6d2d_5B7: 	dc.b $3
0002538A EC08 0000 F0               	dc.b $EC, $8, $0, $0, $F0
0002538F F40E 0003 F0               	dc.b $F4, $E, $0, $3, $F0
00025394 0C08 000F F8               	dc.b $C, $8, $0, $F, $F8
00025399 01                         Map_6d2d_5C7: 	dc.b $1
0002539A F00B 0000 F4               	dc.b $F0, $B, $0, $0, $F4
0002539F 01                         Map_6d2d_5CD: 	dc.b $1
000253A0 F406 0000 F8               	dc.b $F4, $6, $0, $0, $F8
000253A5 01                         Map_6d2d_5D3: 	dc.b $1
000253A6 F801 0000 FC               	dc.b $F8, $1, $0, $0, $FC
000253AB 04                         Map_6d2d_5D9: 	dc.b $4
000253AC F40D 0800 E4               	dc.b $F4, $D, $8, $0, $E4
000253B1 F705 0808 04               	dc.b $F7, $5, $8, $8, $4
000253B6 0408 080C E5               	dc.b $4, $8, $8, $C, $E5
000253BB 0700 080F 0C               	dc.b $7, $0, $8, $F, $C
000253C0 03                         Map_6d2d_5EE: 	dc.b $3
000253C1 F40D 0800 F5               	dc.b $F4, $D, $8, $0, $F5
000253C6 FC00 0808 ED               	dc.b $FC, $0, $8, $8, $ED
000253CB 040C 0809 F4               	dc.b $4, $C, $8, $9, $F4
000253D0 03                         Map_6d2d_5FE: 	dc.b $3
000253D1 F00E 0000 EC               	dc.b $F0, $E, $0, $0, $EC
000253D6 F801 000C 0C               	dc.b $F8, $1, $0, $C, $C
000253DB 080C 000E F4               	dc.b $8, $C, $0, $E, $F4
000253E0 03                         Map_6d2d_60E: 	dc.b $3
000253E1 EB09 0000 F4               	dc.b $EB, $9, $0, $0, $F4
000253E6 FB0E 0006 EC               	dc.b $FB, $E, $0, $6, $EC
000253EB 0301 0012 0C               	dc.b $3, $1, $0, $12, $C
000253F0 02                         Map_6d2d_61E: 	dc.b $2
000253F1 F00F 0000 EC               	dc.b $F0, $F, $0, $0, $EC
000253F6 F802 0010 0C               	dc.b $F8, $2, $0, $10, $C
000253FB 02                         Map_6d2d_629: 	dc.b $2
000253FC F40F 0000 F0               	dc.b $F4, $F, $0, $0, $F0
00025401 EC04 0010 F8               	dc.b $EC, $4, $0, $10, $F8
00025406 03                         Map_6d2d_634: 	dc.b $3
00025407 ED0F 0000 F3               	dc.b $ED, $F, $0, $0, $F3
0002540C 0D00 0010 F3               	dc.b $D, $0, $0, $10, $F3
00025411 0D04 0011 03               	dc.b $D, $4, $0, $11, $3
00025416 02                         Map_6d2d_644: 	dc.b $2
00025417 F60F 0000 EE               	dc.b $F6, $F, $0, $0, $EE
0002541C EE08 0010 F6               	dc.b $EE, $8, $0, $10, $F6
00025421 04                         Map_6d2d_64F: 	dc.b $4
00025422 ED08 0000 F3               	dc.b $ED, $8, $0, $0, $F3
00025427 F50E 0003 EB               	dc.b $F5, $E, $0, $3, $EB
0002542C F503 000F 0B               	dc.b $F5, $3, $0, $F, $B
00025431 0D08 0013 F3               	dc.b $D, $8, $0, $13, $F3
00025436                            	even
00025436                            	even
00025436                            
00025436                            ; ---------------------------------------------------------------------------
00025436                            ; Uncompressed graphics	loading	array for Sonic
00025436                            ; ---------------------------------------------------------------------------
00025436                            SonicDynPLC:
00025436                            	include "_inc\Sonic dynamic pattern load cues.asm"
00025436                            DPLC_2d5b:
00025436 0000                       DPLC_2d5b_0: 	dc.w DPLC_2d5b_B8-DPLC_2d5b
00025438 0000                       DPLC_2d5b_2: 	dc.w DPLC_2d5b_B9-DPLC_2d5b
0002543A 0000                       DPLC_2d5b_4: 	dc.w DPLC_2d5b_BE-DPLC_2d5b
0002543C 0000                       DPLC_2d5b_6: 	dc.w DPLC_2d5b_C5-DPLC_2d5b
0002543E 0000                       DPLC_2d5b_8: 	dc.w DPLC_2d5b_CC-DPLC_2d5b
00025440 0000                       DPLC_2d5b_A: 	dc.w DPLC_2d5b_D3-DPLC_2d5b
00025442 0000                       DPLC_2d5b_C: 	dc.w DPLC_2d5b_DA-DPLC_2d5b
00025444 0000                       DPLC_2d5b_E: 	dc.w DPLC_2d5b_E3-DPLC_2d5b
00025446 0000                       DPLC_2d5b_10: 	dc.w DPLC_2d5b_E8-DPLC_2d5b
00025448 0000                       DPLC_2d5b_12: 	dc.w DPLC_2d5b_ED-DPLC_2d5b
0002544A 0000                       DPLC_2d5b_14: 	dc.w DPLC_2d5b_F6-DPLC_2d5b
0002544C 0000                       DPLC_2d5b_16: 	dc.w DPLC_2d5b_FB-DPLC_2d5b
0002544E 0000                       DPLC_2d5b_18: 	dc.w DPLC_2d5b_102-DPLC_2d5b
00025450 0000                       DPLC_2d5b_1A: 	dc.w DPLC_2d5b_10D-DPLC_2d5b
00025452 0000                       DPLC_2d5b_1C: 	dc.w DPLC_2d5b_11A-DPLC_2d5b
00025454 0000                       DPLC_2d5b_1E: 	dc.w DPLC_2d5b_123-DPLC_2d5b
00025456 0000                       DPLC_2d5b_20: 	dc.w DPLC_2d5b_12E-DPLC_2d5b
00025458 0000                       DPLC_2d5b_22: 	dc.w DPLC_2d5b_137-DPLC_2d5b
0002545A 0000                       DPLC_2d5b_24: 	dc.w DPLC_2d5b_142-DPLC_2d5b
0002545C 0000                       DPLC_2d5b_26: 	dc.w DPLC_2d5b_14B-DPLC_2d5b
0002545E 0000                       DPLC_2d5b_28: 	dc.w DPLC_2d5b_150-DPLC_2d5b
00025460 0000                       DPLC_2d5b_2A: 	dc.w DPLC_2d5b_155-DPLC_2d5b
00025462 0000                       DPLC_2d5b_2C: 	dc.w DPLC_2d5b_15E-DPLC_2d5b
00025464 0000                       DPLC_2d5b_2E: 	dc.w DPLC_2d5b_163-DPLC_2d5b
00025466 0000                       DPLC_2d5b_30: 	dc.w DPLC_2d5b_16A-DPLC_2d5b
00025468 0000                       DPLC_2d5b_32: 	dc.w DPLC_2d5b_177-DPLC_2d5b
0002546A 0000                       DPLC_2d5b_34: 	dc.w DPLC_2d5b_184-DPLC_2d5b
0002546C 0000                       DPLC_2d5b_36: 	dc.w DPLC_2d5b_18D-DPLC_2d5b
0002546E 0000                       DPLC_2d5b_38: 	dc.w DPLC_2d5b_198-DPLC_2d5b
00025470 0000                       DPLC_2d5b_3A: 	dc.w DPLC_2d5b_1A1-DPLC_2d5b
00025472 0000                       DPLC_2d5b_3C: 	dc.w DPLC_2d5b_1AC-DPLC_2d5b
00025474 0000                       DPLC_2d5b_3E: 	dc.w DPLC_2d5b_1B1-DPLC_2d5b
00025476 0000                       DPLC_2d5b_40: 	dc.w DPLC_2d5b_1B6-DPLC_2d5b
00025478 0000                       DPLC_2d5b_42: 	dc.w DPLC_2d5b_1BB-DPLC_2d5b
0002547A 0000                       DPLC_2d5b_44: 	dc.w DPLC_2d5b_1C0-DPLC_2d5b
0002547C 0000                       DPLC_2d5b_46: 	dc.w DPLC_2d5b_1C9-DPLC_2d5b
0002547E 0000                       DPLC_2d5b_48: 	dc.w DPLC_2d5b_1D0-DPLC_2d5b
00025480 0000                       DPLC_2d5b_4A: 	dc.w DPLC_2d5b_1D9-DPLC_2d5b
00025482 0000                       DPLC_2d5b_4C: 	dc.w DPLC_2d5b_1E0-DPLC_2d5b
00025484 0000                       DPLC_2d5b_4E: 	dc.w DPLC_2d5b_1E5-DPLC_2d5b
00025486 0000                       DPLC_2d5b_50: 	dc.w DPLC_2d5b_1EA-DPLC_2d5b
00025488 0000                       DPLC_2d5b_52: 	dc.w DPLC_2d5b_1EF-DPLC_2d5b
0002548A 0000                       DPLC_2d5b_54: 	dc.w DPLC_2d5b_1F4-DPLC_2d5b
0002548C 0000                       DPLC_2d5b_56: 	dc.w DPLC_2d5b_1FD-DPLC_2d5b
0002548E 0000                       DPLC_2d5b_58: 	dc.w DPLC_2d5b_202-DPLC_2d5b
00025490 0000                       DPLC_2d5b_5A: 	dc.w DPLC_2d5b_20B-DPLC_2d5b
00025492 0000                       DPLC_2d5b_5C: 	dc.w DPLC_2d5b_210-DPLC_2d5b
00025494 0000                       DPLC_2d5b_5E: 	dc.w DPLC_2d5b_213-DPLC_2d5b
00025496 0000                       DPLC_2d5b_60: 	dc.w DPLC_2d5b_216-DPLC_2d5b
00025498 0000                       DPLC_2d5b_62: 	dc.w DPLC_2d5b_219-DPLC_2d5b
0002549A 0000                       DPLC_2d5b_64: 	dc.w DPLC_2d5b_21C-DPLC_2d5b
0002549C 0000                       DPLC_2d5b_66: 	dc.w DPLC_2d5b_21F-DPLC_2d5b
0002549E 0000                       DPLC_2d5b_68: 	dc.w DPLC_2d5b_224-DPLC_2d5b
000254A0 0000                       DPLC_2d5b_6A: 	dc.w DPLC_2d5b_227-DPLC_2d5b
000254A2 0000                       DPLC_2d5b_6C: 	dc.w DPLC_2d5b_22C-DPLC_2d5b
000254A4 0000                       DPLC_2d5b_6E: 	dc.w DPLC_2d5b_22F-DPLC_2d5b
000254A6 0000                       DPLC_2d5b_70: 	dc.w DPLC_2d5b_234-DPLC_2d5b
000254A8 0000                       DPLC_2d5b_72: 	dc.w DPLC_2d5b_23D-DPLC_2d5b
000254AA 0000                       DPLC_2d5b_74: 	dc.w DPLC_2d5b_242-DPLC_2d5b
000254AC 0000                       DPLC_2d5b_76: 	dc.w DPLC_2d5b_247-DPLC_2d5b
000254AE 0000                       DPLC_2d5b_78: 	dc.w DPLC_2d5b_24C-DPLC_2d5b
000254B0 0000                       DPLC_2d5b_7A: 	dc.w DPLC_2d5b_251-DPLC_2d5b
000254B2 0000                       DPLC_2d5b_7C: 	dc.w DPLC_2d5b_254-DPLC_2d5b
000254B4 0000                       DPLC_2d5b_7E: 	dc.w DPLC_2d5b_25B-DPLC_2d5b
000254B6 0000                       DPLC_2d5b_80: 	dc.w DPLC_2d5b_260-DPLC_2d5b
000254B8 0000                       DPLC_2d5b_82: 	dc.w DPLC_2d5b_267-DPLC_2d5b
000254BA 0000                       DPLC_2d5b_84: 	dc.w DPLC_2d5b_270-DPLC_2d5b
000254BC 0000                       DPLC_2d5b_86: 	dc.w DPLC_2d5b_279-DPLC_2d5b
000254BE 0000                       DPLC_2d5b_88: 	dc.w DPLC_2d5b_284-DPLC_2d5b
000254C0 0000                       DPLC_2d5b_8A: 	dc.w DPLC_2d5b_28F-DPLC_2d5b
000254C2 0000                       DPLC_2d5b_8C: 	dc.w DPLC_2d5b_294-DPLC_2d5b
000254C4 0000                       DPLC_2d5b_8E: 	dc.w DPLC_2d5b_29B-DPLC_2d5b
000254C6 0000                       DPLC_2d5b_90: 	dc.w DPLC_2d5b_2A0-DPLC_2d5b
000254C8 0000                       DPLC_2d5b_92: 	dc.w DPLC_2d5b_2A7-DPLC_2d5b
000254CA 0000                       DPLC_2d5b_94: 	dc.w DPLC_2d5b_2AC-DPLC_2d5b
000254CC 0000                       DPLC_2d5b_96: 	dc.w DPLC_2d5b_2B3-DPLC_2d5b
000254CE 0000                       DPLC_2d5b_98: 	dc.w DPLC_2d5b_2BA-DPLC_2d5b
000254D0 0000                       DPLC_2d5b_9A: 	dc.w DPLC_2d5b_2C5-DPLC_2d5b
000254D2 0000                       DPLC_2d5b_9C: 	dc.w DPLC_2d5b_2D0-DPLC_2d5b
000254D4 0000                       DPLC_2d5b_9E: 	dc.w DPLC_2d5b_2D5-DPLC_2d5b
000254D6 0000                       DPLC_2d5b_A0: 	dc.w DPLC_2d5b_2DC-DPLC_2d5b
000254D8 0000                       DPLC_2d5b_A2: 	dc.w DPLC_2d5b_2DF-DPLC_2d5b
000254DA 0000                       DPLC_2d5b_A4: 	dc.w DPLC_2d5b_2E2-DPLC_2d5b
000254DC 0000                       DPLC_2d5b_A6: 	dc.w DPLC_2d5b_2E5-DPLC_2d5b
000254DE 0000                       DPLC_2d5b_A8: 	dc.w DPLC_2d5b_2EA-DPLC_2d5b
000254E0 0000                       DPLC_2d5b_AA: 	dc.w DPLC_2d5b_2F1-DPLC_2d5b
000254E2 0000                       DPLC_2d5b_AC: 	dc.w DPLC_2d5b_2F8-DPLC_2d5b
000254E4 0000                       DPLC_2d5b_AE: 	dc.w DPLC_2d5b_2FF-DPLC_2d5b
000254E6 0000                       DPLC_2d5b_B0: 	dc.w DPLC_2d5b_304-DPLC_2d5b
000254E8 0000                       DPLC_2d5b_B2: 	dc.w DPLC_2d5b_309-DPLC_2d5b
000254EA 0000                       DPLC_2d5b_B4: 	dc.w DPLC_2d5b_30E-DPLC_2d5b
000254EC 0000                       DPLC_2d5b_B6: 	dc.w DPLC_2d5b_313-DPLC_2d5b
000254EE 00                         DPLC_2d5b_B8: 	dc.b $0
000254EF 02                         DPLC_2d5b_B9: 	dc.b $2
000254F0 F000                       	dc.b $F0, $0
000254F2 1010                       	dc.b $10, $10
000254F4 03                         DPLC_2d5b_BE: 	dc.b $3
000254F5 5012                       	dc.b $50, $12
000254F7 5018                       	dc.b $50, $18
000254F9 201E                       	dc.b $20, $1E
000254FB 03                         DPLC_2d5b_C5: 	dc.b $3
000254FC 5021                       	dc.b $50, $21
000254FE 5018                       	dc.b $50, $18
00025500 201E                       	dc.b $20, $1E
00025502 03                         DPLC_2d5b_CC: 	dc.b $3
00025503 5021                       	dc.b $50, $21
00025505 5018                       	dc.b $50, $18
00025507 2027                       	dc.b $20, $27
00025509 03                         DPLC_2d5b_D3: 	dc.b $3
0002550A 802A                       	dc.b $80, $2A
0002550C 2033                       	dc.b $20, $33
0002550E 2036                       	dc.b $20, $36
00025510 04                         DPLC_2d5b_DA: 	dc.b $4
00025511 7039                       	dc.b $70, $39
00025513 5041                       	dc.b $50, $41
00025515 5047                       	dc.b $50, $47
00025517 104D                       	dc.b $10, $4D
00025519 02                         DPLC_2d5b_E3: 	dc.b $2
0002551A 7039                       	dc.b $70, $39
0002551C B04F                       	dc.b $B0, $4F
0002551E 02                         DPLC_2d5b_E8: 	dc.b $2
0002551F 505B                       	dc.b $50, $5B
00025521 8061                       	dc.b $80, $61
00025523 04                         DPLC_2d5b_ED: 	dc.b $4
00025524 505B                       	dc.b $50, $5B
00025526 506A                       	dc.b $50, $6A
00025528 5070                       	dc.b $50, $70
0002552A 1076                       	dc.b $10, $76
0002552C 02                         DPLC_2d5b_F6: 	dc.b $2
0002552D F4F0                       	dc.b $F4, $F0
0002552F 1500                       	dc.b $15, $0
00025531 03                         DPLC_2d5b_FB: 	dc.b $3
00025532 7039                       	dc.b $70, $39
00025534 3078                       	dc.b $30, $78
00025536 507C                       	dc.b $50, $7C
00025538 05                         DPLC_2d5b_102: 	dc.b $5
00025539 5082                       	dc.b $50, $82
0002553B 5088                       	dc.b $50, $88
0002553D 208E                       	dc.b $20, $8E
0002553F 5091                       	dc.b $50, $91
00025541 0097                       	dc.b $0, $97
00025543 06                         DPLC_2d5b_10D: 	dc.b $6
00025544 5082                       	dc.b $50, $82
00025546 1098                       	dc.b $10, $98
00025548 309A                       	dc.b $30, $9A
0002554A 509E                       	dc.b $50, $9E
0002554C 30A4                       	dc.b $30, $A4
0002554E 00A8                       	dc.b $0, $A8
00025550 04                         DPLC_2d5b_11A: 	dc.b $4
00025551 50A9                       	dc.b $50, $A9
00025553 10AF                       	dc.b $10, $AF
00025555 70B1                       	dc.b $70, $B1
00025557 20B9                       	dc.b $20, $B9
00025559 05                         DPLC_2d5b_123: 	dc.b $5
0002555A 50BC                       	dc.b $50, $BC
0002555C 30C2                       	dc.b $30, $C2
0002555E 70C6                       	dc.b $70, $C6
00025560 20CE                       	dc.b $20, $CE
00025562 10D1                       	dc.b $10, $D1
00025564 04                         DPLC_2d5b_12E: 	dc.b $4
00025565 50BC                       	dc.b $50, $BC
00025567 10D3                       	dc.b $10, $D3
00025569 70D5                       	dc.b $70, $D5
0002556B 20DD                       	dc.b $20, $DD
0002556D 05                         DPLC_2d5b_137: 	dc.b $5
0002556E 5082                       	dc.b $50, $82
00025570 1098                       	dc.b $10, $98
00025572 008E                       	dc.b $0, $8E
00025574 70E0                       	dc.b $70, $E0
00025576 20E8                       	dc.b $20, $E8
00025578 04                         DPLC_2d5b_142: 	dc.b $4
00025579 70EB                       	dc.b $70, $EB
0002557B 50F3                       	dc.b $50, $F3
0002557D 10F9                       	dc.b $10, $F9
0002557F 50FB                       	dc.b $50, $FB
00025581 02                         DPLC_2d5b_14B: 	dc.b $2
00025582 70EB                       	dc.b $70, $EB
00025584 B101                       	dc.b $B1, $1
00025586 02                         DPLC_2d5b_150: 	dc.b $2
00025587 510D                       	dc.b $51, $D
00025589 8113                       	dc.b $81, $13
0002558B 04                         DPLC_2d5b_155: 	dc.b $4
0002558C 510D                       	dc.b $51, $D
0002558E 511C                       	dc.b $51, $1C
00025590 1122                       	dc.b $11, $22
00025592 5124                       	dc.b $51, $24
00025594 02                         DPLC_2d5b_15E: 	dc.b $2
00025595 510D                       	dc.b $51, $D
00025597 B12A                       	dc.b $B1, $2A
00025599 03                         DPLC_2d5b_163: 	dc.b $3
0002559A 70EB                       	dc.b $70, $EB
0002559C 0101                       	dc.b $1, $1
0002559E 8136                       	dc.b $81, $36
000255A0 06                         DPLC_2d5b_16A: 	dc.b $6
000255A1 513F                       	dc.b $51, $3F
000255A3 1145                       	dc.b $11, $45
000255A5 1147                       	dc.b $11, $47
000255A7 8149                       	dc.b $81, $49
000255A9 0152                       	dc.b $1, $52
000255AB 0153                       	dc.b $1, $53
000255AD 06                         DPLC_2d5b_177: 	dc.b $6
000255AE 513F                       	dc.b $51, $3F
000255B0 2154                       	dc.b $21, $54
000255B2 1157                       	dc.b $11, $57
000255B4 1159                       	dc.b $11, $59
000255B6 815B                       	dc.b $81, $5B
000255B8 0152                       	dc.b $1, $52
000255BA 04                         DPLC_2d5b_184: 	dc.b $4
000255BB 5164                       	dc.b $51, $64
000255BD 116A                       	dc.b $11, $6A
000255BF 816C                       	dc.b $81, $6C
000255C1 1175                       	dc.b $11, $75
000255C3 05                         DPLC_2d5b_18D: 	dc.b $5
000255C4 5177                       	dc.b $51, $77
000255C6 217D                       	dc.b $21, $7D
000255C8 1180                       	dc.b $11, $80
000255CA 7182                       	dc.b $71, $82
000255CC 218A                       	dc.b $21, $8A
000255CE 04                         DPLC_2d5b_198: 	dc.b $4
000255CF 5177                       	dc.b $51, $77
000255D1 118D                       	dc.b $11, $8D
000255D3 818F                       	dc.b $81, $8F
000255D5 1198                       	dc.b $11, $98
000255D7 05                         DPLC_2d5b_1A1: 	dc.b $5
000255D8 513F                       	dc.b $51, $3F
000255DA 819A                       	dc.b $81, $9A
000255DC 1159                       	dc.b $11, $59
000255DE 11A3                       	dc.b $11, $A3
000255E0 0152                       	dc.b $1, $52
000255E2 02                         DPLC_2d5b_1AC: 	dc.b $2
000255E3 51A5                       	dc.b $51, $A5
000255E5 B1AB                       	dc.b $B1, $AB
000255E7 02                         DPLC_2d5b_1B1: 	dc.b $2
000255E8 505B                       	dc.b $50, $5B
000255EA B1B7                       	dc.b $B1, $B7
000255EC 02                         DPLC_2d5b_1B6: 	dc.b $2
000255ED 51A5                       	dc.b $51, $A5
000255EF B1C3                       	dc.b $B1, $C3
000255F1 02                         DPLC_2d5b_1BB: 	dc.b $2
000255F2 505B                       	dc.b $50, $5B
000255F4 B1CF                       	dc.b $B1, $CF
000255F6 04                         DPLC_2d5b_1C0: 	dc.b $4
000255F7 51DB                       	dc.b $51, $DB
000255F9 11E1                       	dc.b $11, $E1
000255FB B1E3                       	dc.b $B1, $E3
000255FD 01EF                       	dc.b $1, $EF
000255FF 03                         DPLC_2d5b_1C9: 	dc.b $3
00025600 51F0                       	dc.b $51, $F0
00025602 11F6                       	dc.b $11, $F6
00025604 B1F8                       	dc.b $B1, $F8
00025606 04                         DPLC_2d5b_1D0: 	dc.b $4
00025607 51DB                       	dc.b $51, $DB
00025609 1204                       	dc.b $12, $4
0002560B B206                       	dc.b $B2, $6
0002560D 01EF                       	dc.b $1, $EF
0002560F 03                         DPLC_2d5b_1D9: 	dc.b $3
00025610 51F0                       	dc.b $51, $F0
00025612 11F6                       	dc.b $11, $F6
00025614 B212                       	dc.b $B2, $12
00025616 02                         DPLC_2d5b_1E0: 	dc.b $2
00025617 521E                       	dc.b $52, $1E
00025619 B224                       	dc.b $B2, $24
0002561B 02                         DPLC_2d5b_1E5: 	dc.b $2
0002561C 510D                       	dc.b $51, $D
0002561E B230                       	dc.b $B2, $30
00025620 02                         DPLC_2d5b_1EA: 	dc.b $2
00025621 521E                       	dc.b $52, $1E
00025623 B23C                       	dc.b $B2, $3C
00025625 02                         DPLC_2d5b_1EF: 	dc.b $2
00025626 510D                       	dc.b $51, $D
00025628 B248                       	dc.b $B2, $48
0002562A 04                         DPLC_2d5b_1F4: 	dc.b $4
0002562B 5254                       	dc.b $52, $54
0002562D 125A                       	dc.b $12, $5A
0002562F B25C                       	dc.b $B2, $5C
00025631 0268                       	dc.b $2, $68
00025633 02                         DPLC_2d5b_1FD: 	dc.b $2
00025634 7269                       	dc.b $72, $69
00025636 B271                       	dc.b $B2, $71
00025638 04                         DPLC_2d5b_202: 	dc.b $4
00025639 5254                       	dc.b $52, $54
0002563B 127D                       	dc.b $12, $7D
0002563D B27F                       	dc.b $B2, $7F
0002563F 0268                       	dc.b $2, $68
00025641 02                         DPLC_2d5b_20B: 	dc.b $2
00025642 7269                       	dc.b $72, $69
00025644 B28B                       	dc.b $B2, $8B
00025646 01                         DPLC_2d5b_210: 	dc.b $1
00025647 F297                       	dc.b $F2, $97
00025649 01                         DPLC_2d5b_213: 	dc.b $1
0002564A F2A7                       	dc.b $F2, $A7
0002564C 01                         DPLC_2d5b_216: 	dc.b $1
0002564D F2B7                       	dc.b $F2, $B7
0002564F 01                         DPLC_2d5b_219: 	dc.b $1
00025650 F2C7                       	dc.b $F2, $C7
00025652 01                         DPLC_2d5b_21C: 	dc.b $1
00025653 F2D7                       	dc.b $F2, $D7
00025655 02                         DPLC_2d5b_21F: 	dc.b $2
00025656 B2E7                       	dc.b $B2, $E7
00025658 22F3                       	dc.b $22, $F3
0002565A 01                         DPLC_2d5b_224: 	dc.b $1
0002565B F2F6                       	dc.b $F2, $F6
0002565D 02                         DPLC_2d5b_227: 	dc.b $2
0002565E B306                       	dc.b $B3, $6
00025660 2312                       	dc.b $23, $12
00025662 01                         DPLC_2d5b_22C: 	dc.b $1
00025663 F315                       	dc.b $F3, $15
00025665 02                         DPLC_2d5b_22F: 	dc.b $2
00025666 5325                       	dc.b $53, $25
00025668 B32B                       	dc.b $B3, $2B
0002566A 04                         DPLC_2d5b_234: 	dc.b $4
0002566B 5337                       	dc.b $53, $37
0002566D 733D                       	dc.b $73, $3D
0002566F 1345                       	dc.b $13, $45
00025671 0347                       	dc.b $3, $47
00025673 02                         DPLC_2d5b_23D: 	dc.b $2
00025674 D348                       	dc.b $D3, $48
00025676 34EC                       	dc.b $34, $EC
00025678 02                         DPLC_2d5b_242: 	dc.b $2
00025679 F528                       	dc.b $F5, $28
0002567B 0538                       	dc.b $5, $38
0002567D 02                         DPLC_2d5b_247: 	dc.b $2
0002567E F539                       	dc.b $F5, $39
00025680 0549                       	dc.b $5, $49
00025682 02                         DPLC_2d5b_24C: 	dc.b $2
00025683 E356                       	dc.b $E3, $56
00025685 054A                       	dc.b $5, $4A
00025687 01                         DPLC_2d5b_251: 	dc.b $1
00025688 8365                       	dc.b $83, $65
0002568A 03                         DPLC_2d5b_254: 	dc.b $3
0002568B 736E                       	dc.b $73, $6E
0002568D 0376                       	dc.b $3, $76
0002568F 3377                       	dc.b $33, $77
00025691 02                         DPLC_2d5b_25B: 	dc.b $2
00025692 E37B                       	dc.b $E3, $7B
00025694 054A                       	dc.b $5, $4A
00025696 03                         DPLC_2d5b_260: 	dc.b $3
00025697 B38A                       	dc.b $B3, $8A
00025699 1396                       	dc.b $13, $96
0002569B 0398                       	dc.b $3, $98
0002569D 04                         DPLC_2d5b_267: 	dc.b $4
0002569E B399                       	dc.b $B3, $99
000256A0 33A5                       	dc.b $33, $A5
000256A2 03A9                       	dc.b $3, $A9
000256A4 03AA                       	dc.b $3, $AA
000256A6 04                         DPLC_2d5b_270: 	dc.b $4
000256A7 B3AB                       	dc.b $B3, $AB
000256A9 33B7                       	dc.b $33, $B7
000256AB 03BB                       	dc.b $3, $BB
000256AD 03BC                       	dc.b $3, $BC
000256AF 05                         DPLC_2d5b_279: 	dc.b $5
000256B0 83BD                       	dc.b $83, $BD
000256B2 13C6                       	dc.b $13, $C6
000256B4 53C8                       	dc.b $53, $C8
000256B6 13CE                       	dc.b $13, $CE
000256B8 03D0                       	dc.b $3, $D0
000256BA 05                         DPLC_2d5b_284: 	dc.b $5
000256BB 83D1                       	dc.b $83, $D1
000256BD 13DA                       	dc.b $13, $DA
000256BF 53C8                       	dc.b $53, $C8
000256C1 13CE                       	dc.b $13, $CE
000256C3 03D0                       	dc.b $3, $D0
000256C5 02                         DPLC_2d5b_28F: 	dc.b $2
000256C6 83DC                       	dc.b $83, $DC
000256C8 73E5                       	dc.b $73, $E5
000256CA 03                         DPLC_2d5b_294: 	dc.b $3
000256CB 83ED                       	dc.b $83, $ED
000256CD 23F6                       	dc.b $23, $F6
000256CF 13F9                       	dc.b $13, $F9
000256D1 02                         DPLC_2d5b_29B: 	dc.b $2
000256D2 83FB                       	dc.b $83, $FB
000256D4 7404                       	dc.b $74, $4
000256D6 03                         DPLC_2d5b_2A0: 	dc.b $3
000256D7 83ED                       	dc.b $83, $ED
000256D9 240C                       	dc.b $24, $C
000256DB 140F                       	dc.b $14, $F
000256DD 02                         DPLC_2d5b_2A7: 	dc.b $2
000256DE 5411                       	dc.b $54, $11
000256E0 B417                       	dc.b $B4, $17
000256E2 03                         DPLC_2d5b_2AC: 	dc.b $3
000256E3 8423                       	dc.b $84, $23
000256E5 342C                       	dc.b $34, $2C
000256E7 0430                       	dc.b $4, $30
000256E9 03                         DPLC_2d5b_2B3: 	dc.b $3
000256EA 7431                       	dc.b $74, $31
000256EC 1439                       	dc.b $14, $39
000256EE B43B                       	dc.b $B4, $3B
000256F0 05                         DPLC_2d5b_2BA: 	dc.b $5
000256F1 7447                       	dc.b $74, $47
000256F3 144F                       	dc.b $14, $4F
000256F5 5451                       	dc.b $54, $51
000256F7 3457                       	dc.b $34, $57
000256F9 045B                       	dc.b $4, $5B
000256FB 05                         DPLC_2d5b_2C5: 	dc.b $5
000256FC 745C                       	dc.b $74, $5C
000256FE 144F                       	dc.b $14, $4F
00025700 5464                       	dc.b $54, $64
00025702 3457                       	dc.b $34, $57
00025704 045B                       	dc.b $4, $5B
00025706 02                         DPLC_2d5b_2D0: 	dc.b $2
00025707 246A                       	dc.b $24, $6A
00025709 F46D                       	dc.b $F4, $6D
0002570B 03                         DPLC_2d5b_2D5: 	dc.b $3
0002570C 247D                       	dc.b $24, $7D
0002570E B480                       	dc.b $B4, $80
00025710 248C                       	dc.b $24, $8C
00025712 01                         DPLC_2d5b_2DC: 	dc.b $1
00025713 B48F                       	dc.b $B4, $8F
00025715 01                         DPLC_2d5b_2DF: 	dc.b $1
00025716 549B                       	dc.b $54, $9B
00025718 01                         DPLC_2d5b_2E2: 	dc.b $1
00025719 14A1                       	dc.b $14, $A1
0002571B 02                         DPLC_2d5b_2E5: 	dc.b $2
0002571C E356                       	dc.b $E3, $56
0002571E 054A                       	dc.b $5, $4A
00025720 03                         DPLC_2d5b_2EA: 	dc.b $3
00025721 736E                       	dc.b $73, $6E
00025723 0376                       	dc.b $3, $76
00025725 3377                       	dc.b $33, $77
00025727 03                         DPLC_2d5b_2F1: 	dc.b $3
00025728 B4A3                       	dc.b $B4, $A3
0002572A 14AF                       	dc.b $14, $AF
0002572C 34B1                       	dc.b $34, $B1
0002572E 03                         DPLC_2d5b_2F8: 	dc.b $3
0002572F 54B5                       	dc.b $54, $B5
00025731 B4BB                       	dc.b $B4, $BB
00025733 1074                       	dc.b $10, $74
00025735 02                         DPLC_2d5b_2FF: 	dc.b $2
00025736 F4C7                       	dc.b $F4, $C7
00025738 24D7                       	dc.b $24, $D7
0002573A 02                         DPLC_2d5b_304: 	dc.b $2
0002573B F4DA                       	dc.b $F4, $DA
0002573D 14EA                       	dc.b $14, $EA
0002573F 02                         DPLC_2d5b_309: 	dc.b $2
00025740 F502                       	dc.b $F5, $2
00025742 2512                       	dc.b $25, $12
00025744 02                         DPLC_2d5b_30E: 	dc.b $2
00025745 F515                       	dc.b $F5, $15
00025747 2525                       	dc.b $25, $25
00025749 02                         DPLC_2d5b_313: 	dc.b $2
0002574A F54B                       	dc.b $F5, $4B
0002574C 755B                       	dc.b $75, $5B
0002574E                            	even
0002574E                            	even
0002574E                            
0002574E                            ; ---------------------------------------------------------------------------
0002574E                            ; Uncompressed graphics	- Sonic
0002574E                            ; ---------------------------------------------------------------------------
0002574E                            Art_Sonic:	incbin	artunc\sonic.bin	; Sonic
0003036E                            		even
0003036E                            ; ---------------------------------------------------------------------------
0003036E                            ; Compressed graphics - various
0003036E                            ; ---------------------------------------------------------------------------
0003036E                            Nem_Smoke:	incbin	artnem\xxxsmoke.bin	; unused smoke
00030472                            		even
00030472                            Nem_SyzSparkle:	incbin	artnem\xxxstars.bin	; unused stars
000304AC                            		even
000304AC                            Nem_Shield:	incbin	artnem\shield.bin	; shield
00030642                            		even
00030642                            Nem_Stars:	incbin	artnem\invstars.bin	; invincibility stars
0003078A                            		even
0003078A                            Nem_LzSonic:	incbin	artnem\xxxlzson.bin	; unused LZ Sonic holding his breath
00030894                            		even
00030894                            Nem_UnkFire:	incbin	artnem\xxxfire.bin	; unused fireball
000308E6                            		even
000308E6                            Nem_Warp:	incbin	artnem\xxxflash.bin	; unused entry to special stage flash
00030B2E                            		even
00030B2E                            Nem_Goggle:	incbin	artnem\xxxgoggl.bin	; unused goggles
00030CB4                            		even
00030CB4                            ; ---------------------------------------------------------------------------
00030CB4                            ; Sprite mappings - walls of the special stage
00030CB4                            ; ---------------------------------------------------------------------------
00030CB4                            Map_SSWalls:
00030CB4                            	include "_maps\SSwalls.asm"
00030CB4                            ; ---------------------------------------------------------------------------
00030CB4                            ; Sprite mappings - walls of the special stage
00030CB4                            ; ---------------------------------------------------------------------------
00030CB4 0000 0000                  		dc.w byte_2C584-Map_SSWalls, byte_2C58A-Map_SSWalls
00030CB8 0000 0000                  		dc.w byte_2C590-Map_SSWalls, byte_2C596-Map_SSWalls
00030CBC 0000 0000                  		dc.w byte_2C59C-Map_SSWalls, byte_2C5A2-Map_SSWalls
00030CC0 0000 0000                  		dc.w byte_2C5A8-Map_SSWalls, byte_2C5AE-Map_SSWalls
00030CC4 0000 0000                  		dc.w byte_2C5B4-Map_SSWalls, byte_2C5BA-Map_SSWalls
00030CC8 0000 0000                  		dc.w byte_2C5C0-Map_SSWalls, byte_2C5C6-Map_SSWalls
00030CCC 0000 0000                  		dc.w byte_2C5CC-Map_SSWalls, byte_2C5D2-Map_SSWalls
00030CD0 0000 0000                  		dc.w byte_2C5D8-Map_SSWalls, byte_2C5DE-Map_SSWalls
00030CD4 01                         byte_2C584:	dc.b 1
00030CD5 F40A 0000 F4               		dc.b $F4, $A, 0, 0, $F4
00030CDA 01                         byte_2C58A:	dc.b 1
00030CDB F00F 0009 F0               		dc.b $F0, $F, 0, 9, $F0
00030CE0 01                         byte_2C590:	dc.b 1
00030CE1 F00F 0019 F0               		dc.b $F0, $F, 0, $19, $F0
00030CE6 01                         byte_2C596:	dc.b 1
00030CE7 F00F 0029 F0               		dc.b $F0, $F, 0, $29, $F0
00030CEC 01                         byte_2C59C:	dc.b 1
00030CED F00F 0039 F0               		dc.b $F0, $F, 0, $39, $F0
00030CF2 01                         byte_2C5A2:	dc.b 1
00030CF3 F00F 0049 F0               		dc.b $F0, $F, 0, $49, $F0
00030CF8 01                         byte_2C5A8:	dc.b 1
00030CF9 F00F 0059 F0               		dc.b $F0, $F, 0, $59, $F0
00030CFE 01                         byte_2C5AE:	dc.b 1
00030CFF F00F 0069 F0               		dc.b $F0, $F, 0, $69, $F0
00030D04 01                         byte_2C5B4:	dc.b 1
00030D05 F00F 0079 F0               		dc.b $F0, $F, 0, $79, $F0
00030D0A 01                         byte_2C5BA:	dc.b 1
00030D0B F00F 0089 F0               		dc.b $F0, $F, 0, $89, $F0
00030D10 01                         byte_2C5C0:	dc.b 1
00030D11 F00F 0099 F0               		dc.b $F0, $F, 0, $99, $F0
00030D16 01                         byte_2C5C6:	dc.b 1
00030D17 F00F 00A9 F0               		dc.b $F0, $F, 0, $A9, $F0
00030D1C 01                         byte_2C5CC:	dc.b 1
00030D1D F00F 00B9 F0               		dc.b $F0, $F, 0, $B9, $F0
00030D22 01                         byte_2C5D2:	dc.b 1
00030D23 F00F 00C9 F0               		dc.b $F0, $F, 0, $C9, $F0
00030D28 01                         byte_2C5D8:	dc.b 1
00030D29 F00F 00D9 F0               		dc.b $F0, $F, 0, $D9, $F0
00030D2E 01                         byte_2C5DE:	dc.b 1
00030D2F F00F 00E9 F0               		dc.b $F0, $F, 0, $E9, $F0
00030D34                            		even
00030D34                            		even
00030D34                            ; ---------------------------------------------------------------------------
00030D34                            ; Compressed graphics - special stage
00030D34                            ; ---------------------------------------------------------------------------
00030D34                            Nem_SSWalls:	incbin	artnem\sswalls.bin	; special stage walls
0003166C                            		even
0003166C                            Eni_SSBg1:	incbin	mapeni\ssbg1.bin	; special stage background (mappings)
000317BA                            		even
000317BA                            Nem_SSBgFish:	incbin	artnem\ssbg1.bin	; special stage birds and fish background
00032C4C                            		even
00032C4C                            Eni_SSBg2:	incbin	mapeni\ssbg2.bin	; special stage background (mappings)
00032F4C                            		even
00032F4C                            Nem_SSBgCloud:	incbin	artnem\ssbg2.bin	; special stage clouds background
00033440                            		even
00033440                            Nem_SSGOAL:	incbin	artnem\ssgoal.bin	; special stage GOAL block
0003352E                            		even
0003352E                            Nem_SSRBlock:	incbin	artnem\ssr.bin		; special stage R block
000335FE                            		even
000335FE                            Nem_SS1UpBlock:	incbin	artnem\ss1up.bin	; special stage 1UP block
000336F4                            		even
000336F4                            Nem_SSEmStars:	incbin	artnem\ssemstar.bin	; special stage stars from a collected emerald
00033752                            		even
00033752                            Nem_SSRedWhite:	incbin	artnem\ssredwhi.bin	; special stage red/white block
000337E4                            		even
000337E4                            Nem_SSZone1:	incbin	artnem\sszone1.bin	; special stage ZONE1 block
000338A6                            		even
000338A6                            Nem_SSZone2:	incbin	artnem\sszone2.bin	; ZONE2 block
00033974                            		even
00033974                            Nem_SSZone3:	incbin	artnem\sszone3.bin	; ZONE3 block
00033A40                            		even
00033A40                            Nem_SSZone4:	incbin	artnem\sszone4.bin	; ZONE4 block
00033B08                            		even
00033B08                            Nem_SSZone5:	incbin	artnem\sszone5.bin	; ZONE5 block
00033BD2                            		even
00033BD2                            Nem_SSZone6:	incbin	artnem\sszone6.bin	; ZONE6 block
00033CA2                            		even
00033CA2                            Nem_SSUpDown:	incbin	artnem\ssupdown.bin	; special stage UP/DOWN block
00033E96                            		even
00033E96                            Nem_SSEmerald:	incbin	artnem\ssemeral.bin	; special stage chaos emeralds
00033FFE                            		even
00033FFE                            Nem_SSGhost:	incbin	artnem\ssghost.bin	; special stage ghost block
000340AE                            		even
000340AE                            Nem_SSWBlock:	incbin	artnem\ssw.bin		; special stage W block
00034188                            		even
00034188                            Nem_SSGlass:	incbin	artnem\ssglass.bin	; special stage destroyable glass block
0003420C                            		even
0003420C                            Nem_ResultEm:	incbin	artnem\ssresems.bin	; chaos emeralds on special stage results screen
0003438A                            		even
0003438A                            ; ---------------------------------------------------------------------------
0003438A                            ; Compressed graphics - GHZ stuff
0003438A                            ; ---------------------------------------------------------------------------
0003438A                            Nem_Stalk:	incbin	artnem\ghzstalk.bin	; GHZ flower stalk
000343D4                            		even
000343D4                            Nem_Swing:	incbin	artnem\ghzswing.bin	; GHZ swinging platform
000344EE                            		even
000344EE                            Nem_Bridge:	incbin	artnem\ghzbridg.bin	; GHZ bridge
000345DA                            		even
000345DA                            Nem_GhzUnkBlock:incbin	artnem\xxxghzbl.bin	; unused GHZ block
00034622                            		even
00034622                            Nem_Ball:	incbin	artnem\ghzball.bin	; GHZ giant ball
000347C0                            		even
000347C0                            Nem_Spikes:	incbin	artnem\spikes.bin	; spikes
0003483C                            		even
0003483C                            Nem_GhzLog:	incbin	artnem\xxxghzlo.bin	; unused GHZ log
00034A50                            		even
00034A50                            Nem_SpikePole:	incbin	artnem\ghzlog.bin	; GHZ spiked log
00034B7C                            		even
00034B7C                            Nem_PplRock:	incbin	artnem\ghzrock.bin	; GHZ purple rock
00034CAA                            		even
00034CAA                            Nem_GhzWall1:	incbin	artnem\ghzwall1.bin	; GHZ destroyable wall
00034D48                            		even
00034D48                            Nem_GhzWall2:	incbin	artnem\ghzwall2.bin	; GHZ normal wall
00034DA8                            		even
00034DA8                            ; ---------------------------------------------------------------------------
00034DA8                            ; Compressed graphics - LZ stuff
00034DA8                            ; ---------------------------------------------------------------------------
00034DA8                            Nem_Water:	incbin	artnem\lzwater.bin	; LZ water surface
00034ECC                            		even
00034ECC                            Nem_Splash:	incbin	artnem\lzsplash.bin	; LZ waterfalls and splashes
000356C0                            		even
000356C0                            Nem_LzSpikeBall:incbin	artnem\lzspball.bin	; LZ spiked ball on chain
00035840                            		even
00035840                            Nem_FlapDoor:	incbin	artnem\lzflapdo.bin	; LZ flapping door
000359AA                            		even
000359AA                            Nem_Bubbles:	incbin	artnem\lzbubble.bin	; LZ bubbles and countdown numbers
00036000                            		even
00036000                            Nem_LzBlock3:	incbin	artnem\lzblock3.bin	; LZ 32x16 block
000360B6                            		even
000360B6                            Nem_LzDoor1:	incbin	artnem\lzvdoor.bin	; LZ vertical door
00036158                            		even
00036158                            Nem_Harpoon:	incbin	artnem\lzharpoo.bin	; LZ harpoon
000362B4                            		even
000362B4                            Nem_LzPole:	incbin	artnem\lzpole.bin	; LZ pole that breaks
00036318                            		even
00036318                            Nem_LzDoor2:	incbin	artnem\lzhdoor.bin	; LZ large horizontal door
0003646A                            		even
0003646A                            Nem_LzWheel:	incbin	artnem\lzwheel.bin	; LZ wheel from corner of conveyor belt
0003694C                            		even
0003694C                            Nem_Gargoyle:	incbin	artnem\lzgargoy.bin	; LZ gargoyle head and spitting fire
00036ABC                            		even
00036ABC                            Nem_LzBlock2:	incbin	artnem\lzblock2.bin	; LZ blocks
00036D74                            		even
00036D74                            Nem_LzPlatfm:	incbin	artnem\lzptform.bin	; LZ rising platforms
00036EAC                            		even
00036EAC                            Nem_Cork:	incbin	artnem\lzcork.bin	; LZ cork block
00036FD6                            		even
00036FD6                            Nem_LzBlock1:	incbin	artnem\lzblock1.bin	; LZ 32x32 block
000370E6                            		even
000370E6                            ; ---------------------------------------------------------------------------
000370E6                            ; Compressed graphics - MZ stuff
000370E6                            ; ---------------------------------------------------------------------------
000370E6                            Nem_MzMetal:	incbin	artnem\mzmetal.bin	; MZ metal blocks
00037374                            		even
00037374                            Nem_MzSwitch:	incbin	artnem\mzswitch.bin	; MZ switch
00037432                            		even
00037432                            Nem_MzGlass:	incbin	artnem\mzglassy.bin	; MZ green glassy block
000374EA                            		even
000374EA                            Nem_GhzGrass:	incbin	artnem\xxxgrass.bin	; unused grass (GHZ or MZ?)
0003753E                            		even
0003753E                            Nem_MzFire:	incbin	artnem\mzfire.bin	; MZ fireballs
00037810 00                         		even
00037810                            Nem_Lava:	incbin	artnem\mzlava.bin	; MZ lava
00038126                            		even
00038126                            Nem_MzBlock:	incbin	artnem\mzblock.bin	; MZ green pushable block
0003828A                            		even
0003828A                            Nem_MzUnkBlock:	incbin	artnem\xxxmzblo.bin	; MZ unused background block
00038312                            		even
00038312                            ; ---------------------------------------------------------------------------
00038312                            ; Compressed graphics - SLZ stuff
00038312                            ; ---------------------------------------------------------------------------
00038312                            Nem_Seesaw:	incbin	artnem\slzseesa.bin	; SLZ seesaw
0003854E                            		even
0003854E                            Nem_SlzSpike:	incbin	artnem\slzspike.bin	; SLZ spikeball that sits on a seesaw
00038694                            		even
00038694                            Nem_Fan:	incbin	artnem\slzfan.bin	; SLZ fan
000388D8                            		even
000388D8                            Nem_SlzWall:	incbin	artnem\slzwall.bin	; SLZ smashable wall
0003893A                            		even
0003893A                            Nem_Pylon:	incbin	artnem\slzpylon.bin	; SLZ foreground pylon
00038A1C                            		even
00038A1C                            Nem_SlzSwing:	incbin	artnem\slzswing.bin	; SLZ swinging platform
00038BFE                            		even
00038BFE                            Nem_SlzBlock:	incbin	artnem\slzblock.bin	; SLZ 32x32 block
00038D0A                            		even
00038D0A                            Nem_SlzCannon:	incbin	artnem\slzcanno.bin	; SLZ fireball launcher cannon
00038DAE                            		even
00038DAE                            ; ---------------------------------------------------------------------------
00038DAE                            ; Compressed graphics - SYZ stuff
00038DAE                            ; ---------------------------------------------------------------------------
00038DAE                            Nem_Bumper:	incbin	artnem\syzbumpe.bin	; SYZ bumper
00038F18                            		even
00038F18                            Nem_SyzSpike2:	incbin	artnem\syzsspik.bin	; SYZ small spikeball
00038F7A                            		even
00038F7A                            Nem_LzSwitch:	incbin	artnem\switch.bin	; LZ/SYZ/SBZ switch
0003905C                            		even
0003905C                            Nem_SyzSpike1:	incbin	artnem\syzlspik.bin	; SYZ/SBZ large spikeball
000392EA                            		even
000392EA                            ; ---------------------------------------------------------------------------
000392EA                            ; Compressed graphics - SBZ stuff
000392EA                            ; ---------------------------------------------------------------------------
000392EA                            Nem_SbzWheel1:	incbin	artnem\sbzwhee1.bin	; SBZ spot on rotating wheel that Sonic runs around
0003933E                            		even
0003933E                            Nem_SbzWheel2:	incbin	artnem\sbzwhee2.bin	; SBZ wheel that grabs Sonic
000395DA                            		even
000395DA                            Nem_Cutter:	incbin	artnem\sbzcutte.bin	; SBZ pizza cutter
000397DE                            		even
000397DE                            Nem_Stomper:	incbin	artnem\sbzstomp.bin	; SBZ stomper
0003997C                            		even
0003997C                            Nem_SpinPform:	incbin	artnem\sbzpform.bin	; SBZ spinning platform
00039CAC                            		even
00039CAC                            Nem_TrapDoor:	incbin	artnem\sbztrapd.bin	; SBZ trapdoor
00039E8A                            		even
00039E8A                            Nem_SbzFloor:	incbin	artnem\sbzfloor.bin	; SBZ collapsing floor
00039EE2                            		even
00039EE2                            Nem_Electric:	incbin	artnem\sbzshock.bin	; SBZ electric shock orb
0003A0AC 00                         		even
0003A0AC                            Nem_SbzBlock:	incbin	artnem\sbzvanis.bin	; SBZ vanishing block
0003A1AA                            		even
0003A1AA                            Nem_FlamePipe:	incbin	artnem\sbzflame.bin	; SBZ flaming pipe
0003A336                            		even
0003A336                            Nem_SbzDoor1:	incbin	artnem\sbzvdoor.bin	; SBZ small vertical door
0003A386                            		even
0003A386                            Nem_SlideFloor:	incbin	artnem\sbzslide.bin	; SBZ floor that slides away
0003A3DE                            		even
0003A3DE                            Nem_SbzDoor2:	incbin	artnem\sbzhdoor.bin	; SBZ large horizontal door
0003A4DA                            		even
0003A4DA                            Nem_Girder:	incbin	artnem\sbzgirde.bin	; SBZ crushing girder
0003A5F0                            		even
0003A5F0                            ; ---------------------------------------------------------------------------
0003A5F0                            ; Compressed graphics - enemies
0003A5F0                            ; ---------------------------------------------------------------------------
0003A5F0                            Nem_BallHog:	incbin	artnem\ballhog.bin	; ball hog
0003A9B0                            		even
0003A9B0                            Nem_Crabmeat:	incbin	artnem\crabmeat.bin	; crabmeat
0003AB5A 00                         		even
0003AB5A                            Nem_Buzz:	incbin	artnem\buzzbomb.bin	; buzz bomber
0003AF1C 00                         		even
0003AF1C                            Nem_UnkExplode:	incbin	artnem\xxxexplo.bin	; unused explosion
0003B104                            		even
0003B104                            Nem_Burrobot:	incbin	artnem\burrobot.bin	; burrobot
0003B2BC 00                         		even
0003B2BC                            Nem_Chopper:	incbin	artnem\chopper.bin	; chopper
0003B406                            		even
0003B406                            Nem_Jaws:	incbin	artnem\jaws.bin		; jaws
0003B690                            		even
0003B690                            Nem_Roller:	incbin	artnem\roller.bin	; roller
0003BCB4                            		even
0003BCB4                            Nem_Motobug:	incbin	artnem\motobug.bin	; moto bug
0003BEAA                            		even
0003BEAA                            Nem_Newtron:	incbin	artnem\newtron.bin	; newtron
0003C4C8                            		even
0003C4C8                            Nem_Yadrin:	incbin	artnem\yadrin.bin	; yadrin
0003C8C8 00                         		even
0003C8C8                            Nem_Basaran:	incbin	artnem\basaran.bin	; basaran
0003CBC4                            		even
0003CBC4                            Nem_Splats:	incbin	artnem\splats.bin	; splats
0003CE0C                            		even
0003CE0C                            Nem_Bomb:	incbin	artnem\bomb.bin		; bomb
0003D0A4                            		even
0003D0A4                            Nem_Orbinaut:	incbin	artnem\orbinaut.bin	; orbinaut
0003D282                            		even
0003D282                            Nem_Cater:	incbin	artnem\caterkil.bin	; caterkiller
0003D410                            		even
0003D410                            ; ---------------------------------------------------------------------------
0003D410                            ; Compressed graphics - various
0003D410                            ; ---------------------------------------------------------------------------
0003D410                            Nem_TitleCard:	incbin	artnem\ttlcards.bin	; title cards
0003DA1E                            		even
0003DA1E                            Nem_Hud:	incbin	artnem\hud.bin		; HUD (rings, time, score)
0003DB14                            		even
0003DB14                            Nem_Lives:	incbin	artnem\lifeicon.bin	; life counter icon
0003DC1A                            		even
0003DC1A                            Nem_Ring:	incbin	artnem\rings.bin	; rings
0003DD0E                            		even
0003DD0E                            Nem_Monitors:	incbin	artnem\monitors.bin	; monitors
0003E252                            		even
0003E252                            Nem_Explode:	incbin	artnem\explosio.bin	; explosion
0003E8B8                            		even
0003E8B8                            Nem_Points:	incbin	artnem\points.bin	; points from destroyed enemy or object
0003E968                            		even
0003E968                            Nem_GameOver:	incbin	artnem\gameover.bin	; game over / time over
0003EAFA                            		even
0003EAFA                            Nem_HSpring:	incbin	artnem\springh.bin	; horizontal spring
0003EBFC                            		even
0003EBFC                            Nem_VSpring:	incbin	artnem\springv.bin	; vertical spring
0003ECD8                            		even
0003ECD8                            Nem_SignPost:	incbin	artnem\signpost.bin	; end of level signpost
0003F154                            		even
0003F154                            Nem_Lamp:	incbin	artnem\lamppost.bin	; lamppost
0003F214                            		even
0003F214                            Nem_BigFlash:	incbin	artnem\rngflash.bin	; flash from giant ring
0003F388                            		even
0003F388                            Nem_Bonus:	incbin	artnem\bonus.bin	; hidden bonuses at end of a level
0003F68A                            		even
0003F68A                            ; ---------------------------------------------------------------------------
0003F68A                            ; Compressed graphics - continue screen
0003F68A                            ; ---------------------------------------------------------------------------
0003F68A                            Nem_ContSonic:	incbin	artnem\cntsonic.bin	; Sonic on continue screen
0003F93A                            		even
0003F93A                            Nem_MiniSonic:	incbin	artnem\cntother.bin	; mini Sonic and text on continue screen
0003FB74                            		even
0003FB74                            ; ---------------------------------------------------------------------------
0003FB74                            ; Compressed graphics - animals
0003FB74                            ; ---------------------------------------------------------------------------
0003FB74                            Nem_Rabbit:	incbin	artnem\rabbit.bin	; rabbit
0003FCCC                            		even
0003FCCC                            Nem_Chicken:	incbin	artnem\chicken.bin	; chicken
0003FE28                            		even
0003FE28                            Nem_BlackBird:	incbin	artnem\blackbrd.bin	; blackbird
0003FFA4                            		even
0003FFA4                            Nem_Seal:	incbin	artnem\seal.bin		; seal
000400C0                            		even
000400C0                            Nem_Pig:	incbin	artnem\pig.bin		; pig
000401F6                            		even
000401F6                            Nem_Flicky:	incbin	artnem\flicky.bin	; flicky
00040330                            		even
00040330                            Nem_Squirrel:	incbin	artnem\squirrel.bin	; squirrel
0004048C                            		even
0004048C                            ; ---------------------------------------------------------------------------
0004048C                            ; Compressed graphics - primary patterns and block mappings
0004048C                            ; ---------------------------------------------------------------------------
0004048C                            Blk16_GHZ:	incbin	map16\ghz.bin
00040DA0                            		even
00040DA0                            Nem_GHZ_1st:	incbin	artnem\8x8ghz1.bin	; GHZ primary patterns
000426AE                            		even
000426AE                            Nem_GHZ_2nd:	incbin	artnem\8x8ghz2.bin	; GHZ secondary patterns
00043A2E                            		even
00043A2E                            Blk256_GHZ:	incbin	map256\ghz.bin
00045D2C                            		even
00045D2C                            Blk16_LZ:	incbin	map16\lz.bin
00046466                            		even
00046466                            Nem_LZ:		incbin	artnem\8x8lz.bin	; LZ primary patterns
00048868                            		even
00048868                            Blk256_LZ:	incbin	map256\lz.bin
0004B1E8                            		even
0004B1E8                            Blk16_MZ:	incbin	map16\mz.bin
0004B944                            		even
0004B944                            Nem_MZ:		incbin	artnem\8x8mz.bin	; MZ primary patterns
0004E1CC                            		even
0004E1CC                            Blk256_MZ:	incbin	map256\mz.bin
0004F950                            		even
0004F950                            Blk16_SLZ:	incbin	map16\slz.bin
0005001A                            		even
0005001A                            Nem_SLZ:	incbin	artnem\8x8slz.bin	; SLZ primary patterns
00051F6E                            		even
00051F6E                            Blk256_SLZ:	incbin	map256\slz.bin
000525E8                            		even
000525E8                            Blk16_SYZ:	incbin	map16\syz.bin
0005320E                            		even
0005320E                            Nem_SYZ:	incbin	artnem\8x8syz.bin	; SYZ primary patterns
000577A0                            		even
000577A0                            Blk256_SYZ:	incbin	map256\syz.bin
000597FC                            		even
000597FC                            Blk16_SBZ:	incbin	map16\sbz.bin
0005A744                            		even
0005A744                            Nem_SBZ:	incbin	artnem\8x8sbz.bin	; SBZ primary patterns
0005D108                            		even
0005D108                            Blk256_SBZ:	incbin	map256\sbz.bin
0005FBFE                            		even
0005FBFE                            ; ---------------------------------------------------------------------------
0005FBFE                            ; Compressed graphics - bosses and ending sequence
0005FBFE                            ; ---------------------------------------------------------------------------
0005FBFE                            Nem_Eggman:	incbin	artnem\bossmain.bin	; boss main patterns
00060418 00                         		even
00060418                            Nem_Tetoboss:	incbin	artnem\TetoBoss.bin	; boss main patterns
00060A66                            		even
00060A66                            Nem_Peartobomb:	incbin	artnem\peartobomb.bin	; boss main patterns
00060AE0                            		even
00060AE0                            Nem_Weapons:	incbin	artnem\bossxtra.bin	; boss add-ons and weapons
00060DCA                            		even
00060DCA                            Nem_Prison:	incbin	artnem\prison.bin	; prison capsule
0006164E                            		even
0006164E                            Nem_Sbz2Eggman:	incbin	artnem\sbz2boss.bin	; Eggman in SBZ2 and FZ
000623A4 00                         		even
000623A4                            Nem_FzBoss:	incbin	artnem\fzboss.bin	; FZ boss
00062B0C                            		even
00062B0C                            Nem_FzEggman:	incbin	artnem\fzboss2.bin	; Eggman after the FZ boss
0006308C                            		even
0006308C                            Nem_Exhaust:	incbin	artnem\bossflam.bin	; boss exhaust flame
000631AC                            		even
000631AC                            Nem_EndEm:	incbin	artnem\endemera.bin	; ending sequence chaos emeralds
000633AA                            		even
000633AA                            Nem_EndSonic:	incbin	artnem\endsonic.bin	; ending sequence Sonic
00064588                            		even
00064588                            Nem_TryAgain:	incbin	artnem\tryagain.bin	; ending "try again" screen
00064ECC                            		even
00064ECC                            Nem_EndEggman:	incbin	artnem\xxxend.bin	; unused boss sequence on ending
000652A2                            		even
000652A2                            Kos_EndFlowers:	incbin	artkos\flowers.bin	; ending sequence animated flowers
00065832                            		even
00065832                            Nem_EndFlower:	incbin	artnem\endflowe.bin	; ending sequence flowers
00065ABA                            		even
00065ABA                            Nem_CreditText:	incbin	artnem\credits.bin	; credits alphabet
000660A8 00                         		even
000660A8                            Nem_EndStH:	incbin	artnem\endtext.bin	; ending sequence "Sonic the Hedgehog" text
00066330                            		even
00066330                            		incbin	misc\padding2.bin
00066434                            		even
00066434                            ; ---------------------------------------------------------------------------
00066434                            ; Collision data
00066434                            ; ---------------------------------------------------------------------------
00066434                            AngleMap:	incbin	collide\anglemap.bin	; floor angle map
00066534                            		even
00066534                            CollArray1:	incbin	collide\carray_n.bin	; normal collision array
00067534                            		even
00067534                            CollArray2:	incbin	collide\carray_r.bin	; rotated collision array
00068534                            		even
00068534                            Col_GHZ:	incbin	collide\ghz.bin		; GHZ index
000686EC 00                         		even
000686EC                            Col_LZ:		incbin	collide\lz.bin		; LZ index
00068854                            		even
00068854                            Col_MZ:		incbin	collide\mz.bin		; MZ index
000689E4                            		even
000689E4                            Col_SLZ:	incbin	collide\slz.bin		; SLZ index
00068BD8                            		even
00068BD8                            Col_SYZ:	incbin	collide\syz.bin		; SYZ index
00068DDE                            		even
00068DDE                            Col_SBZ:	incbin	collide\sbz.bin		; SBZ index
0006907C                            		even
0006907C                            ; ---------------------------------------------------------------------------
0006907C                            ; Special layouts
0006907C                            ; ---------------------------------------------------------------------------
0006907C                            SS_1:		incbin	sslayout\1.bin
000692F6                            		even
000692F6                            SS_2:		incbin	sslayout\2.bin
00069708                            		even
00069708                            SS_3:		incbin	sslayout\3.bin
00069A64                            		even
00069A64                            SS_4:		incbin	sslayout\4.bin
00069F3E                            		even
00069F3E                            SS_5:		incbin	sslayout\5.bin
0006A410                            		even
0006A410                            SS_6:		incbin	sslayout\6.bin
0006A720                            		even
0006A720                            ; ---------------------------------------------------------------------------
0006A720                            ; Animated uncompressed graphics
0006A720                            ; ---------------------------------------------------------------------------
0006A720                            Art_GhzWater:	incbin	artunc\ghzwater.bin	; GHZ waterfall
0006A920                            		even
0006A920                            Art_GhzFlower1:	incbin	artunc\ghzflowl.bin	; GHZ large flower
0006AD20                            		even
0006AD20                            Art_GhzFlower2:	incbin	artunc\ghzflows.bin	; GHZ small flower
0006B1A0                            		even
0006B1A0                            Art_MzLava1:	incbin	artunc\mzlava1.bin	; MZ lava surface
0006B4A0                            		even
0006B4A0                            Art_MzLava2:	incbin	artunc\mzlava2.bin	; MZ lava
0006BAA0                            		even
0006BAA0                            Art_MzTorch:	incbin	artunc\mztorch.bin	; MZ torch in background
0006BDA0                            		even
0006BDA0                            Art_SbzSmoke:	incbin	artunc\sbzsmoke.bin	; SBZ smoke in background
0006C820                            		even
0006C820                            
0006C820                            ; ---------------------------------------------------------------------------
0006C820                            ; Level	layout index
0006C820                            ; ---------------------------------------------------------------------------
0006C820 0000 0000 0000             Level_Index:	dc.w Level_GHZ1-Level_Index, Level_GHZbg-Level_Index, byte_68D70-Level_Index
0006C826 0000 0000 0000             		dc.w Level_GHZ2-Level_Index, Level_GHZbg-Level_Index, byte_68E3C-Level_Index
0006C82C 0000 0000 0000             		dc.w Level_GHZ3-Level_Index, Level_GHZbg-Level_Index, byte_68F84-Level_Index
0006C832 0000 0000 0000             		dc.w byte_68F88-Level_Index, byte_68F88-Level_Index, byte_68F88-Level_Index
0006C838 0000 0000 0000             		dc.w Level_LZ1-Level_Index, Level_LZbg-Level_Index, byte_69190-Level_Index
0006C83E 0000 0000 0000             		dc.w Level_LZ2-Level_Index, Level_LZbg-Level_Index, byte_6922E-Level_Index
0006C844 0000 0000 0000             		dc.w Level_LZ3-Level_Index, Level_LZbg-Level_Index, byte_6934C-Level_Index
0006C84A 0000 0000 0000             		dc.w Level_SBZ3-Level_Index, Level_LZbg-Level_Index, byte_6940A-Level_Index
0006C850 0000 0000 0000             		dc.w Level_MZ1-Level_Index, Level_MZ1bg-Level_Index, Level_MZ1-Level_Index
0006C856 0000 0000 0000             		dc.w Level_MZ2-Level_Index, Level_MZ2bg-Level_Index, byte_6965C-Level_Index
0006C85C 0000 0000 0000             		dc.w Level_MZ3-Level_Index, Level_MZ3bg-Level_Index, byte_697E6-Level_Index
0006C862 0000 0000 0000             		dc.w byte_697EA-Level_Index, byte_697EA-Level_Index, byte_697EA-Level_Index
0006C868 0000 0000 0000             		dc.w Level_SLZ1-Level_Index, Level_SLZbg-Level_Index, byte_69B84-Level_Index
0006C86E 0000 0000 0000             		dc.w Level_SLZ2-Level_Index, Level_SLZbg-Level_Index, byte_69B84-Level_Index
0006C874 0000 0000 0000             		dc.w Level_SLZ3-Level_Index, Level_SLZbg-Level_Index, byte_69B84-Level_Index
0006C87A 0000 0000 0000             		dc.w byte_69B84-Level_Index, byte_69B84-Level_Index, byte_69B84-Level_Index
0006C880 0000 0000 0000             		dc.w Level_SYZ1-Level_Index, Level_SYZbg-Level_Index, byte_69C7E-Level_Index
0006C886 0000 0000 0000             		dc.w Level_SYZ2-Level_Index, Level_SYZbg-Level_Index, byte_69D86-Level_Index
0006C88C 0000 0000 0000             		dc.w Level_SYZ3-Level_Index, Level_SYZbg-Level_Index, byte_69EE4-Level_Index
0006C892 0000 0000 0000             		dc.w byte_69EE8-Level_Index, byte_69EE8-Level_Index, byte_69EE8-Level_Index
0006C898 0000 0000 0000             		dc.w Level_SBZ1-Level_Index, Level_SBZ1bg-Level_Index, Level_SBZ1bg-Level_Index
0006C89E 0000 0000 0000             		dc.w Level_SBZ2-Level_Index, Level_SBZ2bg-Level_Index, Level_SBZ2bg-Level_Index
0006C8A4 0000 0000 0000             		dc.w Level_SBZ2-Level_Index, Level_SBZ2bg-Level_Index, byte_6A2F8-Level_Index
0006C8AA 0000 0000 0000             		dc.w byte_6A2FC-Level_Index, byte_6A2FC-Level_Index, byte_6A2FC-Level_Index
0006C8B0 0000 0000 0000             		dc.w Level_End-Level_Index, Level_GHZbg-Level_Index, byte_6A320-Level_Index
0006C8B6 0000 0000 0000             		dc.w Level_End-Level_Index, Level_GHZbg-Level_Index, byte_6A320-Level_Index
0006C8BC 0000 0000 0000             		dc.w byte_6A320-Level_Index, byte_6A320-Level_Index, byte_6A320-Level_Index
0006C8C2 0000 0000 0000             		dc.w byte_6A320-Level_Index, byte_6A320-Level_Index, byte_6A320-Level_Index
0006C8C8                            
0006C8C8                            Level_GHZ1:	incbin	levels\ghz1.bin
0006C9BA                            		even
0006C9BA 0000 0000                  byte_68D70:	dc.b 0,	0, 0, 0
0006C9BE                            Level_GHZ2:	incbin	levels\ghz2.bin
0006CA86                            		even
0006CA86 0000 0000                  byte_68E3C:	dc.b 0,	0, 0, 0
0006CA8A                            Level_GHZ3:	incbin	levels\ghz3.bin
0006CBAC                            		even
0006CBAC                            Level_GHZbg:	incbin	levels\ghzbg.bin
0006CBCE                            		even
0006CBCE 0000 0000                  byte_68F84:	dc.b 0,	0, 0, 0
0006CBD2 0000 0000                  byte_68F88:	dc.b 0,	0, 0, 0
0006CBD6                            
0006CBD6                            Level_LZ1:	incbin	levels\lz1.bin
0006CCD8                            		even
0006CCD8                            Level_LZbg:	incbin	levels\lzbg.bin
0006CDDA                            		even
0006CDDA 0000 0000                  byte_69190:	dc.b 0,	0, 0, 0
0006CDDE                            Level_LZ2:	incbin	levels\lz2.bin
0006CE78                            		even
0006CE78 0000 0000                  byte_6922E:	dc.b 0,	0, 0, 0
0006CE7C                            Level_LZ3:	incbin	levels\lz3.bin
0006CF96                            		even
0006CF96 0000 0000                  byte_6934C:	dc.b 0,	0, 0, 0
0006CF9A                            Level_SBZ3:	incbin	levels\sbz3.bin
0006D054                            		even
0006D054 0000 0000                  byte_6940A:	dc.b 0,	0, 0, 0
0006D058                            
0006D058                            Level_MZ1:	incbin	levels\mz1.bin
0006D0F6                            		even
0006D0F6                            Level_MZ1bg:	incbin	levels\mz1bg.bin
0006D170                            		even
0006D170                            Level_MZ2:	incbin	levels\mz2.bin
0006D214                            		even
0006D214                            Level_MZ2bg:	incbin	levels\mz2bg.bin
0006D2A6                            		even
0006D2A6 0000 0000                  byte_6965C:	dc.b 0,	0, 0, 0
0006D2AA                            Level_MZ3:	incbin	levels\mz3.bin
0006D38C                            		even
0006D38C                            Level_MZ3bg:	incbin	levels\mz3bg.bin
0006D430 00                         		even
0006D430 0000 0000                  byte_697E6:	dc.b 0,	0, 0, 0
0006D434 0000 0000                  byte_697EA:	dc.b 0,	0, 0, 0
0006D438                            
0006D438                            Level_SLZ1:	incbin	levels\slz1.bin
0006D54A                            		even
0006D54A                            Level_SLZbg:	incbin	levels\slzbg.bin
0006D564                            		even
0006D564                            Level_SLZ2:	incbin	levels\slz2.bin
0006D654                            		even
0006D654                            Level_SLZ3:	incbin	levels\slz3.bin
0006D76E                            		even
0006D76E 0000 0000                  byte_69B84:	dc.b 0,	0, 0, 0
0006D772                            
0006D772                            Level_SYZ1:	incbin	levels\syz1.bin
0006D82E 00                         		even
0006D82E                            Level_SYZbg:	incbin	levels\syzbg.bin
0006D868                            		even
0006D868 0000 0000                  byte_69C7E:	dc.b 0,	0, 0, 0
0006D86C                            Level_SYZ2:	incbin	levels\syz2.bin
0006D970                            		even
0006D970 0000 0000                  byte_69D86:	dc.b 0,	0, 0, 0
0006D974                            Level_SYZ3:	incbin	levels\syz3.bin
0006DACE 00                         		even
0006DACE 0000 0000                  byte_69EE4:	dc.b 0,	0, 0, 0
0006DAD2 0000 0000                  byte_69EE8:	dc.b 0,	0, 0, 0
0006DAD6                            
0006DAD6                            Level_SBZ1:	incbin	levels\sbz1.bin
0006DBF8                            		even
0006DBF8                            Level_SBZ1bg:	incbin	levels\sbz1bg.bin
0006DC36                            		even
0006DC36                            Level_SBZ2:	incbin	levels\sbz2.bin
0006DD78                            		even
0006DD78                            Level_SBZ2bg:	incbin	levels\sbz2bg.bin
0006DEE2                            		even
0006DEE2 0000 0000                  byte_6A2F8:	dc.b 0,	0, 0, 0
0006DEE6 0000 0000                  byte_6A2FC:	dc.b 0,	0, 0, 0
0006DEEA                            Level_End:	incbin	levels\ending.bin
0006DF1A 00                         		even
0006DF1A 0000 0000                  byte_6A320:	dc.b 0,	0, 0, 0
0006DF1E                            
0006DF1E                            ; ---------------------------------------------------------------------------
0006DF1E                            ; Animated uncompressed giant ring graphics
0006DF1E                            ; ---------------------------------------------------------------------------
0006DF1E                            Art_BigRing:	incbin	artunc\bigring.bin
0006EB5E                            		even
0006EB5E                            
0006EB5E                            		incbin	misc\padding3.bin
0006EBFA                            		even
0006EBFA                            
0006EBFA                            ; ---------------------------------------------------------------------------
0006EBFA                            ; Sprite locations index
0006EBFA                            ; ---------------------------------------------------------------------------
0006EBFA 0000 0000                  ObjPos_Index:	dc.w ObjPos_GHZ1-ObjPos_Index, ObjPos_Null-ObjPos_Index
0006EBFE 0000 0000                  		dc.w ObjPos_GHZ2-ObjPos_Index, ObjPos_Null-ObjPos_Index
0006EC02 0000 0000                  		dc.w ObjPos_GHZ3-ObjPos_Index, ObjPos_Null-ObjPos_Index
0006EC06 0000 0000                  		dc.w ObjPos_GHZ1-ObjPos_Index, ObjPos_Null-ObjPos_Index
0006EC0A 0000 0000                  		dc.w ObjPos_LZ1-ObjPos_Index, ObjPos_Null-ObjPos_Index
0006EC0E 0000 0000                  		dc.w ObjPos_LZ2-ObjPos_Index, ObjPos_Null-ObjPos_Index
0006EC12 0000 0000                  		dc.w ObjPos_LZ3-ObjPos_Index, ObjPos_Null-ObjPos_Index
0006EC16 0000 0000                  		dc.w ObjPos_SBZ3-ObjPos_Index, ObjPos_Null-ObjPos_Index
0006EC1A 0000 0000                  		dc.w ObjPos_MZ1-ObjPos_Index, ObjPos_Null-ObjPos_Index
0006EC1E 0000 0000                  		dc.w ObjPos_MZ2-ObjPos_Index, ObjPos_Null-ObjPos_Index
0006EC22 0000 0000                  		dc.w ObjPos_MZ3-ObjPos_Index, ObjPos_Null-ObjPos_Index
0006EC26 0000 0000                  		dc.w ObjPos_MZ1-ObjPos_Index, ObjPos_Null-ObjPos_Index
0006EC2A 0000 0000                  		dc.w ObjPos_SLZ1-ObjPos_Index, ObjPos_Null-ObjPos_Index
0006EC2E 0000 0000                  		dc.w ObjPos_SLZ2-ObjPos_Index, ObjPos_Null-ObjPos_Index
0006EC32 0000 0000                  		dc.w ObjPos_SLZ3-ObjPos_Index, ObjPos_Null-ObjPos_Index
0006EC36 0000 0000                  		dc.w ObjPos_SLZ1-ObjPos_Index, ObjPos_Null-ObjPos_Index
0006EC3A 0000 0000                  		dc.w ObjPos_SYZ1-ObjPos_Index, ObjPos_Null-ObjPos_Index
0006EC3E 0000 0000                  		dc.w ObjPos_SYZ2-ObjPos_Index, ObjPos_Null-ObjPos_Index
0006EC42 0000 0000                  		dc.w ObjPos_SYZ3-ObjPos_Index, ObjPos_Null-ObjPos_Index
0006EC46 0000 0000                  		dc.w ObjPos_SYZ1-ObjPos_Index, ObjPos_Null-ObjPos_Index
0006EC4A 0000 0000                  		dc.w ObjPos_SBZ1-ObjPos_Index, ObjPos_Null-ObjPos_Index
0006EC4E 0000 0000                  		dc.w ObjPos_SBZ2-ObjPos_Index, ObjPos_Null-ObjPos_Index
0006EC52 0000 0000                  		dc.w ObjPos_FZ-ObjPos_Index, ObjPos_Null-ObjPos_Index
0006EC56 0000 0000                  		dc.w ObjPos_SBZ1-ObjPos_Index, ObjPos_Null-ObjPos_Index
0006EC5A 0000 0000                  		dc.w ObjPos_End-ObjPos_Index, ObjPos_Null-ObjPos_Index
0006EC5E 0000 0000                  		dc.w ObjPos_End-ObjPos_Index, ObjPos_Null-ObjPos_Index
0006EC62 0000 0000                  		dc.w ObjPos_End-ObjPos_Index, ObjPos_Null-ObjPos_Index
0006EC66 0000 0000                  		dc.w ObjPos_End-ObjPos_Index, ObjPos_Null-ObjPos_Index
0006EC6A 0000 0000                  		dc.w ObjPos_LZ1pf1-ObjPos_Index, ObjPos_LZ1pf2-ObjPos_Index
0006EC6E 0000 0000                  		dc.w ObjPos_LZ2pf1-ObjPos_Index, ObjPos_LZ2pf2-ObjPos_Index
0006EC72 0000 0000                  		dc.w ObjPos_LZ3pf1-ObjPos_Index, ObjPos_LZ3pf2-ObjPos_Index
0006EC76 0000 0000                  		dc.w ObjPos_LZ1pf1-ObjPos_Index, ObjPos_LZ1pf2-ObjPos_Index
0006EC7A 0000 0000                  		dc.w ObjPos_SBZ1pf1-ObjPos_Index, ObjPos_SBZ1pf2-ObjPos_Index
0006EC7E 0000 0000                  		dc.w ObjPos_SBZ1pf3-ObjPos_Index, ObjPos_SBZ1pf4-ObjPos_Index
0006EC82 0000 0000                  		dc.w ObjPos_SBZ1pf5-ObjPos_Index, ObjPos_SBZ1pf6-ObjPos_Index
0006EC86 0000 0000                  		dc.w ObjPos_SBZ1pf1-ObjPos_Index, ObjPos_SBZ1pf2-ObjPos_Index
0006EC8A FFFF 0000 0000             		dc.b $FF, $FF, 0, 0, 0,	0
0006EC90                            ObjPos_GHZ1:	incbin	objpos\ghz1.bin
0006F4DC                            		even
0006F4DC                            ObjPos_GHZ2:	incbin	objpos\ghz2.bin
0006F590                            		even
0006F590                            ObjPos_GHZ3:	incbin	objpos\ghz3.bin
0006FFD4                            		even
0006FFD4                            ObjPos_LZ1:	incbin	objpos\lz1.bin
0007037C                            		even
0007037C                            ObjPos_LZ2:	incbin	objpos\lz2.bin
000706B2                            		even
000706B2                            ObjPos_LZ3:	incbin	objpos\lz3.bin
00070BC8                            		even
00070BC8                            ObjPos_SBZ3:	incbin	objpos\sbz3.bin
00071060                            		even
00071060                            ObjPos_LZ1pf1:	incbin	objpos\lz1pf1.bin
00071092                            		even
00071092                            ObjPos_LZ1pf2:	incbin	objpos\lz1pf2.bin
000710C4                            		even
000710C4                            ObjPos_LZ2pf1:	incbin	objpos\lz2pf1.bin
000710F6                            		even
000710F6                            ObjPos_LZ2pf2:	incbin	objpos\lz2pf2.bin
00071128                            		even
00071128                            ObjPos_LZ3pf1:	incbin	objpos\lz3pf1.bin
00071172                            		even
00071172                            ObjPos_LZ3pf2:	incbin	objpos\lz3pf2.bin
000711B0                            		even
000711B0                            ObjPos_MZ1:	incbin	objpos\mz1.bin
0007151C                            		even
0007151C                            ObjPos_MZ2:	incbin	objpos\mz2.bin
000719C6                            		even
000719C6                            ObjPos_MZ3:	incbin	objpos\mz3.bin
00071F3C                            		even
00071F3C                            ObjPos_SLZ1:	incbin	objpos\slz1.bin
00071F66                            		even
00071F66                            ObjPos_SLZ2:	incbin	objpos\slz2.bin
000723CE                            		even
000723CE                            ObjPos_SLZ3:	incbin	objpos\slz3.bin
000729B0                            		even
000729B0                            ObjPos_SYZ1:	incbin	objpos\syz1.bin
00073022                            		even
00073022                            ObjPos_SYZ2:	incbin	objpos\syz2.bin
0007358C                            		even
0007358C                            ObjPos_SYZ3:	incbin	objpos\syz3.bin
00073B92                            		even
00073B92                            ObjPos_SBZ1:	incbin	objpos\sbz1.bin
000742D0                            		even
000742D0                            ObjPos_SBZ2:	incbin	objpos\sbz2.bin
000749AE                            		even
000749AE                            ObjPos_FZ:	incbin	objpos\fz.bin
000749C0                            		even
000749C0                            ObjPos_SBZ1pf1:	incbin	objpos\sbz1pf1.bin
000749F2                            		even
000749F2                            ObjPos_SBZ1pf2:	incbin	objpos\sbz1pf2.bin
00074A24                            		even
00074A24                            ObjPos_SBZ1pf3:	incbin	objpos\sbz1pf3.bin
00074A56                            		even
00074A56                            ObjPos_SBZ1pf4:	incbin	objpos\sbz1pf4.bin
00074A88                            		even
00074A88                            ObjPos_SBZ1pf5:	incbin	objpos\sbz1pf5.bin
00074ABA                            		even
00074ABA                            ObjPos_SBZ1pf6:	incbin	objpos\sbz1pf6.bin
00074AF2                            		even
00074AF2                            ObjPos_End:	incbin	objpos\ending.bin
00074C4E                            		even
00074C4E FFFF 0000 0000             ObjPos_Null:	dc.b $FF, $FF, 0, 0, 0,	0
00074C54                            ; ---------------------------------------------------------------------------
00074C54                            		incbin	misc\padding4.bin
0007527E                            		even
0007527E                            
0007527E 0000 0000                  Go_SoundTypes:	dc.l SoundTypes		; XREF: Sound_Play
00075282 0000 0000                  Go_SoundD0:	dc.l SoundD0Index	; XREF: Sound_D0toDF
00075286 0000 0000                  Go_MusicIndex:	dc.l MusicIndex		; XREF: Sound_81to9F
0007528A 0000 0000                  Go_SoundIndex:	dc.l SoundIndex		; XREF: Sound_A0toCF
0007528E 0000 0000                  off_719A0:	dc.l byte_71A94		; XREF: Sound_81to9F
00075292 0000 0000                  Go_PSGIndex:	dc.l PSG_Index		; XREF: sub_72926
00075296                            ; ---------------------------------------------------------------------------
00075296                            ; PSG instruments used in music
00075296                            ; ---------------------------------------------------------------------------
00075296 0000 0000 0000 0000 0000+  PSG_Index:	dc.l PSG1, PSG2, PSG3
000752A2 0000 0000 0000 0000 0000+  		dc.l PSG4, PSG5, PSG6
000752AE 0000 0000 0000 0000 0000+  		dc.l PSG7, PSG8, PSG9
000752BA                            PSG1:		incbin	sound\psg1.bin
000752D1                            PSG2:		incbin	sound\psg2.bin
000752D8                            PSG3:		incbin	sound\psg3.bin
000752E9                            PSG4:		incbin	sound\psg4.bin
000752F4                            PSG6:		incbin	sound\psg6.bin
00075303                            PSG5:		incbin	sound\psg5.bin
0007532D                            PSG7:		incbin	sound\psg7.bin
00075349                            PSG8:		incbin	sound\psg8.bin
00075371                            PSG9:		incbin	sound\psg9.bin
00075382                            
00075382 0772 7326 1508 FF05        byte_71A94:	dc.b 7,	$72, $73, $26, $15, 8, $FF, 5
0007538A                            ; ---------------------------------------------------------------------------
0007538A                            ; Music	Pointers
0007538A                            ; ---------------------------------------------------------------------------
0007538A 0000 0000 0000 0000        MusicIndex:	dc.l Music81, Music82
00075392 0000 0000 0000 0000        		dc.l Music83, Music84
0007539A 0000 0000 0000 0000        		dc.l Music85, Music86
000753A2 0000 0000 0000 0000        		dc.l Music87, Music88
000753AA 0000 0000 0000 0000        		dc.l Music89, Music8A
000753B2 0000 0000 0000 0000        		dc.l Music8B, Music8C
000753BA 0000 0000 0000 0000        		dc.l Music8D, Music8E
000753C2 0000 0000 0000 0000        		dc.l Music8F, Music90
000753CA 0000 0000 0000 0000        		dc.l Music91, Music92
000753D2 0000 0000 0000 0000        		dc.l Music93, Music94
000753DA 0000 0000 0000 0000        		dc.l Music95, Music96
000753E2 0000 0000 0000 0000        		dc.l Music97, Music98
000753EA 0000 0000 0000 0000        		dc.l Music99, Music9A
000753F2 0000 0000 0000 0000        		dc.l Music9B, Music9C
000753FA 0000 0000 0000 0000        		dc.l Music9D, Music9E
00075402 0000 0000                  		dc.l Music9F
00075406                            ; ---------------------------------------------------------------------------
00075406                            ; Type of sound	being played ($90 = music; $70 = normal	sound effect)
00075406                            ; ---------------------------------------------------------------------------
00075406 9090 9090 9090 9090 9090+  SoundTypes:	dc.b $90, $90, $90, $90, $90, $90, $90,	$90, $90, $90, $90, $90, $90, $90, $90,	$90
00075416 9090 9090 9090 9090 9090+  		dc.b $90, $90, $90, $90, $90, $90, $90,	$90, $90, $90, $90, $90, $90, $90, $90,	$80
00075426 7070 7070 7070 7070 7068+  		dc.b $70, $70, $70, $70, $70, $70, $70,	$70, $70, $68, $70, $70, $70, $60, $70,	$70
00075436 6070 6070 7070 7070 7070+  		dc.b $60, $70, $60, $70, $70, $70, $70,	$70, $70, $70, $70, $70, $70, $70, $7F,	$60
00075446 7070 7070 7070 7070 7070+  		dc.b $70, $70, $70, $70, $70, $70, $70,	$70, $70, $70, $70, $70, $70, $70, $70,	$80
00075456 8080 8080 8080 8080 8080+  		dc.b $80, $80, $80, $80, $80, $80, $80,	$80, $80, $80, $80, $80, $80, $80, $80,	$90
00075466 9090 9090                  		dc.b $90, $90, $90, $90
0007546A                            
0007546A                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0007546A                            
0007546A                            
0007546A                            sub_71B4C:				; XREF: loc_B10; PalToCRAM
0007546A 33FC 0100 00A1 1100        		move.w	#$100,($A11100).l ; stop the Z80
00075472 4E71                       		nop	
00075474 4E71                       		nop	
00075476 4E71                       		nop	
00075478                            
00075478                            loc_71B5A:
00075478 0839 0000 00A1 1100        		btst	#0,($A11100).l
00075480 66F6                       		bne.s	loc_71B5A
00075482                            
00075482 0839 0007 00A0 1FFD        		btst	#7,($A01FFD).l
0007548A 6700                       		beq.s	loc_71B82
0007548C 33FC 0000 00A1 1100        		move.w	#0,($A11100).l	; start	the Z80
00075494 4E71                       		nop	
00075496 4E71                       		nop	
00075498 4E71                       		nop	
0007549A 4E71                       		nop	
0007549C 4E71                       		nop	
0007549E 60CA                       		bra.s	sub_71B4C
000754A0                            ; ===========================================================================
000754A0                            
000754A0                            loc_71B82:
000754A0 4DF9 00FF F000             		lea	($FFF000).l,a6
000754A6 422E 000E                  		clr.b	$E(a6)
000754AA 4A2E 0003                  		tst.b	3(a6)		; is music paused?
000754AE 6600 0000                  		bne.w	loc_71E50	; if yes, branch
000754B2 532E 0001                  		subq.b	#1,1(a6)
000754B6 6600                       		bne.s	loc_71B9E
000754B8 4EBA 0000                  		jsr	sub_7260C(pc)
000754BC                            
000754BC                            loc_71B9E:
000754BC 102E 0004                  		move.b	4(a6),d0
000754C0 6700                       		beq.s	loc_71BA8
000754C2 4EBA 0000                  		jsr	sub_72504(pc)
000754C6                            
000754C6                            loc_71BA8:
000754C6 4A2E 0024                  		tst.b	$24(a6)
000754CA 6700                       		beq.s	loc_71BB2
000754CC 4EBA 0000                  		jsr	sub_7267C(pc)
000754D0                            
000754D0                            loc_71BB2:
000754D0 4A6E 000A                  		tst.w	$A(a6)		; is music or sound being played?
000754D4 6700                       		beq.s	loc_71BBC	; if not, branch
000754D6 4EBA 0000                  		jsr	Sound_Play(pc)
000754DA                            
000754DA                            loc_71BBC:
000754DA 0C2E 0080 0009             		cmpi.b	#$80,9(a6)
000754E0 6700                       		beq.s	loc_71BC8
000754E2 4EBA 0000                  		jsr	Sound_ChkValue(pc)
000754E6                            
000754E6                            loc_71BC8:
000754E6 4BEE 0040                  		lea	$40(a6),a5
000754EA 4A15                       		tst.b	(a5)
000754EC 6A00                       		bpl.s	loc_71BD4
000754EE 4EBA 0000                  		jsr	sub_71C4E(pc)
000754F2                            
000754F2                            loc_71BD4:
000754F2 422E 0008                  		clr.b	8(a6)
000754F6 7E05                       		moveq	#5,d7
000754F8                            
000754F8                            loc_71BDA:
000754F8 DAFC 0030                  		adda.w	#$30,a5
000754FC 4A15                       		tst.b	(a5)
000754FE 6A00                       		bpl.s	loc_71BE6
00075500 4EBA 0000                  		jsr	sub_71CCA(pc)
00075504                            
00075504                            loc_71BE6:
00075504 51CF FFF2                  		dbf	d7,loc_71BDA
00075508                            
00075508 7E02                       		moveq	#2,d7
0007550A                            
0007550A                            loc_71BEC:
0007550A DAFC 0030                  		adda.w	#$30,a5
0007550E 4A15                       		tst.b	(a5)
00075510 6A00                       		bpl.s	loc_71BF8
00075512 4EBA 0000                  		jsr	sub_72850(pc)
00075516                            
00075516                            loc_71BF8:
00075516 51CF FFF2                  		dbf	d7,loc_71BEC
0007551A                            
0007551A 1D7C 0080 000E             		move.b	#$80,$E(a6)
00075520 7E02                       		moveq	#2,d7
00075522                            
00075522                            loc_71C04:
00075522 DAFC 0030                  		adda.w	#$30,a5
00075526 4A15                       		tst.b	(a5)
00075528 6A00                       		bpl.s	loc_71C10
0007552A 4EBA 0000                  		jsr	sub_71CCA(pc)
0007552E                            
0007552E                            loc_71C10:
0007552E 51CF FFF2                  		dbf	d7,loc_71C04
00075532                            
00075532 7E02                       		moveq	#2,d7
00075534                            
00075534                            loc_71C16:
00075534 DAFC 0030                  		adda.w	#$30,a5
00075538 4A15                       		tst.b	(a5)
0007553A 6A00                       		bpl.s	loc_71C22
0007553C 4EBA 0000                  		jsr	sub_72850(pc)
00075540                            
00075540                            loc_71C22:
00075540 51CF FFF2                  		dbf	d7,loc_71C16
00075544 1D7C 0040 000E             		move.b	#$40,$E(a6)
0007554A DAFC 0030                  		adda.w	#$30,a5
0007554E 4A15                       		tst.b	(a5)
00075550 6A00                       		bpl.s	loc_71C38
00075552 4EBA 0000                  		jsr	sub_71CCA(pc)
00075556                            
00075556                            loc_71C38:
00075556 DAFC 0030                  		adda.w	#$30,a5
0007555A 4A15                       		tst.b	(a5)
0007555C 6A00                       		bpl.s	loc_71C44
0007555E 4EBA 0000                  		jsr	sub_72850(pc)
00075562                            
00075562                            loc_71C44:
00075562 33FC 0000 00A1 1100        		move.w	#0,($A11100).l	; start	the Z80
0007556A 4E75                       		rts	
0007556C                            ; End of function sub_71B4C
0007556C                            
0007556C                            
0007556C                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0007556C                            
0007556C                            
0007556C                            sub_71C4E:				; XREF: sub_71B4C
0007556C 532D 000E                  		subq.b	#1,$E(a5)
00075570 6600                       		bne.s	locret_71CAA
00075572 1D7C 0080 0008             		move.b	#$80,8(a6)
00075578 286D 0004                  		movea.l	4(a5),a4
0007557C                            
0007557C                            loc_71C5E:
0007557C 7A00                       		moveq	#0,d5
0007557E 1A1C                       		move.b	(a4)+,d5
00075580 0C05 00E0                  		cmpi.b	#-$20,d5
00075584 6500                       		bcs.s	loc_71C6E
00075586 4EBA 0000                  		jsr	sub_72A5A(pc)
0007558A 60F0                       		bra.s	loc_71C5E
0007558C                            ; ===========================================================================
0007558C                            
0007558C                            loc_71C6E:
0007558C 4A05                       		tst.b	d5
0007558E 6A00                       		bpl.s	loc_71C84
00075590 1B45 0010                  		move.b	d5,$10(a5)
00075594 1A1C                       		move.b	(a4)+,d5
00075596 6A00                       		bpl.s	loc_71C84
00075598 534C                       		subq.w	#1,a4
0007559A 1B6D 000F 000E             		move.b	$F(a5),$E(a5)
000755A0 6000                       		bra.s	loc_71C88
000755A2                            ; ===========================================================================
000755A2                            
000755A2                            loc_71C84:
000755A2 4EBA 0000                  		jsr	sub_71D40(pc)
000755A6                            
000755A6                            loc_71C88:
000755A6 2B4C 0004                  		move.l	a4,4(a5)
000755AA 0815 0002                  		btst	#2,(a5)
000755AE 6600                       		bne.s	locret_71CAA
000755B0 7000                       		moveq	#0,d0
000755B2 102D 0010                  		move.b	$10(a5),d0
000755B6 0C00 0080                  		cmpi.b	#$80,d0
000755BA 6700                       		beq.s	locret_71CAA
000755BC 0800 0003                  		btst	#3,d0
000755C0 6600                       		bne.s	loc_71CAC
000755C2 13C0 00A0 1FFF             		move.b	d0,($A01FFF).l
000755C8                            
000755C8                            locret_71CAA:
000755C8 4E75                       		rts	
000755CA                            ; ===========================================================================
000755CA                            
000755CA                            loc_71CAC:
000755CA 0400 0088                  		subi.b	#$88,d0
000755CE 103B 0000                  		move.b	byte_71CC4(pc,d0.w),d0
000755D2 13C0 00A0 00EA             		move.b	d0,($A000EA).l
000755D8 13FC 0083 00A0 1FFF        		move.b	#$83,($A01FFF).l
000755E0 4E75                       		rts	
000755E2                            ; End of function sub_71C4E
000755E2                            
000755E2                            ; ===========================================================================
000755E2 1215 1C1D FFFF             byte_71CC4:	dc.b $12, $15, $1C, $1D, $FF, $FF
000755E8                            
000755E8                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000755E8                            
000755E8                            
000755E8                            sub_71CCA:				; XREF: sub_71B4C
000755E8 532D 000E                  		subq.b	#1,$E(a5)
000755EC 6600                       		bne.s	loc_71CE0
000755EE 0895 0004                  		bclr	#4,(a5)
000755F2 4EBA 0000                  		jsr	sub_71CEC(pc)
000755F6 4EBA 0000                  		jsr	sub_71E18(pc)
000755FA 6000 0000                  		bra.w	loc_726E2
000755FE                            ; ===========================================================================
000755FE                            
000755FE                            loc_71CE0:
000755FE 4EBA 0000                  		jsr	sub_71D9E(pc)
00075602 4EBA 0000                  		jsr	sub_71DC6(pc)
00075606 6000 0000                  		bra.w	loc_71E24
0007560A                            ; End of function sub_71CCA
0007560A                            
0007560A                            
0007560A                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0007560A                            
0007560A                            
0007560A                            sub_71CEC:				; XREF: sub_71CCA
0007560A 286D 0004                  		movea.l	4(a5),a4
0007560E 0895 0001                  		bclr	#1,(a5)
00075612                            
00075612                            loc_71CF4:
00075612 7A00                       		moveq	#0,d5
00075614 1A1C                       		move.b	(a4)+,d5
00075616 0C05 00E0                  		cmpi.b	#-$20,d5
0007561A 6500                       		bcs.s	loc_71D04
0007561C 4EBA 0000                  		jsr	sub_72A5A(pc)
00075620 60F0                       		bra.s	loc_71CF4
00075622                            ; ===========================================================================
00075622                            
00075622                            loc_71D04:
00075622 4EBA 0000                  		jsr	sub_726FE(pc)
00075626 4A05                       		tst.b	d5
00075628 6A00                       		bpl.s	loc_71D1A
0007562A 4EBA 0000                  		jsr	sub_71D22(pc)
0007562E 1A1C                       		move.b	(a4)+,d5
00075630 6A00                       		bpl.s	loc_71D1A
00075632 534C                       		subq.w	#1,a4
00075634 6000 0000                  		bra.w	sub_71D60
00075638                            ; ===========================================================================
00075638                            
00075638                            loc_71D1A:
00075638 4EBA 0000                  		jsr	sub_71D40(pc)
0007563C 6000 0000                  		bra.w	sub_71D60
00075640                            ; End of function sub_71CEC
00075640                            
00075640                            
00075640                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00075640                            
00075640                            
00075640                            sub_71D22:				; XREF: sub_71CEC
00075640 0405 0080                  		subi.b	#$80,d5
00075644 6700                       		beq.s	loc_71D58
00075646 DA2D 0008                  		add.b	8(a5),d5
0007564A 0245 007F                  		andi.w	#$7F,d5
0007564E E34D                       		lsl.w	#1,d5
00075650 41FA 0000                  		lea	word_72790(pc),a0
00075654 3C30 5000                  		move.w	(a0,d5.w),d6
00075658 3B46 0010                  		move.w	d6,$10(a5)
0007565C 4E75                       		rts	
0007565E                            ; End of function sub_71D22
0007565E                            
0007565E                            
0007565E                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0007565E                            
0007565E                            
0007565E                            sub_71D40:				; XREF: sub_71C4E; sub_71CEC; sub_72878
0007565E 1005                       		move.b	d5,d0
00075660 122D 0002                  		move.b	2(a5),d1
00075664                            
00075664                            loc_71D46:
00075664 5301                       		subq.b	#1,d1
00075666 6700                       		beq.s	loc_71D4E
00075668 D005                       		add.b	d5,d0
0007566A 60F8                       		bra.s	loc_71D46
0007566C                            ; ===========================================================================
0007566C                            
0007566C                            loc_71D4E:
0007566C 1B40 000F                  		move.b	d0,$F(a5)
00075670 1B40 000E                  		move.b	d0,$E(a5)
00075674 4E75                       		rts	
00075676                            ; End of function sub_71D40
00075676                            
00075676                            ; ===========================================================================
00075676                            
00075676                            loc_71D58:				; XREF: sub_71D22
00075676 08D5 0001                  		bset	#1,(a5)
0007567A 426D 0010                  		clr.w	$10(a5)
0007567E                            
0007567E                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0007567E                            
0007567E                            
0007567E                            sub_71D60:				; XREF: sub_71CEC; sub_72878; sub_728AC
0007567E 2B4C 0004                  		move.l	a4,4(a5)
00075682 1B6D 000F 000E             		move.b	$F(a5),$E(a5)
00075688 0815 0004                  		btst	#4,(a5)
0007568C 6600                       		bne.s	locret_71D9C
0007568E 1B6D 0013 0012             		move.b	$13(a5),$12(a5)
00075694 422D 000C                  		clr.b	$C(a5)
00075698 0815 0003                  		btst	#3,(a5)
0007569C 6700                       		beq.s	locret_71D9C
0007569E 206D 0014                  		movea.l	$14(a5),a0
000756A2 1B58 0018                  		move.b	(a0)+,$18(a5)
000756A6 1B58 0019                  		move.b	(a0)+,$19(a5)
000756AA 1B58 001A                  		move.b	(a0)+,$1A(a5)
000756AE 1018                       		move.b	(a0)+,d0
000756B0 E208                       		lsr.b	#1,d0
000756B2 1B40 001B                  		move.b	d0,$1B(a5)
000756B6 426D 001C                  		clr.w	$1C(a5)
000756BA                            
000756BA                            locret_71D9C:
000756BA 4E75                       		rts	
000756BC                            ; End of function sub_71D60
000756BC                            
000756BC                            
000756BC                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000756BC                            
000756BC                            
000756BC                            sub_71D9E:				; XREF: sub_71CCA; sub_72850
000756BC 4A2D 0012                  		tst.b	$12(a5)
000756C0 6700                       		beq.s	locret_71DC4
000756C2 532D 0012                  		subq.b	#1,$12(a5)
000756C6 6600                       		bne.s	locret_71DC4
000756C8 08D5 0001                  		bset	#1,(a5)
000756CC 4A2D 0001                  		tst.b	1(a5)
000756D0 6B00 0000                  		bmi.w	loc_71DBE
000756D4 4EBA 0000                  		jsr	sub_726FE(pc)
000756D8 584F                       		addq.w	#4,sp
000756DA 4E75                       		rts	
000756DC                            ; ===========================================================================
000756DC                            
000756DC                            loc_71DBE:
000756DC 4EBA 0000                  		jsr	sub_729A0(pc)
000756E0 584F                       		addq.w	#4,sp
000756E2                            
000756E2                            locret_71DC4:
000756E2 4E75                       		rts	
000756E4                            ; End of function sub_71D9E
000756E4                            
000756E4                            
000756E4                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000756E4                            
000756E4                            
000756E4                            sub_71DC6:				; XREF: sub_71CCA; sub_72850
000756E4 584F                       		addq.w	#4,sp
000756E6 0815 0003                  		btst	#3,(a5)
000756EA 6700                       		beq.s	locret_71E16
000756EC 4A2D 0018                  		tst.b	$18(a5)
000756F0 6700                       		beq.s	loc_71DDA
000756F2 532D 0018                  		subq.b	#1,$18(a5)
000756F6 4E75                       		rts	
000756F8                            ; ===========================================================================
000756F8                            
000756F8                            loc_71DDA:
000756F8 532D 0019                  		subq.b	#1,$19(a5)
000756FC 6700                       		beq.s	loc_71DE2
000756FE 4E75                       		rts	
00075700                            ; ===========================================================================
00075700                            
00075700                            loc_71DE2:
00075700 206D 0014                  		movea.l	$14(a5),a0
00075704 1B68 0001 0019             		move.b	1(a0),$19(a5)
0007570A 4A2D 001B                  		tst.b	$1B(a5)
0007570E 6600                       		bne.s	loc_71DFE
00075710 1B68 0003 001B             		move.b	3(a0),$1B(a5)
00075716 442D 001A                  		neg.b	$1A(a5)
0007571A 4E75                       		rts	
0007571C                            ; ===========================================================================
0007571C                            
0007571C                            loc_71DFE:
0007571C 532D 001B                  		subq.b	#1,$1B(a5)
00075720 1C2D 001A                  		move.b	$1A(a5),d6
00075724 4886                       		ext.w	d6
00075726 DC6D 001C                  		add.w	$1C(a5),d6
0007572A 3B46 001C                  		move.w	d6,$1C(a5)
0007572E DC6D 0010                  		add.w	$10(a5),d6
00075732 594F                       		subq.w	#4,sp
00075734                            
00075734                            locret_71E16:
00075734 4E75                       		rts	
00075736                            ; End of function sub_71DC6
00075736                            
00075736                            
00075736                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00075736                            
00075736                            
00075736                            sub_71E18:				; XREF: sub_71CCA
00075736 0815 0001                  		btst	#1,(a5)
0007573A 6600                       		bne.s	locret_71E48
0007573C 3C2D 0010                  		move.w	$10(a5),d6
00075740 6700                       		beq.s	loc_71E4A
00075742                            
00075742                            loc_71E24:				; XREF: sub_71CCA
00075742 102D 001E                  		move.b	$1E(a5),d0
00075746 4880                       		ext.w	d0
00075748 DC40                       		add.w	d0,d6
0007574A 0815 0002                  		btst	#2,(a5)
0007574E 6600                       		bne.s	locret_71E48
00075750 3206                       		move.w	d6,d1
00075752 E049                       		lsr.w	#8,d1
00075754 103C 00A4                  		move.b	#-$5C,d0
00075758 4EBA 0000                  		jsr	sub_72722(pc)
0007575C 1206                       		move.b	d6,d1
0007575E 103C 00A0                  		move.b	#-$60,d0
00075762 4EBA 0000                  		jsr	sub_72722(pc)
00075766                            
00075766                            locret_71E48:
00075766 4E75                       		rts	
00075768                            ; ===========================================================================
00075768                            
00075768                            loc_71E4A:
00075768 08D5 0001                  		bset	#1,(a5)
0007576C 4E75                       		rts	
0007576E                            ; End of function sub_71E18
0007576E                            
0007576E                            ; ===========================================================================
0007576E                            
0007576E                            loc_71E50:				; XREF: sub_71B4C
0007576E 6B00                       		bmi.s	loc_71E94
00075770 0C2E 0002 0003             		cmpi.b	#2,3(a6)
00075776 6700 0000                  		beq.w	loc_71EFE
0007577A 1D7C 0002 0003             		move.b	#2,3(a6)
00075780 7602                       		moveq	#2,d3
00075782 103C 00B4                  		move.b	#-$4C,d0
00075786 7200                       		moveq	#0,d1
00075788                            
00075788                            loc_71E6A:
00075788 4EBA 0000                  		jsr	sub_7272E(pc)
0007578C 4EBA 0000                  		jsr	sub_72764(pc)
00075790 5200                       		addq.b	#1,d0
00075792 51CB FFF4                  		dbf	d3,loc_71E6A
00075796                            
00075796 7602                       		moveq	#2,d3
00075798 7028                       		moveq	#$28,d0
0007579A                            
0007579A                            loc_71E7C:
0007579A 1203                       		move.b	d3,d1
0007579C 4EBA 0000                  		jsr	sub_7272E(pc)
000757A0 5801                       		addq.b	#4,d1
000757A2 4EBA 0000                  		jsr	sub_7272E(pc)
000757A6 51CB FFF2                  		dbf	d3,loc_71E7C
000757AA                            
000757AA 4EBA 0000                  		jsr	sub_729B6(pc)
000757AE 6000 FDB2                  		bra.w	loc_71C44
000757B2                            ; ===========================================================================
000757B2                            
000757B2                            loc_71E94:				; XREF: loc_71E50
000757B2 422E 0003                  		clr.b	3(a6)
000757B6 7630                       		moveq	#$30,d3
000757B8 4BEE 0040                  		lea	$40(a6),a5
000757BC 7806                       		moveq	#6,d4
000757BE                            
000757BE                            loc_71EA0:
000757BE 0815 0007                  		btst	#7,(a5)
000757C2 6700                       		beq.s	loc_71EB8
000757C4 0815 0002                  		btst	#2,(a5)
000757C8 6600                       		bne.s	loc_71EB8
000757CA 103C 00B4                  		move.b	#-$4C,d0
000757CE 122D 000A                  		move.b	$A(a5),d1
000757D2 4EBA 0000                  		jsr	sub_72722(pc)
000757D6                            
000757D6                            loc_71EB8:
000757D6 DAC3                       		adda.w	d3,a5
000757D8 51CC FFE4                  		dbf	d4,loc_71EA0
000757DC                            
000757DC 4BEE 0220                  		lea	$220(a6),a5
000757E0 7802                       		moveq	#2,d4
000757E2                            
000757E2                            loc_71EC4:
000757E2 0815 0007                  		btst	#7,(a5)
000757E6 6700                       		beq.s	loc_71EDC
000757E8 0815 0002                  		btst	#2,(a5)
000757EC 6600                       		bne.s	loc_71EDC
000757EE 103C 00B4                  		move.b	#-$4C,d0
000757F2 122D 000A                  		move.b	$A(a5),d1
000757F6 4EBA 0000                  		jsr	sub_72722(pc)
000757FA                            
000757FA                            loc_71EDC:
000757FA DAC3                       		adda.w	d3,a5
000757FC 51CC FFE4                  		dbf	d4,loc_71EC4
00075800                            
00075800 4BEE 0340                  		lea	$340(a6),a5
00075804 0815 0007                  		btst	#7,(a5)
00075808 6700                       		beq.s	loc_71EFE
0007580A 0815 0002                  		btst	#2,(a5)
0007580E 6600                       		bne.s	loc_71EFE
00075810 103C 00B4                  		move.b	#-$4C,d0
00075814 122D 000A                  		move.b	$A(a5),d1
00075818 4EBA 0000                  		jsr	sub_72722(pc)
0007581C                            
0007581C                            loc_71EFE:
0007581C 6000 FD44                  		bra.w	loc_71C44
00075820                            
00075820                            ; ---------------------------------------------------------------------------
00075820                            ; Subroutine to	play a sound or	music track
00075820                            ; ---------------------------------------------------------------------------
00075820                            
00075820                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00075820                            
00075820                            
00075820                            Sound_Play:				; XREF: sub_71B4C
00075820 2079 0007 527E             		movea.l	(Go_SoundTypes).l,a0
00075826 43EE 000A                  		lea	$A(a6),a1	; load music track number
0007582A 1616                       		move.b	0(a6),d3
0007582C 7802                       		moveq	#2,d4
0007582E                            
0007582E                            loc_71F12:
0007582E 1011                       		move.b	(a1),d0		; move track number to d0
00075830 1200                       		move.b	d0,d1
00075832 4219                       		clr.b	(a1)+
00075834 0400 0081                  		subi.b	#$81,d0
00075838 6500                       		bcs.s	loc_71F3E
0007583A 0C2E 0080 0009             		cmpi.b	#$80,9(a6)
00075840 6700                       		beq.s	loc_71F2C
00075842 1D41 000A                  		move.b	d1,$A(a6)
00075846 6000                       		bra.s	loc_71F3E
00075848                            ; ===========================================================================
00075848                            
00075848                            loc_71F2C:
00075848 0240 007F                  		andi.w	#$7F,d0
0007584C 1430 0000                  		move.b	(a0,d0.w),d2
00075850 B403                       		cmp.b	d3,d2
00075852 6500                       		bcs.s	loc_71F3E
00075854 1602                       		move.b	d2,d3
00075856 1D41 0009                  		move.b	d1,9(a6)	; set music flag
0007585A                            
0007585A                            loc_71F3E:
0007585A 51CC FFD2                  		dbf	d4,loc_71F12
0007585E                            
0007585E 4A03                       		tst.b	d3
00075860 6B00                       		bmi.s	locret_71F4A
00075862 1C83                       		move.b	d3,0(a6)
00075864                            
00075864                            locret_71F4A:
00075864 4E75                       		rts	
00075866                            ; End of function Sound_Play
00075866                            
00075866                            
00075866                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00075866                            
00075866                            
00075866                            Sound_ChkValue:				; XREF: sub_71B4C
00075866 7E00                       		moveq	#0,d7
00075868 1E2E 0009                  		move.b	9(a6),d7
0007586C 6700 0000                  		beq.w	Sound_E4
00075870 6A00                       		bpl.s	locret_71F8C
00075872 1D7C 0080 0009             		move.b	#$80,9(a6)	; reset	music flag
00075878 0C07 009F                  		cmpi.b	#$9F,d7
0007587C 6300 0000                  		bls.w	Sound_81to9F	; music	$81-$9F
00075880 0C07 00A0                  		cmpi.b	#$A0,d7
00075884 6500 0000                  		bcs.w	locret_71F8C
00075888 0C07 00CF                  		cmpi.b	#$CF,d7
0007588C 6300 0000                  		bls.w	Sound_A0toCF	; sound	$A0-$CF
00075890 0C07 00D0                  		cmpi.b	#$D0,d7
00075894 6500 0000                  		bcs.w	locret_71F8C
00075898 0C07 00E0                  		cmpi.b	#$E0,d7
0007589C 6500 0000                  		bcs.w	Sound_D0toDF	; sound	$D0-$DF
000758A0 0C07 00E5                  		cmpi.b	#$E5,d7
000758A4 6300                       		bls.s	Sound_E0toE5	; sound	$E0-$E5
000758A6                            
000758A6                            locret_71F8C:
000758A6 4E75                       		rts	
000758A8                            ; ===========================================================================
000758A8                            
000758A8                            Sound_E0toE5				; XREF: Sound_ChkValue
000758A8 0407 00E0                  		subi.b	#$E0,d7
000758AC E54F                       		lsl.w	#2,d7
000758AE 4EFB 7000                  		jmp	Sound_ExIndex(pc,d7.w)
000758B2                            ; ===========================================================================
000758B2                            
000758B2                            Sound_ExIndex:
000758B2 6000 0000                  		bra.w	Sound_E0
000758B6                            ; ===========================================================================
000758B6 6000 0000                  		bra.w	Sound_E1
000758BA                            ; ===========================================================================
000758BA 6000 0000                  		bra.w	Sound_E2
000758BE                            ; ===========================================================================
000758BE 6000 0000                  		bra.w	Sound_E3
000758C2                            ; ===========================================================================
000758C2 6000 0000                  		bra.w	Sound_E4
000758C6                            ; ===========================================================================
000758C6 6000 0000                  		bra.w	Sound_E5
000758CA                            ; ===========================================================================
000758CA                            ; ---------------------------------------------------------------------------
000758CA                            ; Play "Say-gaa" PCM sound
000758CA                            ; ---------------------------------------------------------------------------
000758CA                            
000758CA                            Sound_E1:				  
000758CA 45F9 0000 0000             		lea	(SegaPCM).l,a2			; Load the SEGA PCM sample into a2. It's important that we use a2 since a0 and a1 are going to be used up ahead when reading the joypad ports 
000758D0 263C 0000 0000             		move.l	#(SegaPCM_End-SegaPCM),d3			; Load the size of the SEGA PCM sample into d3 
000758D6 13FC 002A 00A0 4000        		move.b	#$2A,($A04000).l		; $A04000 = $2A -> Write to DAC channel	  
000758DE                            PlayPCM_Loop:	  
000758DE 13DA 00A0 4001             		move.b	(a2)+,($A04001).l		; Write the PCM data (contained in a2) to $A04001 (YM2612 register D0) 
000758E4 303C 0014                  		move.w	#$14,d0				; Write the pitch ($14 in this case) to d0 
000758E8 51C8 FFFE                  		dbf	d0,*				; Decrement d0; jump to itself if not 0. (for pitch control, avoids playing the sample too fast)  
000758EC 5383                       		sub.l	#1,d3				; Subtract 1 from the PCM sample size 
000758EE 6700                       		beq.s	return_PlayPCM			; If d3 = 0, we finished playing the PCM sample, so stop playing, leave this loop, and unfreeze the 68K 
000758F0 41F8 F604                  		lea	($FFFFF604).w,a0		; address where JoyPad states are written 
000758F4 43F9 00A1 0003             		lea	($A10003).l,a1			; address where JoyPad states are read from 
000758FA 4EB8 1418                  		jsr	(Joypad_Read).w			; Read only the first joypad port. It's important that we do NOT do the two ports, we don't have the cycles for that 
000758FE 0838 0007 F604             		btst	#7,($FFFFF604).w		; Check for Start button 
00075904 6600                       		bne.s	return_PlayPCM			; If start is pressed, stop playing, leave this loop, and unfreeze the 68K 
00075906 60D6                       		bra.s	PlayPCM_Loop			; Otherwise, continue playing PCM sample 
00075908                            return_PlayPCM: 
00075908 584F                       		addq.w	#4,sp 
0007590A 4E75                       		rts
0007590C                            		
0007590C                            ; ---------------------------------------------------------------------------
0007590C                            ; Play you are an idiot pcm sound
0007590C                            ; since the sfx already crashes the game forever load it here :V
0007590C                            ; ---------------------------------------------------------------------------
0007590C                            
0007590C                            Sound_E5: 
0007590C 4EB8 14E8                  		jsr	ClearScreen
00075910                            		;control port on a5
00075910 2ABC 9401 9340             		move.l	#$94000000+((($280>>1)&$FF00)<<8)+$9300+(($280>>1)&$FF),(a5)
00075916 2ABC 96FC 9500             		move.l	#$96000000+((($FFFFF800>>1)&$FF00)<<8)+$9500+(($FFFFF800>>1)&$FF),(a5)
0007591C 3ABC 977F                  		move.w	#$9700+(((($FFFFF800>>1)&$FF0000)>>16)&$7F),(a5)
00075920 3ABC 7800                  		move.w	#$4000+($F800&$3FFF),(a5)
00075924 3ABC 0083                  		move.w	#$80+(($F800&$C000)>>14),(a5) ; clear sprites
00075928                            		
00075928 3ABC 8700                  		move.w	#$8700,(a5) ; first colour is bg now
0007592C                            		
0007592C 2ABC 4000 0000             		move.l	#$40000000,(a5)
00075932 41F9 0002 41CC             		lea	(Nem_Idiot).l,a0 ;	load idiot sprites
00075938 4EB8 1664                  		jsr	NemDec
0007593C 43F9 00FF 0000             		lea	($FF0000).l,a1
00075942 41F9 0002 416E             		lea	(Eni_Idiot).l,a0 ; load mappings for IDIOT
00075948 303C 0000                  		move.w	#0,d0
0007594C 4EB8 1942                  		jsr	EniDec
00075950 43F9 00FF 0000             		lea	($FF0000).l,a1
00075956 203C 4304 0003             		move.l	#$43040003,d0
0007595C 7223                       		moveq	#35,d1
0007595E 740D                       		moveq	#13,d2
00075960 4EB8 1644                  		jsr	ShowVDPGraphics
00075964 7014                       		moveq	#20,d0
00075966 4EB8 2302                  		jsr	PalLoad2	; load pallet
0007596A                            		
0007596A                            Sound_E5_StartPCM:
0007596A 45F9 0000 0000             		lea	(IdiotPCM).l,a2			; Load the idiot PCM sample into a2. It's important that we use a2 since a0 and a1 are going to be used up ahead when reading the joypad ports 
00075970 263C 0000 0000             		move.l	#(IdiotPCM_End-IdiotPCM),d3			; Load the size of the idiot PCM sample into d3 
00075976 13FC 002A 00A0 4000        		move.b	#$2A,($A04000).l		; $A04000 = $2A -> Write to DAC channel	  
0007597E                            PlayPCM_LoopE5:	  
0007597E                            
0007597E 13DA 00A0 4001             		move.b	(a2)+,($A04001).l		; Write the PCM data (contained in a2) to $A04001 (YM2612 register D0) 
00075984                            		
00075984 5278 FE24                  		addq.w	#1,($FFFFFE24).w
00075988                            		
00075988 1038 FE24                  		move.b	($FFFFFE24).w,d0
0007598C 0200 000F                  		andi.b	#$F,d0
00075990 6700                       		beq.s	SfxE5SwapPalette
00075992                            		
00075992 303C 0056                  		move.w	#$58-2,d0				; Write the pitch ($58 in this case) to d0  (-28 from the check before)
00075996 51C8 FFFE                  		dbf	d0,*				; Decrement d0; jump to itself if not 0. (for pitch control, avoids playing the sample too fast)   (14 cycles)
0007599A 5383                       		sub.l	#1,d3				; Subtract 1 from the PCM sample size 
0007599C 67CC                       		beq.s	Sound_E5_StartPCM			; If d3 = 0, we finished playing the PCM sample, DONT STOP
0007599E 60DE                       		bra.s	PlayPCM_LoopE5
000759A0                            		
000759A0                            SfxE5SwapPalette:
000759A0                            		
000759A0 2ABC 9400 9308             		move.l	#$94000000+((($10>>1)&$FF00)<<8)+$9300+(($10>>1)&$FF),(a5) ; len
000759A6                            		
000759A6                            		
000759A6 0838 0004 FE24             		btst	#4,($FFFFFE24).w
000759AC 6700                       		beq.s	@not_black
000759AE 2ABC 96FD 9598             		move.l	#$96000000+((($FFFFFB30>>1)&$FF00)<<8)+$9500+(($FFFFFB30>>1)&$FF),(a5)	; source	
000759B4 6000                       		bra.s	@merge
000759B6                            	@not_black:
000759B6 2ABC 96FD 9590             		move.l	#$96000000+((($FFFFFB20>>1)&$FF00)<<8)+$9500+(($FFFFFB20>>1)&$FF),(a5)	; source
000759BC                            	@merge:
000759BC 3ABC 977F                  		move.w	#$9700+(((($FFFFFB20>>1)&$FF0000)>>16)&$7F),(a5) ; source
000759C0 3ABC C000                  		move.w	#$C000+(0&$3FFF),(a5) ; dest
000759C4 31FC 0080 F640             		move.w	#$80+((0&$C000)>>14),($FFFFF640).w ;dest
000759CA 3AB8 F640                  		move.w	($FFFFF640).w,(a5)
000759CE                            		
000759CE 303C 004D                  		move.w	#$58-11,d0				; attempt at removing the little jumps
000759D2 51C8 FFFE                  		dbf	d0,*				; (14 cycles)
000759D6 60A6                       		bra.s	PlayPCM_LoopE5
000759D8                            		
000759D8                            ; ===========================================================================
000759D8                            ; ---------------------------------------------------------------------------
000759D8                            ; Play music track $81-$9F
000759D8                            ; ---------------------------------------------------------------------------
000759D8                            
000759D8                            Sound_81to9F:				; XREF: Sound_ChkValue
000759D8 0C07 0088                  		cmpi.b	#$88,d7		; is "extra life" music	played?
000759DC 6600                       		bne.s	loc_72024	; if not, branch
000759DE 4A2E 0027                  		tst.b	$27(a6)
000759E2 6600 0000                  		bne.w	loc_721B6
000759E6 4BEE 0040                  		lea	$40(a6),a5
000759EA 7009                       		moveq	#9,d0
000759EC                            
000759EC                            loc_71FE6:
000759EC 0895 0002                  		bclr	#2,(a5)
000759F0 DAFC 0030                  		adda.w	#$30,a5
000759F4 51C8 FFF6                  		dbf	d0,loc_71FE6
000759F8                            
000759F8 4BEE 0220                  		lea	$220(a6),a5
000759FC 7005                       		moveq	#5,d0
000759FE                            
000759FE                            loc_71FF8:
000759FE 0895 0007                  		bclr	#7,(a5)
00075A02 DAFC 0030                  		adda.w	#$30,a5
00075A06 51C8 FFF6                  		dbf	d0,loc_71FF8
00075A0A 4216                       		clr.b	0(a6)
00075A0C 204E                       		movea.l	a6,a0
00075A0E 43EE 03A0                  		lea	$3A0(a6),a1
00075A12 303C 0087                  		move.w	#$87,d0
00075A16                            
00075A16                            loc_72012:
00075A16 22D8                       		move.l	(a0)+,(a1)+
00075A18 51C8 FFFC                  		dbf	d0,loc_72012
00075A1C                            
00075A1C 1D7C 0080 0027             		move.b	#$80,$27(a6)
00075A22 4216                       		clr.b	0(a6)
00075A24 6000                       		bra.s	loc_7202C
00075A26                            ; ===========================================================================
00075A26                            
00075A26                            loc_72024:
00075A26 422E 0027                  		clr.b	$27(a6)
00075A2A 422E 0026                  		clr.b	$26(a6)
00075A2E                            
00075A2E                            loc_7202C:
00075A2E 4EBA 0000                  		jsr	sub_725CA(pc)
00075A32 2879 0007 528E             		movea.l	(off_719A0).l,a4
00075A38 0407 0081                  		subi.b	#$81,d7
00075A3C 1D74 7000 0029             		move.b	(a4,d7.w),$29(a6)
00075A42 2879 0007 5286             		movea.l	(Go_MusicIndex).l,a4
00075A48 E54F                       		lsl.w	#2,d7
00075A4A 2874 7000                  		movea.l	(a4,d7.w),a4
00075A4E 7000                       		moveq	#0,d0
00075A50 3014                       		move.w	(a4),d0
00075A52 D08C                       		add.l	a4,d0
00075A54 2D40 0018                  		move.l	d0,$18(a6)
00075A58 102C 0005                  		move.b	5(a4),d0
00075A5C 1D40 0028                  		move.b	d0,$28(a6)
00075A60 4A2E 002A                  		tst.b	$2A(a6)
00075A64 6700                       		beq.s	loc_72068
00075A66 102E 0029                  		move.b	$29(a6),d0
00075A6A                            
00075A6A                            loc_72068:
00075A6A 1D40 0002                  		move.b	d0,2(a6)
00075A6E 1D40 0001                  		move.b	d0,1(a6)
00075A72 7200                       		moveq	#0,d1
00075A74 264C                       		movea.l	a4,a3
00075A76 5C4C                       		addq.w	#6,a4
00075A78 7E00                       		moveq	#0,d7
00075A7A 1E2B 0002                  		move.b	2(a3),d7
00075A7E 6700 0000                  		beq.w	loc_72114
00075A82 5307                       		subq.b	#1,d7
00075A84 123C 00C0                  		move.b	#-$40,d1
00075A88 182B 0004                  		move.b	4(a3),d4
00075A8C 7C30                       		moveq	#$30,d6
00075A8E 1A3C 0001                  		move.b	#1,d5
00075A92 43EE 0040                  		lea	$40(a6),a1
00075A96 45FA 0000                  		lea	byte_721BA(pc),a2
00075A9A                            
00075A9A                            loc_72098:
00075A9A 08D1 0007                  		bset	#7,(a1)
00075A9E 135A 0001                  		move.b	(a2)+,1(a1)
00075AA2 1344 0002                  		move.b	d4,2(a1)
00075AA6 1346 000D                  		move.b	d6,$D(a1)
00075AAA 1341 000A                  		move.b	d1,$A(a1)
00075AAE 1345 000E                  		move.b	d5,$E(a1)
00075AB2 7000                       		moveq	#0,d0
00075AB4 301C                       		move.w	(a4)+,d0
00075AB6 D08B                       		add.l	a3,d0
00075AB8 2340 0004                  		move.l	d0,4(a1)
00075ABC 335C 0008                  		move.w	(a4)+,8(a1)
00075AC0 D2C6                       		adda.w	d6,a1
00075AC2 51CF FFD6                  		dbf	d7,loc_72098
00075AC6 0C2B 0007 0002             		cmpi.b	#7,2(a3)
00075ACC 6600                       		bne.s	loc_720D8
00075ACE 702B                       		moveq	#$2B,d0
00075AD0 7200                       		moveq	#0,d1
00075AD2 4EBA 0000                  		jsr	sub_7272E(pc)
00075AD6 6000 0000                  		bra.w	loc_72114
00075ADA                            ; ===========================================================================
00075ADA                            
00075ADA                            loc_720D8:
00075ADA 7028                       		moveq	#$28,d0
00075ADC 7206                       		moveq	#6,d1
00075ADE 4EBA 0000                  		jsr	sub_7272E(pc)
00075AE2 103C 0042                  		move.b	#$42,d0
00075AE6 727F                       		moveq	#$7F,d1
00075AE8 4EBA 0000                  		jsr	sub_72764(pc)
00075AEC 103C 004A                  		move.b	#$4A,d0
00075AF0 727F                       		moveq	#$7F,d1
00075AF2 4EBA 0000                  		jsr	sub_72764(pc)
00075AF6 103C 0046                  		move.b	#$46,d0
00075AFA 727F                       		moveq	#$7F,d1
00075AFC 4EBA 0000                  		jsr	sub_72764(pc)
00075B00 103C 004E                  		move.b	#$4E,d0
00075B04 727F                       		moveq	#$7F,d1
00075B06 4EBA 0000                  		jsr	sub_72764(pc)
00075B0A 103C 00B6                  		move.b	#-$4A,d0
00075B0E 123C 00C0                  		move.b	#-$40,d1
00075B12 4EBA 0000                  		jsr	sub_72764(pc)
00075B16                            
00075B16                            loc_72114:
00075B16 7E00                       		moveq	#0,d7
00075B18 1E2B 0003                  		move.b	3(a3),d7
00075B1C 6700                       		beq.s	loc_72154
00075B1E 5307                       		subq.b	#1,d7
00075B20 43EE 0190                  		lea	$190(a6),a1
00075B24 45FA 0000                  		lea	byte_721C2(pc),a2
00075B28                            
00075B28                            loc_72126:
00075B28 08D1 0007                  		bset	#7,(a1)
00075B2C 135A 0001                  		move.b	(a2)+,1(a1)
00075B30 1344 0002                  		move.b	d4,2(a1)
00075B34 1346 000D                  		move.b	d6,$D(a1)
00075B38 1345 000E                  		move.b	d5,$E(a1)
00075B3C 7000                       		moveq	#0,d0
00075B3E 301C                       		move.w	(a4)+,d0
00075B40 D08B                       		add.l	a3,d0
00075B42 2340 0004                  		move.l	d0,4(a1)
00075B46 335C 0008                  		move.w	(a4)+,8(a1)
00075B4A 101C                       		move.b	(a4)+,d0
00075B4C 135C 000B                  		move.b	(a4)+,$B(a1)
00075B50 D2C6                       		adda.w	d6,a1
00075B52 51CF FFD4                  		dbf	d7,loc_72126
00075B56                            
00075B56                            loc_72154:
00075B56 43EE 0220                  		lea	$220(a6),a1
00075B5A 7E05                       		moveq	#5,d7
00075B5C                            
00075B5C                            loc_7215A:
00075B5C 4A11                       		tst.b	(a1)
00075B5E 6A00 0000                  		bpl.w	loc_7217C
00075B62 7000                       		moveq	#0,d0
00075B64 1029 0001                  		move.b	1(a1),d0
00075B68 6B00                       		bmi.s	loc_7216E
00075B6A 5500                       		subq.b	#2,d0
00075B6C E508                       		lsl.b	#2,d0
00075B6E 6000                       		bra.s	loc_72170
00075B70                            ; ===========================================================================
00075B70                            
00075B70                            loc_7216E:
00075B70 E608                       		lsr.b	#3,d0
00075B72                            
00075B72                            loc_72170:
00075B72 41FA 0000                  		lea	dword_722CC(pc),a0
00075B76 2070 0000                  		movea.l	(a0,d0.w),a0
00075B7A 08D0 0002                  		bset	#2,(a0)
00075B7E                            
00075B7E                            loc_7217C:
00075B7E D2C6                       		adda.w	d6,a1
00075B80 51CF FFDA                  		dbf	d7,loc_7215A
00075B84                            
00075B84 4A6E 0340                  		tst.w	$340(a6)
00075B88 6A00                       		bpl.s	loc_7218E
00075B8A 08EE 0002 0100             		bset	#2,$100(a6)
00075B90                            
00075B90                            loc_7218E:
00075B90 4A6E 0370                  		tst.w	$370(a6)
00075B94 6A00                       		bpl.s	loc_7219A
00075B96 08EE 0002 01F0             		bset	#2,$1F0(a6)
00075B9C                            
00075B9C                            loc_7219A:
00075B9C 4BEE 0070                  		lea	$70(a6),a5
00075BA0 7805                       		moveq	#5,d4
00075BA2                            
00075BA2                            loc_721A0:
00075BA2 4EBA 0000                  		jsr	sub_726FE(pc)
00075BA6 DAC6                       		adda.w	d6,a5
00075BA8 51CC FFF8                  		dbf	d4,loc_721A0
00075BAC 7802                       		moveq	#2,d4
00075BAE                            
00075BAE                            loc_721AC:
00075BAE 4EBA 0000                  		jsr	sub_729A0(pc)
00075BB2 DAC6                       		adda.w	d6,a5
00075BB4 51CC FFF8                  		dbf	d4,loc_721AC
00075BB8                            
00075BB8                            loc_721B6:
00075BB8 584F                       		addq.w	#4,sp
00075BBA 4E75                       		rts	
00075BBC                            ; ===========================================================================
00075BBC 0600 0102 0405 0600        byte_721BA:	dc.b 6,	0, 1, 2, 4, 5, 6, 0
00075BC4                            		even
00075BC4 80A0 C000                  byte_721C2:	dc.b $80, $A0, $C0, 0
00075BC8                            		even
00075BC8                            ; ===========================================================================
00075BC8                            ; ---------------------------------------------------------------------------
00075BC8                            ; Play normal sound effect
00075BC8                            ; ---------------------------------------------------------------------------
00075BC8                            
00075BC8                            Sound_A0toCF:				; XREF: Sound_ChkValue
00075BC8 4A2E 0027                  		tst.b	$27(a6)
00075BCC 6600 0000                  		bne.w	loc_722C6
00075BD0 4A2E 0004                  		tst.b	4(a6)
00075BD4 6600 0000                  		bne.w	loc_722C6
00075BD8 4A2E 0024                  		tst.b	$24(a6)
00075BDC 6600 0000                  		bne.w	loc_722C6
00075BE0 0C07 00B5                  		cmpi.b	#$B5,d7		; is ring sound	effect played?
00075BE4 6600                       		bne.s	Sound_notB5	; if not, branch
00075BE6 4A2E 002B                  		tst.b	$2B(a6)
00075BEA 6600                       		bne.s	loc_721EE
00075BEC 1E3C 00CE                  		move.b	#$CE,d7		; play ring sound in left speaker
00075BF0                            
00075BF0                            loc_721EE:
00075BF0 086E 0000 002B             		bchg	#0,$2B(a6)	; change speaker
00075BF6                            
00075BF6                            Sound_notB5:
00075BF6 0C07 00A7                  		cmpi.b	#$A7,d7		; is "pushing" sound played?
00075BFA 6600                       		bne.s	Sound_notA7	; if not, branch
00075BFC 4A2E 002C                  		tst.b	$2C(a6)
00075C00 6600 0000                  		bne.w	locret_722C4
00075C04 1D7C 0080 002C             		move.b	#$80,$2C(a6)
00075C0A                            
00075C0A                            Sound_notA7:
00075C0A 2079 0007 528A             		movea.l	(Go_SoundIndex).l,a0
00075C10 0407 00A0                  		subi.b	#$A0,d7
00075C14 E54F                       		lsl.w	#2,d7
00075C16 2670 7000                  		movea.l	(a0,d7.w),a3
00075C1A 224B                       		movea.l	a3,a1
00075C1C 7200                       		moveq	#0,d1
00075C1E 3219                       		move.w	(a1)+,d1
00075C20 D28B                       		add.l	a3,d1
00075C22 1A19                       		move.b	(a1)+,d5
00075C24 1E19                       		move.b	(a1)+,d7
00075C26 5307                       		subq.b	#1,d7
00075C28 7C30                       		moveq	#$30,d6
00075C2A                            
00075C2A                            loc_72228:
00075C2A 7600                       		moveq	#0,d3
00075C2C 1629 0001                  		move.b	1(a1),d3
00075C30 1803                       		move.b	d3,d4
00075C32 6B00                       		bmi.s	loc_72244
00075C34 5543                       		subq.w	#2,d3
00075C36 E54B                       		lsl.w	#2,d3
00075C38 4BFA 0000                  		lea	dword_722CC(pc),a5
00075C3C 2A75 3000                  		movea.l	(a5,d3.w),a5
00075C40 08D5 0002                  		bset	#2,(a5)
00075C44 6000                       		bra.s	loc_7226E
00075C46                            ; ===========================================================================
00075C46                            
00075C46                            loc_72244:
00075C46 E64B                       		lsr.w	#3,d3
00075C48 4BFA 0000                  		lea	dword_722CC(pc),a5
00075C4C 2A75 3000                  		movea.l	(a5,d3.w),a5
00075C50 08D5 0002                  		bset	#2,(a5)
00075C54 0C04 00C0                  		cmpi.b	#$C0,d4
00075C58 6600                       		bne.s	loc_7226E
00075C5A 1004                       		move.b	d4,d0
00075C5C 0000 001F                  		ori.b	#$1F,d0
00075C60 13C0 00C0 0011             		move.b	d0,($C00011).l
00075C66 0840 0005                  		bchg	#5,d0
00075C6A 13C0 00C0 0011             		move.b	d0,($C00011).l
00075C70                            
00075C70                            loc_7226E:
00075C70 2A7B 3000                  		movea.l	dword_722EC(pc,d3.w),a5
00075C74 244D                       		movea.l	a5,a2
00075C76 700B                       		moveq	#$B,d0
00075C78                            
00075C78                            loc_72276:
00075C78 429A                       		clr.l	(a2)+
00075C7A 51C8 FFFC                  		dbf	d0,loc_72276
00075C7E                            
00075C7E 3A99                       		move.w	(a1)+,(a5)
00075C80 1B45 0002                  		move.b	d5,2(a5)
00075C84 7000                       		moveq	#0,d0
00075C86 3019                       		move.w	(a1)+,d0
00075C88 D08B                       		add.l	a3,d0
00075C8A 2B40 0004                  		move.l	d0,4(a5)
00075C8E 3B59 0008                  		move.w	(a1)+,8(a5)
00075C92 1B7C 0001 000E             		move.b	#1,$E(a5)
00075C98 1B46 000D                  		move.b	d6,$D(a5)
00075C9C 4A04                       		tst.b	d4
00075C9E 6B00                       		bmi.s	loc_722A8
00075CA0 1B7C 00C0 000A             		move.b	#$C0,$A(a5)
00075CA6 2B41 0020                  		move.l	d1,$20(a5)
00075CAA                            
00075CAA                            loc_722A8:
00075CAA 51CF FF7E                  		dbf	d7,loc_72228
00075CAE                            
00075CAE 4A2E 0250                  		tst.b	$250(a6)
00075CB2 6A00                       		bpl.s	loc_722B8
00075CB4 08EE 0002 0340             		bset	#2,$340(a6)
00075CBA                            
00075CBA                            loc_722B8:
00075CBA 4A2E 0310                  		tst.b	$310(a6)
00075CBE 6A00                       		bpl.s	locret_722C4
00075CC0 08EE 0002 0370             		bset	#2,$370(a6)
00075CC6                            
00075CC6                            locret_722C4:
00075CC6 4E75                       		rts	
00075CC8                            ; ===========================================================================
00075CC8                            
00075CC8                            loc_722C6:
00075CC8 4216                       		clr.b	0(a6)
00075CCA 4E75                       		rts	
00075CCC                            ; ===========================================================================
00075CCC 00FF F0D0                  dword_722CC:	dc.l $FFF0D0
00075CD0 0000 0000                  		dc.l 0
00075CD4 00FF F100                  		dc.l $FFF100
00075CD8 00FF F130                  		dc.l $FFF130
00075CDC 00FF F190                  		dc.l $FFF190
00075CE0 00FF F1C0                  		dc.l $FFF1C0
00075CE4 00FF F1F0                  		dc.l $FFF1F0
00075CE8 00FF F1F0                  		dc.l $FFF1F0
00075CEC 00FF F220                  dword_722EC:	dc.l $FFF220
00075CF0 0000 0000                  		dc.l 0
00075CF4 00FF F250                  		dc.l $FFF250
00075CF8 00FF F280                  		dc.l $FFF280
00075CFC 00FF F2B0                  		dc.l $FFF2B0
00075D00 00FF F2E0                  		dc.l $FFF2E0
00075D04 00FF F310                  		dc.l $FFF310
00075D08 00FF F310                  		dc.l $FFF310
00075D0C                            ; ===========================================================================
00075D0C                            ; ---------------------------------------------------------------------------
00075D0C                            ; Play GHZ waterfall sound
00075D0C                            ; ---------------------------------------------------------------------------
00075D0C                            
00075D0C                            Sound_D0toDF:				; XREF: Sound_ChkValue
00075D0C 4A2E 0027                  		tst.b	$27(a6)
00075D10 6600 0000                  		bne.w	locret_723C6
00075D14 4A2E 0004                  		tst.b	4(a6)
00075D18 6600 0000                  		bne.w	locret_723C6
00075D1C 4A2E 0024                  		tst.b	$24(a6)
00075D20 6600 0000                  		bne.w	locret_723C6
00075D24 2079 0007 5282             		movea.l	(Go_SoundD0).l,a0
00075D2A 0407 00D0                  		subi.b	#$D0,d7
00075D2E E54F                       		lsl.w	#2,d7
00075D30 2670 7000                  		movea.l	(a0,d7.w),a3
00075D34 224B                       		movea.l	a3,a1
00075D36 7000                       		moveq	#0,d0
00075D38 3019                       		move.w	(a1)+,d0
00075D3A D08B                       		add.l	a3,d0
00075D3C 2D40 0020                  		move.l	d0,$20(a6)
00075D40 1A19                       		move.b	(a1)+,d5
00075D42 1E19                       		move.b	(a1)+,d7
00075D44 5307                       		subq.b	#1,d7
00075D46 7C30                       		moveq	#$30,d6
00075D48                            
00075D48                            loc_72348:
00075D48 1829 0001                  		move.b	1(a1),d4
00075D4C 6B00                       		bmi.s	loc_7235A
00075D4E 08EE 0002 0100             		bset	#2,$100(a6)
00075D54 4BEE 0340                  		lea	$340(a6),a5
00075D58 6000                       		bra.s	loc_72364
00075D5A                            ; ===========================================================================
00075D5A                            
00075D5A                            loc_7235A:
00075D5A 08EE 0002 01F0             		bset	#2,$1F0(a6)
00075D60 4BEE 0370                  		lea	$370(a6),a5
00075D64                            
00075D64                            loc_72364:
00075D64 244D                       		movea.l	a5,a2
00075D66 700B                       		moveq	#$B,d0
00075D68                            
00075D68                            loc_72368:
00075D68 429A                       		clr.l	(a2)+
00075D6A 51C8 FFFC                  		dbf	d0,loc_72368
00075D6E                            
00075D6E 3A99                       		move.w	(a1)+,(a5)
00075D70 1B45 0002                  		move.b	d5,2(a5)
00075D74 7000                       		moveq	#0,d0
00075D76 3019                       		move.w	(a1)+,d0
00075D78 D08B                       		add.l	a3,d0
00075D7A 2B40 0004                  		move.l	d0,4(a5)
00075D7E 3B59 0008                  		move.w	(a1)+,8(a5)
00075D82 1B7C 0001 000E             		move.b	#1,$E(a5)
00075D88 1B46 000D                  		move.b	d6,$D(a5)
00075D8C 4A04                       		tst.b	d4
00075D8E 6B00                       		bmi.s	loc_72396
00075D90 1B7C 00C0 000A             		move.b	#$C0,$A(a5)
00075D96                            
00075D96                            loc_72396:
00075D96 51CF FFB0                  		dbf	d7,loc_72348
00075D9A                            
00075D9A 4A2E 0250                  		tst.b	$250(a6)
00075D9E 6A00                       		bpl.s	loc_723A6
00075DA0 08EE 0002 0340             		bset	#2,$340(a6)
00075DA6                            
00075DA6                            loc_723A6:
00075DA6 4A2E 0310                  		tst.b	$310(a6)
00075DAA 6A00                       		bpl.s	locret_723C6
00075DAC 08EE 0002 0370             		bset	#2,$370(a6)
00075DB2 0004 001F                  		ori.b	#$1F,d4
00075DB6 13C4 00C0 0011             		move.b	d4,($C00011).l
00075DBC 0844 0005                  		bchg	#5,d4
00075DC0 13C4 00C0 0011             		move.b	d4,($C00011).l
00075DC6                            
00075DC6                            locret_723C6:
00075DC6 4E75                       		rts	
00075DC8                            ; End of function Sound_ChkValue
00075DC8                            
00075DC8                            ; ===========================================================================
00075DC8 00FF F100                  		dc.l $FFF100
00075DCC 00FF F1F0                  		dc.l $FFF1F0
00075DD0 00FF F250                  		dc.l $FFF250
00075DD4 00FF F310                  		dc.l $FFF310
00075DD8 00FF F340                  		dc.l $FFF340
00075DDC 00FF F370                  		dc.l $FFF370
00075DE0                            
00075DE0                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00075DE0                            
00075DE0                            
00075DE0                            Snd_FadeOut1:				; XREF: Sound_E0
00075DE0 4216                       		clr.b	0(a6)
00075DE2 4BEE 0220                  		lea	$220(a6),a5
00075DE6 7E05                       		moveq	#5,d7
00075DE8                            
00075DE8                            loc_723EA:
00075DE8 4A15                       		tst.b	(a5)
00075DEA 6A00 0000                  		bpl.w	loc_72472
00075DEE 0895 0007                  		bclr	#7,(a5)
00075DF2 7600                       		moveq	#0,d3
00075DF4 162D 0001                  		move.b	1(a5),d3
00075DF8 6B00                       		bmi.s	loc_7243C
00075DFA 4EBA 0000                  		jsr	sub_726FE(pc)
00075DFE 0C03 0004                  		cmpi.b	#4,d3
00075E02 6600                       		bne.s	loc_72416
00075E04 4A2E 0340                  		tst.b	$340(a6)
00075E08 6A00                       		bpl.s	loc_72416
00075E0A 4BEE 0340                  		lea	$340(a6),a5
00075E0E 226E 0020                  		movea.l	$20(a6),a1
00075E12 6000                       		bra.s	loc_72428
00075E14                            ; ===========================================================================
00075E14                            
00075E14                            loc_72416:
00075E14 5503                       		subq.b	#2,d3
00075E16 E50B                       		lsl.b	#2,d3
00075E18 41FA FEB2                  		lea	dword_722CC(pc),a0
00075E1C 264D                       		movea.l	a5,a3
00075E1E 2A70 3000                  		movea.l	(a0,d3.w),a5
00075E22 226E 0018                  		movea.l	$18(a6),a1
00075E26                            
00075E26                            loc_72428:
00075E26 0895 0002                  		bclr	#2,(a5)
00075E2A 08D5 0001                  		bset	#1,(a5)
00075E2E 102D 000B                  		move.b	$B(a5),d0
00075E32 4EBA 0000                  		jsr	sub_72C4E(pc)
00075E36 2A4B                       		movea.l	a3,a5
00075E38 6000                       		bra.s	loc_72472
00075E3A                            ; ===========================================================================
00075E3A                            
00075E3A                            loc_7243C:
00075E3A 4EBA 0000                  		jsr	sub_729A0(pc)
00075E3E 41EE 0370                  		lea	$370(a6),a0
00075E42 0C03 00E0                  		cmpi.b	#$E0,d3
00075E46 6700                       		beq.s	loc_7245A
00075E48 0C03 00C0                  		cmpi.b	#$C0,d3
00075E4C 6700                       		beq.s	loc_7245A
00075E4E E60B                       		lsr.b	#3,d3
00075E50 41FA FE7A                  		lea	dword_722CC(pc),a0
00075E54 2070 3000                  		movea.l	(a0,d3.w),a0
00075E58                            
00075E58                            loc_7245A:
00075E58 0890 0002                  		bclr	#2,(a0)
00075E5C 08D0 0001                  		bset	#1,(a0)
00075E60 0C28 00E0 0001             		cmpi.b	#$E0,1(a0)
00075E66 6600                       		bne.s	loc_72472
00075E68 13E8 001F 00C0 0011        		move.b	$1F(a0),($C00011).l
00075E70                            
00075E70                            loc_72472:
00075E70 DAFC 0030                  		adda.w	#$30,a5
00075E74 51CF FF72                  		dbf	d7,loc_723EA
00075E78                            
00075E78 4E75                       		rts	
00075E7A                            ; End of function Snd_FadeOut1
00075E7A                            
00075E7A                            
00075E7A                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00075E7A                            
00075E7A                            
00075E7A                            Snd_FadeOut2:				; XREF: Sound_E0
00075E7A 4BEE 0340                  		lea	$340(a6),a5
00075E7E 4A15                       		tst.b	(a5)
00075E80 6A00                       		bpl.s	loc_724AE
00075E82 0895 0007                  		bclr	#7,(a5)
00075E86 0815 0002                  		btst	#2,(a5)
00075E8A 6600                       		bne.s	loc_724AE
00075E8C 4EBA 0000                  		jsr	loc_7270A(pc)
00075E90 4BEE 0100                  		lea	$100(a6),a5
00075E94 0895 0002                  		bclr	#2,(a5)
00075E98 08D5 0001                  		bset	#1,(a5)
00075E9C 4A15                       		tst.b	(a5)
00075E9E 6A00                       		bpl.s	loc_724AE
00075EA0 226E 0018                  		movea.l	$18(a6),a1
00075EA4 102D 000B                  		move.b	$B(a5),d0
00075EA8 4EBA 0000                  		jsr	sub_72C4E(pc)
00075EAC                            
00075EAC                            loc_724AE:
00075EAC 4BEE 0370                  		lea	$370(a6),a5
00075EB0 4A15                       		tst.b	(a5)
00075EB2 6A00                       		bpl.s	locret_724E4
00075EB4 0895 0007                  		bclr	#7,(a5)
00075EB8 0815 0002                  		btst	#2,(a5)
00075EBC 6600                       		bne.s	locret_724E4
00075EBE 4EBA 0000                  		jsr	loc_729A6(pc)
00075EC2 4BEE 01F0                  		lea	$1F0(a6),a5
00075EC6 0895 0002                  		bclr	#2,(a5)
00075ECA 08D5 0001                  		bset	#1,(a5)
00075ECE 4A15                       		tst.b	(a5)
00075ED0 6A00                       		bpl.s	locret_724E4
00075ED2 0C2D 00E0 0001             		cmpi.b	#-$20,1(a5)
00075ED8 6600                       		bne.s	locret_724E4
00075EDA 13ED 001F 00C0 0011        		move.b	$1F(a5),($C00011).l
00075EE2                            
00075EE2                            locret_724E4:
00075EE2 4E75                       		rts	
00075EE4                            ; End of function Snd_FadeOut2
00075EE4                            
00075EE4                            ; ===========================================================================
00075EE4                            ; ---------------------------------------------------------------------------
00075EE4                            ; Fade out music
00075EE4                            ; ---------------------------------------------------------------------------
00075EE4                            
00075EE4                            Sound_E0:				; XREF: Sound_ExIndex
00075EE4 4EBA FEFA                  		jsr	Snd_FadeOut1(pc)
00075EE8 4EBA FF90                  		jsr	Snd_FadeOut2(pc)
00075EEC 1D7C 0003 0006             		move.b	#3,6(a6)
00075EF2 1D7C 0028 0004             		move.b	#$28,4(a6)
00075EF8 422E 0040                  		clr.b	$40(a6)
00075EFC 422E 002A                  		clr.b	$2A(a6)
00075F00 4E75                       		rts	
00075F02                            
00075F02                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00075F02                            
00075F02                            
00075F02                            sub_72504:				; XREF: sub_71B4C
00075F02 102E 0006                  		move.b	6(a6),d0
00075F06 6700                       		beq.s	loc_72510
00075F08 532E 0006                  		subq.b	#1,6(a6)
00075F0C 4E75                       		rts	
00075F0E                            ; ===========================================================================
00075F0E                            
00075F0E                            loc_72510:
00075F0E 532E 0004                  		subq.b	#1,4(a6)
00075F12 6700 0000                  		beq.w	Sound_E4
00075F16 1D7C 0003 0006             		move.b	#3,6(a6)
00075F1C 4BEE 0070                  		lea	$70(a6),a5
00075F20 7E05                       		moveq	#5,d7
00075F22                            
00075F22                            loc_72524:
00075F22 4A15                       		tst.b	(a5)
00075F24 6A00                       		bpl.s	loc_72538
00075F26 522D 0009                  		addq.b	#1,9(a5)
00075F2A 6A00                       		bpl.s	loc_72534
00075F2C 0895 0007                  		bclr	#7,(a5)
00075F30 6000                       		bra.s	loc_72538
00075F32                            ; ===========================================================================
00075F32                            
00075F32                            loc_72534:
00075F32 4EBA 0000                  		jsr	sub_72CB4(pc)
00075F36                            
00075F36                            loc_72538:
00075F36 DAFC 0030                  		adda.w	#$30,a5
00075F3A 51CF FFE6                  		dbf	d7,loc_72524
00075F3E                            
00075F3E 7E02                       		moveq	#2,d7
00075F40                            
00075F40                            loc_72542:
00075F40 4A15                       		tst.b	(a5)
00075F42 6A00                       		bpl.s	loc_72560
00075F44 522D 0009                  		addq.b	#1,9(a5)
00075F48 0C2D 0010 0009             		cmpi.b	#$10,9(a5)
00075F4E 6500                       		bcs.s	loc_72558
00075F50 0895 0007                  		bclr	#7,(a5)
00075F54 6000                       		bra.s	loc_72560
00075F56                            ; ===========================================================================
00075F56                            
00075F56                            loc_72558:
00075F56 1C2D 0009                  		move.b	9(a5),d6
00075F5A 4EBA 0000                  		jsr	sub_7296A(pc)
00075F5E                            
00075F5E                            loc_72560:
00075F5E DAFC 0030                  		adda.w	#$30,a5
00075F62 51CF FFDC                  		dbf	d7,loc_72542
00075F66                            
00075F66 4E75                       		rts	
00075F68                            ; End of function sub_72504
00075F68                            
00075F68                            
00075F68                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00075F68                            
00075F68                            
00075F68                            sub_7256A:				; XREF: Sound_E4; sub_725CA
00075F68 7602                       		moveq	#2,d3
00075F6A 7028                       		moveq	#$28,d0
00075F6C                            
00075F6C                            loc_7256E:
00075F6C 1203                       		move.b	d3,d1
00075F6E 4EBA 0000                  		jsr	sub_7272E(pc)
00075F72 5801                       		addq.b	#4,d1
00075F74 4EBA 0000                  		jsr	sub_7272E(pc)
00075F78 51CB FFF2                  		dbf	d3,loc_7256E
00075F7C                            
00075F7C 7040                       		moveq	#$40,d0
00075F7E 727F                       		moveq	#$7F,d1
00075F80 7802                       		moveq	#2,d4
00075F82                            
00075F82                            loc_72584:
00075F82 7603                       		moveq	#3,d3
00075F84                            
00075F84                            loc_72586:
00075F84 4EBA 0000                  		jsr	sub_7272E(pc)
00075F88 4EBA 0000                  		jsr	sub_72764(pc)
00075F8C 5840                       		addq.w	#4,d0
00075F8E 51CB FFF4                  		dbf	d3,loc_72586
00075F92                            
00075F92 0400 000F                  		subi.b	#$F,d0
00075F96 51CC FFEA                  		dbf	d4,loc_72584
00075F9A                            
00075F9A 4E75                       		rts	
00075F9C                            ; End of function sub_7256A
00075F9C                            
00075F9C                            ; ===========================================================================
00075F9C                            ; ---------------------------------------------------------------------------
00075F9C                            ; Stop music
00075F9C                            ; ---------------------------------------------------------------------------
00075F9C                            
00075F9C                            Sound_E4:				; XREF: Sound_ChkValue; Sound_ExIndex; sub_72504
00075F9C 702B                       		moveq	#$2B,d0
00075F9E 123C 0080                  		move.b	#$80,d1
00075FA2 4EBA 0000                  		jsr	sub_7272E(pc)
00075FA6 7027                       		moveq	#$27,d0
00075FA8 7200                       		moveq	#0,d1
00075FAA 4EBA 0000                  		jsr	sub_7272E(pc)
00075FAE 204E                       		movea.l	a6,a0
00075FB0 303C 00E3                  		move.w	#$E3,d0
00075FB4                            
00075FB4                            loc_725B6:
00075FB4 4298                       		clr.l	(a0)+
00075FB6 51C8 FFFC                  		dbf	d0,loc_725B6
00075FBA                            
00075FBA 1D7C 0080 0009             		move.b	#$80,9(a6)	; set music to $80 (silence)
00075FC0 4EBA FFA6                  		jsr	sub_7256A(pc)
00075FC4 6000 0000                  		bra.w	sub_729B6
00075FC8                            
00075FC8                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00075FC8                            
00075FC8                            
00075FC8                            sub_725CA:				; XREF: Sound_ChkValue
00075FC8 204E                       		movea.l	a6,a0
00075FCA 1216                       		move.b	0(a6),d1
00075FCC 142E 0027                  		move.b	$27(a6),d2
00075FD0 162E 002A                  		move.b	$2A(a6),d3
00075FD4 182E 0026                  		move.b	$26(a6),d4
00075FD8 3A2E 000A                  		move.w	$A(a6),d5
00075FDC 303C 0087                  		move.w	#$87,d0
00075FE0                            
00075FE0                            loc_725E4:
00075FE0 4298                       		clr.l	(a0)+
00075FE2 51C8 FFFC                  		dbf	d0,loc_725E4
00075FE6                            
00075FE6 1C81                       		move.b	d1,0(a6)
00075FE8 1D42 0027                  		move.b	d2,$27(a6)
00075FEC 1D43 002A                  		move.b	d3,$2A(a6)
00075FF0 1D44 0026                  		move.b	d4,$26(a6)
00075FF4 3D45 000A                  		move.w	d5,$A(a6)
00075FF8 1D7C 0080 0009             		move.b	#$80,9(a6)
00075FFE 4EBA FF68                  		jsr	sub_7256A(pc)
00076002 6000 0000                  		bra.w	sub_729B6
00076006                            ; End of function sub_725CA
00076006                            
00076006                            
00076006                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00076006                            
00076006                            
00076006                            sub_7260C:				; XREF: sub_71B4C
00076006 1D6E 0002 0001             		move.b	2(a6),1(a6)
0007600C 41EE 004E                  		lea	$4E(a6),a0
00076010 7030                       		moveq	#$30,d0
00076012 7209                       		moveq	#9,d1
00076014                            
00076014                            loc_7261A:
00076014 5210                       		addq.b	#1,(a0)
00076016 D0C0                       		adda.w	d0,a0
00076018 51C9 FFFA                  		dbf	d1,loc_7261A
0007601C                            
0007601C 4E75                       		rts	
0007601E                            ; End of function sub_7260C
0007601E                            
0007601E                            ; ===========================================================================
0007601E                            ; ---------------------------------------------------------------------------
0007601E                            ; Speed	up music
0007601E                            ; ---------------------------------------------------------------------------
0007601E                            
0007601E                            Sound_E2:				; XREF: Sound_ExIndex
0007601E 4A2E 0027                  		tst.b	$27(a6)
00076022 6600                       		bne.s	loc_7263E
00076024 1D6E 0029 0002             		move.b	$29(a6),2(a6)
0007602A 1D6E 0029 0001             		move.b	$29(a6),1(a6)
00076030 1D7C 0080 002A             		move.b	#$80,$2A(a6)
00076036 4E75                       		rts	
00076038                            ; ===========================================================================
00076038                            
00076038                            loc_7263E:
00076038 1D6E 03C9 03A2             		move.b	$3C9(a6),$3A2(a6)
0007603E 1D6E 03C9 03A1             		move.b	$3C9(a6),$3A1(a6)
00076044 1D7C 0080 03CA             		move.b	#$80,$3CA(a6)
0007604A 4E75                       		rts	
0007604C                            ; ===========================================================================
0007604C                            ; ---------------------------------------------------------------------------
0007604C                            ; Change music back to normal speed
0007604C                            ; ---------------------------------------------------------------------------
0007604C                            
0007604C                            Sound_E3:				; XREF: Sound_ExIndex
0007604C 4A2E 0027                  		tst.b	$27(a6)
00076050 6600                       		bne.s	loc_7266A
00076052 1D6E 0028 0002             		move.b	$28(a6),2(a6)
00076058 1D6E 0028 0001             		move.b	$28(a6),1(a6)
0007605E 422E 002A                  		clr.b	$2A(a6)
00076062 4E75                       		rts	
00076064                            ; ===========================================================================
00076064                            
00076064                            loc_7266A:
00076064 1D6E 03C8 03A2             		move.b	$3C8(a6),$3A2(a6)
0007606A 1D6E 03C8 03A1             		move.b	$3C8(a6),$3A1(a6)
00076070 422E 03CA                  		clr.b	$3CA(a6)
00076074 4E75                       		rts	
00076076                            
00076076                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00076076                            
00076076                            
00076076                            sub_7267C:				; XREF: sub_71B4C
00076076 4A2E 0025                  		tst.b	$25(a6)
0007607A 6700                       		beq.s	loc_72688
0007607C 532E 0025                  		subq.b	#1,$25(a6)
00076080 4E75                       		rts	
00076082                            ; ===========================================================================
00076082                            
00076082                            loc_72688:
00076082 4A2E 0026                  		tst.b	$26(a6)
00076086 6700                       		beq.s	loc_726D6
00076088 532E 0026                  		subq.b	#1,$26(a6)
0007608C 1D7C 0002 0025             		move.b	#2,$25(a6)
00076092 4BEE 0070                  		lea	$70(a6),a5
00076096 7E05                       		moveq	#5,d7
00076098                            
00076098                            loc_7269E:
00076098 4A15                       		tst.b	(a5)
0007609A 6A00                       		bpl.s	loc_726AA
0007609C 532D 0009                  		subq.b	#1,9(a5)
000760A0 4EBA 0000                  		jsr	sub_72CB4(pc)
000760A4                            
000760A4                            loc_726AA:
000760A4 DAFC 0030                  		adda.w	#$30,a5
000760A8 51CF FFEE                  		dbf	d7,loc_7269E
000760AC 7E02                       		moveq	#2,d7
000760AE                            
000760AE                            loc_726B4:
000760AE 4A15                       		tst.b	(a5)
000760B0 6A00                       		bpl.s	loc_726CC
000760B2 532D 0009                  		subq.b	#1,9(a5)
000760B6 1C2D 0009                  		move.b	9(a5),d6
000760BA 0C06 0010                  		cmpi.b	#$10,d6
000760BE 6500                       		bcs.s	loc_726C8
000760C0 7C0F                       		moveq	#$F,d6
000760C2                            
000760C2                            loc_726C8:
000760C2 4EBA 0000                  		jsr	sub_7296A(pc)
000760C6                            
000760C6                            loc_726CC:
000760C6 DAFC 0030                  		adda.w	#$30,a5
000760CA 51CF FFE2                  		dbf	d7,loc_726B4
000760CE 4E75                       		rts	
000760D0                            ; ===========================================================================
000760D0                            
000760D0                            loc_726D6:
000760D0 08AE 0002 0040             		bclr	#2,$40(a6)
000760D6 422E 0024                  		clr.b	$24(a6)
000760DA 4E75                       		rts	
000760DC                            ; End of function sub_7267C
000760DC                            
000760DC                            ; ===========================================================================
000760DC                            
000760DC                            loc_726E2:				; XREF: sub_71CCA
000760DC 0815 0001                  		btst	#1,(a5)
000760E0 6600                       		bne.s	locret_726FC
000760E2 0815 0002                  		btst	#2,(a5)
000760E6 6600                       		bne.s	locret_726FC
000760E8 7028                       		moveq	#$28,d0
000760EA 122D 0001                  		move.b	1(a5),d1
000760EE 0001 00F0                  		ori.b	#-$10,d1
000760F2 6000 0000                  		bra.w	sub_7272E
000760F6                            ; ===========================================================================
000760F6                            
000760F6                            locret_726FC:
000760F6 4E75                       		rts	
000760F8                            
000760F8                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000760F8                            
000760F8                            
000760F8                            sub_726FE:				; XREF: sub_71CEC; sub_71D9E; Sound_ChkValue; Snd_FadeOut1
000760F8 0815 0004                  		btst	#4,(a5)
000760FC 6600                       		bne.s	locret_72714
000760FE 0815 0002                  		btst	#2,(a5)
00076102 6600                       		bne.s	locret_72714
00076104                            
00076104                            loc_7270A:				; XREF: Snd_FadeOut2
00076104 7028                       		moveq	#$28,d0
00076106 122D 0001                  		move.b	1(a5),d1
0007610A 6000 0000                  		bra.w	sub_7272E
0007610E                            ; ===========================================================================
0007610E                            
0007610E                            locret_72714:
0007610E 4E75                       		rts	
00076110                            ; End of function sub_726FE
00076110                            
00076110                            ; ===========================================================================
00076110                            
00076110                            loc_72716:				; XREF: sub_72A5A
00076110 0815 0002                  		btst	#2,(a5)
00076114 6600                       		bne.s	locret_72720
00076116 6000 0000                  		bra.w	sub_72722
0007611A                            ; ===========================================================================
0007611A                            
0007611A                            locret_72720:
0007611A 4E75                       		rts	
0007611C                            
0007611C                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0007611C                            
0007611C                            
0007611C                            sub_72722:				; XREF: sub_71E18; sub_72C4E; sub_72CB4
0007611C 082D 0002 0001             		btst	#2,1(a5)
00076122 6600                       		bne.s	loc_7275A
00076124 D02D 0001                  		add.b	1(a5),d0
00076128                            ; End of function sub_72722
00076128                            
00076128                            
00076128                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00076128                            
00076128                            
00076128                            sub_7272E:				; XREF: loc_71E6A
00076128 1439 00A0 4000             		move.b	($A04000).l,d2
0007612E 0802 0007                  		btst	#7,d2
00076132 66F4                       		bne.s	sub_7272E
00076134 13C0 00A0 4000             		move.b	d0,($A04000).l
0007613A 4E71                       		nop	
0007613C 4E71                       		nop	
0007613E 4E71                       		nop	
00076140                            
00076140                            loc_72746:
00076140 1439 00A0 4000             		move.b	($A04000).l,d2
00076146 0802 0007                  		btst	#7,d2
0007614A 66F4                       		bne.s	loc_72746
0007614C                            
0007614C 13C1 00A0 4001             		move.b	d1,($A04001).l
00076152 4E75                       		rts	
00076154                            ; End of function sub_7272E
00076154                            
00076154                            ; ===========================================================================
00076154                            
00076154                            loc_7275A:				; XREF: sub_72722
00076154 142D 0001                  		move.b	1(a5),d2
00076158 0882 0002                  		bclr	#2,d2
0007615C D002                       		add.b	d2,d0
0007615E                            
0007615E                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0007615E                            
0007615E                            
0007615E                            sub_72764:				; XREF: loc_71E6A; Sound_ChkValue; sub_7256A; sub_72764
0007615E 1439 00A0 4000             		move.b	($A04000).l,d2
00076164 0802 0007                  		btst	#7,d2
00076168 66F4                       		bne.s	sub_72764
0007616A 13C0 00A0 4002             		move.b	d0,($A04002).l
00076170 4E71                       		nop	
00076172 4E71                       		nop	
00076174 4E71                       		nop	
00076176                            
00076176                            loc_7277C:
00076176 1439 00A0 4000             		move.b	($A04000).l,d2
0007617C 0802 0007                  		btst	#7,d2
00076180 66F4                       		bne.s	loc_7277C
00076182                            
00076182 13C1 00A0 4003             		move.b	d1,($A04003).l
00076188 4E75                       		rts	
0007618A                            ; End of function sub_72764
0007618A                            
0007618A                            ; ===========================================================================
0007618A 025E 0284 02AB 02D3 02FE+  word_72790:	dc.w $25E, $284, $2AB, $2D3, $2FE, $32D, $35C, $38F, $3C5
0007619C 03FF 043C 047C 0A5E 0A84+  		dc.w $3FF, $43C, $47C, $A5E, $A84, $AAB, $AD3, $AFE, $B2D
000761AE 0B5C 0B8F 0BC5 0BFF 0C3C+  		dc.w $B5C, $B8F, $BC5, $BFF, $C3C, $C7C, $125E,	$1284
000761BE 12AB 12D3 12FE 132D 135C+  		dc.w $12AB, $12D3, $12FE, $132D, $135C,	$138F, $13C5, $13FF
000761CE 143C 147C 1A5E 1A84 1AAB+  		dc.w $143C, $147C, $1A5E, $1A84, $1AAB,	$1AD3, $1AFE, $1B2D
000761DE 1B5C 1B8F 1BC5 1BFF 1C3C+  		dc.w $1B5C, $1B8F, $1BC5, $1BFF, $1C3C,	$1C7C, $225E, $2284
000761EE 22AB 22D3 22FE 232D 235C+  		dc.w $22AB, $22D3, $22FE, $232D, $235C,	$238F, $23C5, $23FF
000761FE 243C 247C 2A5E 2A84 2AAB+  		dc.w $243C, $247C, $2A5E, $2A84, $2AAB,	$2AD3, $2AFE, $2B2D
0007620E 2B5C 2B8F 2BC5 2BFF 2C3C+  		dc.w $2B5C, $2B8F, $2BC5, $2BFF, $2C3C,	$2C7C, $325E, $3284
0007621E 32AB 32D3 32FE 332D 335C+  		dc.w $32AB, $32D3, $32FE, $332D, $335C,	$338F, $33C5, $33FF
0007622E 343C 347C 3A5E 3A84 3AAB+  		dc.w $343C, $347C, $3A5E, $3A84, $3AAB,	$3AD3, $3AFE, $3B2D
0007623E 3B5C 3B8F 3BC5 3BFF 3C3C+  		dc.w $3B5C, $3B8F, $3BC5, $3BFF, $3C3C,	$3C7C
0007624A                            
0007624A                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0007624A                            
0007624A                            
0007624A                            sub_72850:				; XREF: sub_71B4C
0007624A 532D 000E                  		subq.b	#1,$E(a5)
0007624E 6600                       		bne.s	loc_72866
00076250 0895 0004                  		bclr	#4,(a5)
00076254 4EBA 0000                  		jsr	sub_72878(pc)
00076258 4EBA 0000                  		jsr	sub_728DC(pc)
0007625C 6000 0000                  		bra.w	loc_7292E
00076260                            ; ===========================================================================
00076260                            
00076260                            loc_72866:
00076260 4EBA F45A                  		jsr	sub_71D9E(pc)
00076264 4EBA 0000                  		jsr	sub_72926(pc)
00076268 4EBA F47A                  		jsr	sub_71DC6(pc)
0007626C 4EBA 0000                  		jsr	sub_728E2(pc)
00076270 4E75                       		rts	
00076272                            ; End of function sub_72850
00076272                            
00076272                            
00076272                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00076272                            
00076272                            
00076272                            sub_72878:				; XREF: sub_72850
00076272 0895 0001                  		bclr	#1,(a5)
00076276 286D 0004                  		movea.l	4(a5),a4
0007627A                            
0007627A                            loc_72880:
0007627A 7A00                       		moveq	#0,d5
0007627C 1A1C                       		move.b	(a4)+,d5
0007627E 0C05 00E0                  		cmpi.b	#$E0,d5
00076282 6500                       		bcs.s	loc_72890
00076284 4EBA 0000                  		jsr	sub_72A5A(pc)
00076288 60F0                       		bra.s	loc_72880
0007628A                            ; ===========================================================================
0007628A                            
0007628A                            loc_72890:
0007628A 4A05                       		tst.b	d5
0007628C 6A00                       		bpl.s	loc_728A4
0007628E 4EBA 0000                  		jsr	sub_728AC(pc)
00076292 1A1C                       		move.b	(a4)+,d5
00076294 4A05                       		tst.b	d5
00076296 6A00                       		bpl.s	loc_728A4
00076298 534C                       		subq.w	#1,a4
0007629A 6000 F3E2                  		bra.w	sub_71D60
0007629E                            ; ===========================================================================
0007629E                            
0007629E                            loc_728A4:
0007629E 4EBA F3BE                  		jsr	sub_71D40(pc)
000762A2 6000 F3DA                  		bra.w	sub_71D60
000762A6                            ; End of function sub_72878
000762A6                            
000762A6                            
000762A6                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000762A6                            
000762A6                            
000762A6                            sub_728AC:				; XREF: sub_72878
000762A6 0405 0081                  		subi.b	#$81,d5
000762AA 6500                       		bcs.s	loc_728CA
000762AC DA2D 0008                  		add.b	8(a5),d5
000762B0 0245 007F                  		andi.w	#$7F,d5
000762B4 E34D                       		lsl.w	#1,d5
000762B6 41FA 0000                  		lea	word_729CE(pc),a0
000762BA 3B70 5000 0010             		move.w	(a0,d5.w),$10(a5)
000762C0 6000 F3BC                  		bra.w	sub_71D60
000762C4                            ; ===========================================================================
000762C4                            
000762C4                            loc_728CA:
000762C4 08D5 0001                  		bset	#1,(a5)
000762C8 3B7C FFFF 0010             		move.w	#-1,$10(a5)
000762CE 4EBA F3AE                  		jsr	sub_71D60(pc)
000762D2 6000 0000                  		bra.w	sub_729A0
000762D6                            ; End of function sub_728AC
000762D6                            
000762D6                            
000762D6                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000762D6                            
000762D6                            
000762D6                            sub_728DC:				; XREF: sub_72850
000762D6 3C2D 0010                  		move.w	$10(a5),d6
000762DA 6B00                       		bmi.s	loc_72920
000762DC                            ; End of function sub_728DC
000762DC                            
000762DC                            
000762DC                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000762DC                            
000762DC                            
000762DC                            sub_728E2:				; XREF: sub_72850
000762DC 102D 001E                  		move.b	$1E(a5),d0
000762E0 4880                       		ext.w	d0
000762E2 DC40                       		add.w	d0,d6
000762E4 0815 0002                  		btst	#2,(a5)
000762E8 6600                       		bne.s	locret_7291E
000762EA 0815 0001                  		btst	#1,(a5)
000762EE 6600                       		bne.s	locret_7291E
000762F0 102D 0001                  		move.b	1(a5),d0
000762F4 0C00 00E0                  		cmpi.b	#$E0,d0
000762F8 6600                       		bne.s	loc_72904
000762FA 103C 00C0                  		move.b	#$C0,d0
000762FE                            
000762FE                            loc_72904:
000762FE 3206                       		move.w	d6,d1
00076300 0201 000F                  		andi.b	#$F,d1
00076304 8001                       		or.b	d1,d0
00076306 E84E                       		lsr.w	#4,d6
00076308 0206 003F                  		andi.b	#$3F,d6
0007630C 13C0 00C0 0011             		move.b	d0,($C00011).l
00076312 13C6 00C0 0011             		move.b	d6,($C00011).l
00076318                            
00076318                            locret_7291E:
00076318 4E75                       		rts	
0007631A                            ; End of function sub_728E2
0007631A                            
0007631A                            ; ===========================================================================
0007631A                            
0007631A                            loc_72920:				; XREF: sub_728DC
0007631A 08D5 0001                  		bset	#1,(a5)
0007631E 4E75                       		rts	
00076320                            
00076320                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00076320                            
00076320                            
00076320                            sub_72926:				; XREF: sub_72850
00076320 4A2D 000B                  		tst.b	$B(a5)
00076324 6700 0000                  		beq.w	locret_7298A
00076328                            
00076328                            loc_7292E:				; XREF: sub_72850
00076328 1C2D 0009                  		move.b	9(a5),d6
0007632C 7000                       		moveq	#0,d0
0007632E 102D 000B                  		move.b	$B(a5),d0
00076332 6700                       		beq.s	sub_7296A
00076334 2079 0007 5292             		movea.l	(Go_PSGIndex).l,a0
0007633A 5340                       		subq.w	#1,d0
0007633C E548                       		lsl.w	#2,d0
0007633E 2070 0000                  		movea.l	(a0,d0.w),a0
00076342 102D 000C                  		move.b	$C(a5),d0
00076346 1030 0000                  		move.b	(a0,d0.w),d0
0007634A 522D 000C                  		addq.b	#1,$C(a5)
0007634E 0800 0007                  		btst	#7,d0
00076352 6700                       		beq.s	loc_72960
00076354 0C00 0080                  		cmpi.b	#$80,d0
00076358 6700                       		beq.s	loc_7299A
0007635A                            
0007635A                            loc_72960:
0007635A DC40                       		add.w	d0,d6
0007635C 0C06 0010                  		cmpi.b	#$10,d6
00076360 6500                       		bcs.s	sub_7296A
00076362 7C0F                       		moveq	#$F,d6
00076364                            ; End of function sub_72926
00076364                            
00076364                            
00076364                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00076364                            
00076364                            
00076364                            sub_7296A:				; XREF: sub_72504; sub_7267C; sub_72926
00076364 0815 0001                  		btst	#1,(a5)
00076368 6600                       		bne.s	locret_7298A
0007636A 0815 0002                  		btst	#2,(a5)
0007636E 6600                       		bne.s	locret_7298A
00076370 0815 0004                  		btst	#4,(a5)
00076374 6600                       		bne.s	loc_7298C
00076376                            
00076376                            loc_7297C:
00076376 8C2D 0001                  		or.b	1(a5),d6
0007637A 0606 0010                  		addi.b	#$10,d6
0007637E 13C6 00C0 0011             		move.b	d6,($C00011).l
00076384                            
00076384                            locret_7298A:
00076384 4E75                       		rts	
00076386                            ; ===========================================================================
00076386                            
00076386                            loc_7298C:
00076386 4A2D 0013                  		tst.b	$13(a5)
0007638A 67EA                       		beq.s	loc_7297C
0007638C 4A2D 0012                  		tst.b	$12(a5)
00076390 66E4                       		bne.s	loc_7297C
00076392 4E75                       		rts	
00076394                            ; End of function sub_7296A
00076394                            
00076394                            ; ===========================================================================
00076394                            
00076394                            loc_7299A:				; XREF: sub_72926
00076394 532D 000C                  		subq.b	#1,$C(a5)
00076398 4E75                       		rts	
0007639A                            
0007639A                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0007639A                            
0007639A                            
0007639A                            sub_729A0:				; XREF: sub_71D9E; Sound_ChkValue; Snd_FadeOut1; sub_728AC
0007639A 0815 0002                  		btst	#2,(a5)
0007639E 6600                       		bne.s	locret_729B4
000763A0                            
000763A0                            loc_729A6:				; XREF: Snd_FadeOut2
000763A0 102D 0001                  		move.b	1(a5),d0
000763A4 0000 001F                  		ori.b	#$1F,d0
000763A8 13C0 00C0 0011             		move.b	d0,($C00011).l
000763AE                            
000763AE                            locret_729B4:
000763AE 4E75                       		rts	
000763B0                            ; End of function sub_729A0
000763B0                            
000763B0                            
000763B0                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000763B0                            
000763B0                            
000763B0                            sub_729B6:				; XREF: loc_71E7C
000763B0 41F9 00C0 0011             		lea	($C00011).l,a0
000763B6 10BC 009F                  		move.b	#$9F,(a0)
000763BA 10BC 00BF                  		move.b	#$BF,(a0)
000763BE 10BC 00DF                  		move.b	#$DF,(a0)
000763C2 10BC 00FF                  		move.b	#$FF,(a0)
000763C6 4E75                       		rts	
000763C8                            ; End of function sub_729B6
000763C8                            
000763C8                            ; ===========================================================================
000763C8 0356 0326 02F9 02CE 02A5+  word_729CE:	dc.w $356, $326, $2F9, $2CE, $2A5, $280, $25C, $23A, $21A
000763DA 01FB 01DF 01C4 01AB 0193+  		dc.w $1FB, $1DF, $1C4, $1AB, $193, $17D, $167, $153, $140
000763EC 012E 011D 010D 00FE 00EF+  		dc.w $12E, $11D, $10D, $FE, $EF, $E2, $D6, $C9,	$BE, $B4
00076400 00A9 00A0 0097 008F 0087+  		dc.w $A9, $A0, $97, $8F, $87, $7F, $78,	$71, $6B, $65
00076414 005F 005A 0055 0050 004B+  		dc.w $5F, $5A, $55, $50, $4B, $47, $43,	$40, $3C, $39
00076428 0036 0033 0030 002D 002B+  		dc.w $36, $33, $30, $2D, $2B, $28, $26,	$24, $22, $20
0007643C 001F 001D 001B 001A 0018+  		dc.w $1F, $1D, $1B, $1A, $18, $17, $16,	$15, $13, $12
00076450 0011 0000                  		dc.w $11, 0
00076454                            
00076454                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00076454                            
00076454                            
00076454                            sub_72A5A:				; XREF: sub_71C4E; sub_71CEC; sub_72878
00076454 0445 00E0                  		subi.w	#$E0,d5
00076458 E54D                       		lsl.w	#2,d5
0007645A 4EFB 5000                  		jmp	loc_72A64(pc,d5.w)
0007645E                            ; End of function sub_72A5A
0007645E                            
0007645E                            ; ===========================================================================
0007645E                            
0007645E                            loc_72A64:
0007645E 6000 0000                  		bra.w	loc_72ACC
00076462                            ; ===========================================================================
00076462 6000 0000                  		bra.w	loc_72AEC
00076466                            ; ===========================================================================
00076466 6000 0000                  		bra.w	loc_72AF2
0007646A                            ; ===========================================================================
0007646A 6000 0000                  		bra.w	loc_72AF8
0007646E                            ; ===========================================================================
0007646E 6000 0000                  		bra.w	loc_72B14
00076472                            ; ===========================================================================
00076472 6000 0000                  		bra.w	loc_72B9E
00076476                            ; ===========================================================================
00076476 6000 0000                  		bra.w	loc_72BA4
0007647A                            ; ===========================================================================
0007647A 6000 0000                  		bra.w	loc_72BAE
0007647E                            ; ===========================================================================
0007647E 6000 0000                  		bra.w	loc_72BB4
00076482                            ; ===========================================================================
00076482 6000 0000                  		bra.w	loc_72BBE
00076486                            ; ===========================================================================
00076486 6000 0000                  		bra.w	loc_72BC6
0007648A                            ; ===========================================================================
0007648A 6000 0000                  		bra.w	loc_72BD0
0007648E                            ; ===========================================================================
0007648E 6000 0000                  		bra.w	loc_72BE6
00076492                            ; ===========================================================================
00076492 6000 0000                  		bra.w	loc_72BEE
00076496                            ; ===========================================================================
00076496 6000 0000                  		bra.w	loc_72BF4
0007649A                            ; ===========================================================================
0007649A 6000 0000                  		bra.w	loc_72C26
0007649E                            ; ===========================================================================
0007649E 6000 0000                  		bra.w	loc_72D30
000764A2                            ; ===========================================================================
000764A2 6000 0000                  		bra.w	loc_72D52
000764A6                            ; ===========================================================================
000764A6 6000 0000                  		bra.w	loc_72D58
000764AA                            ; ===========================================================================
000764AA 6000 0000                  		bra.w	loc_72E06
000764AE                            ; ===========================================================================
000764AE 6000 0000                  		bra.w	loc_72E20
000764B2                            ; ===========================================================================
000764B2 6000 0000                  		bra.w	loc_72E26
000764B6                            ; ===========================================================================
000764B6 6000 0000                  		bra.w	loc_72E2C
000764BA                            ; ===========================================================================
000764BA 6000 0000                  		bra.w	loc_72E38
000764BE                            ; ===========================================================================
000764BE 6000 0000                  		bra.w	loc_72E52
000764C2                            ; ===========================================================================
000764C2 6000 0000                  		bra.w	loc_72E64
000764C6                            ; ===========================================================================
000764C6                            
000764C6                            loc_72ACC:				; XREF: loc_72A64
000764C6 121C                       		move.b	(a4)+,d1
000764C8 4A2D 0001                  		tst.b	1(a5)
000764CC 6B00                       		bmi.s	locret_72AEA
000764CE 102D 000A                  		move.b	$A(a5),d0
000764D2 0200 0037                  		andi.b	#$37,d0
000764D6 8200                       		or.b	d0,d1
000764D8 1B41 000A                  		move.b	d1,$A(a5)
000764DC 103C 00B4                  		move.b	#$B4,d0
000764E0 6000 FC2E                  		bra.w	loc_72716
000764E4                            ; ===========================================================================
000764E4                            
000764E4                            locret_72AEA:
000764E4 4E75                       		rts	
000764E6                            ; ===========================================================================
000764E6                            
000764E6                            loc_72AEC:				; XREF: loc_72A64
000764E6 1B5C 001E                  		move.b	(a4)+,$1E(a5)
000764EA 4E75                       		rts	
000764EC                            ; ===========================================================================
000764EC                            
000764EC                            loc_72AF2:				; XREF: loc_72A64
000764EC 1D5C 0007                  		move.b	(a4)+,7(a6)
000764F0 4E75                       		rts	
000764F2                            ; ===========================================================================
000764F2                            
000764F2                            loc_72AF8:				; XREF: loc_72A64
000764F2 7000                       		moveq	#0,d0
000764F4 102D 000D                  		move.b	$D(a5),d0
000764F8 2875 0000                  		movea.l	(a5,d0.w),a4
000764FC 2BBC 0000 0000 0000        		move.l	#0,(a5,d0.w)
00076504 544C                       		addq.w	#2,a4
00076506 5800                       		addq.b	#4,d0
00076508 1B40 000D                  		move.b	d0,$D(a5)
0007650C 4E75                       		rts	
0007650E                            ; ===========================================================================
0007650E                            
0007650E                            loc_72B14:				; XREF: loc_72A64
0007650E 204E                       		movea.l	a6,a0
00076510 43EE 03A0                  		lea	$3A0(a6),a1
00076514 303C 0087                  		move.w	#$87,d0
00076518                            
00076518                            loc_72B1E:
00076518 20D9                       		move.l	(a1)+,(a0)+
0007651A 51C8 FFFC                  		dbf	d0,loc_72B1E
0007651E                            
0007651E 08EE 0002 0040             		bset	#2,$40(a6)
00076524 264D                       		movea.l	a5,a3
00076526 1C3C 0028                  		move.b	#$28,d6
0007652A 9C2E 0026                  		sub.b	$26(a6),d6
0007652E 7E05                       		moveq	#5,d7
00076530 4BEE 0070                  		lea	$70(a6),a5
00076534                            
00076534                            loc_72B3A:
00076534 0815 0007                  		btst	#7,(a5)
00076538 6700                       		beq.s	loc_72B5C
0007653A 08D5 0001                  		bset	#1,(a5)
0007653E DD2D 0009                  		add.b	d6,9(a5)
00076542 0815 0002                  		btst	#2,(a5)
00076546 6600                       		bne.s	loc_72B5C
00076548 7000                       		moveq	#0,d0
0007654A 102D 000B                  		move.b	$B(a5),d0
0007654E 226E 0018                  		movea.l	$18(a6),a1
00076552 4EBA 0000                  		jsr	sub_72C4E(pc)
00076556                            
00076556                            loc_72B5C:
00076556 DAFC 0030                  		adda.w	#$30,a5
0007655A 51CF FFD8                  		dbf	d7,loc_72B3A
0007655E                            
0007655E 7E02                       		moveq	#2,d7
00076560                            
00076560                            loc_72B66:
00076560 0815 0007                  		btst	#7,(a5)
00076564 6700                       		beq.s	loc_72B78
00076566 08D5 0001                  		bset	#1,(a5)
0007656A 4EBA FE2E                  		jsr	sub_729A0(pc)
0007656E DD2D 0009                  		add.b	d6,9(a5)
00076572                            
00076572                            loc_72B78:
00076572 DAFC 0030                  		adda.w	#$30,a5
00076576 51CF FFE8                  		dbf	d7,loc_72B66
0007657A 2A4B                       		movea.l	a3,a5
0007657C 1D7C 0080 0024             		move.b	#$80,$24(a6)
00076582 1D7C 0028 0026             		move.b	#$28,$26(a6)
00076588 422E 0027                  		clr.b	$27(a6)
0007658C 33FC 0000 00A1 1100        		move.w	#0,($A11100).l
00076594 504F                       		addq.w	#8,sp
00076596 4E75                       		rts	
00076598                            ; ===========================================================================
00076598                            
00076598                            loc_72B9E:				; XREF: loc_72A64
00076598 1B5C 0002                  		move.b	(a4)+,2(a5)
0007659C 4E75                       		rts	
0007659E                            ; ===========================================================================
0007659E                            
0007659E                            loc_72BA4:				; XREF: loc_72A64
0007659E 101C                       		move.b	(a4)+,d0
000765A0 D12D 0009                  		add.b	d0,9(a5)
000765A4 6000 0000                  		bra.w	sub_72CB4
000765A8                            ; ===========================================================================
000765A8                            
000765A8                            loc_72BAE:				; XREF: loc_72A64
000765A8 08D5 0004                  		bset	#4,(a5)
000765AC 4E75                       		rts	
000765AE                            ; ===========================================================================
000765AE                            
000765AE                            loc_72BB4:				; XREF: loc_72A64
000765AE 1B54 0012                  		move.b	(a4),$12(a5)
000765B2 1B5C 0013                  		move.b	(a4)+,$13(a5)
000765B6 4E75                       		rts	
000765B8                            ; ===========================================================================
000765B8                            
000765B8                            loc_72BBE:				; XREF: loc_72A64
000765B8 101C                       		move.b	(a4)+,d0
000765BA D12D 0008                  		add.b	d0,8(a5)
000765BE 4E75                       		rts	
000765C0                            ; ===========================================================================
000765C0                            
000765C0                            loc_72BC6:				; XREF: loc_72A64
000765C0 1D54 0002                  		move.b	(a4),2(a6)
000765C4 1D5C 0001                  		move.b	(a4)+,1(a6)
000765C8 4E75                       		rts	
000765CA                            ; ===========================================================================
000765CA                            
000765CA                            loc_72BD0:				; XREF: loc_72A64
000765CA 41EE 0040                  		lea	$40(a6),a0
000765CE 101C                       		move.b	(a4)+,d0
000765D0 7230                       		moveq	#$30,d1
000765D2 7409                       		moveq	#9,d2
000765D4                            
000765D4                            loc_72BDA:
000765D4 1140 0002                  		move.b	d0,2(a0)
000765D8 D0C1                       		adda.w	d1,a0
000765DA 51CA FFF8                  		dbf	d2,loc_72BDA
000765DE                            
000765DE 4E75                       		rts	
000765E0                            ; ===========================================================================
000765E0                            
000765E0                            loc_72BE6:				; XREF: loc_72A64
000765E0 101C                       		move.b	(a4)+,d0
000765E2 D12D 0009                  		add.b	d0,9(a5)
000765E6 4E75                       		rts	
000765E8                            ; ===========================================================================
000765E8                            
000765E8                            loc_72BEE:				; XREF: loc_72A64
000765E8 422E 002C                  		clr.b	$2C(a6)
000765EC 4E75                       		rts	
000765EE                            ; ===========================================================================
000765EE                            
000765EE                            loc_72BF4:				; XREF: loc_72A64
000765EE 0895 0007                  		bclr	#7,(a5)
000765F2 0895 0004                  		bclr	#4,(a5)
000765F6 4EBA FB00                  		jsr	sub_726FE(pc)
000765FA 4A2E 0250                  		tst.b	$250(a6)
000765FE 6B00                       		bmi.s	loc_72C22
00076600 264D                       		movea.l	a5,a3
00076602 4BEE 0100                  		lea	$100(a6),a5
00076606 226E 0018                  		movea.l	$18(a6),a1
0007660A 0895 0002                  		bclr	#2,(a5)
0007660E 08D5 0001                  		bset	#1,(a5)
00076612 102D 000B                  		move.b	$B(a5),d0
00076616 4EBA 0000                  		jsr	sub_72C4E(pc)
0007661A 2A4B                       		movea.l	a3,a5
0007661C                            
0007661C                            loc_72C22:
0007661C 504F                       		addq.w	#8,sp
0007661E 4E75                       		rts	
00076620                            ; ===========================================================================
00076620                            
00076620                            loc_72C26:				; XREF: loc_72A64
00076620 7000                       		moveq	#0,d0
00076622 101C                       		move.b	(a4)+,d0
00076624 1B40 000B                  		move.b	d0,$B(a5)
00076628 0815 0002                  		btst	#2,(a5)
0007662C 6600 0000                  		bne.w	locret_72CAA
00076630 226E 0018                  		movea.l	$18(a6),a1
00076634 4A2E 000E                  		tst.b	$E(a6)
00076638 6700                       		beq.s	sub_72C4E
0007663A 226D 0020                  		movea.l	$20(a5),a1
0007663E 4A2E 000E                  		tst.b	$E(a6)
00076642 6B00                       		bmi.s	sub_72C4E
00076644 226E 0020                  		movea.l	$20(a6),a1
00076648                            
00076648                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00076648                            
00076648                            
00076648                            sub_72C4E:				; XREF: Snd_FadeOut1; et al
00076648 5340                       		subq.w	#1,d0
0007664A 6B00                       		bmi.s	loc_72C5C
0007664C 323C 0019                  		move.w	#$19,d1
00076650                            
00076650                            loc_72C56:
00076650 D2C1                       		adda.w	d1,a1
00076652 51C8 FFFC                  		dbf	d0,loc_72C56
00076656                            
00076656                            loc_72C5C:
00076656 1219                       		move.b	(a1)+,d1
00076658 1B41 001F                  		move.b	d1,$1F(a5)
0007665C 1801                       		move.b	d1,d4
0007665E 103C 00B0                  		move.b	#$B0,d0
00076662 4EBA FAB8                  		jsr	sub_72722(pc)
00076666 45FA 0000                  		lea	byte_72D18(pc),a2
0007666A 7613                       		moveq	#$13,d3
0007666C                            
0007666C                            loc_72C72:
0007666C 101A                       		move.b	(a2)+,d0
0007666E 1219                       		move.b	(a1)+,d1
00076670 4EBA FAAA                  		jsr	sub_72722(pc)
00076674 51CB FFF6                  		dbf	d3,loc_72C72
00076678 7A03                       		moveq	#3,d5
0007667A 0244 0007                  		andi.w	#7,d4
0007667E 183B 4000                  		move.b	byte_72CAC(pc,d4.w),d4
00076682 162D 0009                  		move.b	9(a5),d3
00076686                            
00076686                            loc_72C8C:
00076686 101A                       		move.b	(a2)+,d0
00076688 1219                       		move.b	(a1)+,d1
0007668A E20C                       		lsr.b	#1,d4
0007668C 6400                       		bcc.s	loc_72C96
0007668E D203                       		add.b	d3,d1
00076690                            
00076690                            loc_72C96:
00076690 4EBA FA8A                  		jsr	sub_72722(pc)
00076694 51CD FFF0                  		dbf	d5,loc_72C8C
00076698 103C 00B4                  		move.b	#$B4,d0
0007669C 122D 000A                  		move.b	$A(a5),d1
000766A0 4EBA FA7A                  		jsr	sub_72722(pc)
000766A4                            
000766A4                            locret_72CAA:
000766A4 4E75                       		rts	
000766A6                            ; End of function sub_72C4E
000766A6                            
000766A6                            ; ===========================================================================
000766A6 0808 0808 0A0E 0E0F        byte_72CAC:	dc.b 8,	8, 8, 8, $A, $E, $E, $F
000766AE                            
000766AE                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000766AE                            
000766AE                            
000766AE                            sub_72CB4:				; XREF: sub_72504; sub_7267C; loc_72BA4
000766AE 0815 0002                  		btst	#2,(a5)
000766B2 6600                       		bne.s	locret_72D16
000766B4 7000                       		moveq	#0,d0
000766B6 102D 000B                  		move.b	$B(a5),d0
000766BA 226E 0018                  		movea.l	$18(a6),a1
000766BE 4A2E 000E                  		tst.b	$E(a6)
000766C2 6700                       		beq.s	loc_72CD8
000766C4 226E 0020                  		movea.l	$20(a6),a1
000766C8 4A2E 000E                  		tst.b	$E(a6)
000766CC 6B00                       		bmi.s	loc_72CD8
000766CE 226E 0020                  		movea.l	$20(a6),a1
000766D2                            
000766D2                            loc_72CD8:
000766D2 5340                       		subq.w	#1,d0
000766D4 6B00                       		bmi.s	loc_72CE6
000766D6 323C 0019                  		move.w	#$19,d1
000766DA                            
000766DA                            loc_72CE0:
000766DA D2C1                       		adda.w	d1,a1
000766DC 51C8 FFFC                  		dbf	d0,loc_72CE0
000766E0                            
000766E0                            loc_72CE6:
000766E0 D2FC 0015                  		adda.w	#$15,a1
000766E4 45FA 0000                  		lea	byte_72D2C(pc),a2
000766E8 102D 001F                  		move.b	$1F(a5),d0
000766EC 0240 0007                  		andi.w	#7,d0
000766F0 183B 00B4                  		move.b	byte_72CAC(pc,d0.w),d4
000766F4 162D 0009                  		move.b	9(a5),d3
000766F8 6B00                       		bmi.s	locret_72D16
000766FA 7A03                       		moveq	#3,d5
000766FC                            
000766FC                            loc_72D02:
000766FC 101A                       		move.b	(a2)+,d0
000766FE 1219                       		move.b	(a1)+,d1
00076700 E20C                       		lsr.b	#1,d4
00076702 6400                       		bcc.s	loc_72D12
00076704 D203                       		add.b	d3,d1
00076706 6500                       		bcs.s	loc_72D12
00076708 4EBA FA12                  		jsr	sub_72722(pc)
0007670C                            
0007670C                            loc_72D12:
0007670C 51CD FFEE                  		dbf	d5,loc_72D02
00076710                            
00076710                            locret_72D16:
00076710 4E75                       		rts	
00076712                            ; End of function sub_72CB4
00076712                            
00076712                            ; ===========================================================================
00076712 3038 343C 5058 545C 6068   byte_72D18:	dc.b $30, $38, $34, $3C, $50, $58, $54,	$5C, $60, $68
0007671C 646C 7078 747C 8088 848C   		dc.b $64, $6C, $70, $78, $74, $7C, $80,	$88, $84, $8C
00076726 4048 444C                  byte_72D2C:	dc.b $40, $48, $44, $4C
0007672A                            ; ===========================================================================
0007672A                            
0007672A                            loc_72D30:				; XREF: loc_72A64
0007672A 08D5 0003                  		bset	#3,(a5)
0007672E 2B4C 0014                  		move.l	a4,$14(a5)
00076732 1B5C 0018                  		move.b	(a4)+,$18(a5)
00076736 1B5C 0019                  		move.b	(a4)+,$19(a5)
0007673A 1B5C 001A                  		move.b	(a4)+,$1A(a5)
0007673E 101C                       		move.b	(a4)+,d0
00076740 E208                       		lsr.b	#1,d0
00076742 1B40 001B                  		move.b	d0,$1B(a5)
00076746 426D 001C                  		clr.w	$1C(a5)
0007674A 4E75                       		rts	
0007674C                            ; ===========================================================================
0007674C                            
0007674C                            loc_72D52:				; XREF: loc_72A64
0007674C 08D5 0003                  		bset	#3,(a5)
00076750 4E75                       		rts	
00076752                            ; ===========================================================================
00076752                            
00076752                            loc_72D58:				; XREF: loc_72A64
00076752 0895 0007                  		bclr	#7,(a5)
00076756 0895 0004                  		bclr	#4,(a5)
0007675A 4A2D 0001                  		tst.b	1(a5)
0007675E 6B00                       		bmi.s	loc_72D74
00076760 4A2E 0008                  		tst.b	8(a6)
00076764 6B00 0000                  		bmi.w	loc_72E02
00076768 4EBA F98E                  		jsr	sub_726FE(pc)
0007676C 6000                       		bra.s	loc_72D78
0007676E                            ; ===========================================================================
0007676E                            
0007676E                            loc_72D74:
0007676E 4EBA FC2A                  		jsr	sub_729A0(pc)
00076772                            
00076772                            loc_72D78:
00076772 4A2E 000E                  		tst.b	$E(a6)
00076776 6A00 0000                  		bpl.w	loc_72E02
0007677A 4216                       		clr.b	0(a6)
0007677C 7000                       		moveq	#0,d0
0007677E 102D 0001                  		move.b	1(a5),d0
00076782 6B00                       		bmi.s	loc_72DCC
00076784 41FA F546                  		lea	dword_722CC(pc),a0
00076788 264D                       		movea.l	a5,a3
0007678A 0C00 0004                  		cmpi.b	#4,d0
0007678E 6600                       		bne.s	loc_72DA8
00076790 4A2E 0340                  		tst.b	$340(a6)
00076794 6A00                       		bpl.s	loc_72DA8
00076796 4BEE 0340                  		lea	$340(a6),a5
0007679A 226E 0020                  		movea.l	$20(a6),a1
0007679E 6000                       		bra.s	loc_72DB8
000767A0                            ; ===========================================================================
000767A0                            
000767A0                            loc_72DA8:
000767A0 5500                       		subq.b	#2,d0
000767A2 E508                       		lsl.b	#2,d0
000767A4 2A70 0000                  		movea.l	(a0,d0.w),a5
000767A8 4A15                       		tst.b	(a5)
000767AA 6A00                       		bpl.s	loc_72DC8
000767AC 226E 0018                  		movea.l	$18(a6),a1
000767B0                            
000767B0                            loc_72DB8:
000767B0 0895 0002                  		bclr	#2,(a5)
000767B4 08D5 0001                  		bset	#1,(a5)
000767B8 102D 000B                  		move.b	$B(a5),d0
000767BC 4EBA FE8A                  		jsr	sub_72C4E(pc)
000767C0                            
000767C0                            loc_72DC8:
000767C0 2A4B                       		movea.l	a3,a5
000767C2 6000                       		bra.s	loc_72E02
000767C4                            ; ===========================================================================
000767C4                            
000767C4                            loc_72DCC:
000767C4 41EE 0370                  		lea	$370(a6),a0
000767C8 4A10                       		tst.b	(a0)
000767CA 6A00                       		bpl.s	loc_72DE0
000767CC 0C00 00E0                  		cmpi.b	#$E0,d0
000767D0 6700                       		beq.s	loc_72DEA
000767D2 0C00 00C0                  		cmpi.b	#$C0,d0
000767D6 6700                       		beq.s	loc_72DEA
000767D8                            
000767D8                            loc_72DE0:
000767D8 41FA F4F2                  		lea	dword_722CC(pc),a0
000767DC E608                       		lsr.b	#3,d0
000767DE 2070 0000                  		movea.l	(a0,d0.w),a0
000767E2                            
000767E2                            loc_72DEA:
000767E2 0890 0002                  		bclr	#2,(a0)
000767E6 08D0 0001                  		bset	#1,(a0)
000767EA 0C28 00E0 0001             		cmpi.b	#$E0,1(a0)
000767F0 6600                       		bne.s	loc_72E02
000767F2 13E8 001F 00C0 0011        		move.b	$1F(a0),($C00011).l
000767FA                            
000767FA                            loc_72E02:
000767FA 504F                       		addq.w	#8,sp
000767FC 4E75                       		rts	
000767FE                            ; ===========================================================================
000767FE                            
000767FE                            loc_72E06:				; XREF: loc_72A64
000767FE 1B7C 00E0 0001             		move.b	#$E0,1(a5)
00076804 1B5C 001F                  		move.b	(a4)+,$1F(a5)
00076808 0815 0002                  		btst	#2,(a5)
0007680C 6600                       		bne.s	locret_72E1E
0007680E 13EC FFFF 00C0 0011        		move.b	-1(a4),($C00011).l
00076816                            
00076816                            locret_72E1E:
00076816 4E75                       		rts	
00076818                            ; ===========================================================================
00076818                            
00076818                            loc_72E20:				; XREF: loc_72A64
00076818 0895 0003                  		bclr	#3,(a5)
0007681C 4E75                       		rts	
0007681E                            ; ===========================================================================
0007681E                            
0007681E                            loc_72E26:				; XREF: loc_72A64
0007681E 1B5C 000B                  		move.b	(a4)+,$B(a5)
00076822 4E75                       		rts	
00076824                            ; ===========================================================================
00076824                            
00076824                            loc_72E2C:				; XREF: loc_72A64
00076824 101C                       		move.b	(a4)+,d0
00076826 E148                       		lsl.w	#8,d0
00076828 101C                       		move.b	(a4)+,d0
0007682A D8C0                       		adda.w	d0,a4
0007682C 534C                       		subq.w	#1,a4
0007682E 4E75                       		rts	
00076830                            ; ===========================================================================
00076830                            
00076830                            loc_72E38:				; XREF: loc_72A64
00076830 7000                       		moveq	#0,d0
00076832 101C                       		move.b	(a4)+,d0
00076834 121C                       		move.b	(a4)+,d1
00076836 4A35 0024                  		tst.b	$24(a5,d0.w)
0007683A 6600                       		bne.s	loc_72E48
0007683C 1B81 0024                  		move.b	d1,$24(a5,d0.w)
00076840                            
00076840                            loc_72E48:
00076840 5335 0024                  		subq.b	#1,$24(a5,d0.w)
00076844 66DE                       		bne.s	loc_72E2C
00076846 544C                       		addq.w	#2,a4
00076848 4E75                       		rts	
0007684A                            ; ===========================================================================
0007684A                            
0007684A                            loc_72E52:				; XREF: loc_72A64
0007684A 7000                       		moveq	#0,d0
0007684C 102D 000D                  		move.b	$D(a5),d0
00076850 5900                       		subq.b	#4,d0
00076852 2B8C 0000                  		move.l	a4,(a5,d0.w)
00076856 1B40 000D                  		move.b	d0,$D(a5)
0007685A 60C8                       		bra.s	loc_72E2C
0007685C                            ; ===========================================================================
0007685C                            
0007685C                            loc_72E64:				; XREF: loc_72A64
0007685C 103C 0088                  		move.b	#$88,d0
00076860 123C 000F                  		move.b	#$F,d1
00076864 4EBA F8C2                  		jsr	sub_7272E(pc)
00076868 103C 008C                  		move.b	#$8C,d0
0007686C 123C 000F                  		move.b	#$F,d1
00076870 6000 F8B6                  		bra.w	sub_7272E
00076874                            ; ===========================================================================
00076874                            Kos_Z80:	incbin	sound\z80_1.bin
00076924 0000                       		dc.w ((SegaPCM&$FF)<<8)+((SegaPCM&$FF00)>>8)
00076926 21                         		dc.b $21
00076927 0000                       		dc.w (((EndOfRom-SegaPCM)&$FF)<<8)+(((EndOfRom-SegaPCM)&$FF00)>>8)
00076929                            		incbin	sound\z80_2.bin
00077FD4                            		even
00077FD4                            Music81:	incbin	sound\jahl.bin ; 	Green Hill Act 1
0007E7D4                            		even
0007E7D4                            Music82:	incbin	sound\music82.bin ; Labyrinth Act 1
00088072                            		even
00088072                            Music83:	incbin	sound\music83.bin ; Marble Act 1
00088600                            		even
00088600                            Music84:	include	sound\music84.asm ; Star Light Act 1
00088600                            music84_Header:
00088600 =00000001                  smpsHeaderStartSong = 1
00088600 0000                       	smpsHeaderVoice     music84_Voices
00088602 0603                       	smpsHeaderChan      $06, $03
00088604 0205                       	smpsHeaderTempo     $02, $05
00088606                            
0008860A 0000 0000                  	smpsHeaderFM        music84_FM1,	$00, $00
0008860E 0000 0000                  	smpsHeaderFM        music84_FM2,	$00, $00
00088612 0000 0000                  	smpsHeaderFM        music84_FM3,	$00, $00
00088616 0000 0000                  	smpsHeaderFM        music84_FM4,	$00, $00
0008861A 0000 0000                  	smpsHeaderFM        music84_FM5,	$00, $00
0008861E 0000 0000 0000             	smpsHeaderPSG       music84_PSG1,	$00, $00, $00, $00
00088624 0000 0000 0000             	smpsHeaderPSG       music84_PSG2,	$00, $00, $00, $00
0008862A 0000 0000 0000             	smpsHeaderPSG       music84_PSG3,	$00, $00, $00, $00
00088630                            
00088630                            ; FM1 Data
00088630                            music84_FM1:
00088630 E0C0                       	smpsPan             panCenter, $00
00088634 E107                       	smpsAlterNote       $07
00088636 9B03 8007                  	dc.b	nD2, $03, nRst, $07
0008863A E106                       	smpsAlterNote       $06
0008863C 9903 800B                  	dc.b	nC2, $03, nRst, $0B
00088640 E10B                       	smpsAlterNote       $0B
00088642 9606 800B A201             	dc.b	nA1, $06, nRst, $0B, nA2, $01
00088648 E10C                       	smpsAlterNote       $0C
0008864A E7A3 01                    	dc.b	smpsNoAttack, nBb2, $01
0008864D E10B                       	smpsAlterNote       $0B
0008864F E7A2 01                    	dc.b	smpsNoAttack, nA2, $01
00088652 E109                       	smpsAlterNote       $09
00088654 E7A0 029E 01               	dc.b	smpsNoAttack, nG2, $02, nF2, $01
00088659 E108                       	smpsAlterNote       $08
0008865B 8001                       	dc.b	nRst, $01
0008865D E10B                       	smpsAlterNote       $0B
0008865F 9603 A203 8001             	dc.b	nA1, $03, nA2, $03, nRst, $01
00088665 E107                       	smpsAlterNote       $07
00088667 9B03                       	dc.b	nD2, $03
00088669                            
00088669                            music84_Jump04:
00088669 E107                       	smpsAlterNote       $07
0008866B 9B03 8001                  	dc.b	nD2, $03, nRst, $01
0008866F E10B                       	smpsAlterNote       $0B
00088671 A202 8001                  	dc.b	nA2, $02, nRst, $01
00088675 E107                       	smpsAlterNote       $07
00088677 9B03                       	dc.b	nD2, $03
00088679 E11A                       	smpsAlterNote       $1A
0008867B A301                       	dc.b	nBb2, $01
0008867D E1F2                       	smpsAlterNote       $F2
0008867F E7A4 01                    	dc.b	smpsNoAttack, nB2, $01
00088682 E1FF                       	smpsAlterNote       $FF
00088684 E701                       	dc.b	smpsNoAttack, $01
00088686 E111                       	smpsAlterNote       $11
00088688 E701                       	dc.b	smpsNoAttack, $01
0008868A E106                       	smpsAlterNote       $06
0008868C E7A5 03                    	dc.b	smpsNoAttack, nC3, $03
0008868F E107                       	smpsAlterNote       $07
00088691 9B03 8001                  	dc.b	nD2, $03, nRst, $01
00088695 E108                       	smpsAlterNote       $08
00088697 9C06 8001 9C02 8001        	dc.b	nEb2, $06, nRst, $01, nEb2, $02, nRst, $01
0008869F E109                       	smpsAlterNote       $09
000886A1 A003                       	dc.b	nG2, $03
000886A3 E10C                       	smpsAlterNote       $0C
000886A5 A303 8001                  	dc.b	nBb2, $03, nRst, $01
000886A9 E1FD                       	smpsAlterNote       $FD
000886AB A401                       	dc.b	nB2, $01
000886AD E109                       	smpsAlterNote       $09
000886AF E701                       	dc.b	smpsNoAttack, $01
000886B1 E106                       	smpsAlterNote       $06
000886B3 E7A5 01                    	dc.b	smpsNoAttack, nC3, $01
000886B6 E109                       	smpsAlterNote       $09
000886B8 A007                       	dc.b	nG2, $07
000886BA E108                       	smpsAlterNote       $08
000886BC 9C03 8001                  	dc.b	nEb2, $03, nRst, $01
000886C0 E107                       	smpsAlterNote       $07
000886C2 9B02 8001 9B03             	dc.b	nD2, $02, nRst, $01, nD2, $03
000886C8 E10B                       	smpsAlterNote       $0B
000886CA A203 8001                  	dc.b	nA2, $03, nRst, $01
000886CE E107                       	smpsAlterNote       $07
000886D0 9B03                       	dc.b	nD2, $03
000886D2 E11A                       	smpsAlterNote       $1A
000886D4 A301                       	dc.b	nBb2, $01
000886D6 E1F9                       	smpsAlterNote       $F9
000886D8 E7A4 01                    	dc.b	smpsNoAttack, nB2, $01
000886DB E107                       	smpsAlterNote       $07
000886DD E701                       	dc.b	smpsNoAttack, $01
000886DF E111                       	smpsAlterNote       $11
000886E1 E701                       	dc.b	smpsNoAttack, $01
000886E3 E106                       	smpsAlterNote       $06
000886E5 E7A5 0280 01               	dc.b	smpsNoAttack, nC3, $02, nRst, $01
000886EA E107                       	smpsAlterNote       $07
000886EC 9B03 A707 9B03 8001        	dc.b	nD2, $03, nD3, $07, nD2, $03, nRst, $01
000886F4 E1EC                       	smpsAlterNote       $EC
000886F6 A101                       	dc.b	nAb2, $01
000886F8 E108                       	smpsAlterNote       $08
000886FA E701                       	dc.b	smpsNoAttack, $01
000886FC E116                       	smpsAlterNote       $16
000886FE E701                       	dc.b	smpsNoAttack, $01
00088700 E1F5                       	smpsAlterNote       $F5
00088702 E7A2 01                    	dc.b	smpsNoAttack, nA2, $01
00088705 E10B                       	smpsAlterNote       $0B
00088707 E702 8001                  	dc.b	smpsNoAttack, $02, nRst, $01
0008870B E107                       	smpsAlterNote       $07
0008870D 9B02 8001 9B03             	dc.b	nD2, $02, nRst, $01, nD2, $03
00088713 E109                       	smpsAlterNote       $09
00088715 9E03 8001                  	dc.b	nF2, $03, nRst, $01
00088719 E10B                       	smpsAlterNote       $0B
0008871B 9603                       	dc.b	nA1, $03
0008871D E107                       	smpsAlterNote       $07
0008871F 9B03 8001 9B03             	dc.b	nD2, $03, nRst, $01, nD2, $03
00088725 E10B                       	smpsAlterNote       $0B
00088727 A203 8001                  	dc.b	nA2, $03, nRst, $01
0008872B E107                       	smpsAlterNote       $07
0008872D 9B02 8001                  	dc.b	nD2, $02, nRst, $01
00088731 E11A                       	smpsAlterNote       $1A
00088733 A301                       	dc.b	nBb2, $01
00088735 E1F9                       	smpsAlterNote       $F9
00088737 E7A4 01                    	dc.b	smpsNoAttack, nB2, $01
0008873A E107                       	smpsAlterNote       $07
0008873C E701                       	dc.b	smpsNoAttack, $01
0008873E E1FB                       	smpsAlterNote       $FB
00088740 E7A5 01                    	dc.b	smpsNoAttack, nC3, $01
00088743 E106                       	smpsAlterNote       $06
00088745 E702 8001                  	dc.b	smpsNoAttack, $02, nRst, $01
00088749 E107                       	smpsAlterNote       $07
0008874B 9B03                       	dc.b	nD2, $03
0008874D E108                       	smpsAlterNote       $08
0008874F 9C07 9C03 8001             	dc.b	nEb2, $07, nEb2, $03, nRst, $01
00088755 E109                       	smpsAlterNote       $09
00088757 A002 8001                  	dc.b	nG2, $02, nRst, $01
0008875B E10C                       	smpsAlterNote       $0C
0008875D A303                       	dc.b	nBb2, $03
0008875F E1F0                       	smpsAlterNote       $F0
00088761 A401                       	dc.b	nB2, $01
00088763 E1FD                       	smpsAlterNote       $FD
00088765 E701 E7A5 01               	dc.b	smpsNoAttack, $01, smpsNoAttack, nC3, $01
0008876A E106                       	smpsAlterNote       $06
0008876C 8001                       	dc.b	nRst, $01
0008876E E109                       	smpsAlterNote       $09
00088770 A006 8001                  	dc.b	nG2, $06, nRst, $01
00088774 E108                       	smpsAlterNote       $08
00088776 9C02 8001                  	dc.b	nEb2, $02, nRst, $01
0008877A E107                       	smpsAlterNote       $07
0008877C 9B03 9B03 8001             	dc.b	nD2, $03, nD2, $03, nRst, $01
00088782 E10B                       	smpsAlterNote       $0B
00088784 A203                       	dc.b	nA2, $03
00088786 E107                       	smpsAlterNote       $07
00088788 9B03 8001                  	dc.b	nD2, $03, nRst, $01
0008878C E1F2                       	smpsAlterNote       $F2
0008878E A401                       	dc.b	nB2, $01
00088790 E1FF                       	smpsAlterNote       $FF
00088792 E701                       	dc.b	smpsNoAttack, $01
00088794 E107                       	smpsAlterNote       $07
00088796 E701                       	dc.b	smpsNoAttack, $01
00088798 E1FB                       	smpsAlterNote       $FB
0008879A E7A5 01                    	dc.b	smpsNoAttack, nC3, $01
0008879D E106                       	smpsAlterNote       $06
0008879F E702 8001                  	dc.b	smpsNoAttack, $02, nRst, $01
000887A3 E107                       	smpsAlterNote       $07
000887A5 9B02 8001 A706 8001 9B03   	dc.b	nD2, $02, nRst, $01, nD3, $06, nRst, $01, nD2, $03
000887AF E117                       	smpsAlterNote       $17
000887B1 A001                       	dc.b	nG2, $01
000887B3 E1FA                       	smpsAlterNote       $FA
000887B5 E7A1 01                    	dc.b	smpsNoAttack, nAb2, $01
000887B8 E108                       	smpsAlterNote       $08
000887BA E701                       	dc.b	smpsNoAttack, $01
000887BC E1E7                       	smpsAlterNote       $E7
000887BE E7A2 01                    	dc.b	smpsNoAttack, nA2, $01
000887C1 E103                       	smpsAlterNote       $03
000887C3 E701                       	dc.b	smpsNoAttack, $01
000887C5 E10B                       	smpsAlterNote       $0B
000887C7 E702                       	dc.b	smpsNoAttack, $02
000887C9 E107                       	smpsAlterNote       $07
000887CB 9B03 8001 A702 8001        	dc.b	nD2, $03, nRst, $01, nD3, $02, nRst, $01
000887D3 E106                       	smpsAlterNote       $06
000887D5 9903 A503 8001             	dc.b	nC2, $03, nC3, $03, nRst, $01
000887DB E10C                       	smpsAlterNote       $0C
000887DD 9703 9703 8001             	dc.b	nBb1, $03, nBb1, $03, nRst, $01
000887E3 E109                       	smpsAlterNote       $09
000887E5 9E03                       	dc.b	nF2, $03
000887E7 E10C                       	smpsAlterNote       $0C
000887E9 9703 8001                  	dc.b	nBb1, $03, nRst, $01
000887ED E1EA                       	smpsAlterNote       $EA
000887EF A201                       	dc.b	nA2, $01
000887F1 E106                       	smpsAlterNote       $06
000887F3 E701                       	dc.b	smpsNoAttack, $01
000887F5 E1E2                       	smpsAlterNote       $E2
000887F7 E7A3 01                    	dc.b	smpsNoAttack, nBb2, $01
000887FA E1F0                       	smpsAlterNote       $F0
000887FC E701                       	dc.b	smpsNoAttack, $01
000887FE E10C                       	smpsAlterNote       $0C
00088800 E702 9703 8001 A306 8001+  	dc.b	smpsNoAttack, $02, nBb1, $03, nRst, $01, nBb2, $06, nRst, $01, nBb1, $03
0008880C E116                       	smpsAlterNote       $16
0008880E 9C01                       	dc.b	nEb2, $01
00088810 E105                       	smpsAlterNote       $05
00088812 E79D 01                    	dc.b	smpsNoAttack, nE2, $01
00088815 E1F1                       	smpsAlterNote       $F1
00088817 E79E 01                    	dc.b	smpsNoAttack, nF2, $01
0008881A E1FF                       	smpsAlterNote       $FF
0008881C E701                       	dc.b	smpsNoAttack, $01
0008881E E109                       	smpsAlterNote       $09
00088820 E702 8001                  	dc.b	smpsNoAttack, $02, nRst, $01
00088824 E10C                       	smpsAlterNote       $0C
00088826 9703 9703 8001 A303 9703+  	dc.b	nBb1, $03, nBb1, $03, nRst, $01, nBb2, $03, nBb1, $03, nRst, $01
00088832 9702 8001 9703             	dc.b	nBb1, $02, nRst, $01, nBb1, $03
00088838 E109                       	smpsAlterNote       $09
0008883A 9E03 8001                  	dc.b	nF2, $03, nRst, $01
0008883E E10C                       	smpsAlterNote       $0C
00088840 9703                       	dc.b	nBb1, $03
00088842 E11A                       	smpsAlterNote       $1A
00088844 A101                       	dc.b	nAb2, $01
00088846 E1FB                       	smpsAlterNote       $FB
00088848 E7A2 01                    	dc.b	smpsNoAttack, nA2, $01
0008884B E10A                       	smpsAlterNote       $0A
0008884D E701                       	dc.b	smpsNoAttack, $01
0008884F E1E8                       	smpsAlterNote       $E8
00088851 E7A3 01                    	dc.b	smpsNoAttack, nBb2, $01
00088854 E106                       	smpsAlterNote       $06
00088856 E701                       	dc.b	smpsNoAttack, $01
00088858 E10C                       	smpsAlterNote       $0C
0008885A E702 9703 8001 A306 9703+  	dc.b	smpsNoAttack, $02, nBb1, $03, nRst, $01, nBb2, $06, nBb1, $03, nRst, $01
00088866 E1F9                       	smpsAlterNote       $F9
00088868 9D01                       	dc.b	nE2, $01
0008886A E108                       	smpsAlterNote       $08
0008886C E701                       	dc.b	smpsNoAttack, $01
0008886E E1F6                       	smpsAlterNote       $F6
00088870 E79E 01                    	dc.b	smpsNoAttack, nF2, $01
00088873 E109                       	smpsAlterNote       $09
00088875 E703 8001                  	dc.b	smpsNoAttack, $03, nRst, $01
00088879 E10C                       	smpsAlterNote       $0C
0008887B 9703 9703 8001 A302 8001+  	dc.b	nBb1, $03, nBb1, $03, nRst, $01, nBb2, $02, nRst, $01, nBb1, $03
00088887 E108                       	smpsAlterNote       $08
00088889 9D03 8001 9D03             	dc.b	nE2, $03, nRst, $01, nE2, $03
0008888F E106                       	smpsAlterNote       $06
00088891 A403 8001                  	dc.b	nB2, $03, nRst, $01
00088895 E108                       	smpsAlterNote       $08
00088897 9D03                       	dc.b	nE2, $03
00088899 E1EB                       	smpsAlterNote       $EB
0008889B A801                       	dc.b	nEb3, $01
0008889D E109                       	smpsAlterNote       $09
0008889F E701                       	dc.b	smpsNoAttack, $01
000888A1 E1FA                       	smpsAlterNote       $FA
000888A3 E7A9 01                    	dc.b	smpsNoAttack, nE3, $01
000888A6 E108                       	smpsAlterNote       $08
000888A8 E703 8001 9D03 A907 9D03+  	dc.b	smpsNoAttack, $03, nRst, $01, nE2, $03, nE3, $07, nE2, $03, nRst, $01
000888B4 E1E9                       	smpsAlterNote       $E9
000888B6 A301                       	dc.b	nBb2, $01
000888B8 E107                       	smpsAlterNote       $07
000888BA E701                       	dc.b	smpsNoAttack, $01
000888BC E1F0                       	smpsAlterNote       $F0
000888BE E7A4 01                    	dc.b	smpsNoAttack, nB2, $01
000888C1 E1F7                       	smpsAlterNote       $F7
000888C3 E701                       	dc.b	smpsNoAttack, $01
000888C5 E107                       	smpsAlterNote       $07
000888C7 E701                       	dc.b	smpsNoAttack, $01
000888C9 E106                       	smpsAlterNote       $06
000888CB E701                       	dc.b	smpsNoAttack, $01
000888CD E108                       	smpsAlterNote       $08
000888CF 9D03 8001 9D03             	dc.b	nE2, $03, nRst, $01, nE2, $03
000888D5 E106                       	smpsAlterNote       $06
000888D7 A403 8001                  	dc.b	nB2, $03, nRst, $01
000888DB E108                       	smpsAlterNote       $08
000888DD 9D03                       	dc.b	nE2, $03
000888DF E10B                       	smpsAlterNote       $0B
000888E1 9603 8001 9602 8001        	dc.b	nA1, $03, nRst, $01, nA1, $02, nRst, $01
000888E9 E108                       	smpsAlterNote       $08
000888EB 9D03                       	dc.b	nE2, $03
000888ED E10B                       	smpsAlterNote       $0B
000888EF 9603 8001                  	dc.b	nA1, $03, nRst, $01
000888F3 E113                       	smpsAlterNote       $13
000888F5 A001                       	dc.b	nG2, $01
000888F7 E118                       	smpsAlterNote       $18
000888F9 E701                       	dc.b	smpsNoAttack, $01
000888FB E1E9                       	smpsAlterNote       $E9
000888FD E7A1 01                    	dc.b	smpsNoAttack, nAb2, $01
00088900 E1F3                       	smpsAlterNote       $F3
00088902 E701                       	dc.b	smpsNoAttack, $01
00088904 E1FD                       	smpsAlterNote       $FD
00088906 E701                       	dc.b	smpsNoAttack, $01
00088908 E102                       	smpsAlterNote       $02
0008890A E701                       	dc.b	smpsNoAttack, $01
0008890C E107                       	smpsAlterNote       $07
0008890E 8001                       	dc.b	nRst, $01
00088910 E10B                       	smpsAlterNote       $0B
00088912 9603                       	dc.b	nA1, $03
00088914 E10C                       	smpsAlterNote       $0C
00088916 9706 8001 9703             	dc.b	nBb1, $06, nRst, $01, nBb1, $03
0008891C E10B                       	smpsAlterNote       $0B
0008891E 9603 8001 A206 8001 9603+  	dc.b	nA1, $03, nRst, $01, nA2, $06, nRst, $01, nA1, $03, nA2, $03
0008892A 8001 9602 8001             	dc.b	nRst, $01, nA1, $02, nRst, $01
00088930 E107                       	smpsAlterNote       $07
00088932 9B03 9B03 8001             	dc.b	nD2, $03, nD2, $03, nRst, $01
00088938 E10B                       	smpsAlterNote       $0B
0008893A A203                       	dc.b	nA2, $03
0008893C E107                       	smpsAlterNote       $07
0008893E 9B03 8001                  	dc.b	nD2, $03, nRst, $01
00088942 E1F2                       	smpsAlterNote       $F2
00088944 A401                       	dc.b	nB2, $01
00088946 E1FF                       	smpsAlterNote       $FF
00088948 E701                       	dc.b	smpsNoAttack, $01
0008894A E107                       	smpsAlterNote       $07
0008894C E701                       	dc.b	smpsNoAttack, $01
0008894E E1FB                       	smpsAlterNote       $FB
00088950 E7A5 01                    	dc.b	smpsNoAttack, nC3, $01
00088953 E106                       	smpsAlterNote       $06
00088955 E702 8001                  	dc.b	smpsNoAttack, $02, nRst, $01
00088959 E107                       	smpsAlterNote       $07
0008895B 9B02 8001                  	dc.b	nD2, $02, nRst, $01
0008895F E108                       	smpsAlterNote       $08
00088961 9C06 8001 9C03             	dc.b	nEb2, $06, nRst, $01, nEb2, $03
00088967 E109                       	smpsAlterNote       $09
00088969 A003 8001                  	dc.b	nG2, $03, nRst, $01
0008896D E10C                       	smpsAlterNote       $0C
0008896F A302 8001                  	dc.b	nBb2, $02, nRst, $01
00088973 E1F0                       	smpsAlterNote       $F0
00088975 A401                       	dc.b	nB2, $01
00088977 E109                       	smpsAlterNote       $09
00088979 E701                       	dc.b	smpsNoAttack, $01
0008897B E106                       	smpsAlterNote       $06
0008897D E7A5 01                    	dc.b	smpsNoAttack, nC3, $01
00088980 E109                       	smpsAlterNote       $09
00088982 A007                       	dc.b	nG2, $07
00088984 E108                       	smpsAlterNote       $08
00088986 9C03 8001                  	dc.b	nEb2, $03, nRst, $01
0008898A E107                       	smpsAlterNote       $07
0008898C 9B03 9B03 8001             	dc.b	nD2, $03, nD2, $03, nRst, $01
00088992 E10B                       	smpsAlterNote       $0B
00088994 A202 8001                  	dc.b	nA2, $02, nRst, $01
00088998 E107                       	smpsAlterNote       $07
0008899A 9B03                       	dc.b	nD2, $03
0008899C E11A                       	smpsAlterNote       $1A
0008899E A301                       	dc.b	nBb2, $01
000889A0 E1F2                       	smpsAlterNote       $F2
000889A2 E7A4 01                    	dc.b	smpsNoAttack, nB2, $01
000889A5 E1FF                       	smpsAlterNote       $FF
000889A7 E701                       	dc.b	smpsNoAttack, $01
000889A9 E111                       	smpsAlterNote       $11
000889AB E701                       	dc.b	smpsNoAttack, $01
000889AD E106                       	smpsAlterNote       $06
000889AF E7A5 03                    	dc.b	smpsNoAttack, nC3, $03
000889B2 E107                       	smpsAlterNote       $07
000889B4 9B03 8001 A706 8001 9B02+  	dc.b	nD2, $03, nRst, $01, nD3, $06, nRst, $01, nD2, $02, nRst, $01
000889C0 E117                       	smpsAlterNote       $17
000889C2 A001                       	dc.b	nG2, $01
000889C4 E1FA                       	smpsAlterNote       $FA
000889C6 E7A1 01                    	dc.b	smpsNoAttack, nAb2, $01
000889C9 E116                       	smpsAlterNote       $16
000889CB E701                       	dc.b	smpsNoAttack, $01
000889CD E1F5                       	smpsAlterNote       $F5
000889CF E7A2 01                    	dc.b	smpsNoAttack, nA2, $01
000889D2 E103                       	smpsAlterNote       $03
000889D4 E701                       	dc.b	smpsNoAttack, $01
000889D6 E10B                       	smpsAlterNote       $0B
000889D8 E701 8001                  	dc.b	smpsNoAttack, $01, nRst, $01
000889DC E107                       	smpsAlterNote       $07
000889DE 9B03 9B03 8001             	dc.b	nD2, $03, nD2, $03, nRst, $01
000889E4 E109                       	smpsAlterNote       $09
000889E6 9E03                       	dc.b	nF2, $03
000889E8 E10B                       	smpsAlterNote       $0B
000889EA 9603 8001                  	dc.b	nA1, $03, nRst, $01
000889EE E107                       	smpsAlterNote       $07
000889F0 9B02 8001 9B03             	dc.b	nD2, $02, nRst, $01, nD2, $03
000889F6 E10B                       	smpsAlterNote       $0B
000889F8 A203 8001                  	dc.b	nA2, $03, nRst, $01
000889FC E107                       	smpsAlterNote       $07
000889FE 9B03                       	dc.b	nD2, $03
00088A00 E11A                       	smpsAlterNote       $1A
00088A02 A301                       	dc.b	nBb2, $01
00088A04 E1F9                       	smpsAlterNote       $F9
00088A06 E7A4 01                    	dc.b	smpsNoAttack, nB2, $01
00088A09 E107                       	smpsAlterNote       $07
00088A0B E701                       	dc.b	smpsNoAttack, $01
00088A0D E111                       	smpsAlterNote       $11
00088A0F E701                       	dc.b	smpsNoAttack, $01
00088A11 E106                       	smpsAlterNote       $06
00088A13 E7A5 0280 01               	dc.b	smpsNoAttack, nC3, $02, nRst, $01
00088A18 E107                       	smpsAlterNote       $07
00088A1A 9B03                       	dc.b	nD2, $03
00088A1C E108                       	smpsAlterNote       $08
00088A1E 9C07 9C03 8001             	dc.b	nEb2, $07, nEb2, $03, nRst, $01
00088A24 E109                       	smpsAlterNote       $09
00088A26 A003                       	dc.b	nG2, $03
00088A28 E10C                       	smpsAlterNote       $0C
00088A2A A303 8001                  	dc.b	nBb2, $03, nRst, $01
00088A2E E1FD                       	smpsAlterNote       $FD
00088A30 A401 E7A5 01               	dc.b	nB2, $01, smpsNoAttack, nC3, $01
00088A35 E106                       	smpsAlterNote       $06
00088A37 8001                       	dc.b	nRst, $01
00088A39 E109                       	smpsAlterNote       $09
00088A3B A006 8001                  	dc.b	nG2, $06, nRst, $01
00088A3F E108                       	smpsAlterNote       $08
00088A41 9C03                       	dc.b	nEb2, $03
00088A43 E107                       	smpsAlterNote       $07
00088A45 9B03 8001 9B03             	dc.b	nD2, $03, nRst, $01, nD2, $03
00088A4B E10B                       	smpsAlterNote       $0B
00088A4D A203 8001                  	dc.b	nA2, $03, nRst, $01
00088A51 E107                       	smpsAlterNote       $07
00088A53 9B02 8001                  	dc.b	nD2, $02, nRst, $01
00088A57 E11A                       	smpsAlterNote       $1A
00088A59 A301                       	dc.b	nBb2, $01
00088A5B E1F9                       	smpsAlterNote       $F9
00088A5D E7A4 01                    	dc.b	smpsNoAttack, nB2, $01
00088A60 E107                       	smpsAlterNote       $07
00088A62 E701                       	dc.b	smpsNoAttack, $01
00088A64 E1FB                       	smpsAlterNote       $FB
00088A66 E7A5 01                    	dc.b	smpsNoAttack, nC3, $01
00088A69 E106                       	smpsAlterNote       $06
00088A6B E702 8001                  	dc.b	smpsNoAttack, $02, nRst, $01
00088A6F E107                       	smpsAlterNote       $07
00088A71 9B03 A707 9B03 8001        	dc.b	nD2, $03, nD3, $07, nD2, $03, nRst, $01
00088A79 E1EC                       	smpsAlterNote       $EC
00088A7B A101                       	dc.b	nAb2, $01
00088A7D E108                       	smpsAlterNote       $08
00088A7F E701                       	dc.b	smpsNoAttack, $01
00088A81 E1E7                       	smpsAlterNote       $E7
00088A83 E7A2 01                    	dc.b	smpsNoAttack, nA2, $01
00088A86 E1F5                       	smpsAlterNote       $F5
00088A88 E701                       	dc.b	smpsNoAttack, $01
00088A8A E10B                       	smpsAlterNote       $0B
00088A8C E702                       	dc.b	smpsNoAttack, $02
00088A8E E107                       	smpsAlterNote       $07
00088A90 9B03 8001 A703             	dc.b	nD2, $03, nRst, $01, nD3, $03
00088A96 E106                       	smpsAlterNote       $06
00088A98 9903 8001 A503             	dc.b	nC2, $03, nRst, $01, nC3, $03
00088A9E E10C                       	smpsAlterNote       $0C
00088AA0 9703 8001 9702 8001        	dc.b	nBb1, $03, nRst, $01, nBb1, $02, nRst, $01
00088AA8 E109                       	smpsAlterNote       $09
00088AAA 9E03                       	dc.b	nF2, $03
00088AAC E10C                       	smpsAlterNote       $0C
00088AAE 9703 8001                  	dc.b	nBb1, $03, nRst, $01
00088AB2 E1EA                       	smpsAlterNote       $EA
00088AB4 A201                       	dc.b	nA2, $01
00088AB6 E106                       	smpsAlterNote       $06
00088AB8 E701                       	dc.b	smpsNoAttack, $01
00088ABA E114                       	smpsAlterNote       $14
00088ABC E701                       	dc.b	smpsNoAttack, $01
00088ABE E1F0                       	smpsAlterNote       $F0
00088AC0 E7A3 01                    	dc.b	smpsNoAttack, nBb2, $01
00088AC3 E10C                       	smpsAlterNote       $0C
00088AC5 E702 8001 9702 8001 A306+  	dc.b	smpsNoAttack, $02, nRst, $01, nBb1, $02, nRst, $01, nBb2, $06, nRst, $01
00088AD1 9703                       	dc.b	nBb1, $03
00088AD3 E116                       	smpsAlterNote       $16
00088AD5 9C01                       	dc.b	nEb2, $01
00088AD7 E105                       	smpsAlterNote       $05
00088AD9 E79D 01                    	dc.b	smpsNoAttack, nE2, $01
00088ADC E113                       	smpsAlterNote       $13
00088ADE E701                       	dc.b	smpsNoAttack, $01
00088AE0 E1FF                       	smpsAlterNote       $FF
00088AE2 E79E 01                    	dc.b	smpsNoAttack, nF2, $01
00088AE5 E109                       	smpsAlterNote       $09
00088AE7 E703                       	dc.b	smpsNoAttack, $03
00088AE9 E10C                       	smpsAlterNote       $0C
00088AEB 9703 8001 9702 8001 A303+  	dc.b	nBb1, $03, nRst, $01, nBb1, $02, nRst, $01, nBb2, $03, nBb1, $03
00088AF7 8001 9703 9703 8001        	dc.b	nRst, $01, nBb1, $03, nBb1, $03, nRst, $01
00088AFF E109                       	smpsAlterNote       $09
00088B01 9E03                       	dc.b	nF2, $03
00088B03 E10C                       	smpsAlterNote       $0C
00088B05 9703 8001                  	dc.b	nBb1, $03, nRst, $01
00088B09 E1EC                       	smpsAlterNote       $EC
00088B0B A201                       	dc.b	nA2, $01
00088B0D E10A                       	smpsAlterNote       $0A
00088B0F E701                       	dc.b	smpsNoAttack, $01
00088B11 E1E8                       	smpsAlterNote       $E8
00088B13 E7A3 01                    	dc.b	smpsNoAttack, nBb2, $01
00088B16 E1F7                       	smpsAlterNote       $F7
00088B18 E701                       	dc.b	smpsNoAttack, $01
00088B1A E10C                       	smpsAlterNote       $0C
00088B1C E702 9703 8001 A306 8001+  	dc.b	smpsNoAttack, $02, nBb1, $03, nRst, $01, nBb2, $06, nRst, $01, nBb1, $03
00088B28 E1EA                       	smpsAlterNote       $EA
00088B2A 9D01                       	dc.b	nE2, $01
00088B2C E108                       	smpsAlterNote       $08
00088B2E E701                       	dc.b	smpsNoAttack, $01
00088B30 E1F6                       	smpsAlterNote       $F6
00088B32 E79E 01                    	dc.b	smpsNoAttack, nF2, $01
00088B35 E105                       	smpsAlterNote       $05
00088B37 E701                       	dc.b	smpsNoAttack, $01
00088B39 E109                       	smpsAlterNote       $09
00088B3B E702 8001                  	dc.b	smpsNoAttack, $02, nRst, $01
00088B3F E10C                       	smpsAlterNote       $0C
00088B41 9703 9703 8001 A303 9703+  	dc.b	nBb1, $03, nBb1, $03, nRst, $01, nBb2, $03, nBb1, $03, nRst, $01
00088B4D E108                       	smpsAlterNote       $08
00088B4F 9D02 8001 9D03             	dc.b	nE2, $02, nRst, $01, nE2, $03
00088B55 E106                       	smpsAlterNote       $06
00088B57 A403 8001                  	dc.b	nB2, $03, nRst, $01
00088B5B E108                       	smpsAlterNote       $08
00088B5D 9D03                       	dc.b	nE2, $03
00088B5F E1EB                       	smpsAlterNote       $EB
00088B61 A801                       	dc.b	nEb3, $01
00088B63 E109                       	smpsAlterNote       $09
00088B65 E701                       	dc.b	smpsNoAttack, $01
00088B67 E1EB                       	smpsAlterNote       $EB
00088B69 E7A9 01                    	dc.b	smpsNoAttack, nE3, $01
00088B6C E108                       	smpsAlterNote       $08
00088B6E E704 9D03 8001 A906 9D03+  	dc.b	smpsNoAttack, $04, nE2, $03, nRst, $01, nE3, $06, nE2, $03, nRst, $01
00088B7A E1E9                       	smpsAlterNote       $E9
00088B7C A301                       	dc.b	nBb2, $01
00088B7E E1F8                       	smpsAlterNote       $F8
00088B80 E701                       	dc.b	smpsNoAttack, $01
00088B82 E116                       	smpsAlterNote       $16
00088B84 E701                       	dc.b	smpsNoAttack, $01
00088B86 E1F7                       	smpsAlterNote       $F7
00088B88 E7A4 01                    	dc.b	smpsNoAttack, nB2, $01
00088B8B E107                       	smpsAlterNote       $07
00088B8D E701                       	dc.b	smpsNoAttack, $01
00088B8F E1EE                       	smpsAlterNote       $EE
00088B91 E7A5 01                    	dc.b	smpsNoAttack, nC3, $01
00088B94 E106                       	smpsAlterNote       $06
00088B96 8001                       	dc.b	nRst, $01
00088B98 E108                       	smpsAlterNote       $08
00088B9A 9D03 9D03 8001             	dc.b	nE2, $03, nE2, $03, nRst, $01
00088BA0 E106                       	smpsAlterNote       $06
00088BA2 A402 8001                  	dc.b	nB2, $02, nRst, $01
00088BA6 E108                       	smpsAlterNote       $08
00088BA8 9D03                       	dc.b	nE2, $03
00088BAA E10B                       	smpsAlterNote       $0B
00088BAC 9603 8001 9603             	dc.b	nA1, $03, nRst, $01, nA1, $03
00088BB2 E108                       	smpsAlterNote       $08
00088BB4 9D03 8001                  	dc.b	nE2, $03, nRst, $01
00088BB8 E10B                       	smpsAlterNote       $0B
00088BBA 9603                       	dc.b	nA1, $03
00088BBC E10E                       	smpsAlterNote       $0E
00088BBE A001                       	dc.b	nG2, $01
00088BC0 E118                       	smpsAlterNote       $18
00088BC2 E701                       	dc.b	smpsNoAttack, $01
00088BC4 E1E9                       	smpsAlterNote       $E9
00088BC6 E7A1 01                    	dc.b	smpsNoAttack, nAb2, $01
00088BC9 E1EE                       	smpsAlterNote       $EE
00088BCB E701                       	dc.b	smpsNoAttack, $01
00088BCD E1F8                       	smpsAlterNote       $F8
00088BCF E701                       	dc.b	smpsNoAttack, $01
00088BD1 E102                       	smpsAlterNote       $02
00088BD3 E701                       	dc.b	smpsNoAttack, $01
00088BD5 E107                       	smpsAlterNote       $07
00088BD7 8001                       	dc.b	nRst, $01
00088BD9 E10B                       	smpsAlterNote       $0B
00088BDB 9603                       	dc.b	nA1, $03
00088BDD E10C                       	smpsAlterNote       $0C
00088BDF 9707 9703 8001             	dc.b	nBb1, $07, nBb1, $03, nRst, $01
00088BE5 E10B                       	smpsAlterNote       $0B
00088BE7 9602 8001 A206 8001 9603+  	dc.b	nA1, $02, nRst, $01, nA2, $06, nRst, $01, nA1, $03, nA2, $03
00088BF3 8001 9603                  	dc.b	nRst, $01, nA1, $03
00088BF7 E10C                       	smpsAlterNote       $0C
00088BF9 9706 800F 9703 9703 8019+  	dc.b	nBb1, $06, nRst, $0F, nBb1, $03, nBb1, $03, nRst, $19, nBb1, $02
00088C05 8001                       	dc.b	nRst, $01
00088C07 E10B                       	smpsAlterNote       $0B
00088C09 9606 800F 9602 8001        	dc.b	nA1, $06, nRst, $0F, nA1, $02, nRst, $01
00088C11 E107                       	smpsAlterNote       $07
00088C13 9B06 8001                  	dc.b	nD2, $06, nRst, $01
00088C17 E10B                       	smpsAlterNote       $0B
00088C19 9603                       	dc.b	nA1, $03
00088C1B E109                       	smpsAlterNote       $09
00088C1D 9E03 8001                  	dc.b	nF2, $03, nRst, $01
00088C21 E108                       	smpsAlterNote       $08
00088C23 9D06                       	dc.b	nE2, $06
00088C25 E107                       	smpsAlterNote       $07
00088C27 9B03 8001                  	dc.b	nD2, $03, nRst, $01
00088C2B E106                       	smpsAlterNote       $06
00088C2D 9903                       	dc.b	nC2, $03
00088C2F E10C                       	smpsAlterNote       $0C
00088C31 9703 8001                  	dc.b	nBb1, $03, nRst, $01
00088C35 E10B                       	smpsAlterNote       $0B
00088C37 9603 9603 8001 9602 8001+  	dc.b	nA1, $03, nA1, $03, nRst, $01, nA1, $02, nRst, $01, nA1, $03
00088C43 9603 8001 9603 9603 8001   	dc.b	nA1, $03, nRst, $01, nA1, $03, nA1, $03, nRst, $01
00088C4D E10C                       	smpsAlterNote       $0C
00088C4F 9706 8001 9702 8001 9703+  	dc.b	nBb1, $06, nRst, $01, nBb1, $02, nRst, $01, nBb1, $03, nBb1, $03
00088C5B 8001 9703 9703 8001 9703+  	dc.b	nRst, $01, nBb1, $03, nBb1, $03, nRst, $01, nBb1, $03, nBb1, $03
00088C67 8001                       	dc.b	nRst, $01
00088C69 E10B                       	smpsAlterNote       $0B
00088C6B 9602 8001 9603 9603 8001+  	dc.b	nA1, $02, nRst, $01, nA1, $03, nA1, $03, nRst, $01, nA1, $03
00088C77 9603 8001 9602 8001 9603+  	dc.b	nA1, $03, nRst, $01, nA1, $02, nRst, $01, nA1, $03, nA1, $07
00088C83 9603 8001 9603 9603 8001+  	dc.b	nA1, $03, nRst, $01, nA1, $03, nA1, $03, nRst, $01, nA1, $02
00088C8F 8001 9603 9603 8001 9603   	dc.b	nRst, $01, nA1, $03, nA1, $03, nRst, $01, nA1, $03
00088C99 E10C                       	smpsAlterNote       $0C
00088C9B 9707 800E 9703 9703 8019+  	dc.b	nBb1, $07, nRst, $0E, nBb1, $03, nBb1, $03, nRst, $19, nBb1, $03
00088CA7 E10B                       	smpsAlterNote       $0B
00088CA9 9606 800F 9602 8001        	dc.b	nA1, $06, nRst, $0F, nA1, $02, nRst, $01
00088CB1 E107                       	smpsAlterNote       $07
00088CB3 9B06 8001                  	dc.b	nD2, $06, nRst, $01
00088CB7 E10B                       	smpsAlterNote       $0B
00088CB9 9603                       	dc.b	nA1, $03
00088CBB E109                       	smpsAlterNote       $09
00088CBD 9E03 8001                  	dc.b	nF2, $03, nRst, $01
00088CC1 E108                       	smpsAlterNote       $08
00088CC3 9D06 8001                  	dc.b	nE2, $06, nRst, $01
00088CC7 E107                       	smpsAlterNote       $07
00088CC9 9B02 8001                  	dc.b	nD2, $02, nRst, $01
00088CCD E106                       	smpsAlterNote       $06
00088CCF 9903                       	dc.b	nC2, $03
00088CD1 E10C                       	smpsAlterNote       $0C
00088CD3 9703 8001                  	dc.b	nBb1, $03, nRst, $01
00088CD7 E10B                       	smpsAlterNote       $0B
00088CD9 9603 9603 8001 9603 9603+  	dc.b	nA1, $03, nA1, $03, nRst, $01, nA1, $03, nA1, $03, nRst, $01
00088CE5 9602 8001 9603 9603 8001   	dc.b	nA1, $02, nRst, $01, nA1, $03, nA1, $03, nRst, $01
00088CEF E10C                       	smpsAlterNote       $0C
00088CF1 9706 8001 9703 9703 8001+  	dc.b	nBb1, $06, nRst, $01, nBb1, $03, nBb1, $03, nRst, $01, nBb1, $02
00088CFD 8001 9703 9703 8001 9703+  	dc.b	nRst, $01, nBb1, $03, nBb1, $03, nRst, $01, nBb1, $03, nBb1, $03
00088D09 8001                       	dc.b	nRst, $01
00088D0B E10B                       	smpsAlterNote       $0B
00088D0D 9602 8001 9603 9603 8001+  	dc.b	nA1, $02, nRst, $01, nA1, $03, nA1, $03, nRst, $01, nA1, $03
00088D19 9603 8001 9603 9603 8001   	dc.b	nA1, $03, nRst, $01, nA1, $03, nA1, $03, nRst, $01
00088D23 E10C                       	smpsAlterNote       $0C
00088D25 9706 9703 8001 9703 9703+  	dc.b	nBb1, $06, nBb1, $03, nRst, $01, nBb1, $03, nBb1, $03, nRst, $01
00088D31 9703 9703 8001 9702 8001+  	dc.b	nBb1, $03, nBb1, $03, nRst, $01, nBb1, $02, nRst, $01, nBb1, $03
00088D3D E10B                       	smpsAlterNote       $0B
00088D3F 9603 8001 9603 9603 8001+  	dc.b	nA1, $03, nRst, $01, nA1, $03, nA1, $03, nRst, $01, nA1, $03
00088D4B 9603 8001 9602 8001 9603   	dc.b	nA1, $03, nRst, $01, nA1, $02, nRst, $01, nA1, $03
00088D55 E10C                       	smpsAlterNote       $0C
00088D57 9707 9703 8001 9703 9703+  	dc.b	nBb1, $07, nBb1, $03, nRst, $01, nBb1, $03, nBb1, $03, nRst, $01
00088D63 9702 8001 9703 9703 8001+  	dc.b	nBb1, $02, nRst, $01, nBb1, $03, nBb1, $03, nRst, $01, nBb1, $03
00088D6F E10B                       	smpsAlterNote       $0B
00088D71 9603 8001 9602 8001 9603+  	dc.b	nA1, $03, nRst, $01, nA1, $02, nRst, $01, nA1, $03, nA1, $03
00088D7D 8001                       	dc.b	nRst, $01
00088D7F E1EC                       	smpsAlterNote       $EC
00088D81 A101                       	dc.b	nAb2, $01
00088D83 E1FA                       	smpsAlterNote       $FA
00088D85 E701                       	dc.b	smpsNoAttack, $01
00088D87 E116                       	smpsAlterNote       $16
00088D89 E701                       	dc.b	smpsNoAttack, $01
00088D8B E1F5                       	smpsAlterNote       $F5
00088D8D E7A2 01                    	dc.b	smpsNoAttack, nA2, $01
00088D90 E10B                       	smpsAlterNote       $0B
00088D92 E702 8001 9603 9606 8001+  	dc.b	smpsNoAttack, $02, nRst, $01, nA1, $03, nA1, $06, nRst, $01, nA1, $03
00088D9E 9603 8001 9603 800B 9602+  	dc.b	nA1, $03, nRst, $01, nA1, $03, nRst, $0B, nA1, $02, nRst, $01
00088DAA E107                       	smpsAlterNote       $07
00088DAC 9B03 9B03 8001             	dc.b	nD2, $03, nD2, $03, nRst, $01
00088DB2 E10B                       	smpsAlterNote       $0B
00088DB4 A203                       	dc.b	nA2, $03
00088DB6 E107                       	smpsAlterNote       $07
00088DB8 9B03 8001                  	dc.b	nD2, $03, nRst, $01
00088DBC E1F3                       	smpsAlterNote       $F3
00088DBE A401                       	dc.b	nB2, $01
00088DC0 E102                       	smpsAlterNote       $02
00088DC2 E701                       	dc.b	smpsNoAttack, $01
00088DC4 E109                       	smpsAlterNote       $09
00088DC6 E701                       	dc.b	smpsNoAttack, $01
00088DC8 E102                       	smpsAlterNote       $02
00088DCA E7A5 01                    	dc.b	smpsNoAttack, nC3, $01
00088DCD E106                       	smpsAlterNote       $06
00088DCF E702 8001                  	dc.b	smpsNoAttack, $02, nRst, $01
00088DD3 E107                       	smpsAlterNote       $07
00088DD5 9B02 8001                  	dc.b	nD2, $02, nRst, $01
00088DD9 E108                       	smpsAlterNote       $08
00088DDB 9C06 8001 9C03             	dc.b	nEb2, $06, nRst, $01, nEb2, $03
00088DE1 E109                       	smpsAlterNote       $09
00088DE3 A003 8001                  	dc.b	nG2, $03, nRst, $01
00088DE7 E1F2                       	smpsAlterNote       $F2
00088DE9 A401                       	dc.b	nB2, $01
00088DEB E1FF                       	smpsAlterNote       $FF
00088DED E701                       	dc.b	smpsNoAttack, $01
00088DEF E111                       	smpsAlterNote       $11
00088DF1 E701                       	dc.b	smpsNoAttack, $01
00088DF3 E1FB                       	smpsAlterNote       $FB
00088DF5 E7A5 01                    	dc.b	smpsNoAttack, nC3, $01
00088DF8 E106                       	smpsAlterNote       $06
00088DFA E702                       	dc.b	smpsNoAttack, $02
00088DFC E109                       	smpsAlterNote       $09
00088DFE A007                       	dc.b	nG2, $07
00088E00 E108                       	smpsAlterNote       $08
00088E02 9C03 8001                  	dc.b	nEb2, $03, nRst, $01
00088E06 E107                       	smpsAlterNote       $07
00088E08 9B03 9B03 8001             	dc.b	nD2, $03, nD2, $03, nRst, $01
00088E0E E10B                       	smpsAlterNote       $0B
00088E10 A202 8001                  	dc.b	nA2, $02, nRst, $01
00088E14 E107                       	smpsAlterNote       $07
00088E16 9B03                       	dc.b	nD2, $03
00088E18 E11A                       	smpsAlterNote       $1A
00088E1A A301                       	dc.b	nBb2, $01
00088E1C E1F2                       	smpsAlterNote       $F2
00088E1E E7A4 01                    	dc.b	smpsNoAttack, nB2, $01
00088E21 E1FF                       	smpsAlterNote       $FF
00088E23 E701                       	dc.b	smpsNoAttack, $01
00088E25 E111                       	smpsAlterNote       $11
00088E27 E701                       	dc.b	smpsNoAttack, $01
00088E29 E106                       	smpsAlterNote       $06
00088E2B E7A5 03                    	dc.b	smpsNoAttack, nC3, $03
00088E2E E107                       	smpsAlterNote       $07
00088E30 9B03 8001 A706 8001 9B02+  	dc.b	nD2, $03, nRst, $01, nD3, $06, nRst, $01, nD2, $02, nRst, $01
00088E3C E117                       	smpsAlterNote       $17
00088E3E A001                       	dc.b	nG2, $01
00088E40 E1FA                       	smpsAlterNote       $FA
00088E42 E7A1 01                    	dc.b	smpsNoAttack, nAb2, $01
00088E45 E116                       	smpsAlterNote       $16
00088E47 E701                       	dc.b	smpsNoAttack, $01
00088E49 E1F5                       	smpsAlterNote       $F5
00088E4B E7A2 01                    	dc.b	smpsNoAttack, nA2, $01
00088E4E E103                       	smpsAlterNote       $03
00088E50 E701                       	dc.b	smpsNoAttack, $01
00088E52 E10B                       	smpsAlterNote       $0B
00088E54 E701 8001                  	dc.b	smpsNoAttack, $01, nRst, $01
00088E58 E107                       	smpsAlterNote       $07
00088E5A 9B03 9B03 8001             	dc.b	nD2, $03, nD2, $03, nRst, $01
00088E60 E109                       	smpsAlterNote       $09
00088E62 9E03                       	dc.b	nF2, $03
00088E64 E10B                       	smpsAlterNote       $0B
00088E66 9603 8001                  	dc.b	nA1, $03, nRst, $01
00088E6A E107                       	smpsAlterNote       $07
00088E6C 9B02 8001 9B03             	dc.b	nD2, $02, nRst, $01, nD2, $03
00088E72 E10B                       	smpsAlterNote       $0B
00088E74 A203 8001                  	dc.b	nA2, $03, nRst, $01
00088E78 E107                       	smpsAlterNote       $07
00088E7A 9B03                       	dc.b	nD2, $03
00088E7C E11A                       	smpsAlterNote       $1A
00088E7E A301                       	dc.b	nBb2, $01
00088E80 E1F9                       	smpsAlterNote       $F9
00088E82 E7A4 01                    	dc.b	smpsNoAttack, nB2, $01
00088E85 E1FF                       	smpsAlterNote       $FF
00088E87 E701                       	dc.b	smpsNoAttack, $01
00088E89 E111                       	smpsAlterNote       $11
00088E8B E701                       	dc.b	smpsNoAttack, $01
00088E8D E106                       	smpsAlterNote       $06
00088E8F E7A5 03                    	dc.b	smpsNoAttack, nC3, $03
00088E92 E107                       	smpsAlterNote       $07
00088E94 9B03                       	dc.b	nD2, $03
00088E96 E108                       	smpsAlterNote       $08
00088E98 9C07 9C03 8001             	dc.b	nEb2, $07, nEb2, $03, nRst, $01
00088E9E E109                       	smpsAlterNote       $09
00088EA0 A003                       	dc.b	nG2, $03
00088EA2 E1F0                       	smpsAlterNote       $F0
00088EA4 A501                       	dc.b	nC3, $01
00088EA6 E106                       	smpsAlterNote       $06
00088EA8 E705 8001                  	dc.b	smpsNoAttack, $05, nRst, $01
00088EAC E109                       	smpsAlterNote       $09
00088EAE A006 8001                  	dc.b	nG2, $06, nRst, $01
00088EB2 E108                       	smpsAlterNote       $08
00088EB4 9C03                       	dc.b	nEb2, $03
00088EB6 E107                       	smpsAlterNote       $07
00088EB8 9B03 8001 9B03             	dc.b	nD2, $03, nRst, $01, nD2, $03
00088EBE E10B                       	smpsAlterNote       $0B
00088EC0 A203 8001                  	dc.b	nA2, $03, nRst, $01
00088EC4 E107                       	smpsAlterNote       $07
00088EC6 9B02 8001                  	dc.b	nD2, $02, nRst, $01
00088ECA E11A                       	smpsAlterNote       $1A
00088ECC A301                       	dc.b	nBb2, $01
00088ECE E1F9                       	smpsAlterNote       $F9
00088ED0 E7A4 01                    	dc.b	smpsNoAttack, nB2, $01
00088ED3 E107                       	smpsAlterNote       $07
00088ED5 E701                       	dc.b	smpsNoAttack, $01
00088ED7 E1FB                       	smpsAlterNote       $FB
00088ED9 E7A5 01                    	dc.b	smpsNoAttack, nC3, $01
00088EDC E106                       	smpsAlterNote       $06
00088EDE E702 8001                  	dc.b	smpsNoAttack, $02, nRst, $01
00088EE2 E107                       	smpsAlterNote       $07
00088EE4 9B03 A707 9B03 8001        	dc.b	nD2, $03, nD3, $07, nD2, $03, nRst, $01
00088EEC E1EC                       	smpsAlterNote       $EC
00088EEE A101                       	dc.b	nAb2, $01
00088EF0 E108                       	smpsAlterNote       $08
00088EF2 E701                       	dc.b	smpsNoAttack, $01
00088EF4 E1E7                       	smpsAlterNote       $E7
00088EF6 E7A2 01                    	dc.b	smpsNoAttack, nA2, $01
00088EF9 E1F5                       	smpsAlterNote       $F5
00088EFB E701                       	dc.b	smpsNoAttack, $01
00088EFD E10B                       	smpsAlterNote       $0B
00088EFF E702                       	dc.b	smpsNoAttack, $02
00088F01 E107                       	smpsAlterNote       $07
00088F03 9B03 8001 A703             	dc.b	nD2, $03, nRst, $01, nD3, $03
00088F09 E106                       	smpsAlterNote       $06
00088F0B 9903 8001 A503             	dc.b	nC2, $03, nRst, $01, nC3, $03
00088F11 E10C                       	smpsAlterNote       $0C
00088F13 9703 8001 9702 8001        	dc.b	nBb1, $03, nRst, $01, nBb1, $02, nRst, $01
00088F1B E109                       	smpsAlterNote       $09
00088F1D 9E03                       	dc.b	nF2, $03
00088F1F E10C                       	smpsAlterNote       $0C
00088F21 9703 8001                  	dc.b	nBb1, $03, nRst, $01
00088F25 E1EA                       	smpsAlterNote       $EA
00088F27 A201                       	dc.b	nA2, $01
00088F29 E106                       	smpsAlterNote       $06
00088F2B E701                       	dc.b	smpsNoAttack, $01
00088F2D E114                       	smpsAlterNote       $14
00088F2F E701                       	dc.b	smpsNoAttack, $01
00088F31 E1F0                       	smpsAlterNote       $F0
00088F33 E7A3 01                    	dc.b	smpsNoAttack, nBb2, $01
00088F36 E10C                       	smpsAlterNote       $0C
00088F38 E702 8001 9702 8001 A306+  	dc.b	smpsNoAttack, $02, nRst, $01, nBb1, $02, nRst, $01, nBb2, $06, nRst, $01
00088F44 9703                       	dc.b	nBb1, $03
00088F46 E116                       	smpsAlterNote       $16
00088F48 9C01                       	dc.b	nEb2, $01
00088F4A E105                       	smpsAlterNote       $05
00088F4C E79D 01                    	dc.b	smpsNoAttack, nE2, $01
00088F4F E113                       	smpsAlterNote       $13
00088F51 E701                       	dc.b	smpsNoAttack, $01
00088F53 E1FF                       	smpsAlterNote       $FF
00088F55 E79E 01                    	dc.b	smpsNoAttack, nF2, $01
00088F58 E109                       	smpsAlterNote       $09
00088F5A E703                       	dc.b	smpsNoAttack, $03
00088F5C E10C                       	smpsAlterNote       $0C
00088F5E 9703 8001 9702 8001 A303+  	dc.b	nBb1, $03, nRst, $01, nBb1, $02, nRst, $01, nBb2, $03, nBb1, $03
00088F6A 8001 9703 9703 8001        	dc.b	nRst, $01, nBb1, $03, nBb1, $03, nRst, $01
00088F72 E109                       	smpsAlterNote       $09
00088F74 9E03                       	dc.b	nF2, $03
00088F76 E10C                       	smpsAlterNote       $0C
00088F78 9703 8001                  	dc.b	nBb1, $03, nRst, $01
00088F7C E1EA                       	smpsAlterNote       $EA
00088F7E A201                       	dc.b	nA2, $01
00088F80 E106                       	smpsAlterNote       $06
00088F82 E701                       	dc.b	smpsNoAttack, $01
00088F84 E1E2                       	smpsAlterNote       $E2
00088F86 E7A3 01                    	dc.b	smpsNoAttack, nBb2, $01
00088F89 E1F0                       	smpsAlterNote       $F0
00088F8B E701                       	dc.b	smpsNoAttack, $01
00088F8D E10C                       	smpsAlterNote       $0C
00088F8F E702 9703 8001 A306 8001+  	dc.b	smpsNoAttack, $02, nBb1, $03, nRst, $01, nBb2, $06, nRst, $01, nBb1, $03
00088F9B E116                       	smpsAlterNote       $16
00088F9D 9C01                       	dc.b	nEb2, $01
00088F9F E105                       	smpsAlterNote       $05
00088FA1 E79D 01                    	dc.b	smpsNoAttack, nE2, $01
00088FA4 E1F1                       	smpsAlterNote       $F1
00088FA6 E79E 01                    	dc.b	smpsNoAttack, nF2, $01
00088FA9 E1FF                       	smpsAlterNote       $FF
00088FAB E701                       	dc.b	smpsNoAttack, $01
00088FAD E109                       	smpsAlterNote       $09
00088FAF E702 8001                  	dc.b	smpsNoAttack, $02, nRst, $01
00088FB3 E10C                       	smpsAlterNote       $0C
00088FB5 9703 9703 8001 A303 9703+  	dc.b	nBb1, $03, nBb1, $03, nRst, $01, nBb2, $03, nBb1, $03, nRst, $04
00088FC1 E106                       	smpsAlterNote       $06
00088FC3 9903                       	dc.b	nC2, $03
00088FC5 E107                       	smpsAlterNote       $07
00088FC7 9B03 8001                  	dc.b	nD2, $03, nRst, $01
00088FCB E109                       	smpsAlterNote       $09
00088FCD 8003 940D 8004             	dc.b	nRst, $03, nG1, $0D, nRst, $04
00088FD3 E107                       	smpsAlterNote       $07
00088FD5 9B03 8001                  	dc.b	nD2, $03, nRst, $01
00088FD9 E108                       	smpsAlterNote       $08
00088FDB 9D03                       	dc.b	nE2, $03
00088FDD E10B                       	smpsAlterNote       $0B
00088FDF 8004 960D 8004             	dc.b	nRst, $04, nA1, $0D, nRst, $04
00088FE5 E109                       	smpsAlterNote       $09
00088FE7 9E03 A003 8001             	dc.b	nF2, $03, nG2, $03, nRst, $01
00088FED E10C                       	smpsAlterNote       $0C
00088FEF 8003 970D 8001             	dc.b	nRst, $03, nBb1, $0D, nRst, $01
00088FF5 E106                       	smpsAlterNote       $06
00088FF7 9903                       	dc.b	nC2, $03
00088FF9 E11A                       	smpsAlterNote       $1A
00088FFB A301                       	dc.b	nBb2, $01
00088FFD E1F9                       	smpsAlterNote       $F9
00088FFF E7A4 01                    	dc.b	smpsNoAttack, nB2, $01
00089002 E1FF                       	smpsAlterNote       $FF
00089004 E701                       	dc.b	smpsNoAttack, $01
00089006 E111                       	smpsAlterNote       $11
00089008 E701                       	dc.b	smpsNoAttack, $01
0008900A E106                       	smpsAlterNote       $06
0008900C E7A5 0399 0380 04          	dc.b	smpsNoAttack, nC3, $03, nC2, $03, nRst, $04
00089013 E109                       	smpsAlterNote       $09
00089015 A003                       	dc.b	nG2, $03
00089017 E106                       	smpsAlterNote       $06
00089019 9907                       	dc.b	nC2, $07
0008901B E107                       	smpsAlterNote       $07
0008901D 9B03 8001 9B02 8001        	dc.b	nD2, $03, nRst, $01, nD2, $02, nRst, $01
00089025 E10B                       	smpsAlterNote       $0B
00089027 A203                       	dc.b	nA2, $03
00089029 E107                       	smpsAlterNote       $07
0008902B 9B03 8001                  	dc.b	nD2, $03, nRst, $01
0008902F E1F2                       	smpsAlterNote       $F2
00089031 A401                       	dc.b	nB2, $01
00089033 E1F9                       	smpsAlterNote       $F9
00089035 E701                       	dc.b	smpsNoAttack, $01
00089037 E107                       	smpsAlterNote       $07
00089039 E701                       	dc.b	smpsNoAttack, $01
0008903B E1FB                       	smpsAlterNote       $FB
0008903D E7A5 01                    	dc.b	smpsNoAttack, nC3, $01
00089040 E106                       	smpsAlterNote       $06
00089042 E702 8001                  	dc.b	smpsNoAttack, $02, nRst, $01
00089046 E107                       	smpsAlterNote       $07
00089048 9B03                       	dc.b	nD2, $03
0008904A E108                       	smpsAlterNote       $08
0008904C 9C06 8001 A803             	dc.b	nEb2, $06, nRst, $01, nEb3, $03
00089052 E109                       	smpsAlterNote       $09
00089054 A003 8001                  	dc.b	nG2, $03, nRst, $01
00089058 E1F2                       	smpsAlterNote       $F2
0008905A A401                       	dc.b	nB2, $01
0008905C E1F9                       	smpsAlterNote       $F9
0008905E E701                       	dc.b	smpsNoAttack, $01
00089060 E107                       	smpsAlterNote       $07
00089062 E701                       	dc.b	smpsNoAttack, $01
00089064 E1FB                       	smpsAlterNote       $FB
00089066 E7A5 01                    	dc.b	smpsNoAttack, nC3, $01
00089069 E106                       	smpsAlterNote       $06
0008906B E702 8001                  	dc.b	smpsNoAttack, $02, nRst, $01
0008906F E108                       	smpsAlterNote       $08
00089071 9C06 8001                  	dc.b	nEb2, $06, nRst, $01
00089075 E10C                       	smpsAlterNote       $0C
00089077 A302 8001                  	dc.b	nBb2, $02, nRst, $01
0008907B E107                       	smpsAlterNote       $07
0008907D 9B03 9B03 8001             	dc.b	nD2, $03, nD2, $03, nRst, $01
00089083 E10B                       	smpsAlterNote       $0B
00089085 A203                       	dc.b	nA2, $03
00089087 E107                       	smpsAlterNote       $07
00089089 9B03 8001                  	dc.b	nD2, $03, nRst, $01
0008908D E1F2                       	smpsAlterNote       $F2
0008908F A401                       	dc.b	nB2, $01
00089091 E1FF                       	smpsAlterNote       $FF
00089093 E701                       	dc.b	smpsNoAttack, $01
00089095 E107                       	smpsAlterNote       $07
00089097 E701                       	dc.b	smpsNoAttack, $01
00089099 E1FB                       	smpsAlterNote       $FB
0008909B E7A5 01                    	dc.b	smpsNoAttack, nC3, $01
0008909E E106                       	smpsAlterNote       $06
000890A0 E702 8001                  	dc.b	smpsNoAttack, $02, nRst, $01
000890A4 E107                       	smpsAlterNote       $07
000890A6 9B02 8001                  	dc.b	nD2, $02, nRst, $01
000890AA E108                       	smpsAlterNote       $08
000890AC 9C06 8001 A803             	dc.b	nEb2, $06, nRst, $01, nEb3, $03
000890B2 E109                       	smpsAlterNote       $09
000890B4 A003 8001                  	dc.b	nG2, $03, nRst, $01
000890B8 E1F2                       	smpsAlterNote       $F2
000890BA A401                       	dc.b	nB2, $01
000890BC E1FF                       	smpsAlterNote       $FF
000890BE E701                       	dc.b	smpsNoAttack, $01
000890C0 E111                       	smpsAlterNote       $11
000890C2 E701                       	dc.b	smpsNoAttack, $01
000890C4 E1FB                       	smpsAlterNote       $FB
000890C6 E7A5 01                    	dc.b	smpsNoAttack, nC3, $01
000890C9 E106                       	smpsAlterNote       $06
000890CB E702                       	dc.b	smpsNoAttack, $02
000890CD E108                       	smpsAlterNote       $08
000890CF 9C07                       	dc.b	nEb2, $07
000890D1 E10C                       	smpsAlterNote       $0C
000890D3 A303 8001                  	dc.b	nBb2, $03, nRst, $01
000890D7 E107                       	smpsAlterNote       $07
000890D9 9B03 9B03 8001             	dc.b	nD2, $03, nD2, $03, nRst, $01
000890DF E10B                       	smpsAlterNote       $0B
000890E1 A202 8001                  	dc.b	nA2, $02, nRst, $01
000890E5 E107                       	smpsAlterNote       $07
000890E7 9B03                       	dc.b	nD2, $03
000890E9 E11A                       	smpsAlterNote       $1A
000890EB A301                       	dc.b	nBb2, $01
000890ED E1F2                       	smpsAlterNote       $F2
000890EF E7A4 01                    	dc.b	smpsNoAttack, nB2, $01
000890F2 E1FF                       	smpsAlterNote       $FF
000890F4 E701                       	dc.b	smpsNoAttack, $01
000890F6 E111                       	smpsAlterNote       $11
000890F8 E701                       	dc.b	smpsNoAttack, $01
000890FA E106                       	smpsAlterNote       $06
000890FC E7A5 03                    	dc.b	smpsNoAttack, nC3, $03
000890FF E107                       	smpsAlterNote       $07
00089101 9B03 8001                  	dc.b	nD2, $03, nRst, $01
00089105 E108                       	smpsAlterNote       $08
00089107 9C06 8001 A802 8001        	dc.b	nEb2, $06, nRst, $01, nEb3, $02, nRst, $01
0008910F E109                       	smpsAlterNote       $09
00089111 A003                       	dc.b	nG2, $03
00089113 E11A                       	smpsAlterNote       $1A
00089115 A301                       	dc.b	nBb2, $01
00089117 E1F2                       	smpsAlterNote       $F2
00089119 E7A4 01                    	dc.b	smpsNoAttack, nB2, $01
0008911C E1FF                       	smpsAlterNote       $FF
0008911E E701                       	dc.b	smpsNoAttack, $01
00089120 E111                       	smpsAlterNote       $11
00089122 E701                       	dc.b	smpsNoAttack, $01
00089124 E106                       	smpsAlterNote       $06
00089126 E7A5 03                    	dc.b	smpsNoAttack, nC3, $03
00089129 E108                       	smpsAlterNote       $08
0008912B 9C07                       	dc.b	nEb2, $07
0008912D E10C                       	smpsAlterNote       $0C
0008912F A303 8001                  	dc.b	nBb2, $03, nRst, $01
00089133 E107                       	smpsAlterNote       $07
00089135 9B02 8001 9B03 9B03 8001+  	dc.b	nD2, $02, nRst, $01, nD2, $03, nD2, $03, nRst, $01, nD2, $03
00089141 9B03 8001 9B03 9B03 8001   	dc.b	nD2, $03, nRst, $01, nD2, $03, nD2, $03, nRst, $01
0008914B E108                       	smpsAlterNote       $08
0008914D 9C06                       	dc.b	nEb2, $06
0008914F E10C                       	smpsAlterNote       $0C
00089151 9703 8001                  	dc.b	nBb1, $03, nRst, $01
00089155 E108                       	smpsAlterNote       $08
00089157 9C03                       	dc.b	nEb2, $03
00089159 E109                       	smpsAlterNote       $09
0008915B A003 8001                  	dc.b	nG2, $03, nRst, $01
0008915F E10C                       	smpsAlterNote       $0C
00089161 A302 8001 A303 8007        	dc.b	nBb2, $02, nRst, $01, nBb2, $03, nRst, $07
00089169 E107                       	smpsAlterNote       $07
0008916B 9B03 8001                  	dc.b	nD2, $03, nRst, $01
0008916F F6F4 F8                    	smpsJump            music84_Jump04
00089172                            
00089172                            ; FM2 Data
00089172                            music84_FM2:
00089172 E0C0                       	smpsPan             panCenter, $00
00089176 E10B                       	smpsAlterNote       $0B
00089178 C603 8007                  	dc.b	nA5, $03, nRst, $07
0008917C E109                       	smpsAlterNote       $09
0008917E C403 800B                  	dc.b	nG5, $03, nRst, $0B
00089182 E108                       	smpsAlterNote       $08
00089184 C103 8004                  	dc.b	nE5, $03, nRst, $04
0008918A E080                       	smpsPan             panLeft, $00
0008918C E10C                       	smpsAlterNote       $0C
0008918E E6F9                       	smpsAlterVol        $F9
00089190 C703                       	dc.b	nBb5, $03
00089192 E10B                       	smpsAlterNote       $0B
00089194 C603 8001                  	dc.b	nA5, $03, nRst, $01
00089198 E109                       	smpsAlterNote       $09
0008919A C402 8001 C203             	dc.b	nG5, $02, nRst, $01, nF5, $03
000891A0 E108                       	smpsAlterNote       $08
000891A2 C103 8001                  	dc.b	nE5, $03, nRst, $01
000891A6 E106                       	smpsAlterNote       $06
000891A8 BD03                       	dc.b	nC5, $03
000891AA E10B                       	smpsAlterNote       $0B
000891AC BA03 8001                  	dc.b	nA4, $03, nRst, $01
000891B2 E0C0                       	smpsPan             panCenter, $00
000891B4 E107                       	smpsAlterNote       $07
000891B6 E606                       	smpsAlterVol        $06
000891B8 BF03                       	dc.b	nD5, $03
000891BA                            
000891BA                            music84_Jump03:
000891BA E108                       	smpsAlterNote       $08
000891BC C103 8001                  	dc.b	nE5, $03, nRst, $01
000891C0 E109                       	smpsAlterNote       $09
000891C2 C202 8001 C403             	dc.b	nF5, $02, nRst, $01, nG5, $03
000891C8 E10B                       	smpsAlterNote       $0B
000891CA C607                       	dc.b	nA5, $07
000891CC E107                       	smpsAlterNote       $07
000891CE BF03 8001                  	dc.b	nD5, $03, nRst, $01
000891D2 E106                       	smpsAlterNote       $06
000891D4 C90D                       	dc.b	nC6, $0D
000891D6 E100                       	smpsAlterNote       $00
000891D8 E701                       	dc.b	smpsNoAttack, $01
000891DA E1FF                       	smpsAlterNote       $FF
000891DC E701                       	dc.b	smpsNoAttack, $01
000891DE E103                       	smpsAlterNote       $03
000891E0 E701                       	dc.b	smpsNoAttack, $01
000891E2 E109                       	smpsAlterNote       $09
000891E4 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
000891E8 E106                       	smpsAlterNote       $06
000891EA E701                       	dc.b	smpsNoAttack, $01
000891EC E100                       	smpsAlterNote       $00
000891EE E701                       	dc.b	smpsNoAttack, $01
000891F0 E10C                       	smpsAlterNote       $0C
000891F2 C703 8001                  	dc.b	nBb5, $03, nRst, $01
000891F6 E10B                       	smpsAlterNote       $0B
000891F8 C603                       	dc.b	nA5, $03
000891FA E109                       	smpsAlterNote       $09
000891FC C403 8001                  	dc.b	nG5, $03, nRst, $01
00089200 E10B                       	smpsAlterNote       $0B
00089202 C60D                       	dc.b	nA5, $0D
00089204 E105                       	smpsAlterNote       $05
00089206 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008920A E10B                       	smpsAlterNote       $0B
0008920C E701                       	dc.b	smpsNoAttack, $01
0008920E E10E                       	smpsAlterNote       $0E
00089210 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00089214 E108                       	smpsAlterNote       $08
00089216 E701                       	dc.b	smpsNoAttack, $01
00089218 E104                       	smpsAlterNote       $04
0008921A E701                       	dc.b	smpsNoAttack, $01
0008921C E105                       	smpsAlterNote       $05
0008921E E701                       	dc.b	smpsNoAttack, $01
00089220 E10B                       	smpsAlterNote       $0B
00089222 E701                       	dc.b	smpsNoAttack, $01
00089224 E10F                       	smpsAlterNote       $0F
00089226 E701                       	dc.b	smpsNoAttack, $01
00089228 E10B                       	smpsAlterNote       $0B
0008922A E701                       	dc.b	smpsNoAttack, $01
0008922C E108                       	smpsAlterNote       $08
0008922E E701                       	dc.b	smpsNoAttack, $01
00089230 E104                       	smpsAlterNote       $04
00089232 E701                       	dc.b	smpsNoAttack, $01
00089234 E108                       	smpsAlterNote       $08
00089236 E701                       	dc.b	smpsNoAttack, $01
00089238 E10E                       	smpsAlterNote       $0E
0008923A E701                       	dc.b	smpsNoAttack, $01
0008923C E10F                       	smpsAlterNote       $0F
0008923E E701                       	dc.b	smpsNoAttack, $01
00089240 E10B                       	smpsAlterNote       $0B
00089242 E701                       	dc.b	smpsNoAttack, $01
00089244 E105                       	smpsAlterNote       $05
00089246 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008924A E108                       	smpsAlterNote       $08
0008924C E701                       	dc.b	smpsNoAttack, $01
0008924E E10E                       	smpsAlterNote       $0E
00089250 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00089254 E108                       	smpsAlterNote       $08
00089256 E701                       	dc.b	smpsNoAttack, $01
00089258 E105                       	smpsAlterNote       $05
0008925A E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008925E E10B                       	smpsAlterNote       $0B
00089260 E701                       	dc.b	smpsNoAttack, $01
00089262 E10F                       	smpsAlterNote       $0F
00089264 E701 800E                  	dc.b	smpsNoAttack, $01, nRst, $0E
00089268 E107                       	smpsAlterNote       $07
0008926A BF03 8001                  	dc.b	nD5, $03, nRst, $01
0008926E E108                       	smpsAlterNote       $08
00089270 C103                       	dc.b	nE5, $03
00089272 E109                       	smpsAlterNote       $09
00089274 C203 8001 C402 8001        	dc.b	nF5, $03, nRst, $01, nG5, $02, nRst, $01
0008927C E10B                       	smpsAlterNote       $0B
0008927E C606 8001                  	dc.b	nA5, $06, nRst, $01
00089282 E107                       	smpsAlterNote       $07
00089284 BF03                       	dc.b	nD5, $03
00089286 E106                       	smpsAlterNote       $06
00089288 C90D 8001                  	dc.b	nC6, $0D, nRst, $01
0008928C E107                       	smpsAlterNote       $07
0008928E CB03                       	dc.b	nD6, $03
00089290 E10C                       	smpsAlterNote       $0C
00089292 C704 8001                  	dc.b	nBb5, $04, nRst, $01
00089296 E10B                       	smpsAlterNote       $0B
00089298 C604 8001                  	dc.b	nA5, $04, nRst, $01
0008929C E109                       	smpsAlterNote       $09
0008929E C404                       	dc.b	nG5, $04
000892A0 E10B                       	smpsAlterNote       $0B
000892A2 C60D                       	dc.b	nA5, $0D
000892A4 E108                       	smpsAlterNote       $08
000892A6 E701                       	dc.b	smpsNoAttack, $01
000892A8 E104                       	smpsAlterNote       $04
000892AA E701                       	dc.b	smpsNoAttack, $01
000892AC E108                       	smpsAlterNote       $08
000892AE E701                       	dc.b	smpsNoAttack, $01
000892B0 E10B                       	smpsAlterNote       $0B
000892B2 E701                       	dc.b	smpsNoAttack, $01
000892B4 E10F                       	smpsAlterNote       $0F
000892B6 E701                       	dc.b	smpsNoAttack, $01
000892B8 E10B                       	smpsAlterNote       $0B
000892BA E701                       	dc.b	smpsNoAttack, $01
000892BC E105                       	smpsAlterNote       $05
000892BE E701                       	dc.b	smpsNoAttack, $01
000892C0 E104                       	smpsAlterNote       $04
000892C2 E701                       	dc.b	smpsNoAttack, $01
000892C4 E108                       	smpsAlterNote       $08
000892C6 E701                       	dc.b	smpsNoAttack, $01
000892C8 E10E                       	smpsAlterNote       $0E
000892CA E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
000892CE E10B                       	smpsAlterNote       $0B
000892D0 E701                       	dc.b	smpsNoAttack, $01
000892D2 E105                       	smpsAlterNote       $05
000892D4 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
000892D8 E10B                       	smpsAlterNote       $0B
000892DA E701                       	dc.b	smpsNoAttack, $01
000892DC E10E                       	smpsAlterNote       $0E
000892DE E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
000892E2 E108                       	smpsAlterNote       $08
000892E4 E701                       	dc.b	smpsNoAttack, $01
000892E6 E104                       	smpsAlterNote       $04
000892E8 E701                       	dc.b	smpsNoAttack, $01
000892EA E105                       	smpsAlterNote       $05
000892EC E701                       	dc.b	smpsNoAttack, $01
000892EE E10B                       	smpsAlterNote       $0B
000892F0 E701                       	dc.b	smpsNoAttack, $01
000892F2 E10F                       	smpsAlterNote       $0F
000892F4 E701                       	dc.b	smpsNoAttack, $01
000892F6 E10B                       	smpsAlterNote       $0B
000892F8 E701                       	dc.b	smpsNoAttack, $01
000892FA E108                       	smpsAlterNote       $08
000892FC E701                       	dc.b	smpsNoAttack, $01
000892FE E105                       	smpsAlterNote       $05
00089300 8001                       	dc.b	nRst, $01
00089302 E109                       	smpsAlterNote       $09
00089304 C401                       	dc.b	nG5, $01
00089306 E10B                       	smpsAlterNote       $0B
00089308 E7C5 02C6 0D80 01C6 04     	dc.b	smpsNoAttack, nAb5, $02, nA5, $0D, nRst, $01, nA5, $04
00089311 E109                       	smpsAlterNote       $09
00089313 C404 8001                  	dc.b	nG5, $04, nRst, $01
00089317 E10B                       	smpsAlterNote       $0B
00089319 C604 8001                  	dc.b	nA5, $04, nRst, $01
0008931D E107                       	smpsAlterNote       $07
0008931F BF0D                       	dc.b	nD5, $0D
00089321 E101                       	smpsAlterNote       $01
00089323 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00089327 E104                       	smpsAlterNote       $04
00089329 E701                       	dc.b	smpsNoAttack, $01
0008932B E10A                       	smpsAlterNote       $0A
0008932D E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00089331 E104                       	smpsAlterNote       $04
00089333 E701                       	dc.b	smpsNoAttack, $01
00089335 E101                       	smpsAlterNote       $01
00089337 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008933B E107                       	smpsAlterNote       $07
0008933D E701                       	dc.b	smpsNoAttack, $01
0008933F E10B                       	smpsAlterNote       $0B
00089341 E701 8001                  	dc.b	smpsNoAttack, $01, nRst, $01
00089345 E108                       	smpsAlterNote       $08
00089347 C101                       	dc.b	nE5, $01
00089349 E109                       	smpsAlterNote       $09
0008934B E7C2 01C4 01               	dc.b	smpsNoAttack, nF5, $01, nG5, $01
00089350 E10B                       	smpsAlterNote       $0B
00089352 C606 8001 C606 8001        	dc.b	nA5, $06, nRst, $01, nA5, $06, nRst, $01
0008935A E108                       	smpsAlterNote       $08
0008935C CD06                       	dc.b	nE6, $06
0008935E E109                       	smpsAlterNote       $09
00089360 CE07                       	dc.b	nF6, $07
00089362 E108                       	smpsAlterNote       $08
00089364 CD03 8001                  	dc.b	nE6, $03, nRst, $01
00089368 E106                       	smpsAlterNote       $06
0008936A C903                       	dc.b	nC6, $03
0008936C E109                       	smpsAlterNote       $09
0008936E C403 8001                  	dc.b	nG5, $03, nRst, $01
00089372 E10C                       	smpsAlterNote       $0C
00089374 C70D                       	dc.b	nBb5, $0D
00089376 E106                       	smpsAlterNote       $06
00089378 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008937C E109                       	smpsAlterNote       $09
0008937E E701                       	dc.b	smpsNoAttack, $01
00089380 E10F                       	smpsAlterNote       $0F
00089382 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00089386 E109                       	smpsAlterNote       $09
00089388 E701                       	dc.b	smpsNoAttack, $01
0008938A E106                       	smpsAlterNote       $06
0008938C E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00089390 E10C                       	smpsAlterNote       $0C
00089392 E701                       	dc.b	smpsNoAttack, $01
00089394 E110                       	smpsAlterNote       $10
00089396 E701 8001                  	dc.b	smpsNoAttack, $01, nRst, $01
0008939A E10B                       	smpsAlterNote       $0B
0008939C C606 C50E                  	dc.b	nA5, $06, nAb5, $0E
000893A0 E105                       	smpsAlterNote       $05
000893A2 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
000893A6 E10B                       	smpsAlterNote       $0B
000893A8 E701                       	dc.b	smpsNoAttack, $01
000893AA E10E                       	smpsAlterNote       $0E
000893AC E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
000893B0 E108                       	smpsAlterNote       $08
000893B2 E701                       	dc.b	smpsNoAttack, $01
000893B4 E104                       	smpsAlterNote       $04
000893B6 E701                       	dc.b	smpsNoAttack, $01
000893B8 E105                       	smpsAlterNote       $05
000893BA E701                       	dc.b	smpsNoAttack, $01
000893BC E10B                       	smpsAlterNote       $0B
000893BE E701                       	dc.b	smpsNoAttack, $01
000893C0 E10F                       	smpsAlterNote       $0F
000893C2 E701                       	dc.b	smpsNoAttack, $01
000893C4 E10B                       	smpsAlterNote       $0B
000893C6 E701                       	dc.b	smpsNoAttack, $01
000893C8 E108                       	smpsAlterNote       $08
000893CA E701                       	dc.b	smpsNoAttack, $01
000893CC E104                       	smpsAlterNote       $04
000893CE E701                       	dc.b	smpsNoAttack, $01
000893D0 E108                       	smpsAlterNote       $08
000893D2 E701                       	dc.b	smpsNoAttack, $01
000893D4 E10E                       	smpsAlterNote       $0E
000893D6 E701                       	dc.b	smpsNoAttack, $01
000893D8 E10F                       	smpsAlterNote       $0F
000893DA E701                       	dc.b	smpsNoAttack, $01
000893DC E10B                       	smpsAlterNote       $0B
000893DE E701                       	dc.b	smpsNoAttack, $01
000893E0 E105                       	smpsAlterNote       $05
000893E2 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
000893E6 E108                       	smpsAlterNote       $08
000893E8 E701                       	dc.b	smpsNoAttack, $01
000893EA E10E                       	smpsAlterNote       $0E
000893EC E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
000893F0 E108                       	smpsAlterNote       $08
000893F2 E701                       	dc.b	smpsNoAttack, $01
000893F4 E105                       	smpsAlterNote       $05
000893F6 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
000893FA E10B                       	smpsAlterNote       $0B
000893FC E701                       	dc.b	smpsNoAttack, $01
000893FE E10F                       	smpsAlterNote       $0F
00089400 E701                       	dc.b	smpsNoAttack, $01
00089402 E10E                       	smpsAlterNote       $0E
00089404 E701                       	dc.b	smpsNoAttack, $01
00089406 E108                       	smpsAlterNote       $08
00089408 E701                       	dc.b	smpsNoAttack, $01
0008940A E104                       	smpsAlterNote       $04
0008940C E701                       	dc.b	smpsNoAttack, $01
0008940E E108                       	smpsAlterNote       $08
00089410 E701                       	dc.b	smpsNoAttack, $01
00089412 E10E                       	smpsAlterNote       $0E
00089414 E701                       	dc.b	smpsNoAttack, $01
00089416 E10F                       	smpsAlterNote       $0F
00089418 E701                       	dc.b	smpsNoAttack, $01
0008941A E10B                       	smpsAlterNote       $0B
0008941C E701                       	dc.b	smpsNoAttack, $01
0008941E E105                       	smpsAlterNote       $05
00089420 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00089424 E108                       	smpsAlterNote       $08
00089426 E701                       	dc.b	smpsNoAttack, $01
00089428 E10E                       	smpsAlterNote       $0E
0008942A E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008942E E108                       	smpsAlterNote       $08
00089430 E701                       	dc.b	smpsNoAttack, $01
00089432 E105                       	smpsAlterNote       $05
00089434 E701                       	dc.b	smpsNoAttack, $01
00089436 E10B                       	smpsAlterNote       $0B
00089438 C60D                       	dc.b	nA5, $0D
0008943A E108                       	smpsAlterNote       $08
0008943C E701                       	dc.b	smpsNoAttack, $01
0008943E E104                       	smpsAlterNote       $04
00089440 E701                       	dc.b	smpsNoAttack, $01
00089442 E105                       	smpsAlterNote       $05
00089444 E701                       	dc.b	smpsNoAttack, $01
00089446 E10B                       	smpsAlterNote       $0B
00089448 E701                       	dc.b	smpsNoAttack, $01
0008944A E10F                       	smpsAlterNote       $0F
0008944C E701                       	dc.b	smpsNoAttack, $01
0008944E E10B                       	smpsAlterNote       $0B
00089450 E701                       	dc.b	smpsNoAttack, $01
00089452 E108                       	smpsAlterNote       $08
00089454 E701                       	dc.b	smpsNoAttack, $01
00089456 E104                       	smpsAlterNote       $04
00089458 E701                       	dc.b	smpsNoAttack, $01
0008945A E108                       	smpsAlterNote       $08
0008945C E701                       	dc.b	smpsNoAttack, $01
0008945E E10E                       	smpsAlterNote       $0E
00089460 E701                       	dc.b	smpsNoAttack, $01
00089462 E10F                       	smpsAlterNote       $0F
00089464 E701                       	dc.b	smpsNoAttack, $01
00089468 E109                       	smpsAlterNote       $09
0008946A E6FF                       	smpsAlterVol        $FF
0008946C C206 8001 C203 C203 8001   	dc.b	nF5, $06, nRst, $01, nF5, $03, nF5, $03, nRst, $01
00089476 E108                       	smpsAlterNote       $08
00089478 C103 800E                  	dc.b	nE5, $03, nRst, $0E
0008947E E107                       	smpsAlterNote       $07
00089480 E601                       	smpsAlterVol        $01
00089482 BF03                       	dc.b	nD5, $03
00089484 E108                       	smpsAlterNote       $08
00089486 C103 8001                  	dc.b	nE5, $03, nRst, $01
0008948A E109                       	smpsAlterNote       $09
0008948C C203 C403 8001             	dc.b	nF5, $03, nG5, $03, nRst, $01
00089492 E10B                       	smpsAlterNote       $0B
00089494 C606 8001                  	dc.b	nA5, $06, nRst, $01
00089498 E107                       	smpsAlterNote       $07
0008949A BF02 8001                  	dc.b	nD5, $02, nRst, $01
0008949E E106                       	smpsAlterNote       $06
000894A0 C90D                       	dc.b	nC6, $0D
000894A2 E103                       	smpsAlterNote       $03
000894A4 E701                       	dc.b	smpsNoAttack, $01
000894A6 E1FF                       	smpsAlterNote       $FF
000894A8 E701                       	dc.b	smpsNoAttack, $01
000894AA E103                       	smpsAlterNote       $03
000894AC E701                       	dc.b	smpsNoAttack, $01
000894AE E109                       	smpsAlterNote       $09
000894B0 E701                       	dc.b	smpsNoAttack, $01
000894B2 E10A                       	smpsAlterNote       $0A
000894B4 E701                       	dc.b	smpsNoAttack, $01
000894B6 E106                       	smpsAlterNote       $06
000894B8 E701                       	dc.b	smpsNoAttack, $01
000894BA E100                       	smpsAlterNote       $00
000894BC E701                       	dc.b	smpsNoAttack, $01
000894BE E10C                       	smpsAlterNote       $0C
000894C0 C703 8001                  	dc.b	nBb5, $03, nRst, $01
000894C4 E10B                       	smpsAlterNote       $0B
000894C6 C603                       	dc.b	nA5, $03
000894C8 E109                       	smpsAlterNote       $09
000894CA C403 8001                  	dc.b	nG5, $03, nRst, $01
000894CE E10B                       	smpsAlterNote       $0B
000894D0 C60D                       	dc.b	nA5, $0D
000894D2 E105                       	smpsAlterNote       $05
000894D4 E701                       	dc.b	smpsNoAttack, $01
000894D6 E104                       	smpsAlterNote       $04
000894D8 E701                       	dc.b	smpsNoAttack, $01
000894DA E108                       	smpsAlterNote       $08
000894DC E701                       	dc.b	smpsNoAttack, $01
000894DE E10E                       	smpsAlterNote       $0E
000894E0 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
000894E4 E10B                       	smpsAlterNote       $0B
000894E6 E701                       	dc.b	smpsNoAttack, $01
000894E8 E105                       	smpsAlterNote       $05
000894EA E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
000894EE E10B                       	smpsAlterNote       $0B
000894F0 E701                       	dc.b	smpsNoAttack, $01
000894F2 E10E                       	smpsAlterNote       $0E
000894F4 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
000894F8 E108                       	smpsAlterNote       $08
000894FA E701                       	dc.b	smpsNoAttack, $01
000894FC E104                       	smpsAlterNote       $04
000894FE E701                       	dc.b	smpsNoAttack, $01
00089500 E105                       	smpsAlterNote       $05
00089502 E701                       	dc.b	smpsNoAttack, $01
00089504 E10B                       	smpsAlterNote       $0B
00089506 E701                       	dc.b	smpsNoAttack, $01
00089508 E10F                       	smpsAlterNote       $0F
0008950A E701                       	dc.b	smpsNoAttack, $01
0008950C E10B                       	smpsAlterNote       $0B
0008950E E701                       	dc.b	smpsNoAttack, $01
00089510 E108                       	smpsAlterNote       $08
00089512 E701                       	dc.b	smpsNoAttack, $01
00089514 E104                       	smpsAlterNote       $04
00089516 E701                       	dc.b	smpsNoAttack, $01
00089518 E108                       	smpsAlterNote       $08
0008951A E701                       	dc.b	smpsNoAttack, $01
0008951C E10E                       	smpsAlterNote       $0E
0008951E E701                       	dc.b	smpsNoAttack, $01
00089520 E10F                       	smpsAlterNote       $0F
00089522 E701                       	dc.b	smpsNoAttack, $01
00089524 E10B                       	smpsAlterNote       $0B
00089526 E701                       	dc.b	smpsNoAttack, $01
00089528 E105                       	smpsAlterNote       $05
0008952A E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008952E E108                       	smpsAlterNote       $08
00089530 E701                       	dc.b	smpsNoAttack, $01
00089532 E10E                       	smpsAlterNote       $0E
00089534 E701                       	dc.b	smpsNoAttack, $01
00089536 E10F                       	smpsAlterNote       $0F
00089538 800F                       	dc.b	nRst, $0F
0008953A E107                       	smpsAlterNote       $07
0008953C BF02 8001                  	dc.b	nD5, $02, nRst, $01
00089540 E108                       	smpsAlterNote       $08
00089542 C103                       	dc.b	nE5, $03
00089544 E109                       	smpsAlterNote       $09
00089546 C203 8001 C403             	dc.b	nF5, $03, nRst, $01, nG5, $03
0008954C E10B                       	smpsAlterNote       $0B
0008954E C606 8001                  	dc.b	nA5, $06, nRst, $01
00089552 E107                       	smpsAlterNote       $07
00089554 BF03                       	dc.b	nD5, $03
00089556 E106                       	smpsAlterNote       $06
00089558 C90E                       	dc.b	nC6, $0E
0008955A E107                       	smpsAlterNote       $07
0008955C CB03 8001                  	dc.b	nD6, $03, nRst, $01
00089560 E10C                       	smpsAlterNote       $0C
00089562 C704                       	dc.b	nBb5, $04
00089564 E10B                       	smpsAlterNote       $0B
00089566 C604 8001                  	dc.b	nA5, $04, nRst, $01
0008956A E109                       	smpsAlterNote       $09
0008956C C404                       	dc.b	nG5, $04
0008956E E10B                       	smpsAlterNote       $0B
00089570 C60D                       	dc.b	nA5, $0D
00089572 E108                       	smpsAlterNote       $08
00089574 E701                       	dc.b	smpsNoAttack, $01
00089576 E105                       	smpsAlterNote       $05
00089578 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008957C E10B                       	smpsAlterNote       $0B
0008957E E701                       	dc.b	smpsNoAttack, $01
00089580 E10F                       	smpsAlterNote       $0F
00089582 E701                       	dc.b	smpsNoAttack, $01
00089584 E10E                       	smpsAlterNote       $0E
00089586 E701                       	dc.b	smpsNoAttack, $01
00089588 E108                       	smpsAlterNote       $08
0008958A E701                       	dc.b	smpsNoAttack, $01
0008958C E104                       	smpsAlterNote       $04
0008958E E701                       	dc.b	smpsNoAttack, $01
00089590 E108                       	smpsAlterNote       $08
00089592 E701                       	dc.b	smpsNoAttack, $01
00089594 E10B                       	smpsAlterNote       $0B
00089596 E701                       	dc.b	smpsNoAttack, $01
00089598 E10F                       	smpsAlterNote       $0F
0008959A E701                       	dc.b	smpsNoAttack, $01
0008959C E10B                       	smpsAlterNote       $0B
0008959E E701                       	dc.b	smpsNoAttack, $01
000895A0 E105                       	smpsAlterNote       $05
000895A2 E701                       	dc.b	smpsNoAttack, $01
000895A4 E104                       	smpsAlterNote       $04
000895A6 E701                       	dc.b	smpsNoAttack, $01
000895A8 E108                       	smpsAlterNote       $08
000895AA E701                       	dc.b	smpsNoAttack, $01
000895AC E10E                       	smpsAlterNote       $0E
000895AE E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
000895B2 E10B                       	smpsAlterNote       $0B
000895B4 E701                       	dc.b	smpsNoAttack, $01
000895B6 E105                       	smpsAlterNote       $05
000895B8 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
000895BC E10B                       	smpsAlterNote       $0B
000895BE E701                       	dc.b	smpsNoAttack, $01
000895C0 E10E                       	smpsAlterNote       $0E
000895C2 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
000895C6 E108                       	smpsAlterNote       $08
000895C8 E701                       	dc.b	smpsNoAttack, $01
000895CA E105                       	smpsAlterNote       $05
000895CC 8001                       	dc.b	nRst, $01
000895CE E109                       	smpsAlterNote       $09
000895D0 C402                       	dc.b	nG5, $02
000895D2 E10B                       	smpsAlterNote       $0B
000895D4 E7C5 01C6 0EC6 0480 01     	dc.b	smpsNoAttack, nAb5, $01, nA5, $0E, nA5, $04, nRst, $01
000895DD E109                       	smpsAlterNote       $09
000895DF C404                       	dc.b	nG5, $04
000895E1 E10B                       	smpsAlterNote       $0B
000895E3 C604 8001                  	dc.b	nA5, $04, nRst, $01
000895E7 E107                       	smpsAlterNote       $07
000895E9 BF0D                       	dc.b	nD5, $0D
000895EB E101                       	smpsAlterNote       $01
000895ED E701                       	dc.b	smpsNoAttack, $01
000895EF E100                       	smpsAlterNote       $00
000895F1 E701                       	dc.b	smpsNoAttack, $01
000895F3 E104                       	smpsAlterNote       $04
000895F5 E701                       	dc.b	smpsNoAttack, $01
000895F7 E10A                       	smpsAlterNote       $0A
000895F9 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
000895FD E107                       	smpsAlterNote       $07
000895FF E701                       	dc.b	smpsNoAttack, $01
00089601 E101                       	smpsAlterNote       $01
00089603 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00089607 E107                       	smpsAlterNote       $07
00089609 E701                       	dc.b	smpsNoAttack, $01
0008960B E10A                       	smpsAlterNote       $0A
0008960D E701                       	dc.b	smpsNoAttack, $01
0008960F E10B                       	smpsAlterNote       $0B
00089611 8001                       	dc.b	nRst, $01
00089613 E108                       	smpsAlterNote       $08
00089615 C101                       	dc.b	nE5, $01
00089617 E109                       	smpsAlterNote       $09
00089619 E7C2 01C4 01               	dc.b	smpsNoAttack, nF5, $01, nG5, $01
0008961E E10B                       	smpsAlterNote       $0B
00089620 C606 8001 C606 8001        	dc.b	nA5, $06, nRst, $01, nA5, $06, nRst, $01
00089628 E108                       	smpsAlterNote       $08
0008962A CD06 8001                  	dc.b	nE6, $06, nRst, $01
0008962E E109                       	smpsAlterNote       $09
00089630 CE06 8001                  	dc.b	nF6, $06, nRst, $01
00089634 E108                       	smpsAlterNote       $08
00089636 CD02 8001                  	dc.b	nE6, $02, nRst, $01
0008963A E106                       	smpsAlterNote       $06
0008963C C903                       	dc.b	nC6, $03
0008963E E109                       	smpsAlterNote       $09
00089640 C403 8001                  	dc.b	nG5, $03, nRst, $01
00089644 E10C                       	smpsAlterNote       $0C
00089646 C70D                       	dc.b	nBb5, $0D
00089648 E109                       	smpsAlterNote       $09
0008964A E701                       	dc.b	smpsNoAttack, $01
0008964C E105                       	smpsAlterNote       $05
0008964E E701                       	dc.b	smpsNoAttack, $01
00089650 E109                       	smpsAlterNote       $09
00089652 E701                       	dc.b	smpsNoAttack, $01
00089654 E10F                       	smpsAlterNote       $0F
00089656 E701                       	dc.b	smpsNoAttack, $01
00089658 E110                       	smpsAlterNote       $10
0008965A E701                       	dc.b	smpsNoAttack, $01
0008965C E10C                       	smpsAlterNote       $0C
0008965E E701                       	dc.b	smpsNoAttack, $01
00089660 E106                       	smpsAlterNote       $06
00089662 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00089666 E109                       	smpsAlterNote       $09
00089668 E701                       	dc.b	smpsNoAttack, $01
0008966A E10F                       	smpsAlterNote       $0F
0008966C E701                       	dc.b	smpsNoAttack, $01
0008966E E110                       	smpsAlterNote       $10
00089670 8001                       	dc.b	nRst, $01
00089672 E10B                       	smpsAlterNote       $0B
00089674 C606 8001 C50D             	dc.b	nA5, $06, nRst, $01, nAb5, $0D
0008967A E105                       	smpsAlterNote       $05
0008967C E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00089680 E108                       	smpsAlterNote       $08
00089682 E701                       	dc.b	smpsNoAttack, $01
00089684 E10E                       	smpsAlterNote       $0E
00089686 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008968A E108                       	smpsAlterNote       $08
0008968C E701                       	dc.b	smpsNoAttack, $01
0008968E E105                       	smpsAlterNote       $05
00089690 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00089694 E10B                       	smpsAlterNote       $0B
00089696 E701                       	dc.b	smpsNoAttack, $01
00089698 E10F                       	smpsAlterNote       $0F
0008969A E701                       	dc.b	smpsNoAttack, $01
0008969C E10E                       	smpsAlterNote       $0E
0008969E E701                       	dc.b	smpsNoAttack, $01
000896A0 E108                       	smpsAlterNote       $08
000896A2 E701                       	dc.b	smpsNoAttack, $01
000896A4 E104                       	smpsAlterNote       $04
000896A6 E701                       	dc.b	smpsNoAttack, $01
000896A8 E108                       	smpsAlterNote       $08
000896AA E701                       	dc.b	smpsNoAttack, $01
000896AC E10B                       	smpsAlterNote       $0B
000896AE E701                       	dc.b	smpsNoAttack, $01
000896B0 E10F                       	smpsAlterNote       $0F
000896B2 E701                       	dc.b	smpsNoAttack, $01
000896B4 E10B                       	smpsAlterNote       $0B
000896B6 E701                       	dc.b	smpsNoAttack, $01
000896B8 E105                       	smpsAlterNote       $05
000896BA E701                       	dc.b	smpsNoAttack, $01
000896BC E104                       	smpsAlterNote       $04
000896BE E701                       	dc.b	smpsNoAttack, $01
000896C0 E108                       	smpsAlterNote       $08
000896C2 E701                       	dc.b	smpsNoAttack, $01
000896C4 E10E                       	smpsAlterNote       $0E
000896C6 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
000896CA E10B                       	smpsAlterNote       $0B
000896CC E701                       	dc.b	smpsNoAttack, $01
000896CE E105                       	smpsAlterNote       $05
000896D0 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
000896D4 E10B                       	smpsAlterNote       $0B
000896D6 E701                       	dc.b	smpsNoAttack, $01
000896D8 E10E                       	smpsAlterNote       $0E
000896DA E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
000896DE E108                       	smpsAlterNote       $08
000896E0 E701                       	dc.b	smpsNoAttack, $01
000896E2 E104                       	smpsAlterNote       $04
000896E4 E701                       	dc.b	smpsNoAttack, $01
000896E6 E105                       	smpsAlterNote       $05
000896E8 E701                       	dc.b	smpsNoAttack, $01
000896EA E10B                       	smpsAlterNote       $0B
000896EC E701                       	dc.b	smpsNoAttack, $01
000896EE E10F                       	smpsAlterNote       $0F
000896F0 E701                       	dc.b	smpsNoAttack, $01
000896F2 E10B                       	smpsAlterNote       $0B
000896F4 E701                       	dc.b	smpsNoAttack, $01
000896F6 E108                       	smpsAlterNote       $08
000896F8 E701                       	dc.b	smpsNoAttack, $01
000896FA E104                       	smpsAlterNote       $04
000896FC E701                       	dc.b	smpsNoAttack, $01
000896FE E108                       	smpsAlterNote       $08
00089700 E701                       	dc.b	smpsNoAttack, $01
00089702 E10E                       	smpsAlterNote       $0E
00089704 E701                       	dc.b	smpsNoAttack, $01
00089706 E10F                       	smpsAlterNote       $0F
00089708 E701                       	dc.b	smpsNoAttack, $01
0008970A E10B                       	smpsAlterNote       $0B
0008970C E701                       	dc.b	smpsNoAttack, $01
0008970E E105                       	smpsAlterNote       $05
00089710 E701                       	dc.b	smpsNoAttack, $01
00089712 E10B                       	smpsAlterNote       $0B
00089714 C60E                       	dc.b	nA5, $0E
00089716 E105                       	smpsAlterNote       $05
00089718 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008971C E10B                       	smpsAlterNote       $0B
0008971E E701                       	dc.b	smpsNoAttack, $01
00089720 E10E                       	smpsAlterNote       $0E
00089722 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00089726 E108                       	smpsAlterNote       $08
00089728 E701                       	dc.b	smpsNoAttack, $01
0008972A E104                       	smpsAlterNote       $04
0008972C E701                       	dc.b	smpsNoAttack, $01
0008972E E105                       	smpsAlterNote       $05
00089730 E701                       	dc.b	smpsNoAttack, $01
00089732 E10B                       	smpsAlterNote       $0B
00089734 E701                       	dc.b	smpsNoAttack, $01
00089736 E10F                       	smpsAlterNote       $0F
00089738 E701                       	dc.b	smpsNoAttack, $01
0008973A E10B                       	smpsAlterNote       $0B
0008973C E701                       	dc.b	smpsNoAttack, $01
0008973E E108                       	smpsAlterNote       $08
00089740 E701                       	dc.b	smpsNoAttack, $01
00089742 E104                       	smpsAlterNote       $04
00089744 E701                       	dc.b	smpsNoAttack, $01
00089746 E108                       	smpsAlterNote       $08
00089748 E701                       	dc.b	smpsNoAttack, $01
0008974A E10E                       	smpsAlterNote       $0E
0008974C E701                       	dc.b	smpsNoAttack, $01
0008974E E10F                       	smpsAlterNote       $0F
00089750 E701                       	dc.b	smpsNoAttack, $01
00089752 E10B                       	smpsAlterNote       $0B
00089754 E701                       	dc.b	smpsNoAttack, $01
00089756 E105                       	smpsAlterNote       $05
00089758 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008975C E108                       	smpsAlterNote       $08
0008975E E701                       	dc.b	smpsNoAttack, $01
00089760 E10E                       	smpsAlterNote       $0E
00089762 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00089766 E108                       	smpsAlterNote       $08
00089768 E701                       	dc.b	smpsNoAttack, $01
0008976A E105                       	smpsAlterNote       $05
0008976C E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00089770 E10B                       	smpsAlterNote       $0B
00089772 E701                       	dc.b	smpsNoAttack, $01
00089774 E10F                       	smpsAlterNote       $0F
00089776 E701                       	dc.b	smpsNoAttack, $01
00089778 E10E                       	smpsAlterNote       $0E
0008977A E701                       	dc.b	smpsNoAttack, $01
0008977C E108                       	smpsAlterNote       $08
0008977E E701                       	dc.b	smpsNoAttack, $01
00089780 E104                       	smpsAlterNote       $04
00089782 E701                       	dc.b	smpsNoAttack, $01
00089784 E108                       	smpsAlterNote       $08
00089786 E701                       	dc.b	smpsNoAttack, $01
00089788 E10E                       	smpsAlterNote       $0E
0008978A E701                       	dc.b	smpsNoAttack, $01
0008978C E10F                       	smpsAlterNote       $0F
0008978E E701                       	dc.b	smpsNoAttack, $01
00089790 E10B                       	smpsAlterNote       $0B
00089792 E701                       	dc.b	smpsNoAttack, $01
00089794 E105                       	smpsAlterNote       $05
00089796 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008979A E108                       	smpsAlterNote       $08
0008979C E701                       	dc.b	smpsNoAttack, $01
0008979E E10E                       	smpsAlterNote       $0E
000897A0 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
000897A4 E108                       	smpsAlterNote       $08
000897A6 E701                       	dc.b	smpsNoAttack, $01
000897A8 E105                       	smpsAlterNote       $05
000897AA E701                       	dc.b	smpsNoAttack, $01
000897AE E10B                       	smpsAlterNote       $0B
000897B0 E6FD                       	smpsAlterVol        $FD
000897B2 C604 8001                  	dc.b	nA5, $04, nRst, $01
000897B6 E109                       	smpsAlterNote       $09
000897B8 C404                       	dc.b	nG5, $04
000897BA E10B                       	smpsAlterNote       $0B
000897BC C604 8001                  	dc.b	nA5, $04, nRst, $01
000897C0 E107                       	smpsAlterNote       $07
000897C2 BF0A BF03 8001             	dc.b	nD5, $0A, nD5, $03, nRst, $01
000897C8 E10B                       	smpsAlterNote       $0B
000897CA C604                       	dc.b	nA5, $04
000897CC E109                       	smpsAlterNote       $09
000897CE C404 8001                  	dc.b	nG5, $04, nRst, $01
000897D2 E10B                       	smpsAlterNote       $0B
000897D4 C604                       	dc.b	nA5, $04
000897D6 E108                       	smpsAlterNote       $08
000897D8 C10A 8001 C102 8001        	dc.b	nE5, $0A, nRst, $01, nE5, $02, nRst, $01
000897E0 E106                       	smpsAlterNote       $06
000897E2 C904 8001                  	dc.b	nC6, $04, nRst, $01
000897E6 E10C                       	smpsAlterNote       $0C
000897E8 C704                       	dc.b	nBb5, $04
000897EA E10B                       	smpsAlterNote       $0B
000897EC C604 8001                  	dc.b	nA5, $04, nRst, $01
000897F0 E109                       	smpsAlterNote       $09
000897F2 C403 C203 8001 C402 8001   	dc.b	nG5, $03, nF5, $03, nRst, $01, nG5, $02, nRst, $01
000897FC E10B                       	smpsAlterNote       $0B
000897FE C60D                       	dc.b	nA5, $0D
00089800 E108                       	smpsAlterNote       $08
00089802 E701                       	dc.b	smpsNoAttack, $01
00089804 E104                       	smpsAlterNote       $04
00089806 E701                       	dc.b	smpsNoAttack, $01
00089808 E108                       	smpsAlterNote       $08
0008980A E701                       	dc.b	smpsNoAttack, $01
0008980C E10E                       	smpsAlterNote       $0E
0008980E E701                       	dc.b	smpsNoAttack, $01
00089810 E10F                       	smpsAlterNote       $0F
00089812 E701                       	dc.b	smpsNoAttack, $01
00089814 E10B                       	smpsAlterNote       $0B
00089816 E701                       	dc.b	smpsNoAttack, $01
00089818 E105                       	smpsAlterNote       $05
0008981A E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008981E E108                       	smpsAlterNote       $08
00089820 E701                       	dc.b	smpsNoAttack, $01
00089822 E10E                       	smpsAlterNote       $0E
00089824 E701                       	dc.b	smpsNoAttack, $01
00089826 E10F                       	smpsAlterNote       $0F
00089828 8001                       	dc.b	nRst, $01
0008982A E109                       	smpsAlterNote       $09
0008982C C403 C203 8001             	dc.b	nG5, $03, nF5, $03, nRst, $01
00089832 E108                       	smpsAlterNote       $08
00089834 C10D                       	dc.b	nE5, $0D
00089836 E102                       	smpsAlterNote       $02
00089838 E701                       	dc.b	smpsNoAttack, $01
0008983A E101                       	smpsAlterNote       $01
0008983C E701                       	dc.b	smpsNoAttack, $01
0008983E E105                       	smpsAlterNote       $05
00089840 E701                       	dc.b	smpsNoAttack, $01
00089842 E10B                       	smpsAlterNote       $0B
00089844 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00089848 E108                       	smpsAlterNote       $08
0008984A E701                       	dc.b	smpsNoAttack, $01
0008984C E102                       	smpsAlterNote       $02
0008984E E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00089852 E108                       	smpsAlterNote       $08
00089854 E701                       	dc.b	smpsNoAttack, $01
00089856 E10B                       	smpsAlterNote       $0B
00089858 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008985C E105                       	smpsAlterNote       $05
0008985E E701                       	dc.b	smpsNoAttack, $01
00089860 E101                       	smpsAlterNote       $01
00089862 E701                       	dc.b	smpsNoAttack, $01
00089864 E102                       	smpsAlterNote       $02
00089866 E701                       	dc.b	smpsNoAttack, $01
00089868 E108                       	smpsAlterNote       $08
0008986A E701                       	dc.b	smpsNoAttack, $01
0008986C E10C                       	smpsAlterNote       $0C
0008986E E701                       	dc.b	smpsNoAttack, $01
00089870 E108                       	smpsAlterNote       $08
00089872 E701                       	dc.b	smpsNoAttack, $01
00089874 E105                       	smpsAlterNote       $05
00089876 E701                       	dc.b	smpsNoAttack, $01
00089878 E101                       	smpsAlterNote       $01
0008987A E701                       	dc.b	smpsNoAttack, $01
0008987C E105                       	smpsAlterNote       $05
0008987E E701                       	dc.b	smpsNoAttack, $01
00089880 E10B                       	smpsAlterNote       $0B
00089882 E701                       	dc.b	smpsNoAttack, $01
00089884 E10C                       	smpsAlterNote       $0C
00089886 E701                       	dc.b	smpsNoAttack, $01
00089888 E108                       	smpsAlterNote       $08
0008988A E701                       	dc.b	smpsNoAttack, $01
0008988C E102                       	smpsAlterNote       $02
0008988E E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00089892 E105                       	smpsAlterNote       $05
00089894 E701                       	dc.b	smpsNoAttack, $01
00089896 E10B                       	smpsAlterNote       $0B
00089898 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008989C E105                       	smpsAlterNote       $05
0008989E E701                       	dc.b	smpsNoAttack, $01
000898A0 E102                       	smpsAlterNote       $02
000898A2 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
000898A6 E108                       	smpsAlterNote       $08
000898A8 E701                       	dc.b	smpsNoAttack, $01
000898AA E10C                       	smpsAlterNote       $0C
000898AC E701                       	dc.b	smpsNoAttack, $01
000898AE E10B                       	smpsAlterNote       $0B
000898B0 E701                       	dc.b	smpsNoAttack, $01
000898B2 E105                       	smpsAlterNote       $05
000898B4 E701                       	dc.b	smpsNoAttack, $01
000898B6 E101                       	smpsAlterNote       $01
000898B8 E701                       	dc.b	smpsNoAttack, $01
000898BA E105                       	smpsAlterNote       $05
000898BC E701                       	dc.b	smpsNoAttack, $01
000898BE E108                       	smpsAlterNote       $08
000898C0 E701                       	dc.b	smpsNoAttack, $01
000898C2 E10C                       	smpsAlterNote       $0C
000898C4 E701                       	dc.b	smpsNoAttack, $01
000898C6 E108                       	smpsAlterNote       $08
000898C8 E701                       	dc.b	smpsNoAttack, $01
000898CA E102                       	smpsAlterNote       $02
000898CC E701                       	dc.b	smpsNoAttack, $01
000898CE E101                       	smpsAlterNote       $01
000898D0 E701                       	dc.b	smpsNoAttack, $01
000898D2 E105                       	smpsAlterNote       $05
000898D4 E701                       	dc.b	smpsNoAttack, $01
000898D6 E10B                       	smpsAlterNote       $0B
000898D8 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
000898DC E108                       	smpsAlterNote       $08
000898DE E701                       	dc.b	smpsNoAttack, $01
000898E0 E102                       	smpsAlterNote       $02
000898E2 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
000898E6 E108                       	smpsAlterNote       $08
000898E8 E701                       	dc.b	smpsNoAttack, $01
000898EA E10B                       	smpsAlterNote       $0B
000898EC E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
000898F0 E105                       	smpsAlterNote       $05
000898F2 E701                       	dc.b	smpsNoAttack, $01
000898F4 E101                       	smpsAlterNote       $01
000898F6 E701                       	dc.b	smpsNoAttack, $01
000898F8 E102                       	smpsAlterNote       $02
000898FA E701                       	dc.b	smpsNoAttack, $01
000898FC E108                       	smpsAlterNote       $08
000898FE E701                       	dc.b	smpsNoAttack, $01
00089900 E10C                       	smpsAlterNote       $0C
00089902 E701                       	dc.b	smpsNoAttack, $01
00089904 E108                       	smpsAlterNote       $08
00089906 E701                       	dc.b	smpsNoAttack, $01
00089908 E105                       	smpsAlterNote       $05
0008990A E701                       	dc.b	smpsNoAttack, $01
0008990C E101                       	smpsAlterNote       $01
0008990E E701                       	dc.b	smpsNoAttack, $01
00089910 E105                       	smpsAlterNote       $05
00089912 E701                       	dc.b	smpsNoAttack, $01
00089914 E10B                       	smpsAlterNote       $0B
00089916 E701                       	dc.b	smpsNoAttack, $01
00089918 E10C                       	smpsAlterNote       $0C
0008991A E701                       	dc.b	smpsNoAttack, $01
0008991C E108                       	smpsAlterNote       $08
0008991E E701                       	dc.b	smpsNoAttack, $01
00089920 E102                       	smpsAlterNote       $02
00089922 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00089926 E105                       	smpsAlterNote       $05
00089928 E701                       	dc.b	smpsNoAttack, $01
0008992A E10B                       	smpsAlterNote       $0B
0008992C E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00089930 E105                       	smpsAlterNote       $05
00089932 E701                       	dc.b	smpsNoAttack, $01
00089934 E101                       	smpsAlterNote       $01
00089936 E701                       	dc.b	smpsNoAttack, $01
00089938 E102                       	smpsAlterNote       $02
0008993A E701                       	dc.b	smpsNoAttack, $01
0008993C E108                       	smpsAlterNote       $08
0008993E E701                       	dc.b	smpsNoAttack, $01
00089940 E10C                       	smpsAlterNote       $0C
00089942 E701                       	dc.b	smpsNoAttack, $01
00089944 E108                       	smpsAlterNote       $08
00089946 E701                       	dc.b	smpsNoAttack, $01
00089948 E105                       	smpsAlterNote       $05
0008994A E701                       	dc.b	smpsNoAttack, $01
0008994C E101                       	smpsAlterNote       $01
0008994E E701                       	dc.b	smpsNoAttack, $01
00089950 E105                       	smpsAlterNote       $05
00089952 E701                       	dc.b	smpsNoAttack, $01
00089954 E10B                       	smpsAlterNote       $0B
00089956 E701                       	dc.b	smpsNoAttack, $01
00089958 E10C                       	smpsAlterNote       $0C
0008995A E701                       	dc.b	smpsNoAttack, $01
0008995C E108                       	smpsAlterNote       $08
0008995E E701                       	dc.b	smpsNoAttack, $01
00089960 E102                       	smpsAlterNote       $02
00089962 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00089966 E105                       	smpsAlterNote       $05
00089968 E701                       	dc.b	smpsNoAttack, $01
0008996A E10B                       	smpsAlterNote       $0B
0008996C E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00089970 E105                       	smpsAlterNote       $05
00089972 E701                       	dc.b	smpsNoAttack, $01
00089974 E102                       	smpsAlterNote       $02
00089976 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008997A E108                       	smpsAlterNote       $08
0008997C E701                       	dc.b	smpsNoAttack, $01
0008997E E10C                       	smpsAlterNote       $0C
00089980 E701                       	dc.b	smpsNoAttack, $01
00089982 E10B                       	smpsAlterNote       $0B
00089984 E701                       	dc.b	smpsNoAttack, $01
00089986 E105                       	smpsAlterNote       $05
00089988 E701                       	dc.b	smpsNoAttack, $01
0008998A E101                       	smpsAlterNote       $01
0008998C E701                       	dc.b	smpsNoAttack, $01
0008998E E105                       	smpsAlterNote       $05
00089990 E701                       	dc.b	smpsNoAttack, $01
00089992 E108                       	smpsAlterNote       $08
00089994 E701                       	dc.b	smpsNoAttack, $01
00089996 E10C                       	smpsAlterNote       $0C
00089998 E701                       	dc.b	smpsNoAttack, $01
0008999C E10B                       	smpsAlterNote       $0B
0008999E C604 8001                  	dc.b	nA5, $04, nRst, $01
000899A2 E109                       	smpsAlterNote       $09
000899A4 C404                       	dc.b	nG5, $04
000899A6 E10B                       	smpsAlterNote       $0B
000899A8 C604 8001                  	dc.b	nA5, $04, nRst, $01
000899AC E107                       	smpsAlterNote       $07
000899AE BF0A BF03 8001             	dc.b	nD5, $0A, nD5, $03, nRst, $01
000899B4 E10B                       	smpsAlterNote       $0B
000899B6 C604                       	dc.b	nA5, $04
000899B8 E109                       	smpsAlterNote       $09
000899BA C404 8001                  	dc.b	nG5, $04, nRst, $01
000899BE E10B                       	smpsAlterNote       $0B
000899C0 C604                       	dc.b	nA5, $04
000899C2 E108                       	smpsAlterNote       $08
000899C4 C10A 8001 C103             	dc.b	nE5, $0A, nRst, $01, nE5, $03
000899CA E106                       	smpsAlterNote       $06
000899CC C904 8001                  	dc.b	nC6, $04, nRst, $01
000899D0 E10C                       	smpsAlterNote       $0C
000899D2 C704                       	dc.b	nBb5, $04
000899D4 E10B                       	smpsAlterNote       $0B
000899D6 C604 8001                  	dc.b	nA5, $04, nRst, $01
000899DA E109                       	smpsAlterNote       $09
000899DC C403 C203 8001 C402 8001   	dc.b	nG5, $03, nF5, $03, nRst, $01, nG5, $02, nRst, $01
000899E6 E10B                       	smpsAlterNote       $0B
000899E8 C60D                       	dc.b	nA5, $0D
000899EA E108                       	smpsAlterNote       $08
000899EC E701                       	dc.b	smpsNoAttack, $01
000899EE E104                       	smpsAlterNote       $04
000899F0 E701                       	dc.b	smpsNoAttack, $01
000899F2 E108                       	smpsAlterNote       $08
000899F4 E701                       	dc.b	smpsNoAttack, $01
000899F6 E10B                       	smpsAlterNote       $0B
000899F8 E701                       	dc.b	smpsNoAttack, $01
000899FA E10F                       	smpsAlterNote       $0F
000899FC E701                       	dc.b	smpsNoAttack, $01
000899FE E10B                       	smpsAlterNote       $0B
00089A00 E701                       	dc.b	smpsNoAttack, $01
00089A02 E105                       	smpsAlterNote       $05
00089A04 E701                       	dc.b	smpsNoAttack, $01
00089A06 E104                       	smpsAlterNote       $04
00089A08 E701                       	dc.b	smpsNoAttack, $01
00089A0A E108                       	smpsAlterNote       $08
00089A0C E701                       	dc.b	smpsNoAttack, $01
00089A0E E10E                       	smpsAlterNote       $0E
00089A10 E701                       	dc.b	smpsNoAttack, $01
00089A12 E10F                       	smpsAlterNote       $0F
00089A14 8001                       	dc.b	nRst, $01
00089A16 E109                       	smpsAlterNote       $09
00089A18 C403 C203 8001             	dc.b	nG5, $03, nF5, $03, nRst, $01
00089A1E E108                       	smpsAlterNote       $08
00089A20 C10D                       	dc.b	nE5, $0D
00089A22 E105                       	smpsAlterNote       $05
00089A24 E701                       	dc.b	smpsNoAttack, $01
00089A26 E101                       	smpsAlterNote       $01
00089A28 E701                       	dc.b	smpsNoAttack, $01
00089A2A E105                       	smpsAlterNote       $05
00089A2C E701                       	dc.b	smpsNoAttack, $01
00089A2E E10B                       	smpsAlterNote       $0B
00089A30 E701                       	dc.b	smpsNoAttack, $01
00089A32 E10C                       	smpsAlterNote       $0C
00089A34 E701                       	dc.b	smpsNoAttack, $01
00089A36 E108                       	smpsAlterNote       $08
00089A38 E701                       	dc.b	smpsNoAttack, $01
00089A3A E102                       	smpsAlterNote       $02
00089A3C E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00089A40 E105                       	smpsAlterNote       $05
00089A42 E701                       	dc.b	smpsNoAttack, $01
00089A44 E10B                       	smpsAlterNote       $0B
00089A46 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00089A4A E105                       	smpsAlterNote       $05
00089A4C E701                       	dc.b	smpsNoAttack, $01
00089A4E E102                       	smpsAlterNote       $02
00089A50 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00089A54 E108                       	smpsAlterNote       $08
00089A56 E701                       	dc.b	smpsNoAttack, $01
00089A58 E10C                       	smpsAlterNote       $0C
00089A5A E701                       	dc.b	smpsNoAttack, $01
00089A5C E10B                       	smpsAlterNote       $0B
00089A5E E701                       	dc.b	smpsNoAttack, $01
00089A60 E105                       	smpsAlterNote       $05
00089A62 E701                       	dc.b	smpsNoAttack, $01
00089A64 E101                       	smpsAlterNote       $01
00089A66 E701                       	dc.b	smpsNoAttack, $01
00089A68 E105                       	smpsAlterNote       $05
00089A6A E701                       	dc.b	smpsNoAttack, $01
00089A6C E108                       	smpsAlterNote       $08
00089A6E E701                       	dc.b	smpsNoAttack, $01
00089A70 E10C                       	smpsAlterNote       $0C
00089A72 E701                       	dc.b	smpsNoAttack, $01
00089A74 E108                       	smpsAlterNote       $08
00089A76 E701                       	dc.b	smpsNoAttack, $01
00089A78 E102                       	smpsAlterNote       $02
00089A7A E701                       	dc.b	smpsNoAttack, $01
00089A7C E101                       	smpsAlterNote       $01
00089A7E E701                       	dc.b	smpsNoAttack, $01
00089A80 E105                       	smpsAlterNote       $05
00089A82 E701                       	dc.b	smpsNoAttack, $01
00089A84 E10B                       	smpsAlterNote       $0B
00089A86 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00089A8A E108                       	smpsAlterNote       $08
00089A8C E701                       	dc.b	smpsNoAttack, $01
00089A8E E102                       	smpsAlterNote       $02
00089A90 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00089A94 E108                       	smpsAlterNote       $08
00089A96 E701                       	dc.b	smpsNoAttack, $01
00089A98 E10B                       	smpsAlterNote       $0B
00089A9A E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00089A9E E105                       	smpsAlterNote       $05
00089AA0 E701                       	dc.b	smpsNoAttack, $01
00089AA2 E101                       	smpsAlterNote       $01
00089AA4 E701                       	dc.b	smpsNoAttack, $01
00089AA6 E102                       	smpsAlterNote       $02
00089AA8 E701                       	dc.b	smpsNoAttack, $01
00089AAA E108                       	smpsAlterNote       $08
00089AAC E701                       	dc.b	smpsNoAttack, $01
00089AAE E10C                       	smpsAlterNote       $0C
00089AB0 E701                       	dc.b	smpsNoAttack, $01
00089AB2 E108                       	smpsAlterNote       $08
00089AB4 E701                       	dc.b	smpsNoAttack, $01
00089AB6 E105                       	smpsAlterNote       $05
00089AB8 E701                       	dc.b	smpsNoAttack, $01
00089ABA E101                       	smpsAlterNote       $01
00089ABC E701                       	dc.b	smpsNoAttack, $01
00089ABE E105                       	smpsAlterNote       $05
00089AC0 E701                       	dc.b	smpsNoAttack, $01
00089AC2 E10B                       	smpsAlterNote       $0B
00089AC4 E701                       	dc.b	smpsNoAttack, $01
00089AC6 E10C                       	smpsAlterNote       $0C
00089AC8 E701                       	dc.b	smpsNoAttack, $01
00089ACA E108                       	smpsAlterNote       $08
00089ACC E701                       	dc.b	smpsNoAttack, $01
00089ACE E102                       	smpsAlterNote       $02
00089AD0 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00089AD4 E108                       	smpsAlterNote       $08
00089AD6 E701                       	dc.b	smpsNoAttack, $01
00089AD8 E10B                       	smpsAlterNote       $0B
00089ADA E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00089ADE E105                       	smpsAlterNote       $05
00089AE0 E701                       	dc.b	smpsNoAttack, $01
00089AE2 E101                       	smpsAlterNote       $01
00089AE4 E701                       	dc.b	smpsNoAttack, $01
00089AE6 E102                       	smpsAlterNote       $02
00089AE8 E701                       	dc.b	smpsNoAttack, $01
00089AEA E108                       	smpsAlterNote       $08
00089AEC E701                       	dc.b	smpsNoAttack, $01
00089AEE E10C                       	smpsAlterNote       $0C
00089AF0 E701                       	dc.b	smpsNoAttack, $01
00089AF2 E108                       	smpsAlterNote       $08
00089AF4 E701                       	dc.b	smpsNoAttack, $01
00089AF6 E105                       	smpsAlterNote       $05
00089AF8 E701                       	dc.b	smpsNoAttack, $01
00089AFA E101                       	smpsAlterNote       $01
00089AFC E701                       	dc.b	smpsNoAttack, $01
00089AFE E105                       	smpsAlterNote       $05
00089B00 E701                       	dc.b	smpsNoAttack, $01
00089B02 E10B                       	smpsAlterNote       $0B
00089B04 E701                       	dc.b	smpsNoAttack, $01
00089B06 E10C                       	smpsAlterNote       $0C
00089B08 E701                       	dc.b	smpsNoAttack, $01
00089B0A E108                       	smpsAlterNote       $08
00089B0C E701                       	dc.b	smpsNoAttack, $01
00089B0E E102                       	smpsAlterNote       $02
00089B10 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00089B14 E105                       	smpsAlterNote       $05
00089B16 E701                       	dc.b	smpsNoAttack, $01
00089B18 E10B                       	smpsAlterNote       $0B
00089B1A E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00089B1E E105                       	smpsAlterNote       $05
00089B20 E701                       	dc.b	smpsNoAttack, $01
00089B22 E102                       	smpsAlterNote       $02
00089B24 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00089B28 E108                       	smpsAlterNote       $08
00089B2A E701                       	dc.b	smpsNoAttack, $01
00089B2C E10C                       	smpsAlterNote       $0C
00089B2E E701                       	dc.b	smpsNoAttack, $01
00089B30 E10B                       	smpsAlterNote       $0B
00089B32 E701                       	dc.b	smpsNoAttack, $01
00089B34 E105                       	smpsAlterNote       $05
00089B36 E701                       	dc.b	smpsNoAttack, $01
00089B38 E101                       	smpsAlterNote       $01
00089B3A E701                       	dc.b	smpsNoAttack, $01
00089B3C E105                       	smpsAlterNote       $05
00089B3E E701                       	dc.b	smpsNoAttack, $01
00089B40 E108                       	smpsAlterNote       $08
00089B42 E701                       	dc.b	smpsNoAttack, $01
00089B44 E10C                       	smpsAlterNote       $0C
00089B46 E701                       	dc.b	smpsNoAttack, $01
00089B48 E108                       	smpsAlterNote       $08
00089B4A E701                       	dc.b	smpsNoAttack, $01
00089B4C E102                       	smpsAlterNote       $02
00089B4E E701                       	dc.b	smpsNoAttack, $01
00089B50 E101                       	smpsAlterNote       $01
00089B52 E701                       	dc.b	smpsNoAttack, $01
00089B54 E105                       	smpsAlterNote       $05
00089B56 E701                       	dc.b	smpsNoAttack, $01
00089B58 E10B                       	smpsAlterNote       $0B
00089B5A E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00089B5E E108                       	smpsAlterNote       $08
00089B60 E701                       	dc.b	smpsNoAttack, $01
00089B62 E102                       	smpsAlterNote       $02
00089B64 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00089B68 E108                       	smpsAlterNote       $08
00089B6A E701                       	dc.b	smpsNoAttack, $01
00089B6C E10B                       	smpsAlterNote       $0B
00089B6E E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00089B72 E105                       	smpsAlterNote       $05
00089B74 E701                       	dc.b	smpsNoAttack, $01
00089B76 E102                       	smpsAlterNote       $02
00089B78 8001                       	dc.b	nRst, $01
00089B7A E107                       	smpsAlterNote       $07
00089B7C BF01 8001                  	dc.b	nD5, $01, nRst, $01
00089B80 E108                       	smpsAlterNote       $08
00089B82 C001 C10E                  	dc.b	nEb5, $01, nE5, $0E
00089B86 E102                       	smpsAlterNote       $02
00089B88 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00089B8C E108                       	smpsAlterNote       $08
00089B8E E701                       	dc.b	smpsNoAttack, $01
00089B90 E10B                       	smpsAlterNote       $0B
00089B92 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00089B96 E105                       	smpsAlterNote       $05
00089B98 E701                       	dc.b	smpsNoAttack, $01
00089B9A E101                       	smpsAlterNote       $01
00089B9C E701                       	dc.b	smpsNoAttack, $01
00089B9E E102                       	smpsAlterNote       $02
00089BA0 E701                       	dc.b	smpsNoAttack, $01
00089BA2 E108                       	smpsAlterNote       $08
00089BA4 E701                       	dc.b	smpsNoAttack, $01
00089BA6 E10C                       	smpsAlterNote       $0C
00089BA8 E701                       	dc.b	smpsNoAttack, $01
00089BAA E108                       	smpsAlterNote       $08
00089BAC E701                       	dc.b	smpsNoAttack, $01
00089BAE E105                       	smpsAlterNote       $05
00089BB0 E701                       	dc.b	smpsNoAttack, $01
00089BB2 E101                       	smpsAlterNote       $01
00089BB4 E701                       	dc.b	smpsNoAttack, $01
00089BB6 E105                       	smpsAlterNote       $05
00089BB8 E701                       	dc.b	smpsNoAttack, $01
00089BBA E10B                       	smpsAlterNote       $0B
00089BBC E701                       	dc.b	smpsNoAttack, $01
00089BBE E10C                       	smpsAlterNote       $0C
00089BC0 E701                       	dc.b	smpsNoAttack, $01
00089BC2 E108                       	smpsAlterNote       $08
00089BC4 E701                       	dc.b	smpsNoAttack, $01
00089BC6 E102                       	smpsAlterNote       $02
00089BC8 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00089BCC E105                       	smpsAlterNote       $05
00089BCE E701                       	dc.b	smpsNoAttack, $01
00089BD0 E10B                       	smpsAlterNote       $0B
00089BD2 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00089BD6 E105                       	smpsAlterNote       $05
00089BD8 E701                       	dc.b	smpsNoAttack, $01
00089BDA E102                       	smpsAlterNote       $02
00089BDC E701                       	dc.b	smpsNoAttack, $01
00089BDE E109                       	smpsAlterNote       $09
00089BE0 C40A C207                  	dc.b	nG5, $0A, nF5, $07
00089BE4 E108                       	smpsAlterNote       $08
00089BE6 C10D                       	dc.b	nE5, $0D
00089BE8 E105                       	smpsAlterNote       $05
00089BEA E701                       	dc.b	smpsNoAttack, $01
00089BEC E101                       	smpsAlterNote       $01
00089BEE E701                       	dc.b	smpsNoAttack, $01
00089BF0 E102                       	smpsAlterNote       $02
00089BF2 E701                       	dc.b	smpsNoAttack, $01
00089BF4 E108                       	smpsAlterNote       $08
00089BF6 E701                       	dc.b	smpsNoAttack, $01
00089BF8 E10C                       	smpsAlterNote       $0C
00089BFA E701                       	dc.b	smpsNoAttack, $01
00089BFC E108                       	smpsAlterNote       $08
00089BFE E701                       	dc.b	smpsNoAttack, $01
00089C00 E105                       	smpsAlterNote       $05
00089C02 E701                       	dc.b	smpsNoAttack, $01
00089C04 E101                       	smpsAlterNote       $01
00089C06 E701                       	dc.b	smpsNoAttack, $01
00089C08 E105                       	smpsAlterNote       $05
00089C0A E701                       	dc.b	smpsNoAttack, $01
00089C0C E10B                       	smpsAlterNote       $0B
00089C0E E701                       	dc.b	smpsNoAttack, $01
00089C10 E10C                       	smpsAlterNote       $0C
00089C12 E701                       	dc.b	smpsNoAttack, $01
00089C14 E108                       	smpsAlterNote       $08
00089C16 E701                       	dc.b	smpsNoAttack, $01
00089C18 E102                       	smpsAlterNote       $02
00089C1A E701 E701 800E             	dc.b	smpsNoAttack, $01, smpsNoAttack, $01, nRst, $0E
00089C22 E10B                       	smpsAlterNote       $0B
00089C24 BA01 8001                  	dc.b	nA4, $01, nRst, $01
00089C28 E10C                       	smpsAlterNote       $0C
00089C2A BB01 8001                  	dc.b	nBb4, $01, nRst, $01
00089C2E E10B                       	smpsAlterNote       $0B
00089C30 BA03 BA06 8001             	dc.b	nA4, $03, nA4, $06, nRst, $01
00089C36 E107                       	smpsAlterNote       $07
00089C38 BF03                       	dc.b	nD5, $03
00089C3A E108                       	smpsAlterNote       $08
00089C3C C103 8001                  	dc.b	nE5, $03, nRst, $01
00089C40 E109                       	smpsAlterNote       $09
00089C42 C203 C403 8001             	dc.b	nF5, $03, nG5, $03, nRst, $01
00089C48 E10B                       	smpsAlterNote       $0B
00089C4A C606 8001                  	dc.b	nA5, $06, nRst, $01
00089C4E E107                       	smpsAlterNote       $07
00089C50 BF02 8001                  	dc.b	nD5, $02, nRst, $01
00089C54 E106                       	smpsAlterNote       $06
00089C56 C90D                       	dc.b	nC6, $0D
00089C58 E103                       	smpsAlterNote       $03
00089C5A E701                       	dc.b	smpsNoAttack, $01
00089C5C E1FF                       	smpsAlterNote       $FF
00089C5E E701                       	dc.b	smpsNoAttack, $01
00089C60 E103                       	smpsAlterNote       $03
00089C62 E701                       	dc.b	smpsNoAttack, $01
00089C64 E109                       	smpsAlterNote       $09
00089C66 E701                       	dc.b	smpsNoAttack, $01
00089C68 E10A                       	smpsAlterNote       $0A
00089C6A E701                       	dc.b	smpsNoAttack, $01
00089C6C E106                       	smpsAlterNote       $06
00089C6E E701                       	dc.b	smpsNoAttack, $01
00089C70 E100                       	smpsAlterNote       $00
00089C72 E701                       	dc.b	smpsNoAttack, $01
00089C74 E10C                       	smpsAlterNote       $0C
00089C76 C703 8001                  	dc.b	nBb5, $03, nRst, $01
00089C7A E10B                       	smpsAlterNote       $0B
00089C7C C603                       	dc.b	nA5, $03
00089C7E E109                       	smpsAlterNote       $09
00089C80 C403 8001                  	dc.b	nG5, $03, nRst, $01
00089C84 E10B                       	smpsAlterNote       $0B
00089C86 C60D                       	dc.b	nA5, $0D
00089C88 E105                       	smpsAlterNote       $05
00089C8A E701                       	dc.b	smpsNoAttack, $01
00089C8C E104                       	smpsAlterNote       $04
00089C8E E701                       	dc.b	smpsNoAttack, $01
00089C90 E108                       	smpsAlterNote       $08
00089C92 E701                       	dc.b	smpsNoAttack, $01
00089C94 E10E                       	smpsAlterNote       $0E
00089C96 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00089C9A E10B                       	smpsAlterNote       $0B
00089C9C E701                       	dc.b	smpsNoAttack, $01
00089C9E E105                       	smpsAlterNote       $05
00089CA0 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00089CA4 E10B                       	smpsAlterNote       $0B
00089CA6 E701                       	dc.b	smpsNoAttack, $01
00089CA8 E10E                       	smpsAlterNote       $0E
00089CAA E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00089CAE E108                       	smpsAlterNote       $08
00089CB0 E701                       	dc.b	smpsNoAttack, $01
00089CB2 E104                       	smpsAlterNote       $04
00089CB4 E701                       	dc.b	smpsNoAttack, $01
00089CB6 E105                       	smpsAlterNote       $05
00089CB8 E701                       	dc.b	smpsNoAttack, $01
00089CBA E10B                       	smpsAlterNote       $0B
00089CBC E701                       	dc.b	smpsNoAttack, $01
00089CBE E10F                       	smpsAlterNote       $0F
00089CC0 E701                       	dc.b	smpsNoAttack, $01
00089CC2 E10B                       	smpsAlterNote       $0B
00089CC4 E701                       	dc.b	smpsNoAttack, $01
00089CC6 E108                       	smpsAlterNote       $08
00089CC8 E701                       	dc.b	smpsNoAttack, $01
00089CCA E104                       	smpsAlterNote       $04
00089CCC E701                       	dc.b	smpsNoAttack, $01
00089CCE E108                       	smpsAlterNote       $08
00089CD0 E701                       	dc.b	smpsNoAttack, $01
00089CD2 E10E                       	smpsAlterNote       $0E
00089CD4 E701                       	dc.b	smpsNoAttack, $01
00089CD6 E10F                       	smpsAlterNote       $0F
00089CD8 E701                       	dc.b	smpsNoAttack, $01
00089CDA E10B                       	smpsAlterNote       $0B
00089CDC E701                       	dc.b	smpsNoAttack, $01
00089CDE E105                       	smpsAlterNote       $05
00089CE0 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00089CE4 E108                       	smpsAlterNote       $08
00089CE6 E701                       	dc.b	smpsNoAttack, $01
00089CE8 E10E                       	smpsAlterNote       $0E
00089CEA E701                       	dc.b	smpsNoAttack, $01
00089CEC E10F                       	smpsAlterNote       $0F
00089CEE 800F                       	dc.b	nRst, $0F
00089CF0 E107                       	smpsAlterNote       $07
00089CF2 BF02 8001                  	dc.b	nD5, $02, nRst, $01
00089CF6 E108                       	smpsAlterNote       $08
00089CF8 C103                       	dc.b	nE5, $03
00089CFA E109                       	smpsAlterNote       $09
00089CFC C203 8001 C403             	dc.b	nF5, $03, nRst, $01, nG5, $03
00089D02 E10B                       	smpsAlterNote       $0B
00089D04 C607                       	dc.b	nA5, $07
00089D06 E107                       	smpsAlterNote       $07
00089D08 BF03 8001                  	dc.b	nD5, $03, nRst, $01
00089D0C E106                       	smpsAlterNote       $06
00089D0E C90D                       	dc.b	nC6, $0D
00089D10 E107                       	smpsAlterNote       $07
00089D12 CB03 8001                  	dc.b	nD6, $03, nRst, $01
00089D16 E10C                       	smpsAlterNote       $0C
00089D18 C704                       	dc.b	nBb5, $04
00089D1A E10B                       	smpsAlterNote       $0B
00089D1C C604 8001                  	dc.b	nA5, $04, nRst, $01
00089D20 E109                       	smpsAlterNote       $09
00089D22 C404                       	dc.b	nG5, $04
00089D24 E10B                       	smpsAlterNote       $0B
00089D26 C60D                       	dc.b	nA5, $0D
00089D28 E108                       	smpsAlterNote       $08
00089D2A E701                       	dc.b	smpsNoAttack, $01
00089D2C E105                       	smpsAlterNote       $05
00089D2E E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00089D32 E10B                       	smpsAlterNote       $0B
00089D34 E701                       	dc.b	smpsNoAttack, $01
00089D36 E10F                       	smpsAlterNote       $0F
00089D38 E701                       	dc.b	smpsNoAttack, $01
00089D3A E10E                       	smpsAlterNote       $0E
00089D3C E701                       	dc.b	smpsNoAttack, $01
00089D3E E108                       	smpsAlterNote       $08
00089D40 E701                       	dc.b	smpsNoAttack, $01
00089D42 E104                       	smpsAlterNote       $04
00089D44 E701                       	dc.b	smpsNoAttack, $01
00089D46 E108                       	smpsAlterNote       $08
00089D48 E701                       	dc.b	smpsNoAttack, $01
00089D4A E10B                       	smpsAlterNote       $0B
00089D4C E701                       	dc.b	smpsNoAttack, $01
00089D4E E10F                       	smpsAlterNote       $0F
00089D50 E701                       	dc.b	smpsNoAttack, $01
00089D52 E10B                       	smpsAlterNote       $0B
00089D54 E701                       	dc.b	smpsNoAttack, $01
00089D56 E105                       	smpsAlterNote       $05
00089D58 E701                       	dc.b	smpsNoAttack, $01
00089D5A E104                       	smpsAlterNote       $04
00089D5C E701                       	dc.b	smpsNoAttack, $01
00089D5E E108                       	smpsAlterNote       $08
00089D60 E701                       	dc.b	smpsNoAttack, $01
00089D62 E10E                       	smpsAlterNote       $0E
00089D64 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00089D68 E10B                       	smpsAlterNote       $0B
00089D6A E701                       	dc.b	smpsNoAttack, $01
00089D6C E105                       	smpsAlterNote       $05
00089D6E E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00089D72 E10B                       	smpsAlterNote       $0B
00089D74 E701                       	dc.b	smpsNoAttack, $01
00089D76 E10E                       	smpsAlterNote       $0E
00089D78 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00089D7C E108                       	smpsAlterNote       $08
00089D7E E701                       	dc.b	smpsNoAttack, $01
00089D80 E105                       	smpsAlterNote       $05
00089D82 8001                       	dc.b	nRst, $01
00089D84 E109                       	smpsAlterNote       $09
00089D86 C401 8001                  	dc.b	nG5, $01, nRst, $01
00089D8A E10B                       	smpsAlterNote       $0B
00089D8C C501 C60E C604 8001        	dc.b	nAb5, $01, nA5, $0E, nA5, $04, nRst, $01
00089D94 E109                       	smpsAlterNote       $09
00089D96 C404                       	dc.b	nG5, $04
00089D98 E10B                       	smpsAlterNote       $0B
00089D9A C604 8001                  	dc.b	nA5, $04, nRst, $01
00089D9E E107                       	smpsAlterNote       $07
00089DA0 BF0D                       	dc.b	nD5, $0D
00089DA2 E101                       	smpsAlterNote       $01
00089DA4 E701                       	dc.b	smpsNoAttack, $01
00089DA6 E100                       	smpsAlterNote       $00
00089DA8 E701                       	dc.b	smpsNoAttack, $01
00089DAA E104                       	smpsAlterNote       $04
00089DAC E701                       	dc.b	smpsNoAttack, $01
00089DAE E10A                       	smpsAlterNote       $0A
00089DB0 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00089DB4 E107                       	smpsAlterNote       $07
00089DB6 E701                       	dc.b	smpsNoAttack, $01
00089DB8 E101                       	smpsAlterNote       $01
00089DBA E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00089DBE E107                       	smpsAlterNote       $07
00089DC0 E701                       	dc.b	smpsNoAttack, $01
00089DC2 E10A                       	smpsAlterNote       $0A
00089DC4 E701                       	dc.b	smpsNoAttack, $01
00089DC6 E10B                       	smpsAlterNote       $0B
00089DC8 8001                       	dc.b	nRst, $01
00089DCA E108                       	smpsAlterNote       $08
00089DCC 8001                       	dc.b	nRst, $01
00089DCE E109                       	smpsAlterNote       $09
00089DD0 8001 C401                  	dc.b	nRst, $01, nG5, $01
00089DD4 E10B                       	smpsAlterNote       $0B
00089DD6 C606 8001 C606 8001        	dc.b	nA5, $06, nRst, $01, nA5, $06, nRst, $01
00089DDE E108                       	smpsAlterNote       $08
00089DE0 CD06 8001                  	dc.b	nE6, $06, nRst, $01
00089DE4 E109                       	smpsAlterNote       $09
00089DE6 CE06 8001                  	dc.b	nF6, $06, nRst, $01
00089DEA E108                       	smpsAlterNote       $08
00089DEC CD02 8001                  	dc.b	nE6, $02, nRst, $01
00089DF0 E106                       	smpsAlterNote       $06
00089DF2 C903                       	dc.b	nC6, $03
00089DF4 E109                       	smpsAlterNote       $09
00089DF6 C403 8001                  	dc.b	nG5, $03, nRst, $01
00089DFA E10C                       	smpsAlterNote       $0C
00089DFC C70D                       	dc.b	nBb5, $0D
00089DFE E109                       	smpsAlterNote       $09
00089E00 E701                       	dc.b	smpsNoAttack, $01
00089E02 E105                       	smpsAlterNote       $05
00089E04 E701                       	dc.b	smpsNoAttack, $01
00089E06 E109                       	smpsAlterNote       $09
00089E08 E701                       	dc.b	smpsNoAttack, $01
00089E0A E10F                       	smpsAlterNote       $0F
00089E0C E701                       	dc.b	smpsNoAttack, $01
00089E0E E110                       	smpsAlterNote       $10
00089E10 E701                       	dc.b	smpsNoAttack, $01
00089E12 E10C                       	smpsAlterNote       $0C
00089E14 E701                       	dc.b	smpsNoAttack, $01
00089E16 E106                       	smpsAlterNote       $06
00089E18 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00089E1C E109                       	smpsAlterNote       $09
00089E1E E701                       	dc.b	smpsNoAttack, $01
00089E20 E10F                       	smpsAlterNote       $0F
00089E22 E701                       	dc.b	smpsNoAttack, $01
00089E24 E110                       	smpsAlterNote       $10
00089E26 8001                       	dc.b	nRst, $01
00089E28 E10B                       	smpsAlterNote       $0B
00089E2A C606 8001                  	dc.b	nA5, $06, nRst, $01
00089E2E E109                       	smpsAlterNote       $09
00089E30 C40D                       	dc.b	nG5, $0D
00089E32 E103                       	smpsAlterNote       $03
00089E34 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00089E38 E106                       	smpsAlterNote       $06
00089E3A E701                       	dc.b	smpsNoAttack, $01
00089E3C E10C                       	smpsAlterNote       $0C
00089E3E E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00089E42 E106                       	smpsAlterNote       $06
00089E44 E701                       	dc.b	smpsNoAttack, $01
00089E46 E103                       	smpsAlterNote       $03
00089E48 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00089E4C E109                       	smpsAlterNote       $09
00089E4E E701                       	dc.b	smpsNoAttack, $01
00089E50 E10D                       	smpsAlterNote       $0D
00089E52 E701                       	dc.b	smpsNoAttack, $01
00089E54 E10C                       	smpsAlterNote       $0C
00089E56 E701                       	dc.b	smpsNoAttack, $01
00089E58 E106                       	smpsAlterNote       $06
00089E5A E701                       	dc.b	smpsNoAttack, $01
00089E5C E102                       	smpsAlterNote       $02
00089E5E E701                       	dc.b	smpsNoAttack, $01
00089E60 E103                       	smpsAlterNote       $03
00089E62 8001                       	dc.b	nRst, $01
00089E64 E10B                       	smpsAlterNote       $0B
00089E66 C60D                       	dc.b	nA5, $0D
00089E68 E108                       	smpsAlterNote       $08
00089E6A E701                       	dc.b	smpsNoAttack, $01
00089E6C E104                       	smpsAlterNote       $04
00089E6E E701                       	dc.b	smpsNoAttack, $01
00089E70 E108                       	smpsAlterNote       $08
00089E72 E701                       	dc.b	smpsNoAttack, $01
00089E74 E10B                       	smpsAlterNote       $0B
00089E76 E701                       	dc.b	smpsNoAttack, $01
00089E78 E10F                       	smpsAlterNote       $0F
00089E7A E701                       	dc.b	smpsNoAttack, $01
00089E7C E10B                       	smpsAlterNote       $0B
00089E7E E701                       	dc.b	smpsNoAttack, $01
00089E80 E105                       	smpsAlterNote       $05
00089E82 E701                       	dc.b	smpsNoAttack, $01
00089E84 E104                       	smpsAlterNote       $04
00089E86 E701                       	dc.b	smpsNoAttack, $01
00089E88 E108                       	smpsAlterNote       $08
00089E8A E701                       	dc.b	smpsNoAttack, $01
00089E8C E10E                       	smpsAlterNote       $0E
00089E8E E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00089E92 E10B                       	smpsAlterNote       $0B
00089E94 E701                       	dc.b	smpsNoAttack, $01
00089E96 E105                       	smpsAlterNote       $05
00089E98 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00089E9C E10C                       	smpsAlterNote       $0C
00089E9E C70E                       	dc.b	nBb5, $0E
00089EA0 E106                       	smpsAlterNote       $06
00089EA2 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00089EA6 E10C                       	smpsAlterNote       $0C
00089EA8 E701                       	dc.b	smpsNoAttack, $01
00089EAA E10F                       	smpsAlterNote       $0F
00089EAC E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00089EB0 E109                       	smpsAlterNote       $09
00089EB2 E701                       	dc.b	smpsNoAttack, $01
00089EB4 E105                       	smpsAlterNote       $05
00089EB6 E701                       	dc.b	smpsNoAttack, $01
00089EB8 E106                       	smpsAlterNote       $06
00089EBA E701                       	dc.b	smpsNoAttack, $01
00089EBC E10C                       	smpsAlterNote       $0C
00089EBE E701                       	dc.b	smpsNoAttack, $01
00089EC0 E110                       	smpsAlterNote       $10
00089EC2 E701                       	dc.b	smpsNoAttack, $01
00089EC4 E10C                       	smpsAlterNote       $0C
00089EC6 E701                       	dc.b	smpsNoAttack, $01
00089EC8 E109                       	smpsAlterNote       $09
00089ECA E701                       	dc.b	smpsNoAttack, $01
00089ECC E105                       	smpsAlterNote       $05
00089ECE E701                       	dc.b	smpsNoAttack, $01
00089ED0 E106                       	smpsAlterNote       $06
00089ED2 8001 C90C                  	dc.b	nRst, $01, nC6, $0C
00089ED6 E107                       	smpsAlterNote       $07
00089ED8 CA01 E7CB 01               	dc.b	nCs6, $01, smpsNoAttack, nD6, $01
00089EDD E108                       	smpsAlterNote       $08
00089EDF CD0D                       	dc.b	nE6, $0D
00089EE1 E107                       	smpsAlterNote       $07
00089EE3 CB0D                       	dc.b	nD6, $0D
00089EE5 E104                       	smpsAlterNote       $04
00089EE7 E701                       	dc.b	smpsNoAttack, $01
00089EE9 E100                       	smpsAlterNote       $00
00089EEB E701                       	dc.b	smpsNoAttack, $01
00089EED E101                       	smpsAlterNote       $01
00089EEF E701                       	dc.b	smpsNoAttack, $01
00089EF1 E107                       	smpsAlterNote       $07
00089EF3 E701                       	dc.b	smpsNoAttack, $01
00089EF5 E10B                       	smpsAlterNote       $0B
00089EF7 E701                       	dc.b	smpsNoAttack, $01
00089EF9 E107                       	smpsAlterNote       $07
00089EFB E701                       	dc.b	smpsNoAttack, $01
00089EFD E104                       	smpsAlterNote       $04
00089EFF E701                       	dc.b	smpsNoAttack, $01
00089F01 E100                       	smpsAlterNote       $00
00089F03 E701                       	dc.b	smpsNoAttack, $01
00089F05 E104                       	smpsAlterNote       $04
00089F07 E701                       	dc.b	smpsNoAttack, $01
00089F09 E10A                       	smpsAlterNote       $0A
00089F0B E701                       	dc.b	smpsNoAttack, $01
00089F0D E10B                       	smpsAlterNote       $0B
00089F0F E701                       	dc.b	smpsNoAttack, $01
00089F11 E108                       	smpsAlterNote       $08
00089F13 CC0D                       	dc.b	nEb6, $0D
00089F15 E105                       	smpsAlterNote       $05
00089F17 E701                       	dc.b	smpsNoAttack, $01
00089F19 E101                       	smpsAlterNote       $01
00089F1B E701                       	dc.b	smpsNoAttack, $01
00089F1D E102                       	smpsAlterNote       $02
00089F1F E701                       	dc.b	smpsNoAttack, $01
00089F21 E108                       	smpsAlterNote       $08
00089F23 E701                       	dc.b	smpsNoAttack, $01
00089F25 E106                       	smpsAlterNote       $06
00089F27 C903 8004 C902 C902 8001+  	dc.b	nC6, $03, nRst, $04, nC6, $02, nC6, $02, nRst, $01, nC6, $01
00089F33 8001                       	dc.b	nRst, $01
00089F35 E107                       	smpsAlterNote       $07
00089F37 CB0D                       	dc.b	nD6, $0D
00089F39 E104                       	smpsAlterNote       $04
00089F3B E701                       	dc.b	smpsNoAttack, $01
00089F3D E100                       	smpsAlterNote       $00
00089F3F E701                       	dc.b	smpsNoAttack, $01
00089F41 E104                       	smpsAlterNote       $04
00089F43 E701                       	dc.b	smpsNoAttack, $01
00089F45 E107                       	smpsAlterNote       $07
00089F47 E701                       	dc.b	smpsNoAttack, $01
00089F49 E10B                       	smpsAlterNote       $0B
00089F4B E701                       	dc.b	smpsNoAttack, $01
00089F4D E107                       	smpsAlterNote       $07
00089F4F E701                       	dc.b	smpsNoAttack, $01
00089F51 E101                       	smpsAlterNote       $01
00089F53 E701                       	dc.b	smpsNoAttack, $01
00089F55 E100                       	smpsAlterNote       $00
00089F57 E701                       	dc.b	smpsNoAttack, $01
00089F59 E104                       	smpsAlterNote       $04
00089F5B E701                       	dc.b	smpsNoAttack, $01
00089F5D E10A                       	smpsAlterNote       $0A
00089F5F E701                       	dc.b	smpsNoAttack, $01
00089F61 E10B                       	smpsAlterNote       $0B
00089F63 8001                       	dc.b	nRst, $01
00089F65 E109                       	smpsAlterNote       $09
00089F67 CE0A                       	dc.b	nF6, $0A
00089F69 E108                       	smpsAlterNote       $08
00089F6B CC07                       	dc.b	nEb6, $07
00089F6D E106                       	smpsAlterNote       $06
00089F6F C903 8004 C902 C902 C902+  	dc.b	nC6, $03, nRst, $04, nC6, $02, nC6, $02, nC6, $02, nRst, $01
00089F7B E107                       	smpsAlterNote       $07
00089F7D CB0D                       	dc.b	nD6, $0D
00089F7F E101                       	smpsAlterNote       $01
00089F81 E701                       	dc.b	smpsNoAttack, $01
00089F83 E100                       	smpsAlterNote       $00
00089F85 E701                       	dc.b	smpsNoAttack, $01
00089F87 E104                       	smpsAlterNote       $04
00089F89 E701                       	dc.b	smpsNoAttack, $01
00089F8B E10A                       	smpsAlterNote       $0A
00089F8D E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00089F91 E107                       	smpsAlterNote       $07
00089F93 E701                       	dc.b	smpsNoAttack, $01
00089F95 E101                       	smpsAlterNote       $01
00089F97 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00089F9B E107                       	smpsAlterNote       $07
00089F9D E701                       	dc.b	smpsNoAttack, $01
00089F9F E10A                       	smpsAlterNote       $0A
00089FA1 E701                       	dc.b	smpsNoAttack, $01
00089FA3 E10B                       	smpsAlterNote       $0B
00089FA5 8001                       	dc.b	nRst, $01
00089FA7 E108                       	smpsAlterNote       $08
00089FA9 CC0D                       	dc.b	nEb6, $0D
00089FAB E102                       	smpsAlterNote       $02
00089FAD E701                       	dc.b	smpsNoAttack, $01
00089FAF E101                       	smpsAlterNote       $01
00089FB1 E701                       	dc.b	smpsNoAttack, $01
00089FB3 E105                       	smpsAlterNote       $05
00089FB5 E701                       	dc.b	smpsNoAttack, $01
00089FB7 E108                       	smpsAlterNote       $08
00089FB9 8001                       	dc.b	nRst, $01
00089FBB E106                       	smpsAlterNote       $06
00089FBD C903 8004 C901 8001 C902+  	dc.b	nC6, $03, nRst, $04, nC6, $01, nRst, $01, nC6, $02, nC6, $02
00089FC9 8001                       	dc.b	nRst, $01
00089FCB E107                       	smpsAlterNote       $07
00089FCD CB0D                       	dc.b	nD6, $0D
00089FCF E101                       	smpsAlterNote       $01
00089FD1 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00089FD5 E104                       	smpsAlterNote       $04
00089FD7 E701                       	dc.b	smpsNoAttack, $01
00089FD9 E10A                       	smpsAlterNote       $0A
00089FDB E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00089FDF E104                       	smpsAlterNote       $04
00089FE1 E701                       	dc.b	smpsNoAttack, $01
00089FE3 E101                       	smpsAlterNote       $01
00089FE5 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00089FE9 E107                       	smpsAlterNote       $07
00089FEB E701                       	dc.b	smpsNoAttack, $01
00089FED E10B                       	smpsAlterNote       $0B
00089FEF E701                       	dc.b	smpsNoAttack, $01
00089FF1 E10A                       	smpsAlterNote       $0A
00089FF3 E701                       	dc.b	smpsNoAttack, $01
00089FF5 E104                       	smpsAlterNote       $04
00089FF7 E701                       	dc.b	smpsNoAttack, $01
00089FF9 E100                       	smpsAlterNote       $00
00089FFB E701                       	dc.b	smpsNoAttack, $01
00089FFD E101                       	smpsAlterNote       $01
00089FFF 801C                       	dc.b	nRst, $1C
0008A003 E107                       	smpsAlterNote       $07
0008A005 BF03 8001                  	dc.b	nD5, $03, nRst, $01
0008A009 E603                       	smpsAlterVol        $03
0008A00B F6F1 AD                    	smpsJump            music84_Jump03
0008A00E                            
0008A00E                            ; FM3 Data
0008A00E                            music84_FM3:
0008A00E E0C0                       	smpsPan             panCenter, $00
0008A012 E109                       	smpsAlterNote       $09
0008A014 C203 8007                  	dc.b	nF5, $03, nRst, $07
0008A018 E108                       	smpsAlterNote       $08
0008A01A C103 800B                  	dc.b	nE5, $03, nRst, $0B
0008A01E E10B                       	smpsAlterNote       $0B
0008A020 BA03 8006                  	dc.b	nA4, $03, nRst, $06
0008A026 E040                       	smpsPan             panRight, $00
0008A028 E110                       	smpsAlterNote       $10
0008A02A E6F9                       	smpsAlterVol        $F9
0008A02C C702 8001                  	dc.b	nBb5, $02, nRst, $01
0008A030 E10F                       	smpsAlterNote       $0F
0008A032 C603                       	dc.b	nA5, $03
0008A034 E10D                       	smpsAlterNote       $0D
0008A036 C403 8001 C203             	dc.b	nG5, $03, nRst, $01, nF5, $03
0008A03C E10C                       	smpsAlterNote       $0C
0008A03E C103 8001                  	dc.b	nE5, $03, nRst, $01
0008A042 E10A                       	smpsAlterNote       $0A
0008A044 BD02 8001                  	dc.b	nC5, $02, nRst, $01
0008A048 E10F                       	smpsAlterNote       $0F
0008A04A BA01 8001                  	dc.b	nA4, $01, nRst, $01
0008A04E E0C0                       	smpsPan             panCenter, $00
0008A052 E109                       	smpsAlterNote       $09
0008A054 E609                       	smpsAlterVol        $09
0008A056 B603                       	dc.b	nF4, $03
0008A058                            
0008A058                            music84_Jump02:
0008A058 E70A                       	dc.b	smpsNoAttack, $0A
0008A05A E103                       	smpsAlterNote       $03
0008A05C E701                       	dc.b	smpsNoAttack, $01
0008A05E E102                       	smpsAlterNote       $02
0008A060 E701                       	dc.b	smpsNoAttack, $01
0008A062 E106                       	smpsAlterNote       $06
0008A064 E701                       	dc.b	smpsNoAttack, $01
0008A066 E10C                       	smpsAlterNote       $0C
0008A068 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008A06C E109                       	smpsAlterNote       $09
0008A06E E701                       	dc.b	smpsNoAttack, $01
0008A070 E103                       	smpsAlterNote       $03
0008A072 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008A076 E109                       	smpsAlterNote       $09
0008A078 E701                       	dc.b	smpsNoAttack, $01
0008A07A E10C                       	smpsAlterNote       $0C
0008A07C E701                       	dc.b	smpsNoAttack, $01
0008A07E E10D                       	smpsAlterNote       $0D
0008A080 8001                       	dc.b	nRst, $01
0008A082 E109                       	smpsAlterNote       $09
0008A084 B80D                       	dc.b	nG4, $0D
0008A086 E103                       	smpsAlterNote       $03
0008A088 E701                       	dc.b	smpsNoAttack, $01
0008A08A E102                       	smpsAlterNote       $02
0008A08C E701                       	dc.b	smpsNoAttack, $01
0008A08E E106                       	smpsAlterNote       $06
0008A090 E701                       	dc.b	smpsNoAttack, $01
0008A092 E10C                       	smpsAlterNote       $0C
0008A094 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008A098 E109                       	smpsAlterNote       $09
0008A09A E701                       	dc.b	smpsNoAttack, $01
0008A09C E103                       	smpsAlterNote       $03
0008A09E E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008A0A2 E109                       	smpsAlterNote       $09
0008A0A4 E701                       	dc.b	smpsNoAttack, $01
0008A0A6 E10C                       	smpsAlterNote       $0C
0008A0A8 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008A0AC E106                       	smpsAlterNote       $06
0008A0AE E701                       	dc.b	smpsNoAttack, $01
0008A0B0 E102                       	smpsAlterNote       $02
0008A0B2 E701                       	dc.b	smpsNoAttack, $01
0008A0B4 E103                       	smpsAlterNote       $03
0008A0B6 E701                       	dc.b	smpsNoAttack, $01
0008A0B8 E109                       	smpsAlterNote       $09
0008A0BA E701                       	dc.b	smpsNoAttack, $01
0008A0BC E10D                       	smpsAlterNote       $0D
0008A0BE E701                       	dc.b	smpsNoAttack, $01
0008A0C0 E109                       	smpsAlterNote       $09
0008A0C2 E701 8001                  	dc.b	smpsNoAttack, $01, nRst, $01
0008A0C6 E10B                       	smpsAlterNote       $0B
0008A0C8 BA0D                       	dc.b	nA4, $0D
0008A0CA E105                       	smpsAlterNote       $05
0008A0CC E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008A0D0 E108                       	smpsAlterNote       $08
0008A0D2 E701                       	dc.b	smpsNoAttack, $01
0008A0D4 E10E                       	smpsAlterNote       $0E
0008A0D6 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008A0DA E108                       	smpsAlterNote       $08
0008A0DC E701                       	dc.b	smpsNoAttack, $01
0008A0DE E104                       	smpsAlterNote       $04
0008A0E0 E701                       	dc.b	smpsNoAttack, $01
0008A0E2 E105                       	smpsAlterNote       $05
0008A0E4 E701                       	dc.b	smpsNoAttack, $01
0008A0E6 E10B                       	smpsAlterNote       $0B
0008A0E8 E701                       	dc.b	smpsNoAttack, $01
0008A0EA E10F                       	smpsAlterNote       $0F
0008A0EC E701                       	dc.b	smpsNoAttack, $01
0008A0EE E10B                       	smpsAlterNote       $0B
0008A0F0 E701                       	dc.b	smpsNoAttack, $01
0008A0F2 E108                       	smpsAlterNote       $08
0008A0F4 E701                       	dc.b	smpsNoAttack, $01
0008A0F6 E104                       	smpsAlterNote       $04
0008A0F8 E701                       	dc.b	smpsNoAttack, $01
0008A0FA E108                       	smpsAlterNote       $08
0008A0FC E701                       	dc.b	smpsNoAttack, $01
0008A0FE E10E                       	smpsAlterNote       $0E
0008A100 E701                       	dc.b	smpsNoAttack, $01
0008A102 E10F                       	smpsAlterNote       $0F
0008A104 E701                       	dc.b	smpsNoAttack, $01
0008A106 E10B                       	smpsAlterNote       $0B
0008A108 E701                       	dc.b	smpsNoAttack, $01
0008A10A E105                       	smpsAlterNote       $05
0008A10C E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008A110 E108                       	smpsAlterNote       $08
0008A112 E701                       	dc.b	smpsNoAttack, $01
0008A114 E10E                       	smpsAlterNote       $0E
0008A116 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008A11A E108                       	smpsAlterNote       $08
0008A11C E701                       	dc.b	smpsNoAttack, $01
0008A11E E105                       	smpsAlterNote       $05
0008A120 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008A124 E10B                       	smpsAlterNote       $0B
0008A126 E701                       	dc.b	smpsNoAttack, $01
0008A128 E10F                       	smpsAlterNote       $0F
0008A12A E701                       	dc.b	smpsNoAttack, $01
0008A12C E10E                       	smpsAlterNote       $0E
0008A12E E701                       	dc.b	smpsNoAttack, $01
0008A130 E108                       	smpsAlterNote       $08
0008A132 E701                       	dc.b	smpsNoAttack, $01
0008A134 E104                       	smpsAlterNote       $04
0008A136 E701                       	dc.b	smpsNoAttack, $01
0008A138 E105                       	smpsAlterNote       $05
0008A13A 8001                       	dc.b	nRst, $01
0008A13C E108                       	smpsAlterNote       $08
0008A13E B50A                       	dc.b	nE4, $0A
0008A140 E109                       	smpsAlterNote       $09
0008A142 B60D                       	dc.b	nF4, $0D
0008A144 E106                       	smpsAlterNote       $06
0008A146 E701                       	dc.b	smpsNoAttack, $01
0008A148 E103                       	smpsAlterNote       $03
0008A14A E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008A14E E109                       	smpsAlterNote       $09
0008A150 E701                       	dc.b	smpsNoAttack, $01
0008A152 E10D                       	smpsAlterNote       $0D
0008A154 E701                       	dc.b	smpsNoAttack, $01
0008A156 E10C                       	smpsAlterNote       $0C
0008A158 E701                       	dc.b	smpsNoAttack, $01
0008A15A E106                       	smpsAlterNote       $06
0008A15C E701                       	dc.b	smpsNoAttack, $01
0008A15E E102                       	smpsAlterNote       $02
0008A160 E701                       	dc.b	smpsNoAttack, $01
0008A162 E106                       	smpsAlterNote       $06
0008A164 E701                       	dc.b	smpsNoAttack, $01
0008A166 E109                       	smpsAlterNote       $09
0008A168 E701                       	dc.b	smpsNoAttack, $01
0008A16A E10D                       	smpsAlterNote       $0D
0008A16C E701                       	dc.b	smpsNoAttack, $01
0008A16E E109                       	smpsAlterNote       $09
0008A170 B80D                       	dc.b	nG4, $0D
0008A172 E106                       	smpsAlterNote       $06
0008A174 E701                       	dc.b	smpsNoAttack, $01
0008A176 E103                       	smpsAlterNote       $03
0008A178 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008A17C E109                       	smpsAlterNote       $09
0008A17E E701                       	dc.b	smpsNoAttack, $01
0008A180 E10D                       	smpsAlterNote       $0D
0008A182 E701                       	dc.b	smpsNoAttack, $01
0008A184 E10C                       	smpsAlterNote       $0C
0008A186 E701                       	dc.b	smpsNoAttack, $01
0008A188 E106                       	smpsAlterNote       $06
0008A18A E701                       	dc.b	smpsNoAttack, $01
0008A18C E102                       	smpsAlterNote       $02
0008A18E E701                       	dc.b	smpsNoAttack, $01
0008A190 E106                       	smpsAlterNote       $06
0008A192 E701                       	dc.b	smpsNoAttack, $01
0008A194 E109                       	smpsAlterNote       $09
0008A196 E701                       	dc.b	smpsNoAttack, $01
0008A198 E10D                       	smpsAlterNote       $0D
0008A19A E701                       	dc.b	smpsNoAttack, $01
0008A19C E109                       	smpsAlterNote       $09
0008A19E E701                       	dc.b	smpsNoAttack, $01
0008A1A0 E103                       	smpsAlterNote       $03
0008A1A2 E701                       	dc.b	smpsNoAttack, $01
0008A1A4 E102                       	smpsAlterNote       $02
0008A1A6 E701                       	dc.b	smpsNoAttack, $01
0008A1A8 E106                       	smpsAlterNote       $06
0008A1AA E701                       	dc.b	smpsNoAttack, $01
0008A1AC E10C                       	smpsAlterNote       $0C
0008A1AE E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008A1B2 E109                       	smpsAlterNote       $09
0008A1B4 E701                       	dc.b	smpsNoAttack, $01
0008A1B6 E10B                       	smpsAlterNote       $0B
0008A1B8 BA0D                       	dc.b	nA4, $0D
0008A1BA E108                       	smpsAlterNote       $08
0008A1BC E701                       	dc.b	smpsNoAttack, $01
0008A1BE E104                       	smpsAlterNote       $04
0008A1C0 E701                       	dc.b	smpsNoAttack, $01
0008A1C2 E108                       	smpsAlterNote       $08
0008A1C4 E701                       	dc.b	smpsNoAttack, $01
0008A1C6 E10B                       	smpsAlterNote       $0B
0008A1C8 E701                       	dc.b	smpsNoAttack, $01
0008A1CA E10F                       	smpsAlterNote       $0F
0008A1CC E701                       	dc.b	smpsNoAttack, $01
0008A1CE E10B                       	smpsAlterNote       $0B
0008A1D0 E701                       	dc.b	smpsNoAttack, $01
0008A1D2 E105                       	smpsAlterNote       $05
0008A1D4 E701                       	dc.b	smpsNoAttack, $01
0008A1D6 E104                       	smpsAlterNote       $04
0008A1D8 E701                       	dc.b	smpsNoAttack, $01
0008A1DA E108                       	smpsAlterNote       $08
0008A1DC E701                       	dc.b	smpsNoAttack, $01
0008A1DE E10E                       	smpsAlterNote       $0E
0008A1E0 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008A1E4 E10B                       	smpsAlterNote       $0B
0008A1E6 E701                       	dc.b	smpsNoAttack, $01
0008A1E8 E105                       	smpsAlterNote       $05
0008A1EA E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008A1EE E10B                       	smpsAlterNote       $0B
0008A1F0 E701                       	dc.b	smpsNoAttack, $01
0008A1F2 E10E                       	smpsAlterNote       $0E
0008A1F4 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008A1F8 E108                       	smpsAlterNote       $08
0008A1FA E701                       	dc.b	smpsNoAttack, $01
0008A1FC E104                       	smpsAlterNote       $04
0008A1FE E701                       	dc.b	smpsNoAttack, $01
0008A200 E105                       	smpsAlterNote       $05
0008A202 E701                       	dc.b	smpsNoAttack, $01
0008A204 E10B                       	smpsAlterNote       $0B
0008A206 E701                       	dc.b	smpsNoAttack, $01
0008A208 E10F                       	smpsAlterNote       $0F
0008A20A E701                       	dc.b	smpsNoAttack, $01
0008A20C E10B                       	smpsAlterNote       $0B
0008A20E E701                       	dc.b	smpsNoAttack, $01
0008A210 E108                       	smpsAlterNote       $08
0008A212 E701                       	dc.b	smpsNoAttack, $01
0008A214 E105                       	smpsAlterNote       $05
0008A216 8001                       	dc.b	nRst, $01
0008A218 E109                       	smpsAlterNote       $09
0008A21A B609 8001                  	dc.b	nF4, $09, nRst, $01
0008A21E E108                       	smpsAlterNote       $08
0008A220 B506 8001                  	dc.b	nE4, $06, nRst, $01
0008A224 E107                       	smpsAlterNote       $07
0008A226 B30D 8001                  	dc.b	nD4, $0D, nRst, $01
0008A22A E108                       	smpsAlterNote       $08
0008A22C B502 8001                  	dc.b	nE4, $02, nRst, $01
0008A230 E109                       	smpsAlterNote       $09
0008A232 B603 B803 8001             	dc.b	nF4, $03, nG4, $03, nRst, $01
0008A238 E10B                       	smpsAlterNote       $0B
0008A23A BA0D                       	dc.b	nA4, $0D
0008A23C E108                       	smpsAlterNote       $08
0008A23E E701                       	dc.b	smpsNoAttack, $01
0008A240 E104                       	smpsAlterNote       $04
0008A242 E701                       	dc.b	smpsNoAttack, $01
0008A244 E108                       	smpsAlterNote       $08
0008A246 E701                       	dc.b	smpsNoAttack, $01
0008A248 E10E                       	smpsAlterNote       $0E
0008A24A E701                       	dc.b	smpsNoAttack, $01
0008A24C E10F                       	smpsAlterNote       $0F
0008A24E E701                       	dc.b	smpsNoAttack, $01
0008A250 E10B                       	smpsAlterNote       $0B
0008A252 E701                       	dc.b	smpsNoAttack, $01
0008A254 E105                       	smpsAlterNote       $05
0008A256 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008A25A E108                       	smpsAlterNote       $08
0008A25C E701                       	dc.b	smpsNoAttack, $01
0008A25E E10E                       	smpsAlterNote       $0E
0008A260 E701                       	dc.b	smpsNoAttack, $01
0008A262 E10F                       	smpsAlterNote       $0F
0008A264 8001                       	dc.b	nRst, $01
0008A266 E109                       	smpsAlterNote       $09
0008A268 C20D                       	dc.b	nF5, $0D
0008A26A E103                       	smpsAlterNote       $03
0008A26C E701                       	dc.b	smpsNoAttack, $01
0008A26E E102                       	smpsAlterNote       $02
0008A270 E701                       	dc.b	smpsNoAttack, $01
0008A272 E106                       	smpsAlterNote       $06
0008A274 E701                       	dc.b	smpsNoAttack, $01
0008A276 E10C                       	smpsAlterNote       $0C
0008A278 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008A27C E109                       	smpsAlterNote       $09
0008A27E E701                       	dc.b	smpsNoAttack, $01
0008A280 E103                       	smpsAlterNote       $03
0008A282 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008A286 E109                       	smpsAlterNote       $09
0008A288 E701                       	dc.b	smpsNoAttack, $01
0008A28A E10C                       	smpsAlterNote       $0C
0008A28C E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008A290 E106                       	smpsAlterNote       $06
0008A292 E701                       	dc.b	smpsNoAttack, $01
0008A294 E102                       	smpsAlterNote       $02
0008A296 E701                       	dc.b	smpsNoAttack, $01
0008A298 E103                       	smpsAlterNote       $03
0008A29A E701                       	dc.b	smpsNoAttack, $01
0008A29C E109                       	smpsAlterNote       $09
0008A29E E701                       	dc.b	smpsNoAttack, $01
0008A2A0 E10D                       	smpsAlterNote       $0D
0008A2A2 E701                       	dc.b	smpsNoAttack, $01
0008A2A4 E109                       	smpsAlterNote       $09
0008A2A6 E701                       	dc.b	smpsNoAttack, $01
0008A2A8 E106                       	smpsAlterNote       $06
0008A2AA E701                       	dc.b	smpsNoAttack, $01
0008A2AC E102                       	smpsAlterNote       $02
0008A2AE E701                       	dc.b	smpsNoAttack, $01
0008A2B0 E106                       	smpsAlterNote       $06
0008A2B2 E701                       	dc.b	smpsNoAttack, $01
0008A2B4 E10C                       	smpsAlterNote       $0C
0008A2B6 E701                       	dc.b	smpsNoAttack, $01
0008A2B8 E10D                       	smpsAlterNote       $0D
0008A2BA E701                       	dc.b	smpsNoAttack, $01
0008A2BC E109                       	smpsAlterNote       $09
0008A2BE E701                       	dc.b	smpsNoAttack, $01
0008A2C0 E103                       	smpsAlterNote       $03
0008A2C2 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008A2C6 E106                       	smpsAlterNote       $06
0008A2C8 E701                       	dc.b	smpsNoAttack, $01
0008A2CA E10C                       	smpsAlterNote       $0C
0008A2CC E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008A2D0 E106                       	smpsAlterNote       $06
0008A2D2 E701                       	dc.b	smpsNoAttack, $01
0008A2D4 E103                       	smpsAlterNote       $03
0008A2D6 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008A2DA E109                       	smpsAlterNote       $09
0008A2DC E701                       	dc.b	smpsNoAttack, $01
0008A2DE E10D                       	smpsAlterNote       $0D
0008A2E0 E701                       	dc.b	smpsNoAttack, $01
0008A2E2 E10C                       	smpsAlterNote       $0C
0008A2E4 E701                       	dc.b	smpsNoAttack, $01
0008A2E6 E106                       	smpsAlterNote       $06
0008A2E8 E701                       	dc.b	smpsNoAttack, $01
0008A2EA E102                       	smpsAlterNote       $02
0008A2EC E701                       	dc.b	smpsNoAttack, $01
0008A2EE E106                       	smpsAlterNote       $06
0008A2F0 E701                       	dc.b	smpsNoAttack, $01
0008A2F2 E109                       	smpsAlterNote       $09
0008A2F4 E701                       	dc.b	smpsNoAttack, $01
0008A2F6 E10D                       	smpsAlterNote       $0D
0008A2F8 E701                       	dc.b	smpsNoAttack, $01
0008A2FA E109                       	smpsAlterNote       $09
0008A2FC E701                       	dc.b	smpsNoAttack, $01
0008A2FE E103                       	smpsAlterNote       $03
0008A300 E701 8001                  	dc.b	smpsNoAttack, $01, nRst, $01
0008A304 E109                       	smpsAlterNote       $09
0008A306 C206                       	dc.b	nF5, $06
0008A308 E108                       	smpsAlterNote       $08
0008A30A C10E                       	dc.b	nE5, $0E
0008A30C E102                       	smpsAlterNote       $02
0008A30E E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008A312 E108                       	smpsAlterNote       $08
0008A314 E701                       	dc.b	smpsNoAttack, $01
0008A316 E10B                       	smpsAlterNote       $0B
0008A318 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008A31C E105                       	smpsAlterNote       $05
0008A31E E701                       	dc.b	smpsNoAttack, $01
0008A320 E101                       	smpsAlterNote       $01
0008A322 E701                       	dc.b	smpsNoAttack, $01
0008A324 E102                       	smpsAlterNote       $02
0008A326 E701                       	dc.b	smpsNoAttack, $01
0008A328 E108                       	smpsAlterNote       $08
0008A32A E701                       	dc.b	smpsNoAttack, $01
0008A32C E10C                       	smpsAlterNote       $0C
0008A32E E701                       	dc.b	smpsNoAttack, $01
0008A330 E107                       	smpsAlterNote       $07
0008A332 BF0E                       	dc.b	nD5, $0E
0008A334 E101                       	smpsAlterNote       $01
0008A336 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008A33A E107                       	smpsAlterNote       $07
0008A33C E701                       	dc.b	smpsNoAttack, $01
0008A33E E10A                       	smpsAlterNote       $0A
0008A340 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008A344 E104                       	smpsAlterNote       $04
0008A346 E701                       	dc.b	smpsNoAttack, $01
0008A348 E100                       	smpsAlterNote       $00
0008A34A E701                       	dc.b	smpsNoAttack, $01
0008A34C E104                       	smpsAlterNote       $04
0008A34E E701                       	dc.b	smpsNoAttack, $01
0008A350 E107                       	smpsAlterNote       $07
0008A352 E701                       	dc.b	smpsNoAttack, $01
0008A354 E10B                       	smpsAlterNote       $0B
0008A356 E701                       	dc.b	smpsNoAttack, $01
0008A358 E107                       	smpsAlterNote       $07
0008A35A E701                       	dc.b	smpsNoAttack, $01
0008A35C E101                       	smpsAlterNote       $01
0008A35E E701                       	dc.b	smpsNoAttack, $01
0008A360 E100                       	smpsAlterNote       $00
0008A362 E701                       	dc.b	smpsNoAttack, $01
0008A364 E104                       	smpsAlterNote       $04
0008A366 E701                       	dc.b	smpsNoAttack, $01
0008A368 E10A                       	smpsAlterNote       $0A
0008A36A E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008A36E E107                       	smpsAlterNote       $07
0008A370 E701                       	dc.b	smpsNoAttack, $01
0008A372 E101                       	smpsAlterNote       $01
0008A374 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008A378 E107                       	smpsAlterNote       $07
0008A37A E701                       	dc.b	smpsNoAttack, $01
0008A37C E10A                       	smpsAlterNote       $0A
0008A37E E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008A382 E104                       	smpsAlterNote       $04
0008A384 E701                       	dc.b	smpsNoAttack, $01
0008A386 E100                       	smpsAlterNote       $00
0008A388 E701                       	dc.b	smpsNoAttack, $01
0008A38A E101                       	smpsAlterNote       $01
0008A38C E701                       	dc.b	smpsNoAttack, $01
0008A38E E107                       	smpsAlterNote       $07
0008A390 E701                       	dc.b	smpsNoAttack, $01
0008A392 E10B                       	smpsAlterNote       $0B
0008A394 E701                       	dc.b	smpsNoAttack, $01
0008A396 E107                       	smpsAlterNote       $07
0008A398 E701                       	dc.b	smpsNoAttack, $01
0008A39A E104                       	smpsAlterNote       $04
0008A39C E701                       	dc.b	smpsNoAttack, $01
0008A39E E100                       	smpsAlterNote       $00
0008A3A0 E701                       	dc.b	smpsNoAttack, $01
0008A3A2 E104                       	smpsAlterNote       $04
0008A3A4 E701                       	dc.b	smpsNoAttack, $01
0008A3A6 E10A                       	smpsAlterNote       $0A
0008A3A8 E701                       	dc.b	smpsNoAttack, $01
0008A3AA E10B                       	smpsAlterNote       $0B
0008A3AC E701                       	dc.b	smpsNoAttack, $01
0008A3AE E107                       	smpsAlterNote       $07
0008A3B0 E701                       	dc.b	smpsNoAttack, $01
0008A3B2 E101                       	smpsAlterNote       $01
0008A3B4 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008A3B8 E104                       	smpsAlterNote       $04
0008A3BA E701                       	dc.b	smpsNoAttack, $01
0008A3BC E10A                       	smpsAlterNote       $0A
0008A3BE E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008A3C2 E104                       	smpsAlterNote       $04
0008A3C4 E701                       	dc.b	smpsNoAttack, $01
0008A3C6 E101                       	smpsAlterNote       $01
0008A3C8 E701                       	dc.b	smpsNoAttack, $01
0008A3CC E107                       	smpsAlterNote       $07
0008A3CE E6FF                       	smpsAlterVol        $FF
0008A3D0 BF06 8001 BF03 BF03 8001+  	dc.b	nD5, $06, nRst, $01, nD5, $03, nD5, $03, nRst, $01, nCs5, $03
0008A3DC 8004                       	dc.b	nRst, $04
0008A3E0 E109                       	smpsAlterNote       $09
0008A3E2 E602                       	smpsAlterVol        $02
0008A3E4 B803 B603 8001             	dc.b	nG4, $03, nF4, $03, nRst, $01
0008A3EA E108                       	smpsAlterNote       $08
0008A3EC B502 8001                  	dc.b	nE4, $02, nRst, $01
0008A3F0 E109                       	smpsAlterNote       $09
0008A3F2 B60D                       	dc.b	nF4, $0D
0008A3F4 E106                       	smpsAlterNote       $06
0008A3F6 E701                       	dc.b	smpsNoAttack, $01
0008A3F8 E102                       	smpsAlterNote       $02
0008A3FA E701                       	dc.b	smpsNoAttack, $01
0008A3FC E106                       	smpsAlterNote       $06
0008A3FE E701                       	dc.b	smpsNoAttack, $01
0008A400 E109                       	smpsAlterNote       $09
0008A402 E701                       	dc.b	smpsNoAttack, $01
0008A404 E10D                       	smpsAlterNote       $0D
0008A406 E701                       	dc.b	smpsNoAttack, $01
0008A408 E109                       	smpsAlterNote       $09
0008A40A E701                       	dc.b	smpsNoAttack, $01
0008A40C E103                       	smpsAlterNote       $03
0008A40E E701                       	dc.b	smpsNoAttack, $01
0008A410 E102                       	smpsAlterNote       $02
0008A412 E701                       	dc.b	smpsNoAttack, $01
0008A414 E106                       	smpsAlterNote       $06
0008A416 E701                       	dc.b	smpsNoAttack, $01
0008A418 E10C                       	smpsAlterNote       $0C
0008A41A E701                       	dc.b	smpsNoAttack, $01
0008A41C E10D                       	smpsAlterNote       $0D
0008A41E 8001                       	dc.b	nRst, $01
0008A420 E109                       	smpsAlterNote       $09
0008A422 B80D                       	dc.b	nG4, $0D
0008A424 E106                       	smpsAlterNote       $06
0008A426 E701                       	dc.b	smpsNoAttack, $01
0008A428 E102                       	smpsAlterNote       $02
0008A42A E701                       	dc.b	smpsNoAttack, $01
0008A42C E106                       	smpsAlterNote       $06
0008A42E E701                       	dc.b	smpsNoAttack, $01
0008A430 E10C                       	smpsAlterNote       $0C
0008A432 E701                       	dc.b	smpsNoAttack, $01
0008A434 E10D                       	smpsAlterNote       $0D
0008A436 E701                       	dc.b	smpsNoAttack, $01
0008A438 E109                       	smpsAlterNote       $09
0008A43A E701                       	dc.b	smpsNoAttack, $01
0008A43C E103                       	smpsAlterNote       $03
0008A43E E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008A442 E106                       	smpsAlterNote       $06
0008A444 E701                       	dc.b	smpsNoAttack, $01
0008A446 E10C                       	smpsAlterNote       $0C
0008A448 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008A44C E106                       	smpsAlterNote       $06
0008A44E E701                       	dc.b	smpsNoAttack, $01
0008A450 E103                       	smpsAlterNote       $03
0008A452 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008A456 E109                       	smpsAlterNote       $09
0008A458 E701                       	dc.b	smpsNoAttack, $01
0008A45A E10D                       	smpsAlterNote       $0D
0008A45C E701                       	dc.b	smpsNoAttack, $01
0008A45E E10C                       	smpsAlterNote       $0C
0008A460 E701                       	dc.b	smpsNoAttack, $01
0008A462 E109                       	smpsAlterNote       $09
0008A464 8001                       	dc.b	nRst, $01
0008A466 E10B                       	smpsAlterNote       $0B
0008A468 BA03                       	dc.b	nA4, $03
0008A46A E10C                       	smpsAlterNote       $0C
0008A46C BB03 8001                  	dc.b	nBb4, $03, nRst, $01
0008A470 E10B                       	smpsAlterNote       $0B
0008A472 BA02 8001 C603             	dc.b	nA4, $02, nRst, $01, nA5, $03
0008A478 E10C                       	smpsAlterNote       $0C
0008A47A C703 8001                  	dc.b	nBb5, $03, nRst, $01
0008A47E E10B                       	smpsAlterNote       $0B
0008A480 C603 D203 8001             	dc.b	nA5, $03, nA6, $03, nRst, $01
0008A486 E10C                       	smpsAlterNote       $0C
0008A488 D303                       	dc.b	nBb6, $03
0008A48A E10B                       	smpsAlterNote       $0B
0008A48C D20D                       	dc.b	nA6, $0D
0008A48E E108                       	smpsAlterNote       $08
0008A490 E701                       	dc.b	smpsNoAttack, $01
0008A492 E104                       	smpsAlterNote       $04
0008A494 E701                       	dc.b	smpsNoAttack, $01
0008A496 E105                       	smpsAlterNote       $05
0008A498 E701                       	dc.b	smpsNoAttack, $01
0008A49A E10B                       	smpsAlterNote       $0B
0008A49C E701                       	dc.b	smpsNoAttack, $01
0008A49E E10F                       	smpsAlterNote       $0F
0008A4A0 E701                       	dc.b	smpsNoAttack, $01
0008A4A2 E10B                       	smpsAlterNote       $0B
0008A4A4 E701                       	dc.b	smpsNoAttack, $01
0008A4A6 E108                       	smpsAlterNote       $08
0008A4A8 E701                       	dc.b	smpsNoAttack, $01
0008A4AA E104                       	smpsAlterNote       $04
0008A4AC E701                       	dc.b	smpsNoAttack, $01
0008A4AE E108                       	smpsAlterNote       $08
0008A4B0 E701                       	dc.b	smpsNoAttack, $01
0008A4B2 E10E                       	smpsAlterNote       $0E
0008A4B4 E701                       	dc.b	smpsNoAttack, $01
0008A4B6 E10F                       	smpsAlterNote       $0F
0008A4B8 E701                       	dc.b	smpsNoAttack, $01
0008A4BA E10B                       	smpsAlterNote       $0B
0008A4BC E701                       	dc.b	smpsNoAttack, $01
0008A4BE E105                       	smpsAlterNote       $05
0008A4C0 E701 E701 8007             	dc.b	smpsNoAttack, $01, smpsNoAttack, $01, nRst, $07
0008A4C6 E109                       	smpsAlterNote       $09
0008A4C8 CE07                       	dc.b	nF6, $07
0008A4CA E108                       	smpsAlterNote       $08
0008A4CC CD06 8001                  	dc.b	nE6, $06, nRst, $01
0008A4D0 E109                       	smpsAlterNote       $09
0008A4D2 CE03 8001                  	dc.b	nF6, $03, nRst, $01
0008A4D6 E108                       	smpsAlterNote       $08
0008A4D8 CC0D                       	dc.b	nEb6, $0D
0008A4DA E102                       	smpsAlterNote       $02
0008A4DC E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008A4E0 E108                       	smpsAlterNote       $08
0008A4E2 E701                       	dc.b	smpsNoAttack, $01
0008A4E4 E10B                       	smpsAlterNote       $0B
0008A4E6 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008A4EA E105                       	smpsAlterNote       $05
0008A4EC E701                       	dc.b	smpsNoAttack, $01
0008A4EE E101                       	smpsAlterNote       $01
0008A4F0 E701                       	dc.b	smpsNoAttack, $01
0008A4F2 E102                       	smpsAlterNote       $02
0008A4F4 E701                       	dc.b	smpsNoAttack, $01
0008A4F6 E108                       	smpsAlterNote       $08
0008A4F8 E701                       	dc.b	smpsNoAttack, $01
0008A4FA E10C                       	smpsAlterNote       $0C
0008A4FC E701                       	dc.b	smpsNoAttack, $01
0008A4FE E108                       	smpsAlterNote       $08
0008A500 E701                       	dc.b	smpsNoAttack, $01
0008A502 E105                       	smpsAlterNote       $05
0008A504 E701                       	dc.b	smpsNoAttack, $01
0008A506 E101                       	smpsAlterNote       $01
0008A508 E701                       	dc.b	smpsNoAttack, $01
0008A50A E105                       	smpsAlterNote       $05
0008A50C E701                       	dc.b	smpsNoAttack, $01
0008A50E E10B                       	smpsAlterNote       $0B
0008A510 E701                       	dc.b	smpsNoAttack, $01
0008A512 E10C                       	smpsAlterNote       $0C
0008A514 E701                       	dc.b	smpsNoAttack, $01
0008A516 E108                       	smpsAlterNote       $08
0008A518 E701                       	dc.b	smpsNoAttack, $01
0008A51A E107                       	smpsAlterNote       $07
0008A51C CB03 8001 CA03 CB03 8001   	dc.b	nD6, $03, nRst, $01, nCs6, $03, nD6, $03, nRst, $01
0008A526 E10B                       	smpsAlterNote       $0B
0008A528 C602 8001 C503 C603 8001   	dc.b	nA5, $02, nRst, $01, nAb5, $03, nA5, $03, nRst, $01
0008A532 E109                       	smpsAlterNote       $09
0008A534 C203                       	dc.b	nF5, $03
0008A536 E108                       	smpsAlterNote       $08
0008A538 C103 8001                  	dc.b	nE5, $03, nRst, $01
0008A53C E109                       	smpsAlterNote       $09
0008A53E C20D                       	dc.b	nF5, $0D
0008A540 E108                       	smpsAlterNote       $08
0008A542 C10E                       	dc.b	nE5, $0E
0008A544 E107                       	smpsAlterNote       $07
0008A546 BF0D                       	dc.b	nD5, $0D
0008A548 E104                       	smpsAlterNote       $04
0008A54A E701                       	dc.b	smpsNoAttack, $01
0008A54C E100                       	smpsAlterNote       $00
0008A54E E701                       	dc.b	smpsNoAttack, $01
0008A550 E104                       	smpsAlterNote       $04
0008A552 E701                       	dc.b	smpsNoAttack, $01
0008A554 E107                       	smpsAlterNote       $07
0008A556 E701                       	dc.b	smpsNoAttack, $01
0008A558 E10B                       	smpsAlterNote       $0B
0008A55A E701                       	dc.b	smpsNoAttack, $01
0008A55C E107                       	smpsAlterNote       $07
0008A55E E701                       	dc.b	smpsNoAttack, $01
0008A560 E101                       	smpsAlterNote       $01
0008A562 E701                       	dc.b	smpsNoAttack, $01
0008A564 E100                       	smpsAlterNote       $00
0008A566 E701                       	dc.b	smpsNoAttack, $01
0008A568 E104                       	smpsAlterNote       $04
0008A56A E701                       	dc.b	smpsNoAttack, $01
0008A56C E10A                       	smpsAlterNote       $0A
0008A56E E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008A572 E107                       	smpsAlterNote       $07
0008A574 E701                       	dc.b	smpsNoAttack, $01
0008A576 E101                       	smpsAlterNote       $01
0008A578 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008A57C E107                       	smpsAlterNote       $07
0008A57E E701                       	dc.b	smpsNoAttack, $01
0008A580 E10A                       	smpsAlterNote       $0A
0008A582 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008A586 E104                       	smpsAlterNote       $04
0008A588 E701                       	dc.b	smpsNoAttack, $01
0008A58A E100                       	smpsAlterNote       $00
0008A58C E701                       	dc.b	smpsNoAttack, $01
0008A58E E101                       	smpsAlterNote       $01
0008A590 E701                       	dc.b	smpsNoAttack, $01
0008A592 E107                       	smpsAlterNote       $07
0008A594 E701                       	dc.b	smpsNoAttack, $01
0008A596 E10B                       	smpsAlterNote       $0B
0008A598 E701                       	dc.b	smpsNoAttack, $01
0008A59A E107                       	smpsAlterNote       $07
0008A59C E701                       	dc.b	smpsNoAttack, $01
0008A59E E104                       	smpsAlterNote       $04
0008A5A0 E701                       	dc.b	smpsNoAttack, $01
0008A5A2 E100                       	smpsAlterNote       $00
0008A5A4 E701                       	dc.b	smpsNoAttack, $01
0008A5A6 E104                       	smpsAlterNote       $04
0008A5A8 E701                       	dc.b	smpsNoAttack, $01
0008A5AA E10A                       	smpsAlterNote       $0A
0008A5AC E701                       	dc.b	smpsNoAttack, $01
0008A5AE E10B                       	smpsAlterNote       $0B
0008A5B0 E701                       	dc.b	smpsNoAttack, $01
0008A5B2 E107                       	smpsAlterNote       $07
0008A5B4 E701                       	dc.b	smpsNoAttack, $01
0008A5B6 E101                       	smpsAlterNote       $01
0008A5B8 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008A5BC E104                       	smpsAlterNote       $04
0008A5BE E701                       	dc.b	smpsNoAttack, $01
0008A5C0 E10A                       	smpsAlterNote       $0A
0008A5C2 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008A5C6 E104                       	smpsAlterNote       $04
0008A5C8 E701                       	dc.b	smpsNoAttack, $01
0008A5CA E101                       	smpsAlterNote       $01
0008A5CC E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008A5D0 E107                       	smpsAlterNote       $07
0008A5D2 E701                       	dc.b	smpsNoAttack, $01
0008A5D4 E10B                       	smpsAlterNote       $0B
0008A5D6 E701                       	dc.b	smpsNoAttack, $01
0008A5D8 E10A                       	smpsAlterNote       $0A
0008A5DA E701                       	dc.b	smpsNoAttack, $01
0008A5DC E104                       	smpsAlterNote       $04
0008A5DE E701                       	dc.b	smpsNoAttack, $01
0008A5E0 E100                       	smpsAlterNote       $00
0008A5E2 E701                       	dc.b	smpsNoAttack, $01
0008A5E4 E104                       	smpsAlterNote       $04
0008A5E6 E701                       	dc.b	smpsNoAttack, $01
0008A5E8 E107                       	smpsAlterNote       $07
0008A5EA E701                       	dc.b	smpsNoAttack, $01
0008A5EC E10B                       	smpsAlterNote       $0B
0008A5EE E701                       	dc.b	smpsNoAttack, $01
0008A5F0 E107                       	smpsAlterNote       $07
0008A5F2 E701                       	dc.b	smpsNoAttack, $01
0008A5F4 E101                       	smpsAlterNote       $01
0008A5F6 E701                       	dc.b	smpsNoAttack, $01
0008A5F8 E100                       	smpsAlterNote       $00
0008A5FA E701                       	dc.b	smpsNoAttack, $01
0008A5FC E104                       	smpsAlterNote       $04
0008A5FE E701                       	dc.b	smpsNoAttack, $01
0008A600 E10A                       	smpsAlterNote       $0A
0008A602 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008A606 E107                       	smpsAlterNote       $07
0008A608 E701                       	dc.b	smpsNoAttack, $01
0008A60A E101                       	smpsAlterNote       $01
0008A60C E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008A610 E107                       	smpsAlterNote       $07
0008A612 E701                       	dc.b	smpsNoAttack, $01
0008A614 E10A                       	smpsAlterNote       $0A
0008A616 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008A61A E104                       	smpsAlterNote       $04
0008A61C E701                       	dc.b	smpsNoAttack, $01
0008A61E E100                       	smpsAlterNote       $00
0008A620 E701                       	dc.b	smpsNoAttack, $01
0008A622 E101                       	smpsAlterNote       $01
0008A624 E701                       	dc.b	smpsNoAttack, $01
0008A626 E107                       	smpsAlterNote       $07
0008A628 E701                       	dc.b	smpsNoAttack, $01
0008A62A E10B                       	smpsAlterNote       $0B
0008A62C E701                       	dc.b	smpsNoAttack, $01
0008A62E E107                       	smpsAlterNote       $07
0008A630 E701                       	dc.b	smpsNoAttack, $01
0008A632 E104                       	smpsAlterNote       $04
0008A634 E701                       	dc.b	smpsNoAttack, $01
0008A636 E100                       	smpsAlterNote       $00
0008A638 E701                       	dc.b	smpsNoAttack, $01
0008A63A E101                       	smpsAlterNote       $01
0008A63C 8001                       	dc.b	nRst, $01
0008A63E E109                       	smpsAlterNote       $09
0008A640 C20D                       	dc.b	nF5, $0D
0008A642 E106                       	smpsAlterNote       $06
0008A644 E701                       	dc.b	smpsNoAttack, $01
0008A646 E102                       	smpsAlterNote       $02
0008A648 E701                       	dc.b	smpsNoAttack, $01
0008A64A E106                       	smpsAlterNote       $06
0008A64C E701                       	dc.b	smpsNoAttack, $01
0008A64E E10C                       	smpsAlterNote       $0C
0008A650 E701                       	dc.b	smpsNoAttack, $01
0008A652 E10D                       	smpsAlterNote       $0D
0008A654 E701                       	dc.b	smpsNoAttack, $01
0008A656 E109                       	smpsAlterNote       $09
0008A658 E701                       	dc.b	smpsNoAttack, $01
0008A65A E103                       	smpsAlterNote       $03
0008A65C E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008A660 E106                       	smpsAlterNote       $06
0008A662 E701                       	dc.b	smpsNoAttack, $01
0008A664 E10C                       	smpsAlterNote       $0C
0008A666 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008A66A E106                       	smpsAlterNote       $06
0008A66C E701                       	dc.b	smpsNoAttack, $01
0008A66E E103                       	smpsAlterNote       $03
0008A670 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008A674 E109                       	smpsAlterNote       $09
0008A676 E701                       	dc.b	smpsNoAttack, $01
0008A678 E10D                       	smpsAlterNote       $0D
0008A67A E701                       	dc.b	smpsNoAttack, $01
0008A67C E10C                       	smpsAlterNote       $0C
0008A67E E701                       	dc.b	smpsNoAttack, $01
0008A680 E109                       	smpsAlterNote       $09
0008A682 8001                       	dc.b	nRst, $01
0008A684 E108                       	smpsAlterNote       $08
0008A686 C10D                       	dc.b	nE5, $0D
0008A688 E109                       	smpsAlterNote       $09
0008A68A C20A 8001                  	dc.b	nF5, $0A, nRst, $01
0008A68E E108                       	smpsAlterNote       $08
0008A690 C10D                       	dc.b	nE5, $0D
0008A692 E102                       	smpsAlterNote       $02
0008A694 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008A698 E105                       	smpsAlterNote       $05
0008A69A E701                       	dc.b	smpsNoAttack, $01
0008A69C E108                       	smpsAlterNote       $08
0008A69E 8001                       	dc.b	nRst, $01
0008A6A0 E107                       	smpsAlterNote       $07
0008A6A2 BF0D                       	dc.b	nD5, $0D
0008A6A4 E108                       	smpsAlterNote       $08
0008A6A6 C107                       	dc.b	nE5, $07
0008A6A8 E109                       	smpsAlterNote       $09
0008A6AA C207 C406 8001             	dc.b	nF5, $07, nG5, $06, nRst, $01
0008A6B0 E10B                       	smpsAlterNote       $0B
0008A6B2 C603                       	dc.b	nA5, $03
0008A6B4 E10C                       	smpsAlterNote       $0C
0008A6B6 C707 C703 8001             	dc.b	nBb5, $07, nBb5, $03, nRst, $01
0008A6BC E10B                       	smpsAlterNote       $0B
0008A6BE C603 D206 8001             	dc.b	nA5, $03, nA6, $06, nRst, $01
0008A6C4 E109                       	smpsAlterNote       $09
0008A6C6 D003                       	dc.b	nG6, $03
0008A6C8 E108                       	smpsAlterNote       $08
0008A6CA CD02 8001                  	dc.b	nE6, $02, nRst, $01
0008A6CE E10B                       	smpsAlterNote       $0B
0008A6D0 C601 8001                  	dc.b	nA5, $01, nRst, $01
0008A6D4 E108                       	smpsAlterNote       $08
0008A6D6 C102                       	dc.b	nE5, $02
0008A6DA E10C                       	smpsAlterNote       $0C
0008A6DC E6FB                       	smpsAlterVol        $FB
0008A6DE A306 800F A303 A303 8019+  	dc.b	nBb2, $06, nRst, $0F, nBb2, $03, nBb2, $03, nRst, $19, nBb2, $02
0008A6EA 8001                       	dc.b	nRst, $01
0008A6EC E10B                       	smpsAlterNote       $0B
0008A6EE A206 800F A202 8001        	dc.b	nA2, $06, nRst, $0F, nA2, $02, nRst, $01
0008A6F6 E107                       	smpsAlterNote       $07
0008A6F8 A706 8001                  	dc.b	nD3, $06, nRst, $01
0008A6FC E10B                       	smpsAlterNote       $0B
0008A6FE A203                       	dc.b	nA2, $03
0008A700 E109                       	smpsAlterNote       $09
0008A702 AA03 8001                  	dc.b	nF3, $03, nRst, $01
0008A706 E108                       	smpsAlterNote       $08
0008A708 A906                       	dc.b	nE3, $06
0008A70A E107                       	smpsAlterNote       $07
0008A70C A703 8001                  	dc.b	nD3, $03, nRst, $01
0008A710 E106                       	smpsAlterNote       $06
0008A712 A503                       	dc.b	nC3, $03
0008A714 E10C                       	smpsAlterNote       $0C
0008A716 A303 8001                  	dc.b	nBb2, $03, nRst, $01
0008A71A E10B                       	smpsAlterNote       $0B
0008A71C A203 8004                  	dc.b	nA2, $03, nRst, $04
0008A720 E11B                       	smpsAlterNote       $1B
0008A722 C401                       	dc.b	nG5, $01
0008A724 E1F4                       	smpsAlterNote       $F4
0008A726 E7C5 01                    	dc.b	smpsNoAttack, nAb5, $01
0008A729 E106                       	smpsAlterNote       $06
0008A72B E701                       	dc.b	smpsNoAttack, $01
0008A72D E10F                       	smpsAlterNote       $0F
0008A72F E701                       	dc.b	smpsNoAttack, $01
0008A731 E1E4                       	smpsAlterNote       $E4
0008A733 E7C6 01                    	dc.b	smpsNoAttack, nA5, $01
0008A736 E1F6                       	smpsAlterNote       $F6
0008A738 E701                       	dc.b	smpsNoAttack, $01
0008A73A E108                       	smpsAlterNote       $08
0008A73C E701                       	dc.b	smpsNoAttack, $01
0008A73E E10B                       	smpsAlterNote       $0B
0008A740 E706                       	dc.b	smpsNoAttack, $06
0008A742 E105                       	smpsAlterNote       $05
0008A744 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008A748 E108                       	smpsAlterNote       $08
0008A74A E701                       	dc.b	smpsNoAttack, $01
0008A74C E10E                       	smpsAlterNote       $0E
0008A74E E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008A752 E108                       	smpsAlterNote       $08
0008A754 E701                       	dc.b	smpsNoAttack, $01
0008A756 E105                       	smpsAlterNote       $05
0008A758 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008A75C E10B                       	smpsAlterNote       $0B
0008A75E E701                       	dc.b	smpsNoAttack, $01
0008A760 E10F                       	smpsAlterNote       $0F
0008A762 E701                       	dc.b	smpsNoAttack, $01
0008A764 E10E                       	smpsAlterNote       $0E
0008A766 E701                       	dc.b	smpsNoAttack, $01
0008A768 E108                       	smpsAlterNote       $08
0008A76A E701                       	dc.b	smpsNoAttack, $01
0008A76C E104                       	smpsAlterNote       $04
0008A76E E701                       	dc.b	smpsNoAttack, $01
0008A770 E108                       	smpsAlterNote       $08
0008A772 E701                       	dc.b	smpsNoAttack, $01
0008A774 E10B                       	smpsAlterNote       $0B
0008A776 E701                       	dc.b	smpsNoAttack, $01
0008A778 E10F                       	smpsAlterNote       $0F
0008A77A E701                       	dc.b	smpsNoAttack, $01
0008A77C E10B                       	smpsAlterNote       $0B
0008A77E E701                       	dc.b	smpsNoAttack, $01
0008A780 E105                       	smpsAlterNote       $05
0008A782 E701                       	dc.b	smpsNoAttack, $01
0008A784 E104                       	smpsAlterNote       $04
0008A786 E701                       	dc.b	smpsNoAttack, $01
0008A788 E108                       	smpsAlterNote       $08
0008A78A E701                       	dc.b	smpsNoAttack, $01
0008A78C E10E                       	smpsAlterNote       $0E
0008A78E E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008A792 E10B                       	smpsAlterNote       $0B
0008A794 E701                       	dc.b	smpsNoAttack, $01
0008A796 E105                       	smpsAlterNote       $05
0008A798 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008A79C E10B                       	smpsAlterNote       $0B
0008A79E E701                       	dc.b	smpsNoAttack, $01
0008A7A0 E10E                       	smpsAlterNote       $0E
0008A7A2 E701                       	dc.b	smpsNoAttack, $01
0008A7A4 E10F                       	smpsAlterNote       $0F
0008A7A6 8001                       	dc.b	nRst, $01
0008A7A8 E109                       	smpsAlterNote       $09
0008A7AA C403 C203 8001             	dc.b	nG5, $03, nF5, $03, nRst, $01
0008A7B0 E108                       	smpsAlterNote       $08
0008A7B2 C101 8001                  	dc.b	nE5, $01, nRst, $01
0008A7B6 E109                       	smpsAlterNote       $09
0008A7B8 C202                       	dc.b	nF5, $02
0008A7BA E108                       	smpsAlterNote       $08
0008A7BC C102                       	dc.b	nE5, $02
0008A7BE E107                       	smpsAlterNote       $07
0008A7C0 BF02 8001                  	dc.b	nD5, $02, nRst, $01
0008A7C4 E108                       	smpsAlterNote       $08
0008A7C6 C101 8001                  	dc.b	nE5, $01, nRst, $01
0008A7CA E107                       	smpsAlterNote       $07
0008A7CC BF02                       	dc.b	nD5, $02
0008A7CE E106                       	smpsAlterNote       $06
0008A7D0 BD02 8001                  	dc.b	nC5, $02, nRst, $01
0008A7D4 E107                       	smpsAlterNote       $07
0008A7D6 BF01 8001                  	dc.b	nD5, $01, nRst, $01
0008A7DA E106                       	smpsAlterNote       $06
0008A7DC BD02                       	dc.b	nC5, $02
0008A7DE E10C                       	smpsAlterNote       $0C
0008A7E0 BB02                       	dc.b	nBb4, $02
0008A7E2 E106                       	smpsAlterNote       $06
0008A7E4 BD02 8001                  	dc.b	nC5, $02, nRst, $01
0008A7E8 E10C                       	smpsAlterNote       $0C
0008A7EA BB01 8001                  	dc.b	nBb4, $01, nRst, $01
0008A7EE E10B                       	smpsAlterNote       $0B
0008A7F0 BA02                       	dc.b	nA4, $02
0008A7F2 E10C                       	smpsAlterNote       $0C
0008A7F4 BB02                       	dc.b	nBb4, $02
0008A7F6 E10B                       	smpsAlterNote       $0B
0008A7F8 BA02 8001 B901 8001 BA02   	dc.b	nA4, $02, nRst, $01, nAb4, $01, nRst, $01, nA4, $02
0008A802 E108                       	smpsAlterNote       $08
0008A804 B502 8001 C101 8001        	dc.b	nE4, $02, nRst, $01, nE5, $01, nRst, $01
0008A80C E107                       	smpsAlterNote       $07
0008A80E BE02                       	dc.b	nCs5, $02
0008A810 E10B                       	smpsAlterNote       $0B
0008A812 BA02                       	dc.b	nA4, $02
0008A814 E109                       	smpsAlterNote       $09
0008A816 B802 8001                  	dc.b	nG4, $02, nRst, $01
0008A81A E108                       	smpsAlterNote       $08
0008A81C B501 8001                  	dc.b	nE4, $01, nRst, $01
0008A820 E10B                       	smpsAlterNote       $0B
0008A822 AE02                       	dc.b	nA3, $02
0008A824 E10C                       	smpsAlterNote       $0C
0008A826 A307 800E A303 A303 8019+  	dc.b	nBb2, $07, nRst, $0E, nBb2, $03, nBb2, $03, nRst, $19, nBb2, $03
0008A832 E10B                       	smpsAlterNote       $0B
0008A834 A206 800F A202 8001        	dc.b	nA2, $06, nRst, $0F, nA2, $02, nRst, $01
0008A83C E107                       	smpsAlterNote       $07
0008A83E A706 8001                  	dc.b	nD3, $06, nRst, $01
0008A842 E10B                       	smpsAlterNote       $0B
0008A844 A203                       	dc.b	nA2, $03
0008A846 E109                       	smpsAlterNote       $09
0008A848 AA03 8001                  	dc.b	nF3, $03, nRst, $01
0008A84C E108                       	smpsAlterNote       $08
0008A84E A906 8001                  	dc.b	nE3, $06, nRst, $01
0008A852 E107                       	smpsAlterNote       $07
0008A854 A702 8001                  	dc.b	nD3, $02, nRst, $01
0008A858 E106                       	smpsAlterNote       $06
0008A85A A503                       	dc.b	nC3, $03
0008A85C E10C                       	smpsAlterNote       $0C
0008A85E A303 8001                  	dc.b	nBb2, $03, nRst, $01
0008A864 E107                       	smpsAlterNote       $07
0008A866 B20D                       	dc.b	nCs4, $0D
0008A868 E104                       	smpsAlterNote       $04
0008A86A E701                       	dc.b	smpsNoAttack, $01
0008A86C E100                       	smpsAlterNote       $00
0008A86E E701                       	dc.b	smpsNoAttack, $01
0008A870 E104                       	smpsAlterNote       $04
0008A872 E701                       	dc.b	smpsNoAttack, $01
0008A874 E10A                       	smpsAlterNote       $0A
0008A876 E701                       	dc.b	smpsNoAttack, $01
0008A878 E10B                       	smpsAlterNote       $0B
0008A87A E701                       	dc.b	smpsNoAttack, $01
0008A87C E107                       	smpsAlterNote       $07
0008A87E E701                       	dc.b	smpsNoAttack, $01
0008A880 E101                       	smpsAlterNote       $01
0008A882 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008A886 E104                       	smpsAlterNote       $04
0008A888 E701                       	dc.b	smpsNoAttack, $01
0008A88A E10A                       	smpsAlterNote       $0A
0008A88C E701                       	dc.b	smpsNoAttack, $01
0008A88E E10B                       	smpsAlterNote       $0B
0008A890 8001                       	dc.b	nRst, $01
0008A892 E107                       	smpsAlterNote       $07
0008A894 B30D                       	dc.b	nD4, $0D
0008A896 E104                       	smpsAlterNote       $04
0008A898 E701                       	dc.b	smpsNoAttack, $01
0008A89A E100                       	smpsAlterNote       $00
0008A89C E701                       	dc.b	smpsNoAttack, $01
0008A89E E104                       	smpsAlterNote       $04
0008A8A0 E701                       	dc.b	smpsNoAttack, $01
0008A8A2 E10A                       	smpsAlterNote       $0A
0008A8A4 E701                       	dc.b	smpsNoAttack, $01
0008A8A6 E10B                       	smpsAlterNote       $0B
0008A8A8 E701                       	dc.b	smpsNoAttack, $01
0008A8AA E107                       	smpsAlterNote       $07
0008A8AC E701                       	dc.b	smpsNoAttack, $01
0008A8AE E101                       	smpsAlterNote       $01
0008A8B0 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008A8B4 E104                       	smpsAlterNote       $04
0008A8B6 E701                       	dc.b	smpsNoAttack, $01
0008A8B8 E10A                       	smpsAlterNote       $0A
0008A8BA E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008A8BE E104                       	smpsAlterNote       $04
0008A8C0 E701                       	dc.b	smpsNoAttack, $01
0008A8C2 E101                       	smpsAlterNote       $01
0008A8C4 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008A8C8 E107                       	smpsAlterNote       $07
0008A8CA E701                       	dc.b	smpsNoAttack, $01
0008A8CC E10B                       	smpsAlterNote       $0B
0008A8CE E701                       	dc.b	smpsNoAttack, $01
0008A8D0 E10A                       	smpsAlterNote       $0A
0008A8D2 E701                       	dc.b	smpsNoAttack, $01
0008A8D4 E107                       	smpsAlterNote       $07
0008A8D6 8001                       	dc.b	nRst, $01
0008A8D8 E108                       	smpsAlterNote       $08
0008A8DA B50D                       	dc.b	nE4, $0D
0008A8DC E102                       	smpsAlterNote       $02
0008A8DE E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008A8E2 E105                       	smpsAlterNote       $05
0008A8E4 E701                       	dc.b	smpsNoAttack, $01
0008A8E6 E10B                       	smpsAlterNote       $0B
0008A8E8 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008A8EC E105                       	smpsAlterNote       $05
0008A8EE E701                       	dc.b	smpsNoAttack, $01
0008A8F0 E102                       	smpsAlterNote       $02
0008A8F2 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008A8F6 E108                       	smpsAlterNote       $08
0008A8F8 E701                       	dc.b	smpsNoAttack, $01
0008A8FA E10C                       	smpsAlterNote       $0C
0008A8FC E701 8001                  	dc.b	smpsNoAttack, $01, nRst, $01
0008A900 E107                       	smpsAlterNote       $07
0008A902 B30D                       	dc.b	nD4, $0D
0008A904 E101                       	smpsAlterNote       $01
0008A906 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008A90A E104                       	smpsAlterNote       $04
0008A90C E701                       	dc.b	smpsNoAttack, $01
0008A90E E10A                       	smpsAlterNote       $0A
0008A910 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008A914 E104                       	smpsAlterNote       $04
0008A916 E701                       	dc.b	smpsNoAttack, $01
0008A918 E101                       	smpsAlterNote       $01
0008A91A E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008A91E E107                       	smpsAlterNote       $07
0008A920 E701                       	dc.b	smpsNoAttack, $01
0008A922 E10B                       	smpsAlterNote       $0B
0008A924 E701                       	dc.b	smpsNoAttack, $01
0008A926 E10A                       	smpsAlterNote       $0A
0008A928 E701                       	dc.b	smpsNoAttack, $01
0008A92A E104                       	smpsAlterNote       $04
0008A92C E701                       	dc.b	smpsNoAttack, $01
0008A92E E100                       	smpsAlterNote       $00
0008A930 E701                       	dc.b	smpsNoAttack, $01
0008A932 E104                       	smpsAlterNote       $04
0008A934 E701                       	dc.b	smpsNoAttack, $01
0008A936 E107                       	smpsAlterNote       $07
0008A938 E701                       	dc.b	smpsNoAttack, $01
0008A93A E10B                       	smpsAlterNote       $0B
0008A93C E701                       	dc.b	smpsNoAttack, $01
0008A93E E107                       	smpsAlterNote       $07
0008A940 E701 B20E                  	dc.b	smpsNoAttack, $01, nCs4, $0E
0008A944 E101                       	smpsAlterNote       $01
0008A946 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008A94A E107                       	smpsAlterNote       $07
0008A94C E701                       	dc.b	smpsNoAttack, $01
0008A94E E10A                       	smpsAlterNote       $0A
0008A950 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008A954 E104                       	smpsAlterNote       $04
0008A956 E701                       	dc.b	smpsNoAttack, $01
0008A958 E100                       	smpsAlterNote       $00
0008A95A E701                       	dc.b	smpsNoAttack, $01
0008A95C E101                       	smpsAlterNote       $01
0008A95E E701                       	dc.b	smpsNoAttack, $01
0008A960 E107                       	smpsAlterNote       $07
0008A962 E701                       	dc.b	smpsNoAttack, $01
0008A964 E10B                       	smpsAlterNote       $0B
0008A966 E701                       	dc.b	smpsNoAttack, $01
0008A968 E107                       	smpsAlterNote       $07
0008A96A B30E                       	dc.b	nD4, $0E
0008A96C E101                       	smpsAlterNote       $01
0008A96E E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008A972 E107                       	smpsAlterNote       $07
0008A974 E701                       	dc.b	smpsNoAttack, $01
0008A976 E10A                       	smpsAlterNote       $0A
0008A978 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008A97C E104                       	smpsAlterNote       $04
0008A97E E701                       	dc.b	smpsNoAttack, $01
0008A980 E100                       	smpsAlterNote       $00
0008A982 E701                       	dc.b	smpsNoAttack, $01
0008A984 E101                       	smpsAlterNote       $01
0008A986 E701                       	dc.b	smpsNoAttack, $01
0008A988 E107                       	smpsAlterNote       $07
0008A98A E701                       	dc.b	smpsNoAttack, $01
0008A98C E10B                       	smpsAlterNote       $0B
0008A98E E701                       	dc.b	smpsNoAttack, $01
0008A990 E107                       	smpsAlterNote       $07
0008A992 E701                       	dc.b	smpsNoAttack, $01
0008A994 E104                       	smpsAlterNote       $04
0008A996 E701                       	dc.b	smpsNoAttack, $01
0008A998 E100                       	smpsAlterNote       $00
0008A99A E701                       	dc.b	smpsNoAttack, $01
0008A99C E104                       	smpsAlterNote       $04
0008A99E E701                       	dc.b	smpsNoAttack, $01
0008A9A0 E10A                       	smpsAlterNote       $0A
0008A9A2 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008A9A6 E107                       	smpsAlterNote       $07
0008A9A8 E701 B20D                  	dc.b	smpsNoAttack, $01, nCs4, $0D
0008A9AC E104                       	smpsAlterNote       $04
0008A9AE E701                       	dc.b	smpsNoAttack, $01
0008A9B0 E100                       	smpsAlterNote       $00
0008A9B2 E701                       	dc.b	smpsNoAttack, $01
0008A9B4 E101                       	smpsAlterNote       $01
0008A9B6 E701                       	dc.b	smpsNoAttack, $01
0008A9B8 E107                       	smpsAlterNote       $07
0008A9BA E701                       	dc.b	smpsNoAttack, $01
0008A9BC E10B                       	smpsAlterNote       $0B
0008A9BE E701                       	dc.b	smpsNoAttack, $01
0008A9C0 E107                       	smpsAlterNote       $07
0008A9C2 E701                       	dc.b	smpsNoAttack, $01
0008A9C4 E104                       	smpsAlterNote       $04
0008A9C6 E701                       	dc.b	smpsNoAttack, $01
0008A9C8 E100                       	smpsAlterNote       $00
0008A9CA E701                       	dc.b	smpsNoAttack, $01
0008A9CC E104                       	smpsAlterNote       $04
0008A9CE E701                       	dc.b	smpsNoAttack, $01
0008A9D0 E10A                       	smpsAlterNote       $0A
0008A9D2 E701                       	dc.b	smpsNoAttack, $01
0008A9D4 E10B                       	smpsAlterNote       $0B
0008A9D6 E701                       	dc.b	smpsNoAttack, $01
0008A9DA E6FF                       	smpsAlterVol        $FF
0008A9DC A206 8001 A203 A203 8001+  	dc.b	nA2, $06, nRst, $01, nA2, $03, nA2, $03, nRst, $01, nA2, $03
0008A9E8 800B A202 8001             	dc.b	nRst, $0B, nA2, $02, nRst, $01
0008A9F0 E109                       	smpsAlterNote       $09
0008A9F2 E601                       	smpsAlterVol        $01
0008A9F4 B60D                       	dc.b	nF4, $0D
0008A9F6 E106                       	smpsAlterNote       $06
0008A9F8 E701                       	dc.b	smpsNoAttack, $01
0008A9FA E102                       	smpsAlterNote       $02
0008A9FC E701                       	dc.b	smpsNoAttack, $01
0008A9FE E106                       	smpsAlterNote       $06
0008AA00 E701                       	dc.b	smpsNoAttack, $01
0008AA02 E109                       	smpsAlterNote       $09
0008AA04 E701                       	dc.b	smpsNoAttack, $01
0008AA06 E10D                       	smpsAlterNote       $0D
0008AA08 E701                       	dc.b	smpsNoAttack, $01
0008AA0A E109                       	smpsAlterNote       $09
0008AA0C E701                       	dc.b	smpsNoAttack, $01
0008AA0E E103                       	smpsAlterNote       $03
0008AA10 E701                       	dc.b	smpsNoAttack, $01
0008AA12 E102                       	smpsAlterNote       $02
0008AA14 E701                       	dc.b	smpsNoAttack, $01
0008AA16 E106                       	smpsAlterNote       $06
0008AA18 E701                       	dc.b	smpsNoAttack, $01
0008AA1A E10C                       	smpsAlterNote       $0C
0008AA1C E701                       	dc.b	smpsNoAttack, $01
0008AA1E E10D                       	smpsAlterNote       $0D
0008AA20 8001                       	dc.b	nRst, $01
0008AA22 E109                       	smpsAlterNote       $09
0008AA24 B80D                       	dc.b	nG4, $0D
0008AA26 E106                       	smpsAlterNote       $06
0008AA28 E701                       	dc.b	smpsNoAttack, $01
0008AA2A E102                       	smpsAlterNote       $02
0008AA2C E701                       	dc.b	smpsNoAttack, $01
0008AA2E E106                       	smpsAlterNote       $06
0008AA30 E701                       	dc.b	smpsNoAttack, $01
0008AA32 E109                       	smpsAlterNote       $09
0008AA34 E701                       	dc.b	smpsNoAttack, $01
0008AA36 E10D                       	smpsAlterNote       $0D
0008AA38 E701                       	dc.b	smpsNoAttack, $01
0008AA3A E109                       	smpsAlterNote       $09
0008AA3C E701                       	dc.b	smpsNoAttack, $01
0008AA3E E103                       	smpsAlterNote       $03
0008AA40 E701                       	dc.b	smpsNoAttack, $01
0008AA42 E102                       	smpsAlterNote       $02
0008AA44 E701                       	dc.b	smpsNoAttack, $01
0008AA46 E106                       	smpsAlterNote       $06
0008AA48 E701                       	dc.b	smpsNoAttack, $01
0008AA4A E10C                       	smpsAlterNote       $0C
0008AA4C E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008AA50 E106                       	smpsAlterNote       $06
0008AA52 E701                       	dc.b	smpsNoAttack, $01
0008AA54 E103                       	smpsAlterNote       $03
0008AA56 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008AA5A E109                       	smpsAlterNote       $09
0008AA5C E701                       	dc.b	smpsNoAttack, $01
0008AA5E E10D                       	smpsAlterNote       $0D
0008AA60 E701                       	dc.b	smpsNoAttack, $01
0008AA62 E10C                       	smpsAlterNote       $0C
0008AA64 E701                       	dc.b	smpsNoAttack, $01
0008AA66 E109                       	smpsAlterNote       $09
0008AA68 8001                       	dc.b	nRst, $01
0008AA6A E10B                       	smpsAlterNote       $0B
0008AA6C BA0D                       	dc.b	nA4, $0D
0008AA6E E105                       	smpsAlterNote       $05
0008AA70 E701                       	dc.b	smpsNoAttack, $01
0008AA72 E104                       	smpsAlterNote       $04
0008AA74 E701                       	dc.b	smpsNoAttack, $01
0008AA76 E108                       	smpsAlterNote       $08
0008AA78 E701                       	dc.b	smpsNoAttack, $01
0008AA7A E10E                       	smpsAlterNote       $0E
0008AA7C E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008AA80 E10B                       	smpsAlterNote       $0B
0008AA82 E701                       	dc.b	smpsNoAttack, $01
0008AA84 E105                       	smpsAlterNote       $05
0008AA86 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008AA8A E10B                       	smpsAlterNote       $0B
0008AA8C E701                       	dc.b	smpsNoAttack, $01
0008AA8E E10E                       	smpsAlterNote       $0E
0008AA90 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008AA94 E108                       	smpsAlterNote       $08
0008AA96 E701                       	dc.b	smpsNoAttack, $01
0008AA98 E104                       	smpsAlterNote       $04
0008AA9A E701                       	dc.b	smpsNoAttack, $01
0008AA9C E105                       	smpsAlterNote       $05
0008AA9E E701                       	dc.b	smpsNoAttack, $01
0008AAA0 E10B                       	smpsAlterNote       $0B
0008AAA2 E701                       	dc.b	smpsNoAttack, $01
0008AAA4 E10F                       	smpsAlterNote       $0F
0008AAA6 E701                       	dc.b	smpsNoAttack, $01
0008AAA8 E10B                       	smpsAlterNote       $0B
0008AAAA E701                       	dc.b	smpsNoAttack, $01
0008AAAC E108                       	smpsAlterNote       $08
0008AAAE E701                       	dc.b	smpsNoAttack, $01
0008AAB0 E104                       	smpsAlterNote       $04
0008AAB2 E701                       	dc.b	smpsNoAttack, $01
0008AAB4 E108                       	smpsAlterNote       $08
0008AAB6 E701                       	dc.b	smpsNoAttack, $01
0008AAB8 E10E                       	smpsAlterNote       $0E
0008AABA E701                       	dc.b	smpsNoAttack, $01
0008AABC E10F                       	smpsAlterNote       $0F
0008AABE E701                       	dc.b	smpsNoAttack, $01
0008AAC0 E10B                       	smpsAlterNote       $0B
0008AAC2 E701                       	dc.b	smpsNoAttack, $01
0008AAC4 E105                       	smpsAlterNote       $05
0008AAC6 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008AACA E108                       	smpsAlterNote       $08
0008AACC E701                       	dc.b	smpsNoAttack, $01
0008AACE E10E                       	smpsAlterNote       $0E
0008AAD0 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008AAD4 E108                       	smpsAlterNote       $08
0008AAD6 E701                       	dc.b	smpsNoAttack, $01
0008AAD8 E105                       	smpsAlterNote       $05
0008AADA E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008AADE E108                       	smpsAlterNote       $08
0008AAE0 B50A 8001                  	dc.b	nE4, $0A, nRst, $01
0008AAE4 E109                       	smpsAlterNote       $09
0008AAE6 B60D                       	dc.b	nF4, $0D
0008AAE8 E103                       	smpsAlterNote       $03
0008AAEA E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008AAEE E106                       	smpsAlterNote       $06
0008AAF0 E701                       	dc.b	smpsNoAttack, $01
0008AAF2 E10C                       	smpsAlterNote       $0C
0008AAF4 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008AAF8 E106                       	smpsAlterNote       $06
0008AAFA E701                       	dc.b	smpsNoAttack, $01
0008AAFC E103                       	smpsAlterNote       $03
0008AAFE E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008AB02 E109                       	smpsAlterNote       $09
0008AB04 E701                       	dc.b	smpsNoAttack, $01
0008AB06 E10D                       	smpsAlterNote       $0D
0008AB08 E701 8001                  	dc.b	smpsNoAttack, $01, nRst, $01
0008AB0C E109                       	smpsAlterNote       $09
0008AB0E B80D                       	dc.b	nG4, $0D
0008AB10 E103                       	smpsAlterNote       $03
0008AB12 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008AB16 E109                       	smpsAlterNote       $09
0008AB18 E701                       	dc.b	smpsNoAttack, $01
0008AB1A E10C                       	smpsAlterNote       $0C
0008AB1C E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008AB20 E106                       	smpsAlterNote       $06
0008AB22 E701                       	dc.b	smpsNoAttack, $01
0008AB24 E102                       	smpsAlterNote       $02
0008AB26 E701                       	dc.b	smpsNoAttack, $01
0008AB28 E103                       	smpsAlterNote       $03
0008AB2A E701                       	dc.b	smpsNoAttack, $01
0008AB2C E109                       	smpsAlterNote       $09
0008AB2E E701                       	dc.b	smpsNoAttack, $01
0008AB30 E10D                       	smpsAlterNote       $0D
0008AB32 E701                       	dc.b	smpsNoAttack, $01
0008AB34 E109                       	smpsAlterNote       $09
0008AB36 E701                       	dc.b	smpsNoAttack, $01
0008AB38 E106                       	smpsAlterNote       $06
0008AB3A E701                       	dc.b	smpsNoAttack, $01
0008AB3C E102                       	smpsAlterNote       $02
0008AB3E E701                       	dc.b	smpsNoAttack, $01
0008AB40 E106                       	smpsAlterNote       $06
0008AB42 E701                       	dc.b	smpsNoAttack, $01
0008AB44 E10C                       	smpsAlterNote       $0C
0008AB46 E701                       	dc.b	smpsNoAttack, $01
0008AB48 E10D                       	smpsAlterNote       $0D
0008AB4A E701                       	dc.b	smpsNoAttack, $01
0008AB4C E109                       	smpsAlterNote       $09
0008AB4E E701                       	dc.b	smpsNoAttack, $01
0008AB50 E10B                       	smpsAlterNote       $0B
0008AB52 BA0D                       	dc.b	nA4, $0D
0008AB54 E108                       	smpsAlterNote       $08
0008AB56 E701                       	dc.b	smpsNoAttack, $01
0008AB58 E105                       	smpsAlterNote       $05
0008AB5A E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008AB5E E10B                       	smpsAlterNote       $0B
0008AB60 E701                       	dc.b	smpsNoAttack, $01
0008AB62 E10F                       	smpsAlterNote       $0F
0008AB64 E701                       	dc.b	smpsNoAttack, $01
0008AB66 E10E                       	smpsAlterNote       $0E
0008AB68 E701                       	dc.b	smpsNoAttack, $01
0008AB6A E108                       	smpsAlterNote       $08
0008AB6C E701                       	dc.b	smpsNoAttack, $01
0008AB6E E104                       	smpsAlterNote       $04
0008AB70 E701                       	dc.b	smpsNoAttack, $01
0008AB72 E108                       	smpsAlterNote       $08
0008AB74 E701                       	dc.b	smpsNoAttack, $01
0008AB76 E10B                       	smpsAlterNote       $0B
0008AB78 E701                       	dc.b	smpsNoAttack, $01
0008AB7A E10F                       	smpsAlterNote       $0F
0008AB7C E701                       	dc.b	smpsNoAttack, $01
0008AB7E E10B                       	smpsAlterNote       $0B
0008AB80 E701                       	dc.b	smpsNoAttack, $01
0008AB82 E105                       	smpsAlterNote       $05
0008AB84 E701                       	dc.b	smpsNoAttack, $01
0008AB86 E104                       	smpsAlterNote       $04
0008AB88 E701                       	dc.b	smpsNoAttack, $01
0008AB8A E108                       	smpsAlterNote       $08
0008AB8C E701                       	dc.b	smpsNoAttack, $01
0008AB8E E10E                       	smpsAlterNote       $0E
0008AB90 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008AB94 E10B                       	smpsAlterNote       $0B
0008AB96 E701                       	dc.b	smpsNoAttack, $01
0008AB98 E105                       	smpsAlterNote       $05
0008AB9A E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008AB9E E10B                       	smpsAlterNote       $0B
0008ABA0 E701                       	dc.b	smpsNoAttack, $01
0008ABA2 E10E                       	smpsAlterNote       $0E
0008ABA4 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008ABA8 E108                       	smpsAlterNote       $08
0008ABAA E701                       	dc.b	smpsNoAttack, $01
0008ABAC E105                       	smpsAlterNote       $05
0008ABAE 8001                       	dc.b	nRst, $01
0008ABB0 E109                       	smpsAlterNote       $09
0008ABB2 B60A                       	dc.b	nF4, $0A
0008ABB4 E108                       	smpsAlterNote       $08
0008ABB6 B507                       	dc.b	nE4, $07
0008ABB8 E107                       	smpsAlterNote       $07
0008ABBA B30D 8001                  	dc.b	nD4, $0D, nRst, $01
0008ABBE E108                       	smpsAlterNote       $08
0008ABC0 B503                       	dc.b	nE4, $03
0008ABC2 E109                       	smpsAlterNote       $09
0008ABC4 B603 8001 B802 8001        	dc.b	nF4, $03, nRst, $01, nG4, $02, nRst, $01
0008ABCC E10B                       	smpsAlterNote       $0B
0008ABCE BA0D                       	dc.b	nA4, $0D
0008ABD0 E108                       	smpsAlterNote       $08
0008ABD2 E701                       	dc.b	smpsNoAttack, $01
0008ABD4 E104                       	smpsAlterNote       $04
0008ABD6 E701                       	dc.b	smpsNoAttack, $01
0008ABD8 E108                       	smpsAlterNote       $08
0008ABDA E701                       	dc.b	smpsNoAttack, $01
0008ABDC E10B                       	smpsAlterNote       $0B
0008ABDE E701                       	dc.b	smpsNoAttack, $01
0008ABE0 E10F                       	smpsAlterNote       $0F
0008ABE2 E701                       	dc.b	smpsNoAttack, $01
0008ABE4 E10B                       	smpsAlterNote       $0B
0008ABE6 E701                       	dc.b	smpsNoAttack, $01
0008ABE8 E105                       	smpsAlterNote       $05
0008ABEA E701                       	dc.b	smpsNoAttack, $01
0008ABEC E104                       	smpsAlterNote       $04
0008ABEE E701                       	dc.b	smpsNoAttack, $01
0008ABF0 E108                       	smpsAlterNote       $08
0008ABF2 E701                       	dc.b	smpsNoAttack, $01
0008ABF4 E10E                       	smpsAlterNote       $0E
0008ABF6 E701                       	dc.b	smpsNoAttack, $01
0008ABF8 E10F                       	smpsAlterNote       $0F
0008ABFA 8001                       	dc.b	nRst, $01
0008ABFC E109                       	smpsAlterNote       $09
0008ABFE C20D                       	dc.b	nF5, $0D
0008AC00 E106                       	smpsAlterNote       $06
0008AC02 E701                       	dc.b	smpsNoAttack, $01
0008AC04 E102                       	smpsAlterNote       $02
0008AC06 E701                       	dc.b	smpsNoAttack, $01
0008AC08 E106                       	smpsAlterNote       $06
0008AC0A E701                       	dc.b	smpsNoAttack, $01
0008AC0C E109                       	smpsAlterNote       $09
0008AC0E E701                       	dc.b	smpsNoAttack, $01
0008AC10 E10D                       	smpsAlterNote       $0D
0008AC12 E701                       	dc.b	smpsNoAttack, $01
0008AC14 E109                       	smpsAlterNote       $09
0008AC16 E701                       	dc.b	smpsNoAttack, $01
0008AC18 E103                       	smpsAlterNote       $03
0008AC1A E701                       	dc.b	smpsNoAttack, $01
0008AC1C E102                       	smpsAlterNote       $02
0008AC1E E701                       	dc.b	smpsNoAttack, $01
0008AC20 E106                       	smpsAlterNote       $06
0008AC22 E701                       	dc.b	smpsNoAttack, $01
0008AC24 E10C                       	smpsAlterNote       $0C
0008AC26 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008AC2A E109                       	smpsAlterNote       $09
0008AC2C E701                       	dc.b	smpsNoAttack, $01
0008AC2E E103                       	smpsAlterNote       $03
0008AC30 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008AC34 E109                       	smpsAlterNote       $09
0008AC36 E701                       	dc.b	smpsNoAttack, $01
0008AC38 E10C                       	smpsAlterNote       $0C
0008AC3A E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008AC3E E106                       	smpsAlterNote       $06
0008AC40 E701                       	dc.b	smpsNoAttack, $01
0008AC42 E102                       	smpsAlterNote       $02
0008AC44 E701                       	dc.b	smpsNoAttack, $01
0008AC46 E103                       	smpsAlterNote       $03
0008AC48 E701                       	dc.b	smpsNoAttack, $01
0008AC4A E109                       	smpsAlterNote       $09
0008AC4C E701                       	dc.b	smpsNoAttack, $01
0008AC4E E10D                       	smpsAlterNote       $0D
0008AC50 E701                       	dc.b	smpsNoAttack, $01
0008AC52 E109                       	smpsAlterNote       $09
0008AC54 E701                       	dc.b	smpsNoAttack, $01
0008AC56 E106                       	smpsAlterNote       $06
0008AC58 E701                       	dc.b	smpsNoAttack, $01
0008AC5A E102                       	smpsAlterNote       $02
0008AC5C E701                       	dc.b	smpsNoAttack, $01
0008AC5E E106                       	smpsAlterNote       $06
0008AC60 E701                       	dc.b	smpsNoAttack, $01
0008AC62 E10C                       	smpsAlterNote       $0C
0008AC64 E701                       	dc.b	smpsNoAttack, $01
0008AC66 E10D                       	smpsAlterNote       $0D
0008AC68 E701                       	dc.b	smpsNoAttack, $01
0008AC6A E109                       	smpsAlterNote       $09
0008AC6C E701                       	dc.b	smpsNoAttack, $01
0008AC6E E103                       	smpsAlterNote       $03
0008AC70 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008AC74 E106                       	smpsAlterNote       $06
0008AC76 E701                       	dc.b	smpsNoAttack, $01
0008AC78 E10C                       	smpsAlterNote       $0C
0008AC7A E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008AC7E E106                       	smpsAlterNote       $06
0008AC80 E701                       	dc.b	smpsNoAttack, $01
0008AC82 E103                       	smpsAlterNote       $03
0008AC84 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008AC88 E109                       	smpsAlterNote       $09
0008AC8A E701                       	dc.b	smpsNoAttack, $01
0008AC8C E10D                       	smpsAlterNote       $0D
0008AC8E E701                       	dc.b	smpsNoAttack, $01
0008AC90 E10C                       	smpsAlterNote       $0C
0008AC92 E701                       	dc.b	smpsNoAttack, $01
0008AC94 E106                       	smpsAlterNote       $06
0008AC96 E701                       	dc.b	smpsNoAttack, $01
0008AC98 E103                       	smpsAlterNote       $03
0008AC9A 8001                       	dc.b	nRst, $01
0008AC9C E109                       	smpsAlterNote       $09
0008AC9E C206 8001                  	dc.b	nF5, $06, nRst, $01
0008ACA4 E10C                       	smpsAlterNote       $0C
0008ACA6 E601                       	smpsAlterVol        $01
0008ACA8 BB0D                       	dc.b	nBb4, $0D
0008ACAA E106                       	smpsAlterNote       $06
0008ACAC E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008ACB0 E109                       	smpsAlterNote       $09
0008ACB2 E701                       	dc.b	smpsNoAttack, $01
0008ACB4 E10F                       	smpsAlterNote       $0F
0008ACB6 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008ACBA E109                       	smpsAlterNote       $09
0008ACBC E701                       	dc.b	smpsNoAttack, $01
0008ACBE E106                       	smpsAlterNote       $06
0008ACC0 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008ACC4 E10C                       	smpsAlterNote       $0C
0008ACC6 E701                       	dc.b	smpsNoAttack, $01
0008ACC8 E110                       	smpsAlterNote       $10
0008ACCA E701                       	dc.b	smpsNoAttack, $01
0008ACCC E10F                       	smpsAlterNote       $0F
0008ACCE E701                       	dc.b	smpsNoAttack, $01
0008ACD0 E109                       	smpsAlterNote       $09
0008ACD2 E701                       	dc.b	smpsNoAttack, $01
0008ACD4 E105                       	smpsAlterNote       $05
0008ACD6 E701                       	dc.b	smpsNoAttack, $01
0008ACD8 E106                       	smpsAlterNote       $06
0008ACDA 8001 BD0D                  	dc.b	nRst, $01, nC5, $0D
0008ACDE E103                       	smpsAlterNote       $03
0008ACE0 E701                       	dc.b	smpsNoAttack, $01
0008ACE2 E1FF                       	smpsAlterNote       $FF
0008ACE4 E701                       	dc.b	smpsNoAttack, $01
0008ACE6 E103                       	smpsAlterNote       $03
0008ACE8 E701                       	dc.b	smpsNoAttack, $01
0008ACEA E106                       	smpsAlterNote       $06
0008ACEC E701                       	dc.b	smpsNoAttack, $01
0008ACEE E10A                       	smpsAlterNote       $0A
0008ACF0 E701                       	dc.b	smpsNoAttack, $01
0008ACF2 E106                       	smpsAlterNote       $06
0008ACF4 E701                       	dc.b	smpsNoAttack, $01
0008ACF6 E100                       	smpsAlterNote       $00
0008ACF8 E701                       	dc.b	smpsNoAttack, $01
0008ACFA E1FF                       	smpsAlterNote       $FF
0008ACFC E701                       	dc.b	smpsNoAttack, $01
0008ACFE E103                       	smpsAlterNote       $03
0008AD00 E701                       	dc.b	smpsNoAttack, $01
0008AD02 E109                       	smpsAlterNote       $09
0008AD04 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008AD08 E106                       	smpsAlterNote       $06
0008AD0A E701                       	dc.b	smpsNoAttack, $01
0008AD0C E100                       	smpsAlterNote       $00
0008AD0E E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008AD12 E107                       	smpsAlterNote       $07
0008AD14 BF0E                       	dc.b	nD5, $0E
0008AD16 E101                       	smpsAlterNote       $01
0008AD18 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008AD1C E107                       	smpsAlterNote       $07
0008AD1E E701                       	dc.b	smpsNoAttack, $01
0008AD20 E10A                       	smpsAlterNote       $0A
0008AD22 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008AD26 E104                       	smpsAlterNote       $04
0008AD28 E701                       	dc.b	smpsNoAttack, $01
0008AD2A E100                       	smpsAlterNote       $00
0008AD2C E701                       	dc.b	smpsNoAttack, $01
0008AD2E E101                       	smpsAlterNote       $01
0008AD30 E701                       	dc.b	smpsNoAttack, $01
0008AD32 E107                       	smpsAlterNote       $07
0008AD34 E701                       	dc.b	smpsNoAttack, $01
0008AD36 E10B                       	smpsAlterNote       $0B
0008AD38 E701                       	dc.b	smpsNoAttack, $01
0008AD3A E107                       	smpsAlterNote       $07
0008AD3C E701                       	dc.b	smpsNoAttack, $01
0008AD3E E104                       	smpsAlterNote       $04
0008AD40 E701                       	dc.b	smpsNoAttack, $01
0008AD42 E100                       	smpsAlterNote       $00
0008AD44 E701                       	dc.b	smpsNoAttack, $01
0008AD46 E101                       	smpsAlterNote       $01
0008AD48 8001                       	dc.b	nRst, $01
0008AD4A E108                       	smpsAlterNote       $08
0008AD4C C10C                       	dc.b	nE5, $0C
0008AD4E E109                       	smpsAlterNote       $09
0008AD50 C201 8001                  	dc.b	nF5, $01, nRst, $01
0008AD54 E10A                       	smpsAlterNote       $0A
0008AD56 8001                       	dc.b	nRst, $01
0008AD58 E109                       	smpsAlterNote       $09
0008AD5A C40C C20D                  	dc.b	nG5, $0C, nF5, $0D
0008AD5E E106                       	smpsAlterNote       $06
0008AD60 E701                       	dc.b	smpsNoAttack, $01
0008AD62 E102                       	smpsAlterNote       $02
0008AD64 E701                       	dc.b	smpsNoAttack, $01
0008AD66 E103                       	smpsAlterNote       $03
0008AD68 E701                       	dc.b	smpsNoAttack, $01
0008AD6A E109                       	smpsAlterNote       $09
0008AD6C E701                       	dc.b	smpsNoAttack, $01
0008AD6E E10D                       	smpsAlterNote       $0D
0008AD70 E701                       	dc.b	smpsNoAttack, $01
0008AD72 E109                       	smpsAlterNote       $09
0008AD74 E701                       	dc.b	smpsNoAttack, $01
0008AD76 E106                       	smpsAlterNote       $06
0008AD78 E701                       	dc.b	smpsNoAttack, $01
0008AD7A E102                       	smpsAlterNote       $02
0008AD7C E701                       	dc.b	smpsNoAttack, $01
0008AD7E E106                       	smpsAlterNote       $06
0008AD80 E701                       	dc.b	smpsNoAttack, $01
0008AD82 E10C                       	smpsAlterNote       $0C
0008AD84 E701                       	dc.b	smpsNoAttack, $01
0008AD86 E10D                       	smpsAlterNote       $0D
0008AD88 E701                       	dc.b	smpsNoAttack, $01
0008AD8A E109                       	smpsAlterNote       $09
0008AD8C C40D                       	dc.b	nG5, $0D
0008AD8E E106                       	smpsAlterNote       $06
0008AD90 E701                       	dc.b	smpsNoAttack, $01
0008AD92 E102                       	smpsAlterNote       $02
0008AD94 E701                       	dc.b	smpsNoAttack, $01
0008AD96 E103                       	smpsAlterNote       $03
0008AD98 E701                       	dc.b	smpsNoAttack, $01
0008AD9A E109                       	smpsAlterNote       $09
0008AD9C E701                       	dc.b	smpsNoAttack, $01
0008AD9E E108                       	smpsAlterNote       $08
0008ADA0 C007 C002 C002 8001 C001+  	dc.b	nEb5, $07, nEb5, $02, nEb5, $02, nRst, $01, nEb5, $01, nRst, $01
0008ADAC E109                       	smpsAlterNote       $09
0008ADAE C20D                       	dc.b	nF5, $0D
0008ADB0 E106                       	smpsAlterNote       $06
0008ADB2 E701                       	dc.b	smpsNoAttack, $01
0008ADB4 E102                       	smpsAlterNote       $02
0008ADB6 E701                       	dc.b	smpsNoAttack, $01
0008ADB8 E106                       	smpsAlterNote       $06
0008ADBA E701                       	dc.b	smpsNoAttack, $01
0008ADBC E109                       	smpsAlterNote       $09
0008ADBE E701                       	dc.b	smpsNoAttack, $01
0008ADC0 E10D                       	smpsAlterNote       $0D
0008ADC2 E701                       	dc.b	smpsNoAttack, $01
0008ADC4 E109                       	smpsAlterNote       $09
0008ADC6 E701                       	dc.b	smpsNoAttack, $01
0008ADC8 E103                       	smpsAlterNote       $03
0008ADCA E701                       	dc.b	smpsNoAttack, $01
0008ADCC E102                       	smpsAlterNote       $02
0008ADCE E701                       	dc.b	smpsNoAttack, $01
0008ADD0 E106                       	smpsAlterNote       $06
0008ADD2 E701                       	dc.b	smpsNoAttack, $01
0008ADD4 E10C                       	smpsAlterNote       $0C
0008ADD6 E701                       	dc.b	smpsNoAttack, $01
0008ADD8 E10D                       	smpsAlterNote       $0D
0008ADDA 8001                       	dc.b	nRst, $01
0008ADDC E112                       	smpsAlterNote       $12
0008ADDE C401                       	dc.b	nG5, $01
0008ADE0 E1EB                       	smpsAlterNote       $EB
0008ADE2 E7C5 01                    	dc.b	smpsNoAttack, nAb5, $01
0008ADE5 E1FD                       	smpsAlterNote       $FD
0008ADE7 E701                       	dc.b	smpsNoAttack, $01
0008ADE9 E10F                       	smpsAlterNote       $0F
0008ADEB E701                       	dc.b	smpsNoAttack, $01
0008ADED E118                       	smpsAlterNote       $18
0008ADEF E701                       	dc.b	smpsNoAttack, $01
0008ADF1 E1ED                       	smpsAlterNote       $ED
0008ADF3 E7C6 01                    	dc.b	smpsNoAttack, nA5, $01
0008ADF6 E1FF                       	smpsAlterNote       $FF
0008ADF8 E701                       	dc.b	smpsNoAttack, $01
0008ADFA E10B                       	smpsAlterNote       $0B
0008ADFC E703                       	dc.b	smpsNoAttack, $03
0008ADFE E109                       	smpsAlterNote       $09
0008AE00 C407                       	dc.b	nG5, $07
0008AE02 E108                       	smpsAlterNote       $08
0008AE04 C006 8001 C002 C002 C002+  	dc.b	nEb5, $06, nRst, $01, nEb5, $02, nEb5, $02, nEb5, $02, nRst, $01
0008AE10 E109                       	smpsAlterNote       $09
0008AE12 C20D                       	dc.b	nF5, $0D
0008AE14 E103                       	smpsAlterNote       $03
0008AE16 E701                       	dc.b	smpsNoAttack, $01
0008AE18 E102                       	smpsAlterNote       $02
0008AE1A E701                       	dc.b	smpsNoAttack, $01
0008AE1C E106                       	smpsAlterNote       $06
0008AE1E E701                       	dc.b	smpsNoAttack, $01
0008AE20 E10C                       	smpsAlterNote       $0C
0008AE22 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008AE26 E109                       	smpsAlterNote       $09
0008AE28 E701                       	dc.b	smpsNoAttack, $01
0008AE2A E103                       	smpsAlterNote       $03
0008AE2C E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008AE30 E109                       	smpsAlterNote       $09
0008AE32 E701                       	dc.b	smpsNoAttack, $01
0008AE34 E10C                       	smpsAlterNote       $0C
0008AE36 E701                       	dc.b	smpsNoAttack, $01
0008AE38 E10D                       	smpsAlterNote       $0D
0008AE3A 8001                       	dc.b	nRst, $01
0008AE3C E10B                       	smpsAlterNote       $0B
0008AE3E C609 8001                  	dc.b	nA5, $09, nRst, $01
0008AE42 E109                       	smpsAlterNote       $09
0008AE44 B806 8001                  	dc.b	nG4, $06, nRst, $01
0008AE48 E108                       	smpsAlterNote       $08
0008AE4A C006 8001 C001 8001 C002+  	dc.b	nEb5, $06, nRst, $01, nEb5, $01, nRst, $01, nEb5, $02, nEb5, $02
0008AE56 8001                       	dc.b	nRst, $01
0008AE58 E109                       	smpsAlterNote       $09
0008AE5A C20D                       	dc.b	nF5, $0D
0008AE5C E103                       	smpsAlterNote       $03
0008AE5E E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008AE62 E106                       	smpsAlterNote       $06
0008AE64 E701                       	dc.b	smpsNoAttack, $01
0008AE66 E10C                       	smpsAlterNote       $0C
0008AE68 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008AE6C E106                       	smpsAlterNote       $06
0008AE6E E701                       	dc.b	smpsNoAttack, $01
0008AE70 E103                       	smpsAlterNote       $03
0008AE72 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008AE76 E109                       	smpsAlterNote       $09
0008AE78 E701                       	dc.b	smpsNoAttack, $01
0008AE7A E10D                       	smpsAlterNote       $0D
0008AE7C E701 8001                  	dc.b	smpsNoAttack, $01, nRst, $01
0008AE82 E108                       	smpsAlterNote       $08
0008AE84 E6FF                       	smpsAlterVol        $FF
0008AE86 A806                       	dc.b	nEb3, $06
0008AE88 E10C                       	smpsAlterNote       $0C
0008AE8A A303 8001                  	dc.b	nBb2, $03, nRst, $01
0008AE8E E108                       	smpsAlterNote       $08
0008AE90 A803                       	dc.b	nEb3, $03
0008AE92 E109                       	smpsAlterNote       $09
0008AE94 AC03 8001                  	dc.b	nG3, $03, nRst, $01
0008AE98 E10C                       	smpsAlterNote       $0C
0008AE9A AF02 8001 AF03 8007        	dc.b	nBb3, $02, nRst, $01, nBb3, $03, nRst, $07
0008AEA4 E109                       	smpsAlterNote       $09
0008AEA6 E602                       	smpsAlterVol        $02
0008AEA8 B604                       	dc.b	nF4, $04
0008AEAA E602                       	smpsAlterVol        $02
0008AEAC F6F1 AA                    	smpsJump            music84_Jump02
0008AEAF                            
0008AEAF                            ; FM4 Data
0008AEAF                            music84_FM4:
0008AEB1 E040                       	smpsPan             panRight, $00
0008AEB3 8003                       	dc.b	nRst, $03
0008AEB5 E10F                       	smpsAlterNote       $0F
0008AEB7 C603 8008                  	dc.b	nA5, $03, nRst, $08
0008AEBB E10D                       	smpsAlterNote       $0D
0008AEBD C403 800A                  	dc.b	nG5, $03, nRst, $0A
0008AEC1 E10C                       	smpsAlterNote       $0C
0008AEC3 C103 8004                  	dc.b	nE5, $03, nRst, $04
0008AEC9 E6FE                       	smpsAlterVol        $FE
0008AECB E110                       	smpsAlterNote       $10
0008AECD C703 8001                  	dc.b	nBb5, $03, nRst, $01
0008AED1 E10F                       	smpsAlterNote       $0F
0008AED3 C602 8001                  	dc.b	nA5, $02, nRst, $01
0008AED7 E10D                       	smpsAlterNote       $0D
0008AED9 C403 C401 E7C2 0280 01     	dc.b	nG5, $03, nG5, $01, smpsNoAttack, nF5, $02, nRst, $01
0008AEE2 E10C                       	smpsAlterNote       $0C
0008AEE4 C103                       	dc.b	nE5, $03
0008AEE6 E10A                       	smpsAlterNote       $0A
0008AEE8 BD03 8001                  	dc.b	nC5, $03, nRst, $01
0008AEEE 03                         	dc.b	$03
0008AEEF                            
0008AEEF                            music84_Jump01:
0008AEEF E10B                       	smpsAlterNote       $0B
0008AEF1 BF03 8001                  	dc.b	nD5, $03, nRst, $01
0008AEF5 E10C                       	smpsAlterNote       $0C
0008AEF7 C102 8001                  	dc.b	nE5, $02, nRst, $01
0008AEFB E10D                       	smpsAlterNote       $0D
0008AEFD C203 C403 8001 C606 8001   	dc.b	nF5, $03, nG5, $03, nRst, $01, nA5, $06, nRst, $01
0008AF07 E10B                       	smpsAlterNote       $0B
0008AF09 BF03 C90D                  	dc.b	nD5, $03, nC6, $0D
0008AF0D E107                       	smpsAlterNote       $07
0008AF0F E701                       	dc.b	smpsNoAttack, $01
0008AF11 E103                       	smpsAlterNote       $03
0008AF13 E701                       	dc.b	smpsNoAttack, $01
0008AF15 E104                       	smpsAlterNote       $04
0008AF17 E701                       	dc.b	smpsNoAttack, $01
0008AF19 E10A                       	smpsAlterNote       $0A
0008AF1B E701                       	dc.b	smpsNoAttack, $01
0008AF1D E10E                       	smpsAlterNote       $0E
0008AF1F E701                       	dc.b	smpsNoAttack, $01
0008AF21 E10A                       	smpsAlterNote       $0A
0008AF23 E701                       	dc.b	smpsNoAttack, $01
0008AF25 E107                       	smpsAlterNote       $07
0008AF27 E701                       	dc.b	smpsNoAttack, $01
0008AF29 E104                       	smpsAlterNote       $04
0008AF2B 8001                       	dc.b	nRst, $01
0008AF2D E110                       	smpsAlterNote       $10
0008AF2F C703                       	dc.b	nBb5, $03
0008AF31 E10F                       	smpsAlterNote       $0F
0008AF33 C603 8001                  	dc.b	nA5, $03, nRst, $01
0008AF37 E10D                       	smpsAlterNote       $0D
0008AF39 C402 8001 C60D             	dc.b	nG5, $02, nRst, $01, nA5, $0D
0008AF3F E10C                       	smpsAlterNote       $0C
0008AF41 E701                       	dc.b	smpsNoAttack, $01
0008AF43 E108                       	smpsAlterNote       $08
0008AF45 E701                       	dc.b	smpsNoAttack, $01
0008AF47 E10C                       	smpsAlterNote       $0C
0008AF49 E701                       	dc.b	smpsNoAttack, $01
0008AF4B E10F                       	smpsAlterNote       $0F
0008AF4D E701                       	dc.b	smpsNoAttack, $01
0008AF4F E113                       	smpsAlterNote       $13
0008AF51 E701                       	dc.b	smpsNoAttack, $01
0008AF53 E10F                       	smpsAlterNote       $0F
0008AF55 E701                       	dc.b	smpsNoAttack, $01
0008AF57 E109                       	smpsAlterNote       $09
0008AF59 E701                       	dc.b	smpsNoAttack, $01
0008AF5B E108                       	smpsAlterNote       $08
0008AF5D E701                       	dc.b	smpsNoAttack, $01
0008AF5F E10C                       	smpsAlterNote       $0C
0008AF61 E701                       	dc.b	smpsNoAttack, $01
0008AF63 E112                       	smpsAlterNote       $12
0008AF65 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008AF69 E10C                       	smpsAlterNote       $0C
0008AF6B E701                       	dc.b	smpsNoAttack, $01
0008AF6D E109                       	smpsAlterNote       $09
0008AF6F E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008AF73 E10F                       	smpsAlterNote       $0F
0008AF75 E701                       	dc.b	smpsNoAttack, $01
0008AF77 E113                       	smpsAlterNote       $13
0008AF79 E701                       	dc.b	smpsNoAttack, $01
0008AF7B E112                       	smpsAlterNote       $12
0008AF7D E701                       	dc.b	smpsNoAttack, $01
0008AF7F E10C                       	smpsAlterNote       $0C
0008AF81 E701                       	dc.b	smpsNoAttack, $01
0008AF83 E108                       	smpsAlterNote       $08
0008AF85 E701                       	dc.b	smpsNoAttack, $01
0008AF87 E10C                       	smpsAlterNote       $0C
0008AF89 E701                       	dc.b	smpsNoAttack, $01
0008AF8B E10F                       	smpsAlterNote       $0F
0008AF8D E701                       	dc.b	smpsNoAttack, $01
0008AF8F E113                       	smpsAlterNote       $13
0008AF91 E701                       	dc.b	smpsNoAttack, $01
0008AF93 E10F                       	smpsAlterNote       $0F
0008AF95 E701                       	dc.b	smpsNoAttack, $01
0008AF97 E109                       	smpsAlterNote       $09
0008AF99 E701                       	dc.b	smpsNoAttack, $01
0008AF9B E108                       	smpsAlterNote       $08
0008AF9D E701                       	dc.b	smpsNoAttack, $01
0008AF9F E10C                       	smpsAlterNote       $0C
0008AFA1 E701                       	dc.b	smpsNoAttack, $01
0008AFA3 E112                       	smpsAlterNote       $12
0008AFA5 E701                       	dc.b	smpsNoAttack, $01
0008AFA7 E113                       	smpsAlterNote       $13
0008AFA9 800F                       	dc.b	nRst, $0F
0008AFAB E10B                       	smpsAlterNote       $0B
0008AFAD BF03                       	dc.b	nD5, $03
0008AFAF E10C                       	smpsAlterNote       $0C
0008AFB1 C103 8001                  	dc.b	nE5, $03, nRst, $01
0008AFB5 E10D                       	smpsAlterNote       $0D
0008AFB7 C202 8001 C403 C607        	dc.b	nF5, $02, nRst, $01, nG5, $03, nA5, $07
0008AFBF E10B                       	smpsAlterNote       $0B
0008AFC1 BF03 8001 C90D CB03 8001   	dc.b	nD5, $03, nRst, $01, nC6, $0D, nD6, $03, nRst, $01
0008AFCB E110                       	smpsAlterNote       $10
0008AFCD C704                       	dc.b	nBb5, $04
0008AFCF E10F                       	smpsAlterNote       $0F
0008AFD1 C604 8001                  	dc.b	nA5, $04, nRst, $01
0008AFD5 E10D                       	smpsAlterNote       $0D
0008AFD7 C404 8001 C60D             	dc.b	nG5, $04, nRst, $01, nA5, $0D
0008AFDD E109                       	smpsAlterNote       $09
0008AFDF E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008AFE3 E10F                       	smpsAlterNote       $0F
0008AFE5 E701                       	dc.b	smpsNoAttack, $01
0008AFE7 E112                       	smpsAlterNote       $12
0008AFE9 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008AFED E10C                       	smpsAlterNote       $0C
0008AFEF E701                       	dc.b	smpsNoAttack, $01
0008AFF1 E108                       	smpsAlterNote       $08
0008AFF3 E701                       	dc.b	smpsNoAttack, $01
0008AFF5 E109                       	smpsAlterNote       $09
0008AFF7 E701                       	dc.b	smpsNoAttack, $01
0008AFF9 E10F                       	smpsAlterNote       $0F
0008AFFB E701                       	dc.b	smpsNoAttack, $01
0008AFFD E113                       	smpsAlterNote       $13
0008AFFF E701                       	dc.b	smpsNoAttack, $01
0008B001 E10F                       	smpsAlterNote       $0F
0008B003 E701                       	dc.b	smpsNoAttack, $01
0008B005 E10C                       	smpsAlterNote       $0C
0008B007 E701                       	dc.b	smpsNoAttack, $01
0008B009 E108                       	smpsAlterNote       $08
0008B00B E701                       	dc.b	smpsNoAttack, $01
0008B00D E10C                       	smpsAlterNote       $0C
0008B00F E701                       	dc.b	smpsNoAttack, $01
0008B011 E112                       	smpsAlterNote       $12
0008B013 E701                       	dc.b	smpsNoAttack, $01
0008B015 E113                       	smpsAlterNote       $13
0008B017 E701                       	dc.b	smpsNoAttack, $01
0008B019 E10F                       	smpsAlterNote       $0F
0008B01B E701                       	dc.b	smpsNoAttack, $01
0008B01D E109                       	smpsAlterNote       $09
0008B01F E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008B023 E10C                       	smpsAlterNote       $0C
0008B025 E701                       	dc.b	smpsNoAttack, $01
0008B027 E112                       	smpsAlterNote       $12
0008B029 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008B02D E10C                       	smpsAlterNote       $0C
0008B02F E701                       	dc.b	smpsNoAttack, $01
0008B031 E109                       	smpsAlterNote       $09
0008B033 E701                       	dc.b	smpsNoAttack, $01
0008B035 E10D                       	smpsAlterNote       $0D
0008B037 C401 8001                  	dc.b	nG5, $01, nRst, $01
0008B03B E10F                       	smpsAlterNote       $0F
0008B03D C501 8001 C60D C604 8001   	dc.b	nAb5, $01, nRst, $01, nA5, $0D, nA5, $04, nRst, $01
0008B047 E10D                       	smpsAlterNote       $0D
0008B049 C404 C604 8001             	dc.b	nG5, $04, nA5, $04, nRst, $01
0008B04F E10B                       	smpsAlterNote       $0B
0008B051 BF0D                       	dc.b	nD5, $0D
0008B053 E108                       	smpsAlterNote       $08
0008B055 E701                       	dc.b	smpsNoAttack, $01
0008B057 E104                       	smpsAlterNote       $04
0008B059 E701                       	dc.b	smpsNoAttack, $01
0008B05B E108                       	smpsAlterNote       $08
0008B05D E701                       	dc.b	smpsNoAttack, $01
0008B05F E10B                       	smpsAlterNote       $0B
0008B061 E701                       	dc.b	smpsNoAttack, $01
0008B063 E10F                       	smpsAlterNote       $0F
0008B065 E701                       	dc.b	smpsNoAttack, $01
0008B067 E10B                       	smpsAlterNote       $0B
0008B069 E701                       	dc.b	smpsNoAttack, $01
0008B06B E105                       	smpsAlterNote       $05
0008B06D E701                       	dc.b	smpsNoAttack, $01
0008B06F E104                       	smpsAlterNote       $04
0008B071 E701                       	dc.b	smpsNoAttack, $01
0008B073 E108                       	smpsAlterNote       $08
0008B075 E701                       	dc.b	smpsNoAttack, $01
0008B077 E10E                       	smpsAlterNote       $0E
0008B079 E701                       	dc.b	smpsNoAttack, $01
0008B07B E10F                       	smpsAlterNote       $0F
0008B07D 8001                       	dc.b	nRst, $01
0008B07F E10C                       	smpsAlterNote       $0C
0008B081 C101                       	dc.b	nE5, $01
0008B083 E10D                       	smpsAlterNote       $0D
0008B085 C201 C401 C607             	dc.b	nF5, $01, nG5, $01, nA5, $07
0008B08B E10F                       	smpsAlterNote       $0F
0008B08D C606 8001                  	dc.b	nA5, $06, nRst, $01
0008B091 E10C                       	smpsAlterNote       $0C
0008B093 CD06 8001                  	dc.b	nE6, $06, nRst, $01
0008B097 E10D                       	smpsAlterNote       $0D
0008B099 CE06 8001                  	dc.b	nF6, $06, nRst, $01
0008B09D E10C                       	smpsAlterNote       $0C
0008B09F CD03                       	dc.b	nE6, $03
0008B0A1 E10A                       	smpsAlterNote       $0A
0008B0A3 C903 8001                  	dc.b	nC6, $03, nRst, $01
0008B0A7 E10D                       	smpsAlterNote       $0D
0008B0A9 C402 8001 C70D E701        	dc.b	nG5, $02, nRst, $01, nBb5, $0D, smpsNoAttack, $01
0008B0B1 E109                       	smpsAlterNote       $09
0008B0B3 E701                       	dc.b	smpsNoAttack, $01
0008B0B5 E10D                       	smpsAlterNote       $0D
0008B0B7 E701                       	dc.b	smpsNoAttack, $01
0008B0B9 E110                       	smpsAlterNote       $10
0008B0BB E701                       	dc.b	smpsNoAttack, $01
0008B0BD E114                       	smpsAlterNote       $14
0008B0BF E701                       	dc.b	smpsNoAttack, $01
0008B0C1 E110                       	smpsAlterNote       $10
0008B0C3 E701                       	dc.b	smpsNoAttack, $01
0008B0C5 E10A                       	smpsAlterNote       $0A
0008B0C7 E701                       	dc.b	smpsNoAttack, $01
0008B0C9 E109                       	smpsAlterNote       $09
0008B0CB E701                       	dc.b	smpsNoAttack, $01
0008B0CD E10D                       	smpsAlterNote       $0D
0008B0CF E701                       	dc.b	smpsNoAttack, $01
0008B0D1 E113                       	smpsAlterNote       $13
0008B0D3 E701                       	dc.b	smpsNoAttack, $01
0008B0D5 E114                       	smpsAlterNote       $14
0008B0D7 8001                       	dc.b	nRst, $01
0008B0D9 E10F                       	smpsAlterNote       $0F
0008B0DB C606 8001 C50D             	dc.b	nA5, $06, nRst, $01, nAb5, $0D
0008B0E1 E10C                       	smpsAlterNote       $0C
0008B0E3 E701                       	dc.b	smpsNoAttack, $01
0008B0E5 E108                       	smpsAlterNote       $08
0008B0E7 E701                       	dc.b	smpsNoAttack, $01
0008B0E9 E10C                       	smpsAlterNote       $0C
0008B0EB E701                       	dc.b	smpsNoAttack, $01
0008B0ED E112                       	smpsAlterNote       $12
0008B0EF E701                       	dc.b	smpsNoAttack, $01
0008B0F1 E113                       	smpsAlterNote       $13
0008B0F3 E701                       	dc.b	smpsNoAttack, $01
0008B0F5 E10F                       	smpsAlterNote       $0F
0008B0F7 E701                       	dc.b	smpsNoAttack, $01
0008B0F9 E109                       	smpsAlterNote       $09
0008B0FB E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008B0FF E10C                       	smpsAlterNote       $0C
0008B101 E701                       	dc.b	smpsNoAttack, $01
0008B103 E112                       	smpsAlterNote       $12
0008B105 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008B109 E10C                       	smpsAlterNote       $0C
0008B10B E701                       	dc.b	smpsNoAttack, $01
0008B10D E109                       	smpsAlterNote       $09
0008B10F E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008B113 E10F                       	smpsAlterNote       $0F
0008B115 E701                       	dc.b	smpsNoAttack, $01
0008B117 E113                       	smpsAlterNote       $13
0008B119 E701                       	dc.b	smpsNoAttack, $01
0008B11B E112                       	smpsAlterNote       $12
0008B11D E701                       	dc.b	smpsNoAttack, $01
0008B11F E10C                       	smpsAlterNote       $0C
0008B121 E701                       	dc.b	smpsNoAttack, $01
0008B123 E108                       	smpsAlterNote       $08
0008B125 E701                       	dc.b	smpsNoAttack, $01
0008B127 E10C                       	smpsAlterNote       $0C
0008B129 E701                       	dc.b	smpsNoAttack, $01
0008B12B E10F                       	smpsAlterNote       $0F
0008B12D E701                       	dc.b	smpsNoAttack, $01
0008B12F E113                       	smpsAlterNote       $13
0008B131 E701                       	dc.b	smpsNoAttack, $01
0008B133 E10F                       	smpsAlterNote       $0F
0008B135 E701                       	dc.b	smpsNoAttack, $01
0008B137 E109                       	smpsAlterNote       $09
0008B139 E701                       	dc.b	smpsNoAttack, $01
0008B13B E108                       	smpsAlterNote       $08
0008B13D E701                       	dc.b	smpsNoAttack, $01
0008B13F E10C                       	smpsAlterNote       $0C
0008B141 E701                       	dc.b	smpsNoAttack, $01
0008B143 E112                       	smpsAlterNote       $12
0008B145 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008B149 E10F                       	smpsAlterNote       $0F
0008B14B E701                       	dc.b	smpsNoAttack, $01
0008B14D E109                       	smpsAlterNote       $09
0008B14F E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008B153 E10F                       	smpsAlterNote       $0F
0008B155 E701                       	dc.b	smpsNoAttack, $01
0008B157 E113                       	smpsAlterNote       $13
0008B159 E701                       	dc.b	smpsNoAttack, $01
0008B15B E112                       	smpsAlterNote       $12
0008B15D E701                       	dc.b	smpsNoAttack, $01
0008B15F E10C                       	smpsAlterNote       $0C
0008B161 E701                       	dc.b	smpsNoAttack, $01
0008B163 E108                       	smpsAlterNote       $08
0008B165 E701                       	dc.b	smpsNoAttack, $01
0008B167 E10C                       	smpsAlterNote       $0C
0008B169 E701                       	dc.b	smpsNoAttack, $01
0008B16B E10F                       	smpsAlterNote       $0F
0008B16D E701                       	dc.b	smpsNoAttack, $01
0008B16F E113                       	smpsAlterNote       $13
0008B171 E701                       	dc.b	smpsNoAttack, $01
0008B173 E10F                       	smpsAlterNote       $0F
0008B175 E701                       	dc.b	smpsNoAttack, $01
0008B177 E109                       	smpsAlterNote       $09
0008B179 E701 8001                  	dc.b	smpsNoAttack, $01, nRst, $01
0008B17D E10F                       	smpsAlterNote       $0F
0008B17F C60D                       	dc.b	nA5, $0D
0008B181 E109                       	smpsAlterNote       $09
0008B183 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008B187 E10C                       	smpsAlterNote       $0C
0008B189 E701                       	dc.b	smpsNoAttack, $01
0008B18B E112                       	smpsAlterNote       $12
0008B18D E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008B191 E10C                       	smpsAlterNote       $0C
0008B193 E701                       	dc.b	smpsNoAttack, $01
0008B195 E109                       	smpsAlterNote       $09
0008B197 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008B19B E10F                       	smpsAlterNote       $0F
0008B19D E701                       	dc.b	smpsNoAttack, $01
0008B19F E113                       	smpsAlterNote       $13
0008B1A1 E701 8001                  	dc.b	smpsNoAttack, $01, nRst, $01
0008B1A7 E10D                       	smpsAlterNote       $0D
0008B1A9 C206 C203 8001 C203        	dc.b	nF5, $06, nF5, $03, nRst, $01, nF5, $03
0008B1B1 E10C                       	smpsAlterNote       $0C
0008B1B3 C103 800E                  	dc.b	nE5, $03, nRst, $0E
0008B1B9 E6FF                       	smpsAlterVol        $FF
0008B1BB E10B                       	smpsAlterNote       $0B
0008B1BD BF03 8001                  	dc.b	nD5, $03, nRst, $01
0008B1C1 E10C                       	smpsAlterNote       $0C
0008B1C3 C103                       	dc.b	nE5, $03
0008B1C5 E10D                       	smpsAlterNote       $0D
0008B1C7 C203 8001 C403 C606 8001   	dc.b	nF5, $03, nRst, $01, nG5, $03, nA5, $06, nRst, $01
0008B1D1 E10B                       	smpsAlterNote       $0B
0008B1D3 BF03 C90D                  	dc.b	nD5, $03, nC6, $0D
0008B1D7 E107                       	smpsAlterNote       $07
0008B1D9 E701                       	dc.b	smpsNoAttack, $01
0008B1DB E104                       	smpsAlterNote       $04
0008B1DD E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008B1E1 E10A                       	smpsAlterNote       $0A
0008B1E3 E701                       	dc.b	smpsNoAttack, $01
0008B1E5 E10D                       	smpsAlterNote       $0D
0008B1E7 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008B1EB E107                       	smpsAlterNote       $07
0008B1ED E701                       	dc.b	smpsNoAttack, $01
0008B1EF E104                       	smpsAlterNote       $04
0008B1F1 8001                       	dc.b	nRst, $01
0008B1F3 E110                       	smpsAlterNote       $10
0008B1F5 C703                       	dc.b	nBb5, $03
0008B1F7 E10F                       	smpsAlterNote       $0F
0008B1F9 C603 8001                  	dc.b	nA5, $03, nRst, $01
0008B1FD E10D                       	smpsAlterNote       $0D
0008B1FF C403 C60D                  	dc.b	nG5, $03, nA5, $0D
0008B203 E10C                       	smpsAlterNote       $0C
0008B205 E701                       	dc.b	smpsNoAttack, $01
0008B207 E108                       	smpsAlterNote       $08
0008B209 E701                       	dc.b	smpsNoAttack, $01
0008B20B E109                       	smpsAlterNote       $09
0008B20D E701                       	dc.b	smpsNoAttack, $01
0008B20F E10F                       	smpsAlterNote       $0F
0008B211 E701                       	dc.b	smpsNoAttack, $01
0008B213 E113                       	smpsAlterNote       $13
0008B215 E701                       	dc.b	smpsNoAttack, $01
0008B217 E10F                       	smpsAlterNote       $0F
0008B219 E701                       	dc.b	smpsNoAttack, $01
0008B21B E10C                       	smpsAlterNote       $0C
0008B21D E701                       	dc.b	smpsNoAttack, $01
0008B21F E108                       	smpsAlterNote       $08
0008B221 E701                       	dc.b	smpsNoAttack, $01
0008B223 E10C                       	smpsAlterNote       $0C
0008B225 E701                       	dc.b	smpsNoAttack, $01
0008B227 E112                       	smpsAlterNote       $12
0008B229 E701                       	dc.b	smpsNoAttack, $01
0008B22B E113                       	smpsAlterNote       $13
0008B22D E701                       	dc.b	smpsNoAttack, $01
0008B22F E10F                       	smpsAlterNote       $0F
0008B231 E701                       	dc.b	smpsNoAttack, $01
0008B233 E109                       	smpsAlterNote       $09
0008B235 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008B239 E10C                       	smpsAlterNote       $0C
0008B23B E701                       	dc.b	smpsNoAttack, $01
0008B23D E112                       	smpsAlterNote       $12
0008B23F E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008B243 E10C                       	smpsAlterNote       $0C
0008B245 E701                       	dc.b	smpsNoAttack, $01
0008B247 E109                       	smpsAlterNote       $09
0008B249 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008B24D E10F                       	smpsAlterNote       $0F
0008B24F E701                       	dc.b	smpsNoAttack, $01
0008B251 E113                       	smpsAlterNote       $13
0008B253 E701                       	dc.b	smpsNoAttack, $01
0008B255 E112                       	smpsAlterNote       $12
0008B257 E701                       	dc.b	smpsNoAttack, $01
0008B259 E10C                       	smpsAlterNote       $0C
0008B25B E701                       	dc.b	smpsNoAttack, $01
0008B25D E108                       	smpsAlterNote       $08
0008B25F E701                       	dc.b	smpsNoAttack, $01
0008B261 E10C                       	smpsAlterNote       $0C
0008B263 E701                       	dc.b	smpsNoAttack, $01
0008B265 E10F                       	smpsAlterNote       $0F
0008B267 E701                       	dc.b	smpsNoAttack, $01
0008B269 E113                       	smpsAlterNote       $13
0008B26B E701                       	dc.b	smpsNoAttack, $01
0008B26D E10F                       	smpsAlterNote       $0F
0008B26F BA03 8001                  	dc.b	nA4, $03, nRst, $01
0008B273 E110                       	smpsAlterNote       $10
0008B275 BB03                       	dc.b	nBb4, $03
0008B277 E10F                       	smpsAlterNote       $0F
0008B279 BA06 8001                  	dc.b	nA4, $06, nRst, $01
0008B27D E10B                       	smpsAlterNote       $0B
0008B27F BF03                       	dc.b	nD5, $03
0008B281 E10C                       	smpsAlterNote       $0C
0008B283 C103 8001                  	dc.b	nE5, $03, nRst, $01
0008B287 E10D                       	smpsAlterNote       $0D
0008B289 C203 C403 8001 C606 8001   	dc.b	nF5, $03, nG5, $03, nRst, $01, nA5, $06, nRst, $01
0008B293 E10B                       	smpsAlterNote       $0B
0008B295 BF02 8001 C90D 8001 CB02+  	dc.b	nD5, $02, nRst, $01, nC6, $0D, nRst, $01, nD6, $02, nRst, $01
0008B2A1 E110                       	smpsAlterNote       $10
0008B2A3 C704 8001                  	dc.b	nBb5, $04, nRst, $01
0008B2A7 E10F                       	smpsAlterNote       $0F
0008B2A9 C604                       	dc.b	nA5, $04
0008B2AB E10D                       	smpsAlterNote       $0D
0008B2AD C404 8001 C60D             	dc.b	nG5, $04, nRst, $01, nA5, $0D
0008B2B3 E109                       	smpsAlterNote       $09
0008B2B5 E701                       	dc.b	smpsNoAttack, $01
0008B2B7 E108                       	smpsAlterNote       $08
0008B2B9 E701                       	dc.b	smpsNoAttack, $01
0008B2BB E10C                       	smpsAlterNote       $0C
0008B2BD E701                       	dc.b	smpsNoAttack, $01
0008B2BF E112                       	smpsAlterNote       $12
0008B2C1 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008B2C5 E10F                       	smpsAlterNote       $0F
0008B2C7 E701                       	dc.b	smpsNoAttack, $01
0008B2C9 E109                       	smpsAlterNote       $09
0008B2CB E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008B2CF E10F                       	smpsAlterNote       $0F
0008B2D1 E701                       	dc.b	smpsNoAttack, $01
0008B2D3 E112                       	smpsAlterNote       $12
0008B2D5 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008B2D9 E10C                       	smpsAlterNote       $0C
0008B2DB E701                       	dc.b	smpsNoAttack, $01
0008B2DD E108                       	smpsAlterNote       $08
0008B2DF E701                       	dc.b	smpsNoAttack, $01
0008B2E1 E109                       	smpsAlterNote       $09
0008B2E3 E701                       	dc.b	smpsNoAttack, $01
0008B2E5 E10F                       	smpsAlterNote       $0F
0008B2E7 E701                       	dc.b	smpsNoAttack, $01
0008B2E9 E113                       	smpsAlterNote       $13
0008B2EB E701                       	dc.b	smpsNoAttack, $01
0008B2ED E10F                       	smpsAlterNote       $0F
0008B2EF E701                       	dc.b	smpsNoAttack, $01
0008B2F1 E10C                       	smpsAlterNote       $0C
0008B2F3 E701                       	dc.b	smpsNoAttack, $01
0008B2F5 E108                       	smpsAlterNote       $08
0008B2F7 E701                       	dc.b	smpsNoAttack, $01
0008B2F9 E10C                       	smpsAlterNote       $0C
0008B2FB E701                       	dc.b	smpsNoAttack, $01
0008B2FD E112                       	smpsAlterNote       $12
0008B2FF E701                       	dc.b	smpsNoAttack, $01
0008B301 E113                       	smpsAlterNote       $13
0008B303 E701                       	dc.b	smpsNoAttack, $01
0008B305 E10F                       	smpsAlterNote       $0F
0008B307 E701                       	dc.b	smpsNoAttack, $01
0008B309 E109                       	smpsAlterNote       $09
0008B30B E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008B30F E10C                       	smpsAlterNote       $0C
0008B311 E701                       	dc.b	smpsNoAttack, $01
0008B313 E112                       	smpsAlterNote       $12
0008B315 E701                       	dc.b	smpsNoAttack, $01
0008B317 E113                       	smpsAlterNote       $13
0008B319 8001                       	dc.b	nRst, $01
0008B31B E10F                       	smpsAlterNote       $0F
0008B31D C602 C602 C602 8001 C601+  	dc.b	nA5, $02, nA5, $02, nA5, $02, nRst, $01, nA5, $01, nRst, $01
0008B329 C602 C602 8001 C604        	dc.b	nA5, $02, nA5, $02, nRst, $01, nA5, $04
0008B331 E10D                       	smpsAlterNote       $0D
0008B333 C404 8001 C604             	dc.b	nG5, $04, nRst, $01, nA5, $04
0008B339 E10B                       	smpsAlterNote       $0B
0008B33B BF0D                       	dc.b	nD5, $0D
0008B33D E108                       	smpsAlterNote       $08
0008B33F E701                       	dc.b	smpsNoAttack, $01
0008B341 E104                       	smpsAlterNote       $04
0008B343 E701                       	dc.b	smpsNoAttack, $01
0008B345 E105                       	smpsAlterNote       $05
0008B347 E701                       	dc.b	smpsNoAttack, $01
0008B349 E10B                       	smpsAlterNote       $0B
0008B34B E701                       	dc.b	smpsNoAttack, $01
0008B34D E10F                       	smpsAlterNote       $0F
0008B34F E701                       	dc.b	smpsNoAttack, $01
0008B351 E10B                       	smpsAlterNote       $0B
0008B353 E701                       	dc.b	smpsNoAttack, $01
0008B355 E108                       	smpsAlterNote       $08
0008B357 E701                       	dc.b	smpsNoAttack, $01
0008B359 E104                       	smpsAlterNote       $04
0008B35B E701                       	dc.b	smpsNoAttack, $01
0008B35D E108                       	smpsAlterNote       $08
0008B35F E701                       	dc.b	smpsNoAttack, $01
0008B361 E10E                       	smpsAlterNote       $0E
0008B363 E701                       	dc.b	smpsNoAttack, $01
0008B365 E10F                       	smpsAlterNote       $0F
0008B367 E701                       	dc.b	smpsNoAttack, $01
0008B369 E10C                       	smpsAlterNote       $0C
0008B36B C101                       	dc.b	nE5, $01
0008B36D E10D                       	smpsAlterNote       $0D
0008B36F C201 C401 8001 C606        	dc.b	nF5, $01, nG5, $01, nRst, $01, nA5, $06
0008B377 E10F                       	smpsAlterNote       $0F
0008B379 C607                       	dc.b	nA5, $07
0008B37B E10C                       	smpsAlterNote       $0C
0008B37D CD07                       	dc.b	nE6, $07
0008B37F E10D                       	smpsAlterNote       $0D
0008B381 CE06 8001                  	dc.b	nF6, $06, nRst, $01
0008B385 E10C                       	smpsAlterNote       $0C
0008B387 CD03                       	dc.b	nE6, $03
0008B389 E10A                       	smpsAlterNote       $0A
0008B38B C903 8001                  	dc.b	nC6, $03, nRst, $01
0008B38F E10D                       	smpsAlterNote       $0D
0008B391 C403 C70D E701             	dc.b	nG5, $03, nBb5, $0D, smpsNoAttack, $01
0008B397 E10A                       	smpsAlterNote       $0A
0008B399 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008B39D E110                       	smpsAlterNote       $10
0008B39F E701                       	dc.b	smpsNoAttack, $01
0008B3A1 E114                       	smpsAlterNote       $14
0008B3A3 E701                       	dc.b	smpsNoAttack, $01
0008B3A5 E113                       	smpsAlterNote       $13
0008B3A7 E701                       	dc.b	smpsNoAttack, $01
0008B3A9 E10D                       	smpsAlterNote       $0D
0008B3AB E701                       	dc.b	smpsNoAttack, $01
0008B3AD E109                       	smpsAlterNote       $09
0008B3AF E701                       	dc.b	smpsNoAttack, $01
0008B3B1 E10D                       	smpsAlterNote       $0D
0008B3B3 E701                       	dc.b	smpsNoAttack, $01
0008B3B5 E110                       	smpsAlterNote       $10
0008B3B7 E701                       	dc.b	smpsNoAttack, $01
0008B3B9 E114                       	smpsAlterNote       $14
0008B3BB E701                       	dc.b	smpsNoAttack, $01
0008B3BD E10F                       	smpsAlterNote       $0F
0008B3BF C607 C50D                  	dc.b	nA5, $07, nAb5, $0D
0008B3C3 E10C                       	smpsAlterNote       $0C
0008B3C5 E701                       	dc.b	smpsNoAttack, $01
0008B3C7 E108                       	smpsAlterNote       $08
0008B3C9 E701                       	dc.b	smpsNoAttack, $01
0008B3CB E10C                       	smpsAlterNote       $0C
0008B3CD E701                       	dc.b	smpsNoAttack, $01
0008B3CF E10F                       	smpsAlterNote       $0F
0008B3D1 E701                       	dc.b	smpsNoAttack, $01
0008B3D3 E113                       	smpsAlterNote       $13
0008B3D5 E701                       	dc.b	smpsNoAttack, $01
0008B3D7 E10F                       	smpsAlterNote       $0F
0008B3D9 E701                       	dc.b	smpsNoAttack, $01
0008B3DB E109                       	smpsAlterNote       $09
0008B3DD E701                       	dc.b	smpsNoAttack, $01
0008B3DF E108                       	smpsAlterNote       $08
0008B3E1 E701                       	dc.b	smpsNoAttack, $01
0008B3E3 E10C                       	smpsAlterNote       $0C
0008B3E5 E701                       	dc.b	smpsNoAttack, $01
0008B3E7 E112                       	smpsAlterNote       $12
0008B3E9 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008B3ED E10F                       	smpsAlterNote       $0F
0008B3EF E701                       	dc.b	smpsNoAttack, $01
0008B3F1 E109                       	smpsAlterNote       $09
0008B3F3 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008B3F7 E10F                       	smpsAlterNote       $0F
0008B3F9 E701                       	dc.b	smpsNoAttack, $01
0008B3FB E112                       	smpsAlterNote       $12
0008B3FD E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008B401 E10C                       	smpsAlterNote       $0C
0008B403 E701                       	dc.b	smpsNoAttack, $01
0008B405 E108                       	smpsAlterNote       $08
0008B407 E701                       	dc.b	smpsNoAttack, $01
0008B409 E109                       	smpsAlterNote       $09
0008B40B E701                       	dc.b	smpsNoAttack, $01
0008B40D E10F                       	smpsAlterNote       $0F
0008B40F E701                       	dc.b	smpsNoAttack, $01
0008B411 E113                       	smpsAlterNote       $13
0008B413 E701                       	dc.b	smpsNoAttack, $01
0008B415 E10F                       	smpsAlterNote       $0F
0008B417 E701                       	dc.b	smpsNoAttack, $01
0008B419 E10C                       	smpsAlterNote       $0C
0008B41B E701                       	dc.b	smpsNoAttack, $01
0008B41D E108                       	smpsAlterNote       $08
0008B41F E701                       	dc.b	smpsNoAttack, $01
0008B421 E10C                       	smpsAlterNote       $0C
0008B423 E701                       	dc.b	smpsNoAttack, $01
0008B425 E112                       	smpsAlterNote       $12
0008B427 E701                       	dc.b	smpsNoAttack, $01
0008B429 E113                       	smpsAlterNote       $13
0008B42B E701                       	dc.b	smpsNoAttack, $01
0008B42D E10F                       	smpsAlterNote       $0F
0008B42F E701                       	dc.b	smpsNoAttack, $01
0008B431 E109                       	smpsAlterNote       $09
0008B433 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008B437 E10C                       	smpsAlterNote       $0C
0008B439 E701                       	dc.b	smpsNoAttack, $01
0008B43B E112                       	smpsAlterNote       $12
0008B43D E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008B441 E10C                       	smpsAlterNote       $0C
0008B443 E701                       	dc.b	smpsNoAttack, $01
0008B445 E109                       	smpsAlterNote       $09
0008B447 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008B44B E10F                       	smpsAlterNote       $0F
0008B44D E701                       	dc.b	smpsNoAttack, $01
0008B44F E113                       	smpsAlterNote       $13
0008B451 E701                       	dc.b	smpsNoAttack, $01
0008B453 E112                       	smpsAlterNote       $12
0008B455 E701                       	dc.b	smpsNoAttack, $01
0008B457 E10C                       	smpsAlterNote       $0C
0008B459 E701                       	dc.b	smpsNoAttack, $01
0008B45B E109                       	smpsAlterNote       $09
0008B45D 8001                       	dc.b	nRst, $01
0008B45F E10F                       	smpsAlterNote       $0F
0008B461 C60D                       	dc.b	nA5, $0D
0008B463 E10C                       	smpsAlterNote       $0C
0008B465 E701                       	dc.b	smpsNoAttack, $01
0008B467 E108                       	smpsAlterNote       $08
0008B469 E701                       	dc.b	smpsNoAttack, $01
0008B46B E10C                       	smpsAlterNote       $0C
0008B46D E701                       	dc.b	smpsNoAttack, $01
0008B46F E112                       	smpsAlterNote       $12
0008B471 E701                       	dc.b	smpsNoAttack, $01
0008B473 E113                       	smpsAlterNote       $13
0008B475 E701                       	dc.b	smpsNoAttack, $01
0008B477 E10F                       	smpsAlterNote       $0F
0008B479 E701                       	dc.b	smpsNoAttack, $01
0008B47B E109                       	smpsAlterNote       $09
0008B47D E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008B481 E10C                       	smpsAlterNote       $0C
0008B483 E701                       	dc.b	smpsNoAttack, $01
0008B485 E112                       	smpsAlterNote       $12
0008B487 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008B48B E10C                       	smpsAlterNote       $0C
0008B48D E701                       	dc.b	smpsNoAttack, $01
0008B48F E109                       	smpsAlterNote       $09
0008B491 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008B495 E10F                       	smpsAlterNote       $0F
0008B497 E701                       	dc.b	smpsNoAttack, $01
0008B499 E113                       	smpsAlterNote       $13
0008B49B E701                       	dc.b	smpsNoAttack, $01
0008B49D E112                       	smpsAlterNote       $12
0008B49F E701                       	dc.b	smpsNoAttack, $01
0008B4A1 E10C                       	smpsAlterNote       $0C
0008B4A3 E701                       	dc.b	smpsNoAttack, $01
0008B4A5 E108                       	smpsAlterNote       $08
0008B4A7 E701                       	dc.b	smpsNoAttack, $01
0008B4A9 E10C                       	smpsAlterNote       $0C
0008B4AB E701                       	dc.b	smpsNoAttack, $01
0008B4AD E10F                       	smpsAlterNote       $0F
0008B4AF E701                       	dc.b	smpsNoAttack, $01
0008B4B1 E113                       	smpsAlterNote       $13
0008B4B3 E701                       	dc.b	smpsNoAttack, $01
0008B4B5 E10F                       	smpsAlterNote       $0F
0008B4B7 E701                       	dc.b	smpsNoAttack, $01
0008B4B9 E109                       	smpsAlterNote       $09
0008B4BB E701                       	dc.b	smpsNoAttack, $01
0008B4BD E108                       	smpsAlterNote       $08
0008B4BF E701                       	dc.b	smpsNoAttack, $01
0008B4C1 E10C                       	smpsAlterNote       $0C
0008B4C3 E701                       	dc.b	smpsNoAttack, $01
0008B4C5 E112                       	smpsAlterNote       $12
0008B4C7 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008B4CB E10F                       	smpsAlterNote       $0F
0008B4CD E701                       	dc.b	smpsNoAttack, $01
0008B4CF E109                       	smpsAlterNote       $09
0008B4D1 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008B4D5 E10F                       	smpsAlterNote       $0F
0008B4D7 E701                       	dc.b	smpsNoAttack, $01
0008B4D9 E112                       	smpsAlterNote       $12
0008B4DB E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008B4DF E10C                       	smpsAlterNote       $0C
0008B4E1 E701                       	dc.b	smpsNoAttack, $01
0008B4E3 E108                       	smpsAlterNote       $08
0008B4E5 E701                       	dc.b	smpsNoAttack, $01
0008B4E7 E10C                       	smpsAlterNote       $0C
0008B4E9 E701                       	dc.b	smpsNoAttack, $01
0008B4EB E10F                       	smpsAlterNote       $0F
0008B4ED E701                       	dc.b	smpsNoAttack, $01
0008B4EF E113                       	smpsAlterNote       $13
0008B4F1 E701                       	dc.b	smpsNoAttack, $01
0008B4F3 E10F                       	smpsAlterNote       $0F
0008B4F5 E701                       	dc.b	smpsNoAttack, $01
0008B4F7 E109                       	smpsAlterNote       $09
0008B4F9 E701 8001                  	dc.b	smpsNoAttack, $01, nRst, $01
0008B4FF E601                       	smpsAlterVol        $01
0008B501 E10F                       	smpsAlterNote       $0F
0008B503 C604                       	dc.b	nA5, $04
0008B505 E10D                       	smpsAlterNote       $0D
0008B507 C404 8001 C604             	dc.b	nG5, $04, nRst, $01, nA5, $04
0008B50D E10B                       	smpsAlterNote       $0B
0008B50F BF0A 8001 BF02 8001        	dc.b	nD5, $0A, nRst, $01, nD5, $02, nRst, $01
0008B517 E10F                       	smpsAlterNote       $0F
0008B519 C604 8001                  	dc.b	nA5, $04, nRst, $01
0008B51D E10D                       	smpsAlterNote       $0D
0008B51F C404 C604 8001             	dc.b	nG5, $04, nA5, $04, nRst, $01
0008B525 E10C                       	smpsAlterNote       $0C
0008B527 C109 8001 C103             	dc.b	nE5, $09, nRst, $01, nE5, $03
0008B52D E10A                       	smpsAlterNote       $0A
0008B52F C904 8001                  	dc.b	nC6, $04, nRst, $01
0008B533 E110                       	smpsAlterNote       $10
0008B535 C704 8001                  	dc.b	nBb5, $04, nRst, $01
0008B539 E10F                       	smpsAlterNote       $0F
0008B53B C604                       	dc.b	nA5, $04
0008B53D E10D                       	smpsAlterNote       $0D
0008B53F C403 8001 C202 8001 C403+  	dc.b	nG5, $03, nRst, $01, nF5, $02, nRst, $01, nG5, $03, nA5, $0E
0008B54B E109                       	smpsAlterNote       $09
0008B54D E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008B551 E10F                       	smpsAlterNote       $0F
0008B553 E701                       	dc.b	smpsNoAttack, $01
0008B555 E112                       	smpsAlterNote       $12
0008B557 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008B55B E10C                       	smpsAlterNote       $0C
0008B55D E701                       	dc.b	smpsNoAttack, $01
0008B55F E108                       	smpsAlterNote       $08
0008B561 E701                       	dc.b	smpsNoAttack, $01
0008B563 E10C                       	smpsAlterNote       $0C
0008B565 E701                       	dc.b	smpsNoAttack, $01
0008B567 E10F                       	smpsAlterNote       $0F
0008B569 E701                       	dc.b	smpsNoAttack, $01
0008B56B E113                       	smpsAlterNote       $13
0008B56D E701                       	dc.b	smpsNoAttack, $01
0008B56F E10D                       	smpsAlterNote       $0D
0008B571 C403 8001 C203             	dc.b	nG5, $03, nRst, $01, nF5, $03
0008B577 E10C                       	smpsAlterNote       $0C
0008B579 C10D                       	dc.b	nE5, $0D
0008B57B E109                       	smpsAlterNote       $09
0008B57D E701                       	dc.b	smpsNoAttack, $01
0008B57F E105                       	smpsAlterNote       $05
0008B581 E701                       	dc.b	smpsNoAttack, $01
0008B583 E106                       	smpsAlterNote       $06
0008B585 E701                       	dc.b	smpsNoAttack, $01
0008B587 E10C                       	smpsAlterNote       $0C
0008B589 E701                       	dc.b	smpsNoAttack, $01
0008B58B E110                       	smpsAlterNote       $10
0008B58D E701                       	dc.b	smpsNoAttack, $01
0008B58F E10C                       	smpsAlterNote       $0C
0008B591 E701                       	dc.b	smpsNoAttack, $01
0008B593 E109                       	smpsAlterNote       $09
0008B595 E701                       	dc.b	smpsNoAttack, $01
0008B597 E105                       	smpsAlterNote       $05
0008B599 E701                       	dc.b	smpsNoAttack, $01
0008B59B E109                       	smpsAlterNote       $09
0008B59D E701                       	dc.b	smpsNoAttack, $01
0008B59F E10F                       	smpsAlterNote       $0F
0008B5A1 E701                       	dc.b	smpsNoAttack, $01
0008B5A3 E110                       	smpsAlterNote       $10
0008B5A5 E701                       	dc.b	smpsNoAttack, $01
0008B5A7 E10C                       	smpsAlterNote       $0C
0008B5A9 E701                       	dc.b	smpsNoAttack, $01
0008B5AB E106                       	smpsAlterNote       $06
0008B5AD E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008B5B1 E109                       	smpsAlterNote       $09
0008B5B3 E701                       	dc.b	smpsNoAttack, $01
0008B5B5 E10F                       	smpsAlterNote       $0F
0008B5B7 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008B5BB E109                       	smpsAlterNote       $09
0008B5BD E701                       	dc.b	smpsNoAttack, $01
0008B5BF E106                       	smpsAlterNote       $06
0008B5C1 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008B5C5 E10C                       	smpsAlterNote       $0C
0008B5C7 E701                       	dc.b	smpsNoAttack, $01
0008B5C9 E110                       	smpsAlterNote       $10
0008B5CB E701                       	dc.b	smpsNoAttack, $01
0008B5CD E10F                       	smpsAlterNote       $0F
0008B5CF E701                       	dc.b	smpsNoAttack, $01
0008B5D1 E109                       	smpsAlterNote       $09
0008B5D3 E701                       	dc.b	smpsNoAttack, $01
0008B5D5 E105                       	smpsAlterNote       $05
0008B5D7 E701                       	dc.b	smpsNoAttack, $01
0008B5D9 E109                       	smpsAlterNote       $09
0008B5DB E701                       	dc.b	smpsNoAttack, $01
0008B5DD E10C                       	smpsAlterNote       $0C
0008B5DF E701                       	dc.b	smpsNoAttack, $01
0008B5E1 E110                       	smpsAlterNote       $10
0008B5E3 E701                       	dc.b	smpsNoAttack, $01
0008B5E5 E10C                       	smpsAlterNote       $0C
0008B5E7 E701                       	dc.b	smpsNoAttack, $01
0008B5E9 E106                       	smpsAlterNote       $06
0008B5EB E701                       	dc.b	smpsNoAttack, $01
0008B5ED E105                       	smpsAlterNote       $05
0008B5EF E701                       	dc.b	smpsNoAttack, $01
0008B5F1 E109                       	smpsAlterNote       $09
0008B5F3 E701                       	dc.b	smpsNoAttack, $01
0008B5F5 E10F                       	smpsAlterNote       $0F
0008B5F7 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008B5FB E10C                       	smpsAlterNote       $0C
0008B5FD E701                       	dc.b	smpsNoAttack, $01
0008B5FF E106                       	smpsAlterNote       $06
0008B601 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008B605 E10C                       	smpsAlterNote       $0C
0008B607 E701                       	dc.b	smpsNoAttack, $01
0008B609 E10F                       	smpsAlterNote       $0F
0008B60B E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008B60F E109                       	smpsAlterNote       $09
0008B611 E701                       	dc.b	smpsNoAttack, $01
0008B613 E105                       	smpsAlterNote       $05
0008B615 E701                       	dc.b	smpsNoAttack, $01
0008B617 E106                       	smpsAlterNote       $06
0008B619 E701                       	dc.b	smpsNoAttack, $01
0008B61B E10C                       	smpsAlterNote       $0C
0008B61D E701                       	dc.b	smpsNoAttack, $01
0008B61F E110                       	smpsAlterNote       $10
0008B621 E701                       	dc.b	smpsNoAttack, $01
0008B623 E10C                       	smpsAlterNote       $0C
0008B625 E701                       	dc.b	smpsNoAttack, $01
0008B627 E109                       	smpsAlterNote       $09
0008B629 E701                       	dc.b	smpsNoAttack, $01
0008B62B E105                       	smpsAlterNote       $05
0008B62D E701                       	dc.b	smpsNoAttack, $01
0008B62F E109                       	smpsAlterNote       $09
0008B631 E701                       	dc.b	smpsNoAttack, $01
0008B633 E10F                       	smpsAlterNote       $0F
0008B635 E701                       	dc.b	smpsNoAttack, $01
0008B637 E110                       	smpsAlterNote       $10
0008B639 E701                       	dc.b	smpsNoAttack, $01
0008B63B E10C                       	smpsAlterNote       $0C
0008B63D E701                       	dc.b	smpsNoAttack, $01
0008B63F E106                       	smpsAlterNote       $06
0008B641 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008B645 E109                       	smpsAlterNote       $09
0008B647 E701                       	dc.b	smpsNoAttack, $01
0008B649 E10F                       	smpsAlterNote       $0F
0008B64B E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008B64F E109                       	smpsAlterNote       $09
0008B651 E701                       	dc.b	smpsNoAttack, $01
0008B653 E106                       	smpsAlterNote       $06
0008B655 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008B659 E10C                       	smpsAlterNote       $0C
0008B65B E701                       	dc.b	smpsNoAttack, $01
0008B65D E110                       	smpsAlterNote       $10
0008B65F E701                       	dc.b	smpsNoAttack, $01
0008B661 E10F                       	smpsAlterNote       $0F
0008B663 E701                       	dc.b	smpsNoAttack, $01
0008B665 E109                       	smpsAlterNote       $09
0008B667 E701                       	dc.b	smpsNoAttack, $01
0008B669 E105                       	smpsAlterNote       $05
0008B66B E701                       	dc.b	smpsNoAttack, $01
0008B66D E109                       	smpsAlterNote       $09
0008B66F E701                       	dc.b	smpsNoAttack, $01
0008B671 E10C                       	smpsAlterNote       $0C
0008B673 E701                       	dc.b	smpsNoAttack, $01
0008B675 E110                       	smpsAlterNote       $10
0008B677 E701                       	dc.b	smpsNoAttack, $01
0008B679 E10C                       	smpsAlterNote       $0C
0008B67B E701                       	dc.b	smpsNoAttack, $01
0008B67D E106                       	smpsAlterNote       $06
0008B67F E701                       	dc.b	smpsNoAttack, $01
0008B681 E105                       	smpsAlterNote       $05
0008B683 E701                       	dc.b	smpsNoAttack, $01
0008B685 E109                       	smpsAlterNote       $09
0008B687 E701                       	dc.b	smpsNoAttack, $01
0008B689 E10F                       	smpsAlterNote       $0F
0008B68B E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008B68F E109                       	smpsAlterNote       $09
0008B691 E701                       	dc.b	smpsNoAttack, $01
0008B693 E106                       	smpsAlterNote       $06
0008B695 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008B699 E10C                       	smpsAlterNote       $0C
0008B69B E701                       	dc.b	smpsNoAttack, $01
0008B69D E110                       	smpsAlterNote       $10
0008B69F E701                       	dc.b	smpsNoAttack, $01
0008B6A1 E10F                       	smpsAlterNote       $0F
0008B6A3 E701                       	dc.b	smpsNoAttack, $01
0008B6A5 E109                       	smpsAlterNote       $09
0008B6A7 E701                       	dc.b	smpsNoAttack, $01
0008B6A9 E105                       	smpsAlterNote       $05
0008B6AB E701                       	dc.b	smpsNoAttack, $01
0008B6AD E109                       	smpsAlterNote       $09
0008B6AF E701                       	dc.b	smpsNoAttack, $01
0008B6B1 E10C                       	smpsAlterNote       $0C
0008B6B3 E701                       	dc.b	smpsNoAttack, $01
0008B6B5 E110                       	smpsAlterNote       $10
0008B6B7 E701                       	dc.b	smpsNoAttack, $01
0008B6B9 E10C                       	smpsAlterNote       $0C
0008B6BB E701                       	dc.b	smpsNoAttack, $01
0008B6BD E106                       	smpsAlterNote       $06
0008B6BF E701                       	dc.b	smpsNoAttack, $01
0008B6C1 E105                       	smpsAlterNote       $05
0008B6C3 E701                       	dc.b	smpsNoAttack, $01
0008B6C5 E109                       	smpsAlterNote       $09
0008B6C7 E701                       	dc.b	smpsNoAttack, $01
0008B6C9 E10F                       	smpsAlterNote       $0F
0008B6CB E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008B6CF E10C                       	smpsAlterNote       $0C
0008B6D1 E701                       	dc.b	smpsNoAttack, $01
0008B6D3 E106                       	smpsAlterNote       $06
0008B6D5 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008B6D9 E10C                       	smpsAlterNote       $0C
0008B6DB E701                       	dc.b	smpsNoAttack, $01
0008B6DD E10F                       	smpsAlterNote       $0F
0008B6DF E701                       	dc.b	smpsNoAttack, $01
0008B6E1 E110                       	smpsAlterNote       $10
0008B6E3 8001                       	dc.b	nRst, $01
0008B6E5 E10F                       	smpsAlterNote       $0F
0008B6E7 C604                       	dc.b	nA5, $04
0008B6E9 E10D                       	smpsAlterNote       $0D
0008B6EB C404 8001 C604             	dc.b	nG5, $04, nRst, $01, nA5, $04
0008B6F1 E10B                       	smpsAlterNote       $0B
0008B6F3 BF0A 8001 BF03             	dc.b	nD5, $0A, nRst, $01, nD5, $03
0008B6F9 E10F                       	smpsAlterNote       $0F
0008B6FB C604 8001                  	dc.b	nA5, $04, nRst, $01
0008B6FF E10D                       	smpsAlterNote       $0D
0008B701 C404 C604 8001             	dc.b	nG5, $04, nA5, $04, nRst, $01
0008B707 E10C                       	smpsAlterNote       $0C
0008B709 C10A C103 8001             	dc.b	nE5, $0A, nE5, $03, nRst, $01
0008B70F E10A                       	smpsAlterNote       $0A
0008B711 C904                       	dc.b	nC6, $04
0008B713 E110                       	smpsAlterNote       $10
0008B715 C704 8001                  	dc.b	nBb5, $04, nRst, $01
0008B719 E10F                       	smpsAlterNote       $0F
0008B71B C604                       	dc.b	nA5, $04
0008B71D E10D                       	smpsAlterNote       $0D
0008B71F C403 8001 C202 8001 C403+  	dc.b	nG5, $03, nRst, $01, nF5, $02, nRst, $01, nG5, $03, nA5, $0E
0008B72B E109                       	smpsAlterNote       $09
0008B72D E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008B731 E10F                       	smpsAlterNote       $0F
0008B733 E701                       	dc.b	smpsNoAttack, $01
0008B735 E112                       	smpsAlterNote       $12
0008B737 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008B73B E10C                       	smpsAlterNote       $0C
0008B73D E701                       	dc.b	smpsNoAttack, $01
0008B73F E108                       	smpsAlterNote       $08
0008B741 E701                       	dc.b	smpsNoAttack, $01
0008B743 E109                       	smpsAlterNote       $09
0008B745 E701                       	dc.b	smpsNoAttack, $01
0008B747 E10F                       	smpsAlterNote       $0F
0008B749 E701                       	dc.b	smpsNoAttack, $01
0008B74B E113                       	smpsAlterNote       $13
0008B74D E701                       	dc.b	smpsNoAttack, $01
0008B74F E10D                       	smpsAlterNote       $0D
0008B751 C403 8001 C203             	dc.b	nG5, $03, nRst, $01, nF5, $03
0008B757 E10C                       	smpsAlterNote       $0C
0008B759 C10D                       	dc.b	nE5, $0D
0008B75B E109                       	smpsAlterNote       $09
0008B75D E701                       	dc.b	smpsNoAttack, $01
0008B75F E106                       	smpsAlterNote       $06
0008B761 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008B765 E10C                       	smpsAlterNote       $0C
0008B767 E701                       	dc.b	smpsNoAttack, $01
0008B769 E110                       	smpsAlterNote       $10
0008B76B E701                       	dc.b	smpsNoAttack, $01
0008B76D E10F                       	smpsAlterNote       $0F
0008B76F E701                       	dc.b	smpsNoAttack, $01
0008B771 E109                       	smpsAlterNote       $09
0008B773 E701                       	dc.b	smpsNoAttack, $01
0008B775 E105                       	smpsAlterNote       $05
0008B777 E701                       	dc.b	smpsNoAttack, $01
0008B779 E109                       	smpsAlterNote       $09
0008B77B E701                       	dc.b	smpsNoAttack, $01
0008B77D E10C                       	smpsAlterNote       $0C
0008B77F E701                       	dc.b	smpsNoAttack, $01
0008B781 E110                       	smpsAlterNote       $10
0008B783 E701                       	dc.b	smpsNoAttack, $01
0008B785 E10C                       	smpsAlterNote       $0C
0008B787 E701                       	dc.b	smpsNoAttack, $01
0008B789 E106                       	smpsAlterNote       $06
0008B78B E701                       	dc.b	smpsNoAttack, $01
0008B78D E105                       	smpsAlterNote       $05
0008B78F E701                       	dc.b	smpsNoAttack, $01
0008B791 E109                       	smpsAlterNote       $09
0008B793 E701                       	dc.b	smpsNoAttack, $01
0008B795 E10F                       	smpsAlterNote       $0F
0008B797 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008B79B E10C                       	smpsAlterNote       $0C
0008B79D E701                       	dc.b	smpsNoAttack, $01
0008B79F E106                       	smpsAlterNote       $06
0008B7A1 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008B7A5 E10C                       	smpsAlterNote       $0C
0008B7A7 E701                       	dc.b	smpsNoAttack, $01
0008B7A9 E10F                       	smpsAlterNote       $0F
0008B7AB E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008B7AF E109                       	smpsAlterNote       $09
0008B7B1 E701                       	dc.b	smpsNoAttack, $01
0008B7B3 E105                       	smpsAlterNote       $05
0008B7B5 E701                       	dc.b	smpsNoAttack, $01
0008B7B7 E106                       	smpsAlterNote       $06
0008B7B9 E701                       	dc.b	smpsNoAttack, $01
0008B7BB E10C                       	smpsAlterNote       $0C
0008B7BD E701                       	dc.b	smpsNoAttack, $01
0008B7BF E110                       	smpsAlterNote       $10
0008B7C1 E701                       	dc.b	smpsNoAttack, $01
0008B7C3 E10C                       	smpsAlterNote       $0C
0008B7C5 E701                       	dc.b	smpsNoAttack, $01
0008B7C7 E109                       	smpsAlterNote       $09
0008B7C9 E701                       	dc.b	smpsNoAttack, $01
0008B7CB E105                       	smpsAlterNote       $05
0008B7CD E701                       	dc.b	smpsNoAttack, $01
0008B7CF E109                       	smpsAlterNote       $09
0008B7D1 E701                       	dc.b	smpsNoAttack, $01
0008B7D3 E10F                       	smpsAlterNote       $0F
0008B7D5 E701                       	dc.b	smpsNoAttack, $01
0008B7D7 E110                       	smpsAlterNote       $10
0008B7D9 E701                       	dc.b	smpsNoAttack, $01
0008B7DB E10C                       	smpsAlterNote       $0C
0008B7DD E701                       	dc.b	smpsNoAttack, $01
0008B7DF E106                       	smpsAlterNote       $06
0008B7E1 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008B7E5 E109                       	smpsAlterNote       $09
0008B7E7 E701                       	dc.b	smpsNoAttack, $01
0008B7E9 E10F                       	smpsAlterNote       $0F
0008B7EB E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008B7EF E109                       	smpsAlterNote       $09
0008B7F1 E701                       	dc.b	smpsNoAttack, $01
0008B7F3 E106                       	smpsAlterNote       $06
0008B7F5 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008B7F9 E10C                       	smpsAlterNote       $0C
0008B7FB E701                       	dc.b	smpsNoAttack, $01
0008B7FD E110                       	smpsAlterNote       $10
0008B7FF E701                       	dc.b	smpsNoAttack, $01
0008B801 E10F                       	smpsAlterNote       $0F
0008B803 E701                       	dc.b	smpsNoAttack, $01
0008B805 E109                       	smpsAlterNote       $09
0008B807 E701                       	dc.b	smpsNoAttack, $01
0008B809 E105                       	smpsAlterNote       $05
0008B80B E701                       	dc.b	smpsNoAttack, $01
0008B80D E109                       	smpsAlterNote       $09
0008B80F E701                       	dc.b	smpsNoAttack, $01
0008B811 E10F                       	smpsAlterNote       $0F
0008B813 E701                       	dc.b	smpsNoAttack, $01
0008B815 E110                       	smpsAlterNote       $10
0008B817 E701                       	dc.b	smpsNoAttack, $01
0008B819 E10C                       	smpsAlterNote       $0C
0008B81B E701                       	dc.b	smpsNoAttack, $01
0008B81D E106                       	smpsAlterNote       $06
0008B81F E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008B823 E109                       	smpsAlterNote       $09
0008B825 E701                       	dc.b	smpsNoAttack, $01
0008B827 E10F                       	smpsAlterNote       $0F
0008B829 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008B82D E109                       	smpsAlterNote       $09
0008B82F E701                       	dc.b	smpsNoAttack, $01
0008B831 E106                       	smpsAlterNote       $06
0008B833 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008B837 E10C                       	smpsAlterNote       $0C
0008B839 E701                       	dc.b	smpsNoAttack, $01
0008B83B E110                       	smpsAlterNote       $10
0008B83D E701                       	dc.b	smpsNoAttack, $01
0008B83F E10F                       	smpsAlterNote       $0F
0008B841 E701                       	dc.b	smpsNoAttack, $01
0008B843 E109                       	smpsAlterNote       $09
0008B845 E701                       	dc.b	smpsNoAttack, $01
0008B847 E105                       	smpsAlterNote       $05
0008B849 E701                       	dc.b	smpsNoAttack, $01
0008B84B E109                       	smpsAlterNote       $09
0008B84D E701                       	dc.b	smpsNoAttack, $01
0008B84F E10C                       	smpsAlterNote       $0C
0008B851 E701                       	dc.b	smpsNoAttack, $01
0008B853 E110                       	smpsAlterNote       $10
0008B855 E701                       	dc.b	smpsNoAttack, $01
0008B857 E10C                       	smpsAlterNote       $0C
0008B859 E701                       	dc.b	smpsNoAttack, $01
0008B85B E106                       	smpsAlterNote       $06
0008B85D E701                       	dc.b	smpsNoAttack, $01
0008B85F E105                       	smpsAlterNote       $05
0008B861 E701                       	dc.b	smpsNoAttack, $01
0008B863 E109                       	smpsAlterNote       $09
0008B865 E701                       	dc.b	smpsNoAttack, $01
0008B867 E10F                       	smpsAlterNote       $0F
0008B869 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008B86D E10C                       	smpsAlterNote       $0C
0008B86F E701                       	dc.b	smpsNoAttack, $01
0008B871 E106                       	smpsAlterNote       $06
0008B873 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008B877 E10C                       	smpsAlterNote       $0C
0008B879 E701                       	dc.b	smpsNoAttack, $01
0008B87B E10F                       	smpsAlterNote       $0F
0008B87D E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008B881 E109                       	smpsAlterNote       $09
0008B883 E701                       	dc.b	smpsNoAttack, $01
0008B885 E105                       	smpsAlterNote       $05
0008B887 E701                       	dc.b	smpsNoAttack, $01
0008B889 E106                       	smpsAlterNote       $06
0008B88B E701                       	dc.b	smpsNoAttack, $01
0008B88D E10C                       	smpsAlterNote       $0C
0008B88F E701                       	dc.b	smpsNoAttack, $01
0008B891 E110                       	smpsAlterNote       $10
0008B893 E701                       	dc.b	smpsNoAttack, $01
0008B895 E10C                       	smpsAlterNote       $0C
0008B897 E701                       	dc.b	smpsNoAttack, $01
0008B899 E109                       	smpsAlterNote       $09
0008B89B E701                       	dc.b	smpsNoAttack, $01
0008B89D E105                       	smpsAlterNote       $05
0008B89F E701                       	dc.b	smpsNoAttack, $01
0008B8A1 E109                       	smpsAlterNote       $09
0008B8A3 E701                       	dc.b	smpsNoAttack, $01
0008B8A5 E10F                       	smpsAlterNote       $0F
0008B8A7 E701                       	dc.b	smpsNoAttack, $01
0008B8A9 E110                       	smpsAlterNote       $10
0008B8AB E701                       	dc.b	smpsNoAttack, $01
0008B8AD E10C                       	smpsAlterNote       $0C
0008B8AF E701                       	dc.b	smpsNoAttack, $01
0008B8B1 E106                       	smpsAlterNote       $06
0008B8B3 E701                       	dc.b	smpsNoAttack, $01
0008B8B5 E10B                       	smpsAlterNote       $0B
0008B8B7 BF02                       	dc.b	nD5, $02
0008B8B9 E10C                       	smpsAlterNote       $0C
0008B8BB C001 8001 C10D             	dc.b	nEb5, $01, nRst, $01, nE5, $0D
0008B8C1 E109                       	smpsAlterNote       $09
0008B8C3 E701                       	dc.b	smpsNoAttack, $01
0008B8C5 E105                       	smpsAlterNote       $05
0008B8C7 E701                       	dc.b	smpsNoAttack, $01
0008B8C9 E109                       	smpsAlterNote       $09
0008B8CB E701                       	dc.b	smpsNoAttack, $01
0008B8CD E10F                       	smpsAlterNote       $0F
0008B8CF E701                       	dc.b	smpsNoAttack, $01
0008B8D1 E110                       	smpsAlterNote       $10
0008B8D3 E701                       	dc.b	smpsNoAttack, $01
0008B8D5 E10C                       	smpsAlterNote       $0C
0008B8D7 E701                       	dc.b	smpsNoAttack, $01
0008B8D9 E106                       	smpsAlterNote       $06
0008B8DB E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008B8DF E109                       	smpsAlterNote       $09
0008B8E1 E701                       	dc.b	smpsNoAttack, $01
0008B8E3 E10F                       	smpsAlterNote       $0F
0008B8E5 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008B8E9 E109                       	smpsAlterNote       $09
0008B8EB E701                       	dc.b	smpsNoAttack, $01
0008B8ED E106                       	smpsAlterNote       $06
0008B8EF E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008B8F3 E10C                       	smpsAlterNote       $0C
0008B8F5 E701                       	dc.b	smpsNoAttack, $01
0008B8F7 E110                       	smpsAlterNote       $10
0008B8F9 E701                       	dc.b	smpsNoAttack, $01
0008B8FB E10F                       	smpsAlterNote       $0F
0008B8FD E701                       	dc.b	smpsNoAttack, $01
0008B8FF E109                       	smpsAlterNote       $09
0008B901 E701                       	dc.b	smpsNoAttack, $01
0008B903 E105                       	smpsAlterNote       $05
0008B905 E701                       	dc.b	smpsNoAttack, $01
0008B907 E109                       	smpsAlterNote       $09
0008B909 E701                       	dc.b	smpsNoAttack, $01
0008B90B E10C                       	smpsAlterNote       $0C
0008B90D E701                       	dc.b	smpsNoAttack, $01
0008B90F E110                       	smpsAlterNote       $10
0008B911 E701                       	dc.b	smpsNoAttack, $01
0008B913 E10C                       	smpsAlterNote       $0C
0008B915 E701                       	dc.b	smpsNoAttack, $01
0008B917 E106                       	smpsAlterNote       $06
0008B919 E701 8001                  	dc.b	smpsNoAttack, $01, nRst, $01
0008B91D E10D                       	smpsAlterNote       $0D
0008B91F C409 8001 C206 8001        	dc.b	nG5, $09, nRst, $01, nF5, $06, nRst, $01
0008B927 E10C                       	smpsAlterNote       $0C
0008B929 C10D                       	dc.b	nE5, $0D
0008B92B E106                       	smpsAlterNote       $06
0008B92D E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008B931 E109                       	smpsAlterNote       $09
0008B933 E701                       	dc.b	smpsNoAttack, $01
0008B935 E10F                       	smpsAlterNote       $0F
0008B937 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008B93B E109                       	smpsAlterNote       $09
0008B93D E701                       	dc.b	smpsNoAttack, $01
0008B93F E106                       	smpsAlterNote       $06
0008B941 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008B945 E10C                       	smpsAlterNote       $0C
0008B947 E701                       	dc.b	smpsNoAttack, $01
0008B949 E110                       	smpsAlterNote       $10
0008B94B E701                       	dc.b	smpsNoAttack, $01
0008B94D E10F                       	smpsAlterNote       $0F
0008B94F E701                       	dc.b	smpsNoAttack, $01
0008B951 E109                       	smpsAlterNote       $09
0008B953 E701                       	dc.b	smpsNoAttack, $01
0008B955 E105                       	smpsAlterNote       $05
0008B957 E701                       	dc.b	smpsNoAttack, $01
0008B959 E106                       	smpsAlterNote       $06
0008B95B 800F                       	dc.b	nRst, $0F
0008B95F E6FF                       	smpsAlterVol        $FF
0008B961 E10F                       	smpsAlterNote       $0F
0008B963 BA01                       	dc.b	nA4, $01
0008B965 E110                       	smpsAlterNote       $10
0008B967 BB02                       	dc.b	nBb4, $02
0008B969 E10F                       	smpsAlterNote       $0F
0008B96B BA03 8001 BA06             	dc.b	nA4, $03, nRst, $01, nA4, $06
0008B971 E10B                       	smpsAlterNote       $0B
0008B973 BF03 8001                  	dc.b	nD5, $03, nRst, $01
0008B977 E10C                       	smpsAlterNote       $0C
0008B979 C103                       	dc.b	nE5, $03
0008B97B E10D                       	smpsAlterNote       $0D
0008B97D C203 8001 C403 C606 8001   	dc.b	nF5, $03, nRst, $01, nG5, $03, nA5, $06, nRst, $01
0008B987 E10B                       	smpsAlterNote       $0B
0008B989 BF03 C90E                  	dc.b	nD5, $03, nC6, $0E
0008B98D E104                       	smpsAlterNote       $04
0008B98F E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008B993 E10A                       	smpsAlterNote       $0A
0008B995 E701                       	dc.b	smpsNoAttack, $01
0008B997 E10D                       	smpsAlterNote       $0D
0008B999 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008B99D E107                       	smpsAlterNote       $07
0008B99F E701                       	dc.b	smpsNoAttack, $01
0008B9A1 E104                       	smpsAlterNote       $04
0008B9A3 8001                       	dc.b	nRst, $01
0008B9A5 E110                       	smpsAlterNote       $10
0008B9A7 C703                       	dc.b	nBb5, $03
0008B9A9 E10F                       	smpsAlterNote       $0F
0008B9AB C603 8001                  	dc.b	nA5, $03, nRst, $01
0008B9AF E10D                       	smpsAlterNote       $0D
0008B9B1 C403 C60D                  	dc.b	nG5, $03, nA5, $0D
0008B9B5 E10C                       	smpsAlterNote       $0C
0008B9B7 E701                       	dc.b	smpsNoAttack, $01
0008B9B9 E108                       	smpsAlterNote       $08
0008B9BB E701                       	dc.b	smpsNoAttack, $01
0008B9BD E109                       	smpsAlterNote       $09
0008B9BF E701                       	dc.b	smpsNoAttack, $01
0008B9C1 E10F                       	smpsAlterNote       $0F
0008B9C3 E701                       	dc.b	smpsNoAttack, $01
0008B9C5 E113                       	smpsAlterNote       $13
0008B9C7 E701                       	dc.b	smpsNoAttack, $01
0008B9C9 E10F                       	smpsAlterNote       $0F
0008B9CB E701                       	dc.b	smpsNoAttack, $01
0008B9CD E10C                       	smpsAlterNote       $0C
0008B9CF E701                       	dc.b	smpsNoAttack, $01
0008B9D1 E108                       	smpsAlterNote       $08
0008B9D3 E701                       	dc.b	smpsNoAttack, $01
0008B9D5 E10C                       	smpsAlterNote       $0C
0008B9D7 E701                       	dc.b	smpsNoAttack, $01
0008B9D9 E112                       	smpsAlterNote       $12
0008B9DB E701                       	dc.b	smpsNoAttack, $01
0008B9DD E113                       	smpsAlterNote       $13
0008B9DF E701                       	dc.b	smpsNoAttack, $01
0008B9E1 E10F                       	smpsAlterNote       $0F
0008B9E3 E701                       	dc.b	smpsNoAttack, $01
0008B9E5 E109                       	smpsAlterNote       $09
0008B9E7 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008B9EB E10C                       	smpsAlterNote       $0C
0008B9ED E701                       	dc.b	smpsNoAttack, $01
0008B9EF E112                       	smpsAlterNote       $12
0008B9F1 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008B9F5 E10C                       	smpsAlterNote       $0C
0008B9F7 E701                       	dc.b	smpsNoAttack, $01
0008B9F9 E109                       	smpsAlterNote       $09
0008B9FB E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008B9FF E10F                       	smpsAlterNote       $0F
0008BA01 E701                       	dc.b	smpsNoAttack, $01
0008BA03 E113                       	smpsAlterNote       $13
0008BA05 E701                       	dc.b	smpsNoAttack, $01
0008BA07 E112                       	smpsAlterNote       $12
0008BA09 E701                       	dc.b	smpsNoAttack, $01
0008BA0B E10C                       	smpsAlterNote       $0C
0008BA0D E701                       	dc.b	smpsNoAttack, $01
0008BA0F E108                       	smpsAlterNote       $08
0008BA11 E701                       	dc.b	smpsNoAttack, $01
0008BA13 E10C                       	smpsAlterNote       $0C
0008BA15 E701                       	dc.b	smpsNoAttack, $01
0008BA17 E10F                       	smpsAlterNote       $0F
0008BA19 E701                       	dc.b	smpsNoAttack, $01
0008BA1B E113                       	smpsAlterNote       $13
0008BA1D E701 800E                  	dc.b	smpsNoAttack, $01, nRst, $0E
0008BA21 E10B                       	smpsAlterNote       $0B
0008BA23 BF03                       	dc.b	nD5, $03
0008BA25 E10C                       	smpsAlterNote       $0C
0008BA27 C103 8001                  	dc.b	nE5, $03, nRst, $01
0008BA2B E10D                       	smpsAlterNote       $0D
0008BA2D C203 C403 8001 C606 8001   	dc.b	nF5, $03, nG5, $03, nRst, $01, nA5, $06, nRst, $01
0008BA37 E10B                       	smpsAlterNote       $0B
0008BA39 BF02 8001 C90D 8001 CB02+  	dc.b	nD5, $02, nRst, $01, nC6, $0D, nRst, $01, nD6, $02, nRst, $01
0008BA45 E110                       	smpsAlterNote       $10
0008BA47 C704 8001                  	dc.b	nBb5, $04, nRst, $01
0008BA4B E10F                       	smpsAlterNote       $0F
0008BA4D C604                       	dc.b	nA5, $04
0008BA4F E10D                       	smpsAlterNote       $0D
0008BA51 C404 8001 C60D             	dc.b	nG5, $04, nRst, $01, nA5, $0D
0008BA57 E109                       	smpsAlterNote       $09
0008BA59 E701                       	dc.b	smpsNoAttack, $01
0008BA5B E108                       	smpsAlterNote       $08
0008BA5D E701                       	dc.b	smpsNoAttack, $01
0008BA5F E10C                       	smpsAlterNote       $0C
0008BA61 E701                       	dc.b	smpsNoAttack, $01
0008BA63 E112                       	smpsAlterNote       $12
0008BA65 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008BA69 E10F                       	smpsAlterNote       $0F
0008BA6B E701                       	dc.b	smpsNoAttack, $01
0008BA6D E109                       	smpsAlterNote       $09
0008BA6F E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008BA73 E10F                       	smpsAlterNote       $0F
0008BA75 E701                       	dc.b	smpsNoAttack, $01
0008BA77 E112                       	smpsAlterNote       $12
0008BA79 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008BA7D E10C                       	smpsAlterNote       $0C
0008BA7F E701                       	dc.b	smpsNoAttack, $01
0008BA81 E108                       	smpsAlterNote       $08
0008BA83 E701                       	dc.b	smpsNoAttack, $01
0008BA85 E109                       	smpsAlterNote       $09
0008BA87 E701                       	dc.b	smpsNoAttack, $01
0008BA89 E10F                       	smpsAlterNote       $0F
0008BA8B E701                       	dc.b	smpsNoAttack, $01
0008BA8D E113                       	smpsAlterNote       $13
0008BA8F E701                       	dc.b	smpsNoAttack, $01
0008BA91 E10F                       	smpsAlterNote       $0F
0008BA93 E701                       	dc.b	smpsNoAttack, $01
0008BA95 E10C                       	smpsAlterNote       $0C
0008BA97 E701                       	dc.b	smpsNoAttack, $01
0008BA99 E108                       	smpsAlterNote       $08
0008BA9B E701                       	dc.b	smpsNoAttack, $01
0008BA9D E10C                       	smpsAlterNote       $0C
0008BA9F E701                       	dc.b	smpsNoAttack, $01
0008BAA1 E112                       	smpsAlterNote       $12
0008BAA3 E701                       	dc.b	smpsNoAttack, $01
0008BAA5 E113                       	smpsAlterNote       $13
0008BAA7 E701                       	dc.b	smpsNoAttack, $01
0008BAA9 E10F                       	smpsAlterNote       $0F
0008BAAB E701                       	dc.b	smpsNoAttack, $01
0008BAAD E109                       	smpsAlterNote       $09
0008BAAF E701                       	dc.b	smpsNoAttack, $01
0008BAB1 E10D                       	smpsAlterNote       $0D
0008BAB3 C402                       	dc.b	nG5, $02
0008BAB5 E10F                       	smpsAlterNote       $0F
0008BAB7 C501 8001 C60D 8001 C604   	dc.b	nAb5, $01, nRst, $01, nA5, $0D, nRst, $01, nA5, $04
0008BAC1 E10D                       	smpsAlterNote       $0D
0008BAC3 C404 8001 C604             	dc.b	nG5, $04, nRst, $01, nA5, $04
0008BAC9 E10B                       	smpsAlterNote       $0B
0008BACB BF0D                       	dc.b	nD5, $0D
0008BACD E108                       	smpsAlterNote       $08
0008BACF E701                       	dc.b	smpsNoAttack, $01
0008BAD1 E104                       	smpsAlterNote       $04
0008BAD3 E701                       	dc.b	smpsNoAttack, $01
0008BAD5 E105                       	smpsAlterNote       $05
0008BAD7 E701                       	dc.b	smpsNoAttack, $01
0008BAD9 E10B                       	smpsAlterNote       $0B
0008BADB E701                       	dc.b	smpsNoAttack, $01
0008BADD E10F                       	smpsAlterNote       $0F
0008BADF E701                       	dc.b	smpsNoAttack, $01
0008BAE1 E10B                       	smpsAlterNote       $0B
0008BAE3 E701                       	dc.b	smpsNoAttack, $01
0008BAE5 E108                       	smpsAlterNote       $08
0008BAE7 E701                       	dc.b	smpsNoAttack, $01
0008BAE9 E104                       	smpsAlterNote       $04
0008BAEB E701                       	dc.b	smpsNoAttack, $01
0008BAED E108                       	smpsAlterNote       $08
0008BAEF E701                       	dc.b	smpsNoAttack, $01
0008BAF1 E10E                       	smpsAlterNote       $0E
0008BAF3 E701                       	dc.b	smpsNoAttack, $01
0008BAF5 E10F                       	smpsAlterNote       $0F
0008BAF7 E701                       	dc.b	smpsNoAttack, $01
0008BAF9 E10C                       	smpsAlterNote       $0C
0008BAFB C101                       	dc.b	nE5, $01
0008BAFD E10D                       	smpsAlterNote       $0D
0008BAFF C201 C401 8001 C606        	dc.b	nF5, $01, nG5, $01, nRst, $01, nA5, $06
0008BB07 E10F                       	smpsAlterNote       $0F
0008BB09 C607                       	dc.b	nA5, $07
0008BB0B E10C                       	smpsAlterNote       $0C
0008BB0D CD07                       	dc.b	nE6, $07
0008BB0F E10D                       	smpsAlterNote       $0D
0008BB11 CE06 8001                  	dc.b	nF6, $06, nRst, $01
0008BB15 E10C                       	smpsAlterNote       $0C
0008BB17 CD03                       	dc.b	nE6, $03
0008BB19 E10A                       	smpsAlterNote       $0A
0008BB1B C903 8001                  	dc.b	nC6, $03, nRst, $01
0008BB1F E10D                       	smpsAlterNote       $0D
0008BB21 C403 C70D E701             	dc.b	nG5, $03, nBb5, $0D, smpsNoAttack, $01
0008BB27 E10A                       	smpsAlterNote       $0A
0008BB29 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008BB2D E110                       	smpsAlterNote       $10
0008BB2F E701                       	dc.b	smpsNoAttack, $01
0008BB31 E114                       	smpsAlterNote       $14
0008BB33 E701                       	dc.b	smpsNoAttack, $01
0008BB35 E113                       	smpsAlterNote       $13
0008BB37 E701                       	dc.b	smpsNoAttack, $01
0008BB39 E10D                       	smpsAlterNote       $0D
0008BB3B E701                       	dc.b	smpsNoAttack, $01
0008BB3D E109                       	smpsAlterNote       $09
0008BB3F E701                       	dc.b	smpsNoAttack, $01
0008BB41 E10D                       	smpsAlterNote       $0D
0008BB43 E701                       	dc.b	smpsNoAttack, $01
0008BB45 E110                       	smpsAlterNote       $10
0008BB47 E701                       	dc.b	smpsNoAttack, $01
0008BB49 E114                       	smpsAlterNote       $14
0008BB4B E701                       	dc.b	smpsNoAttack, $01
0008BB4D E10F                       	smpsAlterNote       $0F
0008BB4F C607                       	dc.b	nA5, $07
0008BB51 E10D                       	smpsAlterNote       $0D
0008BB53 C40D                       	dc.b	nG5, $0D
0008BB55 E10A                       	smpsAlterNote       $0A
0008BB57 E701                       	dc.b	smpsNoAttack, $01
0008BB59 E106                       	smpsAlterNote       $06
0008BB5B E701                       	dc.b	smpsNoAttack, $01
0008BB5D E10A                       	smpsAlterNote       $0A
0008BB5F E701                       	dc.b	smpsNoAttack, $01
0008BB61 E10D                       	smpsAlterNote       $0D
0008BB63 E701                       	dc.b	smpsNoAttack, $01
0008BB65 E111                       	smpsAlterNote       $11
0008BB67 E701                       	dc.b	smpsNoAttack, $01
0008BB69 E10D                       	smpsAlterNote       $0D
0008BB6B E701                       	dc.b	smpsNoAttack, $01
0008BB6D E107                       	smpsAlterNote       $07
0008BB6F E701                       	dc.b	smpsNoAttack, $01
0008BB71 E106                       	smpsAlterNote       $06
0008BB73 E701                       	dc.b	smpsNoAttack, $01
0008BB75 E10A                       	smpsAlterNote       $0A
0008BB77 E701                       	dc.b	smpsNoAttack, $01
0008BB79 E110                       	smpsAlterNote       $10
0008BB7B E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008BB7F E10D                       	smpsAlterNote       $0D
0008BB81 E701                       	dc.b	smpsNoAttack, $01
0008BB83 E107                       	smpsAlterNote       $07
0008BB85 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008BB89 E10F                       	smpsAlterNote       $0F
0008BB8B C60E                       	dc.b	nA5, $0E
0008BB8D E109                       	smpsAlterNote       $09
0008BB8F E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008BB93 E10F                       	smpsAlterNote       $0F
0008BB95 E701                       	dc.b	smpsNoAttack, $01
0008BB97 E112                       	smpsAlterNote       $12
0008BB99 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008BB9D E10C                       	smpsAlterNote       $0C
0008BB9F E701                       	dc.b	smpsNoAttack, $01
0008BBA1 E108                       	smpsAlterNote       $08
0008BBA3 E701                       	dc.b	smpsNoAttack, $01
0008BBA5 E109                       	smpsAlterNote       $09
0008BBA7 E701                       	dc.b	smpsNoAttack, $01
0008BBA9 E10F                       	smpsAlterNote       $0F
0008BBAB E701                       	dc.b	smpsNoAttack, $01
0008BBAD E113                       	smpsAlterNote       $13
0008BBAF E701                       	dc.b	smpsNoAttack, $01
0008BBB1 E10F                       	smpsAlterNote       $0F
0008BBB3 E701                       	dc.b	smpsNoAttack, $01
0008BBB5 E10C                       	smpsAlterNote       $0C
0008BBB7 E701                       	dc.b	smpsNoAttack, $01
0008BBB9 E108                       	smpsAlterNote       $08
0008BBBB E701                       	dc.b	smpsNoAttack, $01
0008BBBD E109                       	smpsAlterNote       $09
0008BBBF 8001                       	dc.b	nRst, $01
0008BBC1 E110                       	smpsAlterNote       $10
0008BBC3 C70D                       	dc.b	nBb5, $0D
0008BBC5 E10D                       	smpsAlterNote       $0D
0008BBC7 E701                       	dc.b	smpsNoAttack, $01
0008BBC9 E109                       	smpsAlterNote       $09
0008BBCB E701                       	dc.b	smpsNoAttack, $01
0008BBCD E10D                       	smpsAlterNote       $0D
0008BBCF E701                       	dc.b	smpsNoAttack, $01
0008BBD1 E113                       	smpsAlterNote       $13
0008BBD3 E701                       	dc.b	smpsNoAttack, $01
0008BBD5 E114                       	smpsAlterNote       $14
0008BBD7 E701                       	dc.b	smpsNoAttack, $01
0008BBD9 E110                       	smpsAlterNote       $10
0008BBDB E701                       	dc.b	smpsNoAttack, $01
0008BBDD E10A                       	smpsAlterNote       $0A
0008BBDF E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008BBE3 E10D                       	smpsAlterNote       $0D
0008BBE5 E701                       	dc.b	smpsNoAttack, $01
0008BBE7 E113                       	smpsAlterNote       $13
0008BBE9 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008BBED E10D                       	smpsAlterNote       $0D
0008BBEF E701                       	dc.b	smpsNoAttack, $01
0008BBF1 E10A                       	smpsAlterNote       $0A
0008BBF3 E701 E701 C90C 8001 8001   	dc.b	smpsNoAttack, $01, smpsNoAttack, $01, nC6, $0C, nRst, $01, nRst, $01
0008BBFD E10B                       	smpsAlterNote       $0B
0008BBFF 8001                       	dc.b	nRst, $01
0008BC01 E10C                       	smpsAlterNote       $0C
0008BC03 CD0C 8001                  	dc.b	nE6, $0C, nRst, $01
0008BC07 E10B                       	smpsAlterNote       $0B
0008BC09 CB0D                       	dc.b	nD6, $0D
0008BC0B E105                       	smpsAlterNote       $05
0008BC0D E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008BC11 E108                       	smpsAlterNote       $08
0008BC13 E701                       	dc.b	smpsNoAttack, $01
0008BC15 E10E                       	smpsAlterNote       $0E
0008BC17 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008BC1B E108                       	smpsAlterNote       $08
0008BC1D E701                       	dc.b	smpsNoAttack, $01
0008BC1F E105                       	smpsAlterNote       $05
0008BC21 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008BC25 E10B                       	smpsAlterNote       $0B
0008BC27 E701                       	dc.b	smpsNoAttack, $01
0008BC29 E10F                       	smpsAlterNote       $0F
0008BC2B E701 8001                  	dc.b	smpsNoAttack, $01, nRst, $01
0008BC2F E10C                       	smpsAlterNote       $0C
0008BC31 CC0D                       	dc.b	nEb6, $0D
0008BC33 E106                       	smpsAlterNote       $06
0008BC35 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008BC39 E109                       	smpsAlterNote       $09
0008BC3B E701                       	dc.b	smpsNoAttack, $01
0008BC3D E10C                       	smpsAlterNote       $0C
0008BC3F 8001                       	dc.b	nRst, $01
0008BC41 E10A                       	smpsAlterNote       $0A
0008BC43 C906 8001 C901 8001 C902+  	dc.b	nC6, $06, nRst, $01, nC6, $01, nRst, $01, nC6, $02, nC6, $02
0008BC4F CB0E                       	dc.b	nD6, $0E
0008BC51 E105                       	smpsAlterNote       $05
0008BC53 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008BC57 E10B                       	smpsAlterNote       $0B
0008BC59 E701                       	dc.b	smpsNoAttack, $01
0008BC5B E10E                       	smpsAlterNote       $0E
0008BC5D E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008BC61 E108                       	smpsAlterNote       $08
0008BC63 E701                       	dc.b	smpsNoAttack, $01
0008BC65 E104                       	smpsAlterNote       $04
0008BC67 E701                       	dc.b	smpsNoAttack, $01
0008BC69 E105                       	smpsAlterNote       $05
0008BC6B E701                       	dc.b	smpsNoAttack, $01
0008BC6D E10B                       	smpsAlterNote       $0B
0008BC6F E701                       	dc.b	smpsNoAttack, $01
0008BC71 E10F                       	smpsAlterNote       $0F
0008BC73 E701                       	dc.b	smpsNoAttack, $01
0008BC75 E10D                       	smpsAlterNote       $0D
0008BC77 CE0A 8001                  	dc.b	nF6, $0A, nRst, $01
0008BC7B E10C                       	smpsAlterNote       $0C
0008BC7D CC06 8001                  	dc.b	nEb6, $06, nRst, $01
0008BC81 E10A                       	smpsAlterNote       $0A
0008BC83 C906 C902 8001 C901 8001+  	dc.b	nC6, $06, nC6, $02, nRst, $01, nC6, $01, nRst, $01, nC6, $02
0008BC8F CB0D                       	dc.b	nD6, $0D
0008BC91 E108                       	smpsAlterNote       $08
0008BC93 E701                       	dc.b	smpsNoAttack, $01
0008BC95 E104                       	smpsAlterNote       $04
0008BC97 E701                       	dc.b	smpsNoAttack, $01
0008BC99 E105                       	smpsAlterNote       $05
0008BC9B E701                       	dc.b	smpsNoAttack, $01
0008BC9D E10B                       	smpsAlterNote       $0B
0008BC9F E701                       	dc.b	smpsNoAttack, $01
0008BCA1 E10F                       	smpsAlterNote       $0F
0008BCA3 E701                       	dc.b	smpsNoAttack, $01
0008BCA5 E10B                       	smpsAlterNote       $0B
0008BCA7 E701                       	dc.b	smpsNoAttack, $01
0008BCA9 E108                       	smpsAlterNote       $08
0008BCAB E701                       	dc.b	smpsNoAttack, $01
0008BCAD E104                       	smpsAlterNote       $04
0008BCAF E701                       	dc.b	smpsNoAttack, $01
0008BCB1 E108                       	smpsAlterNote       $08
0008BCB3 E701                       	dc.b	smpsNoAttack, $01
0008BCB5 E10E                       	smpsAlterNote       $0E
0008BCB7 E701                       	dc.b	smpsNoAttack, $01
0008BCB9 E10F                       	smpsAlterNote       $0F
0008BCBB E701                       	dc.b	smpsNoAttack, $01
0008BCBD E10C                       	smpsAlterNote       $0C
0008BCBF CC0D                       	dc.b	nEb6, $0D
0008BCC1 E109                       	smpsAlterNote       $09
0008BCC3 E701                       	dc.b	smpsNoAttack, $01
0008BCC5 E105                       	smpsAlterNote       $05
0008BCC7 E701                       	dc.b	smpsNoAttack, $01
0008BCC9 E106                       	smpsAlterNote       $06
0008BCCB E701                       	dc.b	smpsNoAttack, $01
0008BCCD E10C                       	smpsAlterNote       $0C
0008BCCF E701                       	dc.b	smpsNoAttack, $01
0008BCD1 E10A                       	smpsAlterNote       $0A
0008BCD3 C907 C902 C902 8001 C901+  	dc.b	nC6, $07, nC6, $02, nC6, $02, nRst, $01, nC6, $01, nRst, $01
0008BCDF CB0D                       	dc.b	nD6, $0D
0008BCE1 E108                       	smpsAlterNote       $08
0008BCE3 E701                       	dc.b	smpsNoAttack, $01
0008BCE5 E104                       	smpsAlterNote       $04
0008BCE7 E701                       	dc.b	smpsNoAttack, $01
0008BCE9 E108                       	smpsAlterNote       $08
0008BCEB E701                       	dc.b	smpsNoAttack, $01
0008BCED E10B                       	smpsAlterNote       $0B
0008BCEF E701                       	dc.b	smpsNoAttack, $01
0008BCF1 E10F                       	smpsAlterNote       $0F
0008BCF3 E701                       	dc.b	smpsNoAttack, $01
0008BCF5 E10B                       	smpsAlterNote       $0B
0008BCF7 E701                       	dc.b	smpsNoAttack, $01
0008BCF9 E105                       	smpsAlterNote       $05
0008BCFB E701                       	dc.b	smpsNoAttack, $01
0008BCFD E104                       	smpsAlterNote       $04
0008BCFF E701                       	dc.b	smpsNoAttack, $01
0008BD01 E108                       	smpsAlterNote       $08
0008BD03 E701                       	dc.b	smpsNoAttack, $01
0008BD05 E10E                       	smpsAlterNote       $0E
0008BD07 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008BD0B E10B                       	smpsAlterNote       $0B
0008BD0D E701                       	dc.b	smpsNoAttack, $01
0008BD0F E105                       	smpsAlterNote       $05
0008BD11 E701 E701 8019             	dc.b	smpsNoAttack, $01, smpsNoAttack, $01, nRst, $19
0008BD19 03                         	dc.b	$03
0008BD1A E601                       	smpsAlterVol        $01
0008BD1C F6F1 D1                    	smpsJump            music84_Jump01
0008BD1F                            
0008BD1F                            ; FM5 Data
0008BD1F                            music84_FM5:
0008BD21 E080                       	smpsPan             panLeft, $00
0008BD23 8003                       	dc.b	nRst, $03
0008BD25 E10D                       	smpsAlterNote       $0D
0008BD27 C203 8008                  	dc.b	nF5, $03, nRst, $08
0008BD2B E10C                       	smpsAlterNote       $0C
0008BD2D C103 800A                  	dc.b	nE5, $03, nRst, $0A
0008BD31 E10F                       	smpsAlterNote       $0F
0008BD33 BA03 8006                  	dc.b	nA4, $03, nRst, $06
0008BD39 E6FE                       	smpsAlterVol        $FE
0008BD3B C703 C603 8001             	dc.b	nBb5, $03, nA5, $03, nRst, $01
0008BD41 E10D                       	smpsAlterNote       $0D
0008BD43 C403 C203 8001             	dc.b	nG5, $03, nF5, $03, nRst, $01
0008BD49 E10C                       	smpsAlterNote       $0C
0008BD4B C102 8001                  	dc.b	nE5, $02, nRst, $01
0008BD4F E10A                       	smpsAlterNote       $0A
0008BD51 BD01 8001                  	dc.b	nC5, $01, nRst, $01
0008BD57 03                         	dc.b	$03
0008BD58                            
0008BD58                            music84_Jump00:
0008BD58 8004                       	dc.b	nRst, $04
0008BD5A E602                       	smpsAlterVol        $02
0008BD5C E10D                       	smpsAlterNote       $0D
0008BD5E B60D                       	dc.b	nF4, $0D
0008BD60 E107                       	smpsAlterNote       $07
0008BD62 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008BD66 E10A                       	smpsAlterNote       $0A
0008BD68 E701                       	dc.b	smpsNoAttack, $01
0008BD6A E110                       	smpsAlterNote       $10
0008BD6C E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008BD70 E10A                       	smpsAlterNote       $0A
0008BD72 E701                       	dc.b	smpsNoAttack, $01
0008BD74 E107                       	smpsAlterNote       $07
0008BD76 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008BD7A E10D                       	smpsAlterNote       $0D
0008BD7C E701                       	dc.b	smpsNoAttack, $01
0008BD7E E111                       	smpsAlterNote       $11
0008BD80 E701 8001                  	dc.b	smpsNoAttack, $01, nRst, $01
0008BD84 E10D                       	smpsAlterNote       $0D
0008BD86 B80D                       	dc.b	nG4, $0D
0008BD88 E107                       	smpsAlterNote       $07
0008BD8A E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008BD8E E10A                       	smpsAlterNote       $0A
0008BD90 E701                       	dc.b	smpsNoAttack, $01
0008BD92 E110                       	smpsAlterNote       $10
0008BD94 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008BD98 E10A                       	smpsAlterNote       $0A
0008BD9A E701                       	dc.b	smpsNoAttack, $01
0008BD9C E107                       	smpsAlterNote       $07
0008BD9E E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008BDA2 E10D                       	smpsAlterNote       $0D
0008BDA4 E701                       	dc.b	smpsNoAttack, $01
0008BDA6 E111                       	smpsAlterNote       $11
0008BDA8 E701                       	dc.b	smpsNoAttack, $01
0008BDAA E110                       	smpsAlterNote       $10
0008BDAC E701                       	dc.b	smpsNoAttack, $01
0008BDAE E10A                       	smpsAlterNote       $0A
0008BDB0 E701                       	dc.b	smpsNoAttack, $01
0008BDB2 E106                       	smpsAlterNote       $06
0008BDB4 E701                       	dc.b	smpsNoAttack, $01
0008BDB6 E10A                       	smpsAlterNote       $0A
0008BDB8 E701                       	dc.b	smpsNoAttack, $01
0008BDBA E10D                       	smpsAlterNote       $0D
0008BDBC E701                       	dc.b	smpsNoAttack, $01
0008BDBE E111                       	smpsAlterNote       $11
0008BDC0 E701                       	dc.b	smpsNoAttack, $01
0008BDC2 E10D                       	smpsAlterNote       $0D
0008BDC4 E701                       	dc.b	smpsNoAttack, $01
0008BDC6 E10F                       	smpsAlterNote       $0F
0008BDC8 BA0E                       	dc.b	nA4, $0E
0008BDCA E109                       	smpsAlterNote       $09
0008BDCC E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008BDD0 E10F                       	smpsAlterNote       $0F
0008BDD2 E701                       	dc.b	smpsNoAttack, $01
0008BDD4 E112                       	smpsAlterNote       $12
0008BDD6 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008BDDA E10C                       	smpsAlterNote       $0C
0008BDDC E701                       	dc.b	smpsNoAttack, $01
0008BDDE E108                       	smpsAlterNote       $08
0008BDE0 E701                       	dc.b	smpsNoAttack, $01
0008BDE2 E109                       	smpsAlterNote       $09
0008BDE4 E701                       	dc.b	smpsNoAttack, $01
0008BDE6 E10F                       	smpsAlterNote       $0F
0008BDE8 E701                       	dc.b	smpsNoAttack, $01
0008BDEA E113                       	smpsAlterNote       $13
0008BDEC E701                       	dc.b	smpsNoAttack, $01
0008BDEE E10F                       	smpsAlterNote       $0F
0008BDF0 E701                       	dc.b	smpsNoAttack, $01
0008BDF2 E109                       	smpsAlterNote       $09
0008BDF4 E701                       	dc.b	smpsNoAttack, $01
0008BDF6 E108                       	smpsAlterNote       $08
0008BDF8 E701                       	dc.b	smpsNoAttack, $01
0008BDFA E10C                       	smpsAlterNote       $0C
0008BDFC E701                       	dc.b	smpsNoAttack, $01
0008BDFE E112                       	smpsAlterNote       $12
0008BE00 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008BE04 E10F                       	smpsAlterNote       $0F
0008BE06 E701                       	dc.b	smpsNoAttack, $01
0008BE08 E109                       	smpsAlterNote       $09
0008BE0A E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008BE0E E10F                       	smpsAlterNote       $0F
0008BE10 E701                       	dc.b	smpsNoAttack, $01
0008BE12 E112                       	smpsAlterNote       $12
0008BE14 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008BE18 E10C                       	smpsAlterNote       $0C
0008BE1A E701                       	dc.b	smpsNoAttack, $01
0008BE1C E108                       	smpsAlterNote       $08
0008BE1E E701                       	dc.b	smpsNoAttack, $01
0008BE20 E109                       	smpsAlterNote       $09
0008BE22 E701                       	dc.b	smpsNoAttack, $01
0008BE24 E10F                       	smpsAlterNote       $0F
0008BE26 E701                       	dc.b	smpsNoAttack, $01
0008BE28 E113                       	smpsAlterNote       $13
0008BE2A E701                       	dc.b	smpsNoAttack, $01
0008BE2C E10F                       	smpsAlterNote       $0F
0008BE2E E701                       	dc.b	smpsNoAttack, $01
0008BE30 E10C                       	smpsAlterNote       $0C
0008BE32 E701                       	dc.b	smpsNoAttack, $01
0008BE34 E108                       	smpsAlterNote       $08
0008BE36 E701                       	dc.b	smpsNoAttack, $01
0008BE38 E109                       	smpsAlterNote       $09
0008BE3A 8001                       	dc.b	nRst, $01
0008BE3C E10C                       	smpsAlterNote       $0C
0008BE3E B50A                       	dc.b	nE4, $0A
0008BE40 E10D                       	smpsAlterNote       $0D
0008BE42 B60D                       	dc.b	nF4, $0D
0008BE44 E10A                       	smpsAlterNote       $0A
0008BE46 E701                       	dc.b	smpsNoAttack, $01
0008BE48 E106                       	smpsAlterNote       $06
0008BE4A E701                       	dc.b	smpsNoAttack, $01
0008BE4C E107                       	smpsAlterNote       $07
0008BE4E E701                       	dc.b	smpsNoAttack, $01
0008BE50 E10D                       	smpsAlterNote       $0D
0008BE52 E701                       	dc.b	smpsNoAttack, $01
0008BE54 E111                       	smpsAlterNote       $11
0008BE56 E701                       	dc.b	smpsNoAttack, $01
0008BE58 E10D                       	smpsAlterNote       $0D
0008BE5A E701                       	dc.b	smpsNoAttack, $01
0008BE5C E10A                       	smpsAlterNote       $0A
0008BE5E E701                       	dc.b	smpsNoAttack, $01
0008BE60 E106                       	smpsAlterNote       $06
0008BE62 E701                       	dc.b	smpsNoAttack, $01
0008BE64 E10A                       	smpsAlterNote       $0A
0008BE66 E701                       	dc.b	smpsNoAttack, $01
0008BE68 E110                       	smpsAlterNote       $10
0008BE6A E701                       	dc.b	smpsNoAttack, $01
0008BE6C E111                       	smpsAlterNote       $11
0008BE6E E701                       	dc.b	smpsNoAttack, $01
0008BE70 E10D                       	smpsAlterNote       $0D
0008BE72 B80D                       	dc.b	nG4, $0D
0008BE74 E10A                       	smpsAlterNote       $0A
0008BE76 E701                       	dc.b	smpsNoAttack, $01
0008BE78 E106                       	smpsAlterNote       $06
0008BE7A E701                       	dc.b	smpsNoAttack, $01
0008BE7C E107                       	smpsAlterNote       $07
0008BE7E E701                       	dc.b	smpsNoAttack, $01
0008BE80 E10D                       	smpsAlterNote       $0D
0008BE82 E701                       	dc.b	smpsNoAttack, $01
0008BE84 E111                       	smpsAlterNote       $11
0008BE86 E701                       	dc.b	smpsNoAttack, $01
0008BE88 E10D                       	smpsAlterNote       $0D
0008BE8A E701                       	dc.b	smpsNoAttack, $01
0008BE8C E10A                       	smpsAlterNote       $0A
0008BE8E E701                       	dc.b	smpsNoAttack, $01
0008BE90 E106                       	smpsAlterNote       $06
0008BE92 E701                       	dc.b	smpsNoAttack, $01
0008BE94 E10A                       	smpsAlterNote       $0A
0008BE96 E701                       	dc.b	smpsNoAttack, $01
0008BE98 E110                       	smpsAlterNote       $10
0008BE9A E701                       	dc.b	smpsNoAttack, $01
0008BE9C E111                       	smpsAlterNote       $11
0008BE9E E701                       	dc.b	smpsNoAttack, $01
0008BEA0 E10D                       	smpsAlterNote       $0D
0008BEA2 E701                       	dc.b	smpsNoAttack, $01
0008BEA4 E107                       	smpsAlterNote       $07
0008BEA6 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008BEAA E10A                       	smpsAlterNote       $0A
0008BEAC E701                       	dc.b	smpsNoAttack, $01
0008BEAE E110                       	smpsAlterNote       $10
0008BEB0 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008BEB4 E10D                       	smpsAlterNote       $0D
0008BEB6 8001                       	dc.b	nRst, $01
0008BEB8 E10F                       	smpsAlterNote       $0F
0008BEBA BA0D                       	dc.b	nA4, $0D
0008BEBC E10C                       	smpsAlterNote       $0C
0008BEBE E701                       	dc.b	smpsNoAttack, $01
0008BEC0 E108                       	smpsAlterNote       $08
0008BEC2 E701                       	dc.b	smpsNoAttack, $01
0008BEC4 E10C                       	smpsAlterNote       $0C
0008BEC6 E701                       	dc.b	smpsNoAttack, $01
0008BEC8 E112                       	smpsAlterNote       $12
0008BECA E701                       	dc.b	smpsNoAttack, $01
0008BECC E113                       	smpsAlterNote       $13
0008BECE E701                       	dc.b	smpsNoAttack, $01
0008BED0 E10F                       	smpsAlterNote       $0F
0008BED2 E701                       	dc.b	smpsNoAttack, $01
0008BED4 E109                       	smpsAlterNote       $09
0008BED6 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008BEDA E10C                       	smpsAlterNote       $0C
0008BEDC E701                       	dc.b	smpsNoAttack, $01
0008BEDE E112                       	smpsAlterNote       $12
0008BEE0 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008BEE4 E10C                       	smpsAlterNote       $0C
0008BEE6 E701                       	dc.b	smpsNoAttack, $01
0008BEE8 E109                       	smpsAlterNote       $09
0008BEEA E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008BEEE E10F                       	smpsAlterNote       $0F
0008BEF0 E701                       	dc.b	smpsNoAttack, $01
0008BEF2 E113                       	smpsAlterNote       $13
0008BEF4 E701                       	dc.b	smpsNoAttack, $01
0008BEF6 E112                       	smpsAlterNote       $12
0008BEF8 E701                       	dc.b	smpsNoAttack, $01
0008BEFA E10C                       	smpsAlterNote       $0C
0008BEFC E701                       	dc.b	smpsNoAttack, $01
0008BEFE E108                       	smpsAlterNote       $08
0008BF00 E701                       	dc.b	smpsNoAttack, $01
0008BF02 E10C                       	smpsAlterNote       $0C
0008BF04 E701                       	dc.b	smpsNoAttack, $01
0008BF06 E10F                       	smpsAlterNote       $0F
0008BF08 E701                       	dc.b	smpsNoAttack, $01
0008BF0A E113                       	smpsAlterNote       $13
0008BF0C E701                       	dc.b	smpsNoAttack, $01
0008BF0E E10F                       	smpsAlterNote       $0F
0008BF10 E701                       	dc.b	smpsNoAttack, $01
0008BF12 E109                       	smpsAlterNote       $09
0008BF14 E701 8001                  	dc.b	smpsNoAttack, $01, nRst, $01
0008BF18 E10D                       	smpsAlterNote       $0D
0008BF1A B609 8001                  	dc.b	nF4, $09, nRst, $01
0008BF1E E10C                       	smpsAlterNote       $0C
0008BF20 B506 8001                  	dc.b	nE4, $06, nRst, $01
0008BF24 E10B                       	smpsAlterNote       $0B
0008BF26 B30D                       	dc.b	nD4, $0D
0008BF28 E10C                       	smpsAlterNote       $0C
0008BF2A B503 8001                  	dc.b	nE4, $03, nRst, $01
0008BF2E E10D                       	smpsAlterNote       $0D
0008BF30 B603 B803 8001 BA0D        	dc.b	nF4, $03, nG4, $03, nRst, $01, nA4, $0D
0008BF38 E109                       	smpsAlterNote       $09
0008BF3A E701                       	dc.b	smpsNoAttack, $01
0008BF3C E108                       	smpsAlterNote       $08
0008BF3E E701                       	dc.b	smpsNoAttack, $01
0008BF40 E10C                       	smpsAlterNote       $0C
0008BF42 E701                       	dc.b	smpsNoAttack, $01
0008BF44 E112                       	smpsAlterNote       $12
0008BF46 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008BF4A E10F                       	smpsAlterNote       $0F
0008BF4C E701                       	dc.b	smpsNoAttack, $01
0008BF4E E109                       	smpsAlterNote       $09
0008BF50 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008BF54 E10F                       	smpsAlterNote       $0F
0008BF56 E701                       	dc.b	smpsNoAttack, $01
0008BF58 E112                       	smpsAlterNote       $12
0008BF5A E701                       	dc.b	smpsNoAttack, $01
0008BF5C E113                       	smpsAlterNote       $13
0008BF5E 8001                       	dc.b	nRst, $01
0008BF60 E10D                       	smpsAlterNote       $0D
0008BF62 C20D                       	dc.b	nF5, $0D
0008BF64 E107                       	smpsAlterNote       $07
0008BF66 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008BF6A E10A                       	smpsAlterNote       $0A
0008BF6C E701                       	dc.b	smpsNoAttack, $01
0008BF6E E110                       	smpsAlterNote       $10
0008BF70 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008BF74 E10A                       	smpsAlterNote       $0A
0008BF76 E701                       	dc.b	smpsNoAttack, $01
0008BF78 E107                       	smpsAlterNote       $07
0008BF7A E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008BF7E E10D                       	smpsAlterNote       $0D
0008BF80 E701                       	dc.b	smpsNoAttack, $01
0008BF82 E111                       	smpsAlterNote       $11
0008BF84 E701                       	dc.b	smpsNoAttack, $01
0008BF86 E110                       	smpsAlterNote       $10
0008BF88 E701                       	dc.b	smpsNoAttack, $01
0008BF8A E10A                       	smpsAlterNote       $0A
0008BF8C E701                       	dc.b	smpsNoAttack, $01
0008BF8E E106                       	smpsAlterNote       $06
0008BF90 E701                       	dc.b	smpsNoAttack, $01
0008BF92 E10A                       	smpsAlterNote       $0A
0008BF94 E701                       	dc.b	smpsNoAttack, $01
0008BF96 E10D                       	smpsAlterNote       $0D
0008BF98 E701                       	dc.b	smpsNoAttack, $01
0008BF9A E111                       	smpsAlterNote       $11
0008BF9C E701                       	dc.b	smpsNoAttack, $01
0008BF9E E10D                       	smpsAlterNote       $0D
0008BFA0 E701                       	dc.b	smpsNoAttack, $01
0008BFA2 E107                       	smpsAlterNote       $07
0008BFA4 E701                       	dc.b	smpsNoAttack, $01
0008BFA6 E106                       	smpsAlterNote       $06
0008BFA8 E701                       	dc.b	smpsNoAttack, $01
0008BFAA E10A                       	smpsAlterNote       $0A
0008BFAC E701                       	dc.b	smpsNoAttack, $01
0008BFAE E110                       	smpsAlterNote       $10
0008BFB0 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008BFB4 E10D                       	smpsAlterNote       $0D
0008BFB6 E701                       	dc.b	smpsNoAttack, $01
0008BFB8 E107                       	smpsAlterNote       $07
0008BFBA E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008BFBE E10D                       	smpsAlterNote       $0D
0008BFC0 E701                       	dc.b	smpsNoAttack, $01
0008BFC2 E110                       	smpsAlterNote       $10
0008BFC4 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008BFC8 E10A                       	smpsAlterNote       $0A
0008BFCA E701                       	dc.b	smpsNoAttack, $01
0008BFCC E106                       	smpsAlterNote       $06
0008BFCE E701                       	dc.b	smpsNoAttack, $01
0008BFD0 E107                       	smpsAlterNote       $07
0008BFD2 E701                       	dc.b	smpsNoAttack, $01
0008BFD4 E10D                       	smpsAlterNote       $0D
0008BFD6 E701                       	dc.b	smpsNoAttack, $01
0008BFD8 E111                       	smpsAlterNote       $11
0008BFDA E701                       	dc.b	smpsNoAttack, $01
0008BFDC E10D                       	smpsAlterNote       $0D
0008BFDE E701                       	dc.b	smpsNoAttack, $01
0008BFE0 E10A                       	smpsAlterNote       $0A
0008BFE2 E701                       	dc.b	smpsNoAttack, $01
0008BFE4 E106                       	smpsAlterNote       $06
0008BFE6 E701                       	dc.b	smpsNoAttack, $01
0008BFE8 E10A                       	smpsAlterNote       $0A
0008BFEA E701                       	dc.b	smpsNoAttack, $01
0008BFEC E110                       	smpsAlterNote       $10
0008BFEE E701                       	dc.b	smpsNoAttack, $01
0008BFF0 E111                       	smpsAlterNote       $11
0008BFF2 E701                       	dc.b	smpsNoAttack, $01
0008BFF4 E10D                       	smpsAlterNote       $0D
0008BFF6 E701                       	dc.b	smpsNoAttack, $01
0008BFF8 E107                       	smpsAlterNote       $07
0008BFFA E701                       	dc.b	smpsNoAttack, $01
0008BFFC E10D                       	smpsAlterNote       $0D
0008BFFE C207                       	dc.b	nF5, $07
0008C000 E10C                       	smpsAlterNote       $0C
0008C002 C10D                       	dc.b	nE5, $0D
0008C004 E109                       	smpsAlterNote       $09
0008C006 E701                       	dc.b	smpsNoAttack, $01
0008C008 E106                       	smpsAlterNote       $06
0008C00A E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008C00E E10C                       	smpsAlterNote       $0C
0008C010 E701                       	dc.b	smpsNoAttack, $01
0008C012 E110                       	smpsAlterNote       $10
0008C014 E701                       	dc.b	smpsNoAttack, $01
0008C016 E10F                       	smpsAlterNote       $0F
0008C018 E701                       	dc.b	smpsNoAttack, $01
0008C01A E109                       	smpsAlterNote       $09
0008C01C E701                       	dc.b	smpsNoAttack, $01
0008C01E E105                       	smpsAlterNote       $05
0008C020 E701                       	dc.b	smpsNoAttack, $01
0008C022 E109                       	smpsAlterNote       $09
0008C024 E701                       	dc.b	smpsNoAttack, $01
0008C026 E10C                       	smpsAlterNote       $0C
0008C028 E701                       	dc.b	smpsNoAttack, $01
0008C02A E110                       	smpsAlterNote       $10
0008C02C E701                       	dc.b	smpsNoAttack, $01
0008C02E E10B                       	smpsAlterNote       $0B
0008C030 BF0D                       	dc.b	nD5, $0D
0008C032 E108                       	smpsAlterNote       $08
0008C034 E701                       	dc.b	smpsNoAttack, $01
0008C036 E105                       	smpsAlterNote       $05
0008C038 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008C03C E10B                       	smpsAlterNote       $0B
0008C03E E701                       	dc.b	smpsNoAttack, $01
0008C040 E10F                       	smpsAlterNote       $0F
0008C042 E701                       	dc.b	smpsNoAttack, $01
0008C044 E10E                       	smpsAlterNote       $0E
0008C046 E701                       	dc.b	smpsNoAttack, $01
0008C048 E108                       	smpsAlterNote       $08
0008C04A E701                       	dc.b	smpsNoAttack, $01
0008C04C E104                       	smpsAlterNote       $04
0008C04E E701                       	dc.b	smpsNoAttack, $01
0008C050 E108                       	smpsAlterNote       $08
0008C052 E701                       	dc.b	smpsNoAttack, $01
0008C054 E10E                       	smpsAlterNote       $0E
0008C056 E701                       	dc.b	smpsNoAttack, $01
0008C058 E10F                       	smpsAlterNote       $0F
0008C05A E701                       	dc.b	smpsNoAttack, $01
0008C05C E10B                       	smpsAlterNote       $0B
0008C05E E701                       	dc.b	smpsNoAttack, $01
0008C060 E105                       	smpsAlterNote       $05
0008C062 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008C066 E108                       	smpsAlterNote       $08
0008C068 E701                       	dc.b	smpsNoAttack, $01
0008C06A E10E                       	smpsAlterNote       $0E
0008C06C E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008C070 E108                       	smpsAlterNote       $08
0008C072 E701                       	dc.b	smpsNoAttack, $01
0008C074 E105                       	smpsAlterNote       $05
0008C076 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008C07A E10B                       	smpsAlterNote       $0B
0008C07C E701                       	dc.b	smpsNoAttack, $01
0008C07E E10F                       	smpsAlterNote       $0F
0008C080 E701                       	dc.b	smpsNoAttack, $01
0008C082 E10E                       	smpsAlterNote       $0E
0008C084 E701                       	dc.b	smpsNoAttack, $01
0008C086 E108                       	smpsAlterNote       $08
0008C088 E701                       	dc.b	smpsNoAttack, $01
0008C08A E104                       	smpsAlterNote       $04
0008C08C E701                       	dc.b	smpsNoAttack, $01
0008C08E E108                       	smpsAlterNote       $08
0008C090 E701                       	dc.b	smpsNoAttack, $01
0008C092 E10B                       	smpsAlterNote       $0B
0008C094 E701                       	dc.b	smpsNoAttack, $01
0008C096 E10F                       	smpsAlterNote       $0F
0008C098 E701                       	dc.b	smpsNoAttack, $01
0008C09A E10B                       	smpsAlterNote       $0B
0008C09C E701                       	dc.b	smpsNoAttack, $01
0008C09E E105                       	smpsAlterNote       $05
0008C0A0 E701                       	dc.b	smpsNoAttack, $01
0008C0A2 E104                       	smpsAlterNote       $04
0008C0A4 E701                       	dc.b	smpsNoAttack, $01
0008C0A6 E108                       	smpsAlterNote       $08
0008C0A8 E701                       	dc.b	smpsNoAttack, $01
0008C0AA E10E                       	smpsAlterNote       $0E
0008C0AC E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008C0B0 E10B                       	smpsAlterNote       $0B
0008C0B2 E701                       	dc.b	smpsNoAttack, $01
0008C0B4 E105                       	smpsAlterNote       $05
0008C0B6 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008C0BA E10B                       	smpsAlterNote       $0B
0008C0BC E701                       	dc.b	smpsNoAttack, $01
0008C0BE E10E                       	smpsAlterNote       $0E
0008C0C0 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008C0C4 E108                       	smpsAlterNote       $08
0008C0C6 E701                       	dc.b	smpsNoAttack, $01
0008C0C8 E105                       	smpsAlterNote       $05
0008C0CA 8001                       	dc.b	nRst, $01
0008C0CE E601                       	smpsAlterVol        $01
0008C0D0 E10B                       	smpsAlterNote       $0B
0008C0D2 BF06 8001 BF03 BF03 8001+  	dc.b	nD5, $06, nRst, $01, nD5, $03, nD5, $03, nRst, $01, nCs5, $03
0008C0DE 8004                       	dc.b	nRst, $04
0008C0E2 E6FF                       	smpsAlterVol        $FF
0008C0E4 E10D                       	smpsAlterNote       $0D
0008C0E6 B802 8001 B603 B601        	dc.b	nG4, $02, nRst, $01, nF4, $03, nF4, $01
0008C0EE E10C                       	smpsAlterNote       $0C
0008C0F0 E7B5 0280 01               	dc.b	smpsNoAttack, nE4, $02, nRst, $01
0008C0F5 E10D                       	smpsAlterNote       $0D
0008C0F7 B60D                       	dc.b	nF4, $0D
0008C0F9 E10A                       	smpsAlterNote       $0A
0008C0FB E701                       	dc.b	smpsNoAttack, $01
0008C0FD E106                       	smpsAlterNote       $06
0008C0FF E701                       	dc.b	smpsNoAttack, $01
0008C101 E10A                       	smpsAlterNote       $0A
0008C103 E701                       	dc.b	smpsNoAttack, $01
0008C105 E110                       	smpsAlterNote       $10
0008C107 E701                       	dc.b	smpsNoAttack, $01
0008C109 E111                       	smpsAlterNote       $11
0008C10B E701                       	dc.b	smpsNoAttack, $01
0008C10D E10D                       	smpsAlterNote       $0D
0008C10F E701                       	dc.b	smpsNoAttack, $01
0008C111 E107                       	smpsAlterNote       $07
0008C113 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008C117 E10A                       	smpsAlterNote       $0A
0008C119 E701                       	dc.b	smpsNoAttack, $01
0008C11B E110                       	smpsAlterNote       $10
0008C11D E701                       	dc.b	smpsNoAttack, $01
0008C11F E111                       	smpsAlterNote       $11
0008C121 8001                       	dc.b	nRst, $01
0008C123 E10D                       	smpsAlterNote       $0D
0008C125 B80D                       	dc.b	nG4, $0D
0008C127 E10A                       	smpsAlterNote       $0A
0008C129 E701                       	dc.b	smpsNoAttack, $01
0008C12B E106                       	smpsAlterNote       $06
0008C12D E701                       	dc.b	smpsNoAttack, $01
0008C12F E10A                       	smpsAlterNote       $0A
0008C131 E701                       	dc.b	smpsNoAttack, $01
0008C133 E110                       	smpsAlterNote       $10
0008C135 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008C139 E10D                       	smpsAlterNote       $0D
0008C13B E701                       	dc.b	smpsNoAttack, $01
0008C13D E107                       	smpsAlterNote       $07
0008C13F E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008C143 E10D                       	smpsAlterNote       $0D
0008C145 E701                       	dc.b	smpsNoAttack, $01
0008C147 E110                       	smpsAlterNote       $10
0008C149 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008C14D E10A                       	smpsAlterNote       $0A
0008C14F E701                       	dc.b	smpsNoAttack, $01
0008C151 E106                       	smpsAlterNote       $06
0008C153 E701                       	dc.b	smpsNoAttack, $01
0008C155 E107                       	smpsAlterNote       $07
0008C157 E701                       	dc.b	smpsNoAttack, $01
0008C159 E10D                       	smpsAlterNote       $0D
0008C15B E701                       	dc.b	smpsNoAttack, $01
0008C15D E111                       	smpsAlterNote       $11
0008C15F E701                       	dc.b	smpsNoAttack, $01
0008C161 E10D                       	smpsAlterNote       $0D
0008C163 E701 8001                  	dc.b	smpsNoAttack, $01, nRst, $01
0008C167 E10F                       	smpsAlterNote       $0F
0008C169 BA02 8001                  	dc.b	nA4, $02, nRst, $01
0008C16D E110                       	smpsAlterNote       $10
0008C16F BB03                       	dc.b	nBb4, $03
0008C171 E10F                       	smpsAlterNote       $0F
0008C173 BA03 8001 C603             	dc.b	nA4, $03, nRst, $01, nA5, $03
0008C179 E110                       	smpsAlterNote       $10
0008C17B C703 8001                  	dc.b	nBb5, $03, nRst, $01
0008C17F E10F                       	smpsAlterNote       $0F
0008C181 C603 D203 8001             	dc.b	nA5, $03, nA6, $03, nRst, $01
0008C187 E110                       	smpsAlterNote       $10
0008C189 D302 8001                  	dc.b	nBb6, $02, nRst, $01
0008C18D E10F                       	smpsAlterNote       $0F
0008C18F D20D                       	dc.b	nA6, $0D
0008C191 E10C                       	smpsAlterNote       $0C
0008C193 E701                       	dc.b	smpsNoAttack, $01
0008C195 E108                       	smpsAlterNote       $08
0008C197 E701                       	dc.b	smpsNoAttack, $01
0008C199 E10C                       	smpsAlterNote       $0C
0008C19B E701                       	dc.b	smpsNoAttack, $01
0008C19D E10F                       	smpsAlterNote       $0F
0008C19F E701                       	dc.b	smpsNoAttack, $01
0008C1A1 E113                       	smpsAlterNote       $13
0008C1A3 E701                       	dc.b	smpsNoAttack, $01
0008C1A5 E10F                       	smpsAlterNote       $0F
0008C1A7 E701                       	dc.b	smpsNoAttack, $01
0008C1A9 E109                       	smpsAlterNote       $09
0008C1AB E701                       	dc.b	smpsNoAttack, $01
0008C1AD E108                       	smpsAlterNote       $08
0008C1AF E701                       	dc.b	smpsNoAttack, $01
0008C1B1 E10C                       	smpsAlterNote       $0C
0008C1B3 E701                       	dc.b	smpsNoAttack, $01
0008C1B5 E112                       	smpsAlterNote       $12
0008C1B7 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008C1BB E10F                       	smpsAlterNote       $0F
0008C1BD E701                       	dc.b	smpsNoAttack, $01
0008C1BF E109                       	smpsAlterNote       $09
0008C1C1 E701 E701 8007             	dc.b	smpsNoAttack, $01, smpsNoAttack, $01, nRst, $07
0008C1C7 E10D                       	smpsAlterNote       $0D
0008C1C9 CE07                       	dc.b	nF6, $07
0008C1CB E10C                       	smpsAlterNote       $0C
0008C1CD CD06 8001                  	dc.b	nE6, $06, nRst, $01
0008C1D1 E10D                       	smpsAlterNote       $0D
0008C1D3 CE03                       	dc.b	nF6, $03
0008C1D5 E10C                       	smpsAlterNote       $0C
0008C1D7 CC0D                       	dc.b	nEb6, $0D
0008C1D9 E109                       	smpsAlterNote       $09
0008C1DB E701                       	dc.b	smpsNoAttack, $01
0008C1DD E106                       	smpsAlterNote       $06
0008C1DF E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008C1E3 E10C                       	smpsAlterNote       $0C
0008C1E5 E701                       	dc.b	smpsNoAttack, $01
0008C1E7 E110                       	smpsAlterNote       $10
0008C1E9 E701                       	dc.b	smpsNoAttack, $01
0008C1EB E10F                       	smpsAlterNote       $0F
0008C1ED E701                       	dc.b	smpsNoAttack, $01
0008C1EF E109                       	smpsAlterNote       $09
0008C1F1 E701                       	dc.b	smpsNoAttack, $01
0008C1F3 E105                       	smpsAlterNote       $05
0008C1F5 E701                       	dc.b	smpsNoAttack, $01
0008C1F7 E109                       	smpsAlterNote       $09
0008C1F9 E701                       	dc.b	smpsNoAttack, $01
0008C1FB E10C                       	smpsAlterNote       $0C
0008C1FD E701                       	dc.b	smpsNoAttack, $01
0008C1FF E110                       	smpsAlterNote       $10
0008C201 E701                       	dc.b	smpsNoAttack, $01
0008C203 E10C                       	smpsAlterNote       $0C
0008C205 E701                       	dc.b	smpsNoAttack, $01
0008C207 E106                       	smpsAlterNote       $06
0008C209 E701                       	dc.b	smpsNoAttack, $01
0008C20B E105                       	smpsAlterNote       $05
0008C20D E701                       	dc.b	smpsNoAttack, $01
0008C20F E109                       	smpsAlterNote       $09
0008C211 E701                       	dc.b	smpsNoAttack, $01
0008C213 E10F                       	smpsAlterNote       $0F
0008C215 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008C219 E10C                       	smpsAlterNote       $0C
0008C21B E701                       	dc.b	smpsNoAttack, $01
0008C21D E10B                       	smpsAlterNote       $0B
0008C21F CB03 8001 CA02 8001 CB03   	dc.b	nD6, $03, nRst, $01, nCs6, $02, nRst, $01, nD6, $03
0008C229 E10F                       	smpsAlterNote       $0F
0008C22B C603 8001 C503 C603 8001   	dc.b	nA5, $03, nRst, $01, nAb5, $03, nA5, $03, nRst, $01
0008C235 E10D                       	smpsAlterNote       $0D
0008C237 C203                       	dc.b	nF5, $03
0008C239 E10C                       	smpsAlterNote       $0C
0008C23B C103 8001                  	dc.b	nE5, $03, nRst, $01
0008C23F E10D                       	smpsAlterNote       $0D
0008C241 C20D                       	dc.b	nF5, $0D
0008C243 E10C                       	smpsAlterNote       $0C
0008C245 C10D 8001                  	dc.b	nE5, $0D, nRst, $01
0008C249 E10B                       	smpsAlterNote       $0B
0008C24B BF0D                       	dc.b	nD5, $0D
0008C24D E108                       	smpsAlterNote       $08
0008C24F E701                       	dc.b	smpsNoAttack, $01
0008C251 E104                       	smpsAlterNote       $04
0008C253 E701                       	dc.b	smpsNoAttack, $01
0008C255 E108                       	smpsAlterNote       $08
0008C257 E701                       	dc.b	smpsNoAttack, $01
0008C259 E10E                       	smpsAlterNote       $0E
0008C25B E701                       	dc.b	smpsNoAttack, $01
0008C25D E10F                       	smpsAlterNote       $0F
0008C25F E701                       	dc.b	smpsNoAttack, $01
0008C261 E10B                       	smpsAlterNote       $0B
0008C263 E701                       	dc.b	smpsNoAttack, $01
0008C265 E105                       	smpsAlterNote       $05
0008C267 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008C26B E108                       	smpsAlterNote       $08
0008C26D E701                       	dc.b	smpsNoAttack, $01
0008C26F E10E                       	smpsAlterNote       $0E
0008C271 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008C275 E108                       	smpsAlterNote       $08
0008C277 E701                       	dc.b	smpsNoAttack, $01
0008C279 E105                       	smpsAlterNote       $05
0008C27B E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008C27F E10B                       	smpsAlterNote       $0B
0008C281 E701                       	dc.b	smpsNoAttack, $01
0008C283 E10F                       	smpsAlterNote       $0F
0008C285 E701                       	dc.b	smpsNoAttack, $01
0008C287 E10E                       	smpsAlterNote       $0E
0008C289 E701                       	dc.b	smpsNoAttack, $01
0008C28B E108                       	smpsAlterNote       $08
0008C28D E701                       	dc.b	smpsNoAttack, $01
0008C28F E104                       	smpsAlterNote       $04
0008C291 E701                       	dc.b	smpsNoAttack, $01
0008C293 E108                       	smpsAlterNote       $08
0008C295 E701                       	dc.b	smpsNoAttack, $01
0008C297 E10B                       	smpsAlterNote       $0B
0008C299 E701                       	dc.b	smpsNoAttack, $01
0008C29B E10F                       	smpsAlterNote       $0F
0008C29D E701                       	dc.b	smpsNoAttack, $01
0008C29F E10B                       	smpsAlterNote       $0B
0008C2A1 E701                       	dc.b	smpsNoAttack, $01
0008C2A3 E105                       	smpsAlterNote       $05
0008C2A5 E701                       	dc.b	smpsNoAttack, $01
0008C2A7 E104                       	smpsAlterNote       $04
0008C2A9 E701                       	dc.b	smpsNoAttack, $01
0008C2AB E108                       	smpsAlterNote       $08
0008C2AD E701                       	dc.b	smpsNoAttack, $01
0008C2AF E10E                       	smpsAlterNote       $0E
0008C2B1 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008C2B5 E10B                       	smpsAlterNote       $0B
0008C2B7 E701                       	dc.b	smpsNoAttack, $01
0008C2B9 E105                       	smpsAlterNote       $05
0008C2BB E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008C2BF E10B                       	smpsAlterNote       $0B
0008C2C1 E701                       	dc.b	smpsNoAttack, $01
0008C2C3 E10E                       	smpsAlterNote       $0E
0008C2C5 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008C2C9 E108                       	smpsAlterNote       $08
0008C2CB E701                       	dc.b	smpsNoAttack, $01
0008C2CD E104                       	smpsAlterNote       $04
0008C2CF E701                       	dc.b	smpsNoAttack, $01
0008C2D1 E105                       	smpsAlterNote       $05
0008C2D3 E701                       	dc.b	smpsNoAttack, $01
0008C2D5 E10B                       	smpsAlterNote       $0B
0008C2D7 E701                       	dc.b	smpsNoAttack, $01
0008C2D9 E10F                       	smpsAlterNote       $0F
0008C2DB E701                       	dc.b	smpsNoAttack, $01
0008C2DD E10B                       	smpsAlterNote       $0B
0008C2DF E701                       	dc.b	smpsNoAttack, $01
0008C2E1 E108                       	smpsAlterNote       $08
0008C2E3 E701                       	dc.b	smpsNoAttack, $01
0008C2E5 E104                       	smpsAlterNote       $04
0008C2E7 E701                       	dc.b	smpsNoAttack, $01
0008C2E9 E108                       	smpsAlterNote       $08
0008C2EB E701                       	dc.b	smpsNoAttack, $01
0008C2ED E10E                       	smpsAlterNote       $0E
0008C2EF E701                       	dc.b	smpsNoAttack, $01
0008C2F1 E10F                       	smpsAlterNote       $0F
0008C2F3 E701                       	dc.b	smpsNoAttack, $01
0008C2F5 E10B                       	smpsAlterNote       $0B
0008C2F7 E701                       	dc.b	smpsNoAttack, $01
0008C2F9 E105                       	smpsAlterNote       $05
0008C2FB E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008C2FF E108                       	smpsAlterNote       $08
0008C301 E701                       	dc.b	smpsNoAttack, $01
0008C303 E10E                       	smpsAlterNote       $0E
0008C305 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008C309 E108                       	smpsAlterNote       $08
0008C30B E701                       	dc.b	smpsNoAttack, $01
0008C30D E105                       	smpsAlterNote       $05
0008C30F E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008C313 E10B                       	smpsAlterNote       $0B
0008C315 E701                       	dc.b	smpsNoAttack, $01
0008C317 E10F                       	smpsAlterNote       $0F
0008C319 E701                       	dc.b	smpsNoAttack, $01
0008C31B E10E                       	smpsAlterNote       $0E
0008C31D E701                       	dc.b	smpsNoAttack, $01
0008C31F E108                       	smpsAlterNote       $08
0008C321 E701                       	dc.b	smpsNoAttack, $01
0008C323 E104                       	smpsAlterNote       $04
0008C325 E701                       	dc.b	smpsNoAttack, $01
0008C327 E108                       	smpsAlterNote       $08
0008C329 E701                       	dc.b	smpsNoAttack, $01
0008C32B E10B                       	smpsAlterNote       $0B
0008C32D E701                       	dc.b	smpsNoAttack, $01
0008C32F E10F                       	smpsAlterNote       $0F
0008C331 E701                       	dc.b	smpsNoAttack, $01
0008C333 E10B                       	smpsAlterNote       $0B
0008C335 E701                       	dc.b	smpsNoAttack, $01
0008C337 E105                       	smpsAlterNote       $05
0008C339 E701                       	dc.b	smpsNoAttack, $01
0008C33B E104                       	smpsAlterNote       $04
0008C33D E701                       	dc.b	smpsNoAttack, $01
0008C33F E105                       	smpsAlterNote       $05
0008C341 8001                       	dc.b	nRst, $01
0008C343 E10D                       	smpsAlterNote       $0D
0008C345 C20D                       	dc.b	nF5, $0D
0008C347 E107                       	smpsAlterNote       $07
0008C349 E701                       	dc.b	smpsNoAttack, $01
0008C34B E106                       	smpsAlterNote       $06
0008C34D E701                       	dc.b	smpsNoAttack, $01
0008C34F E10A                       	smpsAlterNote       $0A
0008C351 E701                       	dc.b	smpsNoAttack, $01
0008C353 E110                       	smpsAlterNote       $10
0008C355 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008C359 E10D                       	smpsAlterNote       $0D
0008C35B E701                       	dc.b	smpsNoAttack, $01
0008C35D E107                       	smpsAlterNote       $07
0008C35F E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008C363 E10D                       	smpsAlterNote       $0D
0008C365 E701                       	dc.b	smpsNoAttack, $01
0008C367 E110                       	smpsAlterNote       $10
0008C369 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008C36D E10A                       	smpsAlterNote       $0A
0008C36F E701                       	dc.b	smpsNoAttack, $01
0008C371 E106                       	smpsAlterNote       $06
0008C373 E701                       	dc.b	smpsNoAttack, $01
0008C375 E107                       	smpsAlterNote       $07
0008C377 E701                       	dc.b	smpsNoAttack, $01
0008C379 E10D                       	smpsAlterNote       $0D
0008C37B E701                       	dc.b	smpsNoAttack, $01
0008C37D E111                       	smpsAlterNote       $11
0008C37F E701                       	dc.b	smpsNoAttack, $01
0008C381 E10D                       	smpsAlterNote       $0D
0008C383 E701 8001                  	dc.b	smpsNoAttack, $01, nRst, $01
0008C387 E10C                       	smpsAlterNote       $0C
0008C389 C10D                       	dc.b	nE5, $0D
0008C38B E10D                       	smpsAlterNote       $0D
0008C38D C20A                       	dc.b	nF5, $0A
0008C38F E10C                       	smpsAlterNote       $0C
0008C391 C10E                       	dc.b	nE5, $0E
0008C393 E106                       	smpsAlterNote       $06
0008C395 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008C399 E10C                       	smpsAlterNote       $0C
0008C39B E701 8001                  	dc.b	smpsNoAttack, $01, nRst, $01
0008C39F E10B                       	smpsAlterNote       $0B
0008C3A1 BF0D                       	dc.b	nD5, $0D
0008C3A3 E10C                       	smpsAlterNote       $0C
0008C3A5 C107                       	dc.b	nE5, $07
0008C3A7 E10D                       	smpsAlterNote       $0D
0008C3A9 C206 8001 C406 8001 C603   	dc.b	nF5, $06, nRst, $01, nG5, $06, nRst, $01, nA5, $03
0008C3B3 E110                       	smpsAlterNote       $10
0008C3B5 C707 C703 8001             	dc.b	nBb5, $07, nBb5, $03, nRst, $01
0008C3BB E10F                       	smpsAlterNote       $0F
0008C3BD C602 8001 D206 8001        	dc.b	nA5, $02, nRst, $01, nA6, $06, nRst, $01
0008C3C5 E10D                       	smpsAlterNote       $0D
0008C3C7 D003                       	dc.b	nG6, $03
0008C3CB E0C0                       	smpsPan             panCenter, $00
0008C3CD E6FF                       	smpsAlterVol        $FF
0008C3CF AA06 800F AA03 AA03 8019+  	dc.b	nF3, $06, nRst, $0F, nF3, $03, nF3, $03, nRst, $19, nF3, $02
0008C3DB 8001                       	dc.b	nRst, $01
0008C3DD E10C                       	smpsAlterNote       $0C
0008C3DF A906 800F A902 8001        	dc.b	nE3, $06, nRst, $0F, nE3, $02, nRst, $01
0008C3E9 E604                       	smpsAlterVol        $04
0008C3EB E10B                       	smpsAlterNote       $0B
0008C3ED B306 8001                  	dc.b	nD4, $06, nRst, $01
0008C3F1 E10F                       	smpsAlterNote       $0F
0008C3F3 AE03                       	dc.b	nA3, $03
0008C3F5 E10D                       	smpsAlterNote       $0D
0008C3F7 B603 8001                  	dc.b	nF4, $03, nRst, $01
0008C3FB E10C                       	smpsAlterNote       $0C
0008C3FD B506 8001                  	dc.b	nE4, $06, nRst, $01
0008C401 E10B                       	smpsAlterNote       $0B
0008C403 B302 8001                  	dc.b	nD4, $02, nRst, $01
0008C407 E10A                       	smpsAlterNote       $0A
0008C409 B103                       	dc.b	nC4, $03
0008C40B E110                       	smpsAlterNote       $10
0008C40D AF03 8001                  	dc.b	nBb3, $03, nRst, $01
0008C411 E10F                       	smpsAlterNote       $0F
0008C413 AE03 800A                  	dc.b	nA3, $03, nRst, $0A
0008C417 E080                       	smpsPan             panLeft, $00
0008C419 01                         	dc.b	$01
0008C41C E6FB                       	smpsAlterVol        $FB
0008C41E E1E4                       	smpsAlterNote       $E4
0008C420 C501                       	dc.b	nAb5, $01
0008C422 E1F4                       	smpsAlterNote       $F4
0008C424 E701                       	dc.b	smpsNoAttack, $01
0008C426 E104                       	smpsAlterNote       $04
0008C428 E701                       	dc.b	smpsNoAttack, $01
0008C42A E114                       	smpsAlterNote       $14
0008C42C E701                       	dc.b	smpsNoAttack, $01
0008C42E E11C                       	smpsAlterNote       $1C
0008C430 E701                       	dc.b	smpsNoAttack, $01
0008C432 E1EF                       	smpsAlterNote       $EF
0008C434 E7C6 01                    	dc.b	smpsNoAttack, nA5, $01
0008C437 E1FF                       	smpsAlterNote       $FF
0008C439 E701                       	dc.b	smpsNoAttack, $01
0008C43B E10F                       	smpsAlterNote       $0F
0008C43D C606                       	dc.b	nA5, $06
0008C43F E109                       	smpsAlterNote       $09
0008C441 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008C445 E10F                       	smpsAlterNote       $0F
0008C447 E701                       	dc.b	smpsNoAttack, $01
0008C449 E112                       	smpsAlterNote       $12
0008C44B E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008C44F E10C                       	smpsAlterNote       $0C
0008C451 E701                       	dc.b	smpsNoAttack, $01
0008C453 E108                       	smpsAlterNote       $08
0008C455 E701                       	dc.b	smpsNoAttack, $01
0008C457 E109                       	smpsAlterNote       $09
0008C459 E701                       	dc.b	smpsNoAttack, $01
0008C45B E10F                       	smpsAlterNote       $0F
0008C45D E701                       	dc.b	smpsNoAttack, $01
0008C45F E113                       	smpsAlterNote       $13
0008C461 E701                       	dc.b	smpsNoAttack, $01
0008C463 E10F                       	smpsAlterNote       $0F
0008C465 E701                       	dc.b	smpsNoAttack, $01
0008C467 E10C                       	smpsAlterNote       $0C
0008C469 E701                       	dc.b	smpsNoAttack, $01
0008C46B E108                       	smpsAlterNote       $08
0008C46D E701                       	dc.b	smpsNoAttack, $01
0008C46F E10C                       	smpsAlterNote       $0C
0008C471 E701                       	dc.b	smpsNoAttack, $01
0008C473 E112                       	smpsAlterNote       $12
0008C475 E701                       	dc.b	smpsNoAttack, $01
0008C477 E113                       	smpsAlterNote       $13
0008C479 E701                       	dc.b	smpsNoAttack, $01
0008C47B E10F                       	smpsAlterNote       $0F
0008C47D E701                       	dc.b	smpsNoAttack, $01
0008C47F E109                       	smpsAlterNote       $09
0008C481 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008C485 E10C                       	smpsAlterNote       $0C
0008C487 E701                       	dc.b	smpsNoAttack, $01
0008C489 E112                       	smpsAlterNote       $12
0008C48B E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008C48F E10C                       	smpsAlterNote       $0C
0008C491 E701                       	dc.b	smpsNoAttack, $01
0008C493 E109                       	smpsAlterNote       $09
0008C495 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008C499 E10F                       	smpsAlterNote       $0F
0008C49B E701                       	dc.b	smpsNoAttack, $01
0008C49D E113                       	smpsAlterNote       $13
0008C49F E701 8001                  	dc.b	smpsNoAttack, $01, nRst, $01
0008C4A3 E10D                       	smpsAlterNote       $0D
0008C4A5 C402 8001 C203             	dc.b	nG5, $02, nRst, $01, nF5, $03
0008C4AB E10C                       	smpsAlterNote       $0C
0008C4AD C102 8001                  	dc.b	nE5, $02, nRst, $01
0008C4B1 E10D                       	smpsAlterNote       $0D
0008C4B3 C201 8001                  	dc.b	nF5, $01, nRst, $01
0008C4B7 E10C                       	smpsAlterNote       $0C
0008C4B9 C102                       	dc.b	nE5, $02
0008C4BB E10B                       	smpsAlterNote       $0B
0008C4BD BF02 8001                  	dc.b	nD5, $02, nRst, $01
0008C4C1 E10C                       	smpsAlterNote       $0C
0008C4C3 C101 8001                  	dc.b	nE5, $01, nRst, $01
0008C4C7 E10B                       	smpsAlterNote       $0B
0008C4C9 BF02                       	dc.b	nD5, $02
0008C4CB E10A                       	smpsAlterNote       $0A
0008C4CD BD02 BF02 8001 BD01 8001   	dc.b	nC5, $02, nD5, $02, nRst, $01, nC5, $01, nRst, $01
0008C4D7 E110                       	smpsAlterNote       $10
0008C4D9 BB02                       	dc.b	nBb4, $02
0008C4DB E10A                       	smpsAlterNote       $0A
0008C4DD BD02 8001                  	dc.b	nC5, $02, nRst, $01
0008C4E1 E110                       	smpsAlterNote       $10
0008C4E3 BB01 8001                  	dc.b	nBb4, $01, nRst, $01
0008C4E7 E10F                       	smpsAlterNote       $0F
0008C4E9 BA01 8001                  	dc.b	nA4, $01, nRst, $01
0008C4ED E110                       	smpsAlterNote       $10
0008C4EF BB02                       	dc.b	nBb4, $02
0008C4F1 E10F                       	smpsAlterNote       $0F
0008C4F3 BA02 8001 B901 8001 BA02   	dc.b	nA4, $02, nRst, $01, nAb4, $01, nRst, $01, nA4, $02
0008C4FD E10C                       	smpsAlterNote       $0C
0008C4FF B502 B501 C101 8001        	dc.b	nE4, $02, nE4, $01, nE5, $01, nRst, $01
0008C507 E10B                       	smpsAlterNote       $0B
0008C509 BE01 8001                  	dc.b	nCs5, $01, nRst, $01
0008C50D E10F                       	smpsAlterNote       $0F
0008C50F BA02                       	dc.b	nA4, $02
0008C513 E0C0                       	smpsPan             panCenter, $00
0008C515 E601                       	smpsAlterVol        $01
0008C517 E109                       	smpsAlterNote       $09
0008C519 AA07 800E AA03 AA07 8015+  	dc.b	nF3, $07, nRst, $0E, nF3, $03, nF3, $07, nRst, $15, nF3, $03
0008C525 E108                       	smpsAlterNote       $08
0008C527 A906 800F A903             	dc.b	nE3, $06, nRst, $0F, nE3, $03
0008C52D E107                       	smpsAlterNote       $07
0008C52F B306 8001 AE03             	dc.b	nD4, $06, nRst, $01, nA3, $03
0008C535 E109                       	smpsAlterNote       $09
0008C537 B603 8001                  	dc.b	nF4, $03, nRst, $01
0008C53B E108                       	smpsAlterNote       $08
0008C53D B506 8001                  	dc.b	nE4, $06, nRst, $01
0008C541 E107                       	smpsAlterNote       $07
0008C543 B302 8001                  	dc.b	nD4, $02, nRst, $01
0008C547 E106                       	smpsAlterNote       $06
0008C549 B103                       	dc.b	nC4, $03
0008C54B E10C                       	smpsAlterNote       $0C
0008C54D AF03 8001                  	dc.b	nBb3, $03, nRst, $01
0008C553 E080                       	smpsPan             panLeft, $00
0008C555 07                         	dc.b	$07
0008C556 E6FE                       	smpsAlterVol        $FE
0008C558 E10B                       	smpsAlterNote       $0B
0008C55A B20D                       	dc.b	nCs4, $0D
0008C55C E105                       	smpsAlterNote       $05
0008C55E E701                       	dc.b	smpsNoAttack, $01
0008C560 E104                       	smpsAlterNote       $04
0008C562 E701                       	dc.b	smpsNoAttack, $01
0008C564 E108                       	smpsAlterNote       $08
0008C566 E701                       	dc.b	smpsNoAttack, $01
0008C568 E10E                       	smpsAlterNote       $0E
0008C56A E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008C56E E10B                       	smpsAlterNote       $0B
0008C570 E701                       	dc.b	smpsNoAttack, $01
0008C572 E105                       	smpsAlterNote       $05
0008C574 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008C578 E10B                       	smpsAlterNote       $0B
0008C57A E701                       	dc.b	smpsNoAttack, $01
0008C57C E10E                       	smpsAlterNote       $0E
0008C57E E701                       	dc.b	smpsNoAttack, $01
0008C580 E10F                       	smpsAlterNote       $0F
0008C582 8001                       	dc.b	nRst, $01
0008C584 E10B                       	smpsAlterNote       $0B
0008C586 B30D                       	dc.b	nD4, $0D
0008C588 E105                       	smpsAlterNote       $05
0008C58A E701                       	dc.b	smpsNoAttack, $01
0008C58C E104                       	smpsAlterNote       $04
0008C58E E701                       	dc.b	smpsNoAttack, $01
0008C590 E108                       	smpsAlterNote       $08
0008C592 E701                       	dc.b	smpsNoAttack, $01
0008C594 E10E                       	smpsAlterNote       $0E
0008C596 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008C59A E10B                       	smpsAlterNote       $0B
0008C59C E701                       	dc.b	smpsNoAttack, $01
0008C59E E105                       	smpsAlterNote       $05
0008C5A0 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008C5A4 E10B                       	smpsAlterNote       $0B
0008C5A6 E701                       	dc.b	smpsNoAttack, $01
0008C5A8 E10E                       	smpsAlterNote       $0E
0008C5AA E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008C5AE E108                       	smpsAlterNote       $08
0008C5B0 E701                       	dc.b	smpsNoAttack, $01
0008C5B2 E104                       	smpsAlterNote       $04
0008C5B4 E701                       	dc.b	smpsNoAttack, $01
0008C5B6 E105                       	smpsAlterNote       $05
0008C5B8 E701                       	dc.b	smpsNoAttack, $01
0008C5BA E10B                       	smpsAlterNote       $0B
0008C5BC E701                       	dc.b	smpsNoAttack, $01
0008C5BE E10F                       	smpsAlterNote       $0F
0008C5C0 E701                       	dc.b	smpsNoAttack, $01
0008C5C2 E10B                       	smpsAlterNote       $0B
0008C5C4 E701 8001                  	dc.b	smpsNoAttack, $01, nRst, $01
0008C5C8 E10C                       	smpsAlterNote       $0C
0008C5CA B50D                       	dc.b	nE4, $0D
0008C5CC E106                       	smpsAlterNote       $06
0008C5CE E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008C5D2 E10C                       	smpsAlterNote       $0C
0008C5D4 E701                       	dc.b	smpsNoAttack, $01
0008C5D6 E10F                       	smpsAlterNote       $0F
0008C5D8 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008C5DC E109                       	smpsAlterNote       $09
0008C5DE E701                       	dc.b	smpsNoAttack, $01
0008C5E0 E105                       	smpsAlterNote       $05
0008C5E2 E701                       	dc.b	smpsNoAttack, $01
0008C5E4 E106                       	smpsAlterNote       $06
0008C5E6 E701                       	dc.b	smpsNoAttack, $01
0008C5E8 E10C                       	smpsAlterNote       $0C
0008C5EA E701                       	dc.b	smpsNoAttack, $01
0008C5EC E110                       	smpsAlterNote       $10
0008C5EE E701                       	dc.b	smpsNoAttack, $01
0008C5F0 E10B                       	smpsAlterNote       $0B
0008C5F2 B30E                       	dc.b	nD4, $0E
0008C5F4 E105                       	smpsAlterNote       $05
0008C5F6 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008C5FA E10B                       	smpsAlterNote       $0B
0008C5FC E701                       	dc.b	smpsNoAttack, $01
0008C5FE E10E                       	smpsAlterNote       $0E
0008C600 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008C604 E108                       	smpsAlterNote       $08
0008C606 E701                       	dc.b	smpsNoAttack, $01
0008C608 E104                       	smpsAlterNote       $04
0008C60A E701                       	dc.b	smpsNoAttack, $01
0008C60C E105                       	smpsAlterNote       $05
0008C60E E701                       	dc.b	smpsNoAttack, $01
0008C610 E10B                       	smpsAlterNote       $0B
0008C612 E701                       	dc.b	smpsNoAttack, $01
0008C614 E10F                       	smpsAlterNote       $0F
0008C616 E701                       	dc.b	smpsNoAttack, $01
0008C618 E10B                       	smpsAlterNote       $0B
0008C61A E701                       	dc.b	smpsNoAttack, $01
0008C61C E108                       	smpsAlterNote       $08
0008C61E E701                       	dc.b	smpsNoAttack, $01
0008C620 E104                       	smpsAlterNote       $04
0008C622 E701                       	dc.b	smpsNoAttack, $01
0008C624 E108                       	smpsAlterNote       $08
0008C626 E701                       	dc.b	smpsNoAttack, $01
0008C628 E10E                       	smpsAlterNote       $0E
0008C62A E701                       	dc.b	smpsNoAttack, $01
0008C62C E10F                       	smpsAlterNote       $0F
0008C62E E701                       	dc.b	smpsNoAttack, $01
0008C630 E10B                       	smpsAlterNote       $0B
0008C632 E701 B20D                  	dc.b	smpsNoAttack, $01, nCs4, $0D
0008C636 E108                       	smpsAlterNote       $08
0008C638 E701                       	dc.b	smpsNoAttack, $01
0008C63A E105                       	smpsAlterNote       $05
0008C63C E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008C640 E10B                       	smpsAlterNote       $0B
0008C642 E701                       	dc.b	smpsNoAttack, $01
0008C644 E10F                       	smpsAlterNote       $0F
0008C646 E701                       	dc.b	smpsNoAttack, $01
0008C648 E10E                       	smpsAlterNote       $0E
0008C64A E701                       	dc.b	smpsNoAttack, $01
0008C64C E108                       	smpsAlterNote       $08
0008C64E E701                       	dc.b	smpsNoAttack, $01
0008C650 E104                       	smpsAlterNote       $04
0008C652 E701                       	dc.b	smpsNoAttack, $01
0008C654 E108                       	smpsAlterNote       $08
0008C656 E701                       	dc.b	smpsNoAttack, $01
0008C658 E10B                       	smpsAlterNote       $0B
0008C65A E701                       	dc.b	smpsNoAttack, $01
0008C65C E10F                       	smpsAlterNote       $0F
0008C65E E701                       	dc.b	smpsNoAttack, $01
0008C660 E10B                       	smpsAlterNote       $0B
0008C662 B30D                       	dc.b	nD4, $0D
0008C664 E108                       	smpsAlterNote       $08
0008C666 E701                       	dc.b	smpsNoAttack, $01
0008C668 E105                       	smpsAlterNote       $05
0008C66A E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008C66E E10B                       	smpsAlterNote       $0B
0008C670 E701                       	dc.b	smpsNoAttack, $01
0008C672 E10F                       	smpsAlterNote       $0F
0008C674 E701                       	dc.b	smpsNoAttack, $01
0008C676 E10E                       	smpsAlterNote       $0E
0008C678 E701                       	dc.b	smpsNoAttack, $01
0008C67A E108                       	smpsAlterNote       $08
0008C67C E701                       	dc.b	smpsNoAttack, $01
0008C67E E104                       	smpsAlterNote       $04
0008C680 E701                       	dc.b	smpsNoAttack, $01
0008C682 E108                       	smpsAlterNote       $08
0008C684 E701                       	dc.b	smpsNoAttack, $01
0008C686 E10B                       	smpsAlterNote       $0B
0008C688 E701                       	dc.b	smpsNoAttack, $01
0008C68A E10F                       	smpsAlterNote       $0F
0008C68C E701                       	dc.b	smpsNoAttack, $01
0008C68E E10B                       	smpsAlterNote       $0B
0008C690 E701                       	dc.b	smpsNoAttack, $01
0008C692 E105                       	smpsAlterNote       $05
0008C694 E701                       	dc.b	smpsNoAttack, $01
0008C696 E104                       	smpsAlterNote       $04
0008C698 E701                       	dc.b	smpsNoAttack, $01
0008C69A E108                       	smpsAlterNote       $08
0008C69C E701                       	dc.b	smpsNoAttack, $01
0008C69E E10E                       	smpsAlterNote       $0E
0008C6A0 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008C6A4 E10B                       	smpsAlterNote       $0B
0008C6A6 8001 B20D                  	dc.b	nRst, $01, nCs4, $0D
0008C6AA E108                       	smpsAlterNote       $08
0008C6AC E701                       	dc.b	smpsNoAttack, $01
0008C6AE E104                       	smpsAlterNote       $04
0008C6B0 E701                       	dc.b	smpsNoAttack, $01
0008C6B2 E108                       	smpsAlterNote       $08
0008C6B4 E701                       	dc.b	smpsNoAttack, $01
0008C6B6 E10B                       	smpsAlterNote       $0B
0008C6B8 E701                       	dc.b	smpsNoAttack, $01
0008C6BC E0C0                       	smpsPan             panCenter, $00
0008C6BE E601                       	smpsAlterVol        $01
0008C6C0 E108                       	smpsAlterNote       $08
0008C6C2 A906 8001 A903 A903 8001+  	dc.b	nE3, $06, nRst, $01, nE3, $03, nE3, $03, nRst, $01, nE3, $06
0008C6CE 8008 A902 8001             	dc.b	nRst, $08, nE3, $02, nRst, $01
0008C6D6 E080                       	smpsPan             panLeft, $00
0008C6D8 07                         	dc.b	$07
0008C6D9 E6FF                       	smpsAlterVol        $FF
0008C6DB E10D                       	smpsAlterNote       $0D
0008C6DD B60D                       	dc.b	nF4, $0D
0008C6DF E10A                       	smpsAlterNote       $0A
0008C6E1 E701                       	dc.b	smpsNoAttack, $01
0008C6E3 E106                       	smpsAlterNote       $06
0008C6E5 E701                       	dc.b	smpsNoAttack, $01
0008C6E7 E10A                       	smpsAlterNote       $0A
0008C6E9 E701                       	dc.b	smpsNoAttack, $01
0008C6EB E110                       	smpsAlterNote       $10
0008C6ED E701                       	dc.b	smpsNoAttack, $01
0008C6EF E111                       	smpsAlterNote       $11
0008C6F1 E701                       	dc.b	smpsNoAttack, $01
0008C6F3 E10D                       	smpsAlterNote       $0D
0008C6F5 E701                       	dc.b	smpsNoAttack, $01
0008C6F7 E107                       	smpsAlterNote       $07
0008C6F9 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008C6FD E10A                       	smpsAlterNote       $0A
0008C6FF E701                       	dc.b	smpsNoAttack, $01
0008C701 E110                       	smpsAlterNote       $10
0008C703 E701                       	dc.b	smpsNoAttack, $01
0008C705 E111                       	smpsAlterNote       $11
0008C707 8001                       	dc.b	nRst, $01
0008C709 E10D                       	smpsAlterNote       $0D
0008C70B B80D                       	dc.b	nG4, $0D
0008C70D E10A                       	smpsAlterNote       $0A
0008C70F E701                       	dc.b	smpsNoAttack, $01
0008C711 E106                       	smpsAlterNote       $06
0008C713 E701                       	dc.b	smpsNoAttack, $01
0008C715 E10A                       	smpsAlterNote       $0A
0008C717 E701                       	dc.b	smpsNoAttack, $01
0008C719 E110                       	smpsAlterNote       $10
0008C71B E701                       	dc.b	smpsNoAttack, $01
0008C71D E111                       	smpsAlterNote       $11
0008C71F E701                       	dc.b	smpsNoAttack, $01
0008C721 E10D                       	smpsAlterNote       $0D
0008C723 E701                       	dc.b	smpsNoAttack, $01
0008C725 E107                       	smpsAlterNote       $07
0008C727 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008C72B E10D                       	smpsAlterNote       $0D
0008C72D E701                       	dc.b	smpsNoAttack, $01
0008C72F E110                       	smpsAlterNote       $10
0008C731 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008C735 E10A                       	smpsAlterNote       $0A
0008C737 E701                       	dc.b	smpsNoAttack, $01
0008C739 E106                       	smpsAlterNote       $06
0008C73B E701                       	dc.b	smpsNoAttack, $01
0008C73D E107                       	smpsAlterNote       $07
0008C73F E701                       	dc.b	smpsNoAttack, $01
0008C741 E10D                       	smpsAlterNote       $0D
0008C743 E701                       	dc.b	smpsNoAttack, $01
0008C745 E111                       	smpsAlterNote       $11
0008C747 E701                       	dc.b	smpsNoAttack, $01
0008C749 E10D                       	smpsAlterNote       $0D
0008C74B E701 8001                  	dc.b	smpsNoAttack, $01, nRst, $01
0008C74F E10F                       	smpsAlterNote       $0F
0008C751 BA0D                       	dc.b	nA4, $0D
0008C753 E109                       	smpsAlterNote       $09
0008C755 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008C759 E10C                       	smpsAlterNote       $0C
0008C75B E701                       	dc.b	smpsNoAttack, $01
0008C75D E112                       	smpsAlterNote       $12
0008C75F E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008C763 E10C                       	smpsAlterNote       $0C
0008C765 E701                       	dc.b	smpsNoAttack, $01
0008C767 E109                       	smpsAlterNote       $09
0008C769 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008C76D E10F                       	smpsAlterNote       $0F
0008C76F E701                       	dc.b	smpsNoAttack, $01
0008C771 E113                       	smpsAlterNote       $13
0008C773 E701                       	dc.b	smpsNoAttack, $01
0008C775 E112                       	smpsAlterNote       $12
0008C777 E701                       	dc.b	smpsNoAttack, $01
0008C779 E10C                       	smpsAlterNote       $0C
0008C77B E701                       	dc.b	smpsNoAttack, $01
0008C77D E108                       	smpsAlterNote       $08
0008C77F E701                       	dc.b	smpsNoAttack, $01
0008C781 E10C                       	smpsAlterNote       $0C
0008C783 E701                       	dc.b	smpsNoAttack, $01
0008C785 E10F                       	smpsAlterNote       $0F
0008C787 E701                       	dc.b	smpsNoAttack, $01
0008C789 E113                       	smpsAlterNote       $13
0008C78B E701                       	dc.b	smpsNoAttack, $01
0008C78D E10F                       	smpsAlterNote       $0F
0008C78F E701                       	dc.b	smpsNoAttack, $01
0008C791 E109                       	smpsAlterNote       $09
0008C793 E701                       	dc.b	smpsNoAttack, $01
0008C795 E108                       	smpsAlterNote       $08
0008C797 E701                       	dc.b	smpsNoAttack, $01
0008C799 E10C                       	smpsAlterNote       $0C
0008C79B E701                       	dc.b	smpsNoAttack, $01
0008C79D E112                       	smpsAlterNote       $12
0008C79F E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008C7A3 E10F                       	smpsAlterNote       $0F
0008C7A5 E701                       	dc.b	smpsNoAttack, $01
0008C7A7 E109                       	smpsAlterNote       $09
0008C7A9 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008C7AD E10F                       	smpsAlterNote       $0F
0008C7AF E701                       	dc.b	smpsNoAttack, $01
0008C7B1 E112                       	smpsAlterNote       $12
0008C7B3 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008C7B7 E10C                       	smpsAlterNote       $0C
0008C7B9 E701                       	dc.b	smpsNoAttack, $01
0008C7BB E108                       	smpsAlterNote       $08
0008C7BD E701                       	dc.b	smpsNoAttack, $01
0008C7BF E109                       	smpsAlterNote       $09
0008C7C1 E701                       	dc.b	smpsNoAttack, $01
0008C7C3 E10C                       	smpsAlterNote       $0C
0008C7C5 B50A                       	dc.b	nE4, $0A
0008C7C7 E10D                       	smpsAlterNote       $0D
0008C7C9 B60E                       	dc.b	nF4, $0E
0008C7CB E107                       	smpsAlterNote       $07
0008C7CD E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008C7D1 E10D                       	smpsAlterNote       $0D
0008C7D3 E701                       	dc.b	smpsNoAttack, $01
0008C7D5 E110                       	smpsAlterNote       $10
0008C7D7 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008C7DB E10A                       	smpsAlterNote       $0A
0008C7DD E701                       	dc.b	smpsNoAttack, $01
0008C7DF E106                       	smpsAlterNote       $06
0008C7E1 E701                       	dc.b	smpsNoAttack, $01
0008C7E3 E107                       	smpsAlterNote       $07
0008C7E5 E701                       	dc.b	smpsNoAttack, $01
0008C7E7 E10D                       	smpsAlterNote       $0D
0008C7E9 E701                       	dc.b	smpsNoAttack, $01
0008C7EB E111                       	smpsAlterNote       $11
0008C7ED E701                       	dc.b	smpsNoAttack, $01
0008C7EF E10D                       	smpsAlterNote       $0D
0008C7F1 B80D                       	dc.b	nG4, $0D
0008C7F3 E10A                       	smpsAlterNote       $0A
0008C7F5 E701                       	dc.b	smpsNoAttack, $01
0008C7F7 E107                       	smpsAlterNote       $07
0008C7F9 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008C7FD E10D                       	smpsAlterNote       $0D
0008C7FF E701                       	dc.b	smpsNoAttack, $01
0008C801 E111                       	smpsAlterNote       $11
0008C803 E701                       	dc.b	smpsNoAttack, $01
0008C805 E110                       	smpsAlterNote       $10
0008C807 E701                       	dc.b	smpsNoAttack, $01
0008C809 E10A                       	smpsAlterNote       $0A
0008C80B E701                       	dc.b	smpsNoAttack, $01
0008C80D E106                       	smpsAlterNote       $06
0008C80F E701                       	dc.b	smpsNoAttack, $01
0008C811 E10A                       	smpsAlterNote       $0A
0008C813 E701                       	dc.b	smpsNoAttack, $01
0008C815 E10D                       	smpsAlterNote       $0D
0008C817 E701                       	dc.b	smpsNoAttack, $01
0008C819 E111                       	smpsAlterNote       $11
0008C81B E701                       	dc.b	smpsNoAttack, $01
0008C81D E10D                       	smpsAlterNote       $0D
0008C81F E701                       	dc.b	smpsNoAttack, $01
0008C821 E107                       	smpsAlterNote       $07
0008C823 E701                       	dc.b	smpsNoAttack, $01
0008C825 E106                       	smpsAlterNote       $06
0008C827 E701                       	dc.b	smpsNoAttack, $01
0008C829 E10A                       	smpsAlterNote       $0A
0008C82B E701                       	dc.b	smpsNoAttack, $01
0008C82D E110                       	smpsAlterNote       $10
0008C82F E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008C833 E10D                       	smpsAlterNote       $0D
0008C835 E701                       	dc.b	smpsNoAttack, $01
0008C837 E10F                       	smpsAlterNote       $0F
0008C839 BA0D                       	dc.b	nA4, $0D
0008C83B E10C                       	smpsAlterNote       $0C
0008C83D E701                       	dc.b	smpsNoAttack, $01
0008C83F E108                       	smpsAlterNote       $08
0008C841 E701                       	dc.b	smpsNoAttack, $01
0008C843 E109                       	smpsAlterNote       $09
0008C845 E701                       	dc.b	smpsNoAttack, $01
0008C847 E10F                       	smpsAlterNote       $0F
0008C849 E701                       	dc.b	smpsNoAttack, $01
0008C84B E113                       	smpsAlterNote       $13
0008C84D E701                       	dc.b	smpsNoAttack, $01
0008C84F E10F                       	smpsAlterNote       $0F
0008C851 E701                       	dc.b	smpsNoAttack, $01
0008C853 E10C                       	smpsAlterNote       $0C
0008C855 E701                       	dc.b	smpsNoAttack, $01
0008C857 E108                       	smpsAlterNote       $08
0008C859 E701                       	dc.b	smpsNoAttack, $01
0008C85B E10C                       	smpsAlterNote       $0C
0008C85D E701                       	dc.b	smpsNoAttack, $01
0008C85F E112                       	smpsAlterNote       $12
0008C861 E701                       	dc.b	smpsNoAttack, $01
0008C863 E113                       	smpsAlterNote       $13
0008C865 E701                       	dc.b	smpsNoAttack, $01
0008C867 E10F                       	smpsAlterNote       $0F
0008C869 E701                       	dc.b	smpsNoAttack, $01
0008C86B E109                       	smpsAlterNote       $09
0008C86D E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008C871 E10C                       	smpsAlterNote       $0C
0008C873 E701                       	dc.b	smpsNoAttack, $01
0008C875 E112                       	smpsAlterNote       $12
0008C877 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008C87B E10C                       	smpsAlterNote       $0C
0008C87D E701                       	dc.b	smpsNoAttack, $01
0008C87F E109                       	smpsAlterNote       $09
0008C881 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008C885 E10F                       	smpsAlterNote       $0F
0008C887 E701                       	dc.b	smpsNoAttack, $01
0008C889 E113                       	smpsAlterNote       $13
0008C88B E701                       	dc.b	smpsNoAttack, $01
0008C88D E112                       	smpsAlterNote       $12
0008C88F E701                       	dc.b	smpsNoAttack, $01
0008C891 E10C                       	smpsAlterNote       $0C
0008C893 E701                       	dc.b	smpsNoAttack, $01
0008C895 E109                       	smpsAlterNote       $09
0008C897 8001                       	dc.b	nRst, $01
0008C899 E10D                       	smpsAlterNote       $0D
0008C89B B60A                       	dc.b	nF4, $0A
0008C89D E10C                       	smpsAlterNote       $0C
0008C89F B506 8001                  	dc.b	nE4, $06, nRst, $01
0008C8A3 E10B                       	smpsAlterNote       $0B
0008C8A5 B30D 8001                  	dc.b	nD4, $0D, nRst, $01
0008C8A9 E10C                       	smpsAlterNote       $0C
0008C8AB B503                       	dc.b	nE4, $03
0008C8AD E10D                       	smpsAlterNote       $0D
0008C8AF B603 8001 B802 8001 BA0D   	dc.b	nF4, $03, nRst, $01, nG4, $02, nRst, $01, nA4, $0D
0008C8B9 E10C                       	smpsAlterNote       $0C
0008C8BB E701                       	dc.b	smpsNoAttack, $01
0008C8BD E108                       	smpsAlterNote       $08
0008C8BF E701                       	dc.b	smpsNoAttack, $01
0008C8C1 E10C                       	smpsAlterNote       $0C
0008C8C3 E701                       	dc.b	smpsNoAttack, $01
0008C8C5 E112                       	smpsAlterNote       $12
0008C8C7 E701                       	dc.b	smpsNoAttack, $01
0008C8C9 E113                       	smpsAlterNote       $13
0008C8CB E701                       	dc.b	smpsNoAttack, $01
0008C8CD E10F                       	smpsAlterNote       $0F
0008C8CF E701                       	dc.b	smpsNoAttack, $01
0008C8D1 E109                       	smpsAlterNote       $09
0008C8D3 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008C8D7 E10C                       	smpsAlterNote       $0C
0008C8D9 E701                       	dc.b	smpsNoAttack, $01
0008C8DB E112                       	smpsAlterNote       $12
0008C8DD E701                       	dc.b	smpsNoAttack, $01
0008C8DF E113                       	smpsAlterNote       $13
0008C8E1 8001                       	dc.b	nRst, $01
0008C8E3 E10D                       	smpsAlterNote       $0D
0008C8E5 C20D                       	dc.b	nF5, $0D
0008C8E7 E10A                       	smpsAlterNote       $0A
0008C8E9 E701                       	dc.b	smpsNoAttack, $01
0008C8EB E106                       	smpsAlterNote       $06
0008C8ED E701                       	dc.b	smpsNoAttack, $01
0008C8EF E10A                       	smpsAlterNote       $0A
0008C8F1 E701                       	dc.b	smpsNoAttack, $01
0008C8F3 E110                       	smpsAlterNote       $10
0008C8F5 E701                       	dc.b	smpsNoAttack, $01
0008C8F7 E111                       	smpsAlterNote       $11
0008C8F9 E701                       	dc.b	smpsNoAttack, $01
0008C8FB E10D                       	smpsAlterNote       $0D
0008C8FD E701                       	dc.b	smpsNoAttack, $01
0008C8FF E107                       	smpsAlterNote       $07
0008C901 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008C905 E10A                       	smpsAlterNote       $0A
0008C907 E701                       	dc.b	smpsNoAttack, $01
0008C909 E110                       	smpsAlterNote       $10
0008C90B E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008C90F E10A                       	smpsAlterNote       $0A
0008C911 E701                       	dc.b	smpsNoAttack, $01
0008C913 E107                       	smpsAlterNote       $07
0008C915 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008C919 E10D                       	smpsAlterNote       $0D
0008C91B E701                       	dc.b	smpsNoAttack, $01
0008C91D E111                       	smpsAlterNote       $11
0008C91F E701                       	dc.b	smpsNoAttack, $01
0008C921 E110                       	smpsAlterNote       $10
0008C923 E701                       	dc.b	smpsNoAttack, $01
0008C925 E10A                       	smpsAlterNote       $0A
0008C927 E701                       	dc.b	smpsNoAttack, $01
0008C929 E106                       	smpsAlterNote       $06
0008C92B E701                       	dc.b	smpsNoAttack, $01
0008C92D E10A                       	smpsAlterNote       $0A
0008C92F E701                       	dc.b	smpsNoAttack, $01
0008C931 E10D                       	smpsAlterNote       $0D
0008C933 E701                       	dc.b	smpsNoAttack, $01
0008C935 E111                       	smpsAlterNote       $11
0008C937 E701                       	dc.b	smpsNoAttack, $01
0008C939 E10D                       	smpsAlterNote       $0D
0008C93B E701                       	dc.b	smpsNoAttack, $01
0008C93D E107                       	smpsAlterNote       $07
0008C93F E701                       	dc.b	smpsNoAttack, $01
0008C941 E106                       	smpsAlterNote       $06
0008C943 E701                       	dc.b	smpsNoAttack, $01
0008C945 E10A                       	smpsAlterNote       $0A
0008C947 E701                       	dc.b	smpsNoAttack, $01
0008C949 E110                       	smpsAlterNote       $10
0008C94B E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008C94F E10D                       	smpsAlterNote       $0D
0008C951 E701                       	dc.b	smpsNoAttack, $01
0008C953 E107                       	smpsAlterNote       $07
0008C955 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008C959 E10D                       	smpsAlterNote       $0D
0008C95B E701                       	dc.b	smpsNoAttack, $01
0008C95D E110                       	smpsAlterNote       $10
0008C95F E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008C963 E10A                       	smpsAlterNote       $0A
0008C965 E701                       	dc.b	smpsNoAttack, $01
0008C967 E106                       	smpsAlterNote       $06
0008C969 E701                       	dc.b	smpsNoAttack, $01
0008C96B E107                       	smpsAlterNote       $07
0008C96D E701                       	dc.b	smpsNoAttack, $01
0008C96F E10D                       	smpsAlterNote       $0D
0008C971 E701                       	dc.b	smpsNoAttack, $01
0008C973 E111                       	smpsAlterNote       $11
0008C975 E701                       	dc.b	smpsNoAttack, $01
0008C977 E10D                       	smpsAlterNote       $0D
0008C979 E701                       	dc.b	smpsNoAttack, $01
0008C97B E10A                       	smpsAlterNote       $0A
0008C97D E701                       	dc.b	smpsNoAttack, $01
0008C97F E107                       	smpsAlterNote       $07
0008C981 8001                       	dc.b	nRst, $01
0008C983 E10D                       	smpsAlterNote       $0D
0008C985 C206 8001                  	dc.b	nF5, $06, nRst, $01
0008C98B E601                       	smpsAlterVol        $01
0008C98D E110                       	smpsAlterNote       $10
0008C98F BB0D                       	dc.b	nBb4, $0D
0008C991 E10A                       	smpsAlterNote       $0A
0008C993 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008C997 E110                       	smpsAlterNote       $10
0008C999 E701                       	dc.b	smpsNoAttack, $01
0008C99B E113                       	smpsAlterNote       $13
0008C99D E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008C9A1 E10D                       	smpsAlterNote       $0D
0008C9A3 E701                       	dc.b	smpsNoAttack, $01
0008C9A5 E109                       	smpsAlterNote       $09
0008C9A7 E701                       	dc.b	smpsNoAttack, $01
0008C9A9 E10A                       	smpsAlterNote       $0A
0008C9AB E701                       	dc.b	smpsNoAttack, $01
0008C9AD E110                       	smpsAlterNote       $10
0008C9AF E701                       	dc.b	smpsNoAttack, $01
0008C9B1 E114                       	smpsAlterNote       $14
0008C9B3 E701                       	dc.b	smpsNoAttack, $01
0008C9B5 E110                       	smpsAlterNote       $10
0008C9B7 E701                       	dc.b	smpsNoAttack, $01
0008C9B9 E10D                       	smpsAlterNote       $0D
0008C9BB E701                       	dc.b	smpsNoAttack, $01
0008C9BD E109                       	smpsAlterNote       $09
0008C9BF E701                       	dc.b	smpsNoAttack, $01
0008C9C1 E10A                       	smpsAlterNote       $0A
0008C9C3 8001 BD0D                  	dc.b	nRst, $01, nC5, $0D
0008C9C7 E107                       	smpsAlterNote       $07
0008C9C9 E701                       	dc.b	smpsNoAttack, $01
0008C9CB E103                       	smpsAlterNote       $03
0008C9CD E701                       	dc.b	smpsNoAttack, $01
0008C9CF E107                       	smpsAlterNote       $07
0008C9D1 E701                       	dc.b	smpsNoAttack, $01
0008C9D3 E10D                       	smpsAlterNote       $0D
0008C9D5 E701                       	dc.b	smpsNoAttack, $01
0008C9D7 E10E                       	smpsAlterNote       $0E
0008C9D9 E701                       	dc.b	smpsNoAttack, $01
0008C9DB E10A                       	smpsAlterNote       $0A
0008C9DD E701                       	dc.b	smpsNoAttack, $01
0008C9DF E104                       	smpsAlterNote       $04
0008C9E1 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008C9E5 E107                       	smpsAlterNote       $07
0008C9E7 E701                       	dc.b	smpsNoAttack, $01
0008C9E9 E10D                       	smpsAlterNote       $0D
0008C9EB E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008C9EF E107                       	smpsAlterNote       $07
0008C9F1 E701                       	dc.b	smpsNoAttack, $01
0008C9F3 E104                       	smpsAlterNote       $04
0008C9F5 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008C9F9 E10B                       	smpsAlterNote       $0B
0008C9FB BF0D                       	dc.b	nD5, $0D
0008C9FD E108                       	smpsAlterNote       $08
0008C9FF E701                       	dc.b	smpsNoAttack, $01
0008CA01 E105                       	smpsAlterNote       $05
0008CA03 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008CA07 E10B                       	smpsAlterNote       $0B
0008CA09 E701                       	dc.b	smpsNoAttack, $01
0008CA0B E10F                       	smpsAlterNote       $0F
0008CA0D E701                       	dc.b	smpsNoAttack, $01
0008CA0F E10E                       	smpsAlterNote       $0E
0008CA11 E701                       	dc.b	smpsNoAttack, $01
0008CA13 E108                       	smpsAlterNote       $08
0008CA15 E701                       	dc.b	smpsNoAttack, $01
0008CA17 E104                       	smpsAlterNote       $04
0008CA19 E701                       	dc.b	smpsNoAttack, $01
0008CA1B E108                       	smpsAlterNote       $08
0008CA1D E701                       	dc.b	smpsNoAttack, $01
0008CA1F E10B                       	smpsAlterNote       $0B
0008CA21 E701                       	dc.b	smpsNoAttack, $01
0008CA23 E10F                       	smpsAlterNote       $0F
0008CA25 E701                       	dc.b	smpsNoAttack, $01
0008CA27 E10B                       	smpsAlterNote       $0B
0008CA29 E701                       	dc.b	smpsNoAttack, $01
0008CA2B E105                       	smpsAlterNote       $05
0008CA2D E701                       	dc.b	smpsNoAttack, $01
0008CA2F E104                       	smpsAlterNote       $04
0008CA31 E701                       	dc.b	smpsNoAttack, $01
0008CA33 E105                       	smpsAlterNote       $05
0008CA35 8001                       	dc.b	nRst, $01
0008CA37 E10C                       	smpsAlterNote       $0C
0008CA39 C10C                       	dc.b	nE5, $0C
0008CA3B E10D                       	smpsAlterNote       $0D
0008CA3D C201                       	dc.b	nF5, $01
0008CA3F E10E                       	smpsAlterNote       $0E
0008CA41 C301 8001                  	dc.b	nFs5, $01, nRst, $01
0008CA45 E10D                       	smpsAlterNote       $0D
0008CA47 C40C C20D                  	dc.b	nG5, $0C, nF5, $0D
0008CA4B E10A                       	smpsAlterNote       $0A
0008CA4D E701                       	dc.b	smpsNoAttack, $01
0008CA4F E106                       	smpsAlterNote       $06
0008CA51 E701                       	dc.b	smpsNoAttack, $01
0008CA53 E10A                       	smpsAlterNote       $0A
0008CA55 E701                       	dc.b	smpsNoAttack, $01
0008CA57 E10D                       	smpsAlterNote       $0D
0008CA59 E701                       	dc.b	smpsNoAttack, $01
0008CA5B E111                       	smpsAlterNote       $11
0008CA5D E701                       	dc.b	smpsNoAttack, $01
0008CA5F E10D                       	smpsAlterNote       $0D
0008CA61 E701                       	dc.b	smpsNoAttack, $01
0008CA63 E107                       	smpsAlterNote       $07
0008CA65 E701                       	dc.b	smpsNoAttack, $01
0008CA67 E106                       	smpsAlterNote       $06
0008CA69 E701                       	dc.b	smpsNoAttack, $01
0008CA6B E10A                       	smpsAlterNote       $0A
0008CA6D E701                       	dc.b	smpsNoAttack, $01
0008CA6F E110                       	smpsAlterNote       $10
0008CA71 E701                       	dc.b	smpsNoAttack, $01
0008CA73 E111                       	smpsAlterNote       $11
0008CA75 8001                       	dc.b	nRst, $01
0008CA77 E10D                       	smpsAlterNote       $0D
0008CA79 C40D                       	dc.b	nG5, $0D
0008CA7B E10A                       	smpsAlterNote       $0A
0008CA7D E701                       	dc.b	smpsNoAttack, $01
0008CA7F E106                       	smpsAlterNote       $06
0008CA81 E701                       	dc.b	smpsNoAttack, $01
0008CA83 E10A                       	smpsAlterNote       $0A
0008CA85 E701                       	dc.b	smpsNoAttack, $01
0008CA87 E10D                       	smpsAlterNote       $0D
0008CA89 E701                       	dc.b	smpsNoAttack, $01
0008CA8B E10C                       	smpsAlterNote       $0C
0008CA8D C006 8001 C002 C002 8001+  	dc.b	nEb5, $06, nRst, $01, nEb5, $02, nEb5, $02, nRst, $01, nEb5, $01
0008CA99 8001                       	dc.b	nRst, $01
0008CA9B E10D                       	smpsAlterNote       $0D
0008CA9D C20D                       	dc.b	nF5, $0D
0008CA9F E10A                       	smpsAlterNote       $0A
0008CAA1 E701                       	dc.b	smpsNoAttack, $01
0008CAA3 E106                       	smpsAlterNote       $06
0008CAA5 E701                       	dc.b	smpsNoAttack, $01
0008CAA7 E10A                       	smpsAlterNote       $0A
0008CAA9 E701                       	dc.b	smpsNoAttack, $01
0008CAAB E110                       	smpsAlterNote       $10
0008CAAD E701                       	dc.b	smpsNoAttack, $01
0008CAAF E111                       	smpsAlterNote       $11
0008CAB1 E701                       	dc.b	smpsNoAttack, $01
0008CAB3 E10D                       	smpsAlterNote       $0D
0008CAB5 E701                       	dc.b	smpsNoAttack, $01
0008CAB7 E107                       	smpsAlterNote       $07
0008CAB9 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008CABD E10A                       	smpsAlterNote       $0A
0008CABF E701                       	dc.b	smpsNoAttack, $01
0008CAC1 E110                       	smpsAlterNote       $10
0008CAC3 E701                       	dc.b	smpsNoAttack, $01
0008CAC5 E111                       	smpsAlterNote       $11
0008CAC7 8001                       	dc.b	nRst, $01
0008CAC9 E10F                       	smpsAlterNote       $0F
0008CACB C60A                       	dc.b	nA5, $0A
0008CACD E10D                       	smpsAlterNote       $0D
0008CACF C406 8001                  	dc.b	nG5, $06, nRst, $01
0008CAD3 E10C                       	smpsAlterNote       $0C
0008CAD5 C006 8001 C001 8001 C002+  	dc.b	nEb5, $06, nRst, $01, nEb5, $01, nRst, $01, nEb5, $02, nEb5, $02
0008CAE1 8001                       	dc.b	nRst, $01
0008CAE3 E10D                       	smpsAlterNote       $0D
0008CAE5 C20D                       	dc.b	nF5, $0D
0008CAE7 E107                       	smpsAlterNote       $07
0008CAE9 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008CAED E10A                       	smpsAlterNote       $0A
0008CAEF E701                       	dc.b	smpsNoAttack, $01
0008CAF1 E110                       	smpsAlterNote       $10
0008CAF3 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008CAF7 E10A                       	smpsAlterNote       $0A
0008CAF9 E701                       	dc.b	smpsNoAttack, $01
0008CAFB E107                       	smpsAlterNote       $07
0008CAFD E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008CB01 E10D                       	smpsAlterNote       $0D
0008CB03 E701                       	dc.b	smpsNoAttack, $01
0008CB05 E111                       	smpsAlterNote       $11
0008CB07 E701 8001                  	dc.b	smpsNoAttack, $01, nRst, $01
0008CB0B E10D                       	smpsAlterNote       $0D
0008CB0D C40D                       	dc.b	nG5, $0D
0008CB0F E107                       	smpsAlterNote       $07
0008CB11 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008CB15 E10A                       	smpsAlterNote       $0A
0008CB17 E701                       	dc.b	smpsNoAttack, $01
0008CB19 E10D                       	smpsAlterNote       $0D
0008CB1B 8001                       	dc.b	nRst, $01
0008CB1D E10C                       	smpsAlterNote       $0C
0008CB1F C006 8001 C001 8001 C002+  	dc.b	nEb5, $06, nRst, $01, nEb5, $01, nRst, $01, nEb5, $02, nEb5, $02
0008CB2B E10D                       	smpsAlterNote       $0D
0008CB2D C20E                       	dc.b	nF5, $0E
0008CB2F E107                       	smpsAlterNote       $07
0008CB31 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008CB35 E10D                       	smpsAlterNote       $0D
0008CB37 E701 8001                  	dc.b	smpsNoAttack, $01, nRst, $01
0008CB3D E0C0                       	smpsPan             panCenter, $00
0008CB3F E603                       	smpsAlterVol        $03
0008CB41 E108                       	smpsAlterNote       $08
0008CB43 B406                       	dc.b	nEb4, $06
0008CB45 E10C                       	smpsAlterNote       $0C
0008CB47 AF03 8001                  	dc.b	nBb3, $03, nRst, $01
0008CB4B E108                       	smpsAlterNote       $08
0008CB4D B403                       	dc.b	nEb4, $03
0008CB4F E109                       	smpsAlterNote       $09
0008CB51 B803 8001                  	dc.b	nG4, $03, nRst, $01
0008CB55 E10C                       	smpsAlterNote       $0C
0008CB57 BB03 BB03 8008             	dc.b	nBb4, $03, nBb4, $03, nRst, $08
0008CB5F 03                         	dc.b	$03
0008CB60 E6FD                       	smpsAlterVol        $FD
0008CB62 F6F1 F4                    	smpsJump            music84_Jump00
0008CB65                            
0008CB65                            ; PSG1 Data
0008CB65                            music84_PSG1:
0008CB65 E1FD                       	smpsAlterNote       $FD
0008CB67 EC04                       	smpsPSGAlterVol     $04
0008CB69 9203                       	dc.b	nF1, $03
0008CB6B E1FE                       	smpsAlterNote       $FE
0008CB6D 9603                       	dc.b	nA1, $03
0008CB6F EC04                       	smpsPSGAlterVol     $04
0008CB71 E701                       	dc.b	smpsNoAttack, $01
0008CB73 E1FF                       	smpsAlterNote       $FF
0008CB75 ECFC                       	smpsPSGAlterVol     $FC
0008CB77 9B03                       	dc.b	nD2, $03
0008CB79 E1FD                       	smpsAlterNote       $FD
0008CB7B 9403                       	dc.b	nG1, $03
0008CB7D EC04                       	smpsPSGAlterVol     $04
0008CB7F E701                       	dc.b	smpsNoAttack, $01
0008CB81 E1FE                       	smpsAlterNote       $FE
0008CB83 ECFC                       	smpsPSGAlterVol     $FC
0008CB85 9703                       	dc.b	nBb1, $03
0008CB87 E1FF                       	smpsAlterNote       $FF
0008CB89 9B03                       	dc.b	nD2, $03
0008CB8B EC04                       	smpsPSGAlterVol     $04
0008CB8D E701                       	dc.b	smpsNoAttack, $01
0008CB8F E1FE                       	smpsAlterNote       $FE
0008CB91 ECFC                       	smpsPSGAlterVol     $FC
0008CB93 A002                       	dc.b	nG2, $02
0008CB95 EC04                       	smpsPSGAlterVol     $04
0008CB97 E701                       	dc.b	smpsNoAttack, $01
0008CB99 E1FF                       	smpsAlterNote       $FF
0008CB9B ECFC                       	smpsPSGAlterVol     $FC
0008CB9D A203                       	dc.b	nA2, $03
0008CB9F EC0B                       	smpsPSGAlterVol     $0B
0008CBA1 800A                       	dc.b	nRst, $0A
0008CBA3 E105                       	smpsAlterNote       $05
0008CBA5 01                         	dc.b	$01
0008CBA6 E1FC                       	smpsAlterNote       $FC
0008CBA8 01                         	dc.b	$01
0008CBA9 E105                       	smpsAlterNote       $05
0008CBAB 01                         	dc.b	$01
0008CBAC E1FD                       	smpsAlterNote       $FD
0008CBAE 01                         	dc.b	$01
0008CBAF E105                       	smpsAlterNote       $05
0008CBB1 01                         	dc.b	$01
0008CBB2 E1FD                       	smpsAlterNote       $FD
0008CBB4 01                         	dc.b	$01
0008CBB5 E1FA                       	smpsAlterNote       $FA
0008CBB7 01                         	dc.b	$01
0008CBB8 E1FC                       	smpsAlterNote       $FC
0008CBBA 01                         	dc.b	$01
0008CBBB E105                       	smpsAlterNote       $05
0008CBBD 01                         	dc.b	$01
0008CBBE E108                       	smpsAlterNote       $08
0008CBC0 0101                       	dc.b	$01, $01
0008CBC2 E105                       	smpsAlterNote       $05
0008CBC4 01                         	dc.b	$01
0008CBC5 E1FA                       	smpsAlterNote       $FA
0008CBC7 0101                       	dc.b	$01, $01
0008CBC9 E1FD                       	smpsAlterNote       $FD
0008CBCB 01                         	dc.b	$01
0008CBCC E105                       	smpsAlterNote       $05
0008CBCE 01                         	dc.b	$01
0008CBCF E108                       	smpsAlterNote       $08
0008CBD1 01                         	dc.b	$01
0008CBD2 E105                       	smpsAlterNote       $05
0008CBD4 01                         	dc.b	$01
0008CBD5 E1FC                       	smpsAlterNote       $FC
0008CBD7 01                         	dc.b	$01
0008CBD8 E105                       	smpsAlterNote       $05
0008CBDA 01                         	dc.b	$01
0008CBDB E1FD                       	smpsAlterNote       $FD
0008CBDD 01                         	dc.b	$01
0008CBDE                            
0008CBDE                            music84_Jump07:
0008CBDE E105                       	smpsAlterNote       $05
0008CBE0 8001                       	dc.b	nRst, $01
0008CBE2 E1FD                       	smpsAlterNote       $FD
0008CBE4 01                         	dc.b	$01
0008CBE5 E1FA                       	smpsAlterNote       $FA
0008CBE7 01                         	dc.b	$01
0008CBE8 E1FC                       	smpsAlterNote       $FC
0008CBEA 01                         	dc.b	$01
0008CBEB E1FD                       	smpsAlterNote       $FD
0008CBED ECF5                       	smpsPSGAlterVol     $F5
0008CBEF 9206                       	dc.b	nF1, $06
0008CBF1 EC04                       	smpsPSGAlterVol     $04
0008CBF3 E701                       	dc.b	smpsNoAttack, $01
0008CBF5 EC07                       	smpsPSGAlterVol     $07
0008CBF7 8003                       	dc.b	nRst, $03
0008CBF9 ECF5                       	smpsPSGAlterVol     $F5
0008CBFB 9206                       	dc.b	nF1, $06
0008CBFD EC04                       	smpsPSGAlterVol     $04
0008CBFF E701                       	dc.b	smpsNoAttack, $01
0008CC01 EC07                       	smpsPSGAlterVol     $07
0008CC03 8006                       	dc.b	nRst, $06
0008CC05 E100                       	smpsAlterNote       $00
0008CC07 01                         	dc.b	$01
0008CC08 E104                       	smpsAlterNote       $04
0008CC0A 01                         	dc.b	$01
0008CC0B E100                       	smpsAlterNote       $00
0008CC0D 01                         	dc.b	$01
0008CC0E E1FB                       	smpsAlterNote       $FB
0008CC10 01                         	dc.b	$01
0008CC11 E1FD                       	smpsAlterNote       $FD
0008CC13 ECF5                       	smpsPSGAlterVol     $F5
0008CC15 9406                       	dc.b	nG1, $06
0008CC17 EC04                       	smpsPSGAlterVol     $04
0008CC19 E701                       	dc.b	smpsNoAttack, $01
0008CC1B EC07                       	smpsPSGAlterVol     $07
0008CC1D 8003                       	dc.b	nRst, $03
0008CC1F ECF5                       	smpsPSGAlterVol     $F5
0008CC21 9407                       	dc.b	nG1, $07
0008CC23 EC0B                       	smpsPSGAlterVol     $0B
0008CC25 8006                       	dc.b	nRst, $06
0008CC27 E100                       	smpsAlterNote       $00
0008CC29 01                         	dc.b	$01
0008CC2A E103                       	smpsAlterNote       $03
0008CC2C 0101                       	dc.b	$01, $01
0008CC2E E1FD                       	smpsAlterNote       $FD
0008CC30 01                         	dc.b	$01
0008CC31 ECF5                       	smpsPSGAlterVol     $F5
0008CC33 9207                       	dc.b	nF1, $07
0008CC35 EC0B                       	smpsPSGAlterVol     $0B
0008CC37 8004                       	dc.b	nRst, $04
0008CC39 ECF5                       	smpsPSGAlterVol     $F5
0008CC3B 9206                       	dc.b	nF1, $06
0008CC3D EC04                       	smpsPSGAlterVol     $04
0008CC3F E701                       	dc.b	smpsNoAttack, $01
0008CC41 EC07                       	smpsPSGAlterVol     $07
0008CC43 8006                       	dc.b	nRst, $06
0008CC45 E103                       	smpsAlterNote       $03
0008CC47 01                         	dc.b	$01
0008CC48 E104                       	smpsAlterNote       $04
0008CC4A 01                         	dc.b	$01
0008CC4B E100                       	smpsAlterNote       $00
0008CC4D 01                         	dc.b	$01
0008CC4E E1FA                       	smpsAlterNote       $FA
0008CC50 01                         	dc.b	$01
0008CC51 E1FD                       	smpsAlterNote       $FD
0008CC53 ECF5                       	smpsPSGAlterVol     $F5
0008CC55 9206                       	dc.b	nF1, $06
0008CC57 EC04                       	smpsPSGAlterVol     $04
0008CC59 E701                       	dc.b	smpsNoAttack, $01
0008CC5B EC07                       	smpsPSGAlterVol     $07
0008CC5D 8003                       	dc.b	nRst, $03
0008CC5F ECF5                       	smpsPSGAlterVol     $F5
0008CC61 9106                       	dc.b	nE1, $06
0008CC63 EC04                       	smpsPSGAlterVol     $04
0008CC65 E701                       	dc.b	smpsNoAttack, $01
0008CC67 EC07                       	smpsPSGAlterVol     $07
0008CC69 8006                       	dc.b	nRst, $06
0008CC6B E100                       	smpsAlterNote       $00
0008CC6D 01                         	dc.b	$01
0008CC6E E104                       	smpsAlterNote       $04
0008CC70 01                         	dc.b	$01
0008CC71 E100                       	smpsAlterNote       $00
0008CC73 01                         	dc.b	$01
0008CC74 E1FD                       	smpsAlterNote       $FD
0008CC76 01                         	dc.b	$01
0008CC77 ECF5                       	smpsPSGAlterVol     $F5
0008CC79 9206                       	dc.b	nF1, $06
0008CC7B EC04                       	smpsPSGAlterVol     $04
0008CC7D E701                       	dc.b	smpsNoAttack, $01
0008CC7F EC07                       	smpsPSGAlterVol     $07
0008CC81 8003                       	dc.b	nRst, $03
0008CC83 ECF5                       	smpsPSGAlterVol     $F5
0008CC85 9207                       	dc.b	nF1, $07
0008CC87 EC0B                       	smpsPSGAlterVol     $0B
0008CC89 8007                       	dc.b	nRst, $07
0008CC8B E103                       	smpsAlterNote       $03
0008CC8D 0101                       	dc.b	$01, $01
0008CC8F E1FD                       	smpsAlterNote       $FD
0008CC91 01                         	dc.b	$01
0008CC92 E1FB                       	smpsAlterNote       $FB
0008CC94 01                         	dc.b	$01
0008CC95 E1FD                       	smpsAlterNote       $FD
0008CC97 ECF5                       	smpsPSGAlterVol     $F5
0008CC99 9406                       	dc.b	nG1, $06
0008CC9B EC0B                       	smpsPSGAlterVol     $0B
0008CC9D 8004                       	dc.b	nRst, $04
0008CC9F ECF5                       	smpsPSGAlterVol     $F5
0008CCA1 9406                       	dc.b	nG1, $06
0008CCA3 EC04                       	smpsPSGAlterVol     $04
0008CCA5 E701                       	dc.b	smpsNoAttack, $01
0008CCA7 EC07                       	smpsPSGAlterVol     $07
0008CCA9 8006                       	dc.b	nRst, $06
0008CCAB E100                       	smpsAlterNote       $00
0008CCAD 01                         	dc.b	$01
0008CCAE E104                       	smpsAlterNote       $04
0008CCB0 01                         	dc.b	$01
0008CCB1 E100                       	smpsAlterNote       $00
0008CCB3 01                         	dc.b	$01
0008CCB4 E1F9                       	smpsAlterNote       $F9
0008CCB6 01                         	dc.b	$01
0008CCB7 E1FD                       	smpsAlterNote       $FD
0008CCB9 ECF5                       	smpsPSGAlterVol     $F5
0008CCBB 9206                       	dc.b	nF1, $06
0008CCBD EC04                       	smpsPSGAlterVol     $04
0008CCBF E701                       	dc.b	smpsNoAttack, $01
0008CCC1 EC07                       	smpsPSGAlterVol     $07
0008CCC3 8003                       	dc.b	nRst, $03
0008CCC5 ECF5                       	smpsPSGAlterVol     $F5
0008CCC7 9207                       	dc.b	nF1, $07
0008CCC9 EC0B                       	smpsPSGAlterVol     $0B
0008CCCB 8006                       	dc.b	nRst, $06
0008CCCD E100                       	smpsAlterNote       $00
0008CCCF 01                         	dc.b	$01
0008CCD0 E104                       	smpsAlterNote       $04
0008CCD2 01                         	dc.b	$01
0008CCD3 E103                       	smpsAlterNote       $03
0008CCD5 01                         	dc.b	$01
0008CCD6 E1FD                       	smpsAlterNote       $FD
0008CCD8 01                         	dc.b	$01
0008CCD9 ECF5                       	smpsPSGAlterVol     $F5
0008CCDB 9207                       	dc.b	nF1, $07
0008CCDD EC0B                       	smpsPSGAlterVol     $0B
0008CCDF 8004                       	dc.b	nRst, $04
0008CCE1 ECF5                       	smpsPSGAlterVol     $F5
0008CCE3 9206                       	dc.b	nF1, $06
0008CCE5 EC0B                       	smpsPSGAlterVol     $0B
0008CCE7 8007                       	dc.b	nRst, $07
0008CCE9 E103                       	smpsAlterNote       $03
0008CCEB 0101                       	dc.b	$01, $01
0008CCED E100                       	smpsAlterNote       $00
0008CCEF 01                         	dc.b	$01
0008CCF0 E1FA                       	smpsAlterNote       $FA
0008CCF2 01                         	dc.b	$01
0008CCF3 E1FD                       	smpsAlterNote       $FD
0008CCF5 ECF5                       	smpsPSGAlterVol     $F5
0008CCF7 9206                       	dc.b	nF1, $06
0008CCF9 EC04                       	smpsPSGAlterVol     $04
0008CCFB E701                       	dc.b	smpsNoAttack, $01
0008CCFD EC07                       	smpsPSGAlterVol     $07
0008CCFF 8003                       	dc.b	nRst, $03
0008CD01 ECF5                       	smpsPSGAlterVol     $F5
0008CD03 9206                       	dc.b	nF1, $06
0008CD05 EC04                       	smpsPSGAlterVol     $04
0008CD07 E701                       	dc.b	smpsNoAttack, $01
0008CD09 EC07                       	smpsPSGAlterVol     $07
0008CD0B 8006                       	dc.b	nRst, $06
0008CD0D E100                       	smpsAlterNote       $00
0008CD0F 01                         	dc.b	$01
0008CD10 E104                       	smpsAlterNote       $04
0008CD12 01                         	dc.b	$01
0008CD13 E100                       	smpsAlterNote       $00
0008CD15 01                         	dc.b	$01
0008CD16 E1FD                       	smpsAlterNote       $FD
0008CD18 01                         	dc.b	$01
0008CD19 ECF5                       	smpsPSGAlterVol     $F5
0008CD1B 9206                       	dc.b	nF1, $06
0008CD1D EC04                       	smpsPSGAlterVol     $04
0008CD1F E701                       	dc.b	smpsNoAttack, $01
0008CD21 EC07                       	smpsPSGAlterVol     $07
0008CD23 8003                       	dc.b	nRst, $03
0008CD25 ECF5                       	smpsPSGAlterVol     $F5
0008CD27 9207                       	dc.b	nF1, $07
0008CD29 EC0B                       	smpsPSGAlterVol     $0B
0008CD2B 8007                       	dc.b	nRst, $07
0008CD2D E103                       	smpsAlterNote       $03
0008CD2F 0101                       	dc.b	$01, $01
0008CD31 E1FD                       	smpsAlterNote       $FD
0008CD33 01                         	dc.b	$01
0008CD34 E1FA                       	smpsAlterNote       $FA
0008CD36 01                         	dc.b	$01
0008CD37 E1FD                       	smpsAlterNote       $FD
0008CD39 ECF5                       	smpsPSGAlterVol     $F5
0008CD3B 9206                       	dc.b	nF1, $06
0008CD3D EC0B                       	smpsPSGAlterVol     $0B
0008CD3F 8004                       	dc.b	nRst, $04
0008CD41 ECF5                       	smpsPSGAlterVol     $F5
0008CD43 9206                       	dc.b	nF1, $06
0008CD45 EC04                       	smpsPSGAlterVol     $04
0008CD47 E701                       	dc.b	smpsNoAttack, $01
0008CD49 EC07                       	smpsPSGAlterVol     $07
0008CD4B 8006                       	dc.b	nRst, $06
0008CD4D E103                       	smpsAlterNote       $03
0008CD4F 01                         	dc.b	$01
0008CD50 E104                       	smpsAlterNote       $04
0008CD52 01                         	dc.b	$01
0008CD53 E100                       	smpsAlterNote       $00
0008CD55 01                         	dc.b	$01
0008CD56 E1FA                       	smpsAlterNote       $FA
0008CD58 01                         	dc.b	$01
0008CD59 E1FD                       	smpsAlterNote       $FD
0008CD5B ECF5                       	smpsPSGAlterVol     $F5
0008CD5D 9206                       	dc.b	nF1, $06
0008CD5F EC04                       	smpsPSGAlterVol     $04
0008CD61 E701                       	dc.b	smpsNoAttack, $01
0008CD63 EC07                       	smpsPSGAlterVol     $07
0008CD65 8003                       	dc.b	nRst, $03
0008CD67 ECF5                       	smpsPSGAlterVol     $F5
0008CD69 9206                       	dc.b	nF1, $06
0008CD6B EC04                       	smpsPSGAlterVol     $04
0008CD6D E701                       	dc.b	smpsNoAttack, $01
0008CD6F EC07                       	smpsPSGAlterVol     $07
0008CD71 8006                       	dc.b	nRst, $06
0008CD73 E100                       	smpsAlterNote       $00
0008CD75 01                         	dc.b	$01
0008CD76 E104                       	smpsAlterNote       $04
0008CD78 01                         	dc.b	$01
0008CD79 E103                       	smpsAlterNote       $03
0008CD7B 01                         	dc.b	$01
0008CD7C E1FD                       	smpsAlterNote       $FD
0008CD7E 01                         	dc.b	$01
0008CD7F ECF5                       	smpsPSGAlterVol     $F5
0008CD81 9107                       	dc.b	nE1, $07
0008CD83 EC0B                       	smpsPSGAlterVol     $0B
0008CD85 8004                       	dc.b	nRst, $04
0008CD87 ECF5                       	smpsPSGAlterVol     $F5
0008CD89 9106                       	dc.b	nE1, $06
0008CD8B EC0B                       	smpsPSGAlterVol     $0B
0008CD8D 8007                       	dc.b	nRst, $07
0008CD8F E103                       	smpsAlterNote       $03
0008CD91 0101                       	dc.b	$01, $01
0008CD93 E100                       	smpsAlterNote       $00
0008CD95 01                         	dc.b	$01
0008CD96 E1FA                       	smpsAlterNote       $FA
0008CD98 01                         	dc.b	$01
0008CD99 E1FD                       	smpsAlterNote       $FD
0008CD9B ECF5                       	smpsPSGAlterVol     $F5
0008CD9D 9106                       	dc.b	nE1, $06
0008CD9F EC04                       	smpsPSGAlterVol     $04
0008CDA1 E701                       	dc.b	smpsNoAttack, $01
0008CDA3 EC07                       	smpsPSGAlterVol     $07
0008CDA5 8003                       	dc.b	nRst, $03
0008CDA7 ECF5                       	smpsPSGAlterVol     $F5
0008CDA9 9106                       	dc.b	nE1, $06
0008CDAB EC04                       	smpsPSGAlterVol     $04
0008CDAD E701                       	dc.b	smpsNoAttack, $01
0008CDAF EC07                       	smpsPSGAlterVol     $07
0008CDB1 8006                       	dc.b	nRst, $06
0008CDB3 E100                       	smpsAlterNote       $00
0008CDB5 01                         	dc.b	$01
0008CDB6 E104                       	smpsAlterNote       $04
0008CDB8 01                         	dc.b	$01
0008CDB9 E100                       	smpsAlterNote       $00
0008CDBB 01                         	dc.b	$01
0008CDBC E1FA                       	smpsAlterNote       $FA
0008CDBE 01                         	dc.b	$01
0008CDBF E1FD                       	smpsAlterNote       $FD
0008CDC1 ECF5                       	smpsPSGAlterVol     $F5
0008CDC3 9106                       	dc.b	nE1, $06
0008CDC5 EC04                       	smpsPSGAlterVol     $04
0008CDC7 E701                       	dc.b	smpsNoAttack, $01
0008CDC9 EC07                       	smpsPSGAlterVol     $07
0008CDCB 8003                       	dc.b	nRst, $03
0008CDCD ECF5                       	smpsPSGAlterVol     $F5
0008CDCF 9107 9106                  	dc.b	nE1, $07, nE1, $06
0008CDD3 EC04                       	smpsPSGAlterVol     $04
0008CDD5 E701                       	dc.b	smpsNoAttack, $01
0008CDD7 ECFC                       	smpsPSGAlterVol     $FC
0008CDD9 9103 9103                  	dc.b	nE1, $03, nE1, $03
0008CDDD EC04                       	smpsPSGAlterVol     $04
0008CDDF E701                       	dc.b	smpsNoAttack, $01
0008CDE1 ECFC                       	smpsPSGAlterVol     $FC
0008CDE3 9106                       	dc.b	nE1, $06
0008CDE5 EC04                       	smpsPSGAlterVol     $04
0008CDE7 E701                       	dc.b	smpsNoAttack, $01
0008CDE9 EC07                       	smpsPSGAlterVol     $07
0008CDEB 8006                       	dc.b	nRst, $06
0008CDED E100                       	smpsAlterNote       $00
0008CDEF 01                         	dc.b	$01
0008CDF0 E104                       	smpsAlterNote       $04
0008CDF2 01                         	dc.b	$01
0008CDF3 E100                       	smpsAlterNote       $00
0008CDF5 01                         	dc.b	$01
0008CDF6 E1FA                       	smpsAlterNote       $FA
0008CDF8 01                         	dc.b	$01
0008CDF9 E1F9                       	smpsAlterNote       $F9
0008CDFB 01                         	dc.b	$01
0008CDFC E1FD                       	smpsAlterNote       $FD
0008CDFE 01                         	dc.b	$01
0008CDFF E103                       	smpsAlterNote       $03
0008CE01 01                         	dc.b	$01
0008CE02 E104                       	smpsAlterNote       $04
0008CE04 01                         	dc.b	$01
0008CE05 E100                       	smpsAlterNote       $00
0008CE07 01                         	dc.b	$01
0008CE08 E1FA                       	smpsAlterNote       $FA
0008CE0A 0101                       	dc.b	$01, $01
0008CE0C E1FD                       	smpsAlterNote       $FD
0008CE0E ECF5                       	smpsPSGAlterVol     $F5
0008CE10 9206                       	dc.b	nF1, $06
0008CE12 EC04                       	smpsPSGAlterVol     $04
0008CE14 E701                       	dc.b	smpsNoAttack, $01
0008CE16 EC07                       	smpsPSGAlterVol     $07
0008CE18 8003                       	dc.b	nRst, $03
0008CE1A ECF5                       	smpsPSGAlterVol     $F5
0008CE1C 9206                       	dc.b	nF1, $06
0008CE1E EC04                       	smpsPSGAlterVol     $04
0008CE20 E701                       	dc.b	smpsNoAttack, $01
0008CE22 EC07                       	smpsPSGAlterVol     $07
0008CE24 8006                       	dc.b	nRst, $06
0008CE26 E100                       	smpsAlterNote       $00
0008CE28 01                         	dc.b	$01
0008CE29 E104                       	smpsAlterNote       $04
0008CE2B 01                         	dc.b	$01
0008CE2C E103                       	smpsAlterNote       $03
0008CE2E 01                         	dc.b	$01
0008CE2F E1FD                       	smpsAlterNote       $FD
0008CE31 01                         	dc.b	$01
0008CE32 ECF5                       	smpsPSGAlterVol     $F5
0008CE34 9407                       	dc.b	nG1, $07
0008CE36 EC0B                       	smpsPSGAlterVol     $0B
0008CE38 8004                       	dc.b	nRst, $04
0008CE3A ECF5                       	smpsPSGAlterVol     $F5
0008CE3C 9406                       	dc.b	nG1, $06
0008CE3E EC0B                       	smpsPSGAlterVol     $0B
0008CE40 8007                       	dc.b	nRst, $07
0008CE42 E103                       	smpsAlterNote       $03
0008CE44 0101                       	dc.b	$01, $01
0008CE46 E1FD                       	smpsAlterNote       $FD
0008CE48 01                         	dc.b	$01
0008CE49 E1F9                       	smpsAlterNote       $F9
0008CE4B 01                         	dc.b	$01
0008CE4C E1FD                       	smpsAlterNote       $FD
0008CE4E ECF5                       	smpsPSGAlterVol     $F5
0008CE50 9206                       	dc.b	nF1, $06
0008CE52 EC04                       	smpsPSGAlterVol     $04
0008CE54 E701                       	dc.b	smpsNoAttack, $01
0008CE56 EC07                       	smpsPSGAlterVol     $07
0008CE58 8003                       	dc.b	nRst, $03
0008CE5A ECF5                       	smpsPSGAlterVol     $F5
0008CE5C 9206                       	dc.b	nF1, $06
0008CE5E EC04                       	smpsPSGAlterVol     $04
0008CE60 E701                       	dc.b	smpsNoAttack, $01
0008CE62 EC07                       	smpsPSGAlterVol     $07
0008CE64 8006                       	dc.b	nRst, $06
0008CE66 E100                       	smpsAlterNote       $00
0008CE68 01                         	dc.b	$01
0008CE69 E104                       	smpsAlterNote       $04
0008CE6B 01                         	dc.b	$01
0008CE6C E100                       	smpsAlterNote       $00
0008CE6E 01                         	dc.b	$01
0008CE6F E1FA                       	smpsAlterNote       $FA
0008CE71 01                         	dc.b	$01
0008CE72 E1FD                       	smpsAlterNote       $FD
0008CE74 ECF5                       	smpsPSGAlterVol     $F5
0008CE76 9206                       	dc.b	nF1, $06
0008CE78 EC04                       	smpsPSGAlterVol     $04
0008CE7A E701                       	dc.b	smpsNoAttack, $01
0008CE7C EC07                       	smpsPSGAlterVol     $07
0008CE7E 8003                       	dc.b	nRst, $03
0008CE80 ECF5                       	smpsPSGAlterVol     $F5
0008CE82 9107                       	dc.b	nE1, $07
0008CE84 EC0B                       	smpsPSGAlterVol     $0B
0008CE86 8006                       	dc.b	nRst, $06
0008CE88 E100                       	smpsAlterNote       $00
0008CE8A 01                         	dc.b	$01
0008CE8B E103                       	smpsAlterNote       $03
0008CE8D 0101                       	dc.b	$01, $01
0008CE8F E1FD                       	smpsAlterNote       $FD
0008CE91 01                         	dc.b	$01
0008CE92 ECF5                       	smpsPSGAlterVol     $F5
0008CE94 9207                       	dc.b	nF1, $07
0008CE96 EC0B                       	smpsPSGAlterVol     $0B
0008CE98 8004                       	dc.b	nRst, $04
0008CE9A ECF5                       	smpsPSGAlterVol     $F5
0008CE9C 9206                       	dc.b	nF1, $06
0008CE9E EC04                       	smpsPSGAlterVol     $04
0008CEA0 E701                       	dc.b	smpsNoAttack, $01
0008CEA2 EC07                       	smpsPSGAlterVol     $07
0008CEA4 8006                       	dc.b	nRst, $06
0008CEA6 E103                       	smpsAlterNote       $03
0008CEA8 01                         	dc.b	$01
0008CEA9 E104                       	smpsAlterNote       $04
0008CEAB 01                         	dc.b	$01
0008CEAC E100                       	smpsAlterNote       $00
0008CEAE 01                         	dc.b	$01
0008CEAF E1FB                       	smpsAlterNote       $FB
0008CEB1 01                         	dc.b	$01
0008CEB2 E1FD                       	smpsAlterNote       $FD
0008CEB4 ECF5                       	smpsPSGAlterVol     $F5
0008CEB6 9406                       	dc.b	nG1, $06
0008CEB8 EC04                       	smpsPSGAlterVol     $04
0008CEBA E701                       	dc.b	smpsNoAttack, $01
0008CEBC EC07                       	smpsPSGAlterVol     $07
0008CEBE 8003                       	dc.b	nRst, $03
0008CEC0 ECF5                       	smpsPSGAlterVol     $F5
0008CEC2 9406                       	dc.b	nG1, $06
0008CEC4 EC04                       	smpsPSGAlterVol     $04
0008CEC6 E701                       	dc.b	smpsNoAttack, $01
0008CEC8 EC07                       	smpsPSGAlterVol     $07
0008CECA 8006                       	dc.b	nRst, $06
0008CECC E100                       	smpsAlterNote       $00
0008CECE 01                         	dc.b	$01
0008CECF E104                       	smpsAlterNote       $04
0008CED1 01                         	dc.b	$01
0008CED2 E100                       	smpsAlterNote       $00
0008CED4 01                         	dc.b	$01
0008CED5 E1FD                       	smpsAlterNote       $FD
0008CED7 01                         	dc.b	$01
0008CED8 ECF5                       	smpsPSGAlterVol     $F5
0008CEDA 9206                       	dc.b	nF1, $06
0008CEDC EC04                       	smpsPSGAlterVol     $04
0008CEDE E701                       	dc.b	smpsNoAttack, $01
0008CEE0 EC07                       	smpsPSGAlterVol     $07
0008CEE2 8003                       	dc.b	nRst, $03
0008CEE4 ECF5                       	smpsPSGAlterVol     $F5
0008CEE6 9207                       	dc.b	nF1, $07
0008CEE8 EC0B                       	smpsPSGAlterVol     $0B
0008CEEA 8007                       	dc.b	nRst, $07
0008CEEC E103                       	smpsAlterNote       $03
0008CEEE 0101                       	dc.b	$01, $01
0008CEF0 E1FD                       	smpsAlterNote       $FD
0008CEF2 01                         	dc.b	$01
0008CEF3 E1FA                       	smpsAlterNote       $FA
0008CEF5 01                         	dc.b	$01
0008CEF6 E1FD                       	smpsAlterNote       $FD
0008CEF8 ECF5                       	smpsPSGAlterVol     $F5
0008CEFA 9206                       	dc.b	nF1, $06
0008CEFC EC0B                       	smpsPSGAlterVol     $0B
0008CEFE 8004                       	dc.b	nRst, $04
0008CF00 ECF5                       	smpsPSGAlterVol     $F5
0008CF02 9206                       	dc.b	nF1, $06
0008CF04 EC04                       	smpsPSGAlterVol     $04
0008CF06 E701                       	dc.b	smpsNoAttack, $01
0008CF08 EC07                       	smpsPSGAlterVol     $07
0008CF0A 8006                       	dc.b	nRst, $06
0008CF0C E100                       	smpsAlterNote       $00
0008CF0E 01                         	dc.b	$01
0008CF0F E104                       	smpsAlterNote       $04
0008CF11 01                         	dc.b	$01
0008CF12 E100                       	smpsAlterNote       $00
0008CF14 01                         	dc.b	$01
0008CF15 E1FA                       	smpsAlterNote       $FA
0008CF17 01                         	dc.b	$01
0008CF18 E1FD                       	smpsAlterNote       $FD
0008CF1A ECF5                       	smpsPSGAlterVol     $F5
0008CF1C 9206                       	dc.b	nF1, $06
0008CF1E EC04                       	smpsPSGAlterVol     $04
0008CF20 E704                       	dc.b	smpsNoAttack, $04
0008CF22 ECFC                       	smpsPSGAlterVol     $FC
0008CF24 9207                       	dc.b	nF1, $07
0008CF26 EC0B                       	smpsPSGAlterVol     $0B
0008CF28 8006                       	dc.b	nRst, $06
0008CF2A E100                       	smpsAlterNote       $00
0008CF2C 01                         	dc.b	$01
0008CF2D E104                       	smpsAlterNote       $04
0008CF2F 01                         	dc.b	$01
0008CF30 E103                       	smpsAlterNote       $03
0008CF32 01                         	dc.b	$01
0008CF33 E1FD                       	smpsAlterNote       $FD
0008CF35 01                         	dc.b	$01
0008CF36 ECF5                       	smpsPSGAlterVol     $F5
0008CF38 9207                       	dc.b	nF1, $07
0008CF3A EC0B                       	smpsPSGAlterVol     $0B
0008CF3C 8004                       	dc.b	nRst, $04
0008CF3E ECF5                       	smpsPSGAlterVol     $F5
0008CF40 9206                       	dc.b	nF1, $06
0008CF42 EC0B                       	smpsPSGAlterVol     $0B
0008CF44 8007                       	dc.b	nRst, $07
0008CF46 E103                       	smpsAlterNote       $03
0008CF48 0101                       	dc.b	$01, $01
0008CF4A E100                       	smpsAlterNote       $00
0008CF4C 01                         	dc.b	$01
0008CF4D E1FA                       	smpsAlterNote       $FA
0008CF4F 01                         	dc.b	$01
0008CF50 E1FD                       	smpsAlterNote       $FD
0008CF52 ECF5                       	smpsPSGAlterVol     $F5
0008CF54 9206                       	dc.b	nF1, $06
0008CF56 EC04                       	smpsPSGAlterVol     $04
0008CF58 E704                       	dc.b	smpsNoAttack, $04
0008CF5A ECFC                       	smpsPSGAlterVol     $FC
0008CF5C 9206                       	dc.b	nF1, $06
0008CF5E EC04                       	smpsPSGAlterVol     $04
0008CF60 E701                       	dc.b	smpsNoAttack, $01
0008CF62 EC07                       	smpsPSGAlterVol     $07
0008CF64 8006                       	dc.b	nRst, $06
0008CF66 E100                       	smpsAlterNote       $00
0008CF68 01                         	dc.b	$01
0008CF69 E104                       	smpsAlterNote       $04
0008CF6B 01                         	dc.b	$01
0008CF6C E100                       	smpsAlterNote       $00
0008CF6E 01                         	dc.b	$01
0008CF6F E1FD                       	smpsAlterNote       $FD
0008CF71 01                         	dc.b	$01
0008CF72 ECF5                       	smpsPSGAlterVol     $F5
0008CF74 9206                       	dc.b	nF1, $06
0008CF76 EC04                       	smpsPSGAlterVol     $04
0008CF78 E701                       	dc.b	smpsNoAttack, $01
0008CF7A EC07                       	smpsPSGAlterVol     $07
0008CF7C 8003                       	dc.b	nRst, $03
0008CF7E ECF5                       	smpsPSGAlterVol     $F5
0008CF80 9207                       	dc.b	nF1, $07
0008CF82 EC0B                       	smpsPSGAlterVol     $0B
0008CF84 8007                       	dc.b	nRst, $07
0008CF86 E103                       	smpsAlterNote       $03
0008CF88 0101                       	dc.b	$01, $01
0008CF8A E1FD                       	smpsAlterNote       $FD
0008CF8C 01                         	dc.b	$01
0008CF8D E1FA                       	smpsAlterNote       $FA
0008CF8F 01                         	dc.b	$01
0008CF90 E1FD                       	smpsAlterNote       $FD
0008CF92 ECF5                       	smpsPSGAlterVol     $F5
0008CF94 9106                       	dc.b	nE1, $06
0008CF96 EC0B                       	smpsPSGAlterVol     $0B
0008CF98 8004                       	dc.b	nRst, $04
0008CF9A ECF5                       	smpsPSGAlterVol     $F5
0008CF9C 9106                       	dc.b	nE1, $06
0008CF9E EC04                       	smpsPSGAlterVol     $04
0008CFA0 E701                       	dc.b	smpsNoAttack, $01
0008CFA2 EC07                       	smpsPSGAlterVol     $07
0008CFA4 8006                       	dc.b	nRst, $06
0008CFA6 E100                       	smpsAlterNote       $00
0008CFA8 01                         	dc.b	$01
0008CFA9 E104                       	smpsAlterNote       $04
0008CFAB 01                         	dc.b	$01
0008CFAC E100                       	smpsAlterNote       $00
0008CFAE 01                         	dc.b	$01
0008CFAF E1FA                       	smpsAlterNote       $FA
0008CFB1 01                         	dc.b	$01
0008CFB2 E1FD                       	smpsAlterNote       $FD
0008CFB4 ECF5                       	smpsPSGAlterVol     $F5
0008CFB6 9106                       	dc.b	nE1, $06
0008CFB8 EC04                       	smpsPSGAlterVol     $04
0008CFBA E701                       	dc.b	smpsNoAttack, $01
0008CFBC EC07                       	smpsPSGAlterVol     $07
0008CFBE 8003                       	dc.b	nRst, $03
0008CFC0 ECF5                       	smpsPSGAlterVol     $F5
0008CFC2 9106                       	dc.b	nE1, $06
0008CFC4 EC04                       	smpsPSGAlterVol     $04
0008CFC6 E701                       	dc.b	smpsNoAttack, $01
0008CFC8 EC07                       	smpsPSGAlterVol     $07
0008CFCA 8006                       	dc.b	nRst, $06
0008CFCC E100                       	smpsAlterNote       $00
0008CFCE 01                         	dc.b	$01
0008CFCF E104                       	smpsAlterNote       $04
0008CFD1 01                         	dc.b	$01
0008CFD2 E103                       	smpsAlterNote       $03
0008CFD4 01                         	dc.b	$01
0008CFD5 E1FD                       	smpsAlterNote       $FD
0008CFD7 01                         	dc.b	$01
0008CFD8 ECF5                       	smpsPSGAlterVol     $F5
0008CFDA 9107                       	dc.b	nE1, $07
0008CFDC EC0B                       	smpsPSGAlterVol     $0B
0008CFDE 8004                       	dc.b	nRst, $04
0008CFE0 ECF5                       	smpsPSGAlterVol     $F5
0008CFE2 9106                       	dc.b	nE1, $06
0008CFE4 EC0B                       	smpsPSGAlterVol     $0B
0008CFE6 8007                       	dc.b	nRst, $07
0008CFE8 E103                       	smpsAlterNote       $03
0008CFEA 0101                       	dc.b	$01, $01
0008CFEC E100                       	smpsAlterNote       $00
0008CFEE 01                         	dc.b	$01
0008CFEF E1FA                       	smpsAlterNote       $FA
0008CFF1 01                         	dc.b	$01
0008CFF2 E1FD                       	smpsAlterNote       $FD
0008CFF4 ECF5                       	smpsPSGAlterVol     $F5
0008CFF6 9106                       	dc.b	nE1, $06
0008CFF8 EC04                       	smpsPSGAlterVol     $04
0008CFFA E701                       	dc.b	smpsNoAttack, $01
0008CFFC EC07                       	smpsPSGAlterVol     $07
0008CFFE 8003                       	dc.b	nRst, $03
0008D000 ECF5                       	smpsPSGAlterVol     $F5
0008D002 9106                       	dc.b	nE1, $06
0008D004 EC04                       	smpsPSGAlterVol     $04
0008D006 E701                       	dc.b	smpsNoAttack, $01
0008D008 EC07                       	smpsPSGAlterVol     $07
0008D00A 8003                       	dc.b	nRst, $03
0008D00C ECF5                       	smpsPSGAlterVol     $F5
0008D00E 9207                       	dc.b	nF1, $07
0008D010 EC0B                       	smpsPSGAlterVol     $0B
0008D012 8006                       	dc.b	nRst, $06
0008D014 E100                       	smpsAlterNote       $00
0008D016 01                         	dc.b	$01
0008D017 E104                       	smpsAlterNote       $04
0008D019 01                         	dc.b	$01
0008D01A E103                       	smpsAlterNote       $03
0008D01C 01                         	dc.b	$01
0008D01D E1FD                       	smpsAlterNote       $FD
0008D01F 01                         	dc.b	$01
0008D020 E1F9                       	smpsAlterNote       $F9
0008D022 01                         	dc.b	$01
0008D023 E1FD                       	smpsAlterNote       $FD
0008D025 01                         	dc.b	$01
0008D026 E100                       	smpsAlterNote       $00
0008D028 01                         	dc.b	$01
0008D029 E104                       	smpsAlterNote       $04
0008D02B 01                         	dc.b	$01
0008D02C E1FD                       	smpsAlterNote       $FD
0008D02E ECF5                       	smpsPSGAlterVol     $F5
0008D030 9203 9203                  	dc.b	nF1, $03, nF1, $03
0008D034 EC04                       	smpsPSGAlterVol     $04
0008D036 E701                       	dc.b	smpsNoAttack, $01
0008D038 EC07                       	smpsPSGAlterVol     $07
0008D03A 8009                       	dc.b	nRst, $09
0008D03C E100                       	smpsAlterNote       $00
0008D03E 01                         	dc.b	$01
0008D03F E104                       	smpsAlterNote       $04
0008D041 01                         	dc.b	$01
0008D042 E103                       	smpsAlterNote       $03
0008D044 01                         	dc.b	$01
0008D045 E1FD                       	smpsAlterNote       $FD
0008D047 01                         	dc.b	$01
0008D048 E1F9                       	smpsAlterNote       $F9
0008D04A 01                         	dc.b	$01
0008D04B E1FD                       	smpsAlterNote       $FD
0008D04D 01                         	dc.b	$01
0008D04E E100                       	smpsAlterNote       $00
0008D050 01                         	dc.b	$01
0008D051 E104                       	smpsAlterNote       $04
0008D053 01                         	dc.b	$01
0008D054 E100                       	smpsAlterNote       $00
0008D056 01                         	dc.b	$01
0008D057 E1FA                       	smpsAlterNote       $FA
0008D059 01                         	dc.b	$01
0008D05A E1F9                       	smpsAlterNote       $F9
0008D05C 01                         	dc.b	$01
0008D05D E1FD                       	smpsAlterNote       $FD
0008D05F 01                         	dc.b	$01
0008D060 E103                       	smpsAlterNote       $03
0008D062 0101                       	dc.b	$01, $01
0008D064 E100                       	smpsAlterNote       $00
0008D066 01                         	dc.b	$01
0008D067 E1FD                       	smpsAlterNote       $FD
0008D069 ECF5                       	smpsPSGAlterVol     $F5
0008D06B 9202                       	dc.b	nF1, $02
0008D06D EC04                       	smpsPSGAlterVol     $04
0008D06F E701                       	dc.b	smpsNoAttack, $01
0008D071 ECFC                       	smpsPSGAlterVol     $FC
0008D073 9106                       	dc.b	nE1, $06
0008D075 EC04                       	smpsPSGAlterVol     $04
0008D077 E701                       	dc.b	smpsNoAttack, $01
0008D079 EC07                       	smpsPSGAlterVol     $07
0008D07B 8006                       	dc.b	nRst, $06
0008D07D E100                       	smpsAlterNote       $00
0008D07F 01                         	dc.b	$01
0008D080 E104                       	smpsAlterNote       $04
0008D082 01                         	dc.b	$01
0008D083 E100                       	smpsAlterNote       $00
0008D085 01                         	dc.b	$01
0008D086 E1FD                       	smpsAlterNote       $FD
0008D088 01                         	dc.b	$01
0008D089 E1F9                       	smpsAlterNote       $F9
0008D08B 01                         	dc.b	$01
0008D08C E1FD                       	smpsAlterNote       $FD
0008D08E 01                         	dc.b	$01
0008D08F E103                       	smpsAlterNote       $03
0008D091 01                         	dc.b	$01
0008D092 E104                       	smpsAlterNote       $04
0008D094 01                         	dc.b	$01
0008D095 E1FD                       	smpsAlterNote       $FD
0008D097 ECF5                       	smpsPSGAlterVol     $F5
0008D099 9102                       	dc.b	nE1, $02
0008D09B EC04                       	smpsPSGAlterVol     $04
0008D09D E701                       	dc.b	smpsNoAttack, $01
0008D09F ECFC                       	smpsPSGAlterVol     $FC
0008D0A1 920D                       	dc.b	nF1, $0D
0008D0A3 E100                       	smpsAlterNote       $00
0008D0A5 E701                       	dc.b	smpsNoAttack, $01
0008D0A7 E104                       	smpsAlterNote       $04
0008D0A9 E701                       	dc.b	smpsNoAttack, $01
0008D0AB E100                       	smpsAlterNote       $00
0008D0AD E701                       	dc.b	smpsNoAttack, $01
0008D0AF E1FD                       	smpsAlterNote       $FD
0008D0B1 E701                       	dc.b	smpsNoAttack, $01
0008D0B3 E1F9                       	smpsAlterNote       $F9
0008D0B5 E701                       	dc.b	smpsNoAttack, $01
0008D0B7 E1FD                       	smpsAlterNote       $FD
0008D0B9 E701                       	dc.b	smpsNoAttack, $01
0008D0BB E103                       	smpsAlterNote       $03
0008D0BD E701                       	dc.b	smpsNoAttack, $01
0008D0BF E104                       	smpsAlterNote       $04
0008D0C1 E701                       	dc.b	smpsNoAttack, $01
0008D0C3 E100                       	smpsAlterNote       $00
0008D0C5 E701                       	dc.b	smpsNoAttack, $01
0008D0C7 E1FA                       	smpsAlterNote       $FA
0008D0C9 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008D0CD E1FD                       	smpsAlterNote       $FD
0008D0CF E701                       	dc.b	smpsNoAttack, $01
0008D0D1 E103                       	smpsAlterNote       $03
0008D0D3 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008D0D7 E1FD                       	smpsAlterNote       $FD
0008D0D9 E701                       	dc.b	smpsNoAttack, $01
0008D0DB E1F9                       	smpsAlterNote       $F9
0008D0DD E701                       	dc.b	smpsNoAttack, $01
0008D0DF E1FA                       	smpsAlterNote       $FA
0008D0E1 E701                       	dc.b	smpsNoAttack, $01
0008D0E3 E100                       	smpsAlterNote       $00
0008D0E5 EC04                       	smpsPSGAlterVol     $04
0008D0E7 E701                       	dc.b	smpsNoAttack, $01
0008D0E9 EC07                       	smpsPSGAlterVol     $07
0008D0EB E104                       	smpsAlterNote       $04
0008D0ED 8001                       	dc.b	nRst, $01
0008D0EF E100                       	smpsAlterNote       $00
0008D0F1 01                         	dc.b	$01
0008D0F2 E1FD                       	smpsAlterNote       $FD
0008D0F4 01                         	dc.b	$01
0008D0F5 E1F9                       	smpsAlterNote       $F9
0008D0F7 01                         	dc.b	$01
0008D0F8 E1FD                       	smpsAlterNote       $FD
0008D0FA 01                         	dc.b	$01
0008D0FB E103                       	smpsAlterNote       $03
0008D0FD 01                         	dc.b	$01
0008D0FE E104                       	smpsAlterNote       $04
0008D100 01                         	dc.b	$01
0008D101 E1FD                       	smpsAlterNote       $FD
0008D103 ECF5                       	smpsPSGAlterVol     $F5
0008D105 9106                       	dc.b	nE1, $06
0008D107 EC04                       	smpsPSGAlterVol     $04
0008D109 E701                       	dc.b	smpsNoAttack, $01
0008D10B EC07                       	smpsPSGAlterVol     $07
0008D10D 8003                       	dc.b	nRst, $03
0008D10F ECF5                       	smpsPSGAlterVol     $F5
0008D111 9106                       	dc.b	nE1, $06
0008D113 EC04                       	smpsPSGAlterVol     $04
0008D115 E701                       	dc.b	smpsNoAttack, $01
0008D117 EC07                       	smpsPSGAlterVol     $07
0008D119 8006                       	dc.b	nRst, $06
0008D11B E100                       	smpsAlterNote       $00
0008D11D 01                         	dc.b	$01
0008D11E E104                       	smpsAlterNote       $04
0008D120 01                         	dc.b	$01
0008D121 E100                       	smpsAlterNote       $00
0008D123 01                         	dc.b	$01
0008D124 E1FA                       	smpsAlterNote       $FA
0008D126 01                         	dc.b	$01
0008D127 E1FD                       	smpsAlterNote       $FD
0008D129 ECF5                       	smpsPSGAlterVol     $F5
0008D12B 9206                       	dc.b	nF1, $06
0008D12D EC04                       	smpsPSGAlterVol     $04
0008D12F E701                       	dc.b	smpsNoAttack, $01
0008D131 EC07                       	smpsPSGAlterVol     $07
0008D133 8003                       	dc.b	nRst, $03
0008D135 ECF5                       	smpsPSGAlterVol     $F5
0008D137 9207                       	dc.b	nF1, $07
0008D139 EC0B                       	smpsPSGAlterVol     $0B
0008D13B 8006                       	dc.b	nRst, $06
0008D13D E100                       	smpsAlterNote       $00
0008D13F 01                         	dc.b	$01
0008D140 E103                       	smpsAlterNote       $03
0008D142 0101                       	dc.b	$01, $01
0008D144 E1FD                       	smpsAlterNote       $FD
0008D146 01                         	dc.b	$01
0008D147 ECF5                       	smpsPSGAlterVol     $F5
0008D149 9107                       	dc.b	nE1, $07
0008D14B EC0B                       	smpsPSGAlterVol     $0B
0008D14D 8004                       	dc.b	nRst, $04
0008D14F ECF5                       	smpsPSGAlterVol     $F5
0008D151 9106                       	dc.b	nE1, $06
0008D153 EC04                       	smpsPSGAlterVol     $04
0008D155 E701                       	dc.b	smpsNoAttack, $01
0008D157 EC07                       	smpsPSGAlterVol     $07
0008D159 8006                       	dc.b	nRst, $06
0008D15B E103                       	smpsAlterNote       $03
0008D15D 01                         	dc.b	$01
0008D15E E104                       	smpsAlterNote       $04
0008D160 01                         	dc.b	$01
0008D161 E100                       	smpsAlterNote       $00
0008D163 01                         	dc.b	$01
0008D164 E1FA                       	smpsAlterNote       $FA
0008D166 01                         	dc.b	$01
0008D167 E1FD                       	smpsAlterNote       $FD
0008D169 ECF5                       	smpsPSGAlterVol     $F5
0008D16B 9106                       	dc.b	nE1, $06
0008D16D EC04                       	smpsPSGAlterVol     $04
0008D16F E701                       	dc.b	smpsNoAttack, $01
0008D171 EC07                       	smpsPSGAlterVol     $07
0008D173 8003                       	dc.b	nRst, $03
0008D175 ECF5                       	smpsPSGAlterVol     $F5
0008D177 9106                       	dc.b	nE1, $06
0008D179 EC04                       	smpsPSGAlterVol     $04
0008D17B E701                       	dc.b	smpsNoAttack, $01
0008D17D EC07                       	smpsPSGAlterVol     $07
0008D17F 8003                       	dc.b	nRst, $03
0008D181 ECF5                       	smpsPSGAlterVol     $F5
0008D183 9207                       	dc.b	nF1, $07
0008D185 EC0B                       	smpsPSGAlterVol     $0B
0008D187 8006                       	dc.b	nRst, $06
0008D189 E100                       	smpsAlterNote       $00
0008D18B 01                         	dc.b	$01
0008D18C E103                       	smpsAlterNote       $03
0008D18E 0101                       	dc.b	$01, $01
0008D190 E1FD                       	smpsAlterNote       $FD
0008D192 01                         	dc.b	$01
0008D193 E1F9                       	smpsAlterNote       $F9
0008D195 01                         	dc.b	$01
0008D196 E1FA                       	smpsAlterNote       $FA
0008D198 01                         	dc.b	$01
0008D199 E100                       	smpsAlterNote       $00
0008D19B 01                         	dc.b	$01
0008D19C E104                       	smpsAlterNote       $04
0008D19E 01                         	dc.b	$01
0008D19F E1FD                       	smpsAlterNote       $FD
0008D1A1 ECF5                       	smpsPSGAlterVol     $F5
0008D1A3 9203 9203                  	dc.b	nF1, $03, nF1, $03
0008D1A7 EC04                       	smpsPSGAlterVol     $04
0008D1A9 E701                       	dc.b	smpsNoAttack, $01
0008D1AB EC07                       	smpsPSGAlterVol     $07
0008D1AD 8009                       	dc.b	nRst, $09
0008D1AF E100                       	smpsAlterNote       $00
0008D1B1 01                         	dc.b	$01
0008D1B2 E103                       	smpsAlterNote       $03
0008D1B4 0101                       	dc.b	$01, $01
0008D1B6 E1FD                       	smpsAlterNote       $FD
0008D1B8 01                         	dc.b	$01
0008D1B9 E1F9                       	smpsAlterNote       $F9
0008D1BB 01                         	dc.b	$01
0008D1BC E1FA                       	smpsAlterNote       $FA
0008D1BE 01                         	dc.b	$01
0008D1BF E100                       	smpsAlterNote       $00
0008D1C1 01                         	dc.b	$01
0008D1C2 E104                       	smpsAlterNote       $04
0008D1C4 01                         	dc.b	$01
0008D1C5 E100                       	smpsAlterNote       $00
0008D1C7 01                         	dc.b	$01
0008D1C8 E1FD                       	smpsAlterNote       $FD
0008D1CA 01                         	dc.b	$01
0008D1CB E1F9                       	smpsAlterNote       $F9
0008D1CD 01                         	dc.b	$01
0008D1CE E1FD                       	smpsAlterNote       $FD
0008D1D0 01                         	dc.b	$01
0008D1D1 E103                       	smpsAlterNote       $03
0008D1D3 01                         	dc.b	$01
0008D1D4 E104                       	smpsAlterNote       $04
0008D1D6 01                         	dc.b	$01
0008D1D7 E100                       	smpsAlterNote       $00
0008D1D9 01                         	dc.b	$01
0008D1DA E1FD                       	smpsAlterNote       $FD
0008D1DC ECF5                       	smpsPSGAlterVol     $F5
0008D1DE 9203 9106                  	dc.b	nF1, $03, nE1, $06
0008D1E2 EC04                       	smpsPSGAlterVol     $04
0008D1E4 E701                       	dc.b	smpsNoAttack, $01
0008D1E6 EC07                       	smpsPSGAlterVol     $07
0008D1E8 8006                       	dc.b	nRst, $06
0008D1EA E100                       	smpsAlterNote       $00
0008D1EC 01                         	dc.b	$01
0008D1ED E104                       	smpsAlterNote       $04
0008D1EF 01                         	dc.b	$01
0008D1F0 E103                       	smpsAlterNote       $03
0008D1F2 01                         	dc.b	$01
0008D1F3 E1FD                       	smpsAlterNote       $FD
0008D1F5 01                         	dc.b	$01
0008D1F6 E1F9                       	smpsAlterNote       $F9
0008D1F8 01                         	dc.b	$01
0008D1F9 E1FD                       	smpsAlterNote       $FD
0008D1FB 01                         	dc.b	$01
0008D1FC E100                       	smpsAlterNote       $00
0008D1FE 01                         	dc.b	$01
0008D1FF E104                       	smpsAlterNote       $04
0008D201 01                         	dc.b	$01
0008D202 E1FD                       	smpsAlterNote       $FD
0008D204 ECF5                       	smpsPSGAlterVol     $F5
0008D206 9103 920D                  	dc.b	nE1, $03, nF1, $0D
0008D20A E100                       	smpsAlterNote       $00
0008D20C E701                       	dc.b	smpsNoAttack, $01
0008D20E E104                       	smpsAlterNote       $04
0008D210 E701                       	dc.b	smpsNoAttack, $01
0008D212 E100                       	smpsAlterNote       $00
0008D214 E701                       	dc.b	smpsNoAttack, $01
0008D216 E1FD                       	smpsAlterNote       $FD
0008D218 E701                       	dc.b	smpsNoAttack, $01
0008D21A E1F9                       	smpsAlterNote       $F9
0008D21C E701                       	dc.b	smpsNoAttack, $01
0008D21E E1FD                       	smpsAlterNote       $FD
0008D220 E701                       	dc.b	smpsNoAttack, $01
0008D222 E103                       	smpsAlterNote       $03
0008D224 E701                       	dc.b	smpsNoAttack, $01
0008D226 E104                       	smpsAlterNote       $04
0008D228 E701                       	dc.b	smpsNoAttack, $01
0008D22A E100                       	smpsAlterNote       $00
0008D22C E701                       	dc.b	smpsNoAttack, $01
0008D22E E1FA                       	smpsAlterNote       $FA
0008D230 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008D234 E1FD                       	smpsAlterNote       $FD
0008D236 E701                       	dc.b	smpsNoAttack, $01
0008D238 E103                       	smpsAlterNote       $03
0008D23A E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008D23E E100                       	smpsAlterNote       $00
0008D240 E701                       	dc.b	smpsNoAttack, $01
0008D242 E1FA                       	smpsAlterNote       $FA
0008D244 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008D248 E100                       	smpsAlterNote       $00
0008D24A EC04                       	smpsPSGAlterVol     $04
0008D24C E701                       	dc.b	smpsNoAttack, $01
0008D24E EC07                       	smpsPSGAlterVol     $07
0008D250 E104                       	smpsAlterNote       $04
0008D252 8001                       	dc.b	nRst, $01
0008D254 E103                       	smpsAlterNote       $03
0008D256 01                         	dc.b	$01
0008D257 E1FD                       	smpsAlterNote       $FD
0008D259 01                         	dc.b	$01
0008D25A E1F9                       	smpsAlterNote       $F9
0008D25C 01                         	dc.b	$01
0008D25D E1FD                       	smpsAlterNote       $FD
0008D25F 01                         	dc.b	$01
0008D260 E100                       	smpsAlterNote       $00
0008D262 01                         	dc.b	$01
0008D263 E104                       	smpsAlterNote       $04
0008D265 01                         	dc.b	$01
0008D266 E1FD                       	smpsAlterNote       $FD
0008D268 ECF5                       	smpsPSGAlterVol     $F5
0008D26A 9106                       	dc.b	nE1, $06
0008D26C EC04                       	smpsPSGAlterVol     $04
0008D26E E701                       	dc.b	smpsNoAttack, $01
0008D270 EC07                       	smpsPSGAlterVol     $07
0008D272 8003                       	dc.b	nRst, $03
0008D274 ECF5                       	smpsPSGAlterVol     $F5
0008D276 9106                       	dc.b	nE1, $06
0008D278 EC04                       	smpsPSGAlterVol     $04
0008D27A E701                       	dc.b	smpsNoAttack, $01
0008D27C EC07                       	smpsPSGAlterVol     $07
0008D27E 8006                       	dc.b	nRst, $06
0008D280 E100                       	smpsAlterNote       $00
0008D282 01                         	dc.b	$01
0008D283 E104                       	smpsAlterNote       $04
0008D285 01                         	dc.b	$01
0008D286 E100                       	smpsAlterNote       $00
0008D288 01                         	dc.b	$01
0008D289 E1FD                       	smpsAlterNote       $FD
0008D28B 01                         	dc.b	$01
0008D28C ECF5                       	smpsPSGAlterVol     $F5
0008D28E 9206                       	dc.b	nF1, $06
0008D290 EC04                       	smpsPSGAlterVol     $04
0008D292 E701                       	dc.b	smpsNoAttack, $01
0008D294 EC07                       	smpsPSGAlterVol     $07
0008D296 8003                       	dc.b	nRst, $03
0008D298 ECF5                       	smpsPSGAlterVol     $F5
0008D29A 9207                       	dc.b	nF1, $07
0008D29C EC0B                       	smpsPSGAlterVol     $0B
0008D29E 8007                       	dc.b	nRst, $07
0008D2A0 E103                       	smpsAlterNote       $03
0008D2A2 0101                       	dc.b	$01, $01
0008D2A4 E1FD                       	smpsAlterNote       $FD
0008D2A6 01                         	dc.b	$01
0008D2A7 E1FA                       	smpsAlterNote       $FA
0008D2A9 01                         	dc.b	$01
0008D2AA E1FD                       	smpsAlterNote       $FD
0008D2AC ECF5                       	smpsPSGAlterVol     $F5
0008D2AE 9106                       	dc.b	nE1, $06
0008D2B0 EC0B                       	smpsPSGAlterVol     $0B
0008D2B2 8004                       	dc.b	nRst, $04
0008D2B4 ECF5                       	smpsPSGAlterVol     $F5
0008D2B6 9106                       	dc.b	nE1, $06
0008D2B8 EC04                       	smpsPSGAlterVol     $04
0008D2BA E701                       	dc.b	smpsNoAttack, $01
0008D2BC EC07                       	smpsPSGAlterVol     $07
0008D2BE 8006                       	dc.b	nRst, $06
0008D2C0 E100                       	smpsAlterNote       $00
0008D2C2 01                         	dc.b	$01
0008D2C3 E104                       	smpsAlterNote       $04
0008D2C5 01                         	dc.b	$01
0008D2C6 E100                       	smpsAlterNote       $00
0008D2C8 01                         	dc.b	$01
0008D2C9 E1FA                       	smpsAlterNote       $FA
0008D2CB 01                         	dc.b	$01
0008D2CC E1FD                       	smpsAlterNote       $FD
0008D2CE ECF5                       	smpsPSGAlterVol     $F5
0008D2D0 9206                       	dc.b	nF1, $06
0008D2D2 EC04                       	smpsPSGAlterVol     $04
0008D2D4 E701                       	dc.b	smpsNoAttack, $01
0008D2D6 EC07                       	smpsPSGAlterVol     $07
0008D2D8 8003                       	dc.b	nRst, $03
0008D2DA ECF5                       	smpsPSGAlterVol     $F5
0008D2DC 9206                       	dc.b	nF1, $06
0008D2DE EC04                       	smpsPSGAlterVol     $04
0008D2E0 E701                       	dc.b	smpsNoAttack, $01
0008D2E2 EC07                       	smpsPSGAlterVol     $07
0008D2E4 8006                       	dc.b	nRst, $06
0008D2E6 E100                       	smpsAlterNote       $00
0008D2E8 01                         	dc.b	$01
0008D2E9 E104                       	smpsAlterNote       $04
0008D2EB 01                         	dc.b	$01
0008D2EC E103                       	smpsAlterNote       $03
0008D2EE 01                         	dc.b	$01
0008D2EF E1FD                       	smpsAlterNote       $FD
0008D2F1 01                         	dc.b	$01
0008D2F2 ECF5                       	smpsPSGAlterVol     $F5
0008D2F4 9107                       	dc.b	nE1, $07
0008D2F6 EC0B                       	smpsPSGAlterVol     $0B
0008D2F8 8004                       	dc.b	nRst, $04
0008D2FA ECF5                       	smpsPSGAlterVol     $F5
0008D2FC 9106                       	dc.b	nE1, $06
0008D2FE EC0B                       	smpsPSGAlterVol     $0B
0008D300 8007                       	dc.b	nRst, $07
0008D302 E103                       	smpsAlterNote       $03
0008D304 0101                       	dc.b	$01, $01
0008D306 E100                       	smpsAlterNote       $00
0008D308 01                         	dc.b	$01
0008D309 E1FA                       	smpsAlterNote       $FA
0008D30B 01                         	dc.b	$01
0008D30C E1FD                       	smpsAlterNote       $FD
0008D30E ECF5                       	smpsPSGAlterVol     $F5
0008D310 9206                       	dc.b	nF1, $06
0008D312 EC04                       	smpsPSGAlterVol     $04
0008D314 E701                       	dc.b	smpsNoAttack, $01
0008D316 EC07                       	smpsPSGAlterVol     $07
0008D318 8003                       	dc.b	nRst, $03
0008D31A ECF5                       	smpsPSGAlterVol     $F5
0008D31C 9206                       	dc.b	nF1, $06
0008D31E EC04                       	smpsPSGAlterVol     $04
0008D320 E701                       	dc.b	smpsNoAttack, $01
0008D322 EC07                       	smpsPSGAlterVol     $07
0008D324 8006                       	dc.b	nRst, $06
0008D326 E100                       	smpsAlterNote       $00
0008D328 01                         	dc.b	$01
0008D329 E104                       	smpsAlterNote       $04
0008D32B 01                         	dc.b	$01
0008D32C E100                       	smpsAlterNote       $00
0008D32E 01                         	dc.b	$01
0008D32F E1FD                       	smpsAlterNote       $FD
0008D331 01                         	dc.b	$01
0008D332 ECF5                       	smpsPSGAlterVol     $F5
0008D334 9106                       	dc.b	nE1, $06
0008D336 EC04                       	smpsPSGAlterVol     $04
0008D338 E701                       	dc.b	smpsNoAttack, $01
0008D33A EC07                       	smpsPSGAlterVol     $07
0008D33C 8003                       	dc.b	nRst, $03
0008D33E ECF5                       	smpsPSGAlterVol     $F5
0008D340 9107 9106                  	dc.b	nE1, $07, nE1, $06
0008D344 EC04                       	smpsPSGAlterVol     $04
0008D346 E701                       	dc.b	smpsNoAttack, $01
0008D348 ECFC                       	smpsPSGAlterVol     $FC
0008D34A 9103                       	dc.b	nE1, $03
0008D34C EC04                       	smpsPSGAlterVol     $04
0008D34E E701                       	dc.b	smpsNoAttack, $01
0008D350 ECFC                       	smpsPSGAlterVol     $FC
0008D352 9102                       	dc.b	nE1, $02
0008D354 EC04                       	smpsPSGAlterVol     $04
0008D356 E701                       	dc.b	smpsNoAttack, $01
0008D358 ECFC                       	smpsPSGAlterVol     $FC
0008D35A 9103                       	dc.b	nE1, $03
0008D35C EC0B                       	smpsPSGAlterVol     $0B
0008D35E 800A                       	dc.b	nRst, $0A
0008D360 E100                       	smpsAlterNote       $00
0008D362 01                         	dc.b	$01
0008D363 E104                       	smpsAlterNote       $04
0008D365 01                         	dc.b	$01
0008D366 E100                       	smpsAlterNote       $00
0008D368 01                         	dc.b	$01
0008D369 E1FA                       	smpsAlterNote       $FA
0008D36B 01                         	dc.b	$01
0008D36C E1F9                       	smpsAlterNote       $F9
0008D36E 01                         	dc.b	$01
0008D36F E1FD                       	smpsAlterNote       $FD
0008D371 01                         	dc.b	$01
0008D372 E103                       	smpsAlterNote       $03
0008D374 0101                       	dc.b	$01, $01
0008D376 E100                       	smpsAlterNote       $00
0008D378 01                         	dc.b	$01
0008D379 E1FA                       	smpsAlterNote       $FA
0008D37B 0101                       	dc.b	$01, $01
0008D37D E1FD                       	smpsAlterNote       $FD
0008D37F ECF5                       	smpsPSGAlterVol     $F5
0008D381 9206                       	dc.b	nF1, $06
0008D383 EC04                       	smpsPSGAlterVol     $04
0008D385 E704                       	dc.b	smpsNoAttack, $04
0008D387 ECFC                       	smpsPSGAlterVol     $FC
0008D389 9206                       	dc.b	nF1, $06
0008D38B EC04                       	smpsPSGAlterVol     $04
0008D38D E701                       	dc.b	smpsNoAttack, $01
0008D38F EC07                       	smpsPSGAlterVol     $07
0008D391 8006                       	dc.b	nRst, $06
0008D393 E100                       	smpsAlterNote       $00
0008D395 01                         	dc.b	$01
0008D396 E104                       	smpsAlterNote       $04
0008D398 01                         	dc.b	$01
0008D399 E103                       	smpsAlterNote       $03
0008D39B 01                         	dc.b	$01
0008D39C E1FD                       	smpsAlterNote       $FD
0008D39E 01                         	dc.b	$01
0008D39F ECF5                       	smpsPSGAlterVol     $F5
0008D3A1 9407                       	dc.b	nG1, $07
0008D3A3 EC0B                       	smpsPSGAlterVol     $0B
0008D3A5 8004                       	dc.b	nRst, $04
0008D3A7 ECF5                       	smpsPSGAlterVol     $F5
0008D3A9 9406                       	dc.b	nG1, $06
0008D3AB EC0B                       	smpsPSGAlterVol     $0B
0008D3AD 8007                       	dc.b	nRst, $07
0008D3AF E103                       	smpsAlterNote       $03
0008D3B1 0101                       	dc.b	$01, $01
0008D3B3 E1FD                       	smpsAlterNote       $FD
0008D3B5 01                         	dc.b	$01
0008D3B6 E1F9                       	smpsAlterNote       $F9
0008D3B8 01                         	dc.b	$01
0008D3B9 E1FD                       	smpsAlterNote       $FD
0008D3BB ECF5                       	smpsPSGAlterVol     $F5
0008D3BD 9206                       	dc.b	nF1, $06
0008D3BF EC04                       	smpsPSGAlterVol     $04
0008D3C1 E701                       	dc.b	smpsNoAttack, $01
0008D3C3 EC07                       	smpsPSGAlterVol     $07
0008D3C5 8003                       	dc.b	nRst, $03
0008D3C7 ECF5                       	smpsPSGAlterVol     $F5
0008D3C9 9206                       	dc.b	nF1, $06
0008D3CB EC04                       	smpsPSGAlterVol     $04
0008D3CD E701                       	dc.b	smpsNoAttack, $01
0008D3CF EC07                       	smpsPSGAlterVol     $07
0008D3D1 8006                       	dc.b	nRst, $06
0008D3D3 E100                       	smpsAlterNote       $00
0008D3D5 01                         	dc.b	$01
0008D3D6 E104                       	smpsAlterNote       $04
0008D3D8 01                         	dc.b	$01
0008D3D9 E100                       	smpsAlterNote       $00
0008D3DB 01                         	dc.b	$01
0008D3DC E1FA                       	smpsAlterNote       $FA
0008D3DE 01                         	dc.b	$01
0008D3DF E1FD                       	smpsAlterNote       $FD
0008D3E1 ECF5                       	smpsPSGAlterVol     $F5
0008D3E3 9206                       	dc.b	nF1, $06
0008D3E5 EC04                       	smpsPSGAlterVol     $04
0008D3E7 E701                       	dc.b	smpsNoAttack, $01
0008D3E9 EC07                       	smpsPSGAlterVol     $07
0008D3EB 8003                       	dc.b	nRst, $03
0008D3ED ECF5                       	smpsPSGAlterVol     $F5
0008D3EF 9107                       	dc.b	nE1, $07
0008D3F1 EC0B                       	smpsPSGAlterVol     $0B
0008D3F3 8006                       	dc.b	nRst, $06
0008D3F5 E100                       	smpsAlterNote       $00
0008D3F7 01                         	dc.b	$01
0008D3F8 E103                       	smpsAlterNote       $03
0008D3FA 0101                       	dc.b	$01, $01
0008D3FC E1FD                       	smpsAlterNote       $FD
0008D3FE 01                         	dc.b	$01
0008D3FF ECF5                       	smpsPSGAlterVol     $F5
0008D401 9207                       	dc.b	nF1, $07
0008D403 EC0B                       	smpsPSGAlterVol     $0B
0008D405 8004                       	dc.b	nRst, $04
0008D407 ECF5                       	smpsPSGAlterVol     $F5
0008D409 9206                       	dc.b	nF1, $06
0008D40B EC04                       	smpsPSGAlterVol     $04
0008D40D E701                       	dc.b	smpsNoAttack, $01
0008D40F EC07                       	smpsPSGAlterVol     $07
0008D411 8006                       	dc.b	nRst, $06
0008D413 E103                       	smpsAlterNote       $03
0008D415 01                         	dc.b	$01
0008D416 E104                       	smpsAlterNote       $04
0008D418 01                         	dc.b	$01
0008D419 E100                       	smpsAlterNote       $00
0008D41B 01                         	dc.b	$01
0008D41C E1FB                       	smpsAlterNote       $FB
0008D41E 01                         	dc.b	$01
0008D41F E1FD                       	smpsAlterNote       $FD
0008D421 ECF5                       	smpsPSGAlterVol     $F5
0008D423 9406                       	dc.b	nG1, $06
0008D425 EC04                       	smpsPSGAlterVol     $04
0008D427 E701                       	dc.b	smpsNoAttack, $01
0008D429 EC07                       	smpsPSGAlterVol     $07
0008D42B 8003                       	dc.b	nRst, $03
0008D42D ECF5                       	smpsPSGAlterVol     $F5
0008D42F 9406                       	dc.b	nG1, $06
0008D431 EC04                       	smpsPSGAlterVol     $04
0008D433 E701                       	dc.b	smpsNoAttack, $01
0008D435 EC07                       	smpsPSGAlterVol     $07
0008D437 8006                       	dc.b	nRst, $06
0008D439 E100                       	smpsAlterNote       $00
0008D43B 01                         	dc.b	$01
0008D43C E104                       	smpsAlterNote       $04
0008D43E 01                         	dc.b	$01
0008D43F E100                       	smpsAlterNote       $00
0008D441 01                         	dc.b	$01
0008D442 E1FD                       	smpsAlterNote       $FD
0008D444 01                         	dc.b	$01
0008D445 ECF5                       	smpsPSGAlterVol     $F5
0008D447 9206                       	dc.b	nF1, $06
0008D449 EC04                       	smpsPSGAlterVol     $04
0008D44B E701                       	dc.b	smpsNoAttack, $01
0008D44D EC07                       	smpsPSGAlterVol     $07
0008D44F 8003                       	dc.b	nRst, $03
0008D451 ECF5                       	smpsPSGAlterVol     $F5
0008D453 9207                       	dc.b	nF1, $07
0008D455 EC0B                       	smpsPSGAlterVol     $0B
0008D457 8007                       	dc.b	nRst, $07
0008D459 E103                       	smpsAlterNote       $03
0008D45B 0101                       	dc.b	$01, $01
0008D45D E1FD                       	smpsAlterNote       $FD
0008D45F 01                         	dc.b	$01
0008D460 E1FA                       	smpsAlterNote       $FA
0008D462 01                         	dc.b	$01
0008D463 E1FD                       	smpsAlterNote       $FD
0008D465 ECF5                       	smpsPSGAlterVol     $F5
0008D467 9206                       	dc.b	nF1, $06
0008D469 EC0B                       	smpsPSGAlterVol     $0B
0008D46B 8004                       	dc.b	nRst, $04
0008D46D ECF5                       	smpsPSGAlterVol     $F5
0008D46F 9206                       	dc.b	nF1, $06
0008D471 EC04                       	smpsPSGAlterVol     $04
0008D473 E701                       	dc.b	smpsNoAttack, $01
0008D475 EC07                       	smpsPSGAlterVol     $07
0008D477 8006                       	dc.b	nRst, $06
0008D479 E100                       	smpsAlterNote       $00
0008D47B 01                         	dc.b	$01
0008D47C E104                       	smpsAlterNote       $04
0008D47E 01                         	dc.b	$01
0008D47F E100                       	smpsAlterNote       $00
0008D481 01                         	dc.b	$01
0008D482 E1FA                       	smpsAlterNote       $FA
0008D484 01                         	dc.b	$01
0008D485 E1FD                       	smpsAlterNote       $FD
0008D487 ECF5                       	smpsPSGAlterVol     $F5
0008D489 9206                       	dc.b	nF1, $06
0008D48B EC04                       	smpsPSGAlterVol     $04
0008D48D E701                       	dc.b	smpsNoAttack, $01
0008D48F EC07                       	smpsPSGAlterVol     $07
0008D491 8003                       	dc.b	nRst, $03
0008D493 ECF5                       	smpsPSGAlterVol     $F5
0008D495 9207                       	dc.b	nF1, $07
0008D497 EC0B                       	smpsPSGAlterVol     $0B
0008D499 8006                       	dc.b	nRst, $06
0008D49B E100                       	smpsAlterNote       $00
0008D49D 01                         	dc.b	$01
0008D49E E103                       	smpsAlterNote       $03
0008D4A0 0101                       	dc.b	$01, $01
0008D4A2 E1FD                       	smpsAlterNote       $FD
0008D4A4 01                         	dc.b	$01
0008D4A5 ECF5                       	smpsPSGAlterVol     $F5
0008D4A7 9207                       	dc.b	nF1, $07
0008D4A9 EC0B                       	smpsPSGAlterVol     $0B
0008D4AB 8004                       	dc.b	nRst, $04
0008D4AD ECF5                       	smpsPSGAlterVol     $F5
0008D4AF 9206                       	dc.b	nF1, $06
0008D4B1 EC0B                       	smpsPSGAlterVol     $0B
0008D4B3 8007                       	dc.b	nRst, $07
0008D4B5 E103                       	smpsAlterNote       $03
0008D4B7 0101                       	dc.b	$01, $01
0008D4B9 E100                       	smpsAlterNote       $00
0008D4BB 01                         	dc.b	$01
0008D4BC E1FA                       	smpsAlterNote       $FA
0008D4BE 01                         	dc.b	$01
0008D4BF E1FD                       	smpsAlterNote       $FD
0008D4C1 ECF5                       	smpsPSGAlterVol     $F5
0008D4C3 9206                       	dc.b	nF1, $06
0008D4C5 EC04                       	smpsPSGAlterVol     $04
0008D4C7 E701                       	dc.b	smpsNoAttack, $01
0008D4C9 EC07                       	smpsPSGAlterVol     $07
0008D4CB 8003                       	dc.b	nRst, $03
0008D4CD ECF5                       	smpsPSGAlterVol     $F5
0008D4CF 9206                       	dc.b	nF1, $06
0008D4D1 EC04                       	smpsPSGAlterVol     $04
0008D4D3 E701                       	dc.b	smpsNoAttack, $01
0008D4D5 EC07                       	smpsPSGAlterVol     $07
0008D4D7 8006                       	dc.b	nRst, $06
0008D4D9 E100                       	smpsAlterNote       $00
0008D4DB 01                         	dc.b	$01
0008D4DC E104                       	smpsAlterNote       $04
0008D4DE 01                         	dc.b	$01
0008D4DF E100                       	smpsAlterNote       $00
0008D4E1 01                         	dc.b	$01
0008D4E2 E1FD                       	smpsAlterNote       $FD
0008D4E4 01                         	dc.b	$01
0008D4E5 ECF5                       	smpsPSGAlterVol     $F5
0008D4E7 9206                       	dc.b	nF1, $06
0008D4E9 EC04                       	smpsPSGAlterVol     $04
0008D4EB E701                       	dc.b	smpsNoAttack, $01
0008D4ED EC07                       	smpsPSGAlterVol     $07
0008D4EF 8003                       	dc.b	nRst, $03
0008D4F1 ECF5                       	smpsPSGAlterVol     $F5
0008D4F3 9207                       	dc.b	nF1, $07
0008D4F5 EC0B                       	smpsPSGAlterVol     $0B
0008D4F7 8007                       	dc.b	nRst, $07
0008D4F9 E104                       	smpsAlterNote       $04
0008D4FB 0101                       	dc.b	$01, $01
0008D4FD E1FB                       	smpsAlterNote       $FB
0008D4FF 01                         	dc.b	$01
0008D500 E1F6                       	smpsAlterNote       $F6
0008D502 0101                       	dc.b	$01, $01
0008D504 E1FF                       	smpsAlterNote       $FF
0008D506 01                         	dc.b	$01
0008D507 E105                       	smpsAlterNote       $05
0008D509 01                         	dc.b	$01
0008D50A E104                       	smpsAlterNote       $04
0008D50C 01                         	dc.b	$01
0008D50D E1FB                       	smpsAlterNote       $FB
0008D50F 01                         	dc.b	$01
0008D510 E1F5                       	smpsAlterNote       $F5
0008D512 01                         	dc.b	$01
0008D513 E1FC                       	smpsAlterNote       $FC
0008D515 ECF5                       	smpsPSGAlterVol     $F5
0008D517 8B0E                       	dc.b	nBb0, $0E
0008D519 E102                       	smpsAlterNote       $02
0008D51B EC0B                       	smpsPSGAlterVol     $0B
0008D51D 8001                       	dc.b	nRst, $01
0008D51F E101                       	smpsAlterNote       $01
0008D521 01                         	dc.b	$01
0008D522 E1FC                       	smpsAlterNote       $FC
0008D524 01                         	dc.b	$01
0008D525 E1F9                       	smpsAlterNote       $F9
0008D527 0101                       	dc.b	$01, $01
0008D529 E1FF                       	smpsAlterNote       $FF
0008D52B 01                         	dc.b	$01
0008D52C E102                       	smpsAlterNote       $02
0008D52E 01                         	dc.b	$01
0008D52F E1FF                       	smpsAlterNote       $FF
0008D531 01                         	dc.b	$01
0008D532 E1FC                       	smpsAlterNote       $FC
0008D534 01                         	dc.b	$01
0008D535 E1F8                       	smpsAlterNote       $F8
0008D537 01                         	dc.b	$01
0008D538 E1FC                       	smpsAlterNote       $FC
0008D53A 01                         	dc.b	$01
0008D53B E101                       	smpsAlterNote       $01
0008D53D 01                         	dc.b	$01
0008D53E E102                       	smpsAlterNote       $02
0008D540 01                         	dc.b	$01
0008D541 E1FF                       	smpsAlterNote       $FF
0008D543 01                         	dc.b	$01
0008D544 E1FB                       	smpsAlterNote       $FB
0008D546 ECF5                       	smpsPSGAlterVol     $F5
0008D548 8D0D                       	dc.b	nC1, $0D
0008D54A E101                       	smpsAlterNote       $01
0008D54C EC0B                       	smpsPSGAlterVol     $0B
0008D54E 8001                       	dc.b	nRst, $01
0008D550 E102                       	smpsAlterNote       $02
0008D552 01                         	dc.b	$01
0008D553 E1FF                       	smpsAlterNote       $FF
0008D555 01                         	dc.b	$01
0008D556 E1F9                       	smpsAlterNote       $F9
0008D558 0101                       	dc.b	$01, $01
0008D55A E1FC                       	smpsAlterNote       $FC
0008D55C 01                         	dc.b	$01
0008D55D E101                       	smpsAlterNote       $01
0008D55F 0101                       	dc.b	$01, $01
0008D561 E1FC                       	smpsAlterNote       $FC
0008D563 01                         	dc.b	$01
0008D564 E1F9                       	smpsAlterNote       $F9
0008D566 0101                       	dc.b	$01, $01
0008D568 E1FF                       	smpsAlterNote       $FF
0008D56A 01                         	dc.b	$01
0008D56B E102                       	smpsAlterNote       $02
0008D56D 01                         	dc.b	$01
0008D56E E101                       	smpsAlterNote       $01
0008D570 01                         	dc.b	$01
0008D571 E1FC                       	smpsAlterNote       $FC
0008D573 ECF5                       	smpsPSGAlterVol     $F5
0008D575 8F0D                       	dc.b	nD1, $0D
0008D577 E1FF                       	smpsAlterNote       $FF
0008D579 EC04                       	smpsPSGAlterVol     $04
0008D57B E701                       	dc.b	smpsNoAttack, $01
0008D57D EC07                       	smpsPSGAlterVol     $07
0008D57F E103                       	smpsAlterNote       $03
0008D581 8001                       	dc.b	nRst, $01
0008D583 E102                       	smpsAlterNote       $02
0008D585 01                         	dc.b	$01
0008D586 E1FD                       	smpsAlterNote       $FD
0008D588 01                         	dc.b	$01
0008D589 E1F9                       	smpsAlterNote       $F9
0008D58B 01                         	dc.b	$01
0008D58C E1FD                       	smpsAlterNote       $FD
0008D58E 01                         	dc.b	$01
0008D58F E100                       	smpsAlterNote       $00
0008D591 01                         	dc.b	$01
0008D592 E103                       	smpsAlterNote       $03
0008D594 01                         	dc.b	$01
0008D595 E100                       	smpsAlterNote       $00
0008D597 01                         	dc.b	$01
0008D598 E1FA                       	smpsAlterNote       $FA
0008D59A 01                         	dc.b	$01
0008D59B E1F9                       	smpsAlterNote       $F9
0008D59D 01                         	dc.b	$01
0008D59E E1FD                       	smpsAlterNote       $FD
0008D5A0 01                         	dc.b	$01
0008D5A1 E102                       	smpsAlterNote       $02
0008D5A3 0101                       	dc.b	$01, $01
0008D5A5 E100                       	smpsAlterNote       $00
0008D5A7 01                         	dc.b	$01
0008D5A8 E1FD                       	smpsAlterNote       $FD
0008D5AA ECF5                       	smpsPSGAlterVol     $F5
0008D5AC 910D                       	dc.b	nE1, $0D
0008D5AE E103                       	smpsAlterNote       $03
0008D5B0 EC0B                       	smpsPSGAlterVol     $0B
0008D5B2 8001 01                    	dc.b	nRst, $01, $01
0008D5B5 E100                       	smpsAlterNote       $00
0008D5B7 01                         	dc.b	$01
0008D5B8 E1FA                       	smpsAlterNote       $FA
0008D5BA 0101                       	dc.b	$01, $01
0008D5BC E100                       	smpsAlterNote       $00
0008D5BE 01                         	dc.b	$01
0008D5BF E103                       	smpsAlterNote       $03
0008D5C1 01                         	dc.b	$01
0008D5C2 E1FD                       	smpsAlterNote       $FD
0008D5C4 ECF5                       	smpsPSGAlterVol     $F5
0008D5C6 9206                       	dc.b	nF1, $06
0008D5C8 EC04                       	smpsPSGAlterVol     $04
0008D5CA E701                       	dc.b	smpsNoAttack, $01
0008D5CC EC07                       	smpsPSGAlterVol     $07
0008D5CE 8003                       	dc.b	nRst, $03
0008D5D0 ECF5                       	smpsPSGAlterVol     $F5
0008D5D2 9207                       	dc.b	nF1, $07
0008D5D4 EC0B                       	smpsPSGAlterVol     $0B
0008D5D6 8006                       	dc.b	nRst, $06
0008D5D8 E100                       	smpsAlterNote       $00
0008D5DA 01                         	dc.b	$01
0008D5DB E103                       	smpsAlterNote       $03
0008D5DD 0101                       	dc.b	$01, $01
0008D5DF E1FD                       	smpsAlterNote       $FD
0008D5E1 01                         	dc.b	$01
0008D5E2 ECF5                       	smpsPSGAlterVol     $F5
0008D5E4 9407                       	dc.b	nG1, $07
0008D5E6 EC0B                       	smpsPSGAlterVol     $0B
0008D5E8 8004                       	dc.b	nRst, $04
0008D5EA ECF5                       	smpsPSGAlterVol     $F5
0008D5EC 9406                       	dc.b	nG1, $06
0008D5EE EC04                       	smpsPSGAlterVol     $04
0008D5F0 E701                       	dc.b	smpsNoAttack, $01
0008D5F2 EC07                       	smpsPSGAlterVol     $07
0008D5F4 8006                       	dc.b	nRst, $06
0008D5F6 E103                       	smpsAlterNote       $03
0008D5F8 01                         	dc.b	$01
0008D5F9 E104                       	smpsAlterNote       $04
0008D5FB 01                         	dc.b	$01
0008D5FC E100                       	smpsAlterNote       $00
0008D5FE 01                         	dc.b	$01
0008D5FF E1F9                       	smpsAlterNote       $F9
0008D601 01                         	dc.b	$01
0008D602 E1FD                       	smpsAlterNote       $FD
0008D604 ECF5                       	smpsPSGAlterVol     $F5
0008D606 9206                       	dc.b	nF1, $06
0008D608 EC04                       	smpsPSGAlterVol     $04
0008D60A E701                       	dc.b	smpsNoAttack, $01
0008D60C EC07                       	smpsPSGAlterVol     $07
0008D60E 8003                       	dc.b	nRst, $03
0008D610 ECF5                       	smpsPSGAlterVol     $F5
0008D612 9206                       	dc.b	nF1, $06
0008D614 EC04                       	smpsPSGAlterVol     $04
0008D616 E701                       	dc.b	smpsNoAttack, $01
0008D618 EC07                       	smpsPSGAlterVol     $07
0008D61A 8006                       	dc.b	nRst, $06
0008D61C E100                       	smpsAlterNote       $00
0008D61E 01                         	dc.b	$01
0008D61F E104                       	smpsAlterNote       $04
0008D621 01                         	dc.b	$01
0008D622 E103                       	smpsAlterNote       $03
0008D624 01                         	dc.b	$01
0008D625 E1FD                       	smpsAlterNote       $FD
0008D627 01                         	dc.b	$01
0008D628 ECF5                       	smpsPSGAlterVol     $F5
0008D62A 9407                       	dc.b	nG1, $07
0008D62C EC0B                       	smpsPSGAlterVol     $0B
0008D62E 8004                       	dc.b	nRst, $04
0008D630 ECF5                       	smpsPSGAlterVol     $F5
0008D632 9406                       	dc.b	nG1, $06
0008D634 EC0B                       	smpsPSGAlterVol     $0B
0008D636 8007                       	dc.b	nRst, $07
0008D638 E103                       	smpsAlterNote       $03
0008D63A 0101                       	dc.b	$01, $01
0008D63C E100                       	smpsAlterNote       $00
0008D63E 01                         	dc.b	$01
0008D63F E1F9                       	smpsAlterNote       $F9
0008D641 01                         	dc.b	$01
0008D642 E1FD                       	smpsAlterNote       $FD
0008D644 ECF5                       	smpsPSGAlterVol     $F5
0008D646 9206                       	dc.b	nF1, $06
0008D648 EC04                       	smpsPSGAlterVol     $04
0008D64A E701                       	dc.b	smpsNoAttack, $01
0008D64C EC07                       	smpsPSGAlterVol     $07
0008D64E 8003                       	dc.b	nRst, $03
0008D650 ECF5                       	smpsPSGAlterVol     $F5
0008D652 9206                       	dc.b	nF1, $06
0008D654 EC04                       	smpsPSGAlterVol     $04
0008D656 E701                       	dc.b	smpsNoAttack, $01
0008D658 EC07                       	smpsPSGAlterVol     $07
0008D65A 8006                       	dc.b	nRst, $06
0008D65C E100                       	smpsAlterNote       $00
0008D65E 01                         	dc.b	$01
0008D65F E104                       	smpsAlterNote       $04
0008D661 01                         	dc.b	$01
0008D662 E100                       	smpsAlterNote       $00
0008D664 01                         	dc.b	$01
0008D665 E1FB                       	smpsAlterNote       $FB
0008D667 01                         	dc.b	$01
0008D668 E1FD                       	smpsAlterNote       $FD
0008D66A ECF5                       	smpsPSGAlterVol     $F5
0008D66C 9406                       	dc.b	nG1, $06
0008D66E EC04                       	smpsPSGAlterVol     $04
0008D670 E701                       	dc.b	smpsNoAttack, $01
0008D672 EC07                       	smpsPSGAlterVol     $07
0008D674 8003                       	dc.b	nRst, $03
0008D676 ECF5                       	smpsPSGAlterVol     $F5
0008D678 9407                       	dc.b	nG1, $07
0008D67A EC0B                       	smpsPSGAlterVol     $0B
0008D67C 8006                       	dc.b	nRst, $06
0008D67E E100                       	smpsAlterNote       $00
0008D680 01                         	dc.b	$01
0008D681 E103                       	smpsAlterNote       $03
0008D683 0101                       	dc.b	$01, $01
0008D685 E1FD                       	smpsAlterNote       $FD
0008D687 01                         	dc.b	$01
0008D688 ECF5                       	smpsPSGAlterVol     $F5
0008D68A 9207                       	dc.b	nF1, $07
0008D68C EC0B                       	smpsPSGAlterVol     $0B
0008D68E 8004                       	dc.b	nRst, $04
0008D690 ECF5                       	smpsPSGAlterVol     $F5
0008D692 9206                       	dc.b	nF1, $06
0008D694 EC04                       	smpsPSGAlterVol     $04
0008D696 E701                       	dc.b	smpsNoAttack, $01
0008D698 ECFC                       	smpsPSGAlterVol     $FC
0008D69A E1FC                       	smpsAlterNote       $FC
0008D69C 9006 8B03                  	dc.b	nEb1, $06, nBb0, $03
0008D6A0 EC04                       	smpsPSGAlterVol     $04
0008D6A2 E701                       	dc.b	smpsNoAttack, $01
0008D6A4 ECFC                       	smpsPSGAlterVol     $FC
0008D6A6 9003                       	dc.b	nEb1, $03
0008D6A8 E1FD                       	smpsAlterNote       $FD
0008D6AA 9403                       	dc.b	nG1, $03
0008D6AC EC04                       	smpsPSGAlterVol     $04
0008D6AE E701                       	dc.b	smpsNoAttack, $01
0008D6B0 E1FE                       	smpsAlterNote       $FE
0008D6B2 ECFC                       	smpsPSGAlterVol     $FC
0008D6B4 9703 9703                  	dc.b	nBb1, $03, nBb1, $03
0008D6B8 EC04                       	smpsPSGAlterVol     $04
0008D6BA E701                       	dc.b	smpsNoAttack, $01
0008D6BC EC07                       	smpsPSGAlterVol     $07
0008D6BE 8009                       	dc.b	nRst, $09
0008D6C0 E100                       	smpsAlterNote       $00
0008D6C2 01                         	dc.b	$01
0008D6C3 F6F5 19                    	smpsJump            music84_Jump07
0008D6C6                            
0008D6C6                            ; PSG2 Data
0008D6C6                            music84_PSG2:
0008D6C6 E1FC                       	smpsAlterNote       $FC
0008D6C8 EC04                       	smpsPSGAlterVol     $04
0008D6CA 8F03                       	dc.b	nD1, $03
0008D6CC E1FD                       	smpsAlterNote       $FD
0008D6CE 9203                       	dc.b	nF1, $03
0008D6D0 EC04                       	smpsPSGAlterVol     $04
0008D6D2 E701                       	dc.b	smpsNoAttack, $01
0008D6D4 E1FE                       	smpsAlterNote       $FE
0008D6D6 ECFC                       	smpsPSGAlterVol     $FC
0008D6D8 9603                       	dc.b	nA1, $03
0008D6DA E1FD                       	smpsAlterNote       $FD
0008D6DC 9103                       	dc.b	nE1, $03
0008D6DE EC04                       	smpsPSGAlterVol     $04
0008D6E0 E701                       	dc.b	smpsNoAttack, $01
0008D6E2 ECFC                       	smpsPSGAlterVol     $FC
0008D6E4 9403                       	dc.b	nG1, $03
0008D6E6 E1FE                       	smpsAlterNote       $FE
0008D6E8 9703                       	dc.b	nBb1, $03
0008D6EA EC04                       	smpsPSGAlterVol     $04
0008D6EC E701                       	dc.b	smpsNoAttack, $01
0008D6EE E1FF                       	smpsAlterNote       $FF
0008D6F0 ECFC                       	smpsPSGAlterVol     $FC
0008D6F2 9B02                       	dc.b	nD2, $02
0008D6F4 EC04                       	smpsPSGAlterVol     $04
0008D6F6 E701                       	dc.b	smpsNoAttack, $01
0008D6F8 ECFC                       	smpsPSGAlterVol     $FC
0008D6FA E1FE                       	smpsAlterNote       $FE
0008D6FC 9A03                       	dc.b	nCs2, $03
0008D6FE EC0B                       	smpsPSGAlterVol     $0B
0008D700 800A                       	dc.b	nRst, $0A
0008D702 E102                       	smpsAlterNote       $02
0008D704 01                         	dc.b	$01
0008D705 E10A                       	smpsAlterNote       $0A
0008D707 01                         	dc.b	$01
0008D708 E102                       	smpsAlterNote       $02
0008D70A 01                         	dc.b	$01
0008D70B E1FC                       	smpsAlterNote       $FC
0008D70D 01                         	dc.b	$01
0008D70E E10A                       	smpsAlterNote       $0A
0008D710 01                         	dc.b	$01
0008D711 E1FC                       	smpsAlterNote       $FC
0008D713 01                         	dc.b	$01
0008D714 E108                       	smpsAlterNote       $08
0008D716 01                         	dc.b	$01
0008D717 E10A                       	smpsAlterNote       $0A
0008D719 01                         	dc.b	$01
0008D71A E102                       	smpsAlterNote       $02
0008D71C 01                         	dc.b	$01
0008D71D E1F7                       	smpsAlterNote       $F7
0008D71F 0101                       	dc.b	$01, $01
0008D721 E102                       	smpsAlterNote       $02
0008D723 01                         	dc.b	$01
0008D724 E108                       	smpsAlterNote       $08
0008D726 0101                       	dc.b	$01, $01
0008D728 E1FC                       	smpsAlterNote       $FC
0008D72A 01                         	dc.b	$01
0008D72B E10A                       	smpsAlterNote       $0A
0008D72D 01                         	dc.b	$01
0008D72E E1F7                       	smpsAlterNote       $F7
0008D730 01                         	dc.b	$01
0008D731 E102                       	smpsAlterNote       $02
0008D733 01                         	dc.b	$01
0008D734 E10A                       	smpsAlterNote       $0A
0008D736 01                         	dc.b	$01
0008D737 E102                       	smpsAlterNote       $02
0008D739 01                         	dc.b	$01
0008D73A E1FC                       	smpsAlterNote       $FC
0008D73C 01                         	dc.b	$01
0008D73D                            
0008D73D                            music84_Jump06:
0008D73D E10A                       	smpsAlterNote       $0A
0008D73F 8001                       	dc.b	nRst, $01
0008D741 E1FC                       	smpsAlterNote       $FC
0008D743 01                         	dc.b	$01
0008D744 E108                       	smpsAlterNote       $08
0008D746 01                         	dc.b	$01
0008D747 E10A                       	smpsAlterNote       $0A
0008D749 01                         	dc.b	$01
0008D74A E1FC                       	smpsAlterNote       $FC
0008D74C ECF5                       	smpsPSGAlterVol     $F5
0008D74E 8F06                       	dc.b	nD1, $06
0008D750 EC04                       	smpsPSGAlterVol     $04
0008D752 E701                       	dc.b	smpsNoAttack, $01
0008D754 EC07                       	smpsPSGAlterVol     $07
0008D756 8003                       	dc.b	nRst, $03
0008D758 ECF5                       	smpsPSGAlterVol     $F5
0008D75A 8F06                       	dc.b	nD1, $06
0008D75C EC04                       	smpsPSGAlterVol     $04
0008D75E E701                       	dc.b	smpsNoAttack, $01
0008D760 EC07                       	smpsPSGAlterVol     $07
0008D762 8006                       	dc.b	nRst, $06
0008D764 E1FF                       	smpsAlterNote       $FF
0008D766 01                         	dc.b	$01
0008D767 E102                       	smpsAlterNote       $02
0008D769 01                         	dc.b	$01
0008D76A E1FF                       	smpsAlterNote       $FF
0008D76C 01                         	dc.b	$01
0008D76D E1F9                       	smpsAlterNote       $F9
0008D76F 01                         	dc.b	$01
0008D770 E1FC                       	smpsAlterNote       $FC
0008D772 ECF5                       	smpsPSGAlterVol     $F5
0008D774 9006                       	dc.b	nEb1, $06
0008D776 EC04                       	smpsPSGAlterVol     $04
0008D778 E701                       	dc.b	smpsNoAttack, $01
0008D77A EC07                       	smpsPSGAlterVol     $07
0008D77C 8003                       	dc.b	nRst, $03
0008D77E ECF5                       	smpsPSGAlterVol     $F5
0008D780 9007                       	dc.b	nEb1, $07
0008D782 EC0B                       	smpsPSGAlterVol     $0B
0008D784 8006                       	dc.b	nRst, $06
0008D786 E1FF                       	smpsAlterNote       $FF
0008D788 01                         	dc.b	$01
0008D789 E103                       	smpsAlterNote       $03
0008D78B 0101                       	dc.b	$01, $01
0008D78D E1FC                       	smpsAlterNote       $FC
0008D78F 01                         	dc.b	$01
0008D790 ECF5                       	smpsPSGAlterVol     $F5
0008D792 8F07                       	dc.b	nD1, $07
0008D794 EC0B                       	smpsPSGAlterVol     $0B
0008D796 8004                       	dc.b	nRst, $04
0008D798 ECF5                       	smpsPSGAlterVol     $F5
0008D79A 8F06                       	dc.b	nD1, $06
0008D79C EC04                       	smpsPSGAlterVol     $04
0008D79E E701                       	dc.b	smpsNoAttack, $01
0008D7A0 EC07                       	smpsPSGAlterVol     $07
0008D7A2 8006                       	dc.b	nRst, $06
0008D7A4 E102                       	smpsAlterNote       $02
0008D7A6 01                         	dc.b	$01
0008D7A7 E103                       	smpsAlterNote       $03
0008D7A9 01                         	dc.b	$01
0008D7AA E1FF                       	smpsAlterNote       $FF
0008D7AC 01                         	dc.b	$01
0008D7AD E1F9                       	smpsAlterNote       $F9
0008D7AF 01                         	dc.b	$01
0008D7B0 E1FC                       	smpsAlterNote       $FC
0008D7B2 ECF5                       	smpsPSGAlterVol     $F5
0008D7B4 8F06                       	dc.b	nD1, $06
0008D7B6 EC04                       	smpsPSGAlterVol     $04
0008D7B8 E701                       	dc.b	smpsNoAttack, $01
0008D7BA EC07                       	smpsPSGAlterVol     $07
0008D7BC 8003                       	dc.b	nRst, $03
0008D7BE ECF5                       	smpsPSGAlterVol     $F5
0008D7C0 8F06                       	dc.b	nD1, $06
0008D7C2 EC04                       	smpsPSGAlterVol     $04
0008D7C4 E701                       	dc.b	smpsNoAttack, $01
0008D7C6 EC07                       	smpsPSGAlterVol     $07
0008D7C8 8006                       	dc.b	nRst, $06
0008D7CA E1FF                       	smpsAlterNote       $FF
0008D7CC 01                         	dc.b	$01
0008D7CD E103                       	smpsAlterNote       $03
0008D7CF 01                         	dc.b	$01
0008D7D0 E1FF                       	smpsAlterNote       $FF
0008D7D2 01                         	dc.b	$01
0008D7D3 E1FC                       	smpsAlterNote       $FC
0008D7D5 01                         	dc.b	$01
0008D7D6 ECF5                       	smpsPSGAlterVol     $F5
0008D7D8 8F06                       	dc.b	nD1, $06
0008D7DA EC04                       	smpsPSGAlterVol     $04
0008D7DC E701                       	dc.b	smpsNoAttack, $01
0008D7DE EC07                       	smpsPSGAlterVol     $07
0008D7E0 8003                       	dc.b	nRst, $03
0008D7E2 ECF5                       	smpsPSGAlterVol     $F5
0008D7E4 8F07                       	dc.b	nD1, $07
0008D7E6 EC0B                       	smpsPSGAlterVol     $0B
0008D7E8 8007                       	dc.b	nRst, $07
0008D7EA E101                       	smpsAlterNote       $01
0008D7EC 0101                       	dc.b	$01, $01
0008D7EE E1FC                       	smpsAlterNote       $FC
0008D7F0 01                         	dc.b	$01
0008D7F1 E1F9                       	smpsAlterNote       $F9
0008D7F3 01                         	dc.b	$01
0008D7F4 E1FC                       	smpsAlterNote       $FC
0008D7F6 ECF5                       	smpsPSGAlterVol     $F5
0008D7F8 9006                       	dc.b	nEb1, $06
0008D7FA EC0B                       	smpsPSGAlterVol     $0B
0008D7FC 8004                       	dc.b	nRst, $04
0008D7FE ECF5                       	smpsPSGAlterVol     $F5
0008D800 9006                       	dc.b	nEb1, $06
0008D802 EC04                       	smpsPSGAlterVol     $04
0008D804 E701                       	dc.b	smpsNoAttack, $01
0008D806 EC07                       	smpsPSGAlterVol     $07
0008D808 8006                       	dc.b	nRst, $06
0008D80A E100                       	smpsAlterNote       $00
0008D80C 01                         	dc.b	$01
0008D80D E102                       	smpsAlterNote       $02
0008D80F 01                         	dc.b	$01
0008D810 E100                       	smpsAlterNote       $00
0008D812 01                         	dc.b	$01
0008D813 E1FD                       	smpsAlterNote       $FD
0008D815 01                         	dc.b	$01
0008D816 E1FF                       	smpsAlterNote       $FF
0008D818 ECF5                       	smpsPSGAlterVol     $F5
0008D81A 9B06                       	dc.b	nD2, $06
0008D81C EC04                       	smpsPSGAlterVol     $04
0008D81E E701                       	dc.b	smpsNoAttack, $01
0008D820 EC07                       	smpsPSGAlterVol     $07
0008D822 8003                       	dc.b	nRst, $03
0008D824 ECF5                       	smpsPSGAlterVol     $F5
0008D826 9B07                       	dc.b	nD2, $07
0008D828 EC0B                       	smpsPSGAlterVol     $0B
0008D82A 8006                       	dc.b	nRst, $06
0008D82C E102                       	smpsAlterNote       $02
0008D82E 01                         	dc.b	$01
0008D82F E106                       	smpsAlterNote       $06
0008D831 01                         	dc.b	$01
0008D832 E105                       	smpsAlterNote       $05
0008D834 01                         	dc.b	$01
0008D835 E1FF                       	smpsAlterNote       $FF
0008D837 01                         	dc.b	$01
0008D838 ECF5                       	smpsPSGAlterVol     $F5
0008D83A 9B07                       	dc.b	nD2, $07
0008D83C EC0B                       	smpsPSGAlterVol     $0B
0008D83E 8004                       	dc.b	nRst, $04
0008D840 ECF5                       	smpsPSGAlterVol     $F5
0008D842 9B06                       	dc.b	nD2, $06
0008D844 EC0B                       	smpsPSGAlterVol     $0B
0008D846 8007                       	dc.b	nRst, $07
0008D848 E105                       	smpsAlterNote       $05
0008D84A 0101                       	dc.b	$01, $01
0008D84C E102                       	smpsAlterNote       $02
0008D84E 01                         	dc.b	$01
0008D84F E1FC                       	smpsAlterNote       $FC
0008D851 01                         	dc.b	$01
0008D852 E1FF                       	smpsAlterNote       $FF
0008D854 ECF5                       	smpsPSGAlterVol     $F5
0008D856 9B06                       	dc.b	nD2, $06
0008D858 EC04                       	smpsPSGAlterVol     $04
0008D85A E701                       	dc.b	smpsNoAttack, $01
0008D85C EC07                       	smpsPSGAlterVol     $07
0008D85E 8003                       	dc.b	nRst, $03
0008D860 ECF5                       	smpsPSGAlterVol     $F5
0008D862 9B06                       	dc.b	nD2, $06
0008D864 EC04                       	smpsPSGAlterVol     $04
0008D866 E701                       	dc.b	smpsNoAttack, $01
0008D868 EC07                       	smpsPSGAlterVol     $07
0008D86A 8006                       	dc.b	nRst, $06
0008D86C E102                       	smpsAlterNote       $02
0008D86E 01                         	dc.b	$01
0008D86F E106                       	smpsAlterNote       $06
0008D871 01                         	dc.b	$01
0008D872 E102                       	smpsAlterNote       $02
0008D874 01                         	dc.b	$01
0008D875 E1FF                       	smpsAlterNote       $FF
0008D877 01                         	dc.b	$01
0008D878 ECF5                       	smpsPSGAlterVol     $F5
0008D87A 9B06                       	dc.b	nD2, $06
0008D87C EC04                       	smpsPSGAlterVol     $04
0008D87E E701                       	dc.b	smpsNoAttack, $01
0008D880 EC07                       	smpsPSGAlterVol     $07
0008D882 8003                       	dc.b	nRst, $03
0008D884 ECF5                       	smpsPSGAlterVol     $F5
0008D886 9B07                       	dc.b	nD2, $07
0008D888 EC0B                       	smpsPSGAlterVol     $0B
0008D88A 8007                       	dc.b	nRst, $07
0008D88C E105                       	smpsAlterNote       $05
0008D88E 0101                       	dc.b	$01, $01
0008D890 E1FF                       	smpsAlterNote       $FF
0008D892 01                         	dc.b	$01
0008D893 E1FC                       	smpsAlterNote       $FC
0008D895 01                         	dc.b	$01
0008D896 E1FF                       	smpsAlterNote       $FF
0008D898 ECF5                       	smpsPSGAlterVol     $F5
0008D89A 9B06                       	dc.b	nD2, $06
0008D89C EC0B                       	smpsPSGAlterVol     $0B
0008D89E 8004                       	dc.b	nRst, $04
0008D8A0 ECF5                       	smpsPSGAlterVol     $F5
0008D8A2 9B06                       	dc.b	nD2, $06
0008D8A4 EC04                       	smpsPSGAlterVol     $04
0008D8A6 E701                       	dc.b	smpsNoAttack, $01
0008D8A8 EC07                       	smpsPSGAlterVol     $07
0008D8AA 8006                       	dc.b	nRst, $06
0008D8AC E105                       	smpsAlterNote       $05
0008D8AE 01                         	dc.b	$01
0008D8AF E106                       	smpsAlterNote       $06
0008D8B1 01                         	dc.b	$01
0008D8B2 E102                       	smpsAlterNote       $02
0008D8B4 01                         	dc.b	$01
0008D8B5 E1FC                       	smpsAlterNote       $FC
0008D8B7 01                         	dc.b	$01
0008D8B8 E1FF                       	smpsAlterNote       $FF
0008D8BA ECF5                       	smpsPSGAlterVol     $F5
0008D8BC 9B06                       	dc.b	nD2, $06
0008D8BE EC04                       	smpsPSGAlterVol     $04
0008D8C0 E701                       	dc.b	smpsNoAttack, $01
0008D8C2 EC07                       	smpsPSGAlterVol     $07
0008D8C4 8003                       	dc.b	nRst, $03
0008D8C6 ECF5                       	smpsPSGAlterVol     $F5
0008D8C8 9B06                       	dc.b	nD2, $06
0008D8CA EC04                       	smpsPSGAlterVol     $04
0008D8CC E701                       	dc.b	smpsNoAttack, $01
0008D8CE EC07                       	smpsPSGAlterVol     $07
0008D8D0 8006                       	dc.b	nRst, $06
0008D8D2 E102                       	smpsAlterNote       $02
0008D8D4 01                         	dc.b	$01
0008D8D5 E106                       	smpsAlterNote       $06
0008D8D7 01                         	dc.b	$01
0008D8D8 E105                       	smpsAlterNote       $05
0008D8DA 01                         	dc.b	$01
0008D8DB E1FF                       	smpsAlterNote       $FF
0008D8DD 01                         	dc.b	$01
0008D8DE ECF5                       	smpsPSGAlterVol     $F5
0008D8E0 9B07                       	dc.b	nD2, $07
0008D8E2 EC0B                       	smpsPSGAlterVol     $0B
0008D8E4 8004                       	dc.b	nRst, $04
0008D8E6 ECF5                       	smpsPSGAlterVol     $F5
0008D8E8 9B06                       	dc.b	nD2, $06
0008D8EA EC0B                       	smpsPSGAlterVol     $0B
0008D8EC 8007                       	dc.b	nRst, $07
0008D8EE E105                       	smpsAlterNote       $05
0008D8F0 0101                       	dc.b	$01, $01
0008D8F2 E102                       	smpsAlterNote       $02
0008D8F4 01                         	dc.b	$01
0008D8F5 E1FC                       	smpsAlterNote       $FC
0008D8F7 01                         	dc.b	$01
0008D8F8 E1FF                       	smpsAlterNote       $FF
0008D8FA ECF5                       	smpsPSGAlterVol     $F5
0008D8FC 9B06                       	dc.b	nD2, $06
0008D8FE EC04                       	smpsPSGAlterVol     $04
0008D900 E701                       	dc.b	smpsNoAttack, $01
0008D902 EC07                       	smpsPSGAlterVol     $07
0008D904 8003                       	dc.b	nRst, $03
0008D906 ECF5                       	smpsPSGAlterVol     $F5
0008D908 9B06                       	dc.b	nD2, $06
0008D90A EC04                       	smpsPSGAlterVol     $04
0008D90C E701                       	dc.b	smpsNoAttack, $01
0008D90E EC07                       	smpsPSGAlterVol     $07
0008D910 8006                       	dc.b	nRst, $06
0008D912 E102                       	smpsAlterNote       $02
0008D914 01                         	dc.b	$01
0008D915 E106                       	smpsAlterNote       $06
0008D917 01                         	dc.b	$01
0008D918 E102                       	smpsAlterNote       $02
0008D91A 01                         	dc.b	$01
0008D91B E1FF                       	smpsAlterNote       $FF
0008D91D 01                         	dc.b	$01
0008D91E ECF5                       	smpsPSGAlterVol     $F5
0008D920 9B06                       	dc.b	nD2, $06
0008D922 EC04                       	smpsPSGAlterVol     $04
0008D924 E701                       	dc.b	smpsNoAttack, $01
0008D926 EC07                       	smpsPSGAlterVol     $07
0008D928 8003                       	dc.b	nRst, $03
0008D92A ECF5                       	smpsPSGAlterVol     $F5
0008D92C 9B07                       	dc.b	nD2, $07
0008D92E E1FE                       	smpsAlterNote       $FE
0008D930 9706                       	dc.b	nBb1, $06
0008D932 EC04                       	smpsPSGAlterVol     $04
0008D934 E701                       	dc.b	smpsNoAttack, $01
0008D936 ECFC                       	smpsPSGAlterVol     $FC
0008D938 9703                       	dc.b	nBb1, $03
0008D93A EC04                       	smpsPSGAlterVol     $04
0008D93C E701                       	dc.b	smpsNoAttack, $01
0008D93E ECFC                       	smpsPSGAlterVol     $FC
0008D940 9702                       	dc.b	nBb1, $02
0008D942 EC04                       	smpsPSGAlterVol     $04
0008D944 E701                       	dc.b	smpsNoAttack, $01
0008D946 ECFC                       	smpsPSGAlterVol     $FC
0008D948 9606                       	dc.b	nA1, $06
0008D94A EC04                       	smpsPSGAlterVol     $04
0008D94C E701                       	dc.b	smpsNoAttack, $01
0008D94E EC07                       	smpsPSGAlterVol     $07
0008D950 8006                       	dc.b	nRst, $06
0008D952 E101                       	smpsAlterNote       $01
0008D954 01                         	dc.b	$01
0008D955 E107                       	smpsAlterNote       $07
0008D957 01                         	dc.b	$01
0008D958 E101                       	smpsAlterNote       $01
0008D95A 01                         	dc.b	$01
0008D95B E1F8                       	smpsAlterNote       $F8
0008D95D 01                         	dc.b	$01
0008D95E E1F7                       	smpsAlterNote       $F7
0008D960 01                         	dc.b	$01
0008D961 E1FC                       	smpsAlterNote       $FC
0008D963 01                         	dc.b	$01
0008D964 E106                       	smpsAlterNote       $06
0008D966 01                         	dc.b	$01
0008D967 E107                       	smpsAlterNote       $07
0008D969 01                         	dc.b	$01
0008D96A E101                       	smpsAlterNote       $01
0008D96C 01                         	dc.b	$01
0008D96D E1F8                       	smpsAlterNote       $F8
0008D96F 0101                       	dc.b	$01, $01
0008D971 E1FC                       	smpsAlterNote       $FC
0008D973 ECF5                       	smpsPSGAlterVol     $F5
0008D975 8F06                       	dc.b	nD1, $06
0008D977 EC04                       	smpsPSGAlterVol     $04
0008D979 E701                       	dc.b	smpsNoAttack, $01
0008D97B EC07                       	smpsPSGAlterVol     $07
0008D97D 8003                       	dc.b	nRst, $03
0008D97F ECF5                       	smpsPSGAlterVol     $F5
0008D981 8F06                       	dc.b	nD1, $06
0008D983 EC04                       	smpsPSGAlterVol     $04
0008D985 E701                       	dc.b	smpsNoAttack, $01
0008D987 EC07                       	smpsPSGAlterVol     $07
0008D989 8006                       	dc.b	nRst, $06
0008D98B E1FF                       	smpsAlterNote       $FF
0008D98D 01                         	dc.b	$01
0008D98E E102                       	smpsAlterNote       $02
0008D990 01                         	dc.b	$01
0008D991 E101                       	smpsAlterNote       $01
0008D993 01                         	dc.b	$01
0008D994 E1FC                       	smpsAlterNote       $FC
0008D996 01                         	dc.b	$01
0008D997 ECF5                       	smpsPSGAlterVol     $F5
0008D999 9007                       	dc.b	nEb1, $07
0008D99B EC0B                       	smpsPSGAlterVol     $0B
0008D99D 8004                       	dc.b	nRst, $04
0008D99F ECF5                       	smpsPSGAlterVol     $F5
0008D9A1 9006                       	dc.b	nEb1, $06
0008D9A3 EC0B                       	smpsPSGAlterVol     $0B
0008D9A5 8007                       	dc.b	nRst, $07
0008D9A7 E103                       	smpsAlterNote       $03
0008D9A9 0101                       	dc.b	$01, $01
0008D9AB E1FC                       	smpsAlterNote       $FC
0008D9AD 01                         	dc.b	$01
0008D9AE E1F9                       	smpsAlterNote       $F9
0008D9B0 01                         	dc.b	$01
0008D9B1 E1FC                       	smpsAlterNote       $FC
0008D9B3 ECF5                       	smpsPSGAlterVol     $F5
0008D9B5 8F06                       	dc.b	nD1, $06
0008D9B7 EC04                       	smpsPSGAlterVol     $04
0008D9B9 E701                       	dc.b	smpsNoAttack, $01
0008D9BB EC07                       	smpsPSGAlterVol     $07
0008D9BD 8003                       	dc.b	nRst, $03
0008D9BF ECF5                       	smpsPSGAlterVol     $F5
0008D9C1 8F06                       	dc.b	nD1, $06
0008D9C3 EC04                       	smpsPSGAlterVol     $04
0008D9C5 E701                       	dc.b	smpsNoAttack, $01
0008D9C7 EC07                       	smpsPSGAlterVol     $07
0008D9C9 8006                       	dc.b	nRst, $06
0008D9CB E1FF                       	smpsAlterNote       $FF
0008D9CD 01                         	dc.b	$01
0008D9CE E103                       	smpsAlterNote       $03
0008D9D0 01                         	dc.b	$01
0008D9D1 E1FF                       	smpsAlterNote       $FF
0008D9D3 01                         	dc.b	$01
0008D9D4 E1F9                       	smpsAlterNote       $F9
0008D9D6 01                         	dc.b	$01
0008D9D7 E1FC                       	smpsAlterNote       $FC
0008D9D9 ECF5                       	smpsPSGAlterVol     $F5
0008D9DB 8F06                       	dc.b	nD1, $06
0008D9DD EC04                       	smpsPSGAlterVol     $04
0008D9DF E701                       	dc.b	smpsNoAttack, $01
0008D9E1 EC07                       	smpsPSGAlterVol     $07
0008D9E3 8003                       	dc.b	nRst, $03
0008D9E5 ECF5                       	smpsPSGAlterVol     $F5
0008D9E7 8F07                       	dc.b	nD1, $07
0008D9E9 EC0B                       	smpsPSGAlterVol     $0B
0008D9EB 8006                       	dc.b	nRst, $06
0008D9ED E1FF                       	smpsAlterNote       $FF
0008D9EF 01                         	dc.b	$01
0008D9F0 E102                       	smpsAlterNote       $02
0008D9F2 0101                       	dc.b	$01, $01
0008D9F4 E1FC                       	smpsAlterNote       $FC
0008D9F6 01                         	dc.b	$01
0008D9F7 ECF5                       	smpsPSGAlterVol     $F5
0008D9F9 8F07                       	dc.b	nD1, $07
0008D9FB EC0B                       	smpsPSGAlterVol     $0B
0008D9FD 8004                       	dc.b	nRst, $04
0008D9FF ECF5                       	smpsPSGAlterVol     $F5
0008DA01 8F06                       	dc.b	nD1, $06
0008DA03 EC04                       	smpsPSGAlterVol     $04
0008DA05 E701                       	dc.b	smpsNoAttack, $01
0008DA07 EC07                       	smpsPSGAlterVol     $07
0008DA09 8006                       	dc.b	nRst, $06
0008DA0B E101                       	smpsAlterNote       $01
0008DA0D 01                         	dc.b	$01
0008DA0E E102                       	smpsAlterNote       $02
0008DA10 01                         	dc.b	$01
0008DA11 E1FF                       	smpsAlterNote       $FF
0008DA13 01                         	dc.b	$01
0008DA14 E1F9                       	smpsAlterNote       $F9
0008DA16 01                         	dc.b	$01
0008DA17 E1FC                       	smpsAlterNote       $FC
0008DA19 ECF5                       	smpsPSGAlterVol     $F5
0008DA1B 9006                       	dc.b	nEb1, $06
0008DA1D EC04                       	smpsPSGAlterVol     $04
0008DA1F E701                       	dc.b	smpsNoAttack, $01
0008DA21 EC07                       	smpsPSGAlterVol     $07
0008DA23 8003                       	dc.b	nRst, $03
0008DA25 ECF5                       	smpsPSGAlterVol     $F5
0008DA27 9006                       	dc.b	nEb1, $06
0008DA29 EC04                       	smpsPSGAlterVol     $04
0008DA2B E701                       	dc.b	smpsNoAttack, $01
0008DA2D EC07                       	smpsPSGAlterVol     $07
0008DA2F 8006                       	dc.b	nRst, $06
0008DA31 E100                       	smpsAlterNote       $00
0008DA33 01                         	dc.b	$01
0008DA34 E102                       	smpsAlterNote       $02
0008DA36 01                         	dc.b	$01
0008DA37 E100                       	smpsAlterNote       $00
0008DA39 01                         	dc.b	$01
0008DA3A E1FF                       	smpsAlterNote       $FF
0008DA3C 01                         	dc.b	$01
0008DA3D ECF5                       	smpsPSGAlterVol     $F5
0008DA3F 9B06                       	dc.b	nD2, $06
0008DA41 EC04                       	smpsPSGAlterVol     $04
0008DA43 E701                       	dc.b	smpsNoAttack, $01
0008DA45 EC07                       	smpsPSGAlterVol     $07
0008DA47 8003                       	dc.b	nRst, $03
0008DA49 ECF5                       	smpsPSGAlterVol     $F5
0008DA4B 9B07                       	dc.b	nD2, $07
0008DA4D EC0B                       	smpsPSGAlterVol     $0B
0008DA4F 8007                       	dc.b	nRst, $07
0008DA51 E105                       	smpsAlterNote       $05
0008DA53 0101                       	dc.b	$01, $01
0008DA55 E1FF                       	smpsAlterNote       $FF
0008DA57 01                         	dc.b	$01
0008DA58 E1FC                       	smpsAlterNote       $FC
0008DA5A 01                         	dc.b	$01
0008DA5B E1FF                       	smpsAlterNote       $FF
0008DA5D ECF5                       	smpsPSGAlterVol     $F5
0008DA5F 9B06                       	dc.b	nD2, $06
0008DA61 EC0B                       	smpsPSGAlterVol     $0B
0008DA63 8004                       	dc.b	nRst, $04
0008DA65 ECF5                       	smpsPSGAlterVol     $F5
0008DA67 9B06                       	dc.b	nD2, $06
0008DA69 EC04                       	smpsPSGAlterVol     $04
0008DA6B E701                       	dc.b	smpsNoAttack, $01
0008DA6D EC07                       	smpsPSGAlterVol     $07
0008DA6F 8006                       	dc.b	nRst, $06
0008DA71 E102                       	smpsAlterNote       $02
0008DA73 01                         	dc.b	$01
0008DA74 E106                       	smpsAlterNote       $06
0008DA76 01                         	dc.b	$01
0008DA77 E102                       	smpsAlterNote       $02
0008DA79 01                         	dc.b	$01
0008DA7A E1FC                       	smpsAlterNote       $FC
0008DA7C 01                         	dc.b	$01
0008DA7D E1FF                       	smpsAlterNote       $FF
0008DA7F ECF5                       	smpsPSGAlterVol     $F5
0008DA81 9B06                       	dc.b	nD2, $06
0008DA83 EC04                       	smpsPSGAlterVol     $04
0008DA85 E701                       	dc.b	smpsNoAttack, $01
0008DA87 EC07                       	smpsPSGAlterVol     $07
0008DA89 8003                       	dc.b	nRst, $03
0008DA8B ECF5                       	smpsPSGAlterVol     $F5
0008DA8D 9B07                       	dc.b	nD2, $07
0008DA8F EC0B                       	smpsPSGAlterVol     $0B
0008DA91 8006                       	dc.b	nRst, $06
0008DA93 E102                       	smpsAlterNote       $02
0008DA95 01                         	dc.b	$01
0008DA96 E105                       	smpsAlterNote       $05
0008DA98 0101                       	dc.b	$01, $01
0008DA9A E1FF                       	smpsAlterNote       $FF
0008DA9C 01                         	dc.b	$01
0008DA9D ECF5                       	smpsPSGAlterVol     $F5
0008DA9F 9B07                       	dc.b	nD2, $07
0008DAA1 EC0B                       	smpsPSGAlterVol     $0B
0008DAA3 8004                       	dc.b	nRst, $04
0008DAA5 ECF5                       	smpsPSGAlterVol     $F5
0008DAA7 9B06                       	dc.b	nD2, $06
0008DAA9 EC0B                       	smpsPSGAlterVol     $0B
0008DAAB 8007                       	dc.b	nRst, $07
0008DAAD E105                       	smpsAlterNote       $05
0008DAAF 0101                       	dc.b	$01, $01
0008DAB1 E102                       	smpsAlterNote       $02
0008DAB3 01                         	dc.b	$01
0008DAB4 E1FC                       	smpsAlterNote       $FC
0008DAB6 01                         	dc.b	$01
0008DAB7 E1FF                       	smpsAlterNote       $FF
0008DAB9 ECF5                       	smpsPSGAlterVol     $F5
0008DABB 9B06                       	dc.b	nD2, $06
0008DABD EC04                       	smpsPSGAlterVol     $04
0008DABF E701                       	dc.b	smpsNoAttack, $01
0008DAC1 EC07                       	smpsPSGAlterVol     $07
0008DAC3 8003                       	dc.b	nRst, $03
0008DAC5 ECF5                       	smpsPSGAlterVol     $F5
0008DAC7 9B06                       	dc.b	nD2, $06
0008DAC9 EC04                       	smpsPSGAlterVol     $04
0008DACB E701                       	dc.b	smpsNoAttack, $01
0008DACD EC07                       	smpsPSGAlterVol     $07
0008DACF 8006                       	dc.b	nRst, $06
0008DAD1 E102                       	smpsAlterNote       $02
0008DAD3 01                         	dc.b	$01
0008DAD4 E106                       	smpsAlterNote       $06
0008DAD6 01                         	dc.b	$01
0008DAD7 E102                       	smpsAlterNote       $02
0008DAD9 01                         	dc.b	$01
0008DADA E1FF                       	smpsAlterNote       $FF
0008DADC 01                         	dc.b	$01
0008DADD ECF5                       	smpsPSGAlterVol     $F5
0008DADF 9B06                       	dc.b	nD2, $06
0008DAE1 EC04                       	smpsPSGAlterVol     $04
0008DAE3 E701                       	dc.b	smpsNoAttack, $01
0008DAE5 EC07                       	smpsPSGAlterVol     $07
0008DAE7 8003                       	dc.b	nRst, $03
0008DAE9 ECF5                       	smpsPSGAlterVol     $F5
0008DAEB 9B07                       	dc.b	nD2, $07
0008DAED EC0B                       	smpsPSGAlterVol     $0B
0008DAEF 8007                       	dc.b	nRst, $07
0008DAF1 E105                       	smpsAlterNote       $05
0008DAF3 0101                       	dc.b	$01, $01
0008DAF5 E1FF                       	smpsAlterNote       $FF
0008DAF7 01                         	dc.b	$01
0008DAF8 E1FC                       	smpsAlterNote       $FC
0008DAFA 01                         	dc.b	$01
0008DAFB E1FF                       	smpsAlterNote       $FF
0008DAFD ECF5                       	smpsPSGAlterVol     $F5
0008DAFF 9B06                       	dc.b	nD2, $06
0008DB01 EC0B                       	smpsPSGAlterVol     $0B
0008DB03 8004                       	dc.b	nRst, $04
0008DB05 ECF5                       	smpsPSGAlterVol     $F5
0008DB07 9B06                       	dc.b	nD2, $06
0008DB09 EC04                       	smpsPSGAlterVol     $04
0008DB0B E701                       	dc.b	smpsNoAttack, $01
0008DB0D EC07                       	smpsPSGAlterVol     $07
0008DB0F 8006                       	dc.b	nRst, $06
0008DB11 E102                       	smpsAlterNote       $02
0008DB13 01                         	dc.b	$01
0008DB14 E106                       	smpsAlterNote       $06
0008DB16 01                         	dc.b	$01
0008DB17 E102                       	smpsAlterNote       $02
0008DB19 01                         	dc.b	$01
0008DB1A E1FC                       	smpsAlterNote       $FC
0008DB1C 01                         	dc.b	$01
0008DB1D E1FF                       	smpsAlterNote       $FF
0008DB1F ECF5                       	smpsPSGAlterVol     $F5
0008DB21 9B06                       	dc.b	nD2, $06
0008DB23 EC04                       	smpsPSGAlterVol     $04
0008DB25 E701                       	dc.b	smpsNoAttack, $01
0008DB27 EC07                       	smpsPSGAlterVol     $07
0008DB29 8003                       	dc.b	nRst, $03
0008DB2B ECF5                       	smpsPSGAlterVol     $F5
0008DB2D 9B06                       	dc.b	nD2, $06
0008DB2F EC04                       	smpsPSGAlterVol     $04
0008DB31 E701                       	dc.b	smpsNoAttack, $01
0008DB33 EC07                       	smpsPSGAlterVol     $07
0008DB35 8006                       	dc.b	nRst, $06
0008DB37 E102                       	smpsAlterNote       $02
0008DB39 01                         	dc.b	$01
0008DB3A E106                       	smpsAlterNote       $06
0008DB3C 01                         	dc.b	$01
0008DB3D E105                       	smpsAlterNote       $05
0008DB3F 01                         	dc.b	$01
0008DB40 E1FF                       	smpsAlterNote       $FF
0008DB42 01                         	dc.b	$01
0008DB43 ECF5                       	smpsPSGAlterVol     $F5
0008DB45 9B07                       	dc.b	nD2, $07
0008DB47 EC0B                       	smpsPSGAlterVol     $0B
0008DB49 8004                       	dc.b	nRst, $04
0008DB4B ECF5                       	smpsPSGAlterVol     $F5
0008DB4D 9B06                       	dc.b	nD2, $06
0008DB4F EC0B                       	smpsPSGAlterVol     $0B
0008DB51 8007                       	dc.b	nRst, $07
0008DB53 E105                       	smpsAlterNote       $05
0008DB55 0101                       	dc.b	$01, $01
0008DB57 E101                       	smpsAlterNote       $01
0008DB59 01                         	dc.b	$01
0008DB5A E1FB                       	smpsAlterNote       $FB
0008DB5C 01                         	dc.b	$01
0008DB5D E1FE                       	smpsAlterNote       $FE
0008DB5F ECF5                       	smpsPSGAlterVol     $F5
0008DB61 9A06                       	dc.b	nCs2, $06
0008DB63 EC04                       	smpsPSGAlterVol     $04
0008DB65 E701                       	dc.b	smpsNoAttack, $01
0008DB67 EC07                       	smpsPSGAlterVol     $07
0008DB69 8003                       	dc.b	nRst, $03
0008DB6B ECF5                       	smpsPSGAlterVol     $F5
0008DB6D 9A06                       	dc.b	nCs2, $06
0008DB6F EC04                       	smpsPSGAlterVol     $04
0008DB71 E701                       	dc.b	smpsNoAttack, $01
0008DB73 EC07                       	smpsPSGAlterVol     $07
0008DB75 8003                       	dc.b	nRst, $03
0008DB77 E1FC                       	smpsAlterNote       $FC
0008DB79 ECF5                       	smpsPSGAlterVol     $F5
0008DB7B 8F07                       	dc.b	nD1, $07
0008DB7D EC0B                       	smpsPSGAlterVol     $0B
0008DB7F 8006                       	dc.b	nRst, $06
0008DB81 E1FF                       	smpsAlterNote       $FF
0008DB83 01                         	dc.b	$01
0008DB84 E103                       	smpsAlterNote       $03
0008DB86 01                         	dc.b	$01
0008DB87 E102                       	smpsAlterNote       $02
0008DB89 01                         	dc.b	$01
0008DB8A E1FC                       	smpsAlterNote       $FC
0008DB8C 01                         	dc.b	$01
0008DB8D E1F8                       	smpsAlterNote       $F8
0008DB8F 01                         	dc.b	$01
0008DB90 E1FC                       	smpsAlterNote       $FC
0008DB92 01                         	dc.b	$01
0008DB93 E1FF                       	smpsAlterNote       $FF
0008DB95 01                         	dc.b	$01
0008DB96 E103                       	smpsAlterNote       $03
0008DB98 01                         	dc.b	$01
0008DB99 E1FC                       	smpsAlterNote       $FC
0008DB9B ECF5                       	smpsPSGAlterVol     $F5
0008DB9D 8F03 8F03                  	dc.b	nD1, $03, nD1, $03
0008DBA1 EC04                       	smpsPSGAlterVol     $04
0008DBA3 E701                       	dc.b	smpsNoAttack, $01
0008DBA5 EC07                       	smpsPSGAlterVol     $07
0008DBA7 8009                       	dc.b	nRst, $09
0008DBA9 E1FF                       	smpsAlterNote       $FF
0008DBAB 01                         	dc.b	$01
0008DBAC E103                       	smpsAlterNote       $03
0008DBAE 01                         	dc.b	$01
0008DBAF E102                       	smpsAlterNote       $02
0008DBB1 01                         	dc.b	$01
0008DBB2 E1FC                       	smpsAlterNote       $FC
0008DBB4 01                         	dc.b	$01
0008DBB5 E1F8                       	smpsAlterNote       $F8
0008DBB7 01                         	dc.b	$01
0008DBB8 E1FC                       	smpsAlterNote       $FC
0008DBBA 01                         	dc.b	$01
0008DBBB E1FF                       	smpsAlterNote       $FF
0008DBBD 01                         	dc.b	$01
0008DBBE E103                       	smpsAlterNote       $03
0008DBC0 01                         	dc.b	$01
0008DBC1 E1FF                       	smpsAlterNote       $FF
0008DBC3 01                         	dc.b	$01
0008DBC4 E1F9                       	smpsAlterNote       $F9
0008DBC6 01                         	dc.b	$01
0008DBC7 E1F8                       	smpsAlterNote       $F8
0008DBC9 01                         	dc.b	$01
0008DBCA E1FC                       	smpsAlterNote       $FC
0008DBCC 01                         	dc.b	$01
0008DBCD E102                       	smpsAlterNote       $02
0008DBCF 0101                       	dc.b	$01, $01
0008DBD1 E1FF                       	smpsAlterNote       $FF
0008DBD3 01                         	dc.b	$01
0008DBD4 E1FC                       	smpsAlterNote       $FC
0008DBD6 ECF5                       	smpsPSGAlterVol     $F5
0008DBD8 8F02                       	dc.b	nD1, $02
0008DBDA EC04                       	smpsPSGAlterVol     $04
0008DBDC E701                       	dc.b	smpsNoAttack, $01
0008DBDE ECFC                       	smpsPSGAlterVol     $FC
0008DBE0 E1FB                       	smpsAlterNote       $FB
0008DBE2 8D06                       	dc.b	nC1, $06
0008DBE4 EC04                       	smpsPSGAlterVol     $04
0008DBE6 E701                       	dc.b	smpsNoAttack, $01
0008DBE8 EC07                       	smpsPSGAlterVol     $07
0008DBEA 8006                       	dc.b	nRst, $06
0008DBEC E1FE                       	smpsAlterNote       $FE
0008DBEE 01                         	dc.b	$01
0008DBEF E102                       	smpsAlterNote       $02
0008DBF1 01                         	dc.b	$01
0008DBF2 E1FE                       	smpsAlterNote       $FE
0008DBF4 01                         	dc.b	$01
0008DBF5 E1FB                       	smpsAlterNote       $FB
0008DBF7 01                         	dc.b	$01
0008DBF8 E1F7                       	smpsAlterNote       $F7
0008DBFA 01                         	dc.b	$01
0008DBFB E1FB                       	smpsAlterNote       $FB
0008DBFD 01                         	dc.b	$01
0008DBFE E101                       	smpsAlterNote       $01
0008DC00 01                         	dc.b	$01
0008DC01 E102                       	smpsAlterNote       $02
0008DC03 01                         	dc.b	$01
0008DC04 E1FB                       	smpsAlterNote       $FB
0008DC06 ECF5                       	smpsPSGAlterVol     $F5
0008DC08 8D02                       	dc.b	nC1, $02
0008DC0A EC04                       	smpsPSGAlterVol     $04
0008DC0C E701                       	dc.b	smpsNoAttack, $01
0008DC0E E1FC                       	smpsAlterNote       $FC
0008DC10 ECFC                       	smpsPSGAlterVol     $FC
0008DC12 8F0D                       	dc.b	nD1, $0D
0008DC14 E1FF                       	smpsAlterNote       $FF
0008DC16 E701                       	dc.b	smpsNoAttack, $01
0008DC18 E103                       	smpsAlterNote       $03
0008DC1A E701                       	dc.b	smpsNoAttack, $01
0008DC1C E1FF                       	smpsAlterNote       $FF
0008DC1E E701                       	dc.b	smpsNoAttack, $01
0008DC20 E1FC                       	smpsAlterNote       $FC
0008DC22 E701                       	dc.b	smpsNoAttack, $01
0008DC24 E1F8                       	smpsAlterNote       $F8
0008DC26 E701                       	dc.b	smpsNoAttack, $01
0008DC28 E1FC                       	smpsAlterNote       $FC
0008DC2A E701                       	dc.b	smpsNoAttack, $01
0008DC2C E102                       	smpsAlterNote       $02
0008DC2E E701                       	dc.b	smpsNoAttack, $01
0008DC30 E103                       	smpsAlterNote       $03
0008DC32 E701                       	dc.b	smpsNoAttack, $01
0008DC34 E1FF                       	smpsAlterNote       $FF
0008DC36 E701                       	dc.b	smpsNoAttack, $01
0008DC38 E1F9                       	smpsAlterNote       $F9
0008DC3A E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008DC3E E1FC                       	smpsAlterNote       $FC
0008DC40 E701                       	dc.b	smpsNoAttack, $01
0008DC42 E102                       	smpsAlterNote       $02
0008DC44 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008DC48 E1FC                       	smpsAlterNote       $FC
0008DC4A E701                       	dc.b	smpsNoAttack, $01
0008DC4C E1F9                       	smpsAlterNote       $F9
0008DC4E E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008DC52 E1FF                       	smpsAlterNote       $FF
0008DC54 EC04                       	smpsPSGAlterVol     $04
0008DC56 E701                       	dc.b	smpsNoAttack, $01
0008DC58 EC07                       	smpsPSGAlterVol     $07
0008DC5A E103                       	smpsAlterNote       $03
0008DC5C 8001                       	dc.b	nRst, $01
0008DC5E E102                       	smpsAlterNote       $02
0008DC60 01                         	dc.b	$01
0008DC61 E1FB                       	smpsAlterNote       $FB
0008DC63 01                         	dc.b	$01
0008DC64 E1F7                       	smpsAlterNote       $F7
0008DC66 01                         	dc.b	$01
0008DC67 E1FB                       	smpsAlterNote       $FB
0008DC69 01                         	dc.b	$01
0008DC6A E102                       	smpsAlterNote       $02
0008DC6C 01                         	dc.b	$01
0008DC6D E103                       	smpsAlterNote       $03
0008DC6F 01                         	dc.b	$01
0008DC70 E1FB                       	smpsAlterNote       $FB
0008DC72 ECF5                       	smpsPSGAlterVol     $F5
0008DC74 8E06                       	dc.b	nCs1, $06
0008DC76 EC04                       	smpsPSGAlterVol     $04
0008DC78 E701                       	dc.b	smpsNoAttack, $01
0008DC7A EC07                       	smpsPSGAlterVol     $07
0008DC7C 8003                       	dc.b	nRst, $03
0008DC7E ECF5                       	smpsPSGAlterVol     $F5
0008DC80 8E06                       	dc.b	nCs1, $06
0008DC82 EC04                       	smpsPSGAlterVol     $04
0008DC84 E701                       	dc.b	smpsNoAttack, $01
0008DC86 EC07                       	smpsPSGAlterVol     $07
0008DC88 8006                       	dc.b	nRst, $06
0008DC8A E1FE                       	smpsAlterNote       $FE
0008DC8C 01                         	dc.b	$01
0008DC8D E102                       	smpsAlterNote       $02
0008DC8F 01                         	dc.b	$01
0008DC90 E1FE                       	smpsAlterNote       $FE
0008DC92 01                         	dc.b	$01
0008DC93 E1F9                       	smpsAlterNote       $F9
0008DC95 01                         	dc.b	$01
0008DC96 E1FC                       	smpsAlterNote       $FC
0008DC98 ECF5                       	smpsPSGAlterVol     $F5
0008DC9A 8F06                       	dc.b	nD1, $06
0008DC9C EC04                       	smpsPSGAlterVol     $04
0008DC9E E701                       	dc.b	smpsNoAttack, $01
0008DCA0 EC07                       	smpsPSGAlterVol     $07
0008DCA2 8003                       	dc.b	nRst, $03
0008DCA4 ECF5                       	smpsPSGAlterVol     $F5
0008DCA6 8F07                       	dc.b	nD1, $07
0008DCA8 EC0B                       	smpsPSGAlterVol     $0B
0008DCAA 8006                       	dc.b	nRst, $06
0008DCAC E1FF                       	smpsAlterNote       $FF
0008DCAE 01                         	dc.b	$01
0008DCAF E102                       	smpsAlterNote       $02
0008DCB1 0101                       	dc.b	$01, $01
0008DCB3 E1FB                       	smpsAlterNote       $FB
0008DCB5 01                         	dc.b	$01
0008DCB6 ECF5                       	smpsPSGAlterVol     $F5
0008DCB8 8E07                       	dc.b	nCs1, $07
0008DCBA EC0B                       	smpsPSGAlterVol     $0B
0008DCBC 8004                       	dc.b	nRst, $04
0008DCBE ECF5                       	smpsPSGAlterVol     $F5
0008DCC0 8E06                       	dc.b	nCs1, $06
0008DCC2 EC04                       	smpsPSGAlterVol     $04
0008DCC4 E701                       	dc.b	smpsNoAttack, $01
0008DCC6 EC07                       	smpsPSGAlterVol     $07
0008DCC8 8006                       	dc.b	nRst, $06
0008DCCA E101                       	smpsAlterNote       $01
0008DCCC 01                         	dc.b	$01
0008DCCD E102                       	smpsAlterNote       $02
0008DCCF 01                         	dc.b	$01
0008DCD0 E1FE                       	smpsAlterNote       $FE
0008DCD2 01                         	dc.b	$01
0008DCD3 E1F8                       	smpsAlterNote       $F8
0008DCD5 01                         	dc.b	$01
0008DCD6 E1FB                       	smpsAlterNote       $FB
0008DCD8 ECF5                       	smpsPSGAlterVol     $F5
0008DCDA 8E06                       	dc.b	nCs1, $06
0008DCDC EC04                       	smpsPSGAlterVol     $04
0008DCDE E701                       	dc.b	smpsNoAttack, $01
0008DCE0 EC07                       	smpsPSGAlterVol     $07
0008DCE2 8003                       	dc.b	nRst, $03
0008DCE4 ECF5                       	smpsPSGAlterVol     $F5
0008DCE6 8E06                       	dc.b	nCs1, $06
0008DCE8 EC04                       	smpsPSGAlterVol     $04
0008DCEA E701                       	dc.b	smpsNoAttack, $01
0008DCEC EC07                       	smpsPSGAlterVol     $07
0008DCEE 8004                       	dc.b	nRst, $04
0008DCF0 E1FC                       	smpsAlterNote       $FC
0008DCF2 ECF5                       	smpsPSGAlterVol     $F5
0008DCF4 8F06                       	dc.b	nD1, $06
0008DCF6 EC0B                       	smpsPSGAlterVol     $0B
0008DCF8 8006                       	dc.b	nRst, $06
0008DCFA E1FF                       	smpsAlterNote       $FF
0008DCFC 01                         	dc.b	$01
0008DCFD E102                       	smpsAlterNote       $02
0008DCFF 0101                       	dc.b	$01, $01
0008DD01 E1FC                       	smpsAlterNote       $FC
0008DD03 01                         	dc.b	$01
0008DD04 E1F8                       	smpsAlterNote       $F8
0008DD06 01                         	dc.b	$01
0008DD07 E1F9                       	smpsAlterNote       $F9
0008DD09 01                         	dc.b	$01
0008DD0A E1FF                       	smpsAlterNote       $FF
0008DD0C 01                         	dc.b	$01
0008DD0D E103                       	smpsAlterNote       $03
0008DD0F 01                         	dc.b	$01
0008DD10 E1FC                       	smpsAlterNote       $FC
0008DD12 ECF5                       	smpsPSGAlterVol     $F5
0008DD14 8F03 8F03                  	dc.b	nD1, $03, nD1, $03
0008DD18 EC04                       	smpsPSGAlterVol     $04
0008DD1A E701                       	dc.b	smpsNoAttack, $01
0008DD1C EC07                       	smpsPSGAlterVol     $07
0008DD1E 8009                       	dc.b	nRst, $09
0008DD20 E1FF                       	smpsAlterNote       $FF
0008DD22 01                         	dc.b	$01
0008DD23 E102                       	smpsAlterNote       $02
0008DD25 0101                       	dc.b	$01, $01
0008DD27 E1FC                       	smpsAlterNote       $FC
0008DD29 01                         	dc.b	$01
0008DD2A E1F8                       	smpsAlterNote       $F8
0008DD2C 01                         	dc.b	$01
0008DD2D E1F9                       	smpsAlterNote       $F9
0008DD2F 01                         	dc.b	$01
0008DD30 E1FF                       	smpsAlterNote       $FF
0008DD32 01                         	dc.b	$01
0008DD33 E103                       	smpsAlterNote       $03
0008DD35 01                         	dc.b	$01
0008DD36 E1FF                       	smpsAlterNote       $FF
0008DD38 01                         	dc.b	$01
0008DD39 E1FC                       	smpsAlterNote       $FC
0008DD3B 01                         	dc.b	$01
0008DD3C E1F8                       	smpsAlterNote       $F8
0008DD3E 01                         	dc.b	$01
0008DD3F E1FC                       	smpsAlterNote       $FC
0008DD41 01                         	dc.b	$01
0008DD42 E102                       	smpsAlterNote       $02
0008DD44 01                         	dc.b	$01
0008DD45 E103                       	smpsAlterNote       $03
0008DD47 01                         	dc.b	$01
0008DD48 E1FF                       	smpsAlterNote       $FF
0008DD4A 01                         	dc.b	$01
0008DD4B E1FC                       	smpsAlterNote       $FC
0008DD4D ECF5                       	smpsPSGAlterVol     $F5
0008DD4F 8F03                       	dc.b	nD1, $03
0008DD51 E1FB                       	smpsAlterNote       $FB
0008DD53 8D06                       	dc.b	nC1, $06
0008DD55 EC04                       	smpsPSGAlterVol     $04
0008DD57 E701                       	dc.b	smpsNoAttack, $01
0008DD59 EC07                       	smpsPSGAlterVol     $07
0008DD5B 8006                       	dc.b	nRst, $06
0008DD5D E1FE                       	smpsAlterNote       $FE
0008DD5F 01                         	dc.b	$01
0008DD60 E102                       	smpsAlterNote       $02
0008DD62 01                         	dc.b	$01
0008DD63 E101                       	smpsAlterNote       $01
0008DD65 01                         	dc.b	$01
0008DD66 E1FB                       	smpsAlterNote       $FB
0008DD68 01                         	dc.b	$01
0008DD69 E1F7                       	smpsAlterNote       $F7
0008DD6B 01                         	dc.b	$01
0008DD6C E1FB                       	smpsAlterNote       $FB
0008DD6E 01                         	dc.b	$01
0008DD6F E1FE                       	smpsAlterNote       $FE
0008DD71 01                         	dc.b	$01
0008DD72 E102                       	smpsAlterNote       $02
0008DD74 01                         	dc.b	$01
0008DD75 E1FB                       	smpsAlterNote       $FB
0008DD77 ECF5                       	smpsPSGAlterVol     $F5
0008DD79 8D03                       	dc.b	nC1, $03
0008DD7B E1FC                       	smpsAlterNote       $FC
0008DD7D 8F0D                       	dc.b	nD1, $0D
0008DD7F E1FF                       	smpsAlterNote       $FF
0008DD81 E701                       	dc.b	smpsNoAttack, $01
0008DD83 E103                       	smpsAlterNote       $03
0008DD85 E701                       	dc.b	smpsNoAttack, $01
0008DD87 E1FF                       	smpsAlterNote       $FF
0008DD89 E701                       	dc.b	smpsNoAttack, $01
0008DD8B E1FC                       	smpsAlterNote       $FC
0008DD8D E701                       	dc.b	smpsNoAttack, $01
0008DD8F E1F8                       	smpsAlterNote       $F8
0008DD91 E701                       	dc.b	smpsNoAttack, $01
0008DD93 E1FC                       	smpsAlterNote       $FC
0008DD95 E701                       	dc.b	smpsNoAttack, $01
0008DD97 E102                       	smpsAlterNote       $02
0008DD99 E701                       	dc.b	smpsNoAttack, $01
0008DD9B E103                       	smpsAlterNote       $03
0008DD9D E701                       	dc.b	smpsNoAttack, $01
0008DD9F E1FF                       	smpsAlterNote       $FF
0008DDA1 E701                       	dc.b	smpsNoAttack, $01
0008DDA3 E1F9                       	smpsAlterNote       $F9
0008DDA5 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008DDA9 E1FC                       	smpsAlterNote       $FC
0008DDAB E701                       	dc.b	smpsNoAttack, $01
0008DDAD E102                       	smpsAlterNote       $02
0008DDAF E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008DDB3 E1FF                       	smpsAlterNote       $FF
0008DDB5 E701                       	dc.b	smpsNoAttack, $01
0008DDB7 E1F9                       	smpsAlterNote       $F9
0008DDB9 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008DDBD E1FF                       	smpsAlterNote       $FF
0008DDBF EC04                       	smpsPSGAlterVol     $04
0008DDC1 E701                       	dc.b	smpsNoAttack, $01
0008DDC3 EC07                       	smpsPSGAlterVol     $07
0008DDC5 E103                       	smpsAlterNote       $03
0008DDC7 8001                       	dc.b	nRst, $01
0008DDC9 E102                       	smpsAlterNote       $02
0008DDCB 01                         	dc.b	$01
0008DDCC E1FB                       	smpsAlterNote       $FB
0008DDCE 01                         	dc.b	$01
0008DDCF E1F7                       	smpsAlterNote       $F7
0008DDD1 01                         	dc.b	$01
0008DDD2 E1FB                       	smpsAlterNote       $FB
0008DDD4 01                         	dc.b	$01
0008DDD5 E1FF                       	smpsAlterNote       $FF
0008DDD7 01                         	dc.b	$01
0008DDD8 E103                       	smpsAlterNote       $03
0008DDDA 01                         	dc.b	$01
0008DDDB E1FB                       	smpsAlterNote       $FB
0008DDDD ECF5                       	smpsPSGAlterVol     $F5
0008DDDF 8E06                       	dc.b	nCs1, $06
0008DDE1 EC04                       	smpsPSGAlterVol     $04
0008DDE3 E701                       	dc.b	smpsNoAttack, $01
0008DDE5 EC07                       	smpsPSGAlterVol     $07
0008DDE7 8003                       	dc.b	nRst, $03
0008DDE9 ECF5                       	smpsPSGAlterVol     $F5
0008DDEB 8E06                       	dc.b	nCs1, $06
0008DDED EC04                       	smpsPSGAlterVol     $04
0008DDEF E701                       	dc.b	smpsNoAttack, $01
0008DDF1 EC07                       	smpsPSGAlterVol     $07
0008DDF3 8006                       	dc.b	nRst, $06
0008DDF5 E1FE                       	smpsAlterNote       $FE
0008DDF7 01                         	dc.b	$01
0008DDF8 E102                       	smpsAlterNote       $02
0008DDFA 01                         	dc.b	$01
0008DDFB E1FE                       	smpsAlterNote       $FE
0008DDFD 01                         	dc.b	$01
0008DDFE E1FC                       	smpsAlterNote       $FC
0008DE00 01                         	dc.b	$01
0008DE01 ECF5                       	smpsPSGAlterVol     $F5
0008DE03 8F06                       	dc.b	nD1, $06
0008DE05 EC04                       	smpsPSGAlterVol     $04
0008DE07 E701                       	dc.b	smpsNoAttack, $01
0008DE09 EC07                       	smpsPSGAlterVol     $07
0008DE0B 8003                       	dc.b	nRst, $03
0008DE0D ECF5                       	smpsPSGAlterVol     $F5
0008DE0F 8F07                       	dc.b	nD1, $07
0008DE11 EC0B                       	smpsPSGAlterVol     $0B
0008DE13 8007                       	dc.b	nRst, $07
0008DE15 E102                       	smpsAlterNote       $02
0008DE17 0101                       	dc.b	$01, $01
0008DE19 E1FB                       	smpsAlterNote       $FB
0008DE1B 01                         	dc.b	$01
0008DE1C E1F8                       	smpsAlterNote       $F8
0008DE1E 01                         	dc.b	$01
0008DE1F E1FB                       	smpsAlterNote       $FB
0008DE21 ECF5                       	smpsPSGAlterVol     $F5
0008DE23 8E06                       	dc.b	nCs1, $06
0008DE25 EC0B                       	smpsPSGAlterVol     $0B
0008DE27 8004                       	dc.b	nRst, $04
0008DE29 ECF5                       	smpsPSGAlterVol     $F5
0008DE2B 8E06                       	dc.b	nCs1, $06
0008DE2D EC04                       	smpsPSGAlterVol     $04
0008DE2F E701                       	dc.b	smpsNoAttack, $01
0008DE31 EC07                       	smpsPSGAlterVol     $07
0008DE33 8006                       	dc.b	nRst, $06
0008DE35 E1FE                       	smpsAlterNote       $FE
0008DE37 01                         	dc.b	$01
0008DE38 E102                       	smpsAlterNote       $02
0008DE3A 01                         	dc.b	$01
0008DE3B E1FE                       	smpsAlterNote       $FE
0008DE3D 01                         	dc.b	$01
0008DE3E E1F9                       	smpsAlterNote       $F9
0008DE40 01                         	dc.b	$01
0008DE41 E1FC                       	smpsAlterNote       $FC
0008DE43 ECF5                       	smpsPSGAlterVol     $F5
0008DE45 8F06                       	dc.b	nD1, $06
0008DE47 EC04                       	smpsPSGAlterVol     $04
0008DE49 E701                       	dc.b	smpsNoAttack, $01
0008DE4B EC07                       	smpsPSGAlterVol     $07
0008DE4D 8003                       	dc.b	nRst, $03
0008DE4F ECF5                       	smpsPSGAlterVol     $F5
0008DE51 8F06                       	dc.b	nD1, $06
0008DE53 EC04                       	smpsPSGAlterVol     $04
0008DE55 E701                       	dc.b	smpsNoAttack, $01
0008DE57 EC07                       	smpsPSGAlterVol     $07
0008DE59 8006                       	dc.b	nRst, $06
0008DE5B E1FF                       	smpsAlterNote       $FF
0008DE5D 01                         	dc.b	$01
0008DE5E E103                       	smpsAlterNote       $03
0008DE60 01                         	dc.b	$01
0008DE61 E102                       	smpsAlterNote       $02
0008DE63 01                         	dc.b	$01
0008DE64 E1FB                       	smpsAlterNote       $FB
0008DE66 01                         	dc.b	$01
0008DE67 ECF5                       	smpsPSGAlterVol     $F5
0008DE69 8E07                       	dc.b	nCs1, $07
0008DE6B EC0B                       	smpsPSGAlterVol     $0B
0008DE6D 8004                       	dc.b	nRst, $04
0008DE6F ECF5                       	smpsPSGAlterVol     $F5
0008DE71 8E06                       	dc.b	nCs1, $06
0008DE73 EC0B                       	smpsPSGAlterVol     $0B
0008DE75 8007                       	dc.b	nRst, $07
0008DE77 E101                       	smpsAlterNote       $01
0008DE79 0101                       	dc.b	$01, $01
0008DE7B E1FE                       	smpsAlterNote       $FE
0008DE7D 01                         	dc.b	$01
0008DE7E E1F9                       	smpsAlterNote       $F9
0008DE80 01                         	dc.b	$01
0008DE81 E1FC                       	smpsAlterNote       $FC
0008DE83 ECF5                       	smpsPSGAlterVol     $F5
0008DE85 8F06                       	dc.b	nD1, $06
0008DE87 EC04                       	smpsPSGAlterVol     $04
0008DE89 E701                       	dc.b	smpsNoAttack, $01
0008DE8B EC07                       	smpsPSGAlterVol     $07
0008DE8D 8003                       	dc.b	nRst, $03
0008DE8F ECF5                       	smpsPSGAlterVol     $F5
0008DE91 8F06                       	dc.b	nD1, $06
0008DE93 EC04                       	smpsPSGAlterVol     $04
0008DE95 E701                       	dc.b	smpsNoAttack, $01
0008DE97 EC07                       	smpsPSGAlterVol     $07
0008DE99 8006                       	dc.b	nRst, $06
0008DE9B E1FF                       	smpsAlterNote       $FF
0008DE9D 01                         	dc.b	$01
0008DE9E E103                       	smpsAlterNote       $03
0008DEA0 01                         	dc.b	$01
0008DEA1 E1FF                       	smpsAlterNote       $FF
0008DEA3 01                         	dc.b	$01
0008DEA4 E1FB                       	smpsAlterNote       $FB
0008DEA6 01                         	dc.b	$01
0008DEA7 ECF5                       	smpsPSGAlterVol     $F5
0008DEA9 8E06                       	dc.b	nCs1, $06
0008DEAB EC04                       	smpsPSGAlterVol     $04
0008DEAD E701                       	dc.b	smpsNoAttack, $01
0008DEAF EC07                       	smpsPSGAlterVol     $07
0008DEB1 8003                       	dc.b	nRst, $03
0008DEB3 ECF5                       	smpsPSGAlterVol     $F5
0008DEB5 8E07                       	dc.b	nCs1, $07
0008DEB7 E1FF                       	smpsAlterNote       $FF
0008DEB9 9B06                       	dc.b	nD2, $06
0008DEBB EC04                       	smpsPSGAlterVol     $04
0008DEBD E701                       	dc.b	smpsNoAttack, $01
0008DEBF ECFC                       	smpsPSGAlterVol     $FC
0008DEC1 9B03                       	dc.b	nD2, $03
0008DEC3 EC04                       	smpsPSGAlterVol     $04
0008DEC5 E701                       	dc.b	smpsNoAttack, $01
0008DEC7 ECFC                       	smpsPSGAlterVol     $FC
0008DEC9 9B02                       	dc.b	nD2, $02
0008DECB EC04                       	smpsPSGAlterVol     $04
0008DECD E701                       	dc.b	smpsNoAttack, $01
0008DECF ECFC                       	smpsPSGAlterVol     $FC
0008DED1 E1FE                       	smpsAlterNote       $FE
0008DED3 9A03                       	dc.b	nCs2, $03
0008DED5 EC0B                       	smpsPSGAlterVol     $0B
0008DED7 800A                       	dc.b	nRst, $0A
0008DED9 E102                       	smpsAlterNote       $02
0008DEDB 01                         	dc.b	$01
0008DEDC E10A                       	smpsAlterNote       $0A
0008DEDE 01                         	dc.b	$01
0008DEDF E102                       	smpsAlterNote       $02
0008DEE1 01                         	dc.b	$01
0008DEE2 E1F7                       	smpsAlterNote       $F7
0008DEE4 01                         	dc.b	$01
0008DEE5 E10A                       	smpsAlterNote       $0A
0008DEE7 01                         	dc.b	$01
0008DEE8 E1FC                       	smpsAlterNote       $FC
0008DEEA 01                         	dc.b	$01
0008DEEB E108                       	smpsAlterNote       $08
0008DEED 0101                       	dc.b	$01, $01
0008DEEF E102                       	smpsAlterNote       $02
0008DEF1 01                         	dc.b	$01
0008DEF2 E1F7                       	smpsAlterNote       $F7
0008DEF4 0101                       	dc.b	$01, $01
0008DEF6 E1FC                       	smpsAlterNote       $FC
0008DEF8 ECF5                       	smpsPSGAlterVol     $F5
0008DEFA 8F06                       	dc.b	nD1, $06
0008DEFC EC04                       	smpsPSGAlterVol     $04
0008DEFE E701                       	dc.b	smpsNoAttack, $01
0008DF00 EC07                       	smpsPSGAlterVol     $07
0008DF02 8003                       	dc.b	nRst, $03
0008DF04 ECF5                       	smpsPSGAlterVol     $F5
0008DF06 8F06                       	dc.b	nD1, $06
0008DF08 EC04                       	smpsPSGAlterVol     $04
0008DF0A E701                       	dc.b	smpsNoAttack, $01
0008DF0C EC07                       	smpsPSGAlterVol     $07
0008DF0E 8006                       	dc.b	nRst, $06
0008DF10 E1FF                       	smpsAlterNote       $FF
0008DF12 01                         	dc.b	$01
0008DF13 E102                       	smpsAlterNote       $02
0008DF15 01                         	dc.b	$01
0008DF16 E101                       	smpsAlterNote       $01
0008DF18 01                         	dc.b	$01
0008DF19 E1FC                       	smpsAlterNote       $FC
0008DF1B 01                         	dc.b	$01
0008DF1C ECF5                       	smpsPSGAlterVol     $F5
0008DF1E 9007                       	dc.b	nEb1, $07
0008DF20 EC0B                       	smpsPSGAlterVol     $0B
0008DF22 8004                       	dc.b	nRst, $04
0008DF24 ECF5                       	smpsPSGAlterVol     $F5
0008DF26 9006                       	dc.b	nEb1, $06
0008DF28 EC0B                       	smpsPSGAlterVol     $0B
0008DF2A 8007                       	dc.b	nRst, $07
0008DF2C E103                       	smpsAlterNote       $03
0008DF2E 0101                       	dc.b	$01, $01
0008DF30 E1FF                       	smpsAlterNote       $FF
0008DF32 01                         	dc.b	$01
0008DF33 E1F9                       	smpsAlterNote       $F9
0008DF35 01                         	dc.b	$01
0008DF36 E1FC                       	smpsAlterNote       $FC
0008DF38 ECF5                       	smpsPSGAlterVol     $F5
0008DF3A 8F06                       	dc.b	nD1, $06
0008DF3C EC04                       	smpsPSGAlterVol     $04
0008DF3E E701                       	dc.b	smpsNoAttack, $01
0008DF40 EC07                       	smpsPSGAlterVol     $07
0008DF42 8003                       	dc.b	nRst, $03
0008DF44 ECF5                       	smpsPSGAlterVol     $F5
0008DF46 8F06                       	dc.b	nD1, $06
0008DF48 EC04                       	smpsPSGAlterVol     $04
0008DF4A E701                       	dc.b	smpsNoAttack, $01
0008DF4C EC07                       	smpsPSGAlterVol     $07
0008DF4E 8006                       	dc.b	nRst, $06
0008DF50 E1FF                       	smpsAlterNote       $FF
0008DF52 01                         	dc.b	$01
0008DF53 E103                       	smpsAlterNote       $03
0008DF55 01                         	dc.b	$01
0008DF56 E1FF                       	smpsAlterNote       $FF
0008DF58 01                         	dc.b	$01
0008DF59 E1F9                       	smpsAlterNote       $F9
0008DF5B 01                         	dc.b	$01
0008DF5C E1FC                       	smpsAlterNote       $FC
0008DF5E ECF5                       	smpsPSGAlterVol     $F5
0008DF60 8F06                       	dc.b	nD1, $06
0008DF62 EC04                       	smpsPSGAlterVol     $04
0008DF64 E701                       	dc.b	smpsNoAttack, $01
0008DF66 EC07                       	smpsPSGAlterVol     $07
0008DF68 8003                       	dc.b	nRst, $03
0008DF6A ECF5                       	smpsPSGAlterVol     $F5
0008DF6C 8F07                       	dc.b	nD1, $07
0008DF6E EC0B                       	smpsPSGAlterVol     $0B
0008DF70 8006                       	dc.b	nRst, $06
0008DF72 E1FF                       	smpsAlterNote       $FF
0008DF74 01                         	dc.b	$01
0008DF75 E102                       	smpsAlterNote       $02
0008DF77 0101                       	dc.b	$01, $01
0008DF79 E1FC                       	smpsAlterNote       $FC
0008DF7B 01                         	dc.b	$01
0008DF7C ECF5                       	smpsPSGAlterVol     $F5
0008DF7E 8F07                       	dc.b	nD1, $07
0008DF80 EC0B                       	smpsPSGAlterVol     $0B
0008DF82 8004                       	dc.b	nRst, $04
0008DF84 ECF5                       	smpsPSGAlterVol     $F5
0008DF86 8F06                       	dc.b	nD1, $06
0008DF88 EC04                       	smpsPSGAlterVol     $04
0008DF8A E701                       	dc.b	smpsNoAttack, $01
0008DF8C EC07                       	smpsPSGAlterVol     $07
0008DF8E 8006                       	dc.b	nRst, $06
0008DF90 E101                       	smpsAlterNote       $01
0008DF92 01                         	dc.b	$01
0008DF93 E102                       	smpsAlterNote       $02
0008DF95 01                         	dc.b	$01
0008DF96 E1FF                       	smpsAlterNote       $FF
0008DF98 01                         	dc.b	$01
0008DF99 E1F9                       	smpsAlterNote       $F9
0008DF9B 01                         	dc.b	$01
0008DF9C E1FC                       	smpsAlterNote       $FC
0008DF9E ECF5                       	smpsPSGAlterVol     $F5
0008DFA0 9006                       	dc.b	nEb1, $06
0008DFA2 EC04                       	smpsPSGAlterVol     $04
0008DFA4 E701                       	dc.b	smpsNoAttack, $01
0008DFA6 EC07                       	smpsPSGAlterVol     $07
0008DFA8 8003                       	dc.b	nRst, $03
0008DFAA ECF5                       	smpsPSGAlterVol     $F5
0008DFAC 9006                       	dc.b	nEb1, $06
0008DFAE EC04                       	smpsPSGAlterVol     $04
0008DFB0 E701                       	dc.b	smpsNoAttack, $01
0008DFB2 EC07                       	smpsPSGAlterVol     $07
0008DFB4 8006                       	dc.b	nRst, $06
0008DFB6 E100                       	smpsAlterNote       $00
0008DFB8 01                         	dc.b	$01
0008DFB9 E102                       	smpsAlterNote       $02
0008DFBB 01                         	dc.b	$01
0008DFBC E100                       	smpsAlterNote       $00
0008DFBE 01                         	dc.b	$01
0008DFBF E1FF                       	smpsAlterNote       $FF
0008DFC1 01                         	dc.b	$01
0008DFC2 ECF5                       	smpsPSGAlterVol     $F5
0008DFC4 9B06                       	dc.b	nD2, $06
0008DFC6 EC04                       	smpsPSGAlterVol     $04
0008DFC8 E701                       	dc.b	smpsNoAttack, $01
0008DFCA EC07                       	smpsPSGAlterVol     $07
0008DFCC 8003                       	dc.b	nRst, $03
0008DFCE ECF5                       	smpsPSGAlterVol     $F5
0008DFD0 9B07                       	dc.b	nD2, $07
0008DFD2 EC0B                       	smpsPSGAlterVol     $0B
0008DFD4 8007                       	dc.b	nRst, $07
0008DFD6 E105                       	smpsAlterNote       $05
0008DFD8 0101                       	dc.b	$01, $01
0008DFDA E1FF                       	smpsAlterNote       $FF
0008DFDC 01                         	dc.b	$01
0008DFDD E1FC                       	smpsAlterNote       $FC
0008DFDF 01                         	dc.b	$01
0008DFE0 E1FF                       	smpsAlterNote       $FF
0008DFE2 ECF5                       	smpsPSGAlterVol     $F5
0008DFE4 9B06                       	dc.b	nD2, $06
0008DFE6 EC0B                       	smpsPSGAlterVol     $0B
0008DFE8 8004                       	dc.b	nRst, $04
0008DFEA ECF5                       	smpsPSGAlterVol     $F5
0008DFEC 9B06                       	dc.b	nD2, $06
0008DFEE EC04                       	smpsPSGAlterVol     $04
0008DFF0 E701                       	dc.b	smpsNoAttack, $01
0008DFF2 EC07                       	smpsPSGAlterVol     $07
0008DFF4 8006                       	dc.b	nRst, $06
0008DFF6 E102                       	smpsAlterNote       $02
0008DFF8 01                         	dc.b	$01
0008DFF9 E106                       	smpsAlterNote       $06
0008DFFB 01                         	dc.b	$01
0008DFFC E102                       	smpsAlterNote       $02
0008DFFE 01                         	dc.b	$01
0008DFFF E1FC                       	smpsAlterNote       $FC
0008E001 01                         	dc.b	$01
0008E002 E1FF                       	smpsAlterNote       $FF
0008E004 ECF5                       	smpsPSGAlterVol     $F5
0008E006 9B06                       	dc.b	nD2, $06
0008E008 EC04                       	smpsPSGAlterVol     $04
0008E00A E701                       	dc.b	smpsNoAttack, $01
0008E00C EC07                       	smpsPSGAlterVol     $07
0008E00E 8003                       	dc.b	nRst, $03
0008E010 ECF5                       	smpsPSGAlterVol     $F5
0008E012 9B07                       	dc.b	nD2, $07
0008E014 EC0B                       	smpsPSGAlterVol     $0B
0008E016 8006                       	dc.b	nRst, $06
0008E018 E102                       	smpsAlterNote       $02
0008E01A 01                         	dc.b	$01
0008E01B E105                       	smpsAlterNote       $05
0008E01D 0101                       	dc.b	$01, $01
0008E01F E1FF                       	smpsAlterNote       $FF
0008E021 01                         	dc.b	$01
0008E022 ECF5                       	smpsPSGAlterVol     $F5
0008E024 9B07                       	dc.b	nD2, $07
0008E026 EC0B                       	smpsPSGAlterVol     $0B
0008E028 8004                       	dc.b	nRst, $04
0008E02A ECF5                       	smpsPSGAlterVol     $F5
0008E02C 9B06                       	dc.b	nD2, $06
0008E02E EC04                       	smpsPSGAlterVol     $04
0008E030 E701                       	dc.b	smpsNoAttack, $01
0008E032 EC07                       	smpsPSGAlterVol     $07
0008E034 8006                       	dc.b	nRst, $06
0008E036 E105                       	smpsAlterNote       $05
0008E038 0101                       	dc.b	$01, $01
0008E03A E102                       	smpsAlterNote       $02
0008E03C 01                         	dc.b	$01
0008E03D E1FC                       	smpsAlterNote       $FC
0008E03F 01                         	dc.b	$01
0008E040 E1FF                       	smpsAlterNote       $FF
0008E042 ECF5                       	smpsPSGAlterVol     $F5
0008E044 9B06                       	dc.b	nD2, $06
0008E046 EC04                       	smpsPSGAlterVol     $04
0008E048 E701                       	dc.b	smpsNoAttack, $01
0008E04A EC07                       	smpsPSGAlterVol     $07
0008E04C 8003                       	dc.b	nRst, $03
0008E04E ECF5                       	smpsPSGAlterVol     $F5
0008E050 9B06                       	dc.b	nD2, $06
0008E052 EC04                       	smpsPSGAlterVol     $04
0008E054 E701                       	dc.b	smpsNoAttack, $01
0008E056 EC07                       	smpsPSGAlterVol     $07
0008E058 8006                       	dc.b	nRst, $06
0008E05A E102                       	smpsAlterNote       $02
0008E05C 01                         	dc.b	$01
0008E05D E106                       	smpsAlterNote       $06
0008E05F 01                         	dc.b	$01
0008E060 E102                       	smpsAlterNote       $02
0008E062 01                         	dc.b	$01
0008E063 E1FF                       	smpsAlterNote       $FF
0008E065 01                         	dc.b	$01
0008E066 ECF5                       	smpsPSGAlterVol     $F5
0008E068 9B06                       	dc.b	nD2, $06
0008E06A EC04                       	smpsPSGAlterVol     $04
0008E06C E701                       	dc.b	smpsNoAttack, $01
0008E06E EC07                       	smpsPSGAlterVol     $07
0008E070 8003                       	dc.b	nRst, $03
0008E072 ECF5                       	smpsPSGAlterVol     $F5
0008E074 9B07                       	dc.b	nD2, $07
0008E076 EC0B                       	smpsPSGAlterVol     $0B
0008E078 8007                       	dc.b	nRst, $07
0008E07A E107                       	smpsAlterNote       $07
0008E07C 0101                       	dc.b	$01, $01
0008E07E E1FE                       	smpsAlterNote       $FE
0008E080 01                         	dc.b	$01
0008E081 E1FA                       	smpsAlterNote       $FA
0008E083 0101                       	dc.b	$01, $01
0008E085 E103                       	smpsAlterNote       $03
0008E087 01                         	dc.b	$01
0008E088 E109                       	smpsAlterNote       $09
0008E08A 01                         	dc.b	$01
0008E08B E107                       	smpsAlterNote       $07
0008E08D 01                         	dc.b	$01
0008E08E E1FE                       	smpsAlterNote       $FE
0008E090 01                         	dc.b	$01
0008E091 E108                       	smpsAlterNote       $08
0008E093 01                         	dc.b	$01
0008E094 E1FD                       	smpsAlterNote       $FD
0008E096 ECF5                       	smpsPSGAlterVol     $F5
0008E098 940E                       	dc.b	nG1, $0E
0008E09A E103                       	smpsAlterNote       $03
0008E09C EC0B                       	smpsPSGAlterVol     $0B
0008E09E 8001 01                    	dc.b	nRst, $01, $01
0008E0A1 E1FD                       	smpsAlterNote       $FD
0008E0A3 01                         	dc.b	$01
0008E0A4 E1FB                       	smpsAlterNote       $FB
0008E0A6 0101                       	dc.b	$01, $01
0008E0A8 E100                       	smpsAlterNote       $00
0008E0AA 01                         	dc.b	$01
0008E0AB E103                       	smpsAlterNote       $03
0008E0AD 01                         	dc.b	$01
0008E0AE E100                       	smpsAlterNote       $00
0008E0B0 01                         	dc.b	$01
0008E0B1 E1FD                       	smpsAlterNote       $FD
0008E0B3 01                         	dc.b	$01
0008E0B4 E1FA                       	smpsAlterNote       $FA
0008E0B6 01                         	dc.b	$01
0008E0B7 E1FD                       	smpsAlterNote       $FD
0008E0B9 01                         	dc.b	$01
0008E0BA E103                       	smpsAlterNote       $03
0008E0BC 0101                       	dc.b	$01, $01
0008E0BE E100                       	smpsAlterNote       $00
0008E0C0 01                         	dc.b	$01
0008E0C1 E1FE                       	smpsAlterNote       $FE
0008E0C3 ECF5                       	smpsPSGAlterVol     $F5
0008E0C5 960D                       	dc.b	nA1, $0D
0008E0C7 E104                       	smpsAlterNote       $04
0008E0C9 EC0B                       	smpsPSGAlterVol     $0B
0008E0CB 8001 01                    	dc.b	nRst, $01, $01
0008E0CE E101                       	smpsAlterNote       $01
0008E0D0 01                         	dc.b	$01
0008E0D1 E1FB                       	smpsAlterNote       $FB
0008E0D3 0101                       	dc.b	$01, $01
0008E0D5 E1FE                       	smpsAlterNote       $FE
0008E0D7 01                         	dc.b	$01
0008E0D8 E104                       	smpsAlterNote       $04
0008E0DA 0101                       	dc.b	$01, $01
0008E0DC E1FE                       	smpsAlterNote       $FE
0008E0DE 01                         	dc.b	$01
0008E0DF E1FB                       	smpsAlterNote       $FB
0008E0E1 0101                       	dc.b	$01, $01
0008E0E3 E101                       	smpsAlterNote       $01
0008E0E5 01                         	dc.b	$01
0008E0E6 E104                       	smpsAlterNote       $04
0008E0E8 0101                       	dc.b	$01, $01
0008E0EA E1FE                       	smpsAlterNote       $FE
0008E0EC ECF5                       	smpsPSGAlterVol     $F5
0008E0EE 970D                       	dc.b	nBb1, $0D
0008E0F0 E101                       	smpsAlterNote       $01
0008E0F2 EC04                       	smpsPSGAlterVol     $04
0008E0F4 E701                       	dc.b	smpsNoAttack, $01
0008E0F6 EC07                       	smpsPSGAlterVol     $07
0008E0F8 E104                       	smpsAlterNote       $04
0008E0FA 8001                       	dc.b	nRst, $01
0008E0FC E103                       	smpsAlterNote       $03
0008E0FE 01                         	dc.b	$01
0008E0FF E1FE                       	smpsAlterNote       $FE
0008E101 01                         	dc.b	$01
0008E102 E1FA                       	smpsAlterNote       $FA
0008E104 01                         	dc.b	$01
0008E105 E1FE                       	smpsAlterNote       $FE
0008E107 01                         	dc.b	$01
0008E108 E101                       	smpsAlterNote       $01
0008E10A 01                         	dc.b	$01
0008E10B E104                       	smpsAlterNote       $04
0008E10D 01                         	dc.b	$01
0008E10E E101                       	smpsAlterNote       $01
0008E110 01                         	dc.b	$01
0008E111 E1FB                       	smpsAlterNote       $FB
0008E113 01                         	dc.b	$01
0008E114 E1FA                       	smpsAlterNote       $FA
0008E116 01                         	dc.b	$01
0008E117 E1FE                       	smpsAlterNote       $FE
0008E119 01                         	dc.b	$01
0008E11A E103                       	smpsAlterNote       $03
0008E11C 0101                       	dc.b	$01, $01
0008E11E E101                       	smpsAlterNote       $01
0008E120 01                         	dc.b	$01
0008E121 E1FE                       	smpsAlterNote       $FE
0008E123 ECF5                       	smpsPSGAlterVol     $F5
0008E125 990D                       	dc.b	nC2, $0D
0008E127 E104                       	smpsAlterNote       $04
0008E129 EC0B                       	smpsPSGAlterVol     $0B
0008E12B 8001 01                    	dc.b	nRst, $01, $01
0008E12E E102                       	smpsAlterNote       $02
0008E130 01                         	dc.b	$01
0008E131 E1FC                       	smpsAlterNote       $FC
0008E133 0101                       	dc.b	$01, $01
0008E135 E102                       	smpsAlterNote       $02
0008E137 01                         	dc.b	$01
0008E138 E104                       	smpsAlterNote       $04
0008E13A 01                         	dc.b	$01
0008E13B E1FF                       	smpsAlterNote       $FF
0008E13D ECF5                       	smpsPSGAlterVol     $F5
0008E13F 9B06                       	dc.b	nD2, $06
0008E141 EC04                       	smpsPSGAlterVol     $04
0008E143 E701                       	dc.b	smpsNoAttack, $01
0008E145 EC07                       	smpsPSGAlterVol     $07
0008E147 8003                       	dc.b	nRst, $03
0008E149 ECF5                       	smpsPSGAlterVol     $F5
0008E14B 9B07                       	dc.b	nD2, $07
0008E14D EC0B                       	smpsPSGAlterVol     $0B
0008E14F 8006                       	dc.b	nRst, $06
0008E151 E101                       	smpsAlterNote       $01
0008E153 01                         	dc.b	$01
0008E154 E104                       	smpsAlterNote       $04
0008E156 0101                       	dc.b	$01, $01
0008E158 E1FE                       	smpsAlterNote       $FE
0008E15A 01                         	dc.b	$01
0008E15B E1FC                       	smpsAlterNote       $FC
0008E15D 01                         	dc.b	$01
0008E15E E1FE                       	smpsAlterNote       $FE
0008E160 ECF5                       	smpsPSGAlterVol     $F5
0008E162 9C06                       	dc.b	nEb2, $06
0008E164 EC0B                       	smpsPSGAlterVol     $0B
0008E166 8004                       	dc.b	nRst, $04
0008E168 ECF5                       	smpsPSGAlterVol     $F5
0008E16A 9C06                       	dc.b	nEb2, $06
0008E16C EC04                       	smpsPSGAlterVol     $04
0008E16E E701                       	dc.b	smpsNoAttack, $01
0008E170 EC07                       	smpsPSGAlterVol     $07
0008E172 8006                       	dc.b	nRst, $06
0008E174 E105                       	smpsAlterNote       $05
0008E176 01                         	dc.b	$01
0008E177 E106                       	smpsAlterNote       $06
0008E179 01                         	dc.b	$01
0008E17A E102                       	smpsAlterNote       $02
0008E17C 01                         	dc.b	$01
0008E17D E1FB                       	smpsAlterNote       $FB
0008E17F 01                         	dc.b	$01
0008E180 E1FF                       	smpsAlterNote       $FF
0008E182 ECF5                       	smpsPSGAlterVol     $F5
0008E184 9B06                       	dc.b	nD2, $06
0008E186 EC04                       	smpsPSGAlterVol     $04
0008E188 E701                       	dc.b	smpsNoAttack, $01
0008E18A EC07                       	smpsPSGAlterVol     $07
0008E18C 8003                       	dc.b	nRst, $03
0008E18E ECF5                       	smpsPSGAlterVol     $F5
0008E190 9B06                       	dc.b	nD2, $06
0008E192 EC04                       	smpsPSGAlterVol     $04
0008E194 E701                       	dc.b	smpsNoAttack, $01
0008E196 EC07                       	smpsPSGAlterVol     $07
0008E198 8006                       	dc.b	nRst, $06
0008E19A E101                       	smpsAlterNote       $01
0008E19C 01                         	dc.b	$01
0008E19D E105                       	smpsAlterNote       $05
0008E19F 01                         	dc.b	$01
0008E1A0 E104                       	smpsAlterNote       $04
0008E1A2 01                         	dc.b	$01
0008E1A3 E1FE                       	smpsAlterNote       $FE
0008E1A5 01                         	dc.b	$01
0008E1A6 ECF5                       	smpsPSGAlterVol     $F5
0008E1A8 9C07                       	dc.b	nEb2, $07
0008E1AA EC0B                       	smpsPSGAlterVol     $0B
0008E1AC 8004                       	dc.b	nRst, $04
0008E1AE ECF5                       	smpsPSGAlterVol     $F5
0008E1B0 9C06                       	dc.b	nEb2, $06
0008E1B2 EC0B                       	smpsPSGAlterVol     $0B
0008E1B4 8007                       	dc.b	nRst, $07
0008E1B6 E105                       	smpsAlterNote       $05
0008E1B8 0101                       	dc.b	$01, $01
0008E1BA E102                       	smpsAlterNote       $02
0008E1BC 01                         	dc.b	$01
0008E1BD E1FB                       	smpsAlterNote       $FB
0008E1BF 01                         	dc.b	$01
0008E1C0 E1FF                       	smpsAlterNote       $FF
0008E1C2 ECF5                       	smpsPSGAlterVol     $F5
0008E1C4 9B06                       	dc.b	nD2, $06
0008E1C6 EC04                       	smpsPSGAlterVol     $04
0008E1C8 E701                       	dc.b	smpsNoAttack, $01
0008E1CA EC07                       	smpsPSGAlterVol     $07
0008E1CC 8003                       	dc.b	nRst, $03
0008E1CE ECF5                       	smpsPSGAlterVol     $F5
0008E1D0 9B06                       	dc.b	nD2, $06
0008E1D2 EC04                       	smpsPSGAlterVol     $04
0008E1D4 E701                       	dc.b	smpsNoAttack, $01
0008E1D6 EC07                       	smpsPSGAlterVol     $07
0008E1D8 8006                       	dc.b	nRst, $06
0008E1DA E101                       	smpsAlterNote       $01
0008E1DC 01                         	dc.b	$01
0008E1DD E105                       	smpsAlterNote       $05
0008E1DF 01                         	dc.b	$01
0008E1E0 E101                       	smpsAlterNote       $01
0008E1E2 01                         	dc.b	$01
0008E1E3 E1FC                       	smpsAlterNote       $FC
0008E1E5 01                         	dc.b	$01
0008E1E6 E1FE                       	smpsAlterNote       $FE
0008E1E8 ECF5                       	smpsPSGAlterVol     $F5
0008E1EA 9C06                       	dc.b	nEb2, $06
0008E1EC EC04                       	smpsPSGAlterVol     $04
0008E1EE E701                       	dc.b	smpsNoAttack, $01
0008E1F0 EC07                       	smpsPSGAlterVol     $07
0008E1F2 8003                       	dc.b	nRst, $03
0008E1F4 ECF5                       	smpsPSGAlterVol     $F5
0008E1F6 9C07                       	dc.b	nEb2, $07
0008E1F8 EC0B                       	smpsPSGAlterVol     $0B
0008E1FA 8006                       	dc.b	nRst, $06
0008E1FC E102                       	smpsAlterNote       $02
0008E1FE 01                         	dc.b	$01
0008E1FF E105                       	smpsAlterNote       $05
0008E201 0101                       	dc.b	$01, $01
0008E203 E1FF                       	smpsAlterNote       $FF
0008E205 01                         	dc.b	$01
0008E206 ECF5                       	smpsPSGAlterVol     $F5
0008E208 9B07                       	dc.b	nD2, $07
0008E20A EC0B                       	smpsPSGAlterVol     $0B
0008E20C 8004                       	dc.b	nRst, $04
0008E20E ECF5                       	smpsPSGAlterVol     $F5
0008E210 9B06                       	dc.b	nD2, $06
0008E212 EC04                       	smpsPSGAlterVol     $04
0008E214 E701                       	dc.b	smpsNoAttack, $01
0008E216 EC07                       	smpsPSGAlterVol     $07
0008E218 8002                       	dc.b	nRst, $02
0008E21A E1FC                       	smpsAlterNote       $FC
0008E21C ECF5                       	smpsPSGAlterVol     $F5
0008E21E 9006                       	dc.b	nEb1, $06
0008E220 EC04                       	smpsPSGAlterVol     $04
0008E222 E701                       	dc.b	smpsNoAttack, $01
0008E224 ECFC                       	smpsPSGAlterVol     $FC
0008E226 8B03 9003                  	dc.b	nBb0, $03, nEb1, $03
0008E22A EC04                       	smpsPSGAlterVol     $04
0008E22C E701                       	dc.b	smpsNoAttack, $01
0008E22E E1FD                       	smpsAlterNote       $FD
0008E230 ECFC                       	smpsPSGAlterVol     $FC
0008E232 9402                       	dc.b	nG1, $02
0008E234 EC04                       	smpsPSGAlterVol     $04
0008E236 E701                       	dc.b	smpsNoAttack, $01
0008E238 E1FE                       	smpsAlterNote       $FE
0008E23A ECFC                       	smpsPSGAlterVol     $FC
0008E23C 9703 9703                  	dc.b	nBb1, $03, nBb1, $03
0008E240 EC04                       	smpsPSGAlterVol     $04
0008E242 E701                       	dc.b	smpsNoAttack, $01
0008E244 EC07                       	smpsPSGAlterVol     $07
0008E246 8008                       	dc.b	nRst, $08
0008E248 F6F4 F3                    	smpsJump            music84_Jump06
0008E24B                            
0008E24B                            ; PSG3 Data
0008E24B                            music84_PSG3:
0008E24B F500                       	smpsPSGvoice        $00
0008E24D E1FF                       	smpsAlterNote       $FF
0008E24F EC0F                       	smpsPSGAlterVol     $0F
0008E251 803A                       	dc.b	nRst, $3A
0008E253                            
0008E253                            music84_Jump05:
0008E253 8068 6868 6868 6868 6868+  	dc.b	nRst, $68, $68, $68, $68, $68, $68, $68, $68, $68, $68, $68
0008E25F 6868 6868 6868 6868 6802   	dc.b	$68, $68, $68, $68, $68, $68, $68, $68, $68, $02
0008E269 F6FF E8                    	smpsJump            music84_Jump05
0008E26C                            
0008E26C                            ; DAC Data
0008E26C                            music84_DAC:
0008E26C E0C0                       	smpsPan             panCenter, $00
0008E26E 8001 8203 8102 8101 8103+  	dc.b	nRst, $01, dSnare, $03, dKick, $02, dKick, $01, dKick, $03, dKick, $01
0008E27A 8203 8102 8101 8204 8103+  	dc.b	dSnare, $03, dKick, $02, dKick, $01, dSnare, $04, dKick, $03, dSnare, $07
0008E286 8104 8103 8104 8103 8104+  	dc.b	dKick, $04, dKick, $03, dKick, $04, dKick, $03, dKick, $04, dKick, $03
0008E292 8203 8107 8207 8106 8101+  	dc.b	dSnare, $03, dKick, $07, dSnare, $07, dKick, $06, dKick, $01, dSnare, $03
0008E29E 8107 8103 8207 8103 8104+  	dc.b	dKick, $07, dKick, $03, dSnare, $07, dKick, $03, dKick, $04, dSnare, $07
0008E2AA 8107 8206 8107 8204 8107+  	dc.b	dKick, $07, dSnare, $06, dKick, $07, dSnare, $04, dKick, $07, dKick, $03
0008E2B6 8207 8103 8104 8207 8106+  	dc.b	dSnare, $07, dKick, $03, dKick, $04, dSnare, $07, dKick, $06, dKick, $01
0008E2C2 8206 8107 8204 8106 8104+  	dc.b	dSnare, $06, dKick, $07, dSnare, $04, dKick, $06, dKick, $04, dSnare, $07
0008E2CE 8103 8103 8101 8206 8107+  	dc.b	dKick, $03, dKick, $03, dKick, $01, dSnare, $06, dKick, $07, dSnare, $07
0008E2DA 8107 8203 8107 8104 8206+  	dc.b	dKick, $07, dSnare, $03, dKick, $07, dKick, $04, dSnare, $06, dKick, $04
0008E2E6 8103 8207 8107 8207 8107+  	dc.b	dKick, $03, dSnare, $07, dKick, $07, dSnare, $07, dKick, $07, dSnare, $03
0008E2F2 8107 8103 8101 8206 8104+  	dc.b	dKick, $07, dKick, $03, dKick, $01, dSnare, $06, dKick, $04, dKick, $03
0008E2FE 8207 8107 8207 8106 8101+  	dc.b	dSnare, $07, dKick, $07, dSnare, $07, dKick, $06, dKick, $01, dSnare, $03
0008E30A 8107 8103 8207 8103 8104+  	dc.b	dKick, $07, dKick, $03, dSnare, $07, dKick, $03, dKick, $04, dSnare, $07
0008E316 8106 8101 8206 8107 8204+  	dc.b	dKick, $06, dKick, $01, dSnare, $06, dKick, $07, dSnare, $04, dKick, $06
0008E322 8104 8207 8103 8104 8206+  	dc.b	dKick, $04, dSnare, $07, dKick, $03, dKick, $04, dSnare, $06, dKick, $07
0008E32E 8207 8107 8203 8107 8202+  	dc.b	dSnare, $07, dKick, $07, dSnare, $03, dKick, $07, dSnare, $02, dKick, $02
0008E33A 8103 8207 8101 8101 8101+  	dc.b	dKick, $03, dSnare, $07, dKick, $01, dKick, $01, dKick, $01, dKick, $01
0008E346 8206 8107 8207 8107 8203+  	dc.b	dSnare, $06, dKick, $07, dSnare, $07, dKick, $07, dSnare, $03, dKick, $07
0008E352 8103 8101 8206 8104 8103+  	dc.b	dKick, $03, dKick, $01, dSnare, $06, dKick, $04, dKick, $03, dSnare, $07
0008E35E 8107 8207 8107 8203 8107+  	dc.b	dKick, $07, dSnare, $07, dKick, $07, dSnare, $03, dKick, $07, dKick, $03
0008E36A 8207 8103 8101 8103 8207+  	dc.b	dSnare, $07, dKick, $03, dKick, $01, dKick, $03, dSnare, $07, dKick, $07
0008E376 8206 8101 8106 8204 8107+  	dc.b	dSnare, $06, dKick, $01, dKick, $06, dSnare, $04, dKick, $07, dKick, $03
0008E382 8207 8103 8104 8207 8106+  	dc.b	dSnare, $07, dKick, $03, dKick, $04, dSnare, $07, dKick, $06, dKick, $01
0008E38E 8206 8107 8203 8101 8106+  	dc.b	dSnare, $06, dKick, $07, dSnare, $03, dKick, $01, dKick, $06, dKick, $04
0008E39A 8207 8103 8103 8101 8206+  	dc.b	dSnare, $07, dKick, $03, dKick, $03, dKick, $01, dSnare, $06, dKick, $07
0008E3A6 8207 8107 8203 8107 8104+  	dc.b	dSnare, $07, dKick, $07, dSnare, $03, dKick, $07, dKick, $04, dSnare, $06
0008E3B2 8104 8103 8207 8107 8207+  	dc.b	dKick, $04, dKick, $03, dSnare, $07, dKick, $07, dSnare, $07, dKick, $07
0008E3BE 8203 8107 8103 8101 8206+  	dc.b	dSnare, $03, dKick, $07, dKick, $03, dKick, $01, dSnare, $06, dKick, $04
0008E3CA 8103 8207 8107 8207 8106+  	dc.b	dKick, $03, dSnare, $07, dKick, $07, dSnare, $07, dKick, $06, dKick, $01
0008E3D6 8203 8107 8103 8207 8103+  	dc.b	dSnare, $03, dKick, $07, dKick, $03, dSnare, $07, dKick, $03, dKick, $04
0008E3E2 8207 8106 8101 8206 8107+  	dc.b	dSnare, $07, dKick, $06, dKick, $01, dSnare, $06, dKick, $07, dSnare, $04
0008E3EE 8106 8104 8207 8104 8103+  	dc.b	dKick, $06, dKick, $04, dSnare, $07, dKick, $04, dKick, $03, dSnare, $07
0008E3FA 8106 8207 8107 8203 8107+  	dc.b	dKick, $06, dSnare, $07, dKick, $07, dSnare, $03, dKick, $07, dKick, $04
0008E406 8206 8101 8103 8103 8101+  	dc.b	dSnare, $06, dKick, $01, dKick, $03, dKick, $03, dKick, $01, dSnare, $06
0008E412 8107 8207 8107 8203 8107+  	dc.b	dKick, $07, dSnare, $07, dKick, $07, dSnare, $03, dKick, $07, dKick, $03
0008E41E 8101 8206 8104 8103 8207+  	dc.b	dKick, $01, dSnare, $06, dKick, $04, dKick, $03, dSnare, $07, dKick, $07
0008E42A 8207 8106 8101 8203 8107+  	dc.b	dSnare, $07, dKick, $06, dKick, $01, dSnare, $03, dKick, $07, dKick, $03
0008E436 8207 8103 8101 8103 8207+  	dc.b	dSnare, $07, dKick, $03, dKick, $01, dKick, $03, dSnare, $07, dKick, $07
0008E442 8206 8107 8204 8107 8103+  	dc.b	dSnare, $06, dKick, $07, dSnare, $04, dKick, $07, dKick, $03, dSnare, $07
0008E44E 8103 8104 8207 8214 8204+  	dc.b	dKick, $03, dKick, $04, dSnare, $07, dSnare, $14, dSnare, $04, dSnare, $1B
0008E45A 8203 8101 8214 8203 8207+  	dc.b	dSnare, $03, dKick, $01, dSnare, $14, dSnare, $03, dSnare, $07, dKick, $04
0008E466 8206 8107 8207 8107 8207+  	dc.b	dSnare, $06, dKick, $07, dSnare, $07, dKick, $07, dSnare, $07, dKick, $07
0008E472 8203 8107 8103 8101 8206+  	dc.b	dSnare, $03, dKick, $07, dKick, $03, dKick, $01, dSnare, $06, dKick, $04
0008E47E 8103 8207 8107 8207 8106+  	dc.b	dKick, $03, dSnare, $07, dKick, $07, dSnare, $07, dKick, $06, dKick, $01
0008E48A 8203 8107 8103 8207 8103+  	dc.b	dSnare, $03, dKick, $07, dKick, $03, dSnare, $07, dKick, $03, dKick, $04
0008E496 8207 8106 8101 8206 8107+  	dc.b	dSnare, $07, dKick, $06, dKick, $01, dSnare, $06, dKick, $07, dSnare, $04
0008E4A2 8106 8104 8207 8103 8104+  	dc.b	dKick, $06, dKick, $04, dSnare, $07, dKick, $03, dKick, $04, dSnare, $06
0008E4AE 8107 8207 8107 8204 8207+  	dc.b	dKick, $07, dSnare, $07, dKick, $07, dSnare, $04, dSnare, $07, dKick, $01
0008E4BA 8102 8104 8109 8101 8206+  	dc.b	dKick, $02, dKick, $04, dKick, $09, dKick, $01, dSnare, $06, dKick, $07
0008E4C6 8207 8107 8203 8107 8103+  	dc.b	dSnare, $07, dKick, $07, dSnare, $03, dKick, $07, dKick, $03, dKick, $01
0008E4D2 8206 8104 8103 8207 8107+  	dc.b	dSnare, $06, dKick, $04, dKick, $03, dSnare, $07, dKick, $07, dSnare, $07
0008E4DE 8107 8203 8107 8103 8207+  	dc.b	dKick, $07, dSnare, $03, dKick, $07, dKick, $03, dSnare, $07, dKick, $04
0008E4EA 8103 8207 8107 8206 8101+  	dc.b	dKick, $03, dSnare, $07, dKick, $07, dSnare, $06, dKick, $01, dKick, $06
0008E4F6 8204 8107 8103 8207 8103+  	dc.b	dSnare, $04, dKick, $07, dKick, $03, dSnare, $07, dKick, $03, dKick, $04
0008E502 8207 8106 8101 8206 8107+  	dc.b	dSnare, $07, dKick, $06, dKick, $01, dSnare, $06, dKick, $07, dSnare, $03
0008E50E 8101 8106 8104 8207 8103+  	dc.b	dKick, $01, dKick, $06, dKick, $04, dSnare, $07, dKick, $03, dKick, $03
0008E51A 8101 8206 8107 8207 8107+  	dc.b	dKick, $01, dSnare, $06, dKick, $07, dSnare, $07, dKick, $07, dSnare, $03
0008E526 8107 8104 8206 8104 8103+  	dc.b	dKick, $07, dKick, $04, dSnare, $06, dKick, $04, dKick, $03, dSnare, $07
0008E532 8107 8207 8107 8203 8107+  	dc.b	dKick, $07, dSnare, $07, dKick, $07, dSnare, $03, dKick, $07, dKick, $03
0008E53E 8101 8206 8104 8103 8207+  	dc.b	dKick, $01, dSnare, $06, dKick, $04, dKick, $03, dSnare, $07, dKick, $03
0008E54A 8104 8207 8106 8101 8203+  	dc.b	dKick, $04, dSnare, $07, dKick, $06, dKick, $01, dSnare, $03, dKick, $07
0008E556 8103 8208 8102 8104 8203+  	dc.b	dKick, $03, dSnare, $08, dKick, $02, dKick, $04, dSnare, $03, dKick, $04
0008E562 8103 8103 8101 8203 8103+  	dc.b	dKick, $03, dKick, $03, dKick, $01, dSnare, $03, dKick, $03, dKick, $01
0008E56E 8203 8103 8202 8101 8202+  	dc.b	dSnare, $03, dKick, $03, dSnare, $02, dKick, $01, dSnare, $02, dSnare, $02
0008E57A 8202 8201 8101 8201 8102+  	dc.b	dSnare, $02, dSnare, $01, dKick, $01, dSnare, $01, dKick, $02, dKick, $02
0008E586 8102 8101 8102 8102 8102+  	dc.b	dKick, $02, dKick, $01, dKick, $02, dKick, $02, dKick, $02, dKick, $01
0008E592 8102 8202 8102 8101 8101+  	dc.b	dKick, $02, dSnare, $02, dKick, $02, dKick, $01, dKick, $01, dKick, $07
0008E59E 8207 8107 8203 8107 8104+  	dc.b	dSnare, $07, dKick, $07, dSnare, $03, dKick, $07, dKick, $04, dSnare, $07
0008E5AA 8103 8103 8101 8206 8107+  	dc.b	dKick, $03, dKick, $03, dKick, $01, dSnare, $06, dKick, $07, dSnare, $07
0008E5B6 8107 8203 8107 8103 8101+  	dc.b	dKick, $07, dSnare, $03, dKick, $07, dKick, $03, dKick, $01, dSnare, $06
0008E5C2 8104 8103 8207 8107 8207+  	dc.b	dKick, $04, dKick, $03, dSnare, $07, dKick, $07, dSnare, $07, dKick, $07
0008E5CE 8203 8107 8103 8207 8104+  	dc.b	dSnare, $03, dKick, $07, dKick, $03, dSnare, $07, dKick, $04, dKick, $03
0008E5DA 8207 8107 8206 8107 8204+  	dc.b	dSnare, $07, dKick, $07, dSnare, $06, dKick, $07, dSnare, $04, dKick, $07
0008E5E6 8103 8207 8203 8204 8107+  	dc.b	dKick, $03, dSnare, $07, dSnare, $03, dSnare, $04, dKick, $07, dKick, $17
0008E5F2 E0C0                       	smpsPan             panCenter, $00
0008E5F4 F2                         	smpsStop
0008E5F5                            
0008E5F5                            music84_Voices:
0008E5F5                            ;	Voice $00
0008E5F5                            ;	$3D
0008E5F5                            ;	$41, $31, $41, $51, 	$11, $11, $11, $11, 	$0A, $00, $00, $00
0008E5F5                            ;	$0B, $00, $00, $00, 	$F7, $F8, $F8, $F8, 	$1A, $14, $20, $14
0008E5F5                            	smpsVcAlgorithm     $05
0008E5F5                            	smpsVcFeedback      $07
0008E5F5                            	smpsVcUnusedBits    $00
0008E5F5                            	smpsVcDetune        $05, $04, $03, $04
0008E5F5                            	smpsVcCoarseFreq    $01, $01, $01, $01
0008E5F5                            	smpsVcRateScale     $00, $00, $00, $00
0008E5F5                            	smpsVcAttackRate    $11, $11, $11, $11
0008E5F5                            	smpsVcAmpMod        $00, $00, $00, $00
0008E5F5                            	smpsVcDecayRate1    $00, $00, $00, $0A
0008E5F5                            	smpsVcDecayRate2    $00, $00, $00, $0B
0008E5F5                            	smpsVcDecayLevel    $0F, $0F, $0F, $0F
0008E5F5                            	smpsVcReleaseRate   $08, $08, $08, $07
0008E5F5 3D41 3141 5111 1111 110A+  	smpsVcTotalLevel    $14, $20, $14, $1A
0008E60E                            
0008E60E                            ;	Voice $01
0008E60E                            ;	$04
0008E60E                            ;	$5A, $41, $3A, $41, 	$5F, $1F, $5F, $1F, 	$00, $0E, $00, $0E
0008E60E                            ;	$00, $05, $00, $05, 	$E6, $86, $E6, $86, 	$19, $10, $19, $10
0008E60E                            	smpsVcAlgorithm     $04
0008E60E                            	smpsVcFeedback      $00
0008E60E                            	smpsVcUnusedBits    $00
0008E60E                            	smpsVcDetune        $04, $03, $04, $05
0008E60E                            	smpsVcCoarseFreq    $01, $0A, $01, $0A
0008E60E                            	smpsVcRateScale     $00, $01, $00, $01
0008E60E                            	smpsVcAttackRate    $1F, $1F, $1F, $1F
0008E60E                            	smpsVcAmpMod        $00, $00, $00, $00
0008E60E                            	smpsVcDecayRate1    $0E, $00, $0E, $00
0008E60E                            	smpsVcDecayRate2    $05, $00, $05, $00
0008E60E                            	smpsVcDecayLevel    $08, $0E, $08, $0E
0008E60E                            	smpsVcReleaseRate   $06, $06, $06, $06
0008E60E 045A 413A 415F 1F5F 1F00+  	smpsVcTotalLevel    $10, $19, $10, $19
0008E627                            
0008E627                            ;	Voice $02
0008E627                            ;	$30
0008E627                            ;	$6C, $03, $21, $41, 	$14, $1F, $1F, $1F, 	$0D, $0C, $0E, $01
0008E627                            ;	$01, $01, $01, $01, 	$FF, $C8, $BB, $89, 	$24, $27, $14, $10
0008E627                            	smpsVcAlgorithm     $00
0008E627                            	smpsVcFeedback      $06
0008E627                            	smpsVcUnusedBits    $00
0008E627                            	smpsVcDetune        $04, $02, $00, $06
0008E627                            	smpsVcCoarseFreq    $01, $01, $03, $0C
0008E627                            	smpsVcRateScale     $00, $00, $00, $00
0008E627                            	smpsVcAttackRate    $1F, $1F, $1F, $14
0008E627                            	smpsVcAmpMod        $00, $00, $00, $00
0008E627                            	smpsVcDecayRate1    $01, $0E, $0C, $0D
0008E627                            	smpsVcDecayRate2    $01, $01, $01, $01
0008E627                            	smpsVcDecayLevel    $08, $0B, $0C, $0F
0008E627                            	smpsVcReleaseRate   $09, $0B, $08, $0F
0008E627 306C 0321 4114 1F1F 1F0D+  	smpsVcTotalLevel    $10, $14, $27, $24
0008E640                            
0008E640                            ;	Voice $03
0008E640                            ;	$3A
0008E640                            ;	$01, $21, $61, $41, 	$14, $14, $19, $18, 	$09, $09, $0D, $09
0008E640                            ;	$00, $00, $00, $00, 	$F7, $BF, $FF, $E8, 	$26, $16, $1E, $10
0008E640                            	smpsVcAlgorithm     $02
0008E640                            	smpsVcFeedback      $07
0008E640                            	smpsVcUnusedBits    $00
0008E640                            	smpsVcDetune        $04, $06, $02, $00
0008E640                            	smpsVcCoarseFreq    $01, $01, $01, $01
0008E640                            	smpsVcRateScale     $00, $00, $00, $00
0008E640                            	smpsVcAttackRate    $18, $19, $14, $14
0008E640                            	smpsVcAmpMod        $00, $00, $00, $00
0008E640                            	smpsVcDecayRate1    $09, $0D, $09, $09
0008E640                            	smpsVcDecayRate2    $00, $00, $00, $00
0008E640                            	smpsVcDecayLevel    $0E, $0F, $0B, $0F
0008E640                            	smpsVcReleaseRate   $08, $0F, $0F, $07
0008E640 3A01 2161 4114 1419 1809+  	smpsVcTotalLevel    $10, $1E, $16, $26
0008E659                            
0008E659                            ;	Voice $04
0008E659                            ;	$3C
0008E659                            ;	$3A, $02, $00, $70, 	$1F, $10, $1F, $10, 	$00, $00, $00, $00
0008E659                            ;	$00, $00, $00, $00, 	$F2, $FA, $F2, $FA, 	$30, $1F, $24, $18
0008E659                            	smpsVcAlgorithm     $04
0008E659                            	smpsVcFeedback      $07
0008E659                            	smpsVcUnusedBits    $00
0008E659                            	smpsVcDetune        $07, $00, $00, $03
0008E659                            	smpsVcCoarseFreq    $00, $00, $02, $0A
0008E659                            	smpsVcRateScale     $00, $00, $00, $00
0008E659                            	smpsVcAttackRate    $10, $1F, $10, $1F
0008E659                            	smpsVcAmpMod        $00, $00, $00, $00
0008E659                            	smpsVcDecayRate1    $00, $00, $00, $00
0008E659                            	smpsVcDecayRate2    $00, $00, $00, $00
0008E659                            	smpsVcDecayLevel    $0F, $0F, $0F, $0F
0008E659                            	smpsVcReleaseRate   $0A, $02, $0A, $02
0008E659 3C3A 0200 701F 101F 1000+  	smpsVcTotalLevel    $18, $24, $1F, $30
0008E672                            
0008E672                            ;	Voice $05
0008E672                            ;	$38
0008E672                            ;	$00, $21, $61, $41, 	$10, $1F, $1F, $1F, 	$17, $00, $03, $00
0008E672                            ;	$0B, $08, $08, $00, 	$A5, $F5, $F5, $F8, 	$1D, $10, $11, $14
0008E672                            	smpsVcAlgorithm     $00
0008E672                            	smpsVcFeedback      $07
0008E672                            	smpsVcUnusedBits    $00
0008E672                            	smpsVcDetune        $04, $06, $02, $00
0008E672                            	smpsVcCoarseFreq    $01, $01, $01, $00
0008E672                            	smpsVcRateScale     $00, $00, $00, $00
0008E672                            	smpsVcAttackRate    $1F, $1F, $1F, $10
0008E672                            	smpsVcAmpMod        $00, $00, $00, $00
0008E672                            	smpsVcDecayRate1    $00, $03, $00, $17
0008E672                            	smpsVcDecayRate2    $00, $08, $08, $0B
0008E672                            	smpsVcDecayLevel    $0F, $0F, $0F, $0A
0008E672                            	smpsVcReleaseRate   $08, $05, $05, $05
0008E672 3800 2161 4110 1F1F 1F17+  	smpsVcTotalLevel    $14, $11, $10, $1D
0008E68B                            
0008E68B                            
0008E68C 00                         		even
0008E68C                            Music85:	incbin	sound\glass2.bin ; Spring Yard Act 1
0009289C                            		even
0009289C                            Music86:	incbin	sound\music86.bin; Scrap Brain Act 1
000963F4 00                         		even
000963F4                            Music87:	include	sound\music87.asm; Invincibility
000963F4                            triple_Header:
000963F4 =00000001                  smpsHeaderStartSong = 1
000963F4 0000                       	smpsHeaderVoice     triple_Voices
000963F6 0501                       	smpsHeaderChan      $05, $01
000963F8 0200                       	smpsHeaderTempo     $02, $00
000963FA                            
000963FE 0000 F40A                  	smpsHeaderFM        triple_FM1,	$F4, $0A
00096402 0000 000F                  	smpsHeaderFM        triple_FM2,	$00, $0F
00096406 0000 000B                  	smpsHeaderFM        triple_FM3,	$00, $0B
0009640A 0000 0013                  	smpsHeaderFM        triple_FM4,	$00, $13
0009640E 0000 0C01 0000             	smpsHeaderPSG       triple_PSG1,	$0C, $01, $00, $00
00096414                            
00096414                            ; DAC Data
00096414                            triple_DAC:
00096414 E0C0                       	smpsPan             panCenter, $00
00096416 8203 0381 8182             	dc.b	dSnare, $03, $03, dKick, dKick, dSnare
0009641C                            
0009641C                            triple_Loop01:
0009641C 8282 82                    	dc.b	dSnare, dSnare, dSnare
0009641F                            
0009641F                            triple_Loop00:
0009641F 8106 8281 8281 8203 8106+  	dc.b	dKick, $06, dSnare, dKick, dSnare, dKick, dSnare, $03, dKick, $06, $03, dSnare
0009642B 06                         	dc.b	$06
0009642C F700 08FF EF               	smpsLoop            $00, $08, triple_Loop00
00096431 810C 8209 0981 0682 0903+  	dc.b	dKick, $0C, dSnare, $09, $09, dKick, $06, dSnare, $09, $03, dKick, $0C
0009643D 8209 0981 0682 03          	dc.b	dSnare, $09, $09, dKick, $06, dSnare, $03
00096444 F701 02FF D4               	smpsLoop            $01, $02, triple_Loop01
00096449 0303 1B                    	dc.b	$03, $03, $1B
0009644C E0C0                       	smpsPan             panCenter, $00
0009644E F6FF C4                    	smpsJump triple_DAC
00096451                            
00096451                            ; FM1 Data
00096451                            triple_FM1:
00096451 E0C0                       	smpsPan             panCenter, $00
00096455 8018                       	dc.b	nRst, $18
00096457                            
00096457                            triple_Loop0B:
00096457 AC06 B8                    	dc.b	nG3, $06, nG4
0009645A F700 04FF F9               	smpsLoop            $00, $04, triple_Loop0B
0009645F                            
0009645F                            triple_Loop0C:
0009645F A7B3                       	dc.b	nD3, nD4
00096461 F700 04FF FA               	smpsLoop            $00, $04, triple_Loop0C
00096466                            
00096466                            triple_Loop0D:
00096466 A9B5                       	dc.b	nE3, nE4
00096468 F700 04FF FA               	smpsLoop            $00, $04, triple_Loop0D
0009646D A5B1 A5B1 A7B3 A7B3        	dc.b	nC3, nC4, nC3, nC4, nD3, nD4, nD3, nD4
00096475 F701 02FF DE               	smpsLoop            $01, $02, triple_Loop0B
0009647A A4B0 A4B0 A0AC A0AC A203+  	dc.b	nB2, nB3, nB2, nB3, nG2, nG3, nG2, nG3, nA2, $03, nRst, nA3
00096486 80A6 80B2 80A4 A6A7 A9A6+  	dc.b	nRst, nCs3, nRst, nCs4, nRst, nB2, nCs3, nD3, nE3, nCs3, nEb3, nF3
00096492 AD                         	dc.b	nAb3
00096493 F702 02FF C0               	smpsLoop            $02, $02, triple_Loop0B
00096498 8018                       	dc.b	nRst, $18
0009649A E0C0                       	smpsPan             panCenter, $00
0009649E F6FF B1                    	smpsJump triple_FM1
000964A1                            
000964A1                            ; FM2 Data
000964A1                            triple_FM2:
000964A1 E0C0                       	smpsPan             panCenter, $00
000964A5 8018                       	dc.b	nRst, $18
000964A7                            
000964A7                            triple_Loop07:
000964A7 C430 C311 8001 C612 C30B+  	dc.b	nG5, $30, nFs5, $11, nRst, $01, nA5, $12, nFs5, $0B, nRst, $01
000964B3 C436 C303 C4C3 06C1 BFBD+  	dc.b	nG5, $36, nFs5, $03, nG5, nFs5, $06, nE5, nD5, nC5, nB4, nA4
000964BF F700 02FF E4               	smpsLoop            $00, $02, triple_Loop07
000964C4 8003                       	dc.b	nRst, $03
000964C6                            
000964C6                            triple_Loop08:
000964C6 B809 BC03 800C             	dc.b	nG4, $09, nB4, $03, nRst, $0C
000964CC F700 03FF F6               	smpsLoop            $00, $03, triple_Loop08
000964D1 B809 BC03 8009             	dc.b	nG4, $09, nB4, $03, nRst, $09
000964D7                            
000964D7                            triple_Loop09:
000964D7 C430 C311 8001 C612 C30B+  	dc.b	nG5, $30, nFs5, $11, nRst, $01, nA5, $12, nFs5, $0B, nRst, $01
000964E3 C436 C303 C4C3 06C1 BFBD+  	dc.b	nG5, $36, nFs5, $03, nG5, nFs5, $06, nE5, nD5, nC5, nB4, nA4
000964EF F700 02FF E4               	smpsLoop            $00, $02, triple_Loop09
000964F4 8003                       	dc.b	nRst, $03
000964F6                            
000964F6                            triple_Loop0A:
000964F6 B809 BC03 800C             	dc.b	nG4, $09, nB4, $03, nRst, $0C
000964FC F700 03FF F6               	smpsLoop            $00, $03, triple_Loop0A
00096501 B809 BC03 8021             	dc.b	nG4, $09, nB4, $03, nRst, $21
00096507 E0C0                       	smpsPan             panCenter, $00
0009650B F6FF 94                    	smpsJump triple_FM2
0009650E                            
0009650E                            ; FM3 Data
0009650E                            triple_FM3:
0009650E E0C0                       	smpsPan             panCenter, $00
00096512 8018                       	dc.b	nRst, $18
00096514                            
00096514                            triple_Loop06:
00096514 B830 B7B8 36B3 2A          	dc.b	nG4, $30, nFs4, nG4, $36, nD4, $2A
0009651B F700 02FF F5               	smpsLoop            $00, $02, triple_Loop06
00096520 8030 B802 BABC BDBF C1BA+  	dc.b	nRst, $30, nG4, $02, nA4, nB4, nC5, nD5, nE5, nA4, nB4, nCs5
0009652C BFC1 C3BC BEC0 C1C3 C5BE+  	dc.b	nD5, nE5, nFs5, nB4, nCs5, nEb5, nE5, nFs5, nAb5, nCs5, nEb5, nF5
00096538 C3C5 C7                    	dc.b	nFs5, nAb5, nBb5
0009653B F701 02FF D5               	smpsLoop            $01, $02, triple_Loop06
00096540 8018                       	dc.b	nRst, $18
00096542 E0C0                       	smpsPan             panCenter, $00
00096546 F6FF C6                    	smpsJump triple_FM3
00096549                            
00096549                            ; FM4 Data
00096549                            triple_FM4:
00096549 E103                       	smpsAlterNote       $03
0009654D E0C0                       	smpsPan             panCenter, $00
0009654F 8018                       	dc.b	nRst, $18
00096551                            
00096551                            triple_Loop02:
00096551 C430 C311 8001 C612 C30B+  	dc.b	nG5, $30, nFs5, $11, nRst, $01, nA5, $12, nFs5, $0B, nRst, $01
0009655D C436 C303 C4C3 06C1 BFBD+  	dc.b	nG5, $36, nFs5, $03, nG5, nFs5, $06, nE5, nD5, nC5, nB4, nA4
00096569 F700 02FF E4               	smpsLoop            $00, $02, triple_Loop02
0009656E 8003                       	dc.b	nRst, $03
00096570                            
00096570                            triple_Loop03:
00096570 B809 BC03 800C             	dc.b	nG4, $09, nB4, $03, nRst, $0C
00096576 F700 03FF F6               	smpsLoop            $00, $03, triple_Loop03
0009657B B809 BC03 8009             	dc.b	nG4, $09, nB4, $03, nRst, $09
00096581                            
00096581                            triple_Loop04:
00096581 C430 C311 8001 C612 C30B+  	dc.b	nG5, $30, nFs5, $11, nRst, $01, nA5, $12, nFs5, $0B, nRst, $01
0009658D C436 C303 C4C3 06C1 BFBD+  	dc.b	nG5, $36, nFs5, $03, nG5, nFs5, $06, nE5, nD5, nC5, nB4, nA4
00096599 F700 02FF E4               	smpsLoop            $00, $02, triple_Loop04
0009659E 8003                       	dc.b	nRst, $03
000965A0                            
000965A0                            triple_Loop05:
000965A0 B809 BC03 800C             	dc.b	nG4, $09, nB4, $03, nRst, $0C
000965A6 F700 03FF F6               	smpsLoop            $00, $03, triple_Loop05
000965AB B809 BC03 8021             	dc.b	nG4, $09, nB4, $03, nRst, $21
000965B1 E0C0                       	smpsPan             panCenter, $00
000965B3 F6FF 94                    	smpsJump triple_FM4
000965B6                            
000965B6                            ; PSG1 Data
000965B6                            triple_PSG1:
000965B6 8018                       	dc.b	nRst, $18
000965B8                            
000965B8                            triple_Loop0E:
000965B8 A002 8001 9B02 8001 9B02+  	dc.b	nG2, $02, nRst, $01, nD2, $02, nRst, $01, nD2, $02, nRst, $04
000965C4 9B02 8004 9902 8004 9802+  	dc.b	nD2, $02, nRst, $04, nC2, $02, nRst, $04, nB1, $02, nRst, $01
000965D0 9902 8001 9B02 8004 9B02+  	dc.b	nC2, $02, nRst, $01, nD2, $02, nRst, $04, nD2, $02, nRst, $04
000965DC 9402 8004                  	dc.b	nG1, $02, nRst, $04
000965E0 F700 07FF D4               	smpsLoop            $00, $07, triple_Loop0E
000965E5 A002 8001 9B02 8001 9B02+  	dc.b	nG2, $02, nRst, $01, nD2, $02, nRst, $01, nD2, $02, nRst, $04
000965F1 9B02 8004 9902 8004 9802+  	dc.b	nD2, $02, nRst, $04, nC2, $02, nRst, $04, nB1, $02, nRst, $01
000965FD 9902 8001 9B02 8004 9B02+  	dc.b	nC2, $02, nRst, $01, nD2, $02, nRst, $04, nD2, $02, nRst, $04
00096609 9402 8007                  	dc.b	nG1, $02, nRst, $07
0009660D                            
0009660D                            triple_Loop0F:
0009660D 9109 9403 800C             	dc.b	nE1, $09, nG1, $03, nRst, $0C
00096613 F700 03FF F6               	smpsLoop            $00, $03, triple_Loop0F
00096618 9109 9403 8009             	dc.b	nE1, $09, nG1, $03, nRst, $09
0009661E                            
0009661E                            triple_Loop10:
0009661E A002 8001 9B02 8001 9B02+  	dc.b	nG2, $02, nRst, $01, nD2, $02, nRst, $01, nD2, $02, nRst, $04
0009662A 9B02 8004 9902 8004 9802+  	dc.b	nD2, $02, nRst, $04, nC2, $02, nRst, $04, nB1, $02, nRst, $01
00096636 9902 8001 9B02 8004 9B02+  	dc.b	nC2, $02, nRst, $01, nD2, $02, nRst, $04, nD2, $02, nRst, $04
00096642 9402 8004                  	dc.b	nG1, $02, nRst, $04
00096646 F700 07FF D4               	smpsLoop            $00, $07, triple_Loop10
0009664B A002 8001 9B02 8001 9B02+  	dc.b	nG2, $02, nRst, $01, nD2, $02, nRst, $01, nD2, $02, nRst, $04
00096657 9B02 8004 9902 8004 9802+  	dc.b	nD2, $02, nRst, $04, nC2, $02, nRst, $04, nB1, $02, nRst, $01
00096663 9902 8001 9B02 8004 9B02+  	dc.b	nC2, $02, nRst, $01, nD2, $02, nRst, $04, nD2, $02, nRst, $04
0009666F 9402 8007                  	dc.b	nG1, $02, nRst, $07
00096673                            
00096673                            triple_Loop11:
00096673 9109 9403 800C             	dc.b	nE1, $09, nG1, $03, nRst, $0C
00096679 F700 03FF F6               	smpsLoop            $00, $03, triple_Loop11
0009667E 9109 9403 8021             	dc.b	nE1, $09, nG1, $03, nRst, $21
00096684 F500                       	smpsPSGvoice        $00
00096686 F6FF 2E                    	smpsJump triple_PSG1
00096689                            
00096689                            triple_Voices:
00096689                            ;	Voice $00
00096689                            ;	$3A
00096689                            ;	$01, $07, $01, $01, 	$8E, $8E, $8D, $53, 	$0E, $0E, $0E, $03
00096689                            ;	$00, $00, $00, $00, 	$1F, $FF, $1F, $0F, 	$18, $28, $27, $80
00096689                            	smpsVcAlgorithm     $02
00096689                            	smpsVcFeedback      $07
00096689                            	smpsVcUnusedBits    $00
00096689                            	smpsVcDetune        $00, $00, $00, $00
00096689                            	smpsVcCoarseFreq    $01, $01, $07, $01
00096689                            	smpsVcRateScale     $01, $02, $02, $02
00096689                            	smpsVcAttackRate    $13, $0D, $0E, $0E
00096689                            	smpsVcAmpMod        $00, $00, $00, $00
00096689                            	smpsVcDecayRate1    $03, $0E, $0E, $0E
00096689                            	smpsVcDecayRate2    $00, $00, $00, $00
00096689                            	smpsVcDecayLevel    $00, $01, $0F, $01
00096689                            	smpsVcReleaseRate   $0F, $0F, $0F, $0F
00096689 3A01 0701 018E 8E8D 530E+  	smpsVcTotalLevel    $00, $27, $28, $18
000966A2                            
000966A2                            ;	Voice $01
000966A2                            ;	$20
000966A2                            ;	$7A, $31, $00, $00, 	$9F, $D8, $DC, $DF, 	$10, $0A, $04, $04
000966A2                            ;	$0F, $08, $08, $08, 	$5F, $5F, $BF, $BF, 	$14, $2B, $17, $80
000966A2                            	smpsVcAlgorithm     $00
000966A2                            	smpsVcFeedback      $04
000966A2                            	smpsVcUnusedBits    $00
000966A2                            	smpsVcDetune        $00, $00, $03, $07
000966A2                            	smpsVcCoarseFreq    $00, $00, $01, $0A
000966A2                            	smpsVcRateScale     $03, $03, $03, $02
000966A2                            	smpsVcAttackRate    $1F, $1C, $18, $1F
000966A2                            	smpsVcAmpMod        $00, $00, $00, $00
000966A2                            	smpsVcDecayRate1    $04, $04, $0A, $10
000966A2                            	smpsVcDecayRate2    $08, $08, $08, $0F
000966A2                            	smpsVcDecayLevel    $0B, $0B, $05, $05
000966A2                            	smpsVcReleaseRate   $0F, $0F, $0F, $0F
000966A2 207A 3100 009F D8DC DF10+  	smpsVcTotalLevel    $00, $17, $2B, $14
000966A2 207A 3100 009F D8DC DF10+  	smpsVcTotalLevel    $00, $17, $2B, $14
000966BC 00                         		even
000966BC                            Music88:	incbin	sound\music88.bin; Extra Life
000967AA                            		even
000967AA                            Music89:	incbin	sound\music89.bin; Special Stage
0009A672 00                         		even
0009A672                            Music8A:	incbin	sound\music8A.bin; Title Screen
0009A83C                            		even
0009A83C                            Music8B:	incbin	sound\music8B.bin; Ending Theme
0009AAD6                            		even
0009AAD6                            Music8C:	incbin	sound\music8C.bin; VS Boss
0009D96A 00                         		even
0009D96A                            Music8D:	incbin	sound\music8D.bin; Final Zone
0009DB86                            		even
0009DB86                            Music8E:	incbin	sound\fle.bin ;		Act Clear
0009DFF4 00                         		even
0009DFF4                            Music8F:	incbin	sound\music8F.bin ; Game Over
0009E634 00                         		even
0009E634                            Music90:	incbin	sound\music90.bin ; Continue
0009E9CE 00                         		even
0009E9CE                            Music91:	incbin	sound\music91.bin ; Credits
0009FC9C                            		even
0009FC9C                            Music92:	incbin	sound\music92.bin ; Drowning
0009FFDE 00                         		even
0009FFDE                            Music93:	incbin	sound\music93.bin ; Chaos Emerald
000A00AE                            		even
000A00AE                            Music94:	incbin	sound\music94.bin ; Green Hill Act 2
000A0D84 00                         		even
000A0D84                            Music95:	incbin	sound\music95.bin ; Green Hill Act 3
000A0DBE 00                         		even
000A0DBE                            Music96:	incbin	sound\music96.bin ; Labyrinth Act 2
000A0DF8 00                         		even
000A0DF8                            Music97:	incbin	sound\music97.bin ; Labyrinth Act 3
000A0E32 00                         		even
000A0E32                            Music98:	incbin	sound\music98.bin ; Marble Act 2
000A0E6C 00                         		even
000A0E6C                            Music99:	incbin	sound\music99.bin ; Marble Act 3
000A0EA6 00                         		even
000A0EA6                            Music9A:	incbin	sound\music9A.bin ; Star Light Act 2
000A0EE0 00                         		even
000A0EE0                            Music9B:	incbin	sound\music9B.bin ; Star Light Act 3
000A0F1A 00                         		even
000A0F1A                            Music9C:	incbin	sound\music9C.bin ; Spring Yard Act 2
000A0F54 00                         		even
000A0F54                            Music9D:	incbin	sound\music9D.bin ; Spring Yard Act 3
000A0F8E 00                         		even
000A0F8E                            Music9E:	incbin	sound\music9E.bin ; Scrap Brain Act 2
000A147E                            		even
000A147E                            Music9F:	include	sound\music9F.asm ; Scrap Brain Act 3
000A147E                            GentleBreeze_Header:
000A147E =00000001                  smpsHeaderStartSong = 1
000A147E 0000                       	smpsHeaderVoice     GentleBreeze_Voices
000A1480 0603                       	smpsHeaderChan      $06, $03
000A1482 0100                       	smpsHeaderTempo     $01, $00
000A1484                            
000A1488 0000 0000                  	smpsHeaderFM        GentleBreeze_FM1,	$00, $00
000A148C 0000 0000                  	smpsHeaderFM        GentleBreeze_FM2,	$00, $00
000A1490 0000 0000                  	smpsHeaderFM        GentleBreeze_FM3,	$00, $00
000A1494 0000 0000                  	smpsHeaderFM        GentleBreeze_FM4,	$00, $00
000A1498 0000 0000                  	smpsHeaderFM        GentleBreeze_FM5,	$00, $00
000A149C 0000 0000 0000             	smpsHeaderPSG       GentleBreeze_PSG1,	$00, $00, $00, $00
000A14A2 0000 0000 0000             	smpsHeaderPSG       GentleBreeze_PSG2,	$00, $00, $00, $00
000A14A8 0000 0000 0000             	smpsHeaderPSG       GentleBreeze_PSG3,	$00, $00, $00, $00
000A14AE                            
000A14AE                            ; PSG3 Data
000A14AE                            GentleBreeze_PSG3:
000A14AE F2                         	smpsStop
000A14AF                            
000A14AF                            ; FM1 Data
000A14AF                            GentleBreeze_FM1:
000A14B1 E0C0                       	smpsPan             panCenter, $00
000A14B3 E1FF                       	smpsAlterNote       $FF
000A14B5 C410                       	dc.b	nG5, $10
000A14B7 E60F                       	smpsAlterVol        $0F
000A14B9 C4                         	dc.b	nG5
000A14BA E6F1                       	smpsAlterVol        $F1
000A14BC E100                       	smpsAlterNote       $00
000A14BE C2                         	dc.b	nF5
000A14BF E60F                       	smpsAlterVol        $0F
000A14C1 08                         	dc.b	$08
000A14C2 E6F1                       	smpsAlterVol        $F1
000A14C4 C010                       	dc.b	nEb5, $10
000A14C6 E60F                       	smpsAlterVol        $0F
000A14C8 C0                         	dc.b	nEb5
000A14C9 E6F1                       	smpsAlterVol        $F1
000A14CB BDC0 C208 C910             	dc.b	nC5, nEb5, nF5, $08, nC6, $10
000A14D1 E60F                       	smpsAlterVol        $0F
000A14D3 C9                         	dc.b	nC6
000A14D4 E6F1                       	smpsAlterVol        $F1
000A14D6 C5                         	dc.b	nAb5
000A14D7 E60F                       	smpsAlterVol        $0F
000A14D9 08                         	dc.b	$08
000A14DA E6F1                       	smpsAlterVol        $F1
000A14DC C010                       	dc.b	nEb5, $10
000A14DE E60F                       	smpsAlterVol        $0F
000A14E0 C0                         	dc.b	nEb5
000A14E1 E6F1                       	smpsAlterVol        $F1
000A14E3 C208                       	dc.b	nF5, $08
000A14E5 E1FF                       	smpsAlterNote       $FF
000A14E7 C410                       	dc.b	nG5, $10
000A14E9 E100                       	smpsAlterNote       $00
000A14EB C5C7                       	dc.b	nAb5, nBb5
000A14ED E60F                       	smpsAlterVol        $0F
000A14EF C7                         	dc.b	nBb5
000A14F0 E6F1                       	smpsAlterVol        $F1
000A14F2 C5                         	dc.b	nAb5
000A14F3 E60F                       	smpsAlterVol        $0F
000A14F5 08                         	dc.b	$08
000A14F6 E6F1                       	smpsAlterVol        $F1
000A14F8 E1FF                       	smpsAlterNote       $FF
000A14FA C410                       	dc.b	nG5, $10
000A14FC E60F                       	smpsAlterVol        $0F
000A14FE C4                         	dc.b	nG5
000A14FF E6F1                       	smpsAlterVol        $F1
000A1501 C4                         	dc.b	nG5
000A1502 E100                       	smpsAlterNote       $00
000A1504 C208 C010 C2               	dc.b	nF5, $08, nEb5, $10, nF5
000A1509 E60F                       	smpsAlterVol        $0F
000A150B C2                         	dc.b	nF5
000A150C E6F1                       	smpsAlterVol        $F1
000A150E E1FF                       	smpsAlterNote       $FF
000A1510 C4                         	dc.b	nG5
000A1511 E60F                       	smpsAlterVol        $0F
000A1513 08                         	dc.b	$08
000A1514 E6F1                       	smpsAlterVol        $F1
000A1516 10                         	dc.b	$10
000A1517 E60F                       	smpsAlterVol        $0F
000A1519 38                         	dc.b	$38
000A151A E6F1                       	smpsAlterVol        $F1
000A151C 10                         	dc.b	$10
000A151D E60F                       	smpsAlterVol        $0F
000A151F C4                         	dc.b	nG5
000A1520 E6F1                       	smpsAlterVol        $F1
000A1522 E100                       	smpsAlterNote       $00
000A1524 C2                         	dc.b	nF5
000A1525 E60F                       	smpsAlterVol        $0F
000A1527 08                         	dc.b	$08
000A1528 E6F1                       	smpsAlterVol        $F1
000A152A C010                       	dc.b	nEb5, $10
000A152C E60F                       	smpsAlterVol        $0F
000A152E C0                         	dc.b	nEb5
000A152F E6F1                       	smpsAlterVol        $F1
000A1531 BDC0 C208 C910             	dc.b	nC5, nEb5, nF5, $08, nC6, $10
000A1537 E60F                       	smpsAlterVol        $0F
000A1539 C9                         	dc.b	nC6
000A153A E6F1                       	smpsAlterVol        $F1
000A153C C5                         	dc.b	nAb5
000A153D E60F                       	smpsAlterVol        $0F
000A153F 08                         	dc.b	$08
000A1540 E6F1                       	smpsAlterVol        $F1
000A1542 C010                       	dc.b	nEb5, $10
000A1544 E60F                       	smpsAlterVol        $0F
000A1546 C0                         	dc.b	nEb5
000A1547 E6F1                       	smpsAlterVol        $F1
000A1549 C208                       	dc.b	nF5, $08
000A154B E1FF                       	smpsAlterNote       $FF
000A154D C410                       	dc.b	nG5, $10
000A154F E100                       	smpsAlterNote       $00
000A1551 C5C7                       	dc.b	nAb5, nBb5
000A1553 E60F                       	smpsAlterVol        $0F
000A1555 C7                         	dc.b	nBb5
000A1556 E6F1                       	smpsAlterVol        $F1
000A1558 C5                         	dc.b	nAb5
000A1559 E60F                       	smpsAlterVol        $0F
000A155B 08                         	dc.b	$08
000A155C E6F1                       	smpsAlterVol        $F1
000A155E E1FF                       	smpsAlterNote       $FF
000A1560 C410                       	dc.b	nG5, $10
000A1562 E60F                       	smpsAlterVol        $0F
000A1564 C4                         	dc.b	nG5
000A1565 E6F1                       	smpsAlterVol        $F1
000A1567 C4                         	dc.b	nG5
000A1568 E100                       	smpsAlterNote       $00
000A156A C208 C010 C2               	dc.b	nF5, $08, nEb5, $10, nF5
000A156F E60F                       	smpsAlterVol        $0F
000A1571 28                         	dc.b	$28
000A1572 E6F1                       	smpsAlterVol        $F1
000A1574 C008 10                    	dc.b	nEb5, $08, $10
000A1577 E60F                       	smpsAlterVol        $0F
000A1579 21                         	dc.b	$21
000A157A                            
000A157A                            GentleBreeze_Loop12:
000A157A E7C0 7F                    	dc.b	smpsNoAttack, nEb5, $7F
000A157D F700 08FF F9               	smpsLoop            $00, $08, GentleBreeze_Loop12
000A1582 E717                       	dc.b	smpsNoAttack, $17
000A1584 E6F1                       	smpsAlterVol        $F1
000A1586 E1FF                       	smpsAlterNote       $FF
000A1588 C410                       	dc.b	nG5, $10
000A158A E60F                       	smpsAlterVol        $0F
000A158C C4                         	dc.b	nG5
000A158D E6F1                       	smpsAlterVol        $F1
000A158F E100                       	smpsAlterNote       $00
000A1591 C2                         	dc.b	nF5
000A1592 E60F                       	smpsAlterVol        $0F
000A1594 08                         	dc.b	$08
000A1595 E6F1                       	smpsAlterVol        $F1
000A1597 C010                       	dc.b	nEb5, $10
000A1599 E60F                       	smpsAlterVol        $0F
000A159B C0                         	dc.b	nEb5
000A159C E6F1                       	smpsAlterVol        $F1
000A159E BDC0 C208 C910             	dc.b	nC5, nEb5, nF5, $08, nC6, $10
000A15A4 E60F                       	smpsAlterVol        $0F
000A15A6 C9                         	dc.b	nC6
000A15A7 E6F1                       	smpsAlterVol        $F1
000A15A9 C5                         	dc.b	nAb5
000A15AA E60F                       	smpsAlterVol        $0F
000A15AC 08                         	dc.b	$08
000A15AD E6F1                       	smpsAlterVol        $F1
000A15AF C010                       	dc.b	nEb5, $10
000A15B1 E60F                       	smpsAlterVol        $0F
000A15B3 C0                         	dc.b	nEb5
000A15B4 E6F1                       	smpsAlterVol        $F1
000A15B6 C208                       	dc.b	nF5, $08
000A15B8 E1FF                       	smpsAlterNote       $FF
000A15BA C410                       	dc.b	nG5, $10
000A15BC E100                       	smpsAlterNote       $00
000A15BE C5C7                       	dc.b	nAb5, nBb5
000A15C0 E60F                       	smpsAlterVol        $0F
000A15C2 C7                         	dc.b	nBb5
000A15C3 E6F1                       	smpsAlterVol        $F1
000A15C5 C5                         	dc.b	nAb5
000A15C6 E60F                       	smpsAlterVol        $0F
000A15C8 08                         	dc.b	$08
000A15C9 E6F1                       	smpsAlterVol        $F1
000A15CB E1FF                       	smpsAlterNote       $FF
000A15CD C410                       	dc.b	nG5, $10
000A15CF E60F                       	smpsAlterVol        $0F
000A15D1 C4                         	dc.b	nG5
000A15D2 E6F1                       	smpsAlterVol        $F1
000A15D4 C4                         	dc.b	nG5
000A15D5 E100                       	smpsAlterNote       $00
000A15D7 C208 C010 C2               	dc.b	nF5, $08, nEb5, $10, nF5
000A15DC E60F                       	smpsAlterVol        $0F
000A15DE C2                         	dc.b	nF5
000A15DF E6F1                       	smpsAlterVol        $F1
000A15E1 E1FF                       	smpsAlterNote       $FF
000A15E3 C4                         	dc.b	nG5
000A15E4 E60F                       	smpsAlterVol        $0F
000A15E6 08                         	dc.b	$08
000A15E7 E6F1                       	smpsAlterVol        $F1
000A15E9 10                         	dc.b	$10
000A15EA E60F                       	smpsAlterVol        $0F
000A15EC 38                         	dc.b	$38
000A15ED E6F1                       	smpsAlterVol        $F1
000A15EF 10                         	dc.b	$10
000A15F0 E60F                       	smpsAlterVol        $0F
000A15F2 C4                         	dc.b	nG5
000A15F3 E6F1                       	smpsAlterVol        $F1
000A15F5 E100                       	smpsAlterNote       $00
000A15F7 C2                         	dc.b	nF5
000A15F8 E60F                       	smpsAlterVol        $0F
000A15FA 08                         	dc.b	$08
000A15FB E6F1                       	smpsAlterVol        $F1
000A15FD C010                       	dc.b	nEb5, $10
000A15FF E60F                       	smpsAlterVol        $0F
000A1601 C0                         	dc.b	nEb5
000A1602 E6F1                       	smpsAlterVol        $F1
000A1604 BDC0 C208 C910             	dc.b	nC5, nEb5, nF5, $08, nC6, $10
000A160A E60F                       	smpsAlterVol        $0F
000A160C C9                         	dc.b	nC6
000A160D E6F1                       	smpsAlterVol        $F1
000A160F C5                         	dc.b	nAb5
000A1610 E60F                       	smpsAlterVol        $0F
000A1612 08                         	dc.b	$08
000A1613 E6F1                       	smpsAlterVol        $F1
000A1615 C010                       	dc.b	nEb5, $10
000A1617 E60F                       	smpsAlterVol        $0F
000A1619 C0                         	dc.b	nEb5
000A161A E6F1                       	smpsAlterVol        $F1
000A161C C208                       	dc.b	nF5, $08
000A161E E1FF                       	smpsAlterNote       $FF
000A1620 C410                       	dc.b	nG5, $10
000A1622 E100                       	smpsAlterNote       $00
000A1624 C5C7                       	dc.b	nAb5, nBb5
000A1626 E60F                       	smpsAlterVol        $0F
000A1628 C7                         	dc.b	nBb5
000A1629 E6F1                       	smpsAlterVol        $F1
000A162B C5                         	dc.b	nAb5
000A162C E60F                       	smpsAlterVol        $0F
000A162E 08                         	dc.b	$08
000A162F E6F1                       	smpsAlterVol        $F1
000A1631 E1FF                       	smpsAlterNote       $FF
000A1633 C410                       	dc.b	nG5, $10
000A1635 E60F                       	smpsAlterVol        $0F
000A1637 C4                         	dc.b	nG5
000A1638 E6F1                       	smpsAlterVol        $F1
000A163A C4                         	dc.b	nG5
000A163B E100                       	smpsAlterNote       $00
000A163D C208 C010 C2               	dc.b	nF5, $08, nEb5, $10, nF5
000A1642 E60F                       	smpsAlterVol        $0F
000A1644 28                         	dc.b	$28
000A1645 E6F1                       	smpsAlterVol        $F1
000A1647 C008 10                    	dc.b	nEb5, $08, $10
000A164A E60F                       	smpsAlterVol        $0F
000A164C 21                         	dc.b	$21
000A164D E0C0                       	smpsPan             panCenter, $00
000A164F F6FF 29                    	smpsJump            GentleBreeze_Loop12
000A1652                            
000A1652                            ; FM2 Data
000A1652                            GentleBreeze_FM2:
000A1654 E60C                       	smpsAlterVol        $0C
000A1656 E0C0                       	smpsPan             panCenter, $00
000A1658 9E20 A018 A508 8040 A020+  	dc.b	nF2, $20, nG2, $18, nC3, $08, nRst, $40, nG2, $20, nF2, $18
000A1664 A508 8020 A010 9E9E 20A0+  	dc.b	nC3, $08, nRst, $20, nG2, $10, nF2, nF2, $20, nG2, $18, nC3
000A1670 0880 409E 38A0 489E 20A0+  	dc.b	$08, nRst, $40, nF2, $38, nG2, $48, nF2, $20, nG2, $18, nC3
000A167C 0880 40A0 209E 18A5 0880+  	dc.b	$08, nRst, $40, nG2, $20, nF2, $18, nC3, $08, nRst, $20, nG2
000A1688 109E 9E20 A018 A508 8040+  	dc.b	$10, nF2, nF2, $20, nG2, $18, nC3, $08, nRst, $40, nF2, $38
000A1694 A039                       	dc.b	nG2, $39
000A1696                            
000A1696                            GentleBreeze_Jump04:
000A1696 E7A0 0F                    	dc.b	smpsNoAttack, nG2, $0F
000A1699                            
000A1699                            GentleBreeze_Loop11:
000A1699 A118 0880 10A1 2008 A09E+  	dc.b	nAb2, $18, $08, nRst, $10, nAb2, $20, $08, nG2, nF2, nFs2, nG2
000A16A5 A1A0 1808 8010 A020 0880+  	dc.b	nAb2, nG2, $18, $08, nRst, $10, nG2, $20, $08, nRst, nG2, nC3
000A16B1 189E A020 A510 A008 A518+  	dc.b	$18, nF2, nG2, $20, nC3, $10, nG2, $08, nC3, $18, nG2, $08
000A16BD 9FA0 9C18 979C 2008 9EA2+  	dc.b	nFs2, nG2, nEb2, $18, nBb1, nEb2, $20, $08, nF2, nA2, nEb3, nB2
000A16C9 A3                         	dc.b	nBb2
000A16CA F700 02FF CB               	smpsLoop            $00, $02, GentleBreeze_Loop11
000A16CF 9E20 A018 A508 8040 A020+  	dc.b	nF2, $20, nG2, $18, nC3, $08, nRst, $40, nG2, $20, nF2, $18
000A16DB A508 8020 A010 9E9E 20A0+  	dc.b	nC3, $08, nRst, $20, nG2, $10, nF2, nF2, $20, nG2, $18, nC3
000A16E7 0880 409E 38A0 489E 20A0+  	dc.b	$08, nRst, $40, nF2, $38, nG2, $48, nF2, $20, nG2, $18, nC3
000A16F3 0880 40A0 209E 18A5 0880+  	dc.b	$08, nRst, $40, nG2, $20, nF2, $18, nC3, $08, nRst, $20, nG2
000A16FF 109E 9E20 A018 A508 8040+  	dc.b	$10, nF2, nF2, $20, nG2, $18, nC3, $08, nRst, $40, nF2, $38
000A170B A039                       	dc.b	nG2, $39
000A170D E0C0                       	smpsPan             panCenter, $00
000A170F F6FF 85                    	smpsJump            GentleBreeze_Jump04
000A1712                            
000A1712                            ; FM3 Data
000A1712                            GentleBreeze_FM3:
000A1714 E0C0                       	smpsPan             panCenter, $00
000A1716 807F 7F7F 7F04             	dc.b	nRst, $7F, $7F, $7F, $7F, $04
000A171E E616                       	smpsAlterVol        $16
000A1720 F000 0207 03               	smpsModSet          $00, $02, $07, $03
000A1725                            
000A1725                            GentleBreeze_Loop0F:
000A1725 C008 BDC9                  	dc.b	nEb5, $08, nC5, nC6
000A1729 E1FF                       	smpsAlterNote       $FF
000A172B C4                         	dc.b	nG5
000A172C E100                       	smpsAlterNote       $00
000A172E C0BB BDC0 10               	dc.b	nEb5, nBb4, nC5, nEb5, $10
000A1733 E608                       	smpsAlterVol        $08
000A1735 C080 08                    	dc.b	nEb5, nRst, $08
000A1738 E6F8                       	smpsAlterVol        $F8
000A173A C7                         	dc.b	nBb5
000A173B E1FF                       	smpsAlterNote       $FF
000A173D C4                         	dc.b	nG5
000A173E E100                       	smpsAlterNote       $00
000A1740 C0BB                       	dc.b	nEb5, nBb4
000A1742 F700 02FF DF               	smpsLoop            $00, $02, GentleBreeze_Loop0F
000A1747 C0BD C9                    	dc.b	nEb5, nC5, nC6
000A174A E1FF                       	smpsAlterNote       $FF
000A174C C4                         	dc.b	nG5
000A174D E100                       	smpsAlterNote       $00
000A174F C0BB BDC0 10               	dc.b	nEb5, nBb4, nC5, nEb5, $10
000A1754 E608                       	smpsAlterVol        $08
000A1756 C080 08                    	dc.b	nEb5, nRst, $08
000A1759 E6F8                       	smpsAlterVol        $F8
000A175B E1FF                       	smpsAlterNote       $FF
000A175D C4                         	dc.b	nG5
000A175E E100                       	smpsAlterNote       $00
000A1760 C2C0 BBC0 BBC7 C5          	dc.b	nF5, nEb5, nBb4, nEb5, nBb4, nBb5, nAb5
000A1767 E1FF                       	smpsAlterNote       $FF
000A1769 C4                         	dc.b	nG5
000A176A E100                       	smpsAlterNote       $00
000A176C C2C0 BBBB C0               	dc.b	nF5, nEb5, nBb4, nBb4, nEb5
000A1771 E1FF                       	smpsAlterNote       $FF
000A1773 C4                         	dc.b	nG5
000A1774 E100                       	smpsAlterNote       $00
000A1776 C7                         	dc.b	nBb5
000A1777 E1FF                       	smpsAlterNote       $FF
000A1779 C4                         	dc.b	nG5
000A177A E100                       	smpsAlterNote       $00
000A177C C2C0 01                    	dc.b	nF5, nEb5, $01
000A177F                            
000A177F                            GentleBreeze_Jump03:
000A177F E7C0 07BB 08               	dc.b	smpsNoAttack, nEb5, $07, nBb4, $08
000A1786 E6FA                       	smpsAlterVol        $FA
000A1788 F4                         	smpsModOff
000A1789 E1FF                       	smpsAlterNote       $FF
000A178B B850                       	dc.b	nG4, $50
000A178D E100                       	smpsAlterNote       $00
000A178F B408 B1B4 B5B6 AF18 B510+  	dc.b	nEb4, $08, nC4, nEb4, nE4, nF4, nBb3, $18, nE4, $10, nF4, $08
000A179B E1FF                       	smpsAlterNote       $FF
000A179D B810                       	dc.b	nG4, $10
000A179F E100                       	smpsAlterNote       $00
000A17A1 BB18 B908 80               	dc.b	nBb4, $18, nAb4, $08, nRst
000A17A6 E1FF                       	smpsAlterNote       $FF
000A17A8 B8                         	dc.b	nG4
000A17A9 E100                       	smpsAlterNote       $00
000A17AB B610                       	dc.b	nF4, $10
000A17AD E1FF                       	smpsAlterNote       $FF
000A17AF B850                       	dc.b	nG4, $50
000A17B1 E100                       	smpsAlterNote       $00
000A17B3 B608 B410 08B6 AF60        	dc.b	nF4, $08, nEb4, $10, $08, nF4, nBb3, $60
000A17BB E1FF                       	smpsAlterNote       $FF
000A17BD AC08                       	dc.b	nG3, $08
000A17BF E100                       	smpsAlterNote       $00
000A17C1 AFB3 B4B6 B7               	dc.b	nBb3, nD4, nEb4, nF4, nFs4
000A17C6 E1FF                       	smpsAlterNote       $FF
000A17C8 B850                       	dc.b	nG4, $50
000A17CA E100                       	smpsAlterNote       $00
000A17CC BB08                       	dc.b	nBb4, $08
000A17CE E1FF                       	smpsAlterNote       $FF
000A17D0 B8                         	dc.b	nG4
000A17D1 E100                       	smpsAlterNote       $00
000A17D3 BDBB B6                    	dc.b	nC5, nBb4, nF4
000A17D6 E1FF                       	smpsAlterNote       $FF
000A17D8 B810 08                    	dc.b	nG4, $10, $08
000A17DB E100                       	smpsAlterNote       $00
000A17DD B6                         	dc.b	nF4
000A17DE E1FF                       	smpsAlterNote       $FF
000A17E0 B880                       	dc.b	nG4, nRst
000A17E2 E100                       	smpsAlterNote       $00
000A17E4 BBB9 BB                    	dc.b	nBb4, nAb4, nBb4
000A17E7 E1FF                       	smpsAlterNote       $FF
000A17E9 B810                       	dc.b	nG4, $10
000A17EB E100                       	smpsAlterNote       $00
000A17ED B308 B4B1 AFB4 B5          	dc.b	nD4, $08, nEb4, nC4, nBb3, nEb4, nE4
000A17F4 E1FF                       	smpsAlterNote       $FF
000A17F6 B87F E77F E702 807F 7F7F+  	dc.b	nG4, $7F, smpsNoAttack, $7F, smpsNoAttack, $02, nRst, $7F, $7F, $7F, $7F, $04
000A1804 E606                       	smpsAlterVol        $06
000A1806 F000 0207 03               	smpsModSet          $00, $02, $07, $03
000A180B E100                       	smpsAlterNote       $00
000A180D                            
000A180D                            GentleBreeze_Loop10:
000A180D C008 BDC9                  	dc.b	nEb5, $08, nC5, nC6
000A1811 E1FF                       	smpsAlterNote       $FF
000A1813 C4                         	dc.b	nG5
000A1814 E100                       	smpsAlterNote       $00
000A1816 C0BB BDC0 10               	dc.b	nEb5, nBb4, nC5, nEb5, $10
000A181B E608                       	smpsAlterVol        $08
000A181D C080 08                    	dc.b	nEb5, nRst, $08
000A1820 E6F8                       	smpsAlterVol        $F8
000A1822 C7                         	dc.b	nBb5
000A1823 E1FF                       	smpsAlterNote       $FF
000A1825 C4                         	dc.b	nG5
000A1826 E100                       	smpsAlterNote       $00
000A1828 C0BB                       	dc.b	nEb5, nBb4
000A182A F700 02FF DF               	smpsLoop            $00, $02, GentleBreeze_Loop10
000A182F C0BD C9                    	dc.b	nEb5, nC5, nC6
000A1832 E1FF                       	smpsAlterNote       $FF
000A1834 C4                         	dc.b	nG5
000A1835 E100                       	smpsAlterNote       $00
000A1837 C0BB BDC0 10               	dc.b	nEb5, nBb4, nC5, nEb5, $10
000A183C E608                       	smpsAlterVol        $08
000A183E C080 08                    	dc.b	nEb5, nRst, $08
000A1841 E6F8                       	smpsAlterVol        $F8
000A1843 E1FF                       	smpsAlterNote       $FF
000A1845 C4                         	dc.b	nG5
000A1846 E100                       	smpsAlterNote       $00
000A1848 C2C0 BBC0 BBC7 C5          	dc.b	nF5, nEb5, nBb4, nEb5, nBb4, nBb5, nAb5
000A184F E1FF                       	smpsAlterNote       $FF
000A1851 C4                         	dc.b	nG5
000A1852 E100                       	smpsAlterNote       $00
000A1854 C2C0 BBBB C0               	dc.b	nF5, nEb5, nBb4, nBb4, nEb5
000A1859 E1FF                       	smpsAlterNote       $FF
000A185B C4                         	dc.b	nG5
000A185C E100                       	smpsAlterNote       $00
000A185E C7                         	dc.b	nBb5
000A185F E1FF                       	smpsAlterNote       $FF
000A1861 C4                         	dc.b	nG5
000A1862 E100                       	smpsAlterNote       $00
000A1864 C2C0 01                    	dc.b	nF5, nEb5, $01
000A1867 E0C0                       	smpsPan             panCenter, $00
000A1869 F1                         	smpsModOn
000A186A F6FF 13                    	smpsJump            GentleBreeze_Jump03
000A186D                            
000A186D                            ; FM4 Data
000A186D                            GentleBreeze_FM4:
000A186F E0C0                       	smpsPan             panCenter, $00
000A1871 80                         	dc.b	nRst
000A1872                            
000A1872                            GentleBreeze_Loop0D:
000A1872 7F                         	dc.b	$7F
000A1873 F700 07FF FB               	smpsLoop            $00, $07, GentleBreeze_Loop0D
000A1878 77                         	dc.b	$77
000A187B E609                       	smpsAlterVol        $09
000A187D C001                       	dc.b	nEb5, $01
000A187F                            
000A187F                            GentleBreeze_Jump02:
000A187F E7C0 07C2 08               	dc.b	smpsNoAttack, nEb5, $07, nF5, $08
000A1884 E607                       	smpsAlterVol        $07
000A1886 E1FF                       	smpsAlterNote       $FF
000A1888 C450                       	dc.b	nG5, $50
000A188A E100                       	smpsAlterNote       $00
000A188C C008 BDC0 C1C2 BB18 C110+  	dc.b	nEb5, $08, nC5, nEb5, nE5, nF5, nBb4, $18, nE5, $10, nF5, $08
000A1898 E1FF                       	smpsAlterNote       $FF
000A189A C410                       	dc.b	nG5, $10
000A189C E100                       	smpsAlterNote       $00
000A189E C718 C508 80               	dc.b	nBb5, $18, nAb5, $08, nRst
000A18A3 E1FF                       	smpsAlterNote       $FF
000A18A5 C4                         	dc.b	nG5
000A18A6 E100                       	smpsAlterNote       $00
000A18A8 C210                       	dc.b	nF5, $10
000A18AA E1FF                       	smpsAlterNote       $FF
000A18AC C450                       	dc.b	nG5, $50
000A18AE E100                       	smpsAlterNote       $00
000A18B0 C208 C010 08C2 BB60        	dc.b	nF5, $08, nEb5, $10, $08, nF5, nBb4, $60
000A18B8 E1FF                       	smpsAlterNote       $FF
000A18BA B808                       	dc.b	nG4, $08
000A18BC E100                       	smpsAlterNote       $00
000A18BE BBBF C0C2 C3               	dc.b	nBb4, nD5, nEb5, nF5, nFs5
000A18C3 E1FF                       	smpsAlterNote       $FF
000A18C5 C450                       	dc.b	nG5, $50
000A18C7 E100                       	smpsAlterNote       $00
000A18C9 C708                       	dc.b	nBb5, $08
000A18CB E1FF                       	smpsAlterNote       $FF
000A18CD C4                         	dc.b	nG5
000A18CE E100                       	smpsAlterNote       $00
000A18D0 C9C7 C2                    	dc.b	nC6, nBb5, nF5
000A18D3 E1FF                       	smpsAlterNote       $FF
000A18D5 C410 08                    	dc.b	nG5, $10, $08
000A18D8 E100                       	smpsAlterNote       $00
000A18DA C2                         	dc.b	nF5
000A18DB E1FF                       	smpsAlterNote       $FF
000A18DD C480                       	dc.b	nG5, nRst
000A18DF E100                       	smpsAlterNote       $00
000A18E1 C7C5 C7                    	dc.b	nBb5, nAb5, nBb5
000A18E4 E1FF                       	smpsAlterNote       $FF
000A18E6 C410                       	dc.b	nG5, $10
000A18E8 E100                       	smpsAlterNote       $00
000A18EA BF08 C0BD BBC0 C1          	dc.b	nD5, $08, nEb5, nC5, nBb4, nEb5, nE5
000A18F1 E1FF                       	smpsAlterNote       $FF
000A18F3 C47F E701 7FE7 0180        	dc.b	nG5, $7F, smpsNoAttack, $01, $7F, smpsNoAttack, $01, nRst
000A18FB                            
000A18FB                            GentleBreeze_Loop0E:
000A18FB 7F                         	dc.b	$7F
000A18FC F700 07FF FB               	smpsLoop            $00, $07, GentleBreeze_Loop0E
000A1901 77                         	dc.b	$77
000A1902 E100                       	smpsAlterNote       $00
000A1904 C001                       	dc.b	nEb5, $01
000A1906 E6F9                       	smpsAlterVol        $F9
000A1908 E0C0                       	smpsPan             panCenter, $00
000A190A E100                       	smpsAlterNote       $00
000A190C F6FF 71                    	smpsJump            GentleBreeze_Jump02
000A190F                            
000A190F                            ; FM5 Data
000A190F                            GentleBreeze_FM5:
000A1911 E0C0                       	smpsPan             panCenter, $00
000A1913 A5                         	dc.b	nC3
000A1914                            
000A1914                            GentleBreeze_Loop06:
000A1914 10                         	dc.b	$10
000A1915 E607                       	smpsAlterVol        $07
000A1917 A5                         	dc.b	nC3
000A1918 E6F9                       	smpsAlterVol        $F9
000A191A 08                         	dc.b	$08
000A191B E607                       	smpsAlterVol        $07
000A191D A5                         	dc.b	nC3
000A191E E608                       	smpsAlterVol        $08
000A1920 A5                         	dc.b	nC3
000A1921 E6F1                       	smpsAlterVol        $F1
000A1923 18                         	dc.b	$18
000A1924 E607                       	smpsAlterVol        $07
000A1926 10                         	dc.b	$10
000A1927 E608                       	smpsAlterVol        $08
000A1929 A5                         	dc.b	nC3
000A192A E6F1                       	smpsAlterVol        $F1
000A192C A5                         	dc.b	nC3
000A192D F700 03FF E3               	smpsLoop            $00, $03, GentleBreeze_Loop06
000A1932 A5                         	dc.b	nC3
000A1933                            
000A1933                            GentleBreeze_Loop07:
000A1933 E607                       	smpsAlterVol        $07
000A1935 A5                         	dc.b	nC3
000A1936 E6F9                       	smpsAlterVol        $F9
000A1938 08                         	dc.b	$08
000A1939 E607                       	smpsAlterVol        $07
000A193B A5                         	dc.b	nC3
000A193C E608                       	smpsAlterVol        $08
000A193E A5                         	dc.b	nC3
000A193F E6F1                       	smpsAlterVol        $F1
000A1941 10                         	dc.b	$10
000A1942 F700 02FF ED               	smpsLoop            $00, $02, GentleBreeze_Loop07
000A1947                            
000A1947                            GentleBreeze_Loop08:
000A1947 A5                         	dc.b	nC3
000A1948 E607                       	smpsAlterVol        $07
000A194A A5                         	dc.b	nC3
000A194B E6F9                       	smpsAlterVol        $F9
000A194D 08                         	dc.b	$08
000A194E E607                       	smpsAlterVol        $07
000A1950 A5                         	dc.b	nC3
000A1951 E608                       	smpsAlterVol        $08
000A1953 A5                         	dc.b	nC3
000A1954 E6F1                       	smpsAlterVol        $F1
000A1956 18                         	dc.b	$18
000A1957 E607                       	smpsAlterVol        $07
000A1959 10                         	dc.b	$10
000A195A E608                       	smpsAlterVol        $08
000A195C A5                         	dc.b	nC3
000A195D E6F1                       	smpsAlterVol        $F1
000A195F A5                         	dc.b	nC3
000A1960 F700 03FF E3               	smpsLoop            $00, $03, GentleBreeze_Loop08
000A1965 A5                         	dc.b	nC3
000A1966 E607                       	smpsAlterVol        $07
000A1968 A5                         	dc.b	nC3
000A1969 E6F9                       	smpsAlterVol        $F9
000A196B 08                         	dc.b	$08
000A196C E607                       	smpsAlterVol        $07
000A196E A5                         	dc.b	nC3
000A196F E608                       	smpsAlterVol        $08
000A1971 A5                         	dc.b	nC3
000A1972 E6F1                       	smpsAlterVol        $F1
000A1974 10                         	dc.b	$10
000A1975 E607                       	smpsAlterVol        $07
000A1977 A5                         	dc.b	nC3
000A1978 E6F9                       	smpsAlterVol        $F9
000A197A 08                         	dc.b	$08
000A197B E607                       	smpsAlterVol        $07
000A197D A5                         	dc.b	nC3
000A197E E608                       	smpsAlterVol        $08
000A1980 A5                         	dc.b	nC3
000A1981 E6F1                       	smpsAlterVol        $F1
000A1983 01                         	dc.b	$01
000A1984                            
000A1984                            GentleBreeze_Jump01:
000A1984 E7A5 0F                    	dc.b	smpsNoAttack, nC3, $0F
000A1987 E607                       	smpsAlterVol        $07
000A1989                            
000A1989                            GentleBreeze_Loop09:
000A1989 10                         	dc.b	$10
000A198A E608                       	smpsAlterVol        $08
000A198C A5                         	dc.b	nC3
000A198D E6F1                       	smpsAlterVol        $F1
000A198F 08                         	dc.b	$08
000A1990 E60F                       	smpsAlterVol        $0F
000A1992 18                         	dc.b	$18
000A1993 E6F8                       	smpsAlterVol        $F8
000A1995 F700 0FFF F0               	smpsLoop            $00, $0F, GentleBreeze_Loop09
000A199A 10                         	dc.b	$10
000A199B E608                       	smpsAlterVol        $08
000A199D A5                         	dc.b	nC3
000A199E E6F1                       	smpsAlterVol        $F1
000A19A0 08                         	dc.b	$08
000A19A1 E60F                       	smpsAlterVol        $0F
000A19A3 18                         	dc.b	$18
000A19A4 E6F1                       	smpsAlterVol        $F1
000A19A6                            
000A19A6                            GentleBreeze_Loop0A:
000A19A6 10                         	dc.b	$10
000A19A7 E607                       	smpsAlterVol        $07
000A19A9 A5                         	dc.b	nC3
000A19AA E6F9                       	smpsAlterVol        $F9
000A19AC 08                         	dc.b	$08
000A19AD E607                       	smpsAlterVol        $07
000A19AF A5                         	dc.b	nC3
000A19B0 E608                       	smpsAlterVol        $08
000A19B2 A5                         	dc.b	nC3
000A19B3 E6F1                       	smpsAlterVol        $F1
000A19B5 18                         	dc.b	$18
000A19B6 E607                       	smpsAlterVol        $07
000A19B8 10                         	dc.b	$10
000A19B9 E608                       	smpsAlterVol        $08
000A19BB A5                         	dc.b	nC3
000A19BC E6F1                       	smpsAlterVol        $F1
000A19BE A5                         	dc.b	nC3
000A19BF F700 03FF E3               	smpsLoop            $00, $03, GentleBreeze_Loop0A
000A19C4 A5                         	dc.b	nC3
000A19C5                            
000A19C5                            GentleBreeze_Loop0B:
000A19C5 E607                       	smpsAlterVol        $07
000A19C7 A5                         	dc.b	nC3
000A19C8 E6F9                       	smpsAlterVol        $F9
000A19CA 08                         	dc.b	$08
000A19CB E607                       	smpsAlterVol        $07
000A19CD A5                         	dc.b	nC3
000A19CE E608                       	smpsAlterVol        $08
000A19D0 A5                         	dc.b	nC3
000A19D1 E6F1                       	smpsAlterVol        $F1
000A19D3 10                         	dc.b	$10
000A19D4 F700 02FF ED               	smpsLoop            $00, $02, GentleBreeze_Loop0B
000A19D9                            
000A19D9                            GentleBreeze_Loop0C:
000A19D9 A5                         	dc.b	nC3
000A19DA E607                       	smpsAlterVol        $07
000A19DC A5                         	dc.b	nC3
000A19DD E6F9                       	smpsAlterVol        $F9
000A19DF 08                         	dc.b	$08
000A19E0 E607                       	smpsAlterVol        $07
000A19E2 A5                         	dc.b	nC3
000A19E3 E608                       	smpsAlterVol        $08
000A19E5 A5                         	dc.b	nC3
000A19E6 E6F1                       	smpsAlterVol        $F1
000A19E8 18                         	dc.b	$18
000A19E9 E607                       	smpsAlterVol        $07
000A19EB 10                         	dc.b	$10
000A19EC E608                       	smpsAlterVol        $08
000A19EE A5                         	dc.b	nC3
000A19EF E6F1                       	smpsAlterVol        $F1
000A19F1 A5                         	dc.b	nC3
000A19F2 F700 03FF E3               	smpsLoop            $00, $03, GentleBreeze_Loop0C
000A19F7 A5                         	dc.b	nC3
000A19F8 E607                       	smpsAlterVol        $07
000A19FA A5                         	dc.b	nC3
000A19FB E6F9                       	smpsAlterVol        $F9
000A19FD 08                         	dc.b	$08
000A19FE E607                       	smpsAlterVol        $07
000A1A00 A5                         	dc.b	nC3
000A1A01 E608                       	smpsAlterVol        $08
000A1A03 A5                         	dc.b	nC3
000A1A04 E6F1                       	smpsAlterVol        $F1
000A1A06 10                         	dc.b	$10
000A1A07 E607                       	smpsAlterVol        $07
000A1A09 A5                         	dc.b	nC3
000A1A0A E6F9                       	smpsAlterVol        $F9
000A1A0C 08                         	dc.b	$08
000A1A0D E607                       	smpsAlterVol        $07
000A1A0F A5                         	dc.b	nC3
000A1A10 E608                       	smpsAlterVol        $08
000A1A12 A5                         	dc.b	nC3
000A1A13 E6F1                       	smpsAlterVol        $F1
000A1A15 01                         	dc.b	$01
000A1A16 E0C0                       	smpsPan             panCenter, $00
000A1A18 F6FF 6A                    	smpsJump            GentleBreeze_Jump01
000A1A1B                            
000A1A1B                            ; DAC Data
000A1A1B                            GentleBreeze_DAC:
000A1A1B 81                         	dc.b	dKick
000A1A1C                            
000A1A1C                            GentleBreeze_Loop00:
000A1A1C 2018 2810 0881             	dc.b	$20, $18, $28, $10, $08, dKick
000A1A22 F700 02FF F6               	smpsLoop            $00, $02, GentleBreeze_Loop00
000A1A27 2018 7F80 2988 0889 8A8B+  	dc.b	$20, $18, $7F, nRst, $29, dHiTimpani, $08, dMidTimpani, dLowTimpani, dVLowTimpani, dKick
000A1A32                            
000A1A32                            GentleBreeze_Loop01:
000A1A32 2018 2810 0881             	dc.b	$20, $18, $28, $10, $08, dKick
000A1A38 F700 02FF F6               	smpsLoop            $00, $02, GentleBreeze_Loop01
000A1A3D 2018 7F80 2988 0889 8A01   	dc.b	$20, $18, $7F, nRst, $29, dHiTimpani, $08, dMidTimpani, dLowTimpani, $01
000A1A47                            
000A1A47                            GentleBreeze_Jump00:
000A1A47 8007 8B08                  	dc.b	nRst, $07, dVLowTimpani, $08
000A1A4B                            
000A1A4B                            GentleBreeze_Loop02:
000A1A4B 81                         	dc.b	dKick
000A1A4C                            
000A1A4C                            GentleBreeze_Loop03:
000A1A4C 1008 8182 2081 1008 8182+  	dc.b	$10, $08, dKick, dSnare, $20, dKick, $10, $08, dKick, dSnare, $10, dMidTimpani
000A1A58 088A                       	dc.b	$08, dLowTimpani
000A1A5A F700 03FF ED               	smpsLoop            $00, $03, GentleBreeze_Loop02
000A1A5F 8110 0881 8210 8808 8982+  	dc.b	dKick, $10, $08, dKick, dSnare, $10, dHiTimpani, $08, dMidTimpani, dSnare, dLowTimpani, dVLowTimpani
000A1A6B 1082 0881 18               	dc.b	$10, dSnare, $08, dKick, $18
000A1A70 F701 02FF D8               	smpsLoop            $01, $02, GentleBreeze_Loop03
000A1A75                            
000A1A75                            GentleBreeze_Loop04:
000A1A75 2018 2810 0881             	dc.b	$20, $18, $28, $10, $08, dKick
000A1A7B F700 02FF F6               	smpsLoop            $00, $02, GentleBreeze_Loop04
000A1A80 2018 7F80 2988 0889 8A8B+  	dc.b	$20, $18, $7F, nRst, $29, dHiTimpani, $08, dMidTimpani, dLowTimpani, dVLowTimpani, dKick
000A1A8B                            
000A1A8B                            GentleBreeze_Loop05:
000A1A8B 2018 2810 0881             	dc.b	$20, $18, $28, $10, $08, dKick
000A1A91 F700 02FF F6               	smpsLoop            $00, $02, GentleBreeze_Loop05
000A1A96 2018 7F80 2988 0889 8A01   	dc.b	$20, $18, $7F, nRst, $29, dHiTimpani, $08, dMidTimpani, dLowTimpani, $01
000A1AA0 F6FF A5                    	smpsJump            GentleBreeze_Jump00
000A1AA3                            
000A1AA3                            ; PSG 1 Data
000A1AA3                            GentleBreeze_PSG1:
000A1AA3 80                         	dc.b	nRst
000A1AA4                            
000A1AA4                            GentleBreeze_LoopPSG02:
000A1AA4 7F                         	dc.b	$7F
000A1AA5 F700 08FF FB               	smpsLoop            $00, $08, GentleBreeze_LoopPSG02
000A1AAA 08                         	dc.b	$08
000A1AAB EC04                       	smpsPSGAlterVol     $04
000A1AAD                            
000A1AAD                            GentleBreeze_JumpPSG01:
000A1AAD A37F A07F 019E 7F7F 02A3+  	dc.b	nBb2, $7F, nG2, $7F, $01, nF2, $7F, $7F, $02, nBb2, $7F, $01
000A1AB9 A07F 019E 7F7F 0280        	dc.b	nG2, $7F, $01, nF2, $7F, $7F, $02, nRst
000A1AC1                            
000A1AC1                            GentleBreeze_LoopPSG03:
000A1AC1 7F                         	dc.b	$7F
000A1AC2 F700 08FF FB               	smpsLoop            $00, $08, GentleBreeze_LoopPSG03
000A1AC7 08A3 01                    	dc.b	$08, nBb2, $01
000A1ACA F6FF E1                    	smpsJump            GentleBreeze_JumpPSG01
000A1ACD                            
000A1ACD                            ; PSG2 Data
000A1ACD                            GentleBreeze_PSG2:
000A1ACD 80                         	dc.b	nRst
000A1ACE                            
000A1ACE                            GentleBreeze_LoopPSG00:
000A1ACE 7F                         	dc.b	$7F
000A1ACF F700 08FF FB               	smpsLoop            $00, $08, GentleBreeze_LoopPSG00
000A1AD4 08                         	dc.b	$08
000A1AD5 EC04                       	smpsPSGAlterVol     $04
000A1AD7                            
000A1AD7                            GentleBreeze_JumpPSG00:
000A1AD7 A87F A77F 01A5 7F7F 02A8+  	dc.b	nEb3, $7F, nD3, $7F, $01, nC3, $7F, $7F, $02, nEb3, $7F, $01
000A1AE3 A77F 01A5 7F7F 0280        	dc.b	nD3, $7F, $01, nC3, $7F, $7F, $02, nRst
000A1AEB                            
000A1AEB                            GentleBreeze_LoopPSG01:
000A1AEB 7F                         	dc.b	$7F
000A1AEC F700 08FF FB               	smpsLoop            $00, $08, GentleBreeze_LoopPSG01
000A1AF1 08A8 01                    	dc.b	$08, nEb3, $01
000A1AF4 F6FF E1                    	smpsJump            GentleBreeze_JumpPSG00
000A1AF7                            
000A1AF7                            GentleBreeze_Voices:
000A1AF7                            ;	Voice $00
000A1AF7                            ;	$0C
000A1AF7                            ;	$2A, $70, $2A, $71, 	$1F, $1F, $1F, $1F, 	$0D, $04, $11, $0C
000A1AF7                            ;	$00, $00, $00, $01, 	$F3, $F4, $F1, $89, 	$7F, $7F, $18, $00
000A1AF7                            	smpsVcAlgorithm     $04
000A1AF7                            	smpsVcFeedback      $01
000A1AF7                            	smpsVcUnusedBits    $00
000A1AF7                            	smpsVcDetune        $07, $02, $07, $02
000A1AF7                            	smpsVcCoarseFreq    $01, $0A, $00, $0A
000A1AF7                            	smpsVcRateScale     $00, $00, $00, $00
000A1AF7                            	smpsVcAttackRate    $1F, $1F, $1F, $1F
000A1AF7                            	smpsVcAmpMod        $00, $00, $00, $00
000A1AF7                            	smpsVcDecayRate1    $0C, $11, $04, $0D
000A1AF7                            	smpsVcDecayRate2    $01, $00, $00, $00
000A1AF7                            	smpsVcDecayLevel    $08, $0F, $0F, $0F
000A1AF7                            	smpsVcReleaseRate   $09, $01, $04, $03
000A1AF7 0C2A 702A 711F 1F1F 1F0D+  	smpsVcTotalLevel    $00, $18, $7F, $7F
000A1B10                            
000A1B10                            ;	Voice $01
000A1B10                            ;	$38
000A1B10                            ;	$54, $17, $70, $30, 	$9F, $1F, $9F, $1F, 	$12, $02, $0A, $0A
000A1B10                            ;	$00, $10, $00, $00, 	$05, $05, $05, $08, 	$21, $35, $10, $00
000A1B10                            	smpsVcAlgorithm     $00
000A1B10                            	smpsVcFeedback      $07
000A1B10                            	smpsVcUnusedBits    $00
000A1B10                            	smpsVcDetune        $03, $07, $01, $05
000A1B10                            	smpsVcCoarseFreq    $00, $00, $07, $04
000A1B10                            	smpsVcRateScale     $00, $02, $00, $02
000A1B10                            	smpsVcAttackRate    $1F, $1F, $1F, $1F
000A1B10                            	smpsVcAmpMod        $00, $00, $00, $00
000A1B10                            	smpsVcDecayRate1    $0A, $0A, $02, $12
000A1B10                            	smpsVcDecayRate2    $00, $00, $10, $00
000A1B10                            	smpsVcDecayLevel    $00, $00, $00, $00
000A1B10                            	smpsVcReleaseRate   $08, $05, $05, $05
000A1B10 3854 1770 309F 1F9F 1F12+  	smpsVcTotalLevel    $00, $10, $35, $21
000A1B29                            
000A1B29                            ;	Voice $02
000A1B29                            ;	$00
000A1B29                            ;	$00, $00, $00, $00, 	$00, $00, $00, $00, 	$00, $00, $00, $00
000A1B29                            ;	$00, $00, $00, $00, 	$FF, $FF, $FF, $FF, 	$00, $00, $00, $00
000A1B29                            	smpsVcAlgorithm     $00
000A1B29                            	smpsVcFeedback      $00
000A1B29                            	smpsVcUnusedBits    $00
000A1B29                            	smpsVcDetune        $00, $00, $00, $00
000A1B29                            	smpsVcCoarseFreq    $00, $00, $00, $00
000A1B29                            	smpsVcRateScale     $00, $00, $00, $00
000A1B29                            	smpsVcAttackRate    $00, $00, $00, $00
000A1B29                            	smpsVcAmpMod        $00, $00, $00, $00
000A1B29                            	smpsVcDecayRate1    $00, $00, $00, $00
000A1B29                            	smpsVcDecayRate2    $00, $00, $00, $00
000A1B29                            	smpsVcDecayLevel    $0F, $0F, $0F, $0F
000A1B29                            	smpsVcReleaseRate   $0F, $0F, $0F, $0F
000A1B29 0000 0000 0000 0000 0000+  	smpsVcTotalLevel    $00, $00, $00, $00
000A1B42                            
000A1B42                            ;	Voice $03
000A1B42                            ;	$36
000A1B42                            ;	$0F, $0F, $08, $09, 	$16, $18, $00, $1F, 	$0F, $16, $0C, $0B
000A1B42                            ;	$00, $12, $00, $00, 	$06, $2F, $4F, $4F, 	$00, $00, $65, $53
000A1B42                            	smpsVcAlgorithm     $06
000A1B42                            	smpsVcFeedback      $06
000A1B42                            	smpsVcUnusedBits    $00
000A1B42                            	smpsVcDetune        $00, $00, $00, $00
000A1B42                            	smpsVcCoarseFreq    $09, $08, $0F, $0F
000A1B42                            	smpsVcRateScale     $00, $00, $00, $00
000A1B42                            	smpsVcAttackRate    $1F, $00, $18, $16
000A1B42                            	smpsVcAmpMod        $00, $00, $00, $00
000A1B42                            	smpsVcDecayRate1    $0B, $0C, $16, $0F
000A1B42                            	smpsVcDecayRate2    $00, $00, $12, $00
000A1B42                            	smpsVcDecayLevel    $04, $04, $02, $00
000A1B42                            	smpsVcReleaseRate   $0F, $0F, $0F, $06
000A1B42 360F 0F08 0916 1800 1F0F+  	smpsVcTotalLevel    $53, $65, $00, $00
000A1B5B                            
000A1B5B                            ;	Voice $04
000A1B5B                            ;	$07
000A1B5B                            ;	$05, $53, $64, $75, 	$5C, $5C, $5C, $1C, 	$17, $17, $17, $17
000A1B5B                            ;	$00, $00, $00, $00, 	$26, $26, $26, $26, 	$00, $00, $00, $00
000A1B5B                            	smpsVcAlgorithm     $07
000A1B5B                            	smpsVcFeedback      $00
000A1B5B                            	smpsVcUnusedBits    $00
000A1B5B                            	smpsVcDetune        $07, $06, $05, $00
000A1B5B                            	smpsVcCoarseFreq    $05, $04, $03, $05
000A1B5B                            	smpsVcRateScale     $00, $01, $01, $01
000A1B5B                            	smpsVcAttackRate    $1C, $1C, $1C, $1C
000A1B5B                            	smpsVcAmpMod        $00, $00, $00, $00
000A1B5B                            	smpsVcDecayRate1    $17, $17, $17, $17
000A1B5B                            	smpsVcDecayRate2    $00, $00, $00, $00
000A1B5B                            	smpsVcDecayLevel    $02, $02, $02, $02
000A1B5B                            	smpsVcReleaseRate   $06, $06, $06, $06
000A1B5B 0705 5364 755C 5C5C 1C17+  	smpsVcTotalLevel    $00, $00, $00, $00
000A1B74                            
000A1B74                            ;	Voice $05
000A1B74                            ;	$3C
000A1B74                            ;	$21, $21, $63, $61, 	$13, $10, $14, $0E, 	$09, $0B, $0B, $10
000A1B74                            ;	$04, $04, $04, $04, 	$17, $17, $17, $27, 	$1C, $02, $1B, $00
000A1B74                            	smpsVcAlgorithm     $04
000A1B74                            	smpsVcFeedback      $07
000A1B74                            	smpsVcUnusedBits    $00
000A1B74                            	smpsVcDetune        $06, $06, $02, $02
000A1B74                            	smpsVcCoarseFreq    $01, $03, $01, $01
000A1B74                            	smpsVcRateScale     $00, $00, $00, $00
000A1B74                            	smpsVcAttackRate    $0E, $14, $10, $13
000A1B74                            	smpsVcAmpMod        $00, $00, $00, $00
000A1B74                            	smpsVcDecayRate1    $10, $0B, $0B, $09
000A1B74                            	smpsVcDecayRate2    $04, $04, $04, $04
000A1B74                            	smpsVcDecayLevel    $02, $01, $01, $01
000A1B74                            	smpsVcReleaseRate   $07, $07, $07, $07
000A1B74 3C21 2163 6113 1014 0E09+  	smpsVcTotalLevel    $00, $1B, $02, $1C
000A1B8D                            
000A1B8D                            
000A1B8E 00                         		even
000A1B8E                            ; ---------------------------------------------------------------------------
000A1B8E                            ; Sound	effect pointers
000A1B8E                            ; ---------------------------------------------------------------------------
000A1B8E 0000 0000 0000 0000 0000+  SoundIndex:	dc.l SoundA0, SoundA1, SoundA2
000A1B9A 0000 0000 0000 0000 0000+  		dc.l SoundA3, SoundA4, SoundA5
000A1BA6 0000 0000 0000 0000 0000+  		dc.l SoundA6, SoundA7, SoundA8
000A1BB2 0000 0000 0000 0000 0000+  		dc.l SoundA9, SoundAA, SoundAB
000A1BBE 0000 0000 0000 0000 0000+  		dc.l SoundAC, SoundAD, SoundAE
000A1BCA 0000 0000 0000 0000 0000+  		dc.l SoundAF, SoundB0, SoundB1
000A1BD6 0000 0000 0000 0000 0000+  		dc.l SoundB2, SoundB3, SoundB4
000A1BE2 0000 0000 0000 0000 0000+  		dc.l SoundB5, SoundB6, SoundB7
000A1BEE 0000 0000 0000 0000 0000+  		dc.l SoundB8, SoundB9, SoundBA
000A1BFA 0000 0000 0000 0000 0000+  		dc.l SoundBB, SoundBC, SoundBD
000A1C06 0000 0000 0000 0000 0000+  		dc.l SoundBE, SoundBF, SoundC0
000A1C12 0000 0000 0000 0000 0000+  		dc.l SoundC1, SoundC2, SoundC3
000A1C1E 0000 0000 0000 0000 0000+  		dc.l SoundC4, SoundC5, SoundC6
000A1C2A 0000 0000 0000 0000 0000+  		dc.l SoundC7, SoundC8, SoundC9
000A1C36 0000 0000 0000 0000 0000+  		dc.l SoundCA, SoundCB, SoundCC
000A1C42 0000 0000 0000 0000 0000+  		dc.l SoundCD, SoundCE, SoundCF
000A1C4E 0000 0000                  SoundD0Index:	dc.l SoundD0
000A1C52                            SoundA0:	incbin	sound\soundA0.bin
000A1C68                            		even
000A1C68                            SoundA1:	incbin	sound\soundA1.bin
000A1C92                            		even
000A1C92                            SoundA2:	incbin	sound\soundA2.bin
000A1CB2                            		even
000A1CB2                            SoundA3:	incbin	sound\soundA3.bin
000A1CE4                            		even
000A1CE4                            SoundA4:	incbin	sound\soundA4.bin
000A1D1A                            		even
000A1D1A                            SoundA5:	include	sound\fart.asm
000A1D1A                            Fart_Header:
000A1D1A =00000001                  smpsHeaderStartSong = 1
000A1D1A 0000                       	smpsHeaderVoice     Fart_Voices
000A1D1C 01                         	smpsHeaderTempoSFX  $01
000A1D1D 04                         	smpsHeaderChanSFX   $04
000A1D1E                            
000A1D36                            
000A1D36                            Fart_FM3:
000A1D38 E607                       	smpsAlterVol        $07
000A1D3A E0C0                       	smpsPan             panCenter, $00
000A1D3C F000 0210 03               	smpsModSet          $00, $02, $10, $03
000A1D41 A003 E7                    	dc.b	nG2, $03, smpsNoAttack
000A1D44 E1FE                       	smpsAlterNote       $FE
000A1D46 A201 E7                    	dc.b	nA2, $01, smpsNoAttack
000A1D49 E100                       	smpsAlterNote       $00
000A1D4B A211 807F 2C               	dc.b	nA2, $11, nRst, $7F, $2C
000A1D50 F2                         	smpsStop
000A1D51                            
000A1D51                            ; FM4 Data
000A1D51                            Fart_FM4:
000A1D53 E0C0                       	smpsPan             panCenter, $00
000A1D55 8006                       	dc.b	nRst, $06
000A1D59 E616                       	smpsAlterVol        $16
000A1D5B E080                       	smpsPan             panLeft, $00
000A1D5D F000 0210 03               	smpsModSet          $00, $02, $10, $03
000A1D62 A212                       	dc.b	nA2, $12
000A1D64 E60A                       	smpsAlterVol        $0A
000A1D66 E7A2 0C                    	dc.b	smpsNoAttack, nA2, $0C
000A1D69 E603                       	smpsAlterVol        $03
000A1D6B E7A2                       	dc.b	smpsNoAttack, nA2
000A1D6D E603                       	smpsAlterVol        $03
000A1D6F E7A2                       	dc.b	smpsNoAttack, nA2
000A1D71 E604                       	smpsAlterVol        $04
000A1D73 E7A2                       	dc.b	smpsNoAttack, nA2
000A1D75 E606                       	smpsAlterVol        $06
000A1D77 E7A2 18                    	dc.b	smpsNoAttack, nA2, $18
000A1D7A E610                       	smpsAlterVol        $10
000A1D7C E7A2 0C                    	dc.b	smpsNoAttack, nA2, $0C
000A1D7F E610                       	smpsAlterVol        $10
000A1D81 E7A2 1280 42               	dc.b	smpsNoAttack, nA2, $12, nRst, $42
000A1D86 F2                         	smpsStop
000A1D87                            
000A1D87                            ; FM5 Data
000A1D87                            Fart_FM5:
000A1D89 E0C0                       	smpsPan             panCenter, $00
000A1D8B 8009                       	dc.b	nRst, $09
000A1D8F E616                       	smpsAlterVol        $16
000A1D91 E040                       	smpsPan             panRight, $00
000A1D93 F000 0210 03               	smpsModSet          $00, $02, $10, $03
000A1D98 A215                       	dc.b	nA2, $15
000A1D9A E60A                       	smpsAlterVol        $0A
000A1D9C E7A2 0C                    	dc.b	smpsNoAttack, nA2, $0C
000A1D9F E603                       	smpsAlterVol        $03
000A1DA1 E7A2                       	dc.b	smpsNoAttack, nA2
000A1DA3 E603                       	smpsAlterVol        $03
000A1DA5 E7A2                       	dc.b	smpsNoAttack, nA2
000A1DA7 E604                       	smpsAlterVol        $04
000A1DA9 E7A2                       	dc.b	smpsNoAttack, nA2
000A1DAB E606                       	smpsAlterVol        $06
000A1DAD E7A2 15                    	dc.b	smpsNoAttack, nA2, $15
000A1DB0 E610                       	smpsAlterVol        $10
000A1DB2 E7A2 0C                    	dc.b	smpsNoAttack, nA2, $0C
000A1DB5 E610                       	smpsAlterVol        $10
000A1DB7 E7A2 1280 3F               	dc.b	smpsNoAttack, nA2, $12, nRst, $3F
000A1DBC F2                         	smpsStop
000A1DBD                            
000A1DBD                            ; PSG3 Data
000A1DBD                            Fart_PSG3:
000A1DBD F2                         	smpsStop
000A1DBE                            
000A1DBE                            ; FM Voices
000A1DBE                            Fart_Voices:
000A1DBE                            ;	Voice $00
000A1DBE                            ;	$39
000A1DBE                            ;	$70, $32, $71, $01, 	$DF, $DF, $DF, $1F, 	$04, $00, $00, $00
000A1DBE                            ;	$1F, $16, $00, $00, 	$E0, $00, $09, $FA, 	$12, $00, $00, $00
000A1DBE                            	smpsVcAlgorithm     $01
000A1DBE                            	smpsVcFeedback      $07
000A1DBE                            	smpsVcUnusedBits    $00
000A1DBE                            	smpsVcDetune        $00, $07, $03, $07
000A1DBE                            	smpsVcCoarseFreq    $01, $01, $02, $00
000A1DBE                            	smpsVcRateScale     $00, $03, $03, $03
000A1DBE                            	smpsVcAttackRate    $1F, $1F, $1F, $1F
000A1DBE                            	smpsVcAmpMod        $00, $00, $00, $00
000A1DBE                            	smpsVcDecayRate1    $00, $00, $00, $04
000A1DBE                            	smpsVcDecayRate2    $00, $00, $16, $1F
000A1DBE                            	smpsVcDecayLevel    $0F, $00, $00, $0E
000A1DBE                            	smpsVcReleaseRate   $0A, $09, $00, $00
000A1DBE 3970 3271 01DF DFDF 1F04+  	smpsVcTotalLevel    $00, $00, $00, $12
000A1DD7                            
000A1DD7                            ;	Voice $01
000A1DD7                            ;	$00
000A1DD7                            ;	$00, $00, $00, $00, 	$00, $00, $00, $00, 	$00, $00, $00, $00
000A1DD7                            ;	$00, $00, $00, $00, 	$FF, $FF, $FF, $FF, 	$00, $00, $00, $00
000A1DD7                            	smpsVcAlgorithm     $00
000A1DD7                            	smpsVcFeedback      $00
000A1DD7                            	smpsVcUnusedBits    $00
000A1DD7                            	smpsVcDetune        $00, $00, $00, $00
000A1DD7                            	smpsVcCoarseFreq    $00, $00, $00, $00
000A1DD7                            	smpsVcRateScale     $00, $00, $00, $00
000A1DD7                            	smpsVcAttackRate    $00, $00, $00, $00
000A1DD7                            	smpsVcAmpMod        $00, $00, $00, $00
000A1DD7                            	smpsVcDecayRate1    $00, $00, $00, $00
000A1DD7                            	smpsVcDecayRate2    $00, $00, $00, $00
000A1DD7                            	smpsVcDecayLevel    $0F, $0F, $0F, $0F
000A1DD7                            	smpsVcReleaseRate   $0F, $0F, $0F, $0F
000A1DD7 0000 0000 0000 0000 0000+  	smpsVcTotalLevel    $00, $00, $00, $00
000A1DD7 0000 0000 0000 0000 0000+  	smpsVcTotalLevel    $00, $00, $00, $00
000A1DF0                            		even
000A1DF0                            SoundA6:	incbin	sound\soundA6.bin
000A1E20                            		even
000A1E20                            SoundA7:	incbin	sound\soundA7.bin
000A1E50                            		even
000A1E50                            SoundA8:	incbin	sound\soundA8.bin
000A1E84                            		even
000A1E84                            SoundA9:	incbin	sound\soundA9.bin
000A1E96                            		even
000A1E96                            SoundAA:	incbin	sound\soundAA.bin
000A1ED8                            		even
000A1ED8                            SoundAB:	incbin	sound\soundAB.bin
000A1EF8                            		even
000A1EF8                            SoundAC:	incbin	sound\soundAC.bin
000A1F2C                            		even
000A1F2C                            SoundAD:	incbin	sound\soundAD.bin
000A1F62                            		even
000A1F62                            SoundAE:	incbin	sound\soundAE.bin
000A1FAC                            		even
000A1FAC                            SoundAF:	incbin	sound\soundAF.bin
000A1FDA                            		even
000A1FDA                            SoundB0:	incbin	sound\soundB0.bin
000A200C                            		even
000A200C                            SoundB1:	incbin	sound\soundB1.bin
000A2038                            		even
000A2038                            SoundB2:	incbin	sound\soundB2.bin
000A2088                            		even
000A2088                            SoundB3:	incbin	sound\soundB3.bin
000A20D2                            		even
000A20D2                            SoundB4:	include	sound\soundB4.asm
000A20D2                            SndB4_Bumper_Header:
000A20D2 =00000001                  smpsHeaderStartSong = 1
000A20D2 0000                       	smpsHeaderVoice     SndB4_Bumper_Voices
000A20D4 01                         	smpsHeaderTempoSFX  $01
000A20D5 03                         	smpsHeaderChanSFX   $03
000A20D6                            
000A20E8                            
000A20E8                            ; FM5 Data
000A20E8                            SndB4_Bumper_FM5:
000A20EA F600 00                    	smpsJump            SndB4_Bumper_Jump00
000A20ED                            
000A20ED                            ; FM4 Data
000A20ED                            SndB4_Bumper_FM4:
000A20ED F2                         	smpsStop
000A20EE                            
000A20EE                            SndB4_Bumper_Jump00:
000A20EE A020                       	dc.b	nG2, $20
000A20F0 F2                         	smpsStop
000A20F1                            
000A20F1                            ; FM3 Data
000A20F1                            SndB4_Bumper_FM3:
000A20F1 F2                         	smpsStop
000A20F2                            
000A20F2                            SndB4_Bumper_Voices:
000A20F2                            ;	Voice $00
000A20F2                            ;	$32
000A20F2                            ;	$04, $20, $70, $70, 	$1F, $1F, $1F, $1F, 	$09, $00, $00, $08
000A20F2                            ;	$09, $00, $00, $0B, 	$00, $00, $00, $0F, 	$0C, $00, $30, $00
000A20F2                            	smpsVcAlgorithm     $02
000A20F2                            	smpsVcFeedback      $06
000A20F2                            	smpsVcUnusedBits    $00
000A20F2                            	smpsVcDetune        $07, $07, $02, $00
000A20F2                            	smpsVcCoarseFreq    $00, $00, $00, $04
000A20F2                            	smpsVcRateScale     $00, $00, $00, $00
000A20F2                            	smpsVcAttackRate    $1F, $1F, $1F, $1F
000A20F2                            	smpsVcAmpMod        $00, $00, $00, $00
000A20F2                            	smpsVcDecayRate1    $08, $00, $00, $09
000A20F2                            	smpsVcDecayRate2    $0B, $00, $00, $09
000A20F2                            	smpsVcDecayLevel    $00, $00, $00, $00
000A20F2                            	smpsVcReleaseRate   $0F, $00, $00, $00
000A20F2 3204 2070 701F 1F1F 1F09+  	smpsVcTotalLevel    $00, $30, $00, $0C
000A20F2 3204 2070 701F 1F1F 1F09+  	smpsVcTotalLevel    $00, $30, $00, $0C
000A210C 00                         		even
000A210C                            SoundB5:	incbin	sound\soundB5.bin
000A212A 00                         		even
000A212A                            SoundB6:	incbin	sound\soundB6.bin
000A2148                            		even
000A2148                            SoundB7:	incbin	sound\soundB7.bin
000A2184                            		even
000A2184                            SoundB8:	incbin	sound\soundB8.bin
000A21A2                            		even
000A21A2                            SoundB9:	incbin	sound\soundB9.bin
000A2206                            		even
000A2206                            SoundBA:	incbin	sound\soundBA.bin
000A222E                            		even
000A222E                            SoundBB:	incbin	sound\soundBB.bin
000A225A                            		even
000A225A                            SoundBC:	incbin	sound\soundBC.bin
000A229C                            		even
000A229C                            SoundBD:	incbin	sound\soundBD.bin
000A22F0                            		even
000A22F0                            SoundBE:	incbin	sound\soundBE.bin
000A232A                            		even
000A232A                            SoundBF:	incbin	sound\soundBF.bin
000A239C                            		even
000A239C                            SoundC0:	incbin	sound\soundC0.bin
000A23CA                            		even
000A23CA                            SoundC1:	incbin	sound\soundC1.bin
000A2424                            		even
000A2424                            SoundC2:	incbin	sound\soundC2.bin
000A244E                            		even
000A244E                            SoundC3:	incbin	sound\soundC3.bin
000A24C8                            		even
000A24C8                            SoundC4:	incbin	sound\soundC4.bin
000A25C6                            		even
000A25C6                            SoundC5:	incbin	sound\soundC5.bin
000A262E                            		even
000A262E                            SoundC6:	incbin	sound\soundC6.bin
000A2670                            		even
000A2670                            SoundC7:	incbin	sound\soundC7.bin
000A269E                            		even
000A269E                            SoundC8:	incbin	sound\soundC8.bin
000A26B0                            		even
000A26B0                            SoundC9:	incbin	sound\soundC9.bin
000A26DE                            		even
000A26DE                            SoundCA:	incbin	sound\soundCA.bin
000A270C                            		even
000A270C                            SoundCB:	incbin	sound\soundCB.bin
000A2758                            		even
000A2758                            SoundCC:	incbin	sound\C9.ssf
000A2786                            		even
000A2786                            SoundCD:	incbin	sound\soundCD.bin
000A27B2                            		even
000A27B2                            SoundCE:	incbin	sound\soundCE.bin
000A27D0 00                         		even
000A27D0                            SoundCF:	incbin	sound\soundCF.bin
000A2808                            		even
000A2808                            SoundD0:	incbin	sound\soundD0.bin
000A2842                            		even
000A2842                            SegaPCM:	incbin	sound\segapcm.bin
000BC998                            SegaPCM_end:	even
000BC998                            
000BC998                            IdiotPCM:	incbin	sound\youare.bin
000C6A6A 00                         IdiotPCM_end:	even
000C6A6A                            
000C6A6A                            Minecraft:	include	minecraft\code\main.asm
000C6A6A                            ; Minecraft: Very Legacy Console Edition
000C6A6A                            ; Main file
000C6A6A                            
000C6A6A                            	include	minecraft\code\variables.asm
000C6A6A                            ; Minecraft: Very Legacy Console Edition
000C6A6A                            ; Variable Definitions
000C6A6A                            
000C6A6A =00000040                  MAP_HEIGHT	equ	64
000C6A6A =00000100                  MAP_WIDTH	equ	256
000C6A6A                            
000C6A6A                            		rsset	$FF0000
000C6A6A =00FF0000                  mapWallBlocks	rs.b	MAP_HEIGHT*MAP_WIDTH	; wall layer layout data
000C6A6A =00FF4000                  mapCollBlocks	rs.b	MAP_HEIGHT*MAP_WIDTH	; collision layer layout data
000C6A6A                            
000C6A6A                            		rsset	$FFFF8000
000C6A6A =FFFF8000                  planeBuffer	rs.w	29*64			; foreground plane buffer
000C6A6A                            
000C6A6A =FFFF8E80                  camXPosFG	rs.w	1			; camera foreground layout x position
000C6A6A =FFFF8E82                  camYposFG	rs.w	1			; camera foreground layout y position
000C6A6A =FFFF8E84                  camXPosBG	rs.w	1			; camera background layout x position
000C6A6A =FFFF8E86                  camYposBG	rs.w	1			; camera background layout y position
000C6A6A =FFFF8E86                  camYposBG	rs.w	1			; camera background layout y position
000C6A6A                            
000C6A6A                            MC_Init:
000C6A6A 007C 0700                  		ori	#$700,sr		; disables CPU interrupts
000C6A6E 4DF9 00C0 0004             		lea	($C00004).l,a6	;	; load the address of the VDP control port into a6
000C6A74                            
000C6A74 3CBC 8134                  		move.w	#$8134,(a6)		; disable display
000C6A78 6100 0000                  		bsr.w	MC_ClearScreen		; clear VRAM, CRAM, and VSRAM
000C6A7C 6100 0000                  		bsr.w	MC_LoadPalette		; load in the palette
000C6A80 3CBC 8174                  		move.w	#$8174,(a6)		; enable display
000C6A84                            
000C6A84                            
000C6A84                            
000C6A84 6000 FFFE                  		bra.w	*			; spin infinitely
000C6A88                            
000C6A88                            ; ===========================================================================
000C6A88                            ; ---------------------------------------------------------------------------
000C6A88                            ; Clear The Screen
000C6A88                            ; ---------------------------------------------------------------------------
000C6A88                            MC_ClearScreen:
000C6A88 3CBC 8F01                  		move.w	#$8F01,(a6)		; set auto-incremement size to byte
000C6A8C                            
000C6A8C 2CBC 94FF 93FF             		move.l	#$94FF93FF,(a6)		; clear the VRAM
000C6A92 3CBC 9780                  		move.w	#$9780,(a6)		; ^
000C6A96 2CBC 4000 0080             		move.l	#$40000080,(a6)		; ^
000C6A9C 3D7C 0000 FFFC             		move.w	#0,-4(a6)		; ^
000C6AA2                            
000C6AA2 44D6                       .waitVRAMClr:	move.w	(a6),ccr		; is a DMA in progress?
000C6AA4 69FC                       		bvs.s	.waitVRAMClr		; if so, loop until DMA is complete
000C6AA6                            
000C6AA6 2CBC 9400 937F             		move.l	#$9400937F,(a6)		; clear the CRAM
000C6AAC 3CBC 9780                  		move.w	#$9780,(a6)		; ^
000C6AB0 2CBC C000 0080             		move.l	#$C0000080,(a6)		; ^
000C6AB6 3D7C 0000 FFFC             		move.w	#0,-4(a6)		; ^
000C6ABC                            
000C6ABC 44D6                       .waitCRAMClr:	move.w	(a6),ccr		; is a DMA in progress?
000C6ABE 69FC                       		bvs.s	.waitCRAMClr		; if so, loop until DMA is complete
000C6AC0                            
000C6AC0 2CBC 9400 935F             		move.l	#$9400935F,(a6)		; clear the VSRAM
000C6AC6 3CBC 9780                  		move.w	#$9780,(a6)		; ^
000C6ACA 2CBC 4000 0090             		move.l	#$40000090,(a6)		; ^
000C6AD0 3D7C 0000 FFFC             		move.w	#0,-4(a6)		; ^
000C6AD6                            
000C6AD6 44D6                       .waitVSRAMClr:	move.w	(a6),ccr		; is a DMA in progress?
000C6AD8 69FC                       		bvs.s	.waitVSRAMClr		; if so, loop until DMA is complete
000C6ADA                            
000C6ADA 3CBC 8F02                  		move.w	#$8F02,(a6)		; set auto-incremement size to word
000C6ADE 4E75                       		rts				; return
000C6AE0                            ; ---------------------------------------------------------------------------
000C6AE0                            
000C6AE0                            ; ===========================================================================
000C6AE0                            ; ---------------------------------------------------------------------------
000C6AE0                            ; Load The Palette
000C6AE0                            ; ---------------------------------------------------------------------------
000C6AE0                            MC_LoadPalette:
000C6AE0 44D6                       		move.w	(a6),ccr		; is v-blank active?
000C6AE2 6AFC                       		bpl.s	MC_LoadPalette		; if not, wait for it to start
000C6AE4                            
000C6AE4                            .updatePalette:
000C6AE4 2CBC 9400 9340             		move.l	#$94009340,(a6)		; set the DMA transfer size (64 colors)
000C6AEA                            		
000C6AEA 4BFA 0000                  		lea	MC_Palette(pc),a5	; load the base address of the palette data (pc relative)
000C6AEE 200D                       		move.l	a5,d0			; move the address to a data register so we can modify it
000C6AF0 E288                       		lsr.l	#1,d0			; divide by two
000C6AF2                            
000C6AF2 323C 9500                  		move.w	#$9500,d1		; set the low byte of the transfer source address
000C6AF6 1200                       		move.b	d0,d1			; ^
000C6AF8 3C81                       		move.w	d1,(a6)			; ^
000C6AFA                            
000C6AFA E088                       		lsr.l	#8,d0			; set the middle byte of the transfer source address
000C6AFC 323C 9600                  		move.w	#$9600,d1		; ^
000C6B00 1200                       		move.b	d0,d1			; ^
000C6B02 3C81                       		move.w	d1,(a6)			; ^
000C6B04                            
000C6B04 E088                       		lsr.l	#8,d0			; set the high byte of the transfer source address
000C6B06 323C 9700                  		move.w	#$9700,d1		; ^
000C6B0A 1200                       		move.b	d0,d1			; ^
000C6B0C 3C81                       		move.w	d1,(a6)			; ^
000C6B0E                            
000C6B0E 2CBC C000 0080             		move.l	#$C0000080,(a6)		; set the destination palette index and begin the transfer
000C6B14                            
000C6B14                            .waitForScan:
000C6B14                            	;	move.w	(a6),ccr		; is v-blank still active?
000C6B14                            	;	bmi.s	.waitForScan		; if so, wait for active scan before returning
000C6B14 4E75                       		rts				; return
000C6B16                            ; ---------------------------------------------------------------------------
000C6B16                            
000C6B16                            MC_Palette:
000C6B16 0E86 08AE 068E 046C 0246+  	dc.w	$E86, $8AE, $68E, $46C, $246, $024, $CC0, $AA0, $C46, $824, $EEE, $444, $222, $000, $000, $000
000C6B36 0000 0CCC 0AAA 0888 0666+  	dc.w	$000, $CCC, $AAA, $888, $666, $444, $222, $4EE, $6AE, $48C, $26A, $048, $026, $4E6, $2C4, $080
000C6B56 0EEE 0EEE 0EEE 0EEE 0EEE+  	dc.w	$EEE, $EEE, $EEE, $EEE, $EEE, $EEE, $EEE, $EEE, $EEE, $EEE, $EEE, $EEE, $EEE, $EEE, $EEE, $EEE
000C6B76 0EEE 0EEE 0EEE 0EEE 0EEE+  	dc.w	$EEE, $EEE, $EEE, $EEE, $EEE, $EEE, $EEE, $EEE, $EEE, $EEE, $EEE, $EEE, $EEE, $EEE, $EEE, $EEE
000C6B76 0EEE 0EEE 0EEE 0EEE 0EEE+  	dc.w	$EEE, $EEE, $EEE, $EEE, $EEE, $EEE, $EEE, $EEE, $EEE, $EEE, $EEE, $EEE, $EEE, $EEE, $EEE, $EEE
000C6B96                            ; end of 'ROM'
000C6B96                            EndOfRom:
000C6B96                            
000C6B96                            
