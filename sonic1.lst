00000000                            ; /=========================================================================\
00000000                            ; ยบ	This file is generated by The Interactive Disassembler (IDA)	    ยบ
00000000                            ; ยบ	Copyright (c) 2003 by DataRescue sa/nv,	<ida@datarescue.com>	    ยบ
00000000                            ; \=========================================================================/
00000000                            ;
00000000                            ; Disassembly created by Hivebrain
00000000                            ; thanks to drx and Stealth
00000000                            
00000000                            ; Processor:	    68000
00000000                            ; Target Assembler: 680x0 Assembler in MRI compatible mode
00000000                            ; This file should be compiled with "as	-M"
00000000                            
00000000                            ; ===========================================================================
00000000                            align macro
00000000                            	cnop 0,\1
00000000                            	endm
00000000                            		include	"sound/smps2asm_inc.asm"
00000000                            ; =============================================================================================
00000000                            ; Created by Flamewing, based on S1SMPS2ASM version 1.1 by Marc Gordon (AKA Cinossu)
00000000                            ; =============================================================================================
00000000 =00000005                  SonicDriverVer:	equ	5
00000000                            align0	macro	val
00000000                            	cnop	0,\val
00000000                                endm
00000000                            	
00000000                            smpsWeirdD1LRR macro
00000000                            		dc.b	$F9
00000000                            	endm
00000000                            nMaxPSG		EQU nA5
00000000                            ; ---------------------------------------------------------------------------------------------
00000000                            ; Standard Octave Pitch Equates
00000000 =FFFFFF88                  smpsPitch10lo:	EQU -120	; $88
00000000 =FFFFFF94                  smpsPitch09lo:	EQU -108	; $94
00000000 =FFFFFFA0                  smpsPitch08lo:	EQU  -96	; $A0
00000000 =FFFFFFAC                  smpsPitch07lo:	EQU  -84	; $AC
00000000 =FFFFFFB8                  smpsPitch06lo:	EQU  -72	; $B8
00000000 =FFFFFFC4                  smpsPitch05lo:	EQU  -60	; $C4
00000000 =FFFFFFD0                  smpsPitch04lo:	EQU  -48	; $D0
00000000 =FFFFFFDC                  smpsPitch03lo:	EQU  -36	; $DC
00000000 =FFFFFFE8                  smpsPitch02lo:	EQU  -24	; $E8
00000000 =FFFFFFF4                  smpsPitch01lo:	EQU  -12	; $F4
00000000 =00000000                  smpsPitch00:	EQU    0	; $00
00000000 =0000000C                  smpsPitch01hi:	EQU  +12	; $0C
00000000 =00000018                  smpsPitch02hi:	EQU  +24	; $18
00000000 =00000024                  smpsPitch03hi:	EQU  +36	; $24
00000000 =00000030                  smpsPitch04hi:	EQU  +48	; $30
00000000 =0000003C                  smpsPitch05hi:	EQU  +60	; $3C
00000000 =00000048                  smpsPitch06hi:	EQU  +72	; $48
00000000 =00000054                  smpsPitch07hi:	EQU  +84	; $54
00000000 =00000060                  smpsPitch08hi:	EQU  +96	; $60
00000000 =0000006C                  smpsPitch09hi:	EQU +108	; $6C
00000000 =00000078                  smpsPitch10hi:	EQU +120	; $78
00000000                            
00000000                            ; ---------------------------------------------------------------------------------------------
00000000                            ; Note Equates
00000000 =00000080                  nRst:	EQU $80		; $80
00000000 =00000081                  nC0:	EQU $81		; $81
00000000 =00000082                  nCs0:	EQU nC0+1	; $82
00000000 =00000083                  nD0:	EQU nCs0+1	; $83
00000000 =00000084                  nEb0:	EQU nD0+1	; $84
00000000 =00000085                  nE0:	EQU nEb0+1	; $85
00000000 =00000086                  nF0:	EQU nE0+1	; $86
00000000 =00000087                  nFs0:	EQU nF0+1	; $87
00000000 =00000088                  nG0:	EQU nFs0+1	; $88
00000000 =00000089                  nAb0:	EQU nG0+1	; $89
00000000 =0000008A                  nA0:	EQU nAb0+1	; $8A
00000000 =0000008B                  nBb0:	EQU nA0+1	; $8B
00000000 =0000008C                  nB0:	EQU nBb0+1	; $8C
00000000 =0000008D                  nC1:	EQU nB0+1	; $8D
00000000 =0000008E                  nCs1:	EQU nC1+1	; $8E
00000000 =0000008F                  nD1:	EQU nCs1+1	; $8F
00000000 =00000090                  nEb1:	EQU nD1+1	; $90
00000000 =00000091                  nE1:	EQU nEb1+1	; $91
00000000 =00000092                  nF1:	EQU nE1+1	; $92
00000000 =00000093                  nFs1:	EQU nF1+1	; $93
00000000 =00000094                  nG1:	EQU nFs1+1	; $94
00000000 =00000095                  nAb1:	EQU nG1+1	; $95
00000000 =00000096                  nA1:	EQU nAb1+1	; $96
00000000 =00000097                  nBb1:	EQU nA1+1	; $97
00000000 =00000098                  nB1:	EQU nBb1+1	; $98
00000000 =00000099                  nC2:	EQU nB1+1	; $99
00000000 =0000009A                  nCs2:	EQU nC2+1	; $9A
00000000 =0000009B                  nD2:	EQU nCs2+1	; $9B
00000000 =0000009C                  nEb2:	EQU nD2+1	; $9C
00000000 =0000009D                  nE2:	EQU nEb2+1	; $9D
00000000 =0000009E                  nF2:	EQU nE2+1	; $9E
00000000 =0000009F                  nFs2:	EQU nF2+1	; $9F
00000000 =000000A0                  nG2:	EQU nFs2+1	; $A0
00000000 =000000A1                  nAb2:	EQU nG2+1	; $A1
00000000 =000000A2                  nA2:	EQU nAb2+1	; $A2
00000000 =000000A3                  nBb2:	EQU nA2+1	; $A3
00000000 =000000A4                  nB2:	EQU nBb2+1	; $A4
00000000 =000000A5                  nC3:	EQU nB2+1	; $A5
00000000 =000000A6                  nCs3:	EQU nC3+1	; $A6
00000000 =000000A7                  nD3:	EQU nCs3+1	; $A7
00000000 =000000A8                  nEb3:	EQU nD3+1	; $A8
00000000 =000000A9                  nE3:	EQU nEb3+1	; $A9
00000000 =000000AA                  nF3:	EQU nE3+1	; $AA
00000000 =000000AB                  nFs3:	EQU nF3+1	; $AB
00000000 =000000AC                  nG3:	EQU nFs3+1	; $AC
00000000 =000000AD                  nAb3:	EQU nG3+1	; $AD
00000000 =000000AE                  nA3:	EQU nAb3+1	; $AE
00000000 =000000AF                  nBb3:	EQU nA3+1	; $AF
00000000 =000000B0                  nB3:	EQU nBb3+1	; $B0
00000000 =000000B1                  nC4:	EQU nB3+1	; $B1
00000000 =000000B2                  nCs4:	EQU nC4+1	; $B2
00000000 =000000B3                  nD4:	EQU nCs4+1	; $B3
00000000 =000000B4                  nEb4:	EQU nD4+1	; $B4
00000000 =000000B5                  nE4:	EQU nEb4+1	; $B5
00000000 =000000B6                  nF4:	EQU nE4+1	; $B6
00000000 =000000B7                  nFs4:	EQU nF4+1	; $B7
00000000 =000000B8                  nG4:	EQU nFs4+1	; $B8
00000000 =000000B9                  nAb4:	EQU nG4+1	; $B9
00000000 =000000BA                  nA4:	EQU nAb4+1	; $BA
00000000 =000000BB                  nBb4:	EQU nA4+1	; $BB
00000000 =000000BC                  nB4:	EQU nBb4+1	; $BC
00000000 =000000BD                  nC5:	EQU nB4+1	; $BD
00000000 =000000BE                  nCs5:	EQU nC5+1	; $BE
00000000 =000000BF                  nD5:	EQU nCs5+1	; $BF
00000000 =000000C0                  nEb5:	EQU nD5+1	; $C0
00000000 =000000C1                  nE5:	EQU nEb5+1	; $C1
00000000 =000000C2                  nF5:	EQU nE5+1	; $C2
00000000 =000000C3                  nFs5:	EQU nF5+1	; $C3
00000000 =000000C4                  nG5:	EQU nFs5+1	; $C4
00000000 =000000C5                  nAb5:	EQU nG5+1	; $C5
00000000 =000000C6                  nA5:	EQU nAb5+1	; $C6
00000000 =000000C7                  nBb5:	EQU nA5+1	; $C7
00000000 =000000C8                  nB5:	EQU nBb5+1	; $C8
00000000 =000000C9                  nC6:	EQU nB5+1	; $C9
00000000 =000000CA                  nCs6:	EQU nC6+1	; $CA
00000000 =000000CB                  nD6:	EQU nCs6+1	; $CB
00000000 =000000CC                  nEb6:	EQU nD6+1	; $CC
00000000 =000000CD                  nE6:	EQU nEb6+1	; $CD
00000000 =000000CE                  nF6:	EQU nE6+1	; $CE
00000000 =000000CF                  nFs6:	EQU nF6+1	; $CF
00000000 =000000D0                  nG6:	EQU nFs6+1	; $D0
00000000 =000000D1                  nAb6:	EQU nG6+1	; $D1
00000000 =000000D2                  nA6:	EQU nAb6+1	; $D2
00000000 =000000D3                  nBb6:	EQU nA6+1	; $D3
00000000 =000000D4                  nB6:	EQU nBb6+1	; $D4
00000000 =000000D5                  nC7:	EQU nB6+1	; $D5
00000000 =000000D6                  nCs7:	EQU nC7+1	; $D6
00000000 =000000D7                  nD7:	EQU nCs7+1	; $D7
00000000 =000000D8                  nEb7:	EQU nD7+1	; $D8
00000000 =000000D9                  nE7:	EQU nEb7+1	; $D9
00000000 =000000DA                  nF7:	EQU nE7+1	; $DA
00000000 =000000DB                  nFs7:	EQU nF7+1	; $DB
00000000 =000000DC                  nG7:	EQU nFs7+1	; $DC
00000000 =000000DD                  nAb7:	EQU nG7+1	; $DD
00000000 =000000DE                  nA7:	EQU nAb7+1	; $DE
00000000 =000000DF                  nBb7:	EQU nA7+1	; $DF
00000000                            
00000000                            ; ---------------------------------------------------------------------------------------------
00000000                            ; PSG envelope equates
00000000 =00000000                  fTone_00:	EQU $00
00000000 =00000001                  fTone_01:	EQU fTone_00+1
00000000 =00000002                  fTone_02:	EQU fTone_01+1
00000000 =00000003                  fTone_03:	EQU fTone_02+1
00000000 =00000004                  fTone_04:	EQU fTone_03+1
00000000 =00000005                  fTone_05:	EQU fTone_04+1
00000000 =00000006                  fTone_06:	EQU fTone_05+1
00000000 =00000007                  fTone_07:	EQU fTone_06+1
00000000 =00000008                  fTone_08:	EQU fTone_07+1
00000000 =00000009                  fTone_09:	EQU fTone_08+1
00000000 =0000000A                  fTone_0A:	EQU fTone_09+1
00000000 =0000000B                  fTone_0B:	EQU fTone_0A+1
00000000 =0000000C                  fTone_0C:	EQU fTone_0B+1
00000000 =0000000D                  fTone_0D:	EQU fTone_0C+1
00000000 =0000000E                  fTone_0E:	EQU fTone_0D+1
00000000 =0000000F                  fTone_0F:	EQU fTone_0E+1
00000000 =00000010                  fTone_10:	EQU fTone_0F+1
00000000 =00000011                  fTone_11:	EQU fTone_10+1
00000000 =00000012                  fTone_12:	EQU fTone_11+1
00000000 =00000013                  fTone_13:	EQU fTone_12+1
00000000 =00000014                  fTone_14:	EQU fTone_13+1
00000000 =00000015                  fTone_15:	EQU fTone_14+1
00000000 =00000016                  fTone_16:	EQU fTone_15+1
00000000 =00000017                  fTone_17:	EQU fTone_16+1
00000000 =00000018                  fTone_18:	EQU fTone_17+1
00000000 =00000019                  fTone_19:	EQU fTone_18+1
00000000 =0000001A                  fTone_1A:	EQU fTone_19+1
00000000 =0000001B                  fTone_1B:	EQU fTone_1A+1
00000000 =0000001C                  fTone_1C:	EQU fTone_1B+1
00000000 =0000001D                  fTone_1D:	EQU fTone_1C+1
00000000 =0000001E                  fTone_1E:	EQU fTone_1D+1
00000000 =0000001F                  fTone_1F:	EQU fTone_1E+1
00000000 =00000020                  fTone_20:	EQU fTone_1F+1
00000000 =00000021                  fTone_21:	EQU fTone_20+1
00000000 =00000022                  fTone_22:	EQU fTone_21+1
00000000 =00000023                  fTone_23:	EQU fTone_22+1
00000000 =00000024                  fTone_24:	EQU fTone_23+1
00000000 =00000025                  fTone_25:	EQU fTone_24+1
00000000 =00000026                  fTone_26:	EQU fTone_25+1
00000000 =00000027                  fTone_27:	EQU fTone_26+1
00000000 =00000028                  fTone_28:	EQU fTone_27+1
00000000 =00000029                  fTone_29:	EQU fTone_28+1
00000000                            ; ---------------------------------------------------------------------------------------------
00000000                            ; DAC Equates
00000000 =00000081                  dKick			EQU	$81
00000000 =00000082                  dSnare			EQU	$82
00000000 =00000082                  dMuffledSnare			EQU	$82
00000000 =00000083                  dTimpani		EQU	$83
00000000 =00000088                  dHiTimpani		EQU	$88
00000000 =00000089                  dMidTimpani		EQU	$89
00000000 =0000008A                  dLowTimpani		EQU	$8A
00000000 =0000008B                  dVLowTimpani		EQU	$8B
00000000 =00000083                  dCrashCymbal	EQU $83
00000000 =00000081                  dKickS3			EQU	$81
00000000 =00000082                  dSnareS3			EQU	$82
00000000 =0000008A                  delectriclowtom	EQU	$8A
00000000 =0000008B                  delectricfloortom	EQU	$8B
00000000 =00000088                  delectrichightom	EQU	$88
00000000 =00000089                  delectricmidtom	EQU	$89
00000000 =00000082                  dClapS3			EQU	$82
00000000                            ; ---------------------------------------------------------------------------------------------
00000000                            ; Channel IDs for SFX
00000000 =00000080                  cPSG1				EQU $80
00000000 =000000A0                  cPSG2				EQU $A0
00000000 =000000C0                  cPSG3				EQU $C0
00000000 =000000E0                  cNoise				EQU $E0	; Not for use in S3/S&K/S3D
00000000 =00000002                  cFM3				EQU $02
00000000 =00000004                  cFM4				EQU $04
00000000 =00000005                  cFM5				EQU $05
00000000 =00000006                  cFM6				EQU $06	; Only in S3/S&K/S3D, overrides DAC
00000000                            
00000000                            ; ---------------------------------------------------------------------------------------------
00000000                            ;---------------------------------------------
00000000                            ; SMPS F_Tone Equates 
00000000                            ;---------------------------------------------	
00000000 =00000000                  fTone_00:	EQU $00
00000000 =00000001                  fTone_01:	EQU fTone_00+1
00000000 =00000002                  fTone_02:	EQU fTone_01+1
00000000 =00000003                  fTone_03:	EQU fTone_02+1
00000000 =00000004                  fTone_04:	EQU fTone_03+1
00000000 =00000005                  fTone_05:	EQU fTone_04+1
00000000 =00000006                  fTone_06:	EQU fTone_05+1
00000000 =00000007                  fTone_07:	EQU fTone_06+1
00000000 =00000008                  fTone_08:	EQU fTone_07+1
00000000 =00000009                  fTone_09:	EQU fTone_08+1
00000000 =0000000A                  fTone_0A:	EQU fTone_09+1
00000000 =0000000B                  fTone_0B:	EQU fTone_0A+1
00000000 =0000000C                  fTone_0C:	EQU fTone_0B+1
00000000                            ; ---------------------------------------------------------------------------------------------
00000000                            ; PSG conversion to S3/S&K/S3D drivers require a tone shift of 12 semi-tones.
00000000                            conv0To256  macro val 
00000000                            	if val<$01
00000000                            		dc.b (256-val+$FF)&$FF
00000000                            	else	
00000000                            		dc.b (256-val)&$FF	
00000000                            	endc
00000000                            	endm
00000000                            SMPSModFix:	macro steps
00000000                            	dc.b (steps/(speed-1))
00000000                            	endm	
00000000 =0000000C                  psgdelta	EQU $0C
00000000                            PSGPitch macro pitch
00000000                            		dc.b	(pitch+psgdelta)&$FF
00000000                            	endm
00000000                            
00000000                            s1TempotoS2 macro tmod
00000000                            	if tmod<$01
00000000                            		dc.b ((($FF+tmod-1)*256+($FF+tmod/2))/$FF+tmod)&$FF 	
00000000                            	else
00000000                            		dc.b (((tmod-1)*256+(tmod/2))/tmod)&$FF
00000000                            	endc
00000000                            	endm
00000000                            	
00000000                            s3TempotoS2 macro tmod
00000000                            	if tmod<$01
00000000                            		dc.b (256-tmod+$FF)&$FF
00000000                            	else	
00000000                            		dc.b (256-tmod)&$FF	
00000000                            	endc
00000000                            	endm
00000000                            	
00000000                            convertMainTempoMod	macro tmod
00000000                            	if 		smpsHeaderStartSong=2
00000000                            		dc.b tmod
00000000                            	elseif 		smpsHeaderStartSong<2
00000000                            		s1TempotoS2 	\tmod
00000000                            	elseif	smpsHeaderStartSong>2
00000000                            		s3TempotoS2  	\tmod
00000000                            	endc
00000000                            	endm	
00000000                            ; ---------------------------------------------------------------------------------------------
00000000                            ; Header Macros
00000000 =00000000                  smpsHeaderStartSong = 0
00000000                            
00000000                            smpsHeaderVoiceNull macro
00000000                            	dc.w	$0000
00000000                            	endm
00000000                            
00000000                            ; Header - Set up Voice Location
00000000                            ; Common to music and SFX
00000000                            smpsHeaderVoice macro loc
00000000                            songStart set *
00000000                            	dc.w	loc-songStart
00000000                            	endm
00000000                            
00000000                            ; Header - Set up Voice Location as S3's Universal Voice Bank
00000000                            ; Common to music and SFX
00000000                            smpsHeaderVoiceUVB macro
00000000                            	if songStart<>*
00000000                            		fail "Missing smpsHeaderStartSong or smpsHeaderStartSongConvert"
00000000                            	endc
00000000                            	;dc.w	little_endian(z80_UniVoiceBank)
00000000                            	z80_ptr	z80_UniVoiceBank
00000000                            	endm
00000000                            
00000000                            ; Header macros for music (not for SFX)
00000000                            ; Header - Set up Channel Usage
00000000                            smpsHeaderChan macro fm,psg
00000000                            	dc.b	fm,psg
00000000                            	endm
00000000                            
00000000                            ; Header - Set up Tempo
00000000                            smpsHeaderTempo macro tdiv,tmod
00000000                            	dc.b	tdiv,tmod
00000000                            	endm
00000000                            
00000000                            ; Header - Set up DAC Channel
00000000                            smpsHeaderDAC macro loc,pitch,vol
00000000                            	dc.w	loc-songStart
00000000                            	if narg>=2
00000000                            		dc.b	\pitch
00000000                            	else
00000000                            		dc.b	$00
00000000                            	endc
00000000                            	if narg>=3
00000000                            		dc.b	\vol
00000000                            	else
00000000                            		dc.b	$00
00000000                            	endc
00000000                            	endm
00000000                            
00000000                            ; Header - Set up FM Channel
00000000                            smpsHeaderFM macro loc,pitch,vol
00000000                            	dc.w	loc-songStart
00000000                            	dc.b	pitch,vol
00000000                            	endm
00000000                            
00000000                            ; Header - Set up PSG Channel
00000000                            smpsHeaderPSG macro loc,pitch,vol,mod,voice
00000000                            	dc.w	loc-songStart
00000000                            	dc.b	pitch,vol,mod,voice
00000000                            	endm
00000000                            
00000000                            ; Header macros for SFX (not for music)
00000000                            ; Header - Set up Tempo
00000000                            smpsHeaderTempoSFX macro div
00000000                            	dc.b	div
00000000                            	endm
00000000                            
00000000                            ; Header - Set up Channel Usage
00000000                            smpsHeaderChanSFX macro chan
00000000                            	dc.b	chan
00000000                            	endm
00000000                            
00000000                            ; Header - Set up FM Channel
00000000                            smpsHeaderSFXChannel macro chanid,loc,pitch,vol
00000000                            	if (chanid=cNoise)
00000000                            		fail "Using channel ID of cNoise ($E0) in Sonic 3 driver is dangerous. Fix the song so that it turns into a noise channel instead."
00000000                            	endc
00000000                            	dc.b	$80,chanid
00000000                            	dc.w	loc-songStart
00000000                            	dc.b	pitch, vol
00000000                            	endm
00000000                            
00000000                            ; ---------------------------------------------------------------------------------------------
00000000                            ; Co-ord Flag Macros and Equates
00000000                            ; E0xx - Panning, AMS, FMS
00000000                            smpsPan macro direction,amsfms
00000000                            panNone set $00
00000000                            panRight set $40
00000000                            panLeft set $80
00000000                            panCentre set $C0
00000000                            panCenter set $C0 ; silly Americans :U
00000000                            	dc.b $E0,direction+amsfms
00000000                            	endm
00000000                            
00000000                            ; E1xx - Set channel frequency displacement to xx
00000000                            smpsAlterNote macro val
00000000                            	dc.b	$E1,val
00000000                            	endm
00000000                            
00000000                            ; E2xx - Useless
00000000                            smpsNop macro val
00000000                            	dc.b	$E2,val
00000000                            	endm
00000000                            ; Return (used after smpsCall)
00000000                            smpsReturn macro val
00000000                            	dc.b	$E3
00000000                            	endm
00000000                            
00000000                            ; Fade in previous song (ie. 1-Up)
00000000                            smpsFade macro val
00000000                            	dc.b	$E4
00000000                            	endm
00000000                            
00000000                            ; E5xx - Set channel tempo divider to xx
00000000                            smpsChanTempoDiv macro val
00000000                            	dc.b	$E5,val
00000000                            ;	endc
00000000                            	endm
00000000                            
00000000                            ; E6xx - Alter Volume by xx
00000000                            smpsAlterVol macro val
00000000                            	dc.b	$E6,val
00000000                            	endm
00000000                            
00000000                            sVol  macro val
00000000                            	$E6,val
00000000                            	endm
00000000                            ; E7 - Prevent attack of next note
00000000 =000000E7                  smpsNoAttack	EQU $E7
00000000                            
00000000                            ; E8xx - Set note fill to xx
00000000                            smpsNoteFill macro val
00000000                            		dc.b	$E8,val
00000000                            ;	endc
00000000                            	endm
00000000                            smpsAlterPitch 	macro	value
00000000                            	dc.b $E9,value
00000000                            	endm
00000000                            
00000000                            
00000000                            ; Set music tempo modifier to xx
00000000                            smpsSetTempoMod macro mod
00000000                            	dc.b	$EA,mod
00000000                            	endm
00000000                            
00000000                            ; Set music tempo divider to xx
00000000                            smpsSetTempoDiv macro val
00000000                            	dc.b	$EB,val
00000000                            	endm
00000000                            
00000000                            ; ECxx - Set Volume to xx
00000000                            smpsSetVol macro val
00000000                            	dc.b	$EC,val
00000000                            	endm
00000000                            
00000000                            ; Works on all drivers
00000000                            smpsPSGAlterVol macro vol
00000000                            	dc.b	$EC,vol
00000000                            	endm
00000000                            
00000000                            ; Clears pushing sound flag in S1
00000000                            smpsClearPush macro	
00000000                            	dc.b	$ED
00000000                            	endm
00000000                            
00000000                            ; Stops special SFX (S1 only) and restarts overridden music track
00000000                            smpsStopSpecial macro
00000000                            		dc.b	$EE
00000000                            	endm
00000000                            
00000000                            ; EFxx[yy] - Set Voice of FM channel to xx; xx < 0 means yy present
00000000                            smpsSetvoice macro voice,songID
00000000                            	if narg<=1
00000000                            		dc.b	$EF,voice
00000000                            	else
00000000                            		dc.b	$EF,voice|$80,songID+$81
00000000                            	endc
00000000                            	endm
00000000                            
00000000                            ; F0wwxxyyzz - Modulation - ww: wait time - xx: modulation speed - yy: change per step - zz: number of steps
00000000                            smpsModSet macro wait,speed,change,step
00000000                            	dc.b	$F0
00000000                            	dc.b	wait,speed,change,step
00000000                            	endm
00000000                            
00000000                            ; Turn on Modulation
00000000                            smpsModOn macro
00000000                            	dc.b	$F1
00000000                            	endm
00000000                            
00000000                            ; F2 - End of channel
00000000                            smpsStop macro
00000000                            	dc.b	$F2
00000000                            	endm
00000000                            
00000000                            ; F3xx - PSG waveform to xx
00000000                            smpsPSGform macro form
00000000                            	dc.b	$F3,form
00000000                            	endm
00000000                            
00000000                            ; Turn off Modulation
00000000                            smpsModOff macro
00000000                            	dc.b	$F4
00000000                            	endm
00000000                            
00000000                            ; F5xx - PSG voice to xx
00000000                            smpsPSGvoice macro voice
00000000                            	dc.b	$F5,voice
00000000                            	endm
00000000                            
00000000                            ; F6xxxx - Jump to xxxx
00000000                            smpsJump macro loc
00000000                            	dc.b	$F6
00000000                            	dc.w	loc-*-1
00000000                            	endm
00000000                            
00000000                            ; F7xxyyzzzz - Loop back to zzzz yy times, xx being the loop index for loop recursion fixing
00000000                            smpsLoop macro index,loops,loc
00000000                            	dc.b	$F7
00000000                            	dc.b	index,loops
00000000                            	dc.w	loc-*-1
00000000                            	endm
00000000                            
00000000                            ; F8xxxx - Call pattern at xxxx, saving return point
00000000                            smpsCall macro loc
00000000                            	dc.b	$F8
00000000                            	dc.w	loc-*-1
00000000                            	endm
00000000                            
00000000                            ; ---------------------------------------------------------------------------------------------
00000000                            ; Alter Volume
00000000                            smpsFMAlterVol macro val1,val2
00000000                            	if narg<=1
00000000                            		dc.b	$E6,val1
00000000                            	else
00000000                            		dc.b	$E5,val1,val2
00000000                            	endc
00000000                            	endm
00000000                            
00000000                            ; S3/S&K/S3D-only coordination flags
00000000                            ; Silences FM channel then stops as per smpsStop
00000000                            smpsStopFM macro
00000000                            	dc.b	$E3
00000000                            	endm
00000000                            
00000000                            ; Spindash Rev
00000000                            smpsSpindashRev macro
00000000                            	dc.b	$E9
00000000                            	endm
00000000                            	
00000000                            smpsPlayDACSample macro sample
00000000                            	dc.b	$EA,sample
00000000                            	endm
00000000                            	
00000000                            smpsConditionalJump macro index,loc
00000000                            	dc.b	$EB
00000000                            	dc.b	index
00000000                            	dc.w	loc-songStart
00000000                            	endm
00000000                            
00000000                            ; Set note values to xx-$40
00000000                            smpsSetNote macro val
00000000                            	dc.b	$ED,val
00000000                            	endm
00000000                            
00000000                            smpsFMICommand macro reg,val
00000000                            	dc.b	$EE,reg,val
00000000                            	endm
00000000                            
00000000                            ; Set Modulation
00000000                            smpsModChange2 macro fmmod,psgmod
00000000                            	dc.b	$F1,fmmod,psgmod
00000000                            	endm
00000000                            
00000000                            ; Set Modulation
00000000                            smpsModChange macro val
00000000                            	dc.b	$F4,val
00000000                            	endm
00000000                            
00000000                            ; FCxxxx - Jump to xxxx
00000000                            smpsContinuousLoop macro loc
00000000                            	dc.b	$FC
00000000                            	dc.w	loc-songStart
00000000                            	endm
00000000                            
00000000                            smpsAlternateSMPS macro flag
00000000                            	dc.b	$FD,flag
00000000                            	endm
00000000                            
00000000                            smpsFM3SpecialMode macro ind1,ind2,ind3,ind4
00000000                            	dc.b	$FE,ind1,ind2,ind3,ind4
00000000                            	endm
00000000                            
00000000                            smpsPlaySound macro index
00000000                            	dc.b	$FF,$01,index
00000000                            	endm
00000000                            
00000000                            smpsHaltMusic macro flag
00000000                            	dc.b	$FF,$02,flag
00000000                            	endm
00000000                            
00000000                            smpsCopyData macro data,len
00000000                            	fail "Coord. Flag to copy data should not be used. Complain to Flamewing if any music uses it."
00000000                            	dc.b	$FF,$03
00000000                            	;dc.w	little_endian(data)
00000000                            	z80_ptr	data
00000000                            	dc.b	len
00000000                            	endm
00000000                            
00000000                            smpsSSGEG macro op1,op2,op3,op4
00000000                            	dc.b	$FF,$05,op1,op2,op3,op4
00000000                            	endm
00000000                            
00000000                            smpsFMFlutter macro tone,mask
00000000                            	dc.b	$FF,$06,tone,mask
00000000                            	endm
00000000                            
00000000                            smpsResetSpindashRev macro val
00000000                            	dc.b	$FF,$07
00000000                            	endm
00000000                            
00000000                            ; ---------------------------------------------------------------------------------------------
00000000                            ; Macros for FM instruments
00000000                            ; Voices - Feedback
00000000                            smpsVcFeedback macro val
00000000                            vcFeedback set \val
00000000                            	endm
00000000                            
00000000                            ; Voices - Algorithm
00000000                            smpsVcAlgorithm macro val
00000000                            vcAlgorithm set \val
00000000                            	endm
00000000                            
00000000                            smpsVcUnusedBits macro val
00000000                            vcUnusedBits set \val
00000000                            	endm
00000000                            
00000000                            ; Voices - Detune
00000000                            smpsVcDetune macro op1,op2,op3,op4
00000000                            vcDT1 set \op1
00000000                            vcDT2 set \op2
00000000                            vcDT3 set \op3
00000000                            vcDT4 set \op4
00000000                            	endm
00000000                            
00000000                            ; Voices - Coarse-Frequency
00000000                            smpsVcCoarseFreq macro op1,op2,op3,op4
00000000                            vcCF1 set \op1
00000000                            vcCF2 set \op2
00000000                            vcCF3 set \op3
00000000                            vcCF4 set \op4
00000000                            	endm
00000000                            
00000000                            ; Voices - Rate Scale
00000000                            smpsVcRateScale macro op1,op2,op3,op4
00000000                            vcRS1 set \op1
00000000                            vcRS2 set \op2
00000000                            vcRS3 set \op3
00000000                            vcRS4 set \op4
00000000                            	endm
00000000                            
00000000                            ; Voices - Attack Rate
00000000                            smpsVcAttackRate macro op1,op2,op3,op4
00000000                            vcAR1 set \op1
00000000                            vcAR2 set \op2
00000000                            vcAR3 set \op3
00000000                            vcAR4 set \op4
00000000                            	endm
00000000                            
00000000                            ; Voices - Amplitude Modulation
00000000                            smpsVcAmpMod macro op1,op2,op3,op4
00000000                            vcAM1 set \op1
00000000                            vcAM2 set \op2
00000000                            vcAM3 set \op3
00000000                            vcAM4 set \op4
00000000                            	endm
00000000                            
00000000                            ; Voices - First Decay Rate
00000000                            smpsVcDecayRate1 macro op1,op2,op3,op4
00000000                            vcD1R1 set \op1
00000000                            vcD1R2 set \op2
00000000                            vcD1R3 set \op3
00000000                            vcD1R4 set \op4
00000000                            	endm
00000000                            
00000000                            ; Voices - Second Decay Rate
00000000                            smpsVcDecayRate2 macro op1,op2,op3,op4
00000000                            vcD2R1 set \op1
00000000                            vcD2R2 set \op2
00000000                            vcD2R3 set \op3
00000000                            vcD2R4 set \op4
00000000                            	endm
00000000                            
00000000                            ; Voices - Decay Level
00000000                            smpsVcDecayLevel macro op1,op2,op3,op4
00000000                            vcDL1 set \op1
00000000                            vcDL2 set \op2
00000000                            vcDL3 set \op3
00000000                            vcDL4 set \op4
00000000                            	endm
00000000                            
00000000                            ; Voices - Release Rate
00000000                            smpsVcReleaseRate macro op1,op2,op3,op4
00000000                            vcRR1 set \op1
00000000                            vcRR2 set \op2
00000000                            vcRR3 set \op3
00000000                            vcRR4 set \op4
00000000                            	endm
00000000                            
00000000                            ; Voices - Total Level
00000000                            smpsVcTotalLevel macro op1,op2,op3,op4
00000000                            vcTL1 set \op1
00000000                            vcTL2 set \op2
00000000                            vcTL3 set \op3
00000000                            vcTL4 set \op4
00000000                            	dc.b	(vcUnusedBits<<6)+(vcFeedback<<3)+vcAlgorithm
00000000                            ;   0     1     2     3     4     5     6     7
00000000                            ;%1000,%1000,%1000,%1000,%1010,%1110,%1110,%1111
00000000                            vcTLMask4 set ((vcAlgorithm=7)<<7)
00000000                            vcTLMask3 set ((vcAlgorithm>=4)<<7)
00000000                            vcTLMask2 set ((vcAlgorithm>=5)<<7)
00000000                            vcTLMask1 set $80
00000000                            ;	dc.b	(vcDT4<<4)+vcCF4 ,(vcDT3<<4)+vcCF3 ,(vcDT2<<4)+vcCF2 ,(vcDT1<<4)+vcCF1
00000000                            ;	dc.b	(vcRS4<<6)+vcAR4 ,(vcRS3<<6)+vcAR3 ,(vcRS2<<6)+vcAR2 ,(vcRS1<<6)+vcAR1
00000000                            ;	dc.b	(vcAM4<<5)+vcD1R4,(vcAM3<<5)+vcD1R3,(vcAM2<<5)+vcD1R2,(vcAM1<<5)+vcD1R1
00000000                            ;	dc.b	vcD2R4           ,vcD2R3           ,vcD2R2           ,vcD2R1
00000000                            ;	dc.b	(vcDL4<<4)+vcRR4 ,(vcDL3<<4)+vcRR3 ,(vcDL2<<4)+vcRR2 ,(vcDL1<<4)+vcRR1
00000000                            ;	dc.b	vcTL4|vcTLMask4  ,vcTL3|vcTLMask3  ,vcTL2|vcTLMask2  ,vcTL1|vcTLMask1
00000000                            	dc.b	(vcDT4<<4)+vcCF4,(vcDT3<<4)+vcCF3,(vcDT2<<4)+vcCF2,(vcDT1<<4)+vcCF1
00000000                            	dc.b	(vcRS4<<6)+vcAR4,(vcRS3<<6)+vcAR3,(vcRS2<<6)+vcAR2,(vcRS1<<6)+vcAR1
00000000                            	dc.b	(vcAM4<<5)+vcD1R4,(vcAM3<<5)+vcD1R3,(vcAM2<<5)+vcD1R2,(vcAM1<<5)+vcD1R1
00000000                            	dc.b	vcD2R4,vcD2R3,vcD2R2,vcD2R1
00000000                            	dc.b	(vcDL4<<4)+vcRR4,(vcDL3<<4)+vcRR3,(vcDL2<<4)+vcRR2,(vcDL1<<4)+vcRR1
00000000                            	dc.b	vcTL4|vcTLMask4,vcTL3|vcTLMask3,vcTL2|vcTLMask2,vcTL1|vcTLMask1
00000000                            	endm
00000000                            
00000000                            
00000000                            
00000000                            ;level select constants (to not give the foward reference warning this was moved here)
00000000 =60860003                  lsscrpos = $60860003 ; level select screen position
00000000 =00240000                  lsoff = $240000 ; second row jump
00000000 =64C20003                  lsstpos = lsscrpos+$43C0000 ; sound test
00000000 =6C820003                  lsnppos = $6C820003	; now playing
00000000 =6D020003                  lsctrlpos = $6D020003 ; control help
00000000                            lsrow1size: equ (LMTSecondRow-LevelMenuText)/16
00000000                            lsrow2size: equ (LMTEnd-LMTSecondRow)/16
00000000                            lsselectable: equ ((LMTSelectableEnd-LevelMenuText)/16)-1 ; last selectable item
00000000                            ; level select item constants
00000000                            lssndtest: equ lsrow2size+8
00000000                            lswifi: equ lsrow2size+9
00000000                            
00000000                            
00000000                            ; NOTES FOR ANYONE MAKING CHARACTERS
00000000 =FFFFFFE8                  v_character = $FFFFFFE8
00000000                            ; pointers for:
00000000                            ; PLAYER MAPPINGS -> Player_Maps
00000000                            ; PLAYER ANIM SCRIPTS -> Player_Anim
00000000                            ; PLAYER ART -> Player_Art
00000000                            ; PLAYER DPLC -> Player_DPLC
00000000                            ; PLAYER PALETTE -> Player_Palette
00000000                            
00000000                            
00000000                            StartOfRom:
00000000 00FF FE00 0000 0000 0000+  Vectors:	dc.l $FFFE00, EntryPoint, BusError, AddressError
00000010 0000 0000 0000 0000 0000+  		dc.l IllegalInstr, ZeroDivide, ChkInstr, TrapvInstr
00000020 0000 0000 0000 0000 0000+  		dc.l PrivilegeViol, Trace, Line1010Emu,	Line1111Emu
00000030 0000 0000 0000 0000 0000+  		dc.l ErrorExcept, ErrorExcept, ErrorExcept, ErrorExcept
00000040 0000 0000 0000 0000 0000+  		dc.l ErrorExcept, ErrorExcept, ErrorExcept, ErrorExcept
00000050 0000 0000 0000 0000 0000+  		dc.l ErrorExcept, ErrorExcept, ErrorExcept, ErrorExcept
00000060 0000 0000 0000 0000 0000+  		dc.l ErrorExcept, ErrorTrap, ErrorTrap,	ErrorTrap
00000070 0000 0000 0000 0000 0000+  		dc.l PalToCRAM,	ErrorTrap, loc_B10, ErrorTrap
00000080 0000 0000 0000 0000 0000+  		dc.l ErrorTrap,	ErrorTrap, ErrorTrap, ErrorTrap
00000090 0000 0000 0000 0000 0000+  		dc.l ErrorTrap,	ErrorTrap, ErrorTrap, ErrorTrap
000000A0 0000 0000 0000 0000 0000+  		dc.l ErrorTrap,	ErrorTrap, ErrorTrap, ErrorTrap
000000B0 0000 0000 0000 0000 0000+  		dc.l ErrorTrap,	ErrorTrap, ErrorTrap, ErrorTrap
000000C0 0000 0000 0000 0000 0000+  		dc.l ErrorTrap,	ErrorTrap, ErrorTrap, ErrorTrap
000000D0 0000 0000 0000 0000 0000+  		dc.l ErrorTrap,	ErrorTrap, ErrorTrap, ErrorTrap
000000E0 0000 0000 0000 0000 0000+  		dc.l ErrorTrap,	ErrorTrap, ErrorTrap, ErrorTrap
000000F0 0000 0000 0000 0000 0000+  		dc.l ErrorTrap,	ErrorTrap, ErrorTrap, ErrorTrap
00000100 5345 4741 204D 4547 4120+  Console:	dc.b 'SEGA MEGA DRIVE ' ; Hardware system ID
00000110 2843 2949 444B 2032 3030+  Date:		dc.b '(C)IDK 2001.SEP '
00000120 686F 7720 746F 2064 6973+  Title_Local:	dc.b 'how to disassemble vhs tapes on a slab of wood  ' ; Domestic name
00000150 686F 7720 746F 2064 6973+  Title_Int:	dc.b 'how to disassemble vhs tapes on a slab of wood  '
00000180 474D 2030 3030 3031 3030+  Serial:		dc.b 'GM 00001009-00'   ; Serial/version number
0000018E 0000                       Checksum:	dc.w 0
00000190 4A20 2020 2020 2020 2020+  		dc.b 'J               ' ; I/O support
000001A0 0000 0000                  RomStartLoc:	dc.l StartOfRom		; ROM start
000001A4 0000 0000                  RomEndLoc:	dc.l EndOfRom-1		; ROM end
000001A8 00FF 0000                  RamStartLoc:	dc.l $FF0000		; RAM start
000001AC 00FF FFFF                  RamEndLoc:	dc.l $FFFFFF		; RAM end
000001B0 2020 2020                  SRAMSupport:	dc.l $20202020		; change to $5241E020 to create	SRAM
000001B4 2020 2020                  		dc.l $20202020		; SRAM start
000001B8 2020 2020                  		dc.l $20202020		; SRAM end
000001BC 2020 2020 2020 2020 2020+  Notes:		dc.b '                                                    '
000001F0 4A55 4520 2020 2020 2020+  Region:		dc.b 'JUE             ' ; Region
00000200                            
00000200                            ; ===========================================================================
00000200                            
00000200                            ErrorTrap:
00000200 4E71                       		nop	
00000202 4E71                       		nop	
00000204 60FA                       		bra.s	ErrorTrap
00000206                            ; ===========================================================================
00000206                            
00000206                            EntryPoint:
00000206 4AB9 00A1 0008             		tst.l	($A10008).l	; test port A control
0000020C 6600                       		bne.s	PortA_Ok
0000020E 4A79 00A1 000C             		tst.w	($A1000C).l	; test port C control
00000214                            
00000214                            PortA_Ok:
00000214 6600                       		bne.s	PortC_Ok
00000216 4BFA 0000                  		lea	SetupValues(pc),a5
0000021A 4C9D 00E0                  		movem.w	(a5)+,d5-d7
0000021E 4CDD 1F00                  		movem.l	(a5)+,a0-a4
00000222 1029 EF01                  		move.b	-$10FF(a1),d0	; get hardware version
00000226 0200 000F                  		andi.b	#$F,d0
0000022A 6700                       		beq.s	SkipSecurity
0000022C 237C 5345 4741 2F00        		move.l	#'SEGA',$2F00(a1)
00000234                            
00000234                            SkipSecurity:
00000234 3014                       		move.w	(a4),d0		; check	if VDP works
00000236 7000                       		moveq	#0,d0
00000238 2C40                       		movea.l	d0,a6
0000023A 4E66                       		move.l	a6,usp		; set usp to $0
0000023C 7217                       		moveq	#$17,d1
0000023E                            
0000023E                            VDPInitLoop:
0000023E 1A1D                       		move.b	(a5)+,d5	; add $8000 to value
00000240 3885                       		move.w	d5,(a4)		; move value to	VDP register
00000242 DA47                       		add.w	d7,d5		; next register
00000244 51C9 FFF8                  		dbf	d1,VDPInitLoop
00000248 289D                       		move.l	(a5)+,(a4)
0000024A 3680                       		move.w	d0,(a3)		; clear	the screen
0000024C 3287                       		move.w	d7,(a1)		; stop the Z80
0000024E 3487                       		move.w	d7,(a2)		; reset	the Z80
00000250                            
00000250                            WaitForZ80:
00000250 0111                       		btst	d0,(a1)		; has the Z80 stopped?
00000252 66FC                       		bne.s	WaitForZ80	; if not, branch
00000254 7425                       		moveq	#$25,d2
00000256                            
00000256                            Z80InitLoop:
00000256 10DD                       		move.b	(a5)+,(a0)+
00000258 51CA FFFC                  		dbf	d2,Z80InitLoop
0000025C 3480                       		move.w	d0,(a2)
0000025E 3280                       		move.w	d0,(a1)		; start	the Z80
00000260 3487                       		move.w	d7,(a2)		; reset	the Z80
00000262                            
00000262                            ClrRAMLoop:
00000262 2D00                       		move.l	d0,-(a6)
00000264 51CE FFFC                  		dbf	d6,ClrRAMLoop	; clear	the entire RAM
00000268 289D                       		move.l	(a5)+,(a4)	; set VDP display mode and increment
0000026A 289D                       		move.l	(a5)+,(a4)	; set VDP to CRAM write
0000026C 761F                       		moveq	#$1F,d3
0000026E                            
0000026E                            ClrCRAMLoop:
0000026E 2680                       		move.l	d0,(a3)
00000270 51CB FFFC                  		dbf	d3,ClrCRAMLoop	; clear	the CRAM
00000274 289D                       		move.l	(a5)+,(a4)
00000276 7813                       		moveq	#$13,d4
00000278                            
00000278                            ClrVDPStuff:
00000278 2680                       		move.l	d0,(a3)
0000027A 51CC FFFC                  		dbf	d4,ClrVDPStuff
0000027E 7A03                       		moveq	#3,d5
00000280                            
00000280                            PSGInitLoop:
00000280 175D 0011                  		move.b	(a5)+,$11(a3)	; reset	the PSG
00000284 51CD FFFA                  		dbf	d5,PSGInitLoop
00000288 3480                       		move.w	d0,(a2)
0000028A 4CD6 7FFF                  		movem.l	(a6),d0-a6	; clear	all registers
0000028E 46FC 2700                  		move	#$2700,sr	; set the sr
00000292                            
00000292                            PortC_Ok:
00000292 6000                       		bra.s	GameProgram
00000294                            ; ===========================================================================
00000294 8000                       SetupValues:	dc.w $8000		; XREF: PortA_Ok
00000296 3FFF                       		dc.w $3FFF
00000298 0100                       		dc.w $100
0000029A                            
0000029A 00A0 0000                  		dc.l $A00000		; start	of Z80 RAM
0000029E 00A1 1100                  		dc.l $A11100		; Z80 bus request
000002A2 00A1 1200                  		dc.l $A11200		; Z80 reset
000002A6 00C0 0000                  		dc.l $C00000
000002AA 00C0 0004                  		dc.l $C00004		; address for VDP registers
000002AE                            
000002AE 0414 303C                  		dc.b 4,	$14, $30, $3C	; values for VDP registers
000002B2 076C 0000                  		dc.b 7,	$6C, 0,	0
000002B6 0000 FF00                  		dc.b 0,	0, $FF,	0
000002BA 8137 0001                  		dc.b $81, $37, 0, 1
000002BE 0100 00FF                  		dc.b 1,	0, 0, $FF
000002C2 FF00 0080                  		dc.b $FF, 0, 0,	$80
000002C6                            
000002C6 4000 0080                  		dc.l $40000080
000002CA                            
000002CA AF01 D91F 1127 0021 2600+  		dc.b $AF, 1, $D9, $1F, $11, $27, 0, $21, $26, 0, $F9, $77 ; Z80	instructions
000002D6 EDB0 DDE1 FDE1 ED47 ED4F   		dc.b $ED, $B0, $DD, $E1, $FD, $E1, $ED,	$47, $ED, $4F
000002E0 D1E1 F108 D9C1 D1E1 F1F9+  		dc.b $D1, $E1, $F1, 8, $D9, $C1, $D1, $E1, $F1,	$F9, $F3
000002EB ED56 36E9 E9               		dc.b $ED, $56, $36, $E9, $E9
000002F0                            
000002F0 8104                       		dc.w $8104		; value	for VDP	display	mode
000002F2 8F02                       		dc.w $8F02		; value	for VDP	increment
000002F4 C000 0000                  		dc.l $C0000000		; value	for CRAM write mode
000002F8 4000 0010                  		dc.l $40000010
000002FC                            
000002FC 9FBF DFFF                  		dc.b $9F, $BF, $DF, $FF	; values for PSG channel volumes
00000300                            ; ===========================================================================
00000300                            
00000300                            GameProgram:
00000300 4A79 00C0 0004             		tst.w	($C00004).l
00000306 0839 0006 00A1 000D        		btst	#6,($A1000D).l
0000030E 6700                       		beq.s	CheckSumCheck
00000310 0CB8 696E 6974 FFFC        		cmpi.l	#'init',($FFFFFFFC).w ; has checksum routine already run?
00000318 6700 0000                  		beq.w	GameInit	; if yes, branch
0000031C                            
0000031C                            CheckSumCheck:
0000031C 207C 0000 0200             		movea.l	#ErrorTrap,a0	; start	checking bytes after the header	($200)
00000322 227C 0000 01A4             		movea.l	#RomEndLoc,a1	; stop at end of ROM
00000328 2011                       		move.l	(a1),d0
0000032A 7200                       		moveq	#0,d1
0000032C                            
0000032C                            loc_32C:
0000032C D258                       		add.w	(a0)+,d1
0000032E B088                       		cmp.l	a0,d0
00000330 64FA                       		bcc.s	loc_32C
00000332 227C 0000 018E             		movea.l	#Checksum,a1	; read the checksum
00000338 B251                       		cmp.w	(a1),d1		; compare correct checksum to the one in ROM
0000033A 6600 0000                  		bne.w	CheckSumError	; if they don't match, branch
0000033E 4DF8 FE00                  		lea	($FFFFFE00).w,a6
00000342 7E00                       		moveq	#0,d7
00000344 3C3C 007F                  		move.w	#$7F,d6
00000348                            
00000348                            loc_348:
00000348 2CC7                       		move.l	d7,(a6)+
0000034A 51CE FFFC                  		dbf	d6,loc_348
0000034E 1039 00A1 0001             		move.b	($A10001).l,d0
00000354 0200 00C0                  		andi.b	#$C0,d0
00000358 11C0 FFF8                  		move.b	d0,($FFFFFFF8).w
0000035C 21FC 696E 6974 FFFC        		move.l	#'init',($FFFFFFFC).w ; set flag so checksum won't be run again
00000364                            
00000364                            GameInit:
00000364 4DF9 00FF 0000             		lea	($FF0000).l,a6
0000036A 7E00                       		moveq	#0,d7
0000036C 3C3C 3F7F                  		move.w	#$3F7F,d6
00000370                            
00000370                            GameClrRAM:
00000370 2CC7                       		move.l	d7,(a6)+
00000372 51CE FFFC                  		dbf	d6,GameClrRAM	; fill RAM ($0000-$FDFF) with $0
00000376 6100 0000                  		bsr.w	VDPSetupGame
0000037A 6100 0000                  		bsr.w	SoundDriverLoad
0000037E 6100 0000                  		bsr.w	JoypadInit
00000382 11FC 0000 F600             		move.b	#0,($FFFFF600).w ; set Game Mode to Sega Screen
00000388                            
00000388                            	;	move.b	#$20,($FFFFF600).w ; set Game Mode to Minecraft
00000388                            
00000388                            MainGameLoop:
00000388 1038 F600                  		move.b	($FFFFF600).w,d0 ; load	Game Mode
0000038C 0240 003C                  		andi.w	#$3C,d0
00000390 4EBB 0000                  		jsr	GameModeArray(pc,d0.w) ; jump to apt location in ROM
00000394 60F2                       		bra.s	MainGameLoop
00000396                            ; ===========================================================================
00000396                            ; ---------------------------------------------------------------------------
00000396                            ; Main game mode array
00000396                            ; ---------------------------------------------------------------------------
00000396                            
00000396                            GameModeArray:
00000396 6000 0000                  		bra.w	SegaScreen	; Sega Screen ($00)
0000039A                            ; ===========================================================================
0000039A 6000 0000                  		bra.w	TitleScreen	; Title	Screen ($04)
0000039E                            ; ===========================================================================
0000039E 6000 0000                  		bra.w	Level		; Demo Mode ($08)
000003A2                            ; ===========================================================================
000003A2 6000 0000                  		bra.w	Level		; Normal Level ($0C)
000003A6                            ; ===========================================================================
000003A6 6000 0000                  		bra.w	SpecialStage	; Special Stage	($10)
000003AA                            ; ===========================================================================
000003AA 6000 0000                  		bra.w	ContinueScreen	; Continue Screen ($14)
000003AE                            ; ===========================================================================
000003AE 6000 0000                  		bra.w	EndingSequence	; End of game sequence ($18)
000003B2                            ; ===========================================================================
000003B2 6000 0000                  		bra.w	Credits		; Credits ($1C)
000003B6                            ; ===========================================================================
000003B6 4EF9 0000 0000             		jmp	Minecraft	; Minecraft ($20)	
000003BC                            ; ===========================================================================
000003BC                            
000003BC                            CheckSumError:
000003BC 6100 0000                  		bsr.w	VDPSetupGame
000003C0 23FC C000 0000 00C0 0004   		move.l	#$C0000000,($C00004).l ; set VDP to CRAM write
000003CA 7E3F                       		moveq	#$3F,d7
000003CC                            
000003CC                            CheckSum_Red:
000003CC 33FC 000E 00C0 0000        		move.w	#$E,($C00000).l	; fill screen with colour red
000003D4 51CF FFF6                  		dbf	d7,CheckSum_Red	; repeat $3F more times
000003D8                            
000003D8                            CheckSum_Loop:
000003D8 60FE                       		bra.s	CheckSum_Loop
000003DA                            ; ===========================================================================
000003DA                            
000003DA                            BusError:
000003DA 11FC 0002 FC44             		move.b	#2,($FFFFFC44).w
000003E0 6000                       		bra.s	loc_43A
000003E2                            ; ===========================================================================
000003E2                            
000003E2                            AddressError:
000003E2 11FC 0004 FC44             		move.b	#4,($FFFFFC44).w
000003E8 6000                       		bra.s	loc_43A
000003EA                            ; ===========================================================================
000003EA                            
000003EA                            IllegalInstr:
000003EA 11FC 0006 FC44             		move.b	#6,($FFFFFC44).w
000003F0 54AF 0002                  		addq.l	#2,2(sp)
000003F4 6000                       		bra.s	loc_462
000003F6                            ; ===========================================================================
000003F6                            
000003F6                            ZeroDivide:
000003F6 11FC 0008 FC44             		move.b	#8,($FFFFFC44).w
000003FC 6000                       		bra.s	loc_462
000003FE                            ; ===========================================================================
000003FE                            
000003FE                            ChkInstr:
000003FE 11FC 000A FC44             		move.b	#$A,($FFFFFC44).w
00000404 6000                       		bra.s	loc_462
00000406                            ; ===========================================================================
00000406                            
00000406                            TrapvInstr:
00000406 11FC 000C FC44             		move.b	#$C,($FFFFFC44).w
0000040C 6000                       		bra.s	loc_462
0000040E                            ; ===========================================================================
0000040E                            
0000040E                            PrivilegeViol:
0000040E 11FC 000E FC44             		move.b	#$E,($FFFFFC44).w
00000414 6000                       		bra.s	loc_462
00000416                            ; ===========================================================================
00000416                            
00000416                            Trace:
00000416 11FC 0010 FC44             		move.b	#$10,($FFFFFC44).w
0000041C 6000                       		bra.s	loc_462
0000041E                            ; ===========================================================================
0000041E                            
0000041E                            Line1010Emu:
0000041E 11FC 0012 FC44             		move.b	#$12,($FFFFFC44).w
00000424 54AF 0002                  		addq.l	#2,2(sp)
00000428 6000                       		bra.s	loc_462
0000042A                            ; ===========================================================================
0000042A                            
0000042A                            Line1111Emu:
0000042A 11FC 0014 FC44             		move.b	#$14,($FFFFFC44).w
00000430 54AF 0002                  		addq.l	#2,2(sp)
00000434 6000                       		bra.s	loc_462
00000436                            ; ===========================================================================
00000436                            
00000436                            ErrorExcept:
00000436 11FC 0000 FC44             		move.b	#0,($FFFFFC44).w
0000043C 6000                       		bra.s	loc_462
0000043E                            ; ===========================================================================
0000043E                            
0000043E                            loc_43A:
0000043E 46FC 2700                  		move	#$2700,sr
00000442 544F                       		addq.w	#2,sp
00000444 21DF FC40                  		move.l	(sp)+,($FFFFFC40).w
00000448 544F                       		addq.w	#2,sp
0000044A 48F8 FFFF FC00             		movem.l	d0-a7,($FFFFFC00).w
00000450 6100 0000                  		bsr.w	ShowErrorMsg
00000454 202F 0002                  		move.l	2(sp),d0
00000458 6100 0000                  		bsr.w	sub_5BA
0000045C 2038 FC40                  		move.l	($FFFFFC40).w,d0
00000460 6100 0000                  		bsr.w	sub_5BA
00000464 6000                       		bra.s	loc_478
00000466                            ; ===========================================================================
00000466                            
00000466                            loc_462:
00000466 46FC 2700                  		move	#$2700,sr
0000046A 48F8 FFFF FC00             		movem.l	d0-a7,($FFFFFC00).w
00000470 6100 0000                  		bsr.w	ShowErrorMsg
00000474 202F 0002                  		move.l	2(sp),d0
00000478 6100 0000                  		bsr.w	sub_5BA
0000047C                            
0000047C                            loc_478:
0000047C 6100 0000                  		bsr.w	ErrorWaitForC
00000480 4CF8 FFFF FC00             		movem.l	($FFFFFC00).w,d0-a7
00000486 46FC 2300                  		move	#$2300,sr
0000048A 4E73                       		rte	
0000048C                            
0000048C                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000048C                            
0000048C                            
0000048C                            ShowErrorMsg:				; XREF: loc_43A; loc_462
0000048C 4DF9 00C0 0000             		lea	($C00000).l,a6
00000492 23FC 7800 0003 00C0 0004   		move.l	#$78000003,($C00004).l
0000049C 41F9 0000 0000             		lea	(Art_Text).l,a0
000004A2 323C 027F                  		move.w	#$27F,d1
000004A6                            
000004A6                            Error_LoadGfx:
000004A6 3C98                       		move.w	(a0)+,(a6)
000004A8 51C9 FFFC                  		dbf	d1,Error_LoadGfx
000004AC 7000                       		moveq	#0,d0		; clear	d0
000004AE 1038 FC44                  		move.b	($FFFFFC44).w,d0 ; load	error code
000004B2 303B 0000                  		move.w	ErrorText(pc,d0.w),d0
000004B6 41FB 0000                  		lea	ErrorText(pc,d0.w),a0
000004BA 23FC 4604 0003 00C0 0004   		move.l	#$46040003,($C00004).l ; position
000004C4 7212                       		moveq	#$12,d1		; number of characters
000004C6                            
000004C6                            Error_LoopChars:
000004C6 7000                       		moveq	#0,d0
000004C8 1018                       		move.b	(a0)+,d0
000004CA 0640 0790                  		addi.w	#$790,d0
000004CE 3C80                       		move.w	d0,(a6)
000004D0 51C9 FFF4                  		dbf	d1,Error_LoopChars ; repeat for	number of characters
000004D4 4E75                       		rts	
000004D6                            ; End of function ShowErrorMsg
000004D6                            
000004D6                            ; ===========================================================================
000004D6 0000 0000                  ErrorText:	dc.w asc_4E8-ErrorText,	asc_4FB-ErrorText ; XREF: ShowErrorMsg
000004DA 0000 0000                  		dc.w asc_50E-ErrorText,	asc_521-ErrorText
000004DE 0000 0000                  		dc.w asc_534-ErrorText,	asc_547-ErrorText
000004E2 0000 0000                  		dc.w asc_55A-ErrorText,	asc_56D-ErrorText
000004E6 0000 0000                  		dc.w asc_580-ErrorText,	asc_593-ErrorText
000004EA 0000                       		dc.w asc_5A6-ErrorText
000004EC 4552 524F 5220 4558 4345+  asc_4E8:	dc.b 'ERROR EXCEPTION    '
000004FF 4255 5320 4552 524F 5220+  asc_4FB:	dc.b 'BUS ERROR          '
00000512 4144 4452 4553 5320 4552+  asc_50E:	dc.b 'ADDRESS ERROR      '
00000525 494C 4C45 4741 4C20 494E+  asc_521:	dc.b 'ILLEGAL INSTRUCTION'
00000538 4045 524F 2044 4956 4944+  asc_534:	dc.b '@ERO DIVIDE        '
0000054B 4348 4B20 494E 5354 5255+  asc_547:	dc.b 'CHK INSTRUCTION    '
0000055E 5452 4150 5620 494E 5354+  asc_55A:	dc.b 'TRAPV INSTRUCTION  '
00000571 5052 4956 494C 4547 4520+  asc_56D:	dc.b 'PRIVILEGE VIOLATION'
00000584 5452 4143 4520 2020 2020+  asc_580:	dc.b 'TRACE              '
00000597 4C49 4E45 2031 3031 3020+  asc_593:	dc.b 'LINE 1010 EMULATOR '
000005AA 4C49 4E45 2031 3131 3120+  asc_5A6:	dc.b 'LINE 1111 EMULATOR '
000005BE 00                         		even
000005BE                            
000005BE                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000005BE                            
000005BE                            
000005BE                            sub_5BA:				; XREF: loc_43A; loc_462
000005BE 3CBC 07CA                  		move.w	#$7CA,(a6)
000005C2 7407                       		moveq	#7,d2
000005C4                            
000005C4                            loc_5C0:
000005C4 E998                       		rol.l	#4,d0
000005C6 6100                       		bsr.s	sub_5CA
000005C8 51CA FFFA                  		dbf	d2,loc_5C0
000005CC 4E75                       		rts	
000005CE                            ; End of function sub_5BA
000005CE                            
000005CE                            
000005CE                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000005CE                            
000005CE                            
000005CE                            sub_5CA:				; XREF: sub_5BA
000005CE 3200                       		move.w	d0,d1
000005D0 0241 000F                  		andi.w	#$F,d1
000005D4 0C41 000A                  		cmpi.w	#$A,d1
000005D8 6500                       		bcs.s	loc_5D8
000005DA 5E41                       		addq.w	#7,d1
000005DC                            
000005DC                            loc_5D8:
000005DC 0641 07C0                  		addi.w	#$7C0,d1
000005E0 3C81                       		move.w	d1,(a6)
000005E2 4E75                       		rts	
000005E4                            ; End of function sub_5CA
000005E4                            
000005E4                            
000005E4                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000005E4                            
000005E4                            
000005E4                            ErrorWaitForC:				; XREF: loc_478
000005E4 6100 0000                  		bsr.w	ReadJoypads
000005E8 0C38 0020 F605             		cmpi.b	#$20,($FFFFF605).w ; is	button C pressed?
000005EE 6600 FFF4                  		bne.w	ErrorWaitForC	; if not, branch
000005F2 4E75                       		rts	
000005F4                            ; End of function ErrorWaitForC
000005F4                            
000005F4                            ; ===========================================================================
000005F4                            
000005F4                            Art_Text:	incbin	artunc\menutext.bin	; text used in level select and debug mode
00000D34                            Art_Text_end:		even
00000D34                            
00000D34                            ; ===========================================================================
00000D34                            ;VBlank
00000D34                            loc_B10:				; XREF: Vectors
00000D34 48E7 FFFE                  		movem.l	d0-a6,-(sp)
00000D38 4A38 F62A                  		tst.b	($FFFFF62A).w
00000D3C 6700                       		beq.s	loc_B88
00000D3E 3039 00C0 0004             		move.w	($C00004).l,d0
00000D44 23FC 4000 0010 00C0 0004   		move.l	#$40000010,($C00004).l
00000D4E 23F8 F616 00C0 0000        		move.l	($FFFFF616).w,($C00000).l
00000D56 0838 0006 FFF8             		btst	#6,($FFFFFFF8).w
00000D5C 6700                       		beq.s	loc_B42
00000D5E 303C 0700                  		move.w	#$700,d0
00000D62                            
00000D62                            loc_B3E:
00000D62 51C8 FFFE                  		dbf	d0,loc_B3E
00000D66                            
00000D66                            loc_B42:
00000D66 1038 F62A                  		move.b	($FFFFF62A).w,d0
00000D6A 11FC 0000 F62A             		move.b	#0,($FFFFF62A).w
00000D70 31FC 0001 F644             		move.w	#1,($FFFFF644).w
00000D76 0240 003E                  		andi.w	#$3E,d0
00000D7A 303B 0000                  		move.w	off_B6E(pc,d0.w),d0
00000D7E 4EBB 0000                  		jsr	off_B6E(pc,d0.w)
00000D82                            
00000D82                            loc_B5E:				; XREF: loc_B88
00000D82 4EB9 0000 0000             		jsr	sub_71B4C
00000D88                            
00000D88                            loc_B64:				; XREF: loc_D50
00000D88 52B8 FE0C                  		addq.l	#1,($FFFFFE0C).w
00000D8C 4CDF 7FFF                  		movem.l	(sp)+,d0-a6
00000D90 4E73                       		rte	
00000D92                            ; ===========================================================================
00000D92 0000 0000                  off_B6E:	dc.w loc_B88-off_B6E, loc_C32-off_B6E
00000D96 0000 0000                  		dc.w loc_C44-off_B6E, loc_C5E-off_B6E
00000D9A 0000 0000                  		dc.w loc_C6E-off_B6E, loc_DA6-off_B6E
00000D9E 0000 0000                  		dc.w loc_E72-off_B6E, loc_F8A-off_B6E
00000DA2 0000 0000                  		dc.w loc_C64-off_B6E, loc_F9A-off_B6E
00000DA6 0000 0000                  		dc.w loc_C36-off_B6E, loc_FA6-off_B6E
00000DAA 0000                       		dc.w loc_E72-off_B6E
00000DAC                            ; ===========================================================================
00000DAC                            
00000DAC                            loc_B88:				; XREF: loc_B10; off_B6E
00000DAC 0C38 008C F600             		cmpi.b	#$8C,($FFFFF600).w
00000DB2 6700                       		beq.s	loc_B9A
00000DB4 0C38 000C F600             		cmpi.b	#$C,($FFFFF600).w
00000DBA 6600 FFC6                  		bne.w	loc_B5E
00000DBE                            
00000DBE                            loc_B9A:
00000DBE 0C38 0001 FE10             		cmpi.b	#1,($FFFFFE10).w ; is level LZ ?
00000DC4 6600 FFBC                  		bne.w	loc_B5E		; if not, branch
00000DC8 3039 00C0 0004             		move.w	($C00004).l,d0
00000DCE 0838 0006 FFF8             		btst	#6,($FFFFFFF8).w
00000DD4 6700                       		beq.s	loc_BBA
00000DD6 303C 0700                  		move.w	#$700,d0
00000DDA                            
00000DDA                            loc_BB6:
00000DDA 51C8 FFFE                  		dbf	d0,loc_BB6
00000DDE                            
00000DDE                            loc_BBA:
00000DDE 31FC 0001 F644             		move.w	#1,($FFFFF644).w
00000DE4 33FC 0100 00A1 1100        		move.w	#$100,($A11100).l
00000DEC                            
00000DEC                            loc_BC8:
00000DEC 0839 0000 00A1 1100        		btst	#0,($A11100).l
00000DF4 66F6                       		bne.s	loc_BC8
00000DF6 4A38 F64E                  		tst.b	($FFFFF64E).w
00000DFA 6600                       		bne.s	loc_BFE
00000DFC 4BF9 00C0 0004             		lea	($C00004).l,a5
00000E02 2ABC 9400 9340             		move.l	#$94009340,(a5)
00000E08 2ABC 96FD 9580             		move.l	#$96FD9580,(a5)
00000E0E 3ABC 977F                  		move.w	#$977F,(a5)
00000E12 3ABC C000                  		move.w	#$C000,(a5)
00000E16 31FC 0080 F640             		move.w	#$80,($FFFFF640).w
00000E1C 3AB8 F640                  		move.w	($FFFFF640).w,(a5)
00000E20 6000                       		bra.s	loc_C22
00000E22                            ; ===========================================================================
00000E22                            
00000E22                            loc_BFE:				; XREF: loc_BC8
00000E22 4BF9 00C0 0004             		lea	($C00004).l,a5
00000E28 2ABC 9400 9340             		move.l	#$94009340,(a5)
00000E2E 2ABC 96FD 9540             		move.l	#$96FD9540,(a5)
00000E34 3ABC 977F                  		move.w	#$977F,(a5)
00000E38 3ABC C000                  		move.w	#$C000,(a5)
00000E3C 31FC 0080 F640             		move.w	#$80,($FFFFF640).w
00000E42 3AB8 F640                  		move.w	($FFFFF640).w,(a5)
00000E46                            
00000E46                            loc_C22:				; XREF: loc_BC8
00000E46 3AB8 F624                  		move.w	($FFFFF624).w,(a5)
00000E4A 33FC 0000 00A1 1100        		move.w	#0,($A11100).l
00000E52 6000 FF2E                  		bra.w	loc_B5E
00000E56                            ; ===========================================================================
00000E56                            
00000E56                            loc_C32:				; XREF: off_B6E
00000E56 6100 0000                  		bsr.w	sub_106E
00000E5A                            
00000E5A                            loc_C36:				; XREF: off_B6E
00000E5A 4A78 F614                  		tst.w	($FFFFF614).w
00000E5E 6700 0000                  		beq.w	locret_C42
00000E62 5378 F614                  		subq.w	#1,($FFFFF614).w
00000E66                            
00000E66                            locret_C42:
00000E66 4E75                       		rts	
00000E68                            ; ===========================================================================
00000E68                            
00000E68                            loc_C44:				; XREF: off_B6E
00000E68 6100 0000                  		bsr.w	sub_106E
00000E6C 6100 0000                  		bsr.w	sub_6886
00000E70 6100 0000                  		bsr.w	sub_1642
00000E74 4A78 F614                  		tst.w	($FFFFF614).w
00000E78 6700 0000                  		beq.w	locret_C5C
00000E7C 5378 F614                  		subq.w	#1,($FFFFF614).w
00000E80                            
00000E80                            locret_C5C:
00000E80 4E75                       		rts	
00000E82                            ; ===========================================================================
00000E82                            
00000E82                            loc_C5E:				; XREF: off_B6E
00000E82 6100 0000                  		bsr.w	sub_106E
00000E86 4E75                       		rts	
00000E88                            ; ===========================================================================
00000E88                            
00000E88                            loc_C64:				; XREF: off_B6E
00000E88 0C38 0010 F600             		cmpi.b	#$10,($FFFFF600).w ; is	game mode = $10	(special stage)	?
00000E8E 6700 0000                  		beq.w	loc_DA6		; if yes, branch
00000E92                            
00000E92                            loc_C6E:				; XREF: off_B6E
00000E92 33FC 0100 00A1 1100        		move.w	#$100,($A11100).l ; stop the Z80
00000E9A                            
00000E9A                            loc_C76:
00000E9A 0839 0000 00A1 1100        		btst	#0,($A11100).l	; has Z80 stopped?
00000EA2 66F6                       		bne.s	loc_C76		; if not, branch
00000EA4 6100 0000                  		bsr.w	ReadJoypads
00000EA8 4A38 F64E                  		tst.b	($FFFFF64E).w
00000EAC 6600                       		bne.s	loc_CB0
00000EAE 4BF9 00C0 0004             		lea	($C00004).l,a5
00000EB4 2ABC 9400 9340             		move.l	#$94009340,(a5)
00000EBA 2ABC 96FD 9580             		move.l	#$96FD9580,(a5)
00000EC0 3ABC 977F                  		move.w	#$977F,(a5)
00000EC4 3ABC C000                  		move.w	#$C000,(a5)
00000EC8 31FC 0080 F640             		move.w	#$80,($FFFFF640).w
00000ECE 3AB8 F640                  		move.w	($FFFFF640).w,(a5)
00000ED2 6000                       		bra.s	loc_CD4
00000ED4                            ; ===========================================================================
00000ED4                            
00000ED4                            loc_CB0:				; XREF: loc_C76
00000ED4 4BF9 00C0 0004             		lea	($C00004).l,a5
00000EDA 2ABC 9400 9340             		move.l	#$94009340,(a5)
00000EE0 2ABC 96FD 9540             		move.l	#$96FD9540,(a5)
00000EE6 3ABC 977F                  		move.w	#$977F,(a5)
00000EEA 3ABC C000                  		move.w	#$C000,(a5)
00000EEE 31FC 0080 F640             		move.w	#$80,($FFFFF640).w
00000EF4 3AB8 F640                  		move.w	($FFFFF640).w,(a5)
00000EF8                            
00000EF8                            loc_CD4:				; XREF: loc_C76
00000EF8 3AB8 F624                  		move.w	($FFFFF624).w,(a5)
00000EFC 4BF9 00C0 0004             		lea	($C00004).l,a5
00000F02 2ABC 9401 93C0             		move.l	#$940193C0,(a5)
00000F08 2ABC 96E6 9500             		move.l	#$96E69500,(a5)
00000F0E 3ABC 977F                  		move.w	#$977F,(a5)
00000F12 3ABC 7C00                  		move.w	#$7C00,(a5)
00000F16 31FC 0083 F640             		move.w	#$83,($FFFFF640).w
00000F1C 3AB8 F640                  		move.w	($FFFFF640).w,(a5)
00000F20 4BF9 00C0 0004             		lea	($C00004).l,a5
00000F26 2ABC 9401 9340             		move.l	#$94019340,(a5)
00000F2C 2ABC 96FC 9500             		move.l	#$96FC9500,(a5)
00000F32 3ABC 977F                  		move.w	#$977F,(a5)
00000F36 3ABC 7800                  		move.w	#$7800,(a5)
00000F3A 31FC 0083 F640             		move.w	#$83,($FFFFF640).w
00000F40 3AB8 F640                  		move.w	($FFFFF640).w,(a5)
00000F44 4A38 F767                  		tst.b	($FFFFF767).w
00000F48 6700                       		beq.s	loc_D50
00000F4A 4BF9 00C0 0004             		lea	($C00004).l,a5
00000F50 2ABC 9401 9370             		move.l	#$94019370,(a5)
00000F56 2ABC 96E4 9500             		move.l	#$96E49500,(a5)
00000F5C 3ABC 977F                  		move.w	#$977F,(a5)
00000F60 3ABC 7000                  		move.w	#$7000,(a5)
00000F64 31FC 0083 F640             		move.w	#$83,($FFFFF640).w
00000F6A 3AB8 F640                  		move.w	($FFFFF640).w,(a5)
00000F6E 11FC 0000 F767             		move.b	#0,($FFFFF767).w
00000F74                            
00000F74                            loc_D50:
00000F74 33FC 0000 00A1 1100        		move.w	#0,($A11100).l
00000F7C 4CF8 00FF F700             		movem.l	($FFFFF700).w,d0-d7
00000F82 48F8 00FF FF10             		movem.l	d0-d7,($FFFFFF10).w
00000F88 4CF8 0003 F754             		movem.l	($FFFFF754).w,d0-d1
00000F8E 48F8 0003 FF30             		movem.l	d0-d1,($FFFFFF30).w
00000F94 0C38 0060 F625             		cmpi.b	#$60,($FFFFF625).w
00000F9A 6400                       		bcc.s	Demo_Time
00000F9C 11FC 0001 F64F             		move.b	#1,($FFFFF64F).w
00000FA2 588F                       		addq.l	#4,sp
00000FA4 6000 FDE2                  		bra.w	loc_B64
00000FA8                            
00000FA8                            ; ---------------------------------------------------------------------------
00000FA8                            ; Subroutine to	run a demo for an amount of time
00000FA8                            ; ---------------------------------------------------------------------------
00000FA8                            
00000FA8                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00000FA8                            
00000FA8                            
00000FA8                            Demo_Time:				; XREF: loc_D50; PalToCRAM
00000FA8 6100 0000                  		bsr.w	LoadTilesAsYouMove
00000FAC 4EB9 0000 0000             		jsr	AniArt_Load
00000FB2 4EB9 0000 0000             		jsr	HudUpdate
00000FB8 6100 0000                  		bsr.w	sub_165E
00000FBC 4A78 F614                  		tst.w	($FFFFF614).w	; is there time	left on	the demo?
00000FC0 6700 0000                  		beq.w	Demo_TimeEnd	; if not, branch
00000FC4 5378 F614                  		subq.w	#1,($FFFFF614).w ; subtract 1 from time	left
00000FC8                            
00000FC8                            Demo_TimeEnd:
00000FC8 4E75                       		rts	
00000FCA                            ; End of function Demo_Time
00000FCA                            
00000FCA                            ; ===========================================================================
00000FCA                            
00000FCA                            loc_DA6:				; XREF: off_B6E
00000FCA 33FC 0100 00A1 1100        		move.w	#$100,($A11100).l ; stop the Z80
00000FD2                            
00000FD2                            loc_DAE:
00000FD2 0839 0000 00A1 1100        		btst	#0,($A11100).l	; has Z80 stopped?
00000FDA 66F6                       		bne.s	loc_DAE		; if not, branch
00000FDC 6100 0000                  		bsr.w	ReadJoypads
00000FE0 4BF9 00C0 0004             		lea	($C00004).l,a5
00000FE6 2ABC 9400 9340             		move.l	#$94009340,(a5)
00000FEC 2ABC 96FD 9580             		move.l	#$96FD9580,(a5)
00000FF2 3ABC 977F                  		move.w	#$977F,(a5)
00000FF6 3ABC C000                  		move.w	#$C000,(a5)
00000FFA 31FC 0080 F640             		move.w	#$80,($FFFFF640).w
00001000 3AB8 F640                  		move.w	($FFFFF640).w,(a5)
00001004 4BF9 00C0 0004             		lea	($C00004).l,a5
0000100A 2ABC 9401 9340             		move.l	#$94019340,(a5)
00001010 2ABC 96FC 9500             		move.l	#$96FC9500,(a5)
00001016 3ABC 977F                  		move.w	#$977F,(a5)
0000101A 3ABC 7800                  		move.w	#$7800,(a5)
0000101E 31FC 0083 F640             		move.w	#$83,($FFFFF640).w
00001024 3AB8 F640                  		move.w	($FFFFF640).w,(a5)
00001028 4BF9 00C0 0004             		lea	($C00004).l,a5
0000102E 2ABC 9401 93C0             		move.l	#$940193C0,(a5)
00001034 2ABC 96E6 9500             		move.l	#$96E69500,(a5)
0000103A 3ABC 977F                  		move.w	#$977F,(a5)
0000103E 3ABC 7C00                  		move.w	#$7C00,(a5)
00001042 31FC 0083 F640             		move.w	#$83,($FFFFF640).w
00001048 3AB8 F640                  		move.w	($FFFFF640).w,(a5)
0000104C 33FC 0000 00A1 1100        		move.w	#0,($A11100).l
00001054 6100 0000                  		bsr.w	PalCycle_SS
00001058 4A38 F767                  		tst.b	($FFFFF767).w
0000105C 6700                       		beq.s	loc_E64
0000105E 4BF9 00C0 0004             		lea	($C00004).l,a5
00001064 2ABC 9401 9370             		move.l	#$94019370,(a5)
0000106A 2ABC 96E4 9500             		move.l	#$96E49500,(a5)
00001070 3ABC 977F                  		move.w	#$977F,(a5)
00001074 3ABC 7000                  		move.w	#$7000,(a5)
00001078 31FC 0083 F640             		move.w	#$83,($FFFFF640).w
0000107E 3AB8 F640                  		move.w	($FFFFF640).w,(a5)
00001082 11FC 0000 F767             		move.b	#0,($FFFFF767).w
00001088                            
00001088                            loc_E64:
00001088 4A78 F614                  		tst.w	($FFFFF614).w
0000108C 6700 0000                  		beq.w	locret_E70
00001090 5378 F614                  		subq.w	#1,($FFFFF614).w
00001094                            
00001094                            locret_E70:
00001094 4E75                       		rts	
00001096                            ; ===========================================================================
00001096                            
00001096                            loc_E72:				; XREF: off_B6E
00001096 33FC 0100 00A1 1100        		move.w	#$100,($A11100).l ; stop the Z80
0000109E                            
0000109E                            loc_E7A:
0000109E 0839 0000 00A1 1100        		btst	#0,($A11100).l	; has Z80 stopped?
000010A6 66F6                       		bne.s	loc_E7A		; if not, branch
000010A8 6100 0000                  		bsr.w	ReadJoypads
000010AC 4A38 F64E                  		tst.b	($FFFFF64E).w
000010B0 6600                       		bne.s	loc_EB4
000010B2 4BF9 00C0 0004             		lea	($C00004).l,a5
000010B8 2ABC 9400 9340             		move.l	#$94009340,(a5)
000010BE 2ABC 96FD 9580             		move.l	#$96FD9580,(a5)
000010C4 3ABC 977F                  		move.w	#$977F,(a5)
000010C8 3ABC C000                  		move.w	#$C000,(a5)
000010CC 31FC 0080 F640             		move.w	#$80,($FFFFF640).w
000010D2 3AB8 F640                  		move.w	($FFFFF640).w,(a5)
000010D6 6000                       		bra.s	loc_ED8
000010D8                            ; ===========================================================================
000010D8                            
000010D8                            loc_EB4:				; XREF: loc_E7A
000010D8 4BF9 00C0 0004             		lea	($C00004).l,a5
000010DE 2ABC 9400 9340             		move.l	#$94009340,(a5)
000010E4 2ABC 96FD 9540             		move.l	#$96FD9540,(a5)
000010EA 3ABC 977F                  		move.w	#$977F,(a5)
000010EE 3ABC C000                  		move.w	#$C000,(a5)
000010F2 31FC 0080 F640             		move.w	#$80,($FFFFF640).w
000010F8 3AB8 F640                  		move.w	($FFFFF640).w,(a5)
000010FC                            
000010FC                            loc_ED8:				; XREF: loc_E7A
000010FC 3AB8 F624                  		move.w	($FFFFF624).w,(a5)
00001100 4BF9 00C0 0004             		lea	($C00004).l,a5
00001106 2ABC 9401 93C0             		move.l	#$940193C0,(a5)
0000110C 2ABC 96E6 9500             		move.l	#$96E69500,(a5)
00001112                            
00001112                            loc_EEE:
00001112 3ABC 977F                  		move.w	#$977F,(a5)
00001116 3ABC 7C00                  		move.w	#$7C00,(a5)
0000111A 31FC 0083 F640             		move.w	#$83,($FFFFF640).w
00001120 3AB8 F640                  		move.w	($FFFFF640).w,(a5)
00001124 4BF9 00C0 0004             		lea	($C00004).l,a5
0000112A 2ABC 9401 9340             		move.l	#$94019340,(a5)
00001130 2ABC 96FC 9500             		move.l	#$96FC9500,(a5)
00001136 3ABC 977F                  		move.w	#$977F,(a5)
0000113A 3ABC 7800                  		move.w	#$7800,(a5)
0000113E 31FC 0083 F640             		move.w	#$83,($FFFFF640).w
00001144 3AB8 F640                  		move.w	($FFFFF640).w,(a5)
00001148 4A38 F767                  		tst.b	($FFFFF767).w
0000114C 6700                       		beq.s	loc_F54
0000114E 4BF9 00C0 0004             		lea	($C00004).l,a5
00001154 2ABC 9401 9370             		move.l	#$94019370,(a5)
0000115A 2ABC 96E4 9500             		move.l	#$96E49500,(a5)
00001160 3ABC 977F                  		move.w	#$977F,(a5)
00001164 3ABC 7000                  		move.w	#$7000,(a5)
00001168 31FC 0083 F640             		move.w	#$83,($FFFFF640).w
0000116E 3AB8 F640                  		move.w	($FFFFF640).w,(a5)
00001172 11FC 0000 F767             		move.b	#0,($FFFFF767).w
00001178                            
00001178                            loc_F54:
00001178 33FC 0000 00A1 1100        		move.w	#0,($A11100).l	; start	the Z80
00001180 4CF8 00FF F700             		movem.l	($FFFFF700).w,d0-d7
00001186 48F8 00FF FF10             		movem.l	d0-d7,($FFFFFF10).w
0000118C 4CF8 0003 F754             		movem.l	($FFFFF754).w,d0-d1
00001192 48F8 0003 FF30             		movem.l	d0-d1,($FFFFFF30).w
00001198 6100 0000                  		bsr.w	LoadTilesAsYouMove
0000119C 4EB9 0000 0000             		jsr	AniArt_Load
000011A2 4EB9 0000 0000             		jsr	HudUpdate
000011A8 6100 0000                  		bsr.w	sub_1642
000011AC 4E75                       		rts	
000011AE                            ; ===========================================================================
000011AE                            
000011AE                            loc_F8A:				; XREF: off_B6E
000011AE 6100 0000                  		bsr.w	sub_106E
000011B2 5238 F628                  		addq.b	#1,($FFFFF628).w
000011B6 11FC 000E F62A             		move.b	#$E,($FFFFF62A).w
000011BC 4E75                       		rts	
000011BE                            ; ===========================================================================
000011BE                            
000011BE                            loc_F9A:				; XREF: off_B6E
000011BE 6100 0000                  		bsr.w	sub_106E
000011C2 3AB8 F624                  		move.w	($FFFFF624).w,(a5)
000011C6 6000 0000                  		bra.w	sub_1642
000011CA                            ; ===========================================================================
000011CA                            
000011CA                            loc_FA6:				; XREF: off_B6E
000011CA 33FC 0100 00A1 1100        		move.w	#$100,($A11100).l ; stop the Z80
000011D2                            
000011D2                            loc_FAE:
000011D2 0839 0000 00A1 1100        		btst	#0,($A11100).l	; has Z80 stopped?
000011DA 66F6                       		bne.s	loc_FAE		; if not, branch
000011DC 6100 0000                  		bsr.w	ReadJoypads
000011E0 4BF9 00C0 0004             		lea	($C00004).l,a5
000011E6 2ABC 9400 9340             		move.l	#$94009340,(a5)
000011EC 2ABC 96FD 9580             		move.l	#$96FD9580,(a5)
000011F2 3ABC 977F                  		move.w	#$977F,(a5)
000011F6 3ABC C000                  		move.w	#$C000,(a5)
000011FA 31FC 0080 F640             		move.w	#$80,($FFFFF640).w
00001200 3AB8 F640                  		move.w	($FFFFF640).w,(a5)
00001204 4BF9 00C0 0004             		lea	($C00004).l,a5
0000120A 2ABC 9401 9340             		move.l	#$94019340,(a5)
00001210 2ABC 96FC 9500             		move.l	#$96FC9500,(a5)
00001216 3ABC 977F                  		move.w	#$977F,(a5)
0000121A 3ABC 7800                  		move.w	#$7800,(a5)
0000121E 31FC 0083 F640             		move.w	#$83,($FFFFF640).w
00001224 3AB8 F640                  		move.w	($FFFFF640).w,(a5)
00001228 4BF9 00C0 0004             		lea	($C00004).l,a5
0000122E 2ABC 9401 93C0             		move.l	#$940193C0,(a5)
00001234 2ABC 96E6 9500             		move.l	#$96E69500,(a5)
0000123A 3ABC 977F                  		move.w	#$977F,(a5)
0000123E 3ABC 7C00                  		move.w	#$7C00,(a5)
00001242 31FC 0083 F640             		move.w	#$83,($FFFFF640).w
00001248 3AB8 F640                  		move.w	($FFFFF640).w,(a5)
0000124C 33FC 0000 00A1 1100        		move.w	#0,($A11100).l	; start	the Z80
00001254 4A38 F767                  		tst.b	($FFFFF767).w
00001258 6700                       		beq.s	loc_1060
0000125A 4BF9 00C0 0004             		lea	($C00004).l,a5
00001260 2ABC 9401 9370             		move.l	#$94019370,(a5)
00001266 2ABC 96E4 9500             		move.l	#$96E49500,(a5)
0000126C 3ABC 977F                  		move.w	#$977F,(a5)
00001270 3ABC 7000                  		move.w	#$7000,(a5)
00001274 31FC 0083 F640             		move.w	#$83,($FFFFF640).w
0000127A 3AB8 F640                  		move.w	($FFFFF640).w,(a5)
0000127E 11FC 0000 F767             		move.b	#0,($FFFFF767).w
00001284                            
00001284                            loc_1060:
00001284 4A78 F614                  		tst.w	($FFFFF614).w
00001288 6700 0000                  		beq.w	locret_106C
0000128C 5378 F614                  		subq.w	#1,($FFFFF614).w
00001290                            
00001290                            locret_106C:
00001290 4E75                       		rts	
00001292                            
00001292                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00001292                            
00001292                            
00001292                            sub_106E:				; XREF: loc_C32; et al
00001292 33FC 0100 00A1 1100        		move.w	#$100,($A11100).l ; stop the Z80
0000129A                            
0000129A                            loc_1076:
0000129A 0839 0000 00A1 1100        		btst	#0,($A11100).l	; has Z80 stopped?
000012A2 66F6                       		bne.s	loc_1076	; if not, branch
000012A4 6100 0000                  		bsr.w	ReadJoypads
000012A8 4A38 F64E                  		tst.b	($FFFFF64E).w
000012AC 6600                       		bne.s	loc_10B0
000012AE 4BF9 00C0 0004             		lea	($C00004).l,a5
000012B4 2ABC 9400 9340             		move.l	#$94009340,(a5)
000012BA 2ABC 96FD 9580             		move.l	#$96FD9580,(a5)
000012C0 3ABC 977F                  		move.w	#$977F,(a5)
000012C4 3ABC C000                  		move.w	#$C000,(a5)
000012C8 31FC 0080 F640             		move.w	#$80,($FFFFF640).w
000012CE 3AB8 F640                  		move.w	($FFFFF640).w,(a5)
000012D2 6000                       		bra.s	loc_10D4
000012D4                            ; ===========================================================================
000012D4                            
000012D4                            loc_10B0:				; XREF: sub_106E
000012D4 4BF9 00C0 0004             		lea	($C00004).l,a5
000012DA 2ABC 9400 9340             		move.l	#$94009340,(a5)
000012E0 2ABC 96FD 9540             		move.l	#$96FD9540,(a5)
000012E6 3ABC 977F                  		move.w	#$977F,(a5)
000012EA 3ABC C000                  		move.w	#$C000,(a5)
000012EE 31FC 0080 F640             		move.w	#$80,($FFFFF640).w
000012F4 3AB8 F640                  		move.w	($FFFFF640).w,(a5)
000012F8                            
000012F8                            loc_10D4:				; XREF: sub_106E
000012F8 4BF9 00C0 0004             		lea	($C00004).l,a5
000012FE 2ABC 9401 9340             		move.l	#$94019340,(a5)
00001304 2ABC 96FC 9500             		move.l	#$96FC9500,(a5)
0000130A 3ABC 977F                  		move.w	#$977F,(a5)
0000130E 3ABC 7800                  		move.w	#$7800,(a5)
00001312 31FC 0083 F640             		move.w	#$83,($FFFFF640).w
00001318 3AB8 F640                  		move.w	($FFFFF640).w,(a5)
0000131C 4BF9 00C0 0004             		lea	($C00004).l,a5
00001322 2ABC 9401 93C0             		move.l	#$940193C0,(a5)
00001328 2ABC 96E6 9500             		move.l	#$96E69500,(a5)
0000132E 3ABC 977F                  		move.w	#$977F,(a5)
00001332 3ABC 7C00                  		move.w	#$7C00,(a5)
00001336 31FC 0083 F640             		move.w	#$83,($FFFFF640).w
0000133C 3AB8 F640                  		move.w	($FFFFF640).w,(a5)
00001340 33FC 0000 00A1 1100        		move.w	#0,($A11100).l	; start	the Z80
00001348 4E75                       		rts	
0000134A                            ; End of function sub_106E
0000134A                            
0000134A                            ; ---------------------------------------------------------------------------
0000134A                            ; Subroutine to	move pallets from the RAM to CRAM
0000134A                            ; ---------------------------------------------------------------------------
0000134A                            
0000134A                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000134A                            
0000134A                            
0000134A                            PalToCRAM:
0000134A 46FC 2700                  		move	#$2700,sr
0000134E 4A78 F644                  		tst.w	($FFFFF644).w
00001352 6700                       		beq.s	locret_119C
00001354 31FC 0000 F644             		move.w	#0,($FFFFF644).w
0000135A 48E7 00C0                  		movem.l	a0-a1,-(sp)
0000135E 43F9 00C0 0000             		lea	($C00000).l,a1
00001364 41F8 FA80                  		lea	($FFFFFA80).w,a0 ; load	pallet from RAM
00001368 237C C000 0000 0004        		move.l	#$C0000000,4(a1) ; set VDP to CRAM write
00001370 2298                       		move.l	(a0)+,(a1)	; move pallet to CRAM
00001372 2298                       		move.l	(a0)+,(a1)
00001374 2298                       		move.l	(a0)+,(a1)
00001376 2298                       		move.l	(a0)+,(a1)
00001378 2298                       		move.l	(a0)+,(a1)
0000137A 2298                       		move.l	(a0)+,(a1)
0000137C 2298                       		move.l	(a0)+,(a1)
0000137E 2298                       		move.l	(a0)+,(a1)
00001380 2298                       		move.l	(a0)+,(a1)
00001382 2298                       		move.l	(a0)+,(a1)
00001384 2298                       		move.l	(a0)+,(a1)
00001386 2298                       		move.l	(a0)+,(a1)
00001388 2298                       		move.l	(a0)+,(a1)
0000138A 2298                       		move.l	(a0)+,(a1)
0000138C 2298                       		move.l	(a0)+,(a1)
0000138E 2298                       		move.l	(a0)+,(a1)
00001390 2298                       		move.l	(a0)+,(a1)
00001392 2298                       		move.l	(a0)+,(a1)
00001394 2298                       		move.l	(a0)+,(a1)
00001396 2298                       		move.l	(a0)+,(a1)
00001398 2298                       		move.l	(a0)+,(a1)
0000139A 2298                       		move.l	(a0)+,(a1)
0000139C 2298                       		move.l	(a0)+,(a1)
0000139E 2298                       		move.l	(a0)+,(a1)
000013A0 2298                       		move.l	(a0)+,(a1)
000013A2 2298                       		move.l	(a0)+,(a1)
000013A4 2298                       		move.l	(a0)+,(a1)
000013A6 2298                       		move.l	(a0)+,(a1)
000013A8 2298                       		move.l	(a0)+,(a1)
000013AA 2298                       		move.l	(a0)+,(a1)
000013AC 2298                       		move.l	(a0)+,(a1)
000013AE 2298                       		move.l	(a0)+,(a1)
000013B0 337C 8ADF 0004             		move.w	#$8ADF,4(a1)
000013B6 4CDF 0300                  		movem.l	(sp)+,a0-a1
000013BA 4A38 F64F                  		tst.b	($FFFFF64F).w
000013BE 6600                       		bne.s	loc_119E
000013C0                            
000013C0                            locret_119C:
000013C0 4E73                       		rte	
000013C2                            ; ===========================================================================
000013C2                            
000013C2                            loc_119E:				; XREF: PalToCRAM
000013C2 4238 F64F                  		clr.b	($FFFFF64F).w
000013C6 48E7 FFFE                  		movem.l	d0-a6,-(sp)
000013CA 6100 FBDC                  		bsr.w	Demo_Time
000013CE 4EB9 0000 0000             		jsr	sub_71B4C
000013D4 4CDF 7FFF                  		movem.l	(sp)+,d0-a6
000013D8 4E73                       		rte	
000013DA                            ; End of function PalToCRAM
000013DA                            
000013DA                            ; ---------------------------------------------------------------------------
000013DA                            ; Subroutine to	initialise joypads
000013DA                            ; ---------------------------------------------------------------------------
000013DA                            
000013DA                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000013DA                            
000013DA                            
000013DA                            JoypadInit:				; XREF: GameClrRAM
000013DA 33FC 0100 00A1 1100        		move.w	#$100,($A11100).l ; stop the Z80
000013E2                            
000013E2                            Joypad_WaitZ80:
000013E2 0839 0000 00A1 1100        		btst	#0,($A11100).l	; has the Z80 stopped?
000013EA 66F6                       		bne.s	Joypad_WaitZ80	; if not, branch
000013EC 7040                       		moveq	#$40,d0
000013EE 13C0 00A1 0009             		move.b	d0,($A10009).l	; init port 1 (joypad 1)
000013F4 13C0 00A1 000B             		move.b	d0,($A1000B).l	; init port 2 (joypad 2)
000013FA 13C0 00A1 000D             		move.b	d0,($A1000D).l	; init port 3 (extra)
00001400 33FC 0000 00A1 1100        		move.w	#0,($A11100).l	; start	the Z80
00001408 4E75                       		rts	
0000140A                            ; End of function JoypadInit
0000140A                            
0000140A                            ; ---------------------------------------------------------------------------
0000140A                            ; Subroutine to	read joypad input, and send it to the RAM
0000140A                            ; ---------------------------------------------------------------------------
0000140A                            
0000140A                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000140A                            
0000140A                            
0000140A                            ReadJoypads:
0000140A 41F8 F604                  		lea	($FFFFF604).w,a0 ; address where joypad	states are written
0000140E 43F9 00A1 0003             		lea	($A10003).l,a1	; first	joypad port
00001414 6100                       		bsr.s	Joypad_Read	; do the first joypad
00001416 5449                       		addq.w	#2,a1		; do the second	joypad
00001418                            
00001418                            Joypad_Read:
00001418 12BC 0000                  		move.b	#0,(a1)
0000141C 4E71                       		nop	
0000141E 4E71                       		nop	
00001420 1011                       		move.b	(a1),d0
00001422 E508                       		lsl.b	#2,d0
00001424 0200 00C0                  		andi.b	#$C0,d0
00001428 12BC 0040                  		move.b	#$40,(a1)
0000142C 4E71                       		nop	
0000142E 4E71                       		nop	
00001430 1211                       		move.b	(a1),d1
00001432 0201 003F                  		andi.b	#$3F,d1
00001436 8001                       		or.b	d1,d0
00001438 4600                       		not.b	d0
0000143A 1210                       		move.b	(a0),d1
0000143C B101                       		eor.b	d0,d1
0000143E 10C0                       		move.b	d0,(a0)+
00001440 C200                       		and.b	d0,d1
00001442 10C1                       		move.b	d1,(a0)+
00001444 4E75                       		rts	
00001446                            ; End of function ReadJoypads
00001446                            
00001446                            
00001446                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00001446                            
00001446                            
00001446                            VDPSetupGame:				; XREF: GameClrRAM; ChecksumError
00001446 41F9 00C0 0004             		lea	($C00004).l,a0
0000144C 43F9 00C0 0000             		lea	($C00000).l,a1
00001452 45F9 0000 0000             		lea	(VDPSetupArray).l,a2
00001458 7E12                       		moveq	#$12,d7
0000145A                            
0000145A                            VDP_Loop:
0000145A 309A                       		move.w	(a2)+,(a0)
0000145C 51CF FFFC                  		dbf	d7,VDP_Loop	; set the VDP registers
00001460                            
00001460 3039 0000 0000             		move.w	(VDPSetupArray+2).l,d0
00001466 31C0 F60C                  		move.w	d0,($FFFFF60C).w
0000146A 31FC 8ADF F624             		move.w	#$8ADF,($FFFFF624).w
00001470 7000                       		moveq	#0,d0
00001472 23FC C000 0000 00C0 0004   		move.l	#$C0000000,($C00004).l ; set VDP to CRAM write
0000147C 3E3C 003F                  		move.w	#$3F,d7
00001480                            
00001480                            VDP_ClrCRAM:
00001480 3280                       		move.w	d0,(a1)
00001482 51CF FFFC                  		dbf	d7,VDP_ClrCRAM	; clear	the CRAM
00001486                            
00001486 42B8 F616                  		clr.l	($FFFFF616).w
0000148A 42B8 F61A                  		clr.l	($FFFFF61A).w
0000148E 2F01                       		move.l	d1,-(sp)
00001490 4BF9 00C0 0004             		lea	($C00004).l,a5
00001496 3ABC 8F01                  		move.w	#$8F01,(a5)
0000149A 2ABC 94FF 93FF             		move.l	#$94FF93FF,(a5)
000014A0 3ABC 9780                  		move.w	#$9780,(a5)
000014A4 2ABC 4000 0080             		move.l	#$40000080,(a5)
000014AA 33FC 0000 00C0 0000        		move.w	#0,($C00000).l	; clear	the screen
000014B2                            
000014B2                            loc_128E:
000014B2 3215                       		move.w	(a5),d1
000014B4 0801 0001                  		btst	#1,d1
000014B8 66F8                       		bne.s	loc_128E
000014BA                            
000014BA 3ABC 8F02                  		move.w	#$8F02,(a5)
000014BE 221F                       		move.l	(sp)+,d1
000014C0 4E75                       		rts	
000014C2                            ; End of function VDPSetupGame
000014C2                            
000014C2                            ; ===========================================================================
000014C2 8004 8134 8230 8328        VDPSetupArray:	dc.w $8004, $8134, $8230, $8328	; XREF: VDPSetupGame
000014CA 8407 857C 8600 8700        		dc.w $8407, $857C, $8600, $8700
000014D2 8800 8900 8A00 8B00        		dc.w $8800, $8900, $8A00, $8B00
000014DA 8C81 8D3F 8E00 8F02        		dc.w $8C81, $8D3F, $8E00, $8F02
000014E2 9001 9100 9200             		dc.w $9001, $9100, $9200
000014E8                            
000014E8                            ; ---------------------------------------------------------------------------
000014E8                            ; Subroutine to	clear the screen
000014E8                            ; ---------------------------------------------------------------------------
000014E8                            
000014E8                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000014E8                            
000014E8                            
000014E8                            ClearScreen:
000014E8 4BF9 00C0 0004             		lea	($C00004).l,a5
000014EE 3ABC 8F01                  		move.w	#$8F01,(a5)
000014F2 2ABC 940F 93FF             		move.l	#$940F93FF,(a5)
000014F8 3ABC 9780                  		move.w	#$9780,(a5)
000014FC 2ABC 4000 0083             		move.l	#$40000083,(a5)
00001502 33FC 0000 00C0 0000        		move.w	#0,($C00000).l
0000150A                            
0000150A                            loc_12E6:
0000150A 3215                       		move.w	(a5),d1
0000150C 0801 0001                  		btst	#1,d1
00001510 66F8                       		bne.s	loc_12E6
00001512                            
00001512 3ABC 8F02                  		move.w	#$8F02,(a5)
00001516 4BF9 00C0 0004             		lea	($C00004).l,a5
0000151C 3ABC 8F01                  		move.w	#$8F01,(a5)
00001520 2ABC 940F 93FF             		move.l	#$940F93FF,(a5)
00001526 3ABC 9780                  		move.w	#$9780,(a5)
0000152A 2ABC 6000 0083             		move.l	#$60000083,(a5)
00001530 33FC 0000 00C0 0000        		move.w	#0,($C00000).l
00001538                            
00001538                            loc_1314:
00001538 3215                       		move.w	(a5),d1
0000153A 0801 0001                  		btst	#1,d1
0000153E 66F8                       		bne.s	loc_1314
00001540                            
00001540 3ABC 8F02                  		move.w	#$8F02,(a5)
00001544 21FC 0000 0000 F616        		move.l	#0,($FFFFF616).w
0000154C 21FC 0000 0000 F61A        		move.l	#0,($FFFFF61A).w
00001554 43F8 F800                  		lea	($FFFFF800).w,a1
00001558 7000                       		moveq	#0,d0
0000155A 323C 009F                  		move.w	#$9F,d1
0000155E                            
0000155E                            loc_133A:
0000155E 22C0                       		move.l	d0,(a1)+
00001560 51C9 FFFC                  		dbf	d1,loc_133A
00001564                            
00001564 43F8 CC00                  		lea	($FFFFCC00).w,a1
00001568 7000                       		moveq	#0,d0
0000156A 323C 00FF                  		move.w	#$FF,d1
0000156E                            
0000156E                            loc_134A:
0000156E 22C0                       		move.l	d0,(a1)+
00001570 51C9 FFFC                  		dbf	d1,loc_134A
00001574 4E75                       		rts	
00001576                            ; End of function ClearScreen
00001576                            
00001576                            ; ---------------------------------------------------------------------------
00001576                            ; Subroutine to	load the sound driver
00001576                            ; ---------------------------------------------------------------------------
00001576                            
00001576                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00001576                            
00001576                            
00001576                            SoundDriverLoad:			; XREF: GameClrRAM; TitleScreen
00001576 4E71                       		nop	
00001578 33FC 0100 00A1 1100        		move.w	#$100,($A11100).l ; stop the Z80
00001580 33FC 0100 00A1 1200        		move.w	#$100,($A11200).l ; reset the Z80
00001588 41F9 0000 0000             		lea	(Kos_Z80).l,a0	; load sound driver
0000158E 43F9 00A0 0000             		lea	($A00000).l,a1
00001594 6100 0000                  		bsr.w	KosDec		; decompress
00001598 33FC 0000 00A1 1200        		move.w	#0,($A11200).l
000015A0 4E71                       		nop	
000015A2 4E71                       		nop	
000015A4 4E71                       		nop	
000015A6 4E71                       		nop	
000015A8 33FC 0100 00A1 1200        		move.w	#$100,($A11200).l ; reset the Z80
000015B0 33FC 0000 00A1 1100        		move.w	#0,($A11100).l	; start	the Z80
000015B8 4E75                       		rts	
000015BA                            ; End of function SoundDriverLoad
000015BA                            
000015BA                            ; ---------------------------------------------------------------------------
000015BA                            ; Subroutine to	play a sound or	music track
000015BA                            ; ---------------------------------------------------------------------------
000015BA                            
000015BA                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000015BA                            
000015BA                            
000015BA                            PlaySound:
000015BA 11C0 F00A                  		move.b	d0,($FFFFF00A).w
000015BE 4E75                       		rts	
000015C0                            ; End of function PlaySound
000015C0                            
000015C0                            ; ---------------------------------------------------------------------------
000015C0                            ; Subroutine to	play a special sound/music (E0-E4)
000015C0                            ;
000015C0                            ; E0 - Fade out
000015C0                            ; E1 - Sega
000015C0                            ; E2 - Speed up
000015C0                            ; E3 - Normal speed
000015C0                            ; E4 - Stop
000015C0                            ; ---------------------------------------------------------------------------
000015C0                            
000015C0                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000015C0                            
000015C0                            
000015C0                            PlaySound_Special:
000015C0 11C0 F00B                  		move.b	d0,($FFFFF00B).w
000015C4 4E75                       		rts	
000015C6                            ; End of function PlaySound_Special
000015C6                            
000015C6                            ; ===========================================================================
000015C6                            ; ---------------------------------------------------------------------------
000015C6                            ; Unused sound/music subroutine
000015C6                            ; ---------------------------------------------------------------------------
000015C6                            
000015C6                            PlaySound_Unk:
000015C6 11C0 F00C                  		move.b	d0,($FFFFF00C).w
000015CA 4E75                       		rts	
000015CC                            
000015CC                            ; ---------------------------------------------------------------------------
000015CC                            ; Subroutine to	pause the game
000015CC                            ; ---------------------------------------------------------------------------
000015CC                            
000015CC                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000015CC                            
000015CC                            
000015CC                            PauseGame:				; XREF: Level_MainLoop; et al
000015CC 4E71                       		nop	
000015CE 4A38 FE12                  		tst.b	($FFFFFE12).w	; do you have any lives	left?
000015D2 6700                       		beq.s	Unpause		; if not, branch
000015D4 4A78 F63A                  		tst.w	($FFFFF63A).w	; is game already paused?
000015D8 6600                       		bne.s	loc_13BE	; if yes, branch
000015DA 0838 0007 F605             		btst	#7,($FFFFF605).w ; is Start button pressed?
000015E0 6700                       		beq.s	Pause_DoNothing	; if not, branch
000015E2                            
000015E2                            loc_13BE:
000015E2 31FC 0001 F63A             		move.w	#1,($FFFFF63A).w ; freeze time
000015E8 11FC 0001 F003             		move.b	#1,($FFFFF003).w ; pause music
000015EE                            
000015EE                            loc_13CA:
000015EE 11FC 0010 F62A             		move.b	#$10,($FFFFF62A).w
000015F4 6100 0000                  		bsr.w	DelayProgram
000015F8 4A38 FFE1                  		tst.b	($FFFFFFE1).w	; is slow-motion cheat on?
000015FC 6700                       		beq.s	Pause_ChkStart	; if not, branch
000015FE 0838 0006 F605             		btst	#6,($FFFFF605).w ; is button A pressed?
00001604 6700                       		beq.s	Pause_ChkBC	; if not, branch
00001606 11FC 0004 F600             		move.b	#4,($FFFFF600).w ; set game mode to 4 (title screen)
0000160C 4E71                       		nop	
0000160E 6000                       		bra.s	loc_1404
00001610                            ; ===========================================================================
00001610                            
00001610                            Pause_ChkBC:				; XREF: PauseGame
00001610 0838 0004 F604             		btst	#4,($FFFFF604).w ; is button B pressed?
00001616 6600                       		bne.s	Pause_SlowMo	; if yes, branch
00001618 0838 0005 F605             		btst	#5,($FFFFF605).w ; is button C pressed?
0000161E 6600                       		bne.s	Pause_SlowMo	; if yes, branch
00001620                            
00001620                            Pause_ChkStart:				; XREF: PauseGame
00001620 0838 0007 F605             		btst	#7,($FFFFF605).w ; is Start button pressed?
00001626 67C6                       		beq.s	loc_13CA	; if not, branch
00001628                            
00001628                            loc_1404:				; XREF: PauseGame
00001628 11FC 0080 F003             		move.b	#$80,($FFFFF003).w
0000162E                            
0000162E                            Unpause:				; XREF: PauseGame
0000162E 31FC 0000 F63A             		move.w	#0,($FFFFF63A).w ; unpause the game
00001634                            
00001634                            Pause_DoNothing:			; XREF: PauseGame
00001634 4E75                       		rts	
00001636                            ; ===========================================================================
00001636                            
00001636                            Pause_SlowMo:				; XREF: PauseGame
00001636 31FC 0001 F63A             		move.w	#1,($FFFFF63A).w
0000163C 11FC 0080 F003             		move.b	#$80,($FFFFF003).w
00001642 4E75                       		rts	
00001644                            ; End of function PauseGame
00001644                            
00001644                            ; ---------------------------------------------------------------------------
00001644                            ; Subroutine to	display	patterns via the VDP
00001644                            ; ---------------------------------------------------------------------------
00001644                            
00001644                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00001644                            
00001644                            
00001644                            ShowVDPGraphics:			; XREF: SegaScreen; TitleScreen; SS_BGLoad
00001644 4DF9 00C0 0000             		lea	($C00000).l,a6
0000164A 283C 0080 0000             		move.l	#$800000,d4
00001650                            
00001650                            loc_142C:
00001650 2D40 0004                  		move.l	d0,4(a6)
00001654 3601                       		move.w	d1,d3
00001656                            
00001656                            loc_1432:
00001656 3C99                       		move.w	(a1)+,(a6)
00001658 51CB FFFC                  		dbf	d3,loc_1432
0000165C D084                       		add.l	d4,d0
0000165E 51CA FFF0                  		dbf	d2,loc_142C
00001662 4E75                       		rts	
00001664                            ; End of function ShowVDPGraphics
00001664                            
00001664                            ; ---------------------------------------------------------------------------
00001664                            ; Nemesis decompression	algorithm
00001664                            ; ---------------------------------------------------------------------------
00001664                            
00001664                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00001664                            
00001664                            
00001664                            NemDec:
00001664 48E7 FFDC                  		movem.l	d0-a1/a3-a5,-(sp)
00001668 47F9 0000 0000             		lea	(loc_1502).l,a3
0000166E 49F9 00C0 0000             		lea	($C00000).l,a4
00001674 6000                       		bra.s	loc_145C
00001676                            ; ===========================================================================
00001676 48E7 FFDC                  		movem.l	d0-a1/a3-a5,-(sp)
0000167A 47F9 0000 0000             		lea	(loc_1518).l,a3
00001680                            
00001680                            loc_145C:				; XREF: NemDec
00001680 43F8 AA00                  		lea	($FFFFAA00).w,a1
00001684 3418                       		move.w	(a0)+,d2
00001686 E34A                       		lsl.w	#1,d2
00001688 6400                       		bcc.s	loc_146A
0000168A D6FC 000A                  		adda.w	#$A,a3
0000168E                            
0000168E                            loc_146A:
0000168E E54A                       		lsl.w	#2,d2
00001690 3A42                       		movea.w	d2,a5
00001692 7608                       		moveq	#8,d3
00001694 7400                       		moveq	#0,d2
00001696 7800                       		moveq	#0,d4
00001698 6100 0000                  		bsr.w	NemDec4
0000169C 1A18                       		move.b	(a0)+,d5
0000169E E145                       		asl.w	#8,d5
000016A0 1A18                       		move.b	(a0)+,d5
000016A2 3C3C 0010                  		move.w	#$10,d6
000016A6 6100                       		bsr.s	NemDec2
000016A8 4CDF 3BFF                  		movem.l	(sp)+,d0-a1/a3-a5
000016AC 4E75                       		rts	
000016AE                            ; End of function NemDec
000016AE                            
000016AE                            
000016AE                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000016AE                            
000016AE                            
000016AE                            NemDec2:				; XREF: NemDec
000016AE 3E06                       		move.w	d6,d7
000016B0 5147                       		subq.w	#8,d7
000016B2 3205                       		move.w	d5,d1
000016B4 EE69                       		lsr.w	d7,d1
000016B6 0C01 00FC                  		cmpi.b	#-4,d1
000016BA 6400                       		bcc.s	loc_14D6
000016BC 0241 00FF                  		andi.w	#$FF,d1
000016C0 D241                       		add.w	d1,d1
000016C2 1031 1000                  		move.b	(a1,d1.w),d0
000016C6 4880                       		ext.w	d0
000016C8 9C40                       		sub.w	d0,d6
000016CA 0C46 0009                  		cmpi.w	#9,d6
000016CE 6400                       		bcc.s	loc_14B2
000016D0 5046                       		addq.w	#8,d6
000016D2 E145                       		asl.w	#8,d5
000016D4 1A18                       		move.b	(a0)+,d5
000016D6                            
000016D6                            loc_14B2:
000016D6 1231 1001                  		move.b	1(a1,d1.w),d1
000016DA 3001                       		move.w	d1,d0
000016DC 0241 000F                  		andi.w	#$F,d1
000016E0 0240 00F0                  		andi.w	#$F0,d0
000016E4                            
000016E4                            loc_14C0:				; XREF: NemDec3
000016E4 E848                       		lsr.w	#4,d0
000016E6                            
000016E6                            loc_14C2:				; XREF: NemDec3
000016E6 E98C                       		lsl.l	#4,d4
000016E8 8801                       		or.b	d1,d4
000016EA 5343                       		subq.w	#1,d3
000016EC 6600                       		bne.s	loc_14D0
000016EE 4ED3                       		jmp	(a3)
000016F0                            ; End of function NemDec2
000016F0                            
000016F0                            
000016F0                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000016F0                            
000016F0                            
000016F0                            NemDec3:				; XREF: loc_1502
000016F0 7800                       		moveq	#0,d4
000016F2 7608                       		moveq	#8,d3
000016F4                            
000016F4                            loc_14D0:				; XREF: NemDec2
000016F4 51C8 FFF0                  		dbf	d0,loc_14C2
000016F8 60B4                       		bra.s	NemDec2
000016FA                            ; ===========================================================================
000016FA                            
000016FA                            loc_14D6:				; XREF: NemDec2
000016FA 5D46                       		subq.w	#6,d6
000016FC 0C46 0009                  		cmpi.w	#9,d6
00001700 6400                       		bcc.s	loc_14E4
00001702 5046                       		addq.w	#8,d6
00001704 E145                       		asl.w	#8,d5
00001706 1A18                       		move.b	(a0)+,d5
00001708                            
00001708                            loc_14E4:				; XREF: NemDec3
00001708 5F46                       		subq.w	#7,d6
0000170A 3205                       		move.w	d5,d1
0000170C EC69                       		lsr.w	d6,d1
0000170E 3001                       		move.w	d1,d0
00001710 0241 000F                  		andi.w	#$F,d1
00001714 0240 0070                  		andi.w	#$70,d0
00001718 0C46 0009                  		cmpi.w	#9,d6
0000171C 64C6                       		bcc.s	loc_14C0
0000171E 5046                       		addq.w	#8,d6
00001720 E145                       		asl.w	#8,d5
00001722 1A18                       		move.b	(a0)+,d5
00001724 60BE                       		bra.s	loc_14C0
00001726                            ; End of function NemDec3
00001726                            
00001726                            ; ===========================================================================
00001726                            
00001726                            loc_1502:				; XREF: NemDec
00001726 2884                       		move.l	d4,(a4)
00001728 534D                       		subq.w	#1,a5
0000172A 380D                       		move.w	a5,d4
0000172C 66C2                       		bne.s	NemDec3
0000172E 4E75                       		rts	
00001730                            ; ===========================================================================
00001730 B982                       		eor.l	d4,d2
00001732 2882                       		move.l	d2,(a4)
00001734 534D                       		subq.w	#1,a5
00001736 380D                       		move.w	a5,d4
00001738 66B6                       		bne.s	NemDec3
0000173A 4E75                       		rts	
0000173C                            ; ===========================================================================
0000173C                            
0000173C                            loc_1518:				; XREF: NemDec
0000173C 28C4                       		move.l	d4,(a4)+
0000173E 534D                       		subq.w	#1,a5
00001740 380D                       		move.w	a5,d4
00001742 66AC                       		bne.s	NemDec3
00001744 4E75                       		rts	
00001746                            ; ===========================================================================
00001746 B982                       		eor.l	d4,d2
00001748 28C2                       		move.l	d2,(a4)+
0000174A 534D                       		subq.w	#1,a5
0000174C 380D                       		move.w	a5,d4
0000174E 66A0                       		bne.s	NemDec3
00001750 4E75                       		rts	
00001752                            
00001752                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00001752                            
00001752                            
00001752                            NemDec4:				; XREF: NemDec
00001752 1018                       		move.b	(a0)+,d0
00001754                            
00001754                            loc_1530:
00001754 0C00 00FF                  		cmpi.b	#-1,d0
00001758 6600                       		bne.s	loc_1538
0000175A 4E75                       		rts	
0000175C                            ; ===========================================================================
0000175C                            
0000175C                            loc_1538:				; XREF: NemDec4
0000175C 3E00                       		move.w	d0,d7
0000175E                            
0000175E                            loc_153A:
0000175E 1018                       		move.b	(a0)+,d0
00001760 0C00 0080                  		cmpi.b	#$80,d0
00001764 64EE                       		bcc.s	loc_1530
00001766 1200                       		move.b	d0,d1
00001768 0247 000F                  		andi.w	#$F,d7
0000176C 0241 0070                  		andi.w	#$70,d1
00001770 8E41                       		or.w	d1,d7
00001772 0240 000F                  		andi.w	#$F,d0
00001776 1200                       		move.b	d0,d1
00001778 E149                       		lsl.w	#8,d1
0000177A 8E41                       		or.w	d1,d7
0000177C 7208                       		moveq	#8,d1
0000177E 9240                       		sub.w	d0,d1
00001780 6600                       		bne.s	loc_1568
00001782 1018                       		move.b	(a0)+,d0
00001784 D040                       		add.w	d0,d0
00001786 3387 0000                  		move.w	d7,(a1,d0.w)
0000178A 60D2                       		bra.s	loc_153A
0000178C                            ; ===========================================================================
0000178C                            
0000178C                            loc_1568:				; XREF: NemDec4
0000178C 1018                       		move.b	(a0)+,d0
0000178E E368                       		lsl.w	d1,d0
00001790 D040                       		add.w	d0,d0
00001792 7A01                       		moveq	#1,d5
00001794 E36D                       		lsl.w	d1,d5
00001796 5345                       		subq.w	#1,d5
00001798                            
00001798                            loc_1574:
00001798 3387 0000                  		move.w	d7,(a1,d0.w)
0000179C 5440                       		addq.w	#2,d0
0000179E 51CD FFF8                  		dbf	d5,loc_1574
000017A2 60BA                       		bra.s	loc_153A
000017A4                            ; End of function NemDec4
000017A4                            
000017A4                            ; ---------------------------------------------------------------------------
000017A4                            ; Subroutine to	load pattern load cues
000017A4                            ; ---------------------------------------------------------------------------
000017A4                            
000017A4                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000017A4                            
000017A4                            
000017A4                            LoadPLC:
000017A4 48E7 0060                  		movem.l	a1-a2,-(sp)
000017A8 43F9 0000 0000             		lea	(ArtLoadCues).l,a1
000017AE D040                       		add.w	d0,d0
000017B0 3031 0000                  		move.w	(a1,d0.w),d0
000017B4 43F1 0000                  		lea	(a1,d0.w),a1
000017B8 45F8 F680                  		lea	($FFFFF680).w,a2
000017BC                            
000017BC                            loc_1598:
000017BC 4A92                       		tst.l	(a2)
000017BE 6700                       		beq.s	loc_15A0
000017C0 5C4A                       		addq.w	#6,a2
000017C2 60F8                       		bra.s	loc_1598
000017C4                            ; ===========================================================================
000017C4                            
000017C4                            loc_15A0:				; XREF: LoadPLC
000017C4 3019                       		move.w	(a1)+,d0
000017C6 6B00                       		bmi.s	loc_15AC
000017C8                            
000017C8                            loc_15A4:
000017C8 24D9                       		move.l	(a1)+,(a2)+
000017CA 34D9                       		move.w	(a1)+,(a2)+
000017CC 51C8 FFFA                  		dbf	d0,loc_15A4
000017D0                            
000017D0                            loc_15AC:
000017D0 4CDF 0600                  		movem.l	(sp)+,a1-a2
000017D4 4E75                       		rts	
000017D6                            ; End of function LoadPLC
000017D6                            
000017D6                            
000017D6                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000017D6                            
000017D6                            
000017D6                            LoadPLC2:
000017D6 48E7 0060                  		movem.l	a1-a2,-(sp)
000017DA 43F9 0000 0000             		lea	(ArtLoadCues).l,a1
000017E0 D040                       		add.w	d0,d0
000017E2 3031 0000                  		move.w	(a1,d0.w),d0
000017E6 43F1 0000                  		lea	(a1,d0.w),a1
000017EA 6100                       		bsr.s	ClearPLC
000017EC 45F8 F680                  		lea	($FFFFF680).w,a2
000017F0 3019                       		move.w	(a1)+,d0
000017F2 6B00                       		bmi.s	loc_15D8
000017F4                            
000017F4                            loc_15D0:
000017F4 24D9                       		move.l	(a1)+,(a2)+
000017F6 34D9                       		move.w	(a1)+,(a2)+
000017F8 51C8 FFFA                  		dbf	d0,loc_15D0
000017FC                            
000017FC                            loc_15D8:
000017FC 4CDF 0600                  		movem.l	(sp)+,a1-a2
00001800 4E75                       		rts	
00001802                            ; End of function LoadPLC2
00001802                            
00001802                            ; ---------------------------------------------------------------------------
00001802                            ; Subroutine to	clear the pattern load cues
00001802                            ; ---------------------------------------------------------------------------
00001802                            
00001802                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00001802                            
00001802                            
00001802                            ClearPLC:				; XREF: LoadPLC2
00001802 45F8 F680                  		lea	($FFFFF680).w,a2
00001806 701F                       		moveq	#$1F,d0
00001808                            
00001808                            ClearPLC_Loop:
00001808 429A                       		clr.l	(a2)+
0000180A 51C8 FFFC                  		dbf	d0,ClearPLC_Loop
0000180E 4E75                       		rts	
00001810                            ; End of function ClearPLC
00001810                            
00001810                            ; ---------------------------------------------------------------------------
00001810                            ; Subroutine to	use graphics listed in a pattern load cue
00001810                            ; ---------------------------------------------------------------------------
00001810                            
00001810                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00001810                            
00001810                            
00001810                            RunPLC_RAM:				; XREF: Pal_FadeTo
00001810 4AB8 F680                  		tst.l	($FFFFF680).w
00001814 6700                       		beq.s	locret_1640
00001816 4A78 F6F8                  		tst.w	($FFFFF6F8).w
0000181A 6600                       		bne.s	locret_1640
0000181C 2078 F680                  		movea.l	($FFFFF680).w,a0
00001820 47F9 0000 1726             		lea	(loc_1502).l,a3
00001826 43F8 AA00                  		lea	($FFFFAA00).w,a1
0000182A 3418                       		move.w	(a0)+,d2
0000182C 6A00                       		bpl.s	loc_160E
0000182E D6FC 000A                  		adda.w	#$A,a3
00001832                            
00001832                            loc_160E:
00001832 0242 7FFF                  		andi.w	#$7FFF,d2
00001836 31C2 F6F8                  		move.w	d2,($FFFFF6F8).w
0000183A 6100 FF16                  		bsr.w	NemDec4
0000183E 1A18                       		move.b	(a0)+,d5
00001840 E145                       		asl.w	#8,d5
00001842 1A18                       		move.b	(a0)+,d5
00001844 7C10                       		moveq	#$10,d6
00001846 7000                       		moveq	#0,d0
00001848 21C8 F680                  		move.l	a0,($FFFFF680).w
0000184C 21CB F6E0                  		move.l	a3,($FFFFF6E0).w
00001850 21C0 F6E4                  		move.l	d0,($FFFFF6E4).w
00001854 21C0 F6E8                  		move.l	d0,($FFFFF6E8).w
00001858 21C0 F6EC                  		move.l	d0,($FFFFF6EC).w
0000185C 21C5 F6F0                  		move.l	d5,($FFFFF6F0).w
00001860 21C6 F6F4                  		move.l	d6,($FFFFF6F4).w
00001864                            
00001864                            locret_1640:
00001864 4E75                       		rts	
00001866                            ; End of function RunPLC_RAM
00001866                            
00001866                            
00001866                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00001866                            
00001866                            
00001866                            sub_1642:				; XREF: loc_C44; loc_F54; loc_F9A
00001866 4A78 F6F8                  		tst.w	($FFFFF6F8).w
0000186A 6700 0000                  		beq.w	locret_16DA
0000186E 31FC 0009 F6FA             		move.w	#9,($FFFFF6FA).w
00001874 7000                       		moveq	#0,d0
00001876 3038 F684                  		move.w	($FFFFF684).w,d0
0000187A 0678 0120 F684             		addi.w	#$120,($FFFFF684).w
00001880 6000                       		bra.s	loc_1676
00001882                            ; End of function sub_1642
00001882                            
00001882                            
00001882                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00001882                            
00001882                            
00001882                            sub_165E:				; XREF: Demo_Time
00001882 4A78 F6F8                  		tst.w	($FFFFF6F8).w
00001886 6700                       		beq.s	locret_16DA
00001888 31FC 0003 F6FA             		move.w	#3,($FFFFF6FA).w
0000188E 7000                       		moveq	#0,d0
00001890 3038 F684                  		move.w	($FFFFF684).w,d0
00001894 0678 0060 F684             		addi.w	#$60,($FFFFF684).w
0000189A                            
0000189A                            loc_1676:				; XREF: sub_1642
0000189A 49F9 00C0 0004             		lea	($C00004).l,a4
000018A0 E588                       		lsl.l	#2,d0
000018A2 E448                       		lsr.w	#2,d0
000018A4 0040 4000                  		ori.w	#$4000,d0
000018A8 4840                       		swap	d0
000018AA 2880                       		move.l	d0,(a4)
000018AC 594C                       		subq.w	#4,a4
000018AE 2078 F680                  		movea.l	($FFFFF680).w,a0
000018B2 2678 F6E0                  		movea.l	($FFFFF6E0).w,a3
000018B6 2038 F6E4                  		move.l	($FFFFF6E4).w,d0
000018BA 2238 F6E8                  		move.l	($FFFFF6E8).w,d1
000018BE 2438 F6EC                  		move.l	($FFFFF6EC).w,d2
000018C2 2A38 F6F0                  		move.l	($FFFFF6F0).w,d5
000018C6 2C38 F6F4                  		move.l	($FFFFF6F4).w,d6
000018CA 43F8 AA00                  		lea	($FFFFAA00).w,a1
000018CE                            
000018CE                            loc_16AA:				; XREF: sub_165E
000018CE 3A7C 0008                  		movea.w	#8,a5
000018D2 6100 FE1C                  		bsr.w	NemDec3
000018D6 5378 F6F8                  		subq.w	#1,($FFFFF6F8).w
000018DA 6700                       		beq.s	loc_16DC
000018DC 5378 F6FA                  		subq.w	#1,($FFFFF6FA).w
000018E0 66EC                       		bne.s	loc_16AA
000018E2 21C8 F680                  		move.l	a0,($FFFFF680).w
000018E6 21CB F6E0                  		move.l	a3,($FFFFF6E0).w
000018EA 21C0 F6E4                  		move.l	d0,($FFFFF6E4).w
000018EE 21C1 F6E8                  		move.l	d1,($FFFFF6E8).w
000018F2 21C2 F6EC                  		move.l	d2,($FFFFF6EC).w
000018F6 21C5 F6F0                  		move.l	d5,($FFFFF6F0).w
000018FA 21C6 F6F4                  		move.l	d6,($FFFFF6F4).w
000018FE                            
000018FE                            locret_16DA:				; XREF: sub_1642
000018FE 4E75                       		rts	
00001900                            ; ===========================================================================
00001900                            
00001900                            loc_16DC:				; XREF: sub_165E
00001900 41F8 F680                  		lea	($FFFFF680).w,a0
00001904 7015                       		moveq	#$15,d0
00001906                            
00001906                            loc_16E2:				; XREF: sub_165E
00001906 20E8 0006                  		move.l	6(a0),(a0)+
0000190A 51C8 FFFA                  		dbf	d0,loc_16E2
0000190E 4E75                       		rts	
00001910                            ; End of function sub_165E
00001910                            
00001910                            ; ---------------------------------------------------------------------------
00001910                            ; Subroutine to	execute	the pattern load cue
00001910                            ; ---------------------------------------------------------------------------
00001910                            
00001910                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00001910                            
00001910                            
00001910                            RunPLC_ROM:
00001910 43F9 0000 0000             		lea	(ArtLoadCues).l,a1 ; load the PLC index
00001916 D040                       		add.w	d0,d0
00001918 3031 0000                  		move.w	(a1,d0.w),d0
0000191C 43F1 0000                  		lea	(a1,d0.w),a1
00001920 3219                       		move.w	(a1)+,d1	; load number of entries in the	PLC
00001922                            
00001922                            RunPLC_Loop:
00001922 2059                       		movea.l	(a1)+,a0	; get art pointer
00001924 7000                       		moveq	#0,d0
00001926 3019                       		move.w	(a1)+,d0	; get VRAM address
00001928 E588                       		lsl.l	#2,d0		; divide address by $20
0000192A E448                       		lsr.w	#2,d0
0000192C 0040 4000                  		ori.w	#$4000,d0
00001930 4840                       		swap	d0
00001932 23C0 00C0 0004             		move.l	d0,($C00004).l	; put the VRAM address into VDP
00001938 6100 FD2A                  		bsr.w	NemDec		; decompress
0000193C 51C9 FFE4                  		dbf	d1,RunPLC_Loop	; loop for number of entries
00001940 4E75                       		rts	
00001942                            ; End of function RunPLC_ROM
00001942                            
00001942                            ; ---------------------------------------------------------------------------
00001942                            ; Enigma decompression algorithm
00001942                            ; ---------------------------------------------------------------------------
00001942                            
00001942                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00001942                            
00001942                            
00001942                            EniDec:
00001942 48E7 FF7C                  		movem.l	d0-d7/a1-a5,-(sp)
00001946 3640                       		movea.w	d0,a3
00001948 1018                       		move.b	(a0)+,d0
0000194A 4880                       		ext.w	d0
0000194C 3A40                       		movea.w	d0,a5
0000194E 1818                       		move.b	(a0)+,d4
00001950 E70C                       		lsl.b	#3,d4
00001952 3458                       		movea.w	(a0)+,a2
00001954 D4CB                       		adda.w	a3,a2
00001956 3858                       		movea.w	(a0)+,a4
00001958 D8CB                       		adda.w	a3,a4
0000195A 1A18                       		move.b	(a0)+,d5
0000195C E145                       		asl.w	#8,d5
0000195E 1A18                       		move.b	(a0)+,d5
00001960 7C10                       		moveq	#$10,d6
00001962                            
00001962                            loc_173E:				; XREF: loc_1768
00001962 7007                       		moveq	#7,d0
00001964 3E06                       		move.w	d6,d7
00001966 9E40                       		sub.w	d0,d7
00001968 3205                       		move.w	d5,d1
0000196A EE69                       		lsr.w	d7,d1
0000196C 0241 007F                  		andi.w	#$7F,d1
00001970 3401                       		move.w	d1,d2
00001972 0C41 0040                  		cmpi.w	#$40,d1
00001976 6400                       		bcc.s	loc_1758
00001978 7006                       		moveq	#6,d0
0000197A E24A                       		lsr.w	#1,d2
0000197C                            
0000197C                            loc_1758:
0000197C 6100 0000                  		bsr.w	sub_188C
00001980 0242 000F                  		andi.w	#$F,d2
00001984 E849                       		lsr.w	#4,d1
00001986 D241                       		add.w	d1,d1
00001988 4EFB 1000                  		jmp	loc_17B4(pc,d1.w)
0000198C                            ; End of function EniDec
0000198C                            
0000198C                            ; ===========================================================================
0000198C                            
0000198C                            loc_1768:				; XREF: loc_17B4
0000198C 32CA                       		move.w	a2,(a1)+
0000198E 524A                       		addq.w	#1,a2
00001990 51CA FFFA                  		dbf	d2,loc_1768
00001994 60CC                       		bra.s	loc_173E
00001996                            ; ===========================================================================
00001996                            
00001996                            loc_1772:				; XREF: loc_17B4
00001996 32CC                       		move.w	a4,(a1)+
00001998 51CA FFFC                  		dbf	d2,loc_1772
0000199C 60C4                       		bra.s	loc_173E
0000199E                            ; ===========================================================================
0000199E                            
0000199E                            loc_177A:				; XREF: loc_17B4
0000199E 6100 0000                  		bsr.w	loc_17DC
000019A2                            
000019A2                            loc_177E:
000019A2 32C1                       		move.w	d1,(a1)+
000019A4 51CA FFFC                  		dbf	d2,loc_177E
000019A8 60B8                       		bra.s	loc_173E
000019AA                            ; ===========================================================================
000019AA                            
000019AA                            loc_1786:				; XREF: loc_17B4
000019AA 6100 0000                  		bsr.w	loc_17DC
000019AE                            
000019AE                            loc_178A:
000019AE 32C1                       		move.w	d1,(a1)+
000019B0 5241                       		addq.w	#1,d1
000019B2 51CA FFFA                  		dbf	d2,loc_178A
000019B6 60AA                       		bra.s	loc_173E
000019B8                            ; ===========================================================================
000019B8                            
000019B8                            loc_1794:				; XREF: loc_17B4
000019B8 6100 0000                  		bsr.w	loc_17DC
000019BC                            
000019BC                            loc_1798:
000019BC 32C1                       		move.w	d1,(a1)+
000019BE 5341                       		subq.w	#1,d1
000019C0 51CA FFFA                  		dbf	d2,loc_1798
000019C4 609C                       		bra.s	loc_173E
000019C6                            ; ===========================================================================
000019C6                            
000019C6                            loc_17A2:				; XREF: loc_17B4
000019C6 0C42 000F                  		cmpi.w	#$F,d2
000019CA 6700                       		beq.s	loc_17C4
000019CC                            
000019CC                            loc_17A8:
000019CC 6100 0000                  		bsr.w	loc_17DC
000019D0 32C1                       		move.w	d1,(a1)+
000019D2 51CA FFF8                  		dbf	d2,loc_17A8
000019D6 608A                       		bra.s	loc_173E
000019D8                            ; ===========================================================================
000019D8                            
000019D8                            loc_17B4:				; XREF: EniDec
000019D8 60B2                       		bra.s	loc_1768
000019DA                            ; ===========================================================================
000019DA 60B0                       		bra.s	loc_1768
000019DC                            ; ===========================================================================
000019DC 60B8                       		bra.s	loc_1772
000019DE                            ; ===========================================================================
000019DE 60B6                       		bra.s	loc_1772
000019E0                            ; ===========================================================================
000019E0 60BC                       		bra.s	loc_177A
000019E2                            ; ===========================================================================
000019E2 60C6                       		bra.s	loc_1786
000019E4                            ; ===========================================================================
000019E4 60D2                       		bra.s	loc_1794
000019E6                            ; ===========================================================================
000019E6 60DE                       		bra.s	loc_17A2
000019E8                            ; ===========================================================================
000019E8                            
000019E8                            loc_17C4:				; XREF: loc_17A2
000019E8 5348                       		subq.w	#1,a0
000019EA 0C46 0010                  		cmpi.w	#$10,d6
000019EE 6600                       		bne.s	loc_17CE
000019F0 5348                       		subq.w	#1,a0
000019F2                            
000019F2                            loc_17CE:
000019F2 3008                       		move.w	a0,d0
000019F4 E248                       		lsr.w	#1,d0
000019F6 6400                       		bcc.s	loc_17D6
000019F8 5248                       		addq.w	#1,a0
000019FA                            
000019FA                            loc_17D6:
000019FA 4CDF 3EFF                  		movem.l	(sp)+,d0-d7/a1-a5
000019FE 4E75                       		rts	
00001A00                            ; ===========================================================================
00001A00                            
00001A00                            loc_17DC:				; XREF: loc_17A2
00001A00 360B                       		move.w	a3,d3
00001A02 1204                       		move.b	d4,d1
00001A04 D201                       		add.b	d1,d1
00001A06 6400                       		bcc.s	loc_17EE
00001A08 5346                       		subq.w	#1,d6
00001A0A 0D05                       		btst	d6,d5
00001A0C 6700                       		beq.s	loc_17EE
00001A0E 0043 8000                  		ori.w	#-$8000,d3
00001A12                            
00001A12                            loc_17EE:
00001A12 D201                       		add.b	d1,d1
00001A14 6400                       		bcc.s	loc_17FC
00001A16 5346                       		subq.w	#1,d6
00001A18 0D05                       		btst	d6,d5
00001A1A 6700                       		beq.s	loc_17FC
00001A1C 0643 4000                  		addi.w	#$4000,d3
00001A20                            
00001A20                            loc_17FC:
00001A20 D201                       		add.b	d1,d1
00001A22 6400                       		bcc.s	loc_180A
00001A24 5346                       		subq.w	#1,d6
00001A26 0D05                       		btst	d6,d5
00001A28 6700                       		beq.s	loc_180A
00001A2A 0643 2000                  		addi.w	#$2000,d3
00001A2E                            
00001A2E                            loc_180A:
00001A2E D201                       		add.b	d1,d1
00001A30 6400                       		bcc.s	loc_1818
00001A32 5346                       		subq.w	#1,d6
00001A34 0D05                       		btst	d6,d5
00001A36 6700                       		beq.s	loc_1818
00001A38 0043 1000                  		ori.w	#$1000,d3
00001A3C                            
00001A3C                            loc_1818:
00001A3C D201                       		add.b	d1,d1
00001A3E 6400                       		bcc.s	loc_1826
00001A40 5346                       		subq.w	#1,d6
00001A42 0D05                       		btst	d6,d5
00001A44 6700                       		beq.s	loc_1826
00001A46 0043 0800                  		ori.w	#$800,d3
00001A4A                            
00001A4A                            loc_1826:
00001A4A 3205                       		move.w	d5,d1
00001A4C 3E06                       		move.w	d6,d7
00001A4E 9E4D                       		sub.w	a5,d7
00001A50 6400                       		bcc.s	loc_1856
00001A52 3C07                       		move.w	d7,d6
00001A54 0646 0010                  		addi.w	#$10,d6
00001A58 4447                       		neg.w	d7
00001A5A EF69                       		lsl.w	d7,d1
00001A5C 1A10                       		move.b	(a0),d5
00001A5E EF3D                       		rol.b	d7,d5
00001A60 DE47                       		add.w	d7,d7
00001A62 CA7B 7000                  		and.w	word_186C-2(pc,d7.w),d5
00001A66 D245                       		add.w	d5,d1
00001A68                            
00001A68                            loc_1844:				; XREF: loc_1868
00001A68 300D                       		move.w	a5,d0
00001A6A D040                       		add.w	d0,d0
00001A6C C27B 0000                  		and.w	word_186C-2(pc,d0.w),d1
00001A70 D243                       		add.w	d3,d1
00001A72 1A18                       		move.b	(a0)+,d5
00001A74 E14D                       		lsl.w	#8,d5
00001A76 1A18                       		move.b	(a0)+,d5
00001A78 4E75                       		rts	
00001A7A                            ; ===========================================================================
00001A7A                            
00001A7A                            loc_1856:				; XREF: loc_1826
00001A7A 6700                       		beq.s	loc_1868
00001A7C EE69                       		lsr.w	d7,d1
00001A7E 300D                       		move.w	a5,d0
00001A80 D040                       		add.w	d0,d0
00001A82 C27B 0000                  		and.w	word_186C-2(pc,d0.w),d1
00001A86 D243                       		add.w	d3,d1
00001A88 300D                       		move.w	a5,d0
00001A8A 6000                       		bra.s	sub_188C
00001A8C                            ; ===========================================================================
00001A8C                            
00001A8C                            loc_1868:				; XREF: loc_1856
00001A8C 7C10                       		moveq	#$10,d6
00001A8E                            
00001A8E                            loc_186A:
00001A8E 60D8                       		bra.s	loc_1844
00001A90                            ; ===========================================================================
00001A90 0001 0003 0007 000F 001F+  word_186C:	dc.w 1,	3, 7, $F, $1F, $3F, $7F, $FF, $1FF, $3FF, $7FF
00001AA6 0FFF 1FFF 3FFF 7FFF FFFF   		dc.w $FFF, $1FFF, $3FFF, $7FFF,	$FFFF	; XREF: loc_1856
00001AB0                            
00001AB0                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00001AB0                            
00001AB0                            
00001AB0                            sub_188C:				; XREF: EniDec
00001AB0 9C40                       		sub.w	d0,d6
00001AB2 0C46 0009                  		cmpi.w	#9,d6
00001AB6 6400                       		bcc.s	locret_189A
00001AB8 5046                       		addq.w	#8,d6
00001ABA E145                       		asl.w	#8,d5
00001ABC 1A18                       		move.b	(a0)+,d5
00001ABE                            
00001ABE                            locret_189A:
00001ABE 4E75                       		rts	
00001AC0                            ; End of function sub_188C
00001AC0                            
00001AC0                            ; ---------------------------------------------------------------------------
00001AC0                            ; Kosinski decompression algorithm
00001AC0                            ; ---------------------------------------------------------------------------
00001AC0                            
00001AC0                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00001AC0                            
00001AC0                            
00001AC0                            KosDec:
00001AC0                            
00001AC0 =FFFFFFFE                  var_2		= -2
00001AC0 =FFFFFFFF                  var_1		= -1
00001AC0                            
00001AC0 558F                       		subq.l	#2,sp
00001AC2 1F58 0001                  		move.b	(a0)+,2+var_1(sp)
00001AC6 1E98                       		move.b	(a0)+,(sp)
00001AC8 3A17                       		move.w	(sp),d5
00001ACA 780F                       		moveq	#$F,d4
00001ACC                            
00001ACC                            loc_18A8:
00001ACC E24D                       		lsr.w	#1,d5
00001ACE 40C6                       		move	sr,d6
00001AD0 51CC 0000                  		dbf	d4,loc_18BA
00001AD4 1F58 0001                  		move.b	(a0)+,2+var_1(sp)
00001AD8 1E98                       		move.b	(a0)+,(sp)
00001ADA 3A17                       		move.w	(sp),d5
00001ADC 780F                       		moveq	#$F,d4
00001ADE                            
00001ADE                            loc_18BA:
00001ADE 44C6                       		move	d6,ccr
00001AE0 6400                       		bcc.s	loc_18C2
00001AE2 12D8                       		move.b	(a0)+,(a1)+
00001AE4 60E6                       		bra.s	loc_18A8
00001AE6                            ; ===========================================================================
00001AE6                            
00001AE6                            loc_18C2:				; XREF: KosDec
00001AE6 7600                       		moveq	#0,d3
00001AE8 E24D                       		lsr.w	#1,d5
00001AEA 40C6                       		move	sr,d6
00001AEC 51CC 0000                  		dbf	d4,loc_18D6
00001AF0 1F58 0001                  		move.b	(a0)+,2+var_1(sp)
00001AF4 1E98                       		move.b	(a0)+,(sp)
00001AF6 3A17                       		move.w	(sp),d5
00001AF8 780F                       		moveq	#$F,d4
00001AFA                            
00001AFA                            loc_18D6:
00001AFA 44C6                       		move	d6,ccr
00001AFC 6500                       		bcs.s	loc_1906
00001AFE E24D                       		lsr.w	#1,d5
00001B00 51CC 0000                  		dbf	d4,loc_18EA
00001B04 1F58 0001                  		move.b	(a0)+,2+var_1(sp)
00001B08 1E98                       		move.b	(a0)+,(sp)
00001B0A 3A17                       		move.w	(sp),d5
00001B0C 780F                       		moveq	#$F,d4
00001B0E                            
00001B0E                            loc_18EA:
00001B0E E353                       		roxl.w	#1,d3
00001B10 E24D                       		lsr.w	#1,d5
00001B12 51CC 0000                  		dbf	d4,loc_18FC
00001B16 1F58 0001                  		move.b	(a0)+,2+var_1(sp)
00001B1A 1E98                       		move.b	(a0)+,(sp)
00001B1C 3A17                       		move.w	(sp),d5
00001B1E 780F                       		moveq	#$F,d4
00001B20                            
00001B20                            loc_18FC:
00001B20 E353                       		roxl.w	#1,d3
00001B22 5243                       		addq.w	#1,d3
00001B24 74FF                       		moveq	#-1,d2
00001B26 1418                       		move.b	(a0)+,d2
00001B28 6000                       		bra.s	loc_191C
00001B2A                            ; ===========================================================================
00001B2A                            
00001B2A                            loc_1906:				; XREF: loc_18C2
00001B2A 1018                       		move.b	(a0)+,d0
00001B2C 1218                       		move.b	(a0)+,d1
00001B2E 74FF                       		moveq	#-1,d2
00001B30 1401                       		move.b	d1,d2
00001B32 EB4A                       		lsl.w	#5,d2
00001B34 1400                       		move.b	d0,d2
00001B36 0241 0007                  		andi.w	#7,d1
00001B3A 6700                       		beq.s	loc_1928
00001B3C 1601                       		move.b	d1,d3
00001B3E 5243                       		addq.w	#1,d3
00001B40                            
00001B40                            loc_191C:
00001B40 1031 2000                  		move.b	(a1,d2.w),d0
00001B44 12C0                       		move.b	d0,(a1)+
00001B46 51CB FFF8                  		dbf	d3,loc_191C
00001B4A 6080                       		bra.s	loc_18A8
00001B4C                            ; ===========================================================================
00001B4C                            
00001B4C                            loc_1928:				; XREF: loc_1906
00001B4C 1218                       		move.b	(a0)+,d1
00001B4E 6700                       		beq.s	loc_1938
00001B50 0C01 0001                  		cmpi.b	#1,d1
00001B54 6700 FF76                  		beq.w	loc_18A8
00001B58 1601                       		move.b	d1,d3
00001B5A 60E4                       		bra.s	loc_191C
00001B5C                            ; ===========================================================================
00001B5C                            
00001B5C                            loc_1938:				; XREF: loc_1928
00001B5C 548F                       		addq.l	#2,sp
00001B5E 4E75                       		rts	
00001B60                            ; End of function KosDec
00001B60                            
00001B60                            ; ---------------------------------------------------------------------------
00001B60                            ; Pallet cycling routine loading subroutine
00001B60                            ; ---------------------------------------------------------------------------
00001B60                            
00001B60                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00001B60                            
00001B60                            
00001B60                            PalCycle_Load:				; XREF: Demo; Level_MainLoop; End_MainLoop
00001B60 7400                       		moveq	#0,d2
00001B62 7000                       		moveq	#0,d0
00001B64 1038 FE10                  		move.b	($FFFFFE10).w,d0 ; get level number
00001B68 D040                       		add.w	d0,d0		; multiply by 2
00001B6A 303B 0000                  		move.w	PalCycle(pc,d0.w),d0 ; load animated pallets offset index into d0
00001B6E 4EFB 0000                  		jmp	PalCycle(pc,d0.w) ; jump to PalCycle + offset index
00001B72                            ; End of function PalCycle_Load
00001B72                            
00001B72                            ; ===========================================================================
00001B72                            ; ---------------------------------------------------------------------------
00001B72                            ; Pallet cycling routines
00001B72                            ; ---------------------------------------------------------------------------
00001B72 0000                       PalCycle:	dc.w PalCycle_GHZ-PalCycle
00001B74 0000                       		dc.w PalCycle_LZ-PalCycle
00001B76 0000                       		dc.w PalCycle_MZ-PalCycle
00001B78 0000                       		dc.w PalCycle_SLZ-PalCycle
00001B7A 0000                       		dc.w PalCycle_SYZ-PalCycle
00001B7C 0000                       		dc.w PalCycle_SBZ-PalCycle
00001B7E 0000                       		dc.w PalCycle_GHZ-PalCycle
00001B80                            
00001B80                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00001B80                            
00001B80                            
00001B80                            PalCycle_Title:				; XREF: TitleScreen
00001B80 41F9 0000 0000             		lea	(Pal_TitleCyc).l,a0
00001B86 6000                       		bra.s	loc_196A
00001B88                            ; ===========================================================================
00001B88                            
00001B88                            PalCycle_GHZ:				; XREF: PalCycle
00001B88 41F9 0000 0000             		lea	(Pal_GHZCyc).l,a0
00001B8E                            
00001B8E                            loc_196A:				; XREF: PalCycle_Title
00001B8E 5378 F634                  		subq.w	#1,($FFFFF634).w
00001B92 6A00                       		bpl.s	locret_1990
00001B94 31FC 0005 F634             		move.w	#5,($FFFFF634).w
00001B9A 3038 F632                  		move.w	($FFFFF632).w,d0
00001B9E 5278 F632                  		addq.w	#1,($FFFFF632).w
00001BA2 0240 0003                  		andi.w	#3,d0
00001BA6 E748                       		lsl.w	#3,d0
00001BA8 43F8 FB50                  		lea	($FFFFFB50).w,a1
00001BAC 22F0 0000                  		move.l	(a0,d0.w),(a1)+
00001BB0 22B0 0004                  		move.l	4(a0,d0.w),(a1)
00001BB4                            
00001BB4                            locret_1990:
00001BB4 4E75                       		rts	
00001BB6                            ; End of function PalCycle_Title
00001BB6                            
00001BB6                            
00001BB6                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00001BB6                            
00001BB6                            
00001BB6                            PalCycle_LZ:				; XREF: PalCycle
00001BB6 5378 F634                  		subq.w	#1,($FFFFF634).w
00001BBA 6A00                       		bpl.s	loc_19D8
00001BBC 31FC 0002 F634             		move.w	#2,($FFFFF634).w
00001BC2 3038 F632                  		move.w	($FFFFF632).w,d0
00001BC6 5278 F632                  		addq.w	#1,($FFFFF632).w
00001BCA 0240 0003                  		andi.w	#3,d0
00001BCE E748                       		lsl.w	#3,d0
00001BD0 41F9 0000 0000             		lea	(Pal_LZCyc1).l,a0
00001BD6 0C38 0003 FE11             		cmpi.b	#3,($FFFFFE11).w ; check if level is SBZ3
00001BDC 6600                       		bne.s	loc_19C0
00001BDE 41F9 0000 0000             		lea	(Pal_SBZ3Cyc1).l,a0 ; load SBZ3	pallet instead
00001BE4                            
00001BE4                            loc_19C0:
00001BE4 43F8 FB56                  		lea	($FFFFFB56).w,a1
00001BE8 22F0 0000                  		move.l	(a0,d0.w),(a1)+
00001BEC 22B0 0004                  		move.l	4(a0,d0.w),(a1)
00001BF0 43F8 FAD6                  		lea	($FFFFFAD6).w,a1
00001BF4 22F0 0000                  		move.l	(a0,d0.w),(a1)+
00001BF8 22B0 0004                  		move.l	4(a0,d0.w),(a1)
00001BFC                            
00001BFC                            loc_19D8:
00001BFC 3038 FE04                  		move.w	($FFFFFE04).w,d0
00001C00 0240 0007                  		andi.w	#7,d0
00001C04 103B 0000                  		move.b	byte_1A3C(pc,d0.w),d0
00001C08 6700                       		beq.s	locret_1A3A
00001C0A 7201                       		moveq	#1,d1
00001C0C 4A38 F7C0                  		tst.b	($FFFFF7C0).w
00001C10 6700                       		beq.s	loc_19F0
00001C12 4441                       		neg.w	d1
00001C14                            
00001C14                            loc_19F0:
00001C14 3038 F650                  		move.w	($FFFFF650).w,d0
00001C18 0240 0003                  		andi.w	#3,d0
00001C1C D041                       		add.w	d1,d0
00001C1E 0C40 0003                  		cmpi.w	#3,d0
00001C22 6500                       		bcs.s	loc_1A0A
00001C24 3200                       		move.w	d0,d1
00001C26 7000                       		moveq	#0,d0
00001C28 4A41                       		tst.w	d1
00001C2A 6A00                       		bpl.s	loc_1A0A
00001C2C 7002                       		moveq	#2,d0
00001C2E                            
00001C2E                            loc_1A0A:
00001C2E 31C0 F650                  		move.w	d0,($FFFFF650).w
00001C32 D040                       		add.w	d0,d0
00001C34 3200                       		move.w	d0,d1
00001C36 D040                       		add.w	d0,d0
00001C38 D041                       		add.w	d1,d0
00001C3A 41F9 0000 0000             		lea	(Pal_LZCyc2).l,a0
00001C40 43F8 FB76                  		lea	($FFFFFB76).w,a1
00001C44 22F0 0000                  		move.l	(a0,d0.w),(a1)+
00001C48 32B0 0004                  		move.w	4(a0,d0.w),(a1)
00001C4C 41F9 0000 0000             		lea	(Pal_LZCyc3).l,a0
00001C52 43F8 FAF6                  		lea	($FFFFFAF6).w,a1
00001C56 22F0 0000                  		move.l	(a0,d0.w),(a1)+
00001C5A 32B0 0004                  		move.w	4(a0,d0.w),(a1)
00001C5E                            
00001C5E                            locret_1A3A:
00001C5E 4E75                       		rts	
00001C60                            ; End of function PalCycle_LZ
00001C60                            
00001C60                            ; ===========================================================================
00001C60 0100 0001 0000 0100        byte_1A3C:	dc.b 1,	0, 0, 1, 0, 0, 1, 0
00001C68                            ; ===========================================================================
00001C68                            
00001C68                            PalCycle_MZ:				; XREF: PalCycle
00001C68 4E75                       		rts	
00001C6A                            
00001C6A                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00001C6A                            
00001C6A                            
00001C6A                            PalCycle_SLZ:				; XREF: PalCycle
00001C6A 4E75                       		rts	
00001C6C                            ; End of function PalCycle_SLZ
00001C6C                            
00001C6C                            
00001C6C                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00001C6C                            
00001C6C                            
00001C6C                            PalCycle_SYZ:				; XREF: PalCycle
00001C6C 5378 F634                  		subq.w	#1,($FFFFF634).w
00001C70 6A00                       		bpl.s	locret_1AC6
00001C72 31FC 0005 F634             		move.w	#5,($FFFFF634).w
00001C78 3038 F632                  		move.w	($FFFFF632).w,d0
00001C7C 5278 F632                  		addq.w	#1,($FFFFF632).w
00001C80 0240 0003                  		andi.w	#3,d0
00001C84 E548                       		lsl.w	#2,d0
00001C86 3200                       		move.w	d0,d1
00001C88 D040                       		add.w	d0,d0
00001C8A 41F9 0000 0000             		lea	(Pal_SYZCyc1).l,a0
00001C90 43F8 FB6E                  		lea	($FFFFFB6E).w,a1
00001C94 22F0 0000                  		move.l	(a0,d0.w),(a1)+
00001C98 22B0 0004                  		move.l	4(a0,d0.w),(a1)
00001C9C 41F9 0000 0000             		lea	(Pal_SYZCyc2).l,a0
00001CA2 43F8 FB76                  		lea	($FFFFFB76).w,a1
00001CA6 32B0 1000                  		move.w	(a0,d1.w),(a1)
00001CAA 3370 1002 0004             		move.w	2(a0,d1.w),4(a1)
00001CB0                            
00001CB0                            locret_1AC6:
00001CB0 4E75                       		rts	
00001CB2                            ; End of function PalCycle_SYZ
00001CB2                            
00001CB2                            
00001CB2                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00001CB2                            
00001CB2                            
00001CB2                            PalCycle_SBZ:				; XREF: PalCycle
00001CB2 45F9 0000 0000             		lea	(Pal_SBZCycList).l,a2
00001CB8 4A38 FE11                  		tst.b	($FFFFFE11).w
00001CBC 6700                       		beq.s	loc_1ADA
00001CBE 45F9 0000 0000             		lea	(Pal_SBZCycList2).l,a2
00001CC4                            
00001CC4                            loc_1ADA:
00001CC4 43F8 F650                  		lea	($FFFFF650).w,a1
00001CC8 321A                       		move.w	(a2)+,d1
00001CCA                            
00001CCA                            loc_1AE0:
00001CCA 5311                       		subq.b	#1,(a1)
00001CCC 6B00                       		bmi.s	loc_1AEA
00001CCE 5489                       		addq.l	#2,a1
00001CD0 5C8A                       		addq.l	#6,a2
00001CD2 6000                       		bra.s	loc_1B06
00001CD4                            ; ===========================================================================
00001CD4                            
00001CD4                            loc_1AEA:				; XREF: PalCycle_SBZ
00001CD4 12DA                       		move.b	(a2)+,(a1)+
00001CD6 1011                       		move.b	(a1),d0
00001CD8 5200                       		addq.b	#1,d0
00001CDA B01A                       		cmp.b	(a2)+,d0
00001CDC 6500                       		bcs.s	loc_1AF6
00001CDE 7000                       		moveq	#0,d0
00001CE0                            
00001CE0                            loc_1AF6:
00001CE0 12C0                       		move.b	d0,(a1)+
00001CE2 0240 000F                  		andi.w	#$F,d0
00001CE6 D040                       		add.w	d0,d0
00001CE8 305A                       		movea.w	(a2)+,a0
00001CEA 365A                       		movea.w	(a2)+,a3
00001CEC 36B0 0000                  		move.w	(a0,d0.w),(a3)
00001CF0                            
00001CF0                            loc_1B06:				; XREF: PalCycle_SBZ
00001CF0 51C9 FFD8                  		dbf	d1,loc_1AE0
00001CF4 5378 F634                  		subq.w	#1,($FFFFF634).w
00001CF8 6A00                       		bpl.s	locret_1B64
00001CFA 41F9 0000 0000             		lea	(Pal_SBZCyc4).l,a0
00001D00 31FC 0001 F634             		move.w	#1,($FFFFF634).w
00001D06 4A38 FE11                  		tst.b	($FFFFFE11).w
00001D0A 6700                       		beq.s	loc_1B2E
00001D0C 41F9 0000 0000             		lea	(Pal_SBZCyc10).l,a0
00001D12 31FC 0000 F634             		move.w	#0,($FFFFF634).w
00001D18                            
00001D18                            loc_1B2E:
00001D18 72FF                       		moveq	#-1,d1
00001D1A 4A38 F7C0                  		tst.b	($FFFFF7C0).w
00001D1E 6700                       		beq.s	loc_1B38
00001D20 4441                       		neg.w	d1
00001D22                            
00001D22                            loc_1B38:
00001D22 3038 F632                  		move.w	($FFFFF632).w,d0
00001D26 0240 0003                  		andi.w	#3,d0
00001D2A D041                       		add.w	d1,d0
00001D2C 0C40 0003                  		cmpi.w	#3,d0
00001D30 6500                       		bcs.s	loc_1B52
00001D32 3200                       		move.w	d0,d1
00001D34 7000                       		moveq	#0,d0
00001D36 4A41                       		tst.w	d1
00001D38 6A00                       		bpl.s	loc_1B52
00001D3A 7002                       		moveq	#2,d0
00001D3C                            
00001D3C                            loc_1B52:
00001D3C 31C0 F632                  		move.w	d0,($FFFFF632).w
00001D40 D040                       		add.w	d0,d0
00001D42 43F8 FB58                  		lea	($FFFFFB58).w,a1
00001D46 22F0 0000                  		move.l	(a0,d0.w),(a1)+
00001D4A 32B0 0004                  		move.w	4(a0,d0.w),(a1)
00001D4E                            
00001D4E                            locret_1B64:
00001D4E 4E75                       		rts	
00001D50                            ; End of function PalCycle_SBZ
00001D50                            
00001D50                            ; ===========================================================================
00001D50                            Pal_TitleCyc:	incbin	pallet\c_title.bin
00001D70                            Pal_GHZCyc:	incbin	pallet\c_ghz.bin
00001D90                            Pal_LZCyc1:	incbin	pallet\c_lz_wat.bin	; waterfalls pallet
00001DB0                            Pal_LZCyc2:	incbin	pallet\c_lz_bel.bin	; conveyor belt pallet
00001DC2                            Pal_LZCyc3:	incbin	pallet\c_lz_buw.bin	; conveyor belt (underwater) pallet
00001DD4                            Pal_SBZ3Cyc1:	incbin	pallet\c_sbz3_w.bin	; waterfalls pallet
00001E3C                            Pal_SLZCyc:	incbin	pallet\c_slz.bin
00001E60                            Pal_SYZCyc1:	incbin	pallet\c_syz_1.bin
00001E80                            Pal_SYZCyc2:	incbin	pallet\c_syz_2.bin
00001E90                            
00001E90                            Pal_SBZCycList:
00001E90                            	include "_inc\SBZ pallet script 1.asm"
00001E90                            ; ---------------------------------------------------------------------------
00001E90                            ; Scrap Brain Zone 1 pallet cycling script
00001E90                            ; ---------------------------------------------------------------------------
00001E90 0008                       	dc.w 8			; number of entries - 1
00001E92 0708                       	dc.b 7,	8		; duration in frames, number of	colours
00001E94 0000                       	dc.w Pal_SBZCyc1	; pallet pointer
00001E96 FB50                       	dc.w $FB50		; RAM address
00001E98 0D08                       	dc.b $D, 8
00001E9A 0000                       	dc.w Pal_SBZCyc2
00001E9C FB52                       	dc.w $FB52
00001E9E 0E08                       	dc.b $E, 8
00001EA0 0000                       	dc.w Pal_SBZCyc3
00001EA2 FB6E                       	dc.w $FB6E
00001EA4 0B08                       	dc.b $B, 8
00001EA6 0000                       	dc.w Pal_SBZCyc5
00001EA8 FB70                       	dc.w $FB70
00001EAA 0708                       	dc.b 7,	8
00001EAC 0000                       	dc.w Pal_SBZCyc6
00001EAE FB72                       	dc.w $FB72
00001EB0 1C10                       	dc.b $1C, $10
00001EB2 0000                       	dc.w Pal_SBZCyc7
00001EB4 FB7E                       	dc.w $FB7E
00001EB6 0303                       	dc.b 3,	3
00001EB8 0000                       	dc.w Pal_SBZCyc8
00001EBA FB78                       	dc.w $FB78
00001EBC 0303                       	dc.b 3,	3
00001EBE 0000                       	dc.w Pal_SBZCyc8+2
00001EC0 FB7A                       	dc.w $FB7A
00001EC2 0303                       	dc.b 3,	3
00001EC4 0000                       	dc.w Pal_SBZCyc8+4
00001EC6 FB7C                       	dc.w $FB7C
00001EC8                            	even
00001EC8                            	even
00001EC8                            
00001EC8                            Pal_SBZCycList2:
00001EC8                            	include "_inc\SBZ pallet script 2.asm"
00001EC8                            ; ---------------------------------------------------------------------------
00001EC8                            ; Scrap Brain Zone 2 pallet cycling script
00001EC8                            ; ---------------------------------------------------------------------------
00001EC8 0006                       	dc.w 6
00001ECA 0708                       	dc.b 7,	8
00001ECC 0000                       	dc.w Pal_SBZCyc1
00001ECE FB50                       	dc.w $FB50
00001ED0 0D08                       	dc.b $D, 8
00001ED2 0000                       	dc.w Pal_SBZCyc2
00001ED4 FB52                       	dc.w $FB52
00001ED6 0908                       	dc.b 9,	8
00001ED8 0000                       	dc.w Pal_SBZCyc9
00001EDA FB70                       	dc.w $FB70
00001EDC 0708                       	dc.b 7,	8
00001EDE 0000                       	dc.w Pal_SBZCyc6
00001EE0 FB72                       	dc.w $FB72
00001EE2 0303                       	dc.b 3,	3
00001EE4 0000                       	dc.w Pal_SBZCyc8
00001EE6 FB78                       	dc.w $FB78
00001EE8 0303                       	dc.b 3,	3
00001EEA 0000                       	dc.w Pal_SBZCyc8+2
00001EEC FB7A                       	dc.w $FB7A
00001EEE 0303                       	dc.b 3,	3
00001EF0 0000                       	dc.w Pal_SBZCyc8+4
00001EF2 FB7C                       	dc.w $FB7C
00001EF4                            	even
00001EF4                            	even
00001EF4                            
00001EF4                            Pal_SBZCyc1:	incbin	pallet\c_sbz_1.bin
00001F04                            Pal_SBZCyc2:	incbin	pallet\c_sbz_2.bin
00001F14                            Pal_SBZCyc3:	incbin	pallet\c_sbz_3.bin
00001F24                            Pal_SBZCyc4:	incbin	pallet\c_sbz_4.bin
00001F30                            Pal_SBZCyc5:	incbin	pallet\c_sbz_5.bin
00001F40                            Pal_SBZCyc6:	incbin	pallet\c_sbz_6.bin
00001F50                            Pal_SBZCyc7:	incbin	pallet\c_sbz_7.bin
00001F70                            Pal_SBZCyc8:	incbin	pallet\c_sbz_8.bin
00001F7A                            Pal_SBZCyc9:	incbin	pallet\c_sbz_9.bin
00001F8A                            Pal_SBZCyc10:	incbin	pallet\c_sbz_10.bin
00001F96                            ; ---------------------------------------------------------------------------
00001F96                            ; Subroutine to	fade out and fade in
00001F96                            ; ---------------------------------------------------------------------------
00001F96                            
00001F96                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00001F96                            
00001F96                            
00001F96                            Pal_FadeTo:
00001F96 31FC 003F F626             		move.w	#$3F,($FFFFF626).w
00001F9C                            
00001F9C                            Pal_FadeTo2:
00001F9C 7000                       		moveq	#0,d0
00001F9E 41F8 FB00                  		lea	($FFFFFB00).w,a0
00001FA2 1038 F626                  		move.b	($FFFFF626).w,d0
00001FA6 D0C0                       		adda.w	d0,a0
00001FA8 7200                       		moveq	#0,d1
00001FAA 1038 F627                  		move.b	($FFFFF627).w,d0
00001FAE                            
00001FAE                            Pal_ToBlack:
00001FAE 30C1                       		move.w	d1,(a0)+
00001FB0 51C8 FFFC                  		dbf	d0,Pal_ToBlack	; fill pallet with $000	(black)
00001FB4                            
00001FB4 383C 0015                  		move.w	#$15,d4
00001FB8                            
00001FB8                            loc_1DCE:
00001FB8 11FC 0012 F62A             		move.b	#$12,($FFFFF62A).w
00001FBE 6100 0000                  		bsr.w	DelayProgram
00001FC2 6100                       		bsr.s	Pal_FadeIn
00001FC4 6100 F84A                  		bsr.w	RunPLC_RAM
00001FC8 51CC FFEE                  		dbf	d4,loc_1DCE
00001FCC 4E75                       		rts	
00001FCE                            ; End of function Pal_FadeTo
00001FCE                            
00001FCE                            ; ---------------------------------------------------------------------------
00001FCE                            ; Pallet fade-in subroutine
00001FCE                            ; ---------------------------------------------------------------------------
00001FCE                            
00001FCE                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00001FCE                            
00001FCE                            
00001FCE                            Pal_FadeIn:				; XREF: Pal_FadeTo
00001FCE 7000                       		moveq	#0,d0
00001FD0 41F8 FB00                  		lea	($FFFFFB00).w,a0
00001FD4 43F8 FB80                  		lea	($FFFFFB80).w,a1
00001FD8 1038 F626                  		move.b	($FFFFF626).w,d0
00001FDC D0C0                       		adda.w	d0,a0
00001FDE D2C0                       		adda.w	d0,a1
00001FE0 1038 F627                  		move.b	($FFFFF627).w,d0
00001FE4                            
00001FE4                            loc_1DFA:
00001FE4 6100                       		bsr.s	Pal_AddColor
00001FE6 51C8 FFFC                  		dbf	d0,loc_1DFA
00001FEA 0C38 0001 FE10             		cmpi.b	#1,($FFFFFE10).w
00001FF0 6600                       		bne.s	locret_1E24
00001FF2 7000                       		moveq	#0,d0
00001FF4 41F8 FA80                  		lea	($FFFFFA80).w,a0
00001FF8 43F8 FA00                  		lea	($FFFFFA00).w,a1
00001FFC 1038 F626                  		move.b	($FFFFF626).w,d0
00002000 D0C0                       		adda.w	d0,a0
00002002 D2C0                       		adda.w	d0,a1
00002004 1038 F627                  		move.b	($FFFFF627).w,d0
00002008                            
00002008                            loc_1E1E:
00002008 6100                       		bsr.s	Pal_AddColor
0000200A 51C8 FFFC                  		dbf	d0,loc_1E1E
0000200E                            
0000200E                            locret_1E24:
0000200E 4E75                       		rts	
00002010                            ; End of function Pal_FadeIn
00002010                            
00002010                            
00002010                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00002010                            
00002010                            
00002010                            Pal_AddColor:				; XREF: Pal_FadeIn
00002010 3419                       		move.w	(a1)+,d2
00002012 3610                       		move.w	(a0),d3
00002014 B642                       		cmp.w	d2,d3
00002016 6700                       		beq.s	loc_1E4E
00002018 3203                       		move.w	d3,d1
0000201A 0641 0200                  		addi.w	#$200,d1	; increase blue	value
0000201E B242                       		cmp.w	d2,d1		; has blue reached threshold level?
00002020 6200                       		bhi.s	Pal_AddGreen	; if yes, branch
00002022 30C1                       		move.w	d1,(a0)+	; update pallet
00002024 4E75                       		rts	
00002026                            ; ===========================================================================
00002026                            
00002026                            Pal_AddGreen:				; XREF: Pal_AddColor
00002026 3203                       		move.w	d3,d1
00002028 0641 0020                  		addi.w	#$20,d1		; increase green value
0000202C B242                       		cmp.w	d2,d1
0000202E 6200                       		bhi.s	Pal_AddRed
00002030 30C1                       		move.w	d1,(a0)+	; update pallet
00002032 4E75                       		rts	
00002034                            ; ===========================================================================
00002034                            
00002034                            Pal_AddRed:				; XREF: Pal_AddGreen
00002034 5458                       		addq.w	#2,(a0)+	; increase red value
00002036 4E75                       		rts	
00002038                            ; ===========================================================================
00002038                            
00002038                            loc_1E4E:				; XREF: Pal_AddColor
00002038 5448                       		addq.w	#2,a0
0000203A 4E75                       		rts	
0000203C                            ; End of function Pal_AddColor
0000203C                            
0000203C                            
0000203C                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000203C                            
0000203C                            
0000203C                            Pal_FadeFrom:
0000203C 31FC 003F F626             		move.w	#$3F,($FFFFF626).w
00002042 383C 0015                  		move.w	#$15,d4
00002046                            
00002046                            loc_1E5C:
00002046 11FC 0012 F62A             		move.b	#$12,($FFFFF62A).w
0000204C 6100 0000                  		bsr.w	DelayProgram
00002050 6100                       		bsr.s	Pal_FadeOut
00002052 6100 F7BC                  		bsr.w	RunPLC_RAM
00002056 51CC FFEE                  		dbf	d4,loc_1E5C
0000205A 4E75                       		rts	
0000205C                            ; End of function Pal_FadeFrom
0000205C                            
0000205C                            ; ---------------------------------------------------------------------------
0000205C                            ; Pallet fade-out subroutine
0000205C                            ; ---------------------------------------------------------------------------
0000205C                            
0000205C                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000205C                            
0000205C                            
0000205C                            Pal_FadeOut:				; XREF: Pal_FadeFrom
0000205C 7000                       		moveq	#0,d0
0000205E 41F8 FB00                  		lea	($FFFFFB00).w,a0
00002062 1038 F626                  		move.b	($FFFFF626).w,d0
00002066 D0C0                       		adda.w	d0,a0
00002068 1038 F627                  		move.b	($FFFFF627).w,d0
0000206C                            
0000206C                            loc_1E82:
0000206C 6100                       		bsr.s	Pal_DecColor
0000206E 51C8 FFFC                  		dbf	d0,loc_1E82
00002072                            
00002072 7000                       		moveq	#0,d0
00002074 41F8 FA80                  		lea	($FFFFFA80).w,a0
00002078 1038 F626                  		move.b	($FFFFF626).w,d0
0000207C D0C0                       		adda.w	d0,a0
0000207E 1038 F627                  		move.b	($FFFFF627).w,d0
00002082                            
00002082                            loc_1E98:
00002082 6100                       		bsr.s	Pal_DecColor
00002084 51C8 FFFC                  		dbf	d0,loc_1E98
00002088 4E75                       		rts	
0000208A                            ; End of function Pal_FadeOut
0000208A                            
0000208A                            
0000208A                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000208A                            
0000208A                            
0000208A                            Pal_DecColor:				; XREF: Pal_FadeOut
0000208A 3410                       		move.w	(a0),d2
0000208C 6700                       		beq.s	loc_1ECC
0000208E 3202                       		move.w	d2,d1
00002090 0241 000E                  		andi.w	#$E,d1
00002094 6700                       		beq.s	Pal_DecGreen
00002096 5558                       		subq.w	#2,(a0)+	; decrease red value
00002098 4E75                       		rts	
0000209A                            ; ===========================================================================
0000209A                            
0000209A                            Pal_DecGreen:				; XREF: Pal_DecColor
0000209A 3202                       		move.w	d2,d1
0000209C 0241 00E0                  		andi.w	#$E0,d1
000020A0 6700                       		beq.s	Pal_DecBlue
000020A2 0458 0020                  		subi.w	#$20,(a0)+	; decrease green value
000020A6 4E75                       		rts	
000020A8                            ; ===========================================================================
000020A8                            
000020A8                            Pal_DecBlue:				; XREF: Pal_DecGreen
000020A8 3202                       		move.w	d2,d1
000020AA 0241 0E00                  		andi.w	#$E00,d1
000020AE 6700                       		beq.s	loc_1ECC
000020B0 0458 0200                  		subi.w	#$200,(a0)+	; decrease blue	value
000020B4 4E75                       		rts	
000020B6                            ; ===========================================================================
000020B6                            
000020B6                            loc_1ECC:				; XREF: Pal_DecColor
000020B6 5448                       		addq.w	#2,a0
000020B8 4E75                       		rts	
000020BA                            ; End of function Pal_DecColor
000020BA                            
000020BA                            ; ---------------------------------------------------------------------------
000020BA                            ; Subroutine to	fill the pallet	with white (special stage)
000020BA                            ; ---------------------------------------------------------------------------
000020BA                            
000020BA                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000020BA                            
000020BA                            
000020BA                            Pal_MakeWhite:				; XREF: SpecialStage
000020BA 31FC 003F F626             		move.w	#$3F,($FFFFF626).w
000020C0 7000                       		moveq	#0,d0
000020C2 41F8 FB00                  		lea	($FFFFFB00).w,a0
000020C6 1038 F626                  		move.b	($FFFFF626).w,d0
000020CA D0C0                       		adda.w	d0,a0
000020CC 323C 0EEE                  		move.w	#$EEE,d1
000020D0 1038 F627                  		move.b	($FFFFF627).w,d0
000020D4                            
000020D4                            PalWhite_Loop:
000020D4 30C1                       		move.w	d1,(a0)+
000020D6 51C8 FFFC                  		dbf	d0,PalWhite_Loop
000020DA 383C 0015                  		move.w	#$15,d4
000020DE                            
000020DE                            loc_1EF4:
000020DE 11FC 0012 F62A             		move.b	#$12,($FFFFF62A).w
000020E4 6100 0000                  		bsr.w	DelayProgram
000020E8 6100                       		bsr.s	Pal_WhiteToBlack
000020EA 6100 F724                  		bsr.w	RunPLC_RAM
000020EE 51CC FFEE                  		dbf	d4,loc_1EF4
000020F2 4E75                       		rts	
000020F4                            ; End of function Pal_MakeWhite
000020F4                            
000020F4                            
000020F4                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000020F4                            
000020F4                            
000020F4                            Pal_WhiteToBlack:			; XREF: Pal_MakeWhite
000020F4 7000                       		moveq	#0,d0
000020F6 41F8 FB00                  		lea	($FFFFFB00).w,a0
000020FA 43F8 FB80                  		lea	($FFFFFB80).w,a1
000020FE 1038 F626                  		move.b	($FFFFF626).w,d0
00002102 D0C0                       		adda.w	d0,a0
00002104 D2C0                       		adda.w	d0,a1
00002106 1038 F627                  		move.b	($FFFFF627).w,d0
0000210A                            
0000210A                            loc_1F20:
0000210A 6100                       		bsr.s	Pal_DecColor2
0000210C 51C8 FFFC                  		dbf	d0,loc_1F20
00002110                            
00002110 0C38 0001 FE10             		cmpi.b	#1,($FFFFFE10).w
00002116 6600                       		bne.s	locret_1F4A
00002118 7000                       		moveq	#0,d0
0000211A 41F8 FA80                  		lea	($FFFFFA80).w,a0
0000211E 43F8 FA00                  		lea	($FFFFFA00).w,a1
00002122 1038 F626                  		move.b	($FFFFF626).w,d0
00002126 D0C0                       		adda.w	d0,a0
00002128 D2C0                       		adda.w	d0,a1
0000212A 1038 F627                  		move.b	($FFFFF627).w,d0
0000212E                            
0000212E                            loc_1F44:
0000212E 6100                       		bsr.s	Pal_DecColor2
00002130 51C8 FFFC                  		dbf	d0,loc_1F44
00002134                            
00002134                            locret_1F4A:
00002134 4E75                       		rts	
00002136                            ; End of function Pal_WhiteToBlack
00002136                            
00002136                            
00002136                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00002136                            
00002136                            
00002136                            Pal_DecColor2:				; XREF: Pal_WhiteToBlack
00002136 3419                       		move.w	(a1)+,d2
00002138 3610                       		move.w	(a0),d3
0000213A B642                       		cmp.w	d2,d3
0000213C 6700                       		beq.s	loc_1F78
0000213E 3203                       		move.w	d3,d1
00002140 0441 0200                  		subi.w	#$200,d1	; decrease blue	value
00002144 6500                       		bcs.s	loc_1F64
00002146 B242                       		cmp.w	d2,d1
00002148 6500                       		bcs.s	loc_1F64
0000214A 30C1                       		move.w	d1,(a0)+
0000214C 4E75                       		rts	
0000214E                            ; ===========================================================================
0000214E                            
0000214E                            loc_1F64:				; XREF: Pal_DecColor2
0000214E 3203                       		move.w	d3,d1
00002150 0441 0020                  		subi.w	#$20,d1		; decrease green value
00002154 6500                       		bcs.s	loc_1F74
00002156 B242                       		cmp.w	d2,d1
00002158 6500                       		bcs.s	loc_1F74
0000215A 30C1                       		move.w	d1,(a0)+
0000215C 4E75                       		rts	
0000215E                            ; ===========================================================================
0000215E                            
0000215E                            loc_1F74:				; XREF: loc_1F64
0000215E 5558                       		subq.w	#2,(a0)+	; decrease red value
00002160 4E75                       		rts	
00002162                            ; ===========================================================================
00002162                            
00002162                            loc_1F78:				; XREF: Pal_DecColor2
00002162 5448                       		addq.w	#2,a0
00002164 4E75                       		rts	
00002166                            ; End of function Pal_DecColor2
00002166                            
00002166                            ; ---------------------------------------------------------------------------
00002166                            ; Subroutine to	make a white flash when	you enter a special stage
00002166                            ; ---------------------------------------------------------------------------
00002166                            
00002166                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00002166                            
00002166                            
00002166                            Pal_MakeFlash:				; XREF: SpecialStage
00002166 31FC 003F F626             		move.w	#$3F,($FFFFF626).w
0000216C 383C 0015                  		move.w	#$15,d4
00002170                            
00002170                            loc_1F86:
00002170 11FC 0012 F62A             		move.b	#$12,($FFFFF62A).w
00002176 6100 0000                  		bsr.w	DelayProgram
0000217A 6100                       		bsr.s	Pal_ToWhite
0000217C 6100 F692                  		bsr.w	RunPLC_RAM
00002180 51CC FFEE                  		dbf	d4,loc_1F86
00002184 4E75                       		rts	
00002186                            ; End of function Pal_MakeFlash
00002186                            
00002186                            
00002186                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00002186                            
00002186                            
00002186                            Pal_ToWhite:				; XREF: Pal_MakeFlash
00002186 7000                       		moveq	#0,d0
00002188 41F8 FB00                  		lea	($FFFFFB00).w,a0
0000218C 1038 F626                  		move.b	($FFFFF626).w,d0
00002190 D0C0                       		adda.w	d0,a0
00002192 1038 F627                  		move.b	($FFFFF627).w,d0
00002196                            
00002196                            loc_1FAC:
00002196 6100                       		bsr.s	Pal_AddColor2
00002198 51C8 FFFC                  		dbf	d0,loc_1FAC
0000219C 7000                       		moveq	#0,d0
0000219E 41F8 FA80                  		lea	($FFFFFA80).w,a0
000021A2 1038 F626                  		move.b	($FFFFF626).w,d0
000021A6 D0C0                       		adda.w	d0,a0
000021A8 1038 F627                  		move.b	($FFFFF627).w,d0
000021AC                            
000021AC                            loc_1FC2:
000021AC 6100                       		bsr.s	Pal_AddColor2
000021AE 51C8 FFFC                  		dbf	d0,loc_1FC2
000021B2 4E75                       		rts	
000021B4                            ; End of function Pal_ToWhite
000021B4                            
000021B4                            
000021B4                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000021B4                            
000021B4                            
000021B4                            Pal_AddColor2:				; XREF: Pal_ToWhite
000021B4 3410                       		move.w	(a0),d2
000021B6 0C42 0EEE                  		cmpi.w	#$EEE,d2
000021BA 6700                       		beq.s	loc_2006
000021BC 3202                       		move.w	d2,d1
000021BE 0241 000E                  		andi.w	#$E,d1
000021C2 0C41 000E                  		cmpi.w	#$E,d1
000021C6 6700                       		beq.s	loc_1FE2
000021C8 5458                       		addq.w	#2,(a0)+	; increase red value
000021CA 4E75                       		rts	
000021CC                            ; ===========================================================================
000021CC                            
000021CC                            loc_1FE2:				; XREF: Pal_AddColor2
000021CC 3202                       		move.w	d2,d1
000021CE 0241 00E0                  		andi.w	#$E0,d1
000021D2 0C41 00E0                  		cmpi.w	#$E0,d1
000021D6 6700                       		beq.s	loc_1FF4
000021D8 0658 0020                  		addi.w	#$20,(a0)+	; increase green value
000021DC 4E75                       		rts	
000021DE                            ; ===========================================================================
000021DE                            
000021DE                            loc_1FF4:				; XREF: loc_1FE2
000021DE 3202                       		move.w	d2,d1
000021E0 0241 0E00                  		andi.w	#$E00,d1
000021E4 0C41 0E00                  		cmpi.w	#$E00,d1
000021E8 6700                       		beq.s	loc_2006
000021EA 0658 0200                  		addi.w	#$200,(a0)+	; increase blue	value
000021EE 4E75                       		rts	
000021F0                            ; ===========================================================================
000021F0                            
000021F0                            loc_2006:				; XREF: Pal_AddColor2
000021F0 5448                       		addq.w	#2,a0
000021F2 4E75                       		rts	
000021F4                            ; End of function Pal_AddColor2
000021F4                            
000021F4                            ; ---------------------------------------------------------------------------
000021F4                            ; Pallet cycling routine - Sega	logo
000021F4                            ; ---------------------------------------------------------------------------
000021F4                            
000021F4                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000021F4                            
000021F4                            
000021F4                            PalCycle_Sega:				; XREF: SegaScreen
000021F4 4A38 F635                  		tst.b	($FFFFF635).w
000021F8 6600                       		bne.s	loc_206A
000021FA 43F8 FB20                  		lea	($FFFFFB20).w,a1
000021FE 41F9 0000 0000             		lea	(Pal_Sega1).l,a0
00002204 7205                       		moveq	#5,d1
00002206 3038 F632                  		move.w	($FFFFF632).w,d0
0000220A                            
0000220A                            loc_2020:
0000220A 6A00                       		bpl.s	loc_202A
0000220C 5448                       		addq.w	#2,a0
0000220E 5341                       		subq.w	#1,d1
00002210 5440                       		addq.w	#2,d0
00002212 60F6                       		bra.s	loc_2020
00002214                            ; ===========================================================================
00002214                            
00002214                            loc_202A:				; XREF: PalCycle_Sega
00002214 3400                       		move.w	d0,d2
00002216 0242 001E                  		andi.w	#$1E,d2
0000221A 6600                       		bne.s	loc_2034
0000221C 5440                       		addq.w	#2,d0
0000221E                            
0000221E                            loc_2034:
0000221E 0C40 0060                  		cmpi.w	#$60,d0
00002222 6400                       		bcc.s	loc_203E
00002224 3398 0000                  		move.w	(a0)+,(a1,d0.w)
00002228                            
00002228                            loc_203E:
00002228 5440                       		addq.w	#2,d0
0000222A 51C9 FFE8                  		dbf	d1,loc_202A
0000222E 3038 F632                  		move.w	($FFFFF632).w,d0
00002232 5440                       		addq.w	#2,d0
00002234 3400                       		move.w	d0,d2
00002236 0242 001E                  		andi.w	#$1E,d2
0000223A 6600                       		bne.s	loc_2054
0000223C 5440                       		addq.w	#2,d0
0000223E                            
0000223E                            loc_2054:
0000223E 0C40 0064                  		cmpi.w	#$64,d0
00002242 6D00                       		blt.s	loc_2062
00002244 31FC 0401 F634             		move.w	#$401,($FFFFF634).w
0000224A 70F4                       		moveq	#-$C,d0
0000224C                            
0000224C                            loc_2062:
0000224C 31C0 F632                  		move.w	d0,($FFFFF632).w
00002250 7001                       		moveq	#1,d0
00002252 4E75                       		rts	
00002254                            ; ===========================================================================
00002254                            
00002254                            loc_206A:				; XREF: loc_202A
00002254 5338 F634                  		subq.b	#1,($FFFFF634).w
00002258 6A00                       		bpl.s	loc_20BC
0000225A 11FC 0004 F634             		move.b	#4,($FFFFF634).w
00002260 3038 F632                  		move.w	($FFFFF632).w,d0
00002264 0640 000C                  		addi.w	#$C,d0
00002268 0C40 0030                  		cmpi.w	#$30,d0
0000226C 6500                       		bcs.s	loc_2088
0000226E 7000                       		moveq	#0,d0
00002270 4E75                       		rts	
00002272                            ; ===========================================================================
00002272                            
00002272                            loc_2088:				; XREF: loc_206A
00002272 31C0 F632                  		move.w	d0,($FFFFF632).w
00002276 41F9 0000 0000             		lea	(Pal_Sega2).l,a0
0000227C 41F0 0000                  		lea	(a0,d0.w),a0
00002280 43F8 FB04                  		lea	($FFFFFB04).w,a1
00002284 22D8                       		move.l	(a0)+,(a1)+
00002286 22D8                       		move.l	(a0)+,(a1)+
00002288 3298                       		move.w	(a0)+,(a1)
0000228A 43F8 FB20                  		lea	($FFFFFB20).w,a1
0000228E 7000                       		moveq	#0,d0
00002290 722C                       		moveq	#$2C,d1
00002292                            
00002292                            loc_20A8:
00002292 3400                       		move.w	d0,d2
00002294 0242 001E                  		andi.w	#$1E,d2
00002298 6600                       		bne.s	loc_20B2
0000229A 5440                       		addq.w	#2,d0
0000229C                            
0000229C                            loc_20B2:
0000229C 3390 0000                  		move.w	(a0),(a1,d0.w)
000022A0 5440                       		addq.w	#2,d0
000022A2 51C9 FFEE                  		dbf	d1,loc_20A8
000022A6                            
000022A6                            loc_20BC:
000022A6 7001                       		moveq	#1,d0
000022A8 4E75                       		rts	
000022AA                            ; End of function PalCycle_Sega
000022AA                            
000022AA                            ; ===========================================================================
000022AA                            
000022AA                            Pal_Sega1:	incbin	pallet\sega1.bin
000022B6                            Pal_Sega2:	incbin	pallet\sega2.bin
000022E6                            
000022E6                            ; ---------------------------------------------------------------------------
000022E6                            ; Subroutines to load pallets
000022E6                            ; ---------------------------------------------------------------------------
000022E6                            
000022E6                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000022E6                            
000022E6                            
000022E6                            PalLoad1:
000022E6 43F9 0000 0000             		lea	(PalPointers).l,a1
000022EC E748                       		lsl.w	#3,d0
000022EE D2C0                       		adda.w	d0,a1
000022F0 2459                       		movea.l	(a1)+,a2
000022F2 3659                       		movea.w	(a1)+,a3
000022F4 D6FC 0080                  		adda.w	#$80,a3
000022F8 3E19                       		move.w	(a1)+,d7
000022FA                            
000022FA                            loc_2110:
000022FA 26DA                       		move.l	(a2)+,(a3)+
000022FC 51CF FFFC                  		dbf	d7,loc_2110
00002300 4E75                       		rts	
00002302                            ; End of function PalLoad1
00002302                            
00002302                            
00002302                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00002302                            
00002302                            
00002302                            PalLoad2:
00002302 43F9 0000 0000             		lea	(PalPointers).l,a1
00002308 E748                       		lsl.w	#3,d0
0000230A D2C0                       		adda.w	d0,a1
0000230C 2459                       		movea.l	(a1)+,a2
0000230E 3659                       		movea.w	(a1)+,a3
00002310 3E19                       		move.w	(a1)+,d7
00002312                            
00002312                            loc_2128:
00002312 26DA                       		move.l	(a2)+,(a3)+
00002314 51CF FFFC                  		dbf	d7,loc_2128
00002318 4E75                       		rts	
0000231A                            ; End of function PalLoad2
0000231A                            
0000231A                            ; ---------------------------------------------------------------------------
0000231A                            ; Underwater pallet loading subroutine
0000231A                            ; ---------------------------------------------------------------------------
0000231A                            
0000231A                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000231A                            
0000231A                            
0000231A                            PalLoad3_Water:
0000231A 43F9 0000 0000             		lea	(PalPointers).l,a1
00002320 E748                       		lsl.w	#3,d0
00002322 D2C0                       		adda.w	d0,a1
00002324 2459                       		movea.l	(a1)+,a2
00002326 3659                       		movea.w	(a1)+,a3
00002328 96FC 0080                  		suba.w	#$80,a3
0000232C 3E19                       		move.w	(a1)+,d7
0000232E                            
0000232E                            loc_2144:
0000232E 26DA                       		move.l	(a2)+,(a3)+
00002330 51CF FFFC                  		dbf	d7,loc_2144
00002334 4E75                       		rts	
00002336                            ; End of function PalLoad3_Water
00002336                            
00002336                            
00002336                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00002336                            
00002336                            
00002336                            PalLoad4_Water:
00002336 43F9 0000 0000             		lea	(PalPointers).l,a1
0000233C E748                       		lsl.w	#3,d0
0000233E D2C0                       		adda.w	d0,a1
00002340 2459                       		movea.l	(a1)+,a2
00002342 3659                       		movea.w	(a1)+,a3
00002344 96FC 0100                  		suba.w	#$100,a3
00002348 3E19                       		move.w	(a1)+,d7
0000234A                            
0000234A                            loc_2160:
0000234A 26DA                       		move.l	(a2)+,(a3)+
0000234C 51CF FFFC                  		dbf	d7,loc_2160
00002350 4E75                       		rts	
00002352                            ; End of function PalLoad4_Water
00002352                            
00002352                            ; ===========================================================================
00002352                            ; ---------------------------------------------------------------------------
00002352                            ; Pallet pointers
00002352                            ; ---------------------------------------------------------------------------
00002352                            PalPointers:
00002352                            	include "_inc\Pallet pointers.asm"
00002352                            ; ---------------------------------------------------------------------------
00002352                            ; Pallet pointers
00002352                            ; ---------------------------------------------------------------------------
00002352 0000 0000                  	dc.l Pal_SegaBG		; pallet address
00002356 FB00                       	dc.w $FB00		; RAM address
00002358 001F                       	dc.w $1F		; (pallet length / 2) - 1
0000235A 0000 0000                  	dc.l Pal_Title
0000235E FB00                       	dc.w $FB00
00002360 001F                       	dc.w $1F
00002362 0000 0000                  	dc.l Pal_LevelSel
00002366 FB00                       	dc.w $FB00
00002368 001F                       	dc.w $1F
0000236A 0000 0000                  	dc.l Pal_Sonic
0000236E FB00                       	dc.w $FB00
00002370 0007                       	dc.w 7
00002372 0000 0000                  	dc.l Pal_GHZ
00002376 FB20                       	dc.w $FB20
00002378 0017                       	dc.w $17
0000237A 0000 0000                  	dc.l Pal_LZ
0000237E FB20                       	dc.w $FB20
00002380 0017                       	dc.w $17
00002382 0000 0000                  	dc.l Pal_MZ
00002386 FB20                       	dc.w $FB20
00002388 0017                       	dc.w $17
0000238A 0000 0000                  	dc.l Pal_SLZ
0000238E FB20                       	dc.w $FB20
00002390 0017                       	dc.w $17
00002392 0000 0000                  	dc.l Pal_SYZ
00002396 FB20                       	dc.w $FB20
00002398 0017                       	dc.w $17
0000239A 0000 0000                  	dc.l Pal_SBZ1
0000239E FB20                       	dc.w $FB20
000023A0 0017                       	dc.w $17
000023A2 0000 0000                  	dc.l Pal_Special
000023A6 FB00                       	dc.w $FB00
000023A8 001F                       	dc.w $1F
000023AA 0000 0000                  	dc.l Pal_LZWater
000023AE FB00                       	dc.w $FB00
000023B0 001F                       	dc.w $1F
000023B2 0000 0000                  	dc.l Pal_SBZ3
000023B6 FB20                       	dc.w $FB20
000023B8 0017                       	dc.w $17
000023BA 0000 0000                  	dc.l Pal_SBZ3Water
000023BE FB00                       	dc.w $FB00
000023C0 001F                       	dc.w $1F
000023C2 0000 0000                  	dc.l Pal_SBZ2
000023C6 FB20                       	dc.w $FB20
000023C8 0017                       	dc.w $17
000023CA 0000 0000                  	dc.l Pal_LZSonWater
000023CE FB00                       	dc.w $FB00
000023D0 0007                       	dc.w 7
000023D2 0000 0000                  	dc.l Pal_SBZ3SonWat
000023D6 FB00                       	dc.w $FB00
000023D8 0007                       	dc.w 7
000023DA 0000 0000                  	dc.l Pal_SpeResult
000023DE FB00                       	dc.w $FB00
000023E0 001F                       	dc.w $1F
000023E2 0000 0000                  	dc.l Pal_SpeContinue
000023E6 FB00                       	dc.w $FB00
000023E8 000F                       	dc.w $F
000023EA 0000 0000                  	dc.l Pal_Ending
000023EE FB00                       	dc.w $FB00
000023F0 001F                       	dc.w $1F
000023F2 0000 0000                  	dc.l Pal_Idiot
000023F6 FB20                       	dc.w $FB20
000023F8 0007                       	dc.w 7
000023FA 0000 0000                  	dc.l Pal_Gronic
000023FE FB00                       	dc.w $FB00
00002400 0007                       	dc.w 7
00002402 0000 0000                  	dc.l Pal_LZGroWater
00002406 FB00                       	dc.w $FB00
00002408 0007                       	dc.w 7
0000240A 0000 0000                  	dc.l Pal_SBZ3GroWat
0000240E FB00                       	dc.w $FB00
00002410 0007                       	dc.w 7
00002412 0000 0000                  	dc.l Pal_Anakama
00002416 FB00                       	dc.w $FB00
00002418 0007                       	dc.w 7
00002418 0007                       	dc.w 7
0000241A                            
0000241A                            ; ---------------------------------------------------------------------------
0000241A                            ; Pallet data
0000241A                            ; ---------------------------------------------------------------------------
0000241A                            Pal_SegaBG:	incbin	pallet\sega_bg.bin
0000249A                            Pal_Title:	incbin	pallet\title.bin
0000251A                            Pal_LevelSel:	incbin	pallet\levelsel.bin
0000259A                            Pal_Sonic:	incbin	pallet\sonic.bin
000025BA                            Pal_GHZ:	incbin	pallet\ghz.bin
0000261A                            Pal_LZ:		incbin	pallet\lz.bin
0000267A                            Pal_LZWater:	incbin	pallet\lz_uw.bin	; LZ underwater pallets
000026FA                            Pal_MZ:		incbin	pallet\mz.bin
0000275A                            Pal_SLZ:	incbin	pallet\slz.bin
000027BA                            Pal_SYZ:	incbin	pallet\syz.bin
0000281A                            Pal_SBZ1:	incbin	pallet\sbz_act1.bin	; SBZ act 1 pallets
0000283A                            Pal_SBZ2:	incbin	pallet\sbz_act2.bin	; SBZ act 2 & Final Zone pallets
0000289A                            Pal_Special:	incbin	pallet\special.bin	; special stage pallets
0000291A                            Pal_SBZ3:	incbin	pallet\sbz_act3.bin	; SBZ act 3 pallets
0000297A                            Pal_SBZ3Water:	incbin	pallet\sbz_a3uw.bin	; SBZ act 3 (underwater) pallets
000029FA                            Pal_LZSonWater:	incbin	pallet\son_lzuw.bin	; Sonic (underwater in LZ) pallet
00002A1A                            Pal_SBZ3SonWat:	incbin	pallet\son_sbzu.bin	; Sonic (underwater in SBZ act 3) pallet
00002A3A                            Pal_SpeResult:	incbin	pallet\ssresult.bin	; special stage results screen pallets
00002ABA                            Pal_SpeContinue:incbin	pallet\sscontin.bin	; special stage results screen continue pallet
00002AFA                            Pal_Ending:	incbin	pallet\ending.bin	; ending sequence pallets
00002B7A                            Pal_Idiot:	incbin	pallet\idiot.bin	; idiot pallet
00002B9A                            Pal_Gronic:	incbin	pallet\gronic.bin	; gronic char
00002BBA                            Pal_LZGroWater:	incbin	pallet\groniclzuw.bin	; Gronic (underwater in SBZ act 3) pallet
00002BDA                            Pal_SBZ3GroWat:	incbin	pallet\gronicsbz3uw.bin	; Gronic (underwater in SBZ act 3) pallet
00002BFA                            Pal_Anakama:incbin	pallet\anakama.bin	; anakama char
00002C7A                            
00002C7A                            ; ---------------------------------------------------------------------------
00002C7A                            ; Subroutine to	delay the program by ($FFFFF62A) frames
00002C7A                            ; ---------------------------------------------------------------------------
00002C7A                            
00002C7A                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00002C7A                            
00002C7A                            
00002C7A                            DelayProgram:				; XREF: PauseGame
00002C7A 46FC 2300                  		move	#$2300,sr
00002C7E                            
00002C7E                            loc_29AC:
00002C7E 4A38 F62A                  		tst.b	($FFFFF62A).w
00002C82 66FA                       		bne.s	loc_29AC
00002C84 4E75                       		rts	
00002C86                            ; End of function DelayProgram
00002C86                            
00002C86                            ; ---------------------------------------------------------------------------
00002C86                            ; Subroutine to	generate a pseudo-random number	in d0
00002C86                            ; ---------------------------------------------------------------------------
00002C86                            
00002C86                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00002C86                            
00002C86                            
00002C86                            RandomNumber:
00002C86 2238 F636                  		move.l	($FFFFF636).w,d1
00002C8A 6600                       		bne.s	loc_29C0
00002C8C 223C 2A6D 365A             		move.l	#$2A6D365A,d1
00002C92                            
00002C92                            loc_29C0:
00002C92 2001                       		move.l	d1,d0
00002C94 E581                       		asl.l	#2,d1
00002C96 D280                       		add.l	d0,d1
00002C98 E781                       		asl.l	#3,d1
00002C9A D280                       		add.l	d0,d1
00002C9C 3001                       		move.w	d1,d0
00002C9E 4841                       		swap	d1
00002CA0 D041                       		add.w	d1,d0
00002CA2 3200                       		move.w	d0,d1
00002CA4 4841                       		swap	d1
00002CA6 21C1 F636                  		move.l	d1,($FFFFF636).w
00002CAA 4E75                       		rts	
00002CAC                            ; End of function RandomNumber
00002CAC                            
00002CAC                            
00002CAC                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00002CAC                            
00002CAC                            
00002CAC                            CalcSine:				; XREF: SS_BGAnimate; et al
00002CAC 0240 00FF                  		andi.w	#$FF,d0
00002CB0 D040                       		add.w	d0,d0
00002CB2 0640 0080                  		addi.w	#$80,d0
00002CB6 323B 0000                  		move.w	Sine_Data(pc,d0.w),d1
00002CBA 0440 0080                  		subi.w	#$80,d0
00002CBE 303B 0000                  		move.w	Sine_Data(pc,d0.w),d0
00002CC2 4E75                       		rts	
00002CC4                            ; End of function CalcSine
00002CC4                            
00002CC4                            ; ===========================================================================
00002CC4                            
00002CC4                            Sine_Data:	incbin	misc\sinewave.bin	; values for a 360ยบ sine wave
00002F44                            
00002F44                            ; ===========================================================================
00002F44 48E7 6000                  		movem.l	d1-d2,-(sp)
00002F48 3200                       		move.w	d0,d1
00002F4A 4841                       		swap	d1
00002F4C 7000                       		moveq	#0,d0
00002F4E 3200                       		move.w	d0,d1
00002F50 7407                       		moveq	#7,d2
00002F52                            
00002F52                            loc_2C80:
00002F52 E599                       		rol.l	#2,d1
00002F54 D040                       		add.w	d0,d0
00002F56 5240                       		addq.w	#1,d0
00002F58 9240                       		sub.w	d0,d1
00002F5A 6400                       		bcc.s	loc_2C9A
00002F5C D240                       		add.w	d0,d1
00002F5E 5340                       		subq.w	#1,d0
00002F60 51CA FFF0                  		dbf	d2,loc_2C80
00002F64 E248                       		lsr.w	#1,d0
00002F66 4CDF 0006                  		movem.l	(sp)+,d1-d2
00002F6A 4E75                       		rts	
00002F6C                            ; ===========================================================================
00002F6C                            
00002F6C                            loc_2C9A:
00002F6C 5240                       		addq.w	#1,d0
00002F6E 51CA FFE2                  		dbf	d2,loc_2C80
00002F72 E248                       		lsr.w	#1,d0
00002F74 4CDF 0006                  		movem.l	(sp)+,d1-d2
00002F78 4E75                       		rts	
00002F7A                            
00002F7A                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00002F7A                            
00002F7A                            
00002F7A                            CalcAngle:
00002F7A 48E7 1800                  		movem.l	d3-d4,-(sp)
00002F7E 7600                       		moveq	#0,d3
00002F80 7800                       		moveq	#0,d4
00002F82 3601                       		move.w	d1,d3
00002F84 3802                       		move.w	d2,d4
00002F86 8843                       		or.w	d3,d4
00002F88 6700                       		beq.s	loc_2D04
00002F8A 3802                       		move.w	d2,d4
00002F8C 4A43                       		tst.w	d3
00002F8E 6A00 0000                  		bpl.w	loc_2CC2
00002F92 4443                       		neg.w	d3
00002F94                            
00002F94                            loc_2CC2:
00002F94 4A44                       		tst.w	d4
00002F96 6A00 0000                  		bpl.w	loc_2CCA
00002F9A 4444                       		neg.w	d4
00002F9C                            
00002F9C                            loc_2CCA:
00002F9C B843                       		cmp.w	d3,d4
00002F9E 6400 0000                  		bcc.w	loc_2CDC
00002FA2 E18C                       		lsl.l	#8,d4
00002FA4 88C3                       		divu.w	d3,d4
00002FA6 7000                       		moveq	#0,d0
00002FA8 103B 4000                  		move.b	Angle_Data(pc,d4.w),d0
00002FAC 6000                       		bra.s	loc_2CE6
00002FAE                            ; ===========================================================================
00002FAE                            
00002FAE                            loc_2CDC:				; XREF: CalcAngle
00002FAE E18B                       		lsl.l	#8,d3
00002FB0 86C4                       		divu.w	d4,d3
00002FB2 7040                       		moveq	#$40,d0
00002FB4 903B 3000                  		sub.b	Angle_Data(pc,d3.w),d0
00002FB8                            
00002FB8                            loc_2CE6:
00002FB8 4A41                       		tst.w	d1
00002FBA 6A00 0000                  		bpl.w	loc_2CF2
00002FBE 4440                       		neg.w	d0
00002FC0 0640 0080                  		addi.w	#$80,d0
00002FC4                            
00002FC4                            loc_2CF2:
00002FC4 4A42                       		tst.w	d2
00002FC6 6A00 0000                  		bpl.w	loc_2CFE
00002FCA 4440                       		neg.w	d0
00002FCC 0640 0100                  		addi.w	#$100,d0
00002FD0                            
00002FD0                            loc_2CFE:
00002FD0 4CDF 0018                  		movem.l	(sp)+,d3-d4
00002FD4 4E75                       		rts	
00002FD6                            ; ===========================================================================
00002FD6                            
00002FD6                            loc_2D04:				; XREF: CalcAngle
00002FD6 303C 0040                  		move.w	#$40,d0
00002FDA 4CDF 0018                  		movem.l	(sp)+,d3-d4
00002FDE 4E75                       		rts	
00002FE0                            ; End of function CalcAngle
00002FE0                            
00002FE0                            ; ===========================================================================
00002FE0                            
00002FE0                            Angle_Data:	incbin	misc\angles.bin
000030E2                            
000030E2                            ; ===========================================================================
000030E2                            
000030E2                            ; ---------------------------------------------------------------------------
000030E2                            ; Sega screen
000030E2                            ; ---------------------------------------------------------------------------
000030E2                            
000030E2                            SegaScreen:				; XREF: GameModeArray
000030E2 103C 00E4                  		move.b	#$E4,d0
000030E6 6100 E4D8                  		bsr.w	PlaySound_Special ; stop music
000030EA 6100 E716                  		bsr.w	ClearPLC
000030EE 6100 EF4C                  		bsr.w	Pal_FadeFrom
000030F2 4DF9 00C0 0004             		lea	($C00004).l,a6
000030F8 3CBC 8004                  		move.w	#$8004,(a6)
000030FC 3CBC 8230                  		move.w	#$8230,(a6)
00003100 3CBC 8407                  		move.w	#$8407,(a6)
00003104 3CBC 8700                  		move.w	#$8700,(a6)
00003108 3CBC 8B00                  		move.w	#$8B00,(a6)
0000310C 4238 F64E                  		clr.b	($FFFFF64E).w
00003110 46FC 2700                  		move	#$2700,sr
00003114 3038 F60C                  		move.w	($FFFFF60C).w,d0
00003118 0200 00BF                  		andi.b	#$BF,d0
0000311C 33C0 00C0 0004             		move.w	d0,($C00004).l
00003122 6100 E3C4                  		bsr.w	ClearScreen
00003126 23FC 4000 0000 00C0 0004   		move.l	#$40000000,($C00004).l
00003130 41F9 0000 0000             		lea	(Nem_SegaLogo).l,a0 ; load Sega	logo patterns
00003136 6100 E52C                  		bsr.w	NemDec
0000313A 43F9 00FF 0000             		lea	($FF0000).l,a1
00003140 41F9 0000 0000             		lea	(Eni_SegaLogo).l,a0 ; load Sega	logo mappings
00003146 303C 0000                  		move.w	#0,d0
0000314A 6100 E7F6                  		bsr.w	EniDec
0000314E 43F9 00FF 0000             		lea	($FF0000).l,a1
00003154 203C 6510 0003             		move.l	#$65100003,d0
0000315A 7217                       		moveq	#$17,d1
0000315C 7407                       		moveq	#7,d2
0000315E 6100 E4E4                  		bsr.w	ShowVDPGraphics
00003162 43F9 00FF 0180             		lea	($FF0180).l,a1
00003168 203C 4000 0003             		move.l	#$40000003,d0
0000316E 7227                       		moveq	#$27,d1
00003170 741B                       		moveq	#$1B,d2
00003172 6100 E4D0                  		bsr.w	ShowVDPGraphics
00003176 7000                       		moveq	#0,d0
00003178 6100 F188                  		bsr.w	PalLoad2	; load Sega logo pallet
0000317C 31FC FFF6 F632             		move.w	#-$A,($FFFFF632).w
00003182 31FC 0000 F634             		move.w	#0,($FFFFF634).w
00003188 31FC 0000 F662             		move.w	#0,($FFFFF662).w
0000318E 31FC 0000 F660             		move.w	#0,($FFFFF660).w
00003194 3038 F60C                  		move.w	($FFFFF60C).w,d0
00003198 0000 0040                  		ori.b	#$40,d0
0000319C 33C0 00C0 0004             		move.w	d0,($C00004).l
000031A2                            
000031A2                            Sega_WaitPallet:
000031A2 11FC 0002 F62A             		move.b	#2,($FFFFF62A).w
000031A8 6100 FAD0                  		bsr.w	DelayProgram
000031AC 6100 F046                  		bsr.w	PalCycle_Sega
000031B0 66F0                       		bne.s	Sega_WaitPallet
000031B2                            
000031B2 103C 00E1                  		move.b	#$E1,d0
000031B6 6100 E408                  		bsr.w	PlaySound_Special ; play "SEGA"	sound
000031BA 11FC 0014 F62A             		move.b	#$14,($FFFFF62A).w
000031C0 6100 FAB8                  		bsr.w	DelayProgram
000031C4 31FC 001E F614             		move.w	#$1E,($FFFFF614).w
000031CA                            
000031CA                            Sega_WaitEnd:
000031CA 11FC 0002 F62A             		move.b	#2,($FFFFF62A).w
000031D0 6100 FAA8                  		bsr.w	DelayProgram
000031D4 4A78 F614                  		tst.w	($FFFFF614).w
000031D8 6700                       		beq.s	Sega_GotoTitle
000031DA 0238 0080 F605             		andi.b	#$80,($FFFFF605).w ; is	Start button pressed?
000031E0 67E8                       		beq.s	Sega_WaitEnd	; if not, branch
000031E2                            
000031E2                            Sega_GotoTitle:
000031E2 11FC 0004 F600             		move.b	#4,($FFFFF600).w ; go to title screen
000031E8 4E75                       		rts	
000031EA                            ; ===========================================================================
000031EA                            
000031EA                            ; ---------------------------------------------------------------------------
000031EA                            ; Title	screen
000031EA                            ; ---------------------------------------------------------------------------
000031EA                            
000031EA                            TitleScreen:				; XREF: GameModeArray
000031EA 103C 00E4                  		move.b	#$E4,d0
000031EE 6100 E3D0                  		bsr.w	PlaySound_Special ; stop music
000031F2 6100 EE48                  		bsr.w	Pal_FadeFrom
000031F6 6100 E60A                  		bsr.w	ClearPLC
000031FA 46FC 2700                  		move	#$2700,sr
000031FE 6100 E376                  		bsr.w	SoundDriverLoad
00003202 4DF9 00C0 0004             		lea	($C00004).l,a6
00003208 3CBC 8004                  		move.w	#$8004,(a6)
0000320C 3CBC 8230                  		move.w	#$8230,(a6)
00003210 3CBC 8407                  		move.w	#$8407,(a6)
00003214 3CBC 9001                  		move.w	#$9001,(a6)
00003218 3CBC 9200                  		move.w	#$9200,(a6)
0000321C 3CBC 8B03                  		move.w	#$8B03,(a6)
00003220 3CBC 8720                  		move.w	#$8720,(a6)
00003224 4238 F64E                  		clr.b	($FFFFF64E).w
00003228 6100 E2BE                  		bsr.w	ClearScreen
0000322C 43F8 D000                  		lea	($FFFFD000).w,a1
00003230 7000                       		moveq	#0,d0
00003232 323C 07FF                  		move.w	#$7FF,d1
00003236                            
00003236                            Title_ClrObjRam:
00003236 22C0                       		move.l	d0,(a1)+
00003238 51C9 FFFC                  		dbf	d1,Title_ClrObjRam ; fill object RAM ($D000-$EFFF) with	$0
0000323C                            
0000323C                            ; gomer
0000323C 23FC 4000 0000 00C0 0004   		move.l	#$40000000,($C00004).l
00003246 41F9 0000 0000             		lea	(Nem_Gomer).l,a0 ; load Gomer patterns
0000324C 6100 E416                  		bsr.w	NemDec
00003250 7003                       		moveq	#3,d0		; load Sonic's pallet
00003252 6100 F092                  		bsr.w	PalLoad1
00003256                            
00003256 43F9 00FF 0000             		lea	($FF0000).l,a1
0000325C 41F9 0000 0000             		lea	(Eni_Gomer).l,a0 ; load mappings for	Gomer credits
00003262 303C 0000                  		move.w	#0,d0
00003266 6100 E6DA                  		bsr.w	EniDec
0000326A                            ; help how the fuck can i do this IT SHOWS NOTHING
0000326A 43F9 00FF 0000             		lea	($FF0000).l,a1
00003270 203C 4000 0003             		move.l	#$40000003,d0
00003276 7227                       		moveq	#$27,d1
00003278 741B                       		moveq	#$1B,d2
0000327A 6100 E3C8                  		bsr.w	ShowVDPGraphics
0000327E                            
0000327E                            
0000327E 43F9 00FF 0000             		lea	($FF0000).l,a1
00003284 203C 6000 0003             		move.l	#$60000003,d0
0000328A 7227                       		moveq	#$27,d1
0000328C 741B                       		moveq	#$1B,d2
0000328E                            
0000328E 6100 ED06                  		bsr.w	Pal_FadeTo
00003292 6100 EDA8                  		bsr.w	Pal_FadeFrom
00003296                            
00003296                            
00003296 6100 E250                  		bsr.w	ClearScreen
0000329A 23FC 4000 0000 00C0 0004   		move.l	#$40000000,($C00004).l
000032A4 41F9 0000 0000             		lea	(Nem_JapNames).l,a0 ; load Japanese credits
000032AA 6100 E3B8                  		bsr.w	NemDec
000032AE 23FC 54C0 0000 00C0 0004   		move.l	#$54C00000,($C00004).l
000032B8 41F9 0000 0000             		lea	(Nem_CreditText).l,a0 ;	load alphabet
000032BE 6100 E3A4                  		bsr.w	NemDec
000032C2 43F9 00FF 0000             		lea	($FF0000).l,a1
000032C8 41F9 0000 0000             		lea	(Eni_JapNames).l,a0 ; load mappings for	Japanese credits
000032CE 303C 0000                  		move.w	#0,d0
000032D2 6100 E66E                  		bsr.w	EniDec
000032D6 43F9 00FF 0000             		lea	($FF0000).l,a1
000032DC 203C 4000 0003             		move.l	#$40000003,d0
000032E2 7227                       		moveq	#$27,d1
000032E4 741B                       		moveq	#$1B,d2
000032E6 6100 E35C                  		bsr.w	ShowVDPGraphics
000032EA 6100 ED50                  		bsr.w	Pal_FadeFrom
000032EE 43F8 FB80                  		lea	($FFFFFB80).w,a1
000032F2 7000                       		moveq	#0,d0
000032F4 323C 001F                  		move.w	#$1F,d1
000032F8                            
000032F8                            
000032F8                            Title_ClrPallet:
000032F8 22C0                       		move.l	d0,(a1)+
000032FA 51C9 FFFC                  		dbf	d1,Title_ClrPallet ; fill pallet with 0	(black)
000032FE                            
000032FE 7003                       		moveq	#3,d0		; load Sonic's pallet
00003300 6100 EFE4                  		bsr.w	PalLoad1
00003304 11FC 008A D080             		move.b	#$8A,($FFFFD080).w ; load "SONIC TEAM PRESENTS"	object
0000330A 4EB9 0000 0000             		jsr	ObjectsLoad
00003310 4EB9 0000 0000             		jsr	BuildSprites
00003316 6100 EC7E                  		bsr.w	Pal_FadeTo
0000331A 46FC 2700                  		move	#$2700,sr
0000331E 23FC 4000 0001 00C0 0004   		move.l	#$40000001,($C00004).l
00003328 41F9 0000 0000             		lea	(Nem_TitleFg).l,a0 ; load title	screen patterns
0000332E 6100 E334                  		bsr.w	NemDec
00003332 23FC 6000 0001 00C0 0004   		move.l	#$60000001,($C00004).l
0000333C 41F9 0000 0000             		lea	(Nem_TitleSonic).l,a0 ;	load Sonic title screen	patterns
00003342 6100 E320                  		bsr.w	NemDec
00003346 23FC 6200 0002 00C0 0004   		move.l	#$62000002,($C00004).l
00003350 41F9 0000 0000             		lea	(Nem_TitleTM).l,a0 ; load "TM" patterns
00003356 6100 E30C                  		bsr.w	NemDec
0000335A 4DF9 00C0 0000             		lea	($C00000).l,a6
00003360 2D7C 5000 0003 0004        		move.l	#$50000003,4(a6)
00003368 4BF9 0000 05F4             		lea	(Art_Text).l,a5
0000336E 323C 0BB6                  		move.w	#(Art_Text_end-Art_Text/4)-1,d1
00003372                            
00003372                            Title_LoadText:
00003372 2C9D                       		move.l	(a5)+,(a6)
00003374 51C9 FFFC                  		dbf	d1,Title_LoadText ; load uncompressed text patterns
00003378                            
00003378 11FC 0000 FE30             		move.b	#0,($FFFFFE30).w ; clear lamppost counter
0000337E 31FC 0000 FE08             		move.w	#0,($FFFFFE08).w ; disable debug item placement	mode
00003384 31FC 0000 FFF0             		move.w	#0,($FFFFFFF0).w ; disable debug mode
0000338A 31FC 0000 FFEA             		move.w	#0,($FFFFFFEA).w
00003390 31FC 0000 FE10             		move.w	#0,($FFFFFE10).w ; set level to	GHZ (00)
00003396 31FC 0000 F634             		move.w	#0,($FFFFF634).w ; disable pallet cycling
0000339C 6100 0000                  		bsr.w	LevelSizeLoad
000033A0 6100 0000                  		bsr.w	DeformBgLayer
000033A4                            
000033A4 43F8 B000                  		lea	($FFFFB000).w,a1
000033A8 41F9 0000 0000             		lea	(Blk16_GHZ).l,a0 ; load	GHZ 16x16 mappings
000033AE 303C 0000                  		move.w	#0,d0
000033B2 6100 E58E                  		bsr.w	EniDec
000033B6 41F9 0000 0000             		lea	(Blk256_GHZ).l,a0 ; load GHZ 256x256 mappings
000033BC 43F9 00FF 0000             		lea	($FF0000).l,a1
000033C2 6100 E6FC                  		bsr.w	KosDec
000033C6 6100 0000                  		bsr.w	LevelLayoutLoad
000033CA                            
000033CA 46FC 2700                  		move	#$2700,sr
000033CE 6100 E118                  		bsr.w	ClearScreen
000033D2 4BF9 00C0 0004             		lea	($C00004).l,a5
000033D8 4DF9 00C0 0000             		lea	($C00000).l,a6
000033DE 47F8 F708                  		lea	($FFFFF708).w,a3
000033E2 49F8 A440                  		lea	($FFFFA440).w,a4
000033E6 343C 6000                  		move.w	#$6000,d2
000033EA 6100 0000                  		bsr.w	LoadTilesFromStart2
000033EE 43F9 00FF 0000             		lea	($FF0000).l,a1
000033F4 41F9 0000 0000             		lea	(Eni_Title).l,a0 ; load	title screen mappings
000033FA 303C 0000                  		move.w	#0,d0
000033FE 6100 E542                  		bsr.w	EniDec
00003402 43F9 00FF 0000             		lea	($FF0000).l,a1
00003408 203C 4206 0003             		move.l	#$42060003,d0
0000340E 7221                       		moveq	#$21,d1
00003410 7415                       		moveq	#$15,d2
00003412 6100 E230                  		bsr.w	ShowVDPGraphics
00003416 23FC 4000 0000 00C0 0004   		move.l	#$40000000,($C00004).l
00003420 41F9 0000 0000             		lea	(Nem_GHZ_1st).l,a0 ; load GHZ patterns
00003426 6100 E23C                  		bsr.w	NemDec
0000342A 7001                       		moveq	#1,d0		; load title screen pallet
0000342C 6100 EEB8                  		bsr.w	PalLoad1
00003430 103C 008A                  		move.b	#$8A,d0		; play title screen music
00003434 6100 E18A                  		bsr.w	PlaySound_Special
00003438 11FC 0000 FFFA             		move.b	#0,($FFFFFFFA).w ; disable debug mode
0000343E 31FC 0178 F614             		move.w	#$178,($FFFFF614).w ; run title	screen for $178	frames
00003444 43F8 D080                  		lea	($FFFFD080).w,a1
00003448 7000                       		moveq	#0,d0
0000344A 323C 000F                  		move.w	#$F,d1
0000344E                            
0000344E                            Title_ClrObjRam2:
0000344E 22C0                       		move.l	d0,(a1)+
00003450 51C9 FFFC                  		dbf	d1,Title_ClrObjRam2
00003454                            
00003454 11FC 000E D040             		move.b	#$E,($FFFFD040).w ; load big Sonic object
0000345A 11FC 000F D080             		move.b	#$F,($FFFFD080).w ; load "PRESS	START BUTTON" object
00003460 11FC 000F D0C0             		move.b	#$F,($FFFFD0C0).w ; load "TM" object
00003466 11FC 0003 D0DA             		move.b	#3,($FFFFD0DA).w
0000346C 11FC 000F D100             		move.b	#$F,($FFFFD100).w
00003472 11FC 0002 D11A             		move.b	#2,($FFFFD11A).w
00003478 4EB9 0000 0000             		jsr	ObjectsLoad
0000347E 6100 0000                  		bsr.w	DeformBgLayer
00003482 4EB9 0000 0000             		jsr	BuildSprites
00003488 7000                       		moveq	#0,d0
0000348A 6100 E34A                  		bsr.w	LoadPLC2
0000348E 31FC 0000 FFE4             		move.w	#0,($FFFFFFE4).w
00003494 31FC 0000 FFE6             		move.w	#0,($FFFFFFE6).w
0000349A 3038 F60C                  		move.w	($FFFFF60C).w,d0
0000349E 0000 0040                  		ori.b	#$40,d0
000034A2 33C0 00C0 0004             		move.w	d0,($C00004).l
000034A8 6100 EAEC                  		bsr.w	Pal_FadeTo
000034AC                            
000034AC                            loc_317C:
000034AC 11FC 0004 F62A             		move.b	#4,($FFFFF62A).w
000034B2 6100 F7C6                  		bsr.w	DelayProgram
000034B6 4EB9 0000 0000             		jsr	ObjectsLoad
000034BC 6100 0000                  		bsr.w	DeformBgLayer
000034C0 4EB9 0000 0000             		jsr	BuildSprites
000034C6 6100 E6B8                  		bsr.w	PalCycle_Title
000034CA 6100 E344                  		bsr.w	RunPLC_RAM
000034CE 3038 D008                  		move.w	($FFFFD008).w,d0
000034D2 5440                       		addq.w	#2,d0
000034D4 31C0 D008                  		move.w	d0,($FFFFD008).w ; move	Sonic to the right
000034D8 0C40 1C00                  		cmpi.w	#$1C00,d0	; has Sonic object passed x-position $1C00?
000034DC 6500                       		bcs.s	Title_ChkRegion	; if not, branch
000034DE 11FC 0000 F600             		move.b	#0,($FFFFF600).w ; go to Sega screen
000034E4 4E75                       		rts	
000034E6                            ; ===========================================================================
000034E6                            
000034E6                            Title_ChkRegion:
000034E6 4A38 FFF8                  		tst.b	($FFFFFFF8).w	; check	if the machine is US or	Japanese
000034EA 6A00                       		bpl.s	Title_RegionJ	; if Japanese, branch
000034EC 41F9 0000 0000             		lea	(LevelSelectCode_US).l,a0 ; load US code
000034F2 6000                       		bra.s	Title_EnterCheat
000034F4                            ; ===========================================================================
000034F4                            
000034F4                            Title_RegionJ:				; XREF: Title_ChkRegion
000034F4 41F9 0000 0000             		lea	(LevelSelectCode_J).l,a0 ; load	J code
000034FA                            
000034FA                            Title_EnterCheat:			; XREF: Title_ChkRegion
000034FA 3038 FFE4                  		move.w	($FFFFFFE4).w,d0
000034FE D0C0                       		adda.w	d0,a0
00003500 1038 F605                  		move.b	($FFFFF605).w,d0 ; get button press
00003504 0200 000F                  		andi.b	#$F,d0		; read only up/down/left/right buttons
00003508 B010                       		cmp.b	(a0),d0		; does button press match the cheat code?
0000350A 6600                       		bne.s	loc_3210	; if not, branch
0000350C 5278 FFE4                  		addq.w	#1,($FFFFFFE4).w ; next	button press
00003510 4A00                       		tst.b	d0
00003512 6600                       		bne.s	Title_CountC
00003514 41F8 FFE0                  		lea	($FFFFFFE0).w,a0
00003518 3238 FFE6                  		move.w	($FFFFFFE6).w,d1
0000351C E249                       		lsr.w	#1,d1
0000351E 0241 0003                  		andi.w	#3,d1
00003522 6700                       		beq.s	Title_PlayRing
00003524 4A38 FFF8                  		tst.b	($FFFFFFF8).w
00003528 6A00                       		bpl.s	Title_PlayRing
0000352A 7201                       		moveq	#1,d1
0000352C 1181 1001                  		move.b	d1,1(a0,d1.w)
00003530                            
00003530                            Title_PlayRing:
00003530 11BC 0001 1000             		move.b	#1,(a0,d1.w)	; activate cheat
00003536 103C 00B5                  		move.b	#$B5,d0		; play ring sound when code is entered
0000353A 6100 E084                  		bsr.w	PlaySound_Special
0000353E 6000                       		bra.s	Title_CountC
00003540                            ; ===========================================================================
00003540                            
00003540                            loc_3210:				; XREF: Title_EnterCheat
00003540 4A00                       		tst.b	d0
00003542 6700                       		beq.s	Title_CountC
00003544 0C78 0009 FFE4             		cmpi.w	#9,($FFFFFFE4).w
0000354A 6700                       		beq.s	Title_CountC
0000354C 31FC 0000 FFE4             		move.w	#0,($FFFFFFE4).w
00003552                            
00003552                            Title_CountC:
00003552 1038 F605                  		move.b	($FFFFF605).w,d0
00003556 0200 0020                  		andi.b	#$20,d0		; is C button pressed?
0000355A 6700                       		beq.s	loc_3230	; if not, branch
0000355C 5278 FFE6                  		addq.w	#1,($FFFFFFE6).w ; increment C button counter
00003560                            
00003560                            loc_3230:
00003560 4A78 F614                  		tst.w	($FFFFF614).w
00003564 6700 0000                  		beq.w	Demo
00003568                            		; (temporary until we have an actual options screen)
00003568 0838 0005 F605             		btst	#5,	($FFFFF605).w ; check if c pressed
0000356E 6700                       		beq.s	@notc
00003570                            
00003570 5238 FFE8                  		add.b	#1,(v_character).w ; sonic/gronic 
00003574 0C38 0003 FFE8             		cmpi.b	#3,(v_character).w
0000357A 6D00                       		blt.s	@notoverflow
0000357C 11FC 0000 FFE8             		move.b	#0,(v_character).w
00003582                            	@notoverflow:
00003582 103C 00B5                  		move.b	#$B5,d0		; play ring sound when code is entered
00003586 6100 E038                  		bsr.w	PlaySound_Special
0000358A                            	@notc:
0000358A 0238 0080 F605             		andi.b	#$80,($FFFFF605).w ; check if Start is pressed
00003590 6700 FF1A                  		beq.w	loc_317C	; if not, branch
00003594                            
00003594                            Title_ChkLevSel:
00003594 4A38 FFE0                  		tst.b	($FFFFFFE0).w	; check	if level select	code is	on
00003598 6700 0000                  		beq.w	PlayLevel	; if not, play level
0000359C 0838 0006 F604             		btst	#6,($FFFFF604).w ; check if A is pressed
000035A2 6700 0000                  		beq.w	PlayLevel	; if not, play level
000035A6                            		
000035A6                            		
000035A6 7002                       		moveq	#2,d0
000035A8 6100 ED58                  		bsr.w	PalLoad2	; load level select pallet
000035AC 43F8 CC00                  		lea	($FFFFCC00).w,a1
000035B0 7000                       		moveq	#0,d0
000035B2 323C 00DF                  		move.w	#$DF,d1
000035B6                            
000035B6                            Title_ClrScroll:
000035B6 22C0                       		move.l	d0,(a1)+
000035B8 51C9 FFFC                  		dbf	d1,Title_ClrScroll ; fill scroll data with 0
000035BC                            
000035BC 21C0 F616                  		move.l	d0,($FFFFF616).w
000035C0 46FC 2700                  		move	#$2700,sr
000035C4 4DF9 00C0 0000             		lea	($C00000).l,a6
000035CA 23FC 6000 0003 00C0 0004   		move.l	#$60000003,($C00004).l
000035D4 323C 03FF                  		move.w	#$3FF,d1
000035D8                            
000035D8                            Title_ClrVram:
000035D8 2C80                       		move.l	d0,(a6)
000035DA 51C9 FFFC                  		dbf	d1,Title_ClrVram ; fill	VRAM with 0
000035DE                            
000035DE 6100 0000                  		bsr.w	LevSelTextLoad
000035E2                            		
000035E2                            		; sound test fix
000035E2 3C38 FF82                  		move.w	($FFFFFF82).w,d6
000035E6 31FC 0014 FF82             		move.w	#$14,($FFFFFF82).w
000035EC                            		
000035EC 363C C65F                  		move.w	#$C680-$21,d3 ; selected
000035F0 0C46 0014                  		cmpi.w	#$14,d6
000035F4 6700                       		beq.s	@issndtst
000035F6 363C E65F                  		move.w	#$E680-$21,d3 ; not selected
000035FA                            	@issndtst:
000035FA 6100 0000                  		bsr.w	LevSelSndTest	; refresh text
000035FE 31C6 FF82                  		move.w	d6,($FFFFFF82).w
00003602                            		
00003602 363C C65F                  		move.w	#$C680-$21,d3	; VRAM setting
00003606 2D7C 6D02 0003 0004        		move.l	#lsctrlpos,4(a6)
0000360E                            		
0000360E 0C78 0014 FF82             		cmpi.w	#$14,($FFFFFF82).w
00003614 6700                       		beq.s	@issndtst2
00003616                            		
00003616 43F9 0000 0000             		lea	(Controls_Normal).l,a1 ; control help
0000361C 6100 0000                  		bsr.w	CStringSlop
00003620 6000                       		bra.s	LevelSelect
00003622                            	@issndtst2:
00003622 43F9 0000 0000             		lea	(Controls_SND).l,a1
00003628 6100 0000                  		bsr.w	CStringSlop
0000362C                            ; ---------------------------------------------------------------------------
0000362C                            ; Level	Select
0000362C                            ; ---------------------------------------------------------------------------
0000362C                            LevelSelect:
0000362C 11FC 0004 F62A             		move.b	#4,($FFFFF62A).w
00003632 6100 F646                  		bsr.w	DelayProgram
00003636 6100 0000                  		bsr.w	LevSelControls
0000363A 6100 E1D4                  		bsr.w	RunPLC_RAM
0000363E 4AB8 F680                  		tst.l	($FFFFF680).w
00003642 66E8                       		bne.s	LevelSelect
00003644 0238 00F0 F605             		andi.b	#$F0,($FFFFF605).w ; is	A, B, C, or Start pressed?
0000364A 67E0                       		beq.s	LevelSelect	; if not, branch
0000364C 3038 FF82                  		move.w	($FFFFFF82).w,d0
00003650 0C40 0000                  		cmpi.w	#lswifi,d0		; have you selected item $15 (free wifi)?
00003654 6600                       		bne.s	@dont	; if not, dont blow this place up
00003656                            			
00003656 11FC 00E5 F00B             		move.b	#$E5,($FFFFF00B).w ; YOU ARE AN IDIOT BOOM
0000365C 11FC 0004 F62A             		move.b	#4,($FFFFF62A).w
00003662 6100 F616                  		bsr.w	DelayProgram
00003666                            	@dont:
00003666 0C40 0000                  		cmpi.w	#lssndtest,d0		; have you selected item $14 (sound test)?
0000366A 6600                       		bne.s	LevSel_Level_SS	; if not, go to	Level/SS subroutine
0000366C                            		
0000366C 0238 00A0 F605             		andi.b	#$A0,($FFFFF605).w ; is C or Start pressed?
00003672 67B8                       		beq.s	LevelSelect	; if not, branch
00003674                            		
00003674 0838 0007 F605             		btst	#7,($FFFFF605).w ; was it start?
0000367A 6600                       		bne.s	LevSel_SEGA ; then go to sega screen
0000367C                            		
0000367C 1038 FF84                  		move.b	($FFFFFF84).w,d0
00003680 11C0 F00B                  		move.b	d0,($FFFFF00B).w ; PlaySound_Special but faster
00003684                            		
00003684 4EB9 0000 0000             		jsr		ShowNow_Playing
0000368A 60A0                       		bra.s	LevelSelect
0000368C                            ; ===========================================================================
0000368C                            
0000368C                            LevSel_SEGA:				; XREF: LevelSelect
0000368C 11FC 0000 F600             		move.b	#$0,($FFFFF600).w ; set screen	mode to	$0 SEGA
00003692 4E75                       		rts	
00003694                            ; ===========================================================================
00003694                            
00003694                            LevSel_Ending:				; XREF: LevelSelect
00003694 11FC 0018 F600             		move.b	#$18,($FFFFF600).w ; set screen	mode to	$18 (Ending)
0000369A 31FC 0600 FE10             		move.w	#$600,($FFFFFE10).w ; set level	to 0600	(Ending)
000036A0 4E75                       		rts	
000036A2                            ; ===========================================================================
000036A2                            
000036A2                            LevSel_Credits:				; XREF: LevelSelect
000036A2 11FC 001C F600             		move.b	#$1C,($FFFFF600).w ; set screen	mode to	$1C (Credits)
000036A8 103C 0091                  		move.b	#$91,d0
000036AC 6100 DF12                  		bsr.w	PlaySound_Special ; play credits music
000036B0 31FC 0000 FFF4             		move.w	#0,($FFFFFFF4).w
000036B6 4E75                       		rts	
000036B8                            ; ===========================================================================
000036B8                            
000036B8                            LevSel_Level_SS:			; XREF: LevelSelect
000036B8 D040                       		add.w	d0,d0
000036BA 303B 0000                  		move.w	LSelectPointers(pc,d0.w),d0 ; load level number
000036BE 6B00 FF6C                  		bmi.w	LevelSelect
000036C2 0C40 0700                  		cmpi.w	#$700,d0	; check	if level is 0700 (Special Stage)
000036C6 6600                       		bne.s	LevSel_Level	; if not, branch
000036C8 11FC 0010 F600             		move.b	#$10,($FFFFF600).w ; set screen	mode to	$10 (Special Stage)
000036CE 4278 FE10                  		clr.w	($FFFFFE10).w	; clear	level
000036D2 11FC 0027 FE12             		move.b	#39,($FFFFFE12).w ; set lives to	3
000036D8 7000                       		moveq	#0,d0
000036DA 31C0 FE20                  		move.w	d0,($FFFFFE20).w ; clear rings
000036DE 21C0 FE22                  		move.l	d0,($FFFFFE22).w ; clear time
000036E2 21C0 FE26                  		move.l	d0,($FFFFFE26).w ; clear score
000036E6 4E75                       		rts	
000036E8                            ; ===========================================================================
000036E8                            
000036E8                            LevSel_Level:				; XREF: LevSel_Level_SS
000036E8 0240 3FFF                  		andi.w	#$3FFF,d0
000036EC 31C0 FE10                  		move.w	d0,($FFFFFE10).w ; set level number
000036F0                            
000036F0                            PlayLevel:				; XREF: ROM:00003246j ...
000036F0 11FC 000C F600             		move.b	#$C,($FFFFF600).w ; set	screen mode to $0C (level)
000036F6 11FC 0027 FE12             		move.b	#39,($FFFFFE12).w ; set lives to	3
000036FC 7000                       		moveq	#0,d0
000036FE 31C0 FE20                  		move.w	d0,($FFFFFE20).w ; clear rings
00003702 21C0 FE22                  		move.l	d0,($FFFFFE22).w ; clear time
00003706 21C0 FE26                  		move.l	d0,($FFFFFE26).w ; clear score
0000370A 11C0 FE16                  		move.b	d0,($FFFFFE16).w ; clear special stage number
0000370E 11C0 FE57                  		move.b	d0,($FFFFFE57).w ; clear emeralds
00003712 21C0 FE58                  		move.l	d0,($FFFFFE58).w ; clear emeralds
00003716 21C0 FE5C                  		move.l	d0,($FFFFFE5C).w ; clear emeralds
0000371A 11C0 FE18                  		move.b	d0,($FFFFFE18).w ; clear continues
0000371E 103C 00E0                  		move.b	#$E0,d0
00003722 6100 DE9C                  		bsr.w	PlaySound_Special ; fade out music
00003726 4E75                       		rts	
00003728                            ; ===========================================================================
00003728                            ; ---------------------------------------------------------------------------
00003728                            ; Level	select - level pointers
00003728                            ; ---------------------------------------------------------------------------
00003728                            LSelectPointers:
00003728                            		incbin	misc\ls_point.bin
00003752                            		even
00003752                            ; ---------------------------------------------------------------------------
00003752                            ; Level	select codes
00003752                            ; ---------------------------------------------------------------------------
00003752                            LevelSelectCode_J:
00003752                            		incbin	misc\ls_jcode.bin
00003758                            		even
00003758                            
00003758                            LevelSelectCode_US:
00003758                            		incbin	misc\ls_ucode.bin
0000375E                            		even
0000375E                            ; ===========================================================================
0000375E                            
0000375E                            ; ---------------------------------------------------------------------------
0000375E                            ; Demo mode
0000375E                            ; ---------------------------------------------------------------------------
0000375E                            
0000375E                            Demo:					; XREF: TitleScreen
0000375E 31FC 001E F614             		move.w	#$1E,($FFFFF614).w
00003764                            
00003764                            loc_33B6:				; XREF: loc_33E4
00003764 11FC 0004 F62A             		move.b	#4,($FFFFF62A).w
0000376A 6100 F50E                  		bsr.w	DelayProgram
0000376E 6100 0000                  		bsr.w	DeformBgLayer
00003772 6100 E3EC                  		bsr.w	PalCycle_Load
00003776 6100 E098                  		bsr.w	RunPLC_RAM
0000377A 3038 D008                  		move.w	($FFFFD008).w,d0
0000377E 5440                       		addq.w	#2,d0
00003780 31C0 D008                  		move.w	d0,($FFFFD008).w
00003784 0C40 1C00                  		cmpi.w	#$1C00,d0
00003788 6500                       		bcs.s	loc_33E4
0000378A 11FC 0000 F600             		move.b	#0,($FFFFF600).w ; set screen mode to 00 (level)
00003790 4E75                       		rts	
00003792                            ; ===========================================================================
00003792                            
00003792                            loc_33E4:				; XREF: Demo
00003792 0238 0080 F605             		andi.b	#$80,($FFFFF605).w ; is	Start button pressed?
00003798 6600 FDFA                  		bne.w	Title_ChkLevSel	; if yes, branch
0000379C 4A78 F614                  		tst.w	($FFFFF614).w
000037A0 6600 FFC2                  		bne.w	loc_33B6
000037A4 103C 00E0                  		move.b	#$E0,d0
000037A8 6100 DE16                  		bsr.w	PlaySound_Special ; fade out music
000037AC 3038 FFF2                  		move.w	($FFFFFFF2).w,d0 ; load	demo number
000037B0 0240 0007                  		andi.w	#7,d0
000037B4 D040                       		add.w	d0,d0
000037B6 303B 0000                  		move.w	Demo_Levels(pc,d0.w),d0	; load level number for	demo
000037BA 31C0 FE10                  		move.w	d0,($FFFFFE10).w
000037BE 5278 FFF2                  		addq.w	#1,($FFFFFFF2).w ; add 1 to demo number
000037C2 0C78 0004 FFF2             		cmpi.w	#4,($FFFFFFF2).w ; is demo number less than 4?
000037C8 6500                       		bcs.s	loc_3422	; if yes, branch
000037CA 31FC 0000 FFF2             		move.w	#0,($FFFFFFF2).w ; reset demo number to	0
000037D0                            
000037D0                            loc_3422:
000037D0 31FC 0001 FFF0             		move.w	#1,($FFFFFFF0).w ; turn	demo mode on
000037D6 11FC 0008 F600             		move.b	#8,($FFFFF600).w ; set screen mode to 08 (demo)
000037DC 0C40 0600                  		cmpi.w	#$600,d0	; is level number 0600 (special	stage)?
000037E0 6600                       		bne.s	Demo_Level	; if not, branch
000037E2 11FC 0010 F600             		move.b	#$10,($FFFFF600).w ; set screen	mode to	$10 (Special Stage)
000037E8 4278 FE10                  		clr.w	($FFFFFE10).w	; clear	level number
000037EC 4238 FE16                  		clr.b	($FFFFFE16).w	; clear	special	stage number
000037F0                            
000037F0                            Demo_Level:
000037F0 11FC 0027 FE12             		move.b	#39,($FFFFFE12).w ; set lives to	3
000037F6 7000                       		moveq	#0,d0
000037F8 31C0 FE20                  		move.w	d0,($FFFFFE20).w ; clear rings
000037FC 21C0 FE22                  		move.l	d0,($FFFFFE22).w ; clear time
00003800 21C0 FE26                  		move.l	d0,($FFFFFE26).w ; clear score
00003804 4E75                       		rts	
00003806                            ; ===========================================================================
00003806                            ; ---------------------------------------------------------------------------
00003806                            ; Levels used in demos
00003806                            ; ---------------------------------------------------------------------------
00003806                            Demo_Levels:	incbin	misc\dm_ord1.bin
0000380E                            		even
0000380E                            
0000380E                            ; ---------------------------------------------------------------------------
0000380E                            ; Subroutine to	change what you're selecting in the level select
0000380E                            ; ---------------------------------------------------------------------------
0000380E                            
0000380E                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000380E                            
0000380E                            
0000380E                            LevSelControls:				; XREF: LevelSelect
0000380E 1238 F605                  		move.b	($FFFFF605).w,d1
00003812 0201 0003                  		andi.b	#3,d1		; is up/down pressed and held?
00003816 6600                       		bne.s	LevSel_UpDown	; if yes, branch
00003818 5378 FF80                  		subq.w	#1,($FFFFFF80).w ; subtract 1 from time	to next	move
0000381C 6A00 0000                  		bpl.w	LevSel_SndTest	; if time remains, branch
00003820                            
00003820                            LevSel_UpDown:
00003820 31FC 000B FF80             		move.w	#$B,($FFFFFF80).w ; reset time delay
00003826 1238 F604                  		move.b	($FFFFF604).w,d1
0000382A 0201 0003                  		andi.b	#3,d1		; is up/down pressed?
0000382E 6700 0000                  		beq.w	LevSel_SndTest	; if not, branch
00003832 3C38 FF82                  		move.w	($FFFFFF82).w,d6
00003836 0801 0000                  		btst	#0,d1		; is up	pressed?
0000383A 6700                       		beq.s	LevSel_Down	; if not, branch
0000383C 5346                       		subq.w	#1,d6		; move up 1 selection
0000383E 6400                       		bcc.s	LevSel_Down
00003840 7C00                       		moveq	#lsselectable,d6		; if selection moves below 0, jump to last selection
00003842                            
00003842                            LevSel_Down:
00003842 0801 0001                  		btst	#1,d1		; is down pressed?
00003846 6700                       		beq.s	LevSel_Refresh	; if not, branch
00003848 5246                       		addq.w	#1,d6		; move down 1 selection
0000384A 0C46 0000                  		cmpi.w	#lsselectable+1,d6
0000384E 6500                       		bcs.s	LevSel_Refresh
00003850 7C00                       		moveq	#0,d6		; if selection moves above last selectable,	jump to	selection 0
00003852 6000                       		bra.s	LevSel_Refresh
00003854                            		
00003854                            LevSel_LR:
00003854 0801 0002                  		btst	#2,d1		; is left pressed?
00003858 6700                       		beq.s	LevSel_Right	; if not, branch
0000385A 0446 0000                  		sub.w	#lsrow2size,d6
0000385E 64E2                       		bcc.s	LevSel_Down
00003860 0646 0000                  		add.w	#lsrow2size,d6	; don't jump
00003864                            LevSel_Right:
00003864 0801 0003                  		btst	#3,d1		; is right pressed?
00003868 6700                       		beq.s	LevSel_Refresh	; if not, branch
0000386A 0646 0000                  		add.w	#lsrow1size,d6
0000386E 0C46 0000                  		cmpi.w	#lsselectable+1,d6
00003872 6500                       		bcs.s	LevSel_Refresh
00003874 0446 0000                  		sub.w	#lsrow1size,d6	; don't jump
00003878                            ; ===========================================================================
00003878                            LevSel_Refresh:
00003878                            		
00003878 363C E65F                  		move.w	#$E680-$21,d3	; VRAM setting
0000387C 6100 0000                  		bsr.w	LevSelHighlightCode	; refresh text
00003880                            		
00003880 0C78 0000 FF82             		cmpi.w	#lssndtest,($FFFFFF82).w
00003886 6600                       		bne.s	@exitsndtest
00003888                            		
00003888 363C C65F                  		move.w	#$C680-$21,d3	; VRAM setting
0000388C 43F9 0000 0000             		lea	(Controls_Normal).l,a1
00003892 2D7C 6D02 0003 0004        		move.l	#lsctrlpos,4(a6)
0000389A 6100 0000                  		bsr.w	CStringSlop
0000389E                            	@exitsndtest:
0000389E                            	
0000389E 363C C65F                  		move.w	#$C680-$21,d3
000038A2 31C6 FF82                  		move.w	d6,($FFFFFF82).w ; set new selection
000038A6 6100 0000                  		bsr.w	LevSelHighlightCode	; refresh text
000038AA                            		
000038AA 0C78 0000 FF82             		cmpi.w	#lssndtest,($FFFFFF82).w 
000038B0 6600                       		bne.s	@entersndtest
000038B2                            		
000038B2 363C C65F                  		move.w	#$C680-$21,d3
000038B6 43F9 0000 0000             		lea	(Controls_SND).l,a1
000038BC 2D7C 6D02 0003 0004        		move.l	#lsctrlpos,4(a6)
000038C4 6100 0000                  		bsr.w	CStringSlop
000038C8                            	@entersndtest:
000038C8 4E75                       		rts	
000038CA                            		
000038CA                            LevSel_SndTest:				; XREF: LevSelControls
000038CA 1238 F605                  		move.b	($FFFFF605).w,d1
000038CE 0201 005C                  		andi.b	#$5C,d1		; is left/right/a/b	pressed?
000038D2 6700                       		beq.s	LevSel_NoMove	; if not, branch
000038D4 0C78 0000 FF82             		cmpi.w	#lssndtest,($FFFFFF82).w ; is item $14 selected?
000038DA 6600 FF78                  		bne.w	LevSel_LR	; if not, branch
000038DE                            		
000038DE 1038 FF84                  		move.b	($FFFFFF84).w,d0
000038E2 0801 0002                  		btst	#2,d1		; is left pressed?
000038E6 6700                       		beq.s	SndTest_Right	; if not, branch
000038E8 5300                       		subq.b	#1,d0		; subtract 1 from sound	test
000038EA                            		; no need the fact it's a byte does the trick
000038EA                            
000038EA                            SndTest_Right:
000038EA 0801 0003                  		btst	#3,d1		; is right pressed?
000038EE 6700                       		beq.s	SndTest_A	; if not, branch
000038F0 5200                       		addq.b	#1,d0		; add 1	to sound test
000038F2                            		; same here
000038F2                            		
000038F2                            SndTest_A:
000038F2 0801 0006                  		btst	#6,d1		; is A pressed?
000038F6 6700                       		beq.s	SndTest_B	; if not, branch
000038F8 5100                       		subq.b	#8,d0		; subtract $10 to sound test
000038FA 5100                       		subq.b	#8,d0
000038FC                            		
000038FC                            SndTest_B:
000038FC 0801 0004                  		btst	#4,d1		; is B pressed?
00003900 6700                       		beq.s	SndTest_Refresh	; if not, branch
00003902 5000                       		addq.b	#8,d0		; add $10 to sound test
00003904 5000                       		addq.b	#8,d0
00003906                            
00003906                            SndTest_Refresh:
00003906 363C C65F                  		move.w	#$C680-$21,d3
0000390A 11C0 FF84                  		move.b	d0,($FFFFFF84).w ; set sound test number
0000390E 6000 0000                  		bra.w	LevSelSndTest	; refresh text
00003912                            
00003912                            LevSel_NoMove:
00003912 4E75                       		rts	
00003914                            ; End of function LevSelControls
00003914                            
00003914                            ; ---------------------------------------------------------------------------
00003914                            ; Subroutine to load level select text
00003914                            ; ---------------------------------------------------------------------------
00003914                            
00003914                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00003914                            
00003914                            LevSelTextLoad_loop:
00003914 2D44 0004                  		move.l	d4,4(a6)
00003918 6100 0000                  		bsr.w	LevSel_ChgLine
0000391C 0684 0080 0000             		addi.l	#$800000,d4
00003922 51C9 FFF0                  		dbf.w	d1,LevSelTextLoad_loop
00003926 4E75                       		rts
00003928                            LevSelTextLoad:				; XREF: TitleScreen
00003928 43F9 0000 0000             		lea	(LevelMenuText).l,a1
0000392E 4DF9 00C0 0000             		lea	($C00000).l,a6
00003934 363C E65F                  		move.w	#$E680-$21,d3	; VRAM setting
00003938 283C 6086 0003             		move.l	#lsscrpos,d4	; screen position (text)
0000393E                            		
0000393E 323C 0000                  		move.w	#lsrow1size-1,d1		; number of lines of text (first row)
00003942 61D0                       		bsr.s	LevSelTextLoad_loop
00003944                            		
00003944                            		
00003944 283C 60AA 0003             		move.l	#lsscrpos+lsoff,d4
0000394A 323C 0000                  		move.w	#lsrow2size-1,d1		; number of lines of text (second row)
0000394E 61C4                       		bsr.s	LevSelTextLoad_loop
00003950 363C C65F                  		move.w	#$C680-$21,d3
00003954                            		
00003954                            LevSelHighlightCode:
00003954 4DF9 00C0 0000             		lea	($C00000).l,a6
0000395A 7000                       		moveq	#0,d0
0000395C 3038 FF82                  		move.w	($FFFFFF82).w,d0
00003960 3200                       		move.w	d0,d1
00003962 283C 6086 0003             		move.l	#lsscrpos,d4
00003968                            		
00003968 0C40 0000                  		cmpi.w	#lsrow1size,d0
0000396C 6D00                       		blt.s	@notsecond
0000396E                            		
0000396E 0440 0000                  		sub.w	#lsrow1size,d0
00003972 0684 0024 0000             		addi.l	#lsoff,d4
00003978                            	@notsecond:
00003978 EF48                       		lsl.w	#7,d0
0000397A 4840                       		swap	d0
0000397C D880                       		add.l	d0,d4
0000397E 43F9 0000 0000             		lea	(LevelMenuText).l,a1
00003984 E749                       		lsl.w	#3,d1
00003986 D241                       		add.w	d1,d1
00003988 D2C1                       		adda.w	d1,a1
0000398A 2D44 0004                  		move.l	d4,4(a6)
0000398E 6100 0000                  		bsr.w	LevSel_ChgLine
00003992 0C78 0000 FF82             		cmpi.w	#lssndtest,($FFFFFF82).w
00003998 6700                       		beq.s	LevSelSndTest
0000399A 4E75                       		rts
0000399C                            
0000399C                            LevSelSndTest:
0000399C 0643 0030                  		add.w	#$30,d3
000039A0 23FC 64C2 0003 00C0 0004   		move.l	#lsstpos,($C00004).l ; screen	position (sound	test)
000039AA 1038 FF84                  		move.b	($FFFFFF84).w,d0
000039AE 1400                       		move.b	d0,d2
000039B0 E808                       		lsr.b	#4,d0
000039B2 6100 0000                  		bsr.w	LevSel_ChgSnd
000039B6 1002                       		move.b	d2,d0
000039B8 6100 0000                  		bsr.w	LevSel_ChgSnd
000039BC 4E75                       		rts	
000039BE                            ; End of function LevSelTextLoad
000039BE                            
000039BE                            
000039BE                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000039BE                            
000039BE                            
000039BE                            LevSel_ChgSnd:				; XREF: LevSelTextLoad
000039BE 0240 000F                  		andi.w	#$F,d0
000039C2 0C00 000A                  		cmpi.b	#$A,d0
000039C6 6500                       		bcs.s	loc_3580
000039C8 5E00                       		addi.b	#7,d0
000039CA                            
000039CA                            loc_3580:
000039CA D043                       		add.w	d3,d0
000039CC 3C80                       		move.w	d0,(a6)
000039CE 4E75                       		rts	
000039D0                            ; End of function LevSel_ChgSnd
000039D0                            
000039D0                            
000039D0                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000039D0                            
000039D0                            
000039D0                            LevSel_ChgLine:				; XREF: LevSelTextLoad
000039D0 740F                       		moveq	#$10-1,d2		; number of characters per line
000039D2                            
000039D2                            @loop:
000039D2 7000                       		moveq	#0,d0
000039D4 1019                       		move.b	(a1)+,d0
000039D6 0C00 0020                  		cmpi.b	#$20,d0
000039DA 6E00                       		bgt.s	@draw
000039DC 3CBC 0000                  		move.w	#0,(a6)
000039E0 51CA FFF0                  		dbf	d2,@loop
000039E4 4E75                       		rts	
000039E6                            ; ===========================================================================
000039E6                            
000039E6                            @draw:				; XREF: LevSel_ChgLine
000039E6 D043                       		add.w	d3,d0
000039E8 3C80                       		move.w	d0,(a6)
000039EA 51CA FFE6                  		dbf	d2,@loop
000039EE 4E75                       		rts	
000039F0                            ; End of function LevSel_ChgLine
000039F0                            		
000039F0                            CStringSlop_draw:
000039F0 D043                       		add.w	d3,d0
000039F2 3C80                       		move.w	d0,(a6)
000039F4                            CStringSlop:				; XREF: LevSelTextLoad
000039F4 7000                       		moveq	#0,d0
000039F6 1019                       		move.b	(a1)+,d0
000039F8 0C00 0020                  		cmpi.b	#$20,d0
000039FC 6EF2                       		bgt.s	CStringSlop_draw
000039FE                            		
000039FE 0C00 0001                  		cmpi.b	#1,d0
00003A02 6700                       		beq.s	@InsertSpaces
00003A04 6500                       		blo.s	@end
00003A06                            		
00003A06 3CBC 0000                  		move.w	#0,(a6)
00003A0A 60E8                       		bra.s	CStringSlop
00003A0C                            	@end:
00003A0C 4E75                       		rts
00003A0E                            	@InsertSpaces:
00003A0E 7000                       		moveq	#0,d0
00003A10 1019                       		move.b	(a1)+,d0
00003A12                            		
00003A12                            	@insert:
00003A12 3CBC 0000                  		move.w	#0,(a6)
00003A16 51C8 FFFA                  		dbf.w	d0,@insert
00003A1A 60D8                       		bra.s	CStringSlop
00003A1C                            ; End of function LevSel_ChgLine
00003A1C                            
00003A1C                            ; ===========================================================================
00003A1C                            ; ---------------------------------------------------------------------------
00003A1C                            ; Level	select menu text ( this stupid level select code was brought to you by the meltdown guy )
00003A1C                            ; ---------------------------------------------------------------------------
00003A1C                            LevelMenuText:	
00003A1C 4352 554E 4348 5920 524F+  		dc.b    "CRUNCHY ROLL   1"
00003A2C 2020 2020 2020 2020 2020+          dc.b    "               2"
00003A3C 2020 2020 2020 2020 2020+          dc.b    "               3"
00003A4C 4920 4C49 4B45 2046 494C+          dc.b    "I LIKE FILE    1"
00003A5C 2045 5850 4C4F 5245 5220+          dc.b    " EXPLORER      2"
00003A6C 2020 2020 2020 2020 2020+          dc.b    "               3"
00003A7C 4D41 5242 4C20 2020 2020+          dc.b    "MARBL          1"
00003A8C 2020 2020 2020 2020 2020+          dc.b    "               2"
00003A9C 2020 2020 2020 2020 2020+          dc.b    "               3"
00003AAC 444F 4E54 4745 5452 4944+          dc.b    "DONTGETRIDOTHIS1"
00003ABC 2020 2020 2020 2020 2020+          dc.b    "               2"
00003ACC 2020 2020 2020 2020 2020+          dc.b    "               3"
00003ADC                            LMTSecondRow:
00003ADC 5448 4520 5049 4720 4652+          dc.b    "THE PIG FROM   1"
00003AEC 2042 4152 4E59 4152 4420+          dc.b    " BARNYARD      2"
00003AFC 2020 2020 2020 2020 2020+          dc.b    "               3"
00003B0C 5A20 5A20 5A20 5A20 2020+          dc.b    "Z Z Z Z        1"
00003B1C 2020 2020 2020 2020 2020+          dc.b    "               2"
00003B2C 2020 2020 2020 2020 2020+          dc.b    "               3"
00003B3C 4649 4E41 4C20 5A4F 4E45+          dc.b    "FINAL ZONE      "
00003B4C 5350 4543 4941 4C20 5354+          dc.b    "SPECIAL STAGE   "
00003B5C 534F 554E 4420 5445 5354+          dc.b    "SOUND TEST $    "
00003B6C 4652 4545 2057 4946 4920+  		dc.b	"FREE WIFI       "
00003B7C 4F50 5449 4F4E 5320 4C41+  		dc.b	"OPTIONS LATER   "
00003B8C                            LMTSelectableEnd:
00003B8C 4341 4E54 2054 4F55 4348+  		dc.b	"CANT TOUCH ME XD"
00003B9C                            LMTEnd:
00003B9C                            
00003B9C                            Now_Playing:
00003B9C 3E3E 3E4E 4F57 2050 4C41+  		dc.b	">>>NOW PLAYING ",0
00003BAC                            		even
00003BAC                            NP_Track:
00003BAC 5452 4143 4B20 2400        		dc.b	"TRACK $",0
00003BB4                            		even
00003BB4                            NP_SFX:
00003BB4 534F 554E 4420 2400        		dc.b	"SOUND $",0
00003BBC                            		even
00003BBC                            
00003BBC                            ShowNow_Playing:
00003BBC 1C00                       		move.b	d0,d6
00003BBE 363C C65F                  		move.w	#$C680-$21,d3	; VRAM setting
00003BC2 43FA FFD8                  		lea	Now_Playing(pc),a1
00003BC6 4DF9 00C0 0000             		lea		($C00000).l,a6
00003BCC 2D7C 6C82 0003 0004        		move.l	#lsnppos,4(a6)
00003BD4 6100 FE1E                  		bsr.w	CStringSlop
00003BD8                            		
00003BD8 43FA FFD2                  		lea	NP_Track(pc),a1
00003BDC 0C06 00A0                  		cmpi.b	#$A0,d6
00003BE0 6D00                       		blt.s	@track
00003BE2                            		
00003BE2 43FA FFD0                  		lea	NP_SFX(pc),a1
00003BE6                            	@track:
00003BE6 6100 FE0C                  		bsr.w	CStringSlop
00003BEA                            		
00003BEA 0643 0030                  		add.w	#$30,d3
00003BEE 1006                       		move.b	d6,d0
00003BF0 1400                       		move.b	d0,d2
00003BF2 E808                       		lsr.b	#4,d0
00003BF4 6100 FDC8                  		bsr.w	LevSel_ChgSnd
00003BF8 1002                       		move.b	d2,d0
00003BFA 6100 FDC2                  		bsr.w	LevSel_ChgSnd
00003BFE 4E75                       		rts	
00003C00                            
00003C00                            ; 1 is insert spaces btw
00003C00                            Controls_Normal:
00003C00 414E 593A 2050 4C41 5901+  		dc.b	"ANY: PLAY",1,27,0
00003C0C                            		even		
00003C0C                            Controls_SND:
00003C0C 413A 202D 3130 2020 423A+  		dc.b	"A: -10  B: +10  C: PLAY  START: QUIT",0
00003C32 00                         		even
00003C32                            ; ---------------------------------------------------------------------------
00003C32                            ; Music	playlist
00003C32                            ; ---------------------------------------------------------------------------
00003C32                            MusicList1:	incbin	misc\muslist1.bin
00003C3A                            		even
00003C3A                            MusicList2:	incbin	misc\muslist2.bin
00003C40                            		even
00003C40                            MusicList3:	incbin	misc\muslist3.bin
00003C46                            		even
00003C46                            MusicList4:	incbin	misc\muslist4.bin
00003C4C                            		even
00003C4C                            ; ===========================================================================
00003C4C                            
00003C4C                            ; ---------------------------------------------------------------------------
00003C4C                            ; Level
00003C4C                            ; ---------------------------------------------------------------------------
00003C4C                            
00003C4C                            Level:					; XREF: GameModeArray
00003C4C 08F8 0007 F600             		bset	#7,($FFFFF600).w ; add $80 to screen mode (for pre level sequence)
00003C52 4A78 FFF0                  		tst.w	($FFFFFFF0).w
00003C56 6B00                       		bmi.s	loc_37B6
00003C58 103C 00E0                  		move.b	#$E0,d0
00003C5C 6100 D962                  		bsr.w	PlaySound_Special ; fade out music
00003C60                            
00003C60                            loc_37B6:
00003C60 6100 DBA0                  		bsr.w	ClearPLC
00003C64 6100 E3D6                  		bsr.w	Pal_FadeFrom
00003C68 4A78 FFF0                  		tst.w	($FFFFFFF0).w
00003C6C 6B00                       		bmi.s	Level_ClrRam
00003C6E 46FC 2700                  		move	#$2700,sr
00003C72 23FC 7000 0002 00C0 0004   		move.l	#$70000002,($C00004).l
00003C7C 41F9 0000 0000             		lea	(Nem_TitleCard).l,a0 ; load title card patterns
00003C82 6100 D9E0                  		bsr.w	NemDec
00003C86 46FC 2300                  		move	#$2300,sr
00003C8A 7000                       		moveq	#0,d0
00003C8C 1038 FE10                  		move.b	($FFFFFE10).w,d0
00003C90 E948                       		lsl.w	#4,d0
00003C92 45F9 0000 0000             		lea	(MainLoadBlocks).l,a2
00003C98 45F2 0000                  		lea	(a2,d0.w),a2
00003C9C 7000                       		moveq	#0,d0
00003C9E 1012                       		move.b	(a2),d0
00003CA0 6700                       		beq.s	loc_37FC
00003CA2 6100 DB00                  		bsr.w	LoadPLC		; load level patterns
00003CA6                            
00003CA6                            loc_37FC:
00003CA6 7001                       		moveq	#1,d0
00003CA8 6100 DAFA                  		bsr.w	LoadPLC		; load standard	patterns
00003CAC                            
00003CAC                            Level_ClrRam:
00003CAC 43F8 D000                  		lea	($FFFFD000).w,a1
00003CB0 7000                       		moveq	#0,d0
00003CB2 323C 07FF                  		move.w	#$7FF,d1
00003CB6                            
00003CB6                            Level_ClrObjRam:
00003CB6 22C0                       		move.l	d0,(a1)+
00003CB8 51C9 FFFC                  		dbf	d1,Level_ClrObjRam ; clear object RAM
00003CBC                            
00003CBC 43F8 F628                  		lea	($FFFFF628).w,a1
00003CC0 7000                       		moveq	#0,d0
00003CC2 323C 0015                  		move.w	#$15,d1
00003CC6                            
00003CC6                            Level_ClrVars:
00003CC6 22C0                       		move.l	d0,(a1)+
00003CC8 51C9 FFFC                  		dbf	d1,Level_ClrVars ; clear misc variables
00003CCC                            
00003CCC 43F8 F700                  		lea	($FFFFF700).w,a1
00003CD0 7000                       		moveq	#0,d0
00003CD2 323C 003F                  		move.w	#$3F,d1
00003CD6                            
00003CD6                            Level_ClrVars2:
00003CD6 22C0                       		move.l	d0,(a1)+
00003CD8 51C9 FFFC                  		dbf	d1,Level_ClrVars2 ; clear misc variables
00003CDC                            
00003CDC 43F8 FE60                  		lea	($FFFFFE60).w,a1
00003CE0 7000                       		moveq	#0,d0
00003CE2 323C 0047                  		move.w	#$47,d1
00003CE6                            
00003CE6                            Level_ClrVars3:
00003CE6 22C0                       		move.l	d0,(a1)+
00003CE8 51C9 FFFC                  		dbf	d1,Level_ClrVars3 ; clear object variables
00003CEC                            
00003CEC 46FC 2700                  		move	#$2700,sr
00003CF0 6100 D7F6                  		bsr.w	ClearScreen
00003CF4 4DF9 00C0 0004             		lea	($C00004).l,a6
00003CFA 3CBC 8B03                  		move.w	#$8B03,(a6)
00003CFE 3CBC 8230                  		move.w	#$8230,(a6)
00003D02 3CBC 8407                  		move.w	#$8407,(a6)
00003D06 3CBC 857C                  		move.w	#$857C,(a6)
00003D0A 3CBC 9001                  		move.w	#$9001,(a6)
00003D0E 3CBC 8004                  		move.w	#$8004,(a6)
00003D12 3CBC 8720                  		move.w	#$8720,(a6)
00003D16 31FC 8ADF F624             		move.w	#$8ADF,($FFFFF624).w
00003D1C 3CB8 F624                  		move.w	($FFFFF624).w,(a6)
00003D20 0C38 0001 FE10             		cmpi.b	#1,($FFFFFE10).w ; is level LZ?
00003D26 6600                       		bne.s	Level_LoadPal	; if not, branch
00003D28 3CBC 8014                  		move.w	#$8014,(a6)
00003D2C 7000                       		moveq	#0,d0
00003D2E 1038 FE11                  		move.b	($FFFFFE11).w,d0
00003D32 D040                       		add.w	d0,d0
00003D34 43F9 0000 0000             		lea	(WaterHeight).l,a1 ; load water	height array
00003D3A 3031 0000                  		move.w	(a1,d0.w),d0
00003D3E 31C0 F646                  		move.w	d0,($FFFFF646).w ; set water heights
00003D42 31C0 F648                  		move.w	d0,($FFFFF648).w
00003D46 31C0 F64A                  		move.w	d0,($FFFFF64A).w
00003D4A 4238 F64D                  		clr.b	($FFFFF64D).w	; clear	water routine counter
00003D4E 4238 F64E                  		clr.b	($FFFFF64E).w	; clear	water movement
00003D52 11FC 0001 F64C             		move.b	#1,($FFFFF64C).w ; enable water
00003D58 6000 0000                  		bra.w	Level_LoadPal
00003D5C                            Player_Palette:
00003D5C                            		; normal, lz, sbz, blank
00003D5C 0003 000F 0010 0000        		dc.w	3,$F,$10,0 ; Sonic 
00003D64                            		
00003D64 0015 0016 0017 0000        		dc.w	21,22,23,0 ; Pal_Gronic 
00003D6C 0018 0016 0017 0000        		dc.w	24,22,23,0 ; Pal_Anakama 
00003D74                            		; add more player palettes
00003D74                            Level_LoadPal:
00003D74 31FC 001E FE14             		move.w	#$1E,($FFFFFE14).w
00003D7A 46FC 2300                  		move	#$2300,sr
00003D7E                            
00003D7E 7200                       		moveq	#0,d1
00003D80 1238 FFE8                  		move.b	(v_character),d1
00003D84 D241                       		add.w	d1,d1
00003D86 D241                       		add.w	d1,d1
00003D88 D241                       		add.w	d1,d1
00003D8A 303B 10D0                  		move.w	Player_Palette(pc,d1.w),d0	; load palette
00003D8E                            		
00003D8E 6100 E572                  		bsr.w	PalLoad2	; load Sonic's pallet line
00003D92 0C38 0001 FE10             		cmpi.b	#1,($FFFFFE10).w ; is level LZ?
00003D98 6600                       		bne.s	Level_GetBgm	; if not, branch
00003D9A 303B 10C2                  		move.w	Player_Palette+2(pc,d1.w),d0	; load palette
00003D9E 0C38 0003 FE11             		cmpi.b	#3,($FFFFFE11).w ; is act number 3?
00003DA4 6600                       		bne.s	Level_WaterPal	; if not, branch
00003DA6 303B 10B8                  		move.w	Player_Palette+4(pc,d1.w),d0	; load palette
00003DAA                            
00003DAA                            Level_WaterPal:
00003DAA 6100 E56E                  		bsr.w	PalLoad3_Water	; load underwater pallet (see d0)
00003DAE 4A38 FE30                  		tst.b	($FFFFFE30).w
00003DB2 6700                       		beq.s	Level_GetBgm
00003DB4 11F8 FE53 F64E             		move.b	($FFFFFE53).w,($FFFFF64E).w
00003DBA                            
00003DBA                            ; NineKode begins here - How to play different songs on different acts
00003DBA                             
00003DBA                            Level_GetBgm:
00003DBA 4A78 FFF0                  		tst.w	($FFFFFFF0).w
00003DBE 6B00 0000                  		bmi.w	loc_3946	; change from bmi.s to bmi.w or you'll get an error
00003DC2 7000                       		moveq	#0,d0
00003DC4 1038 FE10                  		move.b	($FFFFFE10).w,d0
00003DC8                             
00003DC8 0C38 0000 FE11             		cmpi.b	#$0,($FFFFFE11).w	; is this act 1?
00003DCE 6600                       		bne.s	Level_GetBgm2	; if not, branch
00003DD0 43F9 0000 3C32             		lea	(MusicList1).l,a1	; load Music Playlist for Acts 1
00003DD6 6000                       		bra.s	Level_PlayBgm	; go to PlayBgm
00003DD8                             
00003DD8                            Level_GetBgm2:
00003DD8 0C38 0001 FE11             		cmpi.b	#$1,($FFFFFE11).w	; is this act 2?
00003DDE 6600                       		bne.s	Level_GetBgm3	; if not, branch
00003DE0 43F9 0000 3C3A             		lea	(MusicList2).l,a1	; load Music Playlist for Acts 2
00003DE6 6000                       		bra.s	Level_PlayBgm	; go to PlayBgm
00003DE8                             
00003DE8                            Level_GetBgm3:
00003DE8 0C38 0002 FE11             		cmpi.b	#$2,($FFFFFE11).w	; is this act 3?
00003DEE 6600                       		bne.s	Level_GetBgm4	; if not, branch
00003DF0 43F9 0000 3C40             		lea	(MusicList3).l,a1	; load Music Playlist for Acts 3
00003DF6 6000                       		bra.s	Level_PlayBgm	; go to PlayBgm
00003DF8                             
00003DF8                            Level_GetBgm4:
00003DF8 0C38 0003 FE11             		cmpi.b	#$3,($FFFFFE11).w	; is this act 4?
00003DFE 6600                       		bne.s	Level_PlayBgm	; if not, branch
00003E00 43F9 0000 3C46             		lea	(MusicList4).l,a1	; load Music Playlist for Acts 4
00003E06                             
00003E06                            Level_PlayBgm:
00003E06 1031 0000                  		move.b	(a1,d0.w),d0	; get d0-th entry from the playlist
00003E0A 6100 D7AE                  		bsr.w	PlaySound	; play music
00003E0E 11FC 0034 D080             		move.b	#$34,($FFFFD080).w ; load title	card object
00003E14                             
00003E14                            ; NineKode ends here
00003E14                            
00003E14                            Level_TtlCard:
00003E14 11FC 000C F62A             		move.b	#$C,($FFFFF62A).w
00003E1A 6100 EE5E                  		bsr.w	DelayProgram
00003E1E 4EB9 0000 0000             		jsr	ObjectsLoad
00003E24 4EB9 0000 0000             		jsr	BuildSprites
00003E2A 6100 D9E4                  		bsr.w	RunPLC_RAM
00003E2E 3038 D108                  		move.w	($FFFFD108).w,d0
00003E32 B078 D130                  		cmp.w	($FFFFD130).w,d0 ; has title card sequence finished?
00003E36 66DC                       		bne.s	Level_TtlCard	; if not, branch
00003E38 4AB8 F680                  		tst.l	($FFFFF680).w	; are there any	items in the pattern load cue?
00003E3C 66D6                       		bne.s	Level_TtlCard	; if yes, branch
00003E3E 4EB9 0000 0000             		jsr	Hud_Base
00003E44                            
00003E44                            loc_3946:
00003E44 7003                       		moveq	#3,d0
00003E46 6100 E49E                  		bsr.w	PalLoad1	; load Sonic's pallet line
00003E4A 6100 0000                  		bsr.w	LevelSizeLoad
00003E4E 6100 0000                  		bsr.w	DeformBgLayer
00003E52 08F8 0002 F754             		bset	#2,($FFFFF754).w
00003E58 6100 0000                  		bsr.w	MainLoadBlockLoad ; load block mappings	and pallets
00003E5C 6100 0000                  		bsr.w	LoadTilesFromStart
00003E60 4EB9 0000 0000             		jsr	FloorLog_Unk
00003E66 6100 0000                  		bsr.w	ColIndexLoad
00003E6A 6100 0000                  		bsr.w	LZWaterEffects
00003E6E 11FC 0001 D000             		move.b	#1,($FFFFD000).w ; load	Sonic object
00003E74 4A78 FFF0                  		tst.w	($FFFFFFF0).w
00003E78 6B00                       		bmi.s	Level_ChkDebug
00003E7A 11FC 0021 D040             		move.b	#$21,($FFFFD040).w ; load HUD object
00003E80                            
00003E80                            Level_ChkDebug:
00003E80 4A38 FFE2                  		tst.b	($FFFFFFE2).w	; has debug cheat been entered?
00003E84 6700                       		beq.s	Level_ChkWater	; if not, branch
00003E86 0838 0006 F604             		btst	#6,($FFFFF604).w ; is A	button pressed?
00003E8C 6700                       		beq.s	Level_ChkWater	; if not, branch
00003E8E 11FC 0001 FFFA             		move.b	#1,($FFFFFFFA).w ; enable debug	mode
00003E94                            
00003E94                            Level_ChkWater:
00003E94 31FC 0000 F602             		move.w	#0,($FFFFF602).w
00003E9A 31FC 0000 F604             		move.w	#0,($FFFFF604).w
00003EA0 0C38 0001 FE10             		cmpi.b	#1,($FFFFFE10).w ; is level LZ?
00003EA6 6600                       		bne.s	Level_LoadObj	; if not, branch
00003EA8 11FC 001B D780             		move.b	#$1B,($FFFFD780).w ; load water	surface	object
00003EAE 31FC 0060 D788             		move.w	#$60,($FFFFD788).w
00003EB4 11FC 001B D7C0             		move.b	#$1B,($FFFFD7C0).w
00003EBA 31FC 0120 D7C8             		move.w	#$120,($FFFFD7C8).w
00003EC0                            
00003EC0                            Level_LoadObj:
00003EC0 4EB9 0000 0000             		jsr	ObjPosLoad
00003EC6 4EB9 0000 0000             		jsr	ObjectsLoad
00003ECC 4EB9 0000 0000             		jsr	BuildSprites
00003ED2 7000                       		moveq	#0,d0
00003ED4 4A38 FE30                  		tst.b	($FFFFFE30).w	; are you starting from	a lamppost?
00003ED8 6600                       		bne.s	loc_39E8	; if yes, branch
00003EDA 31C0 FE20                  		move.w	d0,($FFFFFE20).w ; clear rings
00003EDE 21C0 FE22                  		move.l	d0,($FFFFFE22).w ; clear time
00003EE2 11C0 FE1B                  		move.b	d0,($FFFFFE1B).w ; clear lives counter
00003EE6                            
00003EE6                            loc_39E8:
00003EE6 11C0 FE1A                  		move.b	d0,($FFFFFE1A).w
00003EEA 11C0 FE2C                  		move.b	d0,($FFFFFE2C).w ; clear shield
00003EEE 11C0 FE2D                  		move.b	d0,($FFFFFE2D).w ; clear invincibility
00003EF2 11C0 FE2E                  		move.b	d0,($FFFFFE2E).w ; clear speed shoes
00003EF6                            		; move.b	d0,($FFFFFE2F).w
00003EF6 0238 0001 FE2F             		andi.b	#%00000001,($FFFFFE2F).w	; GMZ: Clear every flag in FE2F aside from reversed controls
00003EFC 31C0 FE08                  		move.w	d0,($FFFFFE08).w
00003F00 31C0 FE02                  		move.w	d0,($FFFFFE02).w
00003F04 31C0 FE04                  		move.w	d0,($FFFFFE04).w
00003F08 6100 0000                  		bsr.w	OscillateNumInit
00003F0C 11FC 0001 FE1F             		move.b	#1,($FFFFFE1F).w ; update score	counter
00003F12 11FC 0001 FE1D             		move.b	#1,($FFFFFE1D).w ; update rings	counter
00003F18 11FC 0001 FE1E             		move.b	#1,($FFFFFE1E).w ; update time counter
00003F1E 31FC 0000 F790             		move.w	#0,($FFFFF790).w
00003F24 43F9 0000 0000             		lea	(Demo_Index).l,a1 ; load demo data
00003F2A 7000                       		moveq	#0,d0
00003F2C 1038 FE10                  		move.b	($FFFFFE10).w,d0
00003F30 E548                       		lsl.w	#2,d0
00003F32 2271 0000                  		movea.l	(a1,d0.w),a1
00003F36 4A78 FFF0                  		tst.w	($FFFFFFF0).w	; is demo mode on?
00003F3A 6A00                       		bpl.s	Level_Demo	; if yes, branch
00003F3C 43F9 0000 0000             		lea	(Demo_EndIndex).l,a1 ; load ending demo	data
00003F42 3038 FFF4                  		move.w	($FFFFFFF4).w,d0
00003F46 5340                       		subq.w	#1,d0
00003F48 E548                       		lsl.w	#2,d0
00003F4A 2271 0000                  		movea.l	(a1,d0.w),a1
00003F4E                            
00003F4E                            Level_Demo:
00003F4E 11E9 0001 F792             		move.b	1(a1),($FFFFF792).w ; load key press duration
00003F54 5338 F792                  		subq.b	#1,($FFFFF792).w ; subtract 1 from duration
00003F58 31FC 0708 F614             		move.w	#1800,($FFFFF614).w
00003F5E 4A78 FFF0                  		tst.w	($FFFFFFF0).w
00003F62 6A00                       		bpl.s	Level_ChkWaterPal
00003F64 31FC 021C F614             		move.w	#540,($FFFFF614).w
00003F6A 0C78 0004 FFF4             		cmpi.w	#4,($FFFFFFF4).w
00003F70 6600                       		bne.s	Level_ChkWaterPal
00003F72 31FC 01FE F614             		move.w	#510,($FFFFF614).w
00003F78                            
00003F78                            Level_ChkWaterPal:
00003F78 0C38 0001 FE10             		cmpi.b	#1,($FFFFFE10).w ; is level LZ/SBZ3?
00003F7E 6600                       		bne.s	Level_Delay	; if not, branch
00003F80 700B                       		moveq	#$B,d0		; pallet $0B (LZ underwater)
00003F82 0C38 0003 FE11             		cmpi.b	#3,($FFFFFE11).w ; is level SBZ3?
00003F88 6600                       		bne.s	Level_WaterPal2	; if not, branch
00003F8A 700D                       		moveq	#$D,d0		; pallet $0D (SBZ3 underwater)
00003F8C                            
00003F8C                            Level_WaterPal2:
00003F8C 6100 E3A8                  		bsr.w	PalLoad4_Water
00003F90                            
00003F90                            Level_Delay:
00003F90 323C 0003                  		move.w	#3,d1
00003F94                            
00003F94                            Level_DelayLoop:
00003F94 11FC 0008 F62A             		move.b	#8,($FFFFF62A).w
00003F9A 6100 ECDE                  		bsr.w	DelayProgram
00003F9E 51C9 FFF4                  		dbf	d1,Level_DelayLoop
00003FA2                            
00003FA2 31FC 202F F626             		move.w	#$202F,($FFFFF626).w
00003FA8 6100 DFF2                  		bsr.w	Pal_FadeTo2
00003FAC 4A78 FFF0                  		tst.w	($FFFFFFF0).w
00003FB0 6B00                       		bmi.s	Level_ClrCardArt
00003FB2 5438 D0A4                  		addq.b	#2,($FFFFD0A4).w ; make	title card move
00003FB6 5838 D0E4                  		addq.b	#4,($FFFFD0E4).w
00003FBA 5838 D124                  		addq.b	#4,($FFFFD124).w
00003FBE 5838 D164                  		addq.b	#4,($FFFFD164).w
00003FC2 6000                       		bra.s	Level_StartGame
00003FC4                            ; ===========================================================================
00003FC4                            
00003FC4                            Level_ClrCardArt:
00003FC4 7002                       		moveq	#2,d0
00003FC6 4EB9 0000 17A4             		jsr	(LoadPLC).l	; load explosion patterns
00003FCC 7000                       		moveq	#0,d0
00003FCE 1038 FE10                  		move.b	($FFFFFE10).w,d0
00003FD2 0640 0015                  		addi.w	#$15,d0
00003FD6 4EB9 0000 17A4             		jsr	(LoadPLC).l	; load animal patterns (level no. + $15)
00003FDC                            
00003FDC                            Level_StartGame:
00003FDC 08B8 0007 F600             		bclr	#7,($FFFFF600).w ; subtract 80 from screen mode
00003FE2                            
00003FE2                            ; ---------------------------------------------------------------------------
00003FE2                            ; Main level loop (when	all title card and loading sequences are finished)
00003FE2                            ; ---------------------------------------------------------------------------
00003FE2                            
00003FE2                            Level_MainLoop:
00003FE2 6100 D5E8                  		bsr.w	PauseGame
00003FE6 11FC 0008 F62A             		move.b	#8,($FFFFF62A).w
00003FEC 6100 EC8C                  		bsr.w	DelayProgram
00003FF0 5278 FE04                  		addq.w	#1,($FFFFFE04).w ; add 1 to level timer
00003FF4 6100 0000                  		bsr.w	MoveSonicInDemo
00003FF8 6100 0000                  		bsr.w	LZWaterEffects
00003FFC 4EB9 0000 0000             		jsr	ObjectsLoad
00004002 4A78 FE08                  		tst.w	($FFFFFE08).w
00004006 6600                       		bne.s	loc_3B10
00004008 0C38 0006 D024             		cmpi.b	#6,($FFFFD024).w
0000400E 6400                       		bcc.s	loc_3B14
00004010                            
00004010                            loc_3B10:
00004010 6100 0000                  		bsr.w	DeformBgLayer
00004014                            
00004014                            loc_3B14:
00004014 4EB9 0000 0000             		jsr	BuildSprites
0000401A 4EB9 0000 0000             		jsr	ObjPosLoad
00004020 6100 DB3E                  		bsr.w	PalCycle_Load
00004024 6100 D7EA                  		bsr.w	RunPLC_RAM
00004028 6100 0000                  		bsr.w	OscillateNumDo
0000402C 6100 0000                  		bsr.w	ChangeRingFrame
00004030 6100 0000                  		bsr.w	SignpostArtLoad
00004034 0C38 0008 F600             		cmpi.b	#8,($FFFFF600).w
0000403A 6700                       		beq.s	Level_ChkDemo	; if screen mode is 08 (demo), branch
0000403C 4A78 FE02                  		tst.w	($FFFFFE02).w	; is the level set to restart?
00004040 6600 FC0A                  		bne.w	Level		; if yes, branch
00004044 0C38 000C F600             		cmpi.b	#$C,($FFFFF600).w
0000404A 6700 FF96                  		beq.w	Level_MainLoop	; if screen mode is $0C	(level), branch
0000404E 4E75                       		rts	
00004050                            ; ===========================================================================
00004050                            
00004050                            Level_ChkDemo:				; XREF: Level_MainLoop
00004050 4A78 FE02                  		tst.w	($FFFFFE02).w	; is level set to restart?
00004054 6600                       		bne.s	Level_EndDemo	; if yes, branch
00004056 4A78 F614                  		tst.w	($FFFFF614).w	; is there time	left on	the demo?
0000405A 6700                       		beq.s	Level_EndDemo	; if not, branch
0000405C 0C38 0008 F600             		cmpi.b	#8,($FFFFF600).w
00004062 6700 FF7E                  		beq.w	Level_MainLoop	; if screen mode is 08 (demo), branch
00004066 11FC 0000 F600             		move.b	#0,($FFFFF600).w ; go to Sega screen
0000406C 4E75                       		rts	
0000406E                            ; ===========================================================================
0000406E                            
0000406E                            Level_EndDemo:				; XREF: Level_ChkDemo
0000406E 0C38 0008 F600             		cmpi.b	#8,($FFFFF600).w ; is screen mode 08 (demo)?
00004074 6600                       		bne.s	loc_3B88	; if not, branch
00004076 11FC 0000 F600             		move.b	#0,($FFFFF600).w ; go to Sega screen
0000407C 4A78 FFF0                  		tst.w	($FFFFFFF0).w	; is demo mode on?
00004080 6A00                       		bpl.s	loc_3B88	; if yes, branch
00004082 11FC 001C F600             		move.b	#$1C,($FFFFF600).w ; go	to credits
00004088                            
00004088                            loc_3B88:
00004088 31FC 003C F614             		move.w	#$3C,($FFFFF614).w
0000408E 31FC 003F F626             		move.w	#$3F,($FFFFF626).w
00004094 4278 F794                  		clr.w	($FFFFF794).w
00004098                            
00004098                            loc_3B98:
00004098 11FC 0008 F62A             		move.b	#8,($FFFFF62A).w
0000409E 6100 EBDA                  		bsr.w	DelayProgram
000040A2 6100 0000                  		bsr.w	MoveSonicInDemo
000040A6 4EB9 0000 0000             		jsr	ObjectsLoad
000040AC 4EB9 0000 0000             		jsr	BuildSprites
000040B2 4EB9 0000 0000             		jsr	ObjPosLoad
000040B8 5378 F794                  		subq.w	#1,($FFFFF794).w
000040BC 6A00                       		bpl.s	loc_3BC8
000040BE 31FC 0002 F794             		move.w	#2,($FFFFF794).w
000040C4 6100 DF96                  		bsr.w	Pal_FadeOut
000040C8                            
000040C8                            loc_3BC8:
000040C8 4A78 F614                  		tst.w	($FFFFF614).w
000040CC 66CA                       		bne.s	loc_3B98
000040CE 4E75                       		rts	
000040D0                            ; ===========================================================================
000040D0                            ; ---------------------------------------------------------------------------
000040D0                            ; Subroutine to	do special water effects in Labyrinth Zone
000040D0                            ; ---------------------------------------------------------------------------
000040D0                            
000040D0                            LZWaterEffects:				; XREF: Level
000040D0 0C38 0001 FE10             		cmpi.b	#1,($FFFFFE10).w ; check if level is LZ
000040D6 6600                       		bne.s	locret_3C28	; if not, branch
000040D8 0C38 0006 D024             		cmpi.b	#6,($FFFFD024).w
000040DE 6400                       		bcc.s	LZMoveWater
000040E0 6100 0000                  		bsr.w	LZWindTunnels
000040E4 6100 0000                  		bsr.w	LZWaterSlides
000040E8 6100 0000                  		bsr.w	LZDynamicWater
000040EC                            
000040EC                            LZMoveWater:
000040EC 4238 F64E                  		clr.b	($FFFFF64E).w
000040F0 7000                       		moveq	#0,d0
000040F2 1038 FE60                  		move.b	($FFFFFE60).w,d0
000040F6 E248                       		lsr.w	#1,d0
000040F8 D078 F648                  		add.w	($FFFFF648).w,d0
000040FC 31C0 F646                  		move.w	d0,($FFFFF646).w
00004100 3038 F646                  		move.w	($FFFFF646).w,d0
00004104 9078 F704                  		sub.w	($FFFFF704).w,d0
00004108 6400                       		bcc.s	loc_3C1A
0000410A 4A40                       		tst.w	d0
0000410C 6A00                       		bpl.s	loc_3C1A
0000410E 11FC 00DF F625             		move.b	#-$21,($FFFFF625).w
00004114 11FC 0001 F64E             		move.b	#1,($FFFFF64E).w
0000411A                            
0000411A                            loc_3C1A:
0000411A 0C40 00DF                  		cmpi.w	#$DF,d0
0000411E 6500                       		bcs.s	loc_3C24
00004120 303C 00DF                  		move.w	#$DF,d0
00004124                            
00004124                            loc_3C24:
00004124 11C0 F625                  		move.b	d0,($FFFFF625).w
00004128                            
00004128                            locret_3C28:
00004128 4E75                       		rts	
0000412A                            ; ===========================================================================
0000412A                            ; ---------------------------------------------------------------------------
0000412A                            ; Labyrinth default water heights
0000412A                            ; ---------------------------------------------------------------------------
0000412A                            WaterHeight:	incbin	misc\lz_heigh.bin
00004132                            		even
00004132                            ; ===========================================================================
00004132                            
00004132                            ; ---------------------------------------------------------------------------
00004132                            ; Labyrinth dynamic water routines
00004132                            ; ---------------------------------------------------------------------------
00004132                            
00004132                            LZDynamicWater:				; XREF: LZWaterEffects
00004132 7000                       		moveq	#0,d0
00004134 1038 FE11                  		move.b	($FFFFFE11).w,d0
00004138 D040                       		add.w	d0,d0
0000413A 303B 0000                  		move.w	DynWater_Index(pc,d0.w),d0
0000413E 4EBB 0000                  		jsr	DynWater_Index(pc,d0.w)
00004142 7200                       		moveq	#0,d1
00004144 1238 F64C                  		move.b	($FFFFF64C).w,d1
00004148 3038 F64A                  		move.w	($FFFFF64A).w,d0
0000414C 9078 F648                  		sub.w	($FFFFF648).w,d0
00004150 6700                       		beq.s	locret_3C5A
00004152 6400                       		bcc.s	loc_3C56
00004154 4441                       		neg.w	d1
00004156                            
00004156                            loc_3C56:
00004156 D378 F648                  		add.w	d1,($FFFFF648).w
0000415A                            
0000415A                            locret_3C5A:
0000415A 4E75                       		rts	
0000415C                            ; ===========================================================================
0000415C 0000                       DynWater_Index:	dc.w DynWater_LZ1-DynWater_Index
0000415E 0000                       		dc.w DynWater_LZ2-DynWater_Index
00004160 0000                       		dc.w DynWater_LZ3-DynWater_Index
00004162 0000                       		dc.w DynWater_SBZ3-DynWater_Index
00004164                            ; ===========================================================================
00004164                            
00004164                            DynWater_LZ1:				; XREF: DynWater_Index
00004164 3038 F700                  		move.w	($FFFFF700).w,d0
00004168 1438 F64D                  		move.b	($FFFFF64D).w,d2
0000416C 6600                       		bne.s	loc_3CD0
0000416E 323C 00B8                  		move.w	#$B8,d1
00004172 0C40 0600                  		cmpi.w	#$600,d0
00004176 6500                       		bcs.s	loc_3CB4
00004178 323C 0108                  		move.w	#$108,d1
0000417C 0C78 0200 D00C             		cmpi.w	#$200,($FFFFD00C).w
00004182 6500                       		bcs.s	loc_3CBA
00004184 0C40 0C00                  		cmpi.w	#$C00,d0
00004188 6500                       		bcs.s	loc_3CB4
0000418A 323C 0318                  		move.w	#$318,d1
0000418E 0C40 1080                  		cmpi.w	#$1080,d0
00004192 6500                       		bcs.s	loc_3CB4
00004194 11FC 0080 F7E5             		move.b	#-$80,($FFFFF7E5).w
0000419A 323C 05C8                  		move.w	#$5C8,d1
0000419E 0C40 1380                  		cmpi.w	#$1380,d0
000041A2 6500                       		bcs.s	loc_3CB4
000041A4 323C 03A8                  		move.w	#$3A8,d1
000041A8 B278 F648                  		cmp.w	($FFFFF648).w,d1
000041AC 6600                       		bne.s	loc_3CB4
000041AE 11FC 0001 F64D             		move.b	#1,($FFFFF64D).w
000041B4                            
000041B4                            loc_3CB4:
000041B4 31C1 F64A                  		move.w	d1,($FFFFF64A).w
000041B8 4E75                       		rts	
000041BA                            ; ===========================================================================
000041BA                            
000041BA                            loc_3CBA:				; XREF: DynWater_LZ1
000041BA 0C40 0C80                  		cmpi.w	#$C80,d0
000041BE 65F4                       		bcs.s	loc_3CB4
000041C0 323C 00E8                  		move.w	#$E8,d1
000041C4 0C40 1500                  		cmpi.w	#$1500,d0
000041C8 65EA                       		bcs.s	loc_3CB4
000041CA 323C 0108                  		move.w	#$108,d1
000041CE 60E4                       		bra.s	loc_3CB4
000041D0                            ; ===========================================================================
000041D0                            
000041D0                            loc_3CD0:				; XREF: DynWater_LZ1
000041D0 5302                       		subq.b	#1,d2
000041D2 6600                       		bne.s	locret_3CF4
000041D4 0C78 02E0 D00C             		cmpi.w	#$2E0,($FFFFD00C).w
000041DA 6400                       		bcc.s	locret_3CF4
000041DC 323C 03A8                  		move.w	#$3A8,d1
000041E0 0C40 1300                  		cmpi.w	#$1300,d0
000041E4 6500                       		bcs.s	loc_3CF0
000041E6 323C 0108                  		move.w	#$108,d1
000041EA 11FC 0002 F64D             		move.b	#2,($FFFFF64D).w
000041F0                            
000041F0                            loc_3CF0:
000041F0 31C1 F64A                  		move.w	d1,($FFFFF64A).w
000041F4                            
000041F4                            locret_3CF4:
000041F4 4E75                       		rts	
000041F6                            ; ===========================================================================
000041F6                            
000041F6                            DynWater_LZ2:				; XREF: DynWater_Index
000041F6 3038 F700                  		move.w	($FFFFF700).w,d0
000041FA 323C 0328                  		move.w	#$328,d1
000041FE 0C40 0500                  		cmpi.w	#$500,d0
00004202 6500                       		bcs.s	loc_3D12
00004204 323C 03C8                  		move.w	#$3C8,d1
00004208 0C40 0B00                  		cmpi.w	#$B00,d0
0000420C 6500                       		bcs.s	loc_3D12
0000420E 323C 0428                  		move.w	#$428,d1
00004212                            
00004212                            loc_3D12:
00004212 31C1 F64A                  		move.w	d1,($FFFFF64A).w
00004216 4E75                       		rts	
00004218                            ; ===========================================================================
00004218                            
00004218                            DynWater_LZ3:				; XREF: DynWater_Index
00004218 3038 F700                  		move.w	($FFFFF700).w,d0
0000421C 1438 F64D                  		move.b	($FFFFF64D).w,d2
00004220 6600                       		bne.s	loc_3D5E
00004222 323C 0500                  		move.w	#$500,d1
00004226 0C40 0600                  		cmpi.w	#$600,d0
0000422A 6500                       		bcs.s	loc_3D54
0000422C 0C40 1B00                  		cmpi.w	#$1B00,d0
00004230 6500                       		bcs.s	loc_3D54
00004232 323C 0850                  		move.w	#$850,d1
00004236                            
00004236                            loc_3D54:
00004236 31C1 F64A                  		move.w	d1,($FFFFF64A).w
0000423A 31C1 F648                  		move.w	d1,($FFFFF648).w
0000423E 4E75                       		rts	
00004240                            ; ===========================================================================
00004240                            
00004240                            loc_3D5E:				; XREF: DynWater_LZ3
00004240 5302                       		subq.b	#1,d2
00004242 6600                       		bne.s	loc_3DA8
00004244 323C 04C8                  		move.w	#$4C8,d1
00004248 0C40 0770                  		cmpi.w	#$770,d0
0000424C 6500                       		bcs.s	loc_3DA2
0000424E 323C 0308                  		move.w	#$308,d1
00004252 0C40 1400                  		cmpi.w	#$1400,d0
00004256 6500                       		bcs.s	loc_3DA2
00004258 0C78 0508 F64A             		cmpi.w	#$508,($FFFFF64A).w
0000425E 6700                       		beq.s	loc_3D8E
00004260 0C78 0600 D00C             		cmpi.w	#$600,($FFFFD00C).w
00004266 6400                       		bcc.s	loc_3D8E
00004268 0C78 0280 D00C             		cmpi.w	#$280,($FFFFD00C).w
0000426E 6400                       		bcc.s	loc_3DA2
00004270                            
00004270                            loc_3D8E:
00004270 323C 0508                  		move.w	#$508,d1
00004274 31C1 F648                  		move.w	d1,($FFFFF648).w
00004278 0C40 1770                  		cmpi.w	#$1770,d0
0000427C 6500                       		bcs.s	loc_3DA2
0000427E 11FC 0002 F64D             		move.b	#2,($FFFFF64D).w
00004284                            
00004284                            loc_3DA2:
00004284 31C1 F64A                  		move.w	d1,($FFFFF64A).w
00004288 4E75                       		rts	
0000428A                            ; ===========================================================================
0000428A                            
0000428A                            loc_3DA8:
0000428A 5302                       		subq.b	#1,d2
0000428C 6600                       		bne.s	loc_3DD2
0000428E 323C 0508                  		move.w	#$508,d1
00004292 0C40 1860                  		cmpi.w	#$1860,d0
00004296 6500                       		bcs.s	loc_3DCC
00004298 323C 0188                  		move.w	#$188,d1
0000429C 0C40 1AF0                  		cmpi.w	#$1AF0,d0
000042A0 6400                       		bcc.s	loc_3DC6
000042A2 B278 F648                  		cmp.w	($FFFFF648).w,d1
000042A6 6600                       		bne.s	loc_3DCC
000042A8                            
000042A8                            loc_3DC6:
000042A8 11FC 0003 F64D             		move.b	#3,($FFFFF64D).w
000042AE                            
000042AE                            loc_3DCC:
000042AE 31C1 F64A                  		move.w	d1,($FFFFF64A).w
000042B2 4E75                       		rts	
000042B4                            ; ===========================================================================
000042B4                            
000042B4                            loc_3DD2:
000042B4 5302                       		subq.b	#1,d2
000042B6 6600                       		bne.s	loc_3E0E
000042B8 323C 0188                  		move.w	#$188,d1
000042BC 0C40 1AF0                  		cmpi.w	#$1AF0,d0
000042C0 6500                       		bcs.s	loc_3E04
000042C2 323C 0900                  		move.w	#$900,d1
000042C6 0C40 1BC0                  		cmpi.w	#$1BC0,d0
000042CA 6500                       		bcs.s	loc_3E04
000042CC 11FC 0004 F64D             		move.b	#4,($FFFFF64D).w
000042D2 31FC 0608 F64A             		move.w	#$608,($FFFFF64A).w
000042D8 31FC 07C0 F648             		move.w	#$7C0,($FFFFF648).w
000042DE 11FC 0001 F7E8             		move.b	#1,($FFFFF7E8).w
000042E4 4E75                       		rts	
000042E6                            ; ===========================================================================
000042E6                            
000042E6                            loc_3E04:
000042E6 31C1 F64A                  		move.w	d1,($FFFFF64A).w
000042EA 31C1 F648                  		move.w	d1,($FFFFF648).w
000042EE 4E75                       		rts	
000042F0                            ; ===========================================================================
000042F0                            
000042F0                            loc_3E0E:
000042F0 0C40 1E00                  		cmpi.w	#$1E00,d0
000042F4 6500                       		bcs.s	locret_3E1A
000042F6 31FC 0128 F64A             		move.w	#$128,($FFFFF64A).w
000042FC                            
000042FC                            locret_3E1A:
000042FC 4E75                       		rts	
000042FE                            ; ===========================================================================
000042FE                            
000042FE                            DynWater_SBZ3:				; XREF: DynWater_Index
000042FE 323C 0228                  		move.w	#$228,d1
00004302 0C78 0F00 F700             		cmpi.w	#$F00,($FFFFF700).w
00004308 6500                       		bcs.s	loc_3E2C
0000430A 323C 04C8                  		move.w	#$4C8,d1
0000430E                            
0000430E                            loc_3E2C:
0000430E 31C1 F64A                  		move.w	d1,($FFFFF64A).w
00004312 4E75                       		rts
00004314                            
00004314                            ; ---------------------------------------------------------------------------
00004314                            ; Labyrinth Zone "wind tunnels"	subroutine
00004314                            ; ---------------------------------------------------------------------------
00004314                            
00004314                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00004314                            
00004314                            
00004314                            LZWindTunnels:				; XREF: LZWaterEffects
00004314 4A78 FE08                  		tst.w	($FFFFFE08).w	; is debug mode	being used?
00004318 6600 0000                  		bne.w	locret_3F0A	; if yes, branch
0000431C 45F9 0000 0000             		lea	(LZWind_Data).l,a2
00004322 7000                       		moveq	#0,d0
00004324 1038 FE11                  		move.b	($FFFFFE11).w,d0
00004328 E748                       		lsl.w	#3,d0
0000432A D4C0                       		adda.w	d0,a2
0000432C 7200                       		moveq	#0,d1
0000432E 4A38 FE11                  		tst.b	($FFFFFE11).w
00004332 6600                       		bne.s	loc_3E56
00004334 7201                       		moveq	#1,d1
00004336 514A                       		subq.w	#8,a2
00004338                            
00004338                            loc_3E56:
00004338 43F8 D000                  		lea	($FFFFD000).w,a1
0000433C                            
0000433C                            LZWind_Loop:
0000433C 3029 0008                  		move.w	8(a1),d0
00004340 B052                       		cmp.w	(a2),d0
00004342 6500 0000                  		bcs.w	loc_3EF4
00004346 B06A 0004                  		cmp.w	4(a2),d0
0000434A 6400 0000                  		bcc.w	loc_3EF4
0000434E 3429 000C                  		move.w	$C(a1),d2
00004352 B46A 0002                  		cmp.w	2(a2),d2
00004356 6500                       		bcs.s	loc_3EF4
00004358 B46A 0006                  		cmp.w	6(a2),d2
0000435C 6400                       		bcc.s	loc_3EF4
0000435E 1038 FE0F                  		move.b	($FFFFFE0F).w,d0
00004362 0200 003F                  		andi.b	#$3F,d0
00004366 6600                       		bne.s	loc_3E90
00004368 303C 00D0                  		move.w	#$D0,d0
0000436C 4EB9 0000 15C0             		jsr	(PlaySound_Special).l ;	play rushing water sound
00004372                            
00004372                            loc_3E90:
00004372 4A38 F7C9                  		tst.b	($FFFFF7C9).w
00004376 6600 0000                  		bne.w	locret_3F0A
0000437A 0C29 0004 0024             		cmpi.b	#4,$24(a1)
00004380 6400                       		bcc.s	loc_3F06
00004382 11FC 0001 F7C7             		move.b	#1,($FFFFF7C7).w
00004388 0440 0080                  		subi.w	#$80,d0
0000438C B052                       		cmp.w	(a2),d0
0000438E 6400                       		bcc.s	LZWind_Move
00004390 7002                       		moveq	#2,d0
00004392 0C38 0001 FE11             		cmpi.b	#1,($FFFFFE11).w
00004398 6600                       		bne.s	loc_3EBA
0000439A 4440                       		neg.w	d0
0000439C                            
0000439C                            loc_3EBA:
0000439C D169 000C                  		add.w	d0,$C(a1)
000043A0                            
000043A0                            LZWind_Move:
000043A0 5869 0008                  		addq.w	#4,8(a1)
000043A4 337C 0400 0010             		move.w	#$400,$10(a1)	; move Sonic horizontally
000043AA 337C 0000 0012             		move.w	#0,$12(a1)
000043B0 137C 000F 001C             		move.b	#$F,$1C(a1)	; use floating animation
000043B6 08E9 0001 0022             		bset	#1,$22(a1)
000043BC 0838 0000 F602             		btst	#0,($FFFFF602).w ; is up pressed?
000043C2 6700                       		beq.s	LZWind_MoveDown	; if not, branch
000043C4 5369 000C                  		subq.w	#1,$C(a1)	; move Sonic up
000043C8                            
000043C8                            LZWind_MoveDown:
000043C8 0838 0001 F602             		btst	#1,($FFFFF602).w ; is down being pressed?
000043CE 6700                       		beq.s	locret_3EF2	; if not, branch
000043D0 5269 000C                  		addq.w	#1,$C(a1)	; move Sonic down
000043D4                            
000043D4                            locret_3EF2:
000043D4 4E75                       		rts	
000043D6                            ; ===========================================================================
000043D6                            
000043D6                            loc_3EF4:				; XREF: LZWindTunnels
000043D6 504A                       		addq.w	#8,a2
000043D8 51C9 FF62                  		dbf	d1,LZWind_Loop
000043DC 4A38 F7C7                  		tst.b	($FFFFF7C7).w
000043E0 6700                       		beq.s	locret_3F0A
000043E2 137C 0000 001C             		move.b	#0,$1C(a1)
000043E8                            
000043E8                            loc_3F06:
000043E8 4238 F7C7                  		clr.b	($FFFFF7C7).w
000043EC                            
000043EC                            locret_3F0A:
000043EC 4E75                       		rts	
000043EE                            ; End of function LZWindTunnels
000043EE                            
000043EE                            ; ===========================================================================
000043EE 0A80 0300 0C10 0380        		dc.w $A80, $300, $C10, $380
000043F6 0F80 0100 1410 0180 0460+  LZWind_Data:	dc.w $F80, $100, $1410,	$180, $460, $400, $710,	$480, $A20
00004408 0600 1610 06E0 0C80 0600+  		dc.w $600, $1610, $6E0,	$C80, $600, $13D0, $680
00004416                            					; XREF: LZWindTunnels
00004416                            		even
00004416                            
00004416                            ; ---------------------------------------------------------------------------
00004416                            ; Labyrinth Zone water slide subroutine
00004416                            ; ---------------------------------------------------------------------------
00004416                            
00004416                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00004416                            
00004416                            
00004416                            LZWaterSlides:				; XREF: LZWaterEffects
00004416 43F8 D000                  		lea	($FFFFD000).w,a1
0000441A 0829 0001 0022             		btst	#1,$22(a1)
00004420 6600                       		bne.s	loc_3F6A
00004422 3029 000C                  		move.w	$C(a1),d0
00004426 E248                       		lsr.w	#1,d0
00004428 0240 0380                  		andi.w	#$380,d0
0000442C 1229 0008                  		move.b	8(a1),d1
00004430 0241 007F                  		andi.w	#$7F,d1
00004434 D041                       		add.w	d1,d0
00004436 45F8 A400                  		lea	($FFFFA400).w,a2
0000443A 1032 0000                  		move.b	(a2,d0.w),d0
0000443E 45FA 0000                  		lea	byte_3FCF(pc),a2
00004442 7206                       		moveq	#6,d1
00004444                            
00004444                            loc_3F62:
00004444 B022                       		cmp.b	-(a2),d0
00004446 57C9 FFFC                  		dbeq	d1,loc_3F62
0000444A 6700                       		beq.s	LZSlide_Move
0000444C                            
0000444C                            loc_3F6A:
0000444C 4A38 F7CA                  		tst.b	($FFFFF7CA).w
00004450 6700                       		beq.s	locret_3F7A
00004452 337C 0005 003E             		move.w	#5,$3E(a1)
00004458 4238 F7CA                  		clr.b	($FFFFF7CA).w
0000445C                            
0000445C                            locret_3F7A:
0000445C 4E75                       		rts	
0000445E                            ; ===========================================================================
0000445E                            
0000445E                            LZSlide_Move:				; XREF: LZWaterSlides
0000445E 0C41 0003                  		cmpi.w	#3,d1
00004462 6400                       		bcc.s	loc_3F84
00004464 4E71                       		nop	
00004466                            
00004466                            loc_3F84:
00004466 08A9 0000 0022             		bclr	#0,$22(a1)
0000446C 103B 1000                  		move.b	byte_3FC0(pc,d1.w),d0
00004470 1340 0014                  		move.b	d0,$14(a1)
00004474 6A00                       		bpl.s	loc_3F9A
00004476 08E9 0000 0022             		bset	#0,$22(a1)
0000447C                            
0000447C                            loc_3F9A:
0000447C 4229 0015                  		clr.b	$15(a1)
00004480 137C 001B 001C             		move.b	#$1B,$1C(a1)	; use Sonic's "sliding" animation
00004486 11FC 0001 F7CA             		move.b	#1,($FFFFF7CA).w ; lock	controls (except jumping)
0000448C 1038 FE0F                  		move.b	($FFFFFE0F).w,d0
00004490 0200 001F                  		andi.b	#$1F,d0
00004494 6600                       		bne.s	locret_3FBE
00004496 303C 00D0                  		move.w	#$D0,d0
0000449A 4EB9 0000 15C0             		jsr	(PlaySound_Special).l ;	play water sound
000044A0                            
000044A0                            locret_3FBE:
000044A0 4E75                       		rts	
000044A2                            ; End of function LZWaterSlides
000044A2                            
000044A2                            ; ===========================================================================
000044A2 0AF5 0AF6 F5F4 0B00 0207+  byte_3FC0:	dc.b $A, $F5, $A, $F6, $F5, $F4, $B, 0,	2, 7, 3, $4C, $4B, 8, 4
000044B1 00                         byte_3FCF:	dc.b 0			; XREF: LZWaterSlides
000044B2                            		even
000044B2                            
000044B2                            ; ---------------------------------------------------------------------------
000044B2                            ; Subroutine to	move Sonic in demo mode
000044B2                            ; ---------------------------------------------------------------------------
000044B2                            
000044B2                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000044B2                            
000044B2                            
000044B2                            MoveSonicInDemo:			; XREF: Level_MainLoop; et al
000044B2 4A78 FFF0                  		tst.w	($FFFFFFF0).w	; is demo mode on?
000044B6 6600                       		bne.s	MoveDemo_On	; if yes, branch
000044B8 4E75                       		rts	
000044BA                            ; ===========================================================================
000044BA                            
000044BA                            ; This is an unused subroutine for recording a demo
000044BA                            
000044BA                            MoveDemo_Record:
000044BA 43F9 0008 0000             		lea	($80000).l,a1
000044C0 3038 F790                  		move.w	($FFFFF790).w,d0
000044C4 D2C0                       		adda.w	d0,a1
000044C6 1038 F604                  		move.b	($FFFFF604).w,d0
000044CA B011                       		cmp.b	(a1),d0
000044CC 6600                       		bne.s	loc_3FFA
000044CE 5229 0001                  		addq.b	#1,1(a1)
000044D2 0C29 00FF 0001             		cmpi.b	#$FF,1(a1)
000044D8 6700                       		beq.s	loc_3FFA
000044DA 4E75                       		rts	
000044DC                            ; ===========================================================================
000044DC                            
000044DC                            loc_3FFA:				; XREF: MoveDemo_Record
000044DC 1340 0002                  		move.b	d0,2(a1)
000044E0 137C 0000 0003             		move.b	#0,3(a1)
000044E6 5478 F790                  		addq.w	#2,($FFFFF790).w
000044EA 0278 03FF F790             		andi.w	#$3FF,($FFFFF790).w
000044F0 4E75                       		rts	
000044F2                            ; ===========================================================================
000044F2                            
000044F2                            MoveDemo_On:				; XREF: MoveSonicInDemo
000044F2 4A38 F604                  		tst.b	($FFFFF604).w
000044F6 6A00                       		bpl.s	loc_4022
000044F8 4A78 FFF0                  		tst.w	($FFFFFFF0).w
000044FC 6B00                       		bmi.s	loc_4022
000044FE 11FC 0004 F600             		move.b	#4,($FFFFF600).w
00004504                            
00004504                            loc_4022:
00004504 43F9 0000 0000             		lea	(Demo_Index).l,a1
0000450A 7000                       		moveq	#0,d0
0000450C 1038 FE10                  		move.b	($FFFFFE10).w,d0
00004510 0C38 0010 F600             		cmpi.b	#$10,($FFFFF600).w
00004516 6600                       		bne.s	loc_4038
00004518 7006                       		moveq	#6,d0
0000451A                            
0000451A                            loc_4038:
0000451A E548                       		lsl.w	#2,d0
0000451C 2271 0000                  		movea.l	(a1,d0.w),a1
00004520 4A78 FFF0                  		tst.w	($FFFFFFF0).w
00004524 6A00                       		bpl.s	loc_4056
00004526 43F9 0000 0000             		lea	(Demo_EndIndex).l,a1
0000452C 3038 FFF4                  		move.w	($FFFFFFF4).w,d0
00004530 5340                       		subq.w	#1,d0
00004532 E548                       		lsl.w	#2,d0
00004534 2271 0000                  		movea.l	(a1,d0.w),a1
00004538                            
00004538                            loc_4056:
00004538 3038 F790                  		move.w	($FFFFF790).w,d0
0000453C D2C0                       		adda.w	d0,a1
0000453E 1011                       		move.b	(a1),d0
00004540 41F8 F604                  		lea	($FFFFF604).w,a0
00004544 1200                       		move.b	d0,d1
00004546 1410                       		move.b	(a0),d2
00004548 B500                       		eor.b	d2,d0
0000454A 10C1                       		move.b	d1,(a0)+
0000454C C001                       		and.b	d1,d0
0000454E 10C0                       		move.b	d0,(a0)+
00004550 5338 F792                  		subq.b	#1,($FFFFF792).w
00004554 6400                       		bcc.s	locret_407E
00004556 11E9 0003 F792             		move.b	3(a1),($FFFFF792).w
0000455C 5478 F790                  		addq.w	#2,($FFFFF790).w
00004560                            
00004560                            locret_407E:
00004560 4E75                       		rts	
00004562                            ; End of function MoveSonicInDemo
00004562                            
00004562                            ; ===========================================================================
00004562                            ; ---------------------------------------------------------------------------
00004562                            ; Demo sequence	pointers
00004562                            ; ---------------------------------------------------------------------------
00004562                            Demo_Index:
00004562                            	include "_inc\Demo pointers for intro.asm"
00004562                            ; ---------------------------------------------------------------------------
00004562                            ; Demo sequence	pointers
00004562                            ; ---------------------------------------------------------------------------
00004562 0000 0000                  	dc.l Demo_GHZ
00004566 0000 0000                  	dc.l Demo_GHZ
0000456A 0000 0000                  	dc.l Demo_MZ
0000456E 0000 0000                  	dc.l Demo_MZ
00004572 0000 0000                  	dc.l Demo_SYZ
00004576 0000 0000                  	dc.l Demo_SYZ
0000457A 0000 0000                  	dc.l Demo_SS
0000457E 0000 0000                  	dc.l Demo_SS
0000457E 0000 0000                  	dc.l Demo_SS
00004582                            
00004582                            Demo_EndIndex:
00004582                            	include "_inc\Demo pointers for ending.asm"
00004582                            ; ---------------------------------------------------------------------------
00004582                            ; Demo (ending) sequence pointers
00004582                            ; ---------------------------------------------------------------------------
00004582 0000 0000                  	dc.l Demo_EndGHZ1
00004586 0000 0000                  	dc.l Demo_EndMZ
0000458A 0000 0000                  	dc.l Demo_EndSYZ
0000458E 0000 0000                  	dc.l Demo_EndLZ
00004592 0000 0000                  	dc.l Demo_EndSLZ
00004596 0000 0000                  	dc.l Demo_EndSBZ1
0000459A 0000 0000                  	dc.l Demo_EndSBZ2
0000459E 0000 0000                  	dc.l Demo_EndGHZ2
0000459E 0000 0000                  	dc.l Demo_EndGHZ2
000045A2                            
000045A2 008B 0837 0042 085C 006A+  		dc.b 0,	$8B, 8,	$37, 0,	$42, 8,	$5C, 0,	$6A, 8,	$5F, 0,	$2F, 8,	$2C
000045B2 0021 0803 2830 0808 002E+  		dc.b 0,	$21, 8,	3, $28,	$30, 8,	8, 0, $2E, 8, $15, 0, $F, 8, $46
000045C2 001A 08FF 08CA 0000 0000+  		dc.b 0,	$1A, 8,	$FF, 8,	$CA, 0,	0, 0, 0, 0, 0, 0, 0, 0,	0
000045D2                            		even
000045D2                            
000045D2                            ; ---------------------------------------------------------------------------
000045D2                            ; Collision index loading subroutine
000045D2                            ; ---------------------------------------------------------------------------
000045D2                            
000045D2                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000045D2                            
000045D2                            
000045D2                            ColIndexLoad:				; XREF: Level
000045D2 7000                       		moveq	#0,d0
000045D4 1038 FE10                  		move.b	($FFFFFE10).w,d0
000045D8 E548                       		lsl.w	#2,d0
000045DA 21FB 0000 F796             		move.l	ColPointers(pc,d0.w),($FFFFF796).w
000045E0 4E75                       		rts	
000045E2                            ; End of function ColIndexLoad
000045E2                            
000045E2                            ; ===========================================================================
000045E2                            ; ---------------------------------------------------------------------------
000045E2                            ; Collision index pointers
000045E2                            ; ---------------------------------------------------------------------------
000045E2                            ColPointers:
000045E2                            	include "_inc\Collision index pointers.asm"
000045E2                            ; ---------------------------------------------------------------------------
000045E2                            ; Collision index pointers
000045E2                            ; ---------------------------------------------------------------------------
000045E2 0000 0000                  	dc.l Col_GHZ
000045E6 0000 0000                  	dc.l Col_LZ
000045EA 0000 0000                  	dc.l Col_MZ
000045EE 0000 0000                  	dc.l Col_SLZ
000045F2 0000 0000                  	dc.l Col_SYZ
000045F6 0000 0000                  	dc.l Col_SBZ
000045F6 0000 0000                  	dc.l Col_SBZ
000045FA                            
000045FA                            ; ---------------------------------------------------------------------------
000045FA                            ; Oscillating number subroutine
000045FA                            ; ---------------------------------------------------------------------------
000045FA                            
000045FA                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000045FA                            
000045FA                            
000045FA                            OscillateNumInit:			; XREF: Level
000045FA 43F8 FE5E                  		lea	($FFFFFE5E).w,a1
000045FE 45F9 0000 0000             		lea	(Osc_Data).l,a2
00004604 7220                       		moveq	#$20,d1
00004606                            
00004606                            Osc_Loop:
00004606 32DA                       		move.w	(a2)+,(a1)+
00004608 51C9 FFFC                  		dbf	d1,Osc_Loop
0000460C 4E75                       		rts	
0000460E                            ; End of function OscillateNumInit
0000460E                            
0000460E                            ; ===========================================================================
0000460E 007C 0080                  Osc_Data:	dc.w $7C, $80		; baseline values
00004612 0000 0080                  		dc.w 0,	$80
00004616 0000 0080                  		dc.w 0,	$80
0000461A 0000 0080                  		dc.w 0,	$80
0000461E 0000 0080                  		dc.w 0,	$80
00004622 0000 0080                  		dc.w 0,	$80
00004626 0000 0080                  		dc.w 0,	$80
0000462A 0000 0080                  		dc.w 0,	$80
0000462E 0000 0080                  		dc.w 0,	$80
00004632 0000 50F0                  		dc.w 0,	$50F0
00004636 011E 2080                  		dc.w $11E, $2080
0000463A 00B4 3080                  		dc.w $B4, $3080
0000463E 010E 5080                  		dc.w $10E, $5080
00004642 01C2 7080                  		dc.w $1C2, $7080
00004646 0276 0080                  		dc.w $276, $80
0000464A 0000 0080                  		dc.w 0,	$80
0000464E 0000                       		dc.w 0
00004650                            		even
00004650                            
00004650                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00004650                            
00004650                            
00004650                            OscillateNumDo:				; XREF: Level
00004650 0C38 0006 D024             		cmpi.b	#6,($FFFFD024).w
00004656 6400                       		bcc.s	locret_41C4
00004658 43F8 FE5E                  		lea	($FFFFFE5E).w,a1
0000465C 45F9 0000 0000             		lea	(Osc_Data2).l,a2
00004662 3619                       		move.w	(a1)+,d3
00004664 720F                       		moveq	#$F,d1
00004666                            
00004666                            loc_4184:
00004666 341A                       		move.w	(a2)+,d2
00004668 381A                       		move.w	(a2)+,d4
0000466A 0303                       		btst	d1,d3
0000466C 6600                       		bne.s	loc_41A4
0000466E 3029 0002                  		move.w	2(a1),d0
00004672 D042                       		add.w	d2,d0
00004674 3340 0002                  		move.w	d0,2(a1)
00004678 D151                       		add.w	d0,0(a1)
0000467A B811                       		cmp.b	0(a1),d4
0000467C 6200                       		bhi.s	loc_41BA
0000467E 03C3                       		bset	d1,d3
00004680 6000                       		bra.s	loc_41BA
00004682                            ; ===========================================================================
00004682                            
00004682                            loc_41A4:				; XREF: OscillateNumDo
00004682 3029 0002                  		move.w	2(a1),d0
00004686 9042                       		sub.w	d2,d0
00004688 3340 0002                  		move.w	d0,2(a1)
0000468C D151                       		add.w	d0,0(a1)
0000468E B811                       		cmp.b	0(a1),d4
00004690 6300                       		bls.s	loc_41BA
00004692 0383                       		bclr	d1,d3
00004694                            
00004694                            loc_41BA:
00004694 5849                       		addq.w	#4,a1
00004696 51C9 FFCE                  		dbf	d1,loc_4184
0000469A 31C3 FE5E                  		move.w	d3,($FFFFFE5E).w
0000469E                            
0000469E                            locret_41C4:
0000469E 4E75                       		rts	
000046A0                            ; End of function OscillateNumDo
000046A0                            
000046A0                            ; ===========================================================================
000046A0 0002 0010                  Osc_Data2:	dc.w 2,	$10		; XREF: OscillateNumDo
000046A4 0002 0018                  		dc.w 2,	$18
000046A8 0002 0020                  		dc.w 2,	$20
000046AC 0002 0030                  		dc.w 2,	$30
000046B0 0004 0020                  		dc.w 4,	$20
000046B4 0008 0008                  		dc.w 8,	8
000046B8 0008 0040                  		dc.w 8,	$40
000046BC 0004 0040                  		dc.w 4,	$40
000046C0 0002 0050                  		dc.w 2,	$50
000046C4 0002 0050                  		dc.w 2,	$50
000046C8 0002 0020                  		dc.w 2,	$20
000046CC 0003 0030                  		dc.w 3,	$30
000046D0 0005 0050                  		dc.w 5,	$50
000046D4 0007 0070                  		dc.w 7,	$70
000046D8 0002 0010                  		dc.w 2,	$10
000046DC 0002 0010                  		dc.w 2,	$10
000046E0                            		even
000046E0                            
000046E0                            ; ---------------------------------------------------------------------------
000046E0                            ; Subroutine to	change object animation	variables (rings, giant	rings)
000046E0                            ; ---------------------------------------------------------------------------
000046E0                            
000046E0                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000046E0                            
000046E0                            
000046E0                            ChangeRingFrame:			; XREF: Level
000046E0 5338 FEC0                  		subq.b	#1,($FFFFFEC0).w
000046E4 6A00                       		bpl.s	loc_421C
000046E6 11FC 000B FEC0             		move.b	#$B,($FFFFFEC0).w
000046EC 5338 FEC1                  		subq.b	#1,($FFFFFEC1).w
000046F0 0238 0007 FEC1             		andi.b	#7,($FFFFFEC1).w
000046F6                            
000046F6                            loc_421C:
000046F6 5338 FEC2                  		subq.b	#1,($FFFFFEC2).w
000046FA 6A00                       		bpl.s	loc_4232
000046FC 11FC 0007 FEC2             		move.b	#7,($FFFFFEC2).w
00004702 5238 FEC3                  		addq.b	#1,($FFFFFEC3).w
00004706 0238 0003 FEC3             		andi.b	#3,($FFFFFEC3).w
0000470C                            
0000470C                            loc_4232:
0000470C 5338 FEC4                  		subq.b	#1,($FFFFFEC4).w
00004710 6A00                       		bpl.s	loc_4250
00004712 11FC 0007 FEC4             		move.b	#7,($FFFFFEC4).w
00004718 5238 FEC5                  		addq.b	#1,($FFFFFEC5).w
0000471C 0C38 0006 FEC5             		cmpi.b	#6,($FFFFFEC5).w
00004722 6500                       		bcs.s	loc_4250
00004724 11FC 0000 FEC5             		move.b	#0,($FFFFFEC5).w
0000472A                            
0000472A                            loc_4250:
0000472A 4A38 FEC6                  		tst.b	($FFFFFEC6).w
0000472E 6700                       		beq.s	locret_4272
00004730 7000                       		moveq	#0,d0
00004732 1038 FEC6                  		move.b	($FFFFFEC6).w,d0
00004736 D078 FEC8                  		add.w	($FFFFFEC8).w,d0
0000473A 31C0 FEC8                  		move.w	d0,($FFFFFEC8).w
0000473E EF58                       		rol.w	#7,d0
00004740 0240 0003                  		andi.w	#3,d0
00004744 11C0 FEC7                  		move.b	d0,($FFFFFEC7).w
00004748 5338 FEC6                  		subq.b	#1,($FFFFFEC6).w
0000474C                            
0000474C                            locret_4272:
0000474C 4E75                       		rts	
0000474E                            ; End of function ChangeRingFrame
0000474E                            
0000474E                            ; ---------------------------------------------------------------------------
0000474E                            ; End-of-act signpost pattern loading subroutine
0000474E                            ; ---------------------------------------------------------------------------
0000474E                            
0000474E                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000474E                            
0000474E                            
0000474E                            SignpostArtLoad:			; XREF: Level
0000474E 4A78 FE08                  		tst.w	($FFFFFE08).w	; is debug mode	being used?
00004752 6600 0000                  		bne.w	Signpost_Exit	; if yes, branch
00004756 0C38 0002 FE11             		cmpi.b	#2,($FFFFFE11).w ; is act number 02 (act 3)?
0000475C 6700                       		beq.s	Signpost_Exit	; if yes, branch
0000475E 3038 F700                  		move.w	($FFFFF700).w,d0
00004762 3238 F72A                  		move.w	($FFFFF72A).w,d1
00004766 0441 0100                  		subi.w	#$100,d1
0000476A B041                       		cmp.w	d1,d0		; has Sonic reached the	edge of	the level?
0000476C 6D00                       		blt.s	Signpost_Exit	; if not, branch
0000476E 4A38 FE1E                  		tst.b	($FFFFFE1E).w
00004772 6700                       		beq.s	Signpost_Exit
00004774 B278 F728                  		cmp.w	($FFFFF728).w,d1
00004778 6700                       		beq.s	Signpost_Exit
0000477A 31C1 F728                  		move.w	d1,($FFFFF728).w ; move	left boundary to current screen	position
0000477E 7012                       		moveq	#$12,d0
00004780 6000 D054                  		bra.w	LoadPLC2	; load signpost	patterns
00004784                            ; ===========================================================================
00004784                            
00004784                            Signpost_Exit:
00004784 4E75                       		rts	
00004786                            ; End of function SignpostArtLoad
00004786                            
00004786                            ; ===========================================================================
00004786                            Demo_GHZ:	incbin	demodata\i_ghz.bin
00004806                            Demo_MZ:	incbin	demodata\i_mz.bin
00004936                            Demo_SYZ:	incbin	demodata\i_syz.bin
000049B6                            Demo_SS:	incbin	demodata\i_ss.bin
00004AB6                            ; ===========================================================================
00004AB6                            
00004AB6                            ; ---------------------------------------------------------------------------
00004AB6                            ; Special Stage
00004AB6                            ; ---------------------------------------------------------------------------
00004AB6                            
00004AB6                            SpecialStage:				; XREF: GameModeArray
00004AB6 303C 00CA                  		move.w	#$CA,d0
00004ABA 6100 CB04                  		bsr.w	PlaySound_Special ; play special stage entry sound
00004ABE 6100 D6A6                  		bsr.w	Pal_MakeFlash
00004AC2 46FC 2700                  		move	#$2700,sr
00004AC6 4DF9 00C0 0004             		lea	($C00004).l,a6
00004ACC 3CBC 8B03                  		move.w	#$8B03,(a6)
00004AD0 3CBC 8004                  		move.w	#$8004,(a6)
00004AD4 31FC 8AAF F624             		move.w	#$8AAF,($FFFFF624).w
00004ADA 3CBC 9011                  		move.w	#$9011,(a6)
00004ADE 3038 F60C                  		move.w	($FFFFF60C).w,d0
00004AE2 0200 00BF                  		andi.b	#$BF,d0
00004AE6 33C0 00C0 0004             		move.w	d0,($C00004).l
00004AEC 6100 C9FA                  		bsr.w	ClearScreen
00004AF0 46FC 2300                  		move	#$2300,sr
00004AF4 4BF9 00C0 0004             		lea	($C00004).l,a5
00004AFA 3ABC 8F01                  		move.w	#$8F01,(a5)
00004AFE 2ABC 946F 93FF             		move.l	#$946F93FF,(a5)
00004B04 3ABC 9780                  		move.w	#$9780,(a5)
00004B08 2ABC 5000 0081             		move.l	#$50000081,(a5)
00004B0E 33FC 0000 00C0 0000        		move.w	#0,($C00000).l
00004B16                            
00004B16                            loc_463C:
00004B16 3215                       		move.w	(a5),d1
00004B18 0801 0001                  		btst	#1,d1
00004B1C 66F8                       		bne.s	loc_463C
00004B1E 3ABC 8F02                  		move.w	#$8F02,(a5)
00004B22 6100 0000                  		bsr.w	SS_BGLoad
00004B26 7014                       		moveq	#$14,d0
00004B28 6100 CDE6                  		bsr.w	RunPLC_ROM	; load special stage patterns
00004B2C 43F8 D000                  		lea	($FFFFD000).w,a1
00004B30 7000                       		moveq	#0,d0
00004B32 323C 07FF                  		move.w	#$7FF,d1
00004B36                            
00004B36                            SS_ClrObjRam:
00004B36 22C0                       		move.l	d0,(a1)+
00004B38 51C9 FFFC                  		dbf	d1,SS_ClrObjRam	; clear	the object RAM
00004B3C                            
00004B3C 43F8 F700                  		lea	($FFFFF700).w,a1
00004B40 7000                       		moveq	#0,d0
00004B42 323C 003F                  		move.w	#$3F,d1
00004B46                            
00004B46                            SS_ClrRam:
00004B46 22C0                       		move.l	d0,(a1)+
00004B48 51C9 FFFC                  		dbf	d1,SS_ClrRam	; clear	variables
00004B4C                            
00004B4C 43F8 FE60                  		lea	($FFFFFE60).w,a1
00004B50 7000                       		moveq	#0,d0
00004B52 323C 0027                  		move.w	#$27,d1
00004B56                            
00004B56                            SS_ClrRam2:
00004B56 22C0                       		move.l	d0,(a1)+
00004B58 51C9 FFFC                  		dbf	d1,SS_ClrRam2	; clear	variables
00004B5C                            
00004B5C 43F8 AA00                  		lea	($FFFFAA00).w,a1
00004B60 7000                       		moveq	#0,d0
00004B62 323C 007F                  		move.w	#$7F,d1
00004B66                            
00004B66                            SS_ClrNemRam:
00004B66 22C0                       		move.l	d0,(a1)+
00004B68 51C9 FFFC                  		dbf	d1,SS_ClrNemRam	; clear	Nemesis	buffer
00004B6C                            
00004B6C 4238 F64E                  		clr.b	($FFFFF64E).w
00004B70 4278 FE02                  		clr.w	($FFFFFE02).w
00004B74 700A                       		moveq	#$A,d0
00004B76 6100 D76E                  		bsr.w	PalLoad1	; load special stage pallet
00004B7A 4EB9 0000 0000             		jsr	SS_Load
00004B80 21FC 0000 0000 F700        		move.l	#0,($FFFFF700).w
00004B88 21FC 0000 0000 F704        		move.l	#0,($FFFFF704).w
00004B90 11FC 0009 D000             		move.b	#9,($FFFFD000).w ; load	special	stage Sonic object
00004B96 6100 0000                  		bsr.w	PalCycle_SS
00004B9A 4278 F780                  		clr.w	($FFFFF780).w	; set stage angle to "upright"
00004B9E 31FC 0040 F782             		move.w	#$40,($FFFFF782).w ; set stage rotation	speed
00004BA4 303C 0089                  		move.w	#$89,d0
00004BA8 6100 CA10                  		bsr.w	PlaySound	; play special stage BG	music
00004BAC 31FC 0000 F790             		move.w	#0,($FFFFF790).w
00004BB2 43F9 0000 4562             		lea	(Demo_Index).l,a1
00004BB8 7006                       		moveq	#6,d0
00004BBA E548                       		lsl.w	#2,d0
00004BBC 2271 0000                  		movea.l	(a1,d0.w),a1
00004BC0 11E9 0001 F792             		move.b	1(a1),($FFFFF792).w
00004BC6 5338 F792                  		subq.b	#1,($FFFFF792).w
00004BCA 4278 FE20                  		clr.w	($FFFFFE20).w
00004BCE 4238 FE1B                  		clr.b	($FFFFFE1B).w
00004BD2 31FC 0000 FE08             		move.w	#0,($FFFFFE08).w
00004BD8 31FC 0708 F614             		move.w	#1800,($FFFFF614).w
00004BDE 4A38 FFE2                  		tst.b	($FFFFFFE2).w	; has debug cheat been entered?
00004BE2 6700                       		beq.s	SS_NoDebug	; if not, branch
00004BE4 0838 0006 F604             		btst	#6,($FFFFF604).w ; is A	button pressed?
00004BEA 6700                       		beq.s	SS_NoDebug	; if not, branch
00004BEC 11FC 0001 FFFA             		move.b	#1,($FFFFFFFA).w ; enable debug	mode
00004BF2                            
00004BF2                            SS_NoDebug:
00004BF2 3038 F60C                  		move.w	($FFFFF60C).w,d0
00004BF6 0000 0040                  		ori.b	#$40,d0
00004BFA 33C0 00C0 0004             		move.w	d0,($C00004).l
00004C00 6100 D4B8                  		bsr.w	Pal_MakeWhite
00004C04                            
00004C04                            ; ---------------------------------------------------------------------------
00004C04                            ; Main Special Stage loop
00004C04                            ; ---------------------------------------------------------------------------
00004C04                            
00004C04                            SS_MainLoop:
00004C04 6100 C9C6                  		bsr.w	PauseGame
00004C08 11FC 000A F62A             		move.b	#$A,($FFFFF62A).w
00004C0E 6100 E06A                  		bsr.w	DelayProgram
00004C12 6100 F89E                  		bsr.w	MoveSonicInDemo
00004C16 31F8 F604 F602             		move.w	($FFFFF604).w,($FFFFF602).w
00004C1C 4EB9 0000 0000             		jsr	ObjectsLoad
00004C22 4EB9 0000 0000             		jsr	BuildSprites
00004C28 4EB9 0000 0000             		jsr	SS_ShowLayout
00004C2E 6100 0000                  		bsr.w	SS_BGAnimate
00004C32 4A78 FFF0                  		tst.w	($FFFFFFF0).w	; is demo mode on?
00004C36 6700                       		beq.s	SS_ChkEnd	; if not, branch
00004C38 4A78 F614                  		tst.w	($FFFFF614).w	; is there time	left on	the demo?
00004C3C 6700 0000                  		beq.w	SS_ToSegaScreen	; if not, branch
00004C40                            
00004C40                            SS_ChkEnd:
00004C40 0C38 0010 F600             		cmpi.b	#$10,($FFFFF600).w ; is	game mode $10 (special stage)?
00004C46 6700 FFBC                  		beq.w	SS_MainLoop	; if yes, branch
00004C4A                            
00004C4A 4A78 FFF0                  		tst.w	($FFFFFFF0).w	; is demo mode on?
00004C4E 6600 0000                  		bne.w	SS_ToSegaScreen	; if yes, branch
00004C52 11FC 000C F600             		move.b	#$C,($FFFFF600).w ; set	screen mode to $0C (level)
00004C58 0C78 0503 FE10             		cmpi.w	#$503,($FFFFFE10).w ; is level number higher than FZ?
00004C5E 6500                       		bcs.s	SS_End		; if not, branch
00004C60 4278 FE10                  		clr.w	($FFFFFE10).w	; set to GHZ1
00004C64                            
00004C64                            SS_End:
00004C64 31FC 003C F614             		move.w	#60,($FFFFF614).w ; set	delay time to 1	second
00004C6A 31FC 003F F626             		move.w	#$3F,($FFFFF626).w
00004C70 4278 F794                  		clr.w	($FFFFF794).w
00004C74                            
00004C74                            SS_EndLoop:
00004C74 11FC 0016 F62A             		move.b	#$16,($FFFFF62A).w
00004C7A 6100 DFFE                  		bsr.w	DelayProgram
00004C7E 6100 F832                  		bsr.w	MoveSonicInDemo
00004C82 31F8 F604 F602             		move.w	($FFFFF604).w,($FFFFF602).w
00004C88 4EB9 0000 0000             		jsr	ObjectsLoad
00004C8E 4EB9 0000 0000             		jsr	BuildSprites
00004C94 4EB9 0000 0000             		jsr	SS_ShowLayout
00004C9A 6100 0000                  		bsr.w	SS_BGAnimate
00004C9E 5378 F794                  		subq.w	#1,($FFFFF794).w
00004CA2 6A00                       		bpl.s	loc_47D4
00004CA4 31FC 0002 F794             		move.w	#2,($FFFFF794).w
00004CAA 6100 D4DA                  		bsr.w	Pal_ToWhite
00004CAE                            
00004CAE                            loc_47D4:
00004CAE 4A78 F614                  		tst.w	($FFFFF614).w
00004CB2 66C0                       		bne.s	SS_EndLoop
00004CB4                            
00004CB4 46FC 2700                  		move	#$2700,sr
00004CB8 4DF9 00C0 0004             		lea	($C00004).l,a6
00004CBE 3CBC 8230                  		move.w	#$8230,(a6)
00004CC2 3CBC 8407                  		move.w	#$8407,(a6)
00004CC6 3CBC 9001                  		move.w	#$9001,(a6)
00004CCA 6100 C81C                  		bsr.w	ClearScreen
00004CCE 23FC 7000 0002 00C0 0004   		move.l	#$70000002,($C00004).l
00004CD8 41F9 0000 0000             		lea	(Nem_TitleCard).l,a0 ; load title card patterns
00004CDE 6100 C984                  		bsr.w	NemDec
00004CE2 4EB9 0000 0000             		jsr	Hud_Base
00004CE8 46FC 2300                  		move	#$2300,sr
00004CEC 7011                       		moveq	#$11,d0
00004CEE 6100 D612                  		bsr.w	PalLoad2	; load results screen pallet
00004CF2 7000                       		moveq	#0,d0
00004CF4 6100 CAE0                  		bsr.w	LoadPLC2
00004CF8 701B                       		moveq	#$1B,d0
00004CFA 6100 CAA8                  		bsr.w	LoadPLC		; load results screen patterns
00004CFE 11FC 0001 FE1F             		move.b	#1,($FFFFFE1F).w ; update score	counter
00004D04 11FC 0001 F7D6             		move.b	#1,($FFFFF7D6).w ; update ring bonus counter
00004D0A 3038 FE20                  		move.w	($FFFFFE20).w,d0
00004D0E C0FC 000A                  		mulu.w	#10,d0		; multiply rings by 10
00004D12 31C0 F7D4                  		move.w	d0,($FFFFF7D4).w ; set rings bonus
00004D16 303C 008E                  		move.w	#$8E,d0
00004D1A 4EB9 0000 15C0             		jsr	(PlaySound_Special).l ;	play end-of-level music
00004D20 43F8 D000                  		lea	($FFFFD000).w,a1
00004D24 7000                       		moveq	#0,d0
00004D26 323C 07FF                  		move.w	#$7FF,d1
00004D2A                            
00004D2A                            SS_EndClrObjRam:
00004D2A 22C0                       		move.l	d0,(a1)+
00004D2C 51C9 FFFC                  		dbf	d1,SS_EndClrObjRam ; clear object RAM
00004D30                            
00004D30 11FC 007E D5C0             		move.b	#$7E,($FFFFD5C0).w ; load results screen object
00004D36                            
00004D36                            SS_NormalExit:
00004D36 6100 C894                  		bsr.w	PauseGame
00004D3A 11FC 000C F62A             		move.b	#$C,($FFFFF62A).w
00004D40 6100 DF38                  		bsr.w	DelayProgram
00004D44 4EB9 0000 0000             		jsr	ObjectsLoad
00004D4A 4EB9 0000 0000             		jsr	BuildSprites
00004D50 6100 CABE                  		bsr.w	RunPLC_RAM
00004D54 4A78 FE02                  		tst.w	($FFFFFE02).w
00004D58 67DC                       		beq.s	SS_NormalExit
00004D5A 4AB8 F680                  		tst.l	($FFFFF680).w
00004D5E 66D6                       		bne.s	SS_NormalExit
00004D60 303C 00CA                  		move.w	#$CA,d0
00004D64 6100 C85A                  		bsr.w	PlaySound_Special ; play special stage exit sound
00004D68 6100 D3FC                  		bsr.w	Pal_MakeFlash
00004D6C 4E75                       		rts	
00004D6E                            ; ===========================================================================
00004D6E                            
00004D6E                            SS_ToSegaScreen:
00004D6E 11FC 0000 F600             		move.b	#0,($FFFFF600).w ; set screen mode to 00 (Sega screen)
00004D74 4E75                       		rts
00004D76                            
00004D76                            ; ---------------------------------------------------------------------------
00004D76                            ; Special stage	background loading subroutine
00004D76                            ; ---------------------------------------------------------------------------
00004D76                            
00004D76                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00004D76                            
00004D76                            
00004D76                            SS_BGLoad:				; XREF: SpecialStage
00004D76 43F9 00FF 0000             		lea	($FF0000).l,a1
00004D7C 41F9 0000 0000             		lea	(Eni_SSBg1).l,a0 ; load	mappings for the birds and fish
00004D82 303C 4051                  		move.w	#$4051,d0
00004D86 6100 CBBA                  		bsr.w	EniDec
00004D8A 263C 5000 0001             		move.l	#$50000001,d3
00004D90 45F9 00FF 0080             		lea	($FF0080).l,a2
00004D96 7E06                       		moveq	#6,d7
00004D98                            
00004D98                            loc_48BE:
00004D98 2003                       		move.l	d3,d0
00004D9A 7C03                       		moveq	#3,d6
00004D9C 7800                       		moveq	#0,d4
00004D9E 0C47 0003                  		cmpi.w	#3,d7
00004DA2 6400                       		bcc.s	loc_48CC
00004DA4 7801                       		moveq	#1,d4
00004DA6                            
00004DA6                            loc_48CC:
00004DA6 7A07                       		moveq	#7,d5
00004DA8                            
00004DA8                            loc_48CE:
00004DA8 224A                       		movea.l	a2,a1
00004DAA 0A04 0001                  		eori.b	#1,d4
00004DAE 6600                       		bne.s	loc_48E2
00004DB0 0C47 0006                  		cmpi.w	#6,d7
00004DB4 6600                       		bne.s	loc_48F2
00004DB6 43F9 00FF 0000             		lea	($FF0000).l,a1
00004DBC                            
00004DBC                            loc_48E2:
00004DBC 48E7 F800                  		movem.l	d0-d4,-(sp)
00004DC0 7207                       		moveq	#7,d1
00004DC2 7407                       		moveq	#7,d2
00004DC4 6100 C87E                  		bsr.w	ShowVDPGraphics
00004DC8 4CDF 001F                  		movem.l	(sp)+,d0-d4
00004DCC                            
00004DCC                            loc_48F2:
00004DCC 0680 0010 0000             		addi.l	#$100000,d0
00004DD2 51CD FFD4                  		dbf	d5,loc_48CE
00004DD6 0680 0380 0000             		addi.l	#$3800000,d0
00004DDC 0A04 0001                  		eori.b	#1,d4
00004DE0 51CE FFC4                  		dbf	d6,loc_48CC
00004DE4 0683 1000 0000             		addi.l	#$10000000,d3
00004DEA 6A00                       		bpl.s	loc_491C
00004DEC 4843                       		swap	d3
00004DEE 0683 0000 C000             		addi.l	#$C000,d3
00004DF4 4843                       		swap	d3
00004DF6                            
00004DF6                            loc_491C:
00004DF6 D4FC 0080                  		adda.w	#$80,a2
00004DFA 51CF FF9C                  		dbf	d7,loc_48BE
00004DFE 43F9 00FF 0000             		lea	($FF0000).l,a1
00004E04 41F9 0000 0000             		lea	(Eni_SSBg2).l,a0 ; load	mappings for the clouds
00004E0A 303C 4000                  		move.w	#$4000,d0
00004E0E 6100 CB32                  		bsr.w	EniDec
00004E12 43F9 00FF 0000             		lea	($FF0000).l,a1
00004E18 203C 4000 0003             		move.l	#$40000003,d0
00004E1E 723F                       		moveq	#$3F,d1
00004E20 741F                       		moveq	#$1F,d2
00004E22 6100 C820                  		bsr.w	ShowVDPGraphics
00004E26 43F9 00FF 0000             		lea	($FF0000).l,a1
00004E2C 203C 5000 0003             		move.l	#$50000003,d0
00004E32 723F                       		moveq	#$3F,d1
00004E34 743F                       		moveq	#$3F,d2
00004E36 6100 C80C                  		bsr.w	ShowVDPGraphics
00004E3A 4E75                       		rts	
00004E3C                            ; End of function SS_BGLoad
00004E3C                            
00004E3C                            ; ---------------------------------------------------------------------------
00004E3C                            ; Pallet cycling routine - special stage
00004E3C                            ; ---------------------------------------------------------------------------
00004E3C                            
00004E3C                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00004E3C                            
00004E3C                            
00004E3C                            PalCycle_SS:				; XREF: loc_DA6; SpecialStage
00004E3C 4A78 F63A                  		tst.w	($FFFFF63A).w
00004E40 6600                       		bne.s	locret_49E6
00004E42 5378 F79C                  		subq.w	#1,($FFFFF79C).w
00004E46 6A00                       		bpl.s	locret_49E6
00004E48 4DF9 00C0 0004             		lea	($C00004).l,a6
00004E4E 3038 F79A                  		move.w	($FFFFF79A).w,d0
00004E52 5278 F79A                  		addq.w	#1,($FFFFF79A).w
00004E56 0240 001F                  		andi.w	#$1F,d0
00004E5A E548                       		lsl.w	#2,d0
00004E5C 41F9 0000 0000             		lea	(byte_4A3C).l,a0
00004E62 D0C0                       		adda.w	d0,a0
00004E64 1018                       		move.b	(a0)+,d0
00004E66 6A00                       		bpl.s	loc_4992
00004E68 303C 01FF                  		move.w	#$1FF,d0
00004E6C                            
00004E6C                            loc_4992:
00004E6C 31C0 F79C                  		move.w	d0,($FFFFF79C).w
00004E70 7000                       		moveq	#0,d0
00004E72 1018                       		move.b	(a0)+,d0
00004E74 31C0 F7A0                  		move.w	d0,($FFFFF7A0).w
00004E78 43F9 0000 0000             		lea	(byte_4ABC).l,a1
00004E7E 43F1 0000                  		lea	(a1,d0.w),a1
00004E82 303C 8200                  		move.w	#-$7E00,d0
00004E86 1019                       		move.b	(a1)+,d0
00004E88 3C80                       		move.w	d0,(a6)
00004E8A 11D1 F616                  		move.b	(a1),($FFFFF616).w
00004E8E 303C 8400                  		move.w	#-$7C00,d0
00004E92 1018                       		move.b	(a0)+,d0
00004E94 3C80                       		move.w	d0,(a6)
00004E96 23FC 4000 0010 00C0 0004   		move.l	#$40000010,($C00004).l
00004EA0 23F8 F616 00C0 0000        		move.l	($FFFFF616).w,($C00000).l
00004EA8 7000                       		moveq	#0,d0
00004EAA 1018                       		move.b	(a0)+,d0
00004EAC 6B00                       		bmi.s	loc_49E8
00004EAE 43F9 0000 0000             		lea	(Pal_SSCyc1).l,a1
00004EB4 D2C0                       		adda.w	d0,a1
00004EB6 45F8 FB4E                  		lea	($FFFFFB4E).w,a2
00004EBA 24D9                       		move.l	(a1)+,(a2)+
00004EBC 24D9                       		move.l	(a1)+,(a2)+
00004EBE 24D9                       		move.l	(a1)+,(a2)+
00004EC0                            
00004EC0                            locret_49E6:
00004EC0 4E75                       		rts	
00004EC2                            ; ===========================================================================
00004EC2                            
00004EC2                            loc_49E8:				; XREF: PalCycle_SS
00004EC2 3238 F79E                  		move.w	($FFFFF79E).w,d1
00004EC6 0C40 008A                  		cmpi.w	#$8A,d0
00004ECA 6500                       		bcs.s	loc_49F4
00004ECC 5241                       		addq.w	#1,d1
00004ECE                            
00004ECE                            loc_49F4:
00004ECE C2FC 002A                  		mulu.w	#$2A,d1
00004ED2 43F9 0000 0000             		lea	(Pal_SSCyc2).l,a1
00004ED8 D2C1                       		adda.w	d1,a1
00004EDA 0240 007F                  		andi.w	#$7F,d0
00004EDE 0880 0000                  		bclr	#0,d0
00004EE2 6700                       		beq.s	loc_4A18
00004EE4 45F8 FB6E                  		lea	($FFFFFB6E).w,a2
00004EE8 24D1                       		move.l	(a1),(a2)+
00004EEA 24E9 0004                  		move.l	4(a1),(a2)+
00004EEE 24E9 0008                  		move.l	8(a1),(a2)+
00004EF2                            
00004EF2                            loc_4A18:
00004EF2 D2FC 000C                  		adda.w	#$C,a1
00004EF6 45F8 FB5A                  		lea	($FFFFFB5A).w,a2
00004EFA 0C40 000A                  		cmpi.w	#$A,d0
00004EFE 6500                       		bcs.s	loc_4A2E
00004F00 0440 000A                  		subi.w	#$A,d0
00004F04 45F8 FB7A                  		lea	($FFFFFB7A).w,a2
00004F08                            
00004F08                            loc_4A2E:
00004F08 3200                       		move.w	d0,d1
00004F0A D040                       		add.w	d0,d0
00004F0C D041                       		add.w	d1,d0
00004F0E D2C0                       		adda.w	d0,a1
00004F10 24D9                       		move.l	(a1)+,(a2)+
00004F12 34D9                       		move.w	(a1)+,(a2)+
00004F14 4E75                       		rts	
00004F16                            ; End of function PalCycle_SS
00004F16                            
00004F16                            ; ===========================================================================
00004F16 0300 0792 0300 0790 0300+  byte_4A3C:	dc.b 3,	0, 7, $92, 3, 0, 7, $90, 3, 0, 7, $8E, 3, 0, 7,	$8C
00004F26                            					; XREF: PalCycle_SS
00004F26 0300 078B 0300 0780 0300+  		dc.b 3,	0, 7, $8B, 3, 0, 7, $80, 3, 0, 7, $82, 3, 0, 7,	$84
00004F36 0300 0786 0300 0788 0708+  		dc.b 3,	0, 7, $86, 3, 0, 7, $88, 7, 8, 7, 0, 7,	$A, 7, $C
00004F46 FF0C 0718 FF0C 0718 070A+  		dc.b $FF, $C, 7, $18, $FF, $C, 7, $18, 7, $A, 7, $C, 7,	8, 7, 0
00004F56 0300 0688 0300 0686 0300+  		dc.b 3,	0, 6, $88, 3, 0, 6, $86, 3, 0, 6, $84, 3, 0, 6,	$82
00004F66 0300 0681 0300 068A 0300+  		dc.b 3,	0, 6, $81, 3, 0, 6, $8A, 3, 0, 6, $8C, 3, 0, 6,	$8E
00004F76 0300 0690 0300 0692 0702+  		dc.b 3,	0, 6, $90, 3, 0, 6, $92, 7, 2, 6, $24, 7, 4, 6,	$30
00004F86 FF06 063C FF06 063C 0704+  		dc.b $FF, 6, 6,	$3C, $FF, 6, 6,	$3C, 7,	4, 6, $30, 7, 2, 6, $24
00004F96                            		even
00004F96 1001 1800 1801 2000 2001+  byte_4ABC:	dc.b $10, 1, $18, 0, $18, 1, $20, 0, $20, 1, $28, 0, $28, 1
00004FA4                            					; XREF: PalCycle_SS
00004FA4                            		even
00004FA4                            
00004FA4                            Pal_SSCyc1:	incbin	pallet\c_ss_1.bin
00004FEC                            		even
00004FEC                            Pal_SSCyc2:	incbin	pallet\c_ss_2.bin
000050BE                            		even
000050BE                            
000050BE                            ; ---------------------------------------------------------------------------
000050BE                            ; Subroutine to	make the special stage background animated
000050BE                            ; ---------------------------------------------------------------------------
000050BE                            
000050BE                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000050BE                            
000050BE                            
000050BE                            SS_BGAnimate:				; XREF: SpecialStage
000050BE 3038 F7A0                  		move.w	($FFFFF7A0).w,d0
000050C2 6600                       		bne.s	loc_4BF6
000050C4 31FC 0000 F70C             		move.w	#0,($FFFFF70C).w
000050CA 31F8 F70C F618             		move.w	($FFFFF70C).w,($FFFFF618).w
000050D0                            
000050D0                            loc_4BF6:
000050D0 0C40 0008                  		cmpi.w	#8,d0
000050D4 6400                       		bcc.s	loc_4C4E
000050D6 0C40 0006                  		cmpi.w	#6,d0
000050DA 6600                       		bne.s	loc_4C10
000050DC 5278 F718                  		addq.w	#1,($FFFFF718).w
000050E0 5278 F70C                  		addq.w	#1,($FFFFF70C).w
000050E4 31F8 F70C F618             		move.w	($FFFFF70C).w,($FFFFF618).w
000050EA                            
000050EA                            loc_4C10:
000050EA 7000                       		moveq	#0,d0
000050EC 3038 F708                  		move.w	($FFFFF708).w,d0
000050F0 4440                       		neg.w	d0
000050F2 4840                       		swap	d0
000050F4 43F9 0000 0000             		lea	(byte_4CCC).l,a1
000050FA 47F8 AA00                  		lea	($FFFFAA00).w,a3
000050FE 7609                       		moveq	#9,d3
00005100                            
00005100                            loc_4C26:
00005100 302B 0002                  		move.w	2(a3),d0
00005104 6100 DBA6                  		bsr.w	CalcSine
00005108 7400                       		moveq	#0,d2
0000510A 1419                       		move.b	(a1)+,d2
0000510C C1C2                       		muls.w	d2,d0
0000510E E080                       		asr.l	#8,d0
00005110 36C0                       		move.w	d0,(a3)+
00005112 1419                       		move.b	(a1)+,d2
00005114 4882                       		ext.w	d2
00005116 D55B                       		add.w	d2,(a3)+
00005118 51CB FFE6                  		dbf	d3,loc_4C26
0000511C 47F8 AA00                  		lea	($FFFFAA00).w,a3
00005120 45F9 0000 0000             		lea	(byte_4CB8).l,a2
00005126 6000                       		bra.s	loc_4C7E
00005128                            ; ===========================================================================
00005128                            
00005128                            loc_4C4E:				; XREF: SS_BGAnimate
00005128 0C40 000C                  		cmpi.w	#$C,d0
0000512C 6600                       		bne.s	loc_4C74
0000512E 5378 F718                  		subq.w	#1,($FFFFF718).w
00005132 47F8 AB00                  		lea	($FFFFAB00).w,a3
00005136 243C 0001 8000             		move.l	#$18000,d2
0000513C 7206                       		moveq	#6,d1
0000513E                            
0000513E                            loc_4C64:
0000513E 2013                       		move.l	(a3),d0
00005140 9082                       		sub.l	d2,d0
00005142 26C0                       		move.l	d0,(a3)+
00005144 0482 0000 2000             		subi.l	#$2000,d2
0000514A 51C9 FFF2                  		dbf	d1,loc_4C64
0000514E                            
0000514E                            loc_4C74:
0000514E 47F8 AB00                  		lea	($FFFFAB00).w,a3
00005152 45F9 0000 0000             		lea	(byte_4CC4).l,a2
00005158                            
00005158                            loc_4C7E:
00005158 43F8 CC00                  		lea	($FFFFCC00).w,a1
0000515C 3038 F718                  		move.w	($FFFFF718).w,d0
00005160 4440                       		neg.w	d0
00005162 4840                       		swap	d0
00005164 7600                       		moveq	#0,d3
00005166 161A                       		move.b	(a2)+,d3
00005168 3438 F70C                  		move.w	($FFFFF70C).w,d2
0000516C 4442                       		neg.w	d2
0000516E 0242 00FF                  		andi.w	#$FF,d2
00005172 E54A                       		lsl.w	#2,d2
00005174                            
00005174                            loc_4C9A:
00005174 301B                       		move.w	(a3)+,d0
00005176 544B                       		addq.w	#2,a3
00005178 7200                       		moveq	#0,d1
0000517A 121A                       		move.b	(a2)+,d1
0000517C 5341                       		subq.w	#1,d1
0000517E                            
0000517E                            loc_4CA4:
0000517E 2380 2000                  		move.l	d0,(a1,d2.w)
00005182 5842                       		addq.w	#4,d2
00005184 0242 03FC                  		andi.w	#$3FC,d2
00005188 51C9 FFF4                  		dbf	d1,loc_4CA4
0000518C 51CB FFE6                  		dbf	d3,loc_4C9A
00005190 4E75                       		rts	
00005192                            ; End of function SS_BGAnimate
00005192                            
00005192                            ; ===========================================================================
00005192 0928 1810 2818 1030 1808+  byte_4CB8:	dc.b 9,	$28, $18, $10, $28, $18, $10, $30, $18,	8, $10,	0
0000519E                            		even
0000519E 0630 3030 2818 1818        byte_4CC4:	dc.b 6,	$30, $30, $30, $28, $18, $18, $18
000051A6                            		even
000051A6 0802 04FF 0203 08FF 0402+  byte_4CCC:	dc.b 8,	2, 4, $FF, 2, 3, 8, $FF, 4, 2, 2, 3, 8,	$FD, 4,	2, 2, 3, 2, $FF
000051BA                            		even
000051BA                            					; XREF: SS_BGAnimate
000051BA                            ; ===========================================================================
000051BA                            
000051BA                            ; ---------------------------------------------------------------------------
000051BA                            ; Continue screen
000051BA                            ; ---------------------------------------------------------------------------
000051BA                            
000051BA                            ContinueScreen:				; XREF: GameModeArray
000051BA 6100 CE80                  		bsr.w	Pal_FadeFrom
000051BE 46FC 2700                  		move	#$2700,sr
000051C2 3038 F60C                  		move.w	($FFFFF60C).w,d0
000051C6 0200 00BF                  		andi.b	#$BF,d0
000051CA 33C0 00C0 0004             		move.w	d0,($C00004).l
000051D0 4DF9 00C0 0004             		lea	($C00004).l,a6
000051D6 3CBC 8004                  		move.w	#$8004,(a6)
000051DA 3CBC 8700                  		move.w	#$8700,(a6)
000051DE 6100 C308                  		bsr.w	ClearScreen
000051E2 43F8 D000                  		lea	($FFFFD000).w,a1
000051E6 7000                       		moveq	#0,d0
000051E8 323C 07FF                  		move.w	#$7FF,d1
000051EC                            
000051EC                            Cont_ClrObjRam:
000051EC 22C0                       		move.l	d0,(a1)+
000051EE 51C9 FFFC                  		dbf	d1,Cont_ClrObjRam ; clear object RAM
000051F2                            
000051F2 23FC 7000 0002 00C0 0004   		move.l	#$70000002,($C00004).l
000051FC 41F9 0000 0000             		lea	(Nem_TitleCard).l,a0 ; load title card patterns
00005202 6100 C460                  		bsr.w	NemDec
00005206 23FC 6000 0002 00C0 0004   		move.l	#$60000002,($C00004).l
00005210 41F9 0000 0000             		lea	(Nem_ContSonic).l,a0 ; load Sonic patterns
00005216 6100 C44C                  		bsr.w	NemDec
0000521A 23FC 6A20 0002 00C0 0004   		move.l	#$6A200002,($C00004).l
00005224 41F9 0000 0000             		lea	(Nem_MiniSonic).l,a0 ; load continue screen patterns
0000522A 6100 C438                  		bsr.w	NemDec
0000522E 720A                       		moveq	#10,d1
00005230 4EB9 0000 0000             		jsr	ContScrCounter	; run countdown	(start from 10)
00005236 7012                       		moveq	#$12,d0
00005238 6100 D0AC                  		bsr.w	PalLoad1	; load continue	screen pallet
0000523C 103C 0090                  		move.b	#$90,d0
00005240 6100 C378                  		bsr.w	PlaySound	; play continue	music
00005244 31FC 0293 F614             		move.w	#659,($FFFFF614).w ; set time delay to 11 seconds
0000524A 42B8 F700                  		clr.l	($FFFFF700).w
0000524E 21FC 0100 0000 F704        		move.l	#$1000000,($FFFFF704).w
00005256 11FC 0081 D000             		move.b	#$81,($FFFFD000).w ; load Sonic	object
0000525C 11FC 0080 D040             		move.b	#$80,($FFFFD040).w ; load continue screen objects
00005262 11FC 0080 D080             		move.b	#$80,($FFFFD080).w
00005268 11FC 0003 D098             		move.b	#3,($FFFFD098).w
0000526E 11FC 0004 D09A             		move.b	#4,($FFFFD09A).w
00005274 11FC 0080 D0C0             		move.b	#$80,($FFFFD0C0).w
0000527A 11FC 0004 D0E4             		move.b	#4,($FFFFD0E4).w
00005280 4EB9 0000 0000             		jsr	ObjectsLoad
00005286 4EB9 0000 0000             		jsr	BuildSprites
0000528C 3038 F60C                  		move.w	($FFFFF60C).w,d0
00005290 0000 0040                  		ori.b	#$40,d0
00005294 33C0 00C0 0004             		move.w	d0,($C00004).l
0000529A 6100 CCFA                  		bsr.w	Pal_FadeTo
0000529E                            
0000529E                            ; ---------------------------------------------------------------------------
0000529E                            ; Continue screen main loop
0000529E                            ; ---------------------------------------------------------------------------
0000529E                            
0000529E                            Cont_MainLoop:
0000529E 11FC 0016 F62A             		move.b	#$16,($FFFFF62A).w
000052A4 6100 D9D4                  		bsr.w	DelayProgram
000052A8 0C38 0006 D024             		cmpi.b	#6,($FFFFD024).w
000052AE 6400                       		bcc.s	loc_4DF2
000052B0 46FC 2700                  		move	#$2700,sr
000052B4 3238 F614                  		move.w	($FFFFF614).w,d1
000052B8 82FC 003C                  		divu.w	#$3C,d1
000052BC 0281 0000 000F             		andi.l	#$F,d1
000052C2 4EB9 0000 0000             		jsr	ContScrCounter
000052C8 46FC 2300                  		move	#$2300,sr
000052CC                            
000052CC                            loc_4DF2:
000052CC 4EB9 0000 0000             		jsr	ObjectsLoad
000052D2 4EB9 0000 0000             		jsr	BuildSprites
000052D8 0C78 0180 D008             		cmpi.w	#$180,($FFFFD008).w ; has Sonic	run off	screen?
000052DE 6400                       		bcc.s	Cont_GotoLevel	; if yes, branch
000052E0 0C38 0006 D024             		cmpi.b	#6,($FFFFD024).w
000052E6 64B6                       		bcc.s	Cont_MainLoop
000052E8 4A78 F614                  		tst.w	($FFFFF614).w
000052EC 6600 FFB0                  		bne.w	Cont_MainLoop
000052F0 11FC 0000 F600             		move.b	#0,($FFFFF600).w ; go to Sega screen
000052F6 4E75                       		rts	
000052F8                            ; ===========================================================================
000052F8                            
000052F8                            Cont_GotoLevel:				; XREF: Cont_MainLoop
000052F8 11FC 000C F600             		move.b	#$C,($FFFFF600).w ; set	screen mode to $0C (level)
000052FE 11FC 0027 FE12             		move.b	#39,($FFFFFE12).w ; set lives to	3
00005304 7000                       		moveq	#0,d0
00005306 31C0 FE20                  		move.w	d0,($FFFFFE20).w ; clear rings
0000530A 21C0 FE22                  		move.l	d0,($FFFFFE22).w ; clear time
0000530E 21C0 FE26                  		move.l	d0,($FFFFFE26).w ; clear score
00005312 11C0 FE30                  		move.b	d0,($FFFFFE30).w ; clear lamppost count
00005316 5338 FE18                  		subq.b	#1,($FFFFFE18).w ; subtract 1 from continues
0000531A 4E75                       		rts	
0000531C                            ; ===========================================================================
0000531C                            
0000531C                            ; ---------------------------------------------------------------------------
0000531C                            ; Object 80 - Continue screen elements
0000531C                            ; ---------------------------------------------------------------------------
0000531C                            
0000531C                            Obj80:					; XREF: Obj_Index
0000531C 7000                       		moveq	#0,d0
0000531E 1028 0024                  		move.b	$24(a0),d0
00005322 323B 0000                  		move.w	Obj80_Index(pc,d0.w),d1
00005326 4EFB 1000                  		jmp	Obj80_Index(pc,d1.w)
0000532A                            ; ===========================================================================
0000532A 0000                       Obj80_Index:	dc.w Obj80_Main-Obj80_Index
0000532C 0000                       		dc.w Obj80_Display-Obj80_Index
0000532E 0000                       		dc.w Obj80_MakeMiniSonic-Obj80_Index
00005330 0000                       		dc.w Obj80_ChkType-Obj80_Index
00005332                            ; ===========================================================================
00005332                            
00005332                            Obj80_Main:				; XREF: Obj80_Index
00005332 5428 0024                  		addq.b	#2,$24(a0)
00005336 217C 0000 0000 0004        		move.l	#Map_obj80,4(a0)
0000533E 317C 8500 0002             		move.w	#$8500,2(a0)
00005344 117C 0000 0001             		move.b	#0,1(a0)
0000534A 117C 003C 0019             		move.b	#$3C,$19(a0)
00005350 317C 0120 0008             		move.w	#$120,8(a0)
00005356 317C 00C0 000A             		move.w	#$C0,$A(a0)
0000535C 31FC 0000 FE20             		move.w	#0,($FFFFFE20).w ; clear rings
00005362                            
00005362                            Obj80_Display:				; XREF: Obj80_Index
00005362 4EF9 0000 0000             		jmp	DisplaySprite
00005368                            ; ===========================================================================
00005368                            Obj80_MiniSonicPos:
00005368 0116 012A 0102 013E 00EE+  		dc.w $116, $12A, $102, $13E, $EE, $152, $DA, $166, $C6
0000537A 017A 00B2 018E 009E 01A2+  		dc.w $17A, $B2,	$18E, $9E, $1A2, $8A
00005386                            ; ===========================================================================
00005386                            
00005386                            Obj80_MakeMiniSonic:			; XREF: Obj80_Index
00005386 2248                       		movea.l	a0,a1
00005388 45F9 0000 5368             		lea	(Obj80_MiniSonicPos).l,a2
0000538E 7200                       		moveq	#0,d1
00005390 1238 FE18                  		move.b	($FFFFFE18).w,d1
00005394 5501                       		subq.b	#2,d1
00005396 6400                       		bcc.s	loc_4EC4
00005398 4EF9 0000 0000             		jmp	DeleteObject
0000539E                            ; ===========================================================================
0000539E                            
0000539E                            loc_4EC4:				; XREF: Obj80_MakeMiniSonic
0000539E 7601                       		moveq	#1,d3
000053A0 0C01 000E                  		cmpi.b	#$E,d1
000053A4 6500                       		bcs.s	loc_4ED0
000053A6 7600                       		moveq	#0,d3
000053A8 720E                       		moveq	#$E,d1
000053AA                            
000053AA                            loc_4ED0:
000053AA 1401                       		move.b	d1,d2
000053AC 0202 0001                  		andi.b	#1,d2
000053B0                            
000053B0                            Obj80_MiniSonLoop:
000053B0 12BC 0080                  		move.b	#$80,0(a1)	; load mini Sonic object
000053B4 335A 0008                  		move.w	(a2)+,8(a1)
000053B8 4A02                       		tst.b	d2
000053BA 6700                       		beq.s	loc_4EEA
000053BC 0469 000A 0008             		subi.w	#$A,8(a1)
000053C2                            
000053C2                            loc_4EEA:
000053C2 337C 00D0 000A             		move.w	#$D0,$A(a1)
000053C8 137C 0006 001A             		move.b	#6,$1A(a1)
000053CE 137C 0006 0024             		move.b	#6,$24(a1)
000053D4 237C 0000 0000 0004        		move.l	#Map_obj80,4(a1)
000053DC 337C 8551 0002             		move.w	#$8551,2(a1)
000053E2 137C 0000 0001             		move.b	#0,1(a1)
000053E8 43E9 0040                  		lea	$40(a1),a1
000053EC 51C9 FFC2                  		dbf	d1,Obj80_MiniSonLoop ; repeat for number of continues
000053F0 43E9 FFC0                  		lea	-$40(a1),a1
000053F4 1343 0028                  		move.b	d3,$28(a1)
000053F8                            
000053F8                            Obj80_ChkType:				; XREF: Obj80_Index
000053F8 4A28 0028                  		tst.b	$28(a0)
000053FC 6700                       		beq.s	loc_4F40
000053FE 0C38 0006 D024             		cmpi.b	#6,($FFFFD024).w
00005404 6500                       		bcs.s	loc_4F40
00005406 1038 FE0F                  		move.b	($FFFFFE0F).w,d0
0000540A 0200 0001                  		andi.b	#1,d0
0000540E 6600                       		bne.s	loc_4F40
00005410 4A78 D010                  		tst.w	($FFFFD010).w
00005414 6600                       		bne.s	Obj80_Delete
00005416 4E75                       		rts	
00005418                            ; ===========================================================================
00005418                            
00005418                            loc_4F40:				; XREF: Obj80_ChkType
00005418 1038 FE0F                  		move.b	($FFFFFE0F).w,d0
0000541C 0200 000F                  		andi.b	#$F,d0
00005420 6600                       		bne.s	Obj80_Display2
00005422 0868 0000 001A             		bchg	#0,$1A(a0)
00005428                            
00005428                            Obj80_Display2:
00005428 4EF9 0000 0000             		jmp	DisplaySprite
0000542E                            ; ===========================================================================
0000542E                            
0000542E                            Obj80_Delete:				; XREF: Obj80_ChkType
0000542E 4EF9 0000 0000             		jmp	DeleteObject
00005434                            ; ===========================================================================
00005434                            
00005434                            ; ---------------------------------------------------------------------------
00005434                            ; Object 81 - Sonic on the continue screen
00005434                            ; ---------------------------------------------------------------------------
00005434                            
00005434                            Obj81:					; XREF: Obj_Index
00005434 7000                       		moveq	#0,d0
00005436 1028 0024                  		move.b	$24(a0),d0
0000543A 323B 0000                  		move.w	Obj81_Index(pc,d0.w),d1
0000543E 4EBB 1000                  		jsr	Obj81_Index(pc,d1.w)
00005442 4EF9 0000 0000             		jmp	DisplaySprite
00005448                            ; ===========================================================================
00005448 0000                       Obj81_Index:	dc.w Obj81_Main-Obj81_Index
0000544A 0000                       		dc.w Obj81_ChkLand-Obj81_Index
0000544C 0000                       		dc.w Obj81_Animate-Obj81_Index
0000544E 0000                       		dc.w Obj81_Run-Obj81_Index
00005450                            ; ===========================================================================
00005450                            
00005450                            Obj81_Main:				; XREF: Obj81_Index
00005450 5428 0024                  		addq.b	#2,$24(a0)
00005454 317C 00A0 0008             		move.w	#$A0,8(a0)
0000545A 317C 00C0 000C             		move.w	#$C0,$C(a0)
00005460 217C 0000 0000 0004        		move.l	#Map_Sonic,4(a0)
00005468 317C 0780 0002             		move.w	#$780,2(a0)
0000546E 117C 0004 0001             		move.b	#4,1(a0)
00005474 117C 0002 0018             		move.b	#2,$18(a0)
0000547A 117C 001D 001C             		move.b	#$1D,$1C(a0)	; use "floating" animation
00005480 317C 0400 0012             		move.w	#$400,$12(a0)	; make Sonic fall from above
00005486                            
00005486                            Obj81_ChkLand:				; XREF: Obj81_Index
00005486 0C68 01A0 000C             		cmpi.w	#$1A0,$C(a0)	; has Sonic landed yet?
0000548C 6600                       		bne.s	Obj81_ShowFall	; if not, branch
0000548E 5428 0024                  		addq.b	#2,$24(a0)
00005492 4268 0012                  		clr.w	$12(a0)		; stop Sonic falling
00005496 217C 0000 0000 0004        		move.l	#Map_obj80,4(a0)
0000549E 317C 8500 0002             		move.w	#$8500,2(a0)
000054A4 117C 0000 001C             		move.b	#0,$1C(a0)
000054AA 6000                       		bra.s	Obj81_Animate
000054AC                            ; ===========================================================================
000054AC                            
000054AC                            Obj81_ShowFall:				; XREF: Obj81_ChkLand
000054AC 4EB9 0000 0000             		jsr	SpeedToPos
000054B2 4EB9 0000 0000             		jsr	Sonic_Animate
000054B8 4EF9 0000 0000             		jmp	LoadSonicDynPLC
000054BE                            ; ===========================================================================
000054BE                            
000054BE                            Obj81_Animate:				; XREF: Obj81_Index
000054BE 4A38 F605                  		tst.b	($FFFFF605).w	; is any button	pressed?
000054C2 6B00                       		bmi.s	Obj81_GetUp	; if yes, branch
000054C4 43F9 0000 0000             		lea	(Ani_obj81).l,a1
000054CA 4EF9 0000 0000             		jmp	AnimateSprite
000054D0                            ; ===========================================================================
000054D0                            
000054D0                            Obj81_GetUp:				; XREF: Obj81_Animate
000054D0 5428 0024                  		addq.b	#2,$24(a0)
000054D4 217C 0000 0000 0004        		move.l	#Map_Sonic,4(a0)
000054DC 317C 0780 0002             		move.w	#$780,2(a0)
000054E2 117C 001E 001C             		move.b	#$1E,$1C(a0)	; use "getting up" animation
000054E8 4268 0014                  		clr.w	$14(a0)
000054EC 5168 000C                  		subq.w	#8,$C(a0)
000054F0 103C 00E0                  		move.b	#$E0,d0
000054F4 6100 C0CA                  		bsr.w	PlaySound_Special ; fade out music
000054F8                            
000054F8                            Obj81_Run:				; XREF: Obj81_Index
000054F8 0C68 0800 0014             		cmpi.w	#$800,$14(a0)	; check	Sonic's "run speed" (not moving)
000054FE 6600                       		bne.s	Obj81_AddSpeed	; if too low, branch
00005500 317C 1000 0010             		move.w	#$1000,$10(a0)	; move Sonic to	the right
00005506 6000                       		bra.s	Obj81_ShowRun
00005508                            ; ===========================================================================
00005508                            
00005508                            Obj81_AddSpeed:				; XREF: Obj81_Run
00005508 0668 0020 0014             		addi.w	#$20,$14(a0)	; increase "run	speed"
0000550E                            
0000550E                            Obj81_ShowRun:				; XREF: Obj81_Run
0000550E 4EB9 0000 0000             		jsr	SpeedToPos
00005514 4EB9 0000 0000             		jsr	Sonic_Animate
0000551A 4EF9 0000 0000             		jmp	LoadSonicDynPLC
00005520                            ; ===========================================================================
00005520                            Ani_obj81:
00005520                            	include "_anim\obj81.asm"
00005520                            ; ---------------------------------------------------------------------------
00005520                            ; Animation script - Sonic on the continue screen
00005520                            ; ---------------------------------------------------------------------------
00005520 0000                       		dc.w byte_504A-Ani_obj81
00005522 0401 0101 0102 0202 0303+  byte_504A:	dc.b 4,	1, 1, 1, 1, 2, 2, 2, 3,	3, $FF
0000552E 00                         		even
0000552E 00                         		even
0000552E                            
0000552E                            ; ---------------------------------------------------------------------------
0000552E                            ; Sprite mappings - Continue screen
0000552E                            ; ---------------------------------------------------------------------------
0000552E                            Map_obj80:
0000552E                            	include "_maps\obj80.asm"
0000552E                            ; ---------------------------------------------------------------------------
0000552E                            ; Sprite mappings - Continue screen
0000552E                            ; ---------------------------------------------------------------------------
0000552E 0000 0000                  		dc.w byte_5066-Map_obj80, byte_509E-Map_obj80
00005532 0000 0000                  		dc.w byte_50AE-Map_obj80, byte_50BE-Map_obj80
00005536 0000 0000                  		dc.w byte_50CE-Map_obj80, byte_50D9-Map_obj80
0000553A 0000 0000                  		dc.w byte_50D9-Map_obj80, byte_50DF-Map_obj80
0000553E 0B                         byte_5066:	dc.b $B
0000553F F805 0088 C4               		dc.b $F8, 5, 0,	$88, $C4 ; "CONTINUE", stars and countdown
00005544 F805 00B2 D4               		dc.b $F8, 5, 0,	$B2, $D4
00005549 F805 00AE E4               		dc.b $F8, 5, 0,	$AE, $E4
0000554E F805 00C2 F4               		dc.b $F8, 5, 0,	$C2, $F4
00005553 F801 00A0 04               		dc.b $F8, 1, 0,	$A0, 4
00005558 F805 00AE 0C               		dc.b $F8, 5, 0,	$AE, $C
0000555D F805 00C6 1C               		dc.b $F8, 5, 0,	$C6, $1C
00005562 F805 0090 2C               		dc.b $F8, 5, 0,	$90, $2C
00005567 3805 2021 E8               		dc.b $38, 5, $20, $21, $E8
0000556C 3805 2021 08               		dc.b $38, 5, $20, $21, 8
00005571 3605 01FC F8               		dc.b $36, 5, 1,	$FC, $F8
00005576 03                         byte_509E:	dc.b 3
00005577 0405 0015 FC               		dc.b 4,	5, 0, $15, $FC	; Sonic	on floor
0000557C F40A 0006 EC               		dc.b $F4, $A, 0, 6, $EC
00005581 F406 000F 04               		dc.b $F4, 6, 0,	$F, 4
00005586 03                         byte_50AE:	dc.b 3
00005587 0405 0019 FC               		dc.b 4,	5, 0, $19, $FC	; Sonic	on floor #2
0000558C F40A 0006 EC               		dc.b $F4, $A, 0, 6, $EC
00005591 F406 000F 04               		dc.b $F4, 6, 0,	$F, 4
00005596 03                         byte_50BE:	dc.b 3
00005597 0405 001D FC               		dc.b 4,	5, 0, $1D, $FC	; Sonic	on floor #3
0000559C F40A 0006 EC               		dc.b $F4, $A, 0, 6, $EC
000055A1 F406 000F 04               		dc.b $F4, 6, 0,	$F, 4
000055A6 02                         byte_50CE:	dc.b 2
000055A7 6009 2000 E8               		dc.b $60, 9, $20, 0, $E8 ; circle on the floor
000055AC 6009 2800 00               		dc.b $60, 9, $28, 0, 0
000055B1 01                         byte_50D9:	dc.b 1
000055B2 0006 0012 00               		dc.b 0,	6, 0, $12, 0	; mini Sonic
000055B7 01                         byte_50DF:	dc.b 1
000055B8 0006 0018 00               		dc.b 0,	6, 0, $18, 0	; mini Sonic #2
000055BE 00                         		even
000055BE 00                         		even
000055BE                            
000055BE                            ; ===========================================================================
000055BE                            ; ---------------------------------------------------------------------------
000055BE                            ; Ending sequence in Green Hill	Zone
000055BE                            ; ---------------------------------------------------------------------------
000055BE                            
000055BE                            EndingSequence:				; XREF: GameModeArray
000055BE 103C 00E4                  		move.b	#$E4,d0
000055C2 6100 BFFC                  		bsr.w	PlaySound_Special ; stop music
000055C6 6100 CA74                  		bsr.w	Pal_FadeFrom
000055CA 43F8 D000                  		lea	($FFFFD000).w,a1
000055CE 7000                       		moveq	#0,d0
000055D0 323C 07FF                  		move.w	#$7FF,d1
000055D4                            
000055D4                            End_ClrObjRam:
000055D4 22C0                       		move.l	d0,(a1)+
000055D6 51C9 FFFC                  		dbf	d1,End_ClrObjRam ; clear object	RAM
000055DA                            
000055DA 43F8 F628                  		lea	($FFFFF628).w,a1
000055DE 7000                       		moveq	#0,d0
000055E0 323C 0015                  		move.w	#$15,d1
000055E4                            
000055E4                            End_ClrRam:
000055E4 22C0                       		move.l	d0,(a1)+
000055E6 51C9 FFFC                  		dbf	d1,End_ClrRam	; clear	variables
000055EA                            
000055EA 43F8 F700                  		lea	($FFFFF700).w,a1
000055EE 7000                       		moveq	#0,d0
000055F0 323C 003F                  		move.w	#$3F,d1
000055F4                            
000055F4                            End_ClrRam2:
000055F4 22C0                       		move.l	d0,(a1)+
000055F6 51C9 FFFC                  		dbf	d1,End_ClrRam2	; clear	variables
000055FA                            
000055FA 43F8 FE60                  		lea	($FFFFFE60).w,a1
000055FE 7000                       		moveq	#0,d0
00005600 323C 0047                  		move.w	#$47,d1
00005604                            
00005604                            End_ClrRam3:
00005604 22C0                       		move.l	d0,(a1)+
00005606 51C9 FFFC                  		dbf	d1,End_ClrRam3	; clear	variables
0000560A                            
0000560A 46FC 2700                  		move	#$2700,sr
0000560E 3038 F60C                  		move.w	($FFFFF60C).w,d0
00005612 0200 00BF                  		andi.b	#$BF,d0
00005616 33C0 00C0 0004             		move.w	d0,($C00004).l
0000561C 6100 BECA                  		bsr.w	ClearScreen
00005620 4DF9 00C0 0004             		lea	($C00004).l,a6
00005626 3CBC 8B03                  		move.w	#$8B03,(a6)
0000562A 3CBC 8230                  		move.w	#$8230,(a6)
0000562E 3CBC 8407                  		move.w	#$8407,(a6)
00005632 3CBC 857C                  		move.w	#$857C,(a6)
00005636 3CBC 9001                  		move.w	#$9001,(a6)
0000563A 3CBC 8004                  		move.w	#$8004,(a6)
0000563E 3CBC 8720                  		move.w	#$8720,(a6)
00005642 31FC 8ADF F624             		move.w	#$8ADF,($FFFFF624).w
00005648 3CB8 F624                  		move.w	($FFFFF624).w,(a6)
0000564C 31FC 001E FE14             		move.w	#$1E,($FFFFFE14).w
00005652 31FC 0600 FE10             		move.w	#$600,($FFFFFE10).w ; set level	number to 0600 (extra flowers)
00005658 0C38 0006 FE57             		cmpi.b	#6,($FFFFFE57).w ; do you have all 6 emeralds?
0000565E 6700                       		beq.s	End_LoadData	; if yes, branch
00005660 31FC 0601 FE10             		move.w	#$601,($FFFFFE10).w ; set level	number to 0601 (no flowers)
00005666                            
00005666                            End_LoadData:
00005666 701C                       		moveq	#$1C,d0
00005668 6100 C2A6                  		bsr.w	RunPLC_ROM	; load ending sequence patterns
0000566C 4EB9 0000 0000             		jsr	Hud_Base
00005672 6100 0000                  		bsr.w	LevelSizeLoad
00005676 6100 0000                  		bsr.w	DeformBgLayer
0000567A 08F8 0002 F754             		bset	#2,($FFFFF754).w
00005680 6100 0000                  		bsr.w	MainLoadBlockLoad
00005684 6100 0000                  		bsr.w	LoadTilesFromStart
00005688 21FC 0000 0000 F796        		move.l	#Col_GHZ,($FFFFF796).w ; load collision	index
00005690 46FC 2300                  		move	#$2300,sr
00005694 41F9 0000 0000             		lea	(Kos_EndFlowers).l,a0 ;	load extra flower patterns
0000569A 43F8 9400                  		lea	($FFFF9400).w,a1 ; RAM address to buffer the patterns
0000569E 6100 C420                  		bsr.w	KosDec
000056A2 7003                       		moveq	#3,d0
000056A4 6100 CC40                  		bsr.w	PalLoad1	; load Sonic's pallet
000056A8 303C 008B                  		move.w	#$8B,d0
000056AC 6100 BF0C                  		bsr.w	PlaySound	; play ending sequence music
000056B0 0838 0006 F604             		btst	#6,($FFFFF604).w ; is button A pressed?
000056B6 6700                       		beq.s	End_LoadSonic	; if not, branch
000056B8 11FC 0001 FFFA             		move.b	#1,($FFFFFFFA).w ; enable debug	mode
000056BE                            
000056BE                            End_LoadSonic:
000056BE 11FC 0001 D000             		move.b	#1,($FFFFD000).w ; load	Sonic object
000056C4 08F8 0000 D022             		bset	#0,($FFFFD022).w ; make	Sonic face left
000056CA 11FC 0001 F7CC             		move.b	#1,($FFFFF7CC).w ; lock	controls
000056D0 31FC 0400 F602             		move.w	#$400,($FFFFF602).w ; move Sonic to the	left
000056D6 31FC F800 D014             		move.w	#$F800,($FFFFD014).w ; set Sonic's speed
000056DC 11FC 0021 D040             		move.b	#$21,($FFFFD040).w ; load HUD object
000056E2 4EB9 0000 0000             		jsr	ObjPosLoad
000056E8 4EB9 0000 0000             		jsr	ObjectsLoad
000056EE 4EB9 0000 0000             		jsr	BuildSprites
000056F4 7000                       		moveq	#0,d0
000056F6 31C0 FE20                  		move.w	d0,($FFFFFE20).w
000056FA 21C0 FE22                  		move.l	d0,($FFFFFE22).w
000056FE 11C0 FE1B                  		move.b	d0,($FFFFFE1B).w
00005702 11C0 FE2C                  		move.b	d0,($FFFFFE2C).w
00005706 11C0 FE2D                  		move.b	d0,($FFFFFE2D).w
0000570A 11C0 FE2E                  		move.b	d0,($FFFFFE2E).w
0000570E 11C0 FE2F                  		move.b	d0,($FFFFFE2F).w
00005712 31C0 FE08                  		move.w	d0,($FFFFFE08).w
00005716 31C0 FE02                  		move.w	d0,($FFFFFE02).w
0000571A 31C0 FE04                  		move.w	d0,($FFFFFE04).w
0000571E 6100 EEDA                  		bsr.w	OscillateNumInit
00005722 11FC 0001 FE1F             		move.b	#1,($FFFFFE1F).w
00005728 11FC 0001 FE1D             		move.b	#1,($FFFFFE1D).w
0000572E 11FC 0000 FE1E             		move.b	#0,($FFFFFE1E).w
00005734 31FC 0708 F614             		move.w	#1800,($FFFFF614).w
0000573A 11FC 0018 F62A             		move.b	#$18,($FFFFF62A).w
00005740 6100 D538                  		bsr.w	DelayProgram
00005744 3038 F60C                  		move.w	($FFFFF60C).w,d0
00005748 0000 0040                  		ori.b	#$40,d0
0000574C 33C0 00C0 0004             		move.w	d0,($C00004).l
00005752 31FC 003F F626             		move.w	#$3F,($FFFFF626).w
00005758 6100 C83C                  		bsr.w	Pal_FadeTo
0000575C                            
0000575C                            ; ---------------------------------------------------------------------------
0000575C                            ; Main ending sequence loop
0000575C                            ; ---------------------------------------------------------------------------
0000575C                            
0000575C                            End_MainLoop:
0000575C 6100 BE6E                  		bsr.w	PauseGame
00005760 11FC 0018 F62A             		move.b	#$18,($FFFFF62A).w
00005766 6100 D512                  		bsr.w	DelayProgram
0000576A 5278 FE04                  		addq.w	#1,($FFFFFE04).w
0000576E 6100 0000                  		bsr.w	End_MoveSonic
00005772 4EB9 0000 0000             		jsr	ObjectsLoad
00005778 6100 0000                  		bsr.w	DeformBgLayer
0000577C 4EB9 0000 0000             		jsr	BuildSprites
00005782 4EB9 0000 0000             		jsr	ObjPosLoad
00005788 6100 C3D6                  		bsr.w	PalCycle_Load
0000578C 6100 EEC2                  		bsr.w	OscillateNumDo
00005790 6100 EF4E                  		bsr.w	ChangeRingFrame
00005794 0C38 0018 F600             		cmpi.b	#$18,($FFFFF600).w ; is	scene number $18 (ending)?
0000579A 6700                       		beq.s	loc_52DA	; if yes, branch
0000579C 11FC 001C F600             		move.b	#$1C,($FFFFF600).w ; set scene to $1C (credits)
000057A2 103C 0091                  		move.b	#$91,d0
000057A6 6100 BE18                  		bsr.w	PlaySound_Special ; play credits music
000057AA 31FC 0000 FFF4             		move.w	#0,($FFFFFFF4).w ; set credits index number to 0
000057B0 4E75                       		rts	
000057B2                            ; ===========================================================================
000057B2                            
000057B2                            loc_52DA:
000057B2 4A78 FE02                  		tst.w	($FFFFFE02).w	; is level set to restart?
000057B6 6700 FFA4                  		beq.w	End_MainLoop	; if not, branch
000057BA                            
000057BA 4278 FE02                  		clr.w	($FFFFFE02).w
000057BE 31FC 003F F626             		move.w	#$3F,($FFFFF626).w
000057C4 4278 F794                  		clr.w	($FFFFF794).w
000057C8                            
000057C8                            End_AllEmlds:				; XREF: loc_5334
000057C8 6100 BE02                  		bsr.w	PauseGame
000057CC 11FC 0018 F62A             		move.b	#$18,($FFFFF62A).w
000057D2 6100 D4A6                  		bsr.w	DelayProgram
000057D6 5278 FE04                  		addq.w	#1,($FFFFFE04).w
000057DA 6100 0000                  		bsr.w	End_MoveSonic
000057DE 4EB9 0000 0000             		jsr	ObjectsLoad
000057E4 6100 0000                  		bsr.w	DeformBgLayer
000057E8 4EB9 0000 0000             		jsr	BuildSprites
000057EE 4EB9 0000 0000             		jsr	ObjPosLoad
000057F4 6100 EE5A                  		bsr.w	OscillateNumDo
000057F8 6100 EEE6                  		bsr.w	ChangeRingFrame
000057FC 5378 F794                  		subq.w	#1,($FFFFF794).w
00005800 6A00                       		bpl.s	loc_5334
00005802 31FC 0002 F794             		move.w	#2,($FFFFF794).w
00005808 6100 C97C                  		bsr.w	Pal_ToWhite
0000580C                            
0000580C                            loc_5334:
0000580C 4A78 FE02                  		tst.w	($FFFFFE02).w
00005810 6700 FFB6                  		beq.w	End_AllEmlds
00005814 4278 FE02                  		clr.w	($FFFFFE02).w
00005818 31FC 2E2F A480             		move.w	#$2E2F,($FFFFA480).w ; modify level layout
0000581E 4BF9 00C0 0004             		lea	($C00004).l,a5
00005824 4DF9 00C0 0000             		lea	($C00000).l,a6
0000582A 47F8 F700                  		lea	($FFFFF700).w,a3
0000582E 49F8 A400                  		lea	($FFFFA400).w,a4
00005832 343C 4000                  		move.w	#$4000,d2
00005836 6100 0000                  		bsr.w	LoadTilesFromStart2
0000583A 7013                       		moveq	#$13,d0
0000583C 6100 CAA8                  		bsr.w	PalLoad1	; load ending pallet
00005840 6100 C878                  		bsr.w	Pal_MakeWhite
00005844 6000 FF16                  		bra.w	End_MainLoop
00005848                            
00005848                            ; ---------------------------------------------------------------------------
00005848                            ; Subroutine controlling Sonic on the ending sequence
00005848                            ; ---------------------------------------------------------------------------
00005848                            
00005848                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00005848                            
00005848                            
00005848                            End_MoveSonic:				; XREF: End_MainLoop
00005848 1038 F7D7                  		move.b	($FFFFF7D7).w,d0
0000584C 6600                       		bne.s	End_MoveSonic2
0000584E 0C78 0090 D008             		cmpi.w	#$90,($FFFFD008).w ; has Sonic passed $90 on y-axis?
00005854 6400                       		bcc.s	End_MoveSonExit	; if not, branch
00005856 5438 F7D7                  		addq.b	#2,($FFFFF7D7).w
0000585A 11FC 0001 F7CC             		move.b	#1,($FFFFF7CC).w ; lock	player's controls
00005860 31FC 0800 F602             		move.w	#$800,($FFFFF602).w ; move Sonic to the	right
00005866 4E75                       		rts	
00005868                            ; ===========================================================================
00005868                            
00005868                            End_MoveSonic2:				; XREF: End_MoveSonic
00005868 5500                       		subq.b	#2,d0
0000586A 6600                       		bne.s	End_MoveSonic3
0000586C 0C78 00A0 D008             		cmpi.w	#$A0,($FFFFD008).w ; has Sonic passed $A0 on y-axis?
00005872 6500                       		bcs.s	End_MoveSonExit	; if not, branch
00005874 5438 F7D7                  		addq.b	#2,($FFFFF7D7).w
00005878 7000                       		moveq	#0,d0
0000587A 11C0 F7CC                  		move.b	d0,($FFFFF7CC).w
0000587E 31C0 F602                  		move.w	d0,($FFFFF602).w ; stop	Sonic moving
00005882 31C0 D014                  		move.w	d0,($FFFFD014).w
00005886 11FC 0081 F7C8             		move.b	#$81,($FFFFF7C8).w
0000588C 11FC 0003 D01A             		move.b	#3,($FFFFD01A).w
00005892 31FC 0505 D01C             		move.w	#$505,($FFFFD01C).w ; use "standing" animation
00005898 11FC 0003 D01E             		move.b	#3,($FFFFD01E).w
0000589E 4E75                       		rts	
000058A0                            ; ===========================================================================
000058A0                            
000058A0                            End_MoveSonic3:				; XREF: End_MoveSonic
000058A0 5500                       		subq.b	#2,d0
000058A2 6600                       		bne.s	End_MoveSonExit
000058A4 5438 F7D7                  		addq.b	#2,($FFFFF7D7).w
000058A8 31FC 00A0 D008             		move.w	#$A0,($FFFFD008).w
000058AE 11FC 0087 D000             		move.b	#$87,($FFFFD000).w ; load Sonic	ending sequence	object
000058B4 4278 D024                  		clr.w	($FFFFD024).w
000058B8                            
000058B8                            End_MoveSonExit:
000058B8 4E75                       		rts	
000058BA                            ; End of function End_MoveSonic
000058BA                            
000058BA                            ; ===========================================================================
000058BA                            ; ---------------------------------------------------------------------------
000058BA                            ; Object 87 - Sonic on ending sequence
000058BA                            ; ---------------------------------------------------------------------------
000058BA                            
000058BA                            Obj87:					; XREF: Obj_Index
000058BA 7000                       		moveq	#0,d0
000058BC 1028 0025                  		move.b	$25(a0),d0
000058C0 323B 0000                  		move.w	Obj87_Index(pc,d0.w),d1
000058C4 4EBB 1000                  		jsr	Obj87_Index(pc,d1.w)
000058C8 4EF9 0000 0000             		jmp	DisplaySprite
000058CE                            ; ===========================================================================
000058CE 0000 0000                  Obj87_Index:	dc.w Obj87_Main-Obj87_Index, Obj87_MakeEmlds-Obj87_Index
000058D2 0000 0000                  		dc.w Obj87_Animate-Obj87_Index,	Obj87_LookUp-Obj87_Index
000058D6 0000 0000                  		dc.w Obj87_ClrObjRam-Obj87_Index, Obj87_Animate-Obj87_Index
000058DA 0000 0000                  		dc.w Obj87_MakeLogo-Obj87_Index, Obj87_Animate-Obj87_Index
000058DE 0000 0000                  		dc.w Obj87_Leap-Obj87_Index, Obj87_Animate-Obj87_Index
000058E2                            ; ===========================================================================
000058E2                            
000058E2                            Obj87_Main:				; XREF: Obj87_Index
000058E2 0C38 0006 FE57             		cmpi.b	#6,($FFFFFE57).w ; do you have all 6 emeralds?
000058E8 6700                       		beq.s	Obj87_Main2	; if yes, branch
000058EA 0628 0010 0025             		addi.b	#$10,$25(a0)	; else,	skip emerald sequence
000058F0 317C 00D8 0030             		move.w	#$D8,$30(a0)
000058F6 4E75                       		rts	
000058F8                            ; ===========================================================================
000058F8                            
000058F8                            Obj87_Main2:				; XREF: Obj87_Main
000058F8 5428 0025                  		addq.b	#2,$25(a0)
000058FC 217C 0000 0000 0004        		move.l	#Map_obj87,4(a0)
00005904 317C 03E1 0002             		move.w	#$3E1,2(a0)
0000590A 117C 0004 0001             		move.b	#4,1(a0)
00005910 4228 0022                  		clr.b	$22(a0)
00005914 117C 0002 0018             		move.b	#2,$18(a0)
0000591A 117C 0000 001A             		move.b	#0,$1A(a0)
00005920 317C 0050 0030             		move.w	#$50,$30(a0)	; set duration for Sonic to pause
00005926                            
00005926                            Obj87_MakeEmlds:			; XREF: Obj87_Index
00005926 5368 0030                  		subq.w	#1,$30(a0)	; subtract 1 from duration
0000592A 6600                       		bne.s	Obj87_Wait
0000592C 5428 0025                  		addq.b	#2,$25(a0)
00005930 317C 0001 001C             		move.w	#1,$1C(a0)
00005936 11FC 0088 D400             		move.b	#$88,($FFFFD400).w ; load chaos	emeralds objects
0000593C                            
0000593C                            Obj87_Wait:
0000593C 4E75                       		rts	
0000593E                            ; ===========================================================================
0000593E                            
0000593E                            Obj87_LookUp:				; XREF: Obj87_Index
0000593E 0C79 2000 00FF D43C        		cmpi.w	#$2000,($FFD43C).l
00005946 6600                       		bne.s	locret_5480
00005948 31FC 0001 FE02             		move.w	#1,($FFFFFE02).w ; set level to	restart	(causes	flash)
0000594E 317C 005A 0030             		move.w	#$5A,$30(a0)
00005954 5428 0025                  		addq.b	#2,$25(a0)
00005958                            
00005958                            locret_5480:
00005958 4E75                       		rts	
0000595A                            ; ===========================================================================
0000595A                            
0000595A                            Obj87_ClrObjRam:			; XREF: Obj87_Index
0000595A 5368 0030                  		subq.w	#1,$30(a0)
0000595E 6600                       		bne.s	Obj87_Wait2
00005960 43F8 D400                  		lea	($FFFFD400).w,a1
00005964 323C 00FF                  		move.w	#$FF,d1
00005968                            
00005968                            Obj87_ClrLoop:
00005968 4299                       		clr.l	(a1)+
0000596A 51C9 FFFC                  		dbf	d1,Obj87_ClrLoop ; clear the object RAM
0000596E 31FC 0001 FE02             		move.w	#1,($FFFFFE02).w
00005974 5428 0025                  		addq.b	#2,$25(a0)
00005978 117C 0001 001C             		move.b	#1,$1C(a0)
0000597E 317C 003C 0030             		move.w	#$3C,$30(a0)
00005984                            
00005984                            Obj87_Wait2:
00005984 4E75                       		rts	
00005986                            ; ===========================================================================
00005986                            
00005986                            Obj87_MakeLogo:				; XREF: Obj87_Index
00005986 5368 0030                  		subq.w	#1,$30(a0)
0000598A 6600                       		bne.s	Obj87_Wait3
0000598C 5428 0025                  		addq.b	#2,$25(a0)
00005990 317C 00B4 0030             		move.w	#$B4,$30(a0)
00005996 117C 0002 001C             		move.b	#2,$1C(a0)
0000599C 11FC 0089 D400             		move.b	#$89,($FFFFD400).w ; load "SONIC THE HEDGEHOG" object
000059A2                            
000059A2                            Obj87_Wait3:
000059A2 4E75                       		rts	
000059A4                            ; ===========================================================================
000059A4                            
000059A4                            Obj87_Animate:				; XREF: Obj87_Index
000059A4 43F9 0000 0000             		lea	(Ani_obj87).l,a1
000059AA 4EF9 0000 0000             		jmp	AnimateSprite
000059B0                            ; ===========================================================================
000059B0                            
000059B0                            Obj87_Leap:				; XREF: Obj87_Index
000059B0 5368 0030                  		subq.w	#1,$30(a0)
000059B4 6600                       		bne.s	Obj87_Wait4
000059B6 5428 0025                  		addq.b	#2,$25(a0)
000059BA 217C 0000 0000 0004        		move.l	#Map_obj87,4(a0)
000059C2 317C 03E1 0002             		move.w	#$3E1,2(a0)
000059C8 117C 0004 0001             		move.b	#4,1(a0)
000059CE 4228 0022                  		clr.b	$22(a0)
000059D2 117C 0002 0018             		move.b	#2,$18(a0)
000059D8 117C 0005 001A             		move.b	#5,$1A(a0)
000059DE 117C 0002 001C             		move.b	#2,$1C(a0)	; use "leaping"	animation
000059E4 11FC 0089 D400             		move.b	#$89,($FFFFD400).w ; load "SONIC THE HEDGEHOG" object
000059EA 60B8                       		bra.s	Obj87_Animate
000059EC                            ; ===========================================================================
000059EC                            
000059EC                            Obj87_Wait4:				; XREF: Obj87_Leap
000059EC 4E75                       		rts	
000059EE                            ; ===========================================================================
000059EE                            Ani_obj87:
000059EE                            	include "_anim\obj87.asm"
000059EE                            ; ---------------------------------------------------------------------------
000059EE                            ; Animation script - Sonic on the ending sequence
000059EE                            ; ---------------------------------------------------------------------------
000059EE 0000                       		dc.w byte_551C-Ani_obj87
000059F0 0000                       		dc.w byte_552A-Ani_obj87
000059F2 0000                       		dc.w byte_5534-Ani_obj87
000059F4 0301 0001 0001 0001 0001+  byte_551C:	dc.b 3,	1, 0, 1, 0, 1, 0, 1, 0,	1, 0, 1, 2, $FA
00005A02 0503 0403 0403 0403 FA00   byte_552A:	dc.b 5,	3, 4, 3, 4, 3, 4, 3, $FA, 0
00005A0C 0305 0505 0607 FE01        byte_5534:	dc.b 3,	5, 5, 5, 6, 7, $FE, 1
00005A14                            		even
00005A14                            		even
00005A14                            
00005A14                            ; ===========================================================================
00005A14                            ; ---------------------------------------------------------------------------
00005A14                            ; Object 88 - chaos emeralds on	the ending sequence
00005A14                            ; ---------------------------------------------------------------------------
00005A14                            
00005A14                            Obj88:					; XREF: Obj_Index
00005A14 7000                       		moveq	#0,d0
00005A16 1028 0024                  		move.b	$24(a0),d0
00005A1A 323B 0000                  		move.w	Obj88_Index(pc,d0.w),d1
00005A1E 4EBB 1000                  		jsr	Obj88_Index(pc,d1.w)
00005A22 4EF9 0000 0000             		jmp	DisplaySprite
00005A28                            ; ===========================================================================
00005A28 0000                       Obj88_Index:	dc.w Obj88_Main-Obj88_Index
00005A2A 0000                       		dc.w Obj88_Move-Obj88_Index
00005A2C                            ; ===========================================================================
00005A2C                            
00005A2C                            Obj88_Main:				; XREF: Obj88_Index
00005A2C 0C38 0002 D01A             		cmpi.b	#2,($FFFFD01A).w
00005A32 6700                       		beq.s	Obj88_Main2
00005A34 588F                       		addq.l	#4,sp
00005A36 4E75                       		rts	
00005A38                            ; ===========================================================================
00005A38                            
00005A38                            Obj88_Main2:				; XREF: Obj88_Main
00005A38 3178 D008 0008             		move.w	($FFFFD008).w,8(a0) ; match X position with Sonic
00005A3E 3178 D00C 000C             		move.w	($FFFFD00C).w,$C(a0) ; match Y position	with Sonic
00005A44 2248                       		movea.l	a0,a1
00005A46 7600                       		moveq	#0,d3
00005A48 7401                       		moveq	#1,d2
00005A4A 7205                       		moveq	#5,d1
00005A4C                            
00005A4C                            Obj88_MainLoop:
00005A4C 12BC 0088                  		move.b	#$88,(a1)	; load chaos emerald object
00005A50 5429 0024                  		addq.b	#2,$24(a1)
00005A54 237C 0000 0000 0004        		move.l	#Map_obj88,4(a1)
00005A5C 337C 03C5 0002             		move.w	#$3C5,2(a1)
00005A62 137C 0004 0001             		move.b	#4,1(a1)
00005A68 137C 0001 0018             		move.b	#1,$18(a1)
00005A6E 3368 0008 0038             		move.w	8(a0),$38(a1)
00005A74 3368 000C 003A             		move.w	$C(a0),$3A(a1)
00005A7A 1342 001C                  		move.b	d2,$1C(a1)
00005A7E 1342 001A                  		move.b	d2,$1A(a1)
00005A82 5202                       		addq.b	#1,d2
00005A84 1343 0026                  		move.b	d3,$26(a1)
00005A88 0603 002A                  		addi.b	#$2A,d3
00005A8C 43E9 0040                  		lea	$40(a1),a1
00005A90 51C9 FFBA                  		dbf	d1,Obj88_MainLoop ; repeat 5 more times
00005A94                            
00005A94                            Obj88_Move:				; XREF: Obj88_Index
00005A94 3028 003E                  		move.w	$3E(a0),d0
00005A98 D168 0026                  		add.w	d0,$26(a0)
00005A9C 1028 0026                  		move.b	$26(a0),d0
00005AA0 4EB9 0000 2CAC             		jsr	(CalcSine).l
00005AA6 7800                       		moveq	#0,d4
00005AA8 1828 003C                  		move.b	$3C(a0),d4
00005AAC C3C4                       		muls.w	d4,d1
00005AAE E081                       		asr.l	#8,d1
00005AB0 C1C4                       		muls.w	d4,d0
00005AB2 E080                       		asr.l	#8,d0
00005AB4 D268 0038                  		add.w	$38(a0),d1
00005AB8 D068 003A                  		add.w	$3A(a0),d0
00005ABC 3141 0008                  		move.w	d1,8(a0)
00005AC0 3140 000C                  		move.w	d0,$C(a0)
00005AC4 0C68 2000 003C             		cmpi.w	#$2000,$3C(a0)
00005ACA 6700                       		beq.s	loc_55FA
00005ACC 0668 0020 003C             		addi.w	#$20,$3C(a0)
00005AD2                            
00005AD2                            loc_55FA:
00005AD2 0C68 2000 003E             		cmpi.w	#$2000,$3E(a0)
00005AD8 6700                       		beq.s	loc_5608
00005ADA 0668 0020 003E             		addi.w	#$20,$3E(a0)
00005AE0                            
00005AE0                            loc_5608:
00005AE0 0C68 0140 003A             		cmpi.w	#$140,$3A(a0)
00005AE6 6700                       		beq.s	locret_5614
00005AE8 5368 003A                  		subq.w	#1,$3A(a0)
00005AEC                            
00005AEC                            locret_5614:
00005AEC 4E75                       		rts	
00005AEE                            ; ===========================================================================
00005AEE                            ; ---------------------------------------------------------------------------
00005AEE                            ; Object 89 - "SONIC THE HEDGEHOG" text	on the ending sequence
00005AEE                            ; ---------------------------------------------------------------------------
00005AEE                            
00005AEE                            Obj89:					; XREF: Obj_Index
00005AEE 7000                       		moveq	#0,d0
00005AF0 1028 0024                  		move.b	$24(a0),d0
00005AF4 323B 0000                  		move.w	Obj89_Index(pc,d0.w),d1
00005AF8 4EFB 1000                  		jmp	Obj89_Index(pc,d1.w)
00005AFC                            ; ===========================================================================
00005AFC 0000                       Obj89_Index:	dc.w Obj89_Main-Obj89_Index
00005AFE 0000                       		dc.w Obj89_Move-Obj89_Index
00005B00 0000                       		dc.w Obj89_GotoCredits-Obj89_Index
00005B02                            ; ===========================================================================
00005B02                            
00005B02                            Obj89_Main:				; XREF: Obj89_Index
00005B02 5428 0024                  		addq.b	#2,$24(a0)
00005B06 317C FFE0 0008             		move.w	#-$20,8(a0)	; object starts	outside	the level boundary
00005B0C 317C 00D8 000A             		move.w	#$D8,$A(a0)
00005B12 217C 0000 0000 0004        		move.l	#Map_obj89,4(a0)
00005B1A 317C 05C5 0002             		move.w	#$5C5,2(a0)
00005B20 117C 0000 0001             		move.b	#0,1(a0)
00005B26 117C 0000 0018             		move.b	#0,$18(a0)
00005B2C                            
00005B2C                            Obj89_Move:				; XREF: Obj89_Index
00005B2C 0C68 00C0 0008             		cmpi.w	#$C0,8(a0)	; has object reached $C0?
00005B32 6700                       		beq.s	Obj89_Delay	; if yes, branch
00005B34 0668 0010 0008             		addi.w	#$10,8(a0)	; move object to the right
00005B3A 4EB9 0000 0000             		jsr	DisplaySprite
00005B40                            ; ===========================================================================
00005B40                            
00005B40                            Obj89_Delay:				; XREF: Obj89_Move
00005B40 5428 0024                  		addq.b	#2,$24(a0)
00005B44 317C 0078 0030             		move.w	#120,$30(a0)	; set duration for delay (2 seconds)
00005B4A                            
00005B4A                            Obj89_GotoCredits:			; XREF: Obj89_Index
00005B4A 5368 0030                  		subq.w	#1,$30(a0)	; subtract 1 from duration
00005B4E 6A00                       		bpl.s	Obj89_Display
00005B50 11FC 001C F600             		move.b	#$1C,($FFFFF600).w ; exit to credits
00005B56                            
00005B56                            Obj89_Display:
00005B56 4EB9 0000 0000             		jsr	DisplaySprite
00005B5C                            ; ===========================================================================
00005B5C                            ; ---------------------------------------------------------------------------
00005B5C                            ; Sprite mappings - Sonic on the ending	sequence
00005B5C                            ; ---------------------------------------------------------------------------
00005B5C                            Map_obj87:
00005B5C                            	include "_maps\obj87.asm"
00005B5C                            ; ---------------------------------------------------------------------------
00005B5C                            ; Sprite mappings - Sonic on the ending	sequence
00005B5C                            ; ---------------------------------------------------------------------------
00005B5C 0000 0000                  		dc.w byte_5690-Map_obj87, byte_569B-Map_obj87
00005B60 0000 0000                  		dc.w byte_56AB-Map_obj87, byte_56B6-Map_obj87
00005B64 0000 0000                  		dc.w byte_56C1-Map_obj87, byte_56CC-Map_obj87
00005B68 0000 0000                  		dc.w byte_56DC-Map_obj87, byte_5700-Map_obj87
00005B6C 02                         byte_5690:	dc.b 2
00005B6D EC0B 0000 F8               		dc.b $EC, $B, 0, 0, $F8	; holding emeralds
00005B72 0C0C 000C F0               		dc.b $C, $C, 0,	$C, $F0
00005B77 03                         byte_569B:	dc.b 3
00005B78 FC0D 0010 F0               		dc.b $FC, $D, 0, $10, $F0 ; holding emeralds (glowing)
00005B7D EC0B 0000 F8               		dc.b $EC, $B, 0, 0, $F8
00005B82 0C0C 000C F0               		dc.b $C, $C, 0,	$C, $F0
00005B87 02                         byte_56AB:	dc.b 2
00005B88 EC09 0018 F8               		dc.b $EC, 9, 0,	$18, $F8 ; looking up
00005B8D FC0E 001E F0               		dc.b $FC, $E, 0, $1E, $F0
00005B92 02                         byte_56B6:	dc.b 2
00005B93 EC09 002A F8               		dc.b $EC, 9, 0,	$2A, $F8 ; confused
00005B98 FC0E 0030 F0               		dc.b $FC, $E, 0, $30, $F0
00005B9D 02                         byte_56C1:	dc.b 2
00005B9E EC09 082A F0               		dc.b $EC, 9, 8,	$2A, $F0 ; confused #2
00005BA3 FC0E 0830 F0               		dc.b $FC, $E, 8, $30, $F0
00005BA8 03                         byte_56CC:	dc.b 3
00005BA9 EC06 003C F0               		dc.b $EC, 6, 0,	$3C, $F0 ; leaping
00005BAE EC06 083C 00               		dc.b $EC, 6, 8,	$3C, 0
00005BB3 040D 0042 F0               		dc.b 4,	$D, 0, $42, $F0
00005BB8 07                         byte_56DC:	dc.b 7
00005BB9 B20C 004A F8               		dc.b $B2, $C, 0, $4A, $F8 ; leaping #2
00005BBE BA0F 004E F0               		dc.b $BA, $F, 0, $4E, $F0
00005BC3 BA05 005E 10               		dc.b $BA, 5, 0,	$5E, $10
00005BC8 CA02 0062 10               		dc.b $CA, 2, 0,	$62, $10
00005BCD DA0C 0065 F0               		dc.b $DA, $C, 0, $65, $F0
00005BD2 E208 0069 F8               		dc.b $E2, 8, 0,	$69, $F8
00005BD7 EA05 006C F8               		dc.b $EA, 5, 0,	$6C, $F8
00005BDC 18                         byte_5700:	dc.b $18
00005BDD 800F 0070 F8               		dc.b $80, $F, 0, $70, $F8 ; leaping #3
00005BE2 900B 0080 E0               		dc.b $90, $B, 0, $80, $E0
00005BE7 900B 008C 18               		dc.b $90, $B, 0, $8C, $18
00005BEC 980B 0098 30               		dc.b $98, $B, 0, $98, $30
00005BF1 A00F 00A4 58               		dc.b $A0, $F, 0, $A4, $58
00005BF6 8800 00B4 F0               		dc.b $88, 0, 0,	$B4, $F0
00005BFB 8005 00B5 18               		dc.b $80, 5, 0,	$B5, $18
00005C00 A00F 00B9 F8               		dc.b $A0, $F, 0, $B9, $F8
00005C05 B00B 00C9 E0               		dc.b $B0, $B, 0, $C9, $E0
00005C0A B80F 00D5 38               		dc.b $B8, $F, 0, $D5, $38
00005C0F A805 00E5 48               		dc.b $A8, 5, 0,	$E5, $48
00005C14 C002 00E9 58               		dc.b $C0, 2, 0,	$E9, $58
00005C19 C00F 00EC F8               		dc.b $C0, $F, 0, $EC, $F8
00005C1E B80F 00FC 18               		dc.b $B8, $F, 0, $FC, $18
00005C23 B008 010C 18               		dc.b $B0, 8, 1,	$C, $18
00005C28 D80D 010F 30               		dc.b $D8, $D, 1, $F, $30
00005C2D D808 0117 18               		dc.b $D8, 8, 1,	$17, $18
00005C32 D80F 011A D8               		dc.b $D8, $F, 1, $1A, $D8
00005C37 E00D 012A F8               		dc.b $E0, $D, 1, $2A, $F8
00005C3C E000 0132 28               		dc.b $E0, 0, 1,	$32, $28
00005C41 D004 0133 E0               		dc.b $D0, 4, 1,	$33, $E0
00005C46 E805 0135 C8               		dc.b $E8, 5, 1,	$35, $C8
00005C4B F80C 0139 C8               		dc.b $F8, $C, 1, $39, $C8
00005C50 F006 013D F8               		dc.b $F0, 6, 1,	$3D, $F8
00005C56 00                         		even
00005C56 00                         		even
00005C56                            
00005C56                            ; ---------------------------------------------------------------------------
00005C56                            ; Sprite mappings - chaos emeralds on the ending sequence
00005C56                            ; ---------------------------------------------------------------------------
00005C56                            Map_obj88:
00005C56                            	include "_maps\obj88.asm"
00005C56                            ; ---------------------------------------------------------------------------
00005C56                            ; Sprite mappings - chaos emeralds on the ending sequence
00005C56                            ; ---------------------------------------------------------------------------
00005C56 0000 0000                  		dc.w byte_5788-Map_obj88, byte_578E-Map_obj88
00005C5A 0000 0000                  		dc.w byte_5794-Map_obj88, byte_579A-Map_obj88
00005C5E 0000 0000                  		dc.w byte_57A0-Map_obj88, byte_57A6-Map_obj88
00005C62 0000                       		dc.w byte_57AC-Map_obj88
00005C64 01                         byte_5788:	dc.b 1
00005C65 F805 0000 F8               		dc.b $F8, 5, 0,	0, $F8
00005C6A 01                         byte_578E:	dc.b 1
00005C6B F805 0004 F8               		dc.b $F8, 5, 0,	4, $F8
00005C70 01                         byte_5794:	dc.b 1
00005C71 F805 4010 F8               		dc.b $F8, 5, $40, $10, $F8
00005C76 01                         byte_579A:	dc.b 1
00005C77 F805 2018 F8               		dc.b $F8, 5, $20, $18, $F8
00005C7C 01                         byte_57A0:	dc.b 1
00005C7D F805 4014 F8               		dc.b $F8, 5, $40, $14, $F8
00005C82 01                         byte_57A6:	dc.b 1
00005C83 F805 0008 F8               		dc.b $F8, 5, 0,	8, $F8
00005C88 01                         byte_57AC:	dc.b 1
00005C89 F805 000C F8               		dc.b $F8, 5, 0,	$C, $F8
00005C8E                            		even
00005C8E                            		even
00005C8E                            
00005C8E                            ; ---------------------------------------------------------------------------
00005C8E                            ; Sprite mappings - "SONIC THE HEDGEHOG" text on the ending sequence
00005C8E                            ; ---------------------------------------------------------------------------
00005C8E                            Map_obj89:
00005C8E                            	include "_maps\obj89.asm"
00005C8E                            ; ---------------------------------------------------------------------------
00005C8E                            ; Sprite mappings - "SONIC THE HEDGEHOG" text on the ending sequence
00005C8E                            ; ---------------------------------------------------------------------------
00005C8E 0000                       		dc.w byte_57B4-Map_obj89
00005C90 03                         byte_57B4:	dc.b 3
00005C91 F00F 0000 D0               		dc.b $F0, $F, 0, 0, $D0
00005C96 F00F 0010 F0               		dc.b $F0, $F, 0, $10, $F0
00005C9B F00F 0020 10               		dc.b $F0, $F, 0, $20, $10
00005CA0                            		even
00005CA0                            		even
00005CA0                            
00005CA0                            ; ===========================================================================
00005CA0                            ; ---------------------------------------------------------------------------
00005CA0                            ; Credits ending sequence
00005CA0                            ; ---------------------------------------------------------------------------
00005CA0                            
00005CA0                            Credits:				; XREF: GameModeArray
00005CA0 6100 BB60                  		bsr.w	ClearPLC
00005CA4 6100 C396                  		bsr.w	Pal_FadeFrom
00005CA8 4DF9 00C0 0004             		lea	($C00004).l,a6
00005CAE 3CBC 8004                  		move.w	#$8004,(a6)
00005CB2 3CBC 8230                  		move.w	#$8230,(a6)
00005CB6 3CBC 8407                  		move.w	#$8407,(a6)
00005CBA 3CBC 9001                  		move.w	#$9001,(a6)
00005CBE 3CBC 9200                  		move.w	#$9200,(a6)
00005CC2 3CBC 8B03                  		move.w	#$8B03,(a6)
00005CC6 3CBC 8720                  		move.w	#$8720,(a6)
00005CCA 4238 F64E                  		clr.b	($FFFFF64E).w
00005CCE 6100 B818                  		bsr.w	ClearScreen
00005CD2 43F8 D000                  		lea	($FFFFD000).w,a1
00005CD6 7000                       		moveq	#0,d0
00005CD8 323C 07FF                  		move.w	#$7FF,d1
00005CDC                            
00005CDC                            Cred_ClrObjRam:
00005CDC 22C0                       		move.l	d0,(a1)+
00005CDE 51C9 FFFC                  		dbf	d1,Cred_ClrObjRam ; clear object RAM
00005CE2                            
00005CE2 23FC 7400 0002 00C0 0004   		move.l	#$74000002,($C00004).l
00005CEC 41F9 0000 0000             		lea	(Nem_CreditText).l,a0 ;	load credits alphabet patterns
00005CF2 6100 B970                  		bsr.w	NemDec
00005CF6 43F8 FB80                  		lea	($FFFFFB80).w,a1
00005CFA 7000                       		moveq	#0,d0
00005CFC 323C 001F                  		move.w	#$1F,d1
00005D00                            
00005D00                            Cred_ClrPallet:
00005D00 22C0                       		move.l	d0,(a1)+
00005D02 51C9 FFFC                  		dbf	d1,Cred_ClrPallet ; fill pallet	with black ($0000)
00005D06                            
00005D06 7003                       		moveq	#3,d0
00005D08 6100 C5DC                  		bsr.w	PalLoad1	; load Sonic's pallet
00005D0C 11FC 008A D080             		move.b	#$8A,($FFFFD080).w ; load credits object
00005D12 4EB9 0000 0000             		jsr	ObjectsLoad
00005D18 4EB9 0000 0000             		jsr	BuildSprites
00005D1E 6100 0000                  		bsr.w	EndingDemoLoad
00005D22 7000                       		moveq	#0,d0
00005D24 1038 FE10                  		move.b	($FFFFFE10).w,d0
00005D28 E948                       		lsl.w	#4,d0
00005D2A 45F9 0000 0000             		lea	(MainLoadBlocks).l,a2 ;	load block mappings etc
00005D30 45F2 0000                  		lea	(a2,d0.w),a2
00005D34 7000                       		moveq	#0,d0
00005D36 1012                       		move.b	(a2),d0
00005D38 6700                       		beq.s	loc_5862
00005D3A 6100 BA68                  		bsr.w	LoadPLC		; load level patterns
00005D3E                            
00005D3E                            loc_5862:
00005D3E 7001                       		moveq	#1,d0
00005D40 6100 BA62                  		bsr.w	LoadPLC		; load standard	level patterns
00005D44 31FC 0078 F614             		move.w	#120,($FFFFF614).w ; display a credit for 2 seconds
00005D4A 6100 C24A                  		bsr.w	Pal_FadeTo
00005D4E                            
00005D4E                            Cred_WaitLoop:
00005D4E 11FC 0004 F62A             		move.b	#4,($FFFFF62A).w
00005D54 6100 CF24                  		bsr.w	DelayProgram
00005D58 6100 BAB6                  		bsr.w	RunPLC_RAM
00005D5C 4A78 F614                  		tst.w	($FFFFF614).w	; have 2 seconds elapsed?
00005D60 66EC                       		bne.s	Cred_WaitLoop	; if not, branch
00005D62 4AB8 F680                  		tst.l	($FFFFF680).w	; have level gfx finished decompressing?
00005D66 66E6                       		bne.s	Cred_WaitLoop	; if not, branch
00005D68 0C78 0009 FFF4             		cmpi.w	#9,($FFFFFFF4).w ; have	the credits finished?
00005D6E 6700 0000                  		beq.w	TryAgainEnd	; if yes, branch
00005D72 4E75                       		rts	
00005D74                            
00005D74                            ; ---------------------------------------------------------------------------
00005D74                            ; Ending sequence demo loading subroutine
00005D74                            ; ---------------------------------------------------------------------------
00005D74                            
00005D74                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00005D74                            
00005D74                            
00005D74                            EndingDemoLoad:				; XREF: Credits
00005D74 3038 FFF4                  		move.w	($FFFFFFF4).w,d0
00005D78 0240 000F                  		andi.w	#$F,d0
00005D7C D040                       		add.w	d0,d0
00005D7E 303B 0000                  		move.w	EndDemo_Levels(pc,d0.w),d0 ; load level	array
00005D82 31C0 FE10                  		move.w	d0,($FFFFFE10).w ; set level from level	array
00005D86 5278 FFF4                  		addq.w	#1,($FFFFFFF4).w
00005D8A 0C78 0009 FFF4             		cmpi.w	#9,($FFFFFFF4).w ; have	credits	finished?
00005D90 6400                       		bcc.s	EndDemo_Exit	; if yes, branch
00005D92 31FC 8001 FFF0             		move.w	#$8001,($FFFFFFF0).w ; force demo mode
00005D98 11FC 0008 F600             		move.b	#8,($FFFFF600).w ; set game mode to 08 (demo)
00005D9E 11FC 0027 FE12             		move.b	#39,($FFFFFE12).w ; set lives to	3
00005DA4 7000                       		moveq	#0,d0
00005DA6 31C0 FE20                  		move.w	d0,($FFFFFE20).w ; clear rings
00005DAA 21C0 FE22                  		move.l	d0,($FFFFFE22).w ; clear time
00005DAE 21C0 FE26                  		move.l	d0,($FFFFFE26).w ; clear score
00005DB2 11C0 FE30                  		move.b	d0,($FFFFFE30).w ; clear lamppost counter
00005DB6 0C78 0004 FFF4             		cmpi.w	#4,($FFFFFFF4).w ; is SLZ demo running?
00005DBC 6600                       		bne.s	EndDemo_Exit	; if not, branch
00005DBE 43F9 0000 0000             		lea	(EndDemo_LampVar).l,a1 ; load lamppost variables
00005DC4 45F8 FE30                  		lea	($FFFFFE30).w,a2
00005DC8 303C 0008                  		move.w	#8,d0
00005DCC                            
00005DCC                            EndDemo_LampLoad:
00005DCC 24D9                       		move.l	(a1)+,(a2)+
00005DCE 51C8 FFFC                  		dbf	d0,EndDemo_LampLoad
00005DD2                            
00005DD2                            EndDemo_Exit:
00005DD2 4E75                       		rts	
00005DD4                            ; End of function EndingDemoLoad
00005DD4                            
00005DD4                            ; ===========================================================================
00005DD4                            ; ---------------------------------------------------------------------------
00005DD4                            ; Levels used in the end sequence demos
00005DD4                            ; ---------------------------------------------------------------------------
00005DD4                            EndDemo_Levels:	incbin	misc\dm_ord2.bin
00005DE4                            
00005DE4                            ; ---------------------------------------------------------------------------
00005DE4                            ; Lamppost variables in the end sequence demo (Star Light Zone)
00005DE4                            ; ---------------------------------------------------------------------------
00005DE4                            EndDemo_LampVar:
00005DE4 0101                       		dc.b 1,	1		; XREF: EndingDemoLoad
00005DE6 0A00 062C 000D             		dc.w $A00, $62C, $D
00005DEC 0000 0000                  		dc.l 0
00005DF0 0000                       		dc.b 0,	0
00005DF2 0800 0957 05CC 04AB 03A6+  		dc.w $800, $957, $5CC, $4AB, $3A6, 0, $28C, 0, 0, $308
00005E06 0101                       		dc.b 1,	1
00005E08                            ; ===========================================================================
00005E08                            ; ---------------------------------------------------------------------------
00005E08                            ; "TRY AGAIN" and "END"	screens
00005E08                            ; ---------------------------------------------------------------------------
00005E08                            
00005E08                            TryAgainEnd:				; XREF: Credits
00005E08 6100 B9F8                  		bsr.w	ClearPLC
00005E0C 6100 C22E                  		bsr.w	Pal_FadeFrom
00005E10 4DF9 00C0 0004             		lea	($C00004).l,a6
00005E16 3CBC 8004                  		move.w	#$8004,(a6)
00005E1A 3CBC 8230                  		move.w	#$8230,(a6)
00005E1E 3CBC 8407                  		move.w	#$8407,(a6)
00005E22 3CBC 9001                  		move.w	#$9001,(a6)
00005E26 3CBC 9200                  		move.w	#$9200,(a6)
00005E2A 3CBC 8B03                  		move.w	#$8B03,(a6)
00005E2E 3CBC 8720                  		move.w	#$8720,(a6)
00005E32 4238 F64E                  		clr.b	($FFFFF64E).w
00005E36 6100 B6B0                  		bsr.w	ClearScreen
00005E3A 43F8 D000                  		lea	($FFFFD000).w,a1
00005E3E 7000                       		moveq	#0,d0
00005E40 323C 07FF                  		move.w	#$7FF,d1
00005E44                            
00005E44                            TryAg_ClrObjRam:
00005E44 22C0                       		move.l	d0,(a1)+
00005E46 51C9 FFFC                  		dbf	d1,TryAg_ClrObjRam ; clear object RAM
00005E4A                            
00005E4A 701D                       		moveq	#$1D,d0
00005E4C 6100 BAC2                  		bsr.w	RunPLC_ROM	; load "TRY AGAIN" or "END" patterns
00005E50 43F8 FB80                  		lea	($FFFFFB80).w,a1
00005E54 7000                       		moveq	#0,d0
00005E56 323C 001F                  		move.w	#$1F,d1
00005E5A                            
00005E5A                            TryAg_ClrPallet:
00005E5A 22C0                       		move.l	d0,(a1)+
00005E5C 51C9 FFFC                  		dbf	d1,TryAg_ClrPallet ; fill pallet with black ($0000)
00005E60                            
00005E60 7013                       		moveq	#$13,d0
00005E62 6100 C482                  		bsr.w	PalLoad1	; load ending pallet
00005E66 4278 FBC0                  		clr.w	($FFFFFBC0).w
00005E6A 11FC 008B D080             		move.b	#$8B,($FFFFD080).w ; load Eggman object
00005E70 4EB9 0000 0000             		jsr	ObjectsLoad
00005E76 4EB9 0000 0000             		jsr	BuildSprites
00005E7C 31FC 0708 F614             		move.w	#1800,($FFFFF614).w ; show screen for 30 seconds
00005E82 6100 C112                  		bsr.w	Pal_FadeTo
00005E86                            
00005E86                            ; ---------------------------------------------------------------------------
00005E86                            ; "TRY AGAIN" and "END"	screen main loop
00005E86                            ; ---------------------------------------------------------------------------
00005E86                            TryAg_MainLoop:
00005E86 6100 B744                  		bsr.w	PauseGame
00005E8A 11FC 0004 F62A             		move.b	#4,($FFFFF62A).w
00005E90 6100 CDE8                  		bsr.w	DelayProgram
00005E94 4EB9 0000 0000             		jsr	ObjectsLoad
00005E9A 4EB9 0000 0000             		jsr	BuildSprites
00005EA0 0238 0080 F605             		andi.b	#$80,($FFFFF605).w ; is	Start button pressed?
00005EA6 6600                       		bne.s	TryAg_Exit	; if yes, branch
00005EA8 4A78 F614                  		tst.w	($FFFFF614).w	; has 30 seconds elapsed?
00005EAC 6700                       		beq.s	TryAg_Exit	; if yes, branch
00005EAE 0C38 001C F600             		cmpi.b	#$1C,($FFFFF600).w
00005EB4 67D0                       		beq.s	TryAg_MainLoop
00005EB6                            
00005EB6                            TryAg_Exit:
00005EB6 11FC 0000 F600             		move.b	#0,($FFFFF600).w ; go to Sega screen
00005EBC 4E75                       		rts	
00005EBE                            
00005EBE                            ; ===========================================================================
00005EBE                            ; ---------------------------------------------------------------------------
00005EBE                            ; Object 8B - Eggman on "TRY AGAIN" and "END"	screens
00005EBE                            ; ---------------------------------------------------------------------------
00005EBE                            
00005EBE                            Obj8B:					; XREF: Obj_Index
00005EBE 7000                       		moveq	#0,d0
00005EC0 1028 0024                  		move.b	$24(a0),d0
00005EC4 323B 0000                  		move.w	Obj8B_Index(pc,d0.w),d1
00005EC8 4EBB 1000                  		jsr	Obj8B_Index(pc,d1.w)
00005ECC 4EF9 0000 0000             		jmp	DisplaySprite
00005ED2                            ; ===========================================================================
00005ED2 0000                       Obj8B_Index:	dc.w Obj8B_Main-Obj8B_Index
00005ED4 0000                       		dc.w Obj8B_Animate-Obj8B_Index
00005ED6 0000                       		dc.w Obj8B_Juggle-Obj8B_Index
00005ED8 0000                       		dc.w loc_5A8E-Obj8B_Index
00005EDA                            ; ===========================================================================
00005EDA                            
00005EDA                            Obj8B_Main:				; XREF: Obj8B_Index
00005EDA 5428 0024                  		addq.b	#2,$24(a0)
00005EDE 317C 0120 0008             		move.w	#$120,8(a0)
00005EE4 317C 00F4 000A             		move.w	#$F4,$A(a0)
00005EEA 217C 0000 0000 0004        		move.l	#Map_obj8B,4(a0)
00005EF2 317C 03E1 0002             		move.w	#$3E1,2(a0)
00005EF8 117C 0000 0001             		move.b	#0,1(a0)
00005EFE 117C 0002 0018             		move.b	#2,$18(a0)
00005F04 117C 0002 001C             		move.b	#2,$1C(a0)	; use "END" animation
00005F0A 0C38 0006 FE57             		cmpi.b	#6,($FFFFFE57).w ; do you have all 6 emeralds?
00005F10 6700                       		beq.s	Obj8B_Animate	; if yes, branch
00005F12 11FC 008A D0C0             		move.b	#$8A,($FFFFD0C0).w ; load credits object
00005F18 31FC 0009 FFF4             		move.w	#9,($FFFFFFF4).w ; use "TRY AGAIN" text
00005F1E 11FC 008C D800             		move.b	#$8C,($FFFFD800).w ; load emeralds object on "TRY AGAIN" screen
00005F24 117C 0000 001C             		move.b	#0,$1C(a0)	; use "TRY AGAIN" animation
00005F2A                            
00005F2A                            Obj8B_Animate:				; XREF: Obj8B_Index
00005F2A 43F9 0000 0000             		lea	(Ani_obj8B).l,a1
00005F30 4EF9 0000 0000             		jmp	AnimateSprite
00005F36                            ; ===========================================================================
00005F36                            
00005F36                            Obj8B_Juggle:				; XREF: Obj8B_Index
00005F36 5428 0024                  		addq.b	#2,$24(a0)
00005F3A 7002                       		moveq	#2,d0
00005F3C 0828 0000 001C             		btst	#0,$1C(a0)
00005F42 6700                       		beq.s	loc_5A6A
00005F44 4440                       		neg.w	d0
00005F46                            
00005F46                            loc_5A6A:
00005F46 43F8 D800                  		lea	($FFFFD800).w,a1
00005F4A 7205                       		moveq	#5,d1
00005F4C                            
00005F4C                            loc_5A70:
00005F4C 1340 003E                  		move.b	d0,$3E(a1)
00005F50 3400                       		move.w	d0,d2
00005F52 E742                       		asl.w	#3,d2
00005F54 D529 0026                  		add.b	d2,$26(a1)
00005F58 43E9 0040                  		lea	$40(a1),a1
00005F5C 51C9 FFEE                  		dbf	d1,loc_5A70
00005F60 5228 001A                  		addq.b	#1,$1A(a0)
00005F64 317C 0070 0030             		move.w	#112,$30(a0)
00005F6A                            
00005F6A                            loc_5A8E:				; XREF: Obj8B_Index
00005F6A 5368 0030                  		subq.w	#1,$30(a0)
00005F6E 6A00                       		bpl.s	locret_5AA0
00005F70 0868 0000 001C             		bchg	#0,$1C(a0)
00005F76 117C 0002 0024             		move.b	#2,$24(a0)
00005F7C                            
00005F7C                            locret_5AA0:
00005F7C 4E75                       		rts	
00005F7E                            ; ===========================================================================
00005F7E                            Ani_obj8B:
00005F7E                            	include "_anim\obj8B.asm"
00005F7E                            ; ---------------------------------------------------------------------------
00005F7E                            ; Animation script - Eggman on the "TRY AGAIN" and "END" screens
00005F7E                            ; ---------------------------------------------------------------------------
00005F7E 0000                       		dc.w byte_5AA8-Ani_obj8B
00005F80 0000                       		dc.w byte_5AAC-Ani_obj8B
00005F82 0000                       		dc.w byte_5AB0-Ani_obj8B
00005F84 0500 FC01                  byte_5AA8:	dc.b 5,	0, $FC,	1
00005F88 0502 FC03                  byte_5AAC:	dc.b 5,	2, $FC,	3
00005F8C 0704 0506 0504 0506 0504+  byte_5AB0:	dc.b 7,	4, 5, 6, 5, 4, 5, 6, 5,	4, 5, 6, 5, 7, 5, 6, 5,	$FF
00005F9E                            		even
00005F9E                            		even
00005F9E                            
00005F9E                            ; ===========================================================================
00005F9E                            ; ---------------------------------------------------------------------------
00005F9E                            ; Object 8C - chaos emeralds on	the "TRY AGAIN"	screen
00005F9E                            ; ---------------------------------------------------------------------------
00005F9E                            
00005F9E                            Obj8C:					; XREF: Obj_Index
00005F9E 7000                       		moveq	#0,d0
00005FA0 1028 0024                  		move.b	$24(a0),d0
00005FA4 323B 0000                  		move.w	Obj8C_Index(pc,d0.w),d1
00005FA8 4EBB 1000                  		jsr	Obj8C_Index(pc,d1.w)
00005FAC 4EF9 0000 0000             		jmp	DisplaySprite
00005FB2                            ; ===========================================================================
00005FB2 0000                       Obj8C_Index:	dc.w Obj8C_Main-Obj8C_Index
00005FB4 0000                       		dc.w Obj8C_Move-Obj8C_Index
00005FB6                            ; ===========================================================================
00005FB6                            
00005FB6                            Obj8C_Main:				; XREF: Obj8C_Index
00005FB6 2248                       		movea.l	a0,a1
00005FB8 7400                       		moveq	#0,d2
00005FBA 7600                       		moveq	#0,d3
00005FBC 7205                       		moveq	#5,d1
00005FBE 9238 FE57                  		sub.b	($FFFFFE57).w,d1
00005FC2                            
00005FC2                            Obj8C_MakeEms:				; XREF: loc_5B42
00005FC2 12BC 008C                  		move.b	#$8C,(a1)	; load emerald object
00005FC6 5429 0024                  		addq.b	#2,$24(a1)
00005FCA 237C 0000 5C56 0004        		move.l	#Map_obj88,4(a1)
00005FD2 337C 03C5 0002             		move.w	#$3C5,2(a1)
00005FD8 137C 0000 0001             		move.b	#0,1(a1)
00005FDE 137C 0001 0018             		move.b	#1,$18(a1)
00005FE4 337C 0104 0008             		move.w	#$104,8(a1)
00005FEA 337C 0120 0038             		move.w	#$120,$38(a1)
00005FF0 337C 00EC 000A             		move.w	#$EC,$A(a1)
00005FF6 3369 000A 003A             		move.w	$A(a1),$3A(a1)
00005FFC 137C 001C 003C             		move.b	#$1C,$3C(a1)
00006002 47F8 FE58                  		lea	($FFFFFE58).w,a3
00006006                            
00006006                            Obj8C_ChkEms:
00006006 7000                       		moveq	#0,d0
00006008 1038 FE57                  		move.b	($FFFFFE57).w,d0
0000600C 5340                       		subq.w	#1,d0
0000600E 6500                       		bcs.s	loc_5B42
00006010                            
00006010                            Obj8C_ChkEmLoop:
00006010 B433 0000                  		cmp.b	(a3,d0.w),d2
00006014 6600                       		bne.s	loc_5B3E
00006016 5202                       		addq.b	#1,d2
00006018 60EC                       		bra.s	Obj8C_ChkEms
0000601A                            ; ===========================================================================
0000601A                            
0000601A                            loc_5B3E:
0000601A 51C8 FFF4                  		dbf	d0,Obj8C_ChkEmLoop ; checks which emeralds you have
0000601E                            
0000601E                            loc_5B42:
0000601E 1342 001A                  		move.b	d2,$1A(a1)
00006022 5229 001A                  		addq.b	#1,$1A(a1)
00006026 5202                       		addq.b	#1,d2
00006028 137C 0080 0026             		move.b	#$80,$26(a1)
0000602E 1343 001E                  		move.b	d3,$1E(a1)
00006032 1343 001F                  		move.b	d3,$1F(a1)
00006036 0643 000A                  		addi.w	#$A,d3
0000603A 43E9 0040                  		lea	$40(a1),a1
0000603E 51C9 FF82                  		dbf	d1,Obj8C_MakeEms
00006042                            
00006042                            Obj8C_Move:				; XREF: Obj8C_Index
00006042 4A68 003E                  		tst.w	$3E(a0)
00006046 6700                       		beq.s	locret_5BBA
00006048 4A28 001E                  		tst.b	$1E(a0)
0000604C 6700                       		beq.s	loc_5B78
0000604E 5328 001E                  		subq.b	#1,$1E(a0)
00006052 6600                       		bne.s	loc_5B80
00006054                            
00006054                            loc_5B78:
00006054 3028 003E                  		move.w	$3E(a0),d0
00006058 D168 0026                  		add.w	d0,$26(a0)
0000605C                            
0000605C                            loc_5B80:
0000605C 1028 0026                  		move.b	$26(a0),d0
00006060 6700                       		beq.s	loc_5B8C
00006062 0C00 0080                  		cmpi.b	#$80,d0
00006066 6600                       		bne.s	loc_5B96
00006068                            
00006068                            loc_5B8C:
00006068 4268 003E                  		clr.w	$3E(a0)
0000606C 1168 001F 001E             		move.b	$1F(a0),$1E(a0)
00006072                            
00006072                            loc_5B96:
00006072 4EB9 0000 2CAC             		jsr	(CalcSine).l
00006078 7800                       		moveq	#0,d4
0000607A 1828 003C                  		move.b	$3C(a0),d4
0000607E C3C4                       		muls.w	d4,d1
00006080 E081                       		asr.l	#8,d1
00006082 C1C4                       		muls.w	d4,d0
00006084 E080                       		asr.l	#8,d0
00006086 D268 0038                  		add.w	$38(a0),d1
0000608A D068 003A                  		add.w	$3A(a0),d0
0000608E 3141 0008                  		move.w	d1,8(a0)
00006092 3140 000A                  		move.w	d0,$A(a0)
00006096                            
00006096                            locret_5BBA:
00006096 4E75                       		rts	
00006098                            ; ===========================================================================
00006098                            ; ---------------------------------------------------------------------------
00006098                            ; Sprite mappings - Eggman on	the "TRY AGAIN"	and "END" screens
00006098                            ; ---------------------------------------------------------------------------
00006098                            Map_obj8B:
00006098                            	include "_maps\obj8B.asm"
00006098                            ; ---------------------------------------------------------------------------
00006098                            ; Sprite mappings - Robotnik on	the "TRY AGAIN"	and "END" screens
00006098                            ; ---------------------------------------------------------------------------
00006098 0000 0000                  		dc.w byte_5BCC-Map_obj8B, byte_5BF5-Map_obj8B
0000609C 0000 0000                  		dc.w byte_5C1E-Map_obj8B, byte_5C47-Map_obj8B
000060A0 0000 0000                  		dc.w byte_5C70-Map_obj8B, byte_5CAD-Map_obj8B
000060A4 0000 0000                  		dc.w byte_5CE0-Map_obj8B, byte_5D13-Map_obj8B
000060A8 08                         byte_5BCC:	dc.b 8
000060A9 E905 0000 F0               		dc.b $E9, 5, 0,	0, $F0
000060AE F90C 0004 E0               		dc.b $F9, $C, 0, 4, $E0
000060B3 E904 0008 00               		dc.b $E9, 4, 0,	8, 0
000060B8 F10D 000A 00               		dc.b $F1, $D, 0, $A, 0
000060BD 0106 0023 F0               		dc.b 1,	6, 0, $23, $F0
000060C2 0106 0823 00               		dc.b 1,	6, 8, $23, 0
000060C7 1804 0029 EC               		dc.b $18, 4, 0,	$29, $EC
000060CC 1804 0829 04               		dc.b $18, 4, 8,	$29, 4
000060D1 08                         byte_5BF5:	dc.b 8
000060D2 E80D 0012 E0               		dc.b $E8, $D, 0, $12, $E0
000060D7 F808 001A E8               		dc.b $F8, 8, 0,	$1A, $E8
000060DC E805 0800 00               		dc.b $E8, 5, 8,	0, 0
000060E1 F80C 0804 00               		dc.b $F8, $C, 8, 4, 0
000060E6 0006 001D F0               		dc.b 0,	6, 0, $1D, $F0
000060EB 0006 081D 00               		dc.b 0,	6, 8, $1D, 0
000060F0 1804 0029 EC               		dc.b $18, 4, 0,	$29, $EC
000060F5 1804 0829 04               		dc.b $18, 4, 8,	$29, 4
000060FA 08                         byte_5C1E:	dc.b 8
000060FB E904 0808 F0               		dc.b $E9, 4, 8,	8, $F0
00006100 F10D 080A E0               		dc.b $F1, $D, 8, $A, $E0
00006105 E905 0800 00               		dc.b $E9, 5, 8,	0, 0
0000610A F90C 0804 00               		dc.b $F9, $C, 8, 4, 0
0000610F 0106 0023 F0               		dc.b 1,	6, 0, $23, $F0
00006114 0106 0823 00               		dc.b 1,	6, 8, $23, 0
00006119 1804 0029 EC               		dc.b $18, 4, 0,	$29, $EC
0000611E 1804 0829 04               		dc.b $18, 4, 8,	$29, 4
00006123 08                         byte_5C47:	dc.b 8
00006124 E805 0000 F0               		dc.b $E8, 5, 0,	0, $F0
00006129 F80C 0004 E0               		dc.b $F8, $C, 0, 4, $E0
0000612E E80D 0812 00               		dc.b $E8, $D, 8, $12, 0
00006133 F808 081A 00               		dc.b $F8, 8, 8,	$1A, 0
00006138 0006 001D F0               		dc.b 0,	6, 0, $1D, $F0
0000613D 0006 081D 00               		dc.b 0,	6, 8, $1D, 0
00006142 1804 0029 EC               		dc.b $18, 4, 0,	$29, $EC
00006147 1804 0829 04               		dc.b $18, 4, 8,	$29, 4
0000614C 0C                         byte_5C70:	dc.b $C
0000614D ED0A 002B E8               		dc.b $ED, $A, 0, $2B, $E8
00006152 F500 0034 E0               		dc.b $F5, 0, 0,	$34, $E0
00006157 0504 0035 F0               		dc.b 5,	4, 0, $35, $F0
0000615C 0D08 0037 E8               		dc.b $D, 8, 0, $37, $E8
00006161 ED0A 082B 00               		dc.b $ED, $A, 8, $2B, 0
00006166 F500 0834 18               		dc.b $F5, 0, 8,	$34, $18
0000616B 0504 0835 00               		dc.b 5,	4, 8, $35, 0
00006170 0D08 0837 00               		dc.b $D, 8, 8, $37, 0
00006175 100D 0073 E0               		dc.b $10, $D, 0, $73, $E0
0000617A 100D 007B 00               		dc.b $10, $D, 0, $7B, 0
0000617F 1C0C 005B E0               		dc.b $1C, $C, 0, $5B, $E0
00006184 1C0C 085B 00               		dc.b $1C, $C, 8, $5B, 0
00006189 0A                         byte_5CAD:	dc.b $A
0000618A D207 003A F0               		dc.b $D2, 7, 0,	$3A, $F0
0000618F DA00 0042 E8               		dc.b $DA, 0, 0,	$42, $E8
00006194 F207 0043 F0               		dc.b $F2, 7, 0,	$43, $F0
00006199 D207 083A 00               		dc.b $D2, 7, 8,	$3A, 0
0000619E DA00 0842 10               		dc.b $DA, 0, 8,	$42, $10
000061A3 F207 0843 00               		dc.b $F2, 7, 8,	$43, 0
000061A8 100D 0067 E8               		dc.b $10, $D, 0, $67, $E8
000061AD 1005 006F 08               		dc.b $10, 5, 0,	$6F, 8
000061B2 1C0C 005F E0               		dc.b $1C, $C, 0, $5F, $E0
000061B7 1C0C 085F 00               		dc.b $1C, $C, 8, $5F, 0
000061BC 0A                         byte_5CE0:	dc.b $A
000061BD C40B 004B E8               		dc.b $C4, $B, 0, $4B, $E8
000061C2 E408 0057 E8               		dc.b $E4, 8, 0,	$57, $E8
000061C7 EC00 005A F0               		dc.b $EC, 0, 0,	$5A, $F0
000061CC C40B 084B 00               		dc.b $C4, $B, 8, $4B, 0
000061D1 E408 0857 00               		dc.b $E4, 8, 8,	$57, 0
000061D6 EC00 085A 08               		dc.b $EC, 0, 8,	$5A, 8
000061DB 100D 0067 E8               		dc.b $10, $D, 0, $67, $E8
000061E0 1005 006F 08               		dc.b $10, 5, 0,	$6F, 8
000061E5 1C0C 0063 E0               		dc.b $1C, $C, 0, $63, $E0
000061EA 1C0C 0863 00               		dc.b $1C, $C, 8, $63, 0
000061EF 0C                         byte_5D13:	dc.b $C
000061F0 F40A 002B E8               		dc.b $F4, $A, 0, $2B, $E8
000061F5 FC00 0034 E0               		dc.b $FC, 0, 0,	$34, $E0
000061FA 0C04 0035 F0               		dc.b $C, 4, 0, $35, $F0
000061FF 1408 0037 E8               		dc.b $14, 8, 0,	$37, $E8
00006204 F40A 082B 00               		dc.b $F4, $A, 8, $2B, 0
00006209 FC00 0834 18               		dc.b $FC, 0, 8,	$34, $18
0000620E 0C04 0835 00               		dc.b $C, 4, 8, $35, 0
00006213 1408 0837 00               		dc.b $14, 8, 8,	$37, 0
00006218 180C 0083 E0               		dc.b $18, $C, 0, $83, $E0
0000621D 180C 0087 00               		dc.b $18, $C, 0, $87, 0
00006222 1C0C 005B E0               		dc.b $1C, $C, 0, $5B, $E0
00006227 1C0C 085B 00               		dc.b $1C, $C, 8, $5B, 0
0000622C                            		even
0000622C                            		even
0000622C                            
0000622C                            ; ---------------------------------------------------------------------------
0000622C                            ; Ending sequence demos
0000622C                            ; ---------------------------------------------------------------------------
0000622C                            Demo_EndGHZ1:	incbin	demodata\e_ghz1.bin
0000625A                            		even
0000625A                            Demo_EndMZ:	incbin	demodata\e_mz.bin
0000629A                            		even
0000629A                            Demo_EndSYZ:	incbin	demodata\e_syz.bin
000062CA                            		even
000062CA                            Demo_EndLZ:	incbin	demodata\e_lz.bin
000062FA                            		even
000062FA                            Demo_EndSLZ:	incbin	demodata\e_slz.bin
0000631A                            		even
0000631A                            Demo_EndSBZ1:	incbin	demodata\e_sbz1.bin
0000633A                            		even
0000633A                            Demo_EndSBZ2:	incbin	demodata\e_sbz2.bin
0000636A                            		even
0000636A                            Demo_EndGHZ2:	incbin	demodata\e_ghz2.bin
0000639A                            		even
0000639A                            
0000639A                            ; ---------------------------------------------------------------------------
0000639A                            ; Subroutine to	load level boundaries and start	locations
0000639A                            ; ---------------------------------------------------------------------------
0000639A                            
0000639A                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000639A                            
0000639A                            
0000639A                            LevelSizeLoad:				; XREF: TitleScreen; Level; EndingSequence
0000639A 7000                       		moveq	#0,d0
0000639C 11C0 F740                  		move.b	d0,($FFFFF740).w
000063A0 11C0 F741                  		move.b	d0,($FFFFF741).w
000063A4 11C0 F746                  		move.b	d0,($FFFFF746).w
000063A8 11C0 F748                  		move.b	d0,($FFFFF748).w
000063AC 11C0 F742                  		move.b	d0,($FFFFF742).w
000063B0 3038 FE10                  		move.w	($FFFFFE10).w,d0
000063B4 ED08                       		lsl.b	#6,d0
000063B6 E848                       		lsr.w	#4,d0
000063B8 3200                       		move.w	d0,d1
000063BA D040                       		add.w	d0,d0
000063BC D041                       		add.w	d1,d0
000063BE 41FB 0000                  		lea	LevelSizeArray(pc,d0.w),a0 ; load level	boundaries
000063C2 3018                       		move.w	(a0)+,d0
000063C4 31C0 F730                  		move.w	d0,($FFFFF730).w
000063C8 2018                       		move.l	(a0)+,d0
000063CA 21C0 F728                  		move.l	d0,($FFFFF728).w
000063CE 21C0 F720                  		move.l	d0,($FFFFF720).w
000063D2 2018                       		move.l	(a0)+,d0
000063D4 21C0 F72C                  		move.l	d0,($FFFFF72C).w
000063D8 21C0 F724                  		move.l	d0,($FFFFF724).w
000063DC 3038 F728                  		move.w	($FFFFF728).w,d0
000063E0 0640 0240                  		addi.w	#$240,d0
000063E4 31C0 F732                  		move.w	d0,($FFFFF732).w
000063E8 31FC 1010 F74A             		move.w	#$1010,($FFFFF74A).w
000063EE 3018                       		move.w	(a0)+,d0
000063F0 31C0 F73E                  		move.w	d0,($FFFFF73E).w
000063F4 6000 0000                  		bra.w	LevSz_ChkLamp
000063F8                            ; ===========================================================================
000063F8                            ; ---------------------------------------------------------------------------
000063F8                            ; Level size array and ending start location array
000063F8                            ; ---------------------------------------------------------------------------
000063F8                            LevelSizeArray:        ; GHZ
000063F8 0004 0000 24BF 0000 0300+          dc.w $0004, $0000, $24BF, $0000, $0300, $0060 ; Act 1
00006404 0004 0000 1EBF 0000 0300+          dc.w $0004, $0000, $1EBF, $0000, $0300, $0060 ; Act 2
00006410 0004 0000 2960 0000 0300+          dc.w $0004, $0000, $2960, $0000, $0300, $0060 ; Act 3
0000641C 0004 0000 2ABF 0000 0300+          dc.w $0004, $0000, $2ABF, $0000, $0300, $0060 ; Act 4 (Unused)
00006428                                    ; LZ
00006428 0004 0000 19BF 0000 0530+          dc.w $0004, $0000, $19BF, $0000, $0530, $0060 ; Act 1
00006434 0004 0000 10AF 0000 0720+          dc.w $0004, $0000, $10AF, $0000, $0720, $0060 ; Act 2
00006440 0004 0000 1D00 FF00 0800+          dc.w $0004, $0000, $1D00, $FF00, $0800, $0060 ; Act 3
0000644C 0004 0000 20BF 0000 0720+          dc.w $0004, $0000, $20BF, $0000, $0720, $0060 ; Act 4 (Scrap Brain Act 3)
00006458                                    ; MZ
00006458 0004 0000 17BF 0000 01D0+          dc.w $0004, $0000, $17BF, $0000, $01D0, $0060 ; Act 1
00006464 0004 0000 17BF 0000 0520+          dc.w $0004, $0000, $17BF, $0000, $0520, $0060 ; Act 2
00006470 0004 0000 1800 0000 0720+          dc.w $0004, $0000, $1800, $0000, $0720, $0060 ; Act 3
0000647C 0004 0000 16BF 0000 0720+          dc.w $0004, $0000, $16BF, $0000, $0720, $0060 ; Act 4 (Unused)
00006488                                    ; SLZ
00006488 0004 0000 1FBF 0000 0640+          dc.w $0004, $0000, $1FBF, $0000, $0640, $0060 ; Act 1
00006494 0004 0000 1FBF 0000 0640+          dc.w $0004, $0000, $1FBF, $0000, $0640, $0060 ; Act 2
000064A0 0004 0000 2000 0000 06C0+          dc.w $0004, $0000, $2000, $0000, $06C0, $0060 ; Act 3
000064AC 0004 0000 3EC0 0000 0720+          dc.w $0004, $0000, $3EC0, $0000, $0720, $0060 ; Act 4 (Unused)
000064B8                                    ; SYZ
000064B8 0004 0000 22C0 0000 0420+          dc.w $0004, $0000, $22C0, $0000, $0420, $0060 ; Act 1
000064C4 0004 0000 28C0 0000 0520+          dc.w $0004, $0000, $28C0, $0000, $0520, $0060 ; Act 2
000064D0 0004 0000 2C00 0000 0620+          dc.w $0004, $0000, $2C00, $0000, $0620, $0060 ; Act 3
000064DC 0004 0000 2EC0 0000 0620+          dc.w $0004, $0000, $2EC0, $0000, $0620, $0060 ; Act 4 (Unused)
000064E8                                    ; SBZ
000064E8 0004 0000 21C0 0000 0720+          dc.w $0004, $0000, $21C0, $0000, $0720, $0060 ; Act 1
000064F4 0004 0000 1E40 FF00 0800+          dc.w $0004, $0000, $1E40, $FF00, $0800, $0060 ; Act 2
00006500 0004 2080 2460 0510 0510+          dc.w $0004, $2080, $2460, $0510, $0510, $0060 ; Act 3 (Final Zone)
0000650C 0004 0000 3EC0 0000 0720+          dc.w $0004, $0000, $3EC0, $0000, $0720, $0060 ; Act 4 (Unused)
00006518                                    ; Ending
00006518 0004 0000 0500 0110 0110+          dc.w $0004, $0000, $0500, $0110, $0110, $0060 ; Act 1 (Good Ending)
00006524 0004 0000 0DC0 0110 0110+          dc.w $0004, $0000, $0DC0, $0110, $0110, $0060 ; Act 2 (Bad Ending)
00006530 0004 0000 2FFF 0000 0320+          dc.w $0004, $0000, $2FFF, $0000, $0320, $0060 ; Act 3 (Unused)
0000653C 0004 0000 2FFF 0000 0320+          dc.w $0004, $0000, $2FFF, $0000, $0320, $0060 ; Act 4 (Unused)
00006548                                    even
00006548                            EndingStLocArray:
00006548                            		incbin	misc\sloc_end.bin
00006568                            		even
00006568                            
00006568                            ; ===========================================================================
00006568                            
00006568                            LevSz_ChkLamp:				; XREF: LevelSizeLoad
00006568 4A38 FE30                  		tst.b	($FFFFFE30).w	; have any lampposts been hit?
0000656C 6700                       		beq.s	LevSz_StartLoc	; if not, branch
0000656E 4EB9 0000 0000             		jsr	Obj79_LoadInfo
00006574 3238 D008                  		move.w	($FFFFD008).w,d1
00006578 3038 D00C                  		move.w	($FFFFD00C).w,d0
0000657C 6000                       		bra.s	loc_60D0
0000657E                            ; ===========================================================================
0000657E                            
0000657E                            LevSz_StartLoc:				; XREF: LevelSizeLoad
0000657E 3038 FE10                  		move.w	($FFFFFE10).w,d0
00006582 ED08                       		lsl.b	#6,d0
00006584 E848                       		lsr.w	#4,d0
00006586 43FB 0000                  		lea	StartLocArray(pc,d0.w),a1 ; load Sonic's start location
0000658A 4A78 FFF0                  		tst.w	($FFFFFFF0).w	; is demo mode on?
0000658E 6A00                       		bpl.s	LevSz_SonicPos	; if not, branch
00006590 3038 FFF4                  		move.w	($FFFFFFF4).w,d0
00006594 5340                       		subq.w	#1,d0
00006596 E548                       		lsl.w	#2,d0
00006598 43FB 00AE                  		lea	EndingStLocArray(pc,d0.w),a1 ; load Sonic's start location
0000659C                            
0000659C                            LevSz_SonicPos:
0000659C 7200                       		moveq	#0,d1
0000659E 3219                       		move.w	(a1)+,d1
000065A0 31C1 D008                  		move.w	d1,($FFFFD008).w ; set Sonic's position on x-axis
000065A4 7000                       		moveq	#0,d0
000065A6 3011                       		move.w	(a1),d0
000065A8 31C0 D00C                  		move.w	d0,($FFFFD00C).w ; set Sonic's position on y-axis
000065AC                            
000065AC                            loc_60D0:				; XREF: LevSz_ChkLamp
000065AC 0441 00A0                  		subi.w	#$A0,d1
000065B0 6400                       		bcc.s	loc_60D8
000065B2 7200                       		moveq	#0,d1
000065B4                            
000065B4                            loc_60D8:
000065B4 3438 F72A                  		move.w	($FFFFF72A).w,d2
000065B8 B242                       		cmp.w	d2,d1
000065BA 6500                       		bcs.s	loc_60E2
000065BC 3202                       		move.w	d2,d1
000065BE                            
000065BE                            loc_60E2:
000065BE 31C1 F700                  		move.w	d1,($FFFFF700).w
000065C2 0440 0060                  		subi.w	#$60,d0
000065C6 6400                       		bcc.s	loc_60EE
000065C8 7000                       		moveq	#0,d0
000065CA                            
000065CA                            loc_60EE:
000065CA B078 F72E                  		cmp.w	($FFFFF72E).w,d0
000065CE 6D00                       		blt.s	loc_60F8
000065D0 3038 F72E                  		move.w	($FFFFF72E).w,d0
000065D4                            
000065D4                            loc_60F8:
000065D4 31C0 F704                  		move.w	d0,($FFFFF704).w
000065D8 6100 0000                  		bsr.w	BgScrollSpeed
000065DC 7000                       		moveq	#0,d0
000065DE 1038 FE10                  		move.b	($FFFFFE10).w,d0
000065E2 E508                       		lsl.b	#2,d0
000065E4 21FB 0000 F7AC             		move.l	LoopTileNums(pc,d0.w),($FFFFF7AC).w
000065EA 6000 0000                  		bra.w	LevSz_Unk
000065EE                            ; ===========================================================================
000065EE                            ; ---------------------------------------------------------------------------
000065EE                            ; Sonic	start location array
000065EE                            ; ---------------------------------------------------------------------------
000065EE                            StartLocArray:	incbin	misc\sloc_lev.bin
0000665E                            		even
0000665E                            
0000665E                            ; ---------------------------------------------------------------------------
0000665E                            ; Which	256x256	tiles contain loops or roll-tunnels
0000665E                            ; ---------------------------------------------------------------------------
0000665E                            ; Format - 4 bytes per zone, referring to which 256x256 evoke special events:
0000665E                            ; loop,	loop, tunnel, tunnel
0000665E                            ; ---------------------------------------------------------------------------
0000665E                            LoopTileNums:	incbin	misc\loopnums.bin
0000667A                            		even
0000667A                            
0000667A                            ; ===========================================================================
0000667A                            
0000667A                            LevSz_Unk:				; XREF: LevelSizeLoad
0000667A 7000                       		moveq	#0,d0
0000667C 1038 FE10                  		move.b	($FFFFFE10).w,d0
00006680 E748                       		lsl.w	#3,d0
00006682 43FB 0000                  		lea	dword_61B4(pc,d0.w),a1
00006686 45F8 F7F0                  		lea	($FFFFF7F0).w,a2
0000668A 24D9                       		move.l	(a1)+,(a2)+
0000668C 24D9                       		move.l	(a1)+,(a2)+
0000668E 4E75                       		rts	
00006690                            ; End of function LevelSizeLoad
00006690                            
00006690                            ; ===========================================================================
00006690 0070 0100 0100 0100        dword_61B4:	dc.l $700100, $1000100
00006698 0800 0100 0100 0000        		dc.l $8000100, $1000000
000066A0 0800 0100 0100 0000        		dc.l $8000100, $1000000
000066A8 0800 0100 0100 0000        		dc.l $8000100, $1000000
000066B0 0800 0100 0100 0000        		dc.l $8000100, $1000000
000066B8 0800 0100 0100 0000        		dc.l $8000100, $1000000
000066C0 0070 0100 0100 0100        		dc.l $700100, $1000100
000066C8                            
000066C8                            ; ---------------------------------------------------------------------------
000066C8                            ; Subroutine to	set scroll speed of some backgrounds
000066C8                            ; ---------------------------------------------------------------------------
000066C8                            
000066C8                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000066C8                            
000066C8                            
000066C8                            BgScrollSpeed:				; XREF: LevelSizeLoad
000066C8 4A38 FE30                  		tst.b	($FFFFFE30).w
000066CC 6600                       		bne.s	loc_6206
000066CE 31C0 F70C                  		move.w	d0,($FFFFF70C).w
000066D2 31C0 F714                  		move.w	d0,($FFFFF714).w
000066D6 31C1 F708                  		move.w	d1,($FFFFF708).w
000066DA 31C1 F710                  		move.w	d1,($FFFFF710).w
000066DE 31C1 F718                  		move.w	d1,($FFFFF718).w
000066E2                            
000066E2                            loc_6206:
000066E2 7400                       		moveq	#0,d2
000066E4 1438 FE10                  		move.b	($FFFFFE10).w,d2
000066E8 D442                       		add.w	d2,d2
000066EA 343B 2000                  		move.w	BgScroll_Index(pc,d2.w),d2
000066EE 4EFB 2000                  		jmp	BgScroll_Index(pc,d2.w)
000066F2                            ; End of function BgScrollSpeed
000066F2                            
000066F2                            ; ===========================================================================
000066F2 0000 0000                  BgScroll_Index:	dc.w BgScroll_GHZ-BgScroll_Index, BgScroll_LZ-BgScroll_Index
000066F6 0000 0000                  		dc.w BgScroll_MZ-BgScroll_Index, BgScroll_SLZ-BgScroll_Index
000066FA 0000 0000                  		dc.w BgScroll_SYZ-BgScroll_Index, BgScroll_SBZ-BgScroll_Index
000066FE 0000                       		dc.w BgScroll_End-BgScroll_Index
00006700                            ; ===========================================================================
00006700                            
00006700                            BgScroll_GHZ:				; XREF: BgScroll_Index
00006700 6000 0000                  		bra.w	Deform_GHZ
00006704                            ; ===========================================================================
00006704                            
00006704                            BgScroll_LZ:				; XREF: BgScroll_Index
00006704 E280                       		asr.l	#1,d0
00006706 31C0 F70C                  		move.w	d0,($FFFFF70C).w
0000670A 4E75                       		rts	
0000670C                            ; ===========================================================================
0000670C                            
0000670C                            BgScroll_MZ:				; XREF: BgScroll_Index
0000670C 4E75                       		rts	
0000670E                            ; ===========================================================================
0000670E                            
0000670E                            BgScroll_SLZ:				; XREF: BgScroll_Index
0000670E E280                       		asr.l	#1,d0
00006710 0640 00C0                  		addi.w	#$C0,d0
00006714 31C0 F70C                  		move.w	d0,($FFFFF70C).w
00006718 4E75                       		rts	
0000671A                            ; ===========================================================================
0000671A                            
0000671A                            BgScroll_SYZ:				; XREF: BgScroll_Index
0000671A E980                       		asl.l	#4,d0
0000671C 2400                       		move.l	d0,d2
0000671E E380                       		asl.l	#1,d0
00006720 D082                       		add.l	d2,d0
00006722 E080                       		asr.l	#8,d0
00006724 31C0 F70C                  		move.w	d0,($FFFFF70C).w
00006728 31C0 F714                  		move.w	d0,($FFFFF714).w
0000672C 4E75                       		rts	
0000672E                            ; ===========================================================================
0000672E                            
0000672E                            BgScroll_SBZ:				; XREF: BgScroll_Index
0000672E E980                       		asl.l	#4,d0
00006730 E380                       		asl.l	#1,d0
00006732 E080                       		asr.l	#8,d0
00006734 31C0 F70C                  		move.w	d0,($FFFFF70C).w
00006738 4E75                       		rts	
0000673A                            ; ===========================================================================
0000673A                            
0000673A                            BgScroll_End:				; XREF: BgScroll_Index
0000673A 31FC 001E F70C             		move.w	#$1E,($FFFFF70C).w
00006740 31FC 001E F714             		move.w	#$1E,($FFFFF714).w
00006746 4E75                       		rts	
00006748                            ; ===========================================================================
00006748 31FC 00A8 F708             		move.w	#$A8,($FFFFF708).w
0000674E 31FC 001E F70C             		move.w	#$1E,($FFFFF70C).w
00006754 31FC FFC0 F710             		move.w	#-$40,($FFFFF710).w
0000675A 31FC 001E F714             		move.w	#$1E,($FFFFF714).w
00006760 4E75                       		rts
00006762                            
00006762                            ; ---------------------------------------------------------------------------
00006762                            ; Background layer deformation subroutines
00006762                            ; ---------------------------------------------------------------------------
00006762                            
00006762                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00006762                            
00006762                            
00006762                            DeformBgLayer:				; XREF: TitleScreen; Level; EndingSequence
00006762 4A38 F744                  		tst.b	($FFFFF744).w
00006766 6700                       		beq.s	loc_628E
00006768 4E75                       		rts	
0000676A                            ; ===========================================================================
0000676A                            
0000676A                            loc_628E:
0000676A 4278 F754                  		clr.w	($FFFFF754).w
0000676E 4278 F756                  		clr.w	($FFFFF756).w
00006772 4278 F758                  		clr.w	($FFFFF758).w
00006776 4278 F75A                  		clr.w	($FFFFF75A).w
0000677A 6100 0000                  		bsr.w	ScrollHoriz
0000677E 6100 0000                  		bsr.w	ScrollVertical
00006782 6100 0000                  		bsr.w	DynScrResizeLoad
00006786 31F8 F700 F61A             		move.w	($FFFFF700).w,($FFFFF61A).w
0000678C 31F8 F704 F616             		move.w	($FFFFF704).w,($FFFFF616).w
00006792 31F8 F708 F61C             		move.w	($FFFFF708).w,($FFFFF61C).w
00006798 31F8 F70C F618             		move.w	($FFFFF70C).w,($FFFFF618).w
0000679E 31F8 F718 F620             		move.w	($FFFFF718).w,($FFFFF620).w
000067A4 31F8 F71C F61E             		move.w	($FFFFF71C).w,($FFFFF61E).w
000067AA 7000                       		moveq	#0,d0
000067AC 1038 FE10                  		move.b	($FFFFFE10).w,d0
000067B0 D040                       		add.w	d0,d0
000067B2 303B 0000                  		move.w	Deform_Index(pc,d0.w),d0
000067B6 4EFB 0000                  		jmp	Deform_Index(pc,d0.w)
000067BA                            ; End of function DeformBgLayer
000067BA                            
000067BA                            ; ===========================================================================
000067BA                            ; ---------------------------------------------------------------------------
000067BA                            ; Offset index for background layer deformation	code
000067BA                            ; ---------------------------------------------------------------------------
000067BA 0000 0000                  Deform_Index:	dc.w Deform_GHZ-Deform_Index, Deform_LZ-Deform_Index
000067BE 0000 0000                  		dc.w Deform_MZ-Deform_Index, Deform_SLZ-Deform_Index
000067C2 0000 0000                  		dc.w Deform_SYZ-Deform_Index, Deform_SBZ-Deform_Index
000067C6 0000                       		dc.w Deform_GHZ-Deform_Index
000067C8                            ; ---------------------------------------------------------------------------
000067C8                            ; Green	Hill Zone background layer deformation code
000067C8                            ; ---------------------------------------------------------------------------
000067C8                            
000067C8                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000067C8                            
000067C8                            
000067C8                            Deform_GHZ:				; XREF: Deform_Index
000067C8 3838 F73A                  		move.w	($FFFFF73A).w,d4
000067CC 48C4                       		ext.l	d4
000067CE EB84                       		asl.l	#5,d4
000067D0 2204                       		move.l	d4,d1
000067D2 E384                       		asl.l	#1,d4
000067D4 D881                       		add.l	d1,d4
000067D6 7A00                       		moveq	#0,d5
000067D8 6100 0000                  		bsr.w	ScrollBlock1
000067DC 6100 0000                  		bsr.w	ScrollBlock4
000067E0 43F8 CC00                  		lea	($FFFFCC00).w,a1
000067E4 3038 F704                  		move.w	($FFFFF704).w,d0
000067E8 0240 07FF                  		andi.w	#$7FF,d0
000067EC EA48                       		lsr.w	#5,d0
000067EE 4440                       		neg.w	d0
000067F0 0640 0026                  		addi.w	#$26,d0
000067F4 31C0 F714                  		move.w	d0,($FFFFF714).w
000067F8 3800                       		move.w	d0,d4
000067FA 6100 0000                  		bsr.w	ScrollBlock3
000067FE 31F8 F70C F618             		move.w	($FFFFF70C).w,($FFFFF618).w
00006804 323C 006F                  		move.w	#$6F,d1
00006808 9244                       		sub.w	d4,d1
0000680A 3038 F700                  		move.w	($FFFFF700).w,d0
0000680E 0C38 0004 F600             		cmpi.b	#4,($FFFFF600).w
00006814 6600                       		bne.s	loc_633C
00006816 7000                       		moveq	#0,d0
00006818                            
00006818                            loc_633C:
00006818 4440                       		neg.w	d0
0000681A 4840                       		swap	d0
0000681C 3038 F708                  		move.w	($FFFFF708).w,d0
00006820 4440                       		neg.w	d0
00006822                            
00006822                            loc_6346:
00006822 22C0                       		move.l	d0,(a1)+
00006824 51C9 FFFC                  		dbf	d1,loc_6346
00006828 323C 0027                  		move.w	#$27,d1
0000682C 3038 F710                  		move.w	($FFFFF710).w,d0
00006830 4440                       		neg.w	d0
00006832                            
00006832                            loc_6356:
00006832 22C0                       		move.l	d0,(a1)+
00006834 51C9 FFFC                  		dbf	d1,loc_6356
00006838 3038 F710                  		move.w	($FFFFF710).w,d0
0000683C 0640 0000                  		addi.w	#0,d0
00006840 3438 F700                  		move.w	($FFFFF700).w,d2
00006844 0642 FE00                  		addi.w	#-$200,d2
00006848 9440                       		sub.w	d0,d2
0000684A 48C2                       		ext.l	d2
0000684C E182                       		asl.l	#8,d2
0000684E 85FC 0068                  		divs.w	#$68,d2
00006852 48C2                       		ext.l	d2
00006854 E182                       		asl.l	#8,d2
00006856 7600                       		moveq	#0,d3
00006858 3600                       		move.w	d0,d3
0000685A 323C 0047                  		move.w	#$47,d1
0000685E D244                       		add.w	d4,d1
00006860                            
00006860                            loc_6384:
00006860 3003                       		move.w	d3,d0
00006862 4440                       		neg.w	d0
00006864 22C0                       		move.l	d0,(a1)+
00006866 4843                       		swap	d3
00006868 D682                       		add.l	d2,d3
0000686A 4843                       		swap	d3
0000686C 51C9 FFF2                  		dbf	d1,loc_6384
00006870 4E75                       		rts	
00006872                            ; End of function Deform_GHZ
00006872                            
00006872                            ; ---------------------------------------------------------------------------
00006872                            ; Labyrinth Zone background layer deformation code
00006872                            ; ---------------------------------------------------------------------------
00006872                            
00006872                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00006872                            
00006872                            
00006872                            Deform_LZ:				; XREF: Deform_Index
00006872 3838 F73A                  		move.w	($FFFFF73A).w,d4
00006876 48C4                       		ext.l	d4
00006878 EF84                       		asl.l	#7,d4
0000687A 3A38 F73C                  		move.w	($FFFFF73C).w,d5
0000687E 48C5                       		ext.l	d5
00006880 EF85                       		asl.l	#7,d5
00006882 6100 0000                  		bsr.w	ScrollBlock1
00006886 31F8 F70C F618             		move.w	($FFFFF70C).w,($FFFFF618).w
0000688C 43F8 CC00                  		lea	($FFFFCC00).w,a1
00006890 323C 00DF                  		move.w	#$DF,d1
00006894 3038 F700                  		move.w	($FFFFF700).w,d0
00006898 4440                       		neg.w	d0
0000689A 4840                       		swap	d0
0000689C 3038 F708                  		move.w	($FFFFF708).w,d0
000068A0 4440                       		neg.w	d0
000068A2                            
000068A2                            loc_63C6:
000068A2 22C0                       		move.l	d0,(a1)+
000068A4 51C9 FFFC                  		dbf	d1,loc_63C6
000068A8 3038 F646                  		move.w	($FFFFF646).w,d0
000068AC 9078 F704                  		sub.w	($FFFFF704).w,d0
000068B0 4E75                       		rts	
000068B2                            ; End of function Deform_LZ
000068B2                            
000068B2                            ; ---------------------------------------------------------------------------
000068B2                            ; Marble Zone background layer deformation code
000068B2                            ; ---------------------------------------------------------------------------
000068B2                            
000068B2                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000068B2                            
000068B2                            
000068B2                            Deform_MZ:				; XREF: Deform_Index
000068B2 3838 F73A                  		move.w	($FFFFF73A).w,d4
000068B6 48C4                       		ext.l	d4
000068B8 ED84                       		asl.l	#6,d4
000068BA 2204                       		move.l	d4,d1
000068BC E384                       		asl.l	#1,d4
000068BE D881                       		add.l	d1,d4
000068C0 7A00                       		moveq	#0,d5
000068C2 6100 0000                  		bsr.w	ScrollBlock1
000068C6 303C 0200                  		move.w	#$200,d0
000068CA 3238 F704                  		move.w	($FFFFF704).w,d1
000068CE 0441 01C8                  		subi.w	#$1C8,d1
000068D2 6500                       		bcs.s	loc_6402
000068D4 3401                       		move.w	d1,d2
000068D6 D241                       		add.w	d1,d1
000068D8 D242                       		add.w	d2,d1
000068DA E441                       		asr.w	#2,d1
000068DC D041                       		add.w	d1,d0
000068DE                            
000068DE                            loc_6402:
000068DE 31C0 F714                  		move.w	d0,($FFFFF714).w
000068E2 6100 0000                  		bsr.w	ScrollBlock3
000068E6 31F8 F70C F618             		move.w	($FFFFF70C).w,($FFFFF618).w
000068EC 43F8 CC00                  		lea	($FFFFCC00).w,a1
000068F0 323C 00DF                  		move.w	#$DF,d1
000068F4 3038 F700                  		move.w	($FFFFF700).w,d0
000068F8 4440                       		neg.w	d0
000068FA 4840                       		swap	d0
000068FC 3038 F708                  		move.w	($FFFFF708).w,d0
00006900 4440                       		neg.w	d0
00006902                            
00006902                            loc_6426:
00006902 22C0                       		move.l	d0,(a1)+
00006904 51C9 FFFC                  		dbf	d1,loc_6426
00006908 4E75                       		rts	
0000690A                            ; End of function Deform_MZ
0000690A                            
0000690A                            ; ---------------------------------------------------------------------------
0000690A                            ; Star Light Zone background layer deformation code
0000690A                            ; ---------------------------------------------------------------------------
0000690A                            
0000690A                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000690A                            
0000690A                            
0000690A                            Deform_SLZ:				; XREF: Deform_Index
0000690A 3838 F73A                  		move.w	($FFFFF73A).w,d4
0000690E 48C4                       		ext.l	d4
00006910 EB84                       		asl.l	#5,d4
00006912 2204                       		move.l	d4,d1
00006914 E384                       		asl.l	#1,d4
00006916 D881                       		add.l	d1,d4
00006918 7A00                       		moveq	#0,d5
0000691A 6100 0000                  		bsr.w	ScrollBlock1
0000691E 6100 0000                  		bsr.w	ScrollBlock3
00006922 43F8 CC00                  		lea	($FFFFCC00).w,a1
00006926                            	;	move.w	($FFFFF704).w,d0
00006926                            	;	andi.w	#$7FF,d0
00006926 EA48                       		lsr.w	#5,d0
00006928 4440                       		neg.w	d0
0000692A 0640 0026                  		addi.w	#$26,d0
0000692E 31C0 F714                  		move.w	d0,($FFFFF714).w
00006932 3800                       		move.w	d0,d4
00006934                            	;	bsr.w	ScrollBlock3
00006934 31FC FFFA F70C                     move.w #-$6,($FFFFF70C).w ; lock the background vertically in place
0000693A 43F8 CC00                  		lea	($FFFFCC00).w,a1	; load beginning address of horizontal scroll buffer to a1
0000693E                            
0000693E 3038 F700                  		move.w	($FFFFF700).w,d0	; load FG screen's X position
00006942 4440                       		neg.w	d0			; negate (positive to negative)
00006944 4840                       		swap	d0			; send to the left side of d0
00006946 3038 F708                  		move.w	($FFFFF708).w,d0	; load BG screen's X position
0000694A 45F8 A800                  		lea	($FFFFA800).w,a2
0000694E 069A 0000 5000             		addi.l	#$5000,(a2)+
00006954 069A 0000 C000             		addi.l	#$C000,(a2)+
0000695A 3038 A800                  		move.w	($FFFFA800).w,d0
0000695E 4440                       		neg.w	d0			; negate (positive to negative)
00006960 E240                       		asr.w	#1,d0			; divide by 2 (Slow down the scroll position)
00006962 323C 0013                  		move.w	#20-1,d1		; set number of scan lines to dump (minus 1 for dbf)
00006966                            slz_DeformLoop_1:
00006966 22C0                       		move.l	d0,(a1)+		; dump both the FG and BG scanline position to buffer
00006968 51C9 FFFC                  		dbf	d1,slz_DeformLoop_1	; repeat d1 number of scanlines
0000696C                            
0000696C 3038 F700                  		move.w	($FFFFF700).w,d0	; load FG screen's X position
00006970 4440                       		neg.w	d0			; negate (positive to negative)
00006972 4840                       		swap	d0			; send to the left side of d0
00006974 3038 F708                  		move.w	($FFFFF708).w,d0	; load BG screen's X position
00006978 45F8 A800                  		lea	($FFFFA800).w,a2
0000697C 069A 0000 5000             		addi.l	#$5000,(a2)+
00006982 069A 0000 C000             		addi.l	#$C000,(a2)+
00006988 3038 A800                  		move.w	($FFFFA800).w,d0
0000698C 4440                       		neg.w	d0			; negate (positive to negative)
0000698E E440                       		asr.w	#2,d0			; divide by 4 (Slow down the scroll position)
00006990 323C 001A                  		move.w	#27-1,d1		; set number of scan lines to dump (minus 1 for dbf)
00006994                            slz_DeformLoop_2:
00006994 22C0                       		move.l	d0,(a1)+		; dump both the FG and BG scanline position to buffer
00006996 51C9 FFFC                  		dbf	d1,slz_DeformLoop_2	; repeat d1 number of scanlines
0000699A                            
0000699A 3038 F700                  		move.w	($FFFFF700).w,d0	; load FG screen's X position
0000699E 4440                       		neg.w	d0			; negate (positive to negative)
000069A0 4840                       		swap	d0			; send to the left side of d0
000069A2 3038 F708                  		move.w	($FFFFF708).w,d0	; load BG screen's X position
000069A6 45F8 A800                  		lea	($FFFFA800).w,a2
000069AA 069A 0000 5000             		addi.l	#$5000,(a2)+
000069B0 069A 0000 C000             		addi.l	#$C000,(a2)+
000069B6 3038 A800                  		move.w	($FFFFA800).w,d0
000069BA 4440                       		neg.w	d0			; negate (positive to negative)
000069BC E640                       		asr.w	#3,d0			; divide by 8 (Slow down the scroll position)
000069BE 323C 0011                  		move.w	#18-1,d1		; set number of scan lines to dump (minus 1 for dbf)
000069C2                            slz_DeformLoop_3:
000069C2 22C0                       		move.l	d0,(a1)+		; dump both the FG and BG scanline position to buffer
000069C4 51C9 FFFC                  		dbf	d1,slz_DeformLoop_3	; repeat d1 number of scanlines
000069C8                            
000069C8 3038 F700                  		move.w	($FFFFF700).w,d0	; load FG screen's X position
000069CC 4440                       		neg.w	d0			; negate (positive to negative)
000069CE 4840                       		swap	d0			; send to the left side of d0
000069D0 3038 F708                  		move.w	($FFFFF708).w,d0	; load BG screen's X position
000069D4 45F8 A800                  		lea	($FFFFA800).w,a2
000069D8 069A 0000 5000             		addi.l	#$5000,(a2)+
000069DE 069A 0000 C000             		addi.l	#$C000,(a2)+
000069E4 3038 A800                  		move.w	($FFFFA800).w,d0
000069E8 4440                       		neg.w	d0			; negate (positive to negative)
000069EA E640                       		asr.w	#3,d0			; divide by 8 (Slow down the scroll position)
000069EC 323C 0009                  		move.w	#10-1,d1		; set number of scan lines to dump (minus 1 for dbf)
000069F0                            slz_DeformLoop_4:
000069F0 22C0                       		move.l	d0,(a1)+		; dump both the FG and BG scanline position to buffer
000069F2 51C9 FFFC                  		dbf	d1,slz_DeformLoop_4	; repeat d1 number of scanlines
000069F6                            
000069F6 3038 F700                  		move.w	($FFFFF700).w,d0	; load FG screen's X position
000069FA 4440                       		neg.w	d0			; negate (positive to negative)
000069FC 4840                       		swap	d0			; send to the left side of d0
000069FE 3038 F708                  		move.w	($FFFFF708).w,d0	; load BG screen's X position
00006A02 45F8 A800                  		lea	($FFFFA800).w,a2
00006A06 069A 0000 5000             		addi.l	#$5000,(a2)+
00006A0C 069A 0000 C000             		addi.l	#$C000,(a2)+
00006A12 3038 A800                  		move.w	($FFFFA800).w,d0
00006A16 4440                       		neg.w	d0			; negate (positive to negative)
00006A18 E840                       		asr.w	#4,d0			; divide by 16 (Slow down the scroll position)
00006A1A 323C 000F                  		move.w	#16-1,d1		; set number of scan lines to dump (minus 1 for dbf)
00006A1E                            slz_DeformLoop_5:
00006A1E 22C0                       		move.l	d0,(a1)+		; dump both the FG and BG scanline position to buffer
00006A20 51C9 FFFC                  		dbf	d1,slz_DeformLoop_5	; repeat d1 number of scanlines
00006A24                            
00006A24 3038 F700                  		move.w	($FFFFF700).w,d0	; load FG screen's X position
00006A28 4440                       		neg.w	d0			; negate (positive to negative)
00006A2A 4840                       		swap	d0			; send to the left side of d0
00006A2C 3038 F708                  		move.w	($FFFFF708).w,d0	; load BG screen's X position
00006A30 4440                       		neg.w	d0			; negate (positive to negative)
00006A32 EA40                       		asr.w	#5,d0			; divide by 32 (Slow down the scroll position)
00006A34 323C 001C                  		move.w	#29-1,d1		; set number of scan lines to dump (minus 1 for dbf)
00006A38                            slz_DeformLoop_6:
00006A38 22C0                       		move.l	d0,(a1)+		; dump both the FG and BG scanline position to buffer
00006A3A 51C9 FFFC                  		dbf	d1,slz_DeformLoop_6	; repeat d1 number of scanlines
00006A3E                            
00006A3E 3038 F700                  		move.w	($FFFFF700).w,d0	; load FG screen's X position
00006A42 4440                       		neg.w	d0			; negate (positive to negative)
00006A44 4840                       		swap	d0			; send to the left side of d0
00006A46 3038 F708                  		move.w	($FFFFF708).w,d0	; load BG screen's X position
00006A4A 4440                       		neg.w	d0			; negate (positive to negative)
00006A4C EE40                       		asr.w	#7,d0			; divide by 128 (Slow down the scroll position)
00006A4E 323C 0005                  		move.w	#6-1,d1		; set number of scan lines to dump (minus 1 for dbf)
00006A52                            slz_DeformLoop_7:
00006A52 22C0                       		move.l	d0,(a1)+		; dump both the FG and BG scanline position to buffer
00006A54 51C9 FFFC                  		dbf	d1,slz_DeformLoop_7	; repeat d1 number of scanlines
00006A58                            
00006A58 3038 F700                  		move.w	($FFFFF700).w,d0	; load FG screen's X position
00006A5C 4440                       		neg.w	d0			; negate (positive to negative)
00006A5E 4840                       		swap	d0			; send to the left side of d0
00006A60 3038 F708                  		move.w	($FFFFF708).w,d0	; load BG screen's X position
00006A64 4440                       		neg.w	d0			; negate (positive to negative)
00006A66 EC40                       		asr.w	#6,d0			; divide by 64 (Slow down the scroll position)
00006A68 323C 0004                  		move.w	#5-1,d1		; set number of scan lines to dump (minus 1 for dbf)
00006A6C                            slz_DeformLoop_8:
00006A6C 22C0                       		move.l	d0,(a1)+		; dump both the FG and BG scanline position to buffer
00006A6E 51C9 FFFC                  		dbf	d1,slz_DeformLoop_8	; repeat d1 number of scanlines
00006A72                            
00006A72 3038 F700                  		move.w	($FFFFF700).w,d0	; load FG screen's X position
00006A76 4440                       		neg.w	d0			; negate (positive to negative)
00006A78 4840                       		swap	d0			; send to the left side of d0
00006A7A 3038 F708                  		move.w	($FFFFF708).w,d0	; load BG screen's X position
00006A7E 4440                       		neg.w	d0			; negate (positive to negative)
00006A80 EA40                       		asr.w	#5,d0			; divide by 32 (Slow down the scroll position)
00006A82 323C 0007                  		move.w	#8-1,d1		; set number of scan lines to dump (minus 1 for dbf)
00006A86                            slz_DeformLoop_9:
00006A86 22C0                       		move.l	d0,(a1)+		; dump both the FG and BG scanline position to buffer
00006A88 51C9 FFFC                  		dbf	d1,slz_DeformLoop_9	; repeat d1 number of scanlines
00006A8C                            
00006A8C 3038 F700                  		move.w	($FFFFF700).w,d0	; load FG screen's X position
00006A90 4440                       		neg.w	d0			; negate (positive to negative)
00006A92 4840                       		swap	d0			; send to the left side of d0
00006A94 3038 F708                  		move.w	($FFFFF708).w,d0	; load BG screen's X position
00006A98 4440                       		neg.w	d0			; negate (positive to negative)
00006A9A E840                       		asr.w	#4,d0			; divide by 16 (Slow down the scroll position)
00006A9C 323C 0006                  		move.w	#7-1,d1		; set number of scan lines to dump (minus 1 for dbf)
00006AA0                            slz_DeformLoop_10:
00006AA0 22C0                       		move.l	d0,(a1)+		; dump both the FG and BG scanline position to buffer
00006AA2 51C9 FFFC                  		dbf	d1,slz_DeformLoop_10	; repeat d1 number of scanlines
00006AA6                            
00006AA6 3038 F700                  		move.w	($FFFFF700).w,d0	; load FG screen's X position
00006AAA 4440                       		neg.w	d0			; negate (positive to negative)
00006AAC 4840                       		swap	d0			; send to the left side of d0
00006AAE 3038 F708                  		move.w	($FFFFF708).w,d0	; load BG screen's X position
00006AB2 4440                       		neg.w	d0			; negate (positive to negative)
00006AB4 E640                       		asr.w	#3,d0			; divide by 8 (Slow down the scroll position)
00006AB6 323C 0013                  		move.w	#20-1,d1		; set number of scan lines to dump (minus 1 for dbf)
00006ABA                            slz_DeformLoop_11:
00006ABA 22C0                       		move.l	d0,(a1)+		; dump both the FG and BG scanline position to buffer
00006ABC 51C9 FFFC                  		dbf	d1,slz_DeformLoop_11	; repeat d1 number of scanlines
00006AC0                            
00006AC0 3038 F700                  		move.w	($FFFFF700).w,d0	; load FG screen's X position
00006AC4 4440                       		neg.w	d0			; negate (positive to negative)
00006AC6 4840                       		swap	d0			; send to the left side of d0
00006AC8 3038 F708                  		move.w	($FFFFF708).w,d0	; load BG screen's X position
00006ACC 4440                       		neg.w	d0			; negate (positive to negative)
00006ACE E440                       		asr.w	#2,d0			; divide by 4 (Slow down the scroll position)
00006AD0 323C 0013                  		move.w	#20-1,d1		; set number of scan lines to dump (minus 1 for dbf)
00006AD4                            slz_DeformLoop_12:
00006AD4 22C0                       		move.l	d0,(a1)+		; dump both the FG and BG scanline position to buffer
00006AD6 51C9 FFFC                  		dbf	d1,slz_DeformLoop_12	; repeat d1 number of scanlines
00006ADA                            
00006ADA 3038 F700                  		move.w	($FFFFF700).w,d0	; load FG screen's X position
00006ADE 4440                       		neg.w	d0			; negate (positive to negative)
00006AE0 4840                       		swap	d0			; send to the left side of d0
00006AE2 3038 F708                  		move.w	($FFFFF708).w,d0	; load BG screen's X position
00006AE6 4440                       		neg.w	d0			; negate (positive to negative)
00006AE8 E240                       		asr.w	#1,d0			; divide by 2 (Slow down the scroll position)
00006AEA 323C 0031                  		move.w	#50-1,d1		; set number of scan lines to dump (minus 1 for dbf)
00006AEE                            slz_DeformLoop_13:
00006AEE 22C0                       		move.l	d0,(a1)+		; dump both the FG and BG scanline position to buffer
00006AF0 51C9 FFFC                  		dbf	d1,slz_DeformLoop_13	; repeat d1 number of scanlines
00006AF4 4E75                       		rts	
00006AF6                            ; End of function Deform_SLZ
00006AF6 4E75                       		rts	
00006AF8                            ; End of function Deform_SLZ_2
00006AF8                            
00006AF8                            ; ---------------------------------------------------------------------------
00006AF8                            ; Spring Yard Zone background layer deformation	code
00006AF8                            ; ---------------------------------------------------------------------------
00006AF8                            
00006AF8                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00006AF8                            
00006AF8                            
00006AF8                            Deform_SYZ:				; XREF: Deform_Index
00006AF8 3838 F73A                  		move.w	($FFFFF73A).w,d4
00006AFC 48C4                       		ext.l	d4
00006AFE ED84                       		asl.l	#6,d4
00006B00 3A38 F73C                  		move.w	($FFFFF73C).w,d5
00006B04 48C5                       		ext.l	d5
00006B06 E985                       		asl.l	#4,d5
00006B08 2205                       		move.l	d5,d1
00006B0A E385                       		asl.l	#1,d5
00006B0C DA81                       		add.l	d1,d5
00006B0E 6100 0000                  		bsr.w	ScrollBlock1
00006B12 31F8 F70C F618             		move.w	($FFFFF70C).w,($FFFFF618).w
00006B18 43F8 CC00                  		lea	($FFFFCC00).w,a1
00006B1C 323C 00DF                  		move.w	#$DF,d1
00006B20 3038 F700                  		move.w	($FFFFF700).w,d0
00006B24 4440                       		neg.w	d0
00006B26 4840                       		swap	d0
00006B28 3038 F708                  		move.w	($FFFFF708).w,d0
00006B2C 4440                       		neg.w	d0
00006B2E                            
00006B2E                            loc_653C:
00006B2E 22C0                       		move.l	d0,(a1)+
00006B30 51C9 FFFC                  		dbf	d1,loc_653C
00006B34 4E75                       		rts	
00006B36                            ; End of function Deform_SYZ
00006B36                            
00006B36                            ; ---------------------------------------------------------------------------
00006B36                            ; Scrap	Brain Zone background layer deformation	code
00006B36                            ; ---------------------------------------------------------------------------
00006B36                            
00006B36                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00006B36                            
00006B36                            
00006B36                            Deform_SBZ:				; XREF: Deform_Index
00006B36 3838 F73A                  		move.w	($FFFFF73A).w,d4
00006B3A 48C4                       		ext.l	d4
00006B3C ED84                       		asl.l	#6,d4
00006B3E 3A38 F73C                  		move.w	($FFFFF73C).w,d5
00006B42 48C5                       		ext.l	d5
00006B44 E985                       		asl.l	#4,d5
00006B46 E385                       		asl.l	#1,d5
00006B48 6100 0000                  		bsr.w	ScrollBlock1
00006B4C 31F8 F70C F618             		move.w	($FFFFF70C).w,($FFFFF618).w
00006B52 43F8 CC00                  		lea	($FFFFCC00).w,a1
00006B56 323C 00DF                  		move.w	#$DF,d1
00006B5A 3038 F700                  		move.w	($FFFFF700).w,d0
00006B5E 4440                       		neg.w	d0
00006B60 4840                       		swap	d0
00006B62 3038 F708                  		move.w	($FFFFF708).w,d0
00006B66 4440                       		neg.w	d0
00006B68                            
00006B68                            loc_6576:
00006B68 22C0                       		move.l	d0,(a1)+
00006B6A 51C9 FFFC                  		dbf	d1,loc_6576
00006B6E 4E75                       		rts	
00006B70                            ; End of function Deform_SBZ
00006B70                            
00006B70                            ; ---------------------------------------------------------------------------
00006B70                            ; Subroutine to	scroll the level horizontally as Sonic moves
00006B70                            ; ---------------------------------------------------------------------------
00006B70                            
00006B70                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00006B70                            
00006B70                            
00006B70                            ScrollHoriz:				; XREF: DeformBgLayer
00006B70 3838 F700                  		move.w	($FFFFF700).w,d4
00006B74 6100                       		bsr.s	ScrollHoriz2
00006B76 3038 F700                  		move.w	($FFFFF700).w,d0
00006B7A 0240 0010                  		andi.w	#$10,d0
00006B7E 1238 F74A                  		move.b	($FFFFF74A).w,d1
00006B82 B300                       		eor.b	d1,d0
00006B84 6600                       		bne.s	locret_65B0
00006B86 0A38 0010 F74A             		eori.b	#$10,($FFFFF74A).w
00006B8C 3038 F700                  		move.w	($FFFFF700).w,d0
00006B90 9044                       		sub.w	d4,d0
00006B92 6A00                       		bpl.s	loc_65AA
00006B94 08F8 0002 F754             		bset	#2,($FFFFF754).w
00006B9A 4E75                       		rts	
00006B9C                            ; ===========================================================================
00006B9C                            
00006B9C                            loc_65AA:
00006B9C 08F8 0003 F754             		bset	#3,($FFFFF754).w
00006BA2                            
00006BA2                            locret_65B0:
00006BA2 4E75                       		rts	
00006BA4                            ; End of function ScrollHoriz
00006BA4                            
00006BA4                            
00006BA4                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00006BA4                            
00006BA4                            
00006BA4                            ScrollHoriz2:				; XREF: ScrollHoriz
00006BA4 3038 D008                  		move.w	($FFFFD008).w,d0
00006BA8 9078 F700                  		sub.w	($FFFFF700).w,d0
00006BAC 0440 0090                  		subi.w	#$90,d0
00006BB0 6500                       		bcs.s	loc_65F6
00006BB2 0440 0010                  		subi.w	#$10,d0
00006BB6 6400                       		bcc.s	loc_65CC
00006BB8 4278 F73A                  		clr.w	($FFFFF73A).w
00006BBC 4E75                       		rts	
00006BBE                            ; ===========================================================================
00006BBE                            
00006BBE                            loc_65CC:
00006BBE 0C40 0010                  		cmpi.w	#$10,d0
00006BC2 6500                       		bcs.s	loc_65D6
00006BC4 303C 0010                  		move.w	#$10,d0
00006BC8                            
00006BC8                            loc_65D6:
00006BC8 D078 F700                  		add.w	($FFFFF700).w,d0
00006BCC B078 F72A                  		cmp.w	($FFFFF72A).w,d0
00006BD0 6D00                       		blt.s	loc_65E4
00006BD2 3038 F72A                  		move.w	($FFFFF72A).w,d0
00006BD6                            
00006BD6                            loc_65E4:
00006BD6 3200                       		move.w	d0,d1
00006BD8 9278 F700                  		sub.w	($FFFFF700).w,d1
00006BDC E141                       		asl.w	#8,d1
00006BDE 31C0 F700                  		move.w	d0,($FFFFF700).w
00006BE2 31C1 F73A                  		move.w	d1,($FFFFF73A).w
00006BE6 4E75                       		rts	
00006BE8                            ; ===========================================================================
00006BE8                            
00006BE8                            loc_65F6:				; XREF: ScrollHoriz2
00006BE8 D078 F700                  		add.w	($FFFFF700).w,d0
00006BEC B078 F728                  		cmp.w	($FFFFF728).w,d0
00006BF0 6EE4                       		bgt.s	loc_65E4
00006BF2 3038 F728                  		move.w	($FFFFF728).w,d0
00006BF6 60DE                       		bra.s	loc_65E4
00006BF8                            ; End of function ScrollHoriz2
00006BF8                            
00006BF8                            ; ===========================================================================
00006BF8 4A40                       		tst.w	d0
00006BFA 6A00                       		bpl.s	loc_6610
00006BFC 303C FFFE                  		move.w	#-2,d0
00006C00 60E6                       		bra.s	loc_65F6
00006C02                            ; ===========================================================================
00006C02                            
00006C02                            loc_6610:
00006C02 303C 0002                  		move.w	#2,d0
00006C06 60B6                       		bra.s	loc_65CC
00006C08                            
00006C08                            ; ---------------------------------------------------------------------------
00006C08                            ; Subroutine to	scroll the level vertically as Sonic moves
00006C08                            ; ---------------------------------------------------------------------------
00006C08                            
00006C08                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00006C08                            
00006C08                            
00006C08                            ScrollVertical:				; XREF: DeformBgLayer
00006C08 7200                       		moveq	#0,d1
00006C0A 3038 D00C                  		move.w	($FFFFD00C).w,d0
00006C0E 9078 F704                  		sub.w	($FFFFF704).w,d0
00006C12 0838 0002 D022             		btst	#2,($FFFFD022).w
00006C18 6700                       		beq.s	loc_662A
00006C1A 5B40                       		subq.w	#5,d0
00006C1C                            
00006C1C                            loc_662A:
00006C1C 0838 0001 D022             		btst	#1,($FFFFD022).w
00006C22 6700                       		beq.s	loc_664A
00006C24 0640 0020                  		addi.w	#$20,d0
00006C28 9078 F73E                  		sub.w	($FFFFF73E).w,d0
00006C2C 6500                       		bcs.s	loc_6696
00006C2E 0440 0040                  		subi.w	#$40,d0
00006C32 6400                       		bcc.s	loc_6696
00006C34 4A38 F75C                  		tst.b	($FFFFF75C).w
00006C38 6600                       		bne.s	loc_66A8
00006C3A 6000                       		bra.s	loc_6656
00006C3C                            ; ===========================================================================
00006C3C                            
00006C3C                            loc_664A:
00006C3C 9078 F73E                  		sub.w	($FFFFF73E).w,d0
00006C40 6600                       		bne.s	loc_665C
00006C42 4A38 F75C                  		tst.b	($FFFFF75C).w
00006C46 6600                       		bne.s	loc_66A8
00006C48                            
00006C48                            loc_6656:
00006C48 4278 F73C                  		clr.w	($FFFFF73C).w
00006C4C 4E75                       		rts	
00006C4E                            ; ===========================================================================
00006C4E                            
00006C4E                            loc_665C:
00006C4E 0C78 0060 F73E             		cmpi.w	#$60,($FFFFF73E).w
00006C54 6600                       		bne.s	loc_6684
00006C56 3238 D014                  		move.w	($FFFFD014).w,d1
00006C5A 6A00                       		bpl.s	loc_666C
00006C5C 4441                       		neg.w	d1
00006C5E                            
00006C5E                            loc_666C:
00006C5E 0C41 0800                  		cmpi.w	#$800,d1
00006C62 6400                       		bcc.s	loc_6696
00006C64 323C 0600                  		move.w	#$600,d1
00006C68 0C40 0006                  		cmpi.w	#6,d0
00006C6C 6E00                       		bgt.s	loc_66F6
00006C6E 0C40 FFFA                  		cmpi.w	#-6,d0
00006C72 6D00                       		blt.s	loc_66C0
00006C74 6000                       		bra.s	loc_66AE
00006C76                            ; ===========================================================================
00006C76                            
00006C76                            loc_6684:
00006C76 323C 0200                  		move.w	#$200,d1
00006C7A 0C40 0002                  		cmpi.w	#2,d0
00006C7E 6E00                       		bgt.s	loc_66F6
00006C80 0C40 FFFE                  		cmpi.w	#-2,d0
00006C84 6D00                       		blt.s	loc_66C0
00006C86 6000                       		bra.s	loc_66AE
00006C88                            ; ===========================================================================
00006C88                            
00006C88                            loc_6696:
00006C88 323C 1000                  		move.w	#$1000,d1
00006C8C 0C40 0010                  		cmpi.w	#$10,d0
00006C90 6E00                       		bgt.s	loc_66F6
00006C92 0C40 FFF0                  		cmpi.w	#-$10,d0
00006C96 6D00                       		blt.s	loc_66C0
00006C98 6000                       		bra.s	loc_66AE
00006C9A                            ; ===========================================================================
00006C9A                            
00006C9A                            loc_66A8:
00006C9A 7000                       		moveq	#0,d0
00006C9C 11C0 F75C                  		move.b	d0,($FFFFF75C).w
00006CA0                            
00006CA0                            loc_66AE:
00006CA0 7200                       		moveq	#0,d1
00006CA2 3200                       		move.w	d0,d1
00006CA4 D278 F704                  		add.w	($FFFFF704).w,d1
00006CA8 4A40                       		tst.w	d0
00006CAA 6A00 0000                  		bpl.w	loc_6700
00006CAE 6000 0000                  		bra.w	loc_66CC
00006CB2                            ; ===========================================================================
00006CB2                            
00006CB2                            loc_66C0:
00006CB2 4441                       		neg.w	d1
00006CB4 48C1                       		ext.l	d1
00006CB6 E181                       		asl.l	#8,d1
00006CB8 D2B8 F704                  		add.l	($FFFFF704).w,d1
00006CBC 4841                       		swap	d1
00006CBE                            
00006CBE                            loc_66CC:
00006CBE B278 F72C                  		cmp.w	($FFFFF72C).w,d1
00006CC2 6E00                       		bgt.s	loc_6724
00006CC4 0C41 FF00                  		cmpi.w	#-$100,d1
00006CC8 6E00                       		bgt.s	loc_66F0
00006CCA 0241 07FF                  		andi.w	#$7FF,d1
00006CCE 0278 07FF D00C             		andi.w	#$7FF,($FFFFD00C).w
00006CD4 0278 07FF F704             		andi.w	#$7FF,($FFFFF704).w
00006CDA 0278 03FF F70C             		andi.w	#$3FF,($FFFFF70C).w
00006CE0 6000                       		bra.s	loc_6724
00006CE2                            ; ===========================================================================
00006CE2                            
00006CE2                            loc_66F0:
00006CE2 3238 F72C                  		move.w	($FFFFF72C).w,d1
00006CE6 6000                       		bra.s	loc_6724
00006CE8                            ; ===========================================================================
00006CE8                            
00006CE8                            loc_66F6:
00006CE8 48C1                       		ext.l	d1
00006CEA E181                       		asl.l	#8,d1
00006CEC D2B8 F704                  		add.l	($FFFFF704).w,d1
00006CF0 4841                       		swap	d1
00006CF2                            
00006CF2                            loc_6700:
00006CF2 B278 F72E                  		cmp.w	($FFFFF72E).w,d1
00006CF6 6D00                       		blt.s	loc_6724
00006CF8 0441 0800                  		subi.w	#$800,d1
00006CFC 6500                       		bcs.s	loc_6720
00006CFE 0278 07FF D00C             		andi.w	#$7FF,($FFFFD00C).w
00006D04 0478 0800 F704             		subi.w	#$800,($FFFFF704).w
00006D0A 0278 03FF F70C             		andi.w	#$3FF,($FFFFF70C).w
00006D10 6000                       		bra.s	loc_6724
00006D12                            ; ===========================================================================
00006D12                            
00006D12                            loc_6720:
00006D12 3238 F72E                  		move.w	($FFFFF72E).w,d1
00006D16                            
00006D16                            loc_6724:
00006D16 3838 F704                  		move.w	($FFFFF704).w,d4
00006D1A 4841                       		swap	d1
00006D1C 2601                       		move.l	d1,d3
00006D1E 96B8 F704                  		sub.l	($FFFFF704).w,d3
00006D22 E09B                       		ror.l	#8,d3
00006D24 31C3 F73C                  		move.w	d3,($FFFFF73C).w
00006D28 21C1 F704                  		move.l	d1,($FFFFF704).w
00006D2C 3038 F704                  		move.w	($FFFFF704).w,d0
00006D30 0240 0010                  		andi.w	#$10,d0
00006D34 1238 F74B                  		move.b	($FFFFF74B).w,d1
00006D38 B300                       		eor.b	d1,d0
00006D3A 6600                       		bne.s	locret_6766
00006D3C 0A38 0010 F74B             		eori.b	#$10,($FFFFF74B).w
00006D42 3038 F704                  		move.w	($FFFFF704).w,d0
00006D46 9044                       		sub.w	d4,d0
00006D48 6A00                       		bpl.s	loc_6760
00006D4A 08F8 0000 F754             		bset	#0,($FFFFF754).w
00006D50 4E75                       		rts	
00006D52                            ; ===========================================================================
00006D52                            
00006D52                            loc_6760:
00006D52 08F8 0001 F754             		bset	#1,($FFFFF754).w
00006D58                            
00006D58                            locret_6766:
00006D58 4E75                       		rts	
00006D5A                            ; End of function ScrollVertical
00006D5A                            
00006D5A                            
00006D5A                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00006D5A                            
00006D5A                            
00006D5A                            ScrollBlock1:				; XREF: Deform_GHZ; et al
00006D5A 2438 F708                  		move.l	($FFFFF708).w,d2
00006D5E 2002                       		move.l	d2,d0
00006D60 D084                       		add.l	d4,d0
00006D62 21C0 F708                  		move.l	d0,($FFFFF708).w
00006D66 2200                       		move.l	d0,d1
00006D68 4841                       		swap	d1
00006D6A 0241 0010                  		andi.w	#$10,d1
00006D6E 1638 F74C                  		move.b	($FFFFF74C).w,d3
00006D72 B701                       		eor.b	d3,d1
00006D74 6600                       		bne.s	loc_679C
00006D76 0A38 0010 F74C             		eori.b	#$10,($FFFFF74C).w
00006D7C 9082                       		sub.l	d2,d0
00006D7E 6A00                       		bpl.s	loc_6796
00006D80 08F8 0002 F756             		bset	#2,($FFFFF756).w
00006D86 6000                       		bra.s	loc_679C
00006D88                            ; ===========================================================================
00006D88                            
00006D88                            loc_6796:
00006D88 08F8 0003 F756             		bset	#3,($FFFFF756).w
00006D8E                            
00006D8E                            loc_679C:
00006D8E 2638 F70C                  		move.l	($FFFFF70C).w,d3
00006D92 2003                       		move.l	d3,d0
00006D94 D085                       		add.l	d5,d0
00006D96 21C0 F70C                  		move.l	d0,($FFFFF70C).w
00006D9A 2200                       		move.l	d0,d1
00006D9C 4841                       		swap	d1
00006D9E 0241 0010                  		andi.w	#$10,d1
00006DA2 1438 F74D                  		move.b	($FFFFF74D).w,d2
00006DA6 B501                       		eor.b	d2,d1
00006DA8 6600                       		bne.s	locret_67D0
00006DAA 0A38 0010 F74D             		eori.b	#$10,($FFFFF74D).w
00006DB0 9083                       		sub.l	d3,d0
00006DB2 6A00                       		bpl.s	loc_67CA
00006DB4 08F8 0000 F756             		bset	#0,($FFFFF756).w
00006DBA 4E75                       		rts	
00006DBC                            ; ===========================================================================
00006DBC                            
00006DBC                            loc_67CA:
00006DBC 08F8 0001 F756             		bset	#1,($FFFFF756).w
00006DC2                            
00006DC2                            locret_67D0:
00006DC2 4E75                       		rts	
00006DC4                            ; End of function ScrollBlock1
00006DC4                            
00006DC4                            
00006DC4                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00006DC4                            
00006DC4                            
00006DC4                            ScrollBlock2:				; XREF: Deform_SLZ
00006DC4 2438 F708                  		move.l	($FFFFF708).w,d2
00006DC8 2002                       		move.l	d2,d0
00006DCA D084                       		add.l	d4,d0
00006DCC 21C0 F708                  		move.l	d0,($FFFFF708).w
00006DD0 2638 F70C                  		move.l	($FFFFF70C).w,d3
00006DD4 2003                       		move.l	d3,d0
00006DD6 D085                       		add.l	d5,d0
00006DD8 21C0 F70C                  		move.l	d0,($FFFFF70C).w
00006DDC 2200                       		move.l	d0,d1
00006DDE 4841                       		swap	d1
00006DE0 0241 0010                  		andi.w	#$10,d1
00006DE4 1438 F74D                  		move.b	($FFFFF74D).w,d2
00006DE8 B501                       		eor.b	d2,d1
00006DEA 6600                       		bne.s	locret_6812
00006DEC 0A38 0010 F74D             		eori.b	#$10,($FFFFF74D).w
00006DF2 9083                       		sub.l	d3,d0
00006DF4 6A00                       		bpl.s	loc_680C
00006DF6 08F8 0000 F756             		bset	#0,($FFFFF756).w
00006DFC 4E75                       		rts	
00006DFE                            ; ===========================================================================
00006DFE                            
00006DFE                            loc_680C:
00006DFE 08F8 0001 F756             		bset	#1,($FFFFF756).w
00006E04                            
00006E04                            locret_6812:
00006E04 4E75                       		rts	
00006E06                            ; End of function ScrollBlock2
00006E06                            
00006E06                            
00006E06                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00006E06                            
00006E06                            
00006E06                            ScrollBlock3:				; XREF: Deform_GHZ; et al
00006E06 3638 F70C                  		move.w	($FFFFF70C).w,d3
00006E0A 31C0 F70C                  		move.w	d0,($FFFFF70C).w
00006E0E 3200                       		move.w	d0,d1
00006E10 0241 0010                  		andi.w	#$10,d1
00006E14 1438 F74D                  		move.b	($FFFFF74D).w,d2
00006E18 B501                       		eor.b	d2,d1
00006E1A 6600                       		bne.s	locret_6842
00006E1C 0A38 0010 F74D             		eori.b	#$10,($FFFFF74D).w
00006E22 9043                       		sub.w	d3,d0
00006E24 6A00                       		bpl.s	loc_683C
00006E26 08F8 0000 F756             		bset	#0,($FFFFF756).w
00006E2C 4E75                       		rts	
00006E2E                            ; ===========================================================================
00006E2E                            
00006E2E                            loc_683C:
00006E2E 08F8 0001 F756             		bset	#1,($FFFFF756).w
00006E34                            
00006E34                            locret_6842:
00006E34 4E75                       		rts	
00006E36                            ; End of function ScrollBlock3
00006E36                            
00006E36                            
00006E36                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00006E36                            
00006E36                            
00006E36                            ScrollBlock4:				; XREF: Deform_GHZ
00006E36 3438 F710                  		move.w	($FFFFF710).w,d2
00006E3A 3638 F714                  		move.w	($FFFFF714).w,d3
00006E3E 3038 F73A                  		move.w	($FFFFF73A).w,d0
00006E42 48C0                       		ext.l	d0
00006E44 EF80                       		asl.l	#7,d0
00006E46 D1B8 F710                  		add.l	d0,($FFFFF710).w
00006E4A 3038 F710                  		move.w	($FFFFF710).w,d0
00006E4E 0240 0010                  		andi.w	#$10,d0
00006E52 1238 F74E                  		move.b	($FFFFF74E).w,d1
00006E56 B300                       		eor.b	d1,d0
00006E58 6600                       		bne.s	locret_6884
00006E5A 0A38 0010 F74E             		eori.b	#$10,($FFFFF74E).w
00006E60 3038 F710                  		move.w	($FFFFF710).w,d0
00006E64 9042                       		sub.w	d2,d0
00006E66 6A00                       		bpl.s	loc_687E
00006E68 08F8 0002 F758             		bset	#2,($FFFFF758).w
00006E6E 6000                       		bra.s	locret_6884
00006E70                            ; ===========================================================================
00006E70                            
00006E70                            loc_687E:
00006E70 08F8 0003 F758             		bset	#3,($FFFFF758).w
00006E76                            
00006E76                            locret_6884:
00006E76 4E75                       		rts	
00006E78                            ; End of function ScrollBlock4
00006E78                            
00006E78                            
00006E78                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00006E78                            
00006E78                            
00006E78                            sub_6886:				; XREF: loc_C44
00006E78 4BF9 00C0 0004             		lea	($C00004).l,a5
00006E7E 4DF9 00C0 0000             		lea	($C00000).l,a6
00006E84 45F8 F756                  		lea	($FFFFF756).w,a2
00006E88 47F8 F708                  		lea	($FFFFF708).w,a3
00006E8C 49F8 A440                  		lea	($FFFFA440).w,a4
00006E90 343C 6000                  		move.w	#$6000,d2
00006E94 6100 0000                  		bsr.w	sub_6954
00006E98 45F8 F758                  		lea	($FFFFF758).w,a2
00006E9C 47F8 F710                  		lea	($FFFFF710).w,a3
00006EA0 6000 0000                  		bra.w	sub_69F4
00006EA4                            ; End of function sub_6886
00006EA4                            
00006EA4                            ; ---------------------------------------------------------------------------
00006EA4                            ; Subroutine to	display	correct	tiles as you move
00006EA4                            ; ---------------------------------------------------------------------------
00006EA4                            
00006EA4                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00006EA4                            
00006EA4                            
00006EA4                            LoadTilesAsYouMove:			; XREF: Demo_Time
00006EA4 4BF9 00C0 0004             		lea	($C00004).l,a5
00006EAA 4DF9 00C0 0000             		lea	($C00000).l,a6
00006EB0 45F8 FF32                  		lea	($FFFFFF32).w,a2
00006EB4 47F8 FF18                  		lea	($FFFFFF18).w,a3
00006EB8 49F8 A440                  		lea	($FFFFA440).w,a4
00006EBC 343C 6000                  		move.w	#$6000,d2
00006EC0 6100 0000                  		bsr.w	sub_6954
00006EC4 45F8 FF34                  		lea	($FFFFFF34).w,a2
00006EC8 47F8 FF20                  		lea	($FFFFFF20).w,a3
00006ECC 6100 0000                  		bsr.w	sub_69F4
00006ED0 45F8 FF30                  		lea	($FFFFFF30).w,a2
00006ED4 47F8 FF10                  		lea	($FFFFFF10).w,a3
00006ED8 49F8 A400                  		lea	($FFFFA400).w,a4
00006EDC 343C 4000                  		move.w	#$4000,d2
00006EE0 4A12                       		tst.b	(a2)
00006EE2 6700                       		beq.s	locret_6952
00006EE4 0892 0000                  		bclr	#0,(a2)
00006EE8 6700                       		beq.s	loc_6908
00006EEA 78F0                       		moveq	#-$10,d4
00006EEC 7AF0                       		moveq	#-$10,d5
00006EEE 6100 0000                  		bsr.w	sub_6C20
00006EF2 78F0                       		moveq	#-$10,d4
00006EF4 7AF0                       		moveq	#-$10,d5
00006EF6 6100 0000                  		bsr.w	sub_6AD8
00006EFA                            
00006EFA                            loc_6908:
00006EFA 0892 0001                  		bclr	#1,(a2)
00006EFE 6700                       		beq.s	loc_6922
00006F00 383C 00E0                  		move.w	#$E0,d4
00006F04 7AF0                       		moveq	#-$10,d5
00006F06 6100 0000                  		bsr.w	sub_6C20
00006F0A 383C 00E0                  		move.w	#$E0,d4
00006F0E 7AF0                       		moveq	#-$10,d5
00006F10 6100 0000                  		bsr.w	sub_6AD8
00006F14                            
00006F14                            loc_6922:
00006F14 0892 0002                  		bclr	#2,(a2)
00006F18 6700                       		beq.s	loc_6938
00006F1A 78F0                       		moveq	#-$10,d4
00006F1C 7AF0                       		moveq	#-$10,d5
00006F1E 6100 0000                  		bsr.w	sub_6C20
00006F22 78F0                       		moveq	#-$10,d4
00006F24 7AF0                       		moveq	#-$10,d5
00006F26 6100 0000                  		bsr.w	sub_6B04
00006F2A                            
00006F2A                            loc_6938:
00006F2A 0892 0003                  		bclr	#3,(a2)
00006F2E 6700                       		beq.s	locret_6952
00006F30 78F0                       		moveq	#-$10,d4
00006F32 3A3C 0140                  		move.w	#$140,d5
00006F36 6100 0000                  		bsr.w	sub_6C20
00006F3A 78F0                       		moveq	#-$10,d4
00006F3C 3A3C 0140                  		move.w	#$140,d5
00006F40 6100 0000                  		bsr.w	sub_6B04
00006F44                            
00006F44                            locret_6952:
00006F44 4E75                       		rts	
00006F46                            ; End of function LoadTilesAsYouMove
00006F46                            
00006F46                            
00006F46                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00006F46                            
00006F46                            
00006F46                            sub_6954:				; XREF: sub_6886; LoadTilesAsYouMove
00006F46 4A12                       		tst.b	(a2)
00006F48 6700 0000                  		beq.w	locret_69F2
00006F4C 0892 0000                  		bclr	#0,(a2)
00006F50 6700                       		beq.s	loc_6972
00006F52 78F0                       		moveq	#-$10,d4
00006F54 7AF0                       		moveq	#-$10,d5
00006F56 6100 0000                  		bsr.w	sub_6C20
00006F5A 78F0                       		moveq	#-$10,d4
00006F5C 7AF0                       		moveq	#-$10,d5
00006F5E 7C1F                       		moveq	#$1F,d6
00006F60 6100 0000                  		bsr.w	sub_6ADA
00006F64                            
00006F64                            loc_6972:
00006F64 0892 0001                  		bclr	#1,(a2)
00006F68 6700                       		beq.s	loc_698E
00006F6A 383C 00E0                  		move.w	#$E0,d4
00006F6E 7AF0                       		moveq	#-$10,d5
00006F70 6100 0000                  		bsr.w	sub_6C20
00006F74 383C 00E0                  		move.w	#$E0,d4
00006F78 7AF0                       		moveq	#-$10,d5
00006F7A 7C1F                       		moveq	#$1F,d6
00006F7C 6100 0000                  		bsr.w	sub_6ADA
00006F80                            
00006F80                            loc_698E:
00006F80 0892 0002                  		bclr	#2,(a2)
00006F84 6700                       		beq.s	loc_69BE
00006F86 78F0                       		moveq	#-$10,d4
00006F88 7AF0                       		moveq	#-$10,d5
00006F8A 6100 0000                  		bsr.w	sub_6C20
00006F8E 78F0                       		moveq	#-$10,d4
00006F90 7AF0                       		moveq	#-$10,d5
00006F92 3C38 F7F0                  		move.w	($FFFFF7F0).w,d6
00006F96 322B 0004                  		move.w	4(a3),d1
00006F9A 0241 FFF0                  		andi.w	#-$10,d1
00006F9E 9C41                       		sub.w	d1,d6
00006FA0 6D00                       		blt.s	loc_69BE
00006FA2 E84E                       		lsr.w	#4,d6
00006FA4 0C46 000F                  		cmpi.w	#$F,d6
00006FA8 6500                       		bcs.s	loc_69BA
00006FAA 7C0F                       		moveq	#$F,d6
00006FAC                            
00006FAC                            loc_69BA:
00006FAC 6100 0000                  		bsr.w	sub_6B06
00006FB0                            
00006FB0                            loc_69BE:
00006FB0 0892 0003                  		bclr	#3,(a2)
00006FB4 6700                       		beq.s	locret_69F2
00006FB6 78F0                       		moveq	#-$10,d4
00006FB8 3A3C 0140                  		move.w	#$140,d5
00006FBC 6100 0000                  		bsr.w	sub_6C20
00006FC0 78F0                       		moveq	#-$10,d4
00006FC2 3A3C 0140                  		move.w	#$140,d5
00006FC6 3C38 F7F0                  		move.w	($FFFFF7F0).w,d6
00006FCA 322B 0004                  		move.w	4(a3),d1
00006FCE 0241 FFF0                  		andi.w	#-$10,d1
00006FD2 9C41                       		sub.w	d1,d6
00006FD4 6D00                       		blt.s	locret_69F2
00006FD6 E84E                       		lsr.w	#4,d6
00006FD8 0C46 000F                  		cmpi.w	#$F,d6
00006FDC 6500                       		bcs.s	loc_69EE
00006FDE 7C0F                       		moveq	#$F,d6
00006FE0                            
00006FE0                            loc_69EE:
00006FE0 6100 0000                  		bsr.w	sub_6B06
00006FE4                            
00006FE4                            locret_69F2:
00006FE4 4E75                       		rts	
00006FE6                            ; End of function sub_6954
00006FE6                            
00006FE6                            
00006FE6                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00006FE6                            
00006FE6                            
00006FE6                            sub_69F4:				; XREF: sub_6886; LoadTilesAsYouMove
00006FE6 4A12                       		tst.b	(a2)
00006FE8 6700 0000                  		beq.w	locret_6A80
00006FEC 0892 0002                  		bclr	#2,(a2)
00006FF0 6700                       		beq.s	loc_6A3E
00006FF2 0C53 0010                  		cmpi.w	#$10,(a3)
00006FF6 6500                       		bcs.s	loc_6A3E
00006FF8 3838 F7F0                  		move.w	($FFFFF7F0).w,d4
00006FFC 322B 0004                  		move.w	4(a3),d1
00007000 0241 FFF0                  		andi.w	#-$10,d1
00007004 9841                       		sub.w	d1,d4
00007006 3F04                       		move.w	d4,-(sp)
00007008 7AF0                       		moveq	#-$10,d5
0000700A 6100 0000                  		bsr.w	sub_6C20
0000700E 381F                       		move.w	(sp)+,d4
00007010 7AF0                       		moveq	#-$10,d5
00007012 3C38 F7F0                  		move.w	($FFFFF7F0).w,d6
00007016 322B 0004                  		move.w	4(a3),d1
0000701A 0241 FFF0                  		andi.w	#-$10,d1
0000701E 9C41                       		sub.w	d1,d6
00007020 6D00                       		blt.s	loc_6A3E
00007022 E84E                       		lsr.w	#4,d6
00007024 0446 000E                  		subi.w	#$E,d6
00007028 6400                       		bcc.s	loc_6A3E
0000702A 4446                       		neg.w	d6
0000702C 6100 0000                  		bsr.w	sub_6B06
00007030                            
00007030                            loc_6A3E:
00007030 0892 0003                  		bclr	#3,(a2)
00007034 6700                       		beq.s	locret_6A80
00007036 3838 F7F0                  		move.w	($FFFFF7F0).w,d4
0000703A 322B 0004                  		move.w	4(a3),d1
0000703E 0241 FFF0                  		andi.w	#-$10,d1
00007042 9841                       		sub.w	d1,d4
00007044 3F04                       		move.w	d4,-(sp)
00007046 3A3C 0140                  		move.w	#$140,d5
0000704A 6100 0000                  		bsr.w	sub_6C20
0000704E 381F                       		move.w	(sp)+,d4
00007050 3A3C 0140                  		move.w	#$140,d5
00007054 3C38 F7F0                  		move.w	($FFFFF7F0).w,d6
00007058 322B 0004                  		move.w	4(a3),d1
0000705C 0241 FFF0                  		andi.w	#-$10,d1
00007060 9C41                       		sub.w	d1,d6
00007062 6D00                       		blt.s	locret_6A80
00007064 E84E                       		lsr.w	#4,d6
00007066 0446 000E                  		subi.w	#$E,d6
0000706A 6400                       		bcc.s	locret_6A80
0000706C 4446                       		neg.w	d6
0000706E 6100 0000                  		bsr.w	sub_6B06
00007072                            
00007072                            locret_6A80:
00007072 4E75                       		rts	
00007074                            ; End of function sub_69F4
00007074                            
00007074                            ; ===========================================================================
00007074 4A12                       		tst.b	(a2)
00007076 6700                       		beq.s	locret_6AD6
00007078 0892 0002                  		bclr	#2,(a2)
0000707C 6700                       		beq.s	loc_6AAC
0000707E 383C 00D0                  		move.w	#$D0,d4
00007082 322B 0004                  		move.w	4(a3),d1
00007086 0241 FFF0                  		andi.w	#-$10,d1
0000708A 9841                       		sub.w	d1,d4
0000708C 3F04                       		move.w	d4,-(sp)
0000708E 7AF0                       		moveq	#-$10,d5
00007090 6100 0000                  		bsr.w	sub_6C3C
00007094 381F                       		move.w	(sp)+,d4
00007096 7AF0                       		moveq	#-$10,d5
00007098 7C02                       		moveq	#2,d6
0000709A 6100 0000                  		bsr.w	sub_6B06
0000709E                            
0000709E                            loc_6AAC:
0000709E 0892 0003                  		bclr	#3,(a2)
000070A2 6700                       		beq.s	locret_6AD6
000070A4 383C 00D0                  		move.w	#$D0,d4
000070A8 322B 0004                  		move.w	4(a3),d1
000070AC 0241 FFF0                  		andi.w	#-$10,d1
000070B0 9841                       		sub.w	d1,d4
000070B2 3F04                       		move.w	d4,-(sp)
000070B4 3A3C 0140                  		move.w	#$140,d5
000070B8 6100 0000                  		bsr.w	sub_6C3C
000070BC 381F                       		move.w	(sp)+,d4
000070BE 3A3C 0140                  		move.w	#$140,d5
000070C2 7C02                       		moveq	#2,d6
000070C4 6100 0000                  		bsr.w	sub_6B06
000070C8                            
000070C8                            locret_6AD6:
000070C8 4E75                       		rts	
000070CA                            
000070CA                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000070CA                            
000070CA                            
000070CA                            sub_6AD8:				; XREF: LoadTilesAsYouMove
000070CA 7C15                       		moveq	#$15,d6
000070CC                            ; End of function sub_6AD8
000070CC                            
000070CC                            
000070CC                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000070CC                            
000070CC                            
000070CC                            sub_6ADA:				; XREF: sub_6954; LoadTilesFromStart2
000070CC 2E3C 0080 0000             		move.l	#$800000,d7
000070D2 2200                       		move.l	d0,d1
000070D4                            
000070D4                            loc_6AE2:
000070D4 48E7 0C00                  		movem.l	d4-d5,-(sp)
000070D8 6100 0000                  		bsr.w	sub_6BD6
000070DC 2001                       		move.l	d1,d0
000070DE 6100 0000                  		bsr.w	sub_6B32
000070E2 5801                       		addq.b	#4,d1
000070E4 0201 007F                  		andi.b	#$7F,d1
000070E8 4CDF 0030                  		movem.l	(sp)+,d4-d5
000070EC 0645 0010                  		addi.w	#$10,d5
000070F0 51CE FFE2                  		dbf	d6,loc_6AE2
000070F4 4E75                       		rts	
000070F6                            ; End of function sub_6ADA
000070F6                            
000070F6                            
000070F6                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000070F6                            
000070F6                            
000070F6                            sub_6B04:				; XREF: LoadTilesAsYouMove
000070F6 7C0F                       		moveq	#$F,d6
000070F8                            ; End of function sub_6B04
000070F8                            
000070F8                            
000070F8                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000070F8                            
000070F8                            
000070F8                            sub_6B06:				; XREF: sub_6954
000070F8 2E3C 0080 0000             		move.l	#$800000,d7
000070FE 2200                       		move.l	d0,d1
00007100                            
00007100                            loc_6B0E:
00007100 48E7 0C00                  		movem.l	d4-d5,-(sp)
00007104 6100 0000                  		bsr.w	sub_6BD6
00007108 2001                       		move.l	d1,d0
0000710A 6100 0000                  		bsr.w	sub_6B32
0000710E 0641 0100                  		addi.w	#$100,d1
00007112 0241 0FFF                  		andi.w	#$FFF,d1
00007116 4CDF 0030                  		movem.l	(sp)+,d4-d5
0000711A 0644 0010                  		addi.w	#$10,d4
0000711E 51CE FFE0                  		dbf	d6,loc_6B0E
00007122 4E75                       		rts	
00007124                            ; End of function sub_6B06
00007124                            
00007124                            
00007124                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00007124                            
00007124                            
00007124                            sub_6B32:				; XREF: sub_6ADA; sub_6B06
00007124 8042                       		or.w	d2,d0
00007126 4840                       		swap	d0
00007128 0810 0004                  		btst	#4,(a0)
0000712C 6600                       		bne.s	loc_6B6E
0000712E 0810 0003                  		btst	#3,(a0)
00007132 6600                       		bne.s	loc_6B4E
00007134 2A80                       		move.l	d0,(a5)
00007136 2C99                       		move.l	(a1)+,(a6)
00007138 D087                       		add.l	d7,d0
0000713A 2A80                       		move.l	d0,(a5)
0000713C 2C99                       		move.l	(a1)+,(a6)
0000713E 4E75                       		rts	
00007140                            ; ===========================================================================
00007140                            
00007140                            loc_6B4E:
00007140 2A80                       		move.l	d0,(a5)
00007142 2819                       		move.l	(a1)+,d4
00007144 0A84 0800 0800             		eori.l	#$8000800,d4
0000714A 4844                       		swap	d4
0000714C 2C84                       		move.l	d4,(a6)
0000714E D087                       		add.l	d7,d0
00007150 2A80                       		move.l	d0,(a5)
00007152 2819                       		move.l	(a1)+,d4
00007154 0A84 0800 0800             		eori.l	#$8000800,d4
0000715A 4844                       		swap	d4
0000715C 2C84                       		move.l	d4,(a6)
0000715E 4E75                       		rts	
00007160                            ; ===========================================================================
00007160                            
00007160                            loc_6B6E:
00007160 0810 0003                  		btst	#3,(a0)
00007164 6600                       		bne.s	loc_6B90
00007166 2A80                       		move.l	d0,(a5)
00007168 2A19                       		move.l	(a1)+,d5
0000716A 2819                       		move.l	(a1)+,d4
0000716C 0A84 1000 1000             		eori.l	#$10001000,d4
00007172 2C84                       		move.l	d4,(a6)
00007174 D087                       		add.l	d7,d0
00007176 2A80                       		move.l	d0,(a5)
00007178 0A85 1000 1000             		eori.l	#$10001000,d5
0000717E 2C85                       		move.l	d5,(a6)
00007180 4E75                       		rts	
00007182                            ; ===========================================================================
00007182                            
00007182                            loc_6B90:
00007182 2A80                       		move.l	d0,(a5)
00007184 2A19                       		move.l	(a1)+,d5
00007186 2819                       		move.l	(a1)+,d4
00007188 0A84 1800 1800             		eori.l	#$18001800,d4
0000718E 4844                       		swap	d4
00007190 2C84                       		move.l	d4,(a6)
00007192 D087                       		add.l	d7,d0
00007194 2A80                       		move.l	d0,(a5)
00007196 0A85 1800 1800             		eori.l	#$18001800,d5
0000719C 4845                       		swap	d5
0000719E 2C85                       		move.l	d5,(a6)
000071A0 4E75                       		rts	
000071A2                            ; End of function sub_6B32
000071A2                            
000071A2                            ; ===========================================================================
000071A2 4E75                       		rts	
000071A4                            ; ===========================================================================
000071A4 2A80                       		move.l	d0,(a5)
000071A6 3A3C 2000                  		move.w	#$2000,d5
000071AA 3819                       		move.w	(a1)+,d4
000071AC D845                       		add.w	d5,d4
000071AE 3C84                       		move.w	d4,(a6)
000071B0 3819                       		move.w	(a1)+,d4
000071B2 D845                       		add.w	d5,d4
000071B4 3C84                       		move.w	d4,(a6)
000071B6 D087                       		add.l	d7,d0
000071B8 2A80                       		move.l	d0,(a5)
000071BA 3819                       		move.w	(a1)+,d4
000071BC D845                       		add.w	d5,d4
000071BE 3C84                       		move.w	d4,(a6)
000071C0 3819                       		move.w	(a1)+,d4
000071C2 D845                       		add.w	d5,d4
000071C4 3C84                       		move.w	d4,(a6)
000071C6 4E75                       		rts	
000071C8                            
000071C8                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000071C8                            
000071C8                            
000071C8                            sub_6BD6:				; XREF: sub_6ADA; sub_6B06
000071C8 43F8 B000                  		lea	($FFFFB000).w,a1
000071CC D86B 0004                  		add.w	4(a3),d4
000071D0 DA53                       		add.w	(a3),d5
000071D2 3604                       		move.w	d4,d3
000071D4 E24B                       		lsr.w	#1,d3
000071D6 0243 0380                  		andi.w	#$380,d3
000071DA E64D                       		lsr.w	#3,d5
000071DC 3005                       		move.w	d5,d0
000071DE EA48                       		lsr.w	#5,d0
000071E0 0240 007F                  		andi.w	#$7F,d0
000071E4 D043                       		add.w	d3,d0
000071E6 76FF                       		moveq	#-1,d3
000071E8 1634 0000                  		move.b	(a4,d0.w),d3
000071EC 6700                       		beq.s	locret_6C1E
000071EE 5303                       		subq.b	#1,d3
000071F0 0243 007F                  		andi.w	#$7F,d3
000071F4 EE5B                       		ror.w	#7,d3
000071F6 D844                       		add.w	d4,d4
000071F8 0244 01E0                  		andi.w	#$1E0,d4
000071FC 0245 001E                  		andi.w	#$1E,d5
00007200 D644                       		add.w	d4,d3
00007202 D645                       		add.w	d5,d3
00007204 2043                       		movea.l	d3,a0
00007206 3610                       		move.w	(a0),d3
00007208 0243 03FF                  		andi.w	#$3FF,d3
0000720C E74B                       		lsl.w	#3,d3
0000720E D2C3                       		adda.w	d3,a1
00007210                            
00007210                            locret_6C1E:
00007210 4E75                       		rts	
00007212                            ; End of function sub_6BD6
00007212                            
00007212                            
00007212                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00007212                            
00007212                            
00007212                            sub_6C20:				; XREF: LoadTilesAsYouMove; et al
00007212 D86B 0004                  		add.w	4(a3),d4
00007216 DA53                       		add.w	(a3),d5
00007218 0244 00F0                  		andi.w	#$F0,d4
0000721C 0245 01F0                  		andi.w	#$1F0,d5
00007220 E94C                       		lsl.w	#4,d4
00007222 E44D                       		lsr.w	#2,d5
00007224 D845                       		add.w	d5,d4
00007226 7003                       		moveq	#3,d0
00007228 4840                       		swap	d0
0000722A 3004                       		move.w	d4,d0
0000722C 4E75                       		rts	
0000722E                            ; End of function sub_6C20
0000722E                            
0000722E                            
0000722E                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000722E                            ; not used
0000722E                            
0000722E                            
0000722E                            sub_6C3C:
0000722E D86B 0004                  		add.w	4(a3),d4
00007232 DA53                       		add.w	(a3),d5
00007234 0244 00F0                  		andi.w	#$F0,d4
00007238 0245 01F0                  		andi.w	#$1F0,d5
0000723C E94C                       		lsl.w	#4,d4
0000723E E44D                       		lsr.w	#2,d5
00007240 D845                       		add.w	d5,d4
00007242 7002                       		moveq	#2,d0
00007244 4840                       		swap	d0
00007246 3004                       		move.w	d4,d0
00007248 4E75                       		rts	
0000724A                            ; End of function sub_6C3C
0000724A                            
0000724A                            ; ---------------------------------------------------------------------------
0000724A                            ; Subroutine to	load tiles as soon as the level	appears
0000724A                            ; ---------------------------------------------------------------------------
0000724A                            
0000724A                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000724A                            
0000724A                            
0000724A                            LoadTilesFromStart:			; XREF: Level; EndingSequence
0000724A 4BF9 00C0 0004             		lea	($C00004).l,a5
00007250 4DF9 00C0 0000             		lea	($C00000).l,a6
00007256 47F8 F700                  		lea	($FFFFF700).w,a3
0000725A 49F8 A400                  		lea	($FFFFA400).w,a4
0000725E 343C 4000                  		move.w	#$4000,d2
00007262 6100                       		bsr.s	LoadTilesFromStart2
00007264 47F8 F708                  		lea	($FFFFF708).w,a3
00007268 49F8 A440                  		lea	($FFFFA440).w,a4
0000726C 343C 6000                  		move.w	#$6000,d2
00007270                            ; End of function LoadTilesFromStart
00007270                            
00007270                            
00007270                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00007270                            
00007270                            
00007270                            LoadTilesFromStart2:			; XREF: LoadTilesFromStart
00007270 78F0                       		moveq	#-$10,d4
00007272 7C0F                       		moveq	#$F,d6
00007274                            
00007274                            loc_6C82:
00007274 48E7 0E00                  		movem.l	d4-d6,-(sp)
00007278 7A00                       		moveq	#0,d5
0000727A 3204                       		move.w	d4,d1
0000727C 6100 FF94                  		bsr.w	sub_6C20
00007280 3801                       		move.w	d1,d4
00007282 7A00                       		moveq	#0,d5
00007284 7C1F                       		moveq	#$1F,d6
00007286 6100 FE44                  		bsr.w	sub_6ADA
0000728A 4CDF 0070                  		movem.l	(sp)+,d4-d6
0000728E 0644 0010                  		addi.w	#$10,d4
00007292 51CE FFE0                  		dbf	d6,loc_6C82
00007296 4E75                       		rts	
00007298                            ; End of function LoadTilesFromStart2
00007298                            
00007298                            ; ---------------------------------------------------------------------------
00007298                            ; Main Load Block loading subroutine
00007298                            ; ---------------------------------------------------------------------------
00007298                            
00007298                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00007298                            
00007298                            
00007298                            MainLoadBlockLoad:			; XREF: Level; EndingSequence
00007298 7000                       		moveq	#0,d0
0000729A 1038 FE10                  		move.b	($FFFFFE10).w,d0
0000729E E948                       		lsl.w	#4,d0
000072A0 45F9 0000 0000             		lea	(MainLoadBlocks).l,a2
000072A6 45F2 0000                  		lea	(a2,d0.w),a2
000072AA 2F0A                       		move.l	a2,-(sp)
000072AC 588A                       		addq.l	#4,a2
000072AE 205A                       		movea.l	(a2)+,a0
000072B0 43F8 B000                  		lea	($FFFFB000).w,a1 ; RAM address for 16x16 mappings
000072B4 303C 0000                  		move.w	#0,d0
000072B8 6100 A688                  		bsr.w	EniDec
000072BC 205A                       		movea.l	(a2)+,a0
000072BE 43F9 00FF 0000             		lea	($FF0000).l,a1	; RAM address for 256x256 mappings
000072C4 6100 A7FA                  		bsr.w	KosDec
000072C8 6100 0000                  		bsr.w	LevelLayoutLoad
000072CC 301A                       		move.w	(a2)+,d0
000072CE 3012                       		move.w	(a2),d0
000072D0 0240 00FF                  		andi.w	#$FF,d0
000072D4 0C78 0103 FE10             		cmpi.w	#$103,($FFFFFE10).w ; is level SBZ3 (LZ4) ?
000072DA 6600                       		bne.s	MLB_ChkSBZPal	; if not, branch
000072DC 700C                       		moveq	#$C,d0		; use SB3 pallet
000072DE                            
000072DE                            MLB_ChkSBZPal:
000072DE 0C78 0501 FE10             		cmpi.w	#$501,($FFFFFE10).w ; is level SBZ2?
000072E4 6700                       		beq.s	MLB_UsePal0E	; if yes, branch
000072E6 0C78 0502 FE10             		cmpi.w	#$502,($FFFFFE10).w ; is level FZ?
000072EC 6600                       		bne.s	MLB_NormalPal	; if not, branch
000072EE                            
000072EE                            MLB_UsePal0E:
000072EE 700E                       		moveq	#$E,d0		; use SBZ2/FZ pallet
000072F0                            
000072F0                            MLB_NormalPal:
000072F0 6100 AFF4                  		bsr.w	PalLoad1	; load pallet (based on	d0)
000072F4 245F                       		movea.l	(sp)+,a2
000072F6 584A                       		addq.w	#4,a2
000072F8 7000                       		moveq	#0,d0
000072FA 1012                       		move.b	(a2),d0
000072FC 6700                       		beq.s	locret_6D10
000072FE 6100 A4A4                  		bsr.w	LoadPLC		; load pattern load cues
00007302                            
00007302                            locret_6D10:
00007302 4E75                       		rts	
00007304                            ; End of function MainLoadBlockLoad
00007304                            
00007304                            ; ---------------------------------------------------------------------------
00007304                            ; Level	layout loading subroutine
00007304                            ; ---------------------------------------------------------------------------
00007304                            
00007304                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00007304                            
00007304                            
00007304                            LevelLayoutLoad:			; XREF: TitleScreen; MainLoadBlockLoad
00007304 47F8 A400                  		lea	($FFFFA400).w,a3
00007308 323C 01FF                  		move.w	#$1FF,d1
0000730C 7000                       		moveq	#0,d0
0000730E                            
0000730E                            LevLoad_ClrRam:
0000730E 26C0                       		move.l	d0,(a3)+
00007310 51C9 FFFC                  		dbf	d1,LevLoad_ClrRam ; clear the RAM ($FFFFA400-A7FF)
00007314                            
00007314 47F8 A400                  		lea	($FFFFA400).w,a3 ; RAM address for level layout
00007318 7200                       		moveq	#0,d1
0000731A 6100 0000                  		bsr.w	LevelLayoutLoad2 ; load	level layout into RAM
0000731E 47F8 A440                  		lea	($FFFFA440).w,a3 ; RAM address for background layout
00007322 7202                       		moveq	#2,d1
00007324                            ; End of function LevelLayoutLoad
00007324                            
00007324                            ; "LevelLayoutLoad2" is	run twice - for	the level and the background
00007324                            
00007324                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00007324                            
00007324                            
00007324                            LevelLayoutLoad2:			; XREF: LevelLayoutLoad
00007324 3038 FE10                  		move.w	($FFFFFE10).w,d0
00007328 ED08                       		lsl.b	#6,d0
0000732A EA48                       		lsr.w	#5,d0
0000732C 3400                       		move.w	d0,d2
0000732E D040                       		add.w	d0,d0
00007330 D042                       		add.w	d2,d0
00007332 D041                       		add.w	d1,d0
00007334 43F9 0000 0000             		lea	(Level_Index).l,a1
0000733A 3031 0000                  		move.w	(a1,d0.w),d0
0000733E 43F1 0000                  		lea	(a1,d0.w),a1
00007342 7200                       		moveq	#0,d1
00007344 3401                       		move.w	d1,d2
00007346 1219                       		move.b	(a1)+,d1	; load level width (in tiles)
00007348 1419                       		move.b	(a1)+,d2	; load level height (in	tiles)
0000734A                            
0000734A                            LevLoad_NumRows:
0000734A 3001                       		move.w	d1,d0
0000734C 204B                       		movea.l	a3,a0
0000734E                            
0000734E                            LevLoad_Row:
0000734E 10D9                       		move.b	(a1)+,(a0)+
00007350 51C8 FFFC                  		dbf	d0,LevLoad_Row	; load 1 row
00007354 47EB 0080                  		lea	$80(a3),a3	; do next row
00007358 51CA FFF0                  		dbf	d2,LevLoad_NumRows ; repeat for	number of rows
0000735C 4E75                       		rts	
0000735E                            ; End of function LevelLayoutLoad2
0000735E                            
0000735E                            ; ---------------------------------------------------------------------------
0000735E                            ; Dynamic screen resize	loading	subroutine
0000735E                            ; ---------------------------------------------------------------------------
0000735E                            
0000735E                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000735E                            
0000735E                            
0000735E                            DynScrResizeLoad:			; XREF: DeformBgLayer
0000735E 7000                       		moveq	#0,d0
00007360 1038 FE10                  		move.b	($FFFFFE10).w,d0
00007364 D040                       		add.w	d0,d0
00007366 303B 0000                  		move.w	Resize_Index(pc,d0.w),d0
0000736A 4EBB 0000                  		jsr	Resize_Index(pc,d0.w)
0000736E 7202                       		moveq	#2,d1
00007370 3038 F726                  		move.w	($FFFFF726).w,d0
00007374 9078 F72E                  		sub.w	($FFFFF72E).w,d0
00007378 6700                       		beq.s	locret_6DAA
0000737A 6400                       		bcc.s	loc_6DAC
0000737C 4441                       		neg.w	d1
0000737E 3038 F704                  		move.w	($FFFFF704).w,d0
00007382 B078 F726                  		cmp.w	($FFFFF726).w,d0
00007386 6300                       		bls.s	loc_6DA0
00007388 31C0 F72E                  		move.w	d0,($FFFFF72E).w
0000738C 0278 FFFE F72E             		andi.w	#-2,($FFFFF72E).w
00007392                            
00007392                            loc_6DA0:
00007392 D378 F72E                  		add.w	d1,($FFFFF72E).w
00007396 11FC 0001 F75C             		move.b	#1,($FFFFF75C).w
0000739C                            
0000739C                            locret_6DAA:
0000739C 4E75                       		rts	
0000739E                            ; ===========================================================================
0000739E                            
0000739E                            loc_6DAC:				; XREF: DynScrResizeLoad
0000739E 3038 F704                  		move.w	($FFFFF704).w,d0
000073A2 5040                       		addq.w	#8,d0
000073A4 B078 F72E                  		cmp.w	($FFFFF72E).w,d0
000073A8 6500                       		bcs.s	loc_6DC4
000073AA 0838 0001 D022             		btst	#1,($FFFFD022).w
000073B0 6700                       		beq.s	loc_6DC4
000073B2 D241                       		add.w	d1,d1
000073B4 D241                       		add.w	d1,d1
000073B6                            
000073B6                            loc_6DC4:
000073B6 D378 F72E                  		add.w	d1,($FFFFF72E).w
000073BA 11FC 0001 F75C             		move.b	#1,($FFFFF75C).w
000073C0 4E75                       		rts	
000073C2                            ; End of function DynScrResizeLoad
000073C2                            
000073C2                            ; ===========================================================================
000073C2                            ; ---------------------------------------------------------------------------
000073C2                            ; Offset index for dynamic screen resizing
000073C2                            ; ---------------------------------------------------------------------------
000073C2 0000 0000                  Resize_Index:	dc.w Resize_GHZ-Resize_Index, Resize_LZ-Resize_Index
000073C6 0000 0000                  		dc.w Resize_MZ-Resize_Index, Resize_SLZ-Resize_Index
000073CA 0000 0000                  		dc.w Resize_SYZ-Resize_Index, Resize_SBZ-Resize_Index
000073CE 0000                       		dc.w Resize_Ending-Resize_Index
000073D0                            ; ===========================================================================
000073D0                            ; ---------------------------------------------------------------------------
000073D0                            ; Green	Hill Zone dynamic screen resizing
000073D0                            ; ---------------------------------------------------------------------------
000073D0                            
000073D0                            Resize_GHZ:				; XREF: Resize_Index
000073D0 7000                       		moveq	#0,d0
000073D2 1038 FE11                  		move.b	($FFFFFE11).w,d0
000073D6 D040                       		add.w	d0,d0
000073D8 303B 0000                  		move.w	Resize_GHZx(pc,d0.w),d0
000073DC 4EFB 0000                  		jmp	Resize_GHZx(pc,d0.w)
000073E0                            ; ===========================================================================
000073E0 0000                       Resize_GHZx:	dc.w Resize_GHZ1-Resize_GHZx
000073E2 0000                       		dc.w Resize_GHZ2-Resize_GHZx
000073E4 0000                       		dc.w Resize_GHZ3-Resize_GHZx
000073E6                            ; ===========================================================================
000073E6                            
000073E6                            Resize_GHZ1:
000073E6 31FC 0300 F726             		move.w	#$300,($FFFFF726).w ; set lower	y-boundary
000073EC 0C78 1780 F700             		cmpi.w	#$1780,($FFFFF700).w ; has the camera reached $1780 on x-axis?
000073F2 6500                       		bcs.s	locret_6E08	; if not, branch
000073F4 31FC 0400 F726             		move.w	#$400,($FFFFF726).w ; set lower	y-boundary
000073FA                            
000073FA                            locret_6E08:
000073FA 4E75                       		rts	
000073FC                            ; ===========================================================================
000073FC                            
000073FC                            Resize_GHZ2:
000073FC 31FC 0300 F726             		move.w	#$300,($FFFFF726).w
00007402 0C78 0ED0 F700             		cmpi.w	#$ED0,($FFFFF700).w
00007408 6500                       		bcs.s	locret_6E3A
0000740A 31FC 0200 F726             		move.w	#$200,($FFFFF726).w
00007410 0C78 1600 F700             		cmpi.w	#$1600,($FFFFF700).w
00007416 6500                       		bcs.s	locret_6E3A
00007418 31FC 0400 F726             		move.w	#$400,($FFFFF726).w
0000741E 0C78 1D60 F700             		cmpi.w	#$1D60,($FFFFF700).w
00007424 6500                       		bcs.s	locret_6E3A
00007426 31FC 0300 F726             		move.w	#$300,($FFFFF726).w
0000742C                            
0000742C                            locret_6E3A:
0000742C 4E75                       		rts	
0000742E                            ; ===========================================================================
0000742E                            
0000742E                            Resize_GHZ3:
0000742E 7000                       		moveq	#0,d0
00007430 1038 F742                  		move.b	($FFFFF742).w,d0
00007434 303B 0000                  		move.w	off_6E4A(pc,d0.w),d0
00007438 4EFB 0000                  		jmp	off_6E4A(pc,d0.w)
0000743C                            ; ===========================================================================
0000743C 0000                       off_6E4A:	dc.w Resize_GHZ3main-off_6E4A
0000743E 0000                       		dc.w Resize_GHZ3boss-off_6E4A
00007440 0000                       		dc.w Resize_GHZ3end-off_6E4A
00007442                            ; ===========================================================================
00007442                            
00007442                            Resize_GHZ3main:
00007442 31FC 0300 F726             		move.w	#$300,($FFFFF726).w
00007448 0C78 0380 F700             		cmpi.w	#$380,($FFFFF700).w
0000744E 6500                       		bcs.s	locret_6E96
00007450 31FC 0310 F726             		move.w	#$310,($FFFFF726).w
00007456 0C78 0960 F700             		cmpi.w	#$960,($FFFFF700).w
0000745C 6500                       		bcs.s	locret_6E96
0000745E 0C78 0280 F704             		cmpi.w	#$280,($FFFFF704).w
00007464 6500                       		bcs.s	loc_6E98
00007466 31FC 0400 F726             		move.w	#$400,($FFFFF726).w
0000746C 0C78 1380 F700             		cmpi.w	#$1380,($FFFFF700).w
00007472 6400                       		bcc.s	loc_6E8E
00007474 31FC 04C0 F726             		move.w	#$4C0,($FFFFF726).w
0000747A 31FC 04C0 F72E             		move.w	#$4C0,($FFFFF72E).w
00007480                            
00007480                            loc_6E8E:
00007480 0C78 1700 F700             		cmpi.w	#$1700,($FFFFF700).w
00007486 6400                       		bcc.s	loc_6E98
00007488                            
00007488                            locret_6E96:
00007488 4E75                       		rts	
0000748A                            ; ===========================================================================
0000748A                            
0000748A                            loc_6E98:
0000748A 31FC 0300 F726             		move.w	#$300,($FFFFF726).w
00007490 5438 F742                  		addq.b	#2,($FFFFF742).w
00007494 4E75                       		rts	
00007496                            ; ===========================================================================
00007496                            
00007496                            Resize_GHZ3boss:
00007496 0C78 0960 F700             		cmpi.w	#$960,($FFFFF700).w
0000749C 6400                       		bcc.s	loc_6EB0
0000749E 5538 F742                  		subq.b	#2,($FFFFF742).w
000074A2                            
000074A2                            loc_6EB0:
000074A2 0C78 2960 F700             		cmpi.w	#$2960,($FFFFF700).w
000074A8 6500                       		bcs.s	locret_6EE8
000074AA 6100 0000                  		bsr.w	SingleObjLoad
000074AE 6600                       		bne.s	loc_6ED0
000074B0 12BC 003D                  		move.b	#$3D,0(a1)	; load GHZ boss	object
000074B4 337C 2A60 0008             		move.w	#$2A60,8(a1)
000074BA 337C 0280 000C             		move.w	#$280,$C(a1)
000074C0                            
000074C0                            loc_6ED0:
000074C0 303C 008C                  		move.w	#$8C,d0
000074C4 6100 A0F4                  		bsr.w	PlaySound	; play boss music
000074C8 11FC 0001 F7AA             		move.b	#1,($FFFFF7AA).w ; lock	screen
000074CE 5438 F742                  		addq.b	#2,($FFFFF742).w
000074D2 7011                       		moveq	#$11,d0
000074D4 6000 A2CE                  		bra.w	LoadPLC		; load boss patterns
000074D8                            ; ===========================================================================
000074D8                            
000074D8                            locret_6EE8:
000074D8 4E75                       		rts	
000074DA                            ; ===========================================================================
000074DA                            
000074DA                            Resize_GHZ3end:
000074DA 31F8 F700 F728             		move.w	($FFFFF700).w,($FFFFF728).w
000074E0 4E75                       		rts	
000074E2                            ; ===========================================================================
000074E2                            ; ---------------------------------------------------------------------------
000074E2                            ; Labyrinth Zone dynamic screen	resizing
000074E2                            ; ---------------------------------------------------------------------------
000074E2                            
000074E2                            Resize_LZ:				; XREF: Resize_Index
000074E2 7000                       		moveq	#0,d0
000074E4 1038 FE11                  		move.b	($FFFFFE11).w,d0
000074E8 D040                       		add.w	d0,d0
000074EA 303B 0000                  		move.w	Resize_LZx(pc,d0.w),d0
000074EE 4EFB 0000                  		jmp	Resize_LZx(pc,d0.w)
000074F2                            ; ===========================================================================
000074F2 0000                       Resize_LZx:	dc.w Resize_LZ12-Resize_LZx
000074F4 0000                       		dc.w Resize_LZ12-Resize_LZx
000074F6 0000                       		dc.w Resize_LZ3-Resize_LZx
000074F8 0000                       		dc.w Resize_SBZ3-Resize_LZx
000074FA                            ; ===========================================================================
000074FA                            
000074FA                            Resize_LZ12:
000074FA 4E75                       		rts	
000074FC                            ; ===========================================================================
000074FC                            
000074FC                            Resize_LZ3:
000074FC 7000                       		moveq	#0,d0
000074FE 1038 F742                  		move.b	($FFFFF742).w,d0
00007502 303B 0000                  		move.w	off_6E4A2(pc,d0.w),d0
00007506 4EFB 0000                  		jmp	off_6E4A2(pc,d0.w)
0000750A                            ; ===========================================================================
0000750A                            off_6E4A2:	
0000750A 0000                       		dc.w Resize_LZ3boss-off_6E4A2
0000750C 0000                       		dc.w Resize_LZ3end-off_6E4A2
0000750E                            ; ===========================================================================
0000750E                            Resize_LZ3boss:
0000750E 4A38 F742                  		tst.b	($FFFFF742).w
00007512 6600                       		bne.s	locret_6F62
00007514 0C78 1CA0 F700             		cmpi.w	#$1CA0,($FFFFF700).w
0000751A 6500                       		bcs.s	locret_6F62
0000751C 31FC 0640 F726             		move.w	#$640,($FFFFF726).w ; set lower	y-boundary
00007522 31FC 0000 F634             		move.w	#0,($FFFFF634).w ; disable pallet cycling
00007528                            
00007528 6100 0000                  		bsr.w	SingleObjLoad
0000752C 6600                       		bne.s	loc_6F4A
0000752E 12BC 0077                  		move.b	#$77,0(a1)	; load LZ boss object
00007532 337C 1EA0 0008             		move.w	#$1EA0,8(a1)
00007538 337C 06E0 000C             		move.w	#$6E0,$C(a1)
0000753E                            loc_6F4A:
0000753E 303C 008C                  		move.w	#$8C,d0
00007542 6100 A076                  		bsr.w	PlaySound	; play boss music
00007546 11FC 0001 F7AA             		move.b	#1,($FFFFF7AA).w ; lock	screen
0000754C 5438 F742                  		addq.b	#2,($FFFFF742).w
00007550 7020                       		moveq	#$20,d0
00007552 6000 A250                  		bra.w	LoadPLC		; load boss patterns
00007556                            ; ===========================================================================
00007556                            
00007556                            locret_6F62:
00007556 4E75                       		rts	
00007558                            ; ===========================================================================
00007558                            
00007558                            Resize_LZ3end:
00007558 31F8 F700 F728             		move.w	($FFFFF700).w,($FFFFF728).w
0000755E 4E75                       		rts	
00007560                            ; ===========================================================================
00007560                            
00007560                            Resize_SBZ3:
00007560 0C78 0D00 F700             		cmpi.w	#$D00,($FFFFF700).w
00007566 6500                       		bcs.s	locret_6F8C
00007568 0C78 0018 D00C             		cmpi.w	#$18,($FFFFD00C).w ; has Sonic reached the top of the level?
0000756E 6400                       		bcc.s	locret_6F8C	; if not, branch
00007570 4238 FE30                  		clr.b	($FFFFFE30).w
00007574 31FC 0001 FE02             		move.w	#1,($FFFFFE02).w ; restart level
0000757A 31FC 0502 FE10             		move.w	#$502,($FFFFFE10).w ; set level	number to 0502 (FZ)
00007580 11FC 0001 F7C8             		move.b	#1,($FFFFF7C8).w ; freeze Sonic
00007586                            
00007586                            locret_6F8C:
00007586 4E75                       		rts	
00007588                            ; ===========================================================================
00007588                            ; ---------------------------------------------------------------------------
00007588                            ; Marble Zone dynamic screen resizing
00007588                            ; ---------------------------------------------------------------------------
00007588                            
00007588                            Resize_MZ:				; XREF: Resize_Index
00007588 7000                       		moveq	#0,d0
0000758A 1038 FE11                  		move.b	($FFFFFE11).w,d0
0000758E D040                       		add.w	d0,d0
00007590 303B 0000                  		move.w	Resize_MZx(pc,d0.w),d0
00007594 4EFB 0000                  		jmp	Resize_MZx(pc,d0.w)
00007598                            ; ===========================================================================
00007598 0000                       Resize_MZx:	dc.w Resize_MZ1-Resize_MZx
0000759A 0000                       		dc.w Resize_MZ2-Resize_MZx
0000759C 0000                       		dc.w Resize_MZ3-Resize_MZx
0000759E                            ; ===========================================================================
0000759E                            
0000759E                            Resize_MZ1:
0000759E 7000                       		moveq	#0,d0
000075A0 1038 F742                  		move.b	($FFFFF742).w,d0
000075A4 303B 0000                  		move.w	off_6FB2(pc,d0.w),d0
000075A8 4EFB 0000                  		jmp	off_6FB2(pc,d0.w)
000075AC                            ; ===========================================================================
000075AC 0000                       off_6FB2:	dc.w loc_6FBA-off_6FB2
000075AE 0000                       		dc.w loc_6FEA-off_6FB2
000075B0 0000                       		dc.w loc_702E-off_6FB2
000075B2 0000                       		dc.w loc_7050-off_6FB2
000075B4                            ; ===========================================================================
000075B4                            
000075B4                            loc_6FBA:
000075B4 31FC 01D0 F726             		move.w	#$1D0,($FFFFF726).w
000075BA 0C78 0700 F700             		cmpi.w	#$700,($FFFFF700).w
000075C0 6500                       		bcs.s	locret_6FE8
000075C2 31FC 0220 F726             		move.w	#$220,($FFFFF726).w
000075C8 0C78 0D00 F700             		cmpi.w	#$D00,($FFFFF700).w
000075CE 6500                       		bcs.s	locret_6FE8
000075D0 31FC 0340 F726             		move.w	#$340,($FFFFF726).w
000075D6 0C78 0340 F704             		cmpi.w	#$340,($FFFFF704).w
000075DC 6500                       		bcs.s	locret_6FE8
000075DE 5438 F742                  		addq.b	#2,($FFFFF742).w
000075E2                            
000075E2                            locret_6FE8:
000075E2 4E75                       		rts	
000075E4                            ; ===========================================================================
000075E4                            
000075E4                            loc_6FEA:
000075E4 0C78 0340 F704             		cmpi.w	#$340,($FFFFF704).w
000075EA 6400                       		bcc.s	loc_6FF8
000075EC 5538 F742                  		subq.b	#2,($FFFFF742).w
000075F0 4E75                       		rts	
000075F2                            ; ===========================================================================
000075F2                            
000075F2                            loc_6FF8:
000075F2 31FC 0000 F72C             		move.w	#0,($FFFFF72C).w
000075F8 0C78 0E00 F700             		cmpi.w	#$E00,($FFFFF700).w
000075FE 6400                       		bcc.s	locret_702C
00007600 31FC 0340 F72C             		move.w	#$340,($FFFFF72C).w
00007606 31FC 0340 F726             		move.w	#$340,($FFFFF726).w
0000760C 0C78 0A90 F700             		cmpi.w	#$A90,($FFFFF700).w
00007612 6400                       		bcc.s	locret_702C
00007614 31FC 0500 F726             		move.w	#$500,($FFFFF726).w
0000761A 0C78 0370 F704             		cmpi.w	#$370,($FFFFF704).w
00007620 6500                       		bcs.s	locret_702C
00007622 5438 F742                  		addq.b	#2,($FFFFF742).w
00007626                            
00007626                            locret_702C:
00007626 4E75                       		rts	
00007628                            ; ===========================================================================
00007628                            
00007628                            loc_702E:
00007628 0C78 0370 F704             		cmpi.w	#$370,($FFFFF704).w
0000762E 6400                       		bcc.s	loc_703C
00007630 5538 F742                  		subq.b	#2,($FFFFF742).w
00007634 4E75                       		rts	
00007636                            ; ===========================================================================
00007636                            
00007636                            loc_703C:
00007636 0C78 0500 F704             		cmpi.w	#$500,($FFFFF704).w
0000763C 6500                       		bcs.s	locret_704E
0000763E 31FC 0500 F72C             		move.w	#$500,($FFFFF72C).w
00007644 5438 F742                  		addq.b	#2,($FFFFF742).w
00007648                            
00007648                            locret_704E:
00007648 4E75                       		rts	
0000764A                            ; ===========================================================================
0000764A                            
0000764A                            loc_7050:
0000764A 0C78 0E70 F700             		cmpi.w	#$E70,($FFFFF700).w
00007650 6500                       		bcs.s	locret_7072
00007652 31FC 0000 F72C             		move.w	#0,($FFFFF72C).w
00007658 31FC 0500 F726             		move.w	#$500,($FFFFF726).w
0000765E 0C78 1430 F700             		cmpi.w	#$1430,($FFFFF700).w
00007664 6500                       		bcs.s	locret_7072
00007666 31FC 0210 F726             		move.w	#$210,($FFFFF726).w
0000766C                            
0000766C                            locret_7072:
0000766C 4E75                       		rts	
0000766E                            ; ===========================================================================
0000766E                            
0000766E                            Resize_MZ2:
0000766E 31FC 0520 F726             		move.w	#$520,($FFFFF726).w
00007674 0C78 1700 F700             		cmpi.w	#$1700,($FFFFF700).w
0000767A 6500                       		bcs.s	locret_7088
0000767C 31FC 0200 F726             		move.w	#$200,($FFFFF726).w
00007682                            
00007682                            locret_7088:
00007682 4E75                       		rts	
00007684                            ; ===========================================================================
00007684                            
00007684                            Resize_MZ3:
00007684 7000                       		moveq	#0,d0
00007686 1038 F742                  		move.b	($FFFFF742).w,d0
0000768A 303B 0000                  		move.w	off_7098(pc,d0.w),d0
0000768E 4EFB 0000                  		jmp	off_7098(pc,d0.w)
00007692                            ; ===========================================================================
00007692 0000                       off_7098:	dc.w Resize_MZ3boss-off_7098
00007694 0000                       		dc.w Resize_MZ3end-off_7098
00007696                            ; ===========================================================================
00007696                            
00007696                            Resize_MZ3boss:
00007696 31FC 0720 F726             		move.w	#$720,($FFFFF726).w
0000769C 0C78 1560 F700             		cmpi.w	#$1560,($FFFFF700).w
000076A2 6500                       		bcs.s	locret_70E8
000076A4 31FC 0210 F726             		move.w	#$210,($FFFFF726).w
000076AA 0C78 17F0 F700             		cmpi.w	#$17F0,($FFFFF700).w
000076B0 6500                       		bcs.s	locret_70E8
000076B2 6100 0000                  		bsr.w	SingleObjLoad
000076B6 6600                       		bne.s	loc_70D0
000076B8 12BC 0073                  		move.b	#$73,0(a1)	; load MZ boss object
000076BC 337C 19F0 0008             		move.w	#$19F0,8(a1)
000076C2 337C 022C 000C             		move.w	#$22C,$C(a1)
000076C8                            
000076C8                            loc_70D0:
000076C8 303C 008C                  		move.w	#$8C,d0
000076CC 6100 9EEC                  		bsr.w	PlaySound	; play boss music
000076D0 11FC 0001 F7AA             		move.b	#1,($FFFFF7AA).w ; lock	screen
000076D6 5438 F742                  		addq.b	#2,($FFFFF742).w
000076DA 7011                       		moveq	#$11,d0
000076DC 6000 A0C6                  		bra.w	LoadPLC		; load boss patterns
000076E0                            ; ===========================================================================
000076E0                            
000076E0                            locret_70E8:
000076E0 4E75                       		rts	
000076E2                            ; ===========================================================================
000076E2                            
000076E2                            Resize_MZ3end:
000076E2 31F8 F700 F728             		move.w	($FFFFF700).w,($FFFFF728).w
000076E8 4E75                       		rts	
000076EA                            ; ===========================================================================
000076EA                            ; ---------------------------------------------------------------------------
000076EA                            ; Star Light Zone dynamic screen resizing
000076EA                            ; ---------------------------------------------------------------------------
000076EA                            
000076EA                            Resize_SLZ:				; XREF: Resize_Index
000076EA 7000                       		moveq	#0,d0
000076EC 1038 FE11                  		move.b	($FFFFFE11).w,d0
000076F0 D040                       		add.w	d0,d0
000076F2 303B 0000                  		move.w	Resize_SLZx(pc,d0.w),d0
000076F6 4EFB 0000                  		jmp	Resize_SLZx(pc,d0.w)
000076FA                            ; ===========================================================================
000076FA 0000                       Resize_SLZx:	dc.w Resize_SLZ1-Resize_SLZx
000076FC 0000                       		dc.w Resize_SLZ2-Resize_SLZx
000076FE 0000                       		dc.w Resize_SLZ3-Resize_SLZx
00007700                            ; ===========================================================================
00007700                            
00007700                            Resize_SLZ1:
00007700 31FC 0100 F726             		move.w	#$100,($FFFFF726).w ; set lower	y-boundary
00007706 4E75                       		rts	
00007708                            
00007708                            Resize_SLZ2:
00007708 4E75                       		rts	
0000770A                            ; ===========================================================================
0000770A                            
0000770A                            Resize_SLZ3:
0000770A 7000                       		moveq	#0,d0
0000770C 1038 F742                  		move.b	($FFFFF742).w,d0
00007710 303B 0000                  		move.w	off_7118(pc,d0.w),d0
00007714 4EFB 0000                  		jmp	off_7118(pc,d0.w)
00007718                            ; ===========================================================================
00007718 0000                       off_7118:	dc.w Resize_SLZ3main-off_7118
0000771A 0000                       		dc.w Resize_SLZ3boss-off_7118
0000771C 0000                       		dc.w Resize_SLZ3end-off_7118
0000771E                            ; ===========================================================================
0000771E                            
0000771E                            Resize_SLZ3main:
0000771E 0C78 1E70 F700             		cmpi.w	#$1E70,($FFFFF700).w
00007724 6500                       		bcs.s	locret_7130
00007726 31FC 0210 F726             		move.w	#$210,($FFFFF726).w
0000772C 5438 F742                  		addq.b	#2,($FFFFF742).w
00007730                            
00007730                            locret_7130:
00007730 4E75                       		rts	
00007732                            ; ===========================================================================
00007732                            
00007732                            Resize_SLZ3boss:
00007732 0C78 2000 F700             		cmpi.w	#$2000,($FFFFF700).w
00007738 6500                       		bcs.s	locret_715C
0000773A 6100 0000                  		bsr.w	SingleObjLoad
0000773E 6600                       		bne.s	loc_7144
00007740 12BC 007A                  		move.b	#$7A,(a1)	; load SLZ boss	object
00007744                            
00007744                            loc_7144:
00007744 303C 008C                  		move.w	#$8C,d0
00007748 6100 9E70                  		bsr.w	PlaySound	; play boss music
0000774C 11FC 0001 F7AA             		move.b	#1,($FFFFF7AA).w ; lock	screen
00007752 5438 F742                  		addq.b	#2,($FFFFF742).w
00007756 7011                       		moveq	#$11,d0
00007758 6000 A04A                  		bra.w	LoadPLC		; load boss patterns
0000775C                            ; ===========================================================================
0000775C                            
0000775C                            locret_715C:
0000775C 4E75                       		rts	
0000775E                            ; ===========================================================================
0000775E                            
0000775E                            Resize_SLZ3end:
0000775E 31F8 F700 F728             		move.w	($FFFFF700).w,($FFFFF728).w
00007764 4E75                       		rts
00007766 4E75                       		rts
00007768                            ; ===========================================================================
00007768                            ; ---------------------------------------------------------------------------
00007768                            ; Spring Yard Zone dynamic screen resizing
00007768                            ; ---------------------------------------------------------------------------
00007768                            
00007768                            Resize_SYZ:				; XREF: Resize_Index
00007768 7000                       		moveq	#0,d0
0000776A 1038 FE11                  		move.b	($FFFFFE11).w,d0
0000776E D040                       		add.w	d0,d0
00007770 303B 0000                  		move.w	Resize_SYZx(pc,d0.w),d0
00007774 4EFB 0000                  		jmp	Resize_SYZx(pc,d0.w)
00007778                            ; ===========================================================================
00007778 0000                       Resize_SYZx:	dc.w Resize_SYZ1-Resize_SYZx
0000777A 0000                       		dc.w Resize_SYZ2-Resize_SYZx
0000777C 0000                       		dc.w Resize_SYZ3-Resize_SYZx
0000777E                            ; ===========================================================================
0000777E                            
0000777E                            Resize_SYZ1:
0000777E 4E75                       		rts	
00007780                            ; ===========================================================================
00007780                            
00007780                            Resize_SYZ2:
00007780 31FC 0520 F726             		move.w	#$520,($FFFFF726).w
00007786 0C78 25A0 F700             		cmpi.w	#$25A0,($FFFFF700).w
0000778C 6500                       		bcs.s	locret_71A2
0000778E 31FC 0420 F726             		move.w	#$420,($FFFFF726).w
00007794 0C78 04D0 D00C             		cmpi.w	#$4D0,($FFFFD00C).w
0000779A 6500                       		bcs.s	locret_71A2
0000779C 31FC 0520 F726             		move.w	#$520,($FFFFF726).w
000077A2                            
000077A2                            locret_71A2:
000077A2 4E75                       		rts	
000077A4                            ; ===========================================================================
000077A4                            
000077A4                            Resize_SYZ3:
000077A4 7000                       		moveq	#0,d0
000077A6 1038 F742                  		move.b	($FFFFF742).w,d0
000077AA 303B 0000                  		move.w	off_71B2(pc,d0.w),d0
000077AE 4EFB 0000                  		jmp	off_71B2(pc,d0.w)
000077B2                            ; ===========================================================================
000077B2 0000                       off_71B2:	dc.w Resize_SYZ3main-off_71B2
000077B4 0000                       		dc.w Resize_SYZ3boss-off_71B2
000077B6 0000                       		dc.w Resize_SYZ3end-off_71B2
000077B8                            ; ===========================================================================
000077B8                            
000077B8                            Resize_SYZ3main:
000077B8 0C78 2AC0 F700             		cmpi.w	#$2AC0,($FFFFF700).w
000077BE 6500                       		bcs.s	locret_71CE
000077C0 6100 0000                  		bsr.w	SingleObjLoad
000077C4 6600                       		bne.s	locret_71CE
000077C6 12BC 0076                  		move.b	#$76,(a1)	; load blocks that boss	picks up
000077CA 5438 F742                  		addq.b	#2,($FFFFF742).w
000077CE                            
000077CE                            locret_71CE:
000077CE 4E75                       		rts	
000077D0                            ; ===========================================================================
000077D0                            
000077D0                            Resize_SYZ3boss:
000077D0 0C78 2C00 F700             		cmpi.w	#$2C00,($FFFFF700).w
000077D6 6500                       		bcs.s	locret_7200
000077D8 31FC 04CC F726             		move.w	#$4CC,($FFFFF726).w
000077DE 6100 0000                  		bsr.w	SingleObjLoad
000077E2 6600                       		bne.s	loc_71EC
000077E4 12BC 0075                  		move.b	#$75,(a1)	; load SYZ boss	object
000077E8 5438 F742                  		addq.b	#2,($FFFFF742).w
000077EC                            
000077EC                            loc_71EC:
000077EC 303C 008C                  		move.w	#$8C,d0
000077F0 6100 9DC8                  		bsr.w	PlaySound	; play boss music
000077F4 11FC 0001 F7AA             		move.b	#1,($FFFFF7AA).w ; lock	screen
000077FA 7011                       		moveq	#$11,d0
000077FC 6000 9FA6                  		bra.w	LoadPLC		; load boss patterns
00007800                            ; ===========================================================================
00007800                            
00007800                            locret_7200:
00007800 4E75                       		rts	
00007802                            ; ===========================================================================
00007802                            
00007802                            Resize_SYZ3end:
00007802 31F8 F700 F728             		move.w	($FFFFF700).w,($FFFFF728).w
00007808 4E75                       		rts	
0000780A                            ; ===========================================================================
0000780A                            ; ---------------------------------------------------------------------------
0000780A                            ; Scrap	Brain Zone dynamic screen resizing
0000780A                            ; ---------------------------------------------------------------------------
0000780A                            
0000780A                            Resize_SBZ:				; XREF: Resize_Index
0000780A 7000                       		moveq	#0,d0
0000780C 1038 FE11                  		move.b	($FFFFFE11).w,d0
00007810 D040                       		add.w	d0,d0
00007812 303B 0000                  		move.w	Resize_SBZx(pc,d0.w),d0
00007816 4EFB 0000                  		jmp	Resize_SBZx(pc,d0.w)
0000781A                            ; ===========================================================================
0000781A 0000                       Resize_SBZx:	dc.w Resize_SBZ1-Resize_SBZx
0000781C 0000                       		dc.w Resize_SBZ2-Resize_SBZx
0000781E 0000                       		dc.w Resize_FZ-Resize_SBZx
00007820                            ; ===========================================================================
00007820                            
00007820                            Resize_SBZ1:
00007820 31FC 0720 F726             		move.w	#$720,($FFFFF726).w
00007826 0C78 1880 F700             		cmpi.w	#$1880,($FFFFF700).w
0000782C 6500                       		bcs.s	locret_7242
0000782E 31FC 0620 F726             		move.w	#$620,($FFFFF726).w
00007834 0C78 2000 F700             		cmpi.w	#$2000,($FFFFF700).w
0000783A 6500                       		bcs.s	locret_7242
0000783C 31FC 02A0 F726             		move.w	#$2A0,($FFFFF726).w
00007842                            
00007842                            locret_7242:
00007842 4E75                       		rts	
00007844                            ; ===========================================================================
00007844                            
00007844                            Resize_SBZ2:
00007844 7000                       		moveq	#0,d0
00007846 1038 F742                  		move.b	($FFFFF742).w,d0
0000784A 303B 0000                  		move.w	off_7252(pc,d0.w),d0
0000784E 4EFB 0000                  		jmp	off_7252(pc,d0.w)
00007852                            ; ===========================================================================
00007852 0000                       off_7252:	dc.w Resize_SBZ2main-off_7252
00007854 0000                       		dc.w Resize_SBZ2boss-off_7252
00007856 0000                       		dc.w Resize_SBZ2boss2-off_7252
00007858 0000                       		dc.w Resize_SBZ2end-off_7252
0000785A                            ; ===========================================================================
0000785A                            
0000785A                            Resize_SBZ2main:
0000785A 31FC 0800 F726             		move.w	#$800,($FFFFF726).w
00007860 0C78 1800 F700             		cmpi.w	#$1800,($FFFFF700).w
00007866 6500                       		bcs.s	locret_727A
00007868 31FC 0510 F726             		move.w	#$510,($FFFFF726).w
0000786E 0C78 1E00 F700             		cmpi.w	#$1E00,($FFFFF700).w
00007874 6500                       		bcs.s	locret_727A
00007876 5438 F742                  		addq.b	#2,($FFFFF742).w
0000787A                            
0000787A                            locret_727A:
0000787A 4E75                       		rts	
0000787C                            ; ===========================================================================
0000787C                            
0000787C                            Resize_SBZ2boss:
0000787C 0C78 1EB0 F700             		cmpi.w	#$1EB0,($FFFFF700).w
00007882 6500                       		bcs.s	locret_7298
00007884 6100 0000                  		bsr.w	SingleObjLoad
00007888 6600                       		bne.s	locret_7298
0000788A 12BC 0083                  		move.b	#$83,(a1)	; load collapsing block	object
0000788E 5438 F742                  		addq.b	#2,($FFFFF742).w
00007892 701E                       		moveq	#$1E,d0
00007894 6000 9F0E                  		bra.w	LoadPLC		; load SBZ2 Eggman patterns
00007898                            ; ===========================================================================
00007898                            
00007898                            locret_7298:
00007898 4E75                       		rts	
0000789A                            ; ===========================================================================
0000789A                            
0000789A                            Resize_SBZ2boss2:
0000789A 0C78 1F60 F700             		cmpi.w	#$1F60,($FFFFF700).w
000078A0 6500                       		bcs.s	loc_72B6
000078A2 6100 0000                  		bsr.w	SingleObjLoad
000078A6 6600                       		bne.s	loc_72B0
000078A8 12BC 0082                  		move.b	#$82,(a1)	; load SBZ2 Eggman object
000078AC 5438 F742                  		addq.b	#2,($FFFFF742).w
000078B0                            
000078B0                            loc_72B0:
000078B0 11FC 0001 F7AA             		move.b	#1,($FFFFF7AA).w ; lock	screen
000078B6                            
000078B6                            loc_72B6:
000078B6 6000                       		bra.s	loc_72C2
000078B8                            ; ===========================================================================
000078B8                            
000078B8                            Resize_SBZ2end:
000078B8 0C78 2050 F700             		cmpi.w	#$2050,($FFFFF700).w
000078BE 6500                       		bcs.s	loc_72C2
000078C0 4E75                       		rts	
000078C2                            ; ===========================================================================
000078C2                            
000078C2                            loc_72C2:
000078C2 31F8 F700 F728             		move.w	($FFFFF700).w,($FFFFF728).w
000078C8 4E75                       		rts	
000078CA                            ; ===========================================================================
000078CA                            
000078CA                            Resize_FZ:
000078CA 7000                       		moveq	#0,d0
000078CC 1038 F742                  		move.b	($FFFFF742).w,d0
000078D0 303B 0000                  		move.w	off_72D8(pc,d0.w),d0
000078D4 4EFB 0000                  		jmp	off_72D8(pc,d0.w)
000078D8                            ; ===========================================================================
000078D8 0000 0000                  off_72D8:	dc.w Resize_FZmain-off_72D8, Resize_FZboss-off_72D8
000078DC 0000 0000                  		dc.w Resize_FZend-off_72D8, locret_7322-off_72D8
000078E0 0000                       		dc.w Resize_FZend2-off_72D8
000078E2                            ; ===========================================================================
000078E2                            
000078E2                            Resize_FZmain:
000078E2 0C78 2148 F700             		cmpi.w	#$2148,($FFFFF700).w
000078E8 6500                       		bcs.s	loc_72F4
000078EA 5438 F742                  		addq.b	#2,($FFFFF742).w
000078EE 701F                       		moveq	#$1F,d0
000078F0 6100 9EB2                  		bsr.w	LoadPLC		; load FZ boss patterns
000078F4                            
000078F4                            loc_72F4:
000078F4 60CC                       		bra.s	loc_72C2
000078F6                            ; ===========================================================================
000078F6                            
000078F6                            Resize_FZboss:
000078F6 0C78 2300 F700             		cmpi.w	#$2300,($FFFFF700).w
000078FC 6500                       		bcs.s	loc_7312
000078FE 6100 0000                  		bsr.w	SingleObjLoad
00007902 6600                       		bne.s	loc_7312
00007904 12BC 0085                  		move.b	#$85,(a1)	; load FZ boss object
00007908 5438 F742                  		addq.b	#2,($FFFFF742).w
0000790C 11FC 0001 F7AA             		move.b	#1,($FFFFF7AA).w ; lock	screen
00007912                            
00007912                            loc_7312:
00007912 60AE                       		bra.s	loc_72C2
00007914                            ; ===========================================================================
00007914                            
00007914                            Resize_FZend:
00007914 0C78 2450 F700             		cmpi.w	#$2450,($FFFFF700).w
0000791A 6500                       		bcs.s	loc_7320
0000791C 5438 F742                  		addq.b	#2,($FFFFF742).w
00007920                            
00007920                            loc_7320:
00007920 60A0                       		bra.s	loc_72C2
00007922                            ; ===========================================================================
00007922                            
00007922                            locret_7322:
00007922 4E75                       		rts	
00007924                            ; ===========================================================================
00007924                            
00007924                            Resize_FZend2:
00007924 609C                       		bra.s	loc_72C2
00007926                            ; ===========================================================================
00007926                            ; ---------------------------------------------------------------------------
00007926                            ; Ending sequence dynamic screen resizing (empty)
00007926                            ; ---------------------------------------------------------------------------
00007926                            
00007926                            Resize_Ending:				; XREF: Resize_Index
00007926 4E75                       		rts	
00007928                            ; ===========================================================================
00007928                            ; ---------------------------------------------------------------------------
00007928                            ; Object 11 - GHZ bridge
00007928                            ; ---------------------------------------------------------------------------
00007928                            
00007928                            Obj11:					; XREF: Obj_Index
00007928 7000                       		moveq	#0,d0
0000792A 1028 0024                  		move.b	$24(a0),d0
0000792E 323B 0000                  		move.w	Obj11_Index(pc,d0.w),d1
00007932 4EFB 1000                  		jmp	Obj11_Index(pc,d1.w)
00007936                            ; ===========================================================================
00007936 0000 0000                  Obj11_Index:	dc.w Obj11_Main-Obj11_Index, Obj11_Action-Obj11_Index
0000793A 0000 0000                  		dc.w Obj11_Action2-Obj11_Index,	Obj11_Delete2-Obj11_Index
0000793E 0000 0000                  		dc.w Obj11_Delete2-Obj11_Index,	Obj11_Display2-Obj11_Index
00007942                            ; ===========================================================================
00007942                            
00007942                            Obj11_Main:				; XREF: Obj11_Index
00007942 5428 0024                  		addq.b	#2,$24(a0)
00007946 217C 0000 0000 0004        		move.l	#Map_obj11,4(a0)
0000794E 317C 438E 0002             		move.w	#$438E,2(a0)
00007954 117C 0004 0001             		move.b	#4,1(a0)
0000795A 117C 0003 0018             		move.b	#3,$18(a0)
00007960 117C 0080 0019             		move.b	#$80,$19(a0)
00007966 3428 000C                  		move.w	$C(a0),d2
0000796A 3628 0008                  		move.w	8(a0),d3
0000796E 1810                       		move.b	0(a0),d4	; copy object number ($11) to d4
00007970 45E8 0028                  		lea	$28(a0),a2	; copy bridge subtype to a2
00007974 7200                       		moveq	#0,d1
00007976 1212                       		move.b	(a2),d1		; copy a2 to d1
00007978 14FC 0000                  		move.b	#0,(a2)+
0000797C 3001                       		move.w	d1,d0
0000797E E248                       		lsr.w	#1,d0
00007980 E948                       		lsl.w	#4,d0
00007982 9640                       		sub.w	d0,d3
00007984 5501                       		subq.b	#2,d1
00007986 6500                       		bcs.s	Obj11_Action
00007988                            
00007988                            Obj11_MakeBdg:
00007988 6100 0000                  		bsr.w	SingleObjLoad
0000798C 6600                       		bne.s	Obj11_Action
0000798E 5228 0028                  		addq.b	#1,$28(a0)
00007992 B668 0008                  		cmp.w	8(a0),d3
00007996 6600                       		bne.s	loc_73B8
00007998 0643 0010                  		addi.w	#$10,d3
0000799C 3142 000C                  		move.w	d2,$C(a0)
000079A0 3142 003C                  		move.w	d2,$3C(a0)
000079A4 3A08                       		move.w	a0,d5
000079A6 0445 D000                  		subi.w	#-$3000,d5
000079AA EC4D                       		lsr.w	#6,d5
000079AC 0245 007F                  		andi.w	#$7F,d5
000079B0 14C5                       		move.b	d5,(a2)+
000079B2 5228 0028                  		addq.b	#1,$28(a0)
000079B6                            
000079B6                            loc_73B8:				; XREF: ROM:00007398j
000079B6 3A09                       		move.w	a1,d5
000079B8 0445 D000                  		subi.w	#-$3000,d5
000079BC EC4D                       		lsr.w	#6,d5
000079BE 0245 007F                  		andi.w	#$7F,d5
000079C2 14C5                       		move.b	d5,(a2)+
000079C4 137C 000A 0024             		move.b	#$A,$24(a1)
000079CA 1284                       		move.b	d4,0(a1)	; load bridge object (d4 = $11)
000079CC 3342 000C                  		move.w	d2,$C(a1)
000079D0 3342 003C                  		move.w	d2,$3C(a1)
000079D4 3343 0008                  		move.w	d3,8(a1)
000079D8 237C 0000 0000 0004        		move.l	#Map_obj11,4(a1)
000079E0 337C 438E 0002             		move.w	#$438E,2(a1)
000079E6 137C 0004 0001             		move.b	#4,1(a1)
000079EC 137C 0003 0018             		move.b	#3,$18(a1)
000079F2 137C 0008 0019             		move.b	#8,$19(a1)
000079F8 0643 0010                  		addi.w	#$10,d3
000079FC 51C9 FF8A                  		dbf	d1,Obj11_MakeBdg ; repeat d1 times (length of bridge)
00007A00                            
00007A00                            Obj11_Action:				; XREF: Obj11_Index
00007A00 6100                       		bsr.s	Obj11_Solid
00007A02 4A28 003E                  		tst.b	$3E(a0)
00007A06 6700                       		beq.s	Obj11_Display
00007A08 5928 003E                  		subq.b	#4,$3E(a0)
00007A0C 6100 0000                  		bsr.w	Obj11_Bend
00007A10                            
00007A10                            Obj11_Display:
00007A10 6100 0000                  		bsr.w	DisplaySprite
00007A14 6000 0000                  		bra.w	Obj11_ChkDel
00007A18                            
00007A18                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00007A18                            
00007A18                            
00007A18                            Obj11_Solid:				; XREF: Obj11_Action
00007A18 7200                       		moveq	#0,d1
00007A1A 1228 0028                  		move.b	$28(a0),d1
00007A1E E749                       		lsl.w	#3,d1
00007A20 3401                       		move.w	d1,d2
00007A22 5041                       		addq.w	#8,d1
00007A24 D442                       		add.w	d2,d2
00007A26 43F8 D000                  		lea	($FFFFD000).w,a1
00007A2A 4A69 0012                  		tst.w	$12(a1)
00007A2E 6B00 0000                  		bmi.w	locret_751E
00007A32 3029 0008                  		move.w	8(a1),d0
00007A36 9068 0008                  		sub.w	8(a0),d0
00007A3A D041                       		add.w	d1,d0
00007A3C 6B00 0000                  		bmi.w	locret_751E
00007A40 B042                       		cmp.w	d2,d0
00007A42 6400 0000                  		bcc.w	locret_751E
00007A46 6000                       		bra.s	Platform2
00007A48                            ; End of function Obj11_Solid
00007A48                            
00007A48                            ; ---------------------------------------------------------------------------
00007A48                            ; Platform subroutine
00007A48                            ; ---------------------------------------------------------------------------
00007A48                            
00007A48                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00007A48                            
00007A48                            
00007A48                            PlatformObject:
00007A48 43F8 D000                  		lea	($FFFFD000).w,a1
00007A4C 4A69 0012                  		tst.w	$12(a1)
00007A50 6B00 0000                  		bmi.w	locret_751E
00007A54 3029 0008                  		move.w	8(a1),d0
00007A58 9068 0008                  		sub.w	8(a0),d0
00007A5C D041                       		add.w	d1,d0
00007A5E 6B00 0000                  		bmi.w	locret_751E
00007A62 D241                       		add.w	d1,d1
00007A64 B041                       		cmp.w	d1,d0
00007A66 6400 0000                  		bcc.w	locret_751E
00007A6A                            
00007A6A                            Platform2:
00007A6A 3028 000C                  		move.w	$C(a0),d0
00007A6E 5140                       		subq.w	#8,d0
00007A70                            
00007A70                            Platform3:
00007A70 3429 000C                  		move.w	$C(a1),d2
00007A74 1229 0016                  		move.b	$16(a1),d1
00007A78 4881                       		ext.w	d1
00007A7A D242                       		add.w	d2,d1
00007A7C 5841                       		addq.w	#4,d1
00007A7E 9041                       		sub.w	d1,d0
00007A80 6200 0000                  		bhi.w	locret_751E
00007A84 0C40 FFF0                  		cmpi.w	#-$10,d0
00007A88 6500 0000                  		bcs.w	locret_751E
00007A8C 4A38 F7C8                  		tst.b	($FFFFF7C8).w
00007A90 6B00 0000                  		bmi.w	locret_751E
00007A94 0C29 0006 0024             		cmpi.b	#6,$24(a1)
00007A9A 6400 0000                  		bcc.w	locret_751E
00007A9E D440                       		add.w	d0,d2
00007AA0 5642                       		addq.w	#3,d2
00007AA2 3342 000C                  		move.w	d2,$C(a1)
00007AA6 5428 0024                  		addq.b	#2,$24(a0)
00007AAA                            
00007AAA                            loc_74AE:
00007AAA 0829 0003 0022             		btst	#3,$22(a1)
00007AB0 6700                       		beq.s	loc_74DC
00007AB2 7000                       		moveq	#0,d0
00007AB4 1029 003D                  		move.b	$3D(a1),d0
00007AB8 ED48                       		lsl.w	#6,d0
00007ABA 0680 00FF D000             		addi.l	#$FFD000,d0
00007AC0 2440                       		movea.l	d0,a2
00007AC2 08AA 0003 0022             		bclr	#3,$22(a2)
00007AC8 422A 0025                  		clr.b	$25(a2)
00007ACC 0C2A 0004 0024             		cmpi.b	#4,$24(a2)
00007AD2 6600                       		bne.s	loc_74DC
00007AD4 552A 0024                  		subq.b	#2,$24(a2)
00007AD8                            
00007AD8                            loc_74DC:
00007AD8 3008                       		move.w	a0,d0
00007ADA 0440 D000                  		subi.w	#-$3000,d0
00007ADE EC48                       		lsr.w	#6,d0
00007AE0 0240 007F                  		andi.w	#$7F,d0
00007AE4 1340 003D                  		move.b	d0,$3D(a1)
00007AE8 137C 0000 0026             		move.b	#0,$26(a1)
00007AEE 337C 0000 0012             		move.w	#0,$12(a1)
00007AF4 3369 0010 0014             		move.w	$10(a1),$14(a1)
00007AFA 0829 0001 0022             		btst	#1,$22(a1)
00007B00 6700                       		beq.s	loc_7512
00007B02 2F08                       		move.l	a0,-(sp)
00007B04 2049                       		movea.l	a1,a0
00007B06 4EB9 0000 0000             		jsr	Sonic_ResetOnFloor
00007B0C 205F                       		movea.l	(sp)+,a0
00007B0E                            
00007B0E                            loc_7512:
00007B0E 08E9 0003 0022             		bset	#3,$22(a1)
00007B14 08E8 0003 0022             		bset	#3,$22(a0)
00007B1A                            
00007B1A                            locret_751E:
00007B1A 4E75                       		rts	
00007B1C                            ; End of function PlatformObject
00007B1C                            
00007B1C                            ; ---------------------------------------------------------------------------
00007B1C                            ; Sloped platform subroutine (GHZ collapsing ledges and	SLZ seesaws)
00007B1C                            ; ---------------------------------------------------------------------------
00007B1C                            
00007B1C                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00007B1C                            
00007B1C                            
00007B1C                            SlopeObject:				; XREF: Obj1A_Slope; Obj5E_Slope
00007B1C 43F8 D000                  		lea	($FFFFD000).w,a1
00007B20 4A69 0012                  		tst.w	$12(a1)
00007B24 6B00 FFF4                  		bmi.w	locret_751E
00007B28 3029 0008                  		move.w	8(a1),d0
00007B2C 9068 0008                  		sub.w	8(a0),d0
00007B30 D041                       		add.w	d1,d0
00007B32 6BE6                       		bmi.s	locret_751E
00007B34 D241                       		add.w	d1,d1
00007B36 B041                       		cmp.w	d1,d0
00007B38 64E0                       		bcc.s	locret_751E
00007B3A 0828 0000 0001             		btst	#0,1(a0)
00007B40 6700                       		beq.s	loc_754A
00007B42 4640                       		not.w	d0
00007B44 D041                       		add.w	d1,d0
00007B46                            
00007B46                            loc_754A:
00007B46 E248                       		lsr.w	#1,d0
00007B48 7600                       		moveq	#0,d3
00007B4A 1632 0000                  		move.b	(a2,d0.w),d3
00007B4E 3028 000C                  		move.w	$C(a0),d0
00007B52 9043                       		sub.w	d3,d0
00007B54 6000 FF1A                  		bra.w	Platform3
00007B58                            ; End of function SlopeObject
00007B58                            
00007B58                            
00007B58                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00007B58                            
00007B58                            
00007B58                            Obj15_Solid:				; XREF: Obj15_SetSolid
00007B58 43F8 D000                  		lea	($FFFFD000).w,a1
00007B5C 4A69 0012                  		tst.w	$12(a1)
00007B60 6B00 FFB8                  		bmi.w	locret_751E
00007B64 3029 0008                  		move.w	8(a1),d0
00007B68 9068 0008                  		sub.w	8(a0),d0
00007B6C D041                       		add.w	d1,d0
00007B6E 6B00 FFAA                  		bmi.w	locret_751E
00007B72 D241                       		add.w	d1,d1
00007B74 B041                       		cmp.w	d1,d0
00007B76 6400 FFA2                  		bcc.w	locret_751E
00007B7A 3028 000C                  		move.w	$C(a0),d0
00007B7E 9043                       		sub.w	d3,d0
00007B80 6000 FEEE                  		bra.w	Platform3
00007B84                            ; End of function Obj15_Solid
00007B84                            
00007B84                            ; ===========================================================================
00007B84                            
00007B84                            Obj11_Action2:				; XREF: Obj11_Index
00007B84 6100                       		bsr.s	Obj11_WalkOff
00007B86 6100 0000                  		bsr.w	DisplaySprite
00007B8A 6000 0000                  		bra.w	Obj11_ChkDel
00007B8E                            
00007B8E                            ; ---------------------------------------------------------------------------
00007B8E                            ; Subroutine allowing Sonic to walk off a bridge
00007B8E                            ; ---------------------------------------------------------------------------
00007B8E                            
00007B8E                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00007B8E                            
00007B8E                            
00007B8E                            Obj11_WalkOff:				; XREF: Obj11_Action2
00007B8E 7200                       		moveq	#0,d1
00007B90 1228 0028                  		move.b	$28(a0),d1
00007B94 E749                       		lsl.w	#3,d1
00007B96 3401                       		move.w	d1,d2
00007B98 5041                       		addq.w	#8,d1
00007B9A 6100                       		bsr.s	ExitPlatform2
00007B9C 6400                       		bcc.s	locret_75BE
00007B9E E848                       		lsr.w	#4,d0
00007BA0 1140 003F                  		move.b	d0,$3F(a0)
00007BA4 1028 003E                  		move.b	$3E(a0),d0
00007BA8 0C00 0040                  		cmpi.b	#$40,d0
00007BAC 6700                       		beq.s	loc_75B6
00007BAE 5828 003E                  		addq.b	#4,$3E(a0)
00007BB2                            
00007BB2                            loc_75B6:
00007BB2 6100 0000                  		bsr.w	Obj11_Bend
00007BB6 6100 0000                  		bsr.w	Obj11_MoveSonic
00007BBA                            
00007BBA                            locret_75BE:
00007BBA 4E75                       		rts	
00007BBC                            ; End of function Obj11_WalkOff
00007BBC                            
00007BBC                            ; ---------------------------------------------------------------------------
00007BBC                            ; Subroutine allowing Sonic to walk or jump off	a platform
00007BBC                            ; ---------------------------------------------------------------------------
00007BBC                            
00007BBC                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00007BBC                            
00007BBC                            
00007BBC                            ExitPlatform:
00007BBC 3401                       		move.w	d1,d2
00007BBE                            
00007BBE                            ExitPlatform2:
00007BBE D442                       		add.w	d2,d2
00007BC0 43F8 D000                  		lea	($FFFFD000).w,a1
00007BC4 0829 0001 0022             		btst	#1,$22(a1)
00007BCA 6600                       		bne.s	loc_75E0
00007BCC 3029 0008                  		move.w	8(a1),d0
00007BD0 9068 0008                  		sub.w	8(a0),d0
00007BD4 D041                       		add.w	d1,d0
00007BD6 6B00                       		bmi.s	loc_75E0
00007BD8 B042                       		cmp.w	d2,d0
00007BDA 6500                       		bcs.s	locret_75F2
00007BDC                            
00007BDC                            loc_75E0:
00007BDC 08A9 0003 0022             		bclr	#3,$22(a1)
00007BE2 117C 0002 0024             		move.b	#2,$24(a0)
00007BE8 08A8 0003 0022             		bclr	#3,$22(a0)
00007BEE                            
00007BEE                            locret_75F2:
00007BEE 4E75                       		rts	
00007BF0                            ; End of function ExitPlatform
00007BF0                            
00007BF0                            
00007BF0                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00007BF0                            
00007BF0                            
00007BF0                            Obj11_MoveSonic:			; XREF: Obj11_WalkOff
00007BF0 7000                       		moveq	#0,d0
00007BF2 1028 003F                  		move.b	$3F(a0),d0
00007BF6 1030 0029                  		move.b	$29(a0,d0.w),d0
00007BFA ED48                       		lsl.w	#6,d0
00007BFC 0680 00FF D000             		addi.l	#$FFD000,d0
00007C02 2440                       		movea.l	d0,a2
00007C04 43F8 D000                  		lea	($FFFFD000).w,a1
00007C08 302A 000C                  		move.w	$C(a2),d0
00007C0C 5140                       		subq.w	#8,d0
00007C0E 7200                       		moveq	#0,d1
00007C10 1229 0016                  		move.b	$16(a1),d1
00007C14 9041                       		sub.w	d1,d0
00007C16 3340 000C                  		move.w	d0,$C(a1)	; change Sonic's position on y-axis
00007C1A 4E75                       		rts	
00007C1C                            ; End of function Obj11_MoveSonic
00007C1C                            
00007C1C                            
00007C1C                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00007C1C                            
00007C1C                            
00007C1C                            Obj11_Bend:				; XREF: Obj11_Action; Obj11_WalkOff
00007C1C 1028 003E                  		move.b	$3E(a0),d0
00007C20 6100 B08A                  		bsr.w	CalcSine
00007C24 3800                       		move.w	d0,d4
00007C26 49F9 0000 0000             		lea	(Obj11_BendData2).l,a4
00007C2C 7000                       		moveq	#0,d0
00007C2E 1028 0028                  		move.b	$28(a0),d0
00007C32 E948                       		lsl.w	#4,d0
00007C34 7600                       		moveq	#0,d3
00007C36 1628 003F                  		move.b	$3F(a0),d3
00007C3A 3403                       		move.w	d3,d2
00007C3C D640                       		add.w	d0,d3
00007C3E 7A00                       		moveq	#0,d5
00007C40 4BF9 0000 0000             		lea	(Obj11_BendData).l,a5
00007C46 1A35 3000                  		move.b	(a5,d3.w),d5
00007C4A 0243 000F                  		andi.w	#$F,d3
00007C4E E94B                       		lsl.w	#4,d3
00007C50 47F4 3000                  		lea	(a4,d3.w),a3
00007C54 45E8 0029                  		lea	$29(a0),a2
00007C58                            
00007C58                            loc_765C:
00007C58 7000                       		moveq	#0,d0
00007C5A 101A                       		move.b	(a2)+,d0
00007C5C ED48                       		lsl.w	#6,d0
00007C5E 0680 00FF D000             		addi.l	#$FFD000,d0
00007C64 2240                       		movea.l	d0,a1
00007C66 7000                       		moveq	#0,d0
00007C68 101B                       		move.b	(a3)+,d0
00007C6A 5240                       		addq.w	#1,d0
00007C6C C0C5                       		mulu.w	d5,d0
00007C6E C0C4                       		mulu.w	d4,d0
00007C70 4840                       		swap	d0
00007C72 D069 003C                  		add.w	$3C(a1),d0
00007C76 3340 000C                  		move.w	d0,$C(a1)
00007C7A 51CA FFDC                  		dbf	d2,loc_765C
00007C7E 7000                       		moveq	#0,d0
00007C80 1028 0028                  		move.b	$28(a0),d0
00007C84 7600                       		moveq	#0,d3
00007C86 1628 003F                  		move.b	$3F(a0),d3
00007C8A 5203                       		addq.b	#1,d3
00007C8C 9600                       		sub.b	d0,d3
00007C8E 4403                       		neg.b	d3
00007C90 6B00                       		bmi.s	locret_76CA
00007C92 3403                       		move.w	d3,d2
00007C94 E94B                       		lsl.w	#4,d3
00007C96 47F4 3000                  		lea	(a4,d3.w),a3
00007C9A D6C2                       		adda.w	d2,a3
00007C9C 5342                       		subq.w	#1,d2
00007C9E 6500                       		bcs.s	locret_76CA
00007CA0                            
00007CA0                            loc_76A4:
00007CA0 7000                       		moveq	#0,d0
00007CA2 101A                       		move.b	(a2)+,d0
00007CA4 ED48                       		lsl.w	#6,d0
00007CA6 0680 00FF D000             		addi.l	#$FFD000,d0
00007CAC 2240                       		movea.l	d0,a1
00007CAE 7000                       		moveq	#0,d0
00007CB0 1023                       		move.b	-(a3),d0
00007CB2 5240                       		addq.w	#1,d0
00007CB4 C0C5                       		mulu.w	d5,d0
00007CB6 C0C4                       		mulu.w	d4,d0
00007CB8 4840                       		swap	d0
00007CBA D069 003C                  		add.w	$3C(a1),d0
00007CBE 3340 000C                  		move.w	d0,$C(a1)
00007CC2 51CA FFDC                  		dbf	d2,loc_76A4
00007CC6                            
00007CC6                            locret_76CA:
00007CC6 4E75                       		rts	
00007CC8                            ; End of function Obj11_Bend
00007CC8                            
00007CC8                            ; ===========================================================================
00007CC8                            ; ---------------------------------------------------------------------------
00007CC8                            ; GHZ bridge-bending data
00007CC8                            ; (Defines how the bridge bends	when Sonic walks across	it)
00007CC8                            ; ---------------------------------------------------------------------------
00007CC8                            Obj11_BendData:	incbin	misc\ghzbend1.bin
00007DD8                            		even
00007DD8                            Obj11_BendData2:incbin	misc\ghzbend2.bin
00007ED8                            		even
00007ED8                            
00007ED8                            ; ===========================================================================
00007ED8                            
00007ED8                            Obj11_ChkDel:				; XREF: Obj11_Display; Obj11_Action2
00007ED8 3028 0008                  		move.w	8(a0),d0
00007EDC 0240 FF80                  		andi.w	#$FF80,d0
00007EE0 3238 F700                  		move.w	($FFFFF700).w,d1
00007EE4 0441 0080                  		subi.w	#$80,d1
00007EE8 0241 FF80                  		andi.w	#$FF80,d1
00007EEC 9041                       		sub.w	d1,d0
00007EEE 0C40 0280                  		cmpi.w	#$280,d0
00007EF2 6200 0000                  		bhi.w	Obj11_DelAll
00007EF6 4E75                       		rts	
00007EF8                            ; ===========================================================================
00007EF8                            
00007EF8                            Obj11_DelAll:				; XREF: Obj11_ChkDel
00007EF8 7400                       		moveq	#0,d2
00007EFA 45E8 0028                  		lea	$28(a0),a2	; load bridge length
00007EFE 141A                       		move.b	(a2)+,d2	; move bridge length to	d2
00007F00 5302                       		subq.b	#1,d2		; subtract 1
00007F02 6500                       		bcs.s	Obj11_Delete
00007F04                            
00007F04                            Obj11_DelLoop:
00007F04 7000                       		moveq	#0,d0
00007F06 101A                       		move.b	(a2)+,d0
00007F08 ED48                       		lsl.w	#6,d0
00007F0A 0680 00FF D000             		addi.l	#$FFD000,d0
00007F10 2240                       		movea.l	d0,a1
00007F12 B048                       		cmp.w	a0,d0
00007F14 6700                       		beq.s	loc_791E
00007F16 6100 0000                  		bsr.w	DeleteObject2
00007F1A                            
00007F1A                            loc_791E:
00007F1A 51CA FFE8                  		dbf	d2,Obj11_DelLoop ; repeat d2 times (bridge length)
00007F1E                            
00007F1E                            Obj11_Delete:
00007F1E 6100 0000                  		bsr.w	DeleteObject
00007F22 4E75                       		rts	
00007F24                            ; ===========================================================================
00007F24                            
00007F24                            Obj11_Delete2:				; XREF: Obj11_Index
00007F24 6100 0000                  		bsr.w	DeleteObject
00007F28 4E75                       		rts	
00007F2A                            ; ===========================================================================
00007F2A                            
00007F2A                            Obj11_Display2:				; XREF: Obj11_Index
00007F2A 6100 0000                  		bsr.w	DisplaySprite
00007F2E 4E75                       		rts	
00007F30                            ; ===========================================================================
00007F30                            ; ---------------------------------------------------------------------------
00007F30                            ; Sprite mappings - GHZ	bridge
00007F30                            ; ---------------------------------------------------------------------------
00007F30                            Map_obj11:
00007F30                            	include "_maps\obj11.asm"
00007F30                            ; ---------------------------------------------------------------------------
00007F30                            ; Sprite mappings - GHZ	bridge
00007F30                            ; ---------------------------------------------------------------------------
00007F30 0000 0000                  		dc.w byte_793A-Map_obj11, byte_7940-Map_obj11
00007F34 0000                       		dc.w byte_794B-Map_obj11
00007F36 01                         byte_793A:	dc.b 1
00007F37 F805 0000 F8               		dc.b $F8, 5, 0,	0, $F8
00007F3C 02                         byte_7940:	dc.b 2
00007F3D F804 0004 F0               		dc.b $F8, 4, 0,	4, $F0
00007F42 000C 0006 F0               		dc.b 0,	$C, 0, 6, $F0
00007F47 01                         byte_794B:	dc.b 1
00007F48 FC04 0008 F8               		dc.b $FC, 4, 0,	8, $F8
00007F4E 00                         		even
00007F4E 00                         		even
00007F4E                            
00007F4E                            ; ===========================================================================
00007F4E                            ; ---------------------------------------------------------------------------
00007F4E                            ; Object 15 - swinging platforms (GHZ, MZ, SLZ)
00007F4E                            ;	    - spiked ball on a chain (SBZ)
00007F4E                            ; ---------------------------------------------------------------------------
00007F4E                            
00007F4E                            Obj15:					; XREF: Obj_Index
00007F4E 7000                       		moveq	#0,d0
00007F50 1028 0024                  		move.b	$24(a0),d0
00007F54 323B 0000                  		move.w	Obj15_Index(pc,d0.w),d1
00007F58 4EFB 1000                  		jmp	Obj15_Index(pc,d1.w)
00007F5C                            ; ===========================================================================
00007F5C 0000 0000                  Obj15_Index:	dc.w Obj15_Main-Obj15_Index, Obj15_SetSolid-Obj15_Index
00007F60 0000 0000                  		dc.w Obj15_Action2-Obj15_Index,	Obj15_Delete-Obj15_Index
00007F64 0000 0000                  		dc.w Obj15_Delete-Obj15_Index, Obj15_Display-Obj15_Index
00007F68 0000                       		dc.w Obj15_Action-Obj15_Index
00007F6A                            ; ===========================================================================
00007F6A                            
00007F6A                            Obj15_Main:				; XREF: Obj15_Index
00007F6A 5428 0024                  		addq.b	#2,$24(a0)
00007F6E 217C 0000 0000 0004        		move.l	#Map_obj15,4(a0) ; GHZ and MZ specific code
00007F76 317C 4380 0002             		move.w	#$4380,2(a0)
00007F7C 117C 0004 0001             		move.b	#4,1(a0)
00007F82 117C 0003 0018             		move.b	#3,$18(a0)
00007F88 117C 0018 0019             		move.b	#$18,$19(a0)
00007F8E 117C 0008 0016             		move.b	#8,$16(a0)
00007F94 3168 000C 0038             		move.w	$C(a0),$38(a0)
00007F9A 3168 0008 003A             		move.w	8(a0),$3A(a0)
00007FA0 0C38 0003 FE10             		cmpi.b	#3,($FFFFFE10).w ; check if level is SLZ
00007FA6 6600                       		bne.s	Obj15_NotSLZ
00007FA8 217C 0000 0000 0004        		move.l	#Map_obj15a,4(a0) ; SLZ	specific code
00007FB0 317C 43DC 0002             		move.w	#$43DC,2(a0)
00007FB6 117C 0020 0019             		move.b	#$20,$19(a0)
00007FBC 117C 0010 0016             		move.b	#$10,$16(a0)
00007FC2 117C 0099 0020             		move.b	#$99,$20(a0)
00007FC8                            
00007FC8                            Obj15_NotSLZ:
00007FC8 0C38 0005 FE10             		cmpi.b	#5,($FFFFFE10).w ; check if level is SBZ
00007FCE 6600                       		bne.s	Obj15_SetLength
00007FD0 217C 0000 0000 0004        		move.l	#Map_obj15b,4(a0) ; SBZ	specific code
00007FD8 317C 0391 0002             		move.w	#$391,2(a0)
00007FDE 117C 0018 0019             		move.b	#$18,$19(a0)
00007FE4 117C 0018 0016             		move.b	#$18,$16(a0)
00007FEA 117C 0086 0020             		move.b	#$86,$20(a0)
00007FF0 117C 000C 0024             		move.b	#$C,$24(a0)
00007FF6                            
00007FF6                            Obj15_SetLength:
00007FF6 1810                       		move.b	0(a0),d4
00007FF8 7200                       		moveq	#0,d1
00007FFA 45E8 0028                  		lea	$28(a0),a2	; move chain length to a2
00007FFE 1212                       		move.b	(a2),d1		; move a2 to d1
00008000 3F01                       		move.w	d1,-(sp)
00008002 0241 000F                  		andi.w	#$F,d1
00008006 14FC 0000                  		move.b	#0,(a2)+
0000800A 3601                       		move.w	d1,d3
0000800C E94B                       		lsl.w	#4,d3
0000800E 5003                       		addq.b	#8,d3
00008010 1143 003C                  		move.b	d3,$3C(a0)
00008014 5103                       		subq.b	#8,d3
00008016 4A28 001A                  		tst.b	$1A(a0)
0000801A 6700                       		beq.s	Obj15_MakeChain
0000801C 5003                       		addq.b	#8,d3
0000801E 5341                       		subq.w	#1,d1
00008020                            
00008020                            Obj15_MakeChain:
00008020 6100 0000                  		bsr.w	SingleObjLoad
00008024 6600                       		bne.s	loc_7A92
00008026 5228 0028                  		addq.b	#1,$28(a0)
0000802A 3A09                       		move.w	a1,d5
0000802C 0445 D000                  		subi.w	#-$3000,d5
00008030 EC4D                       		lsr.w	#6,d5
00008032 0245 007F                  		andi.w	#$7F,d5
00008036 14C5                       		move.b	d5,(a2)+
00008038 137C 000A 0024             		move.b	#$A,$24(a1)
0000803E 1284                       		move.b	d4,0(a1)	; load swinging	object
00008040 2368 0004 0004             		move.l	4(a0),4(a1)
00008046 3368 0002 0002             		move.w	2(a0),2(a1)
0000804C 08A9 0006 0002             		bclr	#6,2(a1)
00008052 137C 0004 0001             		move.b	#4,1(a1)
00008058 137C 0004 0018             		move.b	#4,$18(a1)
0000805E 137C 0008 0019             		move.b	#8,$19(a1)
00008064 137C 0001 001A             		move.b	#1,$1A(a1)
0000806A 1343 003C                  		move.b	d3,$3C(a1)
0000806E 0403 0010                  		subi.b	#$10,d3
00008072 6400                       		bcc.s	loc_7A8E
00008074 137C 0002 001A             		move.b	#2,$1A(a1)
0000807A 137C 0003 0018             		move.b	#3,$18(a1)
00008080 08E9 0006 0002             		bset	#6,2(a1)
00008086                            
00008086                            loc_7A8E:
00008086 51C9 FF98                  		dbf	d1,Obj15_MakeChain ; repeat d1 times (chain length)
0000808A                            
0000808A                            loc_7A92:
0000808A 3A08                       		move.w	a0,d5
0000808C 0445 D000                  		subi.w	#-$3000,d5
00008090 EC4D                       		lsr.w	#6,d5
00008092 0245 007F                  		andi.w	#$7F,d5
00008096 14C5                       		move.b	d5,(a2)+
00008098 317C 4080 0026             		move.w	#$4080,$26(a0)
0000809E 317C FE00 003E             		move.w	#-$200,$3E(a0)
000080A4 321F                       		move.w	(sp)+,d1
000080A6 0801 0004                  		btst	#4,d1		; is object type $8X ?
000080AA 6700                       		beq.s	loc_7AD4	; if not, branch
000080AC 217C 0000 0000 0004        		move.l	#Map_obj48,4(a0) ; use GHZ ball	mappings
000080B4 317C 43AA 0002             		move.w	#$43AA,2(a0)
000080BA 117C 0001 001A             		move.b	#1,$1A(a0)
000080C0 117C 0002 0018             		move.b	#2,$18(a0)
000080C6 117C 0081 0020             		move.b	#$81,$20(a0)	; make object hurt when	touched
000080CC                            
000080CC                            loc_7AD4:
000080CC 0C38 0005 FE10             		cmpi.b	#5,($FFFFFE10).w ; is zone SBZ?
000080D2 6700                       		beq.s	Obj15_Action	; if yes, branch
000080D4                            
000080D4                            Obj15_SetSolid:				; XREF: Obj15_Index
000080D4 7200                       		moveq	#0,d1
000080D6 1228 0019                  		move.b	$19(a0),d1
000080DA 7600                       		moveq	#0,d3
000080DC 1628 0016                  		move.b	$16(a0),d3
000080E0 6100 FA76                  		bsr.w	Obj15_Solid
000080E4                            
000080E4                            Obj15_Action:				; XREF: Obj15_Index
000080E4 6100 0000                  		bsr.w	Obj15_Move
000080E8 6100 0000                  		bsr.w	DisplaySprite
000080EC 6000 0000                  		bra.w	Obj15_ChkDel
000080F0                            ; ===========================================================================
000080F0                            
000080F0                            Obj15_Action2:				; XREF: Obj15_Index
000080F0 7200                       		moveq	#0,d1
000080F2 1228 0019                  		move.b	$19(a0),d1
000080F6 6100 FAC4                  		bsr.w	ExitPlatform
000080FA 3F28 0008                  		move.w	8(a0),-(sp)
000080FE 6100 0000                  		bsr.w	Obj15_Move
00008102 341F                       		move.w	(sp)+,d2
00008104 7600                       		moveq	#0,d3
00008106 1628 0016                  		move.b	$16(a0),d3
0000810A 5203                       		addq.b	#1,d3
0000810C 6100 0000                  		bsr.w	MvSonicOnPtfm
00008110 6100 0000                  		bsr.w	DisplaySprite
00008114 6000 0000                  		bra.w	Obj15_ChkDel
00008118                            
00008118 4E75                       		rts
0000811A                            
0000811A                            ; ---------------------------------------------------------------------------
0000811A                            ; Subroutine to	change Sonic's position with a platform
0000811A                            ; ---------------------------------------------------------------------------
0000811A                            
0000811A                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000811A                            
0000811A                            
0000811A                            MvSonicOnPtfm:
0000811A 43F8 D000                  		lea	($FFFFD000).w,a1
0000811E 3028 000C                  		move.w	$C(a0),d0
00008122 9043                       		sub.w	d3,d0
00008124 6000                       		bra.s	MvSonic2
00008126                            ; End of function MvSonicOnPtfm
00008126                            
00008126                            ; ---------------------------------------------------------------------------
00008126                            ; Subroutine to	change Sonic's position with a platform
00008126                            ; ---------------------------------------------------------------------------
00008126                            
00008126                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00008126                            
00008126                            
00008126                            MvSonicOnPtfm2:
00008126 43F8 D000                  		lea	($FFFFD000).w,a1
0000812A 3028 000C                  		move.w	$C(a0),d0
0000812E 0440 0009                  		subi.w	#9,d0
00008132                            
00008132                            MvSonic2:
00008132 4A38 F7C8                  		tst.b	($FFFFF7C8).w
00008136 6B00                       		bmi.s	locret_7B62
00008138 0C38 0006 D024             		cmpi.b	#6,($FFFFD024).w
0000813E 6400                       		bcc.s	locret_7B62
00008140 4A78 FE08                  		tst.w	($FFFFFE08).w
00008144 6600                       		bne.s	locret_7B62
00008146 7200                       		moveq	#0,d1
00008148 1229 0016                  		move.b	$16(a1),d1
0000814C 9041                       		sub.w	d1,d0
0000814E 3340 000C                  		move.w	d0,$C(a1)
00008152 9468 0008                  		sub.w	8(a0),d2
00008156 9569 0008                  		sub.w	d2,8(a1)
0000815A                            
0000815A                            locret_7B62:
0000815A 4E75                       		rts	
0000815C                            ; End of function MvSonicOnPtfm2
0000815C                            
0000815C                            
0000815C                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000815C                            
0000815C                            
0000815C                            Obj15_Move:				; XREF: Obj15_Action; Obj15_Action2
0000815C 1038 FE78                  		move.b	($FFFFFE78).w,d0
00008160 323C 0080                  		move.w	#$80,d1
00008164 0828 0000 0022             		btst	#0,$22(a0)
0000816A 6700                       		beq.s	loc_7B78
0000816C 4440                       		neg.w	d0
0000816E D041                       		add.w	d1,d0
00008170                            
00008170                            loc_7B78:
00008170 6000                       		bra.s	Obj15_Move2
00008172                            ; End of function Obj15_Move
00008172                            
00008172                            
00008172                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00008172                            
00008172                            
00008172                            Obj48_Move:				; XREF: Obj48_Display2
00008172 4A28 003D                  		tst.b	$3D(a0)
00008176 6600                       		bne.s	loc_7B9C
00008178 3028 003E                  		move.w	$3E(a0),d0
0000817C 5040                       		addq.w	#8,d0
0000817E 3140 003E                  		move.w	d0,$3E(a0)
00008182 D168 0026                  		add.w	d0,$26(a0)
00008186 0C40 0200                  		cmpi.w	#$200,d0
0000818A 6600                       		bne.s	loc_7BB6
0000818C 117C 0001 003D             		move.b	#1,$3D(a0)
00008192 6000                       		bra.s	loc_7BB6
00008194                            ; ===========================================================================
00008194                            
00008194                            loc_7B9C:
00008194 3028 003E                  		move.w	$3E(a0),d0
00008198 5140                       		subq.w	#8,d0
0000819A 3140 003E                  		move.w	d0,$3E(a0)
0000819E D168 0026                  		add.w	d0,$26(a0)
000081A2 0C40 FE00                  		cmpi.w	#-$200,d0
000081A6 6600                       		bne.s	loc_7BB6
000081A8 117C 0000 003D             		move.b	#0,$3D(a0)
000081AE                            
000081AE                            loc_7BB6:
000081AE 1028 0026                  		move.b	$26(a0),d0
000081B2                            ; End of function Obj48_Move
000081B2                            
000081B2                            
000081B2                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000081B2                            
000081B2                            
000081B2                            Obj15_Move2:				; XREF: Obj15_Move; Obj48_Display
000081B2 6100 AAF8                  		bsr.w	CalcSine
000081B6 3428 0038                  		move.w	$38(a0),d2
000081BA 3628 003A                  		move.w	$3A(a0),d3
000081BE 45E8 0028                  		lea	$28(a0),a2
000081C2 7C00                       		moveq	#0,d6
000081C4 1C1A                       		move.b	(a2)+,d6
000081C6                            
000081C6                            loc_7BCE:
000081C6 7800                       		moveq	#0,d4
000081C8 181A                       		move.b	(a2)+,d4
000081CA ED4C                       		lsl.w	#6,d4
000081CC 0684 00FF D000             		addi.l	#$FFD000,d4
000081D2 2244                       		movea.l	d4,a1
000081D4 7800                       		moveq	#0,d4
000081D6 1829 003C                  		move.b	$3C(a1),d4
000081DA 2A04                       		move.l	d4,d5
000081DC C9C0                       		muls.w	d0,d4
000081DE E084                       		asr.l	#8,d4
000081E0 CBC1                       		muls.w	d1,d5
000081E2 E085                       		asr.l	#8,d5
000081E4 D842                       		add.w	d2,d4
000081E6 DA43                       		add.w	d3,d5
000081E8 3344 000C                  		move.w	d4,$C(a1)
000081EC 3345 0008                  		move.w	d5,8(a1)
000081F0 51CE FFD4                  		dbf	d6,loc_7BCE
000081F4 4E75                       		rts	
000081F6                            ; End of function Obj15_Move2
000081F6                            
000081F6                            ; ===========================================================================
000081F6                            
000081F6                            Obj15_ChkDel:				; XREF: Obj15_Action; Obj15_Action2
000081F6 3028 003A                  		move.w	$3A(a0),d0
000081FA 0240 FF80                  		andi.w	#$FF80,d0
000081FE 3238 F700                  		move.w	($FFFFF700).w,d1
00008202 0441 0080                  		subi.w	#$80,d1
00008206 0241 FF80                  		andi.w	#$FF80,d1
0000820A 9041                       		sub.w	d1,d0
0000820C 0C40 0280                  		cmpi.w	#$280,d0
00008210 6200 0000                  		bhi.w	Obj15_DelAll
00008214 4E75                       		rts	
00008216                            ; ===========================================================================
00008216                            
00008216                            Obj15_DelAll:				; XREF: Obj15_ChkDel
00008216 7400                       		moveq	#0,d2
00008218 45E8 0028                  		lea	$28(a0),a2
0000821C 141A                       		move.b	(a2)+,d2
0000821E                            
0000821E                            Obj15_DelLoop:
0000821E 7000                       		moveq	#0,d0
00008220 101A                       		move.b	(a2)+,d0
00008222 ED48                       		lsl.w	#6,d0
00008224 0680 00FF D000             		addi.l	#$FFD000,d0
0000822A 2240                       		movea.l	d0,a1
0000822C 6100 0000                  		bsr.w	DeleteObject2
00008230 51CA FFEC                  		dbf	d2,Obj15_DelLoop ; repeat for length of	chain
00008234 4E75                       		rts	
00008236                            ; ===========================================================================
00008236                            
00008236                            Obj15_Delete:				; XREF: Obj15_Index
00008236 6100 0000                  		bsr.w	DeleteObject
0000823A 4E75                       		rts	
0000823C                            ; ===========================================================================
0000823C                            
0000823C                            Obj15_Display:				; XREF: Obj15_Index
0000823C 6000 0000                  		bra.w	DisplaySprite
00008240                            ; ===========================================================================
00008240                            ; ---------------------------------------------------------------------------
00008240                            ; Sprite mappings - GHZ	and MZ swinging	platforms
00008240                            ; ---------------------------------------------------------------------------
00008240                            Map_obj15:
00008240                            	include "_maps\obj15ghz.asm"
00008240                            ; ---------------------------------------------------------------------------
00008240                            ; Sprite mappings - GHZ	and MZ swinging	platforms
00008240                            ; ---------------------------------------------------------------------------
00008240 0000                       		dc.w byte_7C4E-Map_obj15
00008242 0000                       		dc.w byte_7C59-Map_obj15
00008244 0000                       		dc.w byte_7C5F-Map_obj15
00008246 02                         byte_7C4E:	dc.b 2
00008247 F809 0004 E8               		dc.b $F8, 9, 0,	4, $E8
0000824C F809 0004 00               		dc.b $F8, 9, 0,	4, 0
00008251 01                         byte_7C59:	dc.b 1
00008252 F805 0000 F8               		dc.b $F8, 5, 0,	0, $F8
00008257 01                         byte_7C5F:	dc.b 1
00008258 F805 000A F8               		dc.b $F8, 5, 0,	$A, $F8
0000825E 00                         		even
0000825E 00                         		even
0000825E                            
0000825E                            ; ---------------------------------------------------------------------------
0000825E                            ; Sprite mappings - SLZ	swinging platforms
0000825E                            ; ---------------------------------------------------------------------------
0000825E                            Map_obj15a:
0000825E                            	include "_maps\obj15slz.asm"
0000825E                            ; ---------------------------------------------------------------------------
0000825E                            ; Sprite mappings - SLZ	swinging platforms
0000825E                            ; ---------------------------------------------------------------------------
0000825E 0000                       		dc.w byte_7C6C-Map_obj15a
00008260 0000                       		dc.w byte_7C95-Map_obj15a
00008262 0000                       		dc.w byte_7C9B-Map_obj15a
00008264 08                         byte_7C6C:	dc.b 8
00008265 F00F 0004 E0               		dc.b $F0, $F, 0, 4, $E0
0000826A F00F 0804 00               		dc.b $F0, $F, 8, 4, 0
0000826F F005 0014 D0               		dc.b $F0, 5, 0,	$14, $D0
00008274 F005 0814 20               		dc.b $F0, 5, 8,	$14, $20
00008279 1004 0018 E0               		dc.b $10, 4, 0,	$18, $E0
0000827E 1004 0818 10               		dc.b $10, 4, 8,	$18, $10
00008283 1001 001A F8               		dc.b $10, 1, 0,	$1A, $F8
00008288 1001 081A 00               		dc.b $10, 1, 8,	$1A, 0
0000828D 01                         byte_7C95:	dc.b 1
0000828E F805 4000 F8               		dc.b $F8, 5, $40, 0, $F8
00008293 01                         byte_7C9B:	dc.b 1
00008294 F805 001C F8               		dc.b $F8, 5, 0,	$1C, $F8
0000829A 00                         		even
0000829A 00                         		even
0000829A                            
0000829A                            ; ===========================================================================
0000829A                            ; ---------------------------------------------------------------------------
0000829A                            ; Object 17 - helix of spikes on a pole	(GHZ)
0000829A                            ; ---------------------------------------------------------------------------
0000829A                            
0000829A                            Obj17:					; XREF: Obj_Index
0000829A 7000                       		moveq	#0,d0
0000829C 1028 0024                  		move.b	$24(a0),d0
000082A0 323B 0000                  		move.w	Obj17_Index(pc,d0.w),d1
000082A4 4EFB 1000                  		jmp	Obj17_Index(pc,d1.w)
000082A8                            ; ===========================================================================
000082A8 0000                       Obj17_Index:	dc.w Obj17_Main-Obj17_Index
000082AA 0000                       		dc.w Obj17_Action-Obj17_Index
000082AC 0000                       		dc.w Obj17_Action-Obj17_Index
000082AE 0000                       		dc.w Obj17_Delete-Obj17_Index
000082B0 0000                       		dc.w Obj17_Display-Obj17_Index
000082B2                            ; ===========================================================================
000082B2                            
000082B2                            Obj17_Main:				; XREF: Obj17_Index
000082B2 5428 0024                  		addq.b	#2,$24(a0)
000082B6 217C 0000 0000 0004        		move.l	#Map_obj17,4(a0)
000082BE 317C 4398 0002             		move.w	#$4398,2(a0)
000082C4 117C 0007 0022             		move.b	#7,$22(a0)
000082CA 117C 0004 0001             		move.b	#4,1(a0)
000082D0 117C 0003 0018             		move.b	#3,$18(a0)
000082D6 117C 0008 0019             		move.b	#8,$19(a0)
000082DC 3428 000C                  		move.w	$C(a0),d2
000082E0 3628 0008                  		move.w	8(a0),d3
000082E4 1810                       		move.b	0(a0),d4
000082E6 45E8 0028                  		lea	$28(a0),a2	; move helix length to a2
000082EA 7200                       		moveq	#0,d1
000082EC 1212                       		move.b	(a2),d1		; move a2 to d1
000082EE 14FC 0000                  		move.b	#0,(a2)+
000082F2 3001                       		move.w	d1,d0
000082F4 E248                       		lsr.w	#1,d0
000082F6 E948                       		lsl.w	#4,d0
000082F8 9640                       		sub.w	d0,d3
000082FA 5501                       		subq.b	#2,d1
000082FC 6500                       		bcs.s	Obj17_Action
000082FE 7C00                       		moveq	#0,d6
00008300                            
00008300                            Obj17_MakeHelix:
00008300 6100 0000                  		bsr.w	SingleObjLoad
00008304 6600                       		bne.s	Obj17_Action
00008306 5228 0028                  		addq.b	#1,$28(a0)
0000830A 3A09                       		move.w	a1,d5
0000830C 0445 D000                  		subi.w	#$D000,d5
00008310 EC4D                       		lsr.w	#6,d5
00008312 0245 007F                  		andi.w	#$7F,d5
00008316 14C5                       		move.b	d5,(a2)+
00008318 137C 0008 0024             		move.b	#8,$24(a1)
0000831E 1284                       		move.b	d4,0(a1)
00008320 3342 000C                  		move.w	d2,$C(a1)
00008324 3343 0008                  		move.w	d3,8(a1)
00008328 2368 0004 0004             		move.l	4(a0),4(a1)
0000832E 337C 4398 0002             		move.w	#$4398,2(a1)
00008334 137C 0004 0001             		move.b	#4,1(a1)
0000833A 137C 0003 0018             		move.b	#3,$18(a1)
00008340 137C 0008 0019             		move.b	#8,$19(a1)
00008346 1346 003E                  		move.b	d6,$3E(a1)
0000834A 5206                       		addq.b	#1,d6
0000834C 0206 0007                  		andi.b	#7,d6
00008350 0643 0010                  		addi.w	#$10,d3
00008354 B668 0008                  		cmp.w	8(a0),d3
00008358 6600                       		bne.s	loc_7D78
0000835A 1146 003E                  		move.b	d6,$3E(a0)
0000835E 5206                       		addq.b	#1,d6
00008360 0206 0007                  		andi.b	#7,d6
00008364 0643 0010                  		addi.w	#$10,d3
00008368 5228 0028                  		addq.b	#1,$28(a0)
0000836C                            
0000836C                            loc_7D78:
0000836C 51C9 FF92                  		dbf	d1,Obj17_MakeHelix ; repeat d1 times (helix length)
00008370                            
00008370                            Obj17_Action:				; XREF: Obj17_Index
00008370 6100 0000                  		bsr.w	Obj17_RotateSpikes
00008374 6100 0000                  		bsr.w	DisplaySprite
00008378 6000 0000                  		bra.w	Obj17_ChkDel
0000837C                            
0000837C                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000837C                            
0000837C                            
0000837C                            Obj17_RotateSpikes:			; XREF: Obj17_Action; Obj17_Display
0000837C 1038 FEC1                  		move.b	($FFFFFEC1).w,d0
00008380 117C 0000 0020             		move.b	#0,$20(a0)	; make object harmless
00008386 D028 003E                  		add.b	$3E(a0),d0
0000838A 0200 0007                  		andi.b	#7,d0
0000838E 1140 001A                  		move.b	d0,$1A(a0)	; change current frame
00008392 6600                       		bne.s	locret_7DA6
00008394 117C 0084 0020             		move.b	#$84,$20(a0)	; make object harmful
0000839A                            
0000839A                            locret_7DA6:
0000839A 4E75                       		rts	
0000839C                            ; End of function Obj17_RotateSpikes
0000839C                            
0000839C                            ; ===========================================================================
0000839C                            
0000839C                            Obj17_ChkDel:				; XREF: Obj17_Action
0000839C 3028 0008                  		move.w	8(a0),d0
000083A0 0240 FF80                  		andi.w	#$FF80,d0
000083A4 3238 F700                  		move.w	($FFFFF700).w,d1
000083A8 0441 0080                  		subi.w	#$80,d1
000083AC 0241 FF80                  		andi.w	#$FF80,d1
000083B0 9041                       		sub.w	d1,d0
000083B2 0C40 0280                  		cmpi.w	#$280,d0
000083B6 6200 0000                  		bhi.w	Obj17_DelAll
000083BA 4E75                       		rts	
000083BC                            ; ===========================================================================
000083BC                            
000083BC                            Obj17_DelAll:				; XREF: Obj17_ChkDel
000083BC 7400                       		moveq	#0,d2
000083BE 45E8 0028                  		lea	$28(a0),a2	; move helix length to a2
000083C2 141A                       		move.b	(a2)+,d2	; move a2 to d2
000083C4 5502                       		subq.b	#2,d2
000083C6 6500                       		bcs.s	Obj17_Delete
000083C8                            
000083C8                            Obj17_DelLoop:
000083C8 7000                       		moveq	#0,d0
000083CA 101A                       		move.b	(a2)+,d0
000083CC ED48                       		lsl.w	#6,d0
000083CE 0680 00FF D000             		addi.l	#$FFD000,d0
000083D4 2240                       		movea.l	d0,a1
000083D6 6100 0000                  		bsr.w	DeleteObject2	; delete object
000083DA 51CA FFEC                  		dbf	d2,Obj17_DelLoop ; repeat d2 times (helix length)
000083DE                            
000083DE                            Obj17_Delete:				; XREF: Obj17_Index
000083DE 6100 0000                  		bsr.w	DeleteObject
000083E2 4E75                       		rts	
000083E4                            ; ===========================================================================
000083E4                            
000083E4                            Obj17_Display:				; XREF: Obj17_Index
000083E4 6100 FF96                  		bsr.w	Obj17_RotateSpikes
000083E8 6000 0000                  		bra.w	DisplaySprite
000083EC                            ; ===========================================================================
000083EC                            ; ---------------------------------------------------------------------------
000083EC                            ; Sprite mappings - helix of spikes on a pole (GHZ)
000083EC                            ; ---------------------------------------------------------------------------
000083EC                            Map_obj17:
000083EC                            	include "_maps\obj17.asm"
000083EC                            ; ---------------------------------------------------------------------------
000083EC                            ; Sprite mappings - helix of spikes on a pole (GHZ)
000083EC                            ; ---------------------------------------------------------------------------
000083EC 0000 0000                  		dc.w byte_7E08-Map_obj17, byte_7E0E-Map_obj17
000083F0 0000 0000                  		dc.w byte_7E14-Map_obj17, byte_7E1A-Map_obj17
000083F4 0000 0000                  		dc.w byte_7E20-Map_obj17, byte_7E26-Map_obj17
000083F8 0000 0000                  		dc.w byte_7E2D+1-Map_obj17, byte_7E2C-Map_obj17
000083FC 01                         byte_7E08:	dc.b 1
000083FD F001 0000 FC               		dc.b $F0, 1, 0,	0, $FC
00008402 01                         byte_7E0E:	dc.b 1
00008403 F505 0002 F8               		dc.b $F5, 5, 0,	2, $F8
00008408 01                         byte_7E14:	dc.b 1
00008409 F805 0006 F8               		dc.b $F8, 5, 0,	6, $F8
0000840E 01                         byte_7E1A:	dc.b 1
0000840F FB05 000A F8               		dc.b $FB, 5, 0,	$A, $F8
00008414 01                         byte_7E20:	dc.b 1
00008415 0001 000E FC               		dc.b 0,	1, 0, $E, $FC
0000841A 01                         byte_7E26:	dc.b 1
0000841B 0400 0010 FD               		dc.b 4,	0, 0, $10, $FD
00008420 01                         byte_7E2C:	dc.b 1
00008421 F400 0011 FD               byte_7E2D:	dc.b $F4, 0, 0,	$11, $FD
00008426                            		even
00008426                            		even
00008426                            
00008426                            ; ===========================================================================
00008426                            ; ---------------------------------------------------------------------------
00008426                            ; Object 18 - platforms	(GHZ, SYZ, SLZ)
00008426                            ; ---------------------------------------------------------------------------
00008426                            
00008426                            Obj18:					; XREF: Obj_Index
00008426 7000                       		moveq	#0,d0
00008428 1028 0024                  		move.b	$24(a0),d0
0000842C 323B 0000                  		move.w	Obj18_Index(pc,d0.w),d1
00008430 4EFB 1000                  		jmp	Obj18_Index(pc,d1.w)
00008434                            ; ===========================================================================
00008434 0000                       Obj18_Index:	dc.w Obj18_Main-Obj18_Index
00008436 0000                       		dc.w Obj18_Solid-Obj18_Index
00008438 0000                       		dc.w Obj18_Action2-Obj18_Index
0000843A 0000                       		dc.w Obj18_Delete-Obj18_Index
0000843C 0000                       		dc.w Obj18_Action-Obj18_Index
0000843E                            ; ===========================================================================
0000843E                            
0000843E                            Obj18_Main:				; XREF: Obj18_Index
0000843E 5428 0024                  		addq.b	#2,$24(a0)
00008442 317C 4000 0002             		move.w	#$4000,2(a0)
00008448 217C 0000 0000 0004        		move.l	#Map_obj18,4(a0)
00008450 117C 0020 0019             		move.b	#$20,$19(a0)
00008456 0C38 0004 FE10             		cmpi.b	#4,($FFFFFE10).w ; check if level is SYZ
0000845C 6600                       		bne.s	Obj18_NotSYZ
0000845E 217C 0000 0000 0004        		move.l	#Map_obj18a,4(a0) ; SYZ	specific code
00008466 117C 0020 0019             		move.b	#$20,$19(a0)
0000846C                            
0000846C                            Obj18_NotSYZ:
0000846C 0C38 0003 FE10             		cmpi.b	#3,($FFFFFE10).w ; check if level is SLZ
00008472 6600                       		bne.s	Obj18_NotSLZ
00008474 217C 0000 0000 0004        		move.l	#Map_obj18b,4(a0) ; SLZ	specific code
0000847C 117C 0020 0019             		move.b	#$20,$19(a0)
00008482 317C 4000 0002             		move.w	#$4000,2(a0)
00008488 117C 0003 0028             		move.b	#3,$28(a0)
0000848E                            
0000848E                            Obj18_NotSLZ:
0000848E 117C 0004 0001             		move.b	#4,1(a0)
00008494 117C 0004 0018             		move.b	#4,$18(a0)
0000849A 3168 000C 002C             		move.w	$C(a0),$2C(a0)
000084A0 3168 000C 0034             		move.w	$C(a0),$34(a0)
000084A6 3168 0008 0032             		move.w	8(a0),$32(a0)
000084AC 317C 0080 0026             		move.w	#$80,$26(a0)
000084B2 7200                       		moveq	#0,d1
000084B4 1028 0028                  		move.b	$28(a0),d0
000084B8 0C00 000A                  		cmpi.b	#$A,d0		; is object type $A (large platform)?
000084BC 6600                       		bne.s	Obj18_SetFrame	; if not, branch
000084BE 5201                       		addq.b	#1,d1		; use frame #1
000084C0 117C 0020 0019             		move.b	#$20,$19(a0)	; set width
000084C6                            
000084C6                            Obj18_SetFrame:
000084C6 1141 001A                  		move.b	d1,$1A(a0)	; set frame to d1
000084CA                            
000084CA                            Obj18_Solid:				; XREF: Obj18_Index
000084CA 4A28 0038                  		tst.b	$38(a0)
000084CE 6700                       		beq.s	loc_7EE0
000084D0 5928 0038                  		subq.b	#4,$38(a0)
000084D4                            
000084D4                            loc_7EE0:
000084D4 7200                       		moveq	#0,d1
000084D6 1228 0019                  		move.b	$19(a0),d1
000084DA 6100 F56C                  		bsr.w	PlatformObject
000084DE                            
000084DE                            Obj18_Action:				; XREF: Obj18_Index
000084DE 6100 0000                  		bsr.w	Obj18_Move
000084E2 6100 0000                  		bsr.w	Obj18_Nudge
000084E6 6100 0000                  		bsr.w	DisplaySprite
000084EA 6000 0000                  		bra.w	Obj18_ChkDel
000084EE                            ; ===========================================================================
000084EE                            
000084EE                            Obj18_Action2:				; XREF: Obj18_Index
000084EE 0C28 0040 0038             		cmpi.b	#$40,$38(a0)
000084F4 6700                       		beq.s	loc_7F06
000084F6 5828 0038                  		addq.b	#4,$38(a0)
000084FA                            
000084FA                            loc_7F06:
000084FA 7200                       		moveq	#0,d1
000084FC 1228 0019                  		move.b	$19(a0),d1
00008500 6100 F6BA                  		bsr.w	ExitPlatform
00008504 3F28 0008                  		move.w	8(a0),-(sp)
00008508 6100 0000                  		bsr.w	Obj18_Move
0000850C 6100 0000                  		bsr.w	Obj18_Nudge
00008510 341F                       		move.w	(sp)+,d2
00008512 6100 FC12                  		bsr.w	MvSonicOnPtfm2
00008516 6100 0000                  		bsr.w	DisplaySprite
0000851A 6000 0000                  		bra.w	Obj18_ChkDel
0000851E                            
0000851E 4E75                       		rts
00008520                            
00008520                            ; ---------------------------------------------------------------------------
00008520                            ; Subroutine to	move platform slightly when you	stand on it
00008520                            ; ---------------------------------------------------------------------------
00008520                            
00008520                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00008520                            
00008520                            
00008520                            Obj18_Nudge:				; XREF: Obj18_Action; Obj18_Action2
00008520 1028 0038                  		move.b	$38(a0),d0
00008524 6100 A786                  		bsr.w	CalcSine
00008528 323C 0400                  		move.w	#$400,d1
0000852C C1C1                       		muls.w	d1,d0
0000852E 4840                       		swap	d0
00008530 D068 002C                  		add.w	$2C(a0),d0
00008534 3140 000C                  		move.w	d0,$C(a0)
00008538 4E75                       		rts	
0000853A                            ; End of function Obj18_Nudge
0000853A                            
0000853A                            ; ---------------------------------------------------------------------------
0000853A                            ; Subroutine to	move platforms
0000853A                            ; ---------------------------------------------------------------------------
0000853A                            
0000853A                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000853A                            
0000853A                            
0000853A                            Obj18_Move:				; XREF: Obj18_Action; Obj18_Action2
0000853A 7000                       		moveq	#0,d0
0000853C 1028 0028                  		move.b	$28(a0),d0
00008540 0240 000F                  		andi.w	#$F,d0
00008544 D040                       		add.w	d0,d0
00008546 323B 0000                  		move.w	Obj18_TypeIndex(pc,d0.w),d1
0000854A 4EFB 1000                  		jmp	Obj18_TypeIndex(pc,d1.w)
0000854E                            ; End of function Obj18_Move
0000854E                            
0000854E                            ; ===========================================================================
0000854E 0000 0000                  Obj18_TypeIndex:dc.w Obj18_Type00-Obj18_TypeIndex, Obj18_Type01-Obj18_TypeIndex
00008552 0000 0000                  		dc.w Obj18_Type02-Obj18_TypeIndex, Obj18_Type03-Obj18_TypeIndex
00008556 0000 0000                  		dc.w Obj18_Type04-Obj18_TypeIndex, Obj18_Type05-Obj18_TypeIndex
0000855A 0000 0000                  		dc.w Obj18_Type06-Obj18_TypeIndex, Obj18_Type07-Obj18_TypeIndex
0000855E 0000 0000                  		dc.w Obj18_Type08-Obj18_TypeIndex, Obj18_Type00-Obj18_TypeIndex
00008562 0000 0000                  		dc.w Obj18_Type0A-Obj18_TypeIndex, Obj18_Type0B-Obj18_TypeIndex
00008566 0000                       		dc.w Obj18_Type0C-Obj18_TypeIndex
00008568                            ; ===========================================================================
00008568                            
00008568                            Obj18_Type00:
00008568 4E75                       		rts			; platform 00 doesn't move
0000856A                            ; ===========================================================================
0000856A                            
0000856A                            Obj18_Type05:
0000856A 3028 0032                  		move.w	$32(a0),d0
0000856E 1228 0026                  		move.b	$26(a0),d1	; load platform-motion variable
00008572 4401                       		neg.b	d1		; reverse platform-motion
00008574 0601 0040                  		addi.b	#$40,d1
00008578 6000                       		bra.s	Obj18_01_Move
0000857A                            ; ===========================================================================
0000857A                            
0000857A                            Obj18_Type01:
0000857A 3028 0032                  		move.w	$32(a0),d0
0000857E 1228 0026                  		move.b	$26(a0),d1	; load platform-motion variable
00008582 0401 0040                  		subi.b	#$40,d1
00008586                            
00008586                            Obj18_01_Move:
00008586 4881                       		ext.w	d1
00008588 D041                       		add.w	d1,d0
0000858A 3140 0008                  		move.w	d0,8(a0)	; change position on x-axis
0000858E 6000 0000                  		bra.w	Obj18_ChgMotion
00008592                            ; ===========================================================================
00008592                            
00008592                            Obj18_Type0C:
00008592 3028 0034                  		move.w	$34(a0),d0
00008596 1238 FE6C                  		move.b	($FFFFFE6C).w,d1 ; load	platform-motion	variable
0000859A 4401                       		neg.b	d1		; reverse platform-motion
0000859C 0601 0030                  		addi.b	#$30,d1
000085A0 6000                       		bra.s	Obj18_02_Move
000085A2                            ; ===========================================================================
000085A2                            
000085A2                            Obj18_Type0B:
000085A2 3028 0034                  		move.w	$34(a0),d0
000085A6 1238 FE6C                  		move.b	($FFFFFE6C).w,d1 ; load	platform-motion	variable
000085AA 0401 0030                  		subi.b	#$30,d1
000085AE 6000                       		bra.s	Obj18_02_Move
000085B0                            ; ===========================================================================
000085B0                            
000085B0                            Obj18_Type06:
000085B0 3028 0034                  		move.w	$34(a0),d0
000085B4 1228 0026                  		move.b	$26(a0),d1	; load platform-motion variable
000085B8 4401                       		neg.b	d1		; reverse platform-motion
000085BA 0601 0040                  		addi.b	#$40,d1
000085BE 6000                       		bra.s	Obj18_02_Move
000085C0                            ; ===========================================================================
000085C0                            
000085C0                            Obj18_Type02:
000085C0 3028 0034                  		move.w	$34(a0),d0
000085C4 1228 0026                  		move.b	$26(a0),d1	; load platform-motion variable
000085C8 0401 0040                  		subi.b	#$40,d1
000085CC                            
000085CC                            Obj18_02_Move:
000085CC 4881                       		ext.w	d1
000085CE D041                       		add.w	d1,d0
000085D0 3140 002C                  		move.w	d0,$2C(a0)	; change position on y-axis
000085D4 6000 0000                  		bra.w	Obj18_ChgMotion
000085D8                            ; ===========================================================================
000085D8                            
000085D8                            Obj18_Type03:
000085D8 4A68 003A                  		tst.w	$3A(a0)		; is time delay	set?
000085DC 6600                       		bne.s	Obj18_03_Wait	; if yes, branch
000085DE 0828 0003 0022             		btst	#3,$22(a0)	; is Sonic standing on the platform?
000085E4 6700                       		beq.s	Obj18_03_NoMove	; if not, branch
000085E6 317C 001E 003A             		move.w	#30,$3A(a0)	; set time delay to 0.5	seconds
000085EC                            
000085EC                            Obj18_03_NoMove:
000085EC 4E75                       		rts	
000085EE                            ; ===========================================================================
000085EE                            
000085EE                            Obj18_03_Wait:
000085EE 5368 003A                  		subq.w	#1,$3A(a0)	; subtract 1 from time
000085F2 66F8                       		bne.s	Obj18_03_NoMove	; if time is > 0, branch
000085F4 317C 0020 003A             		move.w	#32,$3A(a0)
000085FA 5228 0028                  		addq.b	#1,$28(a0)	; change to type 04 (falling)
000085FE 4E75                       		rts	
00008600                            ; ===========================================================================
00008600                            
00008600                            Obj18_Type04:
00008600 4A68 003A                  		tst.w	$3A(a0)
00008604 6700                       		beq.s	loc_8048
00008606 5368 003A                  		subq.w	#1,$3A(a0)
0000860A 6600                       		bne.s	loc_8048
0000860C 0828 0003 0022             		btst	#3,$22(a0)
00008612 6700                       		beq.s	loc_8042
00008614 08E9 0001 0022             		bset	#1,$22(a1)
0000861A 08A9 0003 0022             		bclr	#3,$22(a1)
00008620 137C 0002 0024             		move.b	#2,$24(a1)
00008626 08A8 0003 0022             		bclr	#3,$22(a0)
0000862C 4228 0025                  		clr.b	$25(a0)
00008630 3368 0012 0012             		move.w	$12(a0),$12(a1)
00008636                            
00008636                            loc_8042:
00008636 117C 0008 0024             		move.b	#8,$24(a0)
0000863C                            
0000863C                            loc_8048:
0000863C 2628 002C                  		move.l	$2C(a0),d3
00008640 3028 0012                  		move.w	$12(a0),d0
00008644 48C0                       		ext.l	d0
00008646 E180                       		asl.l	#8,d0
00008648 D680                       		add.l	d0,d3
0000864A 2143 002C                  		move.l	d3,$2C(a0)
0000864E 0668 0038 0012             		addi.w	#$38,$12(a0)
00008654 3038 F72E                  		move.w	($FFFFF72E).w,d0
00008658 0640 00E0                  		addi.w	#$E0,d0
0000865C B068 002C                  		cmp.w	$2C(a0),d0
00008660 6400                       		bcc.s	locret_8074
00008662 117C 0006 0024             		move.b	#6,$24(a0)
00008668                            
00008668                            locret_8074:
00008668 4E75                       		rts	
0000866A                            ; ===========================================================================
0000866A                            
0000866A                            Obj18_Type07:
0000866A 4A68 003A                  		tst.w	$3A(a0)		; is time delay	set?
0000866E 6600                       		bne.s	Obj18_07_Wait	; if yes, branch
00008670 45F8 F7E0                  		lea	($FFFFF7E0).w,a2 ; load	switch statuses
00008674 7000                       		moveq	#0,d0
00008676 1028 0028                  		move.b	$28(a0),d0	; move object type ($x7) to d0
0000867A E848                       		lsr.w	#4,d0		; divide d0 by 8, round	down
0000867C 4A32 0000                  		tst.b	(a2,d0.w)	; has switch no. d0 been pressed?
00008680 6700                       		beq.s	Obj18_07_NoMove	; if not, branch
00008682 317C 003C 003A             		move.w	#60,$3A(a0)	; set time delay to 1 second
00008688                            
00008688                            Obj18_07_NoMove:
00008688 4E75                       		rts	
0000868A                            ; ===========================================================================
0000868A                            
0000868A                            Obj18_07_Wait:
0000868A 5368 003A                  		subq.w	#1,$3A(a0)	; subtract 1 from time delay
0000868E 66F8                       		bne.s	Obj18_07_NoMove	; if time is > 0, branch
00008690 5228 0028                  		addq.b	#1,$28(a0)	; change to type 08
00008694 4E75                       		rts	
00008696                            ; ===========================================================================
00008696                            
00008696                            Obj18_Type08:
00008696 5568 002C                  		subq.w	#2,$2C(a0)	; move platform	up
0000869A 3028 0034                  		move.w	$34(a0),d0
0000869E 0440 0200                  		subi.w	#$200,d0
000086A2 B068 002C                  		cmp.w	$2C(a0),d0	; has platform moved $200 pixels?
000086A6 6600                       		bne.s	Obj18_08_NoStop	; if not, branch
000086A8 4228 0028                  		clr.b	$28(a0)		; change to type 00 (stop moving)
000086AC                            
000086AC                            Obj18_08_NoStop:
000086AC 4E75                       		rts	
000086AE                            ; ===========================================================================
000086AE                            
000086AE                            Obj18_Type0A:
000086AE 3028 0034                  		move.w	$34(a0),d0
000086B2 1228 0026                  		move.b	$26(a0),d1	; load platform-motion variable
000086B6 0401 0040                  		subi.b	#$40,d1
000086BA 4881                       		ext.w	d1
000086BC E241                       		asr.w	#1,d1
000086BE D041                       		add.w	d1,d0
000086C0 3140 002C                  		move.w	d0,$2C(a0)	; change position on y-axis
000086C4                            
000086C4                            Obj18_ChgMotion:
000086C4 1178 FE78 0026             		move.b	($FFFFFE78).w,$26(a0) ;	update platform-movement variable
000086CA 4E75                       		rts	
000086CC                            ; ===========================================================================
000086CC                            
000086CC                            Obj18_ChkDel:				; XREF: Obj18_Action; Obj18_Action2
000086CC 3028 0032                  		move.w	$32(a0),d0
000086D0 0240 FF80                  		andi.w	#$FF80,d0
000086D4 3238 F700                  		move.w	($FFFFF700).w,d1
000086D8 0441 0080                  		subi.w	#$80,d1
000086DC 0241 FF80                  		andi.w	#$FF80,d1
000086E0 9041                       		sub.w	d1,d0
000086E2 0C40 0280                  		cmpi.w	#$280,d0
000086E6 6200                       		bhi.s	Obj18_Delete
000086E8 4E75                       		rts	
000086EA                            ; ===========================================================================
000086EA                            
000086EA                            Obj18_Delete:				; XREF: Obj18_Index
000086EA 6000 0000                  		bra.w	DeleteObject
000086EE                            ; ===========================================================================
000086EE                            ; ---------------------------------------------------------------------------
000086EE                            ; Sprite mappings - unused
000086EE                            ; ---------------------------------------------------------------------------
000086EE                            Map_obj18x:
000086EE                            	include "_maps\obj18x.asm"
000086EE                            ; ---------------------------------------------------------------------------
000086EE                            ; Sprite mappings - unused
000086EE                            ; ---------------------------------------------------------------------------
000086EE 0000                       		dc.w byte_80FE-Map_obj18x
000086F0 0000                       		dc.w byte_8109-Map_obj18x
000086F2 02                         byte_80FE:	dc.b 2
000086F3 F40B 003C E8               		dc.b $F4, $B, 0, $3C, $E8
000086F8 F40B 0048 00               		dc.b $F4, $B, 0, $48, 0
000086FD 0A                         byte_8109:	dc.b $A
000086FE F40F 00CA E0               		dc.b $F4, $F, 0, $CA, $E0
00008703 040F 00DA E0               		dc.b 4,	$F, 0, $DA, $E0
00008708 240F 00DA E0               		dc.b $24, $F, 0, $DA, $E0
0000870D 440F 00DA E0               		dc.b $44, $F, 0, $DA, $E0
00008712 640F 00DA E0               		dc.b $64, $F, 0, $DA, $E0
00008717 F40F 08CA 00               		dc.b $F4, $F, 8, $CA, 0
0000871C 040F 08DA 00               		dc.b 4,	$F, 8, $DA, 0
00008721 240F 08DA 00               		dc.b $24, $F, 8, $DA, 0
00008726 440F 08DA 00               		dc.b $44, $F, 8, $DA, 0
0000872B 640F 08DA 00               		dc.b $64, $F, 8, $DA, 0
00008730                            		even
00008730                            		even
00008730                            
00008730                            ; ---------------------------------------------------------------------------
00008730                            ; Sprite mappings - GHZ	platforms
00008730                            ; ---------------------------------------------------------------------------
00008730                            Map_obj18:
00008730                            	include "_maps\obj18ghz.asm"
00008730                            ; ---------------------------------------------------------------------------
00008730                            ; Sprite mappings - GHZ	platforms
00008730                            ; ---------------------------------------------------------------------------
00008730 0000                       		dc.w byte_8140-Map_obj18
00008732 0000                       		dc.w byte_8155-Map_obj18
00008734 04                         byte_8140:	dc.b 4
00008735 F40B 003B E0               		dc.b $F4, $B, 0, $3B, $E0 ; small platform
0000873A F407 003F F8               		dc.b $F4, 7, 0,	$3F, $F8
0000873F F407 003F 08               		dc.b $F4, 7, 0,	$3F, 8
00008744 F403 0047 18               		dc.b $F4, 3, 0,	$47, $18
00008749 0A                         byte_8155:	dc.b $A
0000874A F40F 00C5 E0               		dc.b $F4, $F, 0, $C5, $E0 ; large column platform
0000874F 040F 00D5 E0               		dc.b 4,	$F, 0, $D5, $E0
00008754 240F 00D5 E0               		dc.b $24, $F, 0, $D5, $E0
00008759 440F 00D5 E0               		dc.b $44, $F, 0, $D5, $E0
0000875E 640F 00D5 E0               		dc.b $64, $F, 0, $D5, $E0
00008763 F40F 08C5 00               		dc.b $F4, $F, 8, $C5, 0
00008768 040F 08D5 00               		dc.b 4,	$F, 8, $D5, 0
0000876D 240F 08D5 00               		dc.b $24, $F, 8, $D5, 0
00008772 440F 08D5 00               		dc.b $44, $F, 8, $D5, 0
00008777 640F 08D5 00               		dc.b $64, $F, 8, $D5, 0
0000877C                            		even
0000877C                            		even
0000877C                            
0000877C                            ; ---------------------------------------------------------------------------
0000877C                            ; Sprite mappings - SYZ	platforms
0000877C                            ; ---------------------------------------------------------------------------
0000877C                            Map_obj18a:
0000877C                            	include "_maps\obj18syz.asm"
0000877C                            ; ---------------------------------------------------------------------------
0000877C                            ; Sprite mappings - SYZ	platforms
0000877C                            ; ---------------------------------------------------------------------------
0000877C 0000                       		dc.w byte_818A-Map_obj18a
0000877E 03                         byte_818A:	dc.b 3
0000877F F60B 0049 E0               		dc.b $F6, $B, 0, $49, $E0
00008784 F607 0051 F8               		dc.b $F6, 7, 0,	$51, $F8
00008789 F60B 0055 08               		dc.b $F6, $B, 0, $55, 8
0000878E                            		even
0000878E                            		even
0000878E                            
0000878E                            ; ---------------------------------------------------------------------------
0000878E                            ; Sprite mappings - SLZ	platforms
0000878E                            ; ---------------------------------------------------------------------------
0000878E                            Map_obj18b:
0000878E                            	include "_maps\obj18slz.asm"
0000878E                            ; ---------------------------------------------------------------------------
0000878E                            ; Sprite mappings - SLZ	platforms
0000878E                            ; ---------------------------------------------------------------------------
0000878E 0000                       		dc.w byte_819C-Map_obj18b
00008790 02                         byte_819C:	dc.b 2
00008791 F80F 0021 E0               		dc.b $F8, $F, 0, $21, $E0
00008796 F80F 0021 00               		dc.b $F8, $F, 0, $21, 0
0000879C 00                         		even
0000879C 00                         		even
0000879C                            
0000879C                            ; ===========================================================================
0000879C                            ; ---------------------------------------------------------------------------
0000879C                            ; Object 19 - Pearto bombs
0000879C                            ; ---------------------------------------------------------------------------
0000879C                            Obj19:					; XREF: Obj_Index
0000879C 7000                       		moveq	#0,d0
0000879E 1028 0024                  		move.b	$24(a0),d0
000087A2 323B 0000                  		move.w	off_7070(pc,d0.w),d1
000087A6 4EFB 1000                  		jmp	off_7070(pc,d1.w)
000087AA                            ; ---------------------------------------------------------------------------
000087AA                            
000087AA 0000 0000 0000             off_7070:	dc.w loc_7076-off_7070, loc_70A6-off_7070, loc_70EE-off_7070
000087B0                            ; ---------------------------------------------------------------------------
000087B0                            
000087B0                            loc_7076:
000087B0 5428 0024                  		addq.b	#2,$24(a0)
000087B4 217C 0000 0000 0004        		move.l	#Map_obj19,4(a0)
000087BC 317C 0480 0002             		move.w	#($9000/$20),2(a0)
000087C2 117C 0004 0001             		move.b	#4,1(a0)
000087C8 117C 0003 0019             		move.b	#3,$19(a0)
000087CE 117C 0087 0020             		move.b	#$87,$20(a0)
000087D4 117C 0008 0018             		move.b	#8,$18(a0)
000087DA 317C 0018 0030             		move.w	#$18,$30(a0)
000087E0                            
000087E0                            loc_70A6:
000087E0 0828 0007 0022             		btst	#7,$22(a0)
000087E6 6600                       		bne.s	loc_70C2
000087E8 4A68 0030                  		tst.w	$30(a0)
000087EC 6600                       		bne.s	loc_70D2
000087EE 4EB9 0000 0000             		jsr	ObjHitFloor
000087F4 4A41                       		tst.w	d1
000087F6 6A00                       		bpl.s	loc_70D6
000087F8 D368 000C                  		add.w	d1,$C(a0)
000087FC                            
000087FC                            loc_70C2:
000087FC 10BC 0027                  		move.b	#$27,0(a0); change object to explosion (why was this even here with the 3F branch)
00008800 117C 0000 0024             		move.b	#0,$24(a0)
00008806                            ; ---------------------------------------------------------------------------
00008806                            
00008806                            loc_70D2:
00008806 5368 0030                  		subq.w	#1,$30(a0)
0000880A                            
0000880A                            loc_70D6:
0000880A 6100 0000                  		bsr.w	ObjectFall
0000880E 6100 0000                  		bsr.w	DisplaySprite
00008812 3038 F72E                  		move.w	($FFFFF72E).w,d0
00008816 0640 00E0                  		addi.w	#$E0,d0
0000881A B068 000C                  		cmp.w	$C(a0),d0
0000881E 6500                       		bcs.s	loc_70EE
00008820 4E75                       		rts
00008822                            ; ---------------------------------------------------------------------------
00008822                            
00008822                            loc_70EE:
00008822 6100 0000                  		bsr.w	DeleteObject
00008826 4E75                       		rts
00008828                            		
00008828                            Map_obj19:
00008828                            	include "_maps\obj19.asm"
00008828                            Map_02b4:
00008828 0000                       Map_02b4_0: 	dc.w Map_02b4_2-Map_02b4
0000882A 01                         Map_02b4_2: 	dc.b $1
0000882B F706 2000 F8               	dc.b $F7, $6, $20, $0, $F8
00008830                            	even
00008830                            	even
00008830                            ; ===========================================================================
00008830                            ; ---------------------------------------------------------------------------
00008830                            ; Sprite mappings - swinging ball on a chain from GHZ boss
00008830                            ; ---------------------------------------------------------------------------
00008830                            Map_obj48:
00008830                            	include "_maps\obj48.asm"
00008830                            ; ---------------------------------------------------------------------------
00008830                            ; Sprite mappings - swinging ball on a chain from GHZ boss
00008830                            ; ---------------------------------------------------------------------------
00008830 0000 0000                  		dc.w byte_81B2-Map_obj48, byte_81D1-Map_obj48
00008834 0000 0000                  		dc.w byte_81E6-Map_obj48, byte_81FB-Map_obj48
00008838 06                         byte_81B2:	dc.b 6
00008839 F004 0024 F0               		dc.b $F0, 4, 0,	$24, $F0
0000883E F804 1024 F0               		dc.b $F8, 4, $10, $24, $F0
00008843 E80A 0000 E8               		dc.b $E8, $A, 0, 0, $E8
00008848 E80A 0800 00               		dc.b $E8, $A, 8, 0, 0
0000884D 000A 1000 E8               		dc.b 0,	$A, $10, 0, $E8
00008852 000A 1800 00               		dc.b 0,	$A, $18, 0, 0
00008857 04                         byte_81D1:	dc.b 4
00008858 E80A 0009 E8               		dc.b $E8, $A, 0, 9, $E8
0000885D E80A 0809 00               		dc.b $E8, $A, 8, 9, 0
00008862 000A 1009 E8               		dc.b 0,	$A, $10, 9, $E8
00008867 000A 1809 00               		dc.b 0,	$A, $18, 9, 0
0000886C 04                         byte_81E6:	dc.b 4
0000886D E80A 0012 E8               		dc.b $E8, $A, 0, $12, $E8
00008872 E80A 001B 00               		dc.b $E8, $A, 0, $1B, 0
00008877 000A 181B E8               		dc.b 0,	$A, $18, $1B, $E8
0000887C 000A 1812 00               		dc.b 0,	$A, $18, $12, 0
00008881 04                         byte_81FB:	dc.b 4
00008882 E80A 081B E8               		dc.b $E8, $A, 8, $1B, $E8
00008887 E80A 0812 00               		dc.b $E8, $A, 8, $12, 0
0000888C 000A 1012 E8               		dc.b 0,	$A, $10, $12, $E8
00008891 000A 101B 00               		dc.b 0,	$A, $10, $1B, 0
00008896                            		even
00008896                            		even
00008896                            
00008896                            ; ===========================================================================
00008896                            ; ---------------------------------------------------------------------------
00008896                            ; Object 1A - GHZ collapsing ledge
00008896                            ; ---------------------------------------------------------------------------
00008896                            
00008896                            Obj1A:					; XREF: Obj_Index
00008896 7000                       		moveq	#0,d0
00008898 1028 0024                  		move.b	$24(a0),d0
0000889C 323B 0000                  		move.w	Obj1A_Index(pc,d0.w),d1
000088A0 4EFB 1000                  		jmp	Obj1A_Index(pc,d1.w)
000088A4                            ; ===========================================================================
000088A4 0000 0000                  Obj1A_Index:	dc.w Obj1A_Main-Obj1A_Index, Obj1A_ChkTouch-Obj1A_Index
000088A8 0000 0000                  		dc.w Obj1A_Touch-Obj1A_Index, Obj1A_Display-Obj1A_Index
000088AC 0000 0000                  		dc.w Obj1A_Delete-Obj1A_Index, Obj1A_WalkOff-Obj1A_Index
000088B0                            ; ===========================================================================
000088B0                            
000088B0                            Obj1A_Main:				; XREF: Obj1A_Index
000088B0 5428 0024                  		addq.b	#2,$24(a0)
000088B4 217C 0000 0000 0004        		move.l	#Map_obj1A,4(a0)
000088BC 317C 4000 0002             		move.w	#$4000,2(a0)
000088C2 0028 0004 0001             		ori.b	#4,1(a0)
000088C8 117C 0004 0018             		move.b	#4,$18(a0)
000088CE 117C 0007 0038             		move.b	#7,$38(a0)	; set time delay for collapse
000088D4 117C 0064 0019             		move.b	#$64,$19(a0)
000088DA 1168 0028 001A             		move.b	$28(a0),$1A(a0)
000088E0 117C 0038 0016             		move.b	#$38,$16(a0)
000088E6 08E8 0004 0001             		bset	#4,1(a0)
000088EC                            
000088EC                            Obj1A_ChkTouch:				; XREF: Obj1A_Index
000088EC 4A28 003A                  		tst.b	$3A(a0)		; has Sonic touched the	platform?
000088F0 6700                       		beq.s	Obj1A_Slope	; if not, branch
000088F2 4A28 0038                  		tst.b	$38(a0)		; has time reached zero?
000088F6 6700 0000                  		beq.w	Obj1A_Collapse	; if yes, branch
000088FA 5328 0038                  		subq.b	#1,$38(a0)	; subtract 1 from time
000088FE                            
000088FE                            Obj1A_Slope:
000088FE 323C 0030                  		move.w	#$30,d1
00008902 45F9 0000 0000             		lea	(Obj1A_SlopeData).l,a2
00008908 6100 F212                  		bsr.w	SlopeObject
0000890C 6000 0000                  		bra.w	MarkObjGone
00008910                            ; ===========================================================================
00008910                            
00008910                            Obj1A_Touch:				; XREF: Obj1A_Index
00008910 4A28 0038                  		tst.b	$38(a0)
00008914 6700 0000                  		beq.w	loc_847A
00008918 117C 0001 003A             		move.b	#1,$3A(a0)	; set object as	"touched"
0000891E 5328 0038                  		subq.b	#1,$38(a0)
00008922                            
00008922                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00008922                            
00008922                            
00008922                            Obj1A_WalkOff:				; XREF: Obj1A_Index
00008922 323C 0030                  		move.w	#$30,d1
00008926 6100 F294                  		bsr.w	ExitPlatform
0000892A 323C 0030                  		move.w	#$30,d1
0000892E 45F9 0000 0000             		lea	(Obj1A_SlopeData).l,a2
00008934 3428 0008                  		move.w	8(a0),d2
00008938 6100 0000                  		bsr.w	SlopeObject2
0000893C 6000 0000                  		bra.w	MarkObjGone
00008940                            ; End of function Obj1A_WalkOff
00008940                            
00008940                            ; ===========================================================================
00008940                            
00008940                            Obj1A_Display:				; XREF: Obj1A_Index
00008940 4A28 0038                  		tst.b	$38(a0)		; has time delay reached zero?
00008944 6700                       		beq.s	Obj1A_TimeZero	; if yes, branch
00008946 4A28 003A                  		tst.b	$3A(a0)		; has Sonic touched the	object?
0000894A 6600 0000                  		bne.w	loc_82D0	; if yes, branch
0000894E 5328 0038                  		subq.b	#1,$38(a0)	; subtract 1 from time
00008952 6000 0000                  		bra.w	DisplaySprite
00008956                            ; ===========================================================================
00008956                            
00008956                            loc_82D0:				; XREF: Obj1A_Display
00008956 5328 0038                  		subq.b	#1,$38(a0)
0000895A 6100 FFC6                  		bsr.w	Obj1A_WalkOff
0000895E 43F8 D000                  		lea	($FFFFD000).w,a1
00008962 0829 0003 0022             		btst	#3,$22(a1)
00008968 6700                       		beq.s	loc_82FC
0000896A 4A28 0038                  		tst.b	$38(a0)
0000896E 6600                       		bne.s	locret_8308
00008970 08A9 0003 0022             		bclr	#3,$22(a1)
00008976 08A9 0005 0022             		bclr	#5,$22(a1)
0000897C 137C 0001 001D             		move.b	#1,$1D(a1)
00008982                            
00008982                            loc_82FC:
00008982 117C 0000 003A             		move.b	#0,$3A(a0)
00008988 117C 0006 0024             		move.b	#6,$24(a0)	; run "Obj1A_Display" routine
0000898E                            
0000898E                            locret_8308:
0000898E 4E75                       		rts	
00008990                            ; ===========================================================================
00008990                            
00008990                            Obj1A_TimeZero:				; XREF: Obj1A_Display
00008990 6100 0000                  		bsr.w	ObjectFall
00008994 6100 0000                  		bsr.w	DisplaySprite
00008998 4A28 0001                  		tst.b	1(a0)
0000899C 6A00                       		bpl.s	Obj1A_Delete
0000899E 4E75                       		rts	
000089A0                            ; ===========================================================================
000089A0                            
000089A0                            Obj1A_Delete:				; XREF: Obj1A_Index
000089A0 6100 0000                  		bsr.w	DeleteObject
000089A4 4E75                       		rts	
000089A6                            ; ===========================================================================
000089A6                            ; ---------------------------------------------------------------------------
000089A6                            ; Object 53 - collapsing floors	(MZ, SLZ, SBZ)
000089A6                            ; ---------------------------------------------------------------------------
000089A6                            
000089A6                            Obj53:					; XREF: Obj_Index
000089A6 7000                       		moveq	#0,d0
000089A8 1028 0024                  		move.b	$24(a0),d0
000089AC 323B 0000                  		move.w	Obj53_Index(pc,d0.w),d1
000089B0 4EFB 1000                  		jmp	Obj53_Index(pc,d1.w)
000089B4                            ; ===========================================================================
000089B4 0000 0000                  Obj53_Index:	dc.w Obj53_Main-Obj53_Index, Obj53_ChkTouch-Obj53_Index
000089B8 0000 0000                  		dc.w Obj53_Touch-Obj53_Index, Obj53_Display-Obj53_Index
000089BC 0000 0000                  		dc.w Obj53_Delete-Obj53_Index, Obj53_WalkOff-Obj53_Index
000089C0                            ; ===========================================================================
000089C0                            
000089C0                            Obj53_Main:				; XREF: Obj53_Index
000089C0 5428 0024                  		addq.b	#2,$24(a0)
000089C4 217C 0000 0000 0004        		move.l	#Map_obj53,4(a0)
000089CC 317C 42B8 0002             		move.w	#$42B8,2(a0)
000089D2 0C38 0003 FE10             		cmpi.b	#3,($FFFFFE10).w ; check if level is SLZ
000089D8 6600                       		bne.s	Obj53_NotSLZ
000089DA 317C 44E0 0002             		move.w	#$44E0,2(a0)	; SLZ specific code
000089E0 5428 001A                  		addq.b	#2,$1A(a0)
000089E4                            
000089E4                            Obj53_NotSLZ:
000089E4 0C38 0005 FE10             		cmpi.b	#5,($FFFFFE10).w ; check if level is SBZ
000089EA 6600                       		bne.s	Obj53_NotSBZ
000089EC 317C 43F5 0002             		move.w	#$43F5,2(a0)	; SBZ specific code
000089F2                            
000089F2                            Obj53_NotSBZ:
000089F2 0028 0004 0001             		ori.b	#4,1(a0)
000089F8 117C 0004 0018             		move.b	#4,$18(a0)
000089FE 117C 0007 0038             		move.b	#7,$38(a0)
00008A04 117C 0044 0019             		move.b	#$44,$19(a0)
00008A0A                            
00008A0A                            Obj53_ChkTouch:				; XREF: Obj53_Index
00008A0A 4A28 003A                  		tst.b	$3A(a0)		; has Sonic touched the	object?
00008A0E 6700                       		beq.s	Obj53_Solid	; if not, branch
00008A10 4A28 0038                  		tst.b	$38(a0)		; has time delay reached zero?
00008A14 6700 0000                  		beq.w	Obj53_Collapse	; if yes, branch
00008A18 5328 0038                  		subq.b	#1,$38(a0)	; subtract 1 from time
00008A1C                            
00008A1C                            Obj53_Solid:
00008A1C 323C 0020                  		move.w	#$20,d1
00008A20 6100 F026                  		bsr.w	PlatformObject
00008A24 4A28 0028                  		tst.b	$28(a0)
00008A28 6A00                       		bpl.s	Obj53_MarkAsGone
00008A2A 0829 0003 0022             		btst	#3,$22(a1)
00008A30 6700                       		beq.s	Obj53_MarkAsGone
00008A32 08A8 0000 0001             		bclr	#0,1(a0)
00008A38 3029 0008                  		move.w	8(a1),d0
00008A3C 9068 0008                  		sub.w	8(a0),d0
00008A40 6400                       		bcc.s	Obj53_MarkAsGone
00008A42 08E8 0000 0001             		bset	#0,1(a0)
00008A48                            
00008A48                            Obj53_MarkAsGone:
00008A48 6000 0000                  		bra.w	MarkObjGone
00008A4C                            ; ===========================================================================
00008A4C                            
00008A4C                            Obj53_Touch:				; XREF: Obj53_Index
00008A4C 4A28 0038                  		tst.b	$38(a0)
00008A50 6700 0000                  		beq.w	loc_8458
00008A54 117C 0001 003A             		move.b	#1,$3A(a0)	; set object as	"touched"
00008A5A 5328 0038                  		subq.b	#1,$38(a0)
00008A5E                            
00008A5E                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00008A5E                            
00008A5E                            
00008A5E                            Obj53_WalkOff:				; XREF: Obj53_Index
00008A5E 323C 0020                  		move.w	#$20,d1
00008A62 6100 F158                  		bsr.w	ExitPlatform
00008A66 3428 0008                  		move.w	8(a0),d2
00008A6A 6100 F6BA                  		bsr.w	MvSonicOnPtfm2
00008A6E 6000 0000                  		bra.w	MarkObjGone
00008A72                            ; End of function Obj53_WalkOff
00008A72                            
00008A72                            ; ===========================================================================
00008A72                            
00008A72                            Obj53_Display:				; XREF: Obj53_Index
00008A72 4A28 0038                  		tst.b	$38(a0)		; has time delay reached zero?
00008A76 6700                       		beq.s	Obj53_TimeZero	; if yes, branch
00008A78 4A28 003A                  		tst.b	$3A(a0)		; has Sonic touched the	object?
00008A7C 6600 0000                  		bne.w	loc_8402	; if yes, branch
00008A80 5328 0038                  		subq.b	#1,$38(a0)	; subtract 1 from time
00008A84 6000 0000                  		bra.w	DisplaySprite
00008A88                            ; ===========================================================================
00008A88                            
00008A88                            loc_8402:
00008A88 5328 0038                  		subq.b	#1,$38(a0)
00008A8C 6100 FFD0                  		bsr.w	Obj53_WalkOff
00008A90 43F8 D000                  		lea	($FFFFD000).w,a1
00008A94 0829 0003 0022             		btst	#3,$22(a1)
00008A9A 6700                       		beq.s	loc_842E
00008A9C 4A28 0038                  		tst.b	$38(a0)
00008AA0 6600                       		bne.s	locret_843A
00008AA2 08A9 0003 0022             		bclr	#3,$22(a1)
00008AA8 08A9 0005 0022             		bclr	#5,$22(a1)
00008AAE 137C 0001 001D             		move.b	#1,$1D(a1)
00008AB4                            
00008AB4                            loc_842E:
00008AB4 117C 0000 003A             		move.b	#0,$3A(a0)
00008ABA 117C 0006 0024             		move.b	#6,$24(a0)	; run "Obj53_Display" routine
00008AC0                            
00008AC0                            locret_843A:
00008AC0 4E75                       		rts	
00008AC2                            ; ===========================================================================
00008AC2                            
00008AC2                            Obj53_TimeZero:				; XREF: Obj53_Display
00008AC2 6100 0000                  		bsr.w	ObjectFall
00008AC6 6100 0000                  		bsr.w	DisplaySprite
00008ACA 4A28 0001                  		tst.b	1(a0)
00008ACE 6A00                       		bpl.s	Obj53_Delete
00008AD0 4E75                       		rts	
00008AD2                            ; ===========================================================================
00008AD2                            
00008AD2                            Obj53_Delete:				; XREF: Obj53_Index
00008AD2 6100 0000                  		bsr.w	DeleteObject
00008AD6 4E75                       		rts	
00008AD8                            ; ===========================================================================
00008AD8                            
00008AD8                            Obj53_Collapse:				; XREF: Obj53_ChkTouch
00008AD8 117C 0000 003A             		move.b	#0,$3A(a0)
00008ADE                            
00008ADE                            loc_8458:				; XREF: Obj53_Touch
00008ADE 49F9 0000 0000             		lea	(Obj53_Data2).l,a4
00008AE4 0828 0000 0028             		btst	#0,$28(a0)
00008AEA 6700                       		beq.s	loc_846C
00008AEC 49F9 0000 0000             		lea	(Obj53_Data3).l,a4
00008AF2                            
00008AF2                            loc_846C:
00008AF2 7207                       		moveq	#7,d1
00008AF4 5228 001A                  		addq.b	#1,$1A(a0)
00008AF8 6000                       		bra.s	loc_8486
00008AFA                            ; ===========================================================================
00008AFA                            
00008AFA                            Obj1A_Collapse:				; XREF: Obj1A_ChkTouch
00008AFA 117C 0000 003A             		move.b	#0,$3A(a0)
00008B00                            
00008B00                            loc_847A:				; XREF: Obj1A_Touch
00008B00 49F9 0000 0000             		lea	(Obj53_Data1).l,a4
00008B06 7218                       		moveq	#$18,d1
00008B08 5428 001A                  		addq.b	#2,$1A(a0)
00008B0C                            
00008B0C                            loc_8486:				; XREF: Obj53_Collapse
00008B0C 7000                       		moveq	#0,d0
00008B0E 1028 001A                  		move.b	$1A(a0),d0
00008B12 D040                       		add.w	d0,d0
00008B14 2668 0004                  		movea.l	4(a0),a3
00008B18 D6F3 0000                  		adda.w	(a3,d0.w),a3
00008B1C 524B                       		addq.w	#1,a3
00008B1E 08E8 0005 0001             		bset	#5,1(a0)
00008B24 1810                       		move.b	0(a0),d4
00008B26 1A28 0001                  		move.b	1(a0),d5
00008B2A 2248                       		movea.l	a0,a1
00008B2C 6000                       		bra.s	loc_84B2
00008B2E                            ; ===========================================================================
00008B2E                            
00008B2E                            loc_84AA:
00008B2E 6100 0000                  		bsr.w	SingleObjLoad
00008B32 6600                       		bne.s	loc_84F2
00008B34 5A4B                       		addq.w	#5,a3
00008B36                            
00008B36                            loc_84B2:
00008B36 137C 0006 0024             		move.b	#6,$24(a1)
00008B3C 1284                       		move.b	d4,0(a1)
00008B3E 234B 0004                  		move.l	a3,4(a1)
00008B42 1345 0001                  		move.b	d5,1(a1)
00008B46 3368 0008 0008             		move.w	8(a0),8(a1)
00008B4C 3368 000C 000C             		move.w	$C(a0),$C(a1)
00008B52 3368 0002 0002             		move.w	2(a0),2(a1)
00008B58 1368 0018 0018             		move.b	$18(a0),$18(a1)
00008B5E 1368 0019 0019             		move.b	$19(a0),$19(a1)
00008B64 135C 0038                  		move.b	(a4)+,$38(a1)
00008B68 B3C8                       		cmpa.l	a0,a1
00008B6A 6400                       		bcc.s	loc_84EE
00008B6C 6100 0000                  		bsr.w	DisplaySprite2
00008B70                            
00008B70                            loc_84EE:
00008B70 51C9 FFBC                  		dbf	d1,loc_84AA
00008B74                            
00008B74                            loc_84F2:
00008B74 6100 0000                  		bsr.w	DisplaySprite
00008B78 303C 00B9                  		move.w	#$B9,d0
00008B7C 4EF9 0000 15C0             		jmp	(PlaySound_Special).l ;	play collapsing	sound
00008B82                            ; ===========================================================================
00008B82                            ; ---------------------------------------------------------------------------
00008B82                            ; Disintegration data for collapsing ledges (MZ, SLZ, SBZ)
00008B82                            ; ---------------------------------------------------------------------------
00008B82 1C18 1410 1A16 120E 0A06+  Obj53_Data1:	dc.b $1C, $18, $14, $10, $1A, $16, $12,	$E, $A,	6, $18,	$14, $10, $C, 8, 4
00008B92 1612 0E0A 0602 1410 0C00   		dc.b $16, $12, $E, $A, 6, 2, $14, $10, $C, 0
00008B9C 1E16 0E06 1A12 0A02        Obj53_Data2:	dc.b $1E, $16, $E, 6, $1A, $12,	$A, 2
00008BA4 161E 1A12 060E 0A02        Obj53_Data3:	dc.b $16, $1E, $1A, $12, 6, $E,	$A, 2
00008BAC                            
00008BAC                            ; ---------------------------------------------------------------------------
00008BAC                            ; Sloped platform subroutine (GHZ collapsing ledges and	MZ platforms)
00008BAC                            ; ---------------------------------------------------------------------------
00008BAC                            
00008BAC                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00008BAC                            
00008BAC                            
00008BAC                            SlopeObject2:				; XREF: Obj1A_WalkOff; et al
00008BAC 43F8 D000                  		lea	($FFFFD000).w,a1
00008BB0 0829 0003 0022             		btst	#3,$22(a1)
00008BB6 6700                       		beq.s	locret_856E
00008BB8 3029 0008                  		move.w	8(a1),d0
00008BBC 9068 0008                  		sub.w	8(a0),d0
00008BC0 D041                       		add.w	d1,d0
00008BC2 E248                       		lsr.w	#1,d0
00008BC4 0828 0000 0001             		btst	#0,1(a0)
00008BCA 6700                       		beq.s	loc_854E
00008BCC 4640                       		not.w	d0
00008BCE D041                       		add.w	d1,d0
00008BD0                            
00008BD0                            loc_854E:
00008BD0 7200                       		moveq	#0,d1
00008BD2 1232 0000                  		move.b	(a2,d0.w),d1
00008BD6 3028 000C                  		move.w	$C(a0),d0
00008BDA 9041                       		sub.w	d1,d0
00008BDC 7200                       		moveq	#0,d1
00008BDE 1229 0016                  		move.b	$16(a1),d1
00008BE2 9041                       		sub.w	d1,d0
00008BE4 3340 000C                  		move.w	d0,$C(a1)
00008BE8 9468 0008                  		sub.w	8(a0),d2
00008BEC 9569 0008                  		sub.w	d2,8(a1)
00008BF0                            
00008BF0                            locret_856E:
00008BF0 4E75                       		rts	
00008BF2                            ; End of function SlopeObject2
00008BF2                            
00008BF2                            ; ===========================================================================
00008BF2                            ; ---------------------------------------------------------------------------
00008BF2                            ; Collision data for GHZ collapsing ledge
00008BF2                            ; ---------------------------------------------------------------------------
00008BF2                            Obj1A_SlopeData:
00008BF2                            		incbin	misc\ghzledge.bin
00008C22                            		even
00008C22                            
00008C22                            ; ---------------------------------------------------------------------------
00008C22                            ; Sprite mappings - GHZ	collapsing ledge
00008C22                            ; ---------------------------------------------------------------------------
00008C22                            Map_obj1A:
00008C22                            	include "_maps\obj1A.asm"
00008C22                            ; ---------------------------------------------------------------------------
00008C22                            ; Sprite mappings - GHZ	collapsing ledge
00008C22                            ; ---------------------------------------------------------------------------
00008C22 0000 0000                  		dc.w byte_85A8-Map_obj1A, byte_85F9-Map_obj1A
00008C26 0000 0000                  		dc.w byte_864A-Map_obj1A, byte_86C8-Map_obj1A
00008C2A 10                         byte_85A8:	dc.b $10
00008C2B C80E 0057 10               		dc.b $C8, $E, 0, $57, $10 ; ledge facing left
00008C30 D00D 0063 F0               		dc.b $D0, $D, 0, $63, $F0
00008C35 E00D 006B 10               		dc.b $E0, $D, 0, $6B, $10
00008C3A E00D 0073 F0               		dc.b $E0, $D, 0, $73, $F0
00008C3F D806 007B E0               		dc.b $D8, 6, 0,	$7B, $E0
00008C44 D806 0081 D0               		dc.b $D8, 6, 0,	$81, $D0
00008C49 F00D 0087 10               		dc.b $F0, $D, 0, $87, $10
00008C4E F00D 008F F0               		dc.b $F0, $D, 0, $8F, $F0
00008C53 F005 0097 E0               		dc.b $F0, 5, 0,	$97, $E0
00008C58 F005 009B D0               		dc.b $F0, 5, 0,	$9B, $D0
00008C5D 000D 009F 10               		dc.b 0,	$D, 0, $9F, $10
00008C62 0005 00A7 00               		dc.b 0,	5, 0, $A7, 0
00008C67 000D 00AB E0               		dc.b 0,	$D, 0, $AB, $E0
00008C6C 0005 00B3 D0               		dc.b 0,	5, 0, $B3, $D0
00008C71 100D 00AB 10               		dc.b $10, $D, 0, $AB, $10
00008C76 1005 00B7 00               		dc.b $10, 5, 0,	$B7, 0
00008C7B 10                         byte_85F9:	dc.b $10
00008C7C C80E 0057 10               		dc.b $C8, $E, 0, $57, $10 ; ledge facing right
00008C81 D00D 0063 F0               		dc.b $D0, $D, 0, $63, $F0
00008C86 E00D 006B 10               		dc.b $E0, $D, 0, $6B, $10
00008C8B E00D 0073 F0               		dc.b $E0, $D, 0, $73, $F0
00008C90 D806 007B E0               		dc.b $D8, 6, 0,	$7B, $E0
00008C95 D806 00BB D0               		dc.b $D8, 6, 0,	$BB, $D0
00008C9A F00D 0087 10               		dc.b $F0, $D, 0, $87, $10
00008C9F F00D 008F F0               		dc.b $F0, $D, 0, $8F, $F0
00008CA4 F005 0097 E0               		dc.b $F0, 5, 0,	$97, $E0
00008CA9 F005 00C1 D0               		dc.b $F0, 5, 0,	$C1, $D0
00008CAE 000D 009F 10               		dc.b 0,	$D, 0, $9F, $10
00008CB3 0005 00A7 00               		dc.b 0,	5, 0, $A7, 0
00008CB8 000D 00AB E0               		dc.b 0,	$D, 0, $AB, $E0
00008CBD 0005 00B7 D0               		dc.b 0,	5, 0, $B7, $D0
00008CC2 100D 00AB 10               		dc.b $10, $D, 0, $AB, $10
00008CC7 1005 00B7 00               		dc.b $10, 5, 0,	$B7, 0
00008CCC 19                         byte_864A:	dc.b $19
00008CCD C806 005D 20               		dc.b $C8, 6, 0,	$5D, $20 ; ledge facing	left in	pieces
00008CD2 C806 0057 10               		dc.b $C8, 6, 0,	$57, $10
00008CD7 D005 0067 00               		dc.b $D0, 5, 0,	$67, 0
00008CDC D005 0063 F0               		dc.b $D0, 5, 0,	$63, $F0
00008CE1 E005 006F 20               		dc.b $E0, 5, 0,	$6F, $20
00008CE6 E005 006B 10               		dc.b $E0, 5, 0,	$6B, $10
00008CEB E005 0077 00               		dc.b $E0, 5, 0,	$77, 0
00008CF0 E005 0073 F0               		dc.b $E0, 5, 0,	$73, $F0
00008CF5 D806 007B E0               		dc.b $D8, 6, 0,	$7B, $E0
00008CFA D806 0081 D0               		dc.b $D8, 6, 0,	$81, $D0
00008CFF F005 008B 20               		dc.b $F0, 5, 0,	$8B, $20
00008D04 F005 0087 10               		dc.b $F0, 5, 0,	$87, $10
00008D09 F005 0093 00               		dc.b $F0, 5, 0,	$93, 0
00008D0E F005 008F F0               		dc.b $F0, 5, 0,	$8F, $F0
00008D13 F005 0097 E0               		dc.b $F0, 5, 0,	$97, $E0
00008D18 F005 009B D0               		dc.b $F0, 5, 0,	$9B, $D0
00008D1D 0005 008B 20               		dc.b 0,	5, 0, $8B, $20
00008D22 0005 008B 10               		dc.b 0,	5, 0, $8B, $10
00008D27 0005 00A7 00               		dc.b 0,	5, 0, $A7, 0
00008D2C 0005 00AB F0               		dc.b 0,	5, 0, $AB, $F0
00008D31 0005 00AB E0               		dc.b 0,	5, 0, $AB, $E0
00008D36 0005 00B3 D0               		dc.b 0,	5, 0, $B3, $D0
00008D3B 1005 00AB 20               		dc.b $10, 5, 0,	$AB, $20
00008D40 1005 00AB 10               		dc.b $10, 5, 0,	$AB, $10
00008D45 1005 00B7 00               		dc.b $10, 5, 0,	$B7, 0
00008D4A 19                         byte_86C8:	dc.b $19
00008D4B C806 005D 20               		dc.b $C8, 6, 0,	$5D, $20 ; ledge facing	right in pieces
00008D50 C806 0057 10               		dc.b $C8, 6, 0,	$57, $10
00008D55 D005 0067 00               		dc.b $D0, 5, 0,	$67, 0
00008D5A D005 0063 F0               		dc.b $D0, 5, 0,	$63, $F0
00008D5F E005 006F 20               		dc.b $E0, 5, 0,	$6F, $20
00008D64 E005 006B 10               		dc.b $E0, 5, 0,	$6B, $10
00008D69 E005 0077 00               		dc.b $E0, 5, 0,	$77, 0
00008D6E E005 0073 F0               		dc.b $E0, 5, 0,	$73, $F0
00008D73 D806 007B E0               		dc.b $D8, 6, 0,	$7B, $E0
00008D78 D806 00BB D0               		dc.b $D8, 6, 0,	$BB, $D0
00008D7D F005 008B 20               		dc.b $F0, 5, 0,	$8B, $20
00008D82 F005 0087 10               		dc.b $F0, 5, 0,	$87, $10
00008D87 F005 0093 00               		dc.b $F0, 5, 0,	$93, 0
00008D8C F005 008F F0               		dc.b $F0, 5, 0,	$8F, $F0
00008D91 F005 0097 E0               		dc.b $F0, 5, 0,	$97, $E0
00008D96 F005 00C1 D0               		dc.b $F0, 5, 0,	$C1, $D0
00008D9B 0005 008B 20               		dc.b 0,	5, 0, $8B, $20
00008DA0 0005 008B 10               		dc.b 0,	5, 0, $8B, $10
00008DA5 0005 00A7 00               		dc.b 0,	5, 0, $A7, 0
00008DAA 0005 00AB F0               		dc.b 0,	5, 0, $AB, $F0
00008DAF 0005 00AB E0               		dc.b 0,	5, 0, $AB, $E0
00008DB4 0005 00B7 D0               		dc.b 0,	5, 0, $B7, $D0
00008DB9 1005 00AB 20               		dc.b $10, 5, 0,	$AB, $20
00008DBE 1005 00AB 10               		dc.b $10, 5, 0,	$AB, $10
00008DC3 1005 00B7 00               		dc.b $10, 5, 0,	$B7, 0
00008DC8                            		even
00008DC8                            		even
00008DC8                            
00008DC8                            ; ---------------------------------------------------------------------------
00008DC8                            ; Sprite mappings - collapsing floors (MZ, SLZ,	SBZ)
00008DC8                            ; ---------------------------------------------------------------------------
00008DC8                            Map_obj53:
00008DC8                            	include "_maps\obj53.asm"
00008DC8                            ; ---------------------------------------------------------------------------
00008DC8                            ; Sprite mappings - collapsing floors (MZ, SLZ,	SBZ)
00008DC8                            ; ---------------------------------------------------------------------------
00008DC8 0000 0000                  		dc.w byte_874E-Map_obj53, byte_8763-Map_obj53
00008DCC 0000 0000                  		dc.w byte_878C-Map_obj53, byte_87A1-Map_obj53
00008DD0 04                         byte_874E:	dc.b 4
00008DD1 F80D 0000 E0               		dc.b $F8, $D, 0, 0, $E0	; MZ and SBZ blocks
00008DD6 080D 0000 E0               		dc.b 8,	$D, 0, 0, $E0
00008DDB F80D 0000 00               		dc.b $F8, $D, 0, 0, 0
00008DE0 080D 0000 00               		dc.b 8,	$D, 0, 0, 0
00008DE5 08                         byte_8763:	dc.b 8
00008DE6 F805 0000 E0               		dc.b $F8, 5, 0,	0, $E0
00008DEB F805 0000 F0               		dc.b $F8, 5, 0,	0, $F0
00008DF0 F805 0000 00               		dc.b $F8, 5, 0,	0, 0
00008DF5 F805 0000 10               		dc.b $F8, 5, 0,	0, $10
00008DFA 0805 0000 E0               		dc.b 8,	5, 0, 0, $E0
00008DFF 0805 0000 F0               		dc.b 8,	5, 0, 0, $F0
00008E04 0805 0000 00               		dc.b 8,	5, 0, 0, 0
00008E09 0805 0000 10               		dc.b 8,	5, 0, 0, $10
00008E0E 04                         byte_878C:	dc.b 4
00008E0F F80D 0000 E0               		dc.b $F8, $D, 0, 0, $E0	; SLZ blocks
00008E14 080D 0008 E0               		dc.b 8,	$D, 0, 8, $E0
00008E19 F80D 0000 00               		dc.b $F8, $D, 0, 0, 0
00008E1E 080D 0008 00               		dc.b 8,	$D, 0, 8, 0
00008E23 08                         byte_87A1:	dc.b 8
00008E24 F805 0000 E0               		dc.b $F8, 5, 0,	0, $E0
00008E29 F805 0004 F0               		dc.b $F8, 5, 0,	4, $F0
00008E2E F805 0000 00               		dc.b $F8, 5, 0,	0, 0
00008E33 F805 0004 10               		dc.b $F8, 5, 0,	4, $10
00008E38 0805 0008 E0               		dc.b 8,	5, 0, 8, $E0
00008E3D 0805 000C F0               		dc.b 8,	5, 0, $C, $F0
00008E42 0805 0008 00               		dc.b 8,	5, 0, 8, 0
00008E47 0805 000C 10               		dc.b 8,	5, 0, $C, $10
00008E4C                            		even
00008E4C                            		even
00008E4C                            
00008E4C                            ; ===========================================================================
00008E4C                            ; ---------------------------------------------------------------------------
00008E4C                            ; Object 1C - scenery (GHZ bridge stump, SLZ lava thrower)
00008E4C                            ; ---------------------------------------------------------------------------
00008E4C                            
00008E4C                            Obj1C:					; XREF: Obj_Index
00008E4C 7000                       		moveq	#0,d0
00008E4E 1028 0024                  		move.b	$24(a0),d0
00008E52 323B 0000                  		move.w	Obj1C_Index(pc,d0.w),d1
00008E56 4EFB 1000                  		jmp	Obj1C_Index(pc,d1.w)
00008E5A                            ; ===========================================================================
00008E5A 0000                       Obj1C_Index:	dc.w Obj1C_Main-Obj1C_Index
00008E5C 0000                       		dc.w Obj1C_ChkDel-Obj1C_Index
00008E5E                            ; ===========================================================================
00008E5E                            
00008E5E                            Obj1C_Main:				; XREF: Obj1C_Index
00008E5E 5428 0024                  		addq.b	#2,$24(a0)
00008E62 7000                       		moveq	#0,d0
00008E64 1028 0028                  		move.b	$28(a0),d0	; copy object type to d0
00008E68 C0FC 000A                  		mulu.w	#$A,d0		; multiply by $A
00008E6C 43FB 0000                  		lea	Obj1C_Var(pc,d0.w),a1
00008E70 2159 0004                  		move.l	(a1)+,4(a0)
00008E74 3159 0002                  		move.w	(a1)+,2(a0)
00008E78 0028 0004 0001             		ori.b	#4,1(a0)
00008E7E 1159 001A                  		move.b	(a1)+,$1A(a0)
00008E82 1159 0019                  		move.b	(a1)+,$19(a0)
00008E86 1159 0018                  		move.b	(a1)+,$18(a0)
00008E8A 1159 0020                  		move.b	(a1)+,$20(a0)
00008E8E                            
00008E8E                            Obj1C_ChkDel:				; XREF: Obj1C_Index
00008E8E 3028 0008                  		move.w	8(a0),d0
00008E92 0240 FF80                  		andi.w	#$FF80,d0
00008E96 3238 F700                  		move.w	($FFFFF700).w,d1
00008E9A 0441 0080                  		subi.w	#$80,d1
00008E9E 0241 FF80                  		andi.w	#$FF80,d1
00008EA2 9041                       		sub.w	d1,d0
00008EA4 0C40 0280                  		cmpi.w	#$280,d0
00008EA8 6200 0000                  		bhi.w	DeleteObject
00008EAC 6000 0000                  		bra.w	DisplaySprite
00008EB0                            ; ===========================================================================
00008EB0                            ; ---------------------------------------------------------------------------
00008EB0                            ; Variables for	object $1C are stored in an array
00008EB0                            ; ---------------------------------------------------------------------------
00008EB0 0000 0000                  Obj1C_Var:	dc.l Map_obj1C		; mappings address
00008EB4 44D8                       		dc.w $44D8		; VRAM setting
00008EB6 0008 0200                  		dc.b 0,	8, 2, 0		; frame, width,	priority, collision response
00008EBA 0000 0000                  		dc.l Map_obj1C
00008EBE 44D8                       		dc.w $44D8
00008EC0 0008 0200                  		dc.b 0,	8, 2, 0
00008EC4 0000 0000                  		dc.l Map_obj1C
00008EC8 44D8                       		dc.w $44D8
00008ECA 0008 0200                  		dc.b 0,	8, 2, 0
00008ECE 0000 7F30                  		dc.l Map_obj11
00008ED2 438E                       		dc.w $438E
00008ED4 0110 0100                  		dc.b 1,	$10, 1,	0
00008ED8                            ; ---------------------------------------------------------------------------
00008ED8                            ; Sprite mappings - SLZ	lava thrower
00008ED8                            ; ---------------------------------------------------------------------------
00008ED8                            Map_obj1C:
00008ED8                            	include "_maps\obj1C.asm"
00008ED8                            ; ---------------------------------------------------------------------------
00008ED8                            ; Sprite mappings - SLZ	lava thrower
00008ED8                            ; ---------------------------------------------------------------------------
00008ED8 0000                       		dc.w byte_8858-Map_obj1C
00008EDA 01                         byte_8858:	dc.b 1
00008EDB F007 0000 F8               		dc.b $F0, 7, 0,	0, $F8
00008EE0                            		even
00008EE0                            		even
00008EE0                            
00008EE0                            ; ===========================================================================
00008EE0                            ; ---------------------------------------------------------------------------
00008EE0                            ; Object 1D - switch that activates when Sonic touches it
00008EE0                            ; (this	is not used anywhere in	the game)
00008EE0                            ; ---------------------------------------------------------------------------
00008EE0                            
00008EE0                            Obj1D:					; XREF: Obj_Index
00008EE0 7000                       		moveq	#0,d0
00008EE2 1028 0024                  		move.b	$24(a0),d0
00008EE6 323B 0000                  		move.w	Obj1D_Index(pc,d0.w),d1
00008EEA 4EFB 1000                  		jmp	Obj1D_Index(pc,d1.w)
00008EEE                            ; ===========================================================================
00008EEE 0000                       Obj1D_Index:	dc.w Obj1D_Main-Obj1D_Index
00008EF0 0000                       		dc.w Obj1D_Action-Obj1D_Index
00008EF2 0000                       		dc.w Obj1D_Delete-Obj1D_Index
00008EF4                            ; ===========================================================================
00008EF4                            
00008EF4                            Obj1D_Main:				; XREF: Obj1D_Index
00008EF4 5428 0024                  		addq.b	#2,$24(a0)
00008EF8 217C 0000 0000 0004        		move.l	#Map_obj1D,4(a0)
00008F00 317C 4000 0002             		move.w	#$4000,2(a0)
00008F06 117C 0004 0001             		move.b	#4,1(a0)
00008F0C 3168 000C 0030             		move.w	$C(a0),$30(a0)	; save position	on y-axis
00008F12 117C 0010 0019             		move.b	#$10,$19(a0)
00008F18 117C 0005 0018             		move.b	#5,$18(a0)
00008F1E                            
00008F1E                            Obj1D_Action:				; XREF: Obj1D_Index
00008F1E 3168 0030 000C             		move.w	$30(a0),$C(a0)	; restore position on y-axis
00008F24 323C 0010                  		move.w	#$10,d1
00008F28 6100 0000                  		bsr.w	Obj1D_ChkTouch
00008F2C 6700                       		beq.s	Obj1D_ChkDel
00008F2E 5468 000C                  		addq.w	#2,$C(a0)	; move object 2	pixels
00008F32 7001                       		moveq	#1,d0
00008F34 31C0 F7E0                  		move.w	d0,($FFFFF7E0).w ; set switch 0	as "pressed"
00008F38                            
00008F38                            Obj1D_ChkDel:
00008F38 6100 0000                  		bsr.w	DisplaySprite
00008F3C 3028 0008                  		move.w	8(a0),d0
00008F40 0240 FF80                  		andi.w	#$FF80,d0
00008F44 3238 F700                  		move.w	($FFFFF700).w,d1
00008F48 0441 0080                  		subi.w	#$80,d1
00008F4C 0241 FF80                  		andi.w	#$FF80,d1
00008F50 9041                       		sub.w	d1,d0
00008F52 0C40 0280                  		cmpi.w	#$280,d0
00008F56 6200 0000                  		bhi.w	Obj1D_Delete
00008F5A 4E75                       		rts	
00008F5C                            ; ===========================================================================
00008F5C                            
00008F5C                            Obj1D_Delete:				; XREF: Obj1D_Index
00008F5C 6100 0000                  		bsr.w	DeleteObject
00008F60 4E75                       		rts	
00008F62                            ; ---------------------------------------------------------------------------
00008F62                            ; Subroutine to	check if Sonic touches the object
00008F62                            ; ---------------------------------------------------------------------------
00008F62                            
00008F62                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00008F62                            
00008F62                            
00008F62                            Obj1D_ChkTouch:				; XREF: Obj1D_Action
00008F62 43F8 D000                  		lea	($FFFFD000).w,a1
00008F66 3029 0008                  		move.w	8(a1),d0
00008F6A 9068 0008                  		sub.w	8(a0),d0
00008F6E D041                       		add.w	d1,d0
00008F70 6B00                       		bmi.s	loc_8918
00008F72 D241                       		add.w	d1,d1
00008F74 B041                       		cmp.w	d1,d0
00008F76 6400                       		bcc.s	loc_8918
00008F78 3429 000C                  		move.w	$C(a1),d2
00008F7C 1229 0016                  		move.b	$16(a1),d1
00008F80 4881                       		ext.w	d1
00008F82 D242                       		add.w	d2,d1
00008F84 3028 000C                  		move.w	$C(a0),d0
00008F88 0440 0010                  		subi.w	#$10,d0
00008F8C 9041                       		sub.w	d1,d0
00008F8E 6200                       		bhi.s	loc_8918
00008F90 0C40 FFF0                  		cmpi.w	#-$10,d0
00008F94 6500                       		bcs.s	loc_8918
00008F96 70FF                       		moveq	#-1,d0
00008F98 4E75                       		rts	
00008F9A                            ; ===========================================================================
00008F9A                            
00008F9A                            loc_8918:
00008F9A 7000                       		moveq	#0,d0
00008F9C 4E75                       		rts	
00008F9E                            ; End of function Obj1D_ChkTouch
00008F9E                            
00008F9E                            ; ===========================================================================
00008F9E                            ; ---------------------------------------------------------------------------
00008F9E                            ; Sprite mappings - object 1D
00008F9E                            ; ---------------------------------------------------------------------------
00008F9E                            Map_obj1D:
00008F9E                            	include "_maps\obj1D.asm"
00008F9E                            ; ---------------------------------------------------------------------------
00008F9E                            ; Sprite mappings - object 1D
00008F9E                            ; ---------------------------------------------------------------------------
00008F9E 0000                       		dc.w byte_891E-Map_obj1D
00008FA0 04                         byte_891E:	dc.b 4
00008FA1 E807 0054 F0               		dc.b $E8, 7, 0,	$54, $F0
00008FA6 0805 005C F0               		dc.b 8,	5, 0, $5C, $F0
00008FAB E807 0054 00               		dc.b $E8, 7, 0,	$54, 0
00008FB0 0805 005C 00               		dc.b 8,	5, 0, $5C, 0
00008FB6 00                         		even
00008FB6 00                         		even
00008FB6                            
00008FB6                            ; ===========================================================================
00008FB6                            ; ---------------------------------------------------------------------------
00008FB6                            ; Object 2A - doors (SBZ)
00008FB6                            ; ---------------------------------------------------------------------------
00008FB6                            
00008FB6                            Obj2A:					; XREF: Obj_Index
00008FB6 7000                       		moveq	#0,d0
00008FB8 1028 0024                  		move.b	$24(a0),d0
00008FBC 323B 0000                  		move.w	Obj2A_Index(pc,d0.w),d1
00008FC0 4EFB 1000                  		jmp	Obj2A_Index(pc,d1.w)
00008FC4                            ; ===========================================================================
00008FC4 0000                       Obj2A_Index:	dc.w Obj2A_Main-Obj2A_Index
00008FC6 0000                       		dc.w Obj2A_OpenShut-Obj2A_Index
00008FC8                            ; ===========================================================================
00008FC8                            
00008FC8                            Obj2A_Main:				; XREF: Obj2A_Index
00008FC8 5428 0024                  		addq.b	#2,$24(a0)
00008FCC 217C 0000 0000 0004        		move.l	#Map_obj2A,4(a0)
00008FD4 317C 42E8 0002             		move.w	#$42E8,2(a0)
00008FDA 0028 0004 0001             		ori.b	#4,1(a0)
00008FE0 117C 0008 0019             		move.b	#8,$19(a0)
00008FE6 117C 0004 0018             		move.b	#4,$18(a0)
00008FEC                            
00008FEC                            Obj2A_OpenShut:				; XREF: Obj2A_Index
00008FEC 323C 0040                  		move.w	#$40,d1
00008FF0 4228 001C                  		clr.b	$1C(a0)		; use "closing"	animation
00008FF4 3038 D008                  		move.w	($FFFFD008).w,d0
00008FF8 D041                       		add.w	d1,d0
00008FFA B068 0008                  		cmp.w	8(a0),d0
00008FFE 6500                       		bcs.s	Obj2A_Animate
00009000 9041                       		sub.w	d1,d0
00009002 9041                       		sub.w	d1,d0
00009004 B068 0008                  		cmp.w	8(a0),d0
00009008 6400                       		bcc.s	Obj2A_Animate
0000900A D041                       		add.w	d1,d0
0000900C B068 0008                  		cmp.w	8(a0),d0
00009010 6400                       		bcc.s	loc_899A
00009012 0828 0000 0022             		btst	#0,$22(a0)
00009018 6600                       		bne.s	Obj2A_Animate
0000901A 6000                       		bra.s	Obj2A_Open
0000901C                            ; ===========================================================================
0000901C                            
0000901C                            loc_899A:				; XREF: Obj2A_OpenShut
0000901C 0828 0000 0022             		btst	#0,$22(a0)
00009022 6700                       		beq.s	Obj2A_Animate
00009024                            
00009024                            Obj2A_Open:				; XREF: Obj2A_OpenShut
00009024 117C 0001 001C             		move.b	#1,$1C(a0)	; use "opening"	animation
0000902A                            
0000902A                            Obj2A_Animate:				; XREF: Obj2A_OpenShut; loc_899A
0000902A 43F9 0000 0000             		lea	(Ani_obj2A).l,a1
00009030 6100 0000                  		bsr.w	AnimateSprite
00009034 4A28 001A                  		tst.b	$1A(a0)		; is the door open?
00009038 6600                       		bne.s	Obj2A_MarkAsUsed ; if yes, branch
0000903A 323C 0011                  		move.w	#$11,d1
0000903E 343C 0020                  		move.w	#$20,d2
00009042 3602                       		move.w	d2,d3
00009044 5243                       		addq.w	#1,d3
00009046 3828 0008                  		move.w	8(a0),d4
0000904A 6100 0000                  		bsr.w	SolidObject
0000904E                            
0000904E                            Obj2A_MarkAsUsed:
0000904E 6000 0000                  		bra.w	MarkObjGone
00009052                            ; ===========================================================================
00009052                            Ani_obj2A:
00009052                            	include "_anim\obj2A.asm"
00009052                            ; ---------------------------------------------------------------------------
00009052                            ; Animation script - doors (SBZ)
00009052                            ; ---------------------------------------------------------------------------
00009052 0000                       		dc.w Ani_obj2A_Shut-Ani_obj2A
00009054 0000                       		dc.w Ani_obj2A_Open-Ani_obj2A
00009056 0008 0706 0504 0302 0100+  Ani_obj2A_Shut:	dc.b 0,	8, 7, 6, 5, 4, 3, 2, 1,	0, $FE,	1
00009062 0000 0102 0304 0506 0708+  Ani_obj2A_Open:	dc.b 0,	0, 1, 2, 3, 4, 5, 6, 7,	8, $FE,	1
0000906E                            		even
0000906E                            		even
0000906E                            
0000906E                            ; ---------------------------------------------------------------------------
0000906E                            ; Sprite mappings - doors (SBZ)
0000906E                            ; ---------------------------------------------------------------------------
0000906E                            Map_obj2A:
0000906E                            	include "_maps\obj2A.asm"
0000906E                            ; ---------------------------------------------------------------------------
0000906E                            ; Sprite mappings - doors (SBZ)
0000906E                            ; ---------------------------------------------------------------------------
0000906E 0000 0000                  		dc.w byte_89FE-Map_obj2A, byte_8A09-Map_obj2A
00009072 0000 0000                  		dc.w byte_8A14-Map_obj2A, byte_8A1F-Map_obj2A
00009076 0000 0000                  		dc.w byte_8A2A-Map_obj2A, byte_8A35-Map_obj2A
0000907A 0000 0000                  		dc.w byte_8A40-Map_obj2A, byte_8A4B-Map_obj2A
0000907E 0000                       		dc.w byte_8A56-Map_obj2A
00009080 02                         byte_89FE:	dc.b 2
00009081 E007 0800 F8               		dc.b $E0, 7, 8,	0, $F8	; door closed
00009086 0007 0800 F8               		dc.b 0,	7, 8, 0, $F8
0000908B 02                         byte_8A09:	dc.b 2
0000908C DC07 0800 F8               		dc.b $DC, 7, 8,	0, $F8
00009091 0407 0800 F8               		dc.b 4,	7, 8, 0, $F8
00009096 02                         byte_8A14:	dc.b 2
00009097 D807 0800 F8               		dc.b $D8, 7, 8,	0, $F8
0000909C 0807 0800 F8               		dc.b 8,	7, 8, 0, $F8
000090A1 02                         byte_8A1F:	dc.b 2
000090A2 D407 0800 F8               		dc.b $D4, 7, 8,	0, $F8
000090A7 0C07 0800 F8               		dc.b $C, 7, 8, 0, $F8
000090AC 02                         byte_8A2A:	dc.b 2
000090AD D007 0800 F8               		dc.b $D0, 7, 8,	0, $F8
000090B2 1007 0800 F8               		dc.b $10, 7, 8,	0, $F8
000090B7 02                         byte_8A35:	dc.b 2
000090B8 CC07 0800 F8               		dc.b $CC, 7, 8,	0, $F8
000090BD 1407 0800 F8               		dc.b $14, 7, 8,	0, $F8
000090C2 02                         byte_8A40:	dc.b 2
000090C3 C807 0800 F8               		dc.b $C8, 7, 8,	0, $F8
000090C8 1807 0800 F8               		dc.b $18, 7, 8,	0, $F8
000090CD 02                         byte_8A4B:	dc.b 2
000090CE C407 0800 F8               		dc.b $C4, 7, 8,	0, $F8
000090D3 1C07 0800 F8               		dc.b $1C, 7, 8,	0, $F8
000090D8 02                         byte_8A56:	dc.b 2
000090D9 C007 0800 F8               		dc.b $C0, 7, 8,	0, $F8	; door fully open
000090DE 2007 0800 F8               		dc.b $20, 7, 8,	0, $F8
000090E4 00                         		even
000090E4 00                         		even
000090E4                            
000090E4                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000090E4                            
000090E4                            
000090E4                            Obj44_SolidWall:			; XREF: Obj44_Solid
000090E4 6100 0000                  		bsr.w	Obj44_SolidWall2
000090E8 6700                       		beq.s	loc_8AA8
000090EA 6B00 0000                  		bmi.w	loc_8AC4
000090EE 4A40                       		tst.w	d0
000090F0 6700 0000                  		beq.w	loc_8A92
000090F4 6B00                       		bmi.s	loc_8A7C
000090F6 4A69 0010                  		tst.w	$10(a1)
000090FA 6B00                       		bmi.s	loc_8A92
000090FC 6000                       		bra.s	loc_8A82
000090FE                            ; ===========================================================================
000090FE                            
000090FE                            loc_8A7C:
000090FE 4A69 0010                  		tst.w	$10(a1)
00009102 6A00                       		bpl.s	loc_8A92
00009104                            
00009104                            loc_8A82:
00009104 9169 0008                  		sub.w	d0,8(a1)
00009108 337C 0000 0014             		move.w	#0,$14(a1)
0000910E 337C 0000 0010             		move.w	#0,$10(a1)
00009114                            
00009114                            loc_8A92:
00009114 0829 0001 0022             		btst	#1,$22(a1)
0000911A 6600                       		bne.s	loc_8AB6
0000911C 08E9 0005 0022             		bset	#5,$22(a1)
00009122 08E8 0005 0022             		bset	#5,$22(a0)
00009128 4E75                       		rts	
0000912A                            ; ===========================================================================
0000912A                            
0000912A                            loc_8AA8:
0000912A 0828 0005 0022             		btst	#5,$22(a0)
00009130 6700                       		beq.s	locret_8AC2
00009132 337C 0001 001C             		move.w	#1,$1C(a1)
00009138                            
00009138                            loc_8AB6:
00009138 08A8 0005 0022             		bclr	#5,$22(a0)
0000913E 08A9 0005 0022             		bclr	#5,$22(a1)
00009144                            
00009144                            locret_8AC2:
00009144 4E75                       		rts	
00009146                            ; ===========================================================================
00009146                            
00009146                            loc_8AC4:
00009146 4A69 0012                  		tst.w	$12(a1)
0000914A 6A00                       		bpl.s	locret_8AD8
0000914C 4A43                       		tst.w	d3
0000914E 6A00                       		bpl.s	locret_8AD8
00009150 9769 000C                  		sub.w	d3,$C(a1)
00009154 337C 0000 0012             		move.w	#0,$12(a1)
0000915A                            
0000915A                            locret_8AD8:
0000915A 4E75                       		rts	
0000915C                            ; End of function Obj44_SolidWall
0000915C                            
0000915C                            
0000915C                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000915C                            
0000915C                            
0000915C                            Obj44_SolidWall2:			; XREF: Obj44_SolidWall
0000915C 43F8 D000                  		lea	($FFFFD000).w,a1
00009160 3029 0008                  		move.w	8(a1),d0
00009164 9068 0008                  		sub.w	8(a0),d0
00009168 D041                       		add.w	d1,d0
0000916A 6B00                       		bmi.s	loc_8B48
0000916C 3601                       		move.w	d1,d3
0000916E D643                       		add.w	d3,d3
00009170 B043                       		cmp.w	d3,d0
00009172 6200                       		bhi.s	loc_8B48
00009174 1629 0016                  		move.b	$16(a1),d3
00009178 4883                       		ext.w	d3
0000917A D443                       		add.w	d3,d2
0000917C 3629 000C                  		move.w	$C(a1),d3
00009180 9668 000C                  		sub.w	$C(a0),d3
00009184 D642                       		add.w	d2,d3
00009186 6B00                       		bmi.s	loc_8B48
00009188 3802                       		move.w	d2,d4
0000918A D844                       		add.w	d4,d4
0000918C B644                       		cmp.w	d4,d3
0000918E 6400                       		bcc.s	loc_8B48
00009190 4A38 F7C8                  		tst.b	($FFFFF7C8).w
00009194 6B00                       		bmi.s	loc_8B48
00009196 0C38 0006 D024             		cmpi.b	#6,($FFFFD024).w
0000919C 6400                       		bcc.s	loc_8B48
0000919E 4A78 FE08                  		tst.w	($FFFFFE08).w
000091A2 6600                       		bne.s	loc_8B48
000091A4 3A00                       		move.w	d0,d5
000091A6 B240                       		cmp.w	d0,d1
000091A8 6400                       		bcc.s	loc_8B30
000091AA D241                       		add.w	d1,d1
000091AC 9041                       		sub.w	d1,d0
000091AE 3A00                       		move.w	d0,d5
000091B0 4445                       		neg.w	d5
000091B2                            
000091B2                            loc_8B30:
000091B2 3203                       		move.w	d3,d1
000091B4 B443                       		cmp.w	d3,d2
000091B6 6400                       		bcc.s	loc_8B3C
000091B8 9644                       		sub.w	d4,d3
000091BA 3203                       		move.w	d3,d1
000091BC 4441                       		neg.w	d1
000091BE                            
000091BE                            loc_8B3C:
000091BE BA41                       		cmp.w	d1,d5
000091C0 6200                       		bhi.s	loc_8B44
000091C2 7801                       		moveq	#1,d4
000091C4 4E75                       		rts	
000091C6                            ; ===========================================================================
000091C6                            
000091C6                            loc_8B44:
000091C6 78FF                       		moveq	#-1,d4
000091C8 4E75                       		rts	
000091CA                            ; ===========================================================================
000091CA                            
000091CA                            loc_8B48:
000091CA 7800                       		moveq	#0,d4
000091CC 4E75                       		rts	
000091CE                            ; End of function Obj44_SolidWall2
000091CE                            
000091CE                            ; ===========================================================================
000091CE                            ; ---------------------------------------------------------------------------
000091CE                            ; Object 1E - Ball Hog enemy (SBZ)
000091CE                            ; ---------------------------------------------------------------------------
000091CE                            
000091CE                            Obj1E:					; XREF: Obj_Index
000091CE 7000                       		moveq	#0,d0
000091D0 1028 0024                  		move.b	$24(a0),d0
000091D4 323B 0000                  		move.w	Obj1E_Index(pc,d0.w),d1
000091D8 4EFB 1000                  		jmp	Obj1E_Index(pc,d1.w)
000091DC                            ; ===========================================================================
000091DC 0000                       Obj1E_Index:	dc.w Obj1E_Main-Obj1E_Index
000091DE 0000                       		dc.w Obj1E_Action-Obj1E_Index
000091E0                            ; ===========================================================================
000091E0                            
000091E0                            Obj1E_Main:				; XREF: Obj1E_Index
000091E0 117C 0013 0016             		move.b	#$13,$16(a0)
000091E6 117C 0008 0017             		move.b	#8,$17(a0)
000091EC 217C 0000 0000 0004        		move.l	#Map_obj1E,4(a0)
000091F4 317C 2302 0002             		move.w	#$2302,2(a0)
000091FA 117C 0004 0001             		move.b	#4,1(a0)
00009200 117C 0004 0018             		move.b	#4,$18(a0)
00009206 117C 0005 0020             		move.b	#5,$20(a0)
0000920C 117C 000C 0019             		move.b	#$C,$19(a0)
00009212 6100 0000                  		bsr.w	ObjectFall
00009216 4EB9 0000 0000             		jsr	ObjHitFloor
0000921C 4A41                       		tst.w	d1
0000921E 6A00                       		bpl.s	locret_8BAC
00009220 D368 000C                  		add.w	d1,$C(a0)
00009224 317C 0000 0012             		move.w	#0,$12(a0)
0000922A 5428 0024                  		addq.b	#2,$24(a0)
0000922E                            
0000922E                            locret_8BAC:
0000922E 4E75                       		rts	
00009230                            ; ===========================================================================
00009230                            
00009230                            Obj1E_Action:				; XREF: Obj1E_Index
00009230 43F9 0000 0000             		lea	(Ani_obj1E).l,a1
00009236 6100 0000                  		bsr.w	AnimateSprite
0000923A 0C28 0001 001A             		cmpi.b	#1,$1A(a0)	; is final frame (01) displayed?
00009240 6600                       		bne.s	Obj1E_SetBall	; if not, branch
00009242 4A28 0032                  		tst.b	$32(a0)		; is it	set to launch cannonball?
00009246 6700                       		beq.s	Obj1E_MakeBall	; if yes, branch
00009248 6000                       		bra.s	Obj1E_MarkAsGone
0000924A                            ; ===========================================================================
0000924A                            
0000924A                            Obj1E_SetBall:				; XREF: Obj1E_Action
0000924A 4228 0032                  		clr.b	$32(a0)		; set to launch	cannonball
0000924E                            
0000924E                            Obj1E_MarkAsGone:			; XREF: Obj1E_Action
0000924E 6000 0000                  		bra.w	MarkObjGone
00009252                            ; ===========================================================================
00009252                            
00009252                            Obj1E_MakeBall:				; XREF: Obj1E_Action
00009252 117C 0001 0032             		move.b	#1,$32(a0)
00009258 6100 0000                  		bsr.w	SingleObjLoad
0000925C 6600                       		bne.s	loc_8C1A
0000925E 12BC 0020                  		move.b	#$20,0(a1)	; load cannonball object ($20)
00009262 3368 0008 0008             		move.w	8(a0),8(a1)
00009268 3368 000C 000C             		move.w	$C(a0),$C(a1)
0000926E 337C FF00 0010             		move.w	#-$100,$10(a1)	; cannonball bounces to	the left
00009274 337C 0000 0012             		move.w	#0,$12(a1)
0000927A 70FC                       		moveq	#-4,d0
0000927C 0828 0000 0022             		btst	#0,$22(a0)	; is Ball Hog facing right?
00009282 6700                       		beq.s	loc_8C0A	; if not, branch
00009284 4440                       		neg.w	d0
00009286 4469 0010                  		neg.w	$10(a1)		; cannonball bounces to	the right
0000928A                            
0000928A                            loc_8C0A:
0000928A D169 0008                  		add.w	d0,8(a1)
0000928E 0669 000C 000C             		addi.w	#$C,$C(a1)
00009294 1368 0028 0028             		move.b	$28(a0),$28(a1)	; copy object type from	Ball Hog
0000929A                            
0000929A                            loc_8C1A:
0000929A 60B2                       		bra.s	Obj1E_MarkAsGone
0000929C                            ; ===========================================================================
0000929C                            ; ---------------------------------------------------------------------------
0000929C                            ; Object 20 - cannonball that Ball Hog throws (SBZ)
0000929C                            ; ---------------------------------------------------------------------------
0000929C                            
0000929C                            Obj20:					; XREF: Obj_Index
0000929C 7000                       		moveq	#0,d0
0000929E 1028 0024                  		move.b	$24(a0),d0
000092A2 323B 0000                  		move.w	Obj20_Index(pc,d0.w),d1
000092A6 4EFB 1000                  		jmp	Obj20_Index(pc,d1.w)
000092AA                            ; ===========================================================================
000092AA 0000                       Obj20_Index:	dc.w Obj20_Main-Obj20_Index
000092AC 0000                       		dc.w Obj20_Bounce-Obj20_Index
000092AE                            ; ===========================================================================
000092AE                            
000092AE                            Obj20_Main:				; XREF: Obj20_Index
000092AE 5428 0024                  		addq.b	#2,$24(a0)
000092B2 117C 0007 0016             		move.b	#7,$16(a0)
000092B8 217C 0000 0000 0004        		move.l	#Map_obj1E,4(a0)
000092C0 317C 2302 0002             		move.w	#$2302,2(a0)
000092C6 117C 0004 0001             		move.b	#4,1(a0)
000092CC 117C 0003 0018             		move.b	#3,$18(a0)
000092D2 117C 0087 0020             		move.b	#$87,$20(a0)
000092D8 117C 0008 0019             		move.b	#8,$19(a0)
000092DE 7000                       		moveq	#0,d0
000092E0 1028 0028                  		move.b	$28(a0),d0	; move object type to d0
000092E4 C0FC 003C                  		mulu.w	#60,d0		; multiply by 60 frames	(1 second)
000092E8 3140 0030                  		move.w	d0,$30(a0)	; set explosion	time
000092EC 117C 0004 001A             		move.b	#4,$1A(a0)
000092F2                            
000092F2                            Obj20_Bounce:				; XREF: Obj20_Index
000092F2 4EB9 0000 0000             		jsr	ObjectFall
000092F8 4A68 0012                  		tst.w	$12(a0)
000092FC 6B00                       		bmi.s	Obj20_ChkExplode
000092FE 4EB9 0000 0000             		jsr	ObjHitFloor
00009304 4A41                       		tst.w	d1
00009306 6A00                       		bpl.s	Obj20_ChkExplode
00009308 D368 000C                  		add.w	d1,$C(a0)
0000930C 317C FD00 0012             		move.w	#-$300,$12(a0)
00009312 4A03                       		tst.b	d3
00009314 6700                       		beq.s	Obj20_ChkExplode
00009316 6B00                       		bmi.s	loc_8CA4
00009318 4A68 0010                  		tst.w	$10(a0)
0000931C 6A00                       		bpl.s	Obj20_ChkExplode
0000931E 4468 0010                  		neg.w	$10(a0)
00009322 6000                       		bra.s	Obj20_ChkExplode
00009324                            ; ===========================================================================
00009324                            
00009324                            loc_8CA4:				; XREF: Obj20_Bounce
00009324 4A68 0010                  		tst.w	$10(a0)
00009328 6B00                       		bmi.s	Obj20_ChkExplode
0000932A 4468 0010                  		neg.w	$10(a0)
0000932E                            
0000932E                            Obj20_ChkExplode:			; XREF: Obj20_Bounce
0000932E 5368 0030                  		subq.w	#1,$30(a0)	; subtract 1 from explosion time
00009332 6A00                       		bpl.s	Obj20_Animate	; if time is > 0, branch
00009334 10BC 0024                  		move.b	#$24,0(a0)
00009338 10BC 003F                  		move.b	#$3F,0(a0)	; change object	to an explosion	($3F)
0000933C 117C 0000 0024             		move.b	#0,$24(a0)	; reset	routine	counter
00009342 6000 0000                  		bra.w	Obj3F		; jump to explosion code
00009346                            ; ===========================================================================
00009346                            
00009346                            Obj20_Animate:				; XREF: Obj20_ChkExplode
00009346 5328 001E                  		subq.b	#1,$1E(a0)	; subtract 1 from frame	duration
0000934A 6A00                       		bpl.s	Obj20_Display
0000934C 117C 0005 001E             		move.b	#5,$1E(a0)	; set frame duration to	5 frames
00009352 0868 0000 001A             		bchg	#0,$1A(a0)	; change frame
00009358                            
00009358                            Obj20_Display:
00009358 6100 0000                  		bsr.w	DisplaySprite
0000935C 3038 F72E                  		move.w	($FFFFF72E).w,d0
00009360 0640 00E0                  		addi.w	#$E0,d0
00009364 B068 000C                  		cmp.w	$C(a0),d0	; has object fallen off	the level?
00009368 6500 0000                  		bcs.w	DeleteObject	; if yes, branch
0000936C 4E75                       		rts	
0000936E                            ; ===========================================================================
0000936E                            ; ---------------------------------------------------------------------------
0000936E                            ; Object 24 - explosion	from a destroyed monitor
0000936E                            ; ---------------------------------------------------------------------------
0000936E                            
0000936E                            Obj24:					; XREF: Obj_Index
0000936E 7000                       		moveq	#0,d0
00009370 1028 0024                  		move.b	$24(a0),d0
00009374 323B 0000                  		move.w	Obj24_Index(pc,d0.w),d1
00009378 4EFB 1000                  		jmp	Obj24_Index(pc,d1.w)
0000937C                            ; ===========================================================================
0000937C 0000                       Obj24_Index:	dc.w Obj24_Main-Obj24_Index
0000937E 0000                       		dc.w Obj24_Animate-Obj24_Index
00009380                            ; ===========================================================================
00009380                            
00009380                            Obj24_Main:				; XREF: Obj24_Index
00009380 5428 0024                  		addq.b	#2,$24(a0)
00009384 217C 0000 0000 0004        		move.l	#Map_obj24,4(a0)
0000938C 317C 041C 0002             		move.w	#$41C,2(a0)
00009392 117C 0004 0001             		move.b	#4,1(a0)
00009398 117C 0001 0018             		move.b	#1,$18(a0)
0000939E 117C 0000 0020             		move.b	#0,$20(a0)
000093A4 117C 000C 0019             		move.b	#$C,$19(a0)
000093AA 117C 0009 001E             		move.b	#9,$1E(a0)
000093B0 117C 0000 001A             		move.b	#0,$1A(a0)
000093B6 303C 00A5                  		move.w	#$A5,d0
000093BA 4EB9 0000 15C0             		jsr	(PlaySound_Special).l ;	play explosion sound
000093C0                            
000093C0                            Obj24_Animate:				; XREF: Obj24_Index
000093C0 5328 001E                  		subq.b	#1,$1E(a0)	; subtract 1 from frame	duration
000093C4 6A00                       		bpl.s	Obj24_Display
000093C6 117C 0009 001E             		move.b	#9,$1E(a0)	; set frame duration to	9 frames
000093CC 5228 001A                  		addq.b	#1,$1A(a0)	; next frame
000093D0 0C28 0004 001A             		cmpi.b	#4,$1A(a0)	; is the final frame (04) displayed?
000093D6 6700 0000                  		beq.w	DeleteObject	; if yes, branch
000093DA                            
000093DA                            Obj24_Display:
000093DA 6000 0000                  		bra.w	DisplaySprite
000093DE                            ; ===========================================================================
000093DE                            ; ---------------------------------------------------------------------------
000093DE                            ; Object 27 - explosion	from a destroyed enemy
000093DE                            ; ---------------------------------------------------------------------------
000093DE                            
000093DE                            Obj27:					; XREF: Obj_Index
000093DE 7000                       		moveq	#0,d0
000093E0 1028 0024                  		move.b	$24(a0),d0
000093E4 323B 0000                  		move.w	Obj27_Index(pc,d0.w),d1
000093E8 4EFB 1000                  		jmp	Obj27_Index(pc,d1.w)
000093EC                            ; ===========================================================================
000093EC 0000                       Obj27_Index:	dc.w Obj27_LoadAnimal-Obj27_Index
000093EE 0000                       		dc.w Obj27_Main-Obj27_Index
000093F0 0000                       		dc.w Obj27_Animate-Obj27_Index
000093F2                            ; ===========================================================================
000093F2                            
000093F2                            Obj27_LoadAnimal:			; XREF: Obj27_Index
000093F2 5428 0024                  		addq.b	#2,$24(a0)
000093F6 6100 0000                  		bsr.w	SingleObjLoad
000093FA 6600                       		bne.s	Obj27_Main
000093FC 12BC 0028                  		move.b	#$28,0(a1)	; load animal object
00009400 3368 0008 0008             		move.w	8(a0),8(a1)
00009406 3368 000C 000C             		move.w	$C(a0),$C(a1)
0000940C 3368 003E 003E             		move.w	$3E(a0),$3E(a1)
00009412                            
00009412                            Obj27_Main:				; XREF: Obj27_Index
00009412 5428 0024                  		addq.b	#2,$24(a0)
00009416 217C 0000 0000 0004        		move.l	#Map_obj27,4(a0)
0000941E 317C 05A0 0002             		move.w	#$5A0,2(a0)
00009424 117C 0004 0001             		move.b	#4,1(a0)
0000942A 117C 0001 0018             		move.b	#1,$18(a0)
00009430 117C 0000 0020             		move.b	#0,$20(a0)
00009436 117C 000C 0019             		move.b	#$C,$19(a0)
0000943C                            		; move.b	#7,$1E(a0)	; set frame duration to	7 frames
0000943C 117C 000E 001E             		move.b	#$E,$1E(a0)	; GMZ
00009442 117C 0000 001A             		move.b	#0,$1A(a0)
00009448 303C 00C1                  		move.w	#$C1,d0
0000944C 4EB9 0000 15C0             		jsr	(PlaySound_Special).l ;	play breaking enemy sound
00009452                            
00009452 45F9 0000 0000             		lea	(Obj27_ExplosionXYSpd).l,a2	; GMZ: Get Explosion X/Y Speeds according to subtype
00009458 1028 0028                  		move.b	$28(a0),d0
0000945C 3172 0000 0010             		move.w	(a2,d0.w),$10(a0)
00009462 3172 0002 0012             		move.w	2(a2,d0.w),$12(a0)
00009468                            
00009468                            Obj27_Animate:				; XREF: Obj27_Index
00009468 5328 001E                  		subq.b	#1,$1E(a0)	; subtract 1 from frame	duration
0000946C 6A00                       		bpl.s	Obj27_Display
0000946E                            		; move.b	#7,$1E(a0)	; set frame duration to	7 frames
0000946E 117C 000E 001E             		move.b	#$E,$1E(a0)	; GMZ
00009474 5228 001A                  		addq.b	#1,$1A(a0)	; next frame
00009478 0C28 0005 001A             		cmpi.b	#5,$1A(a0)	; is the final frame (05) displayed?
0000947E 6700 0000                  		beq.w	DeleteObject	; if yes, branch
00009482                            
00009482                            Obj27_Display:
00009482 4EB9 0000 0000             		jsr	SpeedToPos	; GMZ
00009488 0668 0038 0012             		addi.w	#$38,$12(a0)	; GMZ: Explosion Gravity
0000948E 6000 0000                  		bra.w	DisplaySprite
00009492                            ; ===========================================================================
00009492                            ; ---------------------------------------------------------------------------
00009492                            Obj27_ExplosionXYSpd:
00009492                            		; dc.w	-$350, -$300	; Left
00009492                            		; dc.w	-$200, -$450	; Near middle (left)
00009492                            		; dc.w	0, -$500	; Middle
00009492                            		; dc.w	$200, -$450	; Near middle (right)
00009492                            		; dc.w	$350, -$300	; Right
00009492                            
00009492 FEB0 FC00                  		dc.w	-$150, -$400	; Left
00009496 FF00 FAB0                  		dc.w	-$100, -$550	; Near middle (left)
0000949A 0000 FA00                  		dc.w	0, -$600	; Middle
0000949E 0100 FAB0                  		dc.w	$100, -$550	; Near middle (right)
000094A2 0150 FC00                  		dc.w	$150, -$400	; Right
000094A6                            
000094A6 6869 2068 656C 6C6F 2068+  		dc.b	"hi hello hru -garblemarden"
000094C0                            ; ---------------------------------------------------------------------------
000094C0                            ; Object 3F - explosion	from a destroyed boss, bomb or cannonball
000094C0                            ; ---------------------------------------------------------------------------
000094C0                            
000094C0                            Obj3F:					; XREF: Obj_Index
000094C0 7000                       		moveq	#0,d0
000094C2 1028 0024                  		move.b	$24(a0),d0
000094C6 323B 0000                  		move.w	Obj3F_Index(pc,d0.w),d1
000094CA 4EFB 1000                  		jmp	Obj3F_Index(pc,d1.w)
000094CE                            ; ===========================================================================
000094CE 0000                       Obj3F_Index:	dc.w Obj3F_Main-Obj3F_Index
000094D0 FF9A                       		dc.w Obj27_Animate-Obj3F_Index
000094D2                            ; ===========================================================================
000094D2                            
000094D2                            Obj3F_Main:				; XREF: Obj3F_Index
000094D2 5428 0024                  		addq.b	#2,$24(a0)
000094D6 217C 0000 0000 0004        		move.l	#Map_obj3F,4(a0)
000094DE 317C 05A0 0002             		move.w	#$5A0,2(a0)
000094E4 117C 0004 0001             		move.b	#4,1(a0)
000094EA 117C 0001 0018             		move.b	#1,$18(a0)
000094F0 117C 0000 0020             		move.b	#0,$20(a0)
000094F6 117C 000C 0019             		move.b	#$C,$19(a0)
000094FC 117C 0007 001E             		move.b	#7,$1E(a0)
00009502 117C 0000 001A             		move.b	#0,$1A(a0)
00009508 303C 00C4                  		move.w	#$C4,d0
0000950C 4EF9 0000 15C0             		jmp	(PlaySound_Special).l ;	play exploding bomb sound
00009512                            ; ===========================================================================
00009512                            Ani_obj1E:
00009512                            	include "_anim\obj1E.asm"
00009512                            ; ---------------------------------------------------------------------------
00009512                            ; Animation script - doors (SBZ)
00009512                            ; ---------------------------------------------------------------------------
00009512 0000                       		dc.w byte_8E4A-Ani_obj1E
00009514 0900 0002 0203 0200 0002+  byte_8E4A:	dc.b 9,	0, 0, 2, 2, 3, 2, 0, 0,	2, 2, 3, 2, 0, 0, 2, 2, 3, 2, 0, 0, 1, $FF
0000952C 00                         		even
0000952C 00                         		even
0000952C                            
0000952C                            ; ---------------------------------------------------------------------------
0000952C                            ; Sprite mappings - Ball Hog enemy (SBZ)
0000952C                            ; ---------------------------------------------------------------------------
0000952C                            Map_obj1E:
0000952C                            	include "_maps\obj1E.asm"
0000952C                            Map_a7ad:
0000952C 0000                       Map_a7ad_0: 	dc.w Map_a7ad_C-Map_a7ad
0000952E 0000                       Map_a7ad_2: 	dc.w Map_a7ad_17-Map_a7ad
00009530 0000                       Map_a7ad_4: 	dc.w Map_a7ad_22-Map_a7ad
00009532 0000                       Map_a7ad_6: 	dc.w Map_a7ad_2D-Map_a7ad
00009534 0000                       Map_a7ad_8: 	dc.w Map_a7ad_38-Map_a7ad
00009536 0000                       Map_a7ad_A: 	dc.w Map_a7ad_43-Map_a7ad
00009538 02                         Map_a7ad_C: 	dc.b $2
00009539 EF09 0000 F4               	dc.b $EF, $9, $0, $0, $F4
0000953E FF0A 0006 F4               	dc.b $FF, $A, $0, $6, $F4
00009543 02                         Map_a7ad_17: 	dc.b $2
00009544 EF09 0000 F4               	dc.b $EF, $9, $0, $0, $F4
00009549 FF0A 0006 F4               	dc.b $FF, $A, $0, $6, $F4
0000954E 02                         Map_a7ad_22: 	dc.b $2
0000954F F409 0000 F4               	dc.b $F4, $9, $0, $0, $F4
00009554 0409 0018 F4               	dc.b $4, $9, $0, $18, $F4
00009559 02                         Map_a7ad_2D: 	dc.b $2
0000955A E409 0000 F4               	dc.b $E4, $9, $0, $0, $F4
0000955F F40A 001E F4               	dc.b $F4, $A, $0, $1E, $F4
00009564 02                         Map_a7ad_38: 	dc.b $2
00009565 F805 0027 F8               	dc.b $F8, $5, $0, $27, $F8
0000956A E805 000F F8               	dc.b $E8, $5, $0, $F, $F8
0000956F 02                         Map_a7ad_43: 	dc.b $2
00009570 F805 002B F8               	dc.b $F8, $5, $0, $2B, $F8
00009575 E805 0013 F8               	dc.b $E8, $5, $0, $13, $F8
0000957A                            	even
0000957A                            	even
0000957A                            
0000957A                            ; ---------------------------------------------------------------------------
0000957A                            ; Sprite mappings - explosion
0000957A                            ; ---------------------------------------------------------------------------
0000957A                            Map_obj24:
0000957A                            	include "_maps\obj24.asm"
0000957A                            ; ---------------------------------------------------------------------------
0000957A                            ; Sprite mappings - explosion
0000957A                            ; ---------------------------------------------------------------------------
0000957A 0000 0000                  		dc.w byte_8EAE-Map_obj24, byte_8EB4-Map_obj24
0000957E 0000 0000                  		dc.w byte_8EBA-Map_obj24, byte_8EC0-Map_obj24
00009582 01                         byte_8EAE:	dc.b 1
00009583 F40A 0000 F4               		dc.b $F4, $A, 0, 0, $F4
00009588 01                         byte_8EB4:	dc.b 1
00009589 F40A 0009 F4               		dc.b $F4, $A, 0, 9, $F4
0000958E 01                         byte_8EBA:	dc.b 1
0000958F F40A 0012 F4               		dc.b $F4, $A, 0, $12, $F4
00009594 01                         byte_8EC0:	dc.b 1
00009595 F40A 001B F4               		dc.b $F4, $A, 0, $1B, $F4
0000959A                            		even
0000959A                            		even
0000959A                            
0000959A                            ; ---------------------------------------------------------------------------
0000959A                            ; Sprite mappings - explosion
0000959A                            ; ---------------------------------------------------------------------------
0000959A 0000 0000                  Map_obj27:	dc.w byte_8ED0-Map_obj27, byte_8ED6-Map_obj27
0000959E 0000 0000                  		dc.w byte_8EDC-Map_obj27, byte_8EE2-Map_obj27
000095A2 0000                       		dc.w byte_8EF7-Map_obj27
000095A4 01                         byte_8ED0:	dc.b 1
000095A5 F809 0000 F4               		dc.b $F8, 9, 0,	0, $F4
000095AA 01                         byte_8ED6:	dc.b 1
000095AB F00F 0006 F0               		dc.b $F0, $F, 0, 6, $F0
000095B0 01                         byte_8EDC:	dc.b 1
000095B1 F00F 0016 F0               		dc.b $F0, $F, 0, $16, $F0
000095B6 04                         byte_8EE2:	dc.b 4
000095B7 EC0A 0026 EC               		dc.b $EC, $A, 0, $26, $EC
000095BC EC05 002F 04               		dc.b $EC, 5, 0,	$2F, 4
000095C1 0405 182F EC               		dc.b 4,	5, $18,	$2F, $EC
000095C6 FC0A 1826 FC               		dc.b $FC, $A, $18, $26,	$FC
000095CB 04                         byte_8EF7:	dc.b 4
000095CC EC0A 0033 EC               		dc.b $EC, $A, 0, $33, $EC
000095D1 EC05 003C 04               		dc.b $EC, 5, 0,	$3C, 4
000095D6 0405 183C EC               		dc.b 4,	5, $18,	$3C, $EC
000095DB FC0A 1833 FC               		dc.b $FC, $A, $18, $33,	$FC
000095E0                            		even
000095E0                            ; ---------------------------------------------------------------------------
000095E0                            ; Sprite mappings - explosion from when	a boss is destroyed
000095E0                            ; ---------------------------------------------------------------------------
000095E0 FFC4                       Map_obj3F:	dc.w byte_8ED0-Map_obj3F
000095E2 0000                       		dc.w byte_8F16-Map_obj3F
000095E4 0000                       		dc.w byte_8F1C-Map_obj3F
000095E6 FFD6                       		dc.w byte_8EE2-Map_obj3F
000095E8 FFEB                       		dc.w byte_8EF7-Map_obj3F
000095EA 01                         byte_8F16:	dc.b 1
000095EB F00F 0040 F0               		dc.b $F0, $F, 0, $40, $F0
000095F0 01                         byte_8F1C:	dc.b 1
000095F1 F00F 0050 F0               		dc.b $F0, $F, 0, $50, $F0
000095F6                            		even
000095F6                            ; ===========================================================================
000095F6                            ; ---------------------------------------------------------------------------
000095F6                            ; Object 28 - animals
000095F6                            ; ---------------------------------------------------------------------------
000095F6                            
000095F6                            Obj28:					; XREF: Obj_Index
000095F6 7000                       		moveq	#0,d0
000095F8 1028 0024                  		move.b	$24(a0),d0
000095FC 323B 0000                  		move.w	Obj28_Index(pc,d0.w),d1
00009600 4EFB 1000                  		jmp	Obj28_Index(pc,d1.w)
00009604                            ; ===========================================================================
00009604 0000 0000                  Obj28_Index:	dc.w Obj28_Ending-Obj28_Index, loc_912A-Obj28_Index
00009608 0000 0000                  		dc.w loc_9184-Obj28_Index, loc_91C0-Obj28_Index
0000960C 0000 0000                  		dc.w loc_9184-Obj28_Index, loc_9184-Obj28_Index
00009610 0000 0000                  		dc.w loc_9184-Obj28_Index, loc_91C0-Obj28_Index
00009614 0000 0000                  		dc.w loc_9184-Obj28_Index, loc_9240-Obj28_Index
00009618 0000 0000                  		dc.w loc_9260-Obj28_Index, loc_9260-Obj28_Index
0000961C 0000 0000                  		dc.w loc_9280-Obj28_Index, loc_92BA-Obj28_Index
00009620 0000 0000                  		dc.w loc_9314-Obj28_Index, loc_9332-Obj28_Index
00009624 0000 0000                  		dc.w loc_9314-Obj28_Index, loc_9332-Obj28_Index
00009628 0000 0000                  		dc.w loc_9314-Obj28_Index, loc_9370-Obj28_Index
0000962C 0000                       		dc.w loc_92D6-Obj28_Index
0000962E                            
0000962E 0005 0203 0603 0405 0401+  Obj28_VarIndex:	dc.b 0,	5, 2, 3, 6, 3, 4, 5, 4,	1, 0, 1
0000963A                            
0000963A FE00 FC00                  Obj28_Variables:dc.w $FE00, $FC00
0000963E 0000 0000                  		dc.l Map_obj28
00009642 FE00 FD00                  		dc.w $FE00, $FD00	; horizontal speed, vertical speed
00009646 0000 0000                  		dc.l Map_obj28a		; mappings address
0000964A FE80 FD00                  		dc.w $FE80, $FD00
0000964E 0000 0000                  		dc.l Map_obj28
00009652 FEC0 FE80                  		dc.w $FEC0, $FE80
00009656 0000 0000                  		dc.l Map_obj28a
0000965A FE40 FD00                  		dc.w $FE40, $FD00
0000965E 0000 0000                  		dc.l Map_obj28b
00009662 FD00 FC00                  		dc.w $FD00, $FC00
00009666 0000 0000                  		dc.l Map_obj28a
0000966A FD80 FC80                  		dc.w $FD80, $FC80
0000966E 0000 0000                  		dc.l Map_obj28b
00009672                            
00009672 FBC0 FC00 FBC0 FC00 FBC0+  Obj28_EndSpeed:	dc.w $FBC0, $FC00, $FBC0, $FC00, $FBC0,	$FC00, $FD00, $FC00
00009682 FD00 FC00 FE80 FD00 FE80+  		dc.w $FD00, $FC00, $FE80, $FD00, $FE80,	$FD00, $FEC0, $FE80
00009692 FE40 FD00 FE00 FD00 FD80+  		dc.w $FE40, $FD00, $FE00, $FD00, $FD80,	$FC80
0000969E                            
0000969E 0000 0000 0000 0000 0000+  Obj28_EndMap:	dc.l Map_obj28a, Map_obj28a, Map_obj28a, Map_obj28, Map_obj28
000096B2 0000 0000 0000 0000 0000+  		dc.l Map_obj28,	Map_obj28, Map_obj28a, Map_obj28b, Map_obj28a
000096C6 0000 0000                  		dc.l Map_obj28b
000096CA                            
000096CA 05A5 05A5 05A5 0553 0553+  Obj28_EndVram:	dc.w $5A5, $5A5, $5A5, $553, $553, $573, $573, $585, $593
000096DC 0565 05B3                  		dc.w $565, $5B3
000096E0                            ; ===========================================================================
000096E0                            
000096E0                            Obj28_Ending:				; XREF: Obj28_Index
000096E0 4A28 0028                  		tst.b	$28(a0)		; did animal come from a destroyed enemy?
000096E4 6700 0000                  		beq.w	Obj28_FromEnemy	; if yes, branch
000096E8 7000                       		moveq	#0,d0
000096EA 1028 0028                  		move.b	$28(a0),d0	; move object type to d0
000096EE D040                       		add.w	d0,d0		; multiply d0 by 2
000096F0 1140 0024                  		move.b	d0,$24(a0)	; move d0 to routine counter
000096F4 0440 0014                  		subi.w	#$14,d0
000096F8 317B 00D0 0002             		move.w	Obj28_EndVram(pc,d0.w),2(a0)
000096FE D040                       		add.w	d0,d0
00009700 217B 009C 0004             		move.l	Obj28_EndMap(pc,d0.w),4(a0)
00009706 43FA FF6A                  		lea	Obj28_EndSpeed(pc),a1
0000970A 3171 0000 0032             		move.w	(a1,d0.w),$32(a0) ; load horizontal speed
00009710 3171 0000 0010             		move.w	(a1,d0.w),$10(a0)
00009716 3171 0002 0034             		move.w	2(a1,d0.w),$34(a0) ; load vertical speed
0000971C 3171 0002 0012             		move.w	2(a1,d0.w),$12(a0)
00009722 117C 000C 0016             		move.b	#$C,$16(a0)
00009728 117C 0004 0001             		move.b	#4,1(a0)
0000972E 08E8 0000 0001             		bset	#0,1(a0)
00009734 117C 0006 0018             		move.b	#6,$18(a0)
0000973A 117C 0008 0019             		move.b	#8,$19(a0)
00009740 117C 0007 001E             		move.b	#7,$1E(a0)
00009746 6000 0000                  		bra.w	DisplaySprite
0000974A                            ; ===========================================================================
0000974A                            
0000974A                            Obj28_FromEnemy:			; XREF: Obj28_Ending
0000974A 5428 0024                  		addq.b	#2,$24(a0)
0000974E 6100 9536                  		bsr.w	RandomNumber
00009752 0240 0001                  		andi.w	#1,d0
00009756 7200                       		moveq	#0,d1
00009758 1238 FE10                  		move.b	($FFFFFE10).w,d1
0000975C D241                       		add.w	d1,d1
0000975E D240                       		add.w	d0,d1
00009760 43FA FECC                  		lea	Obj28_VarIndex(pc),a1
00009764 1031 1000                  		move.b	(a1,d1.w),d0
00009768 1140 0030                  		move.b	d0,$30(a0)
0000976C E748                       		lsl.w	#3,d0
0000976E 43FA FECA                  		lea	Obj28_Variables(pc),a1
00009772 D2C0                       		adda.w	d0,a1
00009774 3159 0032                  		move.w	(a1)+,$32(a0)	; load horizontal speed
00009778 3159 0034                  		move.w	(a1)+,$34(a0)	; load vertical	speed
0000977C 2159 0004                  		move.l	(a1)+,4(a0)	; load mappings
00009780 317C 0580 0002             		move.w	#$580,2(a0)	; VRAM setting for 1st animal
00009786 0828 0000 0030             		btst	#0,$30(a0)	; is 1st animal	used?
0000978C 6700                       		beq.s	loc_90C0	; if yes, branch
0000978E 317C 0592 0002             		move.w	#$592,2(a0)	; VRAM setting for 2nd animal
00009794                            
00009794                            loc_90C0:
00009794 117C 000C 0016             		move.b	#$C,$16(a0)
0000979A 117C 0004 0001             		move.b	#4,1(a0)
000097A0 08E8 0000 0001             		bset	#0,1(a0)
000097A6 117C 0006 0018             		move.b	#6,$18(a0)
000097AC 117C 0008 0019             		move.b	#8,$19(a0)
000097B2 117C 0007 001E             		move.b	#7,$1E(a0)
000097B8 117C 0002 001A             		move.b	#2,$1A(a0)
000097BE 317C FC00 0012             		move.w	#-$400,$12(a0)
000097C4 4A38 F7A7                  		tst.b	($FFFFF7A7).w
000097C8 6600                       		bne.s	loc_911C
000097CA 6100 0000                  		bsr.w	SingleObjLoad
000097CE 6600                       		bne.s	Obj28_Display
000097D0 12BC 0029                  		move.b	#$29,0(a1)	; load points object
000097D4 3368 0008 0008             		move.w	8(a0),8(a1)
000097DA 3368 000C 000C             		move.w	$C(a0),$C(a1)
000097E0 3028 003E                  		move.w	$3E(a0),d0
000097E4 E248                       		lsr.w	#1,d0
000097E6 1340 001A                  		move.b	d0,$1A(a1)
000097EA                            
000097EA                            Obj28_Display:
000097EA 6000 0000                  		bra.w	DisplaySprite
000097EE                            ; ===========================================================================
000097EE                            
000097EE                            loc_911C:
000097EE 117C 0012 0024             		move.b	#$12,$24(a0)
000097F4 4268 0010                  		clr.w	$10(a0)
000097F8 6000 0000                  		bra.w	DisplaySprite
000097FC                            ; ===========================================================================
000097FC                            
000097FC                            loc_912A:				; XREF: Obj28_Index
000097FC 4A28 0001                  		tst.b	1(a0)
00009800 6A00 0000                  		bpl.w	DeleteObject
00009804 6100 0000                  		bsr.w	ObjectFall
00009808 4A68 0012                  		tst.w	$12(a0)
0000980C 6B00                       		bmi.s	loc_9180
0000980E 4EB9 0000 0000             		jsr	ObjHitFloor
00009814 4A41                       		tst.w	d1
00009816 6A00                       		bpl.s	loc_9180
00009818 D368 000C                  		add.w	d1,$C(a0)
0000981C 3168 0032 0010             		move.w	$32(a0),$10(a0)
00009822 3168 0034 0012             		move.w	$34(a0),$12(a0)
00009828 117C 0001 001A             		move.b	#1,$1A(a0)
0000982E 1028 0030                  		move.b	$30(a0),d0
00009832 D000                       		add.b	d0,d0
00009834 5800                       		addq.b	#4,d0
00009836 1140 0024                  		move.b	d0,$24(a0)
0000983A 4A38 F7A7                  		tst.b	($FFFFF7A7).w
0000983E 6700                       		beq.s	loc_9180
00009840 0838 0004 FE0F             		btst	#4,($FFFFFE0F).w
00009846 6700                       		beq.s	loc_9180
00009848 4468 0010                  		neg.w	$10(a0)
0000984C 0868 0000 0001             		bchg	#0,1(a0)
00009852                            
00009852                            loc_9180:
00009852 6000 0000                  		bra.w	DisplaySprite
00009856                            ; ===========================================================================
00009856                            
00009856                            loc_9184:				; XREF: Obj28_Index
00009856 6100 0000                  		bsr.w	ObjectFall
0000985A 117C 0001 001A             		move.b	#1,$1A(a0)
00009860 4A68 0012                  		tst.w	$12(a0)
00009864 6B00                       		bmi.s	loc_91AE
00009866 117C 0000 001A             		move.b	#0,$1A(a0)
0000986C 4EB9 0000 0000             		jsr	ObjHitFloor
00009872 4A41                       		tst.w	d1
00009874 6A00                       		bpl.s	loc_91AE
00009876 D368 000C                  		add.w	d1,$C(a0)
0000987A 3168 0034 0012             		move.w	$34(a0),$12(a0)
00009880                            
00009880                            loc_91AE:
00009880 4A28 0028                  		tst.b	$28(a0)
00009884 6600                       		bne.s	loc_9224
00009886 4A28 0001                  		tst.b	1(a0)
0000988A 6A00 0000                  		bpl.w	DeleteObject
0000988E 6000 0000                  		bra.w	DisplaySprite
00009892                            ; ===========================================================================
00009892                            
00009892                            loc_91C0:				; XREF: Obj28_Index
00009892 6100 0000                  		bsr.w	SpeedToPos
00009896 0668 0018 0012             		addi.w	#$18,$12(a0)
0000989C 4A68 0012                  		tst.w	$12(a0)
000098A0 6B00                       		bmi.s	loc_91FC
000098A2 4EB9 0000 0000             		jsr	ObjHitFloor
000098A8 4A41                       		tst.w	d1
000098AA 6A00                       		bpl.s	loc_91FC
000098AC D368 000C                  		add.w	d1,$C(a0)
000098B0 3168 0034 0012             		move.w	$34(a0),$12(a0)
000098B6 4A28 0028                  		tst.b	$28(a0)
000098BA 6700                       		beq.s	loc_91FC
000098BC 0C28 000A 0028             		cmpi.b	#$A,$28(a0)
000098C2 6700                       		beq.s	loc_91FC
000098C4 4468 0010                  		neg.w	$10(a0)
000098C8 0868 0000 0001             		bchg	#0,1(a0)
000098CE                            
000098CE                            loc_91FC:
000098CE 5328 001E                  		subq.b	#1,$1E(a0)
000098D2 6A00                       		bpl.s	loc_9212
000098D4 117C 0001 001E             		move.b	#1,$1E(a0)
000098DA 5228 001A                  		addq.b	#1,$1A(a0)
000098DE 0228 0001 001A             		andi.b	#1,$1A(a0)
000098E4                            
000098E4                            loc_9212:
000098E4 4A28 0028                  		tst.b	$28(a0)
000098E8 6600                       		bne.s	loc_9224
000098EA 4A28 0001                  		tst.b	1(a0)
000098EE 6A00 0000                  		bpl.w	DeleteObject
000098F2 6000 0000                  		bra.w	DisplaySprite
000098F6                            ; ===========================================================================
000098F6                            
000098F6                            loc_9224:				; XREF: Obj28_Index
000098F6 3028 0008                  		move.w	8(a0),d0
000098FA 9078 D008                  		sub.w	($FFFFD008).w,d0
000098FE 6500                       		bcs.s	loc_923C
00009900 0440 0180                  		subi.w	#$180,d0
00009904 6A00                       		bpl.s	loc_923C
00009906 4A28 0001                  		tst.b	1(a0)
0000990A 6A00 0000                  		bpl.w	DeleteObject
0000990E                            
0000990E                            loc_923C:
0000990E 6000 0000                  		bra.w	DisplaySprite
00009912                            ; ===========================================================================
00009912                            
00009912                            loc_9240:				; XREF: Obj28_Index
00009912 4A28 0001                  		tst.b	1(a0)
00009916 6A00 0000                  		bpl.w	DeleteObject
0000991A 5368 0036                  		subq.w	#1,$36(a0)
0000991E 6600 0000                  		bne.w	loc_925C
00009922 117C 0002 0024             		move.b	#2,$24(a0)
00009928 117C 0003 0018             		move.b	#3,$18(a0)
0000992E                            
0000992E                            loc_925C:
0000992E 6000 0000                  		bra.w	DisplaySprite
00009932                            ; ===========================================================================
00009932                            
00009932                            loc_9260:				; XREF: Obj28_Index
00009932 6100 0000                  		bsr.w	sub_9404
00009936 6400                       		bcc.s	loc_927C
00009938 3168 0032 0010             		move.w	$32(a0),$10(a0)
0000993E 3168 0034 0012             		move.w	$34(a0),$12(a0)
00009944 117C 000E 0024             		move.b	#$E,$24(a0)
0000994A 6000 FF46                  		bra.w	loc_91C0
0000994E                            ; ===========================================================================
0000994E                            
0000994E                            loc_927C:
0000994E 6000 FFA6                  		bra.w	loc_9224
00009952                            ; ===========================================================================
00009952                            
00009952                            loc_9280:				; XREF: Obj28_Index
00009952 6100 0000                  		bsr.w	sub_9404
00009956 6A00                       		bpl.s	loc_92B6
00009958 4268 0010                  		clr.w	$10(a0)
0000995C 4268 0032                  		clr.w	$32(a0)
00009960 6100 0000                  		bsr.w	SpeedToPos
00009964 0668 0018 0012             		addi.w	#$18,$12(a0)
0000996A 6100 0000                  		bsr.w	loc_93C4
0000996E 6100 0000                  		bsr.w	loc_93EC
00009972 5328 001E                  		subq.b	#1,$1E(a0)
00009976 6A00                       		bpl.s	loc_92B6
00009978 117C 0001 001E             		move.b	#1,$1E(a0)
0000997E 5228 001A                  		addq.b	#1,$1A(a0)
00009982 0228 0001 001A             		andi.b	#1,$1A(a0)
00009988                            
00009988                            loc_92B6:
00009988 6000 FF6C                  		bra.w	loc_9224
0000998C                            ; ===========================================================================
0000998C                            
0000998C                            loc_92BA:				; XREF: Obj28_Index
0000998C 6100 0000                  		bsr.w	sub_9404
00009990 6A00                       		bpl.s	loc_9310
00009992 3168 0032 0010             		move.w	$32(a0),$10(a0)
00009998 3168 0034 0012             		move.w	$34(a0),$12(a0)
0000999E 117C 0004 0024             		move.b	#4,$24(a0)
000099A4 6000 FEB0                  		bra.w	loc_9184
000099A8                            ; ===========================================================================
000099A8                            
000099A8                            loc_92D6:				; XREF: Obj28_Index
000099A8 6100 0000                  		bsr.w	ObjectFall
000099AC 117C 0001 001A             		move.b	#1,$1A(a0)
000099B2 4A68 0012                  		tst.w	$12(a0)
000099B6 6B00                       		bmi.s	loc_9310
000099B8 117C 0000 001A             		move.b	#0,$1A(a0)
000099BE 4EB9 0000 0000             		jsr	ObjHitFloor
000099C4 4A41                       		tst.w	d1
000099C6 6A00                       		bpl.s	loc_9310
000099C8 4628 0029                  		not.b	$29(a0)
000099CC 6600                       		bne.s	loc_9306
000099CE 4468 0010                  		neg.w	$10(a0)
000099D2 0868 0000 0001             		bchg	#0,1(a0)
000099D8                            
000099D8                            loc_9306:
000099D8 D368 000C                  		add.w	d1,$C(a0)
000099DC 3168 0034 0012             		move.w	$34(a0),$12(a0)
000099E2                            
000099E2                            loc_9310:
000099E2 6000 FF12                  		bra.w	loc_9224
000099E6                            ; ===========================================================================
000099E6                            
000099E6                            loc_9314:				; XREF: Obj28_Index
000099E6 6100 0000                  		bsr.w	sub_9404
000099EA 6A00                       		bpl.s	loc_932E
000099EC 4268 0010                  		clr.w	$10(a0)
000099F0 4268 0032                  		clr.w	$32(a0)
000099F4 6100 0000                  		bsr.w	ObjectFall
000099F8 6100 0000                  		bsr.w	loc_93C4
000099FC 6100 0000                  		bsr.w	loc_93EC
00009A00                            
00009A00                            loc_932E:
00009A00 6000 FEF4                  		bra.w	loc_9224
00009A04                            ; ===========================================================================
00009A04                            
00009A04                            loc_9332:				; XREF: Obj28_Index
00009A04 6100 0000                  		bsr.w	sub_9404
00009A08 6A00                       		bpl.s	loc_936C
00009A0A 6100 0000                  		bsr.w	ObjectFall
00009A0E 117C 0001 001A             		move.b	#1,$1A(a0)
00009A14 4A68 0012                  		tst.w	$12(a0)
00009A18 6B00                       		bmi.s	loc_936C
00009A1A 117C 0000 001A             		move.b	#0,$1A(a0)
00009A20 4EB9 0000 0000             		jsr	ObjHitFloor
00009A26 4A41                       		tst.w	d1
00009A28 6A00                       		bpl.s	loc_936C
00009A2A 4468 0010                  		neg.w	$10(a0)
00009A2E 0868 0000 0001             		bchg	#0,1(a0)
00009A34 D368 000C                  		add.w	d1,$C(a0)
00009A38 3168 0034 0012             		move.w	$34(a0),$12(a0)
00009A3E                            
00009A3E                            loc_936C:
00009A3E 6000 FEB6                  		bra.w	loc_9224
00009A42                            ; ===========================================================================
00009A42                            
00009A42                            loc_9370:				; XREF: Obj28_Index
00009A42 6100 0000                  		bsr.w	sub_9404
00009A46 6A00                       		bpl.s	loc_93C0
00009A48 6100 0000                  		bsr.w	SpeedToPos
00009A4C 0668 0018 0012             		addi.w	#$18,$12(a0)
00009A52 4A68 0012                  		tst.w	$12(a0)
00009A56 6B00                       		bmi.s	loc_93AA
00009A58 4EB9 0000 0000             		jsr	ObjHitFloor
00009A5E 4A41                       		tst.w	d1
00009A60 6A00                       		bpl.s	loc_93AA
00009A62 4628 0029                  		not.b	$29(a0)
00009A66 6600                       		bne.s	loc_93A0
00009A68 4468 0010                  		neg.w	$10(a0)
00009A6C 0868 0000 0001             		bchg	#0,1(a0)
00009A72                            
00009A72                            loc_93A0:
00009A72 D368 000C                  		add.w	d1,$C(a0)
00009A76 3168 0034 0012             		move.w	$34(a0),$12(a0)
00009A7C                            
00009A7C                            loc_93AA:
00009A7C 5328 001E                  		subq.b	#1,$1E(a0)
00009A80 6A00                       		bpl.s	loc_93C0
00009A82 117C 0001 001E             		move.b	#1,$1E(a0)
00009A88 5228 001A                  		addq.b	#1,$1A(a0)
00009A8C 0228 0001 001A             		andi.b	#1,$1A(a0)
00009A92                            
00009A92                            loc_93C0:
00009A92 6000 FE62                  		bra.w	loc_9224
00009A96                            ; ===========================================================================
00009A96                            
00009A96                            loc_93C4:
00009A96 117C 0001 001A             		move.b	#1,$1A(a0)
00009A9C 4A68 0012                  		tst.w	$12(a0)
00009AA0 6B00                       		bmi.s	locret_93EA
00009AA2 117C 0000 001A             		move.b	#0,$1A(a0)
00009AA8 4EB9 0000 0000             		jsr	ObjHitFloor
00009AAE 4A41                       		tst.w	d1
00009AB0 6A00                       		bpl.s	locret_93EA
00009AB2 D368 000C                  		add.w	d1,$C(a0)
00009AB6 3168 0034 0012             		move.w	$34(a0),$12(a0)
00009ABC                            
00009ABC                            locret_93EA:
00009ABC 4E75                       		rts	
00009ABE                            ; ===========================================================================
00009ABE                            
00009ABE                            loc_93EC:
00009ABE 08E8 0000 0001             		bset	#0,1(a0)
00009AC4 3028 0008                  		move.w	8(a0),d0
00009AC8 9078 D008                  		sub.w	($FFFFD008).w,d0
00009ACC 6400                       		bcc.s	locret_9402
00009ACE 08A8 0000 0001             		bclr	#0,1(a0)
00009AD4                            
00009AD4                            locret_9402:
00009AD4 4E75                       		rts	
00009AD6                            
00009AD6                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00009AD6                            
00009AD6                            
00009AD6                            sub_9404:
00009AD6 3038 D008                  		move.w	($FFFFD008).w,d0
00009ADA 9068 0008                  		sub.w	8(a0),d0
00009ADE 0440 00B8                  		subi.w	#$B8,d0
00009AE2 4E75                       		rts	
00009AE4                            ; End of function sub_9404
00009AE4                            
00009AE4                            ; ===========================================================================
00009AE4                            ; ---------------------------------------------------------------------------
00009AE4                            ; Object 29 - points that appear when you destroy something
00009AE4                            ; ---------------------------------------------------------------------------
00009AE4                            
00009AE4                            Obj29:					; XREF: Obj_Index
00009AE4 7000                       		moveq	#0,d0
00009AE6 1028 0024                  		move.b	$24(a0),d0
00009AEA 323B 0000                  		move.w	Obj29_Index(pc,d0.w),d1
00009AEE 4EBB 1000                  		jsr	Obj29_Index(pc,d1.w)
00009AF2 6000 0000                  		bra.w	DisplaySprite
00009AF6                            ; ===========================================================================
00009AF6 0000                       Obj29_Index:	dc.w Obj29_Main-Obj29_Index
00009AF8 0000                       		dc.w Obj29_Slower-Obj29_Index
00009AFA                            ; ===========================================================================
00009AFA                            
00009AFA                            Obj29_Main:				; XREF: Obj29_Index
00009AFA 5428 0024                  		addq.b	#2,$24(a0)
00009AFE 217C 0000 0000 0004        		move.l	#Map_obj29,4(a0)
00009B06 317C 2797 0002             		move.w	#$2797,2(a0)
00009B0C 117C 0004 0001             		move.b	#4,1(a0)
00009B12 117C 0001 0018             		move.b	#1,$18(a0)
00009B18 117C 0008 0019             		move.b	#8,$19(a0)
00009B1E 317C FD00 0012             		move.w	#-$300,$12(a0)	; move object upwards
00009B24                            
00009B24                            Obj29_Slower:				; XREF: Obj29_Index
00009B24 4A68 0012                  		tst.w	$12(a0)		; is object moving?
00009B28 6A00 0000                  		bpl.w	DeleteObject	; if not, branch
00009B2C 6100 0000                  		bsr.w	SpeedToPos
00009B30 0668 0018 0012             		addi.w	#$18,$12(a0)	; reduce object	speed
00009B36 4E75                       		rts	
00009B38                            ; ===========================================================================
00009B38                            ; ---------------------------------------------------------------------------
00009B38                            ; Sprite mappings - animals
00009B38                            ; ---------------------------------------------------------------------------
00009B38                            Map_obj28:
00009B38                            	include "_maps\obj28.asm"
00009B38                            ; ---------------------------------------------------------------------------
00009B38                            ; Sprite mappings - animals
00009B38                            ; ---------------------------------------------------------------------------
00009B38 0000                       		dc.w byte_9472-Map_obj28
00009B3A 0000                       		dc.w byte_9478-Map_obj28
00009B3C 0000                       		dc.w byte_946C-Map_obj28
00009B3E 01                         byte_946C:	dc.b 1
00009B3F F406 0000 F8               		dc.b $F4, 6, 0,	0, $F8
00009B44 01                         byte_9472:	dc.b 1
00009B45 F406 0006 F8               		dc.b $F4, 6, 0,	6, $F8
00009B4A 01                         byte_9478:	dc.b 1
00009B4B F406 000C F8               		dc.b $F4, 6, 0,	$C, $F8
00009B50                            		even
00009B50                            		even
00009B50                            
00009B50                            Map_obj28a:
00009B50                            	include "_maps\obj28a.asm"
00009B50                            ; ---------------------------------------------------------------------------
00009B50                            ; Sprite mappings - animals
00009B50                            ; ---------------------------------------------------------------------------
00009B50 0000                       		dc.w byte_948A-Map_obj28a
00009B52 0000                       		dc.w byte_9490-Map_obj28a
00009B54 0000                       		dc.w byte_9484-Map_obj28a
00009B56 01                         byte_9484:	dc.b 1
00009B57 F406 0000 F8               		dc.b $F4, 6, 0,	0, $F8
00009B5C 01                         byte_948A:	dc.b 1
00009B5D FC05 0006 F8               		dc.b $FC, 5, 0,	6, $F8
00009B62 01                         byte_9490:	dc.b 1
00009B63 FC05 000A F8               		dc.b $FC, 5, 0,	$A, $F8
00009B68                            		even
00009B68                            		even
00009B68                            
00009B68                            Map_obj28b:
00009B68                            	include "_maps\obj28b.asm"
00009B68                            ; ---------------------------------------------------------------------------
00009B68                            ; Sprite mappings - animals
00009B68                            ; ---------------------------------------------------------------------------
00009B68 0000                       		dc.w byte_94A2-Map_obj28b
00009B6A 0000                       		dc.w byte_94A8-Map_obj28b
00009B6C 0000                       		dc.w byte_949C-Map_obj28b
00009B6E 01                         byte_949C:	dc.b 1
00009B6F F406 0000 F8               		dc.b $F4, 6, 0,	0, $F8
00009B74 01                         byte_94A2:	dc.b 1
00009B75 FC09 0006 F4               		dc.b $FC, 9, 0,	6, $F4
00009B7A 01                         byte_94A8:	dc.b 1
00009B7B FC09 000C F4               		dc.b $FC, 9, 0,	$C, $F4
00009B80                            		even
00009B80                            		even
00009B80                            
00009B80                            ; ---------------------------------------------------------------------------
00009B80                            ; Sprite mappings - points that	appear when you	destroy	something
00009B80                            ; ---------------------------------------------------------------------------
00009B80                            Map_obj29:
00009B80                            	include "_maps\obj29.asm"
00009B80                            ; ---------------------------------------------------------------------------
00009B80                            ; Sprite mappings - points that	appear when you	destroy	something
00009B80                            ; ---------------------------------------------------------------------------
00009B80 0000 0000                  		dc.w byte_94BC-Map_obj29, byte_94C2-Map_obj29
00009B84 0000 0000                  		dc.w byte_94C8-Map_obj29, byte_94CE-Map_obj29
00009B88 0000 0000                  		dc.w byte_94D4-Map_obj29, byte_94DA-Map_obj29
00009B8C 0000                       		dc.w byte_94E5-Map_obj29
00009B8E 01                         byte_94BC:	dc.b 1
00009B8F FC04 0000 F8               		dc.b $FC, 4, 0,	0, $F8	; 100 points
00009B94 01                         byte_94C2:	dc.b 1
00009B95 FC04 0002 F8               		dc.b $FC, 4, 0,	2, $F8	; 200 points
00009B9A 01                         byte_94C8:	dc.b 1
00009B9B FC04 0004 F8               		dc.b $FC, 4, 0,	4, $F8	; 500 points
00009BA0 01                         byte_94CE:	dc.b 1
00009BA1 FC08 0006 F8               		dc.b $FC, 8, 0,	6, $F8	; 1000 points
00009BA6 01                         byte_94D4:	dc.b 1
00009BA7 FC00 0006 FC               		dc.b $FC, 0, 0,	6, $FC	; 10 points
00009BAC 02                         byte_94DA:	dc.b 2
00009BAD FC08 0006 F4               		dc.b $FC, 8, 0,	6, $F4	; 10,000 points
00009BB2 FC04 0007 01               		dc.b $FC, 4, 0,	7, 1
00009BB7 02                         byte_94E5:	dc.b 2
00009BB8 FC08 0006 F4               		dc.b $FC, 8, 0,	6, $F4	; 100,000 points
00009BBD FC04 0007 06               		dc.b $FC, 4, 0,	7, 6
00009BC2                            		even
00009BC2                            		even
00009BC2                            
00009BC2                            ; ===========================================================================
00009BC2                            ; ---------------------------------------------------------------------------
00009BC2                            ; Object 1F - Crabmeat enemy (GHZ, SYZ)
00009BC2                            ; ---------------------------------------------------------------------------
00009BC2                            
00009BC2                            Obj1F:					; XREF: Obj_Index
00009BC2 7000                       		moveq	#0,d0
00009BC4 1028 0024                  		move.b	$24(a0),d0
00009BC8 323B 0000                  		move.w	Obj1F_Index(pc,d0.w),d1
00009BCC 4EFB 1000                  		jmp	Obj1F_Index(pc,d1.w)
00009BD0                            ; ===========================================================================
00009BD0 0000                       Obj1F_Index:	dc.w Obj1F_Main-Obj1F_Index
00009BD2 0000                       		dc.w Obj1F_Action-Obj1F_Index
00009BD4 0000                       		dc.w Obj1F_Delete-Obj1F_Index
00009BD6 0000                       		dc.w Obj1F_BallMain-Obj1F_Index
00009BD8 0000                       		dc.w Obj1F_BallMove-Obj1F_Index
00009BDA                            ; ===========================================================================
00009BDA                            
00009BDA                            Obj1F_Main:				; XREF: Obj1F_Index
00009BDA 117C 0010 0016             		move.b	#$10,$16(a0)
00009BE0 117C 0008 0017             		move.b	#8,$17(a0)
00009BE6 217C 0000 0000 0004        		move.l	#Map_obj1F,4(a0)
00009BEE 317C 0400 0002             		move.w	#$400,2(a0)
00009BF4 117C 0004 0001             		move.b	#4,1(a0)
00009BFA 117C 0003 0018             		move.b	#3,$18(a0)
00009C00 117C 0006 0020             		move.b	#6,$20(a0)
00009C06 117C 0015 0019             		move.b	#$15,$19(a0)
00009C0C 6100 0000                  		bsr.w	ObjectFall
00009C10 4EB9 0000 0000             		jsr	ObjHitFloor
00009C16 4A41                       		tst.w	d1
00009C18 6A00                       		bpl.s	locret_955A
00009C1A D368 000C                  		add.w	d1,$C(a0)
00009C1E 1143 0026                  		move.b	d3,$26(a0)
00009C22 317C 0000 0012             		move.w	#0,$12(a0)
00009C28 5428 0024                  		addq.b	#2,$24(a0)
00009C2C                            
00009C2C                            locret_955A:
00009C2C 4E75                       		rts	
00009C2E                            ; ===========================================================================
00009C2E                            
00009C2E                            Obj1F_Action:				; XREF: Obj1F_Index
00009C2E 7000                       		moveq	#0,d0
00009C30 1028 0025                  		move.b	$25(a0),d0
00009C34 323B 0000                  		move.w	Obj1F_Index2(pc,d0.w),d1
00009C38 4EBB 1000                  		jsr	Obj1F_Index2(pc,d1.w)
00009C3C 43F9 0000 0000             		lea	(Ani_obj1F).l,a1
00009C42 6100 0000                  		bsr.w	AnimateSprite
00009C46 6000 0000                  		bra.w	MarkObjGone
00009C4A                            ; ===========================================================================
00009C4A 0000                       Obj1F_Index2:	dc.w Obj1F_WaitFire-Obj1F_Index2
00009C4C 0000                       		dc.w Obj1F_WalkOnFloor-Obj1F_Index2
00009C4E                            ; ===========================================================================
00009C4E                            
00009C4E                            Obj1F_WaitFire:				; XREF: Obj1F_Index2
00009C4E 5368 0030                  		subq.w	#1,$30(a0)	; subtract 1 from time delay
00009C52 6A00                       		bpl.s	locret_95B6
00009C54 4A28 0001                  		tst.b	1(a0)
00009C58 6A00                       		bpl.s	Obj1F_Move
00009C5A 0868 0001 0032             		bchg	#1,$32(a0)
00009C60 6600                       		bne.s	Obj1F_MakeFire
00009C62                            
00009C62                            Obj1F_Move:
00009C62 5428 0025                  		addq.b	#2,$25(a0)
00009C66 317C 007F 0030             		move.w	#127,$30(a0)	; set time delay to approx 2 seconds
00009C6C 317C 0080 0010             		move.w	#$80,$10(a0)	; move Crabmeat	to the right
00009C72 6100 0000                  		bsr.w	Obj1F_SetAni
00009C76 5600                       		addq.b	#3,d0
00009C78 1140 001C                  		move.b	d0,$1C(a0)
00009C7C 0868 0000 0022             		bchg	#0,$22(a0)
00009C82 6600                       		bne.s	locret_95B6
00009C84 4468 0010                  		neg.w	$10(a0)		; change direction
00009C88                            
00009C88                            locret_95B6:
00009C88 4E75                       		rts	
00009C8A                            ; ===========================================================================
00009C8A                            
00009C8A                            Obj1F_MakeFire:				; XREF: Obj1F_WaitFire
00009C8A 317C 003B 0030             		move.w	#$3B,$30(a0)
00009C90 117C 0006 001C             		move.b	#6,$1C(a0)	; use firing animation
00009C96 6100 0000                  		bsr.w	SingleObjLoad
00009C9A 6600                       		bne.s	Obj1F_MakeFire2
00009C9C 12BC 001F                  		move.b	#$1F,0(a1)	; load left fireball
00009CA0 137C 0006 0024             		move.b	#6,$24(a1)
00009CA6 3368 0008 0008             		move.w	8(a0),8(a1)
00009CAC 0469 0010 0008             		subi.w	#$10,8(a1)
00009CB2 3368 000C 000C             		move.w	$C(a0),$C(a1)
00009CB8 337C FF00 0010             		move.w	#-$100,$10(a1)
00009CBE                            
00009CBE                            Obj1F_MakeFire2:
00009CBE 6100 0000                  		bsr.w	SingleObjLoad
00009CC2 6600                       		bne.s	locret_9618
00009CC4 12BC 001F                  		move.b	#$1F,0(a1)	; load right fireball
00009CC8 137C 0006 0024             		move.b	#6,$24(a1)
00009CCE 3368 0008 0008             		move.w	8(a0),8(a1)
00009CD4 0669 0010 0008             		addi.w	#$10,8(a1)
00009CDA 3368 000C 000C             		move.w	$C(a0),$C(a1)
00009CE0 337C 0100 0010             		move.w	#$100,$10(a1)
00009CE6                            
00009CE6                            locret_9618:
00009CE6 4E75                       		rts	
00009CE8                            ; ===========================================================================
00009CE8                            
00009CE8                            Obj1F_WalkOnFloor:			; XREF: Obj1F_Index2
00009CE8 5368 0030                  		subq.w	#1,$30(a0)
00009CEC 6B00                       		bmi.s	loc_966E
00009CEE 6100 0000                  		bsr.w	SpeedToPos
00009CF2 0868 0000 0032             		bchg	#0,$32(a0)
00009CF8 6600                       		bne.s	loc_9654
00009CFA 3628 0008                  		move.w	8(a0),d3
00009CFE 0643 0010                  		addi.w	#$10,d3
00009D02 0828 0000 0022             		btst	#0,$22(a0)
00009D08 6700                       		beq.s	loc_9640
00009D0A 0443 0020                  		subi.w	#$20,d3
00009D0E                            
00009D0E                            loc_9640:
00009D0E 4EB9 0000 0000             		jsr	ObjHitFloor2
00009D14 0C41 FFF8                  		cmpi.w	#-8,d1
00009D18 6D00                       		blt.s	loc_966E
00009D1A 0C41 000C                  		cmpi.w	#$C,d1
00009D1E 6C00                       		bge.s	loc_966E
00009D20 4E75                       		rts	
00009D22                            ; ===========================================================================
00009D22                            
00009D22                            loc_9654:				; XREF: Obj1F_WalkOnFloor
00009D22 4EB9 0000 0000             		jsr	ObjHitFloor
00009D28 D368 000C                  		add.w	d1,$C(a0)
00009D2C 1143 0026                  		move.b	d3,$26(a0)
00009D30 6100 0000                  		bsr.w	Obj1F_SetAni
00009D34 5600                       		addq.b	#3,d0
00009D36 1140 001C                  		move.b	d0,$1C(a0)
00009D3A 4E75                       		rts	
00009D3C                            ; ===========================================================================
00009D3C                            
00009D3C                            loc_966E:				; XREF: Obj1F_WalkOnFloor
00009D3C 5528 0025                  		subq.b	#2,$25(a0)
00009D40 317C 003B 0030             		move.w	#59,$30(a0)
00009D46 317C 0000 0010             		move.w	#0,$10(a0)
00009D4C 6100 0000                  		bsr.w	Obj1F_SetAni
00009D50 1140 001C                  		move.b	d0,$1C(a0)
00009D54 4E75                       		rts	
00009D56                            ; ---------------------------------------------------------------------------
00009D56                            ; Subroutine to	set the	correct	animation for a	Crabmeat
00009D56                            ; ---------------------------------------------------------------------------
00009D56                            
00009D56                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00009D56                            
00009D56                            
00009D56                            Obj1F_SetAni:				; XREF: loc_966E
00009D56 7000                       		moveq	#0,d0
00009D58 1628 0026                  		move.b	$26(a0),d3
00009D5C 6B00                       		bmi.s	loc_96A4
00009D5E 0C03 0006                  		cmpi.b	#6,d3
00009D62 6500                       		bcs.s	locret_96A2
00009D64 7001                       		moveq	#1,d0
00009D66 0828 0000 0022             		btst	#0,$22(a0)
00009D6C 6600                       		bne.s	locret_96A2
00009D6E 7002                       		moveq	#2,d0
00009D70                            
00009D70                            locret_96A2:
00009D70 4E75                       		rts	
00009D72                            ; ===========================================================================
00009D72                            
00009D72                            loc_96A4:				; XREF: Obj1F_SetAni
00009D72 0C03 00FA                  		cmpi.b	#-6,d3
00009D76 6200                       		bhi.s	locret_96B6
00009D78 7002                       		moveq	#2,d0
00009D7A 0828 0000 0022             		btst	#0,$22(a0)
00009D80 6600                       		bne.s	locret_96B6
00009D82 7001                       		moveq	#1,d0
00009D84                            
00009D84                            locret_96B6:
00009D84 4E75                       		rts	
00009D86                            ; End of function Obj1F_SetAni
00009D86                            
00009D86                            ; ===========================================================================
00009D86                            
00009D86                            Obj1F_Delete:				; XREF: Obj1F_Index
00009D86 6100 0000                  		bsr.w	DeleteObject
00009D8A 4E75                       		rts	
00009D8C                            ; ===========================================================================
00009D8C                            ; ---------------------------------------------------------------------------
00009D8C                            ; Sub-object - missile that the	Crabmeat throws
00009D8C                            ; ---------------------------------------------------------------------------
00009D8C                            
00009D8C                            Obj1F_BallMain:				; XREF: Obj1F_Index
00009D8C 5428 0024                  		addq.b	#2,$24(a0)
00009D90 217C 0000 0000 0004        		move.l	#Map_obj1F,4(a0)
00009D98 317C 0400 0002             		move.w	#$400,2(a0)
00009D9E 117C 0004 0001             		move.b	#4,1(a0)
00009DA4 117C 0003 0018             		move.b	#3,$18(a0)
00009DAA 117C 0087 0020             		move.b	#$87,$20(a0)
00009DB0 117C 0008 0019             		move.b	#8,$19(a0)
00009DB6 317C FC00 0012             		move.w	#-$400,$12(a0)
00009DBC 117C 0007 001C             		move.b	#7,$1C(a0)
00009DC2                            
00009DC2                            Obj1F_BallMove:				; XREF: Obj1F_Index
00009DC2 43F9 0000 0000             		lea	(Ani_obj1F).l,a1
00009DC8 6100 0000                  		bsr.w	AnimateSprite
00009DCC 6100 0000                  		bsr.w	ObjectFall
00009DD0 6100 0000                  		bsr.w	DisplaySprite
00009DD4 3038 F72E                  		move.w	($FFFFF72E).w,d0
00009DD8 0640 00E0                  		addi.w	#$E0,d0
00009DDC B068 000C                  		cmp.w	$C(a0),d0	; has object moved below the level boundary?
00009DE0 6500                       		bcs.s	Obj1F_Delete2	; if yes, branch
00009DE2 4E75                       		rts	
00009DE4                            ; ===========================================================================
00009DE4                            
00009DE4                            Obj1F_Delete2:
00009DE4 6000 0000                  		bra.w	DeleteObject
00009DE8                            ; ===========================================================================
00009DE8                            Ani_obj1F:
00009DE8                            	include "_anim\obj1F.asm"
00009DE8                            ; ---------------------------------------------------------------------------
00009DE8                            ; Animation script - Crabmeat enemy
00009DE8                            ; ---------------------------------------------------------------------------
00009DE8 0000 0000 0000             		dc.w byte_972A-Ani_obj1F, byte_972E-Ani_obj1F, byte_9732-Ani_obj1F
00009DEE 0000 0000 0000             		dc.w byte_9736-Ani_obj1F, byte_973C-Ani_obj1F, byte_9742-Ani_obj1F
00009DF4 0000 0000                  		dc.w byte_9748-Ani_obj1F, byte_974C-Ani_obj1F
00009DF8 0F00 FF00                  byte_972A:	dc.b $F, 0, $FF, 0
00009DFC 0F02 FF00                  byte_972E:	dc.b $F, 2, $FF, 0
00009E00 0F22 FF00                  byte_9732:	dc.b $F, $22, $FF, 0
00009E04 0F01 2100 FF00             byte_9736:	dc.b $F, 1, $21, 0, $FF, 0
00009E0A 0F21 0302 FF00             byte_973C:	dc.b $F, $21, 3, 2, $FF, 0
00009E10 0F01 2322 FF00             byte_9742:	dc.b $F, 1, $23, $22, $FF, 0
00009E16 0F04 FF00                  byte_9748:	dc.b $F, 4, $FF, 0
00009E1A 0105 06FF                  byte_974C:	dc.b 1,	5, 6, $FF
00009E1E                            		even
00009E1E                            		even
00009E1E                            
00009E1E                            ; ---------------------------------------------------------------------------
00009E1E                            ; Sprite mappings - Crabmeat enemy (GHZ, SYZ)
00009E1E                            ; ---------------------------------------------------------------------------
00009E1E                            Map_obj1F:
00009E1E                            	include "_maps\obj1F.asm"
00009E1E                            Map_1514:
00009E1E 0000                       Map_1514_0: 	dc.w Map_1514_E-Map_1514
00009E20 0000                       Map_1514_2: 	dc.w Map_1514_1E-Map_1514
00009E22 0000                       Map_1514_4: 	dc.w Map_1514_2E-Map_1514
00009E24 0000                       Map_1514_6: 	dc.w Map_1514_3E-Map_1514
00009E26 0000                       Map_1514_8: 	dc.w Map_1514_4E-Map_1514
00009E28 0000                       Map_1514_A: 	dc.w Map_1514_5E-Map_1514
00009E2A 0000                       Map_1514_C: 	dc.w Map_1514_64-Map_1514
00009E2C 03                         Map_1514_E: 	dc.b $3
00009E2D F80E 0000 E4               	dc.b $F8, $E, $0, $0, $E4
00009E32 F004 000C FC               	dc.b $F0, $4, $0, $C, $FC
00009E37 F80A 000E 04               	dc.b $F8, $A, $0, $E, $4
00009E3C 03                         Map_1514_1E: 	dc.b $3
00009E3D F80E 0000 E4               	dc.b $F8, $E, $0, $0, $E4
00009E42 F004 000C FC               	dc.b $F0, $4, $0, $C, $FC
00009E47 F80A 000E 04               	dc.b $F8, $A, $0, $E, $4
00009E4C 03                         Map_1514_2E: 	dc.b $3
00009E4D F80E 0000 E4               	dc.b $F8, $E, $0, $0, $E4
00009E52 F004 000C FC               	dc.b $F0, $4, $0, $C, $FC
00009E57 F80A 000E 04               	dc.b $F8, $A, $0, $E, $4
00009E5C 03                         Map_1514_3E: 	dc.b $3
00009E5D F80E 0000 E4               	dc.b $F8, $E, $0, $0, $E4
00009E62 F004 000C FC               	dc.b $F0, $4, $0, $C, $FC
00009E67 F80A 000E 04               	dc.b $F8, $A, $0, $E, $4
00009E6C 03                         Map_1514_4E: 	dc.b $3
00009E6D F80E 0000 E4               	dc.b $F8, $E, $0, $0, $E4
00009E72 F004 000C FC               	dc.b $F0, $4, $0, $C, $FC
00009E77 F80A 000E 04               	dc.b $F8, $A, $0, $E, $4
00009E7C 01                         Map_1514_5E: 	dc.b $1
00009E7D F805 0017 F8               	dc.b $F8, $5, $0, $17, $F8
00009E82 01                         Map_1514_64: 	dc.b $1
00009E83 F805 2017 F8               	dc.b $F8, $5, $20, $17, $F8
00009E88                            	even
00009E88                            	even
00009E88                            
00009E88                            ; ===========================================================================
00009E88                            ; ---------------------------------------------------------------------------
00009E88                            ; Object 22 - Buzz Bomber enemy	(GHZ, MZ, SYZ)
00009E88                            ; ---------------------------------------------------------------------------
00009E88                            
00009E88                            Obj22:					; XREF: Obj_Index
00009E88 7000                       		moveq	#0,d0
00009E8A 1028 0024                  		move.b	$24(a0),d0
00009E8E 323B 0000                  		move.w	Obj22_Index(pc,d0.w),d1
00009E92 4EFB 1000                  		jmp	Obj22_Index(pc,d1.w)
00009E96                            ; ===========================================================================
00009E96 0000                       Obj22_Index:	dc.w Obj22_Main-Obj22_Index
00009E98 0000                       		dc.w Obj22_Action-Obj22_Index
00009E9A 0000                       		dc.w Obj22_Delete-Obj22_Index
00009E9C                            ; ===========================================================================
00009E9C                            
00009E9C                            Obj22_Main:				; XREF: Obj22_Index
00009E9C 5428 0024                  		addq.b	#2,$24(a0)
00009EA0 217C 0000 0000 0004        		move.l	#Map_obj22,4(a0)
00009EA8 317C 0444 0002             		move.w	#$444,2(a0)
00009EAE 117C 0004 0001             		move.b	#4,1(a0)
00009EB4 117C 0003 0018             		move.b	#3,$18(a0)
00009EBA 117C 0008 0020             		move.b	#8,$20(a0)
00009EC0 117C 0018 0019             		move.b	#$18,$19(a0)
00009EC6                            
00009EC6                            Obj22_Action:				; XREF: Obj22_Index
00009EC6 7000                       		moveq	#0,d0
00009EC8 1028 0025                  		move.b	$25(a0),d0
00009ECC 323B 0000                  		move.w	Obj22_Index2(pc,d0.w),d1
00009ED0 4EBB 1000                  		jsr	Obj22_Index2(pc,d1.w)
00009ED4 43F9 0000 0000             		lea	(Ani_obj22).l,a1
00009EDA 6100 0000                  		bsr.w	AnimateSprite
00009EDE 6000 0000                  		bra.w	MarkObjGone
00009EE2                            ; ===========================================================================
00009EE2 0000                       Obj22_Index2:	dc.w Obj22_Move-Obj22_Index2
00009EE4 0000                       		dc.w Obj22_ChkNrSonic-Obj22_Index2
00009EE6                            ; ===========================================================================
00009EE6                            
00009EE6                            Obj22_Move:				; XREF: Obj22_Index2
00009EE6 5368 0032                  		subq.w	#1,$32(a0)	; subtract 1 from time delay
00009EEA 6A00                       		bpl.s	locret_986C	; if time remains, branch
00009EEC 0828 0001 0034             		btst	#1,$34(a0)	; is Buzz Bomber near Sonic?
00009EF2 6600                       		bne.s	Obj22_Fire	; if yes, branch
00009EF4 5428 0025                  		addq.b	#2,$25(a0)
00009EF8 317C 007F 0032             		move.w	#127,$32(a0)	; set time delay to just over 2	seconds
00009EFE 317C 0400 0010             		move.w	#$400,$10(a0)	; move Buzz Bomber to the right
00009F04 117C 0001 001C             		move.b	#1,$1C(a0)	; use "flying" animation
00009F0A 0828 0000 0022             		btst	#0,$22(a0)	; is Buzz Bomber facing	left?
00009F10 6600                       		bne.s	locret_986C	; if not, branch
00009F12 4468 0010                  		neg.w	$10(a0)		; move Buzz Bomber to the left
00009F16                            
00009F16                            locret_986C:
00009F16 4E75                       		rts	
00009F18                            ; ===========================================================================
00009F18                            
00009F18                            Obj22_Fire:				; XREF: Obj22_Move
00009F18 6100 0000                  		bsr.w	SingleObjLoad
00009F1C 6600                       		bne.s	locret_98D0
00009F1E 12BC 0023                  		move.b	#$23,0(a1)	; load missile object
00009F22 3368 0008 0008             		move.w	8(a0),8(a1)
00009F28 3368 000C 000C             		move.w	$C(a0),$C(a1)
00009F2E 0669 001C 000C             		addi.w	#$1C,$C(a1)
00009F34 337C 0200 0012             		move.w	#$200,$12(a1)	; move missile downwards
00009F3A 337C 0200 0010             		move.w	#$200,$10(a1)	; move missile to the right
00009F40 303C 0018                  		move.w	#$18,d0
00009F44 0828 0000 0022             		btst	#0,$22(a0)	; is Buzz Bomber facing	left?
00009F4A 6600                       		bne.s	loc_98AA	; if not, branch
00009F4C 4440                       		neg.w	d0
00009F4E 4469 0010                  		neg.w	$10(a1)		; move missile to the left
00009F52                            
00009F52                            loc_98AA:
00009F52 D169 0008                  		add.w	d0,8(a1)
00009F56 1368 0022 0022             		move.b	$22(a0),$22(a1)
00009F5C 337C 000E 0032             		move.w	#$E,$32(a1)
00009F62 2348 003C                  		move.l	a0,$3C(a1)
00009F66 117C 0001 0034             		move.b	#1,$34(a0)	; set to "already fired" to prevent refiring
00009F6C 317C 003B 0032             		move.w	#$3B,$32(a0)
00009F72 117C 0002 001C             		move.b	#2,$1C(a0)	; use "firing" animation
00009F78                            
00009F78                            locret_98D0:
00009F78 4E75                       		rts	
00009F7A                            ; ===========================================================================
00009F7A                            
00009F7A                            Obj22_ChkNrSonic:			; XREF: Obj22_Index2
00009F7A 5368 0032                  		subq.w	#1,$32(a0)	; subtract 1 from time delay
00009F7E 6B00                       		bmi.s	Obj22_ChgDir
00009F80 6100 0000                  		bsr.w	SpeedToPos
00009F84 4A28 0034                  		tst.b	$34(a0)
00009F88 6600                       		bne.s	locret_992A
00009F8A 3038 D008                  		move.w	($FFFFD008).w,d0
00009F8E 9068 0008                  		sub.w	8(a0),d0
00009F92 6A00                       		bpl.s	Obj22_SetNrSonic
00009F94 4440                       		neg.w	d0
00009F96                            
00009F96                            Obj22_SetNrSonic:
00009F96 0C40 0060                  		cmpi.w	#$60,d0		; is Buzz Bomber within	$60 pixels of Sonic?
00009F9A 6400                       		bcc.s	locret_992A	; if not, branch
00009F9C 4A28 0001                  		tst.b	1(a0)
00009FA0 6A00                       		bpl.s	locret_992A
00009FA2 117C 0002 0034             		move.b	#2,$34(a0)	; set Buzz Bomber to "near Sonic"
00009FA8 317C 001D 0032             		move.w	#29,$32(a0)	; set time delay to half a second
00009FAE 6000                       		bra.s	Obj22_Stop
00009FB0                            ; ===========================================================================
00009FB0                            
00009FB0                            Obj22_ChgDir:				; XREF: Obj22_ChkNrSonic
00009FB0 117C 0000 0034             		move.b	#0,$34(a0)	; set Buzz Bomber to "normal"
00009FB6 0868 0000 0022             		bchg	#0,$22(a0)	; change direction
00009FBC 317C 003B 0032             		move.w	#59,$32(a0)
00009FC2                            
00009FC2                            Obj22_Stop:				; XREF: Obj22_SetNrSonic
00009FC2 5528 0025                  		subq.b	#2,$25(a0)	; run "Obj22_Fire" routine
00009FC6 317C 0000 0010             		move.w	#0,$10(a0)	; stop Buzz Bomber moving
00009FCC 117C 0000 001C             		move.b	#0,$1C(a0)	; use "hovering" animation
00009FD2                            
00009FD2                            locret_992A:
00009FD2 4E75                       		rts	
00009FD4                            ; ===========================================================================
00009FD4                            
00009FD4                            Obj22_Delete:				; XREF: Obj22_Index
00009FD4 6100 0000                  		bsr.w	DeleteObject
00009FD8 4E75                       		rts	
00009FDA                            ; ===========================================================================
00009FDA                            ; ---------------------------------------------------------------------------
00009FDA                            ; Object 23 - missile that Buzz	Bomber throws
00009FDA                            ; ---------------------------------------------------------------------------
00009FDA                            
00009FDA                            Obj23:					; XREF: Obj_Index
00009FDA 7000                       		moveq	#0,d0
00009FDC 1028 0024                  		move.b	$24(a0),d0
00009FE0 323B 0000                  		move.w	Obj23_Index(pc,d0.w),d1
00009FE4 4EFB 1000                  		jmp	Obj23_Index(pc,d1.w)
00009FE8                            ; ===========================================================================
00009FE8 0000                       Obj23_Index:	dc.w Obj23_Main-Obj23_Index
00009FEA 0000                       		dc.w Obj23_Animate-Obj23_Index
00009FEC 0000                       		dc.w Obj23_FromBuzz-Obj23_Index
00009FEE 0000                       		dc.w Obj23_Delete-Obj23_Index
00009FF0 0000                       		dc.w Obj23_FromNewt-Obj23_Index
00009FF2                            ; ===========================================================================
00009FF2                            
00009FF2                            Obj23_Main:				; XREF: Obj23_Index
00009FF2 5368 0032                  		subq.w	#1,$32(a0)
00009FF6 6A00                       		bpl.s	Obj23_ChkCancel
00009FF8 5428 0024                  		addq.b	#2,$24(a0)
00009FFC 217C 0000 0000 0004        		move.l	#Map_obj23,4(a0)
0000A004 317C 2444 0002             		move.w	#$2444,2(a0)
0000A00A 117C 0004 0001             		move.b	#4,1(a0)
0000A010 117C 0003 0018             		move.b	#3,$18(a0)
0000A016 117C 0008 0019             		move.b	#8,$19(a0)
0000A01C 0228 0003 0022             		andi.b	#3,$22(a0)
0000A022 4A28 0028                  		tst.b	$28(a0)		; was object created by	a Newtron?
0000A026 6700                       		beq.s	Obj23_Animate	; if not, branch
0000A028 117C 0008 0024             		move.b	#8,$24(a0)	; run "Obj23_FromNewt" routine
0000A02E 117C 0087 0020             		move.b	#$87,$20(a0)
0000A034 117C 0001 001C             		move.b	#1,$1C(a0)
0000A03A 6000                       		bra.s	Obj23_Animate2
0000A03C                            ; ===========================================================================
0000A03C                            
0000A03C                            Obj23_Animate:				; XREF: Obj23_Index
0000A03C 6100                       		bsr.s	Obj23_ChkCancel
0000A03E 43F9 0000 0000             		lea	(Ani_obj23).l,a1
0000A044 6100 0000                  		bsr.w	AnimateSprite
0000A048 6000 0000                  		bra.w	DisplaySprite
0000A04C                            ; ---------------------------------------------------------------------------
0000A04C                            ; Subroutine to	check if the Buzz Bomber which fired the missile has been
0000A04C                            ; destroyed, and if it has, then cancel	the missile
0000A04C                            ; ---------------------------------------------------------------------------
0000A04C                            
0000A04C                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000A04C                            
0000A04C                            
0000A04C                            Obj23_ChkCancel:			; XREF: Obj23_Main
0000A04C 2268 003C                  		movea.l	$3C(a0),a1
0000A050 0C11 0027                  		cmpi.b	#$27,0(a1)	; has Buzz Bomber been destroyed?
0000A054 6700                       		beq.s	Obj23_Delete	; if yes, branch
0000A056 4E75                       		rts	
0000A058                            ; End of function Obj23_ChkCancel
0000A058                            
0000A058                            ; ===========================================================================
0000A058                            
0000A058                            Obj23_FromBuzz:				; XREF: Obj23_Index
0000A058 0828 0007 0022             		btst	#7,$22(a0)
0000A05E 6600                       		bne.s	Obj23_Explode
0000A060 117C 0087 0020             		move.b	#$87,$20(a0)
0000A066 117C 0001 001C             		move.b	#1,$1C(a0)
0000A06C 6100 0000                  		bsr.w	SpeedToPos
0000A070 43F9 0000 0000             		lea	(Ani_obj23).l,a1
0000A076 6100 0000                  		bsr.w	AnimateSprite
0000A07A 6100 0000                  		bsr.w	DisplaySprite
0000A07E 3038 F72E                  		move.w	($FFFFF72E).w,d0
0000A082 0640 00E0                  		addi.w	#$E0,d0
0000A086 B068 000C                  		cmp.w	$C(a0),d0	; has object moved below the level boundary?
0000A08A 6500                       		bcs.s	Obj23_Delete	; if yes, branch
0000A08C 4E75                       		rts	
0000A08E                            ; ===========================================================================
0000A08E                            
0000A08E                            Obj23_Explode:				; XREF: Obj23_FromBuzz
0000A08E 10BC 0024                  		move.b	#$24,0(a0)	; change object	to an explosion	(Obj24)
0000A092 117C 0000 0024             		move.b	#0,$24(a0)
0000A098 6000 F2D4                  		bra.w	Obj24
0000A09C                            ; ===========================================================================
0000A09C                            
0000A09C                            Obj23_Delete:				; XREF: Obj23_Index
0000A09C 6100 0000                  		bsr.w	DeleteObject
0000A0A0 4E75                       		rts	
0000A0A2                            ; ===========================================================================
0000A0A2                            
0000A0A2                            Obj23_FromNewt:				; XREF: Obj23_Index
0000A0A2 4A28 0001                  		tst.b	1(a0)
0000A0A6 6AF4                       		bpl.s	Obj23_Delete
0000A0A8 6100 0000                  		bsr.w	SpeedToPos
0000A0AC                            
0000A0AC                            Obj23_Animate2:				; XREF: Obj23_Main
0000A0AC 43F9 0000 0000             		lea	(Ani_obj23).l,a1
0000A0B2 6100 0000                  		bsr.w	AnimateSprite
0000A0B6 6100 0000                  		bsr.w	DisplaySprite
0000A0BA 4E75                       		rts	
0000A0BC                            ; ===========================================================================
0000A0BC                            Ani_obj22:
0000A0BC                            	include "_anim\obj22.asm"
0000A0BC                            ; ---------------------------------------------------------------------------
0000A0BC                            ; Animation script - Buzz Bomber enemy
0000A0BC                            ; ---------------------------------------------------------------------------
0000A0BC 0000                       		dc.w byte_9A1E-Ani_obj22
0000A0BE 0000                       		dc.w byte_9A22-Ani_obj22
0000A0C0 0000                       		dc.w byte_9A26-Ani_obj22
0000A0C2 0100 01FF                  byte_9A1E:	dc.b 1,	0, 1, $FF
0000A0C6 0102 03FF                  byte_9A22:	dc.b 1,	2, 3, $FF
0000A0CA 0104 05FF                  byte_9A26:	dc.b 1,	4, 5, $FF
0000A0CE                            		even
0000A0CE                            		even
0000A0CE                            
0000A0CE                            Ani_obj23:
0000A0CE                            	include "_anim\obj23.asm"
0000A0CE                            ; ---------------------------------------------------------------------------
0000A0CE                            ; Animation script - missile that Buzz Bomber throws
0000A0CE                            ; ---------------------------------------------------------------------------
0000A0CE 0000                       		dc.w byte_9A2E-Ani_obj23
0000A0D0 0000                       		dc.w byte_9A32-Ani_obj23
0000A0D2 0700 01FC                  byte_9A2E:	dc.b 7,	0, 1, $FC
0000A0D6 0102 03FF                  byte_9A32:	dc.b 1,	2, 3, $FF
0000A0DA                            		even
0000A0DA                            		even
0000A0DA                            
0000A0DA                            ; ---------------------------------------------------------------------------
0000A0DA                            ; Sprite mappings - Buzz Bomber	enemy
0000A0DA                            ; ---------------------------------------------------------------------------
0000A0DA                            Map_obj22:
0000A0DA                            	include "_maps\obj22.asm"
0000A0DA                            Map_e97a:
0000A0DA 0000                       Map_e97a_0: 	dc.w Map_e97a_C-Map_e97a
0000A0DC 0000                       Map_e97a_2: 	dc.w Map_e97a_2B-Map_e97a
0000A0DE 0000                       Map_e97a_4: 	dc.w Map_e97a_4A-Map_e97a
0000A0E0 0000                       Map_e97a_6: 	dc.w Map_e97a_6E-Map_e97a
0000A0E2 0000                       Map_e97a_8: 	dc.w Map_e97a_92-Map_e97a
0000A0E4 0000                       Map_e97a_A: 	dc.w Map_e97a_B1-Map_e97a
0000A0E6 06                         Map_e97a_C: 	dc.b $6
0000A0E7 F409 0000 E8               	dc.b $F4, $9, $0, $0, $E8
0000A0EC F409 000F 00               	dc.b $F4, $9, $0, $F, $0
0000A0F1 0408 0015 E8               	dc.b $4, $8, $0, $15, $E8
0000A0F6 0404 0018 00               	dc.b $4, $4, $0, $18, $0
0000A0FB F108 001A EC               	dc.b $F1, $8, $0, $1A, $EC
0000A100 F104 001D 04               	dc.b $F1, $4, $0, $1D, $4
0000A105 06                         Map_e97a_2B: 	dc.b $6
0000A106 F409 0000 E8               	dc.b $F4, $9, $0, $0, $E8
0000A10B F409 000F 00               	dc.b $F4, $9, $0, $F, $0
0000A110 0408 0015 E8               	dc.b $4, $8, $0, $15, $E8
0000A115 0404 0018 00               	dc.b $4, $4, $0, $18, $0
0000A11A F408 001F EC               	dc.b $F4, $8, $0, $1F, $EC
0000A11F F404 0022 04               	dc.b $F4, $4, $0, $22, $4
0000A124 07                         Map_e97a_4A: 	dc.b $7
0000A125 0400 0030 0C               	dc.b $4, $0, $0, $30, $C
0000A12A F409 0000 E8               	dc.b $F4, $9, $0, $0, $E8
0000A12F F409 000F 00               	dc.b $F4, $9, $0, $F, $0
0000A134 0408 0015 E8               	dc.b $4, $8, $0, $15, $E8
0000A139 0404 0018 00               	dc.b $4, $4, $0, $18, $0
0000A13E F108 001A EC               	dc.b $F1, $8, $0, $1A, $EC
0000A143 F104 001D 04               	dc.b $F1, $4, $0, $1D, $4
0000A148 07                         Map_e97a_6E: 	dc.b $7
0000A149 0404 0031 0C               	dc.b $4, $4, $0, $31, $C
0000A14E F409 0000 E8               	dc.b $F4, $9, $0, $0, $E8
0000A153 F409 000F 00               	dc.b $F4, $9, $0, $F, $0
0000A158 0408 0015 E8               	dc.b $4, $8, $0, $15, $E8
0000A15D 0404 0018 00               	dc.b $4, $4, $0, $18, $0
0000A162 F408 001F EC               	dc.b $F4, $8, $0, $1F, $EC
0000A167 F404 0022 04               	dc.b $F4, $4, $0, $22, $4
0000A16C 06                         Map_e97a_92: 	dc.b $6
0000A16D F40D 0000 EC               	dc.b $F4, $D, $0, $0, $EC
0000A172 040C 0008 EC               	dc.b $4, $C, $0, $8, $EC
0000A177 0400 000C 0C               	dc.b $4, $0, $0, $C, $C
0000A17C 0C04 000D F4               	dc.b $C, $4, $0, $D, $F4
0000A181 F108 001A EC               	dc.b $F1, $8, $0, $1A, $EC
0000A186 F104 001D 04               	dc.b $F1, $4, $0, $1D, $4
0000A18B 04                         Map_e97a_B1: 	dc.b $4
0000A18C F40D 0000 EC               	dc.b $F4, $D, $0, $0, $EC
0000A191 040C 0008 EC               	dc.b $4, $C, $0, $8, $EC
0000A196 0400 000C 0C               	dc.b $4, $0, $0, $C, $C
0000A19B 0C04 000D F4               	dc.b $C, $4, $0, $D, $F4
0000A1A0                            	even
0000A1A0                            	even
0000A1A0                            
0000A1A0                            ; ---------------------------------------------------------------------------
0000A1A0                            ; Sprite mappings - missile that Buzz Bomber throws
0000A1A0                            ; ---------------------------------------------------------------------------
0000A1A0                            Map_obj23:
0000A1A0                            	include "_maps\obj23.asm"
0000A1A0                            ; ---------------------------------------------------------------------------
0000A1A0                            ; Sprite mappings - missile that Buzz Bomber throws
0000A1A0                            ; ---------------------------------------------------------------------------
0000A1A0 0000 0000                  		dc.w byte_9B0E-Map_obj23, byte_9B14-Map_obj23
0000A1A4 0000 0000                  		dc.w byte_9B1A-Map_obj23, byte_9B20-Map_obj23
0000A1A8 01                         byte_9B0E:	dc.b 1
0000A1A9 F805 0024 F8               		dc.b $F8, 5, 0,	$24, $F8
0000A1AE 01                         byte_9B14:	dc.b 1
0000A1AF F805 0028 F8               		dc.b $F8, 5, 0,	$28, $F8
0000A1B4 01                         byte_9B1A:	dc.b 1
0000A1B5 F805 002C F8               		dc.b $F8, 5, 0,	$2C, $F8
0000A1BA 01                         byte_9B20:	dc.b 1
0000A1BB F805 0033 F8               		dc.b $F8, 5, 0,	$33, $F8
0000A1C0                            		even
0000A1C0                            		even
0000A1C0                            
0000A1C0                            ; ===========================================================================
0000A1C0                            ; ---------------------------------------------------------------------------
0000A1C0                            ; Object 25 - rings
0000A1C0                            ; ---------------------------------------------------------------------------
0000A1C0                            
0000A1C0                            Obj25:					; XREF: Obj_Index
0000A1C0 7000                       		moveq	#0,d0
0000A1C2 1028 0024                  		move.b	$24(a0),d0
0000A1C6 323B 0000                  		move.w	Obj25_Index(pc,d0.w),d1
0000A1CA 4EFB 1000                  		jmp	Obj25_Index(pc,d1.w)
0000A1CE                            ; ===========================================================================
0000A1CE 0000                       Obj25_Index:	dc.w Obj25_Main-Obj25_Index
0000A1D0 0000                       		dc.w Obj25_Animate-Obj25_Index
0000A1D2 0000                       		dc.w Obj25_Collect-Obj25_Index
0000A1D4 0000                       		dc.w Obj25_Sparkle-Obj25_Index
0000A1D6 0000                       		dc.w Obj25_Delete-Obj25_Index
0000A1D8                            ; ---------------------------------------------------------------------------
0000A1D8                            ; Distances between rings (format: horizontal, vertical)
0000A1D8                            ; ---------------------------------------------------------------------------
0000A1D8 1000                       Obj25_PosData:	dc.b $10, 0		; horizontal tight
0000A1DA 1800                       		dc.b $18, 0		; horizontal normal
0000A1DC 2000                       		dc.b $20, 0		; horizontal wide
0000A1DE 0010                       		dc.b 0,	$10		; vertical tight
0000A1E0 0018                       		dc.b 0,	$18		; vertical normal
0000A1E2 0020                       		dc.b 0,	$20		; vertical wide
0000A1E4 1010                       		dc.b $10, $10		; diagonal
0000A1E6 1818                       		dc.b $18, $18
0000A1E8 2020                       		dc.b $20, $20
0000A1EA F010                       		dc.b $F0, $10
0000A1EC E818                       		dc.b $E8, $18
0000A1EE E020                       		dc.b $E0, $20
0000A1F0 1008                       		dc.b $10, 8
0000A1F2 1810                       		dc.b $18, $10
0000A1F4 F008                       		dc.b $F0, 8
0000A1F6 E810                       		dc.b $E8, $10
0000A1F8                            ; ===========================================================================
0000A1F8                            
0000A1F8                            Obj25_Main:				; XREF: Obj25_Index
0000A1F8 45F8 FC00                  		lea	($FFFFFC00).w,a2
0000A1FC 7000                       		moveq	#0,d0
0000A1FE 1028 0023                  		move.b	$23(a0),d0
0000A202 45F2 0002                  		lea	2(a2,d0.w),a2
0000A206 1812                       		move.b	(a2),d4
0000A208 1228 0028                  		move.b	$28(a0),d1
0000A20C 1001                       		move.b	d1,d0
0000A20E 0241 0007                  		andi.w	#7,d1
0000A212 0C41 0007                  		cmpi.w	#7,d1
0000A216 6600                       		bne.s	loc_9B80
0000A218 7206                       		moveq	#6,d1
0000A21A                            
0000A21A                            loc_9B80:
0000A21A 4841                       		swap	d1
0000A21C 323C 0000                  		move.w	#0,d1
0000A220 E808                       		lsr.b	#4,d0
0000A222 D040                       		add.w	d0,d0
0000A224 1A3B 00B2                  		move.b	Obj25_PosData(pc,d0.w),d5 ; load ring spacing data
0000A228 4885                       		ext.w	d5
0000A22A 1C3B 00AD                  		move.b	Obj25_PosData+1(pc,d0.w),d6
0000A22E 4886                       		ext.w	d6
0000A230 2248                       		movea.l	a0,a1
0000A232 3428 0008                  		move.w	8(a0),d2
0000A236 3628 000C                  		move.w	$C(a0),d3
0000A23A E20C                       		lsr.b	#1,d4
0000A23C 6500                       		bcs.s	loc_9C02
0000A23E 0892 0007                  		bclr	#7,(a2)
0000A242 6000                       		bra.s	loc_9BBA
0000A244                            ; ===========================================================================
0000A244                            
0000A244                            Obj25_MakeRings:
0000A244 4841                       		swap	d1
0000A246 E20C                       		lsr.b	#1,d4
0000A248 6500                       		bcs.s	loc_9C02
0000A24A 0892 0007                  		bclr	#7,(a2)
0000A24E 6100 0000                  		bsr.w	SingleObjLoad
0000A252 6600                       		bne.s	loc_9C0E
0000A254                            
0000A254                            loc_9BBA:				; XREF: Obj25_Main
0000A254 12BC 0025                  		move.b	#$25,0(a1)	; load ring object
0000A258 5429 0024                  		addq.b	#2,$24(a1)
0000A25C 3342 0008                  		move.w	d2,8(a1)	; set x-axis position based on d2
0000A260 3368 0008 0032             		move.w	8(a0),$32(a1)
0000A266 3343 000C                  		move.w	d3,$C(a1)	; set y-axis position based on d3
0000A26A 237C 0000 0000 0004        		move.l	#Map_obj25,4(a1)
0000A272 337C 27B2 0002             		move.w	#$27B2,2(a1)
0000A278 137C 0004 0001             		move.b	#4,1(a1)
0000A27E 137C 0002 0018             		move.b	#2,$18(a1)
0000A284 137C 0047 0020             		move.b	#$47,$20(a1)
0000A28A 137C 0008 0019             		move.b	#8,$19(a1)
0000A290 1368 0023 0023             		move.b	$23(a0),$23(a1)
0000A296 1341 0034                  		move.b	d1,$34(a1)
0000A29A                            
0000A29A                            loc_9C02:
0000A29A 5241                       		addq.w	#1,d1
0000A29C D445                       		add.w	d5,d2		; add ring spacing value to d2
0000A29E D646                       		add.w	d6,d3		; add ring spacing value to d3
0000A2A0 4841                       		swap	d1
0000A2A2 51C9 FFA0                  		dbf	d1,Obj25_MakeRings ; repeat for	number of rings
0000A2A6                            
0000A2A6                            loc_9C0E:
0000A2A6 0812 0000                  		btst	#0,(a2)
0000A2AA 6600 0000                  		bne.w	DeleteObject
0000A2AE                            
0000A2AE                            Obj25_Animate:				; XREF: Obj25_Index
0000A2AE 1178 FEC3 001A             		move.b	($FFFFFEC3).w,$1A(a0) ;	set frame
0000A2B4 6100 0000                  		bsr.w	DisplaySprite
0000A2B8 3028 0032                  		move.w	$32(a0),d0
0000A2BC 0240 FF80                  		andi.w	#$FF80,d0
0000A2C0 3238 F700                  		move.w	($FFFFF700).w,d1
0000A2C4 0441 0080                  		subi.w	#$80,d1
0000A2C8 0241 FF80                  		andi.w	#$FF80,d1
0000A2CC 9041                       		sub.w	d1,d0
0000A2CE 0C40 0280                  		cmpi.w	#$280,d0
0000A2D2 6200                       		bhi.s	Obj25_Delete
0000A2D4 4E75                       		rts	
0000A2D6                            ; ===========================================================================
0000A2D6                            
0000A2D6                            Obj25_Collect:				; XREF: Obj25_Index
0000A2D6 5428 0024                  		addq.b	#2,$24(a0)
0000A2DA 117C 0000 0020             		move.b	#0,$20(a0)
0000A2E0 117C 0001 0018             		move.b	#1,$18(a0)
0000A2E6 6100 0000                  		bsr.w	CollectRing
0000A2EA 45F8 FC00                  		lea	($FFFFFC00).w,a2
0000A2EE 7000                       		moveq	#0,d0
0000A2F0 1028 0023                  		move.b	$23(a0),d0
0000A2F4 1228 0034                  		move.b	$34(a0),d1
0000A2F8 03F2 0002                  		bset	d1,2(a2,d0.w)
0000A2FC                            
0000A2FC                            Obj25_Sparkle:				; XREF: Obj25_Index
0000A2FC 43F9 0000 0000             		lea	(Ani_obj25).l,a1
0000A302 6100 0000                  		bsr.w	AnimateSprite
0000A306 6000 0000                  		bra.w	DisplaySprite
0000A30A                            ; ===========================================================================
0000A30A                            
0000A30A                            Obj25_Delete:				; XREF: Obj25_Index
0000A30A 6000 0000                  		bra.w	DeleteObject
0000A30E                            
0000A30E                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000A30E                            
0000A30E                            
0000A30E                            CollectRing:				; XREF: Obj25_Collect
0000A30E 5278 FE20                  		addq.w	#1,($FFFFFE20).w ; add 1 to rings
0000A312 0038 0001 FE1D             		ori.b	#1,($FFFFFE1D).w ; update the rings counter
0000A318 303C 00B5                  		move.w	#$B5,d0		; play ring sound
0000A31C 0C78 0064 FE20             		cmpi.w	#100,($FFFFFE20).w ; do	you have < 100 rings?
0000A322 6500                       		bcs.s	Obj25_PlaySnd	; if yes, branch
0000A324 08F8 0001 FE1B             		bset	#1,($FFFFFE1B).w ; update lives	counter
0000A32A 6700                       		beq.s	loc_9CA4
0000A32C 0C78 00C8 FE20             		cmpi.w	#200,($FFFFFE20).w ; do	you have < 200 rings?
0000A332 6500                       		bcs.s	Obj25_PlaySnd	; if yes, branch
0000A334 08F8 0002 FE1B             		bset	#2,($FFFFFE1B).w ; update lives	counter
0000A33A 6600                       		bne.s	Obj25_PlaySnd
0000A33C                            
0000A33C                            loc_9CA4:
0000A33C 5238 FE12                  		addq.b	#1,($FFFFFE12).w ; add 1 to the	number of lives	you have
0000A340 5238 FE1C                  		addq.b	#1,($FFFFFE1C).w ; add 1 to the	lives counter
0000A344 303C 0088                  		move.w	#$88,d0		; play extra life music
0000A348                            
0000A348                            Obj25_PlaySnd:
0000A348 4EF9 0000 15C0             		jmp	(PlaySound_Special).l
0000A34E                            ; End of function CollectRing
0000A34E                            
0000A34E                            ; ===========================================================================
0000A34E                            ; ---------------------------------------------------------------------------
0000A34E                            ; Object 37 - rings flying out of Sonic	when he's hit
0000A34E                            ; ---------------------------------------------------------------------------
0000A34E                            
0000A34E                            Obj37:					; XREF: Obj_Index
0000A34E 7000                       		moveq	#0,d0
0000A350 1028 0024                  		move.b	$24(a0),d0
0000A354 323B 0000                  		move.w	Obj37_Index(pc,d0.w),d1
0000A358 4EFB 1000                  		jmp	Obj37_Index(pc,d1.w)
0000A35C                            ; ===========================================================================
0000A35C 0000                       Obj37_Index:	dc.w Obj37_CountRings-Obj37_Index
0000A35E 0000                       		dc.w Obj37_Bounce-Obj37_Index
0000A360 0000                       		dc.w Obj37_Collect-Obj37_Index
0000A362 0000                       		dc.w Obj37_Sparkle-Obj37_Index
0000A364 0000                       		dc.w Obj37_Delete-Obj37_Index
0000A366                            ; ===========================================================================
0000A366                            
0000A366                            Obj37_CountRings:			; XREF: Obj37_Index
0000A366 2248                       		movea.l	a0,a1
0000A368 7A00                       		moveq	#0,d5
0000A36A 3A38 FE20                  		move.w	($FFFFFE20).w,d5 ; check number	of rings you have
0000A36E 7020                       		moveq	#32,d0
0000A370 BA40                       		cmp.w	d0,d5		; do you have 32 or more?
0000A372 6500                       		bcs.s	loc_9CDE	; if not, branch
0000A374 3A00                       		move.w	d0,d5		; if yes, set d5 to 32
0000A376                            
0000A376                            loc_9CDE:
0000A376 5345                       		subq.w	#1,d5
0000A378 383C 0288                  		move.w	#$288,d4
0000A37C 6000                       		bra.s	Obj37_MakeRings
0000A37E                            ; ===========================================================================
0000A37E                            
0000A37E                            Obj37_Loop:
0000A37E 6100 0000                  		bsr.w	SingleObjLoad
0000A382 6600 0000                  		bne.w	Obj37_ResetCounter
0000A386                            
0000A386                            Obj37_MakeRings:			; XREF: Obj37_CountRings
0000A386 12BC 0037                  		move.b	#$37,0(a1)	; load bouncing	ring object
0000A38A 5429 0024                  		addq.b	#2,$24(a1)
0000A38E 137C 0008 0016             		move.b	#8,$16(a1)
0000A394 137C 0008 0017             		move.b	#8,$17(a1)
0000A39A 3368 0008 0008             		move.w	8(a0),8(a1)
0000A3A0 3368 000C 000C             		move.w	$C(a0),$C(a1)
0000A3A6 237C 0000 0000 0004        		move.l	#Map_obj25,4(a1)
0000A3AE 337C 27B2 0002             		move.w	#$27B2,2(a1)
0000A3B4 137C 0004 0001             		move.b	#4,1(a1)
0000A3BA 137C 0003 0018             		move.b	#3,$18(a1)
0000A3C0 137C 0047 0020             		move.b	#$47,$20(a1)
0000A3C6 137C 0008 0019             		move.b	#8,$19(a1)
0000A3CC 11FC 00FF FEC6             		move.b	#-1,($FFFFFEC6).w
0000A3D2 4A44                       		tst.w	d4
0000A3D4 6B00                       		bmi.s	loc_9D62
0000A3D6 3004                       		move.w	d4,d0
0000A3D8 6100 88D2                  		bsr.w	CalcSine
0000A3DC 3404                       		move.w	d4,d2
0000A3DE E04A                       		lsr.w	#8,d2
0000A3E0 E560                       		asl.w	d2,d0
0000A3E2 E561                       		asl.w	d2,d1
0000A3E4 3400                       		move.w	d0,d2
0000A3E6 3601                       		move.w	d1,d3
0000A3E8 0604 0010                  		addi.b	#$10,d4
0000A3EC 6400                       		bcc.s	loc_9D62
0000A3EE 0444 0080                  		subi.w	#$80,d4
0000A3F2 6400                       		bcc.s	loc_9D62
0000A3F4 383C 0288                  		move.w	#$288,d4
0000A3F8                            
0000A3F8                            loc_9D62:
0000A3F8 3342 0010                  		move.w	d2,$10(a1)
0000A3FC 3343 0012                  		move.w	d3,$12(a1)
0000A400 4442                       		neg.w	d2
0000A402 4444                       		neg.w	d4
0000A404 51CD FF78                  		dbf	d5,Obj37_Loop	; repeat for number of rings (max 31)
0000A408                            
0000A408                            Obj37_ResetCounter:			; XREF: Obj37_Loop
0000A408 31FC 0000 FE20             		move.w	#0,($FFFFFE20).w ; reset number	of rings to zero
0000A40E 11FC 0080 FE1D             		move.b	#$80,($FFFFFE1D).w ; update ring counter
0000A414 11FC 0000 FE1B             		move.b	#0,($FFFFFE1B).w
0000A41A 303C 00C6                  		move.w	#$C6,d0
0000A41E 4EB9 0000 15C0             		jsr	(PlaySound_Special).l ;	play ring loss sound
0000A424                            
0000A424                            Obj37_Bounce:				; XREF: Obj37_Index
0000A424 1178 FEC7 001A             		move.b	($FFFFFEC7).w,$1A(a0)
0000A42A 6100 0000                  		bsr.w	SpeedToPos
0000A42E 0668 0018 0012             		addi.w	#$18,$12(a0)
0000A434 6B00                       		bmi.s	Obj37_ChkDel
0000A436 1038 FE0F                  		move.b	($FFFFFE0F).w,d0
0000A43A D007                       		add.b	d7,d0
0000A43C 0200 0003                  		andi.b	#3,d0
0000A440 6600                       		bne.s	Obj37_ChkDel
0000A442 4EB9 0000 0000             		jsr	ObjHitFloor
0000A448 4A41                       		tst.w	d1
0000A44A 6A00                       		bpl.s	Obj37_ChkDel
0000A44C D368 000C                  		add.w	d1,$C(a0)
0000A450 3028 0012                  		move.w	$12(a0),d0
0000A454 E440                       		asr.w	#2,d0
0000A456 9168 0012                  		sub.w	d0,$12(a0)
0000A45A 4468 0012                  		neg.w	$12(a0)
0000A45E                            
0000A45E                            Obj37_ChkDel:				; XREF: Obj37_Bounce
0000A45E 4A38 FEC6                  		tst.b	($FFFFFEC6).w
0000A462 6700                       		beq.s	Obj37_Delete
0000A464 3038 F72E                  		move.w	($FFFFF72E).w,d0
0000A468 0640 00E0                  		addi.w	#$E0,d0
0000A46C B068 000C                  		cmp.w	$C(a0),d0	; has object moved below level boundary?
0000A470 6500                       		bcs.s	Obj37_Delete	; if yes, branch
0000A472 6000 0000                  		bra.w	DisplaySprite
0000A476                            ; ===========================================================================
0000A476                            
0000A476                            Obj37_Collect:				; XREF: Obj37_Index
0000A476 5428 0024                  		addq.b	#2,$24(a0)
0000A47A 117C 0000 0020             		move.b	#0,$20(a0)
0000A480 117C 0001 0018             		move.b	#1,$18(a0)
0000A486 6100 FE86                  		bsr.w	CollectRing
0000A48A                            
0000A48A                            Obj37_Sparkle:				; XREF: Obj37_Index
0000A48A 43F9 0000 0000             		lea	(Ani_obj25).l,a1
0000A490 6100 0000                  		bsr.w	AnimateSprite
0000A494 6000 0000                  		bra.w	DisplaySprite
0000A498                            ; ===========================================================================
0000A498                            
0000A498                            Obj37_Delete:				; XREF: Obj37_Index
0000A498 6000 0000                  		bra.w	DeleteObject
0000A49C                            ; ===========================================================================
0000A49C                            ; ---------------------------------------------------------------------------
0000A49C                            ; Object 4B - giant ring for entry to special stage
0000A49C                            ; ---------------------------------------------------------------------------
0000A49C                            
0000A49C                            Obj4B:					; XREF: Obj_Index
0000A49C 7000                       		moveq	#0,d0
0000A49E 1028 0024                  		move.b	$24(a0),d0
0000A4A2 323B 0000                  		move.w	Obj4B_Index(pc,d0.w),d1
0000A4A6 4EFB 1000                  		jmp	Obj4B_Index(pc,d1.w)
0000A4AA                            ; ===========================================================================
0000A4AA 0000                       Obj4B_Index:	dc.w Obj4B_Main-Obj4B_Index
0000A4AC 0000                       		dc.w Obj4B_Animate-Obj4B_Index
0000A4AE 0000                       		dc.w Obj4B_Collect-Obj4B_Index
0000A4B0 0000                       		dc.w Obj4B_Delete-Obj4B_Index
0000A4B2                            ; ===========================================================================
0000A4B2                            
0000A4B2                            Obj4B_Main:				; XREF: Obj4B_Index
0000A4B2 217C 0000 0000 0004        		move.l	#Map_obj4B,4(a0)
0000A4BA 317C 2400 0002             		move.w	#$2400,2(a0)
0000A4C0 0028 0004 0001             		ori.b	#4,1(a0)
0000A4C6 117C 0040 0019             		move.b	#$40,$19(a0)
0000A4CC 4A28 0001                  		tst.b	1(a0)
0000A4D0 6A00                       		bpl.s	Obj4B_Animate
0000A4D2 0C38 0006 FE57             		cmpi.b	#6,($FFFFFE57).w ; do you have 6 emeralds?
0000A4D8 6700 0000                  		beq.w	Obj4B_Delete	; if yes, branch
0000A4DC 0C78 0032 FE20             		cmpi.w	#50,($FFFFFE20).w ; do you have	at least 50 rings?
0000A4E2 6400                       		bcc.s	Obj4B_Okay	; if yes, branch
0000A4E4 4E75                       		rts	
0000A4E6                            ; ===========================================================================
0000A4E6                            
0000A4E6                            Obj4B_Okay:				; XREF: Obj4B_Main
0000A4E6 5428 0024                  		addq.b	#2,$24(a0)
0000A4EA 117C 0002 0018             		move.b	#2,$18(a0)
0000A4F0 117C 0052 0020             		move.b	#$52,$20(a0)
0000A4F6 31FC 0C40 F7BE             		move.w	#$C40,($FFFFF7BE).w
0000A4FC                            
0000A4FC                            Obj4B_Animate:				; XREF: Obj4B_Index
0000A4FC 1178 FEC3 001A             		move.b	($FFFFFEC3).w,$1A(a0)
0000A502 3028 0008                  		move.w	8(a0),d0
0000A506 0240 FF80                  		andi.w	#$FF80,d0
0000A50A 3238 F700                  		move.w	($FFFFF700).w,d1
0000A50E 0441 0080                  		subi.w	#$80,d1
0000A512 0241 FF80                  		andi.w	#$FF80,d1
0000A516 9041                       		sub.w	d1,d0
0000A518 0C40 0280                  		cmpi.w	#$280,d0
0000A51C 6200 0000                  		bhi.w	DeleteObject
0000A520 6000 0000                  		bra.w	DisplaySprite
0000A524                            ; ===========================================================================
0000A524                            
0000A524                            Obj4B_Collect:				; XREF: Obj4B_Index
0000A524 5528 0024                  		subq.b	#2,$24(a0)
0000A528 117C 0000 0020             		move.b	#0,$20(a0)
0000A52E 6100 0000                  		bsr.w	SingleObjLoad
0000A532 6600 0000                  		bne.w	Obj4B_PlaySnd
0000A536 12BC 007C                  		move.b	#$7C,0(a1)	; load giant ring flash	object
0000A53A 3368 0008 0008             		move.w	8(a0),8(a1)
0000A540 3368 000C 000C             		move.w	$C(a0),$C(a1)
0000A546 2348 003C                  		move.l	a0,$3C(a1)
0000A54A 3038 D008                  		move.w	($FFFFD008).w,d0
0000A54E B068 0008                  		cmp.w	8(a0),d0	; has Sonic come from the left?
0000A552 6500                       		bcs.s	Obj4B_PlaySnd	; if yes, branch
0000A554 08E9 0000 0001             		bset	#0,1(a1)	; reverse flash	object
0000A55A                            
0000A55A                            Obj4B_PlaySnd:
0000A55A 303C 00C3                  		move.w	#$C3,d0
0000A55E 4EB9 0000 15C0             		jsr	(PlaySound_Special).l ;	play giant ring	sound
0000A564 6096                       		bra.s	Obj4B_Animate
0000A566                            ; ===========================================================================
0000A566                            
0000A566                            Obj4B_Delete:				; XREF: Obj4B_Index
0000A566 6000 0000                  		bra.w	DeleteObject
0000A56A                            ; ===========================================================================
0000A56A                            ; ---------------------------------------------------------------------------
0000A56A                            ; Object 7C - flash effect when	you collect the	giant ring
0000A56A                            ; ---------------------------------------------------------------------------
0000A56A                            
0000A56A                            Obj7C:					; XREF: Obj_Index
0000A56A 7000                       		moveq	#0,d0
0000A56C 1028 0024                  		move.b	$24(a0),d0
0000A570 323B 0000                  		move.w	Obj7C_Index(pc,d0.w),d1
0000A574 4EFB 1000                  		jmp	Obj7C_Index(pc,d1.w)
0000A578                            ; ===========================================================================
0000A578 0000                       Obj7C_Index:	dc.w Obj7C_Main-Obj7C_Index
0000A57A 0000                       		dc.w Obj7C_ChkDel-Obj7C_Index
0000A57C 0000                       		dc.w Obj7C_Delete-Obj7C_Index
0000A57E                            ; ===========================================================================
0000A57E                            
0000A57E                            Obj7C_Main:				; XREF: Obj7C_Index
0000A57E 5428 0024                  		addq.b	#2,$24(a0)
0000A582 217C 0000 0000 0004        		move.l	#Map_obj7C,4(a0)
0000A58A 317C 2462 0002             		move.w	#$2462,2(a0)
0000A590 0028 0004 0001             		ori.b	#4,1(a0)
0000A596 117C 0000 0018             		move.b	#0,$18(a0)
0000A59C 117C 0020 0019             		move.b	#$20,$19(a0)
0000A5A2 117C 00FF 001A             		move.b	#$FF,$1A(a0)
0000A5A8                            
0000A5A8                            Obj7C_ChkDel:				; XREF: Obj7C_Index
0000A5A8 6100                       		bsr.s	Obj7C_Collect
0000A5AA 3028 0008                  		move.w	8(a0),d0
0000A5AE 0240 FF80                  		andi.w	#$FF80,d0
0000A5B2 3238 F700                  		move.w	($FFFFF700).w,d1
0000A5B6 0441 0080                  		subi.w	#$80,d1
0000A5BA 0241 FF80                  		andi.w	#$FF80,d1
0000A5BE 9041                       		sub.w	d1,d0
0000A5C0 0C40 0280                  		cmpi.w	#$280,d0
0000A5C4 6200 0000                  		bhi.w	DeleteObject
0000A5C8 6000 0000                  		bra.w	DisplaySprite
0000A5CC                            
0000A5CC                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000A5CC                            
0000A5CC                            
0000A5CC                            Obj7C_Collect:				; XREF: Obj7C_ChkDel
0000A5CC 5328 001E                  		subq.b	#1,$1E(a0)
0000A5D0 6A00                       		bpl.s	locret_9F76
0000A5D2 117C 0001 001E             		move.b	#1,$1E(a0)
0000A5D8 5228 001A                  		addq.b	#1,$1A(a0)
0000A5DC 0C28 0008 001A             		cmpi.b	#8,$1A(a0)	; has animation	finished?
0000A5E2 6400                       		bcc.s	Obj7C_End	; if yes, branch
0000A5E4 0C28 0003 001A             		cmpi.b	#3,$1A(a0)	; is 3rd frame displayed?
0000A5EA 6600                       		bne.s	locret_9F76	; if not, branch
0000A5EC 2268 003C                  		movea.l	$3C(a0),a1
0000A5F0 137C 0006 0024             		move.b	#6,$24(a1)	; delete giant ring object (Obj4B)
0000A5F6 11FC 001C D01C             		move.b	#$1C,($FFFFD01C).w ; make Sonic	invisible
0000A5FC 11FC 0001 F7CD             		move.b	#1,($FFFFF7CD).w ; stop	Sonic getting bonuses
0000A602 4238 FE2D                  		clr.b	($FFFFFE2D).w	; remove invincibility
0000A606 4238 FE2C                  		clr.b	($FFFFFE2C).w	; remove shield
0000A60A                            
0000A60A                            locret_9F76:
0000A60A 4E75                       		rts	
0000A60C                            ; ===========================================================================
0000A60C                            
0000A60C                            Obj7C_End:				; XREF: Obj7C_Collect
0000A60C 5428 0024                  		addq.b	#2,$24(a0)
0000A610 31FC 0000 D000             		move.w	#0,($FFFFD000).w ; remove Sonic	object
0000A616 588F                       		addq.l	#4,sp
0000A618 4E75                       		rts	
0000A61A                            ; End of function Obj7C_Collect
0000A61A                            
0000A61A                            ; ===========================================================================
0000A61A                            
0000A61A                            Obj7C_Delete:				; XREF: Obj7C_Index
0000A61A 6000 0000                  		bra.w	DeleteObject
0000A61E                            ; ===========================================================================
0000A61E                            Ani_obj25:
0000A61E                            	include "_anim\obj25.asm"
0000A61E                            ; ---------------------------------------------------------------------------
0000A61E                            ; Animation script - ring
0000A61E                            ; ---------------------------------------------------------------------------
0000A61E 0000                       		dc.w byte_9F8C-Ani_obj25
0000A620 0504 0506 07FC             byte_9F8C:	dc.b 5,	4, 5, 6, 7, $FC
0000A626                            		even
0000A626                            		even
0000A626                            
0000A626                            ; ---------------------------------------------------------------------------
0000A626                            ; Sprite mappings - rings
0000A626                            ; ---------------------------------------------------------------------------
0000A626                            Map_obj25:
0000A626                            	include "_maps\obj25.asm"
0000A626                            ; ---------------------------------------------------------------------------
0000A626                            ; Sprite mappings - rings
0000A626                            ; ---------------------------------------------------------------------------
0000A626 0000 0000                  		dc.w byte_9FA2-Map_obj25, byte_9FA8-Map_obj25
0000A62A 0000 0000                  		dc.w byte_9FAE-Map_obj25, byte_9FB4-Map_obj25
0000A62E 0000 0000                  		dc.w byte_9FBA-Map_obj25, byte_9FC0-Map_obj25
0000A632 0000 0000                  		dc.w byte_9FC6-Map_obj25, byte_9FCC-Map_obj25
0000A636 01                         byte_9FA2:	dc.b 1
0000A637 F805 0000 F8               		dc.b $F8, 5, 0,	0, $F8
0000A63C 01                         byte_9FA8:	dc.b 1
0000A63D F805 0004 F8               		dc.b $F8, 5, 0,	4, $F8
0000A642 01                         byte_9FAE:	dc.b 1
0000A643 F801 0008 FC               		dc.b $F8, 1, 0,	8, $FC
0000A648 01                         byte_9FB4:	dc.b 1
0000A649 F805 0804 F8               		dc.b $F8, 5, 8,	4, $F8
0000A64E 01                         byte_9FBA:	dc.b 1
0000A64F F805 000A F8               		dc.b $F8, 5, 0,	$A, $F8
0000A654 01                         byte_9FC0:	dc.b 1
0000A655 F805 180A F8               		dc.b $F8, 5, $18, $A, $F8
0000A65A 01                         byte_9FC6:	dc.b 1
0000A65B F805 080A F8               		dc.b $F8, 5, 8,	$A, $F8
0000A660 01                         byte_9FCC:	dc.b 1
0000A661 F805 100A F8               		dc.b $F8, 5, $10, $A, $F8
0000A666                            		even
0000A666                            		even
0000A666                            
0000A666                            ; ---------------------------------------------------------------------------
0000A666                            ; Sprite mappings - giant ring
0000A666                            ; ---------------------------------------------------------------------------
0000A666                            Map_obj4B:
0000A666                            	include "_maps\obj4B.asm"
0000A666                            ; ---------------------------------------------------------------------------
0000A666                            ; Sprite mappings - giant ring
0000A666                            ; ---------------------------------------------------------------------------
0000A666 0000 0000                  		dc.w byte_9FDA-Map_obj4B, byte_A00D-Map_obj4B
0000A66A 0000 0000                  		dc.w byte_A036-Map_obj4B, byte_A04B-Map_obj4B
0000A66E 0A                         byte_9FDA:	dc.b $A
0000A66F E008 0000 E8               		dc.b $E0, 8, 0,	0, $E8
0000A674 E008 0003 00               		dc.b $E0, 8, 0,	3, 0
0000A679 E80C 0006 E0               		dc.b $E8, $C, 0, 6, $E0
0000A67E E80C 000A 00               		dc.b $E8, $C, 0, $A, 0
0000A683 F007 000E E0               		dc.b $F0, 7, 0,	$E, $E0
0000A688 F007 0016 10               		dc.b $F0, 7, 0,	$16, $10
0000A68D 100C 001E E0               		dc.b $10, $C, 0, $1E, $E0
0000A692 100C 0022 00               		dc.b $10, $C, 0, $22, 0
0000A697 1808 0026 E8               		dc.b $18, 8, 0,	$26, $E8
0000A69C 1808 0029 00               		dc.b $18, 8, 0,	$29, 0
0000A6A1 08                         byte_A00D:	dc.b 8
0000A6A2 E00C 002C F0               		dc.b $E0, $C, 0, $2C, $F0
0000A6A7 E808 0030 E8               		dc.b $E8, 8, 0,	$30, $E8
0000A6AC E809 0033 00               		dc.b $E8, 9, 0,	$33, 0
0000A6B1 F007 0039 E8               		dc.b $F0, 7, 0,	$39, $E8
0000A6B6 F805 0041 08               		dc.b $F8, 5, 0,	$41, 8
0000A6BB 0809 0045 00               		dc.b 8,	9, 0, $45, 0
0000A6C0 1008 004B E8               		dc.b $10, 8, 0,	$4B, $E8
0000A6C5 180C 004E F0               		dc.b $18, $C, 0, $4E, $F0
0000A6CA 04                         byte_A036:	dc.b 4
0000A6CB E007 0052 F4               		dc.b $E0, 7, 0,	$52, $F4
0000A6D0 E003 0852 04               		dc.b $E0, 3, 8,	$52, 4
0000A6D5 0007 005A F4               		dc.b 0,	7, 0, $5A, $F4
0000A6DA 0003 085A 04               		dc.b 0,	3, 8, $5A, 4
0000A6DF 08                         byte_A04B:	dc.b 8
0000A6E0 E00C 082C F0               		dc.b $E0, $C, 8, $2C, $F0
0000A6E5 E808 0830 00               		dc.b $E8, 8, 8,	$30, 0
0000A6EA E809 0833 E8               		dc.b $E8, 9, 8,	$33, $E8
0000A6EF F007 0839 08               		dc.b $F0, 7, 8,	$39, 8
0000A6F4 F805 0841 E8               		dc.b $F8, 5, 8,	$41, $E8
0000A6F9 0809 0845 E8               		dc.b 8,	9, 8, $45, $E8
0000A6FE 1008 084B 00               		dc.b $10, 8, 8,	$4B, 0
0000A703 180C 084E F0               		dc.b $18, $C, 8, $4E, $F0
0000A708                            		even
0000A708                            		even
0000A708                            
0000A708                            ; ---------------------------------------------------------------------------
0000A708                            ; Sprite mappings - flash effect when you collect the giant ring
0000A708                            ; ---------------------------------------------------------------------------
0000A708                            Map_obj7C:
0000A708                            	include "_maps\obj7C.asm"
0000A708                            ; ---------------------------------------------------------------------------
0000A708                            ; Sprite mappings - flash effect when you collect the giant ring
0000A708                            ; ---------------------------------------------------------------------------
0000A708 0000 0000                  		dc.w byte_A084-Map_obj7C, byte_A08F-Map_obj7C
0000A70C 0000 0000                  		dc.w byte_A0A4-Map_obj7C, byte_A0B9-Map_obj7C
0000A710 0000 0000                  		dc.w byte_A0CE-Map_obj7C, byte_A0E3-Map_obj7C
0000A714 0000 0000                  		dc.w byte_A0F8-Map_obj7C, byte_A103-Map_obj7C
0000A718 02                         byte_A084:	dc.b 2
0000A719 E00F 0000 00               		dc.b $E0, $F, 0, 0, 0
0000A71E 000F 1000 00               		dc.b 0,	$F, $10, 0, 0
0000A723 04                         byte_A08F:	dc.b 4
0000A724 E00F 0010 F0               		dc.b $E0, $F, 0, $10, $F0
0000A729 E007 0020 10               		dc.b $E0, 7, 0,	$20, $10
0000A72E 000F 1010 F0               		dc.b 0,	$F, $10, $10, $F0
0000A733 0007 1020 10               		dc.b 0,	7, $10,	$20, $10
0000A738 04                         byte_A0A4:	dc.b 4
0000A739 E00F 0028 E8               		dc.b $E0, $F, 0, $28, $E8
0000A73E E00B 0038 08               		dc.b $E0, $B, 0, $38, 8
0000A743 000F 1028 E8               		dc.b 0,	$F, $10, $28, $E8
0000A748 000B 1038 08               		dc.b 0,	$B, $10, $38, 8
0000A74D 04                         byte_A0B9:	dc.b 4
0000A74E E00F 0834 E0               		dc.b $E0, $F, 8, $34, $E0
0000A753 E00F 0034 00               		dc.b $E0, $F, 0, $34, 0
0000A758 000F 1834 E0               		dc.b 0,	$F, $18, $34, $E0
0000A75D 000F 1034 00               		dc.b 0,	$F, $10, $34, 0
0000A762 04                         byte_A0CE:	dc.b 4
0000A763 E00B 0838 E0               		dc.b $E0, $B, 8, $38, $E0
0000A768 E00F 0828 F8               		dc.b $E0, $F, 8, $28, $F8
0000A76D 000B 1838 E0               		dc.b 0,	$B, $18, $38, $E0
0000A772 000F 1828 F8               		dc.b 0,	$F, $18, $28, $F8
0000A777 04                         byte_A0E3:	dc.b 4
0000A778 E007 0820 E0               		dc.b $E0, 7, 8,	$20, $E0
0000A77D E00F 0810 F0               		dc.b $E0, $F, 8, $10, $F0
0000A782 0007 1820 E0               		dc.b 0,	7, $18,	$20, $E0
0000A787 000F 1810 F0               		dc.b 0,	$F, $18, $10, $F0
0000A78C 02                         byte_A0F8:	dc.b 2
0000A78D E00F 0800 E0               		dc.b $E0, $F, 8, 0, $E0
0000A792 000F 1800 E0               		dc.b 0,	$F, $18, 0, $E0
0000A797 04                         byte_A103:	dc.b 4
0000A798 E00F 0044 E0               		dc.b $E0, $F, 0, $44, $E0
0000A79D E00F 0844 00               		dc.b $E0, $F, 8, $44, 0
0000A7A2 000F 1044 E0               		dc.b 0,	$F, $10, $44, $E0
0000A7A7 000F 1844 00               		dc.b 0,	$F, $18, $44, 0
0000A7AC                            		even
0000A7AC                            		even
0000A7AC                            
0000A7AC                            ; ===========================================================================
0000A7AC                            ; ---------------------------------------------------------------------------
0000A7AC                            ; Object 26 - monitors
0000A7AC                            ; ---------------------------------------------------------------------------
0000A7AC                            
0000A7AC                            Obj26:					; XREF: Obj_Index
0000A7AC 7000                       		moveq	#0,d0
0000A7AE 1028 0024                  		move.b	$24(a0),d0
0000A7B2 323B 0000                  		move.w	Obj26_Index(pc,d0.w),d1
0000A7B6 4EFB 1000                  		jmp	Obj26_Index(pc,d1.w)
0000A7BA                            ; ===========================================================================
0000A7BA 0000                       Obj26_Index:	dc.w Obj26_Main-Obj26_Index
0000A7BC 0000                       		dc.w Obj26_Solid-Obj26_Index
0000A7BE 0000                       		dc.w Obj26_BreakOpen-Obj26_Index
0000A7C0 0000                       		dc.w Obj26_Animate-Obj26_Index
0000A7C2 0000                       		dc.w Obj26_Display-Obj26_Index
0000A7C4                            ; ===========================================================================
0000A7C4                            
0000A7C4                            Obj26_Main:				; XREF: Obj26_Index
0000A7C4 5428 0024                  		addq.b	#2,$24(a0)
0000A7C8 117C 000E 0016             		move.b	#$E,$16(a0)
0000A7CE 117C 000E 0017             		move.b	#$E,$17(a0)
0000A7D4 217C 0000 0000 0004        		move.l	#Map_obj26,4(a0)
0000A7DC 317C 0680 0002             		move.w	#$680,2(a0)
0000A7E2 117C 0004 0001             		move.b	#4,1(a0)
0000A7E8 117C 0003 0018             		move.b	#3,$18(a0)
0000A7EE 117C 000F 0019             		move.b	#$F,$19(a0)
0000A7F4 45F8 FC00                  		lea	($FFFFFC00).w,a2
0000A7F8 7000                       		moveq	#0,d0
0000A7FA 1028 0023                  		move.b	$23(a0),d0
0000A7FE 08B2 0007 0002             		bclr	#7,2(a2,d0.w)
0000A804 0832 0000 0002             		btst	#0,2(a2,d0.w)	; has monitor been broken?
0000A80A 6700                       		beq.s	Obj26_NotBroken	; if not, branch
0000A80C 117C 0008 0024             		move.b	#8,$24(a0)	; run "Obj26_Display" routine
0000A812 117C 000B 001A             		move.b	#$B,$1A(a0)	; use broken monitor frame
0000A818 4E75                       		rts	
0000A81A                            ; ===========================================================================
0000A81A                            
0000A81A                            Obj26_NotBroken:			; XREF: Obj26_Main
0000A81A 117C 0046 0020             		move.b	#$46,$20(a0)
0000A820 1168 0028 001C             		move.b	$28(a0),$1C(a0)
0000A826                            
0000A826                            Obj26_Solid:				; XREF: Obj26_Index
0000A826 1028 0025                  		move.b	$25(a0),d0	; is monitor set to fall?
0000A82A 6700                       		beq.s	loc_A1EC	; if not, branch
0000A82C 5500                       		subq.b	#2,d0
0000A82E 6600                       		bne.s	Obj26_Fall
0000A830 7200                       		moveq	#0,d1
0000A832 1228 0019                  		move.b	$19(a0),d1
0000A836 0641 000B                  		addi.w	#$B,d1
0000A83A 6100 D380                  		bsr.w	ExitPlatform
0000A83E 0829 0003 0022             		btst	#3,$22(a1)
0000A844 6600 0000                  		bne.w	loc_A1BC
0000A848 4228 0025                  		clr.b	$25(a0)
0000A84C 6000 0000                  		bra.w	Obj26_Animate
0000A850                            ; ===========================================================================
0000A850                            
0000A850                            loc_A1BC:				; XREF: Obj26_Solid
0000A850 363C 0010                  		move.w	#$10,d3
0000A854 3428 0008                  		move.w	8(a0),d2
0000A858 6100 D8C0                  		bsr.w	MvSonicOnPtfm
0000A85C 6000 0000                  		bra.w	Obj26_Animate
0000A860                            ; ===========================================================================
0000A860                            
0000A860                            Obj26_Fall:				; XREF: Obj26_Solid
0000A860 6100 0000                  		bsr.w	ObjectFall
0000A864 4EB9 0000 0000             		jsr	ObjHitFloor
0000A86A 4A41                       		tst.w	d1
0000A86C 6A00 0000                  		bpl.w	Obj26_Animate
0000A870 D368 000C                  		add.w	d1,$C(a0)
0000A874 4268 0012                  		clr.w	$12(a0)
0000A878 4228 0025                  		clr.b	$25(a0)
0000A87C 6000 0000                  		bra.w	Obj26_Animate
0000A880                            ; ===========================================================================
0000A880                            
0000A880                            loc_A1EC:				; XREF: Obj26_Solid
0000A880 323C 001A                  		move.w	#$1A,d1
0000A884 343C 000F                  		move.w	#$F,d2
0000A888 6100 0000                  		bsr.w	Obj26_SolidSides
0000A88C 6700 0000                  		beq.w	loc_A25C
0000A890 4A69 0012                  		tst.w	$12(a1)
0000A894 6B00                       		bmi.s	loc_A20A
0000A896 0C29 0002 001C             		cmpi.b	#2,$1C(a1)	; is Sonic rolling?
0000A89C 6700                       		beq.s	loc_A25C	; if yes, branch
0000A89E                            
0000A89E                            loc_A20A:
0000A89E 4A41                       		tst.w	d1
0000A8A0 6A00                       		bpl.s	loc_A220
0000A8A2 9769 000C                  		sub.w	d3,$C(a1)
0000A8A6 6100 D202                  		bsr.w	loc_74AE
0000A8AA 117C 0002 0025             		move.b	#2,$25(a0)
0000A8B0 6000 0000                  		bra.w	Obj26_Animate
0000A8B4                            ; ===========================================================================
0000A8B4                            
0000A8B4                            loc_A220:
0000A8B4 4A40                       		tst.w	d0
0000A8B6 6700 0000                  		beq.w	loc_A246
0000A8BA 6B00                       		bmi.s	loc_A230
0000A8BC 4A69 0010                  		tst.w	$10(a1)
0000A8C0 6B00                       		bmi.s	loc_A246
0000A8C2 6000                       		bra.s	loc_A236
0000A8C4                            ; ===========================================================================
0000A8C4                            
0000A8C4                            loc_A230:
0000A8C4 4A69 0010                  		tst.w	$10(a1)
0000A8C8 6A00                       		bpl.s	loc_A246
0000A8CA                            
0000A8CA                            loc_A236:
0000A8CA 9169 0008                  		sub.w	d0,8(a1)
0000A8CE 337C 0000 0014             		move.w	#0,$14(a1)
0000A8D4 337C 0000 0010             		move.w	#0,$10(a1)
0000A8DA                            
0000A8DA                            loc_A246:
0000A8DA 0829 0001 0022             		btst	#1,$22(a1)
0000A8E0 6600                       		bne.s	loc_A26A
0000A8E2 08E9 0005 0022             		bset	#5,$22(a1)
0000A8E8 08E8 0005 0022             		bset	#5,$22(a0)
0000A8EE 6000                       		bra.s	Obj26_Animate
0000A8F0                            ; ===========================================================================
0000A8F0                            
0000A8F0                            loc_A25C:
0000A8F0 0828 0005 0022             		btst	#5,$22(a0)
0000A8F6 6700                       		beq.s	Obj26_Animate
0000A8F8 337C 0001 001C             		move.w	#1,$1C(a1)
0000A8FE                            
0000A8FE                            loc_A26A:
0000A8FE 08A8 0005 0022             		bclr	#5,$22(a0)
0000A904 08A9 0005 0022             		bclr	#5,$22(a1)
0000A90A                            
0000A90A                            Obj26_Animate:				; XREF: Obj26_Index
0000A90A 43F9 0000 0000             		lea	(Ani_obj26).l,a1
0000A910 6100 0000                  		bsr.w	AnimateSprite
0000A914                            
0000A914                            Obj26_Display:				; XREF: Obj26_Index
0000A914 6100 0000                  		bsr.w	DisplaySprite
0000A918 3028 0008                  		move.w	8(a0),d0
0000A91C 0240 FF80                  		andi.w	#$FF80,d0
0000A920 3238 F700                  		move.w	($FFFFF700).w,d1
0000A924 0441 0080                  		subi.w	#$80,d1
0000A928 0241 FF80                  		andi.w	#$FF80,d1
0000A92C 9041                       		sub.w	d1,d0
0000A92E 0C40 0280                  		cmpi.w	#$280,d0
0000A932 6200 0000                  		bhi.w	DeleteObject
0000A936 4E75                       		rts	
0000A938                            ; ===========================================================================
0000A938                            
0000A938                            Obj26_BreakOpen:			; XREF: Obj26_Index
0000A938 5428 0024                  		addq.b	#2,$24(a0)
0000A93C 117C 0000 0020             		move.b	#0,$20(a0)
0000A942 6100 0000                  		bsr.w	SingleObjLoad
0000A946 6600                       		bne.s	Obj26_Explode
0000A948 12BC 002E                  		move.b	#$2E,0(a1)	; load monitor contents	object
0000A94C 3368 0008 0008             		move.w	8(a0),8(a1)
0000A952 3368 000C 000C             		move.w	$C(a0),$C(a1)
0000A958 1368 001C 001C             		move.b	$1C(a0),$1C(a1)
0000A95E 7400                       		moveq	#0,d2	; GMZ
0000A960 7205                       		moveq	#5,d1	; GMZ: Amount of explosion objects
0000A962                            
0000A962                            Obj26_Explode:
0000A962 6100 0000                  		bsr.w	SingleObjLoad
0000A966 6600                       		bne.s	Obj26_SetBroken
0000A968 12BC 0027                  		move.b	#$27,0(a1)	; GMZ: Load explosion object
0000A96C 5429 0024                  		addq.b	#2,$24(a1)
0000A970 1342 0028                  		move.b	d2,$28(a1)	; GMZ: Set subtype
0000A974 3368 0008 0008             		move.w	8(a0),8(a1)
0000A97A 3368 000C 000C             		move.w	$C(a0),$C(a1)
0000A980                            
0000A980                            Obj26_NextExplosion:
0000A980 5802                       		addq.b	#4,d2
0000A982 51C9 FFDE                  		dbf	d1,Obj26_Explode
0000A986                            
0000A986                            Obj26_SetBroken:
0000A986 45F8 FC00                  		lea	($FFFFFC00).w,a2
0000A98A 7000                       		moveq	#0,d0
0000A98C 1028 0023                  		move.b	$23(a0),d0
0000A990 08F2 0000 0002             		bset	#0,2(a2,d0.w)
0000A996 117C 0009 001C             		move.b	#9,$1C(a0)	; set monitor type to broken
0000A99C 6000 0000                  		bra.w	DisplaySprite
0000A9A0                            ; ===========================================================================
0000A9A0                            ; ---------------------------------------------------------------------------
0000A9A0                            ; Object 2E - contents of monitors
0000A9A0                            ; ---------------------------------------------------------------------------
0000A9A0                            
0000A9A0                            Obj2E:					; XREF: Obj_Index
0000A9A0 7000                       		moveq	#0,d0
0000A9A2 1028 0024                  		move.b	$24(a0),d0
0000A9A6 323B 0000                  		move.w	Obj2E_Index(pc,d0.w),d1
0000A9AA 4EBB 1000                  		jsr	Obj2E_Index(pc,d1.w)
0000A9AE 6000 0000                  		bra.w	DisplaySprite
0000A9B2                            ; ===========================================================================
0000A9B2 0000                       Obj2E_Index:	dc.w Obj2E_Main-Obj2E_Index
0000A9B4 0000                       		dc.w Obj2E_Move-Obj2E_Index
0000A9B6 0000                       		dc.w Obj2E_Delete-Obj2E_Index
0000A9B8                            ; ===========================================================================
0000A9B8                            
0000A9B8                            Obj2E_Main:				; XREF: Obj2E_Index
0000A9B8 5428 0024                  		addq.b	#2,$24(a0)
0000A9BC 317C 0680 0002             		move.w	#$680,2(a0)
0000A9C2 117C 0024 0001             		move.b	#$24,1(a0)
0000A9C8 117C 0003 0018             		move.b	#3,$18(a0)
0000A9CE 117C 0008 0019             		move.b	#8,$19(a0)
0000A9D4 317C FD00 0012             		move.w	#-$300,$12(a0)
0000A9DA 7000                       		moveq	#0,d0
0000A9DC 1028 001C                  		move.b	$1C(a0),d0
0000A9E0 5400                       		addq.b	#2,d0
0000A9E2 1140 001A                  		move.b	d0,$1A(a0)
0000A9E6 227C 0000 0000             		movea.l	#Map_obj26,a1
0000A9EC D000                       		add.b	d0,d0
0000A9EE D2F1 0000                  		adda.w	(a1,d0.w),a1
0000A9F2 5249                       		addq.w	#1,a1
0000A9F4 2149 0004                  		move.l	a1,4(a0)
0000A9F8                            
0000A9F8                            Obj2E_Move:				; XREF: Obj2E_Index
0000A9F8 4A68 0012                  		tst.w	$12(a0)		; is object moving?
0000A9FC 6A00 0000                  		bpl.w	Obj2E_ChkEggman	; if not, branch
0000AA00 6100 0000                  		bsr.w	SpeedToPos
0000AA04 0668 0018 0012             		addi.w	#$18,$12(a0)	; reduce object	speed
0000AA0A 4E75                       		rts	
0000AA0C                            ; ===========================================================================
0000AA0C                            
0000AA0C                            Obj2E_ChkEggman:			; XREF: Obj2E_Move
0000AA0C 5428 0024                  		addq.b	#2,$24(a0)
0000AA10 317C 001D 001E             		move.w	#29,$1E(a0)
0000AA16 1028 001C                  		move.b	$1C(a0),d0
0000AA1A 0C00 0001                  		cmpi.b	#1,d0		; does monitor contain Eggman?
0000AA1E 6600                       		bne.s	Obj2E_ChkSonic
0000AA20 4E75                       		rts			; Eggman monitor does nothing
0000AA22                            ; ===========================================================================
0000AA22                            
0000AA22                            Obj2E_ChkSonic:
0000AA22 0C00 0002                  		cmpi.b	#2,d0		; does monitor contain Sonic?
0000AA26 6600                       		bne.s	Obj2E_ChkShoes
0000AA28                            
0000AA28                            ExtraLife:
0000AA28 5238 FE12                  		addq.b	#1,($FFFFFE12).w ; add 1 to the	number of lives	you have
0000AA2C 5238 FE1C                  		addq.b	#1,($FFFFFE1C).w ; add 1 to the	lives counter
0000AA30 303C 0088                  		move.w	#$88,d0
0000AA34 4EF9 0000 15BA             		jmp	(PlaySound).l	; play extra life music
0000AA3A                            ; ===========================================================================
0000AA3A                            
0000AA3A                            Obj2E_ChkShoes:
0000AA3A 0C00 0003                  		cmpi.b	#3,d0		; does monitor contain speed shoes?
0000AA3E 6600                       		bne.s	Obj2E_ChkShield
0000AA40 11FC 0001 FE2E             		move.b	#1,($FFFFFE2E).w ; speed up the	BG music
0000AA46 31FC 04B0 D034             		move.w	#$4B0,($FFFFD034).w ; time limit for the power-up
0000AA4C 31FC 0C00 F760             		move.w	#$C00,($FFFFF760).w ; change Sonic's top speed
0000AA52 31FC 0018 F762             		move.w	#$18,($FFFFF762).w
0000AA58 31FC 0080 F764             		move.w	#$80,($FFFFF764).w
0000AA5E 303C 00E2                  		move.w	#$E2,d0
0000AA62 4EF9 0000 15BA             		jmp	(PlaySound).l	; Speed	up the music
0000AA68                            ; ===========================================================================
0000AA68                            
0000AA68                            Obj2E_ChkShield:
0000AA68 0C00 0004                  		cmpi.b	#4,d0		; does monitor contain a shield?
0000AA6C 6600                       		bne.s	Obj2E_ChkInvinc
0000AA6E 11FC 0001 FE2C             		move.b	#1,($FFFFFE2C).w ; give	Sonic a	shield
0000AA74 11FC 0038 D180             		move.b	#$38,($FFFFD180).w ; load shield object	($38)
0000AA7A 303C 00AF                  		move.w	#$AF,d0
0000AA7E 4EF9 0000 15BA             		jmp	(PlaySound).l	; play shield sound
0000AA84                            ; ===========================================================================
0000AA84                            
0000AA84                            Obj2E_ChkInvinc:
0000AA84 0C00 0005                  		cmpi.b	#5,d0		; does monitor contain invincibility?
0000AA88 6600                       		bne.s	Obj2E_ChkRings
0000AA8A 11FC 0001 FE2D             		move.b	#1,($FFFFFE2D).w ; make	Sonic invincible
0000AA90 31FC 04B0 D032             		move.w	#$4B0,($FFFFD032).w ; time limit for the power-up
0000AA96 11FC 0038 D200             		move.b	#$38,($FFFFD200).w ; load stars	object ($3801)
0000AA9C 11FC 0001 D21C             		move.b	#1,($FFFFD21C).w
0000AAA2 11FC 0038 D240             		move.b	#$38,($FFFFD240).w ; load stars	object ($3802)
0000AAA8 11FC 0002 D25C             		move.b	#2,($FFFFD25C).w
0000AAAE 11FC 0038 D280             		move.b	#$38,($FFFFD280).w ; load stars	object ($3803)
0000AAB4 11FC 0003 D29C             		move.b	#3,($FFFFD29C).w
0000AABA 11FC 0038 D2C0             		move.b	#$38,($FFFFD2C0).w ; load stars	object ($3804)
0000AAC0 11FC 0004 D2DC             		move.b	#4,($FFFFD2DC).w
0000AAC6 4A38 F7AA                  		tst.b	($FFFFF7AA).w	; is boss mode on?
0000AACA 6600                       		bne.s	Obj2E_NoMusic	; if yes, branch
0000AACC 303C 0087                  		move.w	#$87,d0
0000AAD0 4EF9 0000 15BA             		jmp	(PlaySound).l	; play invincibility music
0000AAD6                            ; ===========================================================================
0000AAD6                            
0000AAD6                            Obj2E_NoMusic:
0000AAD6 4E75                       		rts	
0000AAD8                            ; ===========================================================================
0000AAD8                            
0000AAD8                            Obj2E_ChkRings:
0000AAD8 0C00 0006                  		cmpi.b	#6,d0		; does monitor contain 10 rings?
0000AADC 6600                       		bne.s	Obj2E_ChkS
0000AADE 0678 000A FE20             		addi.w	#$A,($FFFFFE20).w ; add	10 rings to the	number of rings	you have
0000AAE4 0038 0001 FE1D             		ori.b	#1,($FFFFFE1D).w ; update the ring counter
0000AAEA 0C78 0064 FE20             		cmpi.w	#100,($FFFFFE20).w ; check if you have 100 rings
0000AAF0 6500                       		bcs.s	Obj2E_RingSound
0000AAF2 08F8 0001 FE1B             		bset	#1,($FFFFFE1B).w
0000AAF8 6700 FF2E                  		beq.w	ExtraLife
0000AAFC 0C78 00C8 FE20             		cmpi.w	#200,($FFFFFE20).w ; check if you have 200 rings
0000AB02 6500                       		bcs.s	Obj2E_RingSound
0000AB04 08F8 0002 FE1B             		bset	#2,($FFFFFE1B).w
0000AB0A 6700 FF1C                  		beq.w	ExtraLife
0000AB0E                            
0000AB0E                            Obj2E_RingSound:
0000AB0E 303C 00B5                  		move.w	#$B5,d0
0000AB12 4EF9 0000 15BA             		jmp	(PlaySound).l	; play ring sound
0000AB18                            ; ===========================================================================
0000AB18                            
0000AB18                            Obj2E_ChkS:
0000AB18 0C00 0007                  		cmpi.b	#7,d0		; does monitor contain 'S'
0000AB1C 6600                       		bne.s	Obj2E_ChkEnd
0000AB1E                            		; nop	
0000AB1E 7201                       		moveq	#1,d1
0000AB20 B338 FE2F                  		eor.b	d1,($FFFFFE2F).w	; GMZ: Set reverse controls flag when broken, revert when another monitor of same type is broken again
0000AB24                            
0000AB24                            Obj2E_ChkEnd:
0000AB24 4E75                       		rts			; 'S' and goggles monitors do nothing
0000AB26                            ; ===========================================================================
0000AB26                            
0000AB26                            Obj2E_Delete:				; XREF: Obj2E_Index
0000AB26 5368 001E                  		subq.w	#1,$1E(a0)
0000AB2A 6B00 0000                  		bmi.w	DeleteObject
0000AB2E 4E75                       		rts	
0000AB30                            ; ---------------------------------------------------------------------------
0000AB30                            ; Subroutine to	make the sides of a monitor solid
0000AB30                            ; ---------------------------------------------------------------------------
0000AB30                            
0000AB30                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000AB30                            
0000AB30                            
0000AB30                            Obj26_SolidSides:			; XREF: loc_A1EC
0000AB30 43F8 D000                  		lea	($FFFFD000).w,a1
0000AB34 3029 0008                  		move.w	8(a1),d0
0000AB38 9068 0008                  		sub.w	8(a0),d0
0000AB3C D041                       		add.w	d1,d0
0000AB3E 6B00                       		bmi.s	loc_A4E6
0000AB40 3601                       		move.w	d1,d3
0000AB42 D643                       		add.w	d3,d3
0000AB44 B043                       		cmp.w	d3,d0
0000AB46 6200                       		bhi.s	loc_A4E6
0000AB48 1629 0016                  		move.b	$16(a1),d3
0000AB4C 4883                       		ext.w	d3
0000AB4E D443                       		add.w	d3,d2
0000AB50 3629 000C                  		move.w	$C(a1),d3
0000AB54 9668 000C                  		sub.w	$C(a0),d3
0000AB58 D642                       		add.w	d2,d3
0000AB5A 6B00                       		bmi.s	loc_A4E6
0000AB5C D442                       		add.w	d2,d2
0000AB5E B642                       		cmp.w	d2,d3
0000AB60 6400                       		bcc.s	loc_A4E6
0000AB62 4A38 F7C8                  		tst.b	($FFFFF7C8).w
0000AB66 6B00                       		bmi.s	loc_A4E6
0000AB68 0C38 0006 D024             		cmpi.b	#6,($FFFFD024).w
0000AB6E 6400                       		bcc.s	loc_A4E6
0000AB70 4A78 FE08                  		tst.w	($FFFFFE08).w
0000AB74 6600                       		bne.s	loc_A4E6
0000AB76 B240                       		cmp.w	d0,d1
0000AB78 6400                       		bcc.s	loc_A4DC
0000AB7A D241                       		add.w	d1,d1
0000AB7C 9041                       		sub.w	d1,d0
0000AB7E                            
0000AB7E                            loc_A4DC:
0000AB7E 0C43 0010                  		cmpi.w	#$10,d3
0000AB82 6500                       		bcs.s	loc_A4EA
0000AB84                            
0000AB84                            loc_A4E2:
0000AB84 7201                       		moveq	#1,d1
0000AB86 4E75                       		rts	
0000AB88                            ; ===========================================================================
0000AB88                            
0000AB88                            loc_A4E6:
0000AB88 7200                       		moveq	#0,d1
0000AB8A 4E75                       		rts	
0000AB8C                            ; ===========================================================================
0000AB8C                            
0000AB8C                            loc_A4EA:
0000AB8C 7200                       		moveq	#0,d1
0000AB8E 1228 0019                  		move.b	$19(a0),d1
0000AB92 5841                       		addq.w	#4,d1
0000AB94 3401                       		move.w	d1,d2
0000AB96 D442                       		add.w	d2,d2
0000AB98 D269 0008                  		add.w	8(a1),d1
0000AB9C 9268 0008                  		sub.w	8(a0),d1
0000ABA0 6BE2                       		bmi.s	loc_A4E2
0000ABA2 B242                       		cmp.w	d2,d1
0000ABA4 64DE                       		bcc.s	loc_A4E2
0000ABA6 72FF                       		moveq	#-1,d1
0000ABA8 4E75                       		rts	
0000ABAA                            ; End of function Obj26_SolidSides
0000ABAA                            
0000ABAA                            ; ===========================================================================
0000ABAA                            Ani_obj26:
0000ABAA                            	include "_anim\obj26.asm"
0000ABAA                            ; ---------------------------------------------------------------------------
0000ABAA                            ; Animation script - monitors
0000ABAA                            ; ---------------------------------------------------------------------------
0000ABAA 0000 0000 0000             		dc.w byte_A51C-Ani_obj26, byte_A522-Ani_obj26, byte_A52E-Ani_obj26
0000ABB0 0000 0000 0000             		dc.w byte_A53A-Ani_obj26, byte_A546-Ani_obj26, byte_A552-Ani_obj26
0000ABB6 0000 0000 0000             		dc.w byte_A55E-Ani_obj26, byte_A56A-Ani_obj26, byte_A576-Ani_obj26
0000ABBC 0000                       		dc.w byte_A582-Ani_obj26
0000ABBE 0100 0102 FF00             byte_A51C:	dc.b 1,	0, 1, 2, $FF, 0
0000ABC4 0100 0303 0103 0302 0303+  byte_A522:	dc.b 1,	0, 3, 3, 1, 3, 3, 2, 3,	3, $FF,	0
0000ABD0 0100 0404 0104 0402 0404+  byte_A52E:	dc.b 1,	0, 4, 4, 1, 4, 4, 2, 4,	4, $FF,	0
0000ABDC 0100 0505 0105 0502 0505+  byte_A53A:	dc.b 1,	0, 5, 5, 1, 5, 5, 2, 5,	5, $FF,	0
0000ABE8 0100 0606 0106 0602 0606+  byte_A546:	dc.b 1,	0, 6, 6, 1, 6, 6, 2, 6,	6, $FF,	0
0000ABF4 0100 0707 0107 0702 0707+  byte_A552:	dc.b 1,	0, 7, 7, 1, 7, 7, 2, 7,	7, $FF,	0
0000AC00 0100 0808 0108 0802 0808+  byte_A55E:	dc.b 1,	0, 8, 8, 1, 8, 8, 2, 8,	8, $FF,	0
0000AC0C 0100 0909 0109 0902 0909+  byte_A56A:	dc.b 1,	0, 9, 9, 1, 9, 9, 2, 9,	9, $FF,	0
0000AC18 0100 0A0A 010A 0A02 0A0A+  byte_A576:	dc.b 1,	0, $A, $A, 1, $A, $A, 2, $A, $A, $FF, 0
0000AC24 0200 0102 0BFE 0100        byte_A582:	dc.b 2,	0, 1, 2, $B, $FE, 1, 0
0000AC2C                            		even
0000AC2C                            		even
0000AC2C                            
0000AC2C                            ; ---------------------------------------------------------------------------
0000AC2C                            ; Sprite mappings - monitors
0000AC2C                            ; ---------------------------------------------------------------------------
0000AC2C                            Map_obj26:
0000AC2C                            	include "_maps\obj26.asm"
0000AC2C                            ; ================================================================================
0000AC2C                            ; Sprite Mappings - generated by Flex 2 Sat Mar 22 2025 11:29:00 GMT-0500 (Central Daylight Time)
0000AC2C                            ; ================================================================================
0000AC2C                            
0000AC2C                            DATAY1U343IF3L:
0000AC2C 0000 0000                  	dc.w DATAY1U343IF3L_0-DATAY1U343IF3L, DATAY1U343IF3L_1-DATAY1U343IF3L
0000AC30 0000 0000                  	dc.w DATAY1U343IF3L_2-DATAY1U343IF3L, DATAY1U343IF3L_3-DATAY1U343IF3L
0000AC34 0000 0000                  	dc.w DATAY1U343IF3L_4-DATAY1U343IF3L, DATAY1U343IF3L_5-DATAY1U343IF3L
0000AC38 0000 0000                  	dc.w DATAY1U343IF3L_6-DATAY1U343IF3L, DATAY1U343IF3L_7-DATAY1U343IF3L
0000AC3C 0000 0000                  	dc.w DATAY1U343IF3L_8-DATAY1U343IF3L, DATAY1U343IF3L_9-DATAY1U343IF3L
0000AC40 0000 0000                  	dc.w DATAY1U343IF3L_A-DATAY1U343IF3L, DATAY1U343IF3L_B-DATAY1U343IF3L
0000AC44 05                         DATAY1U343IF3L_0: dc.b $5
0000AC45 E20F 0000 EB               	dc.b $E2, $F, $0, $0, $EB
0000AC4A 020D 0010 EB               	dc.b $2, $D, $0, $10, $EB
0000AC4F E207 0018 0B               	dc.b $E2, $7, $0, $18, $B
0000AC54 0204 0020 0B               	dc.b $2, $4, $0, $20, $B
0000AC59 0A00 0022 0B               	dc.b $A, $0, $0, $22, $B
0000AC5E 06                         DATAY1U343IF3L_1: dc.b $6
0000AC5F F205 0023 F8               	dc.b $F2, $5, $0, $23, $F8
0000AC64 E20F 0000 EB               	dc.b $E2, $F, $0, $0, $EB
0000AC69 020D 0010 EB               	dc.b $2, $D, $0, $10, $EB
0000AC6E E207 0018 0B               	dc.b $E2, $7, $0, $18, $B
0000AC73 0204 0020 0B               	dc.b $2, $4, $0, $20, $B
0000AC78 0A00 0022 0B               	dc.b $A, $0, $0, $22, $B
0000AC7D 05                         DATAY1U343IF3L_2: dc.b $5
0000AC7E E20F 0000 EB               	dc.b $E2, $F, $0, $0, $EB
0000AC83 020D 0010 EB               	dc.b $2, $D, $0, $10, $EB
0000AC88 E207 0018 0B               	dc.b $E2, $7, $0, $18, $B
0000AC8D 0204 0020 0B               	dc.b $2, $4, $0, $20, $B
0000AC92 0A00 0022 0B               	dc.b $A, $0, $0, $22, $B
0000AC97 05                         DATAY1U343IF3L_3: dc.b $5
0000AC98 E20F 0000 EB               	dc.b $E2, $F, $0, $0, $EB
0000AC9D 020D 0010 EB               	dc.b $2, $D, $0, $10, $EB
0000ACA2 E207 0018 0B               	dc.b $E2, $7, $0, $18, $B
0000ACA7 0204 0020 0B               	dc.b $2, $4, $0, $20, $B
0000ACAC 0A00 0022 0B               	dc.b $A, $0, $0, $22, $B
0000ACB1 06                         DATAY1U343IF3L_4: dc.b $6
0000ACB2 F205 0027 F8               	dc.b $F2, $5, $0, $27, $F8
0000ACB7 E20F 0000 EB               	dc.b $E2, $F, $0, $0, $EB
0000ACBC 020D 0010 EB               	dc.b $2, $D, $0, $10, $EB
0000ACC1 E207 0018 0B               	dc.b $E2, $7, $0, $18, $B
0000ACC6 0204 0020 0B               	dc.b $2, $4, $0, $20, $B
0000ACCB 0A00 0022 0B               	dc.b $A, $0, $0, $22, $B
0000ACD0 06                         DATAY1U343IF3L_5: dc.b $6
0000ACD1 F205 002B F8               	dc.b $F2, $5, $0, $2B, $F8
0000ACD6 E20F 0000 EB               	dc.b $E2, $F, $0, $0, $EB
0000ACDB 020D 0010 EB               	dc.b $2, $D, $0, $10, $EB
0000ACE0 E207 0018 0B               	dc.b $E2, $7, $0, $18, $B
0000ACE5 0204 0020 0B               	dc.b $2, $4, $0, $20, $B
0000ACEA 0A00 0022 0B               	dc.b $A, $0, $0, $22, $B
0000ACEF 06                         DATAY1U343IF3L_6: dc.b $6
0000ACF0 F205 002F F8               	dc.b $F2, $5, $0, $2F, $F8
0000ACF5 E20F 0000 EB               	dc.b $E2, $F, $0, $0, $EB
0000ACFA 020D 0010 EB               	dc.b $2, $D, $0, $10, $EB
0000ACFF E207 0018 0B               	dc.b $E2, $7, $0, $18, $B
0000AD04 0204 0020 0B               	dc.b $2, $4, $0, $20, $B
0000AD09 0A00 0022 0B               	dc.b $A, $0, $0, $22, $B
0000AD0E 06                         DATAY1U343IF3L_7: dc.b $6
0000AD0F F205 0033 F8               	dc.b $F2, $5, $0, $33, $F8
0000AD14 E20F 0000 EB               	dc.b $E2, $F, $0, $0, $EB
0000AD19 020D 0010 EB               	dc.b $2, $D, $0, $10, $EB
0000AD1E E207 0018 0B               	dc.b $E2, $7, $0, $18, $B
0000AD23 0204 0020 0B               	dc.b $2, $4, $0, $20, $B
0000AD28 0A00 0022 0B               	dc.b $A, $0, $0, $22, $B
0000AD2D 06                         DATAY1U343IF3L_8: dc.b $6
0000AD2E F205 0037 F8               	dc.b $F2, $5, $0, $37, $F8
0000AD33 E20F 0000 EB               	dc.b $E2, $F, $0, $0, $EB
0000AD38 020D 0010 EB               	dc.b $2, $D, $0, $10, $EB
0000AD3D E207 0018 0B               	dc.b $E2, $7, $0, $18, $B
0000AD42 0204 0020 0B               	dc.b $2, $4, $0, $20, $B
0000AD47 0A00 0022 0B               	dc.b $A, $0, $0, $22, $B
0000AD4C 06                         DATAY1U343IF3L_9: dc.b $6
0000AD4D F205 003B F8               	dc.b $F2, $5, $0, $3B, $F8
0000AD52 E20F 0000 EB               	dc.b $E2, $F, $0, $0, $EB
0000AD57 020D 0010 EB               	dc.b $2, $D, $0, $10, $EB
0000AD5C E207 0018 0B               	dc.b $E2, $7, $0, $18, $B
0000AD61 0204 0020 0B               	dc.b $2, $4, $0, $20, $B
0000AD66 0A00 0022 0B               	dc.b $A, $0, $0, $22, $B
0000AD6B 05                         DATAY1U343IF3L_A: dc.b $5
0000AD6C E20F 0000 EB               	dc.b $E2, $F, $0, $0, $EB
0000AD71 020D 0010 EB               	dc.b $2, $D, $0, $10, $EB
0000AD76 E207 0018 0B               	dc.b $E2, $7, $0, $18, $B
0000AD7B 0204 0020 0B               	dc.b $2, $4, $0, $20, $B
0000AD80 0A00 0022 0B               	dc.b $A, $0, $0, $22, $B
0000AD85 01                         DATAY1U343IF3L_B: dc.b $1
0000AD86 FF0D 003F F0               	dc.b $FF, $D, $0, $3F, $F0
0000AD8C 00                         	even
0000AD8C 00                         	even
0000AD8C                            
0000AD8C                            ; ===========================================================================
0000AD8C                            ; ---------------------------------------------------------------------------
0000AD8C                            ; Object 0E - Sonic on the title screen
0000AD8C                            ; ---------------------------------------------------------------------------
0000AD8C                            
0000AD8C                            Obj0E:					; XREF: Obj_Index
0000AD8C 7000                       		moveq	#0,d0
0000AD8E 1028 0024                  		move.b	$24(a0),d0
0000AD92 323B 0000                  		move.w	Obj0E_Index(pc,d0.w),d1
0000AD96 4EFB 1000                  		jmp	Obj0E_Index(pc,d1.w)
0000AD9A                            ; ===========================================================================
0000AD9A 0000                       Obj0E_Index:	dc.w Obj0E_Main-Obj0E_Index
0000AD9C 0000                       		dc.w Obj0E_Delay-Obj0E_Index
0000AD9E 0000                       		dc.w Obj0E_Move-Obj0E_Index
0000ADA0 0000                       		dc.w Obj0E_Animate-Obj0E_Index
0000ADA2                            ; ===========================================================================
0000ADA2                            
0000ADA2                            Obj0E_Main:				; XREF: Obj0E_Index
0000ADA2 5428 0024                  		addq.b	#2,$24(a0)
0000ADA6 317C 00F0 0008             		move.w	#$F0,8(a0)
0000ADAC 317C 00DE 000A             		move.w	#$DE,$A(a0)
0000ADB2 217C 0000 0000 0004        		move.l	#Map_obj0E,4(a0)
0000ADBA 317C 2300 0002             		move.w	#$2300,2(a0)
0000ADC0 117C 0001 0018             		move.b	#1,$18(a0)
0000ADC6 117C 001D 001F             		move.b	#29,$1F(a0)	; set time delay to 0.5	seconds
0000ADCC 43F9 0000 0000             		lea	(Ani_obj0E).l,a1
0000ADD2 6100 0000                  		bsr.w	AnimateSprite
0000ADD6                            
0000ADD6                            Obj0E_Delay:				; XREF: Obj0E_Index
0000ADD6 5328 001F                  		subq.b	#1,$1F(a0)	; subtract 1 from time delay
0000ADDA 6A00                       		bpl.s	Obj0E_Wait	; if time remains, branch
0000ADDC 5428 0024                  		addq.b	#2,$24(a0)	; go to	next routine
0000ADE0 6000 0000                  		bra.w	DisplaySprite
0000ADE4                            ; ===========================================================================
0000ADE4                            
0000ADE4                            Obj0E_Wait:				; XREF: Obj0E_Delay
0000ADE4 4E75                       		rts	
0000ADE6                            ; ===========================================================================
0000ADE6                            
0000ADE6                            Obj0E_Move:				; XREF: Obj0E_Index
0000ADE6 5168 000A                  		subq.w	#8,$A(a0)
0000ADEA 0C68 0096 000A             		cmpi.w	#$96,$A(a0)
0000ADF0 6600                       		bne.s	Obj0E_Display
0000ADF2 5428 0024                  		addq.b	#2,$24(a0)
0000ADF6                            
0000ADF6                            Obj0E_Display:
0000ADF6 6000 0000                  		bra.w	DisplaySprite
0000ADFA                            ; ===========================================================================
0000ADFA 4E75                       		rts	
0000ADFC                            ; ===========================================================================
0000ADFC                            
0000ADFC                            Obj0E_Animate:				; XREF: Obj0E_Index
0000ADFC 43F9 0000 0000             		lea	(Ani_obj0E).l,a1
0000AE02 6100 0000                  		bsr.w	AnimateSprite
0000AE06 6000 0000                  		bra.w	DisplaySprite
0000AE0A                            ; ===========================================================================
0000AE0A 4E75                       		rts	
0000AE0C                            ; ===========================================================================
0000AE0C                            ; ---------------------------------------------------------------------------
0000AE0C                            ; Object 0F - "PRESS START BUTTON" and "TM" from title screen
0000AE0C                            ; ---------------------------------------------------------------------------
0000AE0C                            
0000AE0C                            Obj0F:					; XREF: Obj_Index
0000AE0C 7000                       		moveq	#0,d0
0000AE0E 1028 0024                  		move.b	$24(a0),d0
0000AE12 323B 0000                  		move.w	Obj0F_Index(pc,d0.w),d1
0000AE16 4EBB 1000                  		jsr	Obj0F_Index(pc,d1.w)
0000AE1A 6000 0000                  		bra.w	DisplaySprite
0000AE1E                            ; ===========================================================================
0000AE1E 0000                       Obj0F_Index:	dc.w Obj0F_Main-Obj0F_Index
0000AE20 0000                       		dc.w Obj0F_PrsStart-Obj0F_Index
0000AE22 0000                       		dc.w locret_A6F8-Obj0F_Index
0000AE24                            ; ===========================================================================
0000AE24                            
0000AE24                            Obj0F_Main:				; XREF: Obj0F_Index
0000AE24 5428 0024                  		addq.b	#2,$24(a0)
0000AE28 317C 00D0 0008             		move.w	#$D0,8(a0)
0000AE2E 317C 0130 000A             		move.w	#$130,$A(a0)
0000AE34 217C 0000 0000 0004        		move.l	#Map_obj0F,4(a0)
0000AE3C 317C 0200 0002             		move.w	#$200,2(a0)
0000AE42 0C28 0002 001A             		cmpi.b	#2,$1A(a0)	; is object "PRESS START"?
0000AE48 6500                       		bcs.s	Obj0F_PrsStart	; if yes, branch
0000AE4A 5428 0024                  		addq.b	#2,$24(a0)
0000AE4E 0C28 0003 001A             		cmpi.b	#3,$1A(a0)	; is the object	"TM"?
0000AE54 6600                       		bne.s	locret_A6F8	; if not, branch
0000AE56 317C 2510 0002             		move.w	#$2510,2(a0)	; "TM" specific	code
0000AE5C 317C 0170 0008             		move.w	#$170,8(a0)
0000AE62 317C 00F8 000A             		move.w	#$F8,$A(a0)
0000AE68                            
0000AE68                            locret_A6F8:				; XREF: Obj0F_Index
0000AE68 4E75                       		rts	
0000AE6A                            ; ===========================================================================
0000AE6A                            
0000AE6A                            Obj0F_PrsStart:				; XREF: Obj0F_Index
0000AE6A 43F9 0000 0000             		lea	(Ani_obj0F).l,a1
0000AE70 6000 0000                  		bra.w	AnimateSprite
0000AE74                            ; ===========================================================================
0000AE74                            Ani_obj0E:
0000AE74                            	include "_anim\obj0E.asm"
0000AE74                            ; ---------------------------------------------------------------------------
0000AE74                            ; Animation script - Sonic on the title screen
0000AE74                            ; ---------------------------------------------------------------------------
0000AE74 0000                       		dc.w byte_A706-Ani_obj0E
0000AE76 0700 0102 0304 0506 07FE+  byte_A706:	dc.b 7,	0, 1, 2, 3, 4, 5, 6, 7,	$FE, 2,	0
0000AE82                            		even
0000AE82                            		even
0000AE82                            
0000AE82                            Ani_obj0F:
0000AE82                            	include "_anim\obj0F.asm"
0000AE82                            ; ---------------------------------------------------------------------------
0000AE82                            ; Animation script - "TM" and "PRESS START BUTTON" on the title screen
0000AE82                            ; ---------------------------------------------------------------------------
0000AE82 0000                       		dc.w byte_A714-Ani_obj0F
0000AE84 1F00 01FF                  byte_A714:	dc.b $1F, 0, 1,	$FF
0000AE88                            		even
0000AE88                            		even
0000AE88                            
0000AE88                            ; ---------------------------------------------------------------------------
0000AE88                            ; Subroutine to	animate	a sprite using an animation script
0000AE88                            ; ---------------------------------------------------------------------------
0000AE88                            
0000AE88                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000AE88                            
0000AE88                            
0000AE88                            AnimateSprite:
0000AE88 7000                       		moveq	#0,d0
0000AE8A 1028 001C                  		move.b	$1C(a0),d0	; move animation number	to d0
0000AE8E B028 001D                  		cmp.b	$1D(a0),d0	; is animation set to restart?
0000AE92 6700                       		beq.s	Anim_Run	; if not, branch
0000AE94 1140 001D                  		move.b	d0,$1D(a0)	; set to "no restart"
0000AE98 117C 0000 001B             		move.b	#0,$1B(a0)	; reset	animation
0000AE9E 117C 0000 001E             		move.b	#0,$1E(a0)	; reset	frame duration
0000AEA4                            
0000AEA4                            Anim_Run:
0000AEA4 5328 001E                  		subq.b	#1,$1E(a0)	; subtract 1 from frame	duration
0000AEA8 6A00                       		bpl.s	Anim_Wait	; if time remains, branch
0000AEAA D040                       		add.w	d0,d0
0000AEAC D2F1 0000                  		adda.w	(a1,d0.w),a1	; jump to appropriate animation	script
0000AEB0 1151 001E                  		move.b	(a1),$1E(a0)	; load frame duration
0000AEB4 7200                       		moveq	#0,d1
0000AEB6 1228 001B                  		move.b	$1B(a0),d1	; load current frame number
0000AEBA 1031 1001                  		move.b	1(a1,d1.w),d0	; read sprite number from script
0000AEBE 6B00                       		bmi.s	Anim_End_FF	; if animation is complete, branch
0000AEC0                            
0000AEC0                            Anim_Next:
0000AEC0 1200                       		move.b	d0,d1
0000AEC2 0200 001F                  		andi.b	#$1F,d0
0000AEC6 1140 001A                  		move.b	d0,$1A(a0)	; load sprite number
0000AECA 1028 0022                  		move.b	$22(a0),d0
0000AECE E719                       		rol.b	#3,d1
0000AED0 B101                       		eor.b	d0,d1
0000AED2 0201 0003                  		andi.b	#3,d1
0000AED6 0228 00FC 0001             		andi.b	#$FC,1(a0)
0000AEDC 8328 0001                  		or.b	d1,1(a0)
0000AEE0 5228 001B                  		addq.b	#1,$1B(a0)	; next frame number
0000AEE4                            
0000AEE4                            Anim_Wait:
0000AEE4 4E75                       		rts	
0000AEE6                            ; ===========================================================================
0000AEE6                            
0000AEE6                            Anim_End_FF:
0000AEE6 5200                       		addq.b	#1,d0		; is the end flag = $FF	?
0000AEE8 6600                       		bne.s	Anim_End_FE	; if not, branch
0000AEEA 117C 0000 001B             		move.b	#0,$1B(a0)	; restart the animation
0000AEF0 1029 0001                  		move.b	1(a1),d0	; read sprite number
0000AEF4 60CA                       		bra.s	Anim_Next
0000AEF6                            ; ===========================================================================
0000AEF6                            
0000AEF6                            Anim_End_FE:
0000AEF6 5200                       		addq.b	#1,d0		; is the end flag = $FE	?
0000AEF8 6600                       		bne.s	Anim_End_FD	; if not, branch
0000AEFA 1031 1002                  		move.b	2(a1,d1.w),d0	; read the next	byte in	the script
0000AEFE 9128 001B                  		sub.b	d0,$1B(a0)	; jump back d0 bytes in	the script
0000AF02 9200                       		sub.b	d0,d1
0000AF04 1031 1001                  		move.b	1(a1,d1.w),d0	; read sprite number
0000AF08 60B6                       		bra.s	Anim_Next
0000AF0A                            ; ===========================================================================
0000AF0A                            
0000AF0A                            Anim_End_FD:
0000AF0A 5200                       		addq.b	#1,d0		; is the end flag = $FD	?
0000AF0C 6600                       		bne.s	Anim_End_FC	; if not, branch
0000AF0E 1171 1002 001C             		move.b	2(a1,d1.w),$1C(a0) ; read next byte, run that animation
0000AF14                            
0000AF14                            Anim_End_FC:
0000AF14 5200                       		addq.b	#1,d0		; is the end flag = $FC	?
0000AF16 6600                       		bne.s	Anim_End_FB	; if not, branch
0000AF18 5428 0024                  		addq.b	#2,$24(a0)	; jump to next routine
0000AF1C                            
0000AF1C                            Anim_End_FB:
0000AF1C 5200                       		addq.b	#1,d0		; is the end flag = $FB	?
0000AF1E 6600                       		bne.s	Anim_End_FA	; if not, branch
0000AF20 117C 0000 001B             		move.b	#0,$1B(a0)	; reset	animation
0000AF26 4228 0025                  		clr.b	$25(a0)		; reset	2nd routine counter
0000AF2A                            
0000AF2A                            Anim_End_FA:
0000AF2A 5200                       		addq.b	#1,d0		; is the end flag = $FA	?
0000AF2C 6600                       		bne.s	Anim_End	; if not, branch
0000AF2E 5428 0025                  		addq.b	#2,$25(a0)	; jump to next routine
0000AF32                            
0000AF32                            Anim_End:
0000AF32 4E75                       		rts	
0000AF34                            ; End of function AnimateSprite
0000AF34                            
0000AF34                            ; ===========================================================================
0000AF34                            ; ---------------------------------------------------------------------------
0000AF34                            ; Sprite mappings - "PRESS START BUTTON" and "TM" from title screen
0000AF34                            ; ---------------------------------------------------------------------------
0000AF34                            Map_obj0F:
0000AF34                            	include "_maps\obj0F.asm"
0000AF34                            ; ---------------------------------------------------------------------------
0000AF34                            ; Sprite mappings - "PRESS START BUTTON" and "TM" from title screen
0000AF34                            ; ---------------------------------------------------------------------------
0000AF34 0000                       		dc.w byte_A7CD-Map_obj0F
0000AF36 0000                       		dc.w byte_A7CC-Map_obj0F
0000AF38 0000                       		dc.w byte_A7EB-Map_obj0F
0000AF3A 0000                       		dc.w byte_A882-Map_obj0F
0000AF3C 06                         byte_A7CC:	dc.b 6			; "PRESS START BUTTON"
0000AF3D 000C 00F0 00               byte_A7CD:	dc.b 0,	$C, 0, $F0, 0
0000AF42 0000 00F3 20               		dc.b 0,	0, 0, $F3, $20
0000AF47 0000 00F3 30               		dc.b 0,	0, 0, $F3, $30
0000AF4C 000C 00F4 38               		dc.b 0,	$C, 0, $F4, $38
0000AF51 0008 00F8 60               		dc.b 0,	8, 0, $F8, $60
0000AF56 0008 00FB 78               		dc.b 0,	8, 0, $FB, $78
0000AF5B 1E                         byte_A7EB:	dc.b $1E		; sprite list filler
0000AF5C B80F 0000 80               		dc.b $B8, $F, 0, 0, $80
0000AF61 B80F 0000 80               		dc.b $B8, $F, 0, 0, $80
0000AF66 B80F 0000 80               		dc.b $B8, $F, 0, 0, $80
0000AF6B B80F 0000 80               		dc.b $B8, $F, 0, 0, $80
0000AF70 B80F 0000 80               		dc.b $B8, $F, 0, 0, $80
0000AF75 B80F 0000 80               		dc.b $B8, $F, 0, 0, $80
0000AF7A B80F 0000 80               		dc.b $B8, $F, 0, 0, $80
0000AF7F B80F 0000 80               		dc.b $B8, $F, 0, 0, $80
0000AF84 B80F 0000 80               		dc.b $B8, $F, 0, 0, $80
0000AF89 B80F 0000 80               		dc.b $B8, $F, 0, 0, $80
0000AF8E D80F 0000 80               		dc.b $D8, $F, 0, 0, $80
0000AF93 D80F 0000 80               		dc.b $D8, $F, 0, 0, $80
0000AF98 D80F 0000 80               		dc.b $D8, $F, 0, 0, $80
0000AF9D D80F 0000 80               		dc.b $D8, $F, 0, 0, $80
0000AFA2 D80F 0000 80               		dc.b $D8, $F, 0, 0, $80
0000AFA7 D80F 0000 80               		dc.b $D8, $F, 0, 0, $80
0000AFAC D80F 0000 80               		dc.b $D8, $F, 0, 0, $80
0000AFB1 D80F 0000 80               		dc.b $D8, $F, 0, 0, $80
0000AFB6 D80F 0000 80               		dc.b $D8, $F, 0, 0, $80
0000AFBB D80F 0000 80               		dc.b $D8, $F, 0, 0, $80
0000AFC0 F80F 0000 80               		dc.b $F8, $F, 0, 0, $80
0000AFC5 F80F 0000 80               		dc.b $F8, $F, 0, 0, $80
0000AFCA F80F 0000 80               		dc.b $F8, $F, 0, 0, $80
0000AFCF F80F 0000 80               		dc.b $F8, $F, 0, 0, $80
0000AFD4 F80F 0000 80               		dc.b $F8, $F, 0, 0, $80
0000AFD9 F80F 0000 80               		dc.b $F8, $F, 0, 0, $80
0000AFDE F80F 0000 80               		dc.b $F8, $F, 0, 0, $80
0000AFE3 F80F 0000 80               		dc.b $F8, $F, 0, 0, $80
0000AFE8 F80F 0000 80               		dc.b $F8, $F, 0, 0, $80
0000AFED F80F 0000 80               		dc.b $F8, $F, 0, 0, $80
0000AFF2 01                         byte_A882:	dc.b 1			; "TM"
0000AFF3 FC04 0000 F8               		dc.b $FC, 4, 0,	0, $F8
0000AFF8                            		even
0000AFF8                            		even
0000AFF8                            
0000AFF8                            ; ---------------------------------------------------------------------------
0000AFF8                            ; Sprite mappings - Sonic on the title screen
0000AFF8                            ; ---------------------------------------------------------------------------
0000AFF8                            Map_obj0E:
0000AFF8                            	include "_maps\obj0E.asm"
0000AFF8                            ; ================================================================================
0000AFF8                            ; Sprite Mappings - generated by Flex 2 Sun Mar 23 2025 15:32:50 GMT-0500 (Central Daylight Time)
0000AFF8                            ; ================================================================================
0000AFF8                            
0000AFF8                            DATAGKI0HYDQBXP:
0000AFF8 0000 0000                  	dc.w DATAGKI0HYDQBXP_0-DATAGKI0HYDQBXP, DATAGKI0HYDQBXP_1-DATAGKI0HYDQBXP
0000AFFC 0000 0000                  	dc.w DATAGKI0HYDQBXP_2-DATAGKI0HYDQBXP, DATAGKI0HYDQBXP_3-DATAGKI0HYDQBXP
0000B000 0000 0000                  	dc.w DATAGKI0HYDQBXP_4-DATAGKI0HYDQBXP, DATAGKI0HYDQBXP_5-DATAGKI0HYDQBXP
0000B004 0000 0000                  	dc.w DATAGKI0HYDQBXP_6-DATAGKI0HYDQBXP, DATAGKI0HYDQBXP_7-DATAGKI0HYDQBXP
0000B008 08                         DATAGKI0HYDQBXP_0: dc.b $8
0000B009 0C0F 0126 08               	dc.b $C, $F, $1, $26, $8
0000B00E 2C0F 0136 08               	dc.b $2C, $F, $1, $36, $8
0000B013 4C0D 0146 08               	dc.b $4C, $D, $1, $46, $8
0000B018 0408 014E 20               	dc.b $4, $8, $1, $4E, $20
0000B01D 0C0B 0151 28               	dc.b $C, $B, $1, $51, $28
0000B022 2C0B 015D 28               	dc.b $2C, $B, $1, $5D, $28
0000B027 4C05 0169 28               	dc.b $4C, $5, $1, $69, $28
0000B02C 1407 016D 40               	dc.b $14, $7, $1, $6D, $40
0000B031 0B                         DATAGKI0HYDQBXP_1: dc.b $B
0000B032 060F 0175 01               	dc.b $6, $F, $1, $75, $1
0000B037 060F 0185 21               	dc.b $6, $F, $1, $85, $21
0000B03C 0607 0195 41               	dc.b $6, $7, $1, $95, $41
0000B041 260F 019D 01               	dc.b $26, $F, $1, $9D, $1
0000B046 260F 01AD 21               	dc.b $26, $F, $1, $AD, $21
0000B04B 2607 01BD 41               	dc.b $26, $7, $1, $BD, $41
0000B050 460C 01C5 01               	dc.b $46, $C, $1, $C5, $1
0000B055 460E 01C9 21               	dc.b $46, $E, $1, $C9, $21
0000B05A 4606 01D5 41               	dc.b $46, $6, $1, $D5, $41
0000B05F 4E08 01DB 09               	dc.b $4E, $8, $1, $DB, $9
0000B064 5604 01DE 11               	dc.b $56, $4, $1, $DE, $11
0000B069 0B                         DATAGKI0HYDQBXP_2: dc.b $B
0000B06A F20F 0175 01               	dc.b $F2, $F, $1, $75, $1
0000B06F F20F 0185 21               	dc.b $F2, $F, $1, $85, $21
0000B074 F207 0195 41               	dc.b $F2, $7, $1, $95, $41
0000B079 120F 019D 01               	dc.b $12, $F, $1, $9D, $1
0000B07E 120F 01AD 21               	dc.b $12, $F, $1, $AD, $21
0000B083 1207 01BD 41               	dc.b $12, $7, $1, $BD, $41
0000B088 320C 01C5 01               	dc.b $32, $C, $1, $C5, $1
0000B08D 320E 01C9 21               	dc.b $32, $E, $1, $C9, $21
0000B092 3206 01D5 41               	dc.b $32, $6, $1, $D5, $41
0000B097 3A08 01DB 09               	dc.b $3A, $8, $1, $DB, $9
0000B09C 4204 01DE 11               	dc.b $42, $4, $1, $DE, $11
0000B0A1 0A                         DATAGKI0HYDQBXP_3: dc.b $A
0000B0A2 FC0F 0000 08               	dc.b $FC, $F, $0, $0, $8
0000B0A7 F408 0010 28               	dc.b $F4, $8, $0, $10, $28
0000B0AC FC0F 0013 28               	dc.b $FC, $F, $0, $13, $28
0000B0B1 0400 0023 48               	dc.b $4, $0, $0, $23, $48
0000B0B6 0C06 0024 48               	dc.b $C, $6, $0, $24, $48
0000B0BB 2400 002A 48               	dc.b $24, $0, $0, $2A, $48
0000B0C0 1C0D 002B 08               	dc.b $1C, $D, $0, $2B, $8
0000B0C5 1C0E 0033 28               	dc.b $1C, $E, $0, $33, $28
0000B0CA 2C0B 003F 10               	dc.b $2C, $B, $0, $3F, $10
0000B0CF 3408 004B 28               	dc.b $34, $8, $0, $4B, $28
0000B0D4 10                         DATAGKI0HYDQBXP_4: dc.b $10
0000B0D5 F80F 01E0 09               	dc.b $F8, $F, $1, $E0, $9
0000B0DA F807 01F0 29               	dc.b $F8, $7, $1, $F0, $29
0000B0DF 0003 01F8 01               	dc.b $0, $3, $1, $F8, $1
0000B0E4 0003 01FC 39               	dc.b $0, $3, $1, $FC, $39
0000B0E9 1001 0200 F9               	dc.b $10, $1, $2, $0, $F9
0000B0EE 180D 0202 09               	dc.b $18, $D, $2, $2, $9
0000B0F3 1807 020A 29               	dc.b $18, $7, $2, $A, $29
0000B0F8 1803 0212 41               	dc.b $18, $3, $2, $12, $41
0000B0FD 2001 0216 01               	dc.b $20, $1, $2, $16, $1
0000B102 2003 0218 39               	dc.b $20, $3, $2, $18, $39
0000B107 2808 021C 11               	dc.b $28, $8, $2, $1C, $11
0000B10C 3007 021F 19               	dc.b $30, $7, $2, $1F, $19
0000B111 3801 0227 11               	dc.b $38, $1, $2, $27, $11
0000B116 3806 0229 29               	dc.b $38, $6, $2, $29, $29
0000B11B 3801 022F 41               	dc.b $38, $1, $2, $2F, $41
0000B120 4001 0231 39               	dc.b $40, $1, $2, $31, $39
0000B125 0B                         DATAGKI0HYDQBXP_5: dc.b $B
0000B126 2C0F 006E E2               	dc.b $2C, $F, $0, $6E, $E2
0000B12B EC0F 007E 02               	dc.b $EC, $F, $0, $7E, $2
0000B130 0C0F 008E 02               	dc.b $C, $F, $0, $8E, $2
0000B135 2C0F 009E 02               	dc.b $2C, $F, $0, $9E, $2
0000B13A EC0F 00AE 22               	dc.b $EC, $F, $0, $AE, $22
0000B13F 0C0F 00BE 22               	dc.b $C, $F, $0, $BE, $22
0000B144 2C0F 00CE 22               	dc.b $2C, $F, $0, $CE, $22
0000B149 EC0F 00DE 42               	dc.b $EC, $F, $0, $DE, $42
0000B14E 0C0F 00EE 42               	dc.b $C, $F, $0, $EE, $42
0000B153 2C0F 00FE 42               	dc.b $2C, $F, $0, $FE, $42
0000B158 0C07 0116 62               	dc.b $C, $7, $1, $16, $62
0000B15D 0F                         DATAGKI0HYDQBXP_6: dc.b $F
0000B15E EC0F 004E E2               	dc.b $EC, $F, $0, $4E, $E2
0000B163 0C0F 005E E2               	dc.b $C, $F, $0, $5E, $E2
0000B168 2C0F 006E E2               	dc.b $2C, $F, $0, $6E, $E2
0000B16D EC0F 007E 02               	dc.b $EC, $F, $0, $7E, $2
0000B172 0C0F 008E 02               	dc.b $C, $F, $0, $8E, $2
0000B177 2C0F 009E 02               	dc.b $2C, $F, $0, $9E, $2
0000B17C EC0F 00AE 22               	dc.b $EC, $F, $0, $AE, $22
0000B181 0C0F 00BE 22               	dc.b $C, $F, $0, $BE, $22
0000B186 2C0F 00CE 22               	dc.b $2C, $F, $0, $CE, $22
0000B18B EC0F 00DE 42               	dc.b $EC, $F, $0, $DE, $42
0000B190 0C0F 00EE 42               	dc.b $C, $F, $0, $EE, $42
0000B195 2C0F 00FE 42               	dc.b $2C, $F, $0, $FE, $42
0000B19A EC07 010E 62               	dc.b $EC, $7, $1, $E, $62
0000B19F 0C07 0116 62               	dc.b $C, $7, $1, $16, $62
0000B1A4 2C07 011E 62               	dc.b $2C, $7, $1, $1E, $62
0000B1A9 0F                         DATAGKI0HYDQBXP_7: dc.b $F
0000B1AA EC0F 0233 E2               	dc.b $EC, $F, $2, $33, $E2
0000B1AF 0C0F 0243 E2               	dc.b $C, $F, $2, $43, $E2
0000B1B4 2C0F 0253 E2               	dc.b $2C, $F, $2, $53, $E2
0000B1B9 EC0F 0263 02               	dc.b $EC, $F, $2, $63, $2
0000B1BE 0C0F 0273 02               	dc.b $C, $F, $2, $73, $2
0000B1C3 2C0F 0283 02               	dc.b $2C, $F, $2, $83, $2
0000B1C8 EC0F 0293 22               	dc.b $EC, $F, $2, $93, $22
0000B1CD 0C0F 02A3 22               	dc.b $C, $F, $2, $A3, $22
0000B1D2 2C0F 02B3 22               	dc.b $2C, $F, $2, $B3, $22
0000B1D7 EC0F 02C3 42               	dc.b $EC, $F, $2, $C3, $42
0000B1DC 0C0F 02D3 42               	dc.b $C, $F, $2, $D3, $42
0000B1E1 2C0F 02E3 42               	dc.b $2C, $F, $2, $E3, $42
0000B1E6 EC07 02F3 62               	dc.b $EC, $7, $2, $F3, $62
0000B1EB 0C07 02FB 62               	dc.b $C, $7, $2, $FB, $62
0000B1F0 2C07 0303 62               	dc.b $2C, $7, $3, $3, $62
0000B1F6 00                         	even
0000B1F6 00                         	even
0000B1F6                            
0000B1F6                            ; ===========================================================================
0000B1F6                            ; ---------------------------------------------------------------------------
0000B1F6                            ; Object 2B - Chopper enemy (GHZ)
0000B1F6                            ; ---------------------------------------------------------------------------
0000B1F6                            
0000B1F6                            Obj2B:					; XREF: Obj_Index
0000B1F6 7000                       		moveq	#0,d0
0000B1F8 1028 0024                  		move.b	$24(a0),d0
0000B1FC 323B 0000                  		move.w	Obj2B_Index(pc,d0.w),d1
0000B200 4EBB 1000                  		jsr	Obj2B_Index(pc,d1.w)
0000B204 6000 0000                  		bra.w	MarkObjGone
0000B208                            ; ===========================================================================
0000B208 0000                       Obj2B_Index:	dc.w Obj2B_Main-Obj2B_Index
0000B20A 0000                       		dc.w Obj2B_ChgSpeed-Obj2B_Index
0000B20C                            ; ===========================================================================
0000B20C                            
0000B20C                            Obj2B_Main:				; XREF: Obj2B_Index
0000B20C 5428 0024                  		addq.b	#2,$24(a0)
0000B210 217C 0000 0000 0004        		move.l	#Map_obj2B,4(a0)
0000B218 317C 047B 0002             		move.w	#$47B,2(a0)
0000B21E 117C 0004 0001             		move.b	#4,1(a0)
0000B224 117C 0004 0018             		move.b	#4,$18(a0)
0000B22A 117C 0009 0020             		move.b	#9,$20(a0)
0000B230 117C 0010 0019             		move.b	#$10,$19(a0)
0000B236 317C F900 0012             		move.w	#-$700,$12(a0)	; set vertical speed
0000B23C 3168 000C 0030             		move.w	$C(a0),$30(a0)
0000B242                            
0000B242                            Obj2B_ChgSpeed:				; XREF: Obj2B_Index
0000B242 43F9 0000 0000             		lea	(Ani_obj2B).l,a1
0000B248 6100 FC3E                  		bsr.w	AnimateSprite
0000B24C 6100 0000                  		bsr.w	SpeedToPos
0000B250 0668 0018 0012             		addi.w	#$18,$12(a0)	; reduce speed
0000B256 3028 0030                  		move.w	$30(a0),d0
0000B25A B068 000C                  		cmp.w	$C(a0),d0
0000B25E 6400                       		bcc.s	Obj2B_ChgAni
0000B260 3140 000C                  		move.w	d0,$C(a0)
0000B264 317C F900 0012             		move.w	#-$700,$12(a0)	; set vertical speed
0000B26A                            
0000B26A                            Obj2B_ChgAni:
0000B26A 117C 0001 001C             		move.b	#1,$1C(a0)	; use fast animation
0000B270 0440 00C0                  		subi.w	#$C0,d0
0000B274 B068 000C                  		cmp.w	$C(a0),d0
0000B278 6400                       		bcc.s	locret_ABB6
0000B27A 117C 0000 001C             		move.b	#0,$1C(a0)	; use slow animation
0000B280 4A68 0012                  		tst.w	$12(a0)		; is Chopper at	its highest point?
0000B284 6B00                       		bmi.s	locret_ABB6	; if not, branch
0000B286 117C 0002 001C             		move.b	#2,$1C(a0)	; use stationary animation
0000B28C                            
0000B28C                            locret_ABB6:
0000B28C 4E75                       		rts	
0000B28E                            ; ===========================================================================
0000B28E                            Ani_obj2B:
0000B28E                            	include "_anim\obj2B.asm"
0000B28E                            ; ---------------------------------------------------------------------------
0000B28E                            ; Animation script - Chopper enemy
0000B28E                            ; ---------------------------------------------------------------------------
0000B28E 0000                       		dc.w byte_ABBE-Ani_obj2B
0000B290 0000                       		dc.w byte_ABC2-Ani_obj2B
0000B292 0000                       		dc.w byte_ABC6-Ani_obj2B
0000B294 0700 01FF                  byte_ABBE:	dc.b 7,	0, 1, $FF
0000B298 0300 01FF                  byte_ABC2:	dc.b 3,	0, 1, $FF
0000B29C 0700 FF                    byte_ABC6:	dc.b 7,	0, $FF
0000B2A0 00                         		even
0000B2A0 00                         		even
0000B2A0                            
0000B2A0                            ; ---------------------------------------------------------------------------
0000B2A0                            ; Sprite mappings - Chopper enemy (GHZ)
0000B2A0                            ; ---------------------------------------------------------------------------
0000B2A0                            Map_obj2B:
0000B2A0                            	include "_maps\obj2B.asm"
0000B2A0                            Map_1ff1:
0000B2A0 0000                       Map_1ff1_0: 	dc.w Map_1ff1_4-Map_1ff1
0000B2A2 0000                       Map_1ff1_2: 	dc.w Map_1ff1_F-Map_1ff1
0000B2A4 02                         Map_1ff1_4: 	dc.b $2
0000B2A5 E80B 0000 F4               	dc.b $E8, $B, $0, $0, $F4
0000B2AA 0809 000C F4               	dc.b $8, $9, $0, $C, $F4
0000B2AF 02                         Map_1ff1_F: 	dc.b $2
0000B2B0 E80B 0012 F4               	dc.b $E8, $B, $0, $12, $F4
0000B2B5 0809 000C F4               	dc.b $8, $9, $0, $C, $F4
0000B2BA                            	even
0000B2BA                            	even
0000B2BA                            
0000B2BA                            ; ===========================================================================
0000B2BA                            ; ---------------------------------------------------------------------------
0000B2BA                            ; Object 2C - Jaws enemy (LZ)
0000B2BA                            ; ---------------------------------------------------------------------------
0000B2BA                            
0000B2BA                            Obj2C:					; XREF: Obj_Index
0000B2BA 7000                       		moveq	#0,d0
0000B2BC 1028 0024                  		move.b	$24(a0),d0
0000B2C0 323B 0000                  		move.w	Obj2C_Index(pc,d0.w),d1
0000B2C4 4EFB 1000                  		jmp	Obj2C_Index(pc,d1.w)
0000B2C8                            ; ===========================================================================
0000B2C8 0000                       Obj2C_Index:	dc.w Obj2C_Main-Obj2C_Index
0000B2CA 0000                       		dc.w Obj2C_Turn-Obj2C_Index
0000B2CC                            ; ===========================================================================
0000B2CC                            
0000B2CC                            Obj2C_Main:				; XREF: Obj2C_Index
0000B2CC 5428 0024                  		addq.b	#2,$24(a0)
0000B2D0 217C 0000 0000 0004        		move.l	#Map_obj2C,4(a0)
0000B2D8 317C 2486 0002             		move.w	#$2486,2(a0)
0000B2DE 0028 0004 0001             		ori.b	#4,1(a0)
0000B2E4 117C 000A 0020             		move.b	#$A,$20(a0)
0000B2EA 117C 0004 0018             		move.b	#4,$18(a0)
0000B2F0 117C 0010 0019             		move.b	#$10,$19(a0)
0000B2F6 7000                       		moveq	#0,d0
0000B2F8 1028 0028                  		move.b	$28(a0),d0	; load object subtype number
0000B2FC ED48                       		lsl.w	#6,d0		; multiply d0 by 64
0000B2FE 5340                       		subq.w	#1,d0
0000B300 3140 0030                  		move.w	d0,$30(a0)	; set turn delay time
0000B304 3140 0032                  		move.w	d0,$32(a0)
0000B308 317C FFC0 0010             		move.w	#-$40,$10(a0)	; move Jaws to the left
0000B30E 0828 0000 0022             		btst	#0,$22(a0)	; is Jaws facing left?
0000B314 6700                       		beq.s	Obj2C_Turn	; if yes, branch
0000B316 4468 0010                  		neg.w	$10(a0)		; move Jaws to the right
0000B31A                            
0000B31A                            Obj2C_Turn:				; XREF: Obj2C_Index
0000B31A 5368 0030                  		subq.w	#1,$30(a0)	; subtract 1 from turn delay time
0000B31E 6A00                       		bpl.s	Obj2C_Animate	; if time remains, branch
0000B320 3168 0032 0030             		move.w	$32(a0),$30(a0)	; reset	turn delay time
0000B326 4468 0010                  		neg.w	$10(a0)		; change speed direction
0000B32A 0868 0000 0022             		bchg	#0,$22(a0)	; change Jaws facing direction
0000B330 117C 0001 001D             		move.b	#1,$1D(a0)	; reset	animation
0000B336                            
0000B336                            Obj2C_Animate:
0000B336 43F9 0000 0000             		lea	(Ani_obj2C).l,a1
0000B33C 6100 FB4A                  		bsr.w	AnimateSprite
0000B340 6100 0000                  		bsr.w	SpeedToPos
0000B344 6000 0000                  		bra.w	MarkObjGone
0000B348                            ; ===========================================================================
0000B348                            Ani_obj2C:
0000B348                            	include "_anim\obj2C.asm"
0000B348                            ; ---------------------------------------------------------------------------
0000B348                            ; Animation script - Jaws enemy
0000B348                            ; ---------------------------------------------------------------------------
0000B348 0000                       		dc.w byte_AC6A-Ani_obj2C
0000B34A 0700 0102 03FF             byte_AC6A:	dc.b 7,	0, 1, 2, 3, $FF
0000B350                            		even
0000B350                            		even
0000B350                            
0000B350                            ; ---------------------------------------------------------------------------
0000B350                            ; Sprite mappings - Jaws enemy (LZ)
0000B350                            ; ---------------------------------------------------------------------------
0000B350                            Map_obj2C:
0000B350                            	include "_maps\obj2C.asm"
0000B350                            ; ---------------------------------------------------------------------------
0000B350                            ; Sprite mappings - Jaws enemy (LZ)
0000B350                            ; ---------------------------------------------------------------------------
0000B350 0000                       		dc.w byte_AC78-Map_obj2C
0000B352 0000                       		dc.w byte_AC83-Map_obj2C
0000B354 0000                       		dc.w byte_AC8E-Map_obj2C
0000B356 0000                       		dc.w byte_AC99-Map_obj2C
0000B358 02                         byte_AC78:	dc.b 2
0000B359 F40E 0000 F0               		dc.b $F4, $E, 0, 0, $F0
0000B35E F505 0018 10               		dc.b $F5, 5, 0,	$18, $10
0000B363 02                         byte_AC83:	dc.b 2
0000B364 F40E 000C F0               		dc.b $F4, $E, 0, $C, $F0
0000B369 F505 001C 10               		dc.b $F5, 5, 0,	$1C, $10
0000B36E 02                         byte_AC8E:	dc.b 2
0000B36F F40E 0000 F0               		dc.b $F4, $E, 0, 0, $F0
0000B374 F505 1018 10               		dc.b $F5, 5, $10, $18, $10
0000B379 02                         byte_AC99:	dc.b 2
0000B37A F40E 000C F0               		dc.b $F4, $E, 0, $C, $F0
0000B37F F505 101C 10               		dc.b $F5, 5, $10, $1C, $10
0000B384                            		even
0000B384                            		even
0000B384                            
0000B384                            ; ===========================================================================
0000B384                            ; ---------------------------------------------------------------------------
0000B384                            ; Object 2D - Burrobot enemy (LZ)
0000B384                            ; ---------------------------------------------------------------------------
0000B384                            
0000B384                            Obj2D:					; XREF: Obj_Index
0000B384 7000                       		moveq	#0,d0
0000B386 1028 0024                  		move.b	$24(a0),d0
0000B38A 323B 0000                  		move.w	Obj2D_Index(pc,d0.w),d1
0000B38E 4EFB 1000                  		jmp	Obj2D_Index(pc,d1.w)
0000B392                            ; ===========================================================================
0000B392 0000                       Obj2D_Index:	dc.w Obj2D_Main-Obj2D_Index
0000B394 0000                       		dc.w Obj2D_Action-Obj2D_Index
0000B396                            ; ===========================================================================
0000B396                            
0000B396                            Obj2D_Main:				; XREF: Obj2D_Index
0000B396 5428 0024                  		addq.b	#2,$24(a0)
0000B39A 117C 0013 0016             		move.b	#$13,$16(a0)
0000B3A0 117C 0008 0017             		move.b	#8,$17(a0)
0000B3A6 217C 0000 0000 0004        		move.l	#Map_obj2D,4(a0)
0000B3AE 317C 04A6 0002             		move.w	#$4A6,2(a0)
0000B3B4 0028 0004 0001             		ori.b	#4,1(a0)
0000B3BA 117C 0004 0018             		move.b	#4,$18(a0)
0000B3C0 117C 0005 0020             		move.b	#5,$20(a0)
0000B3C6 117C 000C 0019             		move.b	#$C,$19(a0)
0000B3CC 5C28 0025                  		addq.b	#6,$25(a0)	; run "Obj2D_ChkSonic" routine
0000B3D0 117C 0002 001C             		move.b	#2,$1C(a0)
0000B3D6                            
0000B3D6                            Obj2D_Action:				; XREF: Obj2D_Index
0000B3D6 7000                       		moveq	#0,d0
0000B3D8 1028 0025                  		move.b	$25(a0),d0
0000B3DC 323B 0000                  		move.w	Obj2D_Index2(pc,d0.w),d1
0000B3E0 4EBB 1000                  		jsr	Obj2D_Index2(pc,d1.w)
0000B3E4 43F9 0000 0000             		lea	(Ani_obj2D).l,a1
0000B3EA 6100 FA9C                  		bsr.w	AnimateSprite
0000B3EE 6000 0000                  		bra.w	MarkObjGone
0000B3F2                            ; ===========================================================================
0000B3F2 0000                       Obj2D_Index2:	dc.w Obj2D_ChgDir-Obj2D_Index2
0000B3F4 0000                       		dc.w Obj2D_Move-Obj2D_Index2
0000B3F6 0000                       		dc.w Obj2D_Jump-Obj2D_Index2
0000B3F8 0000                       		dc.w Obj2D_ChkSonic-Obj2D_Index2
0000B3FA                            ; ===========================================================================
0000B3FA                            
0000B3FA                            Obj2D_ChgDir:				; XREF: Obj2D_Index2
0000B3FA 5368 0030                  		subq.w	#1,$30(a0)
0000B3FE 6A00                       		bpl.s	locret_AD42
0000B400 5428 0025                  		addq.b	#2,$25(a0)
0000B404 317C 00FF 0030             		move.w	#$FF,$30(a0)
0000B40A 317C 0080 0010             		move.w	#$80,$10(a0)
0000B410 117C 0001 001C             		move.b	#1,$1C(a0)
0000B416 0868 0000 0022             		bchg	#0,$22(a0)	; change direction the Burrobot	is facing
0000B41C 6700                       		beq.s	locret_AD42
0000B41E 4468 0010                  		neg.w	$10(a0)		; change direction the Burrobot	is moving
0000B422                            
0000B422                            locret_AD42:
0000B422 4E75                       		rts	
0000B424                            ; ===========================================================================
0000B424                            
0000B424                            Obj2D_Move:				; XREF: Obj2D_Index2
0000B424 5368 0030                  		subq.w	#1,$30(a0)
0000B428 6B00                       		bmi.s	loc_AD84
0000B42A 6100 0000                  		bsr.w	SpeedToPos
0000B42E 0868 0000 0032             		bchg	#0,$32(a0)
0000B434 6600                       		bne.s	loc_AD78
0000B436 3628 0008                  		move.w	8(a0),d3
0000B43A 0643 000C                  		addi.w	#$C,d3
0000B43E 0828 0000 0022             		btst	#0,$22(a0)
0000B444 6600                       		bne.s	loc_AD6A
0000B446 0443 0018                  		subi.w	#$18,d3
0000B44A                            
0000B44A                            loc_AD6A:
0000B44A 4EB9 0000 0000             		jsr	ObjHitFloor2
0000B450 0C41 000C                  		cmpi.w	#$C,d1
0000B454 6C00                       		bge.s	loc_AD84
0000B456 4E75                       		rts	
0000B458                            ; ===========================================================================
0000B458                            
0000B458                            loc_AD78:				; XREF: Obj2D_Move
0000B458 4EB9 0000 0000             		jsr	ObjHitFloor
0000B45E D368 000C                  		add.w	d1,$C(a0)
0000B462 4E75                       		rts	
0000B464                            ; ===========================================================================
0000B464                            
0000B464                            loc_AD84:				; XREF: Obj2D_Move
0000B464 0838 0002 FE0F             		btst	#2,($FFFFFE0F).w
0000B46A 6700                       		beq.s	loc_ADA4
0000B46C 5528 0025                  		subq.b	#2,$25(a0)
0000B470 317C 003B 0030             		move.w	#$3B,$30(a0)
0000B476 317C 0000 0010             		move.w	#0,$10(a0)
0000B47C 117C 0000 001C             		move.b	#0,$1C(a0)
0000B482 4E75                       		rts	
0000B484                            ; ===========================================================================
0000B484                            
0000B484                            loc_ADA4:
0000B484 5428 0025                  		addq.b	#2,$25(a0)
0000B488 317C FC00 0012             		move.w	#-$400,$12(a0)
0000B48E 117C 0002 001C             		move.b	#2,$1C(a0)
0000B494 4E75                       		rts	
0000B496                            ; ===========================================================================
0000B496                            
0000B496                            Obj2D_Jump:				; XREF: Obj2D_Index2
0000B496 6100 0000                  		bsr.w	SpeedToPos
0000B49A 0668 0018 0012             		addi.w	#$18,$12(a0)
0000B4A0 6B00                       		bmi.s	locret_ADF0
0000B4A2 117C 0003 001C             		move.b	#3,$1C(a0)
0000B4A8 4EB9 0000 0000             		jsr	ObjHitFloor
0000B4AE 4A41                       		tst.w	d1
0000B4B0 6A00                       		bpl.s	locret_ADF0
0000B4B2 D368 000C                  		add.w	d1,$C(a0)
0000B4B6 317C 0000 0012             		move.w	#0,$12(a0)
0000B4BC 117C 0001 001C             		move.b	#1,$1C(a0)
0000B4C2 317C 00FF 0030             		move.w	#$FF,$30(a0)
0000B4C8 5528 0025                  		subq.b	#2,$25(a0)
0000B4CC 6100 0000                  		bsr.w	Obj2D_ChkSonic2
0000B4D0                            
0000B4D0                            locret_ADF0:
0000B4D0 4E75                       		rts	
0000B4D2                            ; ===========================================================================
0000B4D2                            
0000B4D2                            Obj2D_ChkSonic:				; XREF: Obj2D_Index2
0000B4D2 343C 0060                  		move.w	#$60,d2
0000B4D6 6100 0000                  		bsr.w	Obj2D_ChkSonic2
0000B4DA 6400                       		bcc.s	locret_AE20
0000B4DC 3038 D00C                  		move.w	($FFFFD00C).w,d0
0000B4E0 9068 000C                  		sub.w	$C(a0),d0
0000B4E4 6400                       		bcc.s	locret_AE20
0000B4E6 0C40 FF80                  		cmpi.w	#-$80,d0
0000B4EA 6500                       		bcs.s	locret_AE20
0000B4EC 4A78 FE08                  		tst.w	($FFFFFE08).w
0000B4F0 6600                       		bne.s	locret_AE20
0000B4F2 5528 0025                  		subq.b	#2,$25(a0)
0000B4F6 3141 0010                  		move.w	d1,$10(a0)
0000B4FA 317C FC00 0012             		move.w	#-$400,$12(a0)
0000B500                            
0000B500                            locret_AE20:
0000B500 4E75                       		rts	
0000B502                            
0000B502                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000B502                            
0000B502                            
0000B502                            Obj2D_ChkSonic2:			; XREF: Obj2D_ChkSonic
0000B502 323C 0080                  		move.w	#$80,d1
0000B506 08E8 0000 0022             		bset	#0,$22(a0)
0000B50C 3038 D008                  		move.w	($FFFFD008).w,d0
0000B510 9068 0008                  		sub.w	8(a0),d0
0000B514 6400                       		bcc.s	loc_AE40
0000B516 4440                       		neg.w	d0
0000B518 4441                       		neg.w	d1
0000B51A 08A8 0000 0022             		bclr	#0,$22(a0)
0000B520                            
0000B520                            loc_AE40:
0000B520 B042                       		cmp.w	d2,d0
0000B522 4E75                       		rts	
0000B524                            ; End of function Obj2D_ChkSonic2
0000B524                            
0000B524                            ; ===========================================================================
0000B524                            Ani_obj2D:
0000B524                            	include "_anim\obj2D.asm"
0000B524                            ; ---------------------------------------------------------------------------
0000B524                            ; Animation script - Burrobot enemy but craig
0000B524                            ; ---------------------------------------------------------------------------
0000B524 0000                       		dc.w byte_AE4C-Ani_obj2D
0000B526 0000                       		dc.w byte_AE50-Ani_obj2D
0000B528 0000                       		dc.w byte_AE54-Ani_obj2D
0000B52A 0000                       		dc.w byte_AE58-Ani_obj2D
0000B52C 0300 FF                    byte_AE4C:	dc.b 3,	0, $FF ; wait
0000B52F 0300 01FF                  byte_AE50:	dc.b 3,	0, 1, $FF ; waddle
0000B533 0100 0102 0304 0506 0708+  byte_AE54:	dc.b 1,	0, 1, 2, 3, 4, 5, 6, 7, 8, 3, 9, $A, $FF ; speen
0000B541 0304 FF                    byte_AE58:	dc.b 3,	4, $FF
0000B544                            		even
0000B544                            		even
0000B544                            
0000B544                            ; ---------------------------------------------------------------------------
0000B544                            ; Sprite mappings - Burrobot enemy (LZ)
0000B544                            ; ---------------------------------------------------------------------------
0000B544                            Map_obj2D:
0000B544                            	include "_maps\obj2D.asm"
0000B544                            Map_e3a3:
0000B544 0000                       Map_e3a3_0: 	dc.w Map_e3a3_16-Map_e3a3
0000B546 0000                       Map_e3a3_2: 	dc.w Map_e3a3_21-Map_e3a3
0000B548 0000                       Map_e3a3_4: 	dc.w Map_e3a3_2C-Map_e3a3
0000B54A 0000                       Map_e3a3_6: 	dc.w Map_e3a3_37-Map_e3a3
0000B54C 0000                       Map_e3a3_8: 	dc.w Map_e3a3_42-Map_e3a3
0000B54E 0000                       Map_e3a3_A: 	dc.w Map_e3a3_4D-Map_e3a3
0000B550 0000                       Map_e3a3_C: 	dc.w Map_e3a3_58-Map_e3a3
0000B552 0000                       Map_e3a3_E: 	dc.w Map_e3a3_63-Map_e3a3
0000B554 0000                       Map_e3a3_10: 	dc.w Map_e3a3_6E-Map_e3a3
0000B556 0000                       Map_e3a3_12: 	dc.w Map_e3a3_79-Map_e3a3
0000B558 0000                       Map_e3a3_14: 	dc.w Map_e3a3_84-Map_e3a3
0000B55A 02                         Map_e3a3_16: 	dc.b $2
0000B55B EC0B 0800 F4               	dc.b $EC, $B, $8, $0, $F4
0000B560 0C08 080C F4               	dc.b $C, $8, $8, $C, $F4
0000B565 02                         Map_e3a3_21: 	dc.b $2
0000B566 EC07 080F F8               	dc.b $EC, $7, $8, $F, $F8
0000B56B 0C04 0817 F8               	dc.b $C, $4, $8, $17, $F8
0000B570 02                         Map_e3a3_2C: 	dc.b $2
0000B571 EC07 0819 F8               	dc.b $EC, $7, $8, $19, $F8
0000B576 0C04 0821 F8               	dc.b $C, $4, $8, $21, $F8
0000B57B 02                         Map_e3a3_37: 	dc.b $2
0000B57C EC02 0823 FC               	dc.b $EC, $2, $8, $23, $FC
0000B581 FC02 1823 FC               	dc.b $FC, $2, $18, $23, $FC
0000B586 02                         Map_e3a3_42: 	dc.b $2
0000B587 EC06 0826 F8               	dc.b $EC, $6, $8, $26, $F8
0000B58C FC06 1826 F8               	dc.b $FC, $6, $18, $26, $F8
0000B591 02                         Map_e3a3_4D: 	dc.b $2
0000B592 EC06 082C F8               	dc.b $EC, $6, $8, $2C, $F8
0000B597 FC06 182C F8               	dc.b $FC, $6, $18, $2C, $F8
0000B59C 02                         Map_e3a3_58: 	dc.b $2
0000B59D EC0A 0832 F4               	dc.b $EC, $A, $8, $32, $F4
0000B5A2 FC0A 1832 F4               	dc.b $FC, $A, $18, $32, $F4
0000B5A7 02                         Map_e3a3_63: 	dc.b $2
0000B5A8 EC06 002C F8               	dc.b $EC, $6, $0, $2C, $F8
0000B5AD FC06 102C F8               	dc.b $FC, $6, $10, $2C, $F8
0000B5B2 02                         Map_e3a3_6E: 	dc.b $2
0000B5B3 EC06 0026 F8               	dc.b $EC, $6, $0, $26, $F8
0000B5B8 FC06 1026 F8               	dc.b $FC, $6, $10, $26, $F8
0000B5BD 02                         Map_e3a3_79: 	dc.b $2
0000B5BE EC07 0019 F8               	dc.b $EC, $7, $0, $19, $F8
0000B5C3 0C04 0021 F8               	dc.b $C, $4, $0, $21, $F8
0000B5C8 02                         Map_e3a3_84: 	dc.b $2
0000B5C9 EC07 000F F8               	dc.b $EC, $7, $0, $F, $F8
0000B5CE 0C04 0017 F8               	dc.b $C, $4, $0, $17, $F8
0000B5D4 00                         	even
0000B5D4 00                         	even
0000B5D4                            
0000B5D4                            ; ===========================================================================
0000B5D4                            ; ---------------------------------------------------------------------------
0000B5D4                            ; Object 2F - large moving platforms (MZ)
0000B5D4                            ; ---------------------------------------------------------------------------
0000B5D4                            
0000B5D4                            Obj2F:					; XREF: Obj_Index
0000B5D4 7000                       		moveq	#0,d0
0000B5D6 1028 0024                  		move.b	$24(a0),d0
0000B5DA 323B 0000                  		move.w	Obj2F_Index(pc,d0.w),d1
0000B5DE 4EFB 1000                  		jmp	Obj2F_Index(pc,d1.w)
0000B5E2                            ; ===========================================================================
0000B5E2 0000                       Obj2F_Index:	dc.w Obj2F_Main-Obj2F_Index
0000B5E4 0000                       		dc.w Obj2F_Action-Obj2F_Index
0000B5E6                            
0000B5E6 0000                       Obj2F_Data:	dc.w Obj2F_Data1-Obj2F_Data 	; collision angle data
0000B5E8 0040                       		dc.b 0,	$40			; frame	number,	platform width
0000B5EA 0000                       		dc.w Obj2F_Data3-Obj2F_Data
0000B5EC 0140                       		dc.b 1,	$40
0000B5EE 0000                       		dc.w Obj2F_Data2-Obj2F_Data
0000B5F0 0220                       		dc.b 2,	$20
0000B5F2                            ; ===========================================================================
0000B5F2                            
0000B5F2                            Obj2F_Main:				; XREF: Obj2F_Index
0000B5F2 5428 0024                  		addq.b	#2,$24(a0)
0000B5F6 217C 0000 0000 0004        		move.l	#Map_obj2F,4(a0)
0000B5FE 317C C000 0002             		move.w	#$C000,2(a0)
0000B604 117C 0004 0001             		move.b	#4,1(a0)
0000B60A 117C 0005 0018             		move.b	#5,$18(a0)
0000B610 3168 000C 002C             		move.w	$C(a0),$2C(a0)
0000B616 3168 0008 002A             		move.w	8(a0),$2A(a0)
0000B61C 7000                       		moveq	#0,d0
0000B61E 1028 0028                  		move.b	$28(a0),d0
0000B622 E448                       		lsr.w	#2,d0
0000B624 0240 001C                  		andi.w	#$1C,d0
0000B628 43FB 00BC                  		lea	Obj2F_Data(pc,d0.w),a1
0000B62C 3019                       		move.w	(a1)+,d0
0000B62E 45FB 00B6                  		lea	Obj2F_Data(pc,d0.w),a2
0000B632 214A 0030                  		move.l	a2,$30(a0)
0000B636 1159 001A                  		move.b	(a1)+,$1A(a0)
0000B63A 1151 0019                  		move.b	(a1),$19(a0)
0000B63E 0228 000F 0028             		andi.b	#$F,$28(a0)
0000B644 117C 0040 0016             		move.b	#$40,$16(a0)
0000B64A 08E8 0004 0001             		bset	#4,1(a0)
0000B650                            
0000B650                            Obj2F_Action:				; XREF: Obj2F_Index
0000B650 6100 0000                  		bsr.w	Obj2F_Types
0000B654 4A28 0025                  		tst.b	$25(a0)
0000B658 6700                       		beq.s	Obj2F_Solid
0000B65A 7200                       		moveq	#0,d1
0000B65C 1228 0019                  		move.b	$19(a0),d1
0000B660 0641 000B                  		addi.w	#$B,d1
0000B664 6100 C556                  		bsr.w	ExitPlatform
0000B668 0829 0003 0022             		btst	#3,$22(a1)
0000B66E 6600 0000                  		bne.w	Obj2F_Slope
0000B672 4228 0025                  		clr.b	$25(a0)
0000B676 6000                       		bra.s	Obj2F_Display
0000B678                            ; ===========================================================================
0000B678                            
0000B678                            Obj2F_Slope:				; XREF: Obj2F_Action
0000B678 7200                       		moveq	#0,d1
0000B67A 1228 0019                  		move.b	$19(a0),d1
0000B67E 0641 000B                  		addi.w	#$B,d1
0000B682 2468 0030                  		movea.l	$30(a0),a2
0000B686 3428 0008                  		move.w	8(a0),d2
0000B68A 6100 D520                  		bsr.w	SlopeObject2
0000B68E 6000                       		bra.s	Obj2F_Display
0000B690                            ; ===========================================================================
0000B690                            
0000B690                            Obj2F_Solid:				; XREF: Obj2F_Action
0000B690 7200                       		moveq	#0,d1
0000B692 1228 0019                  		move.b	$19(a0),d1
0000B696 0641 000B                  		addi.w	#$B,d1
0000B69A 343C 0020                  		move.w	#$20,d2
0000B69E 0C28 0002 001A             		cmpi.b	#2,$1A(a0)
0000B6A4 6600                       		bne.s	loc_AF8E
0000B6A6 343C 0030                  		move.w	#$30,d2
0000B6AA                            
0000B6AA                            loc_AF8E:
0000B6AA 2468 0030                  		movea.l	$30(a0),a2
0000B6AE 6100 0000                  		bsr.w	SolidObject2F
0000B6B2                            
0000B6B2                            Obj2F_Display:				; XREF: Obj2F_Action
0000B6B2 6100 0000                  		bsr.w	DisplaySprite
0000B6B6 6000 0000                  		bra.w	Obj2F_ChkDel
0000B6BA                            
0000B6BA                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000B6BA                            
0000B6BA                            
0000B6BA                            Obj2F_Types:				; XREF: Obj2F_Action
0000B6BA 7000                       		moveq	#0,d0
0000B6BC 1028 0028                  		move.b	$28(a0),d0
0000B6C0 0240 0007                  		andi.w	#7,d0
0000B6C4 D040                       		add.w	d0,d0
0000B6C6 323B 0000                  		move.w	Obj2F_TypeIndex(pc,d0.w),d1
0000B6CA 4EFB 1000                  		jmp	Obj2F_TypeIndex(pc,d1.w)
0000B6CE                            ; End of function Obj2F_Types
0000B6CE                            
0000B6CE                            ; ===========================================================================
0000B6CE 0000                       Obj2F_TypeIndex:dc.w Obj2F_Type00-Obj2F_TypeIndex
0000B6D0 0000                       		dc.w Obj2F_Type01-Obj2F_TypeIndex
0000B6D2 0000                       		dc.w Obj2F_Type02-Obj2F_TypeIndex
0000B6D4 0000                       		dc.w Obj2F_Type03-Obj2F_TypeIndex
0000B6D6 0000                       		dc.w Obj2F_Type04-Obj2F_TypeIndex
0000B6D8 0000                       		dc.w Obj2F_Type05-Obj2F_TypeIndex
0000B6DA                            ; ===========================================================================
0000B6DA                            
0000B6DA                            Obj2F_Type00:				; XREF: Obj2F_TypeIndex
0000B6DA 4E75                       		rts			; type 00 platform doesn't move
0000B6DC                            ; ===========================================================================
0000B6DC                            
0000B6DC                            Obj2F_Type01:				; XREF: Obj2F_TypeIndex
0000B6DC 1038 FE60                  		move.b	($FFFFFE60).w,d0
0000B6E0 323C 0020                  		move.w	#$20,d1
0000B6E4 6000                       		bra.s	Obj2F_Move
0000B6E6                            ; ===========================================================================
0000B6E6                            
0000B6E6                            Obj2F_Type02:				; XREF: Obj2F_TypeIndex
0000B6E6 1038 FE64                  		move.b	($FFFFFE64).w,d0
0000B6EA 323C 0030                  		move.w	#$30,d1
0000B6EE 6000                       		bra.s	Obj2F_Move
0000B6F0                            ; ===========================================================================
0000B6F0                            
0000B6F0                            Obj2F_Type03:				; XREF: Obj2F_TypeIndex
0000B6F0 1038 FE68                  		move.b	($FFFFFE68).w,d0
0000B6F4 323C 0040                  		move.w	#$40,d1
0000B6F8 6000                       		bra.s	Obj2F_Move
0000B6FA                            ; ===========================================================================
0000B6FA                            
0000B6FA                            Obj2F_Type04:				; XREF: Obj2F_TypeIndex
0000B6FA 1038 FE6C                  		move.b	($FFFFFE6C).w,d0
0000B6FE 323C 0060                  		move.w	#$60,d1
0000B702                            
0000B702                            Obj2F_Move:
0000B702 0828 0003 0028             		btst	#3,$28(a0)
0000B708 6700                       		beq.s	loc_AFF2
0000B70A 4440                       		neg.w	d0
0000B70C D041                       		add.w	d1,d0
0000B70E                            
0000B70E                            loc_AFF2:
0000B70E 3228 002C                  		move.w	$2C(a0),d1
0000B712 9240                       		sub.w	d0,d1
0000B714 3141 000C                  		move.w	d1,$C(a0)	; update position on y-axis
0000B718 4E75                       		rts	
0000B71A                            ; ===========================================================================
0000B71A                            
0000B71A                            Obj2F_Type05:				; XREF: Obj2F_TypeIndex
0000B71A 1028 0034                  		move.b	$34(a0),d0
0000B71E 4A28 0025                  		tst.b	$25(a0)
0000B722 6600                       		bne.s	loc_B010
0000B724 5500                       		subq.b	#2,d0
0000B726 6400                       		bcc.s	loc_B01C
0000B728 7000                       		moveq	#0,d0
0000B72A 6000                       		bra.s	loc_B01C
0000B72C                            ; ===========================================================================
0000B72C                            
0000B72C                            loc_B010:
0000B72C 5800                       		addq.b	#4,d0
0000B72E 0C00 0040                  		cmpi.b	#$40,d0
0000B732 6500                       		bcs.s	loc_B01C
0000B734 103C 0040                  		move.b	#$40,d0
0000B738                            
0000B738                            loc_B01C:
0000B738 1140 0034                  		move.b	d0,$34(a0)
0000B73C 4EB9 0000 2CAC             		jsr	(CalcSine).l
0000B742 E848                       		lsr.w	#4,d0
0000B744 3200                       		move.w	d0,d1
0000B746 D068 002C                  		add.w	$2C(a0),d0
0000B74A 3140 000C                  		move.w	d0,$C(a0)
0000B74E 0C28 0020 0034             		cmpi.b	#$20,$34(a0)
0000B754 6600                       		bne.s	loc_B07A
0000B756 4A28 0035                  		tst.b	$35(a0)
0000B75A 6600                       		bne.s	loc_B07A
0000B75C 117C 0001 0035             		move.b	#1,$35(a0)
0000B762 6100 0000                  		bsr.w	SingleObjLoad2
0000B766 6600                       		bne.s	loc_B07A
0000B768 12BC 0035                  		move.b	#$35,0(a1)	; load sitting flame object
0000B76C 3368 0008 0008             		move.w	8(a0),8(a1)
0000B772 3368 002C 002C             		move.w	$2C(a0),$2C(a1)
0000B778 5069 002C                  		addq.w	#8,$2C(a1)
0000B77C 5769 002C                  		subq.w	#3,$2C(a1)
0000B780 0469 0040 0008             		subi.w	#$40,8(a1)
0000B786 2368 0030 0030             		move.l	$30(a0),$30(a1)
0000B78C 2348 0038                  		move.l	a0,$38(a1)
0000B790 2448                       		movea.l	a0,a2
0000B792 6100                       		bsr.s	sub_B09C
0000B794                            
0000B794                            loc_B07A:
0000B794 7400                       		moveq	#0,d2
0000B796 45E8 0036                  		lea	$36(a0),a2
0000B79A 141A                       		move.b	(a2)+,d2
0000B79C 5302                       		subq.b	#1,d2
0000B79E 6500                       		bcs.s	locret_B09A
0000B7A0                            
0000B7A0                            loc_B086:
0000B7A0 7000                       		moveq	#0,d0
0000B7A2 101A                       		move.b	(a2)+,d0
0000B7A4 ED48                       		lsl.w	#6,d0
0000B7A6 0640 D000                  		addi.w	#-$3000,d0
0000B7AA 3240                       		movea.w	d0,a1
0000B7AC 3341 003C                  		move.w	d1,$3C(a1)
0000B7B0 51CA FFEE                  		dbf	d2,loc_B086
0000B7B4                            
0000B7B4                            locret_B09A:
0000B7B4 4E75                       		rts	
0000B7B6                            
0000B7B6                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000B7B6                            
0000B7B6                            
0000B7B6                            sub_B09C:
0000B7B6 45EA 0036                  		lea	$36(a2),a2
0000B7BA 7000                       		moveq	#0,d0
0000B7BC 1012                       		move.b	(a2),d0
0000B7BE 5212                       		addq.b	#1,(a2)
0000B7C0 45F2 0001                  		lea	1(a2,d0.w),a2
0000B7C4 3009                       		move.w	a1,d0
0000B7C6 0440 D000                  		subi.w	#-$3000,d0
0000B7CA EC48                       		lsr.w	#6,d0
0000B7CC 0240 007F                  		andi.w	#$7F,d0
0000B7D0 1480                       		move.b	d0,(a2)
0000B7D2 4E75                       		rts	
0000B7D4                            ; End of function sub_B09C
0000B7D4                            
0000B7D4                            ; ===========================================================================
0000B7D4                            
0000B7D4                            Obj2F_ChkDel:				; XREF: Obj2F_Display
0000B7D4 4A28 0035                  		tst.b	$35(a0)
0000B7D8 6700                       		beq.s	loc_B0C6
0000B7DA 4A28 0001                  		tst.b	1(a0)
0000B7DE 6A00                       		bpl.s	Obj2F_DelFlames
0000B7E0                            
0000B7E0                            loc_B0C6:
0000B7E0 3028 002A                  		move.w	$2A(a0),d0
0000B7E4 0240 FF80                  		andi.w	#$FF80,d0
0000B7E8 3238 F700                  		move.w	($FFFFF700).w,d1
0000B7EC 0441 0080                  		subi.w	#$80,d1
0000B7F0 0241 FF80                  		andi.w	#$FF80,d1
0000B7F4 9041                       		sub.w	d1,d0
0000B7F6 0C40 0280                  		cmpi.w	#$280,d0
0000B7FA 6200 0000                  		bhi.w	DeleteObject
0000B7FE 4E75                       		rts	
0000B800                            ; ===========================================================================
0000B800                            
0000B800                            Obj2F_DelFlames:			; XREF: Obj2F_ChkDel
0000B800 7400                       		moveq	#0,d2
0000B802                            
0000B802                            loc_B0E8:
0000B802 45E8 0036                  		lea	$36(a0),a2
0000B806 1412                       		move.b	(a2),d2
0000B808 421A                       		clr.b	(a2)+
0000B80A 5302                       		subq.b	#1,d2
0000B80C 6500                       		bcs.s	locret_B116
0000B80E                            
0000B80E                            loc_B0F4:
0000B80E 7000                       		moveq	#0,d0
0000B810 1012                       		move.b	(a2),d0
0000B812 421A                       		clr.b	(a2)+
0000B814 ED48                       		lsl.w	#6,d0
0000B816 0640 D000                  		addi.w	#-$3000,d0
0000B81A 3240                       		movea.w	d0,a1
0000B81C 6100 0000                  		bsr.w	DeleteObject2
0000B820 51CA FFEC                  		dbf	d2,loc_B0F4
0000B824 117C 0000 0035             		move.b	#0,$35(a0)
0000B82A 117C 0000 0034             		move.b	#0,$34(a0)
0000B830                            
0000B830                            locret_B116:
0000B830 4E75                       		rts	
0000B832                            ; ===========================================================================
0000B832                            ; ---------------------------------------------------------------------------
0000B832                            ; Collision data for large moving platforms (MZ)
0000B832                            ; ---------------------------------------------------------------------------
0000B832                            Obj2F_Data1:	incbin	misc\mz_pfm1.bin
0000B87E                            		even
0000B87E                            Obj2F_Data2:	incbin	misc\mz_pfm2.bin
0000B8AA                            		even
0000B8AA                            Obj2F_Data3:	incbin	misc\mz_pfm3.bin
0000B8F6                            		even
0000B8F6                            ; ===========================================================================
0000B8F6                            ; ---------------------------------------------------------------------------
0000B8F6                            ; Object 35 - fireball that sits on the	floor (MZ)
0000B8F6                            ; (appears when	you walk on sinking platforms)
0000B8F6                            ; ---------------------------------------------------------------------------
0000B8F6                            
0000B8F6                            Obj35:					; XREF: Obj_Index
0000B8F6 7000                       		moveq	#0,d0
0000B8F8 1028 0024                  		move.b	$24(a0),d0
0000B8FC 323B 0000                  		move.w	Obj35_Index(pc,d0.w),d1
0000B900 4EFB 1000                  		jmp	Obj35_Index(pc,d1.w)
0000B904                            ; ===========================================================================
0000B904 0000                       Obj35_Index:	dc.w Obj35_Main-Obj35_Index
0000B906 0000                       		dc.w loc_B238-Obj35_Index
0000B908 0000                       		dc.w Obj35_Move-Obj35_Index
0000B90A                            ; ===========================================================================
0000B90A                            
0000B90A                            Obj35_Main:				; XREF: Obj35_Index
0000B90A 5428 0024                  		addq.b	#2,$24(a0)
0000B90E 217C 0000 0000 0004        		move.l	#Map_obj14,4(a0)
0000B916 317C 0345 0002             		move.w	#$345,2(a0)
0000B91C 3168 0008 002A             		move.w	8(a0),$2A(a0)
0000B922 117C 0004 0001             		move.b	#4,1(a0)
0000B928 117C 0001 0018             		move.b	#1,$18(a0)
0000B92E 117C 008B 0020             		move.b	#$8B,$20(a0)
0000B934 117C 0008 0019             		move.b	#8,$19(a0)
0000B93A 303C 00C8                  		move.w	#$C8,d0
0000B93E 4EB9 0000 15C0             		jsr	(PlaySound_Special).l ;	play flame sound
0000B944 4A28 0028                  		tst.b	$28(a0)
0000B948 6700                       		beq.s	loc_B238
0000B94A 5428 0024                  		addq.b	#2,$24(a0)
0000B94E 6000 0000                  		bra.w	Obj35_Move
0000B952                            ; ===========================================================================
0000B952                            
0000B952                            loc_B238:				; XREF: Obj35_Index
0000B952 2268 0030                  		movea.l	$30(a0),a1
0000B956 3228 0008                  		move.w	8(a0),d1
0000B95A 9268 002A                  		sub.w	$2A(a0),d1
0000B95E 0641 000C                  		addi.w	#$C,d1
0000B962 3001                       		move.w	d1,d0
0000B964 E248                       		lsr.w	#1,d0
0000B966 1031 0000                  		move.b	(a1,d0.w),d0
0000B96A 4440                       		neg.w	d0
0000B96C D068 002C                  		add.w	$2C(a0),d0
0000B970 3400                       		move.w	d0,d2
0000B972 D068 003C                  		add.w	$3C(a0),d0
0000B976 3140 000C                  		move.w	d0,$C(a0)
0000B97A 0C41 0084                  		cmpi.w	#$84,d1
0000B97E 6400                       		bcc.s	loc_B2B0
0000B980 06A8 0001 0000 0008        		addi.l	#$10000,8(a0)
0000B988 0C41 0080                  		cmpi.w	#$80,d1
0000B98C 6400                       		bcc.s	loc_B2B0
0000B98E 2028 0008                  		move.l	8(a0),d0
0000B992 0680 0008 0000             		addi.l	#$80000,d0
0000B998 0280 000F FFFF             		andi.l	#$FFFFF,d0
0000B99E 6600                       		bne.s	loc_B2B0
0000B9A0 6100 0000                  		bsr.w	SingleObjLoad2
0000B9A4 6600                       		bne.s	loc_B2B0
0000B9A6 12BC 0035                  		move.b	#$35,0(a1)
0000B9AA 3368 0008 0008             		move.w	8(a0),8(a1)
0000B9B0 3342 002C                  		move.w	d2,$2C(a1)
0000B9B4 3368 003C 003C             		move.w	$3C(a0),$3C(a1)
0000B9BA 137C 0001 0028             		move.b	#1,$28(a1)
0000B9C0 2468 0038                  		movea.l	$38(a0),a2
0000B9C4 6100 FDF0                  		bsr.w	sub_B09C
0000B9C8                            
0000B9C8                            loc_B2B0:
0000B9C8 6000                       		bra.s	Obj35_Animate
0000B9CA                            ; ===========================================================================
0000B9CA                            
0000B9CA                            Obj35_Move:				; XREF: Obj35_Index
0000B9CA 3028 002C                  		move.w	$2C(a0),d0
0000B9CE D068 003C                  		add.w	$3C(a0),d0
0000B9D2 3140 000C                  		move.w	d0,$C(a0)
0000B9D6                            
0000B9D6                            Obj35_Animate:				; XREF: loc_B238
0000B9D6 43F9 0000 0000             		lea	(Ani_obj35).l,a1
0000B9DC 6100 F4AA                  		bsr.w	AnimateSprite
0000B9E0 6000 0000                  		bra.w	DisplaySprite
0000B9E4                            ; ===========================================================================
0000B9E4                            Ani_obj35:
0000B9E4                            	include "_anim\obj35.asm"
0000B9E4                            ; ---------------------------------------------------------------------------
0000B9E4                            ; Animation script - fireball that sits on the	floor (MZ)
0000B9E4                            ; ---------------------------------------------------------------------------
0000B9E4 0000                       		dc.w byte_B2CE-Ani_obj35
0000B9E6 0500 2001 21FF             byte_B2CE:	dc.b 5,	0, $20,	1, $21,	$FF
0000B9EC                            		even
0000B9EC                            		even
0000B9EC                            
0000B9EC                            ; ---------------------------------------------------------------------------
0000B9EC                            ; Sprite mappings - large moving platforms (MZ)
0000B9EC                            ; ---------------------------------------------------------------------------
0000B9EC                            Map_obj2F:
0000B9EC                            	include "_maps\obj2F.asm"
0000B9EC                            ; ---------------------------------------------------------------------------
0000B9EC                            ; Sprite mappings - large moving platforms (MZ)
0000B9EC                            ; ---------------------------------------------------------------------------
0000B9EC 0000                       		dc.w byte_B2DA-Map_obj2F
0000B9EE 0000                       		dc.w byte_B31C-Map_obj2F
0000B9F0 0000                       		dc.w byte_B34F-Map_obj2F
0000B9F2 0D                         byte_B2DA:	dc.b $D
0000B9F3 D806 0057 C0               		dc.b $D8, 6, 0,	$57, $C0
0000B9F8 F005 0053 C0               		dc.b $F0, 5, 0,	$53, $C0
0000B9FD 000F 0001 C0               		dc.b 0,	$F, 0, 1, $C0
0000BA02 D00F 0027 D0               		dc.b $D0, $F, 0, $27, $D0
0000BA07 F00D 0037 D0               		dc.b $F0, $D, 0, $37, $D0
0000BA0C F00F 0001 E0               		dc.b $F0, $F, 0, 1, $E0
0000BA11 D00F 0011 F0               		dc.b $D0, $F, 0, $11, $F0
0000BA16 D00F 003F 10               		dc.b $D0, $F, 0, $3F, $10
0000BA1B F00D 004F 10               		dc.b $F0, $D, 0, $4F, $10
0000BA20 F00F 0001 00               		dc.b $F0, $F, 0, 1, 0
0000BA25 000F 0001 20               		dc.b 0,	$F, 0, 1, $20
0000BA2A D806 0057 30               		dc.b $D8, 6, 0,	$57, $30
0000BA2F F005 0053 30               		dc.b $F0, 5, 0,	$53, $30
0000BA34 0A                         byte_B31C:	dc.b $A
0000BA35 D00F 0027 C0               		dc.b $D0, $F, 0, $27, $C0
0000BA3A F00D 0037 C0               		dc.b $F0, $D, 0, $37, $C0
0000BA3F 000F 0001 C0               		dc.b 0,	$F, 0, 1, $C0
0000BA44 C00F 0027 E0               		dc.b $C0, $F, 0, $27, $E0
0000BA49 E00D 0037 E0               		dc.b $E0, $D, 0, $37, $E0
0000BA4E F00F 0001 E0               		dc.b $F0, $F, 0, 1, $E0
0000BA53 C00F 0011 00               		dc.b $C0, $F, 0, $11, 0
0000BA58 E00F 0001 00               		dc.b $E0, $F, 0, 1, 0
0000BA5D C00F 003F 20               		dc.b $C0, $F, 0, $3F, $20
0000BA62 E00D 004F 20               		dc.b $E0, $D, 0, $4F, $20
0000BA67 06                         byte_B34F:	dc.b 6
0000BA68 D00F 0011 E0               		dc.b $D0, $F, 0, $11, $E0
0000BA6D F00F 0001 E0               		dc.b $F0, $F, 0, 1, $E0
0000BA72 100F 0001 E0               		dc.b $10, $F, 0, 1, $E0
0000BA77 D00F 0011 00               		dc.b $D0, $F, 0, $11, 0
0000BA7C F00F 0001 00               		dc.b $F0, $F, 0, 1, 0
0000BA81 100F 0001 00               		dc.b $10, $F, 0, 1, 0
0000BA86                            		even
0000BA86                            		even
0000BA86                            
0000BA86                            ; ---------------------------------------------------------------------------
0000BA86                            ; Sprite mappings - lava balls (MZ, SLZ)
0000BA86                            ; ---------------------------------------------------------------------------
0000BA86                            Map_obj14:
0000BA86                            	include "_maps\obj14.asm"
0000BA86                            ; --------------------------------------------------------------------------------
0000BA86                            ; Sprite mappings - output from SonMapEd - Sonic 1 format
0000BA86                            ; --------------------------------------------------------------------------------
0000BA86                            
0000BA86                            SME_C6wT7:	
0000BA86 0000 0000                  		dc.w SME_C6wT7_C-SME_C6wT7, SME_C6wT7_12-SME_C6wT7	
0000BA8A 0000 0000                  		dc.w SME_C6wT7_18-SME_C6wT7, SME_C6wT7_23-SME_C6wT7	
0000BA8E 0000 0000                  		dc.w SME_C6wT7_29-SME_C6wT7, SME_C6wT7_2F-SME_C6wT7	
0000BA92 01                         SME_C6wT7_C:	dc.b 1	
0000BA93 E80F 0000 F8               		dc.b $E8, $F, 0, 0, $F8	
0000BA98 01                         SME_C6wT7_12:	dc.b 1	
0000BA99 E80F 0000 F8               		dc.b $E8, $F, 0, 0, $F8	
0000BA9E 02                         SME_C6wT7_18:	dc.b 2	
0000BA9F EF06 0010 F8               		dc.b $EF, 6, 0, $10, $F8	
0000BAA4 E707 0016 08               		dc.b $E7, 7, 0, $16, 8	
0000BAA9 01                         SME_C6wT7_23:	dc.b 1	
0000BAAA F00F 0000 E8               		dc.b $F0, $F, 0, 0, $E8	
0000BAAF 01                         SME_C6wT7_29:	dc.b 1	
0000BAB0 F00F 0000 E8               		dc.b $F0, $F, 0, 0, $E8	
0000BAB5 01                         SME_C6wT7_2F:	dc.b 1	
0000BAB6 F00B 001E E8               		dc.b $F0, $B, 0, $1E, $E8	
0000BABC 00                         		even
0000BABC 00                         		even
0000BABC                            
0000BABC                            ; ===========================================================================
0000BABC                            ; ---------------------------------------------------------------------------
0000BABC                            ; Object 30 - large green glassy blocks	(MZ)
0000BABC                            ; ---------------------------------------------------------------------------
0000BABC                            
0000BABC                            Obj30:					; XREF: Obj_Index
0000BABC 7000                       		moveq	#0,d0
0000BABE 1028 0024                  		move.b	$24(a0),d0
0000BAC2 323B 0000                  		move.w	Obj30_Index(pc,d0.w),d1
0000BAC6 4EBB 1000                  		jsr	Obj30_Index(pc,d1.w)
0000BACA 3028 0008                  		move.w	8(a0),d0
0000BACE 0240 FF80                  		andi.w	#$FF80,d0
0000BAD2 3238 F700                  		move.w	($FFFFF700).w,d1
0000BAD6 0441 0080                  		subi.w	#$80,d1
0000BADA 0241 FF80                  		andi.w	#$FF80,d1
0000BADE 9041                       		sub.w	d1,d0
0000BAE0 0C40 0280                  		cmpi.w	#$280,d0
0000BAE4 6200 0000                  		bhi.w	Obj30_Delete
0000BAE8 6000 0000                  		bra.w	DisplaySprite
0000BAEC                            ; ===========================================================================
0000BAEC                            
0000BAEC                            Obj30_Delete:
0000BAEC 6000 0000                  		bra.w	DeleteObject
0000BAF0                            ; ===========================================================================
0000BAF0 0000                       Obj30_Index:	dc.w Obj30_Main-Obj30_Index
0000BAF2 0000                       		dc.w Obj30_Block012-Obj30_Index
0000BAF4 0000                       		dc.w Obj30_Reflect012-Obj30_Index
0000BAF6 0000                       		dc.w Obj30_Block34-Obj30_Index
0000BAF8 0000                       		dc.w Obj30_Reflect34-Obj30_Index
0000BAFA                            
0000BAFA 0200 00                    Obj30_Vars1:	dc.b 2,	0, 0	; routine num, y-axis dist from	origin,	frame num
0000BAFD 0400 01                    		dc.b 4,	0, 1
0000BB00 0600 02                    Obj30_Vars2:	dc.b 6,	0, 2
0000BB03 0800 01                    		dc.b 8,	0, 1
0000BB06                            ; ===========================================================================
0000BB06                            
0000BB06                            Obj30_Main:				; XREF: Obj30_Index
0000BB06 45F9 0000 BAFA             		lea	(Obj30_Vars1).l,a2
0000BB0C 7201                       		moveq	#1,d1
0000BB0E 117C 0048 0016             		move.b	#$48,$16(a0)
0000BB14 0C28 0003 0028             		cmpi.b	#3,$28(a0)	; is object type 0/1/2 ?
0000BB1A 6500                       		bcs.s	loc_B40C	; if yes, branch
0000BB1C 45F9 0000 BB00             		lea	(Obj30_Vars2).l,a2
0000BB22 7201                       		moveq	#1,d1
0000BB24 117C 0038 0016             		move.b	#$38,$16(a0)
0000BB2A                            
0000BB2A                            loc_B40C:
0000BB2A 2248                       		movea.l	a0,a1
0000BB2C 6000                       		bra.s	Obj30_Load	; load main object
0000BB2E                            ; ===========================================================================
0000BB2E                            
0000BB2E                            Obj30_Loop:
0000BB2E 6100 0000                  		bsr.w	SingleObjLoad2
0000BB32 6600                       		bne.s	loc_B480
0000BB34                            
0000BB34                            Obj30_Load:				; XREF: Obj30_Main
0000BB34 135A 0024                  		move.b	(a2)+,$24(a1)
0000BB38 12BC 0030                  		move.b	#$30,0(a1)
0000BB3C 3368 0008 0008             		move.w	8(a0),8(a1)
0000BB42 101A                       		move.b	(a2)+,d0
0000BB44 4880                       		ext.w	d0
0000BB46 D068 000C                  		add.w	$C(a0),d0
0000BB4A 3340 000C                  		move.w	d0,$C(a1)
0000BB4E 237C 0000 0000 0004        		move.l	#Map_obj30,4(a1)
0000BB56 337C C38E 0002             		move.w	#$C38E,2(a1)
0000BB5C 137C 0004 0001             		move.b	#4,1(a1)
0000BB62 3369 000C 0030             		move.w	$C(a1),$30(a1)
0000BB68 1368 0028 0028             		move.b	$28(a0),$28(a1)
0000BB6E 137C 0020 0019             		move.b	#$20,$19(a1)
0000BB74 137C 0004 0018             		move.b	#4,$18(a1)
0000BB7A 135A 001A                  		move.b	(a2)+,$1A(a1)
0000BB7E 2348 003C                  		move.l	a0,$3C(a1)
0000BB82 51C9 FFAA                  		dbf	d1,Obj30_Loop	; repeat once to load "reflection object"
0000BB86                            
0000BB86 137C 0010 0019             		move.b	#$10,$19(a1)
0000BB8C 137C 0003 0018             		move.b	#3,$18(a1)
0000BB92 5029 0028                  		addq.b	#8,$28(a1)
0000BB96 0229 000F 0028             		andi.b	#$F,$28(a1)
0000BB9C                            
0000BB9C                            loc_B480:
0000BB9C 317C 0090 0032             		move.w	#$90,$32(a0)
0000BBA2 08E8 0004 0001             		bset	#4,1(a0)
0000BBA8                            
0000BBA8                            Obj30_Block012:				; XREF: Obj30_Index
0000BBA8 6100 0000                  		bsr.w	Obj30_Types
0000BBAC 323C 002B                  		move.w	#$2B,d1
0000BBB0 343C 0048                  		move.w	#$48,d2
0000BBB4 363C 0049                  		move.w	#$49,d3
0000BBB8 3828 0008                  		move.w	8(a0),d4
0000BBBC 6000 0000                  		bra.w	SolidObject
0000BBC0                            ; ===========================================================================
0000BBC0                            
0000BBC0                            Obj30_Reflect012:			; XREF: Obj30_Index
0000BBC0 2268 003C                  		movea.l	$3C(a0),a1
0000BBC4 3169 0032 0032             		move.w	$32(a1),$32(a0)
0000BBCA 6000 0000                  		bra.w	Obj30_Types
0000BBCE                            ; ===========================================================================
0000BBCE                            
0000BBCE                            Obj30_Block34:				; XREF: Obj30_Index
0000BBCE 6100 0000                  		bsr.w	Obj30_Types
0000BBD2 323C 002B                  		move.w	#$2B,d1
0000BBD6 343C 0038                  		move.w	#$38,d2
0000BBDA 363C 0039                  		move.w	#$39,d3
0000BBDE 3828 0008                  		move.w	8(a0),d4
0000BBE2 6000 0000                  		bra.w	SolidObject
0000BBE6                            ; ===========================================================================
0000BBE6                            
0000BBE6                            Obj30_Reflect34:			; XREF: Obj30_Index
0000BBE6 2268 003C                  		movea.l	$3C(a0),a1
0000BBEA 3169 0032 0032             		move.w	$32(a1),$32(a0)
0000BBF0 3169 000C 0030             		move.w	$C(a1),$30(a0)
0000BBF6 6000 0002                  		bra.w	*+4
0000BBFA                            
0000BBFA                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000BBFA                            
0000BBFA                            
0000BBFA                            Obj30_Types:				; XREF: Obj30_Block012; et al
0000BBFA 7000                       		moveq	#0,d0
0000BBFC 1028 0028                  		move.b	$28(a0),d0
0000BC00 0240 0007                  		andi.w	#7,d0
0000BC04 D040                       		add.w	d0,d0
0000BC06 323B 0000                  		move.w	Obj30_TypeIndex(pc,d0.w),d1
0000BC0A 4EFB 1000                  		jmp	Obj30_TypeIndex(pc,d1.w)
0000BC0E                            ; End of function Obj30_Types
0000BC0E                            
0000BC0E                            ; ===========================================================================
0000BC0E 0000                       Obj30_TypeIndex:dc.w Obj30_Type00-Obj30_TypeIndex
0000BC10 0000                       		dc.w Obj30_Type01-Obj30_TypeIndex
0000BC12 0000                       		dc.w Obj30_Type02-Obj30_TypeIndex
0000BC14 0000                       		dc.w Obj30_Type03-Obj30_TypeIndex
0000BC16 0000                       		dc.w Obj30_Type04-Obj30_TypeIndex
0000BC18                            ; ===========================================================================
0000BC18                            
0000BC18                            Obj30_Type00:				; XREF: Obj30_TypeIndex
0000BC18 4E75                       		rts	
0000BC1A                            ; ===========================================================================
0000BC1A                            
0000BC1A                            Obj30_Type01:				; XREF: Obj30_TypeIndex
0000BC1A 1038 FE70                  		move.b	($FFFFFE70).w,d0
0000BC1E 323C 0040                  		move.w	#$40,d1
0000BC22 6000                       		bra.s	loc_B514
0000BC24                            ; ===========================================================================
0000BC24                            
0000BC24                            Obj30_Type02:				; XREF: Obj30_TypeIndex
0000BC24 1038 FE70                  		move.b	($FFFFFE70).w,d0
0000BC28 323C 0040                  		move.w	#$40,d1
0000BC2C 4440                       		neg.w	d0
0000BC2E D041                       		add.w	d1,d0
0000BC30                            
0000BC30                            loc_B514:				; XREF: Obj30_Type01
0000BC30 0828 0003 0028             		btst	#3,$28(a0)
0000BC36 6700                       		beq.s	loc_B526
0000BC38 4440                       		neg.w	d0
0000BC3A D041                       		add.w	d1,d0
0000BC3C E208                       		lsr.b	#1,d0
0000BC3E 0640 0020                  		addi.w	#$20,d0
0000BC42                            
0000BC42                            loc_B526:
0000BC42 6000 0000                  		bra.w	loc_B5EE
0000BC46                            ; ===========================================================================
0000BC46                            
0000BC46                            Obj30_Type03:				; XREF: Obj30_TypeIndex
0000BC46 0828 0003 0028             		btst	#3,$28(a0)
0000BC4C 6700                       		beq.s	loc_B53E
0000BC4E 1038 FE70                  		move.b	($FFFFFE70).w,d0
0000BC52 0440 0010                  		subi.w	#$10,d0
0000BC56 6000 0000                  		bra.w	loc_B5EE
0000BC5A                            ; ===========================================================================
0000BC5A                            
0000BC5A                            loc_B53E:
0000BC5A 0828 0003 0022             		btst	#3,$22(a0)
0000BC60 6600                       		bne.s	loc_B54E
0000BC62 08A8 0000 0034             		bclr	#0,$34(a0)
0000BC68 6000                       		bra.s	loc_B582
0000BC6A                            ; ===========================================================================
0000BC6A                            
0000BC6A                            loc_B54E:
0000BC6A 4A28 0034                  		tst.b	$34(a0)
0000BC6E 6600                       		bne.s	loc_B582
0000BC70 117C 0001 0034             		move.b	#1,$34(a0)
0000BC76 08E8 0000 0035             		bset	#0,$35(a0)
0000BC7C 6700                       		beq.s	loc_B582
0000BC7E 08E8 0007 0034             		bset	#7,$34(a0)
0000BC84 317C 0010 0036             		move.w	#$10,$36(a0)
0000BC8A 117C 000A 0038             		move.b	#$A,$38(a0)
0000BC90 0C68 0040 0032             		cmpi.w	#$40,$32(a0)
0000BC96 6600                       		bne.s	loc_B582
0000BC98 317C 0040 0036             		move.w	#$40,$36(a0)
0000BC9E                            
0000BC9E                            loc_B582:
0000BC9E 4A28 0034                  		tst.b	$34(a0)
0000BCA2 6A00                       		bpl.s	loc_B5AA
0000BCA4 4A28 0038                  		tst.b	$38(a0)
0000BCA8 6700                       		beq.s	loc_B594
0000BCAA 5328 0038                  		subq.b	#1,$38(a0)
0000BCAE 6600                       		bne.s	loc_B5AA
0000BCB0                            
0000BCB0                            loc_B594:
0000BCB0 4A68 0032                  		tst.w	$32(a0)
0000BCB4 6700                       		beq.s	loc_B5A4
0000BCB6 5368 0032                  		subq.w	#1,$32(a0)
0000BCBA 5368 0036                  		subq.w	#1,$36(a0)
0000BCBE 6600                       		bne.s	loc_B5AA
0000BCC0                            
0000BCC0                            loc_B5A4:
0000BCC0 08A8 0007 0034             		bclr	#7,$34(a0)
0000BCC6                            
0000BCC6                            loc_B5AA:
0000BCC6 3028 0032                  		move.w	$32(a0),d0
0000BCCA 6000                       		bra.s	loc_B5EE
0000BCCC                            ; ===========================================================================
0000BCCC                            
0000BCCC                            Obj30_Type04:				; XREF: Obj30_TypeIndex
0000BCCC 0828 0003 0028             		btst	#3,$28(a0)
0000BCD2 6700                       		beq.s	Obj30_ChkSwitch
0000BCD4 1038 FE70                  		move.b	($FFFFFE70).w,d0
0000BCD8 0440 0010                  		subi.w	#$10,d0
0000BCDC 6000                       		bra.s	loc_B5EE
0000BCDE                            ; ===========================================================================
0000BCDE                            
0000BCDE                            Obj30_ChkSwitch:			; XREF: Obj30_Type04
0000BCDE 4A28 0034                  		tst.b	$34(a0)
0000BCE2 6600                       		bne.s	loc_B5E0
0000BCE4 45F8 F7E0                  		lea	($FFFFF7E0).w,a2
0000BCE8 7000                       		moveq	#0,d0
0000BCEA 1028 0028                  		move.b	$28(a0),d0	; load object type number
0000BCEE E848                       		lsr.w	#4,d0		; read only the	first nybble
0000BCF0 4A32 0000                  		tst.b	(a2,d0.w)	; has switch number d0 been pressed?
0000BCF4 6700                       		beq.s	loc_B5EA	; if not, branch
0000BCF6 117C 0001 0034             		move.b	#1,$34(a0)
0000BCFC                            
0000BCFC                            loc_B5E0:
0000BCFC 4A68 0032                  		tst.w	$32(a0)
0000BD00 6700                       		beq.s	loc_B5EA
0000BD02 5568 0032                  		subq.w	#2,$32(a0)
0000BD06                            
0000BD06                            loc_B5EA:
0000BD06 3028 0032                  		move.w	$32(a0),d0
0000BD0A                            
0000BD0A                            loc_B5EE:
0000BD0A 3228 0030                  		move.w	$30(a0),d1
0000BD0E 9240                       		sub.w	d0,d1
0000BD10 3141 000C                  		move.w	d1,$C(a0)
0000BD14 4E75                       		rts	
0000BD16                            ; ===========================================================================
0000BD16                            ; ---------------------------------------------------------------------------
0000BD16                            ; Sprite mappings - large green	glassy blocks (MZ)
0000BD16                            ; ---------------------------------------------------------------------------
0000BD16                            Map_obj30:
0000BD16                            	include "_maps\obj30.asm"
0000BD16                            ; ---------------------------------------------------------------------------
0000BD16                            ; Sprite mappings - large green	glassy blocks (MZ)
0000BD16                            ; ---------------------------------------------------------------------------
0000BD16 0000                       		dc.w byte_B600-Map_obj30
0000BD18 0000                       		dc.w byte_B63D-Map_obj30
0000BD1A 0000                       		dc.w byte_B648-Map_obj30
0000BD1C 0C                         byte_B600:	dc.b $C
0000BD1D B80C 0000 E0               		dc.b $B8, $C, 0, 0, $E0
0000BD22 B80C 0800 00               		dc.b $B8, $C, 8, 0, 0
0000BD27 C00F 0004 E0               		dc.b $C0, $F, 0, 4, $E0
0000BD2C C00F 0804 00               		dc.b $C0, $F, 8, 4, 0
0000BD31 E00F 0004 E0               		dc.b $E0, $F, 0, 4, $E0
0000BD36 E00F 0804 00               		dc.b $E0, $F, 8, 4, 0
0000BD3B 000F 0004 E0               		dc.b 0,	$F, 0, 4, $E0
0000BD40 000F 0804 00               		dc.b 0,	$F, 8, 4, 0
0000BD45 200F 0004 E0               		dc.b $20, $F, 0, 4, $E0
0000BD4A 200F 0804 00               		dc.b $20, $F, 8, 4, 0
0000BD4F 400C 1000 E0               		dc.b $40, $C, $10, 0, $E0
0000BD54 400C 1800 00               		dc.b $40, $C, $18, 0, 0
0000BD59 02                         byte_B63D:	dc.b 2
0000BD5A 0806 0014 F0               		dc.b 8,	6, 0, $14, $F0
0000BD5F 0006 0014 00               		dc.b 0,	6, 0, $14, 0
0000BD64 0A                         byte_B648:	dc.b $A
0000BD65 C80C 0000 E0               		dc.b $C8, $C, 0, 0, $E0
0000BD6A C80C 0800 00               		dc.b $C8, $C, 8, 0, 0
0000BD6F D00F 0004 E0               		dc.b $D0, $F, 0, 4, $E0
0000BD74 D00F 0804 00               		dc.b $D0, $F, 8, 4, 0
0000BD79 F00F 0004 E0               		dc.b $F0, $F, 0, 4, $E0
0000BD7E F00F 0804 00               		dc.b $F0, $F, 8, 4, 0
0000BD83 100F 0004 E0               		dc.b $10, $F, 0, 4, $E0
0000BD88 100F 0804 00               		dc.b $10, $F, 8, 4, 0
0000BD8D 300C 1000 E0               		dc.b $30, $C, $10, 0, $E0
0000BD92 300C 1800 00               		dc.b $30, $C, $18, 0, 0
0000BD98 00                         		even
0000BD98 00                         		even
0000BD98                            
0000BD98                            ; ===========================================================================
0000BD98                            ; ---------------------------------------------------------------------------
0000BD98                            ; Object 31 - stomping metal blocks on chains (MZ)
0000BD98                            ; ---------------------------------------------------------------------------
0000BD98                            
0000BD98                            Obj31:					; XREF: Obj_Index
0000BD98 7000                       		moveq	#0,d0
0000BD9A 1028 0024                  		move.b	$24(a0),d0
0000BD9E 323B 0000                  		move.w	Obj31_Index(pc,d0.w),d1
0000BDA2 4EFB 1000                  		jmp	Obj31_Index(pc,d1.w)
0000BDA6                            ; ===========================================================================
0000BDA6 0000                       Obj31_Index:	dc.w Obj31_Main-Obj31_Index
0000BDA8 0000                       		dc.w loc_B798-Obj31_Index
0000BDAA 0000                       		dc.w loc_B7FE-Obj31_Index
0000BDAC 0000                       		dc.w Obj31_Display2-Obj31_Index
0000BDAE 0000                       		dc.w loc_B7E2-Obj31_Index
0000BDB0                            
0000BDB0 0000                       Obj31_SwchNums:	dc.b 0,	0		; switch number, obj number
0000BDB2 0100                       		dc.b 1,	0
0000BDB4                            
0000BDB4 0200 00                    Obj31_Var:	dc.b 2,	0, 0		; XREF: ROM:0000B6E0o
0000BDB7 041C 01                    		dc.b 4,	$1C, 1		; routine number, y-position, frame number
0000BDBA 08CC 03                    		dc.b 8,	$CC, 3
0000BDBD 06F0 02                    		dc.b 6,	$F0, 2
0000BDC0                            
0000BDC0 7000 A000                  word_B6A4:	dc.w $7000, $A000
0000BDC4 5000 7800                  		dc.w $5000, $7800
0000BDC8 3800 5800                  		dc.w $3800, $5800
0000BDCC B800                       		dc.w $B800
0000BDCE                            ; ===========================================================================
0000BDCE                            
0000BDCE                            Obj31_Main:				; XREF: Obj31_Index
0000BDCE 7000                       		moveq	#0,d0
0000BDD0 1028 0028                  		move.b	$28(a0),d0
0000BDD4 6A00                       		bpl.s	loc_B6CE
0000BDD6 0240 007F                  		andi.w	#$7F,d0
0000BDDA D040                       		add.w	d0,d0
0000BDDC 45FB 00D2                  		lea	Obj31_SwchNums(pc,d0.w),a2
0000BDE0 115A 003A                  		move.b	(a2)+,$3A(a0)
0000BDE4 101A                       		move.b	(a2)+,d0
0000BDE6 1140 0028                  		move.b	d0,$28(a0)
0000BDEA                            
0000BDEA                            loc_B6CE:
0000BDEA 0200 000F                  		andi.b	#$F,d0
0000BDEE D040                       		add.w	d0,d0
0000BDF0 343B 00CE                  		move.w	word_B6A4(pc,d0.w),d2
0000BDF4 4A40                       		tst.w	d0
0000BDF6 6600                       		bne.s	loc_B6E0
0000BDF8 3142 0032                  		move.w	d2,$32(a0)
0000BDFC                            
0000BDFC                            loc_B6E0:
0000BDFC 45F9 0000 BDB4             		lea	(Obj31_Var).l,a2
0000BE02 2248                       		movea.l	a0,a1
0000BE04 7203                       		moveq	#3,d1
0000BE06 6000                       		bra.s	Obj31_MakeStomper
0000BE08                            ; ===========================================================================
0000BE08                            
0000BE08                            Obj31_Loop:
0000BE08 6100 0000                  		bsr.w	SingleObjLoad2
0000BE0C 6600 0000                  		bne.w	Obj31_SetSize
0000BE10                            
0000BE10                            Obj31_MakeStomper:			; XREF: Obj31_Main
0000BE10 135A 0024                  		move.b	(a2)+,$24(a1)
0000BE14 12BC 0031                  		move.b	#$31,0(a1)
0000BE18 3368 0008 0008             		move.w	8(a0),8(a1)
0000BE1E 101A                       		move.b	(a2)+,d0
0000BE20 4880                       		ext.w	d0
0000BE22 D068 000C                  		add.w	$C(a0),d0
0000BE26 3340 000C                  		move.w	d0,$C(a1)
0000BE2A 237C 0000 0000 0004        		move.l	#Map_obj31,4(a1)
0000BE32 337C 0300 0002             		move.w	#$300,2(a1)
0000BE38 137C 0004 0001             		move.b	#4,1(a1)
0000BE3E 3369 000C 0030             		move.w	$C(a1),$30(a1)
0000BE44 1368 0028 0028             		move.b	$28(a0),$28(a1)
0000BE4A 137C 0010 0019             		move.b	#$10,$19(a1)
0000BE50 3342 0034                  		move.w	d2,$34(a1)
0000BE54 137C 0004 0018             		move.b	#4,$18(a1)
0000BE5A 135A 001A                  		move.b	(a2)+,$1A(a1)
0000BE5E 0C29 0001 001A             		cmpi.b	#1,$1A(a1)
0000BE64 6600                       		bne.s	loc_B76A
0000BE66 5341                       		subq.w	#1,d1
0000BE68 1028 0028                  		move.b	$28(a0),d0
0000BE6C 0240 00F0                  		andi.w	#$F0,d0
0000BE70 0C40 0020                  		cmpi.w	#$20,d0
0000BE74 679A                       		beq.s	Obj31_MakeStomper
0000BE76 137C 0038 0019             		move.b	#$38,$19(a1)
0000BE7C 137C 0090 0020             		move.b	#$90,$20(a1)
0000BE82 5241                       		addq.w	#1,d1
0000BE84                            
0000BE84                            loc_B76A:
0000BE84 2348 003C                  		move.l	a0,$3C(a1)
0000BE88 51C9 FF7E                  		dbf	d1,Obj31_Loop
0000BE8C                            
0000BE8C 137C 0003 0018             		move.b	#3,$18(a1)
0000BE92                            
0000BE92                            Obj31_SetSize:
0000BE92 7000                       		moveq	#0,d0
0000BE94 1028 0028                  		move.b	$28(a0),d0
0000BE98 E648                       		lsr.w	#3,d0
0000BE9A 0200 000E                  		andi.b	#$E,d0
0000BE9E 45FB 0000                  		lea	Obj31_Var2(pc,d0.w),a2
0000BEA2 115A 0019                  		move.b	(a2)+,$19(a0)
0000BEA6 115A 001A                  		move.b	(a2)+,$1A(a0)
0000BEAA 6000                       		bra.s	loc_B798
0000BEAC                            ; ===========================================================================
0000BEAC 3800                       Obj31_Var2:	dc.b $38, 0		; width, frame number
0000BEAE 3009                       		dc.b $30, 9
0000BEB0 100A                       		dc.b $10, $A
0000BEB2                            ; ===========================================================================
0000BEB2                            
0000BEB2                            loc_B798:				; XREF: Obj31_Index
0000BEB2 6100 0000                  		bsr.w	Obj31_Types
0000BEB6 31E8 000C F7A4             		move.w	$C(a0),($FFFFF7A4).w
0000BEBC 7200                       		moveq	#0,d1
0000BEBE 1228 0019                  		move.b	$19(a0),d1
0000BEC2 0641 000B                  		addi.w	#$B,d1
0000BEC6 343C 000C                  		move.w	#$C,d2
0000BECA 363C 000D                  		move.w	#$D,d3
0000BECE 3828 0008                  		move.w	8(a0),d4
0000BED2 6100 0000                  		bsr.w	SolidObject
0000BED6 0828 0003 0022             		btst	#3,$22(a0)
0000BEDC 6700                       		beq.s	Obj31_Display
0000BEDE 0C28 0010 0032             		cmpi.b	#$10,$32(a0)
0000BEE4 6400                       		bcc.s	Obj31_Display
0000BEE6 2448                       		movea.l	a0,a2
0000BEE8 41F8 D000                  		lea	($FFFFD000).w,a0
0000BEEC 4EB9 0000 0000             		jsr	KillSonic
0000BEF2 204A                       		movea.l	a2,a0
0000BEF4                            
0000BEF4                            Obj31_Display:
0000BEF4 6100 0000                  		bsr.w	DisplaySprite
0000BEF8 6000 0000                  		bra.w	Obj31_ChkDel
0000BEFC                            ; ===========================================================================
0000BEFC                            
0000BEFC                            loc_B7E2:				; XREF: Obj31_Index
0000BEFC 117C 0080 0016             		move.b	#$80,$16(a0)
0000BF02 08E8 0004 0001             		bset	#4,1(a0)
0000BF08 2268 003C                  		movea.l	$3C(a0),a1
0000BF0C 1029 0032                  		move.b	$32(a1),d0
0000BF10 EA08                       		lsr.b	#5,d0
0000BF12 5600                       		addq.b	#3,d0
0000BF14 1140 001A                  		move.b	d0,$1A(a0)
0000BF18                            
0000BF18                            loc_B7FE:				; XREF: Obj31_Index
0000BF18 2268 003C                  		movea.l	$3C(a0),a1
0000BF1C 7000                       		moveq	#0,d0
0000BF1E 1029 0032                  		move.b	$32(a1),d0
0000BF22 D068 0030                  		add.w	$30(a0),d0
0000BF26 3140 000C                  		move.w	d0,$C(a0)
0000BF2A                            
0000BF2A                            Obj31_Display2:				; XREF: Obj31_Index
0000BF2A 6100 0000                  		bsr.w	DisplaySprite
0000BF2E                            
0000BF2E                            Obj31_ChkDel:				; XREF: Obj31_Display
0000BF2E 3028 0008                  		move.w	8(a0),d0
0000BF32 0240 FF80                  		andi.w	#$FF80,d0
0000BF36 3238 F700                  		move.w	($FFFFF700).w,d1
0000BF3A 0441 0080                  		subi.w	#$80,d1
0000BF3E 0241 FF80                  		andi.w	#$FF80,d1
0000BF42 9041                       		sub.w	d1,d0
0000BF44 0C40 0280                  		cmpi.w	#$280,d0
0000BF48 6200 0000                  		bhi.w	DeleteObject
0000BF4C 4E75                       		rts	
0000BF4E                            ; ===========================================================================
0000BF4E                            
0000BF4E                            Obj31_Types:				; XREF: loc_B798
0000BF4E 1028 0028                  		move.b	$28(a0),d0
0000BF52 0240 000F                  		andi.w	#$F,d0
0000BF56 D040                       		add.w	d0,d0
0000BF58 323B 0000                  		move.w	Obj31_TypeIndex(pc,d0.w),d1
0000BF5C 4EFB 1000                  		jmp	Obj31_TypeIndex(pc,d1.w)
0000BF60                            ; ===========================================================================
0000BF60 0000                       Obj31_TypeIndex:dc.w Obj31_Type00-Obj31_TypeIndex
0000BF62 0000                       		dc.w Obj31_Type01-Obj31_TypeIndex
0000BF64 0000                       		dc.w Obj31_Type01-Obj31_TypeIndex
0000BF66 0000                       		dc.w Obj31_Type03-Obj31_TypeIndex
0000BF68 0000                       		dc.w Obj31_Type01-Obj31_TypeIndex
0000BF6A 0000                       		dc.w Obj31_Type03-Obj31_TypeIndex
0000BF6C 0000                       		dc.w Obj31_Type01-Obj31_TypeIndex
0000BF6E                            ; ===========================================================================
0000BF6E                            
0000BF6E                            Obj31_Type00:				; XREF: Obj31_TypeIndex
0000BF6E 45F8 F7E0                  		lea	($FFFFF7E0).w,a2 ; load	switch statuses
0000BF72 7000                       		moveq	#0,d0
0000BF74 1028 003A                  		move.b	$3A(a0),d0	; move number 0	or 1 to	d0
0000BF78 4A32 0000                  		tst.b	(a2,d0.w)	; has switch (d0) been pressed?
0000BF7C 6700                       		beq.s	loc_B8A8	; if not, branch
0000BF7E 4A78 F7A4                  		tst.w	($FFFFF7A4).w
0000BF82 6A00                       		bpl.s	loc_B872
0000BF84 0C28 0010 0032             		cmpi.b	#$10,$32(a0)
0000BF8A 6700                       		beq.s	loc_B8A0
0000BF8C                            
0000BF8C                            loc_B872:
0000BF8C 4A68 0032                  		tst.w	$32(a0)
0000BF90 6700                       		beq.s	loc_B8A0
0000BF92 1038 FE0F                  		move.b	($FFFFFE0F).w,d0
0000BF96 0200 000F                  		andi.b	#$F,d0
0000BF9A 6600                       		bne.s	loc_B892
0000BF9C 4A28 0001                  		tst.b	1(a0)
0000BFA0 6A00                       		bpl.s	loc_B892
0000BFA2 303C 00C7                  		move.w	#$C7,d0
0000BFA6 4EB9 0000 15C0             		jsr	(PlaySound_Special).l ;	play rising chain sound
0000BFAC                            
0000BFAC                            loc_B892:
0000BFAC 0468 0080 0032             		subi.w	#$80,$32(a0)
0000BFB2 6400                       		bcc.s	Obj31_Restart
0000BFB4 317C 0000 0032             		move.w	#0,$32(a0)
0000BFBA                            
0000BFBA                            loc_B8A0:
0000BFBA 317C 0000 0012             		move.w	#0,$12(a0)
0000BFC0 6000                       		bra.s	Obj31_Restart
0000BFC2                            ; ===========================================================================
0000BFC2                            
0000BFC2                            loc_B8A8:				; XREF: Obj31_Type00
0000BFC2 3228 0034                  		move.w	$34(a0),d1
0000BFC6 B268 0032                  		cmp.w	$32(a0),d1
0000BFCA 6700                       		beq.s	Obj31_Restart
0000BFCC 3028 0012                  		move.w	$12(a0),d0
0000BFD0 0668 0070 0012             		addi.w	#$70,$12(a0)	; make object fall
0000BFD6 D168 0032                  		add.w	d0,$32(a0)
0000BFDA B268 0032                  		cmp.w	$32(a0),d1
0000BFDE 6200                       		bhi.s	Obj31_Restart
0000BFE0 3141 0032                  		move.w	d1,$32(a0)
0000BFE4 317C 0000 0012             		move.w	#0,$12(a0)	; stop object falling
0000BFEA 4A28 0001                  		tst.b	1(a0)
0000BFEE 6A00                       		bpl.s	Obj31_Restart
0000BFF0 303C 00BD                  		move.w	#$BD,d0
0000BFF4 4EB9 0000 15C0             		jsr	(PlaySound_Special).l ;	play stomping sound
0000BFFA                            
0000BFFA                            Obj31_Restart:
0000BFFA 7000                       		moveq	#0,d0
0000BFFC 1028 0032                  		move.b	$32(a0),d0
0000C000 D068 0030                  		add.w	$30(a0),d0
0000C004 3140 000C                  		move.w	d0,$C(a0)
0000C008 4E75                       		rts	
0000C00A                            ; ===========================================================================
0000C00A                            
0000C00A                            Obj31_Type01:				; XREF: Obj31_TypeIndex
0000C00A 4A68 0036                  		tst.w	$36(a0)
0000C00E 6700                       		beq.s	loc_B938
0000C010 4A68 0038                  		tst.w	$38(a0)
0000C014 6700                       		beq.s	loc_B902
0000C016 5368 0038                  		subq.w	#1,$38(a0)
0000C01A 6000                       		bra.s	loc_B97C
0000C01C                            ; ===========================================================================
0000C01C                            
0000C01C                            loc_B902:
0000C01C 1038 FE0F                  		move.b	($FFFFFE0F).w,d0
0000C020 0200 000F                  		andi.b	#$F,d0
0000C024 6600                       		bne.s	loc_B91C
0000C026 4A28 0001                  		tst.b	1(a0)
0000C02A 6A00                       		bpl.s	loc_B91C
0000C02C 303C 00C7                  		move.w	#$C7,d0
0000C030 4EB9 0000 15C0             		jsr	(PlaySound_Special).l ;	play rising chain sound
0000C036                            
0000C036                            loc_B91C:
0000C036 0468 0080 0032             		subi.w	#$80,$32(a0)
0000C03C 6400                       		bcc.s	loc_B97C
0000C03E 317C 0000 0032             		move.w	#0,$32(a0)
0000C044 317C 0000 0012             		move.w	#0,$12(a0)
0000C04A 317C 0000 0036             		move.w	#0,$36(a0)
0000C050 6000                       		bra.s	loc_B97C
0000C052                            ; ===========================================================================
0000C052                            
0000C052                            loc_B938:				; XREF: Obj31_Type01
0000C052 3228 0034                  		move.w	$34(a0),d1
0000C056 B268 0032                  		cmp.w	$32(a0),d1
0000C05A 6700                       		beq.s	loc_B97C
0000C05C 3028 0012                  		move.w	$12(a0),d0
0000C060 0668 0070 0012             		addi.w	#$70,$12(a0)	; make object fall
0000C066 D168 0032                  		add.w	d0,$32(a0)
0000C06A B268 0032                  		cmp.w	$32(a0),d1
0000C06E 6200                       		bhi.s	loc_B97C
0000C070 3141 0032                  		move.w	d1,$32(a0)
0000C074 317C 0000 0012             		move.w	#0,$12(a0)	; stop object falling
0000C07A 317C 0001 0036             		move.w	#1,$36(a0)
0000C080 317C 003C 0038             		move.w	#$3C,$38(a0)
0000C086 4A28 0001                  		tst.b	1(a0)
0000C08A 6A00                       		bpl.s	loc_B97C
0000C08C 303C 00BD                  		move.w	#$BD,d0
0000C090 4EB9 0000 15C0             		jsr	(PlaySound_Special).l ;	play stomping sound
0000C096                            
0000C096                            loc_B97C:
0000C096 6000 FF62                  		bra.w	Obj31_Restart
0000C09A                            ; ===========================================================================
0000C09A                            
0000C09A                            Obj31_Type03:				; XREF: Obj31_TypeIndex
0000C09A 3038 D008                  		move.w	($FFFFD008).w,d0
0000C09E 9068 0008                  		sub.w	8(a0),d0
0000C0A2 6400                       		bcc.s	loc_B98C
0000C0A4 4440                       		neg.w	d0
0000C0A6                            
0000C0A6                            loc_B98C:
0000C0A6 0C40 0090                  		cmpi.w	#$90,d0
0000C0AA 6400                       		bcc.s	loc_B996
0000C0AC 5228 0028                  		addq.b	#1,$28(a0)
0000C0B0                            
0000C0B0                            loc_B996:
0000C0B0 6000 FF48                  		bra.w	Obj31_Restart
0000C0B4                            ; ===========================================================================
0000C0B4                            ; ---------------------------------------------------------------------------
0000C0B4                            ; Object 45 - spiked metal block from beta version (MZ)
0000C0B4                            ; ---------------------------------------------------------------------------
0000C0B4                            
0000C0B4                            Obj45:					; XREF: Obj_Index
0000C0B4 7000                       		moveq	#0,d0
0000C0B6 1028 0024                  		move.b	$24(a0),d0
0000C0BA 323B 0000                  		move.w	Obj45_Index(pc,d0.w),d1
0000C0BE 4EFB 1000                  		jmp	Obj45_Index(pc,d1.w)
0000C0C2                            ; ===========================================================================
0000C0C2 0000                       Obj45_Index:	dc.w Obj45_Main-Obj45_Index
0000C0C4 0000                       		dc.w Obj45_Solid-Obj45_Index
0000C0C6 0000                       		dc.w loc_BA8E-Obj45_Index
0000C0C8 0000                       		dc.w Obj45_Display-Obj45_Index
0000C0CA 0000                       		dc.w loc_BA7A-Obj45_Index
0000C0CC                            
0000C0CC 0204 00                    Obj45_Var:	dc.b	2,   4,	  0	; routine number, x-position, frame number
0000C0CF 04E4 01                    		dc.b	4, $E4,	  1
0000C0D2 0834 03                    		dc.b	8, $34,	  3
0000C0D5 0628 02                    		dc.b	6, $28,	  2
0000C0D8                            
0000C0D8 3800                       word_B9BE:	dc.w $3800
0000C0DA A000                       		dc.w -$6000
0000C0DC 5000                       		dc.w $5000
0000C0DE                            ; ===========================================================================
0000C0DE                            
0000C0DE                            Obj45_Main:				; XREF: Obj45_Index
0000C0DE 7000                       		moveq	#0,d0
0000C0E0 1028 0028                  		move.b	$28(a0),d0
0000C0E4 D040                       		add.w	d0,d0
0000C0E6 343B 00F0                  		move.w	word_B9BE(pc,d0.w),d2
0000C0EA 45F9 0000 C0CC             		lea	(Obj45_Var).l,a2
0000C0F0 2248                       		movea.l	a0,a1
0000C0F2 7203                       		moveq	#3,d1
0000C0F4 6000                       		bra.s	Obj45_Load
0000C0F6                            ; ===========================================================================
0000C0F6                            
0000C0F6                            Obj45_Loop:
0000C0F6 6100 0000                  		bsr.w	SingleObjLoad2
0000C0FA 6600                       		bne.s	loc_BA52
0000C0FC                            
0000C0FC                            Obj45_Load:				; XREF: Obj45_Main
0000C0FC 135A 0024                  		move.b	(a2)+,$24(a1)
0000C100 12BC 0045                  		move.b	#$45,0(a1)
0000C104 3368 000C 000C             		move.w	$C(a0),$C(a1)
0000C10A 101A                       		move.b	(a2)+,d0
0000C10C 4880                       		ext.w	d0
0000C10E D068 0008                  		add.w	8(a0),d0
0000C112 3340 0008                  		move.w	d0,8(a1)
0000C116 237C 0000 0000 0004        		move.l	#Map_obj45,4(a1)
0000C11E 337C 0300 0002             		move.w	#$300,2(a1)
0000C124 137C 0004 0001             		move.b	#4,1(a1)
0000C12A 3369 0008 0030             		move.w	8(a1),$30(a1)
0000C130 3368 0008 003A             		move.w	8(a0),$3A(a1)
0000C136 1368 0028 0028             		move.b	$28(a0),$28(a1)
0000C13C 137C 0020 0019             		move.b	#$20,$19(a1)
0000C142 3342 0034                  		move.w	d2,$34(a1)
0000C146 137C 0004 0018             		move.b	#4,$18(a1)
0000C14C 0C12 0001                  		cmpi.b	#1,(a2)
0000C150 6600                       		bne.s	loc_BA40
0000C152 137C 0091 0020             		move.b	#$91,$20(a1)
0000C158                            
0000C158                            loc_BA40:
0000C158 135A 001A                  		move.b	(a2)+,$1A(a1)
0000C15C 2348 003C                  		move.l	a0,$3C(a1)
0000C160 51C9 FF94                  		dbf	d1,Obj45_Loop	; repeat 3 times
0000C164                            
0000C164 137C 0003 0018             		move.b	#3,$18(a1)
0000C16A                            
0000C16A                            loc_BA52:
0000C16A 117C 0010 0019             		move.b	#$10,$19(a0)
0000C170                            
0000C170                            Obj45_Solid:				; XREF: Obj45_Index
0000C170 3F28 0008                  		move.w	8(a0),-(sp)
0000C174 6100 0000                  		bsr.w	Obj45_Move
0000C178 323C 0017                  		move.w	#$17,d1
0000C17C 343C 0020                  		move.w	#$20,d2
0000C180 363C 0020                  		move.w	#$20,d3
0000C184 381F                       		move.w	(sp)+,d4
0000C186 6100 0000                  		bsr.w	SolidObject
0000C18A 6100 0000                  		bsr.w	DisplaySprite
0000C18E 6000 0000                  		bra.w	Obj45_ChkDel
0000C192                            ; ===========================================================================
0000C192                            
0000C192                            loc_BA7A:				; XREF: Obj45_Index
0000C192 2268 003C                  		movea.l	$3C(a0),a1
0000C196 1029 0032                  		move.b	$32(a1),d0
0000C19A 0600 0010                  		addi.b	#$10,d0
0000C19E EA08                       		lsr.b	#5,d0
0000C1A0 5600                       		addq.b	#3,d0
0000C1A2 1140 001A                  		move.b	d0,$1A(a0)
0000C1A6                            
0000C1A6                            loc_BA8E:				; XREF: Obj45_Index
0000C1A6 2268 003C                  		movea.l	$3C(a0),a1
0000C1AA 7000                       		moveq	#0,d0
0000C1AC 1029 0032                  		move.b	$32(a1),d0
0000C1B0 4440                       		neg.w	d0
0000C1B2 D068 0030                  		add.w	$30(a0),d0
0000C1B6 3140 0008                  		move.w	d0,8(a0)
0000C1BA                            
0000C1BA                            Obj45_Display:				; XREF: Obj45_Index
0000C1BA 6100 0000                  		bsr.w	DisplaySprite
0000C1BE                            
0000C1BE                            Obj45_ChkDel:				; XREF: Obj45_Solid
0000C1BE 3028 003A                  		move.w	$3A(a0),d0
0000C1C2 0240 FF80                  		andi.w	#$FF80,d0
0000C1C6 3238 F700                  		move.w	($FFFFF700).w,d1
0000C1CA 0441 0080                  		subi.w	#$80,d1
0000C1CE 0241 FF80                  		andi.w	#$FF80,d1
0000C1D2 9041                       		sub.w	d1,d0
0000C1D4 0C40 0280                  		cmpi.w	#$280,d0
0000C1D8 6200 0000                  		bhi.w	DeleteObject
0000C1DC 4E75                       		rts	
0000C1DE                            
0000C1DE                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000C1DE                            
0000C1DE                            
0000C1DE                            Obj45_Move:				; XREF: Obj45_Solid
0000C1DE 7000                       		moveq	#0,d0
0000C1E0 1028 0028                  		move.b	$28(a0),d0
0000C1E4 D040                       		add.w	d0,d0
0000C1E6 323B 0000                  		move.w	off_BAD6(pc,d0.w),d1
0000C1EA 4EFB 1000                  		jmp	off_BAD6(pc,d1.w)
0000C1EE                            ; End of function Obj45_Move
0000C1EE                            
0000C1EE                            ; ===========================================================================
0000C1EE 0000                       off_BAD6:	dc.w loc_BADA-off_BAD6
0000C1F0 0000                       		dc.w loc_BADA-off_BAD6
0000C1F2                            ; ===========================================================================
0000C1F2                            
0000C1F2                            loc_BADA:				; XREF: off_BAD6
0000C1F2 4A68 0036                  		tst.w	$36(a0)
0000C1F6 6700                       		beq.s	loc_BB08
0000C1F8 4A68 0038                  		tst.w	$38(a0)
0000C1FC 6700                       		beq.s	loc_BAEC
0000C1FE 5368 0038                  		subq.w	#1,$38(a0)
0000C202 6000                       		bra.s	loc_BB3C
0000C204                            ; ===========================================================================
0000C204                            
0000C204                            loc_BAEC:
0000C204 0468 0080 0032             		subi.w	#$80,$32(a0)
0000C20A 6400                       		bcc.s	loc_BB3C
0000C20C 317C 0000 0032             		move.w	#0,$32(a0)
0000C212 317C 0000 0010             		move.w	#0,$10(a0)
0000C218 317C 0000 0036             		move.w	#0,$36(a0)
0000C21E 6000                       		bra.s	loc_BB3C
0000C220                            ; ===========================================================================
0000C220                            
0000C220                            loc_BB08:				; XREF: loc_BADA
0000C220 3228 0034                  		move.w	$34(a0),d1
0000C224 B268 0032                  		cmp.w	$32(a0),d1
0000C228 6700                       		beq.s	loc_BB3C
0000C22A 3028 0010                  		move.w	$10(a0),d0
0000C22E 0668 0070 0010             		addi.w	#$70,$10(a0)
0000C234 D168 0032                  		add.w	d0,$32(a0)
0000C238 B268 0032                  		cmp.w	$32(a0),d1
0000C23C 6200                       		bhi.s	loc_BB3C
0000C23E 3141 0032                  		move.w	d1,$32(a0)
0000C242 317C 0000 0010             		move.w	#0,$10(a0)
0000C248 317C 0001 0036             		move.w	#1,$36(a0)
0000C24E 317C 003C 0038             		move.w	#$3C,$38(a0)
0000C254                            
0000C254                            loc_BB3C:
0000C254 7000                       		moveq	#0,d0
0000C256 1028 0032                  		move.b	$32(a0),d0
0000C25A 4440                       		neg.w	d0
0000C25C D068 0030                  		add.w	$30(a0),d0
0000C260 3140 0008                  		move.w	d0,8(a0)
0000C264 4E75                       		rts	
0000C266                            ; ===========================================================================
0000C266                            ; ---------------------------------------------------------------------------
0000C266                            ; Sprite mappings - metal stomping blocks on chains (MZ)
0000C266                            ; ---------------------------------------------------------------------------
0000C266                            Map_obj31:
0000C266                            	include "_maps\obj31.asm"
0000C266                            ; ---------------------------------------------------------------------------
0000C266                            ; Sprite mappings - metal stomping blocks on chains (MZ)
0000C266                            ; ---------------------------------------------------------------------------
0000C266 0000                       		dc.w byte_BB64-Map_obj31
0000C268 0000                       		dc.w byte_BB7E-Map_obj31
0000C26A 0000                       		dc.w byte_BB98-Map_obj31
0000C26C 0000                       		dc.w byte_BB9E-Map_obj31
0000C26E 0000                       		dc.w byte_BBA9-Map_obj31
0000C270 0000                       		dc.w byte_BBBE-Map_obj31
0000C272 0000                       		dc.w byte_BBDD-Map_obj31
0000C274 0000                       		dc.w byte_BC06-Map_obj31
0000C276 0000                       		dc.w byte_BC06-Map_obj31
0000C278 0000                       		dc.w byte_BC39-Map_obj31
0000C27A 0000                       		dc.w byte_BC53-Map_obj31
0000C27C 05                         byte_BB64:	dc.b 5
0000C27D F406 0000 C8               		dc.b $F4, 6, 0,	0, $C8
0000C282 F40A 0006 D8               		dc.b $F4, $A, 0, 6, $D8
0000C287 EC0F 000F F0               		dc.b $EC, $F, 0, $F, $F0
0000C28C F40A 0806 10               		dc.b $F4, $A, 8, 6, $10
0000C291 F406 0800 28               		dc.b $F4, 6, 8,	0, $28
0000C296 05                         byte_BB7E:	dc.b 5
0000C297 F003 121F D4               		dc.b $F0, 3, $12, $1F, $D4
0000C29C F003 121F E8               		dc.b $F0, 3, $12, $1F, $E8
0000C2A1 F003 121F FC               		dc.b $F0, 3, $12, $1F, $FC
0000C2A6 F003 121F 10               		dc.b $F0, 3, $12, $1F, $10
0000C2AB F003 121F 24               		dc.b $F0, 3, $12, $1F, $24
0000C2B0 01                         byte_BB98:	dc.b 1
0000C2B1 DC0F 100F F0               		dc.b $DC, $F, $10, $F, $F0
0000C2B6 02                         byte_BB9E:	dc.b 2
0000C2B7 0001 003F FC               		dc.b 0,	1, 0, $3F, $FC
0000C2BC 1001 003F FC               		dc.b $10, 1, 0,	$3F, $FC
0000C2C1 04                         byte_BBA9:	dc.b 4
0000C2C2 E001 003F FC               		dc.b $E0, 1, 0,	$3F, $FC
0000C2C7 F001 003F FC               		dc.b $F0, 1, 0,	$3F, $FC
0000C2CC 0001 003F FC               		dc.b 0,	1, 0, $3F, $FC
0000C2D1 1001 003F FC               		dc.b $10, 1, 0,	$3F, $FC
0000C2D6 06                         byte_BBBE:	dc.b 6
0000C2D7 C001 003F FC               		dc.b $C0, 1, 0,	$3F, $FC
0000C2DC D001 003F FC               		dc.b $D0, 1, 0,	$3F, $FC
0000C2E1 E001 003F FC               		dc.b $E0, 1, 0,	$3F, $FC
0000C2E6 F001 003F FC               		dc.b $F0, 1, 0,	$3F, $FC
0000C2EB 0001 003F FC               		dc.b 0,	1, 0, $3F, $FC
0000C2F0 1001 003F FC               		dc.b $10, 1, 0,	$3F, $FC
0000C2F5 08                         byte_BBDD:	dc.b 8
0000C2F6 A001 003F FC               		dc.b $A0, 1, 0,	$3F, $FC
0000C2FB B001 003F FC               		dc.b $B0, 1, 0,	$3F, $FC
0000C300 C001 003F FC               		dc.b $C0, 1, 0,	$3F, $FC
0000C305 D001 003F FC               		dc.b $D0, 1, 0,	$3F, $FC
0000C30A E001 003F FC               		dc.b $E0, 1, 0,	$3F, $FC
0000C30F F001 003F FC               		dc.b $F0, 1, 0,	$3F, $FC
0000C314 0001 003F FC               		dc.b 0,	1, 0, $3F, $FC
0000C319 1001 003F FC               		dc.b $10, 1, 0,	$3F, $FC
0000C31E 0A                         byte_BC06:	dc.b $A
0000C31F 8001 003F FC               		dc.b $80, 1, 0,	$3F, $FC
0000C324 9001 003F FC               		dc.b $90, 1, 0,	$3F, $FC
0000C329 A001 003F FC               		dc.b $A0, 1, 0,	$3F, $FC
0000C32E B001 003F FC               		dc.b $B0, 1, 0,	$3F, $FC
0000C333 C001 003F FC               		dc.b $C0, 1, 0,	$3F, $FC
0000C338 D001 003F FC               		dc.b $D0, 1, 0,	$3F, $FC
0000C33D E001 003F FC               		dc.b $E0, 1, 0,	$3F, $FC
0000C342 F001 003F FC               		dc.b $F0, 1, 0,	$3F, $FC
0000C347 0001 003F FC               		dc.b 0,	1, 0, $3F, $FC
0000C34C 1001 003F FC               		dc.b $10, 1, 0,	$3F, $FC
0000C351 05                         byte_BC39:	dc.b 5
0000C352 F406 0000 D0               		dc.b $F4, 6, 0,	0, $D0
0000C357 F40A 0006 E0               		dc.b $F4, $A, 0, 6, $E0
0000C35C F40A 0806 08               		dc.b $F4, $A, 8, 6, 8
0000C361 F406 0800 20               		dc.b $F4, 6, 8,	0, $20
0000C366 EC0F 000F F0               		dc.b $EC, $F, 0, $F, $F0
0000C36B 01                         byte_BC53:	dc.b 1
0000C36C EC0F 002F F0               		dc.b $EC, $F, 0, $2F, $F0
0000C372 00                         		even
0000C372 00                         		even
0000C372                            
0000C372                            ; ---------------------------------------------------------------------------
0000C372                            ; Sprite mappings - spiked metal block from beta version (MZ)
0000C372                            ; ---------------------------------------------------------------------------
0000C372                            Map_obj45:
0000C372                            	include "_maps\obj45.asm"
0000C372                            ; ---------------------------------------------------------------------------
0000C372                            ; Sprite mappings - spiked metal block from beta version (MZ)
0000C372                            ; ---------------------------------------------------------------------------
0000C372 0000                       		dc.w byte_BC6C-Map_obj45
0000C374 0000                       		dc.w byte_BC7C-Map_obj45
0000C376 0000                       		dc.w byte_BC8C-Map_obj45
0000C378 0000                       		dc.w byte_BC92-Map_obj45
0000C37A 0000                       		dc.w byte_BC9D-Map_obj45
0000C37C 0000                       		dc.w byte_BCB2-Map_obj45
0000C37E 0000                       		dc.w byte_BCD1-Map_obj45
0000C380 0000                       		dc.w byte_BCFA-Map_obj45
0000C382 0000                       		dc.w byte_BCFA-Map_obj45
0000C384 03                         byte_BC6C:	dc.b 3
0000C385 E00B 001F F4               		dc.b $E0, $B, 0, $1F, $F4
0000C38A 000B 101F F4               		dc.b 0,	$B, $10, $1F, $F4
0000C38F F003 002B 0C               		dc.b $F0, 3, 0,	$2B, $C
0000C394 03                         byte_BC7C:	dc.b 3
0000C395 E80C 121B F0               		dc.b $E8, $C, $12, $1B,	$F0
0000C39A FC0C 121B F0               		dc.b $FC, $C, $12, $1B,	$F0
0000C39F 100C 121B F0               		dc.b $10, $C, $12, $1B,	$F0
0000C3A4 01                         byte_BC8C:	dc.b 1
0000C3A5 F003 082B FC               		dc.b $F0, 3, 8,	$2B, $FC
0000C3AA 02                         byte_BC92:	dc.b 2
0000C3AB F805 0041 E0               		dc.b $F8, 5, 0,	$41, $E0
0000C3B0 F805 0041 F0               		dc.b $F8, 5, 0,	$41, $F0
0000C3B5 04                         byte_BC9D:	dc.b 4
0000C3B6 F805 0041 E0               		dc.b $F8, 5, 0,	$41, $E0
0000C3BB F805 0041 F0               		dc.b $F8, 5, 0,	$41, $F0
0000C3C0 F805 0041 00               		dc.b $F8, 5, 0,	$41, 0
0000C3C5 F805 0041 10               		dc.b $F8, 5, 0,	$41, $10
0000C3CA 06                         byte_BCB2:	dc.b 6
0000C3CB F805 0041 E0               		dc.b $F8, 5, 0,	$41, $E0
0000C3D0 F805 0041 F0               		dc.b $F8, 5, 0,	$41, $F0
0000C3D5 F805 0041 00               		dc.b $F8, 5, 0,	$41, 0
0000C3DA F805 0041 10               		dc.b $F8, 5, 0,	$41, $10
0000C3DF F805 0041 20               		dc.b $F8, 5, 0,	$41, $20
0000C3E4 F805 0041 30               		dc.b $F8, 5, 0,	$41, $30
0000C3E9 08                         byte_BCD1:	dc.b 8
0000C3EA F805 0041 E0               		dc.b $F8, 5, 0,	$41, $E0
0000C3EF F805 0041 F0               		dc.b $F8, 5, 0,	$41, $F0
0000C3F4 F805 0041 00               		dc.b $F8, 5, 0,	$41, 0
0000C3F9 F805 0041 10               		dc.b $F8, 5, 0,	$41, $10
0000C3FE F805 0041 20               		dc.b $F8, 5, 0,	$41, $20
0000C403 F805 0041 30               		dc.b $F8, 5, 0,	$41, $30
0000C408 F805 0041 40               		dc.b $F8, 5, 0,	$41, $40
0000C40D F805 0041 50               		dc.b $F8, 5, 0,	$41, $50
0000C412 08                         byte_BCFA:	dc.b 8
0000C413 F805 0041 E0               		dc.b $F8, 5, 0,	$41, $E0
0000C418 F805 0041 F0               		dc.b $F8, 5, 0,	$41, $F0
0000C41D F805 0041 00               		dc.b $F8, 5, 0,	$41, 0
0000C422 F805 0041 10               		dc.b $F8, 5, 0,	$41, $10
0000C427 F805 0041 20               		dc.b $F8, 5, 0,	$41, $20
0000C42C F805 0041 30               		dc.b $F8, 5, 0,	$41, $30
0000C431 F805 0041 40               		dc.b $F8, 5, 0,	$41, $40
0000C436 F805 0041 50               		dc.b $F8, 5, 0,	$41, $50
0000C43B F805 0041 60               		dc.b $F8, 5, 0,	$41, $60
0000C440 F805 0041 70               		dc.b $F8, 5, 0,	$41, $70
0000C446 00                         		even
0000C446 00                         		even
0000C446                            
0000C446                            ; ===========================================================================
0000C446                            ; ---------------------------------------------------------------------------
0000C446                            ; Object 32 - switches (MZ, SYZ, LZ, SBZ)
0000C446                            ; ---------------------------------------------------------------------------
0000C446                            
0000C446                            Obj32:					; XREF: Obj_Index
0000C446 7000                       		moveq	#0,d0
0000C448 1028 0024                  		move.b	$24(a0),d0
0000C44C 323B 0000                  		move.w	Obj32_Index(pc,d0.w),d1
0000C450 4EFB 1000                  		jmp	Obj32_Index(pc,d1.w)
0000C454                            ; ===========================================================================
0000C454 0000                       Obj32_Index:	dc.w Obj32_Main-Obj32_Index
0000C456 0000                       		dc.w Obj32_Pressed-Obj32_Index
0000C458                            ; ===========================================================================
0000C458                            
0000C458                            Obj32_Main:				; XREF: Obj32_Index
0000C458 5428 0024                  		addq.b	#2,$24(a0)
0000C45C 217C 0000 0000 0004        		move.l	#Map_obj32,4(a0)
0000C464 317C 4513 0002             		move.w	#$4513,2(a0)	; MZ specific code
0000C46A 0C38 0002 FE10             		cmpi.b	#2,($FFFFFE10).w
0000C470 6700                       		beq.s	loc_BD60
0000C472 317C 0513 0002             		move.w	#$513,2(a0)	; SYZ, LZ and SBZ specific code
0000C478                            
0000C478                            loc_BD60:
0000C478 117C 0004 0001             		move.b	#4,1(a0)
0000C47E 117C 0010 0019             		move.b	#$10,$19(a0)
0000C484 117C 0004 0018             		move.b	#4,$18(a0)
0000C48A 5668 000C                  		addq.w	#3,$C(a0)
0000C48E                            
0000C48E                            Obj32_Pressed:				; XREF: Obj32_Index
0000C48E 4A28 0001                  		tst.b	1(a0)
0000C492 6A00                       		bpl.s	Obj32_Display
0000C494 323C 001B                  		move.w	#$1B,d1
0000C498 343C 0005                  		move.w	#5,d2
0000C49C 363C 0005                  		move.w	#5,d3
0000C4A0 3828 0008                  		move.w	8(a0),d4
0000C4A4 6100 0000                  		bsr.w	SolidObject
0000C4A8 08A8 0000 001A             		bclr	#0,$1A(a0)	; use "unpressed" frame
0000C4AE 1028 0028                  		move.b	$28(a0),d0
0000C4B2 0240 000F                  		andi.w	#$F,d0
0000C4B6 47F8 F7E0                  		lea	($FFFFF7E0).w,a3
0000C4BA 47F3 0000                  		lea	(a3,d0.w),a3
0000C4BE 7600                       		moveq	#0,d3
0000C4C0 0828 0006 0028             		btst	#6,$28(a0)
0000C4C6 6700                       		beq.s	loc_BDB2
0000C4C8 7607                       		moveq	#7,d3
0000C4CA                            
0000C4CA                            loc_BDB2:
0000C4CA 4A28 0028                  		tst.b	$28(a0)
0000C4CE 6A00                       		bpl.s	loc_BDBE
0000C4D0 6100 0000                  		bsr.w	Obj32_MZBlock
0000C4D4 6600                       		bne.s	loc_BDC8
0000C4D6                            
0000C4D6                            loc_BDBE:
0000C4D6 4A28 0025                  		tst.b	$25(a0)
0000C4DA 6600                       		bne.s	loc_BDC8
0000C4DC 0793                       		bclr	d3,(a3)
0000C4DE 6000                       		bra.s	loc_BDDE
0000C4E0                            ; ===========================================================================
0000C4E0                            
0000C4E0                            loc_BDC8:
0000C4E0 4A13                       		tst.b	(a3)
0000C4E2 6600                       		bne.s	loc_BDD6
0000C4E4 303C 00CD                  		move.w	#$CD,d0
0000C4E8 4EB9 0000 15C0             		jsr	(PlaySound_Special).l ;	play switch sound
0000C4EE                            
0000C4EE                            loc_BDD6:
0000C4EE 07D3                       		bset	d3,(a3)
0000C4F0 08E8 0000 001A             		bset	#0,$1A(a0)	; use "pressed"	frame
0000C4F6                            
0000C4F6                            loc_BDDE:
0000C4F6 0828 0005 0028             		btst	#5,$28(a0)
0000C4FC 6700                       		beq.s	Obj32_Display
0000C4FE 5328 001E                  		subq.b	#1,$1E(a0)
0000C502 6A00                       		bpl.s	Obj32_Display
0000C504 117C 0007 001E             		move.b	#7,$1E(a0)
0000C50A 0868 0001 001A             		bchg	#1,$1A(a0)
0000C510                            
0000C510                            Obj32_Display:
0000C510 6100 0000                  		bsr.w	DisplaySprite
0000C514 3028 0008                  		move.w	8(a0),d0
0000C518 0240 FF80                  		andi.w	#$FF80,d0
0000C51C 3238 F700                  		move.w	($FFFFF700).w,d1
0000C520 0441 0080                  		subi.w	#$80,d1
0000C524 0241 FF80                  		andi.w	#$FF80,d1
0000C528 9041                       		sub.w	d1,d0
0000C52A 0C40 0280                  		cmpi.w	#$280,d0
0000C52E 6200 0000                  		bhi.w	Obj32_Delete
0000C532 4E75                       		rts	
0000C534                            ; ===========================================================================
0000C534                            
0000C534                            Obj32_Delete:
0000C534 6100 0000                  		bsr.w	DeleteObject
0000C538 4E75                       		rts	
0000C53A                            
0000C53A                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000C53A                            
0000C53A                            
0000C53A                            Obj32_MZBlock:				; XREF: Obj32_Pressed
0000C53A 3F03                       		move.w	d3,-(sp)
0000C53C 3428 0008                  		move.w	8(a0),d2
0000C540 3628 000C                  		move.w	$C(a0),d3
0000C544 0442 0010                  		subi.w	#$10,d2
0000C548 5143                       		subq.w	#8,d3
0000C54A 383C 0020                  		move.w	#$20,d4
0000C54E 3A3C 0010                  		move.w	#$10,d5
0000C552 43F8 D800                  		lea	($FFFFD800).w,a1 ; begin checking object RAM
0000C556 3C3C 005F                  		move.w	#$5F,d6
0000C55A                            
0000C55A                            Obj32_MZLoop:
0000C55A 4A29 0001                  		tst.b	1(a1)
0000C55E 6A00                       		bpl.s	loc_BE4E
0000C560 0C11 0033                  		cmpi.b	#$33,(a1)	; is the object	a green	MZ block?
0000C564 6700                       		beq.s	loc_BE5E	; if yes, branch
0000C566                            
0000C566                            loc_BE4E:
0000C566 43E9 0040                  		lea	$40(a1),a1	; check	next object
0000C56A 51CE FFEE                  		dbf	d6,Obj32_MZLoop	; repeat $5F times
0000C56E                            
0000C56E 361F                       		move.w	(sp)+,d3
0000C570 7000                       		moveq	#0,d0
0000C572                            
0000C572                            locret_BE5A:
0000C572 4E75                       		rts	
0000C574                            ; ===========================================================================
0000C574 1010                       Obj32_MZData:	dc.b $10, $10
0000C576                            ; ===========================================================================
0000C576                            
0000C576                            loc_BE5E:				; XREF: Obj32_MZBlock
0000C576 7001                       		moveq	#1,d0
0000C578 0240 003F                  		andi.w	#$3F,d0
0000C57C D040                       		add.w	d0,d0
0000C57E 45FB 00F2                  		lea	Obj32_MZData-2(pc,d0.w),a2
0000C582 121A                       		move.b	(a2)+,d1
0000C584 4881                       		ext.w	d1
0000C586 3029 0008                  		move.w	8(a1),d0
0000C58A 9041                       		sub.w	d1,d0
0000C58C 9042                       		sub.w	d2,d0
0000C58E 6400                       		bcc.s	loc_BE80
0000C590 D241                       		add.w	d1,d1
0000C592 D041                       		add.w	d1,d0
0000C594 6500                       		bcs.s	loc_BE84
0000C596 60CE                       		bra.s	loc_BE4E
0000C598                            ; ===========================================================================
0000C598                            
0000C598                            loc_BE80:
0000C598 B044                       		cmp.w	d4,d0
0000C59A 62CA                       		bhi.s	loc_BE4E
0000C59C                            
0000C59C                            loc_BE84:
0000C59C 121A                       		move.b	(a2)+,d1
0000C59E 4881                       		ext.w	d1
0000C5A0 3029 000C                  		move.w	$C(a1),d0
0000C5A4 9041                       		sub.w	d1,d0
0000C5A6 9043                       		sub.w	d3,d0
0000C5A8 6400                       		bcc.s	loc_BE9A
0000C5AA D241                       		add.w	d1,d1
0000C5AC D041                       		add.w	d1,d0
0000C5AE 6500                       		bcs.s	loc_BE9E
0000C5B0 60B4                       		bra.s	loc_BE4E
0000C5B2                            ; ===========================================================================
0000C5B2                            
0000C5B2                            loc_BE9A:
0000C5B2 B045                       		cmp.w	d5,d0
0000C5B4 62B0                       		bhi.s	loc_BE4E
0000C5B6                            
0000C5B6                            loc_BE9E:
0000C5B6 361F                       		move.w	(sp)+,d3
0000C5B8 7001                       		moveq	#1,d0
0000C5BA 4E75                       		rts	
0000C5BC                            ; End of function Obj32_MZBlock
0000C5BC                            
0000C5BC                            ; ===========================================================================
0000C5BC                            ; ---------------------------------------------------------------------------
0000C5BC                            ; Sprite mappings - switches (MZ, SYZ, LZ, SBZ)
0000C5BC                            ; ---------------------------------------------------------------------------
0000C5BC                            Map_obj32:
0000C5BC                            	include "_maps\obj32.asm"
0000C5BC                            ; ---------------------------------------------------------------------------
0000C5BC                            ; Sprite mappings - switches (MZ, SYZ, LZ, SBZ)
0000C5BC                            ; ---------------------------------------------------------------------------
0000C5BC 0000                       		dc.w byte_BEAC-Map_obj32
0000C5BE 0000                       		dc.w byte_BEB7-Map_obj32
0000C5C0 0000                       		dc.w byte_BEC2-Map_obj32
0000C5C2 0000                       		dc.w byte_BEB7-Map_obj32
0000C5C4 02                         byte_BEAC:	dc.b 2
0000C5C5 F505 0000 F0               		dc.b $F5, 5, 0,	0, $F0
0000C5CA F505 0800 00               		dc.b $F5, 5, 8,	0, 0
0000C5CF 02                         byte_BEB7:	dc.b 2
0000C5D0 F505 0004 F0               		dc.b $F5, 5, 0,	4, $F0
0000C5D5 F505 0804 00               		dc.b $F5, 5, 8,	4, 0
0000C5DA 02                         byte_BEC2:	dc.b 2
0000C5DB F505 FFFC F0               		dc.b $F5, 5, $FF, $FC, $F0
0000C5E0 F505 07FC 00               		dc.b $F5, 5, 7,	$FC, 0
0000C5E5 F805 0000 F8               		dc.b $F8, 5, 0,	0, $F8
0000C5EA                            		even
0000C5EA                            		even
0000C5EA                            
0000C5EA                            ; ===========================================================================
0000C5EA                            ; ---------------------------------------------------------------------------
0000C5EA                            ; Object 33 - pushable blocks (MZ, LZ)
0000C5EA                            ; ---------------------------------------------------------------------------
0000C5EA                            
0000C5EA                            Obj33:					; XREF: Obj_Index
0000C5EA 7000                       		moveq	#0,d0
0000C5EC 1028 0024                  		move.b	$24(a0),d0
0000C5F0 323B 0000                  		move.w	Obj33_Index(pc,d0.w),d1
0000C5F4 4EFB 1000                  		jmp	Obj33_Index(pc,d1.w)
0000C5F8                            ; ===========================================================================
0000C5F8 0000                       Obj33_Index:	dc.w Obj33_Main-Obj33_Index
0000C5FA 0000                       		dc.w loc_BF6E-Obj33_Index
0000C5FC 0000                       		dc.w loc_C02C-Obj33_Index
0000C5FE                            
0000C5FE 1000                       Obj33_Var:	dc.b $10, 0	; object width,	frame number
0000C600 4001                       		dc.b $40, 1
0000C602                            ; ===========================================================================
0000C602                            
0000C602                            Obj33_Main:				; XREF: Obj33_Index
0000C602 5428 0024                  		addq.b	#2,$24(a0)
0000C606 117C 000F 0016             		move.b	#$F,$16(a0)
0000C60C 117C 000F 0017             		move.b	#$F,$17(a0)
0000C612 217C 0000 0000 0004        		move.l	#Map_obj33,4(a0)
0000C61A 317C 42B8 0002             		move.w	#$42B8,2(a0)	; MZ specific code
0000C620 0C38 0001 FE10             		cmpi.b	#1,($FFFFFE10).w
0000C626 6600                       		bne.s	loc_BF16
0000C628 317C 43DE 0002             		move.w	#$43DE,2(a0)	; LZ specific code
0000C62E                            
0000C62E                            loc_BF16:
0000C62E 117C 0004 0001             		move.b	#4,1(a0)
0000C634 117C 0003 0018             		move.b	#3,$18(a0)
0000C63A 3168 0008 0034             		move.w	8(a0),$34(a0)
0000C640 3168 000C 0036             		move.w	$C(a0),$36(a0)
0000C646 7000                       		moveq	#0,d0
0000C648 1028 0028                  		move.b	$28(a0),d0
0000C64C D040                       		add.w	d0,d0
0000C64E 0240 000E                  		andi.w	#$E,d0
0000C652 45FB 00AA                  		lea	Obj33_Var(pc,d0.w),a2
0000C656 115A 0019                  		move.b	(a2)+,$19(a0)
0000C65A 115A 001A                  		move.b	(a2)+,$1A(a0)
0000C65E 4A28 0028                  		tst.b	$28(a0)
0000C662 6700                       		beq.s	Obj33_ChkGone
0000C664 317C C2B8 0002             		move.w	#$C2B8,2(a0)
0000C66A                            
0000C66A                            Obj33_ChkGone:
0000C66A 45F8 FC00                  		lea	($FFFFFC00).w,a2
0000C66E 7000                       		moveq	#0,d0
0000C670 1028 0023                  		move.b	$23(a0),d0
0000C674 6700                       		beq.s	loc_BF6E
0000C676 08B2 0007 0002             		bclr	#7,2(a2,d0.w)
0000C67C 08F2 0000 0002             		bset	#0,2(a2,d0.w)
0000C682 6600 0000                  		bne.w	DeleteObject
0000C686                            
0000C686                            loc_BF6E:				; XREF: Obj33_Index
0000C686 4A28 0032                  		tst.b	$32(a0)
0000C68A 6600 0000                  		bne.w	loc_C046
0000C68E 7200                       		moveq	#0,d1
0000C690 1228 0019                  		move.b	$19(a0),d1
0000C694 0641 000B                  		addi.w	#$B,d1
0000C698 343C 0010                  		move.w	#$10,d2
0000C69C 363C 0011                  		move.w	#$11,d3
0000C6A0 3828 0008                  		move.w	8(a0),d4
0000C6A4 6100 0000                  		bsr.w	loc_C186
0000C6A8 0C78 0200 FE10             		cmpi.w	#$200,($FFFFFE10).w ; is the level MZ act 1?
0000C6AE 6600                       		bne.s	loc_BFC6	; if not, branch
0000C6B0 08A8 0007 0028             		bclr	#7,$28(a0)
0000C6B6 3028 0008                  		move.w	8(a0),d0
0000C6BA 0C40 0A20                  		cmpi.w	#$A20,d0
0000C6BE 6500                       		bcs.s	loc_BFC6
0000C6C0 0C40 0AA1                  		cmpi.w	#$AA1,d0
0000C6C4 6400                       		bcc.s	loc_BFC6
0000C6C6 3038 F7A4                  		move.w	($FFFFF7A4).w,d0
0000C6CA 0440 001C                  		subi.w	#$1C,d0
0000C6CE 3140 000C                  		move.w	d0,$C(a0)
0000C6D2 08F8 0007 F7A4             		bset	#7,($FFFFF7A4).w
0000C6D8 08E8 0007 0028             		bset	#7,$28(a0)
0000C6DE                            
0000C6DE                            loc_BFC6:
0000C6DE 3028 0008                  		move.w	8(a0),d0
0000C6E2 0240 FF80                  		andi.w	#$FF80,d0
0000C6E6 3238 F700                  		move.w	($FFFFF700).w,d1
0000C6EA 0441 0080                  		subi.w	#$80,d1
0000C6EE 0241 FF80                  		andi.w	#$FF80,d1
0000C6F2 9041                       		sub.w	d1,d0
0000C6F4 0C40 0280                  		cmpi.w	#$280,d0
0000C6F8 6200                       		bhi.s	loc_BFE6
0000C6FA 6000 0000                  		bra.w	DisplaySprite
0000C6FE                            ; ===========================================================================
0000C6FE                            
0000C6FE                            loc_BFE6:
0000C6FE 3028 0034                  		move.w	$34(a0),d0
0000C702 0240 FF80                  		andi.w	#$FF80,d0
0000C706 3238 F700                  		move.w	($FFFFF700).w,d1
0000C70A 0441 0080                  		subi.w	#$80,d1
0000C70E 0241 FF80                  		andi.w	#$FF80,d1
0000C712 9041                       		sub.w	d1,d0
0000C714 0C40 0280                  		cmpi.w	#$280,d0
0000C718 6200                       		bhi.s	loc_C016
0000C71A 3168 0034 0008             		move.w	$34(a0),8(a0)
0000C720 3168 0036 000C             		move.w	$36(a0),$C(a0)
0000C726 117C 0004 0024             		move.b	#4,$24(a0)
0000C72C 6000                       		bra.s	loc_C02C
0000C72E                            ; ===========================================================================
0000C72E                            
0000C72E                            loc_C016:
0000C72E 45F8 FC00                  		lea	($FFFFFC00).w,a2
0000C732 7000                       		moveq	#0,d0
0000C734 1028 0023                  		move.b	$23(a0),d0
0000C738 6700                       		beq.s	loc_C028
0000C73A 08B2 0000 0002             		bclr	#0,2(a2,d0.w)
0000C740                            
0000C740                            loc_C028:
0000C740 6000 0000                  		bra.w	DeleteObject
0000C744                            ; ===========================================================================
0000C744                            
0000C744                            loc_C02C:				; XREF: Obj33_Index
0000C744 6100 0000                  		bsr.w	ChkObjOnScreen2
0000C748 6700                       		beq.s	locret_C044
0000C74A 117C 0002 0024             		move.b	#2,$24(a0)
0000C750 4228 0032                  		clr.b	$32(a0)
0000C754 4268 0010                  		clr.w	$10(a0)
0000C758 4268 0012                  		clr.w	$12(a0)
0000C75C                            
0000C75C                            locret_C044:
0000C75C 4E75                       		rts	
0000C75E                            ; ===========================================================================
0000C75E                            
0000C75E                            loc_C046:				; XREF: loc_BF6E
0000C75E 3F28 0008                  		move.w	8(a0),-(sp)
0000C762 0C28 0004 0025             		cmpi.b	#4,$25(a0)
0000C768 6400                       		bcc.s	loc_C056
0000C76A 6100 0000                  		bsr.w	SpeedToPos
0000C76E                            
0000C76E                            loc_C056:
0000C76E 0828 0001 0022             		btst	#1,$22(a0)
0000C774 6700                       		beq.s	loc_C0A0
0000C776 0668 0018 0012             		addi.w	#$18,$12(a0)
0000C77C 4EB9 0000 0000             		jsr	ObjHitFloor
0000C782 4A41                       		tst.w	d1
0000C784 6A00 0000                  		bpl.w	loc_C09E
0000C788 D368 000C                  		add.w	d1,$C(a0)
0000C78C 4268 0012                  		clr.w	$12(a0)
0000C790 08A8 0001 0022             		bclr	#1,$22(a0)
0000C796 3011                       		move.w	(a1),d0
0000C798 0240 03FF                  		andi.w	#$3FF,d0
0000C79C 0C40 016A                  		cmpi.w	#$16A,d0
0000C7A0 6500                       		bcs.s	loc_C09E
0000C7A2 3028 0030                  		move.w	$30(a0),d0
0000C7A6 E640                       		asr.w	#3,d0
0000C7A8 3140 0010                  		move.w	d0,$10(a0)
0000C7AC 117C 0001 0032             		move.b	#1,$32(a0)
0000C7B2 4268 000E                  		clr.w	$E(a0)
0000C7B6                            
0000C7B6                            loc_C09E:
0000C7B6 6000                       		bra.s	loc_C0E6
0000C7B8                            ; ===========================================================================
0000C7B8                            
0000C7B8                            loc_C0A0:
0000C7B8 4A68 0010                  		tst.w	$10(a0)
0000C7BC 6700 0000                  		beq.w	loc_C0D6
0000C7C0 6B00                       		bmi.s	loc_C0BC
0000C7C2 7600                       		moveq	#0,d3
0000C7C4 1628 0019                  		move.b	$19(a0),d3
0000C7C8 4EB9 0000 0000             		jsr	ObjHitWallRight
0000C7CE 4A41                       		tst.w	d1		; has block touched a wall?
0000C7D0 6B00                       		bmi.s	Obj33_StopPush	; if yes, branch
0000C7D2 6000                       		bra.s	loc_C0E6
0000C7D4                            ; ===========================================================================
0000C7D4                            
0000C7D4                            loc_C0BC:
0000C7D4 7600                       		moveq	#0,d3
0000C7D6 1628 0019                  		move.b	$19(a0),d3
0000C7DA 4643                       		not.w	d3
0000C7DC 4EB9 0000 0000             		jsr	ObjHitWallLeft
0000C7E2 4A41                       		tst.w	d1		; has block touched a wall?
0000C7E4 6B00                       		bmi.s	Obj33_StopPush	; if yes, branch
0000C7E6 6000                       		bra.s	loc_C0E6
0000C7E8                            ; ===========================================================================
0000C7E8                            
0000C7E8                            Obj33_StopPush:
0000C7E8 4268 0010                  		clr.w	$10(a0)		; stop block moving
0000C7EC 6000                       		bra.s	loc_C0E6
0000C7EE                            ; ===========================================================================
0000C7EE                            
0000C7EE                            loc_C0D6:
0000C7EE 06A8 0000 2001 000C        		addi.l	#$2001,$C(a0)
0000C7F6 0C28 00A0 000F             		cmpi.b	#-$60,$F(a0)
0000C7FC 6400                       		bcc.s	loc_C104
0000C7FE                            
0000C7FE                            loc_C0E6:
0000C7FE 7200                       		moveq	#0,d1
0000C800 1228 0019                  		move.b	$19(a0),d1
0000C804 0641 000B                  		addi.w	#$B,d1
0000C808 343C 0010                  		move.w	#$10,d2
0000C80C 363C 0011                  		move.w	#$11,d3
0000C810 381F                       		move.w	(sp)+,d4
0000C812 6100 0000                  		bsr.w	loc_C186
0000C816 6100                       		bsr.s	Obj33_ChkLava
0000C818 6000 FEC4                  		bra.w	loc_BFC6
0000C81C                            ; ===========================================================================
0000C81C                            
0000C81C                            loc_C104:
0000C81C 381F                       		move.w	(sp)+,d4
0000C81E 43F8 D000                  		lea	($FFFFD000).w,a1
0000C822 08A9 0003 0022             		bclr	#3,$22(a1)
0000C828 08A8 0003 0022             		bclr	#3,$22(a0)
0000C82E 6000 FECE                  		bra.w	loc_BFE6
0000C832                            ; ===========================================================================
0000C832                            
0000C832                            Obj33_ChkLava:
0000C832 0C78 0201 FE10             		cmpi.w	#$201,($FFFFFE10).w ; is the level MZ act 2?
0000C838 6600                       		bne.s	Obj33_ChkLava2	; if not, branch
0000C83A 343C FFE0                  		move.w	#-$20,d2
0000C83E 0C68 0DD0 0008             		cmpi.w	#$DD0,8(a0)
0000C844 6700                       		beq.s	Obj33_LoadLava
0000C846 0C68 0CC0 0008             		cmpi.w	#$CC0,8(a0)
0000C84C 6700                       		beq.s	Obj33_LoadLava
0000C84E 0C68 0BA0 0008             		cmpi.w	#$BA0,8(a0)
0000C854 6700                       		beq.s	Obj33_LoadLava
0000C856 4E75                       		rts	
0000C858                            ; ===========================================================================
0000C858                            
0000C858                            Obj33_ChkLava2:
0000C858 0C78 0202 FE10             		cmpi.w	#$202,($FFFFFE10).w ; is the level MZ act 3?
0000C85E 6600                       		bne.s	Obj33_NoLava	; if not, branch
0000C860 343C 0020                  		move.w	#$20,d2
0000C864 0C68 0560 0008             		cmpi.w	#$560,8(a0)
0000C86A 6700                       		beq.s	Obj33_LoadLava
0000C86C 0C68 05C0 0008             		cmpi.w	#$5C0,8(a0)
0000C872 6700                       		beq.s	Obj33_LoadLava
0000C874                            
0000C874                            Obj33_NoLava:
0000C874 4E75                       		rts	
0000C876                            ; ===========================================================================
0000C876                            
0000C876                            Obj33_LoadLava:
0000C876 6100 0000                  		bsr.w	SingleObjLoad
0000C87A 6600                       		bne.s	locret_C184
0000C87C 12BC 004C                  		move.b	#$4C,0(a1)	; load lava geyser object
0000C880 3368 0008 0008             		move.w	8(a0),8(a1)
0000C886 D569 0008                  		add.w	d2,8(a1)
0000C88A 3368 000C 000C             		move.w	$C(a0),$C(a1)
0000C890 0669 0010 000C             		addi.w	#$10,$C(a1)
0000C896 2348 003C                  		move.l	a0,$3C(a1)
0000C89A                            
0000C89A                            locret_C184:
0000C89A 4E75                       		rts	
0000C89C                            ; ===========================================================================
0000C89C                            
0000C89C                            loc_C186:				; XREF: loc_BF6E
0000C89C 1028 0025                  		move.b	$25(a0),d0
0000C8A0 6700 0000                  		beq.w	loc_C218
0000C8A4 5500                       		subq.b	#2,d0
0000C8A6 6600                       		bne.s	loc_C1AA
0000C8A8 6100 B312                  		bsr.w	ExitPlatform
0000C8AC 0829 0003 0022             		btst	#3,$22(a1)
0000C8B2 6600                       		bne.s	loc_C1A4
0000C8B4 4228 0025                  		clr.b	$25(a0)
0000C8B8 4E75                       		rts	
0000C8BA                            ; ===========================================================================
0000C8BA                            
0000C8BA                            loc_C1A4:
0000C8BA 3404                       		move.w	d4,d2
0000C8BC 6000 B85C                  		bra.w	MvSonicOnPtfm
0000C8C0                            ; ===========================================================================
0000C8C0                            
0000C8C0                            loc_C1AA:
0000C8C0 5500                       		subq.b	#2,d0
0000C8C2 6600                       		bne.s	loc_C1F2
0000C8C4 6100 0000                  		bsr.w	SpeedToPos
0000C8C8 0668 0018 0012             		addi.w	#$18,$12(a0)
0000C8CE 4EB9 0000 0000             		jsr	ObjHitFloor
0000C8D4 4A41                       		tst.w	d1
0000C8D6 6A00 0000                  		bpl.w	locret_C1F0
0000C8DA D368 000C                  		add.w	d1,$C(a0)
0000C8DE 4268 0012                  		clr.w	$12(a0)
0000C8E2 4228 0025                  		clr.b	$25(a0)
0000C8E6 3011                       		move.w	(a1),d0
0000C8E8 0240 03FF                  		andi.w	#$3FF,d0
0000C8EC 0C40 016A                  		cmpi.w	#$16A,d0
0000C8F0 6500                       		bcs.s	locret_C1F0
0000C8F2 3028 0030                  		move.w	$30(a0),d0
0000C8F6 E640                       		asr.w	#3,d0
0000C8F8 3140 0010                  		move.w	d0,$10(a0)
0000C8FC 117C 0001 0032             		move.b	#1,$32(a0)
0000C902 4268 000E                  		clr.w	$E(a0)
0000C906                            
0000C906                            locret_C1F0:
0000C906 4E75                       		rts	
0000C908                            ; ===========================================================================
0000C908                            
0000C908                            loc_C1F2:
0000C908 6100 0000                  		bsr.w	SpeedToPos
0000C90C 3028 0008                  		move.w	8(a0),d0
0000C910 0240 000C                  		andi.w	#$C,d0
0000C914 6600 0000                  		bne.w	locret_C2E4
0000C918 0268 FFF0 0008             		andi.w	#-$10,8(a0)
0000C91E 3168 0010 0030             		move.w	$10(a0),$30(a0)
0000C924 4268 0010                  		clr.w	$10(a0)
0000C928 5528 0025                  		subq.b	#2,$25(a0)
0000C92C 4E75                       		rts	
0000C92E                            ; ===========================================================================
0000C92E                            
0000C92E                            loc_C218:
0000C92E 6100 0000                  		bsr.w	loc_FAC8
0000C932 4A44                       		tst.w	d4
0000C934 6700 0000                  		beq.w	locret_C2E4
0000C938 6B00 0000                  		bmi.w	locret_C2E4
0000C93C 4A28 0032                  		tst.b	$32(a0)
0000C940 6700                       		beq.s	loc_C230
0000C942 6000 0000                  		bra.w	locret_C2E4
0000C946                            ; ===========================================================================
0000C946                            
0000C946                            loc_C230:
0000C946 4A40                       		tst.w	d0
0000C948 6700 0000                  		beq.w	locret_C2E4
0000C94C 6B00                       		bmi.s	loc_C268
0000C94E 0829 0000 0022             		btst	#0,$22(a1)
0000C954 6600 0000                  		bne.w	locret_C2E4
0000C958 3F00                       		move.w	d0,-(sp)
0000C95A 7600                       		moveq	#0,d3
0000C95C 1628 0019                  		move.b	$19(a0),d3
0000C960 4EB9 0000 0000             		jsr	ObjHitWallRight
0000C966 301F                       		move.w	(sp)+,d0
0000C968 4A41                       		tst.w	d1
0000C96A 6B00 0000                  		bmi.w	locret_C2E4
0000C96E 06A8 0001 0000 0008        		addi.l	#$10000,8(a0)
0000C976 7001                       		moveq	#1,d0
0000C978 323C 0040                  		move.w	#$40,d1
0000C97C 6000                       		bra.s	loc_C294
0000C97E                            ; ===========================================================================
0000C97E                            
0000C97E                            loc_C268:
0000C97E 0829 0000 0022             		btst	#0,$22(a1)
0000C984 6700                       		beq.s	locret_C2E4
0000C986 3F00                       		move.w	d0,-(sp)
0000C988 7600                       		moveq	#0,d3
0000C98A 1628 0019                  		move.b	$19(a0),d3
0000C98E 4643                       		not.w	d3
0000C990 4EB9 0000 0000             		jsr	ObjHitWallLeft
0000C996 301F                       		move.w	(sp)+,d0
0000C998 4A41                       		tst.w	d1
0000C99A 6B00                       		bmi.s	locret_C2E4
0000C99C 04A8 0001 0000 0008        		subi.l	#$10000,8(a0)
0000C9A4 70FF                       		moveq	#-1,d0
0000C9A6 323C FFC0                  		move.w	#-$40,d1
0000C9AA                            
0000C9AA                            loc_C294:
0000C9AA 43F8 D000                  		lea	($FFFFD000).w,a1
0000C9AE D169 0008                  		add.w	d0,8(a1)
0000C9B2 3341 0014                  		move.w	d1,$14(a1)
0000C9B6 337C 0000 0010             		move.w	#0,$10(a1)
0000C9BC 3F00                       		move.w	d0,-(sp)
0000C9BE 303C 00A7                  		move.w	#$A7,d0
0000C9C2 4EB9 0000 15C0             		jsr	(PlaySound_Special).l ;	play pushing sound
0000C9C8 301F                       		move.w	(sp)+,d0
0000C9CA 4A28 0028                  		tst.b	$28(a0)
0000C9CE 6B00                       		bmi.s	locret_C2E4
0000C9D0 3F00                       		move.w	d0,-(sp)
0000C9D2 4EB9 0000 0000             		jsr	ObjHitFloor
0000C9D8 301F                       		move.w	(sp)+,d0
0000C9DA 0C41 0004                  		cmpi.w	#4,d1
0000C9DE 6F00                       		ble.s	loc_C2E0
0000C9E0 317C 0400 0010             		move.w	#$400,$10(a0)
0000C9E6 4A40                       		tst.w	d0
0000C9E8 6A00                       		bpl.s	loc_C2D8
0000C9EA 4468 0010                  		neg.w	$10(a0)
0000C9EE                            
0000C9EE                            loc_C2D8:
0000C9EE 117C 0006 0025             		move.b	#6,$25(a0)
0000C9F4 6000                       		bra.s	locret_C2E4
0000C9F6                            ; ===========================================================================
0000C9F6                            
0000C9F6                            loc_C2E0:
0000C9F6 D368 000C                  		add.w	d1,$C(a0)
0000C9FA                            
0000C9FA                            locret_C2E4:
0000C9FA 4E75                       		rts	
0000C9FC                            ; ===========================================================================
0000C9FC                            ; ---------------------------------------------------------------------------
0000C9FC                            ; Sprite mappings - pushable blocks (MZ, LZ)
0000C9FC                            ; ---------------------------------------------------------------------------
0000C9FC                            Map_obj33:
0000C9FC                            	include "_maps\obj33.asm"
0000C9FC                            ; ---------------------------------------------------------------------------
0000C9FC                            ; Sprite mappings - pushable blocks (MZ, LZ)
0000C9FC                            ; ---------------------------------------------------------------------------
0000C9FC 0000                       		dc.w byte_C2EA-Map_obj33
0000C9FE 0000                       		dc.w byte_C2F0-Map_obj33
0000CA00 01                         byte_C2EA:	dc.b 1
0000CA01 F00F 0008 F0               		dc.b $F0, $F, 0, 8, $F0	; single block
0000CA06 04                         byte_C2F0:	dc.b 4
0000CA07 F00F 0008 C0               		dc.b $F0, $F, 0, 8, $C0	; row of 4 blocks
0000CA0C F00F 0008 E0               		dc.b $F0, $F, 0, 8, $E0
0000CA11 F00F 0008 00               		dc.b $F0, $F, 0, 8, 0
0000CA16 F00F 0008 20               		dc.b $F0, $F, 0, 8, $20
0000CA1C 00                         		even
0000CA1C 00                         		even
0000CA1C                            
0000CA1C                            ; ===========================================================================
0000CA1C                            ; ---------------------------------------------------------------------------
0000CA1C                            ; Object 34 - zone title cards
0000CA1C                            ; ---------------------------------------------------------------------------
0000CA1C                            
0000CA1C                            Obj34:					; XREF: Obj_Index
0000CA1C 7000                       		moveq	#0,d0
0000CA1E 1028 0024                  		move.b	$24(a0),d0
0000CA22 323B 0000                  		move.w	Obj34_Index(pc,d0.w),d1
0000CA26 4EFB 1000                  		jmp	Obj34_Index(pc,d1.w)
0000CA2A                            ; ===========================================================================
0000CA2A 0000                       Obj34_Index:	dc.w Obj34_CheckSBZ3-Obj34_Index
0000CA2C 0000                       		dc.w Obj34_ChkPos-Obj34_Index
0000CA2E 0000                       		dc.w Obj34_Wait-Obj34_Index
0000CA30 0000                       		dc.w Obj34_Wait-Obj34_Index
0000CA32                            ; ===========================================================================
0000CA32                            
0000CA32                            Obj34_CheckSBZ3:			; XREF: Obj34_Index
0000CA32 2248                       		movea.l	a0,a1
0000CA34 7000                       		moveq	#0,d0
0000CA36 1038 FE10                  		move.b	($FFFFFE10).w,d0
0000CA3A 0C78 0103 FE10             		cmpi.w	#$103,($FFFFFE10).w ; check if level is	SBZ 3
0000CA40 6600                       		bne.s	Obj34_CheckFZ
0000CA42 7005                       		moveq	#5,d0		; load title card number 5 (SBZ)
0000CA44                            
0000CA44                            Obj34_CheckFZ:
0000CA44 3400                       		move.w	d0,d2
0000CA46 0C78 0502 FE10             		cmpi.w	#$502,($FFFFFE10).w ; check if level is	FZ
0000CA4C 6600                       		bne.s	Obj34_LoadConfig
0000CA4E 7006                       		moveq	#6,d0		; load title card number 6 (FZ)
0000CA50 740B                       		moveq	#$B,d2		; use "FINAL" mappings
0000CA52                            
0000CA52                            Obj34_LoadConfig:
0000CA52 47F9 0000 0000             		lea	(Obj34_ConData).l,a3
0000CA58 E948                       		lsl.w	#4,d0
0000CA5A D6C0                       		adda.w	d0,a3
0000CA5C 45F9 0000 0000             		lea	(Obj34_ItemData).l,a2
0000CA62 7203                       		moveq	#3,d1
0000CA64                            
0000CA64                            Obj34_Loop:
0000CA64 12BC 0034                  		move.b	#$34,0(a1)
0000CA68 3353 0008                  		move.w	(a3),8(a1)	; load start x-position
0000CA6C 335B 0032                  		move.w	(a3)+,$32(a1)	; load finish x-position (same as start)
0000CA70 335B 0030                  		move.w	(a3)+,$30(a1)	; load main x-position
0000CA74 335A 000A                  		move.w	(a2)+,$A(a1)
0000CA78 135A 0024                  		move.b	(a2)+,$24(a1)
0000CA7C 101A                       		move.b	(a2)+,d0
0000CA7E 6600                       		bne.s	Obj34_ActNumber
0000CA80 1002                       		move.b	d2,d0
0000CA82                            
0000CA82                            Obj34_ActNumber:
0000CA82 0C00 0007                  		cmpi.b	#7,d0
0000CA86 6600                       		bne.s	Obj34_MakeSprite
0000CA88 D038 FE11                  		add.b	($FFFFFE11).w,d0
0000CA8C 0C38 0003 FE11             		cmpi.b	#3,($FFFFFE11).w
0000CA92 6600                       		bne.s	Obj34_MakeSprite
0000CA94 5300                       		subq.b	#1,d0
0000CA96                            
0000CA96                            Obj34_MakeSprite:
0000CA96 1340 001A                  		move.b	d0,$1A(a1)	; display frame	number d0
0000CA9A 237C 0000 0000 0004        		move.l	#Map_obj34,4(a1)
0000CAA2 337C 8580 0002             		move.w	#$8580,2(a1)
0000CAA8 137C 0078 0019             		move.b	#$78,$19(a1)
0000CAAE 137C 0000 0001             		move.b	#0,1(a1)
0000CAB4 137C 0000 0018             		move.b	#0,$18(a1)
0000CABA 337C 003C 001E             		move.w	#60,$1E(a1)	; set time delay to 1 second
0000CAC0 43E9 0040                  		lea	$40(a1),a1	; next object
0000CAC4 51C9 FF9E                  		dbf	d1,Obj34_Loop	; repeat sequence another 3 times
0000CAC8                            
0000CAC8                            Obj34_ChkPos:				; XREF: Obj34_Index
0000CAC8 7210                       		moveq	#$10,d1		; set horizontal speed
0000CACA 3028 0030                  		move.w	$30(a0),d0
0000CACE B068 0008                  		cmp.w	8(a0),d0	; has item reached the target position?
0000CAD2 6700                       		beq.s	loc_C3C8	; if yes, branch
0000CAD4 6C00                       		bge.s	Obj34_Move
0000CAD6 4441                       		neg.w	d1
0000CAD8                            
0000CAD8                            Obj34_Move:
0000CAD8 D368 0008                  		add.w	d1,8(a0)	; change item's position
0000CADC                            
0000CADC                            loc_C3C8:
0000CADC 3028 0008                  		move.w	8(a0),d0
0000CAE0 6B00                       		bmi.s	locret_C3D8
0000CAE2 0C40 0200                  		cmpi.w	#$200,d0	; has item moved beyond	$200 on	x-axis?
0000CAE6 6400                       		bcc.s	locret_C3D8	; if yes, branch
0000CAE8 6000 0000                  		bra.w	DisplaySprite
0000CAEC                            ; ===========================================================================
0000CAEC                            
0000CAEC                            locret_C3D8:
0000CAEC 4E75                       		rts	
0000CAEE                            ; ===========================================================================
0000CAEE                            
0000CAEE                            Obj34_Wait:				; XREF: Obj34_Index
0000CAEE 4A68 001E                  		tst.w	$1E(a0)		; is time remaining zero?
0000CAF2 6700                       		beq.s	Obj34_ChkPos2	; if yes, branch
0000CAF4 5368 001E                  		subq.w	#1,$1E(a0)	; subtract 1 from time
0000CAF8 6000 0000                  		bra.w	DisplaySprite
0000CAFC                            ; ===========================================================================
0000CAFC                            
0000CAFC                            Obj34_ChkPos2:				; XREF: Obj34_Wait
0000CAFC 4A28 0001                  		tst.b	1(a0)
0000CB00 6A00                       		bpl.s	Obj34_ChangeArt
0000CB02 7220                       		moveq	#$20,d1
0000CB04 3028 0032                  		move.w	$32(a0),d0
0000CB08 B068 0008                  		cmp.w	8(a0),d0	; has item reached the finish position?
0000CB0C 6700                       		beq.s	Obj34_ChangeArt	; if yes, branch
0000CB0E 6C00                       		bge.s	Obj34_Move2
0000CB10 4441                       		neg.w	d1
0000CB12                            
0000CB12                            Obj34_Move2:
0000CB12 D368 0008                  		add.w	d1,8(a0)	; change item's position
0000CB16 3028 0008                  		move.w	8(a0),d0
0000CB1A 6B00                       		bmi.s	locret_C412
0000CB1C 0C40 0200                  		cmpi.w	#$200,d0	; has item moved beyond	$200 on	x-axis?
0000CB20 6400                       		bcc.s	locret_C412	; if yes, branch
0000CB22 6000 0000                  		bra.w	DisplaySprite
0000CB26                            ; ===========================================================================
0000CB26                            
0000CB26                            locret_C412:
0000CB26 4E75                       		rts	
0000CB28                            ; ===========================================================================
0000CB28                            
0000CB28                            Obj34_ChangeArt:			; XREF: Obj34_ChkPos2
0000CB28 0C28 0004 0024             		cmpi.b	#4,$24(a0)
0000CB2E 6600                       		bne.s	Obj34_Delete
0000CB30 7002                       		moveq	#2,d0
0000CB32 4EB9 0000 17A4             		jsr	(LoadPLC).l	; load explosion patterns
0000CB38 7000                       		moveq	#0,d0
0000CB3A 1038 FE10                  		move.b	($FFFFFE10).w,d0
0000CB3E 0640 0015                  		addi.w	#$15,d0
0000CB42 4EB9 0000 17A4             		jsr	(LoadPLC).l	; load animal patterns
0000CB48                            
0000CB48                            Obj34_Delete:
0000CB48 6000 0000                  		bra.w	DeleteObject
0000CB4C                            ; ===========================================================================
0000CB4C 00D0                       Obj34_ItemData:	dc.w $D0	; y-axis position
0000CB4E 0200                       		dc.b 2,	0	; routine number, frame	number (changes)
0000CB50 00E4                       		dc.w $E4
0000CB52 0206                       		dc.b 2,	6
0000CB54 00EA                       		dc.w $EA
0000CB56 0207                       		dc.b 2,	7
0000CB58 00E0                       		dc.w $E0
0000CB5A 020A                       		dc.b 2,	$A
0000CB5C                            ; ---------------------------------------------------------------------------
0000CB5C                            ; Title	card configuration data
0000CB5C                            ; Format:
0000CB5C                            ; 4 bytes per item (YYYY XXXX)
0000CB5C                            ; 4 items per level (GREEN HILL, ZONE, ACT X, oval)
0000CB5C                            ; ---------------------------------------------------------------------------
0000CB5C 0000 0120 FEFC 013C 0414+  Obj34_ConData:	dc.w 0,	$120, $FEFC, $13C, $414, $154, $214, $154 ; GHZ
0000CB6C 0000 0120 FEF4 0134 040C+  		dc.w 0,	$120, $FEF4, $134, $40C, $14C, $20C, $14C ; LZ
0000CB7C 0000 0120 FEE0 0120 03F8+  		dc.w 0,	$120, $FEE0, $120, $3F8, $138, $1F8, $138 ; MZ
0000CB8C 0000 0120 FEFC 013C 0414+  		dc.w 0,	$120, $FEFC, $13C, $414, $154, $214, $154 ; SLZ
0000CB9C 0000 0120 FF04 0144 041C+  		dc.w 0,	$120, $FF04, $144, $41C, $15C, $21C, $15C ; SYZ
0000CBAC 0000 0120 FF04 0144 041C+  		dc.w 0,	$120, $FF04, $144, $41C, $15C, $21C, $15C ; SBZ
0000CBBC 0000 0120 FEE4 0124 03EC+  		dc.w 0,	$120, $FEE4, $124, $3EC, $3EC, $1EC, $12C ; FZ
0000CBCC                            ; ===========================================================================
0000CBCC                            ; ---------------------------------------------------------------------------
0000CBCC                            ; Object 39 - "GAME OVER" and "TIME OVER"
0000CBCC                            ; ---------------------------------------------------------------------------
0000CBCC                            
0000CBCC                            Obj39:					; XREF: Obj_Index
0000CBCC 7000                       		moveq	#0,d0
0000CBCE 1028 0024                  		move.b	$24(a0),d0
0000CBD2 323B 0000                  		move.w	Obj39_Index(pc,d0.w),d1
0000CBD6 4EFB 1000                  		jmp	Obj39_Index(pc,d1.w)
0000CBDA                            ; ===========================================================================
0000CBDA 0000                       Obj39_Index:	dc.w Obj39_ChkPLC-Obj39_Index
0000CBDC 0000                       		dc.w loc_C50C-Obj39_Index
0000CBDE 0000                       		dc.w Obj39_Wait-Obj39_Index
0000CBE0                            ; ===========================================================================
0000CBE0                            
0000CBE0                            Obj39_ChkPLC:				; XREF: Obj39_Index
0000CBE0 4AB8 F680                  		tst.l	($FFFFF680).w	; are the pattern load cues empty?
0000CBE4 6700                       		beq.s	Obj39_Main	; if yes, branch
0000CBE6 4E75                       		rts	
0000CBE8                            ; ===========================================================================
0000CBE8                            
0000CBE8                            Obj39_Main:
0000CBE8 5428 0024                  		addq.b	#2,$24(a0)
0000CBEC 317C 0050 0008             		move.w	#$50,8(a0)	; set x-position
0000CBF2 0828 0000 001A             		btst	#0,$1A(a0)	; is the object	"OVER"?
0000CBF8 6700                       		beq.s	loc_C4EC	; if not, branch
0000CBFA 317C 01F0 0008             		move.w	#$1F0,8(a0)	; set x-position for "OVER"
0000CC00                            
0000CC00                            loc_C4EC:
0000CC00 317C 00F0 000A             		move.w	#$F0,$A(a0)
0000CC06 217C 0000 0000 0004        		move.l	#Map_obj39,4(a0)
0000CC0E 317C 855E 0002             		move.w	#$855E,2(a0)
0000CC14 117C 0000 0001             		move.b	#0,1(a0)
0000CC1A 117C 0000 0018             		move.b	#0,$18(a0)
0000CC20                            
0000CC20                            loc_C50C:				; XREF: Obj39_Index
0000CC20 7210                       		moveq	#$10,d1		; set horizontal speed
0000CC22 0C68 0120 0008             		cmpi.w	#$120,8(a0)	; has item reached its target position?
0000CC28 6700                       		beq.s	Obj39_SetWait	; if yes, branch
0000CC2A 6500                       		bcs.s	Obj39_Move
0000CC2C 4441                       		neg.w	d1
0000CC2E                            
0000CC2E                            Obj39_Move:
0000CC2E D368 0008                  		add.w	d1,8(a0)	; change item's position
0000CC32 6000 0000                  		bra.w	DisplaySprite
0000CC36                            ; ===========================================================================
0000CC36                            
0000CC36                            Obj39_SetWait:				; XREF: Obj39_Main
0000CC36 317C 02D0 001E             		move.w	#720,$1E(a0)	; set time delay to 12 seconds
0000CC3C 5428 0024                  		addq.b	#2,$24(a0)
0000CC40 4E75                       		rts	
0000CC42                            ; ===========================================================================
0000CC42                            
0000CC42                            Obj39_Wait:				; XREF: Obj39_Index
0000CC42 1038 F605                  		move.b	($FFFFF605).w,d0
0000CC46 0200 0070                  		andi.b	#$70,d0		; is button A, B or C pressed?
0000CC4A 6600                       		bne.s	Obj39_ChgMode	; if yes, branch
0000CC4C 0828 0000 001A             		btst	#0,$1A(a0)
0000CC52 6600                       		bne.s	Obj39_Display
0000CC54 4A68 001E                  		tst.w	$1E(a0)		; has time delay reached zero?
0000CC58 6700                       		beq.s	Obj39_ChgMode	; if yes, branch
0000CC5A 5368 001E                  		subq.w	#1,$1E(a0)	; subtract 1 from time delay
0000CC5E 6000 0000                  		bra.w	DisplaySprite
0000CC62                            ; ===========================================================================
0000CC62                            
0000CC62                            Obj39_ChgMode:				; XREF: Obj39_Wait
0000CC62 4A38 FE1A                  		tst.b	($FFFFFE1A).w	; is time over flag set?
0000CC66 6600                       		bne.s	Obj39_ResetLvl	; if yes, branch
0000CC68 11FC 0014 F600             		move.b	#$14,($FFFFF600).w ; set mode to $14 (continue screen)
0000CC6E 4A38 FE18                  		tst.b	($FFFFFE18).w	; do you have any continues?
0000CC72 6600                       		bne.s	Obj39_Display	; if yes, branch
0000CC74 11FC 0000 F600             		move.b	#0,($FFFFF600).w ; set mode to 0 (Sega screen)
0000CC7A 6000                       		bra.s	Obj39_Display
0000CC7C                            ; ===========================================================================
0000CC7C                            
0000CC7C                            Obj39_ResetLvl:				; XREF: Obj39_ChgMode
0000CC7C 31FC 0001 FE02             		move.w	#1,($FFFFFE02).w ; restart level
0000CC82                            
0000CC82                            Obj39_Display:				; XREF: Obj39_ChgMode
0000CC82 6000 0000                  		bra.w	DisplaySprite
0000CC86                            ; ===========================================================================
0000CC86                            ; ---------------------------------------------------------------------------
0000CC86                            ; Object 3A - "SONIC GOT THROUGH" title	card
0000CC86                            ; ---------------------------------------------------------------------------
0000CC86                            
0000CC86                            Obj3A:					; XREF: Obj_Index
0000CC86 7000                       		moveq	#0,d0
0000CC88 1028 0024                  		move.b	$24(a0),d0
0000CC8C 323B 0000                  		move.w	Obj3A_Index(pc,d0.w),d1
0000CC90 4EFB 1000                  		jmp	Obj3A_Index(pc,d1.w)
0000CC94                            ; ===========================================================================
0000CC94 0000                       Obj3A_Index:	dc.w Obj3A_ChkPLC-Obj3A_Index
0000CC96 0000                       		dc.w Obj3A_ChkPos-Obj3A_Index
0000CC98 0000                       		dc.w Obj3A_Wait-Obj3A_Index
0000CC9A 0000                       		dc.w Obj3A_TimeBonus-Obj3A_Index
0000CC9C 0000                       		dc.w Obj3A_Wait-Obj3A_Index
0000CC9E 0000                       		dc.w Obj3A_NextLevel-Obj3A_Index
0000CCA0 0000                       		dc.w Obj3A_Wait-Obj3A_Index
0000CCA2 0000                       		dc.w Obj3A_ChkPos2-Obj3A_Index
0000CCA4 0000                       		dc.w loc_C766-Obj3A_Index
0000CCA6                            ; ===========================================================================
0000CCA6                            
0000CCA6                            Obj3A_ChkPLC:				; XREF: Obj3A_Index
0000CCA6 4AB8 F680                  		tst.l	($FFFFF680).w	; are the pattern load cues empty?
0000CCAA 6700                       		beq.s	Obj3A_Main	; if yes, branch
0000CCAC 4E75                       		rts	
0000CCAE                            ; ===========================================================================
0000CCAE                            
0000CCAE                            Obj3A_Main:
0000CCAE 2248                       		movea.l	a0,a1
0000CCB0 45F9 0000 0000             		lea	(Obj3A_Config).l,a2
0000CCB6 7206                       		moveq	#6,d1
0000CCB8                            
0000CCB8                            Obj3A_Loop:
0000CCB8 12BC 003A                  		move.b	#$3A,0(a1)
0000CCBC 3352 0008                  		move.w	(a2),8(a1)	; load start x-position
0000CCC0 335A 0032                  		move.w	(a2)+,$32(a1)	; load finish x-position (same as start)
0000CCC4 335A 0030                  		move.w	(a2)+,$30(a1)	; load main x-position
0000CCC8 335A 000A                  		move.w	(a2)+,$A(a1)	; load y-position
0000CCCC 135A 0024                  		move.b	(a2)+,$24(a1)
0000CCD0 101A                       		move.b	(a2)+,d0
0000CCD2 0C00 0006                  		cmpi.b	#6,d0
0000CCD6 6600                       		bne.s	loc_C5CA
0000CCD8 D038 FE11                  		add.b	($FFFFFE11).w,d0 ; add act number to frame number
0000CCDC                            
0000CCDC                            loc_C5CA:
0000CCDC 1340 001A                  		move.b	d0,$1A(a1)
0000CCE0 237C 0000 0000 0004        		move.l	#Map_obj3A,4(a1)
0000CCE8 337C 8580 0002             		move.w	#$8580,2(a1)
0000CCEE 137C 0000 0001             		move.b	#0,1(a1)
0000CCF4 43E9 0040                  		lea	$40(a1),a1
0000CCF8 51C9 FFBE                  		dbf	d1,Obj3A_Loop	; repeat 6 times
0000CCFC                            
0000CCFC                            Obj3A_ChkPos:				; XREF: Obj3A_Index
0000CCFC 7210                       		moveq	#$10,d1		; set horizontal speed
0000CCFE 3028 0030                  		move.w	$30(a0),d0
0000CD02 B068 0008                  		cmp.w	8(a0),d0	; has item reached its target position?
0000CD06 6700                       		beq.s	loc_C61A	; if yes, branch
0000CD08 6C00                       		bge.s	Obj3A_Move
0000CD0A 4441                       		neg.w	d1
0000CD0C                            
0000CD0C                            Obj3A_Move:
0000CD0C D368 0008                  		add.w	d1,8(a0)	; change item's position
0000CD10                            
0000CD10                            loc_C5FE:				; XREF: loc_C61A
0000CD10 3028 0008                  		move.w	8(a0),d0
0000CD14 6B00                       		bmi.s	locret_C60E
0000CD16 0C40 0200                  		cmpi.w	#$200,d0	; has item moved beyond	$200 on	x-axis?
0000CD1A 6400                       		bcc.s	locret_C60E	; if yes, branch
0000CD1C 6000 0000                  		bra.w	DisplaySprite
0000CD20                            ; ===========================================================================
0000CD20                            
0000CD20                            locret_C60E:
0000CD20 4E75                       		rts	
0000CD22                            ; ===========================================================================
0000CD22                            
0000CD22                            loc_C610:				; XREF: loc_C61A
0000CD22 117C 000E 0024             		move.b	#$E,$24(a0)
0000CD28 6000 0000                  		bra.w	Obj3A_ChkPos2
0000CD2C                            ; ===========================================================================
0000CD2C                            
0000CD2C                            loc_C61A:				; XREF: Obj3A_ChkPos
0000CD2C 0C38 000E D724             		cmpi.b	#$E,($FFFFD724).w
0000CD32 67EE                       		beq.s	loc_C610
0000CD34 0C28 0004 001A             		cmpi.b	#4,$1A(a0)
0000CD3A 66D4                       		bne.s	loc_C5FE
0000CD3C 5428 0024                  		addq.b	#2,$24(a0)
0000CD40 317C 00B4 001E             		move.w	#180,$1E(a0)	; set time delay to 3 seconds
0000CD46                            
0000CD46                            Obj3A_Wait:				; XREF: Obj3A_Index
0000CD46 5368 001E                  		subq.w	#1,$1E(a0)	; subtract 1 from time delay
0000CD4A 6600                       		bne.s	Obj3A_Display
0000CD4C 5428 0024                  		addq.b	#2,$24(a0)
0000CD50                            
0000CD50                            Obj3A_Display:
0000CD50 6000 0000                  		bra.w	DisplaySprite
0000CD54                            ; ===========================================================================
0000CD54                            
0000CD54                            Obj3A_TimeBonus:			; XREF: Obj3A_Index
0000CD54 6100 0000                  		bsr.w	DisplaySprite
0000CD58 11FC 0001 F7D6             		move.b	#1,($FFFFF7D6).w ; set time/ring bonus update flag
0000CD5E 7000                       		moveq	#0,d0
0000CD60 4A78 F7D2                  		tst.w	($FFFFF7D2).w	; is time bonus	= zero?
0000CD64 6700                       		beq.s	Obj3A_RingBonus	; if yes, branch
0000CD66 0640 000A                  		addi.w	#10,d0		; add 10 to score
0000CD6A 0478 000A F7D2             		subi.w	#10,($FFFFF7D2).w ; subtract 10	from time bonus
0000CD70                            
0000CD70                            Obj3A_RingBonus:
0000CD70 4A78 F7D4                  		tst.w	($FFFFF7D4).w	; is ring bonus	= zero?
0000CD74 6700                       		beq.s	Obj3A_ChkBonus	; if yes, branch
0000CD76 0640 000A                  		addi.w	#10,d0		; add 10 to score
0000CD7A 0478 000A F7D4             		subi.w	#10,($FFFFF7D4).w ; subtract 10	from ring bonus
0000CD80                            
0000CD80                            Obj3A_ChkBonus:
0000CD80 4A40                       		tst.w	d0		; is there any bonus?
0000CD82 6600                       		bne.s	Obj3A_AddBonus	; if yes, branch
0000CD84 303C 00C5                  		move.w	#$C5,d0
0000CD88 4EB9 0000 15C0             		jsr	(PlaySound_Special).l ;	play "ker-ching" sound
0000CD8E 5428 0024                  		addq.b	#2,$24(a0)
0000CD92 0C78 0501 FE10             		cmpi.w	#$501,($FFFFFE10).w
0000CD98 6600                       		bne.s	Obj3A_SetDelay
0000CD9A 5828 0024                  		addq.b	#4,$24(a0)
0000CD9E                            
0000CD9E                            Obj3A_SetDelay:
0000CD9E 317C 00B4 001E             		move.w	#180,$1E(a0)	; set time delay to 3 seconds
0000CDA4                            
0000CDA4                            locret_C692:
0000CDA4 4E75                       		rts	
0000CDA6                            ; ===========================================================================
0000CDA6                            
0000CDA6                            Obj3A_AddBonus:				; XREF: Obj3A_ChkBonus
0000CDA6 4EB9 0000 0000             		jsr	AddPoints
0000CDAC 1038 FE0F                  		move.b	($FFFFFE0F).w,d0
0000CDB0 0200 0003                  		andi.b	#3,d0
0000CDB4 66EE                       		bne.s	locret_C692
0000CDB6 303C 00CD                  		move.w	#$CD,d0
0000CDBA 4EF9 0000 15C0             		jmp	(PlaySound_Special).l ;	play "blip" sound
0000CDC0                            ; ===========================================================================
0000CDC0                            
0000CDC0                            Obj3A_NextLevel:			; XREF: Obj3A_Index
0000CDC0 1038 FE10                  		move.b	($FFFFFE10).w,d0
0000CDC4 0240 0007                  		andi.w	#7,d0
0000CDC8 E748                       		lsl.w	#3,d0
0000CDCA 1238 FE11                  		move.b	($FFFFFE11).w,d1
0000CDCE 0241 0003                  		andi.w	#3,d1
0000CDD2 D241                       		add.w	d1,d1
0000CDD4 D041                       		add.w	d1,d0
0000CDD6 303B 0000                  		move.w	LevelOrder(pc,d0.w),d0 ; load level from level order array
0000CDDA 31C0 FE10                  		move.w	d0,($FFFFFE10).w ; set level number
0000CDDE 4A40                       		tst.w	d0
0000CDE0 6600                       		bne.s	Obj3A_ChkSS
0000CDE2 11FC 0000 F600             		move.b	#0,($FFFFF600).w ; set game mode to level (00)
0000CDE8 6000                       		bra.s	Obj3A_Display2
0000CDEA                            ; ===========================================================================
0000CDEA                            
0000CDEA                            Obj3A_ChkSS:				; XREF: Obj3A_NextLevel
0000CDEA 4238 FE30                  		clr.b	($FFFFFE30).w	; clear	lamppost counter
0000CDEE 4A38 F7CD                  		tst.b	($FFFFF7CD).w	; has Sonic jumped into	a giant	ring?
0000CDF2 6700                       		beq.s	loc_C6EA	; if not, branch
0000CDF4 11FC 0010 F600             		move.b	#$10,($FFFFF600).w ; set game mode to Special Stage (10)
0000CDFA 6000                       		bra.s	Obj3A_Display2
0000CDFC                            ; ===========================================================================
0000CDFC                            
0000CDFC                            loc_C6EA:				; XREF: Obj3A_ChkSS
0000CDFC 31FC 0001 FE02             		move.w	#1,($FFFFFE02).w ; restart level
0000CE02                            
0000CE02                            Obj3A_Display2:				; XREF: Obj3A_NextLevel, Obj3A_ChkSS
0000CE02 6000 0000                  		bra.w	DisplaySprite
0000CE06                            ; ===========================================================================
0000CE06                            ; ---------------------------------------------------------------------------
0000CE06                            ; Level	order array
0000CE06                            ; ---------------------------------------------------------------------------
0000CE06                            LevelOrder:	incbin	misc\lvl_ord.bin
0000CE36                            		even
0000CE36                            ; ===========================================================================
0000CE36                            
0000CE36                            Obj3A_ChkPos2:				; XREF: Obj3A_Index
0000CE36 7220                       		moveq	#$20,d1		; set horizontal speed
0000CE38 3028 0032                  		move.w	$32(a0),d0
0000CE3C B068 0008                  		cmp.w	8(a0),d0	; has item reached its finish position?
0000CE40 6700                       		beq.s	Obj3A_SBZ2	; if yes, branch
0000CE42 6C00                       		bge.s	Obj3A_Move2
0000CE44 4441                       		neg.w	d1
0000CE46                            
0000CE46                            Obj3A_Move2:
0000CE46 D368 0008                  		add.w	d1,8(a0)	; change item's position
0000CE4A 3028 0008                  		move.w	8(a0),d0
0000CE4E 6B00                       		bmi.s	locret_C748
0000CE50 0C40 0200                  		cmpi.w	#$200,d0	; has item moved beyond	$200 on	x-axis?
0000CE54 6400                       		bcc.s	locret_C748	; if yes, branch
0000CE56 6000 0000                  		bra.w	DisplaySprite
0000CE5A                            ; ===========================================================================
0000CE5A                            
0000CE5A                            locret_C748:
0000CE5A 4E75                       		rts	
0000CE5C                            ; ===========================================================================
0000CE5C                            
0000CE5C                            Obj3A_SBZ2:				; XREF: Obj3A_ChkPos2
0000CE5C 0C28 0004 001A             		cmpi.b	#4,$1A(a0)
0000CE62 6600 0000                  		bne.w	DeleteObject
0000CE66 5428 0024                  		addq.b	#2,$24(a0)
0000CE6A 4238 F7CC                  		clr.b	($FFFFF7CC).w	; unlock controls
0000CE6E 303C 008D                  		move.w	#$8D,d0
0000CE72 4EF9 0000 15BA             		jmp	(PlaySound).l	; play FZ music
0000CE78                            ; ===========================================================================
0000CE78                            
0000CE78                            loc_C766:				; XREF: Obj3A_Index
0000CE78 5478 F72A                  		addq.w	#2,($FFFFF72A).w
0000CE7C 0C78 2100 F72A             		cmpi.w	#$2100,($FFFFF72A).w
0000CE82 6700 0000                  		beq.w	DeleteObject
0000CE86 4E75                       		rts	
0000CE88                            ; ===========================================================================
0000CE88 0004 0124 00BC             Obj3A_Config:	dc.w 4,	$124, $BC	; x-start, x-main, y-main
0000CE8E 0200                       		dc.b 2,	0		; routine number, frame	number (changes)
0000CE90 FEE0 0120 00D0             		dc.w $FEE0, $120, $D0
0000CE96 0201                       		dc.b 2,	1
0000CE98 040C 014C 00D6             		dc.w $40C, $14C, $D6
0000CE9E 0206                       		dc.b 2,	6
0000CEA0 0520 0120 00EC             		dc.w $520, $120, $EC
0000CEA6 0202                       		dc.b 2,	2
0000CEA8 0540 0120 00FC             		dc.w $540, $120, $FC
0000CEAE 0203                       		dc.b 2,	3
0000CEB0 0560 0120 010C             		dc.w $560, $120, $10C
0000CEB6 0204                       		dc.b 2,	4
0000CEB8 020C 014C 00CC             		dc.w $20C, $14C, $CC
0000CEBE 0205                       		dc.b 2,	5
0000CEC0                            ; ===========================================================================
0000CEC0                            ; ---------------------------------------------------------------------------
0000CEC0                            ; Object 7E - special stage results screen
0000CEC0                            ; ---------------------------------------------------------------------------
0000CEC0                            
0000CEC0                            Obj7E:					; XREF: Obj_Index
0000CEC0 7000                       		moveq	#0,d0
0000CEC2 1028 0024                  		move.b	$24(a0),d0
0000CEC6 323B 0000                  		move.w	Obj7E_Index(pc,d0.w),d1
0000CECA 4EFB 1000                  		jmp	Obj7E_Index(pc,d1.w)
0000CECE                            ; ===========================================================================
0000CECE 0000                       Obj7E_Index:	dc.w Obj7E_ChkPLC-Obj7E_Index
0000CED0 0000                       		dc.w Obj7E_ChkPos-Obj7E_Index
0000CED2 0000                       		dc.w Obj7E_Wait-Obj7E_Index
0000CED4 0000                       		dc.w Obj7E_RingBonus-Obj7E_Index
0000CED6 0000                       		dc.w Obj7E_Wait-Obj7E_Index
0000CED8 0000                       		dc.w Obj7E_Exit-Obj7E_Index
0000CEDA 0000                       		dc.w Obj7E_Wait-Obj7E_Index
0000CEDC 0000                       		dc.w Obj7E_Continue-Obj7E_Index
0000CEDE 0000                       		dc.w Obj7E_Wait-Obj7E_Index
0000CEE0 0000                       		dc.w Obj7E_Exit-Obj7E_Index
0000CEE2 0000                       		dc.w loc_C91A-Obj7E_Index
0000CEE4                            ; ===========================================================================
0000CEE4                            
0000CEE4                            Obj7E_ChkPLC:				; XREF: Obj7E_Index
0000CEE4 4AB8 F680                  		tst.l	($FFFFF680).w	; are the pattern load cues empty?
0000CEE8 6700                       		beq.s	Obj7E_Main	; if yes, branch
0000CEEA 4E75                       		rts	
0000CEEC                            ; ===========================================================================
0000CEEC                            
0000CEEC                            Obj7E_Main:
0000CEEC 2248                       		movea.l	a0,a1
0000CEEE 45F9 0000 0000             		lea	(Obj7E_Config).l,a2
0000CEF4 7203                       		moveq	#3,d1
0000CEF6 0C78 0032 FE20             		cmpi.w	#50,($FFFFFE20).w ; do you have	50 or more rings?
0000CEFC 6500                       		bcs.s	Obj7E_Loop	; if no, branch
0000CEFE 5241                       		addq.w	#1,d1		; if yes, add 1	to d1 (number of sprites)
0000CF00                            
0000CF00                            Obj7E_Loop:
0000CF00 12BC 007E                  		move.b	#$7E,0(a1)
0000CF04 335A 0008                  		move.w	(a2)+,8(a1)	; load start x-position
0000CF08 335A 0030                  		move.w	(a2)+,$30(a1)	; load main x-position
0000CF0C 335A 000A                  		move.w	(a2)+,$A(a1)	; load y-position
0000CF10 135A 0024                  		move.b	(a2)+,$24(a1)
0000CF14 135A 001A                  		move.b	(a2)+,$1A(a1)
0000CF18 237C 0000 0000 0004        		move.l	#Map_obj7E,4(a1)
0000CF20 337C 8580 0002             		move.w	#$8580,2(a1)
0000CF26 137C 0000 0001             		move.b	#0,1(a1)
0000CF2C 43E9 0040                  		lea	$40(a1),a1
0000CF30 51C9 FFCE                  		dbf	d1,Obj7E_Loop	; repeat sequence 3 or 4 times
0000CF34                            
0000CF34 7007                       		moveq	#7,d0
0000CF36 1238 FE57                  		move.b	($FFFFFE57).w,d1
0000CF3A 6700                       		beq.s	loc_C842
0000CF3C 7000                       		moveq	#0,d0
0000CF3E 0C01 0006                  		cmpi.b	#6,d1		; do you have all chaos	emeralds?
0000CF42 6600                       		bne.s	loc_C842	; if not, branch
0000CF44 7008                       		moveq	#8,d0		; load "Sonic got them all" text
0000CF46 317C 0018 0008             		move.w	#$18,8(a0)
0000CF4C 317C 0118 0030             		move.w	#$118,$30(a0)	; change position of text
0000CF52                            
0000CF52                            loc_C842:
0000CF52 1140 001A                  		move.b	d0,$1A(a0)
0000CF56                            
0000CF56                            Obj7E_ChkPos:				; XREF: Obj7E_Index
0000CF56 7210                       		moveq	#$10,d1		; set horizontal speed
0000CF58 3028 0030                  		move.w	$30(a0),d0
0000CF5C B068 0008                  		cmp.w	8(a0),d0	; has item reached its target position?
0000CF60 6700                       		beq.s	loc_C86C	; if yes, branch
0000CF62 6C00                       		bge.s	Obj7E_Move
0000CF64 4441                       		neg.w	d1
0000CF66                            
0000CF66                            Obj7E_Move:
0000CF66 D368 0008                  		add.w	d1,8(a0)	; change item's position
0000CF6A                            
0000CF6A                            loc_C85A:				; XREF: loc_C86C
0000CF6A 3028 0008                  		move.w	8(a0),d0
0000CF6E 6B00                       		bmi.s	locret_C86A
0000CF70 0C40 0200                  		cmpi.w	#$200,d0	; has item moved beyond	$200 on	x-axis?
0000CF74 6400                       		bcc.s	locret_C86A	; if yes, branch
0000CF76 6000 0000                  		bra.w	DisplaySprite
0000CF7A                            ; ===========================================================================
0000CF7A                            
0000CF7A                            locret_C86A:
0000CF7A 4E75                       		rts	
0000CF7C                            ; ===========================================================================
0000CF7C                            
0000CF7C                            loc_C86C:				; XREF: Obj7E_ChkPos
0000CF7C 0C28 0002 001A             		cmpi.b	#2,$1A(a0)
0000CF82 66E6                       		bne.s	loc_C85A
0000CF84 5428 0024                  		addq.b	#2,$24(a0)
0000CF88 317C 00B4 001E             		move.w	#180,$1E(a0)	; set time delay to 3 seconds
0000CF8E 11FC 007F D800             		move.b	#$7F,($FFFFD800).w ; load chaos	emerald	object
0000CF94                            
0000CF94                            Obj7E_Wait:				; XREF: Obj7E_Index
0000CF94 5368 001E                  		subq.w	#1,$1E(a0)	; subtract 1 from time delay
0000CF98 6600                       		bne.s	Obj7E_Display
0000CF9A 5428 0024                  		addq.b	#2,$24(a0)
0000CF9E                            
0000CF9E                            Obj7E_Display:
0000CF9E 6000 0000                  		bra.w	DisplaySprite
0000CFA2                            ; ===========================================================================
0000CFA2                            
0000CFA2                            Obj7E_RingBonus:			; XREF: Obj7E_Index
0000CFA2 6100 0000                  		bsr.w	DisplaySprite
0000CFA6 11FC 0001 F7D6             		move.b	#1,($FFFFF7D6).w ; set ring bonus update flag
0000CFAC 4A78 F7D4                  		tst.w	($FFFFF7D4).w	; is ring bonus	= zero?
0000CFB0 6700                       		beq.s	loc_C8C4	; if yes, branch
0000CFB2 0478 000A F7D4             		subi.w	#10,($FFFFF7D4).w ; subtract 10	from ring bonus
0000CFB8 700A                       		moveq	#10,d0		; add 10 to score
0000CFBA 4EB9 0000 0000             		jsr	AddPoints
0000CFC0 1038 FE0F                  		move.b	($FFFFFE0F).w,d0
0000CFC4 0200 0003                  		andi.b	#3,d0
0000CFC8 6600                       		bne.s	locret_C8EA
0000CFCA 303C 00CD                  		move.w	#$CD,d0
0000CFCE 4EF9 0000 15C0             		jmp	(PlaySound_Special).l ;	play "blip" sound
0000CFD4                            ; ===========================================================================
0000CFD4                            
0000CFD4                            loc_C8C4:				; XREF: Obj7E_RingBonus
0000CFD4 303C 00C5                  		move.w	#$C5,d0
0000CFD8 4EB9 0000 15C0             		jsr	(PlaySound_Special).l ;	play "ker-ching" sound
0000CFDE 5428 0024                  		addq.b	#2,$24(a0)
0000CFE2 317C 00B4 001E             		move.w	#180,$1E(a0)	; set time delay to 3 seconds
0000CFE8 0C78 0032 FE20             		cmpi.w	#50,($FFFFFE20).w ; do you have	at least 50 rings?
0000CFEE 6500                       		bcs.s	locret_C8EA	; if not, branch
0000CFF0 317C 003C 001E             		move.w	#60,$1E(a0)	; set time delay to 1 second
0000CFF6 5828 0024                  		addq.b	#4,$24(a0)	; goto "Obj7E_Continue"	routine
0000CFFA                            
0000CFFA                            locret_C8EA:
0000CFFA 4E75                       		rts	
0000CFFC                            ; ===========================================================================
0000CFFC                            
0000CFFC                            Obj7E_Exit:				; XREF: Obj7E_Index
0000CFFC 31FC 0001 FE02             		move.w	#1,($FFFFFE02).w ; restart level
0000D002 6000 0000                  		bra.w	DisplaySprite
0000D006                            ; ===========================================================================
0000D006                            
0000D006                            Obj7E_Continue:				; XREF: Obj7E_Index
0000D006 11FC 0004 D6DA             		move.b	#4,($FFFFD6DA).w
0000D00C 11FC 0014 D6E4             		move.b	#$14,($FFFFD6E4).w
0000D012 303C 00BF                  		move.w	#$BF,d0
0000D016 4EB9 0000 15C0             		jsr	(PlaySound_Special).l ;	play continues music
0000D01C 5428 0024                  		addq.b	#2,$24(a0)
0000D020 317C 0168 001E             		move.w	#360,$1E(a0)	; set time delay to 6 seconds
0000D026 6000 0000                  		bra.w	DisplaySprite
0000D02A                            ; ===========================================================================
0000D02A                            
0000D02A                            loc_C91A:				; XREF: Obj7E_Index
0000D02A 1038 FE0F                  		move.b	($FFFFFE0F).w,d0
0000D02E 0200 000F                  		andi.b	#$F,d0
0000D032 6600                       		bne.s	Obj7E_Display2
0000D034 0868 0000 001A             		bchg	#0,$1A(a0)
0000D03A                            
0000D03A                            Obj7E_Display2:
0000D03A 6000 0000                  		bra.w	DisplaySprite
0000D03E                            ; ===========================================================================
0000D03E 0020 0120 00C4             Obj7E_Config:	dc.w $20, $120,	$C4	; start	x-pos, main x-pos, y-pos
0000D044 0200                       		dc.b 2,	0		; rountine number, frame number
0000D046 0320 0120 0118             		dc.w $320, $120, $118
0000D04C 0201                       		dc.b 2,	1
0000D04E 0360 0120 0128             		dc.w $360, $120, $128
0000D054 0202                       		dc.b 2,	2
0000D056 01EC 011C 00C4             		dc.w $1EC, $11C, $C4
0000D05C 0203                       		dc.b 2,	3
0000D05E 03A0 0120 0138             		dc.w $3A0, $120, $138
0000D064 0206                       		dc.b 2,	6
0000D066                            ; ===========================================================================
0000D066                            ; ---------------------------------------------------------------------------
0000D066                            ; Object 7F - chaos emeralds from the special stage results screen
0000D066                            ; ---------------------------------------------------------------------------
0000D066                            
0000D066                            Obj7F:					; XREF: Obj_Index
0000D066 7000                       		moveq	#0,d0
0000D068 1028 0024                  		move.b	$24(a0),d0
0000D06C 323B 0000                  		move.w	Obj7F_Index(pc,d0.w),d1
0000D070 4EFB 1000                  		jmp	Obj7F_Index(pc,d1.w)
0000D074                            ; ===========================================================================
0000D074 0000                       Obj7F_Index:	dc.w Obj7F_Main-Obj7F_Index
0000D076 0000                       		dc.w Obj7F_Flash-Obj7F_Index
0000D078                            
0000D078                            ; ---------------------------------------------------------------------------
0000D078                            ; X-axis positions for chaos emeralds
0000D078                            ; ---------------------------------------------------------------------------
0000D078 0110 0128 00F8 0140 00E0+  Obj7F_PosData:	dc.w $110, $128, $F8, $140, $E0, $158
0000D084                            ; ===========================================================================
0000D084                            
0000D084                            Obj7F_Main:				; XREF: Obj7F_Index
0000D084 2248                       		movea.l	a0,a1
0000D086 45F9 0000 D078             		lea	(Obj7F_PosData).l,a2
0000D08C 7400                       		moveq	#0,d2
0000D08E 7200                       		moveq	#0,d1
0000D090 1238 FE57                  		move.b	($FFFFFE57).w,d1 ; d1 is number	of emeralds
0000D094 5301                       		subq.b	#1,d1		; subtract 1 from d1
0000D096 6500 0000                  		bcs.w	DeleteObject	; if you have 0	emeralds, branch
0000D09A                            
0000D09A                            Obj7F_Loop:
0000D09A 12BC 007F                  		move.b	#$7F,0(a1)
0000D09E 335A 0008                  		move.w	(a2)+,8(a1)	; set x-position
0000D0A2 337C 00F0 000A             		move.w	#$F0,$A(a1)	; set y-position
0000D0A8 47F8 FE58                  		lea	($FFFFFE58).w,a3 ; check which emeralds	you have
0000D0AC 1633 2000                  		move.b	(a3,d2.w),d3
0000D0B0 1343 001A                  		move.b	d3,$1A(a1)
0000D0B4 1343 001C                  		move.b	d3,$1C(a1)
0000D0B8 5202                       		addq.b	#1,d2
0000D0BA 5429 0024                  		addq.b	#2,$24(a1)
0000D0BE 237C 0000 0000 0004        		move.l	#Map_obj7F,4(a1)
0000D0C6 337C 8541 0002             		move.w	#$8541,2(a1)
0000D0CC 137C 0000 0001             		move.b	#0,1(a1)
0000D0D2 43E9 0040                  		lea	$40(a1),a1	; next object
0000D0D6 51C9 FFC2                  		dbf	d1,Obj7F_Loop	; loop for d1 number of	emeralds
0000D0DA                            
0000D0DA                            Obj7F_Flash:				; XREF: Obj7F_Index
0000D0DA 1028 001A                  		move.b	$1A(a0),d0
0000D0DE 117C 0006 001A             		move.b	#6,$1A(a0)	; load 6th frame (blank)
0000D0E4 0C00 0006                  		cmpi.b	#6,d0
0000D0E8 6600                       		bne.s	Obj7F_Display
0000D0EA 1168 001C 001A             		move.b	$1C(a0),$1A(a0)	; load visible frame
0000D0F0                            
0000D0F0                            Obj7F_Display:
0000D0F0 6000 0000                  		bra.w	DisplaySprite
0000D0F4                            ; ===========================================================================
0000D0F4                            ; ---------------------------------------------------------------------------
0000D0F4                            ; Sprite mappings - zone title cards
0000D0F4                            ; ---------------------------------------------------------------------------
0000D0F4 0000                       Map_obj34:	dc.w byte_C9FE-Map_obj34
0000D0F6 0000                       		dc.w byte_CA2C-Map_obj34
0000D0F8 0000                       		dc.w byte_CA5A-Map_obj34
0000D0FA 0000                       		dc.w byte_CA7A-Map_obj34
0000D0FC 0000                       		dc.w byte_CAA8-Map_obj34
0000D0FE 0000                       		dc.w byte_CADC-Map_obj34
0000D100 0000                       		dc.w byte_CB10-Map_obj34
0000D102 0000                       		dc.w byte_CB26-Map_obj34
0000D104 0000                       		dc.w byte_CB31-Map_obj34
0000D106 0000                       		dc.w byte_CB3C-Map_obj34
0000D108 0000                       		dc.w byte_CB47-Map_obj34
0000D10A 0000                       		dc.w byte_CB8A-Map_obj34
0000D10C 0C                         byte_C9FE:	dc.b $C	;  GREEN HILL | CRUNCHY ROLL
0000D10D F805 0008 80               		dc.b $F8, 5, 0, 8, $80		; C
0000D112 F805 003A 90               		dc.b $F8, 5, 0, $3A, $90	; R
0000D117 F805 0046 A0               		dc.b $F8, 5, 0, $46, $A0	; U
0000D11C F805 002E B0               		dc.b $F8, 5, 0, $2E, $B0	; N
0000D121 F805 0008 C0               		dc.b $F8, 5, 0, 8, $C0		; C
0000D126 F805 001C D0               		dc.b $F8, 5, 0, $1C, $D0	; H
0000D12B F805 004A E0               		dc.b $F8, 5, 0, $4A, $E0	; Y
0000D130 F800 0056 F0               		dc.b $F8, 0, 0, $56, $F0	; Space
0000D135 F805 003A 00               		dc.b $F8, 5, 0, $3A, $0	; R
0000D13A F805 0032 10               		dc.b $F8, 5, 0, $32, $10	; O
0000D13F F805 0026 20               		dc.b $F8, 5, 0, $26, $20	; L
0000D144 F805 0026 30               		dc.b $F8, 5, 0, $26, $30	; L
0000D149 16                         byte_CA2C:	dc.b $16	;  LABYRINTH | I LIKE FILE EGGSPLORER
0000D14A F801 0020 80               		dc.b $F8, 1, 0, $20, $80	; I
0000D14F F800 0056 88               		dc.b $F8, 0, 0, $56, $88	; Space
0000D154 F805 0026 98               		dc.b $F8, 5, 0, $26, $98	; L
0000D159 F801 0020 A8               		dc.b $F8, 1, 0, $20, $A8	; I
0000D15E F805 0022 B0               		dc.b $F8, 5, 0, $22, $B0	; K
0000D163 F805 0010 C0               		dc.b $F8, 5, 0, $10, $C0	; E
0000D168 F800 0056 D0               		dc.b $F8, 0, 0, $56, $D0	; Space
0000D16D F805 0014 E0               		dc.b $F8, 5, 0, $14, $E0	; F
0000D172 F801 0020 F0               		dc.b $F8, 1, 0, $20, $F0	; I
0000D177 F805 0026 F8               		dc.b $F8, 5, 0, $26, $F8	; L
0000D17C F805 0010 08               		dc.b $F8, 5, 0, $10, $8	; E
0000D181 F800 0056 18               		dc.b $F8, 0, 0, $56, $18	; Space
0000D186 F805 0010 28               		dc.b $F8, 5, 0, $10, $28	; E
0000D18B F805 0018 38               		dc.b $F8, 5, 0, $18, $38	; G
0000D190 F805 0018 48               		dc.b $F8, 5, 0, $18, $48	; G
0000D195 F805 003E 58               		dc.b $F8, 5, 0, $3E, $58	; S
0000D19A F805 0036 68               		dc.b $F8, 5, 0, $36, $68	; P
0000D19F F805 0026 78               		dc.b $F8, 5, 0, $26, $78	; L
0000D1A4 F805 0032 88               		dc.b $F8, 5, 0, $32, $88	; O
0000D1A9 F805 003A 98               		dc.b $F8, 5, 0, $3A, $98	; R
0000D1AE F805 0010 A8               		dc.b $F8, 5, 0, $10, $A8	; E
0000D1B3 F805 003A B8               		dc.b $F8, 5, 0, $3A, $B8	; R
0000D1B8 05                         byte_CA5A:	dc.b 5	;  MARBLE | MARBL
0000D1B9 F805 002A 80               		dc.b $F8, 5, 0, $2A, $80	; M
0000D1BE F805 0000 90               		dc.b $F8, 5, 0, 0, $90		; A
0000D1C3 F805 003A A0               		dc.b $F8, 5, 0, $3A, $A0	; R
0000D1C8 F805 0004 B0               		dc.b $F8, 5, 0, 4, $B0		; B
0000D1CD F805 0026 C0               		dc.b $F8, 5, 0, $26, $C0	; L
0000D1D2 11                         byte_CA7A:	dc.b $11	;  STAR LIGHT | DONT GET RIDOTHIS
0000D1D3 F805 000C 80               		dc.b $F8, 5, 0, $0C, $80	; D
0000D1D8 F805 0032 90               		dc.b $F8, 5, 0, $32, $90	; O
0000D1DD F805 002E A0               		dc.b $F8, 5, 0, $2E, $A0	; N
0000D1E2 F805 0042 B0               		dc.b $F8, 5, 0, $42, $B0	; T
0000D1E7 F800 0056 C0               		dc.b $F8, 0, 0, $56, $C0	; Space
0000D1EC F805 0018 D0               		dc.b $F8, 5, 0, $18, $D0	; G
0000D1F1 F805 0010 E0               		dc.b $F8, 5, 0, $10, $E0	; E
0000D1F6 F805 0042 F0               		dc.b $F8, 5, 0, $42, $F0	; T
0000D1FB F800 0056 00               		dc.b $F8, 0, 0, $56, $0	; Space
0000D200 F805 003A 10               		dc.b $F8, 5, 0, $3A, $10	; R
0000D205 F801 0020 20               		dc.b $F8, 1, 0, $20, $20	; I
0000D20A F805 000C 28               		dc.b $F8, 5, 0, $0C, $28	; D
0000D20F F805 0032 38               		dc.b $F8, 5, 0, $32, $38	; O
0000D214 F805 0042 48               		dc.b $F8, 5, 0, $42, $48	; T
0000D219 F805 001C 58               		dc.b $F8, 5, 0, $1C, $58	; H
0000D21E F801 0020 68               		dc.b $F8, 1, 0, $20, $68	; I
0000D223 F805 003E 70               		dc.b $F8, 5, 0, $3E, $70	; S
0000D228 15                         byte_CAA8:	dc.b $15	;  SPRING YARD | THE PIG FROM BARNYARD
0000D229 F805 0042 80               		dc.b $F8, 5, 0, $42, $80	; T
0000D22E F805 001C 90               		dc.b $F8, 5, 0, $1C, $90	; H
0000D233 F805 0010 A0               		dc.b $F8, 5, 0, $10, $A0	; E
0000D238 F800 0056 B0               		dc.b $F8, 0, 0, $56, $B0	; Space
0000D23D F805 0036 C0               		dc.b $F8, 5, 0, $36, $C0	; P
0000D242 F801 0020 D0               		dc.b $F8, 1, 0, $20, $D0	; I
0000D247 F805 0018 D8               		dc.b $F8, 5, 0, $18, $D8	; G
0000D24C F800 0056 E8               		dc.b $F8, 0, 0, $56, $E8	; Space
0000D251 F805 0014 F8               		dc.b $F8, 5, 0, $14, $F8	; F
0000D256 F805 003A 08               		dc.b $F8, 5, 0, $3A, $8	; R
0000D25B F805 0032 18               		dc.b $F8, 5, 0, $32, $18	; O
0000D260 F805 002A 28               		dc.b $F8, 5, 0, $2A, $28	; M
0000D265 F800 0056 38               		dc.b $F8, 0, 0, $56, $38	; Space
0000D26A F805 0004 48               		dc.b $F8, 5, 0, 4, $48		; B
0000D26F F805 0000 58               		dc.b $F8, 5, 0, 0, $58		; A
0000D274 F805 003A 68               		dc.b $F8, 5, 0, $3A, $68	; R
0000D279 F805 002E 78               		dc.b $F8, 5, 0, $2E, $78	; N
0000D27E F805 004A 88               		dc.b $F8, 5, 0, $4A, $88	; Y
0000D283 F805 0000 98               		dc.b $F8, 5, 0, 0, $98		; A
0000D288 F805 003A A8               		dc.b $F8, 5, 0, $3A, $A8	; R
0000D28D F805 000C B8               		dc.b $F8, 5, 0, $0C, $B8	; D
0000D292 07                         byte_CADC:	dc.b 7	;  SCRAP BRAIN | Z Z Z Z
0000D293 F805 004E 80               		dc.b $F8, 5, 0, $4E, $80	; Z
0000D298 F800 0056 90               		dc.b $F8, 0, 0, $56, $90	; Space
0000D29D F805 004E A0               		dc.b $F8, 5, 0, $4E, $A0	; Z
0000D2A2 F800 0056 B0               		dc.b $F8, 0, 0, $56, $B0	; Space
0000D2A7 F805 004E C0               		dc.b $F8, 5, 0, $4E, $C0	; Z
0000D2AC F800 0056 D0               		dc.b $F8, 0, 0, $56, $D0	; Space
0000D2B1 F805 004E E0               		dc.b $F8, 5, 0, $4E, $E0	; Z
0000D2B6 04                         byte_CB10:	dc.b 4			; ZONE
0000D2B7 F805 004E E0               		dc.b $F8, 5, 0,	$4E, $E0
0000D2BC F805 0032 F0               		dc.b $F8, 5, 0,	$32, $F0
0000D2C1 F805 002E 00               		dc.b $F8, 5, 0,	$2E, 0
0000D2C6 F805 0010 10               		dc.b $F8, 5, 0,	$10, $10
0000D2CB 00                         		dc.b 0
0000D2CC 02                         byte_CB26:	dc.b 2			; ACT 1
0000D2CD 040C 0053 EC               		dc.b 4,	$C, 0, $53, $EC
0000D2D2 F402 0057 0C               		dc.b $F4, 2, 0,	$57, $C
0000D2D7 02                         byte_CB31:	dc.b 2			; ACT 2
0000D2D8 040C 0053 EC               		dc.b 4,	$C, 0, $53, $EC
0000D2DD F406 005A 08               		dc.b $F4, 6, 0,	$5A, 8
0000D2E2 02                         byte_CB3C:	dc.b 2			; ACT 3
0000D2E3 040C 0053 EC               		dc.b 4,	$C, 0, $53, $EC
0000D2E8 F406 0060 08               		dc.b $F4, 6, 0,	$60, 8
0000D2ED 0D                         byte_CB47:	dc.b $D			; Oval
0000D2EE E40C 0070 F4               		dc.b $E4, $C, 0, $70, $F4
0000D2F3 E402 0074 14               		dc.b $E4, 2, 0,	$74, $14
0000D2F8 EC04 0077 EC               		dc.b $EC, 4, 0,	$77, $EC
0000D2FD F405 0079 E4               		dc.b $F4, 5, 0,	$79, $E4
0000D302 140C 1870 EC               		dc.b $14, $C, $18, $70,	$EC
0000D307 0402 1874 E4               		dc.b 4,	2, $18,	$74, $E4
0000D30C 0C04 1877 04               		dc.b $C, 4, $18, $77, 4
0000D311 FC05 1879 0C               		dc.b $FC, 5, $18, $79, $C
0000D316 EC08 007D FC               		dc.b $EC, 8, 0,	$7D, $FC
0000D31B F40C 007C F4               		dc.b $F4, $C, 0, $7C, $F4
0000D320 FC08 007C F4               		dc.b $FC, 8, 0,	$7C, $F4
0000D325 040C 007C EC               		dc.b 4,	$C, 0, $7C, $EC
0000D32A 0C08 007C EC               		dc.b $C, 8, 0, $7C, $EC
0000D32F 00                         		dc.b 0
0000D330 05                         byte_CB8A:	dc.b 5			; FINAL
0000D331 F805 0014 DC               		dc.b $F8, 5, 0,	$14, $DC
0000D336 F801 0020 EC               		dc.b $F8, 1, 0,	$20, $EC
0000D33B F805 002E F4               		dc.b $F8, 5, 0,	$2E, $F4
0000D340 F805 0000 04               		dc.b $F8, 5, 0,	0, 4
0000D345 F805 0026 14               		dc.b $F8, 5, 0,	$26, $14
0000D34A                            		even
0000D34A                            ; ---------------------------------------------------------------------------
0000D34A                            ; Sprite mappings - "GAME OVER"	and "TIME OVER"
0000D34A                            ; ---------------------------------------------------------------------------
0000D34A                            Map_obj39:
0000D34A                            	include "_maps\obj39.asm"
0000D34A                            ; ---------------------------------------------------------------------------
0000D34A                            ; Sprite mappings - "GAME OVER"	and "TIME OVER"
0000D34A                            ; ---------------------------------------------------------------------------
0000D34A 0000                       		dc.w byte_CBAC-Map_obj39
0000D34C 0000                       		dc.w byte_CBB7-Map_obj39
0000D34E 0000                       		dc.w byte_CBC2-Map_obj39
0000D350 0000                       		dc.w byte_CBCD-Map_obj39
0000D352 02                         byte_CBAC:	dc.b 2
0000D353 F80D 0000 B8               		dc.b $F8, $D, 0, 0, $B8
0000D358 F80D 0008 D8               		dc.b $F8, $D, 0, 8, $D8
0000D35D 02                         byte_CBB7:	dc.b 2
0000D35E F80D 0014 08               		dc.b $F8, $D, 0, $14, 8
0000D363 F80D 000C 28               		dc.b $F8, $D, 0, $C, $28
0000D368 02                         byte_CBC2:	dc.b 2
0000D369 F809 001C C4               		dc.b $F8, 9, 0,	$1C, $C4
0000D36E F80D 0008 DC               		dc.b $F8, $D, 0, 8, $DC
0000D373 02                         byte_CBCD:	dc.b 2
0000D374 F80D 0014 0C               		dc.b $F8, $D, 0, $14, $C
0000D379 F80D 000C 2C               		dc.b $F8, $D, 0, $C, $2C
0000D37E                            		even
0000D37E                            		even
0000D37E                            
0000D37E                            ; ---------------------------------------------------------------------------
0000D37E                            ; Sprite mappings - "SONIC HAS PASSED" title card
0000D37E                            ; ---------------------------------------------------------------------------
0000D37E 0000                       Map_obj3A:	dc.w byte_CBEA-Map_obj3A
0000D380 0000                       		dc.w byte_CC13-Map_obj3A
0000D382 0000                       		dc.w byte_CC32-Map_obj3A
0000D384 0000                       		dc.w byte_CC51-Map_obj3A
0000D386 0000                       		dc.w byte_CC75-Map_obj3A
0000D388 FF6F                       		dc.w byte_CB47-Map_obj3A
0000D38A FF4E                       		dc.w byte_CB26-Map_obj3A
0000D38C FF59                       		dc.w byte_CB31-Map_obj3A
0000D38E FF64                       		dc.w byte_CB3C-Map_obj3A
0000D390 0F                         byte_CBEA:	dc.b $F	;  SONIC HAS | CADNIUM SULFIDE
0000D391 F805 0008 7C               		dc.b $F8, 5, 0, 8, $7C		; C
0000D396 F805 0000 8C               		dc.b $F8, 5, 0, 0, $8C		; A
0000D39B F805 000C 9C               		dc.b $F8, 5, 0, $0C, $9C	; D
0000D3A0 F805 002E AC               		dc.b $F8, 5, 0, $2E, $AC	; N
0000D3A5 F801 0020 BC               		dc.b $F8, 1, 0, $20, $BC	; I
0000D3AA F805 0046 C4               		dc.b $F8, 5, 0, $46, $C4	; U
0000D3AF F805 002A D4               		dc.b $F8, 5, 0, $2A, $D4	; M
0000D3B4 F800 0056 E4               		dc.b $F8, 0, 0, $56, $E4	; Space
0000D3B9 F805 003E F4               		dc.b $F8, 5, 0, $3E, $F4	; S
0000D3BE F805 0046 04               		dc.b $F8, 5, 0, $46, $4	; U
0000D3C3 F805 0026 14               		dc.b $F8, 5, 0, $26, $14	; L
0000D3C8 F805 0014 24               		dc.b $F8, 5, 0, $14, $24	; F
0000D3CD F801 0020 34               		dc.b $F8, 1, 0, $20, $34	; I
0000D3D2 F805 000C 3C               		dc.b $F8, 5, 0, $0C, $3C	; D
0000D3D7 F805 0010 4C               		dc.b $F8, 5, 0, $10, $4C	; E
0000D3DC 06                         byte_CC13:	dc.b 6			; PASSED
0000D3DD F805 0036 D0               		dc.b $F8, 5, 0,	$36, $D0
0000D3E2 F805 0000 E0               		dc.b $F8, 5, 0,	0, $E0
0000D3E7 F805 003E F0               		dc.b $F8, 5, 0,	$3E, $F0
0000D3EC F805 003E 00               		dc.b $F8, 5, 0,	$3E, 0
0000D3F1 F805 0010 10               		dc.b $F8, 5, 0,	$10, $10
0000D3F6 F805 000C 20               		dc.b $F8, 5, 0,	$C, $20
0000D3FB 06                         byte_CC32:	dc.b 6			; SCORE
0000D3FC F80D 014A B0               		dc.b $F8, $D, 1, $4A, $B0
0000D401 F801 0162 D0               		dc.b $F8, 1, 1,	$62, $D0
0000D406 F809 0164 18               		dc.b $F8, 9, 1,	$64, $18
0000D40B F80D 016A 30               		dc.b $F8, $D, 1, $6A, $30
0000D410 F704 006E CD               		dc.b $F7, 4, 0,	$6E, $CD
0000D415 FF04 186E CD               		dc.b $FF, 4, $18, $6E, $CD
0000D41A 07                         byte_CC51:	dc.b 7			; TIME BONUS
0000D41B F80D 015A B0               		dc.b $F8, $D, 1, $5A, $B0
0000D420 F80D 0066 D9               		dc.b $F8, $D, 0, $66, $D9
0000D425 F801 014A F9               		dc.b $F8, 1, 1,	$4A, $F9
0000D42A F704 006E F6               		dc.b $F7, 4, 0,	$6E, $F6
0000D42F FF04 186E F6               		dc.b $FF, 4, $18, $6E, $F6
0000D434 F80D FFF0 28               		dc.b $F8, $D, $FF, $F0,	$28
0000D439 F801 0170 48               		dc.b $F8, 1, 1,	$70, $48
0000D43E 07                         byte_CC75:	dc.b 7			; RING BONUS
0000D43F F80D 0152 B0               		dc.b $F8, $D, 1, $52, $B0
0000D444 F80D 0066 D9               		dc.b $F8, $D, 0, $66, $D9
0000D449 F801 014A F9               		dc.b $F8, 1, 1,	$4A, $F9
0000D44E F704 006E F6               		dc.b $F7, 4, 0,	$6E, $F6
0000D453 FF04 186E F6               		dc.b $FF, 4, $18, $6E, $F6
0000D458 F80D FFF8 28               		dc.b $F8, $D, $FF, $F8,	$28
0000D45D F801 0170 48               		dc.b $F8, 1, 1,	$70, $48
0000D462                            		even
0000D462                            ; ---------------------------------------------------------------------------
0000D462                            ; Sprite mappings - special stage results screen
0000D462                            ; ---------------------------------------------------------------------------
0000D462 0000                       Map_obj7E:	dc.w byte_CCAC-Map_obj7E
0000D464 0000                       		dc.w byte_CCEE-Map_obj7E
0000D466 0000                       		dc.w byte_CD0D-Map_obj7E
0000D468 FE8B                       		dc.w byte_CB47-Map_obj7E
0000D46A 0000                       		dc.w byte_CD31-Map_obj7E
0000D46C 0000                       		dc.w byte_CD46-Map_obj7E
0000D46E 0000                       		dc.w byte_CD5B-Map_obj7E
0000D470 0000                       		dc.w byte_CD6B-Map_obj7E
0000D472 0000                       		dc.w byte_CDA8-Map_obj7E
0000D474 0D                         byte_CCAC:	dc.b $D			; "CHAOS EMERALDS"
0000D475 F805 0008 90               		dc.b $F8, 5, 0,	8, $90
0000D47A F805 001C A0               		dc.b $F8, 5, 0,	$1C, $A0
0000D47F F805 0000 B0               		dc.b $F8, 5, 0,	0, $B0
0000D484 F805 0032 C0               		dc.b $F8, 5, 0,	$32, $C0
0000D489 F805 003E D0               		dc.b $F8, 5, 0,	$3E, $D0
0000D48E F805 0010 F0               		dc.b $F8, 5, 0,	$10, $F0
0000D493 F805 002A 00               		dc.b $F8, 5, 0,	$2A, 0
0000D498 F805 0010 10               		dc.b $F8, 5, 0,	$10, $10
0000D49D F805 003A 20               		dc.b $F8, 5, 0,	$3A, $20
0000D4A2 F805 0000 30               		dc.b $F8, 5, 0,	0, $30
0000D4A7 F805 0026 40               		dc.b $F8, 5, 0,	$26, $40
0000D4AC F805 000C 50               		dc.b $F8, 5, 0,	$C, $50
0000D4B1 F805 003E 60               		dc.b $F8, 5, 0,	$3E, $60
0000D4B6 06                         byte_CCEE:	dc.b 6			; "SCORE"
0000D4B7 F80D 014A B0               		dc.b $F8, $D, 1, $4A, $B0
0000D4BC F801 0162 D0               		dc.b $F8, 1, 1,	$62, $D0
0000D4C1 F809 0164 18               		dc.b $F8, 9, 1,	$64, $18
0000D4C6 F80D 016A 30               		dc.b $F8, $D, 1, $6A, $30
0000D4CB F704 006E CD               		dc.b $F7, 4, 0,	$6E, $CD
0000D4D0 FF04 186E CD               		dc.b $FF, 4, $18, $6E, $CD
0000D4D5 07                         byte_CD0D:	dc.b 7
0000D4D6 F80D 0152 B0               		dc.b $F8, $D, 1, $52, $B0
0000D4DB F80D 0066 D9               		dc.b $F8, $D, 0, $66, $D9
0000D4E0 F801 014A F9               		dc.b $F8, 1, 1,	$4A, $F9
0000D4E5 F704 006E F6               		dc.b $F7, 4, 0,	$6E, $F6
0000D4EA FF04 186E F6               		dc.b $FF, 4, $18, $6E, $F6
0000D4EF F80D FFF8 28               		dc.b $F8, $D, $FF, $F8,	$28
0000D4F4 F801 0170 48               		dc.b $F8, 1, 1,	$70, $48
0000D4F9 04                         byte_CD31:	dc.b 4
0000D4FA F80D FFD1 B0               		dc.b $F8, $D, $FF, $D1,	$B0
0000D4FF F80D FFD9 D0               		dc.b $F8, $D, $FF, $D9,	$D0
0000D504 F801 FFE1 F0               		dc.b $F8, 1, $FF, $E1, $F0
0000D509 F806 1FE3 40               		dc.b $F8, 6, $1F, $E3, $40
0000D50E 04                         byte_CD46:	dc.b 4
0000D50F F80D FFD1 B0               		dc.b $F8, $D, $FF, $D1,	$B0
0000D514 F80D FFD9 D0               		dc.b $F8, $D, $FF, $D9,	$D0
0000D519 F801 FFE1 F0               		dc.b $F8, 1, $FF, $E1, $F0
0000D51E F806 1FE9 40               		dc.b $F8, 6, $1F, $E9, $40
0000D523 03                         byte_CD5B:	dc.b 3
0000D524 F80D FFD1 B0               		dc.b $F8, $D, $FF, $D1,	$B0
0000D529 F80D FFD9 D0               		dc.b $F8, $D, $FF, $D9,	$D0
0000D52E F801 FFE1 F0               		dc.b $F8, 1, $FF, $E1, $F0
0000D533 0C                         byte_CD6B:	dc.b $C			; "SPECIAL STAGE"
0000D534 F805 003E 9C               		dc.b $F8, 5, 0,	$3E, $9C
0000D539 F805 0036 AC               		dc.b $F8, 5, 0,	$36, $AC
0000D53E F805 0010 BC               		dc.b $F8, 5, 0,	$10, $BC
0000D543 F805 0008 CC               		dc.b $F8, 5, 0,	8, $CC
0000D548 F801 0020 DC               		dc.b $F8, 1, 0,	$20, $DC
0000D54D F805 0000 E4               		dc.b $F8, 5, 0,	0, $E4
0000D552 F805 0026 F4               		dc.b $F8, 5, 0,	$26, $F4
0000D557 F805 003E 14               		dc.b $F8, 5, 0,	$3E, $14
0000D55C F805 0042 24               		dc.b $F8, 5, 0,	$42, $24
0000D561 F805 0000 34               		dc.b $F8, 5, 0,	0, $34
0000D566 F805 0018 44               		dc.b $F8, 5, 0,	$18, $44
0000D56B F805 0010 54               		dc.b $F8, 5, 0,	$10, $54
0000D570 0F                         byte_CDA8:	dc.b $F			; "SONIC GOT THEM ALL"
0000D571 F805 003E 88               		dc.b $F8, 5, 0,	$3E, $88
0000D576 F805 0032 98               		dc.b $F8, 5, 0,	$32, $98
0000D57B F805 002E A8               		dc.b $F8, 5, 0,	$2E, $A8
0000D580 F801 0020 B8               		dc.b $F8, 1, 0,	$20, $B8
0000D585 F805 0008 C0               		dc.b $F8, 5, 0,	8, $C0
0000D58A F805 0018 D8               		dc.b $F8, 5, 0,	$18, $D8
0000D58F F805 0032 E8               		dc.b $F8, 5, 0,	$32, $E8
0000D594 F805 0042 F8               		dc.b $F8, 5, 0,	$42, $F8
0000D599 F805 0042 10               		dc.b $F8, 5, 0,	$42, $10
0000D59E F805 001C 20               		dc.b $F8, 5, 0,	$1C, $20
0000D5A3 F805 0010 30               		dc.b $F8, 5, 0,	$10, $30
0000D5A8 F805 002A 40               		dc.b $F8, 5, 0,	$2A, $40
0000D5AD F805 0000 58               		dc.b $F8, 5, 0,	0, $58
0000D5B2 F805 0026 68               		dc.b $F8, 5, 0,	$26, $68
0000D5B7 F805 0026 78               		dc.b $F8, 5, 0,	$26, $78
0000D5BC                            		even
0000D5BC                            ; ---------------------------------------------------------------------------
0000D5BC                            ; Sprite mappings - chaos emeralds from	the special stage results screen
0000D5BC                            ; ---------------------------------------------------------------------------
0000D5BC                            Map_obj7F:
0000D5BC                            	include "_maps\obj7F.asm"
0000D5BC                            ; ---------------------------------------------------------------------------
0000D5BC                            ; Sprite mappings - chaos emeralds from	the special stage results screen
0000D5BC                            ; ---------------------------------------------------------------------------
0000D5BC 0000                       		dc.w byte_CE02-Map_obj7F
0000D5BE 0000                       		dc.w byte_CE08-Map_obj7F
0000D5C0 0000                       		dc.w byte_CE0E-Map_obj7F
0000D5C2 0000                       		dc.w byte_CE14-Map_obj7F
0000D5C4 0000                       		dc.w byte_CE1A-Map_obj7F
0000D5C6 0000                       		dc.w byte_CE20-Map_obj7F
0000D5C8 0000                       		dc.w byte_CE26-Map_obj7F
0000D5CA 01                         byte_CE02:	dc.b 1
0000D5CB F805 2004 F8               		dc.b $F8, 5, $20, 4, $F8
0000D5D0 01                         byte_CE08:	dc.b 1
0000D5D1 F805 0000 F8               		dc.b $F8, 5, 0,	0, $F8
0000D5D6 01                         byte_CE0E:	dc.b 1
0000D5D7 F805 4004 F8               		dc.b $F8, 5, $40, 4, $F8
0000D5DC 01                         byte_CE14:	dc.b 1
0000D5DD F805 6004 F8               		dc.b $F8, 5, $60, 4, $F8
0000D5E2 01                         byte_CE1A:	dc.b 1
0000D5E3 F805 2008 F8               		dc.b $F8, 5, $20, 8, $F8
0000D5E8 01                         byte_CE20:	dc.b 1
0000D5E9 F805 200C F8               		dc.b $F8, 5, $20, $C, $F8
0000D5EE 00                         byte_CE26:	dc.b 0			; Blank frame
0000D5F0 00                         		even
0000D5F0 00                         		even
0000D5F0                            
0000D5F0                            ; ===========================================================================
0000D5F0                            ; ---------------------------------------------------------------------------
0000D5F0                            ; Object 36 - spikes
0000D5F0                            ; ---------------------------------------------------------------------------
0000D5F0                            
0000D5F0                            Obj36:					; XREF: Obj_Index
0000D5F0 7000                       		moveq	#0,d0
0000D5F2 1028 0024                  		move.b	$24(a0),d0
0000D5F6 323B 0000                  		move.w	Obj36_Index(pc,d0.w),d1
0000D5FA 4EFB 1000                  		jmp	Obj36_Index(pc,d1.w)
0000D5FE                            ; ===========================================================================
0000D5FE 0000                       Obj36_Index:	dc.w Obj36_Main-Obj36_Index
0000D600 0000                       		dc.w Obj36_Solid-Obj36_Index
0000D602                            
0000D602 0014                       Obj36_Var:	dc.b 0,	$14		; frame	number,	object width
0000D604 0110                       		dc.b 1,	$10
0000D606 0204                       		dc.b 2,	4
0000D608 031C                       		dc.b 3,	$1C
0000D60A 0440                       		dc.b 4,	$40
0000D60C 0510                       		dc.b 5,	$10
0000D60E                            ; ===========================================================================
0000D60E                            
0000D60E                            Obj36_Main:				; XREF: Obj36_Index
0000D60E 5428 0024                  		addq.b	#2,$24(a0)
0000D612 217C 0000 0000 0004        		move.l	#Map_obj36,4(a0)
0000D61A 317C 051B 0002             		move.w	#$51B,2(a0)
0000D620 0028 0004 0001             		ori.b	#4,1(a0)
0000D626 117C 0004 0018             		move.b	#4,$18(a0)
0000D62C 1028 0028                  		move.b	$28(a0),d0
0000D630 0228 000F 0028             		andi.b	#$F,$28(a0)
0000D636 0240 00F0                  		andi.w	#$F0,d0
0000D63A 43F9 0000 D602             		lea	(Obj36_Var).l,a1
0000D640 E648                       		lsr.w	#3,d0
0000D642 D2C0                       		adda.w	d0,a1
0000D644 1159 001A                  		move.b	(a1)+,$1A(a0)
0000D648 1159 0019                  		move.b	(a1)+,$19(a0)
0000D64C 3168 0008 0030             		move.w	8(a0),$30(a0)
0000D652 3168 000C 0032             		move.w	$C(a0),$32(a0)
0000D658                            
0000D658                            Obj36_Solid:				; XREF: Obj36_Index
0000D658 6100 0000                  		bsr.w	Obj36_Type0x	; make the object move
0000D65C 343C 0004                  		move.w	#4,d2
0000D660 0C28 0005 001A             		cmpi.b	#5,$1A(a0)	; is object type $5x ?
0000D666 6700                       		beq.s	Obj36_SideWays	; if yes, branch
0000D668 0C28 0001 001A             		cmpi.b	#1,$1A(a0)	; is object type $1x ?
0000D66E 6600                       		bne.s	Obj36_Upright	; if not, branch
0000D670 343C 0014                  		move.w	#$14,d2
0000D674                            
0000D674                            ; Spikes types $1x and $5x face	sideways
0000D674                            
0000D674                            Obj36_SideWays:				; XREF: Obj36_Solid
0000D674 323C 001B                  		move.w	#$1B,d1
0000D678 3602                       		move.w	d2,d3
0000D67A 5243                       		addq.w	#1,d3
0000D67C 3828 0008                  		move.w	8(a0),d4
0000D680 6100 0000                  		bsr.w	SolidObject
0000D684 0828 0003 0022             		btst	#3,$22(a0)
0000D68A 6600                       		bne.s	Obj36_Display
0000D68C 0C44 0001                  		cmpi.w	#1,d4
0000D690 6700                       		beq.s	Obj36_Hurt
0000D692 6000                       		bra.s	Obj36_Display
0000D694                            ; ===========================================================================
0000D694                            
0000D694                            ; Spikes types $0x, $2x, $3x and $4x face up or	down
0000D694                            
0000D694                            Obj36_Upright:				; XREF: Obj36_Solid
0000D694 7200                       		moveq	#0,d1
0000D696 1228 0019                  		move.b	$19(a0),d1
0000D69A 0641 000B                  		addi.w	#$B,d1
0000D69E 343C 0010                  		move.w	#$10,d2
0000D6A2 363C 0011                  		move.w	#$11,d3
0000D6A6 3828 0008                  		move.w	8(a0),d4
0000D6AA 6100 0000                  		bsr.w	SolidObject
0000D6AE 0828 0003 0022             		btst	#3,$22(a0)
0000D6B4 6600                       		bne.s	Obj36_Hurt
0000D6B6 4A44                       		tst.w	d4
0000D6B8 6A00                       		bpl.s	Obj36_Display
0000D6BA                            
0000D6BA                            Obj36_Hurt:				; XREF: Obj36_SideWays; Obj36_Upright
0000D6BA 4A38 FE2D                  		tst.b	($FFFFFE2D).w	; is Sonic invincible?
0000D6BE 6600                       		bne.s	Obj36_Display	; if yes, branch
0000D6C0 2F08                       		move.l	a0,-(sp)
0000D6C2 2448                       		movea.l	a0,a2
0000D6C4 41F8 D000                  		lea	($FFFFD000).w,a0
0000D6C8 0C28 0004 0024             		cmpi.b	#4,$24(a0)
0000D6CE 6400                       		bcc.s	loc_CF20
0000D6D0 2628 000C                  		move.l	$C(a0),d3
0000D6D4 3028 0012                  		move.w	$12(a0),d0
0000D6D8 48C0                       		ext.l	d0
0000D6DA E180                       		asl.l	#8,d0
0000D6DC 9680                       		sub.l	d0,d3
0000D6DE 2143 000C                  		move.l	d3,$C(a0)
0000D6E2 4EB9 0000 0000             		jsr	HurtSonic
0000D6E8                            
0000D6E8                            loc_CF20:
0000D6E8 205F                       		movea.l	(sp)+,a0
0000D6EA                            
0000D6EA                            Obj36_Display:
0000D6EA 6100 0000                  		bsr.w	DisplaySprite
0000D6EE 3028 0030                  		move.w	$30(a0),d0
0000D6F2 0240 FF80                  		andi.w	#$FF80,d0
0000D6F6 3238 F700                  		move.w	($FFFFF700).w,d1
0000D6FA 0441 0080                  		subi.w	#$80,d1
0000D6FE 0241 FF80                  		andi.w	#$FF80,d1
0000D702 9041                       		sub.w	d1,d0
0000D704 0C40 0280                  		cmpi.w	#$280,d0
0000D708 6200 0000                  		bhi.w	DeleteObject
0000D70C 4E75                       		rts	
0000D70E                            ; ===========================================================================
0000D70E                            
0000D70E                            Obj36_Type0x:				; XREF: Obj36_Solid
0000D70E 7000                       		moveq	#0,d0
0000D710 1028 0028                  		move.b	$28(a0),d0
0000D714 D040                       		add.w	d0,d0
0000D716 323B 0000                  		move.w	Obj36_TypeIndex(pc,d0.w),d1
0000D71A 4EFB 1000                  		jmp	Obj36_TypeIndex(pc,d1.w)
0000D71E                            ; ===========================================================================
0000D71E 0000                       Obj36_TypeIndex:dc.w Obj36_Type00-Obj36_TypeIndex
0000D720 0000                       		dc.w Obj36_Type01-Obj36_TypeIndex
0000D722 0000                       		dc.w Obj36_Type02-Obj36_TypeIndex
0000D724                            ; ===========================================================================
0000D724                            
0000D724                            Obj36_Type00:				; XREF: Obj36_TypeIndex
0000D724 4E75                       		rts			; don't move the object
0000D726                            ; ===========================================================================
0000D726                            
0000D726                            Obj36_Type01:				; XREF: Obj36_TypeIndex
0000D726 6100 0000                  		bsr.w	Obj36_Wait
0000D72A 7000                       		moveq	#0,d0
0000D72C 1028 0034                  		move.b	$34(a0),d0
0000D730 D068 0032                  		add.w	$32(a0),d0
0000D734 3140 000C                  		move.w	d0,$C(a0)	; move the object vertically
0000D738 4E75                       		rts	
0000D73A                            ; ===========================================================================
0000D73A                            
0000D73A                            Obj36_Type02:				; XREF: Obj36_TypeIndex
0000D73A 6100 0000                  		bsr.w	Obj36_Wait
0000D73E 7000                       		moveq	#0,d0
0000D740 1028 0034                  		move.b	$34(a0),d0
0000D744 D068 0030                  		add.w	$30(a0),d0
0000D748 3140 0008                  		move.w	d0,8(a0)	; move the object horizontally
0000D74C 4E75                       		rts	
0000D74E                            ; ===========================================================================
0000D74E                            
0000D74E                            Obj36_Wait:
0000D74E 4A68 0038                  		tst.w	$38(a0)		; is time delay	= zero?
0000D752 6700                       		beq.s	loc_CFA4	; if yes, branch
0000D754 5368 0038                  		subq.w	#1,$38(a0)	; subtract 1 from time delay
0000D758 6600                       		bne.s	locret_CFE6
0000D75A 4A28 0001                  		tst.b	1(a0)
0000D75E 6A00                       		bpl.s	locret_CFE6
0000D760 303C 00B6                  		move.w	#$B6,d0
0000D764 4EB9 0000 15C0             		jsr	(PlaySound_Special).l ;	play "spikes moving" sound
0000D76A 6000                       		bra.s	locret_CFE6
0000D76C                            ; ===========================================================================
0000D76C                            
0000D76C                            loc_CFA4:
0000D76C 4A68 0036                  		tst.w	$36(a0)
0000D770 6700                       		beq.s	loc_CFC6
0000D772 0468 0800 0034             		subi.w	#$800,$34(a0)
0000D778 6400                       		bcc.s	locret_CFE6
0000D77A 317C 0000 0034             		move.w	#0,$34(a0)
0000D780 317C 0000 0036             		move.w	#0,$36(a0)
0000D786 317C 003C 0038             		move.w	#60,$38(a0)	; set time delay to 1 second
0000D78C 6000                       		bra.s	locret_CFE6
0000D78E                            ; ===========================================================================
0000D78E                            
0000D78E                            loc_CFC6:
0000D78E 0668 0800 0034             		addi.w	#$800,$34(a0)
0000D794 0C68 2000 0034             		cmpi.w	#$2000,$34(a0)
0000D79A 6500                       		bcs.s	locret_CFE6
0000D79C 317C 2000 0034             		move.w	#$2000,$34(a0)
0000D7A2 317C 0001 0036             		move.w	#1,$36(a0)
0000D7A8 317C 003C 0038             		move.w	#60,$38(a0)	; set time delay to 1 second
0000D7AE                            
0000D7AE                            locret_CFE6:
0000D7AE 4E75                       		rts	
0000D7B0                            ; ===========================================================================
0000D7B0                            ; ---------------------------------------------------------------------------
0000D7B0                            ; Sprite mappings - spikes
0000D7B0                            ; ---------------------------------------------------------------------------
0000D7B0                            Map_obj36:
0000D7B0                            	include "_maps\obj36.asm"
0000D7B0                            Map_obj36_inner:
0000D7B0 0000                       Map_obj36_inner_0: 	dc.w Map_obj36_inner_C-Map_obj36_inner
0000D7B2 0000                       Map_obj36_inner_2: 	dc.w Map_obj36_inner_1C-Map_obj36_inner
0000D7B4 0000                       Map_obj36_inner_4: 	dc.w Map_obj36_inner_2C-Map_obj36_inner
0000D7B6 0000                       Map_obj36_inner_6: 	dc.w Map_obj36_inner_32-Map_obj36_inner
0000D7B8 0000                       Map_obj36_inner_8: 	dc.w Map_obj36_inner_42-Map_obj36_inner
0000D7BA 0000                       Map_obj36_inner_A: 	dc.w Map_obj36_inner_61-Map_obj36_inner
0000D7BC 03                         Map_obj36_inner_C: 	dc.b $3
0000D7BD F003 0004 EC               	dc.b $F0, $3, $0, $4, $EC
0000D7C2 F003 0004 FC               	dc.b $F0, $3, $0, $4, $FC
0000D7C7 F003 0004 0C               	dc.b $F0, $3, $0, $4, $C
0000D7CC 03                         Map_obj36_inner_1C: 	dc.b $3
0000D7CD EC0C 0000 F0               	dc.b $EC, $C, $0, $0, $F0
0000D7D2 FC0C 0000 F0               	dc.b $FC, $C, $0, $0, $F0
0000D7D7 0C0C 0000 F0               	dc.b $C, $C, $0, $0, $F0
0000D7DC 01                         Map_obj36_inner_2C: 	dc.b $1
0000D7DD F003 0004 FC               	dc.b $F0, $3, $0, $4, $FC
0000D7E2 03                         Map_obj36_inner_32: 	dc.b $3
0000D7E3 F003 0004 E4               	dc.b $F0, $3, $0, $4, $E4
0000D7E8 F003 0004 FC               	dc.b $F0, $3, $0, $4, $FC
0000D7ED F003 0004 14               	dc.b $F0, $3, $0, $4, $14
0000D7F2 06                         Map_obj36_inner_42: 	dc.b $6
0000D7F3 F003 0004 C0               	dc.b $F0, $3, $0, $4, $C0
0000D7F8 F003 0004 D8               	dc.b $F0, $3, $0, $4, $D8
0000D7FD F003 0004 F0               	dc.b $F0, $3, $0, $4, $F0
0000D802 F003 0004 08               	dc.b $F0, $3, $0, $4, $8
0000D807 F003 0004 20               	dc.b $F0, $3, $0, $4, $20
0000D80C F003 0004 38               	dc.b $F0, $3, $0, $4, $38
0000D811 01                         Map_obj36_inner_61: 	dc.b $1
0000D812 FC0C 0000 F0               	dc.b $FC, $C, $0, $0, $F0
0000D818 00                         	even
0000D818 00                         	even
0000D818                            
0000D818                            ; ===========================================================================
0000D818                            ; ---------------------------------------------------------------------------
0000D818                            ; Object 3B - purple rock (GHZ)
0000D818                            ; ---------------------------------------------------------------------------
0000D818                            
0000D818                            Obj3B:					; XREF: Obj_Index
0000D818 7000                       		moveq	#0,d0
0000D81A 1028 0024                  		move.b	$24(a0),d0
0000D81E 323B 0000                  		move.w	Obj3B_Index(pc,d0.w),d1
0000D822 4EFB 1000                  		jmp	Obj3B_Index(pc,d1.w)
0000D826                            ; ===========================================================================
0000D826 0000                       Obj3B_Index:	dc.w Obj3B_Main-Obj3B_Index
0000D828 0000                       		dc.w Obj3B_Solid-Obj3B_Index
0000D82A                            ; ===========================================================================
0000D82A                            
0000D82A                            Obj3B_Main:				; XREF: Obj3B_Index
0000D82A 5428 0024                  		addq.b	#2,$24(a0)
0000D82E 217C 0000 0000 0004        		move.l	#Map_obj3B,4(a0)
0000D836 317C 63D0 0002             		move.w	#$63D0,2(a0)
0000D83C 117C 0004 0001             		move.b	#4,1(a0)
0000D842 117C 0013 0019             		move.b	#$13,$19(a0)
0000D848 117C 0004 0018             		move.b	#4,$18(a0)
0000D84E                            
0000D84E                            Obj3B_Solid:				; XREF: Obj3B_Index
0000D84E 323C 001B                  		move.w	#$1B,d1
0000D852 343C 0010                  		move.w	#$10,d2
0000D856 363C 0010                  		move.w	#$10,d3
0000D85A 3828 0008                  		move.w	8(a0),d4
0000D85E 6100 0000                  		bsr.w	SolidObject
0000D862 6100 0000                  		bsr.w	DisplaySprite
0000D866 3028 0008                  		move.w	8(a0),d0
0000D86A 0240 FF80                  		andi.w	#$FF80,d0
0000D86E 3238 F700                  		move.w	($FFFFF700).w,d1
0000D872 0441 0080                  		subi.w	#$80,d1
0000D876 0241 FF80                  		andi.w	#$FF80,d1
0000D87A 9041                       		sub.w	d1,d0
0000D87C 0C40 0280                  		cmpi.w	#$280,d0
0000D880 6200 0000                  		bhi.w	DeleteObject
0000D884 4E75                       		rts	
0000D886                            ; ===========================================================================
0000D886                            ; ---------------------------------------------------------------------------
0000D886                            ; Object 49 - waterfall	sound effect (GHZ)
0000D886                            ; ---------------------------------------------------------------------------
0000D886                            
0000D886                            Obj49:					; XREF: Obj_Index
0000D886 7000                       		moveq	#0,d0
0000D888 1028 0024                  		move.b	$24(a0),d0
0000D88C 323B 0000                  		move.w	Obj49_Index(pc,d0.w),d1
0000D890 4EFB 1000                  		jmp	Obj49_Index(pc,d1.w)
0000D894                            ; ===========================================================================
0000D894 0000                       Obj49_Index:	dc.w Obj49_Main-Obj49_Index
0000D896 0000                       		dc.w Obj49_PlaySnd-Obj49_Index
0000D898                            ; ===========================================================================
0000D898                            
0000D898                            Obj49_Main:				; XREF: Obj49_Index
0000D898 5428 0024                  		addq.b	#2,$24(a0)
0000D89C 117C 0004 0001             		move.b	#4,1(a0)
0000D8A2                            
0000D8A2                            Obj49_PlaySnd:				; XREF: Obj49_Index
0000D8A2 1038 FE0F                  		move.b	($FFFFFE0F).w,d0
0000D8A6 0200 003F                  		andi.b	#$3F,d0
0000D8AA 6600                       		bne.s	Obj49_ChkDel
0000D8AC 303C 00D0                  		move.w	#$D0,d0
0000D8B0 4EB9 0000 15C0             		jsr	(PlaySound_Special).l ;	play waterfall sound
0000D8B6                            
0000D8B6                            Obj49_ChkDel:
0000D8B6 3028 0008                  		move.w	8(a0),d0
0000D8BA 0240 FF80                  		andi.w	#$FF80,d0
0000D8BE 3238 F700                  		move.w	($FFFFF700).w,d1
0000D8C2 0441 0080                  		subi.w	#$80,d1
0000D8C6 0241 FF80                  		andi.w	#$FF80,d1
0000D8CA 9041                       		sub.w	d1,d0
0000D8CC 0C40 0280                  		cmpi.w	#$280,d0
0000D8D0 6200 0000                  		bhi.w	DeleteObject
0000D8D4 4E75                       		rts	
0000D8D6                            ; ===========================================================================
0000D8D6                            ; ---------------------------------------------------------------------------
0000D8D6                            ; Sprite mappings - purple rock	(GHZ)
0000D8D6                            ; ---------------------------------------------------------------------------
0000D8D6                            Map_obj3B:
0000D8D6                            	include "_maps\obj3B.asm"
0000D8D6                            ; ---------------------------------------------------------------------------
0000D8D6                            ; Sprite mappings - purple rock	(GHZ)
0000D8D6                            ; ---------------------------------------------------------------------------
0000D8D6 0000                       		dc.w byte_D110-Map_obj3B
0000D8D8 02                         byte_D110:	dc.b 2
0000D8D9 F00B 0000 E8               		dc.b $F0, $B, 0, 0, $E8
0000D8DE F00B 000C 00               		dc.b $F0, $B, 0, $C, 0
0000D8E4 00                         		even
0000D8E4 00                         		even
0000D8E4                            
0000D8E4                            ; ===========================================================================
0000D8E4                            ; ---------------------------------------------------------------------------
0000D8E4                            ; Object 3C - smashable	wall (GHZ, SLZ)
0000D8E4                            ; ---------------------------------------------------------------------------
0000D8E4                            
0000D8E4                            Obj3C:					; XREF: Obj_Index
0000D8E4 7000                       		moveq	#0,d0
0000D8E6 1028 0024                  		move.b	$24(a0),d0
0000D8EA 323B 0000                  		move.w	Obj3C_Index(pc,d0.w),d1
0000D8EE 4EBB 1000                  		jsr	Obj3C_Index(pc,d1.w)
0000D8F2 6000 0000                  		bra.w	MarkObjGone
0000D8F6                            ; ===========================================================================
0000D8F6 0000                       Obj3C_Index:	dc.w Obj3C_Main-Obj3C_Index
0000D8F8 0000                       		dc.w Obj3C_Solid-Obj3C_Index
0000D8FA 0000                       		dc.w Obj3C_FragMove-Obj3C_Index
0000D8FC                            ; ===========================================================================
0000D8FC                            
0000D8FC                            Obj3C_Main:				; XREF: Obj3C_Index
0000D8FC 5428 0024                  		addq.b	#2,$24(a0)
0000D900 217C 0000 0000 0004        		move.l	#Map_obj3C,4(a0)
0000D908 317C 450F 0002             		move.w	#$450F,2(a0)
0000D90E 117C 0004 0001             		move.b	#4,1(a0)
0000D914 117C 0010 0019             		move.b	#$10,$19(a0)
0000D91A 117C 0004 0018             		move.b	#4,$18(a0)
0000D920 1168 0028 001A             		move.b	$28(a0),$1A(a0)
0000D926                            
0000D926                            Obj3C_Solid:				; XREF: Obj3C_Index
0000D926 3178 D010 0030             		move.w	($FFFFD010).w,$30(a0) ;	load Sonic's horizontal speed
0000D92C 323C 001B                  		move.w	#$1B,d1
0000D930 343C 0020                  		move.w	#$20,d2
0000D934 363C 0020                  		move.w	#$20,d3
0000D938 3828 0008                  		move.w	8(a0),d4
0000D93C 6100 0000                  		bsr.w	SolidObject
0000D940 0828 0005 0022             		btst	#5,$22(a0)
0000D946 6600                       		bne.s	Obj3C_ChkRoll
0000D948                            
0000D948                            locret_D180:
0000D948 4E75                       		rts	
0000D94A                            ; ===========================================================================
0000D94A                            
0000D94A                            Obj3C_ChkRoll:				; XREF: Obj3C_Solid
0000D94A 0C29 0002 001C             		cmpi.b	#2,$1C(a1)	; is Sonic rolling?
0000D950 66F6                       		bne.s	locret_D180	; if not, branch
0000D952 3028 0030                  		move.w	$30(a0),d0
0000D956 6A00                       		bpl.s	Obj3C_ChkSpeed
0000D958 4440                       		neg.w	d0
0000D95A                            
0000D95A                            Obj3C_ChkSpeed:
0000D95A 0C40 0480                  		cmpi.w	#$480,d0	; is Sonic's speed $480 or higher?
0000D95E 65E8                       		bcs.s	locret_D180	; if not, branch
0000D960 3368 0030 0010             		move.w	$30(a0),$10(a1)
0000D966 5869 0008                  		addq.w	#4,8(a1)
0000D96A 49F9 0000 0000             		lea	(Obj3C_FragSpd1).l,a4 ;	use fragments that move	right
0000D970 3028 0008                  		move.w	8(a0),d0
0000D974 B069 0008                  		cmp.w	8(a1),d0	; is Sonic to the right	of the block?
0000D978 6500                       		bcs.s	Obj3C_Smash	; if yes, branch
0000D97A 5169 0008                  		subq.w	#8,8(a1)
0000D97E 49F9 0000 0000             		lea	(Obj3C_FragSpd2).l,a4 ;	use fragments that move	left
0000D984                            
0000D984                            Obj3C_Smash:
0000D984 3369 0010 0014             		move.w	$10(a1),$14(a1)
0000D98A 08A8 0005 0022             		bclr	#5,$22(a0)
0000D990 08A9 0005 0022             		bclr	#5,$22(a1)
0000D996 7207                       		moveq	#7,d1		; load 8 fragments
0000D998 343C 0070                  		move.w	#$70,d2
0000D99C 6100                       		bsr.s	SmashObject
0000D99E                            
0000D99E                            Obj3C_FragMove:				; XREF: Obj3C_Index
0000D99E 6100 0000                  		bsr.w	SpeedToPos
0000D9A2 0668 0070 0012             		addi.w	#$70,$12(a0)	; make fragment	fall faster
0000D9A8 6100 0000                  		bsr.w	DisplaySprite
0000D9AC 4A28 0001                  		tst.b	1(a0)
0000D9B0 6A00 0000                  		bpl.w	DeleteObject
0000D9B4 4E75                       		rts	
0000D9B6                            
0000D9B6                            ; ---------------------------------------------------------------------------
0000D9B6                            ; Subroutine to	smash a	block (GHZ walls and MZ	blocks)
0000D9B6                            ; ---------------------------------------------------------------------------
0000D9B6                            
0000D9B6                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000D9B6                            
0000D9B6                            
0000D9B6                            SmashObject:				; XREF: Obj3C_Smash
0000D9B6 7000                       		moveq	#0,d0
0000D9B8 1028 001A                  		move.b	$1A(a0),d0
0000D9BC D040                       		add.w	d0,d0
0000D9BE 2668 0004                  		movea.l	4(a0),a3
0000D9C2 D6F3 0000                  		adda.w	(a3,d0.w),a3
0000D9C6 524B                       		addq.w	#1,a3
0000D9C8 08E8 0005 0001             		bset	#5,1(a0)
0000D9CE 1810                       		move.b	0(a0),d4
0000D9D0 1A28 0001                  		move.b	1(a0),d5
0000D9D4 2248                       		movea.l	a0,a1
0000D9D6 6000                       		bra.s	Smash_LoadFrag
0000D9D8                            ; ===========================================================================
0000D9D8                            
0000D9D8                            Smash_Loop:
0000D9D8 6100 0000                  		bsr.w	SingleObjLoad
0000D9DC 6600                       		bne.s	Smash_PlaySnd
0000D9DE 5A4B                       		addq.w	#5,a3
0000D9E0                            
0000D9E0                            Smash_LoadFrag:				; XREF: SmashObject
0000D9E0 137C 0004 0024             		move.b	#4,$24(a1)
0000D9E6 1284                       		move.b	d4,0(a1)
0000D9E8 234B 0004                  		move.l	a3,4(a1)
0000D9EC 1345 0001                  		move.b	d5,1(a1)
0000D9F0 3368 0008 0008             		move.w	8(a0),8(a1)
0000D9F6 3368 000C 000C             		move.w	$C(a0),$C(a1)
0000D9FC 3368 0002 0002             		move.w	2(a0),2(a1)
0000DA02 1368 0018 0018             		move.b	$18(a0),$18(a1)
0000DA08 1368 0019 0019             		move.b	$19(a0),$19(a1)
0000DA0E 335C 0010                  		move.w	(a4)+,$10(a1)
0000DA12 335C 0012                  		move.w	(a4)+,$12(a1)
0000DA16 B3C8                       		cmpa.l	a0,a1
0000DA18 6400                       		bcc.s	loc_D268
0000DA1A 2F08                       		move.l	a0,-(sp)
0000DA1C 2049                       		movea.l	a1,a0
0000DA1E 6100 0000                  		bsr.w	SpeedToPos
0000DA22 D568 0012                  		add.w	d2,$12(a0)
0000DA26 205F                       		movea.l	(sp)+,a0
0000DA28 6100 0000                  		bsr.w	DisplaySprite2
0000DA2C                            
0000DA2C                            loc_D268:
0000DA2C 51C9 FFAA                  		dbf	d1,Smash_Loop
0000DA30                            
0000DA30                            Smash_PlaySnd:
0000DA30 303C 00CB                  		move.w	#$CB,d0
0000DA34 4EF9 0000 15C0             		jmp	(PlaySound_Special).l ;	play smashing sound
0000DA3A                            ; End of function SmashObject
0000DA3A                            
0000DA3A                            ; ===========================================================================
0000DA3A                            ; Smashed block	fragment speeds
0000DA3A                            ;
0000DA3A 0400 FB00                  Obj3C_FragSpd1:	dc.w $400, $FB00	; x-move speed,	y-move speed
0000DA3E 0600 FF00                  		dc.w $600, $FF00
0000DA42 0600 0100                  		dc.w $600, $100
0000DA46 0400 0500                  		dc.w $400, $500
0000DA4A 0600 FA00                  		dc.w $600, $FA00
0000DA4E 0800 FE00                  		dc.w $800, $FE00
0000DA52 0800 0200                  		dc.w $800, $200
0000DA56 0600 0600                  		dc.w $600, $600
0000DA5A                            
0000DA5A FA00 FA00                  Obj3C_FragSpd2:	dc.w $FA00, $FA00
0000DA5E F800 FE00                  		dc.w $F800, $FE00
0000DA62 F800 0200                  		dc.w $F800, $200
0000DA66 FA00 0600                  		dc.w $FA00, $600
0000DA6A FC00 FB00                  		dc.w $FC00, $FB00
0000DA6E FA00 FF00                  		dc.w $FA00, $FF00
0000DA72 FA00 0100                  		dc.w $FA00, $100
0000DA76 FC00 0500                  		dc.w $FC00, $500
0000DA7A                            ; ---------------------------------------------------------------------------
0000DA7A                            ; Sprite mappings - smashable walls (GHZ, SLZ)
0000DA7A                            ; ---------------------------------------------------------------------------
0000DA7A                            Map_obj3C:
0000DA7A                            	include "_maps\obj3C.asm"
0000DA7A                            ; ---------------------------------------------------------------------------
0000DA7A                            ; Sprite mappings - smashable walls (GHZ, SLZ)
0000DA7A                            ; ---------------------------------------------------------------------------
0000DA7A 0000                       		dc.w byte_D2BC-Map_obj3C
0000DA7C 0000                       		dc.w byte_D2E5-Map_obj3C
0000DA7E 0000                       		dc.w byte_D30E-Map_obj3C
0000DA80 08                         byte_D2BC:	dc.b 8
0000DA81 E005 0000 F0               		dc.b $E0, 5, 0,	0, $F0
0000DA86 F005 0000 F0               		dc.b $F0, 5, 0,	0, $F0
0000DA8B 0005 0000 F0               		dc.b 0,	5, 0, 0, $F0
0000DA90 1005 0000 F0               		dc.b $10, 5, 0,	0, $F0
0000DA95 E005 0004 00               		dc.b $E0, 5, 0,	4, 0
0000DA9A F005 0004 00               		dc.b $F0, 5, 0,	4, 0
0000DA9F 0005 0004 00               		dc.b 0,	5, 0, 4, 0
0000DAA4 1005 0004 00               		dc.b $10, 5, 0,	4, 0
0000DAA9 08                         byte_D2E5:	dc.b 8
0000DAAA E005 0004 F0               		dc.b $E0, 5, 0,	4, $F0
0000DAAF F005 0004 F0               		dc.b $F0, 5, 0,	4, $F0
0000DAB4 0005 0004 F0               		dc.b 0,	5, 0, 4, $F0
0000DAB9 1005 0004 F0               		dc.b $10, 5, 0,	4, $F0
0000DABE E005 0004 00               		dc.b $E0, 5, 0,	4, 0
0000DAC3 F005 0004 00               		dc.b $F0, 5, 0,	4, 0
0000DAC8 0005 0004 00               		dc.b 0,	5, 0, 4, 0
0000DACD 1005 0004 00               		dc.b $10, 5, 0,	4, 0
0000DAD2 08                         byte_D30E:	dc.b 8
0000DAD3 E005 0004 F0               		dc.b $E0, 5, 0,	4, $F0
0000DAD8 F005 0004 F0               		dc.b $F0, 5, 0,	4, $F0
0000DADD 0005 0004 F0               		dc.b 0,	5, 0, 4, $F0
0000DAE2 1005 0004 F0               		dc.b $10, 5, 0,	4, $F0
0000DAE7 E005 0008 00               		dc.b $E0, 5, 0,	8, 0
0000DAEC F005 0008 00               		dc.b $F0, 5, 0,	8, 0
0000DAF1 0005 0008 00               		dc.b 0,	5, 0, 8, 0
0000DAF6 1005 0008 00               		dc.b $10, 5, 0,	8, 0
0000DAFC 00                         		even
0000DAFC 00                         		even
0000DAFC                            
0000DAFC                            ; ---------------------------------------------------------------------------
0000DAFC                            ; Object code loading subroutine
0000DAFC                            ; ---------------------------------------------------------------------------
0000DAFC                            
0000DAFC                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000DAFC                            
0000DAFC                            
0000DAFC                            ObjectsLoad:				; XREF: TitleScreen; et al
0000DAFC 41F8 D000                  		lea	($FFFFD000).w,a0 ; set address for object RAM
0000DB00 7E7F                       		moveq	#$7F,d7
0000DB02 7000                       		moveq	#0,d0
0000DB04 0C38 0006 D024             		cmpi.b	#6,($FFFFD024).w
0000DB0A 6400                       		bcc.s	loc_D362
0000DB0C                            
0000DB0C                            loc_D348:
0000DB0C 1010                       		move.b	(a0),d0		; load object number from RAM
0000DB0E 6700                       		beq.s	loc_D358
0000DB10 D040                       		add.w	d0,d0
0000DB12 D040                       		add.w	d0,d0
0000DB14 227B 0000                  		movea.l	Obj_Index-4(pc,d0.w),a1
0000DB18 4E91                       		jsr	(a1)		; run the object's code
0000DB1A 7000                       		moveq	#0,d0
0000DB1C                            
0000DB1C                            loc_D358:
0000DB1C 41E8 0040                  		lea	$40(a0),a0	; next object
0000DB20 51CF FFEA                  		dbf	d7,loc_D348
0000DB24 4E75                       		rts	
0000DB26                            ; ===========================================================================
0000DB26                            
0000DB26                            loc_D362:
0000DB26 7E1F                       		moveq	#$1F,d7
0000DB28 61E2                       		bsr.s	loc_D348
0000DB2A 7E5F                       		moveq	#$5F,d7
0000DB2C                            
0000DB2C                            loc_D368:
0000DB2C 7000                       		moveq	#0,d0
0000DB2E 1010                       		move.b	(a0),d0
0000DB30 6700                       		beq.s	loc_D378
0000DB32 4A28 0001                  		tst.b	1(a0)
0000DB36 6A00                       		bpl.s	loc_D378
0000DB38 6100 0000                  		bsr.w	DisplaySprite
0000DB3C                            
0000DB3C                            loc_D378:
0000DB3C 41E8 0040                  		lea	$40(a0),a0
0000DB40                            
0000DB40                            loc_D37C:
0000DB40 51CF FFEA                  		dbf	d7,loc_D368
0000DB44 4E75                       		rts	
0000DB46                            ; End of function ObjectsLoad
0000DB46                            
0000DB46                            ; ===========================================================================
0000DB46                            ; ---------------------------------------------------------------------------
0000DB46                            ; Object pointers
0000DB46                            ; ---------------------------------------------------------------------------
0000DB46                            Obj_Index:
0000DB46                            	include "_inc\Object pointers.asm"
0000DB46                            ; ---------------------------------------------------------------------------
0000DB46                            ; Object pointers
0000DB46                            ; ---------------------------------------------------------------------------
0000DB46 0000 0000 0000 0000 0000+  	dc.l Obj01, ObjectFall,	ObjectFall, ObjectFall
0000DB56 0000 0000 0000 0000 0000+  	dc.l ObjectFall, ObjectFall, ObjectFall, Obj08
0000DB66 0000 0000 0000 0000 0000+  	dc.l Obj09, Obj0A, Obj0B, Obj0C
0000DB76 0000 0000 0000 AD8C 0000+  	dc.l Obj0D, Obj0E, Obj0F, Obj10
0000DB86 0000 7928 0000 0000 0000+  	dc.l Obj11, Obj12, Obj13, Obj14
0000DB96 0000 7F4E 0000 0000 0000+  	dc.l Obj15, Obj16, Obj17, Obj18
0000DBA6 0000 879C 0000 8896 0000+  	dc.l Obj19, Obj1A, Obj1B, Obj1C
0000DBB6 0000 8EE0 0000 91CE 0000+  	dc.l Obj1D, Obj1E, Obj1F, Obj20
0000DBC6 0000 0000 0000 9E88 0000+  	dc.l Obj21, Obj22, Obj23, Obj24
0000DBD6 0000 A1C0 0000 A7AC 0000+  	dc.l Obj25, Obj26, Obj27, Obj28
0000DBE6 0000 9AE4 0000 8FB6 0000+  	dc.l Obj29, Obj2A, Obj2B, Obj2C
0000DBF6 0000 B384 0000 A9A0 0000+  	dc.l Obj2D, Obj2E, Obj2F, Obj30
0000DC06 0000 BD98 0000 C446 0000+  	dc.l Obj31, Obj32, Obj33, Obj34
0000DC16 0000 B8F6 0000 D5F0 0000+  	dc.l Obj35, Obj36, Obj37, Obj38
0000DC26 0000 CBCC 0000 CC86 0000+  	dc.l Obj39, Obj3A, Obj3B, Obj3C
0000DC36 0000 0000 0000 0000 0000+  	dc.l Obj3D, Obj3E, Obj3F, Obj40
0000DC46 0000 0000 0000 0000 0000+  	dc.l Obj41, Obj42, Obj43, Obj44
0000DC56 0000 C0B4 0000 0000 0000+  	dc.l Obj45, Obj46, Obj47, Obj48
0000DC66 0000 D886 0000 0000 0000+  	dc.l Obj49, Obj4A, Obj4B, Obj4C
0000DC76 0000 0000 0000 0000 0000+  	dc.l Obj4D, Obj4E, Obj4F, Obj50
0000DC86 0000 0000 0000 0000 0000+  	dc.l Obj51, Obj52, Obj53, Obj54
0000DC96 0000 0000 0000 0000 0000+  	dc.l Obj55, Obj56, Obj57, Obj58
0000DCA6 0000 0000 0000 0000 0000+  	dc.l Obj59, Obj5A, Obj5B, Obj5C
0000DCB6 0000 0000 0000 0000 0000+  	dc.l Obj5D, Obj5E, Obj5F, Obj60
0000DCC6 0000 0000 0000 0000 0000+  	dc.l Obj61, Obj62, Obj63, Obj64
0000DCD6 0000 0000 0000 0000 0000+  	dc.l Obj65, Obj66, Obj67, Obj68
0000DCE6 0000 0000 0000 0000 0000+  	dc.l Obj69, Obj6A, Obj6B, Obj6C
0000DCF6 0000 0000 0000 0000 0000+  	dc.l Obj6D, Obj6E, Obj6F, Obj70
0000DD06 0000 0000 0000 0000 0000+  	dc.l Obj71, Obj72, Obj73, Obj74
0000DD16 0000 0000 0000 0000 0000+  	dc.l Obj75, Obj76, Obj77, Obj78
0000DD26 0000 0000 0000 0000 0000+  	dc.l Obj79, Obj7A, Obj7B, Obj7C
0000DD36 0000 0000 0000 CEC0 0000+  	dc.l Obj7D, Obj7E, Obj7F, Obj80
0000DD46 0000 5434 0000 0000 0000+  	dc.l Obj81, Obj82, Obj83, Obj84
0000DD56 0000 0000 0000 0000 0000+  	dc.l Obj85, Obj86, Obj87, Obj88
0000DD66 0000 5AEE 0000 0000 0000+  	dc.l Obj89, Obj8A, Obj8B, Obj8C
0000DD66 0000 5AEE 0000 0000 0000+  	dc.l Obj89, Obj8A, Obj8B, Obj8C
0000DD76                            
0000DD76                            ; ---------------------------------------------------------------------------
0000DD76                            ; Subroutine to	make an	object fall downwards, increasingly fast
0000DD76                            ; ---------------------------------------------------------------------------
0000DD76                            
0000DD76                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000DD76                            
0000DD76                            
0000DD76                            ObjectFall:
0000DD76 2428 0008                  		move.l	8(a0),d2
0000DD7A 2628 000C                  		move.l	$C(a0),d3
0000DD7E 3028 0010                  		move.w	$10(a0),d0
0000DD82 48C0                       		ext.l	d0
0000DD84 E180                       		asl.l	#8,d0
0000DD86 D480                       		add.l	d0,d2
0000DD88 3028 0012                  		move.w	$12(a0),d0
0000DD8C 0668 0038 0012             		addi.w	#$38,$12(a0)	; increase vertical speed
0000DD92 48C0                       		ext.l	d0
0000DD94 E180                       		asl.l	#8,d0
0000DD96 D680                       		add.l	d0,d3
0000DD98 2142 0008                  		move.l	d2,8(a0)
0000DD9C 2143 000C                  		move.l	d3,$C(a0)
0000DDA0 4E75                       		rts	
0000DDA2                            ; End of function ObjectFall
0000DDA2                            
0000DDA2                            ; ---------------------------------------------------------------------------
0000DDA2                            ; Subroutine translating object	speed to update	object position
0000DDA2                            ; ---------------------------------------------------------------------------
0000DDA2                            
0000DDA2                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000DDA2                            
0000DDA2                            
0000DDA2                            SpeedToPos:
0000DDA2 2428 0008                  		move.l	8(a0),d2
0000DDA6 2628 000C                  		move.l	$C(a0),d3
0000DDAA 3028 0010                  		move.w	$10(a0),d0	; load horizontal speed
0000DDAE 48C0                       		ext.l	d0
0000DDB0 E180                       		asl.l	#8,d0		; multiply speed by $100
0000DDB2 D480                       		add.l	d0,d2		; add to x-axis	position
0000DDB4 3028 0012                  		move.w	$12(a0),d0	; load vertical	speed
0000DDB8 48C0                       		ext.l	d0
0000DDBA E180                       		asl.l	#8,d0		; multiply by $100
0000DDBC D680                       		add.l	d0,d3		; add to y-axis	position
0000DDBE 2142 0008                  		move.l	d2,8(a0)	; update x-axis	position
0000DDC2 2143 000C                  		move.l	d3,$C(a0)	; update y-axis	position
0000DDC6 4E75                       		rts	
0000DDC8                            ; End of function SpeedToPos
0000DDC8                            
0000DDC8                            ; ---------------------------------------------------------------------------
0000DDC8                            ; Subroutine to	display	a sprite/object, when a0 is the	object RAM
0000DDC8                            ; ---------------------------------------------------------------------------
0000DDC8                            
0000DDC8                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000DDC8                            
0000DDC8                            
0000DDC8                            DisplaySprite:
0000DDC8 43F8 AC00                  		lea	($FFFFAC00).w,a1
0000DDCC 3028 0018                  		move.w	$18(a0),d0
0000DDD0 E248                       		lsr.w	#1,d0
0000DDD2 0240 0380                  		andi.w	#$380,d0
0000DDD6 D2C0                       		adda.w	d0,a1
0000DDD8 0C51 007E                  		cmpi.w	#$7E,(a1)
0000DDDC 6400                       		bcc.s	locret_D620
0000DDDE 5451                       		addq.w	#2,(a1)
0000DDE0 D2D1                       		adda.w	(a1),a1
0000DDE2 3288                       		move.w	a0,(a1)
0000DDE4                            
0000DDE4                            locret_D620:
0000DDE4 4E75                       		rts	
0000DDE6                            ; End of function DisplaySprite
0000DDE6                            
0000DDE6                            ; ---------------------------------------------------------------------------
0000DDE6                            ; Subroutine to	display	a 2nd sprite/object, when a1 is	the object RAM
0000DDE6                            ; ---------------------------------------------------------------------------
0000DDE6                            
0000DDE6                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000DDE6                            
0000DDE6                            
0000DDE6                            DisplaySprite2:
0000DDE6 45F8 AC00                  		lea	($FFFFAC00).w,a2
0000DDEA 3029 0018                  		move.w	$18(a1),d0
0000DDEE E248                       		lsr.w	#1,d0
0000DDF0 0240 0380                  		andi.w	#$380,d0
0000DDF4 D4C0                       		adda.w	d0,a2
0000DDF6 0C52 007E                  		cmpi.w	#$7E,(a2)
0000DDFA 6400                       		bcc.s	locret_D63E
0000DDFC 5452                       		addq.w	#2,(a2)
0000DDFE D4D2                       		adda.w	(a2),a2
0000DE00 3489                       		move.w	a1,(a2)
0000DE02                            
0000DE02                            locret_D63E:
0000DE02 4E75                       		rts	
0000DE04                            ; End of function DisplaySprite2
0000DE04                            
0000DE04                            ; ---------------------------------------------------------------------------
0000DE04                            ; Subroutine to	delete an object
0000DE04                            ; ---------------------------------------------------------------------------
0000DE04                            
0000DE04                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000DE04                            
0000DE04                            
0000DE04                            DeleteObject:
0000DE04 2248                       		movea.l	a0,a1
0000DE06                            
0000DE06                            DeleteObject2:
0000DE06 7200                       		moveq	#0,d1
0000DE08 700F                       		moveq	#$F,d0
0000DE0A                            
0000DE0A                            loc_D646:
0000DE0A 22C1                       		move.l	d1,(a1)+	; clear	the object RAM
0000DE0C 51C8 FFFC                  		dbf	d0,loc_D646	; repeat $F times (length of object RAM)
0000DE10 4E75                       		rts	
0000DE12                            ; End of function DeleteObject
0000DE12                            
0000DE12                            ; ===========================================================================
0000DE12 0000 0000                  BldSpr_ScrPos:	dc.l 0			; blank
0000DE16 00FF F700                  		dc.l $FFF700		; main screen x-position
0000DE1A 00FF F708                  		dc.l $FFF708		; background x-position	1
0000DE1E 00FF F718                  		dc.l $FFF718		; background x-position	2
0000DE22                            ; ---------------------------------------------------------------------------
0000DE22                            ; Subroutine to	convert	mappings (etc) to proper Megadrive sprites
0000DE22                            ; ---------------------------------------------------------------------------
0000DE22                            
0000DE22                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000DE22                            
0000DE22                            
0000DE22                            BuildSprites:				; XREF: TitleScreen; et al
0000DE22 45F8 F800                  		lea	($FFFFF800).w,a2 ; set address for sprite table
0000DE26 7A00                       		moveq	#0,d5
0000DE28 49F8 AC00                  		lea	($FFFFAC00).w,a4
0000DE2C 7E07                       		moveq	#7,d7
0000DE2E                            
0000DE2E                            loc_D66A:
0000DE2E 4A54                       		tst.w	(a4)
0000DE30 6700 0000                  		beq.w	loc_D72E
0000DE34 7C02                       		moveq	#2,d6
0000DE36                            
0000DE36                            loc_D672:
0000DE36 3074 6000                  		movea.w	(a4,d6.w),a0
0000DE3A 4A10                       		tst.b	(a0)
0000DE3C 6700 0000                  		beq.w	loc_D726
0000DE40 08A8 0007 0001             		bclr	#7,1(a0)
0000DE46 1028 0001                  		move.b	1(a0),d0
0000DE4A 1800                       		move.b	d0,d4
0000DE4C 0240 000C                  		andi.w	#$C,d0
0000DE50 6700                       		beq.s	loc_D6DE
0000DE52 227B 00BE                  		movea.l	BldSpr_ScrPos(pc,d0.w),a1
0000DE56 7000                       		moveq	#0,d0
0000DE58 1028 0019                  		move.b	$19(a0),d0
0000DE5C 3628 0008                  		move.w	8(a0),d3
0000DE60 9651                       		sub.w	(a1),d3
0000DE62 3203                       		move.w	d3,d1
0000DE64 D240                       		add.w	d0,d1
0000DE66 6B00 0000                  		bmi.w	loc_D726
0000DE6A 3203                       		move.w	d3,d1
0000DE6C 9240                       		sub.w	d0,d1
0000DE6E 0C41 0140                  		cmpi.w	#$140,d1
0000DE72 6C00                       		bge.s	loc_D726
0000DE74 0643 0080                  		addi.w	#$80,d3
0000DE78 0804 0004                  		btst	#4,d4
0000DE7C 6700                       		beq.s	loc_D6E8
0000DE7E 7000                       		moveq	#0,d0
0000DE80 1028 0016                  		move.b	$16(a0),d0
0000DE84 3428 000C                  		move.w	$C(a0),d2
0000DE88 9469 0004                  		sub.w	4(a1),d2
0000DE8C 3202                       		move.w	d2,d1
0000DE8E D240                       		add.w	d0,d1
0000DE90 6B00                       		bmi.s	loc_D726
0000DE92 3202                       		move.w	d2,d1
0000DE94 9240                       		sub.w	d0,d1
0000DE96 0C41 00E0                  		cmpi.w	#$E0,d1
0000DE9A 6C00                       		bge.s	loc_D726
0000DE9C 0642 0080                  		addi.w	#$80,d2
0000DEA0 6000                       		bra.s	loc_D700
0000DEA2                            ; ===========================================================================
0000DEA2                            
0000DEA2                            loc_D6DE:
0000DEA2 3428 000A                  		move.w	$A(a0),d2
0000DEA6 3628 0008                  		move.w	8(a0),d3
0000DEAA 6000                       		bra.s	loc_D700
0000DEAC                            ; ===========================================================================
0000DEAC                            
0000DEAC                            loc_D6E8:
0000DEAC 3428 000C                  		move.w	$C(a0),d2
0000DEB0 9469 0004                  		sub.w	4(a1),d2
0000DEB4 0642 0080                  		addi.w	#$80,d2
0000DEB8 0C42 0060                  		cmpi.w	#$60,d2
0000DEBC 6500                       		bcs.s	loc_D726
0000DEBE 0C42 0180                  		cmpi.w	#$180,d2
0000DEC2 6400                       		bcc.s	loc_D726
0000DEC4                            
0000DEC4                            loc_D700:
0000DEC4 2268 0004                  		movea.l	4(a0),a1
0000DEC8 7200                       		moveq	#0,d1
0000DECA 0804 0005                  		btst	#5,d4
0000DECE 6600                       		bne.s	loc_D71C
0000DED0 1228 001A                  		move.b	$1A(a0),d1
0000DED4 D201                       		add.b	d1,d1
0000DED6 D2F1 1000                  		adda.w	(a1,d1.w),a1
0000DEDA 1219                       		move.b	(a1)+,d1
0000DEDC 5301                       		subq.b	#1,d1
0000DEDE 6B00                       		bmi.s	loc_D720
0000DEE0                            
0000DEE0                            loc_D71C:
0000DEE0 6100 0000                  		bsr.w	sub_D750
0000DEE4                            
0000DEE4                            loc_D720:
0000DEE4 08E8 0007 0001             		bset	#7,1(a0)
0000DEEA                            
0000DEEA                            loc_D726:
0000DEEA 5446                       		addq.w	#2,d6
0000DEEC 5554                       		subq.w	#2,(a4)
0000DEEE 6600 FF46                  		bne.w	loc_D672
0000DEF2                            
0000DEF2                            loc_D72E:
0000DEF2 49EC 0080                  		lea	$80(a4),a4
0000DEF6 51CF FF36                  		dbf	d7,loc_D66A
0000DEFA 11C5 F62C                  		move.b	d5,($FFFFF62C).w
0000DEFE 0C05 0050                  		cmpi.b	#$50,d5
0000DF02 6700                       		beq.s	loc_D748
0000DF04 24BC 0000 0000             		move.l	#0,(a2)
0000DF0A 4E75                       		rts	
0000DF0C                            ; ===========================================================================
0000DF0C                            
0000DF0C                            loc_D748:
0000DF0C 157C 0000 FFFB             		move.b	#0,-5(a2)
0000DF12 4E75                       		rts	
0000DF14                            ; End of function BuildSprites
0000DF14                            
0000DF14                            
0000DF14                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000DF14                            
0000DF14                            
0000DF14                            sub_D750:				; XREF: BuildSprites
0000DF14 3668 0002                  		movea.w	2(a0),a3
0000DF18 0804 0000                  		btst	#0,d4
0000DF1C 6600                       		bne.s	loc_D796
0000DF1E 0804 0001                  		btst	#1,d4
0000DF22 6600 0000                  		bne.w	loc_D7E4
0000DF26                            ; End of function sub_D750
0000DF26                            
0000DF26                            
0000DF26                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000DF26                            
0000DF26                            
0000DF26                            sub_D762:				; XREF: sub_D762; SS_ShowLayout
0000DF26 0C05 0050                  		cmpi.b	#$50,d5
0000DF2A 6700                       		beq.s	locret_D794
0000DF2C 1019                       		move.b	(a1)+,d0
0000DF2E 4880                       		ext.w	d0
0000DF30 D042                       		add.w	d2,d0
0000DF32 34C0                       		move.w	d0,(a2)+
0000DF34 14D9                       		move.b	(a1)+,(a2)+
0000DF36 5205                       		addq.b	#1,d5
0000DF38 14C5                       		move.b	d5,(a2)+
0000DF3A 1019                       		move.b	(a1)+,d0
0000DF3C E148                       		lsl.w	#8,d0
0000DF3E 1019                       		move.b	(a1)+,d0
0000DF40 D04B                       		add.w	a3,d0
0000DF42 34C0                       		move.w	d0,(a2)+
0000DF44 1019                       		move.b	(a1)+,d0
0000DF46 4880                       		ext.w	d0
0000DF48 D043                       		add.w	d3,d0
0000DF4A 0240 01FF                  		andi.w	#$1FF,d0
0000DF4E 6600                       		bne.s	loc_D78E
0000DF50 5240                       		addq.w	#1,d0
0000DF52                            
0000DF52                            loc_D78E:
0000DF52 34C0                       		move.w	d0,(a2)+
0000DF54 51C9 FFD0                  		dbf	d1,sub_D762
0000DF58                            
0000DF58                            locret_D794:
0000DF58 4E75                       		rts	
0000DF5A                            ; End of function sub_D762
0000DF5A                            
0000DF5A                            ; ===========================================================================
0000DF5A                            
0000DF5A                            loc_D796:
0000DF5A 0804 0001                  		btst	#1,d4
0000DF5E 6600 0000                  		bne.w	loc_D82A
0000DF62                            
0000DF62                            loc_D79E:
0000DF62 0C05 0050                  		cmpi.b	#$50,d5
0000DF66 6700                       		beq.s	locret_D7E2
0000DF68 1019                       		move.b	(a1)+,d0
0000DF6A 4880                       		ext.w	d0
0000DF6C D042                       		add.w	d2,d0
0000DF6E 34C0                       		move.w	d0,(a2)+
0000DF70 1819                       		move.b	(a1)+,d4
0000DF72 14C4                       		move.b	d4,(a2)+
0000DF74 5205                       		addq.b	#1,d5
0000DF76 14C5                       		move.b	d5,(a2)+
0000DF78 1019                       		move.b	(a1)+,d0
0000DF7A E148                       		lsl.w	#8,d0
0000DF7C 1019                       		move.b	(a1)+,d0
0000DF7E D04B                       		add.w	a3,d0
0000DF80 0A40 0800                  		eori.w	#$800,d0
0000DF84 34C0                       		move.w	d0,(a2)+
0000DF86 1019                       		move.b	(a1)+,d0
0000DF88 4880                       		ext.w	d0
0000DF8A 4440                       		neg.w	d0
0000DF8C D804                       		add.b	d4,d4
0000DF8E 0244 0018                  		andi.w	#$18,d4
0000DF92 5044                       		addq.w	#8,d4
0000DF94 9044                       		sub.w	d4,d0
0000DF96 D043                       		add.w	d3,d0
0000DF98 0240 01FF                  		andi.w	#$1FF,d0
0000DF9C 6600                       		bne.s	loc_D7DC
0000DF9E 5240                       		addq.w	#1,d0
0000DFA0                            
0000DFA0                            loc_D7DC:
0000DFA0 34C0                       		move.w	d0,(a2)+
0000DFA2 51C9 FFBE                  		dbf	d1,loc_D79E
0000DFA6                            
0000DFA6                            locret_D7E2:
0000DFA6 4E75                       		rts	
0000DFA8                            ; ===========================================================================
0000DFA8                            
0000DFA8                            loc_D7E4:				; XREF: sub_D750
0000DFA8 0C05 0050                  		cmpi.b	#$50,d5
0000DFAC 6700                       		beq.s	locret_D828
0000DFAE 1019                       		move.b	(a1)+,d0
0000DFB0 1811                       		move.b	(a1),d4
0000DFB2 4880                       		ext.w	d0
0000DFB4 4440                       		neg.w	d0
0000DFB6 E70C                       		lsl.b	#3,d4
0000DFB8 0244 0018                  		andi.w	#$18,d4
0000DFBC 5044                       		addq.w	#8,d4
0000DFBE 9044                       		sub.w	d4,d0
0000DFC0 D042                       		add.w	d2,d0
0000DFC2 34C0                       		move.w	d0,(a2)+
0000DFC4 14D9                       		move.b	(a1)+,(a2)+
0000DFC6 5205                       		addq.b	#1,d5
0000DFC8 14C5                       		move.b	d5,(a2)+
0000DFCA 1019                       		move.b	(a1)+,d0
0000DFCC E148                       		lsl.w	#8,d0
0000DFCE 1019                       		move.b	(a1)+,d0
0000DFD0 D04B                       		add.w	a3,d0
0000DFD2 0A40 1000                  		eori.w	#$1000,d0
0000DFD6 34C0                       		move.w	d0,(a2)+
0000DFD8 1019                       		move.b	(a1)+,d0
0000DFDA 4880                       		ext.w	d0
0000DFDC D043                       		add.w	d3,d0
0000DFDE 0240 01FF                  		andi.w	#$1FF,d0
0000DFE2 6600                       		bne.s	loc_D822
0000DFE4 5240                       		addq.w	#1,d0
0000DFE6                            
0000DFE6                            loc_D822:
0000DFE6 34C0                       		move.w	d0,(a2)+
0000DFE8 51C9 FFBE                  		dbf	d1,loc_D7E4
0000DFEC                            
0000DFEC                            locret_D828:
0000DFEC 4E75                       		rts	
0000DFEE                            ; ===========================================================================
0000DFEE                            
0000DFEE                            loc_D82A:
0000DFEE 0C05 0050                  		cmpi.b	#$50,d5
0000DFF2 6700                       		beq.s	locret_D87C
0000DFF4 1019                       		move.b	(a1)+,d0
0000DFF6 1811                       		move.b	(a1),d4
0000DFF8 4880                       		ext.w	d0
0000DFFA 4440                       		neg.w	d0
0000DFFC E70C                       		lsl.b	#3,d4
0000DFFE 0244 0018                  		andi.w	#$18,d4
0000E002 5044                       		addq.w	#8,d4
0000E004 9044                       		sub.w	d4,d0
0000E006 D042                       		add.w	d2,d0
0000E008 34C0                       		move.w	d0,(a2)+
0000E00A 1819                       		move.b	(a1)+,d4
0000E00C 14C4                       		move.b	d4,(a2)+
0000E00E 5205                       		addq.b	#1,d5
0000E010 14C5                       		move.b	d5,(a2)+
0000E012 1019                       		move.b	(a1)+,d0
0000E014 E148                       		lsl.w	#8,d0
0000E016 1019                       		move.b	(a1)+,d0
0000E018 D04B                       		add.w	a3,d0
0000E01A 0A40 1800                  		eori.w	#$1800,d0
0000E01E 34C0                       		move.w	d0,(a2)+
0000E020 1019                       		move.b	(a1)+,d0
0000E022 4880                       		ext.w	d0
0000E024 4440                       		neg.w	d0
0000E026 D804                       		add.b	d4,d4
0000E028 0244 0018                  		andi.w	#$18,d4
0000E02C 5044                       		addq.w	#8,d4
0000E02E 9044                       		sub.w	d4,d0
0000E030 D043                       		add.w	d3,d0
0000E032 0240 01FF                  		andi.w	#$1FF,d0
0000E036 6600                       		bne.s	loc_D876
0000E038 5240                       		addq.w	#1,d0
0000E03A                            
0000E03A                            loc_D876:
0000E03A 34C0                       		move.w	d0,(a2)+
0000E03C 51C9 FFB0                  		dbf	d1,loc_D82A
0000E040                            
0000E040                            locret_D87C:
0000E040 4E75                       		rts	
0000E042                            ; ---------------------------------------------------------------------------
0000E042                            ; Subroutine to	check if an object is on the screen
0000E042                            ; ---------------------------------------------------------------------------
0000E042                            
0000E042                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000E042                            
0000E042                            
0000E042                            ChkObjOnScreen:
0000E042 3028 0008                  		move.w	8(a0),d0	; get object x-position
0000E046 9078 F700                  		sub.w	($FFFFF700).w,d0 ; subtract screen x-position
0000E04A 6B00                       		bmi.s	NotOnScreen
0000E04C 0C40 0140                  		cmpi.w	#320,d0		; is object on the screen?
0000E050 6C00                       		bge.s	NotOnScreen	; if not, branch
0000E052                            
0000E052 3228 000C                  		move.w	$C(a0),d1	; get object y-position
0000E056 9278 F704                  		sub.w	($FFFFF704).w,d1 ; subtract screen y-position
0000E05A 6B00                       		bmi.s	NotOnScreen
0000E05C 0C41 00E0                  		cmpi.w	#224,d1		; is object on the screen?
0000E060 6C00                       		bge.s	NotOnScreen	; if not, branch
0000E062                            
0000E062 7000                       		moveq	#0,d0		; set flag to 0
0000E064 4E75                       		rts	
0000E066                            ; ===========================================================================
0000E066                            
0000E066                            NotOnScreen:				; XREF: ChkObjOnScreen
0000E066 7001                       		moveq	#1,d0		; set flag to 1
0000E068 4E75                       		rts	
0000E06A                            ; End of function ChkObjOnScreen
0000E06A                            
0000E06A                            
0000E06A                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000E06A                            
0000E06A                            
0000E06A                            ChkObjOnScreen2:
0000E06A 7200                       		moveq	#0,d1
0000E06C 1228 0019                  		move.b	$19(a0),d1
0000E070 3028 0008                  		move.w	8(a0),d0
0000E074 9078 F700                  		sub.w	($FFFFF700).w,d0
0000E078 D041                       		add.w	d1,d0
0000E07A 6B00                       		bmi.s	NotOnScreen2
0000E07C D241                       		add.w	d1,d1
0000E07E 9041                       		sub.w	d1,d0
0000E080 0C40 0140                  		cmpi.w	#320,d0
0000E084 6C00                       		bge.s	NotOnScreen2
0000E086                            
0000E086 3228 000C                  		move.w	$C(a0),d1
0000E08A 9278 F704                  		sub.w	($FFFFF704).w,d1
0000E08E 6B00                       		bmi.s	NotOnScreen2
0000E090 0C41 00E0                  		cmpi.w	#224,d1
0000E094 6C00                       		bge.s	NotOnScreen2
0000E096                            
0000E096 7000                       		moveq	#0,d0
0000E098 4E75                       		rts	
0000E09A                            ; ===========================================================================
0000E09A                            
0000E09A                            NotOnScreen2:				; XREF: ChkObjOnScreen2
0000E09A 7001                       		moveq	#1,d0
0000E09C 4E75                       		rts	
0000E09E                            ; End of function ChkObjOnScreen2
0000E09E                            
0000E09E                            ; ---------------------------------------------------------------------------
0000E09E                            ; Subroutine to	load a level's objects
0000E09E                            ; ---------------------------------------------------------------------------
0000E09E                            
0000E09E                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000E09E                            
0000E09E                            
0000E09E                            ObjPosLoad:				; XREF: Level; et al
0000E09E 7000                       		moveq	#0,d0
0000E0A0 1038 F76C                  		move.b	($FFFFF76C).w,d0
0000E0A4 303B 0000                  		move.w	OPL_Index(pc,d0.w),d0
0000E0A8 4EFB 0000                  		jmp	OPL_Index(pc,d0.w)
0000E0AC                            ; End of function ObjPosLoad
0000E0AC                            
0000E0AC                            ; ===========================================================================
0000E0AC 0000                       OPL_Index:	dc.w OPL_Main-OPL_Index
0000E0AE 0000                       		dc.w OPL_Next-OPL_Index
0000E0B0                            ; ===========================================================================
0000E0B0                            
0000E0B0                            OPL_Main:				; XREF: OPL_Index
0000E0B0 5438 F76C                  		addq.b	#2,($FFFFF76C).w
0000E0B4 3038 FE10                  		move.w	($FFFFFE10).w,d0
0000E0B8 ED08                       		lsl.b	#6,d0
0000E0BA E848                       		lsr.w	#4,d0
0000E0BC 41F9 0000 0000             		lea	(ObjPos_Index).l,a0
0000E0C2 2248                       		movea.l	a0,a1
0000E0C4 D0F0 0000                  		adda.w	(a0,d0.w),a0
0000E0C8 21C8 F770                  		move.l	a0,($FFFFF770).w
0000E0CC 21C8 F774                  		move.l	a0,($FFFFF774).w
0000E0D0 D2F1 0002                  		adda.w	2(a1,d0.w),a1
0000E0D4 21C9 F778                  		move.l	a1,($FFFFF778).w
0000E0D8 21C9 F77C                  		move.l	a1,($FFFFF77C).w
0000E0DC 45F8 FC00                  		lea	($FFFFFC00).w,a2
0000E0E0 34FC 0101                  		move.w	#$101,(a2)+
0000E0E4 303C 005E                  		move.w	#$5E,d0
0000E0E8                            
0000E0E8                            OPL_ClrList:
0000E0E8 429A                       		clr.l	(a2)+
0000E0EA 51C8 FFFC                  		dbf	d0,OPL_ClrList	; clear	pre-destroyed object list
0000E0EE                            
0000E0EE 45F8 FC00                  		lea	($FFFFFC00).w,a2
0000E0F2 7400                       		moveq	#0,d2
0000E0F4 3C38 F700                  		move.w	($FFFFF700).w,d6
0000E0F8 0446 0080                  		subi.w	#$80,d6
0000E0FC 6400                       		bcc.s	loc_D93C
0000E0FE 7C00                       		moveq	#0,d6
0000E100                            
0000E100                            loc_D93C:
0000E100 0246 FF80                  		andi.w	#$FF80,d6
0000E104 2078 F770                  		movea.l	($FFFFF770).w,a0
0000E108                            
0000E108                            loc_D944:
0000E108 BC50                       		cmp.w	(a0),d6
0000E10A 6300                       		bls.s	loc_D956
0000E10C 4A28 0004                  		tst.b	4(a0)
0000E110 6A00                       		bpl.s	loc_D952
0000E112 1412                       		move.b	(a2),d2
0000E114 5212                       		addq.b	#1,(a2)
0000E116                            
0000E116                            loc_D952:
0000E116 5C48                       		addq.w	#6,a0
0000E118 60EE                       		bra.s	loc_D944
0000E11A                            ; ===========================================================================
0000E11A                            
0000E11A                            loc_D956:
0000E11A 21C8 F770                  		move.l	a0,($FFFFF770).w
0000E11E 2078 F774                  		movea.l	($FFFFF774).w,a0
0000E122 0446 0080                  		subi.w	#$80,d6
0000E126 6500                       		bcs.s	loc_D976
0000E128                            
0000E128                            loc_D964:
0000E128 BC50                       		cmp.w	(a0),d6
0000E12A 6300                       		bls.s	loc_D976
0000E12C 4A28 0004                  		tst.b	4(a0)
0000E130 6A00                       		bpl.s	loc_D972
0000E132 522A 0001                  		addq.b	#1,1(a2)
0000E136                            
0000E136                            loc_D972:
0000E136 5C48                       		addq.w	#6,a0
0000E138 60EE                       		bra.s	loc_D964
0000E13A                            ; ===========================================================================
0000E13A                            
0000E13A                            loc_D976:
0000E13A 21C8 F774                  		move.l	a0,($FFFFF774).w
0000E13E 31FC FFFF F76E             		move.w	#-1,($FFFFF76E).w
0000E144                            
0000E144                            OPL_Next:				; XREF: OPL_Index
0000E144 45F8 FC00                  		lea	($FFFFFC00).w,a2
0000E148 7400                       		moveq	#0,d2
0000E14A 3C38 F700                  		move.w	($FFFFF700).w,d6
0000E14E 0246 FF80                  		andi.w	#$FF80,d6
0000E152 BC78 F76E                  		cmp.w	($FFFFF76E).w,d6
0000E156 6700 0000                  		beq.w	locret_DA3A
0000E15A 6C00                       		bge.s	loc_D9F6
0000E15C 31C6 F76E                  		move.w	d6,($FFFFF76E).w
0000E160 2078 F774                  		movea.l	($FFFFF774).w,a0
0000E164 0446 0080                  		subi.w	#$80,d6
0000E168 6500                       		bcs.s	loc_D9D2
0000E16A                            
0000E16A                            loc_D9A6:
0000E16A BC68 FFFA                  		cmp.w	-6(a0),d6
0000E16E 6C00                       		bge.s	loc_D9D2
0000E170 5D48                       		subq.w	#6,a0
0000E172 4A28 0004                  		tst.b	4(a0)
0000E176 6A00                       		bpl.s	loc_D9BC
0000E178 532A 0001                  		subq.b	#1,1(a2)
0000E17C 142A 0001                  		move.b	1(a2),d2
0000E180                            
0000E180                            loc_D9BC:
0000E180 6100 0000                  		bsr.w	loc_DA3C
0000E184 6600                       		bne.s	loc_D9C6
0000E186 5D48                       		subq.w	#6,a0
0000E188 60E0                       		bra.s	loc_D9A6
0000E18A                            ; ===========================================================================
0000E18A                            
0000E18A                            loc_D9C6:
0000E18A 4A28 0004                  		tst.b	4(a0)
0000E18E 6A00                       		bpl.s	loc_D9D0
0000E190 522A 0001                  		addq.b	#1,1(a2)
0000E194                            
0000E194                            loc_D9D0:
0000E194 5C48                       		addq.w	#6,a0
0000E196                            
0000E196                            loc_D9D2:
0000E196 21C8 F774                  		move.l	a0,($FFFFF774).w
0000E19A 2078 F770                  		movea.l	($FFFFF770).w,a0
0000E19E 0646 0300                  		addi.w	#$300,d6
0000E1A2                            
0000E1A2                            loc_D9DE:
0000E1A2 BC68 FFFA                  		cmp.w	-6(a0),d6
0000E1A6 6E00                       		bgt.s	loc_D9F0
0000E1A8 4A28 FFFE                  		tst.b	-2(a0)
0000E1AC 6A00                       		bpl.s	loc_D9EC
0000E1AE 5312                       		subq.b	#1,(a2)
0000E1B0                            
0000E1B0                            loc_D9EC:
0000E1B0 5D48                       		subq.w	#6,a0
0000E1B2 60EE                       		bra.s	loc_D9DE
0000E1B4                            ; ===========================================================================
0000E1B4                            
0000E1B4                            loc_D9F0:
0000E1B4 21C8 F770                  		move.l	a0,($FFFFF770).w
0000E1B8 4E75                       		rts	
0000E1BA                            ; ===========================================================================
0000E1BA                            
0000E1BA                            loc_D9F6:
0000E1BA 31C6 F76E                  		move.w	d6,($FFFFF76E).w
0000E1BE 2078 F770                  		movea.l	($FFFFF770).w,a0
0000E1C2 0646 0280                  		addi.w	#$280,d6
0000E1C6                            
0000E1C6                            loc_DA02:
0000E1C6 BC50                       		cmp.w	(a0),d6
0000E1C8 6300                       		bls.s	loc_DA16
0000E1CA 4A28 0004                  		tst.b	4(a0)
0000E1CE 6A00                       		bpl.s	loc_DA10
0000E1D0 1412                       		move.b	(a2),d2
0000E1D2 5212                       		addq.b	#1,(a2)
0000E1D4                            
0000E1D4                            loc_DA10:
0000E1D4 6100 0000                  		bsr.w	loc_DA3C
0000E1D8 67EC                       		beq.s	loc_DA02
0000E1DA                            
0000E1DA                            loc_DA16:
0000E1DA 21C8 F770                  		move.l	a0,($FFFFF770).w
0000E1DE 2078 F774                  		movea.l	($FFFFF774).w,a0
0000E1E2 0446 0300                  		subi.w	#$300,d6
0000E1E6 6500                       		bcs.s	loc_DA36
0000E1E8                            
0000E1E8                            loc_DA24:
0000E1E8 BC50                       		cmp.w	(a0),d6
0000E1EA 6300                       		bls.s	loc_DA36
0000E1EC 4A28 0004                  		tst.b	4(a0)
0000E1F0 6A00                       		bpl.s	loc_DA32
0000E1F2 522A 0001                  		addq.b	#1,1(a2)
0000E1F6                            
0000E1F6                            loc_DA32:
0000E1F6 5C48                       		addq.w	#6,a0
0000E1F8 60EE                       		bra.s	loc_DA24
0000E1FA                            ; ===========================================================================
0000E1FA                            
0000E1FA                            loc_DA36:
0000E1FA 21C8 F774                  		move.l	a0,($FFFFF774).w
0000E1FE                            
0000E1FE                            locret_DA3A:
0000E1FE 4E75                       		rts	
0000E200                            ; ===========================================================================
0000E200                            
0000E200                            loc_DA3C:
0000E200 4A28 0004                  		tst.b	4(a0)
0000E204 6A00                       		bpl.s	OPL_MakeItem
0000E206 08F2 0007 2002             		bset	#7,2(a2,d2.w)
0000E20C 6700                       		beq.s	OPL_MakeItem
0000E20E 5C48                       		addq.w	#6,a0
0000E210 7000                       		moveq	#0,d0
0000E212 4E75                       		rts	
0000E214                            ; ===========================================================================
0000E214                            
0000E214                            OPL_MakeItem:
0000E214 6100 0000                  		bsr.w	SingleObjLoad
0000E218 6600                       		bne.s	locret_DA8A
0000E21A 3358 0008                  		move.w	(a0)+,8(a1)
0000E21E 3018                       		move.w	(a0)+,d0
0000E220 3200                       		move.w	d0,d1
0000E222 0240 0FFF                  		andi.w	#$FFF,d0
0000E226 3340 000C                  		move.w	d0,$C(a1)
0000E22A E559                       		rol.w	#2,d1
0000E22C 0201 0003                  		andi.b	#3,d1
0000E230 1341 0001                  		move.b	d1,1(a1)
0000E234 1341 0022                  		move.b	d1,$22(a1)
0000E238 1018                       		move.b	(a0)+,d0
0000E23A 6A00                       		bpl.s	loc_DA80
0000E23C 0200 007F                  		andi.b	#$7F,d0
0000E240 1342 0023                  		move.b	d2,$23(a1)
0000E244                            
0000E244                            loc_DA80:
0000E244 1280                       		move.b	d0,0(a1)
0000E246 1358 0028                  		move.b	(a0)+,$28(a1)
0000E24A 7000                       		moveq	#0,d0
0000E24C                            
0000E24C                            locret_DA8A:
0000E24C 4E75                       		rts	
0000E24E                            ; ---------------------------------------------------------------------------
0000E24E                            ; Single object	loading	subroutine
0000E24E                            ; ---------------------------------------------------------------------------
0000E24E                            
0000E24E                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000E24E                            
0000E24E                            
0000E24E                            SingleObjLoad:
0000E24E 43F8 D800                  		lea	($FFFFD800).w,a1 ; start address for object RAM
0000E252 303C 005F                  		move.w	#$5F,d0
0000E256                            
0000E256                            loc_DA94:
0000E256 4A11                       		tst.b	(a1)		; is object RAM	slot empty?
0000E258 6700                       		beq.s	locret_DAA0	; if yes, branch
0000E25A 43E9 0040                  		lea	$40(a1),a1	; goto next object RAM slot
0000E25E 51C8 FFF6                  		dbf	d0,loc_DA94	; repeat $5F times
0000E262                            
0000E262                            locret_DAA0:
0000E262 4E75                       		rts	
0000E264                            ; End of function SingleObjLoad
0000E264                            
0000E264                            
0000E264                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000E264                            
0000E264                            
0000E264                            SingleObjLoad2:
0000E264 2248                       		movea.l	a0,a1
0000E266 303C F000                  		move.w	#-$1000,d0
0000E26A 9048                       		sub.w	a0,d0
0000E26C EC48                       		lsr.w	#6,d0
0000E26E 5340                       		subq.w	#1,d0
0000E270 6500                       		bcs.s	locret_DABC
0000E272                            
0000E272                            loc_DAB0:
0000E272 4A11                       		tst.b	(a1)
0000E274 6700                       		beq.s	locret_DABC
0000E276 43E9 0040                  		lea	$40(a1),a1
0000E27A 51C8 FFF6                  		dbf	d0,loc_DAB0
0000E27E                            
0000E27E                            locret_DABC:
0000E27E 4E75                       		rts	
0000E280                            ; End of function SingleObjLoad2
0000E280                            
0000E280                            ; ===========================================================================
0000E280                            ; ---------------------------------------------------------------------------
0000E280                            ; Object 41 - springs
0000E280                            ; ---------------------------------------------------------------------------
0000E280                            
0000E280                            Obj41:					; XREF: Obj_Index
0000E280 7000                       		moveq	#0,d0
0000E282 1028 0024                  		move.b	$24(a0),d0
0000E286 323B 0000                  		move.w	Obj41_Index(pc,d0.w),d1
0000E28A 4EBB 1000                  		jsr	Obj41_Index(pc,d1.w)
0000E28E 6100 FB38                  		bsr.w	DisplaySprite
0000E292 3028 0008                  		move.w	8(a0),d0
0000E296 0240 FF80                  		andi.w	#$FF80,d0
0000E29A 3238 F700                  		move.w	($FFFFF700).w,d1
0000E29E 0441 0080                  		subi.w	#$80,d1
0000E2A2 0241 FF80                  		andi.w	#$FF80,d1
0000E2A6 9041                       		sub.w	d1,d0
0000E2A8 0C40 0280                  		cmpi.w	#$280,d0
0000E2AC 6200 FB56                  		bhi.w	DeleteObject
0000E2B0 4E75                       		rts	
0000E2B2                            ; ===========================================================================
0000E2B2 0000                       Obj41_Index:	dc.w Obj41_Main-Obj41_Index
0000E2B4 0000                       		dc.w Obj41_Up-Obj41_Index
0000E2B6 0000                       		dc.w Obj41_AniUp-Obj41_Index
0000E2B8 0000                       		dc.w Obj41_ResetUp-Obj41_Index
0000E2BA 0000                       		dc.w Obj41_LR-Obj41_Index
0000E2BC 0000                       		dc.w Obj41_AniLR-Obj41_Index
0000E2BE 0000                       		dc.w Obj41_ResetLR-Obj41_Index
0000E2C0 0000                       		dc.w Obj41_Dwn-Obj41_Index
0000E2C2 0000                       		dc.w Obj41_AniDwn-Obj41_Index
0000E2C4 0000                       		dc.w Obj41_ResetDwn-Obj41_Index
0000E2C6                            
0000E2C6 F000                       Obj41_Powers:	dc.w -$1000		; power	of red spring
0000E2C8 F600                       		dc.w -$A00		; power	of yellow spring
0000E2CA                            ; ===========================================================================
0000E2CA                            
0000E2CA                            Obj41_Main:				; XREF: Obj41_Index
0000E2CA 5428 0024                  		addq.b	#2,$24(a0)
0000E2CE 217C 0000 0000 0004        		move.l	#Map_obj41,4(a0)
0000E2D6 317C 0523 0002             		move.w	#$523,2(a0)
0000E2DC 0028 0004 0001             		ori.b	#4,1(a0)
0000E2E2 117C 0010 0019             		move.b	#$10,$19(a0)
0000E2E8 117C 0004 0018             		move.b	#4,$18(a0)
0000E2EE 1028 0028                  		move.b	$28(a0),d0
0000E2F2 0800 0004                  		btst	#4,d0		; does the spring face left/right?
0000E2F6 6700                       		beq.s	loc_DB54	; if not, branch
0000E2F8 117C 0008 0024             		move.b	#8,$24(a0)	; use "Obj41_LR" routine
0000E2FE 117C 0001 001C             		move.b	#1,$1C(a0)
0000E304 117C 0003 001A             		move.b	#3,$1A(a0)
0000E30A 317C 0533 0002             		move.w	#$533,2(a0)
0000E310 117C 0008 0019             		move.b	#8,$19(a0)
0000E316                            
0000E316                            loc_DB54:
0000E316 0800 0005                  		btst	#5,d0		; does the spring face downwards?
0000E31A 6700                       		beq.s	loc_DB66	; if not, branch
0000E31C 117C 000E 0024             		move.b	#$E,$24(a0)	; use "Obj41_Dwn" routine
0000E322 08E8 0001 0022             		bset	#1,$22(a0)
0000E328                            
0000E328                            loc_DB66:
0000E328 0800 0001                  		btst	#1,d0
0000E32C 6700                       		beq.s	loc_DB72
0000E32E 08E8 0005 0002             		bset	#5,2(a0)
0000E334                            
0000E334                            loc_DB72:
0000E334 0240 000F                  		andi.w	#$F,d0
0000E338 317B 008C 0030             		move.w	Obj41_Powers(pc,d0.w),$30(a0)
0000E33E 4E75                       		rts	
0000E340                            ; ===========================================================================
0000E340                            
0000E340                            Obj41_Up:				; XREF: Obj41_Index
0000E340 323C 001B                  		move.w	#$1B,d1
0000E344 343C 0008                  		move.w	#8,d2
0000E348 363C 0010                  		move.w	#$10,d3
0000E34C 3828 0008                  		move.w	8(a0),d4
0000E350 6100 0000                  		bsr.w	SolidObject
0000E354 4A28 0025                  		tst.b	$25(a0)		; is Sonic on top of the spring?
0000E358 6600                       		bne.s	Obj41_BounceUp	; if yes, branch
0000E35A 4E75                       		rts	
0000E35C                            ; ===========================================================================
0000E35C                            
0000E35C                            Obj41_BounceUp:				; XREF: Obj41_Up
0000E35C 5428 0024                  		addq.b	#2,$24(a0)
0000E360 5069 000C                  		addq.w	#8,$C(a1)
0000E364 3368 0030 0012             		move.w	$30(a0),$12(a1)	; move Sonic upwards
0000E36A 08E9 0001 0022             		bset	#1,$22(a1)
0000E370 08A9 0003 0022             		bclr	#3,$22(a1)
0000E376 137C 0010 001C             		move.b	#$10,$1C(a1)	; use "bouncing" animation
0000E37C 137C 0002 0024             		move.b	#2,$24(a1)
0000E382 08A8 0003 0022             		bclr	#3,$22(a0)
0000E388 4228 0025                  		clr.b	$25(a0)
0000E38C 303C 00CC                  		move.w	#$CC,d0
0000E390 4EB9 0000 15C0             		jsr	(PlaySound_Special).l ;	play spring sound
0000E396                            
0000E396                            Obj41_AniUp:				; XREF: Obj41_Index
0000E396 43F9 0000 0000             		lea	(Ani_obj41).l,a1
0000E39C 6000 CAEA                  		bra.w	AnimateSprite
0000E3A0                            ; ===========================================================================
0000E3A0                            
0000E3A0                            Obj41_ResetUp:				; XREF: Obj41_Index
0000E3A0 117C 0001 001D             		move.b	#1,$1D(a0)	; reset	animation
0000E3A6 5928 0024                  		subq.b	#4,$24(a0)	; goto "Obj41_Up" routine
0000E3AA 4E75                       		rts	
0000E3AC                            ; ===========================================================================
0000E3AC                            
0000E3AC                            Obj41_LR:				; XREF: Obj41_Index
0000E3AC 323C 0013                  		move.w	#$13,d1
0000E3B0 343C 000E                  		move.w	#$E,d2
0000E3B4 363C 000F                  		move.w	#$F,d3
0000E3B8 3828 0008                  		move.w	8(a0),d4
0000E3BC 6100 0000                  		bsr.w	SolidObject
0000E3C0 0C28 0002 0024             		cmpi.b	#2,$24(a0)
0000E3C6 6600                       		bne.s	loc_DC0C
0000E3C8 117C 0008 0024             		move.b	#8,$24(a0)
0000E3CE                            
0000E3CE                            loc_DC0C:
0000E3CE 0828 0005 0022             		btst	#5,$22(a0)
0000E3D4 6600                       		bne.s	Obj41_BounceLR
0000E3D6 4E75                       		rts	
0000E3D8                            ; ===========================================================================
0000E3D8                            
0000E3D8                            Obj41_BounceLR:				; XREF: Obj41_LR
0000E3D8 5428 0024                  		addq.b	#2,$24(a0)
0000E3DC 3368 0030 0010             		move.w	$30(a0),$10(a1)	; move Sonic to	the left
0000E3E2 5069 0008                  		addq.w	#8,8(a1)
0000E3E6 0828 0000 0022             		btst	#0,$22(a0)	; is object flipped?
0000E3EC 6600                       		bne.s	loc_DC36	; if yes, branch
0000E3EE 0469 0010 0008             		subi.w	#$10,8(a1)
0000E3F4 4469 0010                  		neg.w	$10(a1)		; move Sonic to	the right
0000E3F8                            
0000E3F8                            loc_DC36:
0000E3F8 337C 000F 003E             		move.w	#$F,$3E(a1)
0000E3FE 3369 0010 0014             		move.w	$10(a1),$14(a1)
0000E404 0869 0000 0022             		bchg	#0,$22(a1)
0000E40A 0829 0002 0022             		btst	#2,$22(a1)
0000E410 6600                       		bne.s	loc_DC56
0000E412 137C 0000 001C             		move.b	#0,$1C(a1)	; use running animation
0000E418                            
0000E418                            loc_DC56:
0000E418 08A8 0005 0022             		bclr	#5,$22(a0)
0000E41E 08A9 0005 0022             		bclr	#5,$22(a1)
0000E424 303C 00CC                  		move.w	#$CC,d0
0000E428 4EB9 0000 15C0             		jsr	(PlaySound_Special).l ;	play spring sound
0000E42E                            
0000E42E                            Obj41_AniLR:				; XREF: Obj41_Index
0000E42E 43F9 0000 0000             		lea	(Ani_obj41).l,a1
0000E434 6000 CA52                  		bra.w	AnimateSprite
0000E438                            ; ===========================================================================
0000E438                            
0000E438                            Obj41_ResetLR:				; XREF: Obj41_Index
0000E438 117C 0002 001D             		move.b	#2,$1D(a0)	; reset	animation
0000E43E 5928 0024                  		subq.b	#4,$24(a0)	; goto "Obj41_LR" routine
0000E442 4E75                       		rts	
0000E444                            ; ===========================================================================
0000E444                            
0000E444                            Obj41_Dwn:				; XREF: Obj41_Index
0000E444 323C 001B                  		move.w	#$1B,d1
0000E448 343C 0008                  		move.w	#8,d2
0000E44C 363C 0010                  		move.w	#$10,d3
0000E450 3828 0008                  		move.w	8(a0),d4
0000E454 6100 0000                  		bsr.w	SolidObject
0000E458 0C28 0002 0024             		cmpi.b	#2,$24(a0)
0000E45E 6600                       		bne.s	loc_DCA4
0000E460 117C 000E 0024             		move.b	#$E,$24(a0)
0000E466                            
0000E466                            loc_DCA4:
0000E466 4A28 0025                  		tst.b	$25(a0)
0000E46A 6600                       		bne.s	locret_DCAE
0000E46C 4A44                       		tst.w	d4
0000E46E 6B00                       		bmi.s	Obj41_BounceDwn
0000E470                            
0000E470                            locret_DCAE:
0000E470 4E75                       		rts	
0000E472                            ; ===========================================================================
0000E472                            
0000E472                            Obj41_BounceDwn:			; XREF: Obj41_Dwn
0000E472 5428 0024                  		addq.b	#2,$24(a0)
0000E476 5169 000C                  		subq.w	#8,$C(a1)
0000E47A 3368 0030 0012             		move.w	$30(a0),$12(a1)
0000E480 4469 0012                  		neg.w	$12(a1)		; move Sonic downwards
0000E484 08E9 0001 0022             		bset	#1,$22(a1)
0000E48A 08A9 0003 0022             		bclr	#3,$22(a1)
0000E490 137C 0002 0024             		move.b	#2,$24(a1)
0000E496 08A8 0003 0022             		bclr	#3,$22(a0)
0000E49C 4228 0025                  		clr.b	$25(a0)
0000E4A0 303C 00CC                  		move.w	#$CC,d0
0000E4A4 4EB9 0000 15C0             		jsr	(PlaySound_Special).l ;	play spring sound
0000E4AA                            
0000E4AA                            Obj41_AniDwn:				; XREF: Obj41_Index
0000E4AA 43F9 0000 0000             		lea	(Ani_obj41).l,a1
0000E4B0 6000 C9D6                  		bra.w	AnimateSprite
0000E4B4                            ; ===========================================================================
0000E4B4                            
0000E4B4                            Obj41_ResetDwn:				; XREF: Obj41_Index
0000E4B4 117C 0001 001D             		move.b	#1,$1D(a0)	; reset	animation
0000E4BA 5928 0024                  		subq.b	#4,$24(a0)	; goto "Obj41_Dwn" routine
0000E4BE 4E75                       		rts	
0000E4C0                            ; ===========================================================================
0000E4C0                            Ani_obj41:
0000E4C0                            	include "_anim\obj41.asm"
0000E4C0                            ; ---------------------------------------------------------------------------
0000E4C0                            ; Animation script - springs
0000E4C0                            ; ---------------------------------------------------------------------------
0000E4C0 0000                       		dc.w byte_DD02-Ani_obj41
0000E4C2 0000                       		dc.w byte_DD0E-Ani_obj41
0000E4C4 0001 0000 0202 0202 0202+  byte_DD02:	dc.b 0,	1, 0, 0, 2, 2, 2, 2, 2,	2, 0, $FC
0000E4D0 0004 0303 0505 0505 0505+  byte_DD0E:	dc.b 0,	4, 3, 3, 5, 5, 5, 5, 5,	5, 3, $FC
0000E4DC                            		even
0000E4DC                            		even
0000E4DC                            
0000E4DC                            ; ---------------------------------------------------------------------------
0000E4DC                            ; Sprite mappings - springs
0000E4DC                            ; ---------------------------------------------------------------------------
0000E4DC                            Map_obj41:
0000E4DC                            	include "_maps\obj41.asm"
0000E4DC                            ; ---------------------------------------------------------------------------
0000E4DC                            ; Sprite mappings - springs
0000E4DC                            ; ---------------------------------------------------------------------------
0000E4DC 0000                       		dc.w byte_DD26-Map_obj41
0000E4DE 0000                       		dc.w byte_DD31-Map_obj41
0000E4E0 0000                       		dc.w byte_DD37-Map_obj41
0000E4E2 0000                       		dc.w byte_DD47-Map_obj41
0000E4E4 0000                       		dc.w byte_DD4D-Map_obj41
0000E4E6 0000                       		dc.w byte_DD53-Map_obj41
0000E4E8 02                         byte_DD26:	dc.b 2
0000E4E9 F80C 0000 F0               		dc.b $F8, $C, 0, 0, $F0
0000E4EE 000C 0004 F0               		dc.b 0,	$C, 0, 4, $F0
0000E4F3 01                         byte_DD31:	dc.b 1
0000E4F4 000C 0000 F0               		dc.b 0,	$C, 0, 0, $F0
0000E4F9 03                         byte_DD37:	dc.b 3
0000E4FA E80C 0000 F0               		dc.b $E8, $C, 0, 0, $F0
0000E4FF F005 0008 F8               		dc.b $F0, 5, 0,	8, $F8
0000E504 000C 000C F0               		dc.b 0,	$C, 0, $C, $F0
0000E509 01                         byte_DD47:	dc.b 1
0000E50A F007 0000 F8               		dc.b $F0, 7, 0,	0, $F8
0000E50F 01                         byte_DD4D:	dc.b 1
0000E510 F003 0004 F8               		dc.b $F0, 3, 0,	4, $F8
0000E515 04                         byte_DD53:	dc.b 4
0000E516 F003 0004 10               		dc.b $F0, 3, 0,	4, $10
0000E51B F809 0008 F8               		dc.b $F8, 9, 0,	8, $F8
0000E520 F000 0000 F8               		dc.b $F0, 0, 0,	0, $F8
0000E525 0800 0003 F8               		dc.b 8,	0, 0, 3, $F8
0000E52A                            		even
0000E52A                            		even
0000E52A                            
0000E52A                            ; ===========================================================================
0000E52A                            ; ---------------------------------------------------------------------------
0000E52A                            ; Object 42 - Newtron enemy (GHZ)
0000E52A                            ; ---------------------------------------------------------------------------
0000E52A                            
0000E52A                            Obj42:					; XREF: Obj_Index
0000E52A 7000                       		moveq	#0,d0
0000E52C 1028 0024                  		move.b	$24(a0),d0
0000E530 323B 0000                  		move.w	Obj42_Index(pc,d0.w),d1
0000E534 4EFB 1000                  		jmp	Obj42_Index(pc,d1.w)
0000E538                            ; ===========================================================================
0000E538 0000                       Obj42_Index:	dc.w Obj42_Main-Obj42_Index
0000E53A 0000                       		dc.w Obj42_Action-Obj42_Index
0000E53C 0000                       		dc.w Obj42_Delete-Obj42_Index
0000E53E                            ; ===========================================================================
0000E53E                            
0000E53E                            Obj42_Main:				; XREF: Obj42_Index
0000E53E 5428 0024                  		addq.b	#2,$24(a0)
0000E542 217C 0000 0000 0004        		move.l	#Map_obj42,4(a0)
0000E54A 317C 049B 0002             		move.w	#$49B,2(a0)
0000E550 117C 0004 0001             		move.b	#4,1(a0)
0000E556 117C 0004 0018             		move.b	#4,$18(a0)
0000E55C 117C 0014 0019             		move.b	#$14,$19(a0)
0000E562 117C 0010 0016             		move.b	#$10,$16(a0)
0000E568 117C 0008 0017             		move.b	#8,$17(a0)
0000E56E                            
0000E56E                            Obj42_Action:				; XREF: Obj42_Index
0000E56E 7000                       		moveq	#0,d0
0000E570 1028 0025                  		move.b	$25(a0),d0
0000E574 323B 0000                  		move.w	Obj42_Index2(pc,d0.w),d1
0000E578 4EBB 1000                  		jsr	Obj42_Index2(pc,d1.w)
0000E57C 43F9 0000 0000             		lea	(Ani_obj42).l,a1
0000E582 6100 C904                  		bsr.w	AnimateSprite
0000E586 6000 0000                  		bra.w	MarkObjGone
0000E58A                            ; ===========================================================================
0000E58A 0000                       Obj42_Index2:	dc.w Obj42_ChkDist-Obj42_Index2
0000E58C 0000                       		dc.w Obj42_Type00-Obj42_Index2
0000E58E 0000                       		dc.w Obj42_MatchFloor-Obj42_Index2
0000E590 0000                       		dc.w Obj42_Speed-Obj42_Index2
0000E592 0000                       		dc.w Obj42_Type01-Obj42_Index2
0000E594                            ; ===========================================================================
0000E594                            
0000E594                            Obj42_ChkDist:				; XREF: Obj42_Index2
0000E594 08E8 0000 0022             		bset	#0,$22(a0)
0000E59A 3038 D008                  		move.w	($FFFFD008).w,d0
0000E59E 9068 0008                  		sub.w	8(a0),d0
0000E5A2 6400                       		bcc.s	loc_DDEA
0000E5A4 4440                       		neg.w	d0
0000E5A6 08A8 0000 0022             		bclr	#0,$22(a0)
0000E5AC                            
0000E5AC                            loc_DDEA:
0000E5AC 0C40 0080                  		cmpi.w	#$80,d0		; is Sonic within $80 pixels of	the newtron?
0000E5B0 6400                       		bcc.s	locret_DE12	; if not, branch
0000E5B2 5428 0025                  		addq.b	#2,$25(a0)
0000E5B6 117C 0001 001C             		move.b	#1,$1C(a0)
0000E5BC 4A28 0028                  		tst.b	$28(a0)		; check	object type
0000E5C0 6700                       		beq.s	locret_DE12	; if type is 00, branch
0000E5C2 317C 249B 0002             		move.w	#$249B,2(a0)
0000E5C8 117C 0008 0025             		move.b	#8,$25(a0)	; run type 01 newtron subroutine
0000E5CE 117C 0004 001C             		move.b	#4,$1C(a0)	; use different	animation
0000E5D4                            
0000E5D4                            locret_DE12:
0000E5D4 4E75                       		rts	
0000E5D6                            ; ===========================================================================
0000E5D6                            
0000E5D6                            Obj42_Type00:				; XREF: Obj42_Index2
0000E5D6 0C28 0004 001A             		cmpi.b	#4,$1A(a0)	; has "appearing" animation finished?
0000E5DC 6400                       		bcc.s	Obj42_Fall	; is yes, branch
0000E5DE 08E8 0000 0022             		bset	#0,$22(a0)
0000E5E4 3038 D008                  		move.w	($FFFFD008).w,d0
0000E5E8 9068 0008                  		sub.w	8(a0),d0
0000E5EC 6400                       		bcc.s	locret_DE32
0000E5EE 08A8 0000 0022             		bclr	#0,$22(a0)
0000E5F4                            
0000E5F4                            locret_DE32:
0000E5F4 4E75                       		rts	
0000E5F6                            ; ===========================================================================
0000E5F6                            
0000E5F6                            Obj42_Fall:				; XREF: Obj42_Type00
0000E5F6 0C28 0001 001A             		cmpi.b	#1,$1A(a0)
0000E5FC 6600                       		bne.s	loc_DE42
0000E5FE 117C 000C 0020             		move.b	#$C,$20(a0)
0000E604                            
0000E604                            loc_DE42:
0000E604 6100 F770                  		bsr.w	ObjectFall
0000E608 6100 0000                  		bsr.w	ObjHitFloor
0000E60C 4A41                       		tst.w	d1		; has newtron hit the floor?
0000E60E 6A00                       		bpl.s	locret_DE86	; if not, branch
0000E610 D368 000C                  		add.w	d1,$C(a0)
0000E614 317C 0000 0012             		move.w	#0,$12(a0)	; stop newtron falling
0000E61A 5428 0025                  		addq.b	#2,$25(a0)
0000E61E 117C 0002 001C             		move.b	#2,$1C(a0)
0000E624 0828 0005 0002             		btst	#5,2(a0)
0000E62A 6700                       		beq.s	Obj42_Move
0000E62C 5228 001C                  		addq.b	#1,$1C(a0)
0000E630                            
0000E630                            Obj42_Move:
0000E630 117C 000D 0020             		move.b	#$D,$20(a0)
0000E636 317C 0200 0010             		move.w	#$200,$10(a0)	; move newtron horizontally
0000E63C 0828 0000 0022             		btst	#0,$22(a0)
0000E642 6600                       		bne.s	locret_DE86
0000E644 4468 0010                  		neg.w	$10(a0)
0000E648                            
0000E648                            locret_DE86:
0000E648 4E75                       		rts	
0000E64A                            ; ===========================================================================
0000E64A                            
0000E64A                            Obj42_MatchFloor:			; XREF: Obj42_Index2
0000E64A 6100 F756                  		bsr.w	SpeedToPos
0000E64E 6100 0000                  		bsr.w	ObjHitFloor
0000E652 0C41 FFF8                  		cmpi.w	#-8,d1
0000E656 6D00                       		blt.s	loc_DEA2
0000E658 0C41 000C                  		cmpi.w	#$C,d1
0000E65C 6C00                       		bge.s	loc_DEA2
0000E65E D368 000C                  		add.w	d1,$C(a0)	; match	newtron's position with floor
0000E662 4E75                       		rts	
0000E664                            ; ===========================================================================
0000E664                            
0000E664                            loc_DEA2:
0000E664 5428 0025                  		addq.b	#2,$25(a0)
0000E668 4E75                       		rts	
0000E66A                            ; ===========================================================================
0000E66A                            
0000E66A                            Obj42_Speed:				; XREF: Obj42_Index2
0000E66A 6100 F736                  		bsr.w	SpeedToPos
0000E66E 4E75                       		rts	
0000E670                            ; ===========================================================================
0000E670                            
0000E670                            Obj42_Type01:				; XREF: Obj42_Index2
0000E670 0C28 0001 001A             		cmpi.b	#1,$1A(a0)
0000E676 6600                       		bne.s	Obj42_FireMissile
0000E678 117C 000C 0020             		move.b	#$C,$20(a0)
0000E67E                            
0000E67E                            Obj42_FireMissile:
0000E67E 0C28 0002 001A             		cmpi.b	#2,$1A(a0)
0000E684 6600                       		bne.s	locret_DF14
0000E686 4A28 0032                  		tst.b	$32(a0)
0000E68A 6600                       		bne.s	locret_DF14
0000E68C 117C 0001 0032             		move.b	#1,$32(a0)
0000E692 6100 FBBA                  		bsr.w	SingleObjLoad
0000E696 6600                       		bne.s	locret_DF14
0000E698 12BC 0023                  		move.b	#$23,0(a1)	; load missile object
0000E69C 3368 0008 0008             		move.w	8(a0),8(a1)
0000E6A2 3368 000C 000C             		move.w	$C(a0),$C(a1)
0000E6A8 5169 000C                  		subq.w	#8,$C(a1)
0000E6AC 337C 0200 0010             		move.w	#$200,$10(a1)
0000E6B2 303C 0014                  		move.w	#$14,d0
0000E6B6 0828 0000 0022             		btst	#0,$22(a0)
0000E6BC 6600                       		bne.s	loc_DF04
0000E6BE 4440                       		neg.w	d0
0000E6C0 4469 0010                  		neg.w	$10(a1)
0000E6C4                            
0000E6C4                            loc_DF04:
0000E6C4 D169 0008                  		add.w	d0,8(a1)
0000E6C8 1368 0022 0022             		move.b	$22(a0),$22(a1)
0000E6CE 137C 0001 0028             		move.b	#1,$28(a1)
0000E6D4                            
0000E6D4                            locret_DF14:
0000E6D4 4E75                       		rts	
0000E6D6                            ; ===========================================================================
0000E6D6                            
0000E6D6                            Obj42_Delete:				; XREF: Obj42_Index
0000E6D6 6000 F72C                  		bra.w	DeleteObject
0000E6DA                            ; ===========================================================================
0000E6DA                            Ani_obj42:
0000E6DA                            	include "_anim\obj42.asm"
0000E6DA                            ; ---------------------------------------------------------------------------
0000E6DA                            ; Animation script - Newtron enemy
0000E6DA                            ; ---------------------------------------------------------------------------
0000E6DA 0000                       		dc.w byte_DF24-Ani_obj42
0000E6DC 0000                       		dc.w byte_DF28-Ani_obj42
0000E6DE 0000                       		dc.w byte_DF30-Ani_obj42
0000E6E0 0000                       		dc.w byte_DF34-Ani_obj42
0000E6E2 0000                       		dc.w byte_DF38-Ani_obj42
0000E6E4 0F0A FF00                  byte_DF24:	dc.b $F, $A, $FF, 0
0000E6E8 1300 0103 0405 FE01        byte_DF28:	dc.b $13, 0, 1,	3, 4, 5, $FE, 1
0000E6F0 0206 07FF                  byte_DF30:	dc.b 2,	6, 7, $FF
0000E6F4 0208 09FF                  byte_DF34:	dc.b 2,	8, 9, $FF
0000E6F8 1300 0101 0201 0100 FC00   byte_DF38:	dc.b $13, 0, 1,	1, 2, 1, 1, 0, $FC, 0
0000E702                            		even
0000E702                            		even
0000E702                            
0000E702                            ; ---------------------------------------------------------------------------
0000E702                            ; Sprite mappings - Newtron enemy (GHZ)
0000E702                            ; ---------------------------------------------------------------------------
0000E702                            Map_obj42:
0000E702                            	include "_maps\obj42.asm"
0000E702                            ; ---------------------------------------------------------------------------
0000E702                            ; Sprite mappings - Newtron enemy (GHZ)
0000E702                            ; ---------------------------------------------------------------------------
0000E702 0000 0000                  		dc.w byte_DF58-Map_obj42, byte_DF68-Map_obj42
0000E706 0000 0000                  		dc.w byte_DF78-Map_obj42, byte_DF88-Map_obj42
0000E70A 0000 0000                  		dc.w byte_DF9D-Map_obj42, byte_DFAD-Map_obj42
0000E70E 0000 0000                  		dc.w byte_DFB8-Map_obj42, byte_DFC8-Map_obj42
0000E712 0000 0000                  		dc.w byte_DFD8-Map_obj42, byte_DFE8-Map_obj42
0000E716 0000                       		dc.w byte_DFF8-Map_obj42
0000E718 03                         byte_DF58:	dc.b 3
0000E719 EC0D 0000 EC               		dc.b $EC, $D, 0, 0, $EC
0000E71E F400 0008 0C               		dc.b $F4, 0, 0,	8, $C
0000E723 FC0E 0009 F4               		dc.b $FC, $E, 0, 9, $F4
0000E728 03                         byte_DF68:	dc.b 3
0000E729 EC06 0015 EC               		dc.b $EC, 6, 0,	$15, $EC
0000E72E EC09 001B FC               		dc.b $EC, 9, 0,	$1B, $FC
0000E733 FC0A 0021 FC               		dc.b $FC, $A, 0, $21, $FC
0000E738 03                         byte_DF78:	dc.b 3
0000E739 EC06 002A EC               		dc.b $EC, 6, 0,	$2A, $EC
0000E73E EC09 001B FC               		dc.b $EC, 9, 0,	$1B, $FC
0000E743 FC0A 0021 FC               		dc.b $FC, $A, 0, $21, $FC
0000E748 04                         byte_DF88:	dc.b 4
0000E749 EC06 0030 EC               		dc.b $EC, 6, 0,	$30, $EC
0000E74E EC09 001B FC               		dc.b $EC, 9, 0,	$1B, $FC
0000E753 FC09 0036 FC               		dc.b $FC, 9, 0,	$36, $FC
0000E758 0C00 003C 0C               		dc.b $C, 0, 0, $3C, $C
0000E75D 03                         byte_DF9D:	dc.b 3
0000E75E F40D 003D EC               		dc.b $F4, $D, 0, $3D, $EC
0000E763 FC00 0020 0C               		dc.b $FC, 0, 0,	$20, $C
0000E768 0408 0045 FC               		dc.b 4,	8, 0, $45, $FC
0000E76D 02                         byte_DFAD:	dc.b 2
0000E76E F80D 0048 EC               		dc.b $F8, $D, 0, $48, $EC
0000E773 F801 0050 0C               		dc.b $F8, 1, 0,	$50, $C
0000E778 03                         byte_DFB8:	dc.b 3
0000E779 F80D 0048 EC               		dc.b $F8, $D, 0, $48, $EC
0000E77E F801 0050 0C               		dc.b $F8, 1, 0,	$50, $C
0000E783 FE00 0052 14               		dc.b $FE, 0, 0,	$52, $14
0000E788 03                         byte_DFC8:	dc.b 3
0000E789 F80D 0048 EC               		dc.b $F8, $D, 0, $48, $EC
0000E78E F801 0050 0C               		dc.b $F8, 1, 0,	$50, $C
0000E793 FE04 0053 14               		dc.b $FE, 4, 0,	$53, $14
0000E798 03                         byte_DFD8:	dc.b 3
0000E799 F80D 0048 EC               		dc.b $F8, $D, 0, $48, $EC
0000E79E F801 0050 0C               		dc.b $F8, 1, 0,	$50, $C
0000E7A3 FE00 E052 14               		dc.b $FE, 0, $E0, $52, $14
0000E7A8 03                         byte_DFE8:	dc.b 3
0000E7A9 F80D 0048 EC               		dc.b $F8, $D, 0, $48, $EC
0000E7AE F801 0050 0C               		dc.b $F8, 1, 0,	$50, $C
0000E7B3 FE04 E053 14               		dc.b $FE, 4, $E0, $53, $14
0000E7B8 00                         byte_DFF8:	dc.b 0
0000E7BA 00                         		even
0000E7BA 00                         		even
0000E7BA                            
0000E7BA                            ; ===========================================================================
0000E7BA                            ; ---------------------------------------------------------------------------
0000E7BA                            ; Object 43 - Roller enemy (SYZ)
0000E7BA                            ; ---------------------------------------------------------------------------
0000E7BA                            
0000E7BA                            Obj43:					; XREF: Obj_Index
0000E7BA 7000                       		moveq	#0,d0
0000E7BC 1028 0024                  		move.b	$24(a0),d0
0000E7C0 323B 0000                  		move.w	Obj43_Index(pc,d0.w),d1
0000E7C4 4EFB 1000                  		jmp	Obj43_Index(pc,d1.w)
0000E7C8                            ; ===========================================================================
0000E7C8 0000                       Obj43_Index:	dc.w Obj43_Main-Obj43_Index
0000E7CA 0000                       		dc.w Obj43_Action-Obj43_Index
0000E7CC                            ; ===========================================================================
0000E7CC                            
0000E7CC                            Obj43_Main:				; XREF: Obj43_Index
0000E7CC 117C 000E 0016             		move.b	#$E,$16(a0)
0000E7D2 117C 0008 0017             		move.b	#8,$17(a0)
0000E7D8 6100 F59C                  		bsr.w	ObjectFall
0000E7DC 6100 0000                  		bsr.w	ObjHitFloor
0000E7E0 4A41                       		tst.w	d1
0000E7E2 6A00                       		bpl.s	locret_E052
0000E7E4 D368 000C                  		add.w	d1,$C(a0)	; match	roller's position with the floor
0000E7E8 317C 0000 0012             		move.w	#0,$12(a0)
0000E7EE 5428 0024                  		addq.b	#2,$24(a0)
0000E7F2 217C 0000 0000 0004        		move.l	#Map_obj43,4(a0)
0000E7FA 317C 04B8 0002             		move.w	#$4B8,2(a0)
0000E800 117C 0004 0001             		move.b	#4,1(a0)
0000E806 117C 0004 0018             		move.b	#4,$18(a0)
0000E80C 117C 0010 0019             		move.b	#$10,$19(a0)
0000E812                            
0000E812                            locret_E052:
0000E812 4E75                       		rts	
0000E814                            ; ===========================================================================
0000E814                            
0000E814                            Obj43_Action:				; XREF: Obj43_Index
0000E814 7000                       		moveq	#0,d0
0000E816 1028 0025                  		move.b	$25(a0),d0
0000E81A 323B 0000                  		move.w	Obj43_Index2(pc,d0.w),d1
0000E81E 4EBB 1000                  		jsr	Obj43_Index2(pc,d1.w)
0000E822 43F9 0000 0000             		lea	(Ani_obj43).l,a1
0000E828 6100 C65E                  		bsr.w	AnimateSprite
0000E82C 3028 0008                  		move.w	8(a0),d0
0000E830 0240 FF80                  		andi.w	#$FF80,d0
0000E834 3238 F700                  		move.w	($FFFFF700).w,d1
0000E838 0441 0080                  		subi.w	#$80,d1
0000E83C 0241 FF80                  		andi.w	#$FF80,d1
0000E840 9041                       		sub.w	d1,d0
0000E842 0C40 0280                  		cmpi.w	#$280,d0
0000E846 6E00 0000                  		bgt.w	Obj43_ChkGone
0000E84A 6000 F57C                  		bra.w	DisplaySprite
0000E84E                            ; ===========================================================================
0000E84E                            
0000E84E                            Obj43_ChkGone:				; XREF: Obj43_Action
0000E84E 45F8 FC00                  		lea	($FFFFFC00).w,a2
0000E852 7000                       		moveq	#0,d0
0000E854 1028 0023                  		move.b	$23(a0),d0
0000E858 6700                       		beq.s	Obj43_Delete
0000E85A 08B2 0007 0002             		bclr	#7,2(a2,d0.w)
0000E860                            
0000E860                            Obj43_Delete:
0000E860 6000 F5A2                  		bra.w	DeleteObject
0000E864                            ; ===========================================================================
0000E864 0000                       Obj43_Index2:	dc.w Obj43_RollChk-Obj43_Index2
0000E866 0000                       		dc.w Obj43_RollNoChk-Obj43_Index2
0000E868 0000                       		dc.w Obj43_ChkJump-Obj43_Index2
0000E86A 0000                       		dc.w Obj43_MatchFloor-Obj43_Index2
0000E86C                            ; ===========================================================================
0000E86C                            
0000E86C                            Obj43_RollChk:				; XREF: Obj43_Index2
0000E86C 3038 D008                  		move.w	($FFFFD008).w,d0
0000E870 0440 0100                  		subi.w	#$100,d0
0000E874 6500                       		bcs.s	loc_E0D2
0000E876 9068 0008                  		sub.w	8(a0),d0	; check	distance between Roller	and Sonic
0000E87A 6500                       		bcs.s	loc_E0D2
0000E87C 5828 0025                  		addq.b	#4,$25(a0)
0000E880 117C 0002 001C             		move.b	#2,$1C(a0)
0000E886 317C 0700 0010             		move.w	#$700,$10(a0)	; move Roller horizontally
0000E88C 117C 008E 0020             		move.b	#$8E,$20(a0)	; make Roller invincible
0000E892                            
0000E892                            loc_E0D2:
0000E892 588F                       		addq.l	#4,sp
0000E894 4E75                       		rts	
0000E896                            ; ===========================================================================
0000E896                            
0000E896                            Obj43_RollNoChk:			; XREF: Obj43_Index2
0000E896 0C28 0002 001C             		cmpi.b	#2,$1C(a0)
0000E89C 6700                       		beq.s	loc_E0F8
0000E89E 5368 0030                  		subq.w	#1,$30(a0)
0000E8A2 6A00                       		bpl.s	locret_E0F6
0000E8A4 117C 0001 001C             		move.b	#1,$1C(a0)
0000E8AA 317C 0700 0010             		move.w	#$700,$10(a0)
0000E8B0 117C 008E 0020             		move.b	#$8E,$20(a0)
0000E8B6                            
0000E8B6                            locret_E0F6:
0000E8B6 4E75                       		rts	
0000E8B8                            ; ===========================================================================
0000E8B8                            
0000E8B8                            loc_E0F8:
0000E8B8 5428 0025                  		addq.b	#2,$25(a0)
0000E8BC 4E75                       		rts	
0000E8BE                            ; ===========================================================================
0000E8BE                            
0000E8BE                            Obj43_ChkJump:				; XREF: Obj43_Index2
0000E8BE 6100 0000                  		bsr.w	Obj43_Stop
0000E8C2 6100 F4DE                  		bsr.w	SpeedToPos
0000E8C6 6100 0000                  		bsr.w	ObjHitFloor
0000E8CA 0C41 FFF8                  		cmpi.w	#-8,d1
0000E8CE 6D00                       		blt.s	Obj43_Jump
0000E8D0 0C41 000C                  		cmpi.w	#$C,d1
0000E8D4 6C00                       		bge.s	Obj43_Jump
0000E8D6 D368 000C                  		add.w	d1,$C(a0)
0000E8DA 4E75                       		rts	
0000E8DC                            ; ===========================================================================
0000E8DC                            
0000E8DC                            Obj43_Jump:
0000E8DC 5428 0025                  		addq.b	#2,$25(a0)
0000E8E0 08E8 0000 0032             		bset	#0,$32(a0)
0000E8E6 6700                       		beq.s	locret_E12E
0000E8E8 317C FA00 0012             		move.w	#-$600,$12(a0)	; move Roller vertically
0000E8EE                            
0000E8EE                            locret_E12E:
0000E8EE 4E75                       		rts	
0000E8F0                            ; ===========================================================================
0000E8F0                            
0000E8F0                            Obj43_MatchFloor:			; XREF: Obj43_Index2
0000E8F0 6100 F484                  		bsr.w	ObjectFall
0000E8F4 4A68 0012                  		tst.w	$12(a0)
0000E8F8 6B00                       		bmi.s	locret_E150
0000E8FA 6100 0000                  		bsr.w	ObjHitFloor
0000E8FE 4A41                       		tst.w	d1
0000E900 6A00                       		bpl.s	locret_E150
0000E902 D368 000C                  		add.w	d1,$C(a0)	; match	Roller's position with the floor
0000E906 5528 0025                  		subq.b	#2,$25(a0)
0000E90A 317C 0000 0012             		move.w	#0,$12(a0)
0000E910                            
0000E910                            locret_E150:
0000E910 4E75                       		rts	
0000E912                            
0000E912                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000E912                            
0000E912                            
0000E912                            Obj43_Stop:				; XREF: Obj43_ChkJump
0000E912 4A28 0032                  		tst.b	$32(a0)
0000E916 6B00                       		bmi.s	locret_E188
0000E918 3038 D008                  		move.w	($FFFFD008).w,d0
0000E91C 0440 0030                  		subi.w	#$30,d0
0000E920 9068 0008                  		sub.w	8(a0),d0
0000E924 6400                       		bcc.s	locret_E188
0000E926 117C 0000 001C             		move.b	#0,$1C(a0)
0000E92C 117C 000E 0020             		move.b	#$E,$20(a0)
0000E932 4268 0010                  		clr.w	$10(a0)
0000E936 317C 0078 0030             		move.w	#120,$30(a0)	; set waiting time to 2	seconds
0000E93C 117C 0002 0025             		move.b	#2,$25(a0)
0000E942 08E8 0007 0032             		bset	#7,$32(a0)
0000E948                            
0000E948                            locret_E188:
0000E948 4E75                       		rts	
0000E94A                            ; End of function Obj43_Stop
0000E94A                            
0000E94A                            ; ===========================================================================
0000E94A                            Ani_obj43:
0000E94A                            	include "_anim\obj43.asm"
0000E94A                            ; ---------------------------------------------------------------------------
0000E94A                            ; Animation script - Roller enemy
0000E94A                            ; ---------------------------------------------------------------------------
0000E94A 0000                       		dc.w byte_E190-Ani_obj43
0000E94C 0000                       		dc.w byte_E196-Ani_obj43
0000E94E 0000                       		dc.w byte_E19C-Ani_obj43
0000E950 0F02 0100 FE01             byte_E190:	dc.b $F, 2, 1, 0, $FE, 1
0000E956 0F01 02FD 0200             byte_E196:	dc.b $F, 1, 2, $FD, 2, 0
0000E95C 0303 0402 FF               byte_E19C:	dc.b 3,	3, 4, 2, $FF
0000E962 00                         		even
0000E962 00                         		even
0000E962                            
0000E962                            ; ---------------------------------------------------------------------------
0000E962                            ; Sprite mappings - Roller enemy (SYZ)
0000E962                            ; ---------------------------------------------------------------------------
0000E962                            Map_obj43:
0000E962                            	include "_maps\obj43.asm"
0000E962                            Map_61da:
0000E962 0000                       Map_61da_0: 	dc.w Map_61da_A-Map_61da
0000E964 0000                       Map_61da_2: 	dc.w Map_61da_15-Map_61da
0000E966 0000                       Map_61da_4: 	dc.w Map_61da_20-Map_61da
0000E968 0000                       Map_61da_6: 	dc.w Map_61da_26-Map_61da
0000E96A 0000                       Map_61da_8: 	dc.w Map_61da_2C-Map_61da
0000E96C 02                         Map_61da_A: 	dc.b $2
0000E96D DE0E 0000 F0               	dc.b $DE, $E, $0, $0, $F0
0000E972 F60E 000C F0               	dc.b $F6, $E, $0, $C, $F0
0000E977 02                         Map_61da_15: 	dc.b $2
0000E978 E60E 0000 F0               	dc.b $E6, $E, $0, $0, $F0
0000E97D FE0D 0018 F0               	dc.b $FE, $D, $0, $18, $F0
0000E982 01                         Map_61da_20: 	dc.b $1
0000E983 F00F 0020 F0               	dc.b $F0, $F, $0, $20, $F0
0000E988 01                         Map_61da_26: 	dc.b $1
0000E989 F00F 0030 F0               	dc.b $F0, $F, $0, $30, $F0
0000E98E 01                         Map_61da_2C: 	dc.b $1
0000E98F F00F 0040 F0               	dc.b $F0, $F, $0, $40, $F0
0000E994                            	even
0000E994                            	even
0000E994                            
0000E994                            ; ===========================================================================
0000E994                            ; ---------------------------------------------------------------------------
0000E994                            ; Object 44 - walls (GHZ)
0000E994                            ; ---------------------------------------------------------------------------
0000E994                            
0000E994                            Obj44:					; XREF: Obj_Index
0000E994 7000                       		moveq	#0,d0
0000E996 1028 0024                  		move.b	$24(a0),d0
0000E99A 323B 0000                  		move.w	Obj44_Index(pc,d0.w),d1
0000E99E 4EFB 1000                  		jmp	Obj44_Index(pc,d1.w)
0000E9A2                            ; ===========================================================================
0000E9A2 0000                       Obj44_Index:	dc.w Obj44_Main-Obj44_Index
0000E9A4 0000                       		dc.w Obj44_Solid-Obj44_Index
0000E9A6 0000                       		dc.w Obj44_Display-Obj44_Index
0000E9A8                            ; ===========================================================================
0000E9A8                            
0000E9A8                            Obj44_Main:				; XREF: Obj44_Index
0000E9A8 5428 0024                  		addq.b	#2,$24(a0)
0000E9AC 217C 0000 0000 0004        		move.l	#Map_obj44,4(a0)
0000E9B4 317C 434C 0002             		move.w	#$434C,2(a0)
0000E9BA 0028 0004 0001             		ori.b	#4,1(a0)
0000E9C0 117C 0008 0019             		move.b	#8,$19(a0)
0000E9C6 117C 0006 0018             		move.b	#6,$18(a0)
0000E9CC 1168 0028 001A             		move.b	$28(a0),$1A(a0)	; copy object type number to frame number
0000E9D2 08A8 0004 001A             		bclr	#4,$1A(a0)	; clear	4th bit	(deduct	$10)
0000E9D8 6700                       		beq.s	Obj44_Solid	; make object solid if 4th bit = 0
0000E9DA 5428 0024                  		addq.b	#2,$24(a0)
0000E9DE 6000                       		bra.s	Obj44_Display	; don't make it solid if 4th bit = 1
0000E9E0                            ; ===========================================================================
0000E9E0                            
0000E9E0                            Obj44_Solid:				; XREF: Obj44_Index
0000E9E0 323C 0013                  		move.w	#$13,d1
0000E9E4 343C 0028                  		move.w	#$28,d2
0000E9E8 6100 A6FA                  		bsr.w	Obj44_SolidWall
0000E9EC                            
0000E9EC                            Obj44_Display:				; XREF: Obj44_Index
0000E9EC 6100 F3DA                  		bsr.w	DisplaySprite
0000E9F0 3028 0008                  		move.w	8(a0),d0
0000E9F4 0240 FF80                  		andi.w	#$FF80,d0
0000E9F8 3238 F700                  		move.w	($FFFFF700).w,d1
0000E9FC 0441 0080                  		subi.w	#$80,d1
0000EA00 0241 FF80                  		andi.w	#$FF80,d1
0000EA04 9041                       		sub.w	d1,d0
0000EA06 0C40 0280                  		cmpi.w	#$280,d0
0000EA0A 6200 F3F8                  		bhi.w	DeleteObject
0000EA0E 4E75                       		rts	
0000EA10                            ; ===========================================================================
0000EA10                            ; ---------------------------------------------------------------------------
0000EA10                            ; Sprite mappings - walls (GHZ)
0000EA10                            ; ---------------------------------------------------------------------------
0000EA10                            Map_obj44:
0000EA10                            	include "_maps\obj44.asm"
0000EA10                            ; ---------------------------------------------------------------------------
0000EA10                            ; Sprite mappings - walls (GHZ)
0000EA10                            ; ---------------------------------------------------------------------------
0000EA10 0000                       		dc.w byte_E256-Map_obj44
0000EA12 0000                       		dc.w byte_E26B-Map_obj44
0000EA14 0000                       		dc.w byte_E280-Map_obj44
0000EA16 04                         byte_E256:	dc.b 4
0000EA17 E005 0004 F8               		dc.b $E0, 5, 0,	4, $F8
0000EA1C F005 0008 F8               		dc.b $F0, 5, 0,	8, $F8
0000EA21 0005 0008 F8               		dc.b 0,	5, 0, 8, $F8
0000EA26 1005 0008 F8               		dc.b $10, 5, 0,	8, $F8
0000EA2B 04                         byte_E26B:	dc.b 4
0000EA2C E005 0008 F8               		dc.b $E0, 5, 0,	8, $F8
0000EA31 F005 0008 F8               		dc.b $F0, 5, 0,	8, $F8
0000EA36 0005 0008 F8               		dc.b 0,	5, 0, 8, $F8
0000EA3B 1005 0008 F8               		dc.b $10, 5, 0,	8, $F8
0000EA40 04                         byte_E280:	dc.b 4
0000EA41 E005 0000 F8               		dc.b $E0, 5, 0,	0, $F8
0000EA46 F005 0000 F8               		dc.b $F0, 5, 0,	0, $F8
0000EA4B 0005 0000 F8               		dc.b 0,	5, 0, 0, $F8
0000EA50 1005 0000 F8               		dc.b $10, 5, 0,	0, $F8
0000EA56 00                         		even
0000EA56 00                         		even
0000EA56                            
0000EA56                            ; ===========================================================================
0000EA56                            ; ---------------------------------------------------------------------------
0000EA56                            ; Object 13 - lava ball	producer (MZ, SLZ)
0000EA56                            ; ---------------------------------------------------------------------------
0000EA56                            
0000EA56                            Obj13:					; XREF: Obj_Index
0000EA56 7000                       		moveq	#0,d0
0000EA58 1028 0024                  		move.b	$24(a0),d0
0000EA5C 323B 0000                  		move.w	Obj13_Index(pc,d0.w),d1
0000EA60 4EBB 1000                  		jsr	Obj13_Index(pc,d1.w)
0000EA64 6000 0000                  		bra.w	Obj14_ChkDel
0000EA68                            ; ===========================================================================
0000EA68 0000                       Obj13_Index:	dc.w Obj13_Main-Obj13_Index
0000EA6A 0000                       		dc.w Obj13_MakeLava-Obj13_Index
0000EA6C                            ; ---------------------------------------------------------------------------
0000EA6C                            ;
0000EA6C                            ; Lava ball production rates
0000EA6C                            ;
0000EA6C 1E3C 5A78 96B4             Obj13_Rates:	dc.b 30, 60, 90, 120, 150, 180
0000EA72                            ; ===========================================================================
0000EA72                            
0000EA72                            Obj13_Main:				; XREF: Obj13_Index
0000EA72 5428 0024                  		addq.b	#2,$24(a0)
0000EA76 1028 0028                  		move.b	$28(a0),d0
0000EA7A E848                       		lsr.w	#4,d0
0000EA7C 0240 000F                  		andi.w	#$F,d0
0000EA80 117B 00EA 001F             		move.b	Obj13_Rates(pc,d0.w),$1F(a0)
0000EA86 1168 001F 001E             		move.b	$1F(a0),$1E(a0)	; set time delay for lava balls
0000EA8C 0228 000F 0028             		andi.b	#$F,$28(a0)
0000EA92                            
0000EA92                            Obj13_MakeLava:				; XREF: Obj13_Index
0000EA92 5328 001E                  		subq.b	#1,$1E(a0)	; subtract 1 from time delay
0000EA96 6600                       		bne.s	locret_E302	; if time still	remains, branch
0000EA98 1168 001F 001E             		move.b	$1F(a0),$1E(a0)	; reset	time delay
0000EA9E 6100 F5A2                  		bsr.w	ChkObjOnScreen
0000EAA2 6600                       		bne.s	locret_E302
0000EAA4 6100 F7A8                  		bsr.w	SingleObjLoad
0000EAA8 6600                       		bne.s	locret_E302
0000EAAA 12BC 0014                  		move.b	#$14,0(a1)	; load lava ball object
0000EAAE 3368 0008 0008             		move.w	8(a0),8(a1)
0000EAB4 3368 000C 000C             		move.w	$C(a0),$C(a1)
0000EABA 1368 0028 0028             		move.b	$28(a0),$28(a1)
0000EAC0                            
0000EAC0                            locret_E302:
0000EAC0 4E75                       		rts	
0000EAC2                            ; ===========================================================================
0000EAC2                            ; ---------------------------------------------------------------------------
0000EAC2                            ; Object 14 - lava balls (MZ, SLZ)
0000EAC2                            ; ---------------------------------------------------------------------------
0000EAC2                            
0000EAC2                            Obj14:					; XREF: Obj_Index
0000EAC2 7000                       		moveq	#0,d0
0000EAC4 1028 0024                  		move.b	$24(a0),d0
0000EAC8 323B 0000                  		move.w	Obj14_Index(pc,d0.w),d1
0000EACC 4EBB 1000                  		jsr	Obj14_Index(pc,d1.w)
0000EAD0 6000 F2F6                  		bra.w	DisplaySprite
0000EAD4                            ; ===========================================================================
0000EAD4 0000                       Obj14_Index:	dc.w Obj14_Main-Obj14_Index
0000EAD6 0000                       		dc.w Obj14_Action-Obj14_Index
0000EAD8 0000                       		dc.w Obj14_Delete-Obj14_Index
0000EADA                            
0000EADA FC00 FB00 FA00 F900 FE00   Obj14_Speeds:	dc.w $FC00, $FB00, $FA00, $F900, $FE00
0000EAE4 0200 FE00 0200 0000        		dc.w $200, $FE00, $200,	0
0000EAEC                            ; ===========================================================================
0000EAEC                            
0000EAEC                            Obj14_Main:				; XREF: Obj14_Index
0000EAEC 5428 0024                  		addq.b	#2,$24(a0)
0000EAF0 117C 0008 0016             		move.b	#8,$16(a0)
0000EAF6 117C 0008 0017             		move.b	#8,$17(a0)
0000EAFC 217C 0000 BA86 0004        		move.l	#Map_obj14,4(a0)
0000EB04 317C 0345 0002             		move.w	#$345,2(a0)
0000EB0A 0C38 0003 FE10             		cmpi.b	#3,($FFFFFE10).w ; check if level is SLZ
0000EB10 6600                       		bne.s	loc_E35A
0000EB12 317C 0480 0002             		move.w	#$480,2(a0)	; SLZ specific code
0000EB18                            
0000EB18                            loc_E35A:
0000EB18 117C 0004 0001             		move.b	#4,1(a0)
0000EB1E 117C 0003 0018             		move.b	#3,$18(a0)
0000EB24 117C 008B 0020             		move.b	#$8B,$20(a0)
0000EB2A 3168 000C 0030             		move.w	$C(a0),$30(a0)
0000EB30 4A28 0029                  		tst.b	$29(a0)
0000EB34 6700                       		beq.s	Obj14_SetSpeed
0000EB36 5428 0018                  		addq.b	#2,$18(a0)
0000EB3A                            
0000EB3A                            Obj14_SetSpeed:
0000EB3A 7000                       		moveq	#0,d0
0000EB3C 1028 0028                  		move.b	$28(a0),d0
0000EB40 D040                       		add.w	d0,d0
0000EB42 317B 0096 0012             		move.w	Obj14_Speeds(pc,d0.w),$12(a0) ;	load object speed (vertical)
0000EB48 117C 0008 0019             		move.b	#8,$19(a0)
0000EB4E 0C28 0006 0028             		cmpi.b	#6,$28(a0)	; is object type below $6 ?
0000EB54 6500                       		bcs.s	Obj14_PlaySnd	; if yes, branch
0000EB56 117C 0010 0019             		move.b	#$10,$19(a0)
0000EB5C 117C 0002 001C             		move.b	#2,$1C(a0)	; use horizontal animation
0000EB62 3168 0012 0010             		move.w	$12(a0),$10(a0)	; set horizontal speed
0000EB68 317C 0000 0012             		move.w	#0,$12(a0)	; delete vertical speed
0000EB6E                            
0000EB6E                            Obj14_PlaySnd:
0000EB6E 303C 00AE                  		move.w	#$AE,d0
0000EB72 4EB9 0000 15C0             		jsr	(PlaySound_Special).l ;	play lava ball sound
0000EB78                            
0000EB78                            Obj14_Action:				; XREF: Obj14_Index
0000EB78 7000                       		moveq	#0,d0
0000EB7A 1028 0028                  		move.b	$28(a0),d0
0000EB7E D040                       		add.w	d0,d0
0000EB80 323B 0000                  		move.w	Obj14_TypeIndex(pc,d0.w),d1
0000EB84 4EBB 1000                  		jsr	Obj14_TypeIndex(pc,d1.w)
0000EB88 6100 F218                  		bsr.w	SpeedToPos
0000EB8C 43F9 0000 0000             		lea	(Ani_obj14).l,a1
0000EB92 6100 C2F4                  		bsr.w	AnimateSprite
0000EB96                            
0000EB96                            Obj14_ChkDel:				; XREF: Obj13
0000EB96 3028 0008                  		move.w	8(a0),d0
0000EB9A 0240 FF80                  		andi.w	#$FF80,d0
0000EB9E 3238 F700                  		move.w	($FFFFF700).w,d1
0000EBA2 0441 0080                  		subi.w	#$80,d1
0000EBA6 0241 FF80                  		andi.w	#$FF80,d1
0000EBAA 9041                       		sub.w	d1,d0
0000EBAC 0C40 0280                  		cmpi.w	#$280,d0
0000EBB0 6200 F252                  		bhi.w	DeleteObject
0000EBB4 4E75                       		rts	
0000EBB6                            ; ===========================================================================
0000EBB6 0000 0000                  Obj14_TypeIndex:dc.w Obj14_Type00-Obj14_TypeIndex, Obj14_Type00-Obj14_TypeIndex
0000EBBA 0000 0000                  		dc.w Obj14_Type00-Obj14_TypeIndex, Obj14_Type00-Obj14_TypeIndex
0000EBBE 0000 0000                  		dc.w Obj14_Type04-Obj14_TypeIndex, Obj14_Type05-Obj14_TypeIndex
0000EBC2 0000 0000                  		dc.w Obj14_Type06-Obj14_TypeIndex, Obj14_Type07-Obj14_TypeIndex
0000EBC6 0000                       		dc.w Obj14_Type08-Obj14_TypeIndex
0000EBC8                            ; ===========================================================================
0000EBC8                            ; lavaball types 00-03 fly up and fall back down
0000EBC8                            
0000EBC8                            Obj14_Type00:				; XREF: Obj14_TypeIndex
0000EBC8 0668 0018 0012             		addi.w	#$18,$12(a0)	; increase object's downward speed
0000EBCE 3028 0030                  		move.w	$30(a0),d0
0000EBD2 B068 000C                  		cmp.w	$C(a0),d0	; has object fallen back to its	original position?
0000EBD6 6400                       		bcc.s	loc_E41E	; if not, branch
0000EBD8 5428 0024                  		addq.b	#2,$24(a0)	; goto "Obj14_Delete" routine
0000EBDC                            
0000EBDC                            loc_E41E:
0000EBDC 08A8 0001 0022             		bclr	#1,$22(a0)
0000EBE2 4A68 0012                  		tst.w	$12(a0)
0000EBE6 6A00                       		bpl.s	locret_E430
0000EBE8 08E8 0001 0022             		bset	#1,$22(a0)
0000EBEE                            
0000EBEE                            locret_E430:
0000EBEE 4E75                       		rts	
0000EBF0                            ; ===========================================================================
0000EBF0                            ; lavaball type	04 flies up until it hits the ceiling
0000EBF0                            
0000EBF0                            Obj14_Type04:				; XREF: Obj14_TypeIndex
0000EBF0 08E8 0001 0022             		bset	#1,$22(a0)
0000EBF6 6100 0000                  		bsr.w	ObjHitCeiling
0000EBFA 4A41                       		tst.w	d1
0000EBFC 6A00                       		bpl.s	locret_E452
0000EBFE 117C 0008 0028             		move.b	#8,$28(a0)
0000EC04 117C 0001 001C             		move.b	#1,$1C(a0)
0000EC0A 317C 0000 0012             		move.w	#0,$12(a0)	; stop the object when it touches the ceiling
0000EC10                            
0000EC10                            locret_E452:
0000EC10 4E75                       		rts	
0000EC12                            ; ===========================================================================
0000EC12                            ; lavaball type	05 falls down until it hits the	floor
0000EC12                            
0000EC12                            Obj14_Type05:				; XREF: Obj14_TypeIndex
0000EC12 08A8 0001 0022             		bclr	#1,$22(a0)
0000EC18 6100 0000                  		bsr.w	ObjHitFloor
0000EC1C 4A41                       		tst.w	d1
0000EC1E 6A00                       		bpl.s	locret_E474
0000EC20 117C 0008 0028             		move.b	#8,$28(a0)
0000EC26 117C 0001 001C             		move.b	#1,$1C(a0)
0000EC2C 317C 0000 0012             		move.w	#0,$12(a0)	; stop the object when it touches the floor
0000EC32                            
0000EC32                            locret_E474:
0000EC32 4E75                       		rts	
0000EC34                            ; ===========================================================================
0000EC34                            ; lavaball types 06-07 move sideways
0000EC34                            
0000EC34                            Obj14_Type06:				; XREF: Obj14_TypeIndex
0000EC34 08E8 0000 0022             		bset	#0,$22(a0)
0000EC3A 76F8                       		moveq	#-8,d3
0000EC3C 6100 0000                  		bsr.w	ObjHitWallLeft
0000EC40 4A41                       		tst.w	d1
0000EC42 6A00                       		bpl.s	locret_E498
0000EC44 117C 0008 0028             		move.b	#8,$28(a0)
0000EC4A 117C 0003 001C             		move.b	#3,$1C(a0)
0000EC50 317C 0000 0010             		move.w	#0,$10(a0)	; stop object when it touches a	wall
0000EC56                            
0000EC56                            locret_E498:
0000EC56 4E75                       		rts	
0000EC58                            ; ===========================================================================
0000EC58                            
0000EC58                            Obj14_Type07:				; XREF: Obj14_TypeIndex
0000EC58 08A8 0000 0022             		bclr	#0,$22(a0)
0000EC5E 7608                       		moveq	#8,d3
0000EC60 6100 0000                  		bsr.w	ObjHitWallRight
0000EC64 4A41                       		tst.w	d1
0000EC66 6A00                       		bpl.s	locret_E4BC
0000EC68 117C 0008 0028             		move.b	#8,$28(a0)
0000EC6E 117C 0003 001C             		move.b	#3,$1C(a0)
0000EC74 317C 0000 0010             		move.w	#0,$10(a0)	; stop object when it touches a	wall
0000EC7A                            
0000EC7A                            locret_E4BC:
0000EC7A 4E75                       		rts	
0000EC7C                            ; ===========================================================================
0000EC7C                            
0000EC7C                            Obj14_Type08:				; XREF: Obj14_TypeIndex
0000EC7C 4E75                       		rts	
0000EC7E                            ; ===========================================================================
0000EC7E                            
0000EC7E                            Obj14_Delete:				; XREF: Obj14_Index
0000EC7E 6000 F184                  		bra.w	DeleteObject
0000EC82                            ; ===========================================================================
0000EC82                            Ani_obj14:
0000EC82                            	include "_anim\obj14.asm"
0000EC82                            ; ---------------------------------------------------------------------------
0000EC82                            ; Animation script - lava balls
0000EC82                            ; ---------------------------------------------------------------------------
0000EC82 0000                       		dc.w byte_E4CC-Ani_obj14
0000EC84 0000                       		dc.w byte_E4D2-Ani_obj14
0000EC86 0000                       		dc.w byte_E4D6-Ani_obj14
0000EC88 0000                       		dc.w byte_E4DC-Ani_obj14
0000EC8A 0500 2001 21FF             byte_E4CC:	dc.b 5,	0, $20,	1, $21,	$FF
0000EC90 0502 FC00                  byte_E4D2:	dc.b 5,	2, $FC,	0
0000EC94 0503 4304 44FF             byte_E4D6:	dc.b 5,	3, $43,	4, $44,	$FF
0000EC9A 0505 FC00                  byte_E4DC:	dc.b 5,	5, $FC,	0
0000EC9E                            		even
0000EC9E                            		even
0000EC9E                            
0000EC9E                            ; ===========================================================================
0000EC9E                            ; ---------------------------------------------------------------------------
0000EC9E                            ; Object 6D - flame thrower (SBZ)
0000EC9E                            ; ---------------------------------------------------------------------------
0000EC9E                            
0000EC9E                            Obj6D:					; XREF: Obj_Index
0000EC9E 7000                       		moveq	#0,d0
0000ECA0 1028 0024                  		move.b	$24(a0),d0
0000ECA4 323B 0000                  		move.w	Obj6D_Index(pc,d0.w),d1
0000ECA8 4EFB 1000                  		jmp	Obj6D_Index(pc,d1.w)
0000ECAC                            ; ===========================================================================
0000ECAC 0000                       Obj6D_Index:	dc.w Obj6D_Main-Obj6D_Index
0000ECAE 0000                       		dc.w Obj6D_Action-Obj6D_Index
0000ECB0                            ; ===========================================================================
0000ECB0                            
0000ECB0                            Obj6D_Main:				; XREF: Obj6D_Index
0000ECB0 5428 0024                  		addq.b	#2,$24(a0)
0000ECB4 217C 0000 0000 0004        		move.l	#Map_obj6D,4(a0)
0000ECBC 317C 83D9 0002             		move.w	#$83D9,2(a0)
0000ECC2 0028 0004 0001             		ori.b	#4,1(a0)
0000ECC8 117C 0001 0018             		move.b	#1,$18(a0)
0000ECCE 3168 000C 0030             		move.w	$C(a0),$30(a0)
0000ECD4 117C 000C 0019             		move.b	#$C,$19(a0)
0000ECDA 1028 0028                  		move.b	$28(a0),d0
0000ECDE 0240 00F0                  		andi.w	#$F0,d0		; read 1st digit of object type
0000ECE2 D040                       		add.w	d0,d0		; multiply by 2
0000ECE4 3140 0030                  		move.w	d0,$30(a0)
0000ECE8 3140 0032                  		move.w	d0,$32(a0)	; set flaming time
0000ECEC 1028 0028                  		move.b	$28(a0),d0
0000ECF0 0240 000F                  		andi.w	#$F,d0		; read 2nd digit of object type
0000ECF4 EB48                       		lsl.w	#5,d0		; multiply by $20
0000ECF6 3140 0034                  		move.w	d0,$34(a0)	; set pause time
0000ECFA 117C 000A 0036             		move.b	#$A,$36(a0)
0000ED00 0828 0001 0022             		btst	#1,$22(a0)
0000ED06 6700                       		beq.s	Obj6D_Action
0000ED08 117C 0002 001C             		move.b	#2,$1C(a0)
0000ED0E 117C 0015 0036             		move.b	#$15,$36(a0)
0000ED14                            
0000ED14                            Obj6D_Action:				; XREF: Obj6D_Index
0000ED14 5368 0030                  		subq.w	#1,$30(a0)	; subtract 1 from time
0000ED18 6A00                       		bpl.s	loc_E57A	; if time remains, branch
0000ED1A 3168 0034 0030             		move.w	$34(a0),$30(a0)	; begin	pause time
0000ED20 0868 0000 001C             		bchg	#0,$1C(a0)
0000ED26 6700                       		beq.s	loc_E57A
0000ED28 3168 0032 0030             		move.w	$32(a0),$30(a0)	; begin	flaming	time
0000ED2E 303C 00B3                  		move.w	#$B3,d0
0000ED32 4EB9 0000 15C0             		jsr	(PlaySound_Special).l ;	play flame sound
0000ED38                            
0000ED38                            loc_E57A:
0000ED38 43F9 0000 0000             		lea	(Ani_obj6D).l,a1
0000ED3E 6100 C148                  		bsr.w	AnimateSprite
0000ED42 117C 0000 0020             		move.b	#0,$20(a0)
0000ED48 1028 0036                  		move.b	$36(a0),d0
0000ED4C B028 001A                  		cmp.b	$1A(a0),d0
0000ED50 6600                       		bne.s	Obj6D_ChkDel
0000ED52 117C 00A3 0020             		move.b	#$A3,$20(a0)
0000ED58                            
0000ED58                            Obj6D_ChkDel:
0000ED58 3028 0008                  		move.w	8(a0),d0
0000ED5C 0240 FF80                  		andi.w	#$FF80,d0
0000ED60 3238 F700                  		move.w	($FFFFF700).w,d1
0000ED64 0441 0080                  		subi.w	#$80,d1
0000ED68 0241 FF80                  		andi.w	#$FF80,d1
0000ED6C 9041                       		sub.w	d1,d0
0000ED6E 0C40 0280                  		cmpi.w	#$280,d0
0000ED72 6200 F090                  		bhi.w	DeleteObject
0000ED76 6000 F050                  		bra.w	DisplaySprite
0000ED7A                            ; ===========================================================================
0000ED7A                            Ani_obj6D:
0000ED7A                            	include "_anim\obj6D.asm"
0000ED7A                            ; ---------------------------------------------------------------------------
0000ED7A                            ; Animation script - flamethrower (SBZ)
0000ED7A                            ; ---------------------------------------------------------------------------
0000ED7A 0000                       		dc.w byte_E5C4-Ani_obj6D
0000ED7C 0000                       		dc.w byte_E5D2-Ani_obj6D
0000ED7E 0000                       		dc.w byte_E5DC-Ani_obj6D
0000ED80 0000                       		dc.w byte_E5EA-Ani_obj6D
0000ED82 0300 0102 0304 0506 0708+  byte_E5C4:	dc.b 3,	0, 1, 2, 3, 4, 5, 6, 7,	8, 9, $A, $FE, 2
0000ED90 0009 0705 0301 00FE 0100   byte_E5D2:	dc.b 0,	9, 7, 5, 3, 1, 0, $FE, 1, 0
0000ED9A 030B 0C0D 0E0F 1011 1213+  byte_E5DC:	dc.b 3,	$B, $C,	$D, $E,	$F, $10, $11, $12, $13,	$14, $15, $FE, 2
0000EDA8 0014 1211 0F0D 0BFE 0100   byte_E5EA:	dc.b 0,	$14, $12, $11, $F, $D, $B, $FE,	1, 0
0000EDB2                            		even
0000EDB2                            		even
0000EDB2                            
0000EDB2                            ; ---------------------------------------------------------------------------
0000EDB2                            ; Sprite mappings - flame thrower (SBZ)
0000EDB2                            ; ---------------------------------------------------------------------------
0000EDB2                            Map_obj6D:
0000EDB2                            	include "_maps\obj6D.asm"
0000EDB2                            ; ---------------------------------------------------------------------------
0000EDB2                            ; Sprite mappings - flame thrower (SBZ)
0000EDB2                            ; ---------------------------------------------------------------------------
0000EDB2 0000 0000                  		dc.w byte_E620-Map_obj6D, byte_E626-Map_obj6D
0000EDB6 0000 0000                  		dc.w byte_E631-Map_obj6D, byte_E63C-Map_obj6D
0000EDBA 0000 0000                  		dc.w byte_E64C-Map_obj6D, byte_E65C-Map_obj6D
0000EDBE 0000 0000                  		dc.w byte_E671-Map_obj6D, byte_E686-Map_obj6D
0000EDC2 0000 0000                  		dc.w byte_E6A0-Map_obj6D, byte_E6BA-Map_obj6D
0000EDC6 0000 0000                  		dc.w byte_E6D9-Map_obj6D, byte_E6F8-Map_obj6D
0000EDCA 0000 0000                  		dc.w byte_E6FE-Map_obj6D, byte_E709-Map_obj6D
0000EDCE 0000 0000                  		dc.w byte_E714-Map_obj6D, byte_E724-Map_obj6D
0000EDD2 0000 0000                  		dc.w byte_E734-Map_obj6D, byte_E749-Map_obj6D
0000EDD6 0000 0000                  		dc.w byte_E75E-Map_obj6D, byte_E778-Map_obj6D
0000EDDA 0000 0000                  		dc.w byte_E792-Map_obj6D, byte_E7B1-Map_obj6D
0000EDDE 01                         byte_E620:	dc.b 1
0000EDDF 2805 4014 FB               		dc.b $28, 5, $40, $14, $FB
0000EDE4 02                         byte_E626:	dc.b 2
0000EDE5 2001 0000 FD               		dc.b $20, 1, 0,	0, $FD
0000EDEA 2805 4014 FB               		dc.b $28, 5, $40, $14, $FB
0000EDEF 02                         byte_E631:	dc.b 2
0000EDF0 2001 0800 FC               		dc.b $20, 1, 8,	0, $FC
0000EDF5 2805 4014 FB               		dc.b $28, 5, $40, $14, $FB
0000EDFA 03                         byte_E63C:	dc.b 3
0000EDFB 1006 0002 F8               		dc.b $10, 6, 0,	2, $F8
0000EE00 2001 0000 FD               		dc.b $20, 1, 0,	0, $FD
0000EE05 2805 4014 FB               		dc.b $28, 5, $40, $14, $FB
0000EE0A 03                         byte_E64C:	dc.b 3
0000EE0B 1006 0802 F8               		dc.b $10, 6, 8,	2, $F8
0000EE10 2001 0800 FC               		dc.b $20, 1, 8,	0, $FC
0000EE15 2805 4014 FB               		dc.b $28, 5, $40, $14, $FB
0000EE1A 04                         byte_E65C:	dc.b 4
0000EE1B 0806 0002 F8               		dc.b 8,	6, 0, 2, $F8
0000EE20 1006 0002 F8               		dc.b $10, 6, 0,	2, $F8
0000EE25 2001 0000 FD               		dc.b $20, 1, 0,	0, $FD
0000EE2A 2805 4014 FB               		dc.b $28, 5, $40, $14, $FB
0000EE2F 04                         byte_E671:	dc.b 4
0000EE30 0806 0802 F8               		dc.b 8,	6, 8, 2, $F8
0000EE35 1006 0802 F8               		dc.b $10, 6, 8,	2, $F8
0000EE3A 2001 0800 FC               		dc.b $20, 1, 8,	0, $FC
0000EE3F 2805 4014 FB               		dc.b $28, 5, $40, $14, $FB
0000EE44 05                         byte_E686:	dc.b 5
0000EE45 F80B 0008 F4               		dc.b $F8, $B, 0, 8, $F4
0000EE4A 0806 0002 F8               		dc.b 8,	6, 0, 2, $F8
0000EE4F 1006 0002 F8               		dc.b $10, 6, 0,	2, $F8
0000EE54 2001 0000 FD               		dc.b $20, 1, 0,	0, $FD
0000EE59 2805 4014 FB               		dc.b $28, 5, $40, $14, $FB
0000EE5E 05                         byte_E6A0:	dc.b 5
0000EE5F F80B 0808 F4               		dc.b $F8, $B, 8, 8, $F4
0000EE64 0806 0802 F8               		dc.b 8,	6, 8, 2, $F8
0000EE69 1006 0802 F8               		dc.b $10, 6, 8,	2, $F8
0000EE6E 2001 0800 FC               		dc.b $20, 1, 8,	0, $FC
0000EE73 2805 4014 FB               		dc.b $28, 5, $40, $14, $FB
0000EE78 06                         byte_E6BA:	dc.b 6
0000EE79 E80B 0008 F4               		dc.b $E8, $B, 0, 8, $F4
0000EE7E F70B 0008 F4               		dc.b $F7, $B, 0, 8, $F4
0000EE83 0806 0002 F8               		dc.b 8,	6, 0, 2, $F8
0000EE88 0F06 0002 F8               		dc.b $F, 6, 0, 2, $F8
0000EE8D 2001 0000 FD               		dc.b $20, 1, 0,	0, $FD
0000EE92 2805 4014 FB               		dc.b $28, 5, $40, $14, $FB
0000EE97 06                         byte_E6D9:	dc.b 6
0000EE98 E70B 0808 F4               		dc.b $E7, $B, 8, 8, $F4
0000EE9D F80B 0808 F4               		dc.b $F8, $B, 8, 8, $F4
0000EEA2 0706 0802 F8               		dc.b 7,	6, 8, 2, $F8
0000EEA7 1006 0802 F8               		dc.b $10, 6, 8,	2, $F8
0000EEAC 2001 0800 FC               		dc.b $20, 1, 8,	0, $FC
0000EEB1 2805 4014 FB               		dc.b $28, 5, $40, $14, $FB
0000EEB6 01                         byte_E6F8:	dc.b 1
0000EEB7 2805 4018 F9               		dc.b $28, 5, $40, $18, $F9
0000EEBC 02                         byte_E6FE:	dc.b 2
0000EEBD 2805 4018 F9               		dc.b $28, 5, $40, $18, $F9
0000EEC2 2001 0000 FD               		dc.b $20, 1, 0,	0, $FD
0000EEC7 02                         byte_E709:	dc.b 2
0000EEC8 2805 4018 F9               		dc.b $28, 5, $40, $18, $F9
0000EECD 2001 0800 FC               		dc.b $20, 1, 8,	0, $FC
0000EED2 03                         byte_E714:	dc.b 3
0000EED3 1006 0002 F8               		dc.b $10, 6, 0,	2, $F8
0000EED8 2805 4018 F9               		dc.b $28, 5, $40, $18, $F9
0000EEDD 2001 0000 FD               		dc.b $20, 1, 0,	0, $FD
0000EEE2 03                         byte_E724:	dc.b 3
0000EEE3 1006 0802 F8               		dc.b $10, 6, 8,	2, $F8
0000EEE8 2805 4018 F9               		dc.b $28, 5, $40, $18, $F9
0000EEED 2001 0800 FC               		dc.b $20, 1, 8,	0, $FC
0000EEF2 04                         byte_E734:	dc.b 4
0000EEF3 0806 0002 F8               		dc.b 8,	6, 0, 2, $F8
0000EEF8 1006 0002 F8               		dc.b $10, 6, 0,	2, $F8
0000EEFD 2805 4018 F9               		dc.b $28, 5, $40, $18, $F9
0000EF02 2001 0000 FD               		dc.b $20, 1, 0,	0, $FD
0000EF07 04                         byte_E749:	dc.b 4
0000EF08 0806 0802 F8               		dc.b 8,	6, 8, 2, $F8
0000EF0D 1006 0802 F8               		dc.b $10, 6, 8,	2, $F8
0000EF12 2805 4018 F9               		dc.b $28, 5, $40, $18, $F9
0000EF17 2001 0800 FC               		dc.b $20, 1, 8,	0, $FC
0000EF1C 05                         byte_E75E:	dc.b 5
0000EF1D F80B 0008 F4               		dc.b $F8, $B, 0, 8, $F4
0000EF22 0806 0002 F8               		dc.b 8,	6, 0, 2, $F8
0000EF27 1006 0002 F8               		dc.b $10, 6, 0,	2, $F8
0000EF2C 2805 4018 F9               		dc.b $28, 5, $40, $18, $F9
0000EF31 2001 0000 FD               		dc.b $20, 1, 0,	0, $FD
0000EF36 05                         byte_E778:	dc.b 5
0000EF37 F80B 0808 F4               		dc.b $F8, $B, 8, 8, $F4
0000EF3C 0806 0802 F8               		dc.b 8,	6, 8, 2, $F8
0000EF41 1006 0802 F8               		dc.b $10, 6, 8,	2, $F8
0000EF46 2805 4018 F9               		dc.b $28, 5, $40, $18, $F9
0000EF4B 2001 0800 FC               		dc.b $20, 1, 8,	0, $FC
0000EF50 06                         byte_E792:	dc.b 6
0000EF51 E80B 0008 F4               		dc.b $E8, $B, 0, 8, $F4
0000EF56 F70B 0008 F4               		dc.b $F7, $B, 0, 8, $F4
0000EF5B 0806 0002 F8               		dc.b 8,	6, 0, 2, $F8
0000EF60 0F06 0002 F8               		dc.b $F, 6, 0, 2, $F8
0000EF65 2805 4018 F9               		dc.b $28, 5, $40, $18, $F9
0000EF6A 2001 0000 FD               		dc.b $20, 1, 0,	0, $FD
0000EF6F 06                         byte_E7B1:	dc.b 6
0000EF70 E70B 0808 F4               		dc.b $E7, $B, 8, 8, $F4
0000EF75 F80B 0808 F4               		dc.b $F8, $B, 8, 8, $F4
0000EF7A 0706 0802 F8               		dc.b 7,	6, 8, 2, $F8
0000EF7F 1006 0802 F8               		dc.b $10, 6, 8,	2, $F8
0000EF84 2805 4018 F9               		dc.b $28, 5, $40, $18, $F9
0000EF89 2001 0800 FC               		dc.b $20, 1, 8,	0, $FC
0000EF8E                            		even
0000EF8E                            		even
0000EF8E                            
0000EF8E                            ; ===========================================================================
0000EF8E                            ; ---------------------------------------------------------------------------
0000EF8E                            ; Object 46 - solid blocks and blocks that fall	from the ceiling (MZ)
0000EF8E                            ; ---------------------------------------------------------------------------
0000EF8E                            
0000EF8E                            Obj46:					; XREF: Obj_Index
0000EF8E 7000                       		moveq	#0,d0
0000EF90 1028 0024                  		move.b	$24(a0),d0
0000EF94 323B 0000                  		move.w	Obj46_Index(pc,d0.w),d1
0000EF98 4EFB 1000                  		jmp	Obj46_Index(pc,d1.w)
0000EF9C                            ; ===========================================================================
0000EF9C 0000                       Obj46_Index:	dc.w Obj46_Main-Obj46_Index
0000EF9E 0000                       		dc.w Obj46_Action-Obj46_Index
0000EFA0                            ; ===========================================================================
0000EFA0                            
0000EFA0                            Obj46_Main:				; XREF: Obj46_Index
0000EFA0 5428 0024                  		addq.b	#2,$24(a0)
0000EFA4 117C 000F 0016             		move.b	#$F,$16(a0)
0000EFAA 117C 000F 0017             		move.b	#$F,$17(a0)
0000EFB0 217C 0000 0000 0004        		move.l	#Map_obj46,4(a0)
0000EFB8 317C 4000 0002             		move.w	#$4000,2(a0)
0000EFBE 117C 0004 0001             		move.b	#4,1(a0)
0000EFC4 117C 0003 0018             		move.b	#3,$18(a0)
0000EFCA 117C 0010 0019             		move.b	#$10,$19(a0)
0000EFD0 3168 000C 0030             		move.w	$C(a0),$30(a0)
0000EFD6 317C 05C0 0032             		move.w	#$5C0,$32(a0)
0000EFDC                            
0000EFDC                            Obj46_Action:				; XREF: Obj46_Index
0000EFDC 4A28 0001                  		tst.b	1(a0)
0000EFE0 6A00                       		bpl.s	Obj46_ChkDel
0000EFE2 7000                       		moveq	#0,d0
0000EFE4 1028 0028                  		move.b	$28(a0),d0	; get object type
0000EFE8 0240 0007                  		andi.w	#7,d0		; read only the	1st digit
0000EFEC D040                       		add.w	d0,d0
0000EFEE 323B 0000                  		move.w	Obj46_TypeIndex(pc,d0.w),d1
0000EFF2 4EBB 1000                  		jsr	Obj46_TypeIndex(pc,d1.w)
0000EFF6 323C 001B                  		move.w	#$1B,d1
0000EFFA 343C 0010                  		move.w	#$10,d2
0000EFFE 363C 0011                  		move.w	#$11,d3
0000F002 3828 0008                  		move.w	8(a0),d4
0000F006 6100 0000                  		bsr.w	SolidObject
0000F00A                            
0000F00A                            Obj46_ChkDel:
0000F00A 6100 EDBC                  		bsr.w	DisplaySprite
0000F00E 3028 0008                  		move.w	8(a0),d0
0000F012 0240 FF80                  		andi.w	#$FF80,d0
0000F016 3238 F700                  		move.w	($FFFFF700).w,d1
0000F01A 0441 0080                  		subi.w	#$80,d1
0000F01E 0241 FF80                  		andi.w	#$FF80,d1
0000F022 9041                       		sub.w	d1,d0
0000F024 0C40 0280                  		cmpi.w	#$280,d0
0000F028 6200 EDDA                  		bhi.w	DeleteObject
0000F02C 4E75                       		rts	
0000F02E                            ; ===========================================================================
0000F02E 0000                       Obj46_TypeIndex:dc.w Obj46_Type00-Obj46_TypeIndex
0000F030 0000                       		dc.w Obj46_Type01-Obj46_TypeIndex
0000F032 0000                       		dc.w Obj46_Type02-Obj46_TypeIndex
0000F034 0000                       		dc.w Obj46_Type03-Obj46_TypeIndex
0000F036 0000                       		dc.w Obj46_Type04-Obj46_TypeIndex
0000F038                            ; ===========================================================================
0000F038                            
0000F038                            Obj46_Type00:				; XREF: Obj46_TypeIndex
0000F038 4E75                       		rts	
0000F03A                            ; ===========================================================================
0000F03A                            
0000F03A                            Obj46_Type02:				; XREF: Obj46_TypeIndex
0000F03A 3038 D008                  		move.w	($FFFFD008).w,d0
0000F03E 9068 0008                  		sub.w	8(a0),d0
0000F042 6400                       		bcc.s	loc_E888
0000F044 4440                       		neg.w	d0
0000F046                            
0000F046                            loc_E888:
0000F046 0C40 0090                  		cmpi.w	#$90,d0		; is Sonic within $90 pixels of	the block?
0000F04A 6400                       		bcc.s	Obj46_Type01	; if not, resume wobbling
0000F04C 117C 0003 0028             		move.b	#3,$28(a0)	; if yes, make the block fall
0000F052                            
0000F052                            Obj46_Type01:				; XREF: Obj46_TypeIndex
0000F052 7000                       		moveq	#0,d0
0000F054 1038 FE74                  		move.b	($FFFFFE74).w,d0
0000F058 0828 0003 0028             		btst	#3,$28(a0)
0000F05E 6700                       		beq.s	loc_E8A8
0000F060 4440                       		neg.w	d0
0000F062 0640 0010                  		addi.w	#$10,d0
0000F066                            
0000F066                            loc_E8A8:
0000F066 3228 0030                  		move.w	$30(a0),d1
0000F06A 9240                       		sub.w	d0,d1
0000F06C 3141 000C                  		move.w	d1,$C(a0)	; update the block's position to make it wobble
0000F070 4E75                       		rts	
0000F072                            ; ===========================================================================
0000F072                            
0000F072                            Obj46_Type03:				; XREF: Obj46_TypeIndex
0000F072 6100 ED2E                  		bsr.w	SpeedToPos
0000F076 0668 0018 0012             		addi.w	#$18,$12(a0)	; increase falling speed
0000F07C 6100 0000                  		bsr.w	ObjHitFloor
0000F080 4A41                       		tst.w	d1		; has the block	hit the	floor?
0000F082 6A00 0000                  		bpl.w	locret_E8EE	; if not, branch
0000F086 D368 000C                  		add.w	d1,$C(a0)
0000F08A 4268 0012                  		clr.w	$12(a0)		; stop the block falling
0000F08E 3168 000C 0030             		move.w	$C(a0),$30(a0)
0000F094 117C 0004 0028             		move.b	#4,$28(a0)
0000F09A 3011                       		move.w	(a1),d0
0000F09C 0240 03FF                  		andi.w	#$3FF,d0
0000F0A0 0C40 02E8                  		cmpi.w	#$2E8,d0
0000F0A4 6400                       		bcc.s	locret_E8EE
0000F0A6 117C 0000 0028             		move.b	#0,$28(a0)
0000F0AC                            
0000F0AC                            locret_E8EE:
0000F0AC 4E75                       		rts	
0000F0AE                            ; ===========================================================================
0000F0AE                            
0000F0AE                            Obj46_Type04:				; XREF: Obj46_TypeIndex
0000F0AE 7000                       		moveq	#0,d0
0000F0B0 1038 FE70                  		move.b	($FFFFFE70).w,d0
0000F0B4 E648                       		lsr.w	#3,d0
0000F0B6 3228 0030                  		move.w	$30(a0),d1
0000F0BA 9240                       		sub.w	d0,d1
0000F0BC 3141 000C                  		move.w	d1,$C(a0)	; make the block wobble
0000F0C0 4E75                       		rts	
0000F0C2                            ; ===========================================================================
0000F0C2                            ; ---------------------------------------------------------------------------
0000F0C2                            ; Sprite mappings - solid blocks and blocks that fall from the ceiling (MZ)
0000F0C2                            ; ---------------------------------------------------------------------------
0000F0C2                            Map_obj46:
0000F0C2                            	include "_maps\obj46.asm"
0000F0C2                            ; ---------------------------------------------------------------------------
0000F0C2                            ; Sprite mappings - solid blocks and blocks that fall from the ceiling (MZ)
0000F0C2                            ; ---------------------------------------------------------------------------
0000F0C2 0000                       		dc.w byte_E906-Map_obj46
0000F0C4 01                         byte_E906:	dc.b 1
0000F0C5 F00F 0001 F0               		dc.b $F0, $F, 0, 1, $F0
0000F0CA                            		even
0000F0CA                            		even
0000F0CA                            
0000F0CA                            ; ===========================================================================
0000F0CA                            ; ---------------------------------------------------------------------------
0000F0CA                            ; Object 12 - lamp (SYZ)
0000F0CA                            ; ---------------------------------------------------------------------------
0000F0CA                            
0000F0CA                            Obj12:					; XREF: Obj_Index
0000F0CA 7000                       		moveq	#0,d0
0000F0CC 1028 0024                  		move.b	$24(a0),d0
0000F0D0 323B 0000                  		move.w	Obj12_Index(pc,d0.w),d1
0000F0D4 4EFB 1000                  		jmp	Obj12_Index(pc,d1.w)
0000F0D8                            ; ===========================================================================
0000F0D8 0000                       Obj12_Index:	dc.w Obj12_Main-Obj12_Index
0000F0DA 0000                       		dc.w Obj12_Animate-Obj12_Index
0000F0DC                            ; ===========================================================================
0000F0DC                            
0000F0DC                            Obj12_Main:				; XREF: Obj12_Index
0000F0DC 5428 0024                  		addq.b	#2,$24(a0)
0000F0E0 217C 0000 0000 0004        		move.l	#Map_obj12,4(a0)
0000F0E8 317C 0000 0002             		move.w	#0,2(a0)
0000F0EE 117C 0004 0001             		move.b	#4,1(a0)
0000F0F4 117C 0010 0019             		move.b	#$10,$19(a0)
0000F0FA 117C 0006 0018             		move.b	#6,$18(a0)
0000F100                            
0000F100                            Obj12_Animate:				; XREF: Obj12_Index
0000F100 5328 001E                  		subq.b	#1,$1E(a0)
0000F104 6A00                       		bpl.s	Obj12_ChkDel
0000F106 117C 0007 001E             		move.b	#7,$1E(a0)
0000F10C 5228 001A                  		addq.b	#1,$1A(a0)
0000F110 0C28 0006 001A             		cmpi.b	#6,$1A(a0)
0000F116 6500                       		bcs.s	Obj12_ChkDel
0000F118 117C 0000 001A             		move.b	#0,$1A(a0)
0000F11E                            
0000F11E                            Obj12_ChkDel:
0000F11E 3028 0008                  		move.w	8(a0),d0
0000F122 0240 FF80                  		andi.w	#$FF80,d0
0000F126 3238 F700                  		move.w	($FFFFF700).w,d1
0000F12A 0441 0080                  		subi.w	#$80,d1
0000F12E 0241 FF80                  		andi.w	#$FF80,d1
0000F132 9041                       		sub.w	d1,d0
0000F134 0C40 0280                  		cmpi.w	#$280,d0
0000F138 6200 ECCA                  		bhi.w	DeleteObject
0000F13C 6000 EC8A                  		bra.w	DisplaySprite
0000F140                            ; ===========================================================================
0000F140                            ; ---------------------------------------------------------------------------
0000F140                            ; Sprite mappings - lamp (SYZ)
0000F140                            ; ---------------------------------------------------------------------------
0000F140                            Map_obj12:
0000F140                            	include "_maps\obj12.asm"
0000F140                            ; ---------------------------------------------------------------------------
0000F140                            ; Sprite mappings - lamp (SYZ)
0000F140                            ; ---------------------------------------------------------------------------
0000F140 0000 0000                  		dc.w byte_E98E-Map_obj12, byte_E999-Map_obj12
0000F144 0000 0000                  		dc.w byte_E9A4-Map_obj12, byte_E9AF-Map_obj12
0000F148 0000 0000                  		dc.w byte_E9BA-Map_obj12, byte_E9C5-Map_obj12
0000F14C 02                         byte_E98E:	dc.b 2
0000F14D F80C 0031 F0               		dc.b $F8, $C, 0, $31, $F0
0000F152 000C 1031 F0               		dc.b 0,	$C, $10, $31, $F0
0000F157 02                         byte_E999:	dc.b 2
0000F158 F80C 0035 F0               		dc.b $F8, $C, 0, $35, $F0
0000F15D 000C 1035 F0               		dc.b 0,	$C, $10, $35, $F0
0000F162 02                         byte_E9A4:	dc.b 2
0000F163 F80C 0039 F0               		dc.b $F8, $C, 0, $39, $F0
0000F168 000C 1039 F0               		dc.b 0,	$C, $10, $39, $F0
0000F16D 02                         byte_E9AF:	dc.b 2
0000F16E F80C 003D F0               		dc.b $F8, $C, 0, $3D, $F0
0000F173 000C 103D F0               		dc.b 0,	$C, $10, $3D, $F0
0000F178 02                         byte_E9BA:	dc.b 2
0000F179 F80C 0041 F0               		dc.b $F8, $C, 0, $41, $F0
0000F17E 000C 1041 F0               		dc.b 0,	$C, $10, $41, $F0
0000F183 02                         byte_E9C5:	dc.b 2
0000F184 F80C 0045 F0               		dc.b $F8, $C, 0, $45, $F0
0000F189 000C 1045 F0               		dc.b 0,	$C, $10, $45, $F0
0000F18E                            		even
0000F18E                            		even
0000F18E                            
0000F18E                            ; ===========================================================================
0000F18E                            ; ---------------------------------------------------------------------------
0000F18E                            ; Object 47 - pinball bumper (SYZ)
0000F18E                            ; ---------------------------------------------------------------------------
0000F18E                            
0000F18E                            Obj47:					; XREF: Obj_Index
0000F18E 7000                       		moveq	#0,d0
0000F190 1028 0024                  		move.b	$24(a0),d0
0000F194 323B 0000                  		move.w	Obj47_Index(pc,d0.w),d1
0000F198 4EFB 1000                  		jmp	Obj47_Index(pc,d1.w)
0000F19C                            ; ===========================================================================
0000F19C 0000                       Obj47_Index:	dc.w Obj47_Main-Obj47_Index
0000F19E 0000                       		dc.w Obj47_Hit-Obj47_Index
0000F1A0                            ; ===========================================================================
0000F1A0                            
0000F1A0                            Obj47_Main:				; XREF: Obj47_Index
0000F1A0 5428 0024                  		addq.b	#2,$24(a0)
0000F1A4 217C 0000 0000 0004        		move.l	#Map_obj47,4(a0)
0000F1AC 317C 0380 0002             		move.w	#$380,2(a0)
0000F1B2 117C 0004 0001             		move.b	#4,1(a0)
0000F1B8 117C 0010 0019             		move.b	#$10,$19(a0)
0000F1BE 117C 0001 0018             		move.b	#1,$18(a0)
0000F1C4 117C 00D7 0020             		move.b	#$D7,$20(a0)
0000F1CA                            
0000F1CA                            Obj47_Hit:				; XREF: Obj47_Index
0000F1CA 4A28 0021                  		tst.b	$21(a0)		; has Sonic touched the	bumper?
0000F1CE 6700 0000                  		beq.w	Obj47_Display	; if not, branch
0000F1D2 4228 0021                  		clr.b	$21(a0)
0000F1D6 43F8 D000                  		lea	($FFFFD000).w,a1
0000F1DA 3228 0008                  		move.w	8(a0),d1
0000F1DE 3428 000C                  		move.w	$C(a0),d2
0000F1E2 9269 0008                  		sub.w	8(a1),d1
0000F1E6 9469 000C                  		sub.w	$C(a1),d2
0000F1EA 4EB9 0000 2F7A             		jsr	(CalcAngle).l
0000F1F0 4EB9 0000 2CAC             		jsr	(CalcSine).l
0000F1F6 C3FC F900                  		muls.w	#-$700,d1
0000F1FA E081                       		asr.l	#8,d1
0000F1FC 3341 0010                  		move.w	d1,$10(a1)	; bounce Sonic away
0000F200 C1FC F900                  		muls.w	#-$700,d0
0000F204 E080                       		asr.l	#8,d0
0000F206 3340 0012                  		move.w	d0,$12(a1)	; bounce Sonic away
0000F20A 08E9 0001 0022             		bset	#1,$22(a1)
0000F210 08A9 0004 0022             		bclr	#4,$22(a1)
0000F216 08A9 0005 0022             		bclr	#5,$22(a1)
0000F21C 4229 003C                  		clr.b	$3C(a1)
0000F220 117C 0001 001C             		move.b	#1,$1C(a0)
0000F226 303C 00B4                  		move.w	#$B4,d0
0000F22A 4EB9 0000 15C0             		jsr	(PlaySound_Special).l ;	play bumper sound
0000F230 45F8 FC00                  		lea	($FFFFFC00).w,a2
0000F234 7000                       		moveq	#0,d0
0000F236 1028 0023                  		move.b	$23(a0),d0
0000F23A 6700                       		beq.s	Obj47_Score
0000F23C 0C32 008A 0002             		cmpi.b	#$8A,2(a2,d0.w)	; has bumper been hit $8A times?
0000F242 6400                       		bcc.s	Obj47_Display	; if yes, Sonic	gets no	points
0000F244 5232 0002                  		addq.b	#1,2(a2,d0.w)
0000F248                            
0000F248                            Obj47_Score:
0000F248 7001                       		moveq	#1,d0
0000F24A 4EB9 0000 0000             		jsr	AddPoints	; add 10 to score
0000F250 6100 EFFC                  		bsr.w	SingleObjLoad
0000F254 6600                       		bne.s	Obj47_Display
0000F256 12BC 0029                  		move.b	#$29,0(a1)	; load points object
0000F25A 3368 0008 0008             		move.w	8(a0),8(a1)
0000F260 3368 000C 000C             		move.w	$C(a0),$C(a1)
0000F266 137C 0004 001A             		move.b	#4,$1A(a1)
0000F26C                            
0000F26C                            Obj47_Display:
0000F26C 43F9 0000 0000             		lea	(Ani_obj47).l,a1
0000F272 6100 BC14                  		bsr.w	AnimateSprite
0000F276 3028 0008                  		move.w	8(a0),d0
0000F27A 0240 FF80                  		andi.w	#$FF80,d0
0000F27E 3238 F700                  		move.w	($FFFFF700).w,d1
0000F282 0441 0080                  		subi.w	#$80,d1
0000F286 0241 FF80                  		andi.w	#$FF80,d1
0000F28A 9041                       		sub.w	d1,d0
0000F28C 0C40 0280                  		cmpi.w	#$280,d0
0000F290 6200                       		bhi.s	Obj47_ChkHit
0000F292 6000 EB34                  		bra.w	DisplaySprite
0000F296                            ; ===========================================================================
0000F296                            
0000F296                            Obj47_ChkHit:				; XREF: Obj47_Display
0000F296 45F8 FC00                  		lea	($FFFFFC00).w,a2
0000F29A 7000                       		moveq	#0,d0
0000F29C 1028 0023                  		move.b	$23(a0),d0
0000F2A0 6700                       		beq.s	Obj47_Delete
0000F2A2 08B2 0007 0002             		bclr	#7,2(a2,d0.w)
0000F2A8                            
0000F2A8                            Obj47_Delete:
0000F2A8 6000 EB5A                  		bra.w	DeleteObject
0000F2AC                            ; ===========================================================================
0000F2AC                            Ani_obj47:
0000F2AC                            	include "_anim\obj47.asm"
0000F2AC                            ; ---------------------------------------------------------------------------
0000F2AC                            ; Animation script - flamethrower (SBZ)
0000F2AC                            ; ---------------------------------------------------------------------------
0000F2AC 0000                       		dc.w byte_EAF4-Ani_obj47
0000F2AE 0000                       		dc.w byte_EAF8-Ani_obj47
0000F2B0 0F00 FF00                  byte_EAF4:	dc.b $F, 0, $FF, 0
0000F2B4 0301 0201 02FD 0000        byte_EAF8:	dc.b 3,	1, 2, 1, 2, $FD, 0, 0
0000F2BC                            		even
0000F2BC                            		even
0000F2BC                            
0000F2BC                            ; ---------------------------------------------------------------------------
0000F2BC                            ; Sprite mappings - pinball bumper (SYZ)
0000F2BC                            ; ---------------------------------------------------------------------------
0000F2BC                            Map_obj47:
0000F2BC                            	include "_maps\obj47.asm"
0000F2BC                            ; ---------------------------------------------------------------------------
0000F2BC                            ; Sprite mappings - pinball bumper (SYZ)
0000F2BC                            ; ---------------------------------------------------------------------------
0000F2BC 0000                       		dc.w byte_EB06-Map_obj47
0000F2BE 0000                       		dc.w byte_EB11-Map_obj47
0000F2C0 0000                       		dc.w byte_EB1C-Map_obj47
0000F2C2 02                         byte_EB06:	dc.b 2
0000F2C3 F007 0000 F0               		dc.b $F0, 7, 0,	0, $F0
0000F2C8 F007 0800 00               		dc.b $F0, 7, 8,	0, 0
0000F2CD 02                         byte_EB11:	dc.b 2
0000F2CE F406 0008 F4               		dc.b $F4, 6, 0,	8, $F4
0000F2D3 F402 0808 04               		dc.b $F4, 2, 8,	8, 4
0000F2D8 02                         byte_EB1C:	dc.b 2
0000F2D9 F007 000E F0               		dc.b $F0, 7, 0,	$E, $F0
0000F2DE F007 080E 00               		dc.b $F0, 7, 8,	$E, 0
0000F2E4 00                         		even
0000F2E4 00                         		even
0000F2E4                            
0000F2E4                            ; ===========================================================================
0000F2E4                            ; ---------------------------------------------------------------------------
0000F2E4                            ; Object 0D - signpost at the end of a level
0000F2E4                            ; ---------------------------------------------------------------------------
0000F2E4                            
0000F2E4                            Obj0D:					; XREF: Obj_Index
0000F2E4 7000                       		moveq	#0,d0
0000F2E6 1028 0024                  		move.b	$24(a0),d0
0000F2EA 323B 0000                  		move.w	Obj0D_Index(pc,d0.w),d1
0000F2EE 4EBB 1000                  		jsr	Obj0D_Index(pc,d1.w)
0000F2F2 43F9 0000 0000             		lea	(Ani_obj0D).l,a1
0000F2F8 6100 BB8E                  		bsr.w	AnimateSprite
0000F2FC 6100 EACA                  		bsr.w	DisplaySprite
0000F300 3028 0008                  		move.w	8(a0),d0
0000F304 0240 FF80                  		andi.w	#$FF80,d0
0000F308 3238 F700                  		move.w	($FFFFF700).w,d1
0000F30C 0441 0080                  		subi.w	#$80,d1
0000F310 0241 FF80                  		andi.w	#$FF80,d1
0000F314 9041                       		sub.w	d1,d0
0000F316 0C40 0280                  		cmpi.w	#$280,d0
0000F31A 6200 EAE8                  		bhi.w	DeleteObject
0000F31E 4E75                       		rts	
0000F320                            ; ===========================================================================
0000F320 0000                       Obj0D_Index:	dc.w Obj0D_Main-Obj0D_Index
0000F322 0000                       		dc.w Obj0D_Touch-Obj0D_Index
0000F324 0000                       		dc.w Obj0D_Spin-Obj0D_Index
0000F326 0000                       		dc.w Obj0D_SonicRun-Obj0D_Index
0000F328 0000                       		dc.w locret_ED1A-Obj0D_Index
0000F32A                            ; ===========================================================================
0000F32A                            
0000F32A                            Obj0D_Main:				; XREF: Obj0D_Index
0000F32A 5428 0024                  		addq.b	#2,$24(a0)
0000F32E 217C 0000 0000 0004        		move.l	#Map_obj0D,4(a0)
0000F336 317C 0680 0002             		move.w	#$680,2(a0)
0000F33C 117C 0004 0001             		move.b	#4,1(a0)
0000F342 117C 0018 0019             		move.b	#$18,$19(a0)
0000F348 117C 0004 0018             		move.b	#4,$18(a0)
0000F34E                            
0000F34E                            Obj0D_Touch:				; XREF: Obj0D_Index
0000F34E 3038 D008                  		move.w	($FFFFD008).w,d0
0000F352 9068 0008                  		sub.w	8(a0),d0
0000F356 6500                       		bcs.s	locret_EBBA
0000F358 0C40 0020                  		cmpi.w	#$20,d0		; is Sonic within $20 pixels of	the signpost?
0000F35C 6400                       		bcc.s	locret_EBBA	; if not, branch
0000F35E 303C 00CF                  		move.w	#$CF,d0
0000F362 4EB9 0000 15BA             		jsr	(PlaySound).l	; play signpost	sound
0000F368 4238 FE1E                  		clr.b	($FFFFFE1E).w	; stop time counter
0000F36C 31F8 F72A F728             		move.w	($FFFFF72A).w,($FFFFF728).w ; lock screen position
0000F372 5428 0024                  		addq.b	#2,$24(a0)
0000F376                            
0000F376                            locret_EBBA:
0000F376 4E75                       		rts	
0000F378                            ; ===========================================================================
0000F378                            
0000F378                            Obj0D_Spin:				; XREF: Obj0D_Index
0000F378 5368 0030                  		subq.w	#1,$30(a0)	; subtract 1 from spin time
0000F37C 6A00                       		bpl.s	Obj0D_Sparkle	; if time remains, branch
0000F37E 317C 003C 0030             		move.w	#60,$30(a0)	; set spin cycle time to 1 second
0000F384 5228 001C                  		addq.b	#1,$1C(a0)	; next spin cycle
0000F388 0C28 0003 001C             		cmpi.b	#3,$1C(a0)	; have 3 spin cycles completed?
0000F38E 6600                       		bne.s	Obj0D_Sparkle	; if not, branch
0000F390 5428 0024                  		addq.b	#2,$24(a0)
0000F394                            
0000F394                            Obj0D_Sparkle:
0000F394 5368 0032                  		subq.w	#1,$32(a0)	; subtract 1 from time delay
0000F398 6A00                       		bpl.s	locret_EC42	; if time remains, branch
0000F39A 317C 000B 0032             		move.w	#$B,$32(a0)	; set time between sparkles to $B frames
0000F3A0 7000                       		moveq	#0,d0
0000F3A2 1028 0034                  		move.b	$34(a0),d0
0000F3A6 5428 0034                  		addq.b	#2,$34(a0)
0000F3AA 0228 000E 0034             		andi.b	#$E,$34(a0)
0000F3B0 45FB 0000                  		lea	Obj0D_SparkPos(pc,d0.w),a2 ; load sparkle position data
0000F3B4 6100 EE98                  		bsr.w	SingleObjLoad
0000F3B8 6600                       		bne.s	locret_EC42
0000F3BA 12BC 0025                  		move.b	#$25,0(a1)	; load rings object
0000F3BE 137C 0006 0024             		move.b	#6,$24(a1)	; jump to ring sparkle subroutine
0000F3C4 101A                       		move.b	(a2)+,d0
0000F3C6 4880                       		ext.w	d0
0000F3C8 D068 0008                  		add.w	8(a0),d0
0000F3CC 3340 0008                  		move.w	d0,8(a1)
0000F3D0 101A                       		move.b	(a2)+,d0
0000F3D2 4880                       		ext.w	d0
0000F3D4 D068 000C                  		add.w	$C(a0),d0
0000F3D8 3340 000C                  		move.w	d0,$C(a1)
0000F3DC 237C 0000 A626 0004        		move.l	#Map_obj25,4(a1)
0000F3E4 337C 27B2 0002             		move.w	#$27B2,2(a1)
0000F3EA 137C 0004 0001             		move.b	#4,1(a1)
0000F3F0 137C 0002 0018             		move.b	#2,$18(a1)
0000F3F6 137C 0008 0019             		move.b	#8,$19(a1)
0000F3FC                            
0000F3FC                            locret_EC42:
0000F3FC 4E75                       		rts	
0000F3FE                            ; ===========================================================================
0000F3FE E8F0                       Obj0D_SparkPos:	dc.b -$18,-$10		; x-position, y-position
0000F400 0808                       		dc.b	8,   8
0000F402 F000                       		dc.b -$10,   0
0000F404 18F8                       		dc.b  $18,  -8
0000F406 00F8                       		dc.b	0,  -8
0000F408 1000                       		dc.b  $10,   0
0000F40A E808                       		dc.b -$18,   8
0000F40C 1810                       		dc.b  $18, $10
0000F40E                            ; ===========================================================================
0000F40E                            
0000F40E                            Obj0D_SonicRun:				; XREF: Obj0D_Index
0000F40E 4A78 FE08                  		tst.w	($FFFFFE08).w	; is debug mode	on?
0000F412 6600 0000                  		bne.w	locret_ECEE	; if yes, branch
0000F416 0838 0001 D022             		btst	#1,($FFFFD022).w
0000F41C 6600                       		bne.s	loc_EC70
0000F41E 11FC 0001 F7CC             		move.b	#1,($FFFFF7CC).w ; lock	controls
0000F424 0838 0000 FE2F             		btst	#0,($FFFFFE2F).w	; GMZ: Have we got a reverse control power up?
0000F42A 6700                       		beq.s	Obj0D_MoveLeft	; GMZ: If not, branch
0000F42C 31FC 0400 F602             		move.w	#$400,($FFFFF602).w ; make Sonic run to	the right
0000F432 6000                       		bra.s	loc_EC70
0000F434                            
0000F434                            Obj0D_MoveLeft:
0000F434 31FC 0800 F602             		move.w	#$800,($FFFFF602).w ; make Sonic run to	the right
0000F43A                            
0000F43A                            loc_EC70:
0000F43A 4A38 D000                  		tst.b	($FFFFD000).w
0000F43E 6700                       		beq.s	loc_EC86
0000F440 3038 D008                  		move.w	($FFFFD008).w,d0
0000F444 3238 F72A                  		move.w	($FFFFF72A).w,d1
0000F448 0641 0128                  		addi.w	#$128,d1
0000F44C B041                       		cmp.w	d1,d0
0000F44E 6500                       		bcs.s	locret_ECEE
0000F450                            
0000F450                            loc_EC86:
0000F450 5428 0024                  		addq.b	#2,$24(a0)
0000F454                            
0000F454                            ; ---------------------------------------------------------------------------
0000F454                            ; Subroutine to	set up bonuses at the end of an	act
0000F454                            ; ---------------------------------------------------------------------------
0000F454                            
0000F454                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000F454                            
0000F454                            
0000F454                            GotThroughAct:				; XREF: Obj3E_EndAct
0000F454 4A38 D5C0                  		tst.b	($FFFFD5C0).w
0000F458 6600                       		bne.s	locret_ECEE
0000F45A 31F8 F72A F728             		move.w	($FFFFF72A).w,($FFFFF728).w
0000F460 4238 FE2D                  		clr.b	($FFFFFE2D).w	; disable invincibility
0000F464 4238 FE1E                  		clr.b	($FFFFFE1E).w	; stop time counter
0000F468 11FC 003A D5C0             		move.b	#$3A,($FFFFD5C0).w
0000F46E 7010                       		moveq	#$10,d0
0000F470 4EB9 0000 17D6             		jsr	(LoadPLC2).l	; load title card patterns
0000F476 11FC 0001 F7D6             		move.b	#1,($FFFFF7D6).w
0000F47C 7000                       		moveq	#0,d0
0000F47E 1038 FE23                  		move.b	($FFFFFE23).w,d0
0000F482 C0FC 003C                  		mulu.w	#60,d0		; convert minutes to seconds
0000F486 7200                       		moveq	#0,d1
0000F488 1238 FE24                  		move.b	($FFFFFE24).w,d1
0000F48C D041                       		add.w	d1,d0		; add up your time
0000F48E 80FC 000F                  		divu.w	#15,d0		; divide by 15
0000F492 7214                       		moveq	#$14,d1
0000F494 B041                       		cmp.w	d1,d0		; is time 5 minutes or higher?
0000F496 6500                       		bcs.s	loc_ECD0	; if not, branch
0000F498 3001                       		move.w	d1,d0		; use minimum time bonus (0)
0000F49A                            
0000F49A                            loc_ECD0:
0000F49A D040                       		add.w	d0,d0
0000F49C 31FB 0000 F7D2             		move.w	TimeBonuses(pc,d0.w),($FFFFF7D2).w ; set time bonus
0000F4A2 3038 FE20                  		move.w	($FFFFFE20).w,d0 ; load	number of rings
0000F4A6 C0FC 000A                  		mulu.w	#10,d0		; multiply by 10
0000F4AA 31C0 F7D4                  		move.w	d0,($FFFFF7D4).w ; set ring bonus
0000F4AE 303C 008E                  		move.w	#$8E,d0
0000F4B2 4EB9 0000 15C0             		jsr	(PlaySound_Special).l ;	play "Sonic got	through" music
0000F4B8                            
0000F4B8                            locret_ECEE:
0000F4B8 4E75                       		rts	
0000F4BA                            ; End of function GotThroughAct
0000F4BA                            
0000F4BA                            ; ===========================================================================
0000F4BA 1388 1388 03E8 01F4 0190+  TimeBonuses:	dc.w 5000, 5000, 1000, 500, 400, 400, 300, 300,	200, 200
0000F4CE 00C8 00C8 0064 0064 0064+  		dc.w 200, 200, 100, 100, 100, 100, 50, 50, 50, 50, 0
0000F4E4                            ; ===========================================================================
0000F4E4                            
0000F4E4                            locret_ED1A:				; XREF: Obj0D_Index
0000F4E4 4E75                       		rts	
0000F4E6                            ; ===========================================================================
0000F4E6                            Ani_obj0D:
0000F4E6                            	include "_anim\obj0D.asm"
0000F4E6                            ; ---------------------------------------------------------------------------
0000F4E6                            ; Animation script - signpost
0000F4E6                            ; ---------------------------------------------------------------------------
0000F4E6 0000                       		dc.w byte_ED24-Ani_obj0D
0000F4E8 0000                       		dc.w byte_ED28-Ani_obj0D
0000F4EA 0000                       		dc.w byte_ED2E-Ani_obj0D
0000F4EC 0000                       		dc.w byte_ED34-Ani_obj0D
0000F4EE 0F00 FF00                  byte_ED24:	dc.b $F, 0, $FF, 0
0000F4F2 0100 0102 03FF             byte_ED28:	dc.b 1,	0, 1, 2, 3, $FF
0000F4F8 0104 0102 03FF             byte_ED2E:	dc.b 1,	4, 1, 2, 3, $FF
0000F4FE 0F04 FF                    byte_ED34:	dc.b $F, 4, $FF
0000F502 00                         		even
0000F502 00                         		even
0000F502                            
0000F502                            ; ---------------------------------------------------------------------------
0000F502                            ; Sprite mappings - signpost
0000F502                            ; ---------------------------------------------------------------------------
0000F502                            Map_obj0D:
0000F502                            	include "_maps\obj0D.asm"
0000F502                            ; ---------------------------------------------------------------------------
0000F502                            ; Sprite mappings - signpost
0000F502                            ; ---------------------------------------------------------------------------
0000F502 0000 0000                  		dc.w byte_ED42-Map_obj0D, byte_ED52-Map_obj0D
0000F506 0000 0000                  		dc.w byte_ED5D-Map_obj0D, byte_ED68-Map_obj0D
0000F50A 0000                       		dc.w byte_ED73-Map_obj0D
0000F50C 03                         byte_ED42:	dc.b 3
0000F50D F00B 0000 E8               		dc.b $F0, $B, 0, 0, $E8
0000F512 F00B 0800 00               		dc.b $F0, $B, 8, 0, 0
0000F517 1001 0038 FC               		dc.b $10, 1, 0,	$38, $FC
0000F51C 02                         byte_ED52:	dc.b 2
0000F51D F00F 000C F0               		dc.b $F0, $F, 0, $C, $F0
0000F522 1001 0038 FC               		dc.b $10, 1, 0,	$38, $FC
0000F527 02                         byte_ED5D:	dc.b 2
0000F528 F003 001C FC               		dc.b $F0, 3, 0,	$1C, $FC
0000F52D 1001 0838 FC               		dc.b $10, 1, 8,	$38, $FC
0000F532 02                         byte_ED68:	dc.b 2
0000F533 F00F 080C F0               		dc.b $F0, $F, 8, $C, $F0
0000F538 1001 0838 FC               		dc.b $10, 1, 8,	$38, $FC
0000F53D 03                         byte_ED73:	dc.b 3
0000F53E F00B 0020 E8               		dc.b $F0, $B, 0, $20, $E8
0000F543 F00B 002C 00               		dc.b $F0, $B, 0, $2C, 0
0000F548 1001 0038 FC               		dc.b $10, 1, 0,	$38, $FC
0000F54E 00                         		even
0000F54E 00                         		even
0000F54E                            
0000F54E                            ; ===========================================================================
0000F54E                            ; ---------------------------------------------------------------------------
0000F54E                            ; Object 4C - lava geyser / lavafall producer (MZ)
0000F54E                            ; ---------------------------------------------------------------------------
0000F54E                            
0000F54E                            Obj4C:					; XREF: Obj_Index
0000F54E 7000                       		moveq	#0,d0
0000F550 1028 0024                  		move.b	$24(a0),d0
0000F554 323B 0000                  		move.w	Obj4C_Index(pc,d0.w),d1
0000F558 4EBB 1000                  		jsr	Obj4C_Index(pc,d1.w)
0000F55C 6000 0000                  		bra.w	Obj4D_ChkDel
0000F560                            ; ===========================================================================
0000F560 0000                       Obj4C_Index:	dc.w Obj4C_Main-Obj4C_Index
0000F562 0000                       		dc.w loc_EDCC-Obj4C_Index
0000F564 0000                       		dc.w loc_EE3E-Obj4C_Index
0000F566 0000                       		dc.w Obj4C_MakeLava-Obj4C_Index
0000F568 0000                       		dc.w Obj4C_Display-Obj4C_Index
0000F56A 0000                       		dc.w Obj4C_Delete-Obj4C_Index
0000F56C                            ; ===========================================================================
0000F56C                            
0000F56C                            Obj4C_Main:				; XREF: Obj4C_Index
0000F56C 5428 0024                  		addq.b	#2,$24(a0)
0000F570 217C 0000 0000 0004        		move.l	#Map_obj4C,4(a0)
0000F578 317C E3A8 0002             		move.w	#$E3A8,2(a0)
0000F57E 117C 0004 0001             		move.b	#4,1(a0)
0000F584 117C 0001 0018             		move.b	#1,$18(a0)
0000F58A 117C 0038 0019             		move.b	#$38,$19(a0)
0000F590 317C 0078 0034             		move.w	#120,$34(a0)	; set time delay to 2 seconds
0000F596                            
0000F596                            loc_EDCC:				; XREF: Obj4C_Index
0000F596 5368 0032                  		subq.w	#1,$32(a0)
0000F59A 6A00                       		bpl.s	locret_EDF0
0000F59C 3168 0034 0032             		move.w	$34(a0),$32(a0)
0000F5A2 3038 D00C                  		move.w	($FFFFD00C).w,d0
0000F5A6 3228 000C                  		move.w	$C(a0),d1
0000F5AA B041                       		cmp.w	d1,d0
0000F5AC 6400                       		bcc.s	locret_EDF0
0000F5AE 0441 0170                  		subi.w	#$170,d1
0000F5B2 B041                       		cmp.w	d1,d0
0000F5B4 6500                       		bcs.s	locret_EDF0
0000F5B6 5428 0024                  		addq.b	#2,$24(a0)
0000F5BA                            
0000F5BA                            locret_EDF0:
0000F5BA 4E75                       		rts	
0000F5BC                            ; ===========================================================================
0000F5BC                            
0000F5BC                            Obj4C_MakeLava:				; XREF: Obj4C_Index
0000F5BC 5428 0024                  		addq.b	#2,$24(a0)
0000F5C0 6100 ECA2                  		bsr.w	SingleObjLoad2
0000F5C4 6600                       		bne.s	loc_EE18
0000F5C6 12BC 004D                  		move.b	#$4D,0(a1)	; load lavafall	object
0000F5CA 3368 0008 0008             		move.w	8(a0),8(a1)
0000F5D0 3368 000C 000C             		move.w	$C(a0),$C(a1)
0000F5D6 1368 0028 0028             		move.b	$28(a0),$28(a1)
0000F5DC 2348 003C                  		move.l	a0,$3C(a1)
0000F5E0                            
0000F5E0                            loc_EE18:
0000F5E0 117C 0001 001C             		move.b	#1,$1C(a0)
0000F5E6 4A28 0028                  		tst.b	$28(a0)		; is object type 00 (geyser) ?
0000F5EA 6700                       		beq.s	Obj4C_Type00	; if yes, branch
0000F5EC 117C 0004 001C             		move.b	#4,$1C(a0)
0000F5F2 6000                       		bra.s	Obj4C_Display
0000F5F4                            ; ===========================================================================
0000F5F4                            
0000F5F4                            Obj4C_Type00:				; XREF: Obj4C_MakeLava
0000F5F4 2268 003C                  		movea.l	$3C(a0),a1	; load geyser object
0000F5F8 08E9 0001 0022             		bset	#1,$22(a1)
0000F5FE 337C FA80 0012             		move.w	#-$580,$12(a1)
0000F604 6000                       		bra.s	Obj4C_Display
0000F606                            ; ===========================================================================
0000F606                            
0000F606                            loc_EE3E:				; XREF: Obj4C_Index
0000F606 4A28 0028                  		tst.b	$28(a0)		; is object type 00 (geyser) ?
0000F60A 6700                       		beq.s	Obj4C_Display	; if yes, branch
0000F60C 5428 0024                  		addq.b	#2,$24(a0)
0000F610 4E75                       		rts	
0000F612                            ; ===========================================================================
0000F612                            
0000F612                            Obj4C_Display:				; XREF: Obj4C_Index
0000F612 43F9 0000 0000             		lea	(Ani_obj4C).l,a1
0000F618 6100 B86E                  		bsr.w	AnimateSprite
0000F61C 6100 E7AA                  		bsr.w	DisplaySprite
0000F620 4E75                       		rts	
0000F622                            ; ===========================================================================
0000F622                            
0000F622                            Obj4C_Delete:				; XREF: Obj4C_Index
0000F622 117C 0000 001C             		move.b	#0,$1C(a0)
0000F628 117C 0002 0024             		move.b	#2,$24(a0)
0000F62E 4A28 0028                  		tst.b	$28(a0)
0000F632 6700 E7D0                  		beq.w	DeleteObject
0000F636 4E75                       		rts	
0000F638                            ; ===========================================================================
0000F638                            ; ---------------------------------------------------------------------------
0000F638                            ; Object 4D - lava geyser / lavafall (MZ)
0000F638                            ; ---------------------------------------------------------------------------
0000F638                            
0000F638                            Obj4D:					; XREF: Obj_Index
0000F638 7000                       		moveq	#0,d0
0000F63A 1028 0024                  		move.b	$24(a0),d0
0000F63E 323B 0000                  		move.w	Obj4D_Index(pc,d0.w),d1
0000F642 4EBB 1000                  		jsr	Obj4D_Index(pc,d1.w)
0000F646 6000 E780                  		bra.w	DisplaySprite
0000F64A                            ; ===========================================================================
0000F64A 0000                       Obj4D_Index:	dc.w Obj4D_Main-Obj4D_Index
0000F64C 0000                       		dc.w Obj4D_Action-Obj4D_Index
0000F64E 0000                       		dc.w loc_EFFC-Obj4D_Index
0000F650 0000                       		dc.w Obj4D_Delete-Obj4D_Index
0000F652                            
0000F652 FB00 0000                  Obj4D_Speeds:	dc.w $FB00, 0
0000F656                            ; ===========================================================================
0000F656                            
0000F656                            Obj4D_Main:				; XREF: Obj4D_Index
0000F656 5428 0024                  		addq.b	#2,$24(a0)
0000F65A 3168 000C 0030             		move.w	$C(a0),$30(a0)
0000F660 4A28 0028                  		tst.b	$28(a0)
0000F664 6700                       		beq.s	loc_EEA4
0000F666 0468 0250 000C             		subi.w	#$250,$C(a0)
0000F66C                            
0000F66C                            loc_EEA4:
0000F66C 7000                       		moveq	#0,d0
0000F66E 1028 0028                  		move.b	$28(a0),d0
0000F672 D040                       		add.w	d0,d0
0000F674 317B 00DC 0012             		move.w	Obj4D_Speeds(pc,d0.w),$12(a0)
0000F67A 2248                       		movea.l	a0,a1
0000F67C 7201                       		moveq	#1,d1
0000F67E 6100                       		bsr.s	Obj4D_MakeLava
0000F680 6000                       		bra.s	loc_EF10
0000F682                            ; ===========================================================================
0000F682                            
0000F682                            Obj4D_Loop:
0000F682 6100 EBE0                  		bsr.w	SingleObjLoad2
0000F686 6600                       		bne.s	loc_EF0A
0000F688                            
0000F688                            Obj4D_MakeLava:				; XREF: Obj4D_Main
0000F688 12BC 004D                  		move.b	#$4D,0(a1)
0000F68C 237C 0000 0000 0004        		move.l	#Map_obj4C,4(a1)
0000F694 337C 63A8 0002             		move.w	#$63A8,2(a1)
0000F69A 137C 0004 0001             		move.b	#4,1(a1)
0000F6A0 137C 0020 0019             		move.b	#$20,$19(a1)
0000F6A6 3368 0008 0008             		move.w	8(a0),8(a1)
0000F6AC 3368 000C 000C             		move.w	$C(a0),$C(a1)
0000F6B2 1368 0028 0028             		move.b	$28(a0),$28(a1)
0000F6B8 137C 0001 0018             		move.b	#1,$18(a1)
0000F6BE 137C 0005 001C             		move.b	#5,$1C(a1)
0000F6C4 4A28 0028                  		tst.b	$28(a0)
0000F6C8 6700                       		beq.s	loc_EF0A
0000F6CA 137C 0002 001C             		move.b	#2,$1C(a1)
0000F6D0                            
0000F6D0                            loc_EF0A:
0000F6D0 51C9 FFB0                  		dbf	d1,Obj4D_Loop
0000F6D4 4E75                       		rts	
0000F6D6                            ; ===========================================================================
0000F6D6                            
0000F6D6                            loc_EF10:				; XREF: Obj4D_Main
0000F6D6 0669 0060 000C             		addi.w	#$60,$C(a1)
0000F6DC 3368 0030 0030             		move.w	$30(a0),$30(a1)
0000F6E2 0669 0060 0030             		addi.w	#$60,$30(a1)
0000F6E8 137C 0093 0020             		move.b	#$93,$20(a1)
0000F6EE 137C 0080 0016             		move.b	#$80,$16(a1)
0000F6F4 08E9 0004 0001             		bset	#4,1(a1)
0000F6FA 5829 0024                  		addq.b	#4,$24(a1)
0000F6FE 2348 003C                  		move.l	a0,$3C(a1)
0000F702 4A28 0028                  		tst.b	$28(a0)
0000F706 6700                       		beq.s	Obj4D_PlaySnd
0000F708 7200                       		moveq	#0,d1
0000F70A 6100 FF76                  		bsr.w	Obj4D_Loop
0000F70E 5429 0024                  		addq.b	#2,$24(a1)
0000F712 08E9 0004 0002             		bset	#4,2(a1)
0000F718 0669 0100 000C             		addi.w	#$100,$C(a1)
0000F71E 137C 0000 0018             		move.b	#0,$18(a1)
0000F724 3368 0030 0030             		move.w	$30(a0),$30(a1)
0000F72A 2368 003C 003C             		move.l	$3C(a0),$3C(a1)
0000F730 117C 0000 0028             		move.b	#0,$28(a0)
0000F736                            
0000F736                            Obj4D_PlaySnd:
0000F736 303C 00C8                  		move.w	#$C8,d0
0000F73A 4EB9 0000 15C0             		jsr	(PlaySound_Special).l ;	play flame sound
0000F740                            
0000F740                            Obj4D_Action:				; XREF: Obj4D_Index
0000F740 7000                       		moveq	#0,d0
0000F742 1028 0028                  		move.b	$28(a0),d0
0000F746 D040                       		add.w	d0,d0
0000F748 323B 0000                  		move.w	Obj4D_TypeIndex(pc,d0.w),d1
0000F74C 4EBB 1000                  		jsr	Obj4D_TypeIndex(pc,d1.w)
0000F750 6100 E650                  		bsr.w	SpeedToPos
0000F754 43F9 0000 0000             		lea	(Ani_obj4C).l,a1
0000F75A 6100 B72C                  		bsr.w	AnimateSprite
0000F75E                            
0000F75E                            Obj4D_ChkDel:				; XREF: Obj4C
0000F75E 3028 0008                  		move.w	8(a0),d0
0000F762 0240 FF80                  		andi.w	#$FF80,d0
0000F766 3238 F700                  		move.w	($FFFFF700).w,d1
0000F76A 0441 0080                  		subi.w	#$80,d1
0000F76E 0241 FF80                  		andi.w	#$FF80,d1
0000F772 9041                       		sub.w	d1,d0
0000F774 0C40 0280                  		cmpi.w	#$280,d0
0000F778 6200 E68A                  		bhi.w	DeleteObject
0000F77C 4E75                       		rts	
0000F77E                            ; ===========================================================================
0000F77E 0000                       Obj4D_TypeIndex:dc.w Obj4D_Type00-Obj4D_TypeIndex
0000F780 0000                       		dc.w Obj4D_Type01-Obj4D_TypeIndex
0000F782                            ; ===========================================================================
0000F782                            
0000F782                            Obj4D_Type00:				; XREF: Obj4D_TypeIndex
0000F782 0668 0018 0012             		addi.w	#$18,$12(a0)	; increase object's falling speed
0000F788 3028 0030                  		move.w	$30(a0),d0
0000F78C B068 000C                  		cmp.w	$C(a0),d0
0000F790 6400                       		bcc.s	locret_EFDA
0000F792 5828 0024                  		addq.b	#4,$24(a0)
0000F796 2268 003C                  		movea.l	$3C(a0),a1
0000F79A 137C 0003 001C             		move.b	#3,$1C(a1)
0000F7A0                            
0000F7A0                            locret_EFDA:
0000F7A0 4E75                       		rts	
0000F7A2                            ; ===========================================================================
0000F7A2                            
0000F7A2                            Obj4D_Type01:				; XREF: Obj4D_TypeIndex
0000F7A2 0668 0018 0012             		addi.w	#$18,$12(a0)	; increase object's falling speed
0000F7A8 3028 0030                  		move.w	$30(a0),d0
0000F7AC B068 000C                  		cmp.w	$C(a0),d0
0000F7B0 6400                       		bcc.s	locret_EFFA
0000F7B2 5828 0024                  		addq.b	#4,$24(a0)
0000F7B6 2268 003C                  		movea.l	$3C(a0),a1
0000F7BA 137C 0001 001C             		move.b	#1,$1C(a1)
0000F7C0                            
0000F7C0                            locret_EFFA:
0000F7C0 4E75                       		rts	
0000F7C2                            ; ===========================================================================
0000F7C2                            
0000F7C2                            loc_EFFC:				; XREF: Obj4D_Index
0000F7C2 2268 003C                  		movea.l	$3C(a0),a1
0000F7C6 0C29 0006 0024             		cmpi.b	#6,$24(a1)
0000F7CC 6700 0000                  		beq.w	Obj4D_Delete
0000F7D0 3029 000C                  		move.w	$C(a1),d0
0000F7D4 0640 0060                  		addi.w	#$60,d0
0000F7D8 3140 000C                  		move.w	d0,$C(a0)
0000F7DC 9068 0030                  		sub.w	$30(a0),d0
0000F7E0 4440                       		neg.w	d0
0000F7E2 7208                       		moveq	#8,d1
0000F7E4 0C40 0040                  		cmpi.w	#$40,d0
0000F7E8 6C00                       		bge.s	loc_F026
0000F7EA 720B                       		moveq	#$B,d1
0000F7EC                            
0000F7EC                            loc_F026:
0000F7EC 0C40 0080                  		cmpi.w	#$80,d0
0000F7F0 6F00                       		ble.s	loc_F02E
0000F7F2 720E                       		moveq	#$E,d1
0000F7F4                            
0000F7F4                            loc_F02E:
0000F7F4 5328 001E                  		subq.b	#1,$1E(a0)
0000F7F8 6A00                       		bpl.s	loc_F04C
0000F7FA 117C 0007 001E             		move.b	#7,$1E(a0)
0000F800 5228 001B                  		addq.b	#1,$1B(a0)
0000F804 0C28 0002 001B             		cmpi.b	#2,$1B(a0)
0000F80A 6500                       		bcs.s	loc_F04C
0000F80C 117C 0000 001B             		move.b	#0,$1B(a0)
0000F812                            
0000F812                            loc_F04C:
0000F812 1028 001B                  		move.b	$1B(a0),d0
0000F816 D001                       		add.b	d1,d0
0000F818 1140 001A                  		move.b	d0,$1A(a0)
0000F81C 6000 FF40                  		bra.w	Obj4D_ChkDel
0000F820                            ; ===========================================================================
0000F820                            
0000F820                            Obj4D_Delete:				; XREF: Obj4D_Index
0000F820 6000 E5E2                  		bra.w	DeleteObject
0000F824                            ; ===========================================================================
0000F824                            ; ---------------------------------------------------------------------------
0000F824                            ; Object 4E - advancing	wall of	lava (MZ)
0000F824                            ; ---------------------------------------------------------------------------
0000F824                            
0000F824                            Obj4E:					; XREF: Obj_Index
0000F824 7000                       		moveq	#0,d0
0000F826 1028 0024                  		move.b	$24(a0),d0
0000F82A 323B 0000                  		move.w	Obj4E_Index(pc,d0.w),d1
0000F82E 4EFB 1000                  		jmp	Obj4E_Index(pc,d1.w)
0000F832                            ; ===========================================================================
0000F832 0000                       Obj4E_Index:	dc.w Obj4E_Main-Obj4E_Index
0000F834 0000                       		dc.w Obj4E_Solid-Obj4E_Index
0000F836 0000                       		dc.w Obj4E_Action-Obj4E_Index
0000F838 0000                       		dc.w Obj4E_Move2-Obj4E_Index
0000F83A 0000                       		dc.w Obj4E_Delete-Obj4E_Index
0000F83C                            ; ===========================================================================
0000F83C                            
0000F83C                            Obj4E_Main:				; XREF: Obj4E_Index
0000F83C 5828 0024                  		addq.b	#4,$24(a0)
0000F840 2248                       		movea.l	a0,a1
0000F842 7201                       		moveq	#1,d1
0000F844 6000                       		bra.s	Obj4E_Main2
0000F846                            ; ===========================================================================
0000F846                            
0000F846                            Obj4E_Loop:
0000F846 6100 EA1C                  		bsr.w	SingleObjLoad2
0000F84A 6600                       		bne.s	loc_F0C8
0000F84C                            
0000F84C                            Obj4E_Main2:				; XREF: Obj4E_Main
0000F84C 12BC 004E                  		move.b	#$4E,0(a1)	; load object
0000F850 237C 0000 0000 0004        		move.l	#Map_obj4E,4(a1)
0000F858 337C 63A8 0002             		move.w	#$63A8,2(a1)
0000F85E 137C 0004 0001             		move.b	#4,1(a1)
0000F864 137C 0050 0019             		move.b	#$50,$19(a1)
0000F86A 3368 0008 0008             		move.w	8(a0),8(a1)
0000F870 3368 000C 000C             		move.w	$C(a0),$C(a1)
0000F876 137C 0001 0018             		move.b	#1,$18(a1)
0000F87C 137C 0000 001C             		move.b	#0,$1C(a1)
0000F882 137C 0094 0020             		move.b	#$94,$20(a1)
0000F888 2348 003C                  		move.l	a0,$3C(a1)
0000F88C                            
0000F88C                            loc_F0C8:
0000F88C 51C9 FFB8                  		dbf	d1,Obj4E_Loop	; repeat sequence once
0000F890                            
0000F890 5C29 0024                  		addq.b	#6,$24(a1)
0000F894 137C 0004 001A             		move.b	#4,$1A(a1)
0000F89A                            
0000F89A                            Obj4E_Action:				; XREF: Obj4E_Index
0000F89A 3038 D008                  		move.w	($FFFFD008).w,d0
0000F89E 9068 0008                  		sub.w	8(a0),d0
0000F8A2 6400                       		bcc.s	Obj4E_ChkSonic
0000F8A4 4440                       		neg.w	d0
0000F8A6                            
0000F8A6                            Obj4E_ChkSonic:
0000F8A6 0C40 00C0                  		cmpi.w	#$C0,d0		; is Sonic within $C0 pixels (x-axis)?
0000F8AA 6400                       		bcc.s	Obj4E_Move	; if not, branch
0000F8AC 3038 D00C                  		move.w	($FFFFD00C).w,d0
0000F8B0 9068 000C                  		sub.w	$C(a0),d0
0000F8B4 6400                       		bcc.s	loc_F0F4
0000F8B6 4440                       		neg.w	d0
0000F8B8                            
0000F8B8                            loc_F0F4:
0000F8B8 0C40 0060                  		cmpi.w	#$60,d0		; is Sonic within $60 pixels (y-axis)?
0000F8BC 6400                       		bcc.s	Obj4E_Move	; if not, branch
0000F8BE 117C 0001 0036             		move.b	#1,$36(a0)	; set object to	move
0000F8C4 6000                       		bra.s	Obj4E_Solid
0000F8C6                            ; ===========================================================================
0000F8C6                            
0000F8C6                            Obj4E_Move:				; XREF: Obj4E_ChkSonic
0000F8C6 4A28 0036                  		tst.b	$36(a0)		; is object set	to move?
0000F8CA 6700                       		beq.s	Obj4E_Solid	; if not, branch
0000F8CC 317C 0180 0010             		move.w	#$180,$10(a0)	; set object speed
0000F8D2 5528 0024                  		subq.b	#2,$24(a0)
0000F8D6                            
0000F8D6                            Obj4E_Solid:				; XREF: Obj4E_Index
0000F8D6 323C 002B                  		move.w	#$2B,d1
0000F8DA 343C 0018                  		move.w	#$18,d2
0000F8DE 3602                       		move.w	d2,d3
0000F8E0 5243                       		addq.w	#1,d3
0000F8E2 3828 0008                  		move.w	8(a0),d4
0000F8E6 1028 0024                  		move.b	$24(a0),d0
0000F8EA 3F00                       		move.w	d0,-(sp)
0000F8EC 6100 0000                  		bsr.w	SolidObject
0000F8F0 301F                       		move.w	(sp)+,d0
0000F8F2 1140 0024                  		move.b	d0,$24(a0)
0000F8F6 0C68 06A0 0008             		cmpi.w	#$6A0,8(a0)	; has object reached $6A0 on the x-axis?
0000F8FC 6600                       		bne.s	Obj4E_Animate	; if not, branch
0000F8FE 4268 0010                  		clr.w	$10(a0)		; stop object moving
0000F902 4228 0036                  		clr.b	$36(a0)
0000F906                            
0000F906                            Obj4E_Animate:
0000F906 43F9 0000 0000             		lea	(Ani_obj4E).l,a1
0000F90C 6100 B57A                  		bsr.w	AnimateSprite
0000F910 0C38 0004 D024             		cmpi.b	#4,($FFFFD024).w
0000F916 6400                       		bcc.s	Obj4E_ChkDel
0000F918 6100 E488                  		bsr.w	SpeedToPos
0000F91C                            
0000F91C                            Obj4E_ChkDel:
0000F91C 6100 E4AA                  		bsr.w	DisplaySprite
0000F920 4A28 0036                  		tst.b	$36(a0)
0000F924 6600                       		bne.s	locret_F17E
0000F926 3028 0008                  		move.w	8(a0),d0
0000F92A 0240 FF80                  		andi.w	#$FF80,d0
0000F92E 3238 F700                  		move.w	($FFFFF700).w,d1
0000F932 0441 0080                  		subi.w	#$80,d1
0000F936 0241 FF80                  		andi.w	#$FF80,d1
0000F93A 9041                       		sub.w	d1,d0
0000F93C 0C40 0280                  		cmpi.w	#$280,d0
0000F940 6200                       		bhi.s	Obj4E_ChkGone
0000F942                            
0000F942                            locret_F17E:
0000F942 4E75                       		rts	
0000F944                            ; ===========================================================================
0000F944                            
0000F944                            Obj4E_ChkGone:				; XREF: Obj4E_ChkDel
0000F944 45F8 FC00                  		lea	($FFFFFC00).w,a2
0000F948 7000                       		moveq	#0,d0
0000F94A 1028 0023                  		move.b	$23(a0),d0
0000F94E 08B2 0007 0002             		bclr	#7,2(a2,d0.w)
0000F954 117C 0008 0024             		move.b	#8,$24(a0)
0000F95A 4E75                       		rts	
0000F95C                            ; ===========================================================================
0000F95C                            
0000F95C                            Obj4E_Move2:				; XREF: Obj4E_Index
0000F95C 2268 003C                  		movea.l	$3C(a0),a1
0000F960 0C29 0008 0024             		cmpi.b	#8,$24(a1)
0000F966 6700                       		beq.s	Obj4E_Delete
0000F968 3169 0008 0008             		move.w	8(a1),8(a0)	; move rest of lava wall
0000F96E 0468 0080 0008             		subi.w	#$80,8(a0)
0000F974 6000 E452                  		bra.w	DisplaySprite
0000F978                            ; ===========================================================================
0000F978                            
0000F978                            Obj4E_Delete:				; XREF: Obj4E_Index
0000F978 6000 E48A                  		bra.w	DeleteObject
0000F97C                            ; ===========================================================================
0000F97C                            ; ---------------------------------------------------------------------------
0000F97C                            ; Object 54 - invisible	lava tag (MZ)
0000F97C                            ; ---------------------------------------------------------------------------
0000F97C                            
0000F97C                            Obj54:					; XREF: Obj_Index
0000F97C 7000                       		moveq	#0,d0
0000F97E 1028 0024                  		move.b	$24(a0),d0
0000F982 323B 0000                  		move.w	Obj54_Index(pc,d0.w),d1
0000F986 4EFB 1000                  		jmp	Obj54_Index(pc,d1.w)
0000F98A                            ; ===========================================================================
0000F98A 0000                       Obj54_Index:	dc.w Obj54_Main-Obj54_Index
0000F98C 0000                       		dc.w Obj54_ChkDel-Obj54_Index
0000F98E                            
0000F98E 9694 9500                  Obj54_Sizes:	dc.b $96, $94, $95, 0
0000F992                            ; ===========================================================================
0000F992                            
0000F992                            Obj54_Main:				; XREF: Obj54_Index
0000F992 5428 0024                  		addq.b	#2,$24(a0)
0000F996 7000                       		moveq	#0,d0
0000F998 1028 0028                  		move.b	$28(a0),d0
0000F99C 117B 00F0 0020             		move.b	Obj54_Sizes(pc,d0.w),$20(a0)
0000F9A2 217C 0000 0000 0004        		move.l	#Map_obj54,4(a0)
0000F9AA 117C 0084 0001             		move.b	#$84,1(a0)
0000F9B0                            
0000F9B0                            Obj54_ChkDel:				; XREF: Obj54_Index
0000F9B0 3028 0008                  		move.w	8(a0),d0
0000F9B4 0240 FF80                  		andi.w	#$FF80,d0
0000F9B8 3238 F700                  		move.w	($FFFFF700).w,d1
0000F9BC 0441 0080                  		subi.w	#$80,d1
0000F9C0 0241 FF80                  		andi.w	#$FF80,d1
0000F9C4 9041                       		sub.w	d1,d0
0000F9C6 6B00 E43C                  		bmi.w	DeleteObject
0000F9CA 0C40 0280                  		cmpi.w	#$280,d0
0000F9CE 6200 E434                  		bhi.w	DeleteObject
0000F9D2 4E75                       		rts	
0000F9D4                            ; ===========================================================================
0000F9D4                            ; ---------------------------------------------------------------------------
0000F9D4                            ; Sprite mappings - invisible lava tag (MZ)
0000F9D4                            ; ---------------------------------------------------------------------------
0000F9D4                            Map_obj54:
0000F9D4                            	include "_maps\obj54.asm"
0000F9D4                            ; ---------------------------------------------------------------------------
0000F9D4                            ; Sprite mappings - invisible lava tag (MZ)
0000F9D4                            ; ---------------------------------------------------------------------------
0000F9D4 0000                       		dc.w byte_F212-Map_obj54
0000F9D6 00                         byte_F212:	dc.b 0			; no sprite, because the tag is invisible!
0000F9D8 00                         		even
0000F9D8 00                         		even
0000F9D8                            
0000F9D8                            Ani_obj4C:
0000F9D8                            	include "_anim\obj4C.asm"
0000F9D8                            ; ---------------------------------------------------------------------------
0000F9D8                            ; Animation script - geyser of lava (MZ)
0000F9D8                            ; ---------------------------------------------------------------------------
0000F9D8 0000                       		dc.w byte_F220-Ani_obj4C
0000F9DA 0000                       		dc.w byte_F22A-Ani_obj4C
0000F9DC 0000                       		dc.w byte_F22E-Ani_obj4C
0000F9DE 0000                       		dc.w byte_F232-Ani_obj4C
0000F9E0 0000                       		dc.w byte_F23A-Ani_obj4C
0000F9E2 0000                       		dc.w byte_F23E-Ani_obj4C
0000F9E4 0200 0100 0104 0504 05FC   byte_F220:	dc.b 2,	0, 1, 0, 1, 4, 5, 4, 5,	$FC
0000F9EE 0202 03FF                  byte_F22A:	dc.b 2,	2, 3, $FF
0000F9F2 0206 07FF                  byte_F22E:	dc.b 2,	6, 7, $FF
0000F9F6 0202 0300 0100 01FC        byte_F232:	dc.b 2,	2, 3, 0, 1, 0, 1, $FC
0000F9FE 0F13 FF00                  byte_F23A:	dc.b $F, $13, $FF, 0
0000FA02 0211 12FF                  byte_F23E:	dc.b 2,	$11, $12, $FF
0000FA06                            		even
0000FA06                            		even
0000FA06                            
0000FA06                            Ani_obj4E:
0000FA06                            	include "_anim\obj4E.asm"
0000FA06                            ; ---------------------------------------------------------------------------
0000FA06                            ; Animation script - advancing wall of lava (MZ)
0000FA06                            ; ---------------------------------------------------------------------------
0000FA06 0000                       		dc.w byte_F244-Ani_obj4E
0000FA08 0900 0102 03FF             byte_F244:	dc.b 9,	0, 1, 2, 3, $FF
0000FA0E                            		even
0000FA0E                            		even
0000FA0E                            
0000FA0E                            ; ---------------------------------------------------------------------------
0000FA0E                            ; Sprite mappings - lava geyser / lava that falls from the ceiling (MZ)
0000FA0E                            ; ---------------------------------------------------------------------------
0000FA0E                            Map_obj4C:
0000FA0E                            	include "_maps\obj4C.asm"
0000FA0E                            ; ---------------------------------------------------------------------------
0000FA0E                            ; Sprite mappings - lava geyser / lava that falls from the ceiling (MZ)
0000FA0E                            ; ---------------------------------------------------------------------------
0000FA0E 0000 0000                  		dc.w byte_F272-Map_obj4C, byte_F27D-Map_obj4C
0000FA12 0000 0000                  		dc.w byte_F288-Map_obj4C, byte_F29D-Map_obj4C
0000FA16 0000 0000                  		dc.w byte_F2B2-Map_obj4C, byte_F2D1-Map_obj4C
0000FA1A 0000 0000                  		dc.w byte_F2F0-Map_obj4C, byte_F2FB-Map_obj4C
0000FA1E 0000 0000                  		dc.w byte_F306-Map_obj4C, byte_F339-Map_obj4C
0000FA22 0000 0000                  		dc.w byte_F36C-Map_obj4C, byte_F39F-Map_obj4C
0000FA26 0000 0000                  		dc.w byte_F3BE-Map_obj4C, byte_F3DD-Map_obj4C
0000FA2A 0000 0000                  		dc.w byte_F3FC-Map_obj4C, byte_F44D-Map_obj4C
0000FA2E 0000 0000                  		dc.w byte_F49E-Map_obj4C, byte_F4EF-Map_obj4C
0000FA32 0000 0000                  		dc.w byte_F50E-Map_obj4C, byte_F52D-Map_obj4C
0000FA36 02                         byte_F272:	dc.b 2
0000FA37 EC0B 0000 E8               		dc.b $EC, $B, 0, 0, $E8
0000FA3C EC0B 0800 00               		dc.b $EC, $B, 8, 0, 0
0000FA41 02                         byte_F27D:	dc.b 2
0000FA42 EC0B 0018 E8               		dc.b $EC, $B, 0, $18, $E8
0000FA47 EC0B 0818 00               		dc.b $EC, $B, 8, $18, 0
0000FA4C 04                         byte_F288:	dc.b 4
0000FA4D EC0B 0000 C8               		dc.b $EC, $B, 0, 0, $C8
0000FA52 F40E 000C E0               		dc.b $F4, $E, 0, $C, $E0
0000FA57 F40E 080C 00               		dc.b $F4, $E, 8, $C, 0
0000FA5C EC0B 0800 20               		dc.b $EC, $B, 8, 0, $20
0000FA61 04                         byte_F29D:	dc.b 4
0000FA62 EC0B 0018 C8               		dc.b $EC, $B, 0, $18, $C8
0000FA67 F40E 0024 E0               		dc.b $F4, $E, 0, $24, $E0
0000FA6C F40E 0824 00               		dc.b $F4, $E, 8, $24, 0
0000FA71 EC0B 0818 20               		dc.b $EC, $B, 8, $18, $20
0000FA76 06                         byte_F2B2:	dc.b 6
0000FA77 EC0B 0000 C8               		dc.b $EC, $B, 0, 0, $C8
0000FA7C F40E 000C E0               		dc.b $F4, $E, 0, $C, $E0
0000FA81 F40E 080C 00               		dc.b $F4, $E, 8, $C, 0
0000FA86 EC0B 0800 20               		dc.b $EC, $B, 8, 0, $20
0000FA8B E80E 0090 E0               		dc.b $E8, $E, 0, $90, $E0
0000FA90 E80E 0890 00               		dc.b $E8, $E, 8, $90, 0
0000FA95 06                         byte_F2D1:	dc.b 6
0000FA96 EC0B 0018 C8               		dc.b $EC, $B, 0, $18, $C8
0000FA9B F40E 0024 E0               		dc.b $F4, $E, 0, $24, $E0
0000FAA0 F40E 0824 00               		dc.b $F4, $E, 8, $24, 0
0000FAA5 EC0B 0818 20               		dc.b $EC, $B, 8, $18, $20
0000FAAA E80E 0890 E0               		dc.b $E8, $E, 8, $90, $E0
0000FAAF E80E 0090 00               		dc.b $E8, $E, 0, $90, 0
0000FAB4 02                         byte_F2F0:	dc.b 2
0000FAB5 E00F 0030 E0               		dc.b $E0, $F, 0, $30, $E0
0000FABA E00F 0830 00               		dc.b $E0, $F, 8, $30, 0
0000FABF 02                         byte_F2FB:	dc.b 2
0000FAC0 E00F 0830 E0               		dc.b $E0, $F, 8, $30, $E0
0000FAC5 E00F 0030 00               		dc.b $E0, $F, 0, $30, 0
0000FACA 0A                         byte_F306:	dc.b $A
0000FACB 900F 0040 E0               		dc.b $90, $F, 0, $40, $E0
0000FAD0 900F 0840 00               		dc.b $90, $F, 8, $40, 0
0000FAD5 B00F 0040 E0               		dc.b $B0, $F, 0, $40, $E0
0000FADA B00F 0840 00               		dc.b $B0, $F, 8, $40, 0
0000FADF D00F 0040 E0               		dc.b $D0, $F, 0, $40, $E0
0000FAE4 D00F 0840 00               		dc.b $D0, $F, 8, $40, 0
0000FAE9 F00F 0040 E0               		dc.b $F0, $F, 0, $40, $E0
0000FAEE F00F 0840 00               		dc.b $F0, $F, 8, $40, 0
0000FAF3 100F 0040 E0               		dc.b $10, $F, 0, $40, $E0
0000FAF8 100F 0840 00               		dc.b $10, $F, 8, $40, 0
0000FAFD 0A                         byte_F339:	dc.b $A
0000FAFE 900F 0050 E0               		dc.b $90, $F, 0, $50, $E0
0000FB03 900F 0850 00               		dc.b $90, $F, 8, $50, 0
0000FB08 B00F 0050 E0               		dc.b $B0, $F, 0, $50, $E0
0000FB0D B00F 0850 00               		dc.b $B0, $F, 8, $50, 0
0000FB12 D00F 0050 E0               		dc.b $D0, $F, 0, $50, $E0
0000FB17 D00F 0850 00               		dc.b $D0, $F, 8, $50, 0
0000FB1C F00F 0050 E0               		dc.b $F0, $F, 0, $50, $E0
0000FB21 F00F 0850 00               		dc.b $F0, $F, 8, $50, 0
0000FB26 100F 0050 E0               		dc.b $10, $F, 0, $50, $E0
0000FB2B 100F 0850 00               		dc.b $10, $F, 8, $50, 0
0000FB30 0A                         byte_F36C:	dc.b $A
0000FB31 900F 0060 E0               		dc.b $90, $F, 0, $60, $E0
0000FB36 900F 0860 00               		dc.b $90, $F, 8, $60, 0
0000FB3B B00F 0060 E0               		dc.b $B0, $F, 0, $60, $E0
0000FB40 B00F 0860 00               		dc.b $B0, $F, 8, $60, 0
0000FB45 D00F 0060 E0               		dc.b $D0, $F, 0, $60, $E0
0000FB4A D00F 0860 00               		dc.b $D0, $F, 8, $60, 0
0000FB4F F00F 0060 E0               		dc.b $F0, $F, 0, $60, $E0
0000FB54 F00F 0860 00               		dc.b $F0, $F, 8, $60, 0
0000FB59 100F 0060 E0               		dc.b $10, $F, 0, $60, $E0
0000FB5E 100F 0860 00               		dc.b $10, $F, 8, $60, 0
0000FB63 06                         byte_F39F:	dc.b 6
0000FB64 900F 0040 E0               		dc.b $90, $F, 0, $40, $E0
0000FB69 900F 0840 00               		dc.b $90, $F, 8, $40, 0
0000FB6E B00F 0040 E0               		dc.b $B0, $F, 0, $40, $E0
0000FB73 B00F 0840 00               		dc.b $B0, $F, 8, $40, 0
0000FB78 D00F 0040 E0               		dc.b $D0, $F, 0, $40, $E0
0000FB7D D00F 0840 00               		dc.b $D0, $F, 8, $40, 0
0000FB82 06                         byte_F3BE:	dc.b 6
0000FB83 900F 0050 E0               		dc.b $90, $F, 0, $50, $E0
0000FB88 900F 0850 00               		dc.b $90, $F, 8, $50, 0
0000FB8D B00F 0050 E0               		dc.b $B0, $F, 0, $50, $E0
0000FB92 B00F 0850 00               		dc.b $B0, $F, 8, $50, 0
0000FB97 D00F 0050 E0               		dc.b $D0, $F, 0, $50, $E0
0000FB9C D00F 0850 00               		dc.b $D0, $F, 8, $50, 0
0000FBA1 06                         byte_F3DD:	dc.b 6
0000FBA2 900F 0060 E0               		dc.b $90, $F, 0, $60, $E0
0000FBA7 900F 0860 00               		dc.b $90, $F, 8, $60, 0
0000FBAC B00F 0060 E0               		dc.b $B0, $F, 0, $60, $E0
0000FBB1 B00F 0860 00               		dc.b $B0, $F, 8, $60, 0
0000FBB6 D00F 0060 E0               		dc.b $D0, $F, 0, $60, $E0
0000FBBB D00F 0860 00               		dc.b $D0, $F, 8, $60, 0
0000FBC0 10                         byte_F3FC:	dc.b $10
0000FBC1 900F 0040 E0               		dc.b $90, $F, 0, $40, $E0
0000FBC6 900F 0840 00               		dc.b $90, $F, 8, $40, 0
0000FBCB B00F 0040 E0               		dc.b $B0, $F, 0, $40, $E0
0000FBD0 B00F 0840 00               		dc.b $B0, $F, 8, $40, 0
0000FBD5 D00F 0040 E0               		dc.b $D0, $F, 0, $40, $E0
0000FBDA D00F 0840 00               		dc.b $D0, $F, 8, $40, 0
0000FBDF F00F 0040 E0               		dc.b $F0, $F, 0, $40, $E0
0000FBE4 F00F 0840 00               		dc.b $F0, $F, 8, $40, 0
0000FBE9 100F 0040 E0               		dc.b $10, $F, 0, $40, $E0
0000FBEE 100F 0840 00               		dc.b $10, $F, 8, $40, 0
0000FBF3 300F 0040 E0               		dc.b $30, $F, 0, $40, $E0
0000FBF8 300F 0840 00               		dc.b $30, $F, 8, $40, 0
0000FBFD 500F 0040 E0               		dc.b $50, $F, 0, $40, $E0
0000FC02 500F 0840 00               		dc.b $50, $F, 8, $40, 0
0000FC07 700F 0040 E0               		dc.b $70, $F, 0, $40, $E0
0000FC0C 700F 0840 00               		dc.b $70, $F, 8, $40, 0
0000FC11 10                         byte_F44D:	dc.b $10
0000FC12 900F 0050 E0               		dc.b $90, $F, 0, $50, $E0
0000FC17 900F 0850 00               		dc.b $90, $F, 8, $50, 0
0000FC1C B00F 0050 E0               		dc.b $B0, $F, 0, $50, $E0
0000FC21 B00F 0850 00               		dc.b $B0, $F, 8, $50, 0
0000FC26 D00F 0050 E0               		dc.b $D0, $F, 0, $50, $E0
0000FC2B D00F 0850 00               		dc.b $D0, $F, 8, $50, 0
0000FC30 F00F 0050 E0               		dc.b $F0, $F, 0, $50, $E0
0000FC35 F00F 0850 00               		dc.b $F0, $F, 8, $50, 0
0000FC3A 100F 0050 E0               		dc.b $10, $F, 0, $50, $E0
0000FC3F 100F 0850 00               		dc.b $10, $F, 8, $50, 0
0000FC44 300F 0050 E0               		dc.b $30, $F, 0, $50, $E0
0000FC49 300F 0850 00               		dc.b $30, $F, 8, $50, 0
0000FC4E 500F 0050 E0               		dc.b $50, $F, 0, $50, $E0
0000FC53 500F 0850 00               		dc.b $50, $F, 8, $50, 0
0000FC58 700F 0050 E0               		dc.b $70, $F, 0, $50, $E0
0000FC5D 700F 0850 00               		dc.b $70, $F, 8, $50, 0
0000FC62 10                         byte_F49E:	dc.b $10
0000FC63 900F 0060 E0               		dc.b $90, $F, 0, $60, $E0
0000FC68 900F 0860 00               		dc.b $90, $F, 8, $60, 0
0000FC6D B00F 0060 E0               		dc.b $B0, $F, 0, $60, $E0
0000FC72 B00F 0860 00               		dc.b $B0, $F, 8, $60, 0
0000FC77 D00F 0060 E0               		dc.b $D0, $F, 0, $60, $E0
0000FC7C D00F 0860 00               		dc.b $D0, $F, 8, $60, 0
0000FC81 F00F 0060 E0               		dc.b $F0, $F, 0, $60, $E0
0000FC86 F00F 0860 00               		dc.b $F0, $F, 8, $60, 0
0000FC8B 100F 0060 E0               		dc.b $10, $F, 0, $60, $E0
0000FC90 100F 0860 00               		dc.b $10, $F, 8, $60, 0
0000FC95 300F 0060 E0               		dc.b $30, $F, 0, $60, $E0
0000FC9A 300F 0860 00               		dc.b $30, $F, 8, $60, 0
0000FC9F 500F 0060 E0               		dc.b $50, $F, 0, $60, $E0
0000FCA4 500F 0860 00               		dc.b $50, $F, 8, $60, 0
0000FCA9 700F 0060 E0               		dc.b $70, $F, 0, $60, $E0
0000FCAE 700F 0860 00               		dc.b $70, $F, 8, $60, 0
0000FCB3 06                         byte_F4EF:	dc.b 6
0000FCB4 E00B 0000 C8               		dc.b $E0, $B, 0, 0, $C8
0000FCB9 E80E 000C E0               		dc.b $E8, $E, 0, $C, $E0
0000FCBE E80E 080C 00               		dc.b $E8, $E, 8, $C, 0
0000FCC3 E00B 0800 20               		dc.b $E0, $B, 8, 0, $20
0000FCC8 D80E 0090 E0               		dc.b $D8, $E, 0, $90, $E0
0000FCCD D80E 0890 00               		dc.b $D8, $E, 8, $90, 0
0000FCD2 06                         byte_F50E:	dc.b 6
0000FCD3 E00B 0018 C8               		dc.b $E0, $B, 0, $18, $C8
0000FCD8 E80E 0024 E0               		dc.b $E8, $E, 0, $24, $E0
0000FCDD E80E 0824 00               		dc.b $E8, $E, 8, $24, 0
0000FCE2 E00B 0818 20               		dc.b $E0, $B, 8, $18, $20
0000FCE7 D80E 0890 E0               		dc.b $D8, $E, 8, $90, $E0
0000FCEC D80E 0090 00               		dc.b $D8, $E, 0, $90, 0
0000FCF1 00                         byte_F52D:	dc.b 0
0000FCF2                            		even
0000FCF2                            		even
0000FCF2                            
0000FCF2                            ; ---------------------------------------------------------------------------
0000FCF2                            ; Sprite mappings - advancing wall of lava (MZ)
0000FCF2                            ; ---------------------------------------------------------------------------
0000FCF2                            Map_obj4E:
0000FCF2                            	include "_maps\obj4E.asm"
0000FCF2                            ; ---------------------------------------------------------------------------
0000FCF2                            ; Sprite mappings - advancing wall of lava (MZ)
0000FCF2                            ; ---------------------------------------------------------------------------
0000FCF2 0000                       		dc.w byte_F538-Map_obj4E
0000FCF4 0000                       		dc.w byte_F566-Map_obj4E
0000FCF6 0000                       		dc.w byte_F594-Map_obj4E
0000FCF8 0000                       		dc.w byte_F5C2-Map_obj4E
0000FCFA 0000                       		dc.w byte_F5F0-Map_obj4E
0000FCFC 09                         byte_F538:	dc.b 9
0000FCFD E00F 0060 20               		dc.b $E0, $F, 0, $60, $20
0000FD02 000F 0070 3C               		dc.b 0,	$F, 0, $70, $3C
0000FD07 000F FF2A 20               		dc.b 0,	$F, $FF, $2A, $20
0000FD0C E00F FF2A 00               		dc.b $E0, $F, $FF, $2A,	0
0000FD11 000F FF2A 00               		dc.b 0,	$F, $FF, $2A, 0
0000FD16 E00F FF2A E0               		dc.b $E0, $F, $FF, $2A,	$E0
0000FD1B 000F FF2A E0               		dc.b 0,	$F, $FF, $2A, $E0
0000FD20 E00F FF2A C0               		dc.b $E0, $F, $FF, $2A,	$C0
0000FD25 000F FF2A C0               		dc.b 0,	$F, $FF, $2A, $C0
0000FD2A 09                         byte_F566:	dc.b 9
0000FD2B E00F 0070 20               		dc.b $E0, $F, 0, $70, $20
0000FD30 000F 0080 3C               		dc.b 0,	$F, 0, $80, $3C
0000FD35 000F FF2A 20               		dc.b 0,	$F, $FF, $2A, $20
0000FD3A E00F FF2A 00               		dc.b $E0, $F, $FF, $2A,	0
0000FD3F 000F FF2A 00               		dc.b 0,	$F, $FF, $2A, 0
0000FD44 E00F FF2A E0               		dc.b $E0, $F, $FF, $2A,	$E0
0000FD49 000F FF2A E0               		dc.b 0,	$F, $FF, $2A, $E0
0000FD4E E00F FF2A C0               		dc.b $E0, $F, $FF, $2A,	$C0
0000FD53 000F FF2A C0               		dc.b 0,	$F, $FF, $2A, $C0
0000FD58 09                         byte_F594:	dc.b 9
0000FD59 E00F 0080 20               		dc.b $E0, $F, 0, $80, $20
0000FD5E 000F 0070 3C               		dc.b 0,	$F, 0, $70, $3C
0000FD63 000F FF2A 20               		dc.b 0,	$F, $FF, $2A, $20
0000FD68 E00F FF2A 00               		dc.b $E0, $F, $FF, $2A,	0
0000FD6D 000F FF2A 00               		dc.b 0,	$F, $FF, $2A, 0
0000FD72 E00F FF2A E0               		dc.b $E0, $F, $FF, $2A,	$E0
0000FD77 000F FF2A E0               		dc.b 0,	$F, $FF, $2A, $E0
0000FD7C E00F FF2A C0               		dc.b $E0, $F, $FF, $2A,	$C0
0000FD81 000F FF2A C0               		dc.b 0,	$F, $FF, $2A, $C0
0000FD86 09                         byte_F5C2:	dc.b 9
0000FD87 E00F 0070 20               		dc.b $E0, $F, 0, $70, $20
0000FD8C 000F 0060 3C               		dc.b 0,	$F, 0, $60, $3C
0000FD91 000F FF2A 20               		dc.b 0,	$F, $FF, $2A, $20
0000FD96 E00F FF2A 00               		dc.b $E0, $F, $FF, $2A,	0
0000FD9B 000F FF2A 00               		dc.b 0,	$F, $FF, $2A, 0
0000FDA0 E00F FF2A E0               		dc.b $E0, $F, $FF, $2A,	$E0
0000FDA5 000F FF2A E0               		dc.b 0,	$F, $FF, $2A, $E0
0000FDAA E00F FF2A C0               		dc.b $E0, $F, $FF, $2A,	$C0
0000FDAF 000F FF2A C0               		dc.b 0,	$F, $FF, $2A, $C0
0000FDB4 08                         byte_F5F0:	dc.b 8
0000FDB5 E00F FF2A 20               		dc.b $E0, $F, $FF, $2A,	$20
0000FDBA 000F FF2A 20               		dc.b 0,	$F, $FF, $2A, $20
0000FDBF E00F FF2A 00               		dc.b $E0, $F, $FF, $2A,	0
0000FDC4 000F FF2A 00               		dc.b 0,	$F, $FF, $2A, 0
0000FDC9 E00F FF2A E0               		dc.b $E0, $F, $FF, $2A,	$E0
0000FDCE 000F FF2A E0               		dc.b 0,	$F, $FF, $2A, $E0
0000FDD3 E00F FF2A C0               		dc.b $E0, $F, $FF, $2A,	$C0
0000FDD8 000F FF2A C0               		dc.b 0,	$F, $FF, $2A, $C0
0000FDDE 00                         		even
0000FDDE 00                         		even
0000FDDE                            
0000FDDE                            ; ===========================================================================
0000FDDE                            ; ---------------------------------------------------------------------------
0000FDDE                            ; Object 40 - Moto Bug enemy (GHZ)
0000FDDE                            ; ---------------------------------------------------------------------------
0000FDDE                            
0000FDDE                            Obj40:					; XREF: Obj_Index
0000FDDE 7000                       		moveq	#0,d0
0000FDE0 1028 0024                  		move.b	$24(a0),d0
0000FDE4 323B 0000                  		move.w	Obj40_Index(pc,d0.w),d1
0000FDE8 4EFB 1000                  		jmp	Obj40_Index(pc,d1.w)
0000FDEC                            ; ===========================================================================
0000FDEC 0000                       Obj40_Index:	dc.w Obj40_Main-Obj40_Index
0000FDEE 0000                       		dc.w Obj40_Action-Obj40_Index
0000FDF0 0000                       		dc.w Obj40_Animate-Obj40_Index
0000FDF2 0000                       		dc.w Obj40_Delete-Obj40_Index
0000FDF4                            ; ===========================================================================
0000FDF4                            
0000FDF4                            Obj40_Main:				; XREF: Obj40_Index
0000FDF4 217C 0000 0000 0004        		move.l	#Map_obj40,4(a0)
0000FDFC 317C 04F0 0002             		move.w	#$4F0,2(a0)
0000FE02 117C 0004 0001             		move.b	#4,1(a0)
0000FE08 117C 0004 0018             		move.b	#4,$18(a0)
0000FE0E 117C 0014 0019             		move.b	#$14,$19(a0)
0000FE14 4A28 001C                  		tst.b	$1C(a0)		; is object a smoke trail?
0000FE18 6600                       		bne.s	Obj40_SetSmoke	; if yes, branch
0000FE1A 117C 000E 0016             		move.b	#$E,$16(a0)
0000FE20 117C 0008 0017             		move.b	#8,$17(a0)
0000FE26 117C 000C 0020             		move.b	#$C,$20(a0)
0000FE2C 6100 DF48                  		bsr.w	ObjectFall
0000FE30 4EB9 0000 0000             		jsr	ObjHitFloor
0000FE36 4A41                       		tst.w	d1
0000FE38 6A00                       		bpl.s	locret_F68A
0000FE3A D368 000C                  		add.w	d1,$C(a0)	; match	object's position with the floor
0000FE3E 317C 0000 0012             		move.w	#0,$12(a0)
0000FE44 5428 0024                  		addq.b	#2,$24(a0)
0000FE48 0868 0000 0022             		bchg	#0,$22(a0)
0000FE4E                            
0000FE4E                            locret_F68A:
0000FE4E 4E75                       		rts	
0000FE50                            ; ===========================================================================
0000FE50                            
0000FE50                            Obj40_SetSmoke:				; XREF: Obj40_Main
0000FE50 5828 0024                  		addq.b	#4,$24(a0)
0000FE54 6000 0000                  		bra.w	Obj40_Animate
0000FE58                            ; ===========================================================================
0000FE58                            
0000FE58                            Obj40_Action:				; XREF: Obj40_Index
0000FE58 7000                       		moveq	#0,d0
0000FE5A 1028 0025                  		move.b	$25(a0),d0
0000FE5E 323B 0000                  		move.w	Obj40_Index2(pc,d0.w),d1
0000FE62 4EBB 1000                  		jsr	Obj40_Index2(pc,d1.w)
0000FE66 43F9 0000 0000             		lea	(Ani_obj40).l,a1
0000FE6C 6100 B01A                  		bsr.w	AnimateSprite
0000FE70                            
0000FE70                            ; ---------------------------------------------------------------------------
0000FE70                            ; Routine to mark an enemy/monitor/ring	as destroyed
0000FE70                            ; ---------------------------------------------------------------------------
0000FE70                            
0000FE70                            MarkObjGone:
0000FE70 3028 0008                  		move.w	8(a0),d0
0000FE74 0240 FF80                  		andi.w	#$FF80,d0
0000FE78 3238 F700                  		move.w	($FFFFF700).w,d1
0000FE7C 0441 0080                  		subi.w	#$80,d1
0000FE80 0241 FF80                  		andi.w	#$FF80,d1
0000FE84 9041                       		sub.w	d1,d0
0000FE86 0C40 0280                  		cmpi.w	#$280,d0
0000FE8A 6200 0000                  		bhi.w	Mark_ChkGone
0000FE8E 6000 DF38                  		bra.w	DisplaySprite
0000FE92                            ; ===========================================================================
0000FE92                            
0000FE92                            Mark_ChkGone:
0000FE92 45F8 FC00                  		lea	($FFFFFC00).w,a2
0000FE96 7000                       		moveq	#0,d0
0000FE98 1028 0023                  		move.b	$23(a0),d0
0000FE9C 6700                       		beq.s	Mark_Delete
0000FE9E 08B2 0007 0002             		bclr	#7,2(a2,d0.w)
0000FEA4                            
0000FEA4                            Mark_Delete:
0000FEA4 6000 DF5E                  		bra.w	DeleteObject
0000FEA8                            
0000FEA8                            ; ===========================================================================
0000FEA8 0000                       Obj40_Index2:	dc.w Obj40_Move-Obj40_Index2
0000FEAA 0000                       		dc.w Obj40_FixToFloor-Obj40_Index2
0000FEAC                            ; ===========================================================================
0000FEAC                            
0000FEAC                            Obj40_Move:				; XREF: Obj40_Index2
0000FEAC 5368 0030                  		subq.w	#1,$30(a0)	; subtract 1 from pause	time
0000FEB0 6A00                       		bpl.s	locret_F70A	; if time remains, branch
0000FEB2 5428 0025                  		addq.b	#2,$25(a0)
0000FEB6 317C FF00 0010             		move.w	#-$100,$10(a0)	; move object to the left
0000FEBC 117C 0001 001C             		move.b	#1,$1C(a0)
0000FEC2 0868 0000 0022             		bchg	#0,$22(a0)
0000FEC8 6600                       		bne.s	locret_F70A
0000FECA 4468 0010                  		neg.w	$10(a0)		; change direction
0000FECE                            
0000FECE                            locret_F70A:
0000FECE 4E75                       		rts	
0000FED0                            ; ===========================================================================
0000FED0                            
0000FED0                            Obj40_FixToFloor:			; XREF: Obj40_Index2
0000FED0 6100 DED0                  		bsr.w	SpeedToPos
0000FED4 4EB9 0000 0000             		jsr	ObjHitFloor
0000FEDA 0C41 FFF8                  		cmpi.w	#-8,d1
0000FEDE 6D00                       		blt.s	Obj40_Pause
0000FEE0 0C41 000C                  		cmpi.w	#$C,d1
0000FEE4 6C00                       		bge.s	Obj40_Pause
0000FEE6 D368 000C                  		add.w	d1,$C(a0)	; match	object's position with the floor
0000FEEA 5328 0033                  		subq.b	#1,$33(a0)
0000FEEE 6A00                       		bpl.s	locret_F756
0000FEF0 117C 000F 0033             		move.b	#$F,$33(a0)
0000FEF6 6100 E356                  		bsr.w	SingleObjLoad
0000FEFA 6600                       		bne.s	locret_F756
0000FEFC 12BC 0040                  		move.b	#$40,0(a1)	; load exhaust smoke object
0000FF00 3368 0008 0008             		move.w	8(a0),8(a1)
0000FF06 3368 000C 000C             		move.w	$C(a0),$C(a1)
0000FF0C 1368 0022 0022             		move.b	$22(a0),$22(a1)
0000FF12 137C 0002 001C             		move.b	#2,$1C(a1)
0000FF18                            
0000FF18                            locret_F756:
0000FF18 4E75                       		rts	
0000FF1A                            ; ===========================================================================
0000FF1A                            
0000FF1A                            Obj40_Pause:				; XREF: Obj40_FixToFloor
0000FF1A 5528 0025                  		subq.b	#2,$25(a0)
0000FF1E 317C 003B 0030             		move.w	#59,$30(a0)	; set pause time to 1 second
0000FF24 317C 0000 0010             		move.w	#0,$10(a0)	; stop the object moving
0000FF2A 117C 0000 001C             		move.b	#0,$1C(a0)
0000FF30 4E75                       		rts	
0000FF32                            ; ===========================================================================
0000FF32                            
0000FF32                            Obj40_Animate:				; XREF: Obj40_Index
0000FF32 43F9 0000 0000             		lea	(Ani_obj40).l,a1
0000FF38 6100 AF4E                  		bsr.w	AnimateSprite
0000FF3C 6000 DE8A                  		bra.w	DisplaySprite
0000FF40                            ; ===========================================================================
0000FF40                            
0000FF40                            Obj40_Delete:				; XREF: Obj40_Index
0000FF40 6000 DEC2                  		bra.w	DeleteObject
0000FF44                            ; ===========================================================================
0000FF44                            Ani_obj40:
0000FF44                            	include "_anim\obj40.asm"
0000FF44                            ; ---------------------------------------------------------------------------
0000FF44                            ; Animation script - Motobug enemy
0000FF44                            ; ---------------------------------------------------------------------------
0000FF44 0000                       		dc.w byte_F788-Ani_obj40
0000FF46 0000                       		dc.w byte_F78C-Ani_obj40
0000FF48 0000                       		dc.w byte_F792-Ani_obj40
0000FF4A 0F02 FF00                  byte_F788:	dc.b $F, 2, $FF, 0
0000FF4E 0700 0100 02FF             byte_F78C:	dc.b 7,	0, 1, 0, 2, $FF
0000FF54 0103 0603 0604 0604 0604+  byte_F792:	dc.b 1,	3, 6, 3, 6, 4, 6, 4, 6,	4, 6, 5, $FC, 0
0000FF62                            		even
0000FF62                            		even
0000FF62                            
0000FF62                            ; ---------------------------------------------------------------------------
0000FF62                            ; Sprite mappings - Moto Bug enemy (GHZ)
0000FF62                            ; ---------------------------------------------------------------------------
0000FF62                            Map_obj40:
0000FF62                            	include "_maps\obj40.asm"
0000FF62                            Map_cedc:
0000FF62 0000                       Map_cedc_0: 	dc.w Map_cedc_E-Map_cedc
0000FF64 0000                       Map_cedc_2: 	dc.w Map_cedc_23-Map_cedc
0000FF66 0000                       Map_cedc_4: 	dc.w Map_cedc_38-Map_cedc
0000FF68 0000                       Map_cedc_6: 	dc.w Map_cedc_52-Map_cedc
0000FF6A 0000                       Map_cedc_8: 	dc.w Map_cedc_58-Map_cedc
0000FF6C 0000                       Map_cedc_A: 	dc.w Map_cedc_5E-Map_cedc
0000FF6E 0000                       Map_cedc_C: 	dc.w Map_cedc_64-Map_cedc
0000FF70 04                         Map_cedc_E: 	dc.b $4
0000FF71 F00D 0000 EC               	dc.b $F0, $D, $0, $0, $EC
0000FF76 000C 0008 EC               	dc.b $0, $C, $0, $8, $EC
0000FF7B F801 000C 0C               	dc.b $F8, $1, $0, $C, $C
0000FF80 0808 000E F4               	dc.b $8, $8, $0, $E, $F4
0000FF85 04                         Map_cedc_23: 	dc.b $4
0000FF86 F10D 0000 EC               	dc.b $F1, $D, $0, $0, $EC
0000FF8B 010C 0008 EC               	dc.b $1, $C, $0, $8, $EC
0000FF90 F901 000C 0C               	dc.b $F9, $1, $0, $C, $C
0000FF95 0908 0011 F4               	dc.b $9, $8, $0, $11, $F4
0000FF9A 05                         Map_cedc_38: 	dc.b $5
0000FF9B F00D 0000 EC               	dc.b $F0, $D, $0, $0, $EC
0000FFA0 000C 0014 EC               	dc.b $0, $C, $0, $14, $EC
0000FFA5 F801 000C 0C               	dc.b $F8, $1, $0, $C, $C
0000FFAA 0804 0018 EC               	dc.b $8, $4, $0, $18, $EC
0000FFAF 0804 0012 FC               	dc.b $8, $4, $0, $12, $FC
0000FFB4 01                         Map_cedc_52: 	dc.b $1
0000FFB5 FA00 001A 10               	dc.b $FA, $0, $0, $1A, $10
0000FFBA 01                         Map_cedc_58: 	dc.b $1
0000FFBB FA00 001B 10               	dc.b $FA, $0, $0, $1B, $10
0000FFC0 01                         Map_cedc_5E: 	dc.b $1
0000FFC1 FA00 001C 10               	dc.b $FA, $0, $0, $1C, $10
0000FFC6 00                         Map_cedc_64: 	dc.b $0
0000FFC8 00                         	even
0000FFC8 00                         	even
0000FFC8                            
0000FFC8                            ; ===========================================================================
0000FFC8                            ; ---------------------------------------------------------------------------
0000FFC8                            ; Object 4F - blank
0000FFC8                            ; ---------------------------------------------------------------------------
0000FFC8                            
0000FFC8                            Obj4F:					; XREF: Obj_Index
0000FFC8 4E75                       		rts	
0000FFCA                            
0000FFCA                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000FFCA                            
0000FFCA                            
0000FFCA                            Obj50_ChkWall:				; XREF: Obj50_FixToFloor
0000FFCA 3038 FE04                  		move.w	($FFFFFE04).w,d0
0000FFCE D047                       		add.w	d7,d0
0000FFD0 0240 0003                  		andi.w	#3,d0
0000FFD4 6600                       		bne.s	loc_F836
0000FFD6 7600                       		moveq	#0,d3
0000FFD8 1628 0019                  		move.b	$19(a0),d3
0000FFDC 4A68 0010                  		tst.w	$10(a0)
0000FFE0 6B00                       		bmi.s	loc_F82C
0000FFE2 6100 0000                  		bsr.w	ObjHitWallRight
0000FFE6 4A41                       		tst.w	d1
0000FFE8 6A00                       		bpl.s	loc_F836
0000FFEA                            
0000FFEA                            loc_F828:
0000FFEA 7001                       		moveq	#1,d0
0000FFEC 4E75                       		rts	
0000FFEE                            ; ===========================================================================
0000FFEE                            
0000FFEE                            loc_F82C:
0000FFEE 4643                       		not.w	d3
0000FFF0 6100 0000                  		bsr.w	ObjHitWallLeft
0000FFF4 4A41                       		tst.w	d1
0000FFF6 6BF2                       		bmi.s	loc_F828
0000FFF8                            
0000FFF8                            loc_F836:
0000FFF8 7000                       		moveq	#0,d0
0000FFFA 4E75                       		rts	
0000FFFC                            ; End of function Obj50_ChkWall
0000FFFC                            
0000FFFC                            ; ===========================================================================
0000FFFC                            ; ---------------------------------------------------------------------------
0000FFFC                            ; Object 50 - Yadrin enemy (SYZ)
0000FFFC                            ; ---------------------------------------------------------------------------
0000FFFC                            
0000FFFC                            Obj50:					; XREF: Obj_Index
0000FFFC 7000                       		moveq	#0,d0
0000FFFE 1028 0024                  		move.b	$24(a0),d0
00010002 323B 0000                  		move.w	Obj50_Index(pc,d0.w),d1
00010006 4EFB 1000                  		jmp	Obj50_Index(pc,d1.w)
0001000A                            ; ===========================================================================
0001000A 0000                       Obj50_Index:	dc.w Obj50_Main-Obj50_Index
0001000C 0000                       		dc.w Obj50_Action-Obj50_Index
0001000E                            ; ===========================================================================
0001000E                            
0001000E                            Obj50_Main:				; XREF: Obj50_Index
0001000E 217C 0000 0000 0004        		move.l	#Map_obj50,4(a0)
00010016 317C 247B 0002             		move.w	#$247B,2(a0)
0001001C 117C 0004 0001             		move.b	#4,1(a0)
00010022 117C 0004 0018             		move.b	#4,$18(a0)
00010028 117C 0014 0019             		move.b	#$14,$19(a0)
0001002E 117C 0011 0016             		move.b	#$11,$16(a0)
00010034 117C 0008 0017             		move.b	#8,$17(a0)
0001003A 117C 00CC 0020             		move.b	#$CC,$20(a0)
00010040 6100 DD34                  		bsr.w	ObjectFall
00010044 6100 0000                  		bsr.w	ObjHitFloor
00010048 4A41                       		tst.w	d1
0001004A 6A00                       		bpl.s	locret_F89E
0001004C D368 000C                  		add.w	d1,$C(a0)	; match	object's position with the floor
00010050 317C 0000 0012             		move.w	#0,$12(a0)
00010056 5428 0024                  		addq.b	#2,$24(a0)
0001005A 0868 0000 0022             		bchg	#0,$22(a0)
00010060                            
00010060                            locret_F89E:
00010060 4E75                       		rts	
00010062                            ; ===========================================================================
00010062                            
00010062                            Obj50_Action:				; XREF: Obj50_Index
00010062 7000                       		moveq	#0,d0
00010064 1028 0025                  		move.b	$25(a0),d0
00010068 323B 0000                  		move.w	Obj50_Index2(pc,d0.w),d1
0001006C 4EBB 1000                  		jsr	Obj50_Index2(pc,d1.w)
00010070 43F9 0000 0000             		lea	(Ani_obj50).l,a1
00010076 6100 AE10                  		bsr.w	AnimateSprite
0001007A 6000 FDF4                  		bra.w	MarkObjGone
0001007E                            ; ===========================================================================
0001007E 0000                       Obj50_Index2:	dc.w Obj50_Move-Obj50_Index2
00010080 0000                       		dc.w Obj50_FixToFloor-Obj50_Index2
00010082                            ; ===========================================================================
00010082                            
00010082                            Obj50_Move:				; XREF: Obj50_Index2
00010082 5368 0030                  		subq.w	#1,$30(a0)	; subtract 1 from pause	time
00010086 6A00                       		bpl.s	locret_F8E2	; if time remains, branch
00010088 5428 0025                  		addq.b	#2,$25(a0)
0001008C 317C FF00 0010             		move.w	#-$100,$10(a0)	; move object
00010092 117C 0001 001C             		move.b	#1,$1C(a0)
00010098 0868 0000 0022             		bchg	#0,$22(a0)
0001009E 6600                       		bne.s	locret_F8E2
000100A0 4468 0010                  		neg.w	$10(a0)		; change direction
000100A4                            
000100A4                            locret_F8E2:
000100A4 4E75                       		rts	
000100A6                            ; ===========================================================================
000100A6                            
000100A6                            Obj50_FixToFloor:			; XREF: Obj50_Index2
000100A6 6100 DCFA                  		bsr.w	SpeedToPos
000100AA 6100 0000                  		bsr.w	ObjHitFloor
000100AE 0C41 FFF8                  		cmpi.w	#-8,d1
000100B2 6D00                       		blt.s	Obj50_Pause
000100B4 0C41 000C                  		cmpi.w	#$C,d1
000100B8 6C00                       		bge.s	Obj50_Pause
000100BA D368 000C                  		add.w	d1,$C(a0)	; match	object's position to the floor
000100BE 6100 FF0A                  		bsr.w	Obj50_ChkWall
000100C2 6600                       		bne.s	Obj50_Pause
000100C4 4E75                       		rts	
000100C6                            ; ===========================================================================
000100C6                            
000100C6                            Obj50_Pause:				; XREF: Obj50_FixToFloor
000100C6 5528 0025                  		subq.b	#2,$25(a0)
000100CA 317C 003B 0030             		move.w	#59,$30(a0)	; set pause time to 1 second
000100D0 317C 0000 0010             		move.w	#0,$10(a0)
000100D6 117C 0000 001C             		move.b	#0,$1C(a0)
000100DC 4E75                       		rts	
000100DE                            ; ===========================================================================
000100DE                            Ani_obj50:
000100DE                            	include "_anim\obj50.asm"
000100DE                            ; ---------------------------------------------------------------------------
000100DE                            ; Animation script - Yadrin enemy
000100DE                            ; ---------------------------------------------------------------------------
000100DE 0000                       		dc.w byte_F920-Ani_obj50
000100E0 0000                       		dc.w byte_F924-Ani_obj50
000100E2 0700 FF00                  byte_F920:	dc.b 7,	0, $FF,	0
000100E6 0700 0301 0400 0302 05FF   byte_F924:	dc.b 7,	0, 3, 1, 4, 0, 3, 2, 5,	$FF
000100F0                            		even
000100F0                            		even
000100F0                            
000100F0                            ; ---------------------------------------------------------------------------
000100F0                            ; Sprite mappings - Yadrin enemy (SYZ)
000100F0                            ; ---------------------------------------------------------------------------
000100F0                            Map_obj50:
000100F0                            	include "_maps\obj50.asm"
000100F0                            Map_ff24:
000100F0 0000                       Map_ff24_0: 	dc.w Map_ff24_C-Map_ff24
000100F2 0000                       Map_ff24_2: 	dc.w Map_ff24_26-Map_ff24
000100F4 0000                       Map_ff24_4: 	dc.w Map_ff24_40-Map_ff24
000100F6 0000                       Map_ff24_6: 	dc.w Map_ff24_5A-Map_ff24
000100F8 0000                       Map_ff24_8: 	dc.w Map_ff24_74-Map_ff24
000100FA 0000                       Map_ff24_A: 	dc.w Map_ff24_8E-Map_ff24
000100FC 05                         Map_ff24_C: 	dc.b $5
000100FD F408 0000 F4               	dc.b $F4, $8, $0, $0, $F4
00010102 FC0E 0003 EC               	dc.b $FC, $E, $0, $3, $EC
00010107 EC04 000F FC               	dc.b $EC, $4, $0, $F, $FC
0001010C F402 0011 0C               	dc.b $F4, $2, $0, $11, $C
00010111 0409 0031 FC               	dc.b $4, $9, $0, $31, $FC
00010116 05                         Map_ff24_26: 	dc.b $5
00010117 F408 0014 F4               	dc.b $F4, $8, $0, $14, $F4
0001011C FC0E 0017 EC               	dc.b $FC, $E, $0, $17, $EC
00010121 EC04 000F FC               	dc.b $EC, $4, $0, $F, $FC
00010126 F402 0011 0C               	dc.b $F4, $2, $0, $11, $C
0001012B 0409 0031 FC               	dc.b $4, $9, $0, $31, $FC
00010130 05                         Map_ff24_40: 	dc.b $5
00010131 F409 0023 F4               	dc.b $F4, $9, $0, $23, $F4
00010136 040D 0029 EC               	dc.b $4, $D, $0, $29, $EC
0001013B EC04 000F FC               	dc.b $EC, $4, $0, $F, $FC
00010140 F402 0011 0C               	dc.b $F4, $2, $0, $11, $C
00010145 0409 0031 FC               	dc.b $4, $9, $0, $31, $FC
0001014A 05                         Map_ff24_5A: 	dc.b $5
0001014B F408 0000 F4               	dc.b $F4, $8, $0, $0, $F4
00010150 FC0E 0003 EC               	dc.b $FC, $E, $0, $3, $EC
00010155 EC04 000F FC               	dc.b $EC, $4, $0, $F, $FC
0001015A F402 0011 0C               	dc.b $F4, $2, $0, $11, $C
0001015F 0409 0037 FC               	dc.b $4, $9, $0, $37, $FC
00010164 05                         Map_ff24_74: 	dc.b $5
00010165 F408 0014 F4               	dc.b $F4, $8, $0, $14, $F4
0001016A FC0E 0017 EC               	dc.b $FC, $E, $0, $17, $EC
0001016F EC04 000F FC               	dc.b $EC, $4, $0, $F, $FC
00010174 F402 0011 0C               	dc.b $F4, $2, $0, $11, $C
00010179 0409 0037 FC               	dc.b $4, $9, $0, $37, $FC
0001017E 05                         Map_ff24_8E: 	dc.b $5
0001017F F409 0023 F4               	dc.b $F4, $9, $0, $23, $F4
00010184 040D 0029 EC               	dc.b $4, $D, $0, $29, $EC
00010189 EC04 000F FC               	dc.b $EC, $4, $0, $F, $FC
0001018E F402 0011 0C               	dc.b $F4, $2, $0, $11, $C
00010193 0409 0037 FC               	dc.b $4, $9, $0, $37, $FC
00010198                            	even
00010198                            	even
00010198                            
00010198                            ; ---------------------------------------------------------------------------
00010198                            ; Solid	object subroutine (includes spikes, blocks, rocks etc)
00010198                            ;
00010198                            ; variables:
00010198                            ; d1 = width
00010198                            ; d2 = height /	2 (when	jumping)
00010198                            ; d3 = height /	2 (when	walking)
00010198                            ; d4 = x-axis position
00010198                            ; ---------------------------------------------------------------------------
00010198                            
00010198                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00010198                            
00010198                            
00010198                            SolidObject:
00010198 4A28 0025                  		tst.b	$25(a0)
0001019C 6700 0000                  		beq.w	loc_FAC8
000101A0 3401                       		move.w	d1,d2
000101A2 D442                       		add.w	d2,d2
000101A4 43F8 D000                  		lea	($FFFFD000).w,a1
000101A8 0829 0001 0022             		btst	#1,$22(a1)
000101AE 6600                       		bne.s	loc_F9FE
000101B0 3029 0008                  		move.w	8(a1),d0
000101B4 9068 0008                  		sub.w	8(a0),d0
000101B8 D041                       		add.w	d1,d0
000101BA 6B00                       		bmi.s	loc_F9FE
000101BC B042                       		cmp.w	d2,d0
000101BE 6500                       		bcs.s	loc_FA12
000101C0                            
000101C0                            loc_F9FE:
000101C0 08A9 0003 0022             		bclr	#3,$22(a1)
000101C6 08A8 0003 0022             		bclr	#3,$22(a0)
000101CC 4228 0025                  		clr.b	$25(a0)
000101D0 7800                       		moveq	#0,d4
000101D2 4E75                       		rts	
000101D4                            ; ===========================================================================
000101D4                            
000101D4                            loc_FA12:
000101D4 3404                       		move.w	d4,d2
000101D6                            		;bsr.w	MvSonicOnPtfm Causes an error in building (Come back to this)
000101D6 7800                       		moveq	#0,d4
000101D8 4E75                       		rts	
000101DA                            ; ===========================================================================
000101DA                            
000101DA                            SolidObject71:				; XREF: Obj71_Solid
000101DA 4A28 0025                  		tst.b	$25(a0)
000101DE 6700 0000                  		beq.w	loc_FAD0
000101E2 3401                       		move.w	d1,d2
000101E4 D442                       		add.w	d2,d2
000101E6 43F8 D000                  		lea	($FFFFD000).w,a1
000101EA 0829 0001 0022             		btst	#1,$22(a1)
000101F0 6600                       		bne.s	loc_FA44
000101F2 3029 0008                  		move.w	8(a1),d0
000101F6 9068 0008                  		sub.w	8(a0),d0
000101FA D041                       		add.w	d1,d0
000101FC 6B00                       		bmi.s	loc_FA44
000101FE B042                       		cmp.w	d2,d0
00010200 6500                       		bcs.s	loc_FA58
00010202                            
00010202                            loc_FA44:
00010202 08A9 0003 0022             		bclr	#3,$22(a1)
00010208 08A8 0003 0022             		bclr	#3,$22(a0)
0001020E 4228 0025                  		clr.b	$25(a0)
00010212 7800                       		moveq	#0,d4
00010214 4E75                       		rts	
00010216                            ; ===========================================================================
00010216                            
00010216                            loc_FA58:
00010216 3404                       		move.w	d4,d2
00010218                            	;	bsr.w	MvSonicOnPtfm  Causes an error in building (Come back to this)
00010218 7800                       		moveq	#0,d4
0001021A 4E75                       		rts	
0001021C                            ; ===========================================================================
0001021C                            
0001021C                            SolidObject2F:				; XREF: Obj2F_Solid
0001021C 43F8 D000                  		lea	($FFFFD000).w,a1
00010220 4A28 0001                  		tst.b	1(a0)
00010224 6A00 0000                  		bpl.w	loc_FB92
00010228 3029 0008                  		move.w	8(a1),d0
0001022C 9068 0008                  		sub.w	8(a0),d0
00010230 D041                       		add.w	d1,d0
00010232 6B00 0000                  		bmi.w	loc_FB92
00010236 3601                       		move.w	d1,d3
00010238 D643                       		add.w	d3,d3
0001023A B043                       		cmp.w	d3,d0
0001023C 6200 0000                  		bhi.w	loc_FB92
00010240 3A00                       		move.w	d0,d5
00010242 0828 0000 0001             		btst	#0,1(a0)
00010248 6700                       		beq.s	loc_FA94
0001024A 4645                       		not.w	d5
0001024C DA43                       		add.w	d3,d5
0001024E                            
0001024E                            loc_FA94:
0001024E E24D                       		lsr.w	#1,d5
00010250 7600                       		moveq	#0,d3
00010252 1632 5000                  		move.b	(a2,d5.w),d3
00010256 9612                       		sub.b	(a2),d3
00010258 3A28 000C                  		move.w	$C(a0),d5
0001025C 9A43                       		sub.w	d3,d5
0001025E 1629 0016                  		move.b	$16(a1),d3
00010262 4883                       		ext.w	d3
00010264 D443                       		add.w	d3,d2
00010266 3629 000C                  		move.w	$C(a1),d3
0001026A 9645                       		sub.w	d5,d3
0001026C 5843                       		addq.w	#4,d3
0001026E D642                       		add.w	d2,d3
00010270 6B00 0000                  		bmi.w	loc_FB92
00010274 3802                       		move.w	d2,d4
00010276 D844                       		add.w	d4,d4
00010278 B644                       		cmp.w	d4,d3
0001027A 6400 0000                  		bcc.w	loc_FB92
0001027E 6000 0000                  		bra.w	loc_FB0E
00010282                            ; ===========================================================================
00010282                            
00010282                            loc_FAC8:
00010282 4A28 0001                  		tst.b	1(a0)
00010286 6A00 0000                  		bpl.w	loc_FB92
0001028A                            
0001028A                            loc_FAD0:
0001028A 43F8 D000                  		lea	($FFFFD000).w,a1
0001028E 3029 0008                  		move.w	8(a1),d0
00010292 9068 0008                  		sub.w	8(a0),d0
00010296 D041                       		add.w	d1,d0
00010298 6B00 0000                  		bmi.w	loc_FB92
0001029C 3601                       		move.w	d1,d3
0001029E D643                       		add.w	d3,d3
000102A0 B043                       		cmp.w	d3,d0
000102A2 6200 0000                  		bhi.w	loc_FB92
000102A6 1629 0016                  		move.b	$16(a1),d3
000102AA 4883                       		ext.w	d3
000102AC D443                       		add.w	d3,d2
000102AE 3629 000C                  		move.w	$C(a1),d3
000102B2 9668 000C                  		sub.w	$C(a0),d3
000102B6 5843                       		addq.w	#4,d3
000102B8 D642                       		add.w	d2,d3
000102BA 6B00 0000                  		bmi.w	loc_FB92
000102BE 3802                       		move.w	d2,d4
000102C0 D844                       		add.w	d4,d4
000102C2 B644                       		cmp.w	d4,d3
000102C4 6400 0000                  		bcc.w	loc_FB92
000102C8                            
000102C8                            loc_FB0E:
000102C8 4A38 F7C8                  		tst.b	($FFFFF7C8).w
000102CC 6B00 0000                  		bmi.w	loc_FB92
000102D0 0C38 0006 D024             		cmpi.b	#6,($FFFFD024).w
000102D6 6400 0000                  		bcc.w	loc_FB92
000102DA 4A78 FE08                  		tst.w	($FFFFFE08).w
000102DE 6600 0000                  		bne.w	loc_FBAC
000102E2 3A00                       		move.w	d0,d5
000102E4 B240                       		cmp.w	d0,d1
000102E6 6400                       		bcc.s	loc_FB36
000102E8 D241                       		add.w	d1,d1
000102EA 9041                       		sub.w	d1,d0
000102EC 3A00                       		move.w	d0,d5
000102EE 4445                       		neg.w	d5
000102F0                            
000102F0                            loc_FB36:
000102F0 3203                       		move.w	d3,d1
000102F2 B443                       		cmp.w	d3,d2
000102F4 6400                       		bcc.s	loc_FB44
000102F6 5943                       		subq.w	#4,d3
000102F8 9644                       		sub.w	d4,d3
000102FA 3203                       		move.w	d3,d1
000102FC 4441                       		neg.w	d1
000102FE                            
000102FE                            loc_FB44:
000102FE BA41                       		cmp.w	d1,d5
00010300 6200 0000                  		bhi.w	loc_FBB0
00010304 0C41 0004                  		cmpi.w	#4,d1
00010308 6300                       		bls.s	loc_FB8C
0001030A 4A40                       		tst.w	d0
0001030C 6700                       		beq.s	loc_FB70
0001030E 6B00                       		bmi.s	loc_FB5E
00010310 4A69 0010                  		tst.w	$10(a1)
00010314 6B00                       		bmi.s	loc_FB70
00010316 6000                       		bra.s	loc_FB64
00010318                            ; ===========================================================================
00010318                            
00010318                            loc_FB5E:
00010318 4A69 0010                  		tst.w	$10(a1)
0001031C 6A00                       		bpl.s	loc_FB70
0001031E                            
0001031E                            loc_FB64:
0001031E 337C 0000 0014             		move.w	#0,$14(a1)	; stop Sonic moving
00010324 337C 0000 0010             		move.w	#0,$10(a1)
0001032A                            
0001032A                            loc_FB70:
0001032A 9169 0008                  		sub.w	d0,8(a1)
0001032E 0829 0001 0022             		btst	#1,$22(a1)
00010334 6600                       		bne.s	loc_FB8C
00010336 08E9 0005 0022             		bset	#5,$22(a1)
0001033C 08E8 0005 0022             		bset	#5,$22(a0)
00010342 7801                       		moveq	#1,d4
00010344 4E75                       		rts	
00010346                            ; ===========================================================================
00010346                            
00010346                            loc_FB8C:
00010346 6100                       		bsr.s	loc_FBA0
00010348 7801                       		moveq	#1,d4
0001034A 4E75                       		rts	
0001034C                            ; ===========================================================================
0001034C                            
0001034C                            loc_FB92:
0001034C 0828 0005 0022             		btst	#5,$22(a0)
00010352 6700                       		beq.s	loc_FBAC
00010354 337C 0001 001C             		move.w	#1,$1C(a1)	; use walking animation
0001035A                            
0001035A                            loc_FBA0:
0001035A 08A8 0005 0022             		bclr	#5,$22(a0)
00010360 08A9 0005 0022             		bclr	#5,$22(a1)
00010366                            
00010366                            loc_FBAC:
00010366 7800                       		moveq	#0,d4
00010368 4E75                       		rts	
0001036A                            ; ===========================================================================
0001036A                            
0001036A                            loc_FBB0:
0001036A 4A43                       		tst.w	d3
0001036C 6B00                       		bmi.s	loc_FBBC
0001036E 0C43 0010                  		cmpi.w	#$10,d3
00010372 6500                       		bcs.s	loc_FBEE
00010374 60D6                       		bra.s	loc_FB92
00010376                            ; ===========================================================================
00010376                            
00010376                            loc_FBBC:
00010376 4A69 0012                  		tst.w	$12(a1)
0001037A 6700                       		beq.s	loc_FBD6
0001037C 6A00                       		bpl.s	loc_FBD2
0001037E 4A43                       		tst.w	d3
00010380 6A00                       		bpl.s	loc_FBD2
00010382 9769 000C                  		sub.w	d3,$C(a1)
00010386 337C 0000 0012             		move.w	#0,$12(a1)	; stop Sonic moving
0001038C                            
0001038C                            loc_FBD2:
0001038C 78FF                       		moveq	#-1,d4
0001038E 4E75                       		rts	
00010390                            ; ===========================================================================
00010390                            
00010390                            loc_FBD6:
00010390 0829 0001 0022             		btst	#1,$22(a1)
00010396 66F4                       		bne.s	loc_FBD2
00010398 2F08                       		move.l	a0,-(sp)
0001039A 2049                       		movea.l	a1,a0
0001039C 4EB9 0000 0000             		jsr	KillSonic
000103A2 205F                       		movea.l	(sp)+,a0
000103A4 78FF                       		moveq	#-1,d4
000103A6 4E75                       		rts	
000103A8                            ; ===========================================================================
000103A8                            
000103A8                            loc_FBEE:
000103A8 5943                       		subq.w	#4,d3
000103AA 7200                       		moveq	#0,d1
000103AC 1228 0019                  		move.b	$19(a0),d1
000103B0 3401                       		move.w	d1,d2
000103B2 D442                       		add.w	d2,d2
000103B4 D269 0008                  		add.w	8(a1),d1
000103B8 9268 0008                  		sub.w	8(a0),d1
000103BC 6B00                       		bmi.s	loc_FC28
000103BE B242                       		cmp.w	d2,d1
000103C0 6400                       		bcc.s	loc_FC28
000103C2 4A69 0012                  		tst.w	$12(a1)
000103C6 6B00                       		bmi.s	loc_FC28
000103C8 9769 000C                  		sub.w	d3,$C(a1)
000103CC 5369 000C                  		subq.w	#1,$C(a1)
000103D0 6100                       		bsr.s	sub_FC2C
000103D2 117C 0002 0025             		move.b	#2,$25(a0)
000103D8 08E8 0003 0022             		bset	#3,$22(a0)
000103DE 78FF                       		moveq	#-1,d4
000103E0 4E75                       		rts	
000103E2                            ; ===========================================================================
000103E2                            
000103E2                            loc_FC28:
000103E2 7800                       		moveq	#0,d4
000103E4 4E75                       		rts	
000103E6                            ; End of function SolidObject
000103E6                            
000103E6                            
000103E6                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000103E6                            
000103E6                            
000103E6                            sub_FC2C:				; XREF: SolidObject
000103E6 0829 0003 0022             		btst	#3,$22(a1)
000103EC 6700                       		beq.s	loc_FC4E
000103EE 7000                       		moveq	#0,d0
000103F0 1029 003D                  		move.b	$3D(a1),d0
000103F4 ED48                       		lsl.w	#6,d0
000103F6 0680 00FF D000             		addi.l	#$FFD000,d0
000103FC 2440                       		movea.l	d0,a2
000103FE 08AA 0003 0022             		bclr	#3,$22(a2)
00010404 422A 0025                  		clr.b	$25(a2)
00010408                            
00010408                            loc_FC4E:
00010408 3008                       		move.w	a0,d0
0001040A 0440 D000                  		subi.w	#-$3000,d0
0001040E EC48                       		lsr.w	#6,d0
00010410 0240 007F                  		andi.w	#$7F,d0
00010414 1340 003D                  		move.b	d0,$3D(a1)
00010418 137C 0000 0026             		move.b	#0,$26(a1)
0001041E 337C 0000 0012             		move.w	#0,$12(a1)
00010424 3369 0010 0014             		move.w	$10(a1),$14(a1)
0001042A 0829 0001 0022             		btst	#1,$22(a1)
00010430 6700                       		beq.s	loc_FC84
00010432 2F08                       		move.l	a0,-(sp)
00010434 2049                       		movea.l	a1,a0
00010436 4EB9 0000 0000             		jsr	Sonic_ResetOnFloor
0001043C 205F                       		movea.l	(sp)+,a0
0001043E                            
0001043E                            loc_FC84:
0001043E 08E9 0003 0022             		bset	#3,$22(a1)
00010444 08E8 0003 0022             		bset	#3,$22(a0)
0001044A 4E75                       		rts	
0001044C                            ; End of function sub_FC2C
0001044C                            
0001044C                            ; ===========================================================================
0001044C                            ; ---------------------------------------------------------------------------
0001044C                            ; Object 51 - smashable	green block (MZ)
0001044C                            ; ---------------------------------------------------------------------------
0001044C                            
0001044C                            Obj51:					; XREF: Obj_Index
0001044C 7000                       		moveq	#0,d0
0001044E 1028 0024                  		move.b	$24(a0),d0
00010452 323B 0000                  		move.w	Obj51_Index(pc,d0.w),d1
00010456 4EBB 1000                  		jsr	Obj51_Index(pc,d1.w)
0001045A 6000 FA14                  		bra.w	MarkObjGone
0001045E                            ; ===========================================================================
0001045E 0000                       Obj51_Index:	dc.w Obj51_Main-Obj51_Index
00010460 0000                       		dc.w Obj51_Solid-Obj51_Index
00010462 0000                       		dc.w Obj51_Display-Obj51_Index
00010464                            ; ===========================================================================
00010464                            
00010464                            Obj51_Main:				; XREF: Obj51_Index
00010464 5428 0024                  		addq.b	#2,$24(a0)
00010468 217C 0000 0000 0004        		move.l	#Map_obj51,4(a0)
00010470 317C 42B8 0002             		move.w	#$42B8,2(a0)
00010476 117C 0004 0001             		move.b	#4,1(a0)
0001047C 117C 0010 0019             		move.b	#$10,$19(a0)
00010482 117C 0004 0018             		move.b	#4,$18(a0)
00010488 1168 0028 001A             		move.b	$28(a0),$1A(a0)
0001048E                            
0001048E                            Obj51_Solid:				; XREF: Obj51_Index
0001048E 3178 F7D0 0034             		move.w	($FFFFF7D0).w,$34(a0)
00010494 1178 D01C 0032             		move.b	($FFFFD01C).w,$32(a0) ;	load Sonic's animation number
0001049A 323C 001B                  		move.w	#$1B,d1
0001049E 343C 0010                  		move.w	#$10,d2
000104A2 363C 0011                  		move.w	#$11,d3
000104A6 3828 0008                  		move.w	8(a0),d4
000104AA 6100 FCEC                  		bsr.w	SolidObject
000104AE 0828 0003 0022             		btst	#3,$22(a0)
000104B4 6600                       		bne.s	Obj51_Smash
000104B6                            
000104B6                            locret_FCFC:
000104B6 4E75                       		rts	
000104B8                            ; ===========================================================================
000104B8                            
000104B8                            Obj51_Smash:				; XREF: Obj51_Solid
000104B8 0C28 0002 0032             		cmpi.b	#2,$32(a0)	; is Sonic rolling/jumping?
000104BE 66F6                       		bne.s	locret_FCFC	; if not, branch
000104C0 31E8 0034 F7D0             		move.w	$34(a0),($FFFFF7D0).w
000104C6 08E9 0002 0022             		bset	#2,$22(a1)
000104CC 137C 000E 0016             		move.b	#$E,$16(a1)
000104D2 137C 0007 0017             		move.b	#7,$17(a1)
000104D8 137C 0002 001C             		move.b	#2,$1C(a1)
000104DE 337C FD00 0012             		move.w	#-$300,$12(a1)	; bounce Sonic upwards
000104E4 08E9 0001 0022             		bset	#1,$22(a1)
000104EA 08A9 0003 0022             		bclr	#3,$22(a1)
000104F0 137C 0002 0024             		move.b	#2,$24(a1)
000104F6 08A8 0003 0022             		bclr	#3,$22(a0)
000104FC 4228 0025                  		clr.b	$25(a0)
00010500 117C 0001 001A             		move.b	#1,$1A(a0)
00010506 49F9 0000 0000             		lea	(Obj51_Speeds).l,a4 ; load broken	fragment speed data
0001050C 7203                       		moveq	#3,d1		; set number of	fragments to 4
0001050E 343C 0038                  		move.w	#$38,d2
00010512 6100 D4A2                  		bsr.w	SmashObject
00010516 6100 DD36                  		bsr.w	SingleObjLoad
0001051A 6600                       		bne.s	Obj51_Display
0001051C 12BC 0029                  		move.b	#$29,0(a1)	; load points object
00010520 3368 0008 0008             		move.w	8(a0),8(a1)
00010526 3368 000C 000C             		move.w	$C(a0),$C(a1)
0001052C 3438 F7D0                  		move.w	($FFFFF7D0).w,d2
00010530 5478 F7D0                  		addq.w	#2,($FFFFF7D0).w
00010534 0C42 0006                  		cmpi.w	#6,d2
00010538 6500                       		bcs.s	Obj51_Bonus
0001053A 7406                       		moveq	#6,d2
0001053C                            
0001053C                            Obj51_Bonus:
0001053C 7000                       		moveq	#0,d0
0001053E 303B 2000                  		move.w	Obj51_Points(pc,d2.w),d0
00010542 0C78 0020 F7D0             		cmpi.w	#$20,($FFFFF7D0).w ; have 16 blocks been smashed?
00010548 6500                       		bcs.s	loc_FD98	; if not, branch
0001054A 303C 03E8                  		move.w	#1000,d0	; give higher points for 16th block
0001054E 740A                       		moveq	#10,d2
00010550                            
00010550                            loc_FD98:
00010550 4EB9 0000 0000             		jsr	AddPoints
00010556 E24A                       		lsr.w	#1,d2
00010558 1342 001A                  		move.b	d2,$1A(a1)
0001055C                            
0001055C                            Obj51_Display:				; XREF: Obj51_Index
0001055C 6100 D844                  		bsr.w	SpeedToPos
00010560 0668 0038 0012             		addi.w	#$38,$12(a0)
00010566 6100 D860                  		bsr.w	DisplaySprite
0001056A 4A28 0001                  		tst.b	1(a0)
0001056E 6A00 D894                  		bpl.w	DeleteObject
00010572 4E75                       		rts	
00010574                            ; ===========================================================================
00010574 FE00 FE00                  Obj51_Speeds:	dc.w $FE00, $FE00	; x-speed, y-speed
00010578 FF00 FF00                  		dc.w $FF00, $FF00
0001057C 0200 FE00                  		dc.w $200, $FE00
00010580 0100 FF00                  		dc.w $100, $FF00
00010584                            
00010584 000A 0014 0032 0064        Obj51_Points:	dc.w 10, 20, 50, 100
0001058C                            ; ---------------------------------------------------------------------------
0001058C                            ; Sprite mappings - smashable green block (MZ)
0001058C                            ; ---------------------------------------------------------------------------
0001058C                            Map_obj51:
0001058C                            	include "_maps\obj51.asm"
0001058C                            ; ---------------------------------------------------------------------------
0001058C                            ; Sprite mappings - smashable green block (MZ)
0001058C                            ; ---------------------------------------------------------------------------
0001058C 0000                       		dc.w byte_FDD8-Map_obj51
0001058E 0000                       		dc.w byte_FDE3-Map_obj51
00010590 02                         byte_FDD8:	dc.b 2
00010591 F00D 0000 F0               		dc.b $F0, $D, 0, 0, $F0
00010596 000D 0000 F0               		dc.b 0,	$D, 0, 0, $F0
0001059B 04                         byte_FDE3:	dc.b 4
0001059C F005 8000 F0               		dc.b $F0, 5, $80, 0, $F0
000105A1 0005 8000 F0               		dc.b 0,	5, $80,	0, $F0
000105A6 F005 8000 00               		dc.b $F0, 5, $80, 0, 0
000105AB 0005 8000 00               		dc.b 0,	5, $80,	0, 0
000105B0                            		even
000105B0                            		even
000105B0                            
000105B0                            ; ===========================================================================
000105B0                            ; ---------------------------------------------------------------------------
000105B0                            ; Object 52 - moving platform blocks (MZ, LZ, SBZ)
000105B0                            ; ---------------------------------------------------------------------------
000105B0                            
000105B0                            Obj52:					; XREF: Obj_Index
000105B0 7000                       		moveq	#0,d0
000105B2 1028 0024                  		move.b	$24(a0),d0
000105B6 323B 0000                  		move.w	Obj52_Index(pc,d0.w),d1
000105BA 4EFB 1000                  		jmp	Obj52_Index(pc,d1.w)
000105BE                            ; ===========================================================================
000105BE 0000                       Obj52_Index:	dc.w Obj52_Main-Obj52_Index
000105C0 0000                       		dc.w Obj52_Platform-Obj52_Index
000105C2 0000                       		dc.w Obj52_StandOn-Obj52_Index
000105C4                            
000105C4 1000                       Obj52_Var:	dc.b $10, 0		; object width,	frame number
000105C6 2001                       		dc.b $20, 1
000105C8 2002                       		dc.b $20, 2
000105CA 4003                       		dc.b $40, 3
000105CC 3004                       		dc.b $30, 4
000105CE                            ; ===========================================================================
000105CE                            
000105CE                            Obj52_Main:				; XREF: Obj52_Index
000105CE 5428 0024                  		addq.b	#2,$24(a0)
000105D2 217C 0000 0000 0004        		move.l	#Map_obj52,4(a0)
000105DA 317C 42B8 0002             		move.w	#$42B8,2(a0)
000105E0 0C38 0001 FE10             		cmpi.b	#1,($FFFFFE10).w ; check if level is LZ
000105E6 6600                       		bne.s	loc_FE44
000105E8 217C 0000 0000 0004        		move.l	#Map_obj52a,4(a0) ; LZ specific	code
000105F0 317C 43BC 0002             		move.w	#$43BC,2(a0)
000105F6 117C 0007 0016             		move.b	#7,$16(a0)
000105FC                            
000105FC                            loc_FE44:
000105FC 0C38 0005 FE10             		cmpi.b	#5,($FFFFFE10).w ; check if level is SBZ
00010602 6600                       		bne.s	loc_FE60
00010604 317C 22C0 0002             		move.w	#$22C0,2(a0)	; SBZ specific code (object 5228)
0001060A 0C28 0028 0028             		cmpi.b	#$28,$28(a0)	; is object 5228 ?
00010610 6700                       		beq.s	loc_FE60	; if yes, branch
00010612 317C 4460 0002             		move.w	#$4460,2(a0)	; SBZ specific code (object 523x)
00010618                            
00010618                            loc_FE60:
00010618 117C 0004 0001             		move.b	#4,1(a0)
0001061E 7000                       		moveq	#0,d0
00010620 1028 0028                  		move.b	$28(a0),d0
00010624 E648                       		lsr.w	#3,d0
00010626 0240 001E                  		andi.w	#$1E,d0
0001062A 45FB 0098                  		lea	Obj52_Var(pc,d0.w),a2
0001062E 115A 0019                  		move.b	(a2)+,$19(a0)
00010632 115A 001A                  		move.b	(a2)+,$1A(a0)
00010636 117C 0004 0018             		move.b	#4,$18(a0)
0001063C 3168 0008 0030             		move.w	8(a0),$30(a0)
00010642 3168 000C 0032             		move.w	$C(a0),$32(a0)
00010648 0228 000F 0028             		andi.b	#$F,$28(a0)
0001064E                            
0001064E                            Obj52_Platform:				; XREF: Obj52_Index
0001064E 6100 0000                  		bsr.w	Obj52_Move
00010652 7200                       		moveq	#0,d1
00010654 1228 0019                  		move.b	$19(a0),d1
00010658 4EB9 0000 7A48             		jsr	(PlatformObject).l
0001065E 6000                       		bra.s	Obj52_ChkDel
00010660                            ; ===========================================================================
00010660                            
00010660                            Obj52_StandOn:				; XREF: Obj52_Index
00010660 7200                       		moveq	#0,d1
00010662 1228 0019                  		move.b	$19(a0),d1
00010666 4EB9 0000 7BBC             		jsr	(ExitPlatform).l
0001066C 3F28 0008                  		move.w	8(a0),-(sp)
00010670 6100 0000                  		bsr.w	Obj52_Move
00010674 341F                       		move.w	(sp)+,d2
00010676 4EB9 0000 8126             		jsr	(MvSonicOnPtfm2).l
0001067C                            
0001067C                            Obj52_ChkDel:				; XREF: Obj52_Platform
0001067C 3028 0030                  		move.w	$30(a0),d0
00010680 0240 FF80                  		andi.w	#$FF80,d0
00010684 3238 F700                  		move.w	($FFFFF700).w,d1
00010688 0441 0080                  		subi.w	#$80,d1
0001068C 0241 FF80                  		andi.w	#$FF80,d1
00010690 9041                       		sub.w	d1,d0
00010692 0C40 0280                  		cmpi.w	#$280,d0
00010696 6200 D76C                  		bhi.w	DeleteObject
0001069A 6000 D72C                  		bra.w	DisplaySprite
0001069E                            ; ===========================================================================
0001069E                            
0001069E                            Obj52_Move:				; XREF: Obj52_Platform; Obj52_StandOn
0001069E 7000                       		moveq	#0,d0
000106A0 1028 0028                  		move.b	$28(a0),d0
000106A4 0240 000F                  		andi.w	#$F,d0
000106A8 D040                       		add.w	d0,d0
000106AA 323B 0000                  		move.w	Obj52_TypeIndex(pc,d0.w),d1
000106AE 4EFB 1000                  		jmp	Obj52_TypeIndex(pc,d1.w)
000106B2                            ; ===========================================================================
000106B2 0000 0000                  Obj52_TypeIndex:dc.w Obj52_Type00-Obj52_TypeIndex, Obj52_Type01-Obj52_TypeIndex
000106B6 0000 0000                  		dc.w Obj52_Type02-Obj52_TypeIndex, Obj52_Type03-Obj52_TypeIndex
000106BA 0000 0000                  		dc.w Obj52_Type02-Obj52_TypeIndex, Obj52_Type05-Obj52_TypeIndex
000106BE 0000 0000                  		dc.w Obj52_Type06-Obj52_TypeIndex, Obj52_Type07-Obj52_TypeIndex
000106C2 0000 0000                  		dc.w Obj52_Type08-Obj52_TypeIndex, Obj52_Type02-Obj52_TypeIndex
000106C6 0000                       		dc.w Obj52_Type0A-Obj52_TypeIndex
000106C8                            ; ===========================================================================
000106C8                            
000106C8                            Obj52_Type00:				; XREF: Obj52_TypeIndex
000106C8 4E75                       		rts	
000106CA                            ; ===========================================================================
000106CA                            
000106CA                            Obj52_Type01:				; XREF: Obj52_TypeIndex
000106CA 1038 FE6C                  		move.b	($FFFFFE6C).w,d0
000106CE 323C 0060                  		move.w	#$60,d1
000106D2 0828 0000 0022             		btst	#0,$22(a0)
000106D8 6700                       		beq.s	loc_FF26
000106DA 4440                       		neg.w	d0
000106DC D041                       		add.w	d1,d0
000106DE                            
000106DE                            loc_FF26:
000106DE 3228 0030                  		move.w	$30(a0),d1
000106E2 9240                       		sub.w	d0,d1
000106E4 3141 0008                  		move.w	d1,8(a0)
000106E8 4E75                       		rts	
000106EA                            ; ===========================================================================
000106EA                            
000106EA                            Obj52_Type02:				; XREF: Obj52_TypeIndex
000106EA 0C28 0004 0024             		cmpi.b	#4,$24(a0)	; is Sonic standing on the platform?
000106F0 6600                       		bne.s	Obj52_02_Wait
000106F2 5228 0028                  		addq.b	#1,$28(a0)	; if yes, add 1	to type
000106F6                            
000106F6                            Obj52_02_Wait:
000106F6 4E75                       		rts	
000106F8                            ; ===========================================================================
000106F8                            
000106F8                            Obj52_Type03:				; XREF: Obj52_TypeIndex
000106F8 7600                       		moveq	#0,d3
000106FA 1628 0019                  		move.b	$19(a0),d3
000106FE 6100 0000                  		bsr.w	ObjHitWallRight
00010702 4A41                       		tst.w	d1		; has the platform hit a wall?
00010704 6B00                       		bmi.s	Obj52_03_End	; if yes, branch
00010706 5268 0008                  		addq.w	#1,8(a0)	; move platform	to the right
0001070A 3168 0008 0030             		move.w	8(a0),$30(a0)
00010710 4E75                       		rts	
00010712                            ; ===========================================================================
00010712                            
00010712                            Obj52_03_End:
00010712 4228 0028                  		clr.b	$28(a0)		; change to type 00 (non-moving	type)
00010716 4E75                       		rts	
00010718                            ; ===========================================================================
00010718                            
00010718                            Obj52_Type05:				; XREF: Obj52_TypeIndex
00010718 7600                       		moveq	#0,d3
0001071A 1628 0019                  		move.b	$19(a0),d3
0001071E 6100 0000                  		bsr.w	ObjHitWallRight
00010722 4A41                       		tst.w	d1		; has the platform hit a wall?
00010724 6B00                       		bmi.s	Obj52_05_End	; if yes, branch
00010726 5268 0008                  		addq.w	#1,8(a0)	; move platform	to the right
0001072A 3168 0008 0030             		move.w	8(a0),$30(a0)
00010730 4E75                       		rts	
00010732                            ; ===========================================================================
00010732                            
00010732                            Obj52_05_End:
00010732 5228 0028                  		addq.b	#1,$28(a0)	; change to type 06 (falling)
00010736 4E75                       		rts	
00010738                            ; ===========================================================================
00010738                            
00010738                            Obj52_Type06:				; XREF: Obj52_TypeIndex
00010738 6100 D668                  		bsr.w	SpeedToPos
0001073C 0668 0018 0012             		addi.w	#$18,$12(a0)	; make the platform fall
00010742 6100 0000                  		bsr.w	ObjHitFloor
00010746 4A41                       		tst.w	d1		; has platform hit the floor?
00010748 6A00 0000                  		bpl.w	locret_FFA0	; if not, branch
0001074C D368 000C                  		add.w	d1,$C(a0)
00010750 4268 0012                  		clr.w	$12(a0)		; stop platform	falling
00010754 4228 0028                  		clr.b	$28(a0)		; change to type 00 (non-moving)
00010758                            
00010758                            locret_FFA0:
00010758 4E75                       		rts	
0001075A                            ; ===========================================================================
0001075A                            
0001075A                            Obj52_Type07:				; XREF: Obj52_TypeIndex
0001075A 4A38 F7E2                  		tst.b	($FFFFF7E2).w	; has switch number 02 been pressed?
0001075E 6700                       		beq.s	Obj52_07_ChkDel
00010760 5728 0028                  		subq.b	#3,$28(a0)	; if yes, change object	type to	04
00010764                            
00010764                            Obj52_07_ChkDel:
00010764 588F                       		addq.l	#4,sp
00010766 3028 0030                  		move.w	$30(a0),d0
0001076A 0240 FF80                  		andi.w	#$FF80,d0
0001076E 3238 F700                  		move.w	($FFFFF700).w,d1
00010772 0441 0080                  		subi.w	#$80,d1
00010776 0241 FF80                  		andi.w	#$FF80,d1
0001077A 9041                       		sub.w	d1,d0
0001077C 0C40 0280                  		cmpi.w	#$280,d0
00010780 6200 D682                  		bhi.w	DeleteObject
00010784 4E75                       		rts	
00010786                            ; ===========================================================================
00010786                            
00010786                            Obj52_Type08:				; XREF: Obj52_TypeIndex
00010786 1038 FE7C                  		move.b	($FFFFFE7C).w,d0
0001078A 323C 0080                  		move.w	#$80,d1
0001078E 0828 0000 0022             		btst	#0,$22(a0)
00010794 6700                       		beq.s	loc_FFE2
00010796 4440                       		neg.w	d0
00010798 D041                       		add.w	d1,d0
0001079A                            
0001079A                            loc_FFE2:
0001079A 3228 0032                  		move.w	$32(a0),d1
0001079E 9240                       		sub.w	d0,d1
000107A0 3141 000C                  		move.w	d1,$C(a0)
000107A4 4E75                       		rts	
000107A6                            ; ===========================================================================
000107A6                            
000107A6                            Obj52_Type0A:				; XREF: Obj52_TypeIndex
000107A6 7600                       		moveq	#0,d3
000107A8 1628 0019                  		move.b	$19(a0),d3
000107AC D643                       		add.w	d3,d3
000107AE 7208                       		moveq	#8,d1
000107B0 0828 0000 0022             		btst	#0,$22(a0)
000107B6 6700                       		beq.s	loc_10004
000107B8 4441                       		neg.w	d1
000107BA 4443                       		neg.w	d3
000107BC                            
000107BC                            loc_10004:
000107BC 4A68 0036                  		tst.w	$36(a0)		; is platform set to move back?
000107C0 6600                       		bne.s	Obj52_0A_Back	; if yes, branch
000107C2 3028 0008                  		move.w	8(a0),d0
000107C6 9068 0030                  		sub.w	$30(a0),d0
000107CA B043                       		cmp.w	d3,d0
000107CC 6700                       		beq.s	Obj52_0A_Wait
000107CE D368 0008                  		add.w	d1,8(a0)	; move platform
000107D2 317C 012C 0034             		move.w	#300,$34(a0)	; set time delay to 5 seconds
000107D8 4E75                       		rts	
000107DA                            ; ===========================================================================
000107DA                            
000107DA                            Obj52_0A_Wait:
000107DA 5368 0034                  		subq.w	#1,$34(a0)	; subtract 1 from time delay
000107DE 6600                       		bne.s	locret_1002E	; if time remains, branch
000107E0 317C 0001 0036             		move.w	#1,$36(a0)	; set platform to move back to its original position
000107E6                            
000107E6                            locret_1002E:
000107E6 4E75                       		rts	
000107E8                            ; ===========================================================================
000107E8                            
000107E8                            Obj52_0A_Back:
000107E8 3028 0008                  		move.w	8(a0),d0
000107EC 9068 0030                  		sub.w	$30(a0),d0
000107F0 6700                       		beq.s	Obj52_0A_Reset
000107F2 9368 0008                  		sub.w	d1,8(a0)	; return platform to its original position
000107F6 4E75                       		rts	
000107F8                            ; ===========================================================================
000107F8                            
000107F8                            Obj52_0A_Reset:
000107F8 4268 0036                  		clr.w	$36(a0)
000107FC 5328 0028                  		subq.b	#1,$28(a0)
00010800 4E75                       		rts	
00010802                            ; ===========================================================================
00010802                            ; ---------------------------------------------------------------------------
00010802                            ; Sprite mappings - moving blocks (MZ, SBZ)
00010802                            ; ---------------------------------------------------------------------------
00010802                            Map_obj52:
00010802                            	include "_maps\obj52mz.asm"
00010802                            ; ---------------------------------------------------------------------------
00010802                            ; Sprite mappings - moving blocks (MZ, SBZ)
00010802                            ; ---------------------------------------------------------------------------
00010802 0000 0000                  		dc.w byte_10054-Map_obj52, byte_1005A-Map_obj52
00010806 0000 0000                  		dc.w byte_10065-Map_obj52, byte_1007A-Map_obj52
0001080A 0000                       		dc.w byte_1008F-Map_obj52
0001080C 01                         byte_10054:	dc.b 1
0001080D F80F 0008 F0               		dc.b $F8, $F, 0, 8, $F0
00010812 02                         byte_1005A:	dc.b 2
00010813 F80F 0008 E0               		dc.b $F8, $F, 0, 8, $E0
00010818 F80F 0008 00               		dc.b $F8, $F, 0, 8, 0
0001081D 04                         byte_10065:	dc.b 4
0001081E F80C 2000 E0               		dc.b $F8, $C, $20, 0, $E0
00010823 000D 0004 E0               		dc.b 0,	$D, 0, 4, $E0
00010828 F80C 2000 00               		dc.b $F8, $C, $20, 0, 0
0001082D 000D 0004 00               		dc.b 0,	$D, 0, 4, 0
00010832 04                         byte_1007A:	dc.b 4
00010833 F80E 0000 C0               		dc.b $F8, $E, 0, 0, $C0
00010838 F80E 0003 E0               		dc.b $F8, $E, 0, 3, $E0
0001083D F80E 0003 00               		dc.b $F8, $E, 0, 3, 0
00010842 F80E 0800 20               		dc.b $F8, $E, 8, 0, $20
00010847 03                         byte_1008F:	dc.b 3
00010848 F80F 0008 D0               		dc.b $F8, $F, 0, 8, $D0
0001084D F80F 0008 F0               		dc.b $F8, $F, 0, 8, $F0
00010852 F80F 0008 10               		dc.b $F8, $F, 0, 8, $10
00010858 00                         		even
00010858 00                         		even
00010858                            
00010858                            ; ---------------------------------------------------------------------------
00010858                            ; Sprite mappings - moving block (LZ)
00010858                            ; ---------------------------------------------------------------------------
00010858                            Map_obj52a:
00010858                            	include "_maps\obj52lz.asm"
00010858                            ; ---------------------------------------------------------------------------
00010858                            ; Sprite mappings - moving block (LZ)
00010858                            ; ---------------------------------------------------------------------------
00010858 0000                       		dc.w byte_100A2-Map_obj52a
0001085A 01                         byte_100A2:	dc.b 1
0001085B F80D 0000 F0               		dc.b $F8, $D, 0, 0, $F0
00010860                            		even
00010860                            		even
00010860                            
00010860                            ; ===========================================================================
00010860                            ; ---------------------------------------------------------------------------
00010860                            ; Object 55 - Basaran enemy (MZ)
00010860                            ; ---------------------------------------------------------------------------
00010860                            
00010860                            Obj55:					; XREF: Obj_Index
00010860 7000                       		moveq	#0,d0
00010862 1028 0024                  		move.b	$24(a0),d0
00010866 323B 0000                  		move.w	Obj55_Index(pc,d0.w),d1
0001086A 4EFB 1000                  		jmp	Obj55_Index(pc,d1.w)
0001086E                            ; ===========================================================================
0001086E 0000                       Obj55_Index:	dc.w Obj55_Main-Obj55_Index
00010870 0000                       		dc.w Obj55_Action-Obj55_Index
00010872                            ; ===========================================================================
00010872                            
00010872                            Obj55_Main:				; XREF: Obj55_Index
00010872 5428 0024                  		addq.b	#2,$24(a0)
00010876 217C 0000 0000 0004        		move.l	#Map_obj55,4(a0)
0001087E 317C 84B8 0002             		move.w	#$84B8,2(a0)
00010884 117C 0004 0001             		move.b	#4,1(a0)
0001088A 117C 000C 0016             		move.b	#$C,$16(a0)
00010890 117C 0002 0018             		move.b	#2,$18(a0)
00010896 117C 000B 0020             		move.b	#$B,$20(a0)
0001089C 117C 0010 0019             		move.b	#$10,$19(a0)
000108A2                            
000108A2                            Obj55_Action:				; XREF: Obj55_Index
000108A2 7000                       		moveq	#0,d0
000108A4 1028 0025                  		move.b	$25(a0),d0
000108A8 323B 0000                  		move.w	Obj55_Index2(pc,d0.w),d1
000108AC 4EBB 1000                  		jsr	Obj55_Index2(pc,d1.w)
000108B0 43F9 0000 0000             		lea	(Ani_obj55).l,a1
000108B6 6100 A5D0                  		bsr.w	AnimateSprite
000108BA 6000 F5B4                  		bra.w	MarkObjGone
000108BE                            ; ===========================================================================
000108BE 0000                       Obj55_Index2:	dc.w Obj55_ChkDrop-Obj55_Index2
000108C0 0000                       		dc.w Obj55_DropFly-Obj55_Index2
000108C2 0000                       		dc.w Obj55_PlaySnd-Obj55_Index2
000108C4 0000                       		dc.w Obj55_FlyUp-Obj55_Index2
000108C6                            ; ===========================================================================
000108C6                            
000108C6                            Obj55_ChkDrop:				; XREF: Obj55_Index2
000108C6 343C 0080                  		move.w	#$80,d2
000108CA 6100 0000                  		bsr.w	Obj55_ChkSonic
000108CE 6400                       		bcc.s	Obj55_NoDrop
000108D0 3038 D00C                  		move.w	($FFFFD00C).w,d0
000108D4 3140 0036                  		move.w	d0,$36(a0)
000108D8 9068 000C                  		sub.w	$C(a0),d0
000108DC 6500                       		bcs.s	Obj55_NoDrop
000108DE 0C40 0080                  		cmpi.w	#$80,d0		; is Sonic within $80 pixels of	basaran?
000108E2 6400                       		bcc.s	Obj55_NoDrop	; if not, branch
000108E4 4A78 FE08                  		tst.w	($FFFFFE08).w	; is debug mode	on?
000108E8 6600                       		bne.s	Obj55_NoDrop	; if yes, branch
000108EA 1038 FE0F                  		move.b	($FFFFFE0F).w,d0
000108EE D007                       		add.b	d7,d0
000108F0 0200 0007                  		andi.b	#7,d0
000108F4 6600                       		bne.s	Obj55_NoDrop
000108F6 117C 0001 001C             		move.b	#1,$1C(a0)
000108FC 5428 0025                  		addq.b	#2,$25(a0)
00010900                            
00010900                            Obj55_NoDrop:
00010900 4E75                       		rts	
00010902                            ; ===========================================================================
00010902                            
00010902                            Obj55_DropFly:				; XREF: Obj55_Index2
00010902 6100 D49E                  		bsr.w	SpeedToPos
00010906 0668 0018 0012             		addi.w	#$18,$12(a0)	; make basaran fall
0001090C 343C 0080                  		move.w	#$80,d2
00010910 6100 0000                  		bsr.w	Obj55_ChkSonic
00010914 3028 0036                  		move.w	$36(a0),d0
00010918 9068 000C                  		sub.w	$C(a0),d0
0001091C 6500                       		bcs.s	Obj55_ChkDel
0001091E 0C40 0010                  		cmpi.w	#$10,d0
00010922 6400                       		bcc.s	locret_10180
00010924 3141 0010                  		move.w	d1,$10(a0)	; make basaran fly horizontally
00010928 317C 0000 0012             		move.w	#0,$12(a0)	; stop basaran falling
0001092E 117C 0002 001C             		move.b	#2,$1C(a0)
00010934 5428 0025                  		addq.b	#2,$25(a0)
00010938                            
00010938                            locret_10180:
00010938 4E75                       		rts	
0001093A                            ; ===========================================================================
0001093A                            
0001093A                            Obj55_ChkDel:				; XREF: Obj55_DropFly
0001093A 4A28 0001                  		tst.b	1(a0)
0001093E 6A00 D4C4                  		bpl.w	DeleteObject
00010942 4E75                       		rts	
00010944                            ; ===========================================================================
00010944                            
00010944                            Obj55_PlaySnd:				; XREF: Obj55_Index2
00010944 1038 FE0F                  		move.b	($FFFFFE0F).w,d0
00010948 0200 000F                  		andi.b	#$F,d0
0001094C 6600                       		bne.s	loc_101A0
0001094E 303C 00C0                  		move.w	#$C0,d0
00010952 4EB9 0000 15C0             		jsr	(PlaySound_Special).l ;	play flapping sound
00010958                            
00010958                            loc_101A0:
00010958 6100 D448                  		bsr.w	SpeedToPos
0001095C 3038 D008                  		move.w	($FFFFD008).w,d0
00010960 9068 0008                  		sub.w	8(a0),d0
00010964 6400                       		bcc.s	loc_101B0
00010966 4440                       		neg.w	d0
00010968                            
00010968                            loc_101B0:
00010968 0C40 0080                  		cmpi.w	#$80,d0
0001096C 6500                       		bcs.s	locret_101C6
0001096E 1038 FE0F                  		move.b	($FFFFFE0F).w,d0
00010972 D007                       		add.b	d7,d0
00010974 0200 0007                  		andi.b	#7,d0
00010978 6600                       		bne.s	locret_101C6
0001097A 5428 0025                  		addq.b	#2,$25(a0)
0001097E                            
0001097E                            locret_101C6:
0001097E 4E75                       		rts	
00010980                            ; ===========================================================================
00010980                            
00010980                            Obj55_FlyUp:				; XREF: Obj55_Index2
00010980 6100 D420                  		bsr.w	SpeedToPos
00010984 0468 0018 0012             		subi.w	#$18,$12(a0)	; make basaran fly upwards
0001098A 6100 0000                  		bsr.w	ObjHitCeiling
0001098E 4A41                       		tst.w	d1		; has basaran hit the ceiling?
00010990 6A00                       		bpl.s	locret_101F4	; if not, branch
00010992 9368 000C                  		sub.w	d1,$C(a0)
00010996 0268 FFF8 0008             		andi.w	#$FFF8,8(a0)
0001099C 4268 0010                  		clr.w	$10(a0)		; stop basaran moving
000109A0 4268 0012                  		clr.w	$12(a0)
000109A4 4228 001C                  		clr.b	$1C(a0)
000109A8 4228 0025                  		clr.b	$25(a0)
000109AC                            
000109AC                            locret_101F4:
000109AC 4E75                       		rts	
000109AE                            ; ===========================================================================
000109AE                            
000109AE                            Obj55_ChkSonic:				; XREF: Obj55_ChkDrop
000109AE 323C 0100                  		move.w	#$100,d1
000109B2 08E8 0000 0022             		bset	#0,$22(a0)
000109B8 3038 D008                  		move.w	($FFFFD008).w,d0
000109BC 9068 0008                  		sub.w	8(a0),d0
000109C0 6400                       		bcc.s	loc_10214
000109C2 4440                       		neg.w	d0
000109C4 4441                       		neg.w	d1
000109C6 08A8 0000 0022             		bclr	#0,$22(a0)
000109CC                            
000109CC                            loc_10214:
000109CC B042                       		cmp.w	d2,d0
000109CE 4E75                       		rts	
000109D0                            ; ===========================================================================
000109D0 6100 D3D0                  		bsr.w	SpeedToPos
000109D4 6100 D3F2                  		bsr.w	DisplaySprite
000109D8 4A28 0001                  		tst.b	1(a0)
000109DC 6A00 D426                  		bpl.w	DeleteObject
000109E0 4E75                       		rts	
000109E2                            ; ===========================================================================
000109E2                            Ani_obj55:
000109E2                            	include "_anim\obj55.asm"
000109E2                            ; ---------------------------------------------------------------------------
000109E2                            ; Animation script - Basaran enemy
000109E2                            ; ---------------------------------------------------------------------------
000109E2 0000                       		dc.w byte_10230-Ani_obj55
000109E4 0000                       		dc.w byte_10234-Ani_obj55
000109E6 0000                       		dc.w byte_10238-Ani_obj55
000109E8 0F00 FF00                  byte_10230:	dc.b $F, 0, $FF, 0
000109EC 0F01 FF00                  byte_10234:	dc.b $F, 1, $FF, 0
000109F0 0301 0203 02FF             byte_10238:	dc.b 3,	1, 2, 3, 2, $FF
000109F6                            		even
000109F6                            		even
000109F6                            
000109F6                            ; ---------------------------------------------------------------------------
000109F6                            ; Sprite mappings - Basaran enemy (MZ)
000109F6                            ; ---------------------------------------------------------------------------
000109F6                            Map_obj55:
000109F6                            	include "_maps\obj55.asm"
000109F6                            ; ---------------------------------------------------------------------------
000109F6                            ; Sprite mappings - Basaran enemy (MZ)
000109F6                            ; ---------------------------------------------------------------------------
000109F6 0000 0000                  		dc.w byte_10246-Map_obj55, byte_1024C-Map_obj55
000109FA 0000 0000                  		dc.w byte_1025C-Map_obj55, byte_10271-Map_obj55
000109FE 01                         byte_10246:	dc.b 1
000109FF F406 0000 F8               		dc.b $F4, 6, 0,	0, $F8
00010A04 03                         byte_1024C:	dc.b 3
00010A05 F20E 0006 F4               		dc.b $F2, $E, 0, 6, $F4
00010A0A 0A04 0012 FC               		dc.b $A, 4, 0, $12, $FC
00010A0F 0200 0027 0C               		dc.b 2,	0, 0, $27, $C
00010A14 04                         byte_1025C:	dc.b 4
00010A15 F804 0014 F8               		dc.b $F8, 4, 0,	$14, $F8
00010A1A 000C 0016 F0               		dc.b 0,	$C, 0, $16, $F0
00010A1F 0804 001A 00               		dc.b 8,	4, 0, $1A, 0
00010A24 0000 0028 0C               		dc.b 0,	0, 0, $28, $C
00010A29 04                         byte_10271:	dc.b 4
00010A2A F609 001C F5               		dc.b $F6, 9, 0,	$1C, $F5
00010A2F 0608 0022 F4               		dc.b 6,	8, 0, $22, $F4
00010A34 0E04 0025 F4               		dc.b $E, 4, 0, $25, $F4
00010A39 FE00 0027 0C               		dc.b $FE, 0, 0,	$27, $C
00010A3E                            		even
00010A3E                            		even
00010A3E                            
00010A3E                            ; ===========================================================================
00010A3E                            ; ---------------------------------------------------------------------------
00010A3E                            ; Object 56 - moving blocks (SYZ/SLZ), large doors (LZ)
00010A3E                            ; ---------------------------------------------------------------------------
00010A3E                            
00010A3E                            Obj56:					; XREF: Obj_Index
00010A3E 7000                       		moveq	#0,d0
00010A40 1028 0024                  		move.b	$24(a0),d0
00010A44 323B 0000                  		move.w	Obj56_Index(pc,d0.w),d1
00010A48 4EFB 1000                  		jmp	Obj56_Index(pc,d1.w)
00010A4C                            ; ===========================================================================
00010A4C 0000                       Obj56_Index:	dc.w Obj56_Main-Obj56_Index
00010A4E 0000                       		dc.w Obj56_Action-Obj56_Index
00010A50                            
00010A50 1010                       Obj56_Var:	dc.b  $10, $10		; width, height
00010A52 2020                       		dc.b  $20, $20
00010A54 1020                       		dc.b  $10, $20
00010A56 201A                       		dc.b  $20, $1A
00010A58 1027                       		dc.b  $10, $27
00010A5A 1010                       		dc.b  $10, $10
00010A5C 0820                       		dc.b	8, $20
00010A5E 4010                       		dc.b  $40, $10
00010A60                            ; ===========================================================================
00010A60                            
00010A60                            Obj56_Main:				; XREF: Obj56_Index
00010A60 5428 0024                  		addq.b	#2,$24(a0)
00010A64 217C 0000 0000 0004        		move.l	#Map_obj56,4(a0)
00010A6C 317C 4000 0002             		move.w	#$4000,2(a0)
00010A72 0C38 0001 FE10             		cmpi.b	#1,($FFFFFE10).w ; check if level is LZ
00010A78 6600                       		bne.s	loc_102C8
00010A7A 317C 43C4 0002             		move.w	#$43C4,2(a0)	; LZ specific code
00010A80                            
00010A80                            loc_102C8:
00010A80 117C 0004 0001             		move.b	#4,1(a0)
00010A86 117C 0003 0018             		move.b	#3,$18(a0)
00010A8C 7000                       		moveq	#0,d0
00010A8E 1028 0028                  		move.b	$28(a0),d0
00010A92 E648                       		lsr.w	#3,d0
00010A94 0240 000E                  		andi.w	#$E,d0
00010A98 45FB 00B6                  		lea	Obj56_Var(pc,d0.w),a2
00010A9C 115A 0019                  		move.b	(a2)+,$19(a0)
00010AA0 1152 0016                  		move.b	(a2),$16(a0)
00010AA4 E248                       		lsr.w	#1,d0
00010AA6 1140 001A                  		move.b	d0,$1A(a0)
00010AAA 3168 0008 0034             		move.w	8(a0),$34(a0)
00010AB0 3168 000C 0030             		move.w	$C(a0),$30(a0)
00010AB6 7000                       		moveq	#0,d0
00010AB8 1012                       		move.b	(a2),d0
00010ABA D040                       		add.w	d0,d0
00010ABC 3140 003A                  		move.w	d0,$3A(a0)
00010AC0 7000                       		moveq	#0,d0
00010AC2 0C38 0001 FE10             		cmpi.b	#1,($FFFFFE10).w ; check if level is LZ
00010AC8 6700                       		beq.s	loc_10332
00010ACA 1028 0028                  		move.b	$28(a0),d0	; SYZ/SLZ specific code
00010ACE 0240 000F                  		andi.w	#$F,d0
00010AD2 5140                       		subq.w	#8,d0
00010AD4 6500                       		bcs.s	loc_10332
00010AD6 E548                       		lsl.w	#2,d0
00010AD8 45F8 FE8A                  		lea	($FFFFFE8A).w,a2
00010ADC 45F2 0000                  		lea	(a2,d0.w),a2
00010AE0 4A52                       		tst.w	(a2)
00010AE2 6A00                       		bpl.s	loc_10332
00010AE4 0868 0000 0022             		bchg	#0,$22(a0)
00010AEA                            
00010AEA                            loc_10332:
00010AEA 1028 0028                  		move.b	$28(a0),d0
00010AEE 6A00                       		bpl.s	Obj56_Action
00010AF0 0200 000F                  		andi.b	#$F,d0
00010AF4 1140 003C                  		move.b	d0,$3C(a0)
00010AF8 117C 0005 0028             		move.b	#5,$28(a0)
00010AFE 0C28 0007 001A             		cmpi.b	#7,$1A(a0)
00010B04 6600                       		bne.s	Obj56_ChkGone
00010B06 117C 000C 0028             		move.b	#$C,$28(a0)
00010B0C 317C 0080 003A             		move.w	#$80,$3A(a0)
00010B12                            
00010B12                            Obj56_ChkGone:
00010B12 45F8 FC00                  		lea	($FFFFFC00).w,a2
00010B16 7000                       		moveq	#0,d0
00010B18 1028 0023                  		move.b	$23(a0),d0
00010B1C 6700                       		beq.s	Obj56_Action
00010B1E 08B2 0007 0002             		bclr	#7,2(a2,d0.w)
00010B24 0832 0000 0002             		btst	#0,2(a2,d0.w)
00010B2A 6700                       		beq.s	Obj56_Action
00010B2C 5228 0028                  		addq.b	#1,$28(a0)
00010B30 4268 003A                  		clr.w	$3A(a0)
00010B34                            
00010B34                            Obj56_Action:				; XREF: Obj56_Index
00010B34 3F28 0008                  		move.w	8(a0),-(sp)
00010B38 7000                       		moveq	#0,d0
00010B3A 1028 0028                  		move.b	$28(a0),d0	; get object type
00010B3E 0240 000F                  		andi.w	#$F,d0		; read only the	2nd digit
00010B42 D040                       		add.w	d0,d0
00010B44 323B 0000                  		move.w	Obj56_TypeIndex(pc,d0.w),d1
00010B48 4EBB 1000                  		jsr	Obj56_TypeIndex(pc,d1.w)
00010B4C 381F                       		move.w	(sp)+,d4
00010B4E 4A28 0001                  		tst.b	1(a0)
00010B52 6A00                       		bpl.s	Obj56_ChkDel
00010B54 7200                       		moveq	#0,d1
00010B56 1228 0019                  		move.b	$19(a0),d1
00010B5A 0641 000B                  		addi.w	#$B,d1
00010B5E 7400                       		moveq	#0,d2
00010B60 1428 0016                  		move.b	$16(a0),d2
00010B64 3602                       		move.w	d2,d3
00010B66 5243                       		addq.w	#1,d3
00010B68 6100 F62E                  		bsr.w	SolidObject
00010B6C                            
00010B6C                            Obj56_ChkDel:
00010B6C 3028 0034                  		move.w	$34(a0),d0
00010B70 0240 FF80                  		andi.w	#$FF80,d0
00010B74 3238 F700                  		move.w	($FFFFF700).w,d1
00010B78 0441 0080                  		subi.w	#$80,d1
00010B7C 0241 FF80                  		andi.w	#$FF80,d1
00010B80 9041                       		sub.w	d1,d0
00010B82 0C40 0280                  		cmpi.w	#$280,d0
00010B86 6200 D27C                  		bhi.w	DeleteObject
00010B8A 6000 D23C                  		bra.w	DisplaySprite
00010B8E                            ; ===========================================================================
00010B8E 0000 0000                  Obj56_TypeIndex:dc.w Obj56_Type00-Obj56_TypeIndex, Obj56_Type01-Obj56_TypeIndex
00010B92 0000 0000                  		dc.w Obj56_Type02-Obj56_TypeIndex, Obj56_Type03-Obj56_TypeIndex
00010B96 0000 0000                  		dc.w Obj56_Type04-Obj56_TypeIndex, Obj56_Type05-Obj56_TypeIndex
00010B9A 0000 0000                  		dc.w Obj56_Type06-Obj56_TypeIndex, Obj56_Type07-Obj56_TypeIndex
00010B9E 0000 0000                  		dc.w Obj56_Type08-Obj56_TypeIndex, Obj56_Type09-Obj56_TypeIndex
00010BA2 0000 0000                  		dc.w Obj56_Type0A-Obj56_TypeIndex, Obj56_Type0B-Obj56_TypeIndex
00010BA6 0000 0000                  		dc.w Obj56_Type0C-Obj56_TypeIndex, Obj56_Type0D-Obj56_TypeIndex
00010BAA                            ; ===========================================================================
00010BAA                            
00010BAA                            Obj56_Type00:				; XREF: Obj56_TypeIndex
00010BAA 4E75                       		rts	
00010BAC                            ; ===========================================================================
00010BAC                            
00010BAC                            Obj56_Type01:				; XREF: Obj56_TypeIndex
00010BAC 323C 0040                  		move.w	#$40,d1
00010BB0 7000                       		moveq	#0,d0
00010BB2 1038 FE68                  		move.b	($FFFFFE68).w,d0
00010BB6 6000                       		bra.s	Obj56_Move_LR
00010BB8                            ; ===========================================================================
00010BB8                            
00010BB8                            Obj56_Type02:				; XREF: Obj56_TypeIndex
00010BB8 323C 0080                  		move.w	#$80,d1
00010BBC 7000                       		moveq	#0,d0
00010BBE 1038 FE7C                  		move.b	($FFFFFE7C).w,d0
00010BC2                            
00010BC2                            Obj56_Move_LR:
00010BC2 0828 0000 0022             		btst	#0,$22(a0)
00010BC8 6700                       		beq.s	loc_10416
00010BCA 4440                       		neg.w	d0
00010BCC D041                       		add.w	d1,d0
00010BCE                            
00010BCE                            loc_10416:
00010BCE 3228 0034                  		move.w	$34(a0),d1
00010BD2 9240                       		sub.w	d0,d1
00010BD4 3141 0008                  		move.w	d1,8(a0)	; move object horizontally
00010BD8 4E75                       		rts	
00010BDA                            ; ===========================================================================
00010BDA                            
00010BDA                            Obj56_Type03:				; XREF: Obj56_TypeIndex
00010BDA 323C 0040                  		move.w	#$40,d1
00010BDE 7000                       		moveq	#0,d0
00010BE0 1038 FE68                  		move.b	($FFFFFE68).w,d0
00010BE4 6000                       		bra.s	Obj56_Move_UD
00010BE6                            ; ===========================================================================
00010BE6                            
00010BE6                            Obj56_Type04:				; XREF: Obj56_TypeIndex
00010BE6 323C 0080                  		move.w	#$80,d1
00010BEA 7000                       		moveq	#0,d0
00010BEC 1038 FE7C                  		move.b	($FFFFFE7C).w,d0
00010BF0                            
00010BF0                            Obj56_Move_UD:
00010BF0 0828 0000 0022             		btst	#0,$22(a0)
00010BF6 6700                       		beq.s	loc_10444
00010BF8 4440                       		neg.w	d0
00010BFA D041                       		add.w	d1,d0
00010BFC                            
00010BFC                            loc_10444:
00010BFC 3228 0030                  		move.w	$30(a0),d1
00010C00 9240                       		sub.w	d0,d1
00010C02 3141 000C                  		move.w	d1,$C(a0)	; move object vertically
00010C06 4E75                       		rts	
00010C08                            ; ===========================================================================
00010C08                            
00010C08                            Obj56_Type05:				; XREF: Obj56_TypeIndex
00010C08 4A28 0038                  		tst.b	$38(a0)
00010C0C 6600                       		bne.s	loc_104A4
00010C0E 0C78 0100 FE10             		cmpi.w	#$100,($FFFFFE10).w ; is level LZ1 ?
00010C14 6600                       		bne.s	loc_1047A	; if not, branch
00010C16 0C28 0003 003C             		cmpi.b	#3,$3C(a0)
00010C1C 6600                       		bne.s	loc_1047A
00010C1E 4238 F7C9                  		clr.b	($FFFFF7C9).w
00010C22 3038 D008                  		move.w	($FFFFD008).w,d0
00010C26 B068 0008                  		cmp.w	8(a0),d0
00010C2A 6400                       		bcc.s	loc_1047A
00010C2C 11FC 0001 F7C9             		move.b	#1,($FFFFF7C9).w
00010C32                            
00010C32                            loc_1047A:
00010C32 45F8 F7E0                  		lea	($FFFFF7E0).w,a2
00010C36 7000                       		moveq	#0,d0
00010C38 1028 003C                  		move.b	$3C(a0),d0
00010C3C 0832 0000 0000             		btst	#0,(a2,d0.w)
00010C42 6700                       		beq.s	loc_104AE
00010C44 0C78 0100 FE10             		cmpi.w	#$100,($FFFFFE10).w ; is level LZ1 ?
00010C4A 6600                       		bne.s	loc_1049E	; if not, branch
00010C4C 0C00 0003                  		cmpi.b	#3,d0
00010C50 6600                       		bne.s	loc_1049E
00010C52 4238 F7C9                  		clr.b	($FFFFF7C9).w
00010C56                            
00010C56                            loc_1049E:
00010C56 117C 0001 0038             		move.b	#1,$38(a0)
00010C5C                            
00010C5C                            loc_104A4:
00010C5C 4A68 003A                  		tst.w	$3A(a0)
00010C60 6700                       		beq.s	loc_104C8
00010C62 5568 003A                  		subq.w	#2,$3A(a0)
00010C66                            
00010C66                            loc_104AE:
00010C66 3028 003A                  		move.w	$3A(a0),d0
00010C6A 0828 0000 0022             		btst	#0,$22(a0)
00010C70 6700                       		beq.s	loc_104BC
00010C72 4440                       		neg.w	d0
00010C74                            
00010C74                            loc_104BC:
00010C74 3228 0030                  		move.w	$30(a0),d1
00010C78 D240                       		add.w	d0,d1
00010C7A 3141 000C                  		move.w	d1,$C(a0)
00010C7E 4E75                       		rts	
00010C80                            ; ===========================================================================
00010C80                            
00010C80                            loc_104C8:
00010C80 5228 0028                  		addq.b	#1,$28(a0)
00010C84 4228 0038                  		clr.b	$38(a0)
00010C88 45F8 FC00                  		lea	($FFFFFC00).w,a2
00010C8C 7000                       		moveq	#0,d0
00010C8E 1028 0023                  		move.b	$23(a0),d0
00010C92 67D2                       		beq.s	loc_104AE
00010C94 08F2 0000 0002             		bset	#0,2(a2,d0.w)
00010C9A 60CA                       		bra.s	loc_104AE
00010C9C                            ; ===========================================================================
00010C9C                            
00010C9C                            Obj56_Type06:				; XREF: Obj56_TypeIndex
00010C9C 4A28 0038                  		tst.b	$38(a0)
00010CA0 6600                       		bne.s	loc_10500
00010CA2 45F8 F7E0                  		lea	($FFFFF7E0).w,a2
00010CA6 7000                       		moveq	#0,d0
00010CA8 1028 003C                  		move.b	$3C(a0),d0
00010CAC 4A32 0000                  		tst.b	(a2,d0.w)
00010CB0 6A00                       		bpl.s	loc_10512
00010CB2 117C 0001 0038             		move.b	#1,$38(a0)
00010CB8                            
00010CB8                            loc_10500:
00010CB8 7000                       		moveq	#0,d0
00010CBA 1028 0016                  		move.b	$16(a0),d0
00010CBE D040                       		add.w	d0,d0
00010CC0 B068 003A                  		cmp.w	$3A(a0),d0
00010CC4 6700                       		beq.s	loc_1052C
00010CC6 5468 003A                  		addq.w	#2,$3A(a0)
00010CCA                            
00010CCA                            loc_10512:
00010CCA 3028 003A                  		move.w	$3A(a0),d0
00010CCE 0828 0000 0022             		btst	#0,$22(a0)
00010CD4 6700                       		beq.s	loc_10520
00010CD6 4440                       		neg.w	d0
00010CD8                            
00010CD8                            loc_10520:
00010CD8 3228 0030                  		move.w	$30(a0),d1
00010CDC D240                       		add.w	d0,d1
00010CDE 3141 000C                  		move.w	d1,$C(a0)
00010CE2 4E75                       		rts	
00010CE4                            ; ===========================================================================
00010CE4                            
00010CE4                            loc_1052C:
00010CE4 5328 0028                  		subq.b	#1,$28(a0)
00010CE8 4228 0038                  		clr.b	$38(a0)
00010CEC 45F8 FC00                  		lea	($FFFFFC00).w,a2
00010CF0 7000                       		moveq	#0,d0
00010CF2 1028 0023                  		move.b	$23(a0),d0
00010CF6 67D2                       		beq.s	loc_10512
00010CF8 08B2 0000 0002             		bclr	#0,2(a2,d0.w)
00010CFE 60CA                       		bra.s	loc_10512
00010D00                            ; ===========================================================================
00010D00                            
00010D00                            Obj56_Type07:				; XREF: Obj56_TypeIndex
00010D00 4A28 0038                  		tst.b	$38(a0)
00010D04 6600                       		bne.s	loc_1055E
00010D06 4A38 F7EF                  		tst.b	($FFFFF7EF).w	; has switch number $F been pressed?
00010D0A 6700                       		beq.s	locret_10578
00010D0C 117C 0001 0038             		move.b	#1,$38(a0)
00010D12 4268 003A                  		clr.w	$3A(a0)
00010D16                            
00010D16                            loc_1055E:
00010D16 5268 0008                  		addq.w	#1,8(a0)
00010D1A 3168 0008 0034             		move.w	8(a0),$34(a0)
00010D20 5268 003A                  		addq.w	#1,$3A(a0)
00010D24 0C68 0380 003A             		cmpi.w	#$380,$3A(a0)
00010D2A 6600                       		bne.s	locret_10578
00010D2C 4228 0028                  		clr.b	$28(a0)
00010D30                            
00010D30                            locret_10578:
00010D30 4E75                       		rts	
00010D32                            ; ===========================================================================
00010D32                            
00010D32                            Obj56_Type0C:				; XREF: Obj56_TypeIndex
00010D32 4A28 0038                  		tst.b	$38(a0)
00010D36 6600                       		bne.s	loc_10598
00010D38 45F8 F7E0                  		lea	($FFFFF7E0).w,a2
00010D3C 7000                       		moveq	#0,d0
00010D3E 1028 003C                  		move.b	$3C(a0),d0
00010D42 0832 0000 0000             		btst	#0,(a2,d0.w)
00010D48 6700                       		beq.s	loc_105A2
00010D4A 117C 0001 0038             		move.b	#1,$38(a0)
00010D50                            
00010D50                            loc_10598:
00010D50 4A68 003A                  		tst.w	$3A(a0)
00010D54 6700                       		beq.s	loc_105C0
00010D56 5568 003A                  		subq.w	#2,$3A(a0)
00010D5A                            
00010D5A                            loc_105A2:
00010D5A 3028 003A                  		move.w	$3A(a0),d0
00010D5E 0828 0000 0022             		btst	#0,$22(a0)
00010D64 6700                       		beq.s	loc_105B4
00010D66 4440                       		neg.w	d0
00010D68 0640 0080                  		addi.w	#$80,d0
00010D6C                            
00010D6C                            loc_105B4:
00010D6C 3228 0034                  		move.w	$34(a0),d1
00010D70 D240                       		add.w	d0,d1
00010D72 3141 0008                  		move.w	d1,8(a0)
00010D76 4E75                       		rts	
00010D78                            ; ===========================================================================
00010D78                            
00010D78                            loc_105C0:
00010D78 5228 0028                  		addq.b	#1,$28(a0)
00010D7C 4228 0038                  		clr.b	$38(a0)
00010D80 45F8 FC00                  		lea	($FFFFFC00).w,a2
00010D84 7000                       		moveq	#0,d0
00010D86 1028 0023                  		move.b	$23(a0),d0
00010D8A 67CE                       		beq.s	loc_105A2
00010D8C 08F2 0000 0002             		bset	#0,2(a2,d0.w)
00010D92 60C6                       		bra.s	loc_105A2
00010D94                            ; ===========================================================================
00010D94                            
00010D94                            Obj56_Type0D:				; XREF: Obj56_TypeIndex
00010D94 4A28 0038                  		tst.b	$38(a0)
00010D98 6600                       		bne.s	loc_105F8
00010D9A 45F8 F7E0                  		lea	($FFFFF7E0).w,a2
00010D9E 7000                       		moveq	#0,d0
00010DA0 1028 003C                  		move.b	$3C(a0),d0
00010DA4 4A32 0000                  		tst.b	(a2,d0.w)
00010DA8 6A00                       		bpl.s	loc_10606
00010DAA 117C 0001 0038             		move.b	#1,$38(a0)
00010DB0                            
00010DB0                            loc_105F8:
00010DB0 303C 0080                  		move.w	#$80,d0
00010DB4 B068 003A                  		cmp.w	$3A(a0),d0
00010DB8 6700                       		beq.s	loc_10624
00010DBA 5468 003A                  		addq.w	#2,$3A(a0)
00010DBE                            
00010DBE                            loc_10606:
00010DBE 3028 003A                  		move.w	$3A(a0),d0
00010DC2 0828 0000 0022             		btst	#0,$22(a0)
00010DC8 6700                       		beq.s	loc_10618
00010DCA 4440                       		neg.w	d0
00010DCC 0640 0080                  		addi.w	#$80,d0
00010DD0                            
00010DD0                            loc_10618:
00010DD0 3228 0034                  		move.w	$34(a0),d1
00010DD4 D240                       		add.w	d0,d1
00010DD6 3141 0008                  		move.w	d1,8(a0)
00010DDA 4E75                       		rts	
00010DDC                            ; ===========================================================================
00010DDC                            
00010DDC                            loc_10624:
00010DDC 5328 0028                  		subq.b	#1,$28(a0)
00010DE0 4228 0038                  		clr.b	$38(a0)
00010DE4 45F8 FC00                  		lea	($FFFFFC00).w,a2
00010DE8 7000                       		moveq	#0,d0
00010DEA 1028 0023                  		move.b	$23(a0),d0
00010DEE 67CE                       		beq.s	loc_10606
00010DF0 08B2 0000 0002             		bclr	#0,2(a2,d0.w)
00010DF6 60C6                       		bra.s	loc_10606
00010DF8                            ; ===========================================================================
00010DF8                            
00010DF8                            Obj56_Type08:				; XREF: Obj56_TypeIndex
00010DF8 323C 0010                  		move.w	#$10,d1
00010DFC 7000                       		moveq	#0,d0
00010DFE 1038 FE88                  		move.b	($FFFFFE88).w,d0
00010E02 E248                       		lsr.w	#1,d0
00010E04 3638 FE8A                  		move.w	($FFFFFE8A).w,d3
00010E08 6000                       		bra.s	Obj56_Move_Sqr
00010E0A                            ; ===========================================================================
00010E0A                            
00010E0A                            Obj56_Type09:				; XREF: Obj56_TypeIndex
00010E0A 323C 0030                  		move.w	#$30,d1
00010E0E 7000                       		moveq	#0,d0
00010E10 1038 FE8C                  		move.b	($FFFFFE8C).w,d0
00010E14 3638 FE8E                  		move.w	($FFFFFE8E).w,d3
00010E18 6000                       		bra.s	Obj56_Move_Sqr
00010E1A                            ; ===========================================================================
00010E1A                            
00010E1A                            Obj56_Type0A:				; XREF: Obj56_TypeIndex
00010E1A 323C 0050                  		move.w	#$50,d1
00010E1E 7000                       		moveq	#0,d0
00010E20 1038 FE90                  		move.b	($FFFFFE90).w,d0
00010E24 3638 FE92                  		move.w	($FFFFFE92).w,d3
00010E28 6000                       		bra.s	Obj56_Move_Sqr
00010E2A                            ; ===========================================================================
00010E2A                            
00010E2A                            Obj56_Type0B:				; XREF: Obj56_TypeIndex
00010E2A 323C 0070                  		move.w	#$70,d1
00010E2E 7000                       		moveq	#0,d0
00010E30 1038 FE94                  		move.b	($FFFFFE94).w,d0
00010E34 3638 FE96                  		move.w	($FFFFFE96).w,d3
00010E38                            
00010E38                            Obj56_Move_Sqr:
00010E38 4A43                       		tst.w	d3
00010E3A 6600                       		bne.s	loc_1068E
00010E3C 5228 0022                  		addq.b	#1,$22(a0)
00010E40 0228 0003 0022             		andi.b	#3,$22(a0)
00010E46                            
00010E46                            loc_1068E:
00010E46 1428 0022                  		move.b	$22(a0),d2
00010E4A 0202 0003                  		andi.b	#3,d2
00010E4E 6600                       		bne.s	loc_106AE
00010E50 9041                       		sub.w	d1,d0
00010E52 D068 0034                  		add.w	$34(a0),d0
00010E56 3140 0008                  		move.w	d0,8(a0)
00010E5A 4441                       		neg.w	d1
00010E5C D268 0030                  		add.w	$30(a0),d1
00010E60 3141 000C                  		move.w	d1,$C(a0)
00010E64 4E75                       		rts	
00010E66                            ; ===========================================================================
00010E66                            
00010E66                            loc_106AE:
00010E66 5302                       		subq.b	#1,d2
00010E68 6600                       		bne.s	loc_106CC
00010E6A 5341                       		subq.w	#1,d1
00010E6C 9041                       		sub.w	d1,d0
00010E6E 4440                       		neg.w	d0
00010E70 D068 0030                  		add.w	$30(a0),d0
00010E74 3140 000C                  		move.w	d0,$C(a0)
00010E78 5241                       		addq.w	#1,d1
00010E7A D268 0034                  		add.w	$34(a0),d1
00010E7E 3141 0008                  		move.w	d1,8(a0)
00010E82 4E75                       		rts	
00010E84                            ; ===========================================================================
00010E84                            
00010E84                            loc_106CC:
00010E84 5302                       		subq.b	#1,d2
00010E86 6600                       		bne.s	loc_106EA
00010E88 5341                       		subq.w	#1,d1
00010E8A 9041                       		sub.w	d1,d0
00010E8C 4440                       		neg.w	d0
00010E8E D068 0034                  		add.w	$34(a0),d0
00010E92 3140 0008                  		move.w	d0,8(a0)
00010E96 5241                       		addq.w	#1,d1
00010E98 D268 0030                  		add.w	$30(a0),d1
00010E9C 3141 000C                  		move.w	d1,$C(a0)
00010EA0 4E75                       		rts	
00010EA2                            ; ===========================================================================
00010EA2                            
00010EA2                            loc_106EA:
00010EA2 9041                       		sub.w	d1,d0
00010EA4 D068 0030                  		add.w	$30(a0),d0
00010EA8 3140 000C                  		move.w	d0,$C(a0)
00010EAC 4441                       		neg.w	d1
00010EAE D268 0034                  		add.w	$34(a0),d1
00010EB2 3141 0008                  		move.w	d1,8(a0)
00010EB6 4E75                       		rts	
00010EB8                            ; ===========================================================================
00010EB8                            ; ---------------------------------------------------------------------------
00010EB8                            ; Sprite mappings - moving blocks (SYZ/SLZ/LZ)
00010EB8                            ; ---------------------------------------------------------------------------
00010EB8                            Map_obj56:
00010EB8                            	include "_maps\obj56.asm"
00010EB8                            ; ---------------------------------------------------------------------------
00010EB8                            ; Sprite mappings - moving blocks (SYZ/SLZ/LZ)
00010EB8                            ; ---------------------------------------------------------------------------
00010EB8 0000 0000                  		dc.w byte_10710-Map_obj56, byte_10716-Map_obj56
00010EBC 0000 0000                  		dc.w byte_1072B-Map_obj56, byte_10736-Map_obj56
00010EC0 0000 0000                  		dc.w byte_1074B-Map_obj56, byte_1075B-Map_obj56
00010EC4 0000 0000                  		dc.w byte_10761-Map_obj56, byte_1076C-Map_obj56
00010EC8 01                         byte_10710:	dc.b 1
00010EC9 F00F 0061 F0               		dc.b $F0, $F, 0, $61, $F0
00010ECE 04                         byte_10716:	dc.b 4
00010ECF E00F 0061 E0               		dc.b $E0, $F, 0, $61, $E0
00010ED4 E00F 0061 00               		dc.b $E0, $F, 0, $61, 0
00010ED9 000F 0061 E0               		dc.b 0,	$F, 0, $61, $E0
00010EDE 000F 0061 00               		dc.b 0,	$F, 0, $61, 0
00010EE3 02                         byte_1072B:	dc.b 2
00010EE4 E00F 0061 F0               		dc.b $E0, $F, 0, $61, $F0
00010EE9 000F 0061 F0               		dc.b 0,	$F, 0, $61, $F0
00010EEE 04                         byte_10736:	dc.b 4
00010EEF E60F 0081 E0               		dc.b $E6, $F, 0, $81, $E0
00010EF4 E60F 0081 00               		dc.b $E6, $F, 0, $81, 0
00010EF9 000F 0081 E0               		dc.b 0,	$F, 0, $81, $E0
00010EFE 000F 0081 00               		dc.b 0,	$F, 0, $81, 0
00010F03 03                         byte_1074B:	dc.b 3
00010F04 D90F 0081 F0               		dc.b $D9, $F, 0, $81, $F0
00010F09 F30F 0081 F0               		dc.b $F3, $F, 0, $81, $F0
00010F0E 0D0F 0081 F0               		dc.b $D, $F, 0,	$81, $F0
00010F13 01                         byte_1075B:	dc.b 1
00010F14 F00F 0021 F0               		dc.b $F0, $F, 0, $21, $F0
00010F19 02                         byte_10761:	dc.b 2
00010F1A E007 0000 F8               		dc.b $E0, 7, 0,	0, $F8
00010F1F 0007 1000 F8               		dc.b 0,	7, $10,	0, $F8
00010F24 04                         byte_1076C:	dc.b 4
00010F25 F00F 0022 C0               		dc.b $F0, $F, 0, $22, $C0
00010F2A F00F 0022 E0               		dc.b $F0, $F, 0, $22, $E0
00010F2F F00F 0022 00               		dc.b $F0, $F, 0, $22, 0
00010F34 F00F 0022 20               		dc.b $F0, $F, 0, $22, $20
00010F3A 00                         		even
00010F3A 00                         		even
00010F3A                            
00010F3A                            ; ===========================================================================
00010F3A                            ; ---------------------------------------------------------------------------
00010F3A                            ; Object 57 - spiked balls (SYZ, LZ)
00010F3A                            ; ---------------------------------------------------------------------------
00010F3A                            
00010F3A                            Obj57:					; XREF: Obj_Index
00010F3A 7000                       		moveq	#0,d0
00010F3C 1028 0024                  		move.b	$24(a0),d0
00010F40 323B 0000                  		move.w	Obj57_Index(pc,d0.w),d1
00010F44 4EFB 1000                  		jmp	Obj57_Index(pc,d1.w)
00010F48                            ; ===========================================================================
00010F48 0000                       Obj57_Index:	dc.w Obj57_Main-Obj57_Index
00010F4A 0000                       		dc.w Obj57_Move-Obj57_Index
00010F4C 0000                       		dc.w Obj57_Display-Obj57_Index
00010F4E                            ; ===========================================================================
00010F4E                            
00010F4E                            Obj57_Main:				; XREF: Obj57_Index
00010F4E 5428 0024                  		addq.b	#2,$24(a0)
00010F52 217C 0000 0000 0004        		move.l	#Map_obj57,4(a0)
00010F5A 317C 03BA 0002             		move.w	#$3BA,2(a0)
00010F60 117C 0004 0001             		move.b	#4,1(a0)
00010F66 117C 0004 0018             		move.b	#4,$18(a0)
00010F6C 117C 0008 0019             		move.b	#8,$19(a0)
00010F72 3168 0008 003A             		move.w	8(a0),$3A(a0)
00010F78 3168 000C 0038             		move.w	$C(a0),$38(a0)
00010F7E 117C 0098 0020             		move.b	#$98,$20(a0)	; SYZ specific code (chain hurts Sonic)
00010F84 0C38 0001 FE10             		cmpi.b	#1,($FFFFFE10).w ; check if level is LZ
00010F8A 6600                       		bne.s	loc_107E8
00010F8C 117C 0000 0020             		move.b	#0,$20(a0)	; LZ specific code (chain doesn't hurt)
00010F92 317C 0310 0002             		move.w	#$310,2(a0)
00010F98 217C 0000 0000 0004        		move.l	#Map_obj57a,4(a0)
00010FA0                            
00010FA0                            loc_107E8:
00010FA0 1228 0028                  		move.b	$28(a0),d1	; get object type
00010FA4 0201 00F0                  		andi.b	#$F0,d1		; read only the	1st digit
00010FA8 4881                       		ext.w	d1
00010FAA E741                       		asl.w	#3,d1		; multiply by 8
00010FAC 3141 003E                  		move.w	d1,$3E(a0)	; set object twirl speed
00010FB0 1028 0022                  		move.b	$22(a0),d0
00010FB4 E418                       		ror.b	#2,d0
00010FB6 0200 00C0                  		andi.b	#-$40,d0
00010FBA 1140 0026                  		move.b	d0,$26(a0)
00010FBE 45E8 0029                  		lea	$29(a0),a2
00010FC2 1228 0028                  		move.b	$28(a0),d1	; get object type
00010FC6 0241 0007                  		andi.w	#7,d1		; read only the	2nd digit
00010FCA 14FC 0000                  		move.b	#0,(a2)+
00010FCE 3601                       		move.w	d1,d3
00010FD0 E94B                       		lsl.w	#4,d3
00010FD2 1143 003C                  		move.b	d3,$3C(a0)
00010FD6 5341                       		subq.w	#1,d1		; set chain length (type-1)
00010FD8 6500                       		bcs.s	loc_10894
00010FDA 0828 0003 0028             		btst	#3,$28(a0)
00010FE0 6700                       		beq.s	Obj57_MakeChain
00010FE2 5341                       		subq.w	#1,d1
00010FE4 6500                       		bcs.s	loc_10894
00010FE6                            
00010FE6                            Obj57_MakeChain:
00010FE6 6100 D266                  		bsr.w	SingleObjLoad
00010FEA 6600                       		bne.s	loc_10894
00010FEC 5228 0029                  		addq.b	#1,$29(a0)
00010FF0 3A09                       		move.w	a1,d5
00010FF2 0445 D000                  		subi.w	#-$3000,d5
00010FF6 EC4D                       		lsr.w	#6,d5
00010FF8 0245 007F                  		andi.w	#$7F,d5
00010FFC 14C5                       		move.b	d5,(a2)+
00010FFE 137C 0004 0024             		move.b	#4,$24(a1)
00011004 1290                       		move.b	0(a0),0(a1)
00011006 2368 0004 0004             		move.l	4(a0),4(a1)
0001100C 3368 0002 0002             		move.w	2(a0),2(a1)
00011012 1368 0001 0001             		move.b	1(a0),1(a1)
00011018 1368 0018 0018             		move.b	$18(a0),$18(a1)
0001101E 1368 0019 0019             		move.b	$19(a0),$19(a1)
00011024 1368 0020 0020             		move.b	$20(a0),$20(a1)
0001102A 0403 0010                  		subi.b	#$10,d3
0001102E 1343 003C                  		move.b	d3,$3C(a1)
00011032 0C38 0001 FE10             		cmpi.b	#1,($FFFFFE10).w
00011038 6600                       		bne.s	loc_10890
0001103A 4A03                       		tst.b	d3
0001103C 6600                       		bne.s	loc_10890
0001103E 137C 0002 001A             		move.b	#2,$1A(a1)
00011044                            
00011044                            loc_10890:
00011044 51C9 FFA0                  		dbf	d1,Obj57_MakeChain ; repeat for	length of chain
00011048                            
00011048                            loc_10894:
00011048 3A08                       		move.w	a0,d5
0001104A 0445 D000                  		subi.w	#-$3000,d5
0001104E EC4D                       		lsr.w	#6,d5
00011050 0245 007F                  		andi.w	#$7F,d5
00011054 14C5                       		move.b	d5,(a2)+
00011056 0C38 0001 FE10             		cmpi.b	#1,($FFFFFE10).w ; check if level is LZ
0001105C 6600                       		bne.s	Obj57_Move
0001105E 117C 008B 0020             		move.b	#$8B,$20(a0)	; if yes, make last spikeball larger
00011064 117C 0001 001A             		move.b	#1,$1A(a0)	; use different	frame
0001106A                            
0001106A                            Obj57_Move:				; XREF: Obj57_Index
0001106A 6100 0000                  		bsr.w	Obj57_MoveSub
0001106E 6000 0000                  		bra.w	Obj57_ChkDel
00011072                            ; ===========================================================================
00011072                            
00011072                            Obj57_MoveSub:				; XREF: Obj57_Move
00011072 3028 003E                  		move.w	$3E(a0),d0
00011076 D168 0026                  		add.w	d0,$26(a0)
0001107A 1028 0026                  		move.b	$26(a0),d0
0001107E 4EB9 0000 2CAC             		jsr	(CalcSine).l
00011084 3428 0038                  		move.w	$38(a0),d2
00011088 3628 003A                  		move.w	$3A(a0),d3
0001108C 45E8 0029                  		lea	$29(a0),a2
00011090 7C00                       		moveq	#0,d6
00011092 1C1A                       		move.b	(a2)+,d6
00011094                            
00011094                            Obj57_MoveLoop:
00011094 7800                       		moveq	#0,d4
00011096 181A                       		move.b	(a2)+,d4
00011098 ED4C                       		lsl.w	#6,d4
0001109A 0684 00FF D000             		addi.l	#$FFD000,d4
000110A0 2244                       		movea.l	d4,a1
000110A2 7800                       		moveq	#0,d4
000110A4 1829 003C                  		move.b	$3C(a1),d4
000110A8 2A04                       		move.l	d4,d5
000110AA C9C0                       		muls.w	d0,d4
000110AC E084                       		asr.l	#8,d4
000110AE CBC1                       		muls.w	d1,d5
000110B0 E085                       		asr.l	#8,d5
000110B2 D842                       		add.w	d2,d4
000110B4 DA43                       		add.w	d3,d5
000110B6 3344 000C                  		move.w	d4,$C(a1)
000110BA 3345 0008                  		move.w	d5,8(a1)
000110BE 51CE FFD4                  		dbf	d6,Obj57_MoveLoop
000110C2 4E75                       		rts	
000110C4                            ; ===========================================================================
000110C4                            
000110C4                            Obj57_ChkDel:				; XREF: Obj57_Move
000110C4 3028 003A                  		move.w	$3A(a0),d0
000110C8 0240 FF80                  		andi.w	#$FF80,d0
000110CC 3238 F700                  		move.w	($FFFFF700).w,d1
000110D0 0441 0080                  		subi.w	#$80,d1
000110D4 0241 FF80                  		andi.w	#$FF80,d1
000110D8 9041                       		sub.w	d1,d0
000110DA 0C40 0280                  		cmpi.w	#$280,d0
000110DE 6200 0000                  		bhi.w	Obj57_Delete
000110E2 6000 CCE4                  		bra.w	DisplaySprite
000110E6                            ; ===========================================================================
000110E6                            
000110E6                            Obj57_Delete:				; XREF: Obj57_ChkDel
000110E6 7400                       		moveq	#0,d2
000110E8 45E8 0029                  		lea	$29(a0),a2
000110EC 141A                       		move.b	(a2)+,d2
000110EE                            
000110EE                            Obj57_DelLoop:
000110EE 7000                       		moveq	#0,d0
000110F0 101A                       		move.b	(a2)+,d0
000110F2 ED48                       		lsl.w	#6,d0
000110F4 0680 00FF D000             		addi.l	#$FFD000,d0
000110FA 2240                       		movea.l	d0,a1
000110FC 6100 CD08                  		bsr.w	DeleteObject2
00011100 51CA FFEC                  		dbf	d2,Obj57_DelLoop ; delete all pieces of	chain
00011104                            
00011104 4E75                       		rts	
00011106                            ; ===========================================================================
00011106                            
00011106                            Obj57_Display:				; XREF: Obj57_Index
00011106 6000 CCC0                  		bra.w	DisplaySprite
0001110A                            ; ===========================================================================
0001110A                            ; ---------------------------------------------------------------------------
0001110A                            ; Sprite mappings - chain of spiked balls (SYZ)
0001110A                            ; ---------------------------------------------------------------------------
0001110A                            Map_obj57:
0001110A                            	include "_maps\obj57syz.asm"
0001110A                            ; ---------------------------------------------------------------------------
0001110A                            ; Sprite mappings - chain of spiked balls (SYZ)
0001110A                            ; ---------------------------------------------------------------------------
0001110A 0000                       		dc.w byte_10958-Map_obj57
0001110C 01                         byte_10958:	dc.b 1
0001110D F805 0000 F8               		dc.b $F8, 5, 0,	0, $F8
00011112                            		even
00011112                            		even
00011112                            
00011112                            ; ---------------------------------------------------------------------------
00011112                            ; Sprite mappings - spiked ball	on a chain (LZ)
00011112                            ; ---------------------------------------------------------------------------
00011112                            Map_obj57a:
00011112                            	include "_maps\obj57lz.asm"
00011112                            ; ---------------------------------------------------------------------------
00011112                            ; Sprite mappings - spiked ball	on a chain (LZ)
00011112                            ; ---------------------------------------------------------------------------
00011112 0000                       		dc.w byte_10964-Map_obj57a
00011114 0000                       		dc.w byte_1096A-Map_obj57a
00011116 0000                       		dc.w byte_10970-Map_obj57a
00011118 01                         byte_10964:	dc.b 1
00011119 F805 0000 F8               		dc.b $F8, 5, 0,	0, $F8
0001111E 01                         byte_1096A:	dc.b 1
0001111F F00F 0004 F0               		dc.b $F0, $F, 0, 4, $F0
00011124 01                         byte_10970:	dc.b 1
00011125 F805 0014 F8               		dc.b $F8, 5, 0,	$14, $F8
0001112A                            		even
0001112A                            		even
0001112A                            
0001112A                            ; ===========================================================================
0001112A                            ; ---------------------------------------------------------------------------
0001112A                            ; Object 58 - giant spiked balls (SYZ)
0001112A                            ; ---------------------------------------------------------------------------
0001112A                            
0001112A                            Obj58:					; XREF: Obj_Index
0001112A 7000                       		moveq	#0,d0
0001112C 1028 0024                  		move.b	$24(a0),d0
00011130 323B 0000                  		move.w	Obj58_Index(pc,d0.w),d1
00011134 4EFB 1000                  		jmp	Obj58_Index(pc,d1.w)
00011138                            ; ===========================================================================
00011138 0000                       Obj58_Index:	dc.w Obj58_Main-Obj58_Index
0001113A 0000                       		dc.w Obj58_Move-Obj58_Index
0001113C                            ; ===========================================================================
0001113C                            
0001113C                            Obj58_Main:				; XREF: Obj58_Index
0001113C 5428 0024                  		addq.b	#2,$24(a0)
00011140 217C 0000 0000 0004        		move.l	#Map_obj15b,4(a0)
00011148 317C 0396 0002             		move.w	#$396,2(a0)
0001114E 117C 0004 0001             		move.b	#4,1(a0)
00011154 117C 0004 0018             		move.b	#4,$18(a0)
0001115A 117C 0018 0019             		move.b	#$18,$19(a0)
00011160 3168 0008 003A             		move.w	8(a0),$3A(a0)
00011166 3168 000C 0038             		move.w	$C(a0),$38(a0)
0001116C 117C 0086 0020             		move.b	#$86,$20(a0)
00011172 1228 0028                  		move.b	$28(a0),d1	; get object type
00011176 0201 00F0                  		andi.b	#$F0,d1		; read only the	1st digit
0001117A 4881                       		ext.w	d1
0001117C E741                       		asl.w	#3,d1		; multiply by 8
0001117E 3141 003E                  		move.w	d1,$3E(a0)	; set object speed
00011182 1028 0022                  		move.b	$22(a0),d0
00011186 E418                       		ror.b	#2,d0
00011188 0200 00C0                  		andi.b	#$C0,d0
0001118C 1140 0026                  		move.b	d0,$26(a0)
00011190 117C 0050 003C             		move.b	#$50,$3C(a0)	; set diameter of circle of rotation
00011196                            
00011196                            Obj58_Move:				; XREF: Obj58_Index
00011196 7000                       		moveq	#0,d0
00011198 1028 0028                  		move.b	$28(a0),d0	; get object type
0001119C 0240 0007                  		andi.w	#7,d0		; read only the	2nd digit
000111A0 D040                       		add.w	d0,d0
000111A2 323B 0000                  		move.w	Obj58_TypeIndex(pc,d0.w),d1
000111A6 4EBB 1000                  		jsr	Obj58_TypeIndex(pc,d1.w)
000111AA 3028 003A                  		move.w	$3A(a0),d0
000111AE 0240 FF80                  		andi.w	#$FF80,d0
000111B2 3238 F700                  		move.w	($FFFFF700).w,d1
000111B6 0441 0080                  		subi.w	#$80,d1
000111BA 0241 FF80                  		andi.w	#$FF80,d1
000111BE 9041                       		sub.w	d1,d0
000111C0 0C40 0280                  		cmpi.w	#$280,d0
000111C4 6200 CC3E                  		bhi.w	DeleteObject
000111C8 6000 CBFE                  		bra.w	DisplaySprite
000111CC                            ; ===========================================================================
000111CC 0000                       Obj58_TypeIndex:dc.w Obj58_Type00-Obj58_TypeIndex
000111CE 0000                       		dc.w Obj58_Type01-Obj58_TypeIndex
000111D0 0000                       		dc.w Obj58_Type02-Obj58_TypeIndex
000111D2 0000                       		dc.w Obj58_Type03-Obj58_TypeIndex
000111D4                            ; ===========================================================================
000111D4                            
000111D4                            Obj58_Type00:				; XREF: Obj58_TypeIndex
000111D4 4E75                       		rts	
000111D6                            ; ===========================================================================
000111D6                            
000111D6                            Obj58_Type01:				; XREF: Obj58_TypeIndex
000111D6 323C 0060                  		move.w	#$60,d1
000111DA 7000                       		moveq	#0,d0
000111DC 1038 FE6C                  		move.b	($FFFFFE6C).w,d0
000111E0 0828 0000 0022             		btst	#0,$22(a0)
000111E6 6700                       		beq.s	loc_10A38
000111E8 4440                       		neg.w	d0
000111EA D041                       		add.w	d1,d0
000111EC                            
000111EC                            loc_10A38:
000111EC 3228 003A                  		move.w	$3A(a0),d1
000111F0 9240                       		sub.w	d0,d1
000111F2 3141 0008                  		move.w	d1,8(a0)	; move object horizontally
000111F6 4E75                       		rts	
000111F8                            ; ===========================================================================
000111F8                            
000111F8                            Obj58_Type02:				; XREF: Obj58_TypeIndex
000111F8 323C 0060                  		move.w	#$60,d1
000111FC 7000                       		moveq	#0,d0
000111FE 1038 FE6C                  		move.b	($FFFFFE6C).w,d0
00011202 0828 0000 0022             		btst	#0,$22(a0)
00011208 6700                       		beq.s	loc_10A5C
0001120A 4440                       		neg.w	d0
0001120C 0640 0080                  		addi.w	#$80,d0
00011210                            
00011210                            loc_10A5C:
00011210 3228 0038                  		move.w	$38(a0),d1
00011214 9240                       		sub.w	d0,d1
00011216 3141 000C                  		move.w	d1,$C(a0)	; move object vertically
0001121A 4E75                       		rts	
0001121C                            ; ===========================================================================
0001121C                            
0001121C                            Obj58_Type03:				; XREF: Obj58_TypeIndex
0001121C 3028 003E                  		move.w	$3E(a0),d0
00011220 D168 0026                  		add.w	d0,$26(a0)
00011224 1028 0026                  		move.b	$26(a0),d0
00011228 4EB9 0000 2CAC             		jsr	(CalcSine).l
0001122E 3428 0038                  		move.w	$38(a0),d2
00011232 3628 003A                  		move.w	$3A(a0),d3
00011236 7800                       		moveq	#0,d4
00011238 1828 003C                  		move.b	$3C(a0),d4
0001123C 2A04                       		move.l	d4,d5
0001123E C9C0                       		muls.w	d0,d4
00011240 E084                       		asr.l	#8,d4
00011242 CBC1                       		muls.w	d1,d5
00011244 E085                       		asr.l	#8,d5
00011246 D842                       		add.w	d2,d4
00011248 DA43                       		add.w	d3,d5
0001124A 3144 000C                  		move.w	d4,$C(a0)
0001124E 3145 0008                  		move.w	d5,8(a0)
00011252 4E75                       		rts	
00011254                            ; ===========================================================================
00011254                            ; ---------------------------------------------------------------------------
00011254                            ; Sprite mappings - SBZ	spiked ball on a chain
00011254                            ; ---------------------------------------------------------------------------
00011254                            Map_obj15b:
00011254                            	include "_maps\obj15sbz.asm"
00011254                            ; ---------------------------------------------------------------------------
00011254                            ; Sprite mappings - spiked ball on a chain (SBZ)
00011254                            ; ---------------------------------------------------------------------------
00011254 0000 0000                  		dc.w byte_10AA6-Map_obj15b, byte_10AC0-Map_obj15b
00011258 0000                       		dc.w byte_10AC6-Map_obj15b
0001125A 05                         byte_10AA6:	dc.b 5
0001125B E804 0000 F8               		dc.b $E8, 4, 0,	0, $F8
00011260 F00F 0002 F0               		dc.b $F0, $F, 0, 2, $F0
00011265 F801 0012 E8               		dc.b $F8, 1, 0,	$12, $E8
0001126A F801 0014 10               		dc.b $F8, 1, 0,	$14, $10
0001126F 1004 0016 F8               		dc.b $10, 4, 0,	$16, $F8
00011274 01                         byte_10AC0:	dc.b 1
00011275 F805 0020 F8               		dc.b $F8, 5, 0,	$20, $F8
0001127A 02                         byte_10AC6:	dc.b 2
0001127B F80D 0018 F0               		dc.b $F8, $D, 0, $18, $F0
00011280 E80D 1018 F0               		dc.b $E8, $D, $10, $18,	$F0
00011286 00                         		even
00011286 00                         		even
00011286                            
00011286                            ; ===========================================================================
00011286                            ; ---------------------------------------------------------------------------
00011286                            ; Object 59 - platforms	that move when you stand on them (SLZ)
00011286                            ; ---------------------------------------------------------------------------
00011286                            
00011286                            Obj59:					; XREF: Obj_Index
00011286 7000                       		moveq	#0,d0
00011288 1028 0024                  		move.b	$24(a0),d0
0001128C 323B 0000                  		move.w	Obj59_Index(pc,d0.w),d1
00011290 4EBB 1000                  		jsr	Obj59_Index(pc,d1.w)
00011294 3028 0032                  		move.w	$32(a0),d0
00011298 0240 FF80                  		andi.w	#$FF80,d0
0001129C 3238 F700                  		move.w	($FFFFF700).w,d1
000112A0 0441 0080                  		subi.w	#$80,d1
000112A4 0241 FF80                  		andi.w	#$FF80,d1
000112A8 9041                       		sub.w	d1,d0
000112AA 0C40 0280                  		cmpi.w	#$280,d0
000112AE 6200 CB54                  		bhi.w	DeleteObject
000112B2 6000 CB14                  		bra.w	DisplaySprite
000112B6                            ; ===========================================================================
000112B6 0000                       Obj59_Index:	dc.w Obj59_Main-Obj59_Index
000112B8 0000                       		dc.w Obj59_Platform-Obj59_Index
000112BA 0000                       		dc.w Obj59_Action-Obj59_Index
000112BC 0000                       		dc.w Obj59_MakeMulti-Obj59_Index
000112BE                            
000112BE 2800                       Obj59_Var1:	dc.b $28, 0		; width, frame number
000112C0                            
000112C0 1001                       Obj59_Var2:	dc.b $10, 1		; width, action	type
000112C2 2001                       		dc.b $20, 1
000112C4 3401                       		dc.b $34, 1
000112C6 1003                       		dc.b $10, 3
000112C8 2003                       		dc.b $20, 3
000112CA 3403                       		dc.b $34, 3
000112CC 1401                       		dc.b $14, 1
000112CE 2401                       		dc.b $24, 1
000112D0 2C01                       		dc.b $2C, 1
000112D2 1403                       		dc.b $14, 3
000112D4 2403                       		dc.b $24, 3
000112D6 2C03                       		dc.b $2C, 3
000112D8 2005                       		dc.b $20, 5
000112DA 2007                       		dc.b $20, 7
000112DC 3009                       		dc.b $30, 9
000112DE                            ; ===========================================================================
000112DE                            
000112DE                            Obj59_Main:				; XREF: Obj59_Index
000112DE 5428 0024                  		addq.b	#2,$24(a0)
000112E2 7000                       		moveq	#0,d0
000112E4 1028 0028                  		move.b	$28(a0),d0
000112E8 6A00                       		bpl.s	Obj59_Main2
000112EA 5828 0024                  		addq.b	#4,$24(a0)
000112EE 0240 007F                  		andi.w	#$7F,d0
000112F2 C0FC 0006                  		mulu.w	#6,d0
000112F6 3140 003C                  		move.w	d0,$3C(a0)
000112FA 3140 003E                  		move.w	d0,$3E(a0)
000112FE 588F                       		addq.l	#4,sp
00011300 4E75                       		rts	
00011302                            ; ===========================================================================
00011302                            
00011302                            Obj59_Main2:
00011302 E648                       		lsr.w	#3,d0
00011304 0240 001E                  		andi.w	#$1E,d0
00011308 45FB 00B4                  		lea	Obj59_Var1(pc,d0.w),a2
0001130C 115A 0019                  		move.b	(a2)+,$19(a0)
00011310 115A 001A                  		move.b	(a2)+,$1A(a0)
00011314 7000                       		moveq	#0,d0
00011316 1028 0028                  		move.b	$28(a0),d0
0001131A D040                       		add.w	d0,d0
0001131C 0240 001E                  		andi.w	#$1E,d0
00011320 45FB 009E                  		lea	Obj59_Var2(pc,d0.w),a2
00011324 101A                       		move.b	(a2)+,d0
00011326 E548                       		lsl.w	#2,d0
00011328 3140 003C                  		move.w	d0,$3C(a0)
0001132C 115A 0028                  		move.b	(a2)+,$28(a0)
00011330 217C 0000 0000 0004        		move.l	#Map_obj59,4(a0)
00011338 317C 4000 0002             		move.w	#$4000,2(a0)
0001133E 117C 0004 0001             		move.b	#4,1(a0)
00011344 117C 0004 0018             		move.b	#4,$18(a0)
0001134A 3168 0008 0032             		move.w	8(a0),$32(a0)
00011350 3168 000C 0030             		move.w	$C(a0),$30(a0)
00011356                            
00011356                            Obj59_Platform:				; XREF: Obj59_Index
00011356 7200                       		moveq	#0,d1
00011358 1228 0019                  		move.b	$19(a0),d1
0001135C 4EB9 0000 7A48             		jsr	(PlatformObject).l
00011362 6000 0000                  		bra.w	Obj59_Types
00011366                            ; ===========================================================================
00011366                            
00011366                            Obj59_Action:				; XREF: Obj59_Index
00011366 7200                       		moveq	#0,d1
00011368 1228 0019                  		move.b	$19(a0),d1
0001136C 4EB9 0000 7BBC             		jsr	(ExitPlatform).l
00011372 3F28 0008                  		move.w	8(a0),-(sp)
00011376 6100 0000                  		bsr.w	Obj59_Types
0001137A 341F                       		move.w	(sp)+,d2
0001137C 4A10                       		tst.b	0(a0)
0001137E 6700                       		beq.s	locret_10BD4
00011380 4EF9 0000 8126             		jmp	(MvSonicOnPtfm2).l
00011386                            ; ===========================================================================
00011386                            
00011386                            locret_10BD4:
00011386 4E75                       		rts	
00011388                            ; ===========================================================================
00011388                            
00011388                            Obj59_Types:
00011388 7000                       		moveq	#0,d0
0001138A 1028 0028                  		move.b	$28(a0),d0
0001138E 0240 000F                  		andi.w	#$F,d0
00011392 D040                       		add.w	d0,d0
00011394 323B 0000                  		move.w	Obj59_TypeIndex(pc,d0.w),d1
00011398 4EFB 1000                  		jmp	Obj59_TypeIndex(pc,d1.w)
0001139C                            ; ===========================================================================
0001139C 0000 0000                  Obj59_TypeIndex:dc.w Obj59_Type00-Obj59_TypeIndex, Obj59_Type01-Obj59_TypeIndex
000113A0 0000 0000                  		dc.w Obj59_Type02-Obj59_TypeIndex, Obj59_Type01-Obj59_TypeIndex
000113A4 0000 0000                  		dc.w Obj59_Type04-Obj59_TypeIndex, Obj59_Type01-Obj59_TypeIndex
000113A8 0000 0000                  		dc.w Obj59_Type06-Obj59_TypeIndex, Obj59_Type01-Obj59_TypeIndex
000113AC 0000 0000                  		dc.w Obj59_Type08-Obj59_TypeIndex, Obj59_Type09-Obj59_TypeIndex
000113B0                            ; ===========================================================================
000113B0                            
000113B0                            Obj59_Type00:				; XREF: Obj59_TypeIndex
000113B0 4E75                       		rts	
000113B2                            ; ===========================================================================
000113B2                            
000113B2                            Obj59_Type01:				; XREF: Obj59_TypeIndex
000113B2 0C28 0004 0024             		cmpi.b	#4,$24(a0)	; check	if Sonic is standing on	the object
000113B8 6600                       		bne.s	locret_10C0C
000113BA 5228 0028                  		addq.b	#1,$28(a0)	; if yes, add 1	to type
000113BE                            
000113BE                            locret_10C0C:
000113BE 4E75                       		rts	
000113C0                            ; ===========================================================================
000113C0                            
000113C0                            Obj59_Type02:				; XREF: Obj59_TypeIndex
000113C0 6100 0000                  		bsr.w	Obj59_Move
000113C4 3028 0034                  		move.w	$34(a0),d0
000113C8 4440                       		neg.w	d0
000113CA D068 0030                  		add.w	$30(a0),d0
000113CE 3140 000C                  		move.w	d0,$C(a0)
000113D2 4E75                       		rts	
000113D4                            ; ===========================================================================
000113D4                            
000113D4                            Obj59_Type04:				; XREF: Obj59_TypeIndex
000113D4 6100 0000                  		bsr.w	Obj59_Move
000113D8 3028 0034                  		move.w	$34(a0),d0
000113DC D068 0030                  		add.w	$30(a0),d0
000113E0 3140 000C                  		move.w	d0,$C(a0)
000113E4 4E75                       		rts	
000113E6                            ; ===========================================================================
000113E6                            
000113E6                            Obj59_Type06:				; XREF: Obj59_TypeIndex
000113E6 6100 0000                  		bsr.w	Obj59_Move
000113EA 3028 0034                  		move.w	$34(a0),d0
000113EE E240                       		asr.w	#1,d0
000113F0 4440                       		neg.w	d0
000113F2 D068 0030                  		add.w	$30(a0),d0
000113F6 3140 000C                  		move.w	d0,$C(a0)
000113FA 3028 0034                  		move.w	$34(a0),d0
000113FE D068 0032                  		add.w	$32(a0),d0
00011402 3140 0008                  		move.w	d0,8(a0)
00011406 4E75                       		rts	
00011408                            ; ===========================================================================
00011408                            
00011408                            Obj59_Type08:				; XREF: Obj59_TypeIndex
00011408 6100 0000                  		bsr.w	Obj59_Move
0001140C 3028 0034                  		move.w	$34(a0),d0
00011410 E240                       		asr.w	#1,d0
00011412 D068 0030                  		add.w	$30(a0),d0
00011416 3140 000C                  		move.w	d0,$C(a0)
0001141A 3028 0034                  		move.w	$34(a0),d0
0001141E 4440                       		neg.w	d0
00011420 D068 0032                  		add.w	$32(a0),d0
00011424 3140 0008                  		move.w	d0,8(a0)
00011428 4E75                       		rts	
0001142A                            ; ===========================================================================
0001142A                            
0001142A                            Obj59_Type09:				; XREF: Obj59_TypeIndex
0001142A 6100 0000                  		bsr.w	Obj59_Move
0001142E 3028 0034                  		move.w	$34(a0),d0
00011432 4440                       		neg.w	d0
00011434 D068 0030                  		add.w	$30(a0),d0
00011438 3140 000C                  		move.w	d0,$C(a0)
0001143C 4A28 0028                  		tst.b	$28(a0)
00011440 6700 0000                  		beq.w	loc_10C94
00011444 4E75                       		rts	
00011446                            ; ===========================================================================
00011446                            
00011446                            loc_10C94:
00011446 0828 0003 0022             		btst	#3,$22(a0)
0001144C 6700                       		beq.s	Obj59_Delete
0001144E 08E9 0001 0022             		bset	#1,$22(a1)
00011454 08A9 0003 0022             		bclr	#3,$22(a1)
0001145A 137C 0002 0024             		move.b	#2,$24(a1)
00011460                            
00011460                            Obj59_Delete:
00011460 6000 C9A2                  		bra.w	DeleteObject
00011464                            
00011464                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00011464                            
00011464                            
00011464                            Obj59_Move:				; XREF: Obj59_Type02; et al
00011464 3028 0038                  		move.w	$38(a0),d0
00011468 4A28 003A                  		tst.b	$3A(a0)
0001146C 6600                       		bne.s	loc_10CC8
0001146E 0C40 0800                  		cmpi.w	#$800,d0
00011472 6400                       		bcc.s	loc_10CD0
00011474 0640 0010                  		addi.w	#$10,d0
00011478 6000                       		bra.s	loc_10CD0
0001147A                            ; ===========================================================================
0001147A                            
0001147A                            loc_10CC8:
0001147A 4A40                       		tst.w	d0
0001147C 6700                       		beq.s	loc_10CD0
0001147E 0440 0010                  		subi.w	#$10,d0
00011482                            
00011482                            loc_10CD0:
00011482 3140 0038                  		move.w	d0,$38(a0)
00011486 48C0                       		ext.l	d0
00011488 E180                       		asl.l	#8,d0
0001148A D0A8 0034                  		add.l	$34(a0),d0
0001148E 2140 0034                  		move.l	d0,$34(a0)
00011492 4840                       		swap	d0
00011494 3428 003C                  		move.w	$3C(a0),d2
00011498 B042                       		cmp.w	d2,d0
0001149A 6300                       		bls.s	loc_10CF0
0001149C 117C 0001 003A             		move.b	#1,$3A(a0)
000114A2                            
000114A2                            loc_10CF0:
000114A2 D442                       		add.w	d2,d2
000114A4 B042                       		cmp.w	d2,d0
000114A6 6600                       		bne.s	locret_10CFA
000114A8 4228 0028                  		clr.b	$28(a0)
000114AC                            
000114AC                            locret_10CFA:
000114AC 4E75                       		rts	
000114AE                            ; End of function Obj59_Move
000114AE                            
000114AE                            ; ===========================================================================
000114AE                            
000114AE                            Obj59_MakeMulti:			; XREF: Obj59_Index
000114AE 5368 003C                  		subq.w	#1,$3C(a0)
000114B2 6600                       		bne.s	Obj59_ChkDel
000114B4 3168 003E 003C             		move.w	$3E(a0),$3C(a0)
000114BA 6100 CD92                  		bsr.w	SingleObjLoad
000114BE 6600                       		bne.s	Obj59_ChkDel
000114C0 12BC 0059                  		move.b	#$59,0(a1)	; duplicate the	object
000114C4 3368 0008 0008             		move.w	8(a0),8(a1)
000114CA 3368 000C 000C             		move.w	$C(a0),$C(a1)
000114D0 137C 000E 0028             		move.b	#$E,$28(a1)
000114D6                            
000114D6                            Obj59_ChkDel:
000114D6 588F                       		addq.l	#4,sp
000114D8 3028 0008                  		move.w	8(a0),d0
000114DC 0240 FF80                  		andi.w	#$FF80,d0
000114E0 3238 F700                  		move.w	($FFFFF700).w,d1
000114E4 0441 0080                  		subi.w	#$80,d1
000114E8 0241 FF80                  		andi.w	#$FF80,d1
000114EC 9041                       		sub.w	d1,d0
000114EE 0C40 0280                  		cmpi.w	#$280,d0
000114F2 6200 C910                  		bhi.w	DeleteObject
000114F6 4E75                       		rts	
000114F8                            ; ===========================================================================
000114F8                            ; ---------------------------------------------------------------------------
000114F8                            ; Sprite mappings - platforms that move	when you stand on them (SLZ)
000114F8                            ; ---------------------------------------------------------------------------
000114F8                            Map_obj59:
000114F8                            	include "_maps\obj59.asm"
000114F8                            ; ---------------------------------------------------------------------------
000114F8                            ; Sprite mappings - platforms that move	when you stand on them (SLZ)
000114F8                            ; ---------------------------------------------------------------------------
000114F8 0000                       		dc.w byte_10D4A-Map_obj59
000114FA 03                         byte_10D4A:	dc.b 3
000114FB F80F 0041 D8               		dc.b $F8, $F, 0, $41, $D8
00011500 F80F 0041 F8               		dc.b $F8, $F, 0, $41, $F8
00011505 F807 0041 18               		dc.b $F8, 7, 0,	$41, $18
0001150A                            		even
0001150A                            		even
0001150A                            
0001150A                            ; ===========================================================================
0001150A                            ; ---------------------------------------------------------------------------
0001150A                            ; Object 5A - platforms	moving in circles (SLZ)
0001150A                            ; ---------------------------------------------------------------------------
0001150A                            
0001150A                            Obj5A:					; XREF: Obj_Index
0001150A 7000                       		moveq	#0,d0
0001150C 1028 0024                  		move.b	$24(a0),d0
00011510 323B 0000                  		move.w	Obj5A_Index(pc,d0.w),d1
00011514 4EBB 1000                  		jsr	Obj5A_Index(pc,d1.w)
00011518 3028 0032                  		move.w	$32(a0),d0
0001151C 0240 FF80                  		andi.w	#$FF80,d0
00011520 3238 F700                  		move.w	($FFFFF700).w,d1
00011524 0441 0080                  		subi.w	#$80,d1
00011528 0241 FF80                  		andi.w	#$FF80,d1
0001152C 9041                       		sub.w	d1,d0
0001152E 0C40 0280                  		cmpi.w	#$280,d0
00011532 6200 C8D0                  		bhi.w	DeleteObject
00011536 6000 C890                  		bra.w	DisplaySprite
0001153A                            ; ===========================================================================
0001153A 0000                       Obj5A_Index:	dc.w Obj5A_Main-Obj5A_Index
0001153C 0000                       		dc.w Obj5A_Platform-Obj5A_Index
0001153E 0000                       		dc.w Obj5A_Action-Obj5A_Index
00011540                            ; ===========================================================================
00011540                            
00011540                            Obj5A_Main:				; XREF: Obj5A_Index
00011540 5428 0024                  		addq.b	#2,$24(a0)
00011544 217C 0000 0000 0004        		move.l	#Map_obj5A,4(a0)
0001154C 317C 4000 0002             		move.w	#$4000,2(a0)
00011552 117C 0004 0001             		move.b	#4,1(a0)
00011558 117C 0004 0018             		move.b	#4,$18(a0)
0001155E 117C 0018 0019             		move.b	#$18,$19(a0)
00011564 3168 0008 0032             		move.w	8(a0),$32(a0)
0001156A 3168 000C 0030             		move.w	$C(a0),$30(a0)
00011570                            
00011570                            Obj5A_Platform:				; XREF: Obj5A_Index
00011570 7200                       		moveq	#0,d1
00011572 1228 0019                  		move.b	$19(a0),d1
00011576 4EB9 0000 7A48             		jsr	(PlatformObject).l
0001157C 6000 0000                  		bra.w	Obj5A_Types
00011580                            ; ===========================================================================
00011580                            
00011580                            Obj5A_Action:				; XREF: Obj5A_Index
00011580 7200                       		moveq	#0,d1
00011582 1228 0019                  		move.b	$19(a0),d1
00011586 4EB9 0000 7BBC             		jsr	(ExitPlatform).l
0001158C 3F28 0008                  		move.w	8(a0),-(sp)
00011590 6100 0000                  		bsr.w	Obj5A_Types
00011594 341F                       		move.w	(sp)+,d2
00011596 4EF9 0000 8126             		jmp	(MvSonicOnPtfm2).l
0001159C                            ; ===========================================================================
0001159C                            
0001159C                            Obj5A_Types:
0001159C 7000                       		moveq	#0,d0
0001159E 1028 0028                  		move.b	$28(a0),d0
000115A2 0240 000C                  		andi.w	#$C,d0
000115A6 E248                       		lsr.w	#1,d0
000115A8 323B 0000                  		move.w	Obj5A_TypeIndex(pc,d0.w),d1
000115AC 4EFB 1000                  		jmp	Obj5A_TypeIndex(pc,d1.w)
000115B0                            ; ===========================================================================
000115B0 0000                       Obj5A_TypeIndex:dc.w Obj5A_Type00-Obj5A_TypeIndex
000115B2 0000                       		dc.w Obj5A_Type04-Obj5A_TypeIndex
000115B4                            ; ===========================================================================
000115B4                            
000115B4                            Obj5A_Type00:				; XREF: Obj5A_TypeIndex
000115B4 1238 FE80                  		move.b	($FFFFFE80).w,d1
000115B8 0401 0050                  		subi.b	#$50,d1
000115BC 4881                       		ext.w	d1
000115BE 1438 FE84                  		move.b	($FFFFFE84).w,d2
000115C2 0402 0050                  		subi.b	#$50,d2
000115C6 4882                       		ext.w	d2
000115C8 0828 0000 0028             		btst	#0,$28(a0)
000115CE 6700                       		beq.s	loc_10E24
000115D0 4441                       		neg.w	d1
000115D2 4442                       		neg.w	d2
000115D4                            
000115D4                            loc_10E24:
000115D4 0828 0001 0028             		btst	#1,$28(a0)
000115DA 6700                       		beq.s	loc_10E30
000115DC 4441                       		neg.w	d1
000115DE C342                       		exg	d1,d2
000115E0                            
000115E0                            loc_10E30:
000115E0 D268 0032                  		add.w	$32(a0),d1
000115E4 3141 0008                  		move.w	d1,8(a0)
000115E8 D468 0030                  		add.w	$30(a0),d2
000115EC 3142 000C                  		move.w	d2,$C(a0)
000115F0 4E75                       		rts	
000115F2                            ; ===========================================================================
000115F2                            
000115F2                            Obj5A_Type04:				; XREF: Obj5A_TypeIndex
000115F2 1238 FE80                  		move.b	($FFFFFE80).w,d1
000115F6 0401 0050                  		subi.b	#$50,d1
000115FA 4881                       		ext.w	d1
000115FC 1438 FE84                  		move.b	($FFFFFE84).w,d2
00011600 0402 0050                  		subi.b	#$50,d2
00011604 4882                       		ext.w	d2
00011606 0828 0000 0028             		btst	#0,$28(a0)
0001160C 6700                       		beq.s	loc_10E62
0001160E 4441                       		neg.w	d1
00011610 4442                       		neg.w	d2
00011612                            
00011612                            loc_10E62:
00011612 0828 0001 0028             		btst	#1,$28(a0)
00011618 6700                       		beq.s	loc_10E6E
0001161A 4441                       		neg.w	d1
0001161C C342                       		exg	d1,d2
0001161E                            
0001161E                            loc_10E6E:
0001161E 4441                       		neg.w	d1
00011620 D268 0032                  		add.w	$32(a0),d1
00011624 3141 0008                  		move.w	d1,8(a0)
00011628 D468 0030                  		add.w	$30(a0),d2
0001162C 3142 000C                  		move.w	d2,$C(a0)
00011630 4E75                       		rts	
00011632                            ; ===========================================================================
00011632                            ; ---------------------------------------------------------------------------
00011632                            ; Sprite mappings - platforms that move	in circles (SLZ)
00011632                            ; ---------------------------------------------------------------------------
00011632                            Map_obj5A:
00011632                            	include "_maps\obj5A.asm"
00011632                            ; ---------------------------------------------------------------------------
00011632                            ; Sprite mappings - platforms that move	in circles (SLZ)
00011632                            ; ---------------------------------------------------------------------------
00011632 0000                       		dc.w byte_10E84-Map_obj5A
00011634 02                         byte_10E84:	dc.b 2
00011635 F809 0051 E8               		dc.b $F8, 9, 0,	$51, $E8
0001163A F809 0851 00               		dc.b $F8, 9, 8,	$51, 0
00011640 00                         		even
00011640 00                         		even
00011640                            
00011640                            ; ===========================================================================
00011640                            ; ---------------------------------------------------------------------------
00011640                            ; Object 5B - blocks that form a staircase (SLZ)
00011640                            ; ---------------------------------------------------------------------------
00011640                            
00011640                            Obj5B:					; XREF: Obj_Index
00011640 7000                       		moveq	#0,d0
00011642 1028 0024                  		move.b	$24(a0),d0
00011646 323B 0000                  		move.w	Obj5B_Index(pc,d0.w),d1
0001164A 4EBB 1000                  		jsr	Obj5B_Index(pc,d1.w)
0001164E 3028 0030                  		move.w	$30(a0),d0
00011652 0240 FF80                  		andi.w	#$FF80,d0
00011656 3238 F700                  		move.w	($FFFFF700).w,d1
0001165A 0441 0080                  		subi.w	#$80,d1
0001165E 0241 FF80                  		andi.w	#$FF80,d1
00011662 9041                       		sub.w	d1,d0
00011664 0C40 0280                  		cmpi.w	#$280,d0
00011668 6200 C79A                  		bhi.w	DeleteObject
0001166C 6000 C75A                  		bra.w	DisplaySprite
00011670                            ; ===========================================================================
00011670 0000                       Obj5B_Index:	dc.w Obj5B_Main-Obj5B_Index
00011672 0000                       		dc.w Obj5B_Move-Obj5B_Index
00011674 0000                       		dc.w Obj5B_Solid-Obj5B_Index
00011676                            ; ===========================================================================
00011676                            
00011676                            Obj5B_Main:				; XREF: Obj5B_Index
00011676 5428 0024                  		addq.b	#2,$24(a0)
0001167A 7638                       		moveq	#$38,d3
0001167C 7801                       		moveq	#1,d4
0001167E 0828 0000 0022             		btst	#0,$22(a0)
00011684 6700                       		beq.s	loc_10EDA
00011686 763B                       		moveq	#$3B,d3
00011688 78FF                       		moveq	#-1,d4
0001168A                            
0001168A                            loc_10EDA:
0001168A 3428 0008                  		move.w	8(a0),d2
0001168E 2248                       		movea.l	a0,a1
00011690 7203                       		moveq	#3,d1
00011692 6000                       		bra.s	Obj5B_MakeBlocks
00011694                            ; ===========================================================================
00011694                            
00011694                            Obj5B_Loop:
00011694 6100 CBCE                  		bsr.w	SingleObjLoad2
00011698 6600 0000                  		bne.w	Obj5B_Move
0001169C 137C 0004 0024             		move.b	#4,$24(a1)
000116A2                            
000116A2                            Obj5B_MakeBlocks:			; XREF: Obj5B_Main
000116A2 12BC 005B                  		move.b	#$5B,0(a1)	; load another block object
000116A6 237C 0000 0000 0004        		move.l	#Map_obj5B,4(a1)
000116AE 337C 4000 0002             		move.w	#$4000,2(a1)
000116B4 137C 0004 0001             		move.b	#4,1(a1)
000116BA 137C 0003 0018             		move.b	#3,$18(a1)
000116C0 137C 0010 0019             		move.b	#$10,$19(a1)
000116C6 1368 0028 0028             		move.b	$28(a0),$28(a1)
000116CC 3342 0008                  		move.w	d2,8(a1)
000116D0 3368 000C 000C             		move.w	$C(a0),$C(a1)
000116D6 3368 0008 0030             		move.w	8(a0),$30(a1)
000116DC 3369 000C 0032             		move.w	$C(a1),$32(a1)
000116E2 0642 0020                  		addi.w	#$20,d2
000116E6 1343 0037                  		move.b	d3,$37(a1)
000116EA 2348 003C                  		move.l	a0,$3C(a1)
000116EE D604                       		add.b	d4,d3
000116F0 51C9 FFA2                  		dbf	d1,Obj5B_Loop	; repeat sequence 3 times
000116F4                            
000116F4                            Obj5B_Move:				; XREF: Obj5B_Index
000116F4 7000                       		moveq	#0,d0
000116F6 1028 0028                  		move.b	$28(a0),d0
000116FA 0240 0007                  		andi.w	#7,d0
000116FE D040                       		add.w	d0,d0
00011700 323B 0000                  		move.w	Obj5B_TypeIndex(pc,d0.w),d1
00011704 4EBB 1000                  		jsr	Obj5B_TypeIndex(pc,d1.w)
00011708                            
00011708                            Obj5B_Solid:				; XREF: Obj5B_Index
00011708 2468 003C                  		movea.l	$3C(a0),a2
0001170C 7000                       		moveq	#0,d0
0001170E 1028 0037                  		move.b	$37(a0),d0
00011712 1032 0000                  		move.b	(a2,d0.w),d0
00011716 D068 0032                  		add.w	$32(a0),d0
0001171A 3140 000C                  		move.w	d0,$C(a0)
0001171E 7200                       		moveq	#0,d1
00011720 1228 0019                  		move.b	$19(a0),d1
00011724 0641 000B                  		addi.w	#$B,d1
00011728 343C 0010                  		move.w	#$10,d2
0001172C 363C 0011                  		move.w	#$11,d3
00011730 3828 0008                  		move.w	8(a0),d4
00011734 6100 EA62                  		bsr.w	SolidObject
00011738 4A04                       		tst.b	d4
0001173A 6A00                       		bpl.s	loc_10F92
0001173C 1544 0036                  		move.b	d4,$36(a2)
00011740                            
00011740                            loc_10F92:
00011740 0828 0003 0022             		btst	#3,$22(a0)
00011746 6700                       		beq.s	locret_10FA0
00011748 157C 0001 0036             		move.b	#1,$36(a2)
0001174E                            
0001174E                            locret_10FA0:
0001174E 4E75                       		rts	
00011750                            ; ===========================================================================
00011750 0000                       Obj5B_TypeIndex:dc.w Obj5B_Type00-Obj5B_TypeIndex
00011752 0000                       		dc.w Obj5B_Type01-Obj5B_TypeIndex
00011754 0000                       		dc.w Obj5B_Type02-Obj5B_TypeIndex
00011756 0000                       		dc.w Obj5B_Type01-Obj5B_TypeIndex
00011758                            ; ===========================================================================
00011758                            
00011758                            Obj5B_Type00:				; XREF: Obj5B_TypeIndex
00011758 4A68 0034                  		tst.w	$34(a0)
0001175C 6600                       		bne.s	loc_10FC0
0001175E 0C28 0001 0036             		cmpi.b	#1,$36(a0)
00011764 6600                       		bne.s	locret_10FBE
00011766 317C 001E 0034             		move.w	#$1E,$34(a0)
0001176C                            
0001176C                            locret_10FBE:
0001176C 4E75                       		rts	
0001176E                            ; ===========================================================================
0001176E                            
0001176E                            loc_10FC0:
0001176E 5368 0034                  		subq.w	#1,$34(a0)
00011772 66F8                       		bne.s	locret_10FBE
00011774 5228 0028                  		addq.b	#1,$28(a0)	; add 1	to type
00011778 4E75                       		rts	
0001177A                            ; ===========================================================================
0001177A                            
0001177A                            Obj5B_Type02:				; XREF: Obj5B_TypeIndex
0001177A 4A68 0034                  		tst.w	$34(a0)
0001177E 6600                       		bne.s	loc_10FE0
00011780 4A28 0036                  		tst.b	$36(a0)
00011784 6A00                       		bpl.s	locret_10FDE
00011786 317C 003C 0034             		move.w	#$3C,$34(a0)
0001178C                            
0001178C                            locret_10FDE:
0001178C 4E75                       		rts	
0001178E                            ; ===========================================================================
0001178E                            
0001178E                            loc_10FE0:
0001178E 5368 0034                  		subq.w	#1,$34(a0)
00011792 6600                       		bne.s	loc_10FEC
00011794 5228 0028                  		addq.b	#1,$28(a0)	; add 1	to type
00011798 4E75                       		rts	
0001179A                            ; ===========================================================================
0001179A                            
0001179A                            loc_10FEC:
0001179A 43E8 0038                  		lea	$38(a0),a1
0001179E 3028 0034                  		move.w	$34(a0),d0
000117A2 E408                       		lsr.b	#2,d0
000117A4 0200 0001                  		andi.b	#1,d0
000117A8 12C0                       		move.b	d0,(a1)+
000117AA 0A00 0001                  		eori.b	#1,d0
000117AE 12C0                       		move.b	d0,(a1)+
000117B0 0A00 0001                  		eori.b	#1,d0
000117B4 12C0                       		move.b	d0,(a1)+
000117B6 0A00 0001                  		eori.b	#1,d0
000117BA 12C0                       		move.b	d0,(a1)+
000117BC 4E75                       		rts	
000117BE                            ; ===========================================================================
000117BE                            
000117BE                            Obj5B_Type01:				; XREF: Obj5B_TypeIndex
000117BE 43E8 0038                  		lea	$38(a0),a1
000117C2 0C11 0080                  		cmpi.b	#$80,(a1)
000117C6 6700                       		beq.s	locret_11038
000117C8 5211                       		addq.b	#1,(a1)
000117CA 7200                       		moveq	#0,d1
000117CC 1219                       		move.b	(a1)+,d1
000117CE 4841                       		swap	d1
000117D0 E289                       		lsr.l	#1,d1
000117D2 2401                       		move.l	d1,d2
000117D4 E289                       		lsr.l	#1,d1
000117D6 2601                       		move.l	d1,d3
000117D8 D682                       		add.l	d2,d3
000117DA 4841                       		swap	d1
000117DC 4842                       		swap	d2
000117DE 4843                       		swap	d3
000117E0 12C3                       		move.b	d3,(a1)+
000117E2 12C2                       		move.b	d2,(a1)+
000117E4 12C1                       		move.b	d1,(a1)+
000117E6                            
000117E6                            locret_11038:
000117E6 4E75                       		rts	
000117E8 4E75                       		rts	
000117EA                            ; ===========================================================================
000117EA                            ; ---------------------------------------------------------------------------
000117EA                            ; Sprite mappings - blocks that	form a staircase (SLZ)
000117EA                            ; ---------------------------------------------------------------------------
000117EA                            Map_obj5B:
000117EA                            	include "_maps\obj5B.asm"
000117EA                            ; ---------------------------------------------------------------------------
000117EA                            ; Sprite mappings - blocks that	form a staircase (SLZ)
000117EA                            ; ---------------------------------------------------------------------------
000117EA 0000                       		dc.w byte_1103E-Map_obj5B
000117EC 01                         byte_1103E:	dc.b 1
000117ED F00F 0021 F0               		dc.b $F0, $F, 0, $21, $F0
000117F2                            		even
000117F2                            		even
000117F2                            
000117F2                            ; ===========================================================================
000117F2                            ; ---------------------------------------------------------------------------
000117F2                            ; Object 5C - metal girders in foreground (SLZ)
000117F2                            ; ---------------------------------------------------------------------------
000117F2                            
000117F2                            Obj5C:					; XREF: Obj_Index
000117F2 7000                       		moveq	#0,d0
000117F4 1028 0024                  		move.b	$24(a0),d0
000117F8 323B 0000                  		move.w	Obj5C_Index(pc,d0.w),d1
000117FC 4EFB 1000                  		jmp	Obj5C_Index(pc,d1.w)
00011800                            ; ===========================================================================
00011800 0000                       Obj5C_Index:	dc.w Obj5C_Main-Obj5C_Index
00011802 0000                       		dc.w Obj5C_Display-Obj5C_Index
00011804                            ; ===========================================================================
00011804                            
00011804                            Obj5C_Main:				; XREF: Obj5C_Index
00011804 5428 0024                  		addq.b	#2,$24(a0)
00011808 217C 0000 0000 0004        		move.l	#Map_obj5C,4(a0)
00011810 317C 83CC 0002             		move.w	#$83CC,2(a0)
00011816 117C 0010 0019             		move.b	#$10,$19(a0)
0001181C                            
0001181C                            Obj5C_Display:				; XREF: Obj5C_Index
0001181C 2238 F700                  		move.l	($FFFFF700).w,d1
00011820 D281                       		add.l	d1,d1
00011822 4841                       		swap	d1
00011824 4441                       		neg.w	d1
00011826 3141 0008                  		move.w	d1,8(a0)
0001182A 2238 F704                  		move.l	($FFFFF704).w,d1
0001182E D281                       		add.l	d1,d1
00011830 4841                       		swap	d1
00011832 0241 003F                  		andi.w	#$3F,d1
00011836 4441                       		neg.w	d1
00011838 0641 0100                  		addi.w	#$100,d1
0001183C 3141 000A                  		move.w	d1,$A(a0)
00011840 6000 C586                  		bra.w	DisplaySprite
00011844                            ; ===========================================================================
00011844                            ; ---------------------------------------------------------------------------
00011844                            ; Sprite mappings - metal girders in foreground	(SLZ)
00011844                            ; ---------------------------------------------------------------------------
00011844                            Map_obj5C:
00011844                            	include "_maps\obj5C.asm"
00011844                            ; ---------------------------------------------------------------------------
00011844                            ; Sprite mappings - metal girders in foreground	(SLZ)
00011844                            ; ---------------------------------------------------------------------------
00011844 0000                       		dc.w byte_11098-Map_obj5C
00011846 09                         byte_11098:	dc.b 9
00011847 800F 0000 F0               		dc.b $80, $F, 0, 0, $F0
0001184C A00F 1000 F0               		dc.b $A0, $F, $10, 0, $F0
00011851 C00F 0000 F0               		dc.b $C0, $F, 0, 0, $F0
00011856 E00F 1000 F0               		dc.b $E0, $F, $10, 0, $F0
0001185B 000F 0000 F0               		dc.b 0,	$F, 0, 0, $F0
00011860 200F 1000 F0               		dc.b $20, $F, $10, 0, $F0
00011865 400F 0000 F0               		dc.b $40, $F, 0, 0, $F0
0001186A 600F 1000 F0               		dc.b $60, $F, $10, 0, $F0
0001186F 7F0F 0000 F0               		dc.b $7F, $F, 0, 0, $F0
00011874                            		even
00011874                            		even
00011874                            
00011874                            ; ===========================================================================
00011874                            ; ---------------------------------------------------------------------------
00011874                            ; Object 1B - water surface (LZ)
00011874                            ; ---------------------------------------------------------------------------
00011874                            
00011874                            Obj1B:					; XREF: Obj_Index
00011874 7000                       		moveq	#0,d0
00011876 1028 0024                  		move.b	$24(a0),d0
0001187A 323B 0000                  		move.w	Obj1B_Index(pc,d0.w),d1
0001187E 4EFB 1000                  		jmp	Obj1B_Index(pc,d1.w)
00011882                            ; ===========================================================================
00011882 0000                       Obj1B_Index:	dc.w Obj1B_Main-Obj1B_Index
00011884 0000                       		dc.w Obj1B_Action-Obj1B_Index
00011886                            ; ===========================================================================
00011886                            
00011886                            Obj1B_Main:				; XREF: Obj1B_Index
00011886 5428 0024                  		addq.b	#2,$24(a0)
0001188A 217C 0000 0000 0004        		move.l	#Map_obj1B,4(a0)
00011892 317C C300 0002             		move.w	#$C300,2(a0)
00011898 117C 0004 0001             		move.b	#4,1(a0)
0001189E 117C 0080 0019             		move.b	#$80,$19(a0)
000118A4 3168 0008 0030             		move.w	8(a0),$30(a0)
000118AA                            
000118AA                            Obj1B_Action:				; XREF: Obj1B_Index
000118AA 3238 F700                  		move.w	($FFFFF700).w,d1
000118AE 0241 FFE0                  		andi.w	#$FFE0,d1
000118B2 D268 0030                  		add.w	$30(a0),d1
000118B6 0838 0000 FE05             		btst	#0,($FFFFFE05).w
000118BC 6700                       		beq.s	loc_11114
000118BE 0641 0020                  		addi.w	#$20,d1
000118C2                            
000118C2                            loc_11114:
000118C2 3141 0008                  		move.w	d1,8(a0)	; match	obj x-position to screen position
000118C6 3238 F646                  		move.w	($FFFFF646).w,d1
000118CA 3141 000C                  		move.w	d1,$C(a0)	; match	obj y-position to water	height
000118CE 4A28 0032                  		tst.b	$32(a0)
000118D2 6600                       		bne.s	Obj1B_Animate
000118D4 0838 0007 F605             		btst	#7,($FFFFF605).w ; is Start button pressed?
000118DA 6700                       		beq.s	loc_1114A	; if not, branch
000118DC 5628 001A                  		addq.b	#3,$1A(a0)	; use different	frames
000118E0 117C 0001 0032             		move.b	#1,$32(a0)	; stop animation
000118E6 6000                       		bra.s	Obj1B_Display
000118E8                            ; ===========================================================================
000118E8                            
000118E8                            Obj1B_Animate:				; XREF: loc_11114
000118E8 4A78 F63A                  		tst.w	($FFFFF63A).w	; is the game paused?
000118EC 6600                       		bne.s	Obj1B_Display	; if yes, branch
000118EE 117C 0000 0032             		move.b	#0,$32(a0)	; resume animation
000118F4 5728 001A                  		subq.b	#3,$1A(a0)	; use normal frames
000118F8                            
000118F8                            loc_1114A:				; XREF: loc_11114
000118F8 5328 001E                  		subq.b	#1,$1E(a0)
000118FC 6A00                       		bpl.s	Obj1B_Display
000118FE 117C 0007 001E             		move.b	#7,$1E(a0)
00011904 5228 001A                  		addq.b	#1,$1A(a0)
00011908 0C28 0003 001A             		cmpi.b	#3,$1A(a0)
0001190E 6500                       		bcs.s	Obj1B_Display
00011910 117C 0000 001A             		move.b	#0,$1A(a0)
00011916                            
00011916                            Obj1B_Display:
00011916 6000 C4B0                  		bra.w	DisplaySprite
0001191A                            ; ===========================================================================
0001191A                            ; ---------------------------------------------------------------------------
0001191A                            ; Sprite mappings - water surface (LZ)
0001191A                            ; ---------------------------------------------------------------------------
0001191A                            Map_obj1B:
0001191A                            	include "_maps\obj1B.asm"
0001191A                            ; ---------------------------------------------------------------------------
0001191A                            ; Sprite mappings - water surface (LZ)
0001191A                            ; ---------------------------------------------------------------------------
0001191A 0000 0000                  		dc.w byte_11178-Map_obj1B, byte_11188-Map_obj1B
0001191E 0000 0000                  		dc.w byte_11198-Map_obj1B, byte_111A8-Map_obj1B
00011922 0000 0000                  		dc.w byte_111C7-Map_obj1B, byte_111E6-Map_obj1B
00011926 03                         byte_11178:	dc.b 3
00011927 FD0D 0000 A0               		dc.b $FD, $D, 0, 0, $A0
0001192C FD0D 0000 E0               		dc.b $FD, $D, 0, 0, $E0
00011931 FD0D 0000 20               		dc.b $FD, $D, 0, 0, $20
00011936 03                         byte_11188:	dc.b 3
00011937 FD0D 0008 A0               		dc.b $FD, $D, 0, 8, $A0
0001193C FD0D 0008 E0               		dc.b $FD, $D, 0, 8, $E0
00011941 FD0D 0008 20               		dc.b $FD, $D, 0, 8, $20
00011946 03                         byte_11198:	dc.b 3
00011947 FD0D 0800 A0               		dc.b $FD, $D, 8, 0, $A0
0001194C FD0D 0800 E0               		dc.b $FD, $D, 8, 0, $E0
00011951 FD0D 0800 20               		dc.b $FD, $D, 8, 0, $20
00011956 06                         byte_111A8:	dc.b 6
00011957 FD0D 0000 A0               		dc.b $FD, $D, 0, 0, $A0
0001195C FD0D 0000 C0               		dc.b $FD, $D, 0, 0, $C0
00011961 FD0D 0000 E0               		dc.b $FD, $D, 0, 0, $E0
00011966 FD0D 0000 00               		dc.b $FD, $D, 0, 0, 0
0001196B FD0D 0000 20               		dc.b $FD, $D, 0, 0, $20
00011970 FD0D 0000 40               		dc.b $FD, $D, 0, 0, $40
00011975 06                         byte_111C7:	dc.b 6
00011976 FD0D 0008 A0               		dc.b $FD, $D, 0, 8, $A0
0001197B FD0D 0008 C0               		dc.b $FD, $D, 0, 8, $C0
00011980 FD0D 0008 E0               		dc.b $FD, $D, 0, 8, $E0
00011985 FD0D 0008 00               		dc.b $FD, $D, 0, 8, 0
0001198A FD0D 0008 20               		dc.b $FD, $D, 0, 8, $20
0001198F FD0D 0008 40               		dc.b $FD, $D, 0, 8, $40
00011994 06                         byte_111E6:	dc.b 6
00011995 FD0D 0800 A0               		dc.b $FD, $D, 8, 0, $A0
0001199A FD0D 0800 C0               		dc.b $FD, $D, 8, 0, $C0
0001199F FD0D 0800 E0               		dc.b $FD, $D, 8, 0, $E0
000119A4 FD0D 0800 00               		dc.b $FD, $D, 8, 0, 0
000119A9 FD0D 0800 20               		dc.b $FD, $D, 8, 0, $20
000119AE FD0D 0800 40               		dc.b $FD, $D, 8, 0, $40
000119B4 00                         		even
000119B4 00                         		even
000119B4                            
000119B4                            ; ===========================================================================
000119B4                            ; ---------------------------------------------------------------------------
000119B4                            ; Object 0B - pole that	breaks (LZ)
000119B4                            ; ---------------------------------------------------------------------------
000119B4                            
000119B4                            Obj0B:					; XREF: Obj_Index
000119B4 7000                       		moveq	#0,d0
000119B6 1028 0024                  		move.b	$24(a0),d0
000119BA 323B 0000                  		move.w	Obj0B_Index(pc,d0.w),d1
000119BE 4EFB 1000                  		jmp	Obj0B_Index(pc,d1.w)
000119C2                            ; ===========================================================================
000119C2 0000                       Obj0B_Index:	dc.w Obj0B_Main-Obj0B_Index
000119C4 0000                       		dc.w Obj0B_Action-Obj0B_Index
000119C6 0000                       		dc.w Obj0B_Display-Obj0B_Index
000119C8                            ; ===========================================================================
000119C8                            
000119C8                            Obj0B_Main:				; XREF: Obj0B_Index
000119C8 5428 0024                  		addq.b	#2,$24(a0)
000119CC 217C 0000 0000 0004        		move.l	#Map_obj0B,4(a0)
000119D4 317C 43DE 0002             		move.w	#$43DE,2(a0)
000119DA 117C 0004 0001             		move.b	#4,1(a0)
000119E0 117C 0008 0019             		move.b	#8,$19(a0)
000119E6 117C 0004 0018             		move.b	#4,$18(a0)
000119EC 117C 00E1 0020             		move.b	#$E1,$20(a0)
000119F2 7000                       		moveq	#0,d0
000119F4 1028 0028                  		move.b	$28(a0),d0	; get object type
000119F8 C0FC 003C                  		mulu.w	#60,d0		; multiply by 60 (1 second)
000119FC 3140 0030                  		move.w	d0,$30(a0)	; set breakage time
00011A00                            
00011A00                            Obj0B_Action:				; XREF: Obj0B_Index
00011A00 4A28 0032                  		tst.b	$32(a0)
00011A04 6700                       		beq.s	Obj0B_Grab
00011A06 4A68 0030                  		tst.w	$30(a0)
00011A0A 6700                       		beq.s	Obj0B_MoveUp
00011A0C 5368 0030                  		subq.w	#1,$30(a0)
00011A10 6600                       		bne.s	Obj0B_MoveUp
00011A12 117C 0001 001A             		move.b	#1,$1A(a0)	; break	the pole
00011A18 6000                       		bra.s	Obj0B_Release
00011A1A                            ; ===========================================================================
00011A1A                            
00011A1A                            Obj0B_MoveUp:				; XREF: Obj0B_Action
00011A1A 43F8 D000                  		lea	($FFFFD000).w,a1
00011A1E 3028 000C                  		move.w	$C(a0),d0
00011A22 0440 0018                  		subi.w	#$18,d0
00011A26 0838 0000 F604             		btst	#0,($FFFFF604).w ; check if "up" is pressed
00011A2C 6700                       		beq.s	Obj0B_MoveDown
00011A2E 5369 000C                  		subq.w	#1,$C(a1)	; move Sonic up
00011A32 B069 000C                  		cmp.w	$C(a1),d0
00011A36 6500                       		bcs.s	Obj0B_MoveDown
00011A38 3340 000C                  		move.w	d0,$C(a1)
00011A3C                            
00011A3C                            Obj0B_MoveDown:
00011A3C 0640 0024                  		addi.w	#$24,d0
00011A40 0838 0001 F604             		btst	#1,($FFFFF604).w ; check if "down" is pressed
00011A46 6700                       		beq.s	Obj0B_LetGo
00011A48 5269 000C                  		addq.w	#1,$C(a1)	; move Sonic down
00011A4C B069 000C                  		cmp.w	$C(a1),d0
00011A50 6400                       		bcc.s	Obj0B_LetGo
00011A52 3340 000C                  		move.w	d0,$C(a1)
00011A56                            
00011A56                            Obj0B_LetGo:
00011A56 1038 F603                  		move.b	($FFFFF603).w,d0
00011A5A 0240 0070                  		andi.w	#$70,d0
00011A5E 6700                       		beq.s	Obj0B_Display
00011A60                            
00011A60                            Obj0B_Release:				; XREF: Obj0B_Action
00011A60 4228 0020                  		clr.b	$20(a0)
00011A64 5428 0024                  		addq.b	#2,$24(a0)
00011A68 4238 F7C8                  		clr.b	($FFFFF7C8).w
00011A6C 4238 F7C9                  		clr.b	($FFFFF7C9).w
00011A70 4228 0032                  		clr.b	$32(a0)
00011A74 6000                       		bra.s	Obj0B_Display
00011A76                            ; ===========================================================================
00011A76                            
00011A76                            Obj0B_Grab:				; XREF: Obj0B_Action
00011A76 4A28 0021                  		tst.b	$21(a0)		; has Sonic touched the	pole?
00011A7A 6700                       		beq.s	Obj0B_Display	; if not, branch
00011A7C 43F8 D000                  		lea	($FFFFD000).w,a1
00011A80 3028 0008                  		move.w	8(a0),d0
00011A84 0640 0014                  		addi.w	#$14,d0
00011A88 B069 0008                  		cmp.w	8(a1),d0
00011A8C 6400                       		bcc.s	Obj0B_Display
00011A8E 4228 0021                  		clr.b	$21(a0)
00011A92 0C29 0004 0024             		cmpi.b	#4,$24(a1)
00011A98 6400                       		bcc.s	Obj0B_Display
00011A9A 4269 0010                  		clr.w	$10(a1)		; stop Sonic moving
00011A9E 4269 0012                  		clr.w	$12(a1)		; stop Sonic moving
00011AA2 3028 0008                  		move.w	8(a0),d0
00011AA6 0640 0014                  		addi.w	#$14,d0
00011AAA 3340 0008                  		move.w	d0,8(a1)
00011AAE 08A9 0000 0022             		bclr	#0,$22(a1)
00011AB4 137C 0011 001C             		move.b	#$11,$1C(a1)	; set Sonic's animation to "hanging" ($11)
00011ABA 11FC 0001 F7C8             		move.b	#1,($FFFFF7C8).w ; lock	controls
00011AC0 11FC 0001 F7C9             		move.b	#1,($FFFFF7C9).w ; disable wind	tunnel
00011AC6 117C 0001 0032             		move.b	#1,$32(a0)	; begin	countdown to breakage
00011ACC                            
00011ACC                            Obj0B_Display:				; XREF: Obj0B_Index
00011ACC 6000 E3A2                  		bra.w	MarkObjGone
00011AD0                            ; ===========================================================================
00011AD0                            ; ---------------------------------------------------------------------------
00011AD0                            ; Sprite mappings - pole that breaks (LZ)
00011AD0                            ; ---------------------------------------------------------------------------
00011AD0                            Map_obj0B:
00011AD0                            	include "_maps\obj0B.asm"
00011AD0                            ; ---------------------------------------------------------------------------
00011AD0                            ; Sprite mappings - pole that breaks (LZ)
00011AD0                            ; ---------------------------------------------------------------------------
00011AD0 0000                       		dc.w byte_11326-Map_obj0B
00011AD2 0000                       		dc.w byte_11331-Map_obj0B
00011AD4 02                         byte_11326:	dc.b 2			; normal pole
00011AD5 E003 0000 FC               		dc.b $E0, 3, 0,	0, $FC
00011ADA 0003 1000 FC               		dc.b 0,	3, $10,	0, $FC
00011ADF 04                         byte_11331:	dc.b 4			; broken pole
00011AE0 E001 0000 FC               		dc.b $E0, 1, 0,	0, $FC
00011AE5 F005 0004 FC               		dc.b $F0, 5, 0,	4, $FC
00011AEA 0005 1004 FC               		dc.b 0,	5, $10,	4, $FC
00011AEF 1001 1000 FC               		dc.b $10, 1, $10, 0, $FC
00011AF4                            		even
00011AF4                            		even
00011AF4                            
00011AF4                            ; ===========================================================================
00011AF4                            ; ---------------------------------------------------------------------------
00011AF4                            ; Object 0C - flapping door (LZ)
00011AF4                            ; ---------------------------------------------------------------------------
00011AF4                            
00011AF4                            Obj0C:					; XREF: Obj_Index
00011AF4 7000                       		moveq	#0,d0
00011AF6 1028 0024                  		move.b	$24(a0),d0
00011AFA 323B 0000                  		move.w	Obj0C_Index(pc,d0.w),d1
00011AFE 4EFB 1000                  		jmp	Obj0C_Index(pc,d1.w)
00011B02                            ; ===========================================================================
00011B02 0000                       Obj0C_Index:	dc.w Obj0C_Main-Obj0C_Index
00011B04 0000                       		dc.w Obj0C_OpenClose-Obj0C_Index
00011B06                            ; ===========================================================================
00011B06                            
00011B06                            Obj0C_Main:				; XREF: Obj0C_Index
00011B06 5428 0024                  		addq.b	#2,$24(a0)
00011B0A 217C 0000 0000 0004        		move.l	#Map_obj0C,4(a0)
00011B12 317C 4328 0002             		move.w	#$4328,2(a0)
00011B18 0028 0004 0001             		ori.b	#4,1(a0)
00011B1E 117C 0028 0019             		move.b	#$28,$19(a0)
00011B24 7000                       		moveq	#0,d0
00011B26 1028 0028                  		move.b	$28(a0),d0	; get object type
00011B2A C0FC 003C                  		mulu.w	#60,d0		; multiply by 60 (1 second)
00011B2E 3140 0032                  		move.w	d0,$32(a0)	; set flap delay time
00011B32                            
00011B32                            Obj0C_OpenClose:			; XREF: Obj0C_Index
00011B32 5368 0030                  		subq.w	#1,$30(a0)	; subtract 1 from time delay
00011B36 6A00                       		bpl.s	Obj0C_Solid	; if time remains, branch
00011B38 3168 0032 0030             		move.w	$32(a0),$30(a0)	; reset	time delay
00011B3E 0868 0000 001C             		bchg	#0,$1C(a0)	; open/close door
00011B44 4A28 0001                  		tst.b	1(a0)
00011B48 6A00                       		bpl.s	Obj0C_Solid
00011B4A 303C 00BB                  		move.w	#$BB,d0
00011B4E 4EB9 0000 15C0             		jsr	(PlaySound_Special).l ;	play door sound
00011B54                            
00011B54                            Obj0C_Solid:
00011B54 43F9 0000 0000             		lea	(Ani_obj0C).l,a1
00011B5A 6100 932C                  		bsr.w	AnimateSprite
00011B5E 4238 F7C9                  		clr.b	($FFFFF7C9).w	; enable wind tunnel
00011B62 4A28 001A                  		tst.b	$1A(a0)		; is the door open?
00011B66 6600                       		bne.s	Obj0C_Display	; if yes, branch
00011B68 3038 D008                  		move.w	($FFFFD008).w,d0
00011B6C B068 0008                  		cmp.w	8(a0),d0	; is Sonic in front of the door?
00011B70 6400                       		bcc.s	Obj0C_Display	; if yes, branch
00011B72 11FC 0001 F7C9             		move.b	#1,($FFFFF7C9).w ; disable wind	tunnel
00011B78 323C 0013                  		move.w	#$13,d1
00011B7C 343C 0020                  		move.w	#$20,d2
00011B80 3602                       		move.w	d2,d3
00011B82 5243                       		addq.w	#1,d3
00011B84 3828 0008                  		move.w	8(a0),d4
00011B88 6100 E60E                  		bsr.w	SolidObject	; make the door	solid
00011B8C                            
00011B8C                            Obj0C_Display:
00011B8C 6000 E2E2                  		bra.w	MarkObjGone
00011B90                            ; ===========================================================================
00011B90                            Ani_obj0C:
00011B90                            	include "_anim\obj0C.asm"
00011B90                            ; ---------------------------------------------------------------------------
00011B90                            ; Animation script - flapping door (LZ)
00011B90                            ; ---------------------------------------------------------------------------
00011B90 0000                       		dc.w byte_113E6-Ani_obj0C
00011B92 0000                       		dc.w byte_113EC-Ani_obj0C
00011B94 0300 0102 FE01             byte_113E6:	dc.b 3,	0, 1, 2, $FE, 1
00011B9A 0302 0100 FE01             byte_113EC:	dc.b 3,	2, 1, 0, $FE, 1
00011BA0                            		even
00011BA0                            		even
00011BA0                            
00011BA0                            ; ---------------------------------------------------------------------------
00011BA0                            ; Sprite mappings - flapping door (LZ)
00011BA0                            ; ---------------------------------------------------------------------------
00011BA0                            Map_obj0C:
00011BA0                            	include "_maps\obj0C.asm"
00011BA0                            ; ---------------------------------------------------------------------------
00011BA0                            ; Sprite mappings - flapping door (LZ)
00011BA0                            ; ---------------------------------------------------------------------------
00011BA0 0000                       		dc.w byte_113F8-Map_obj0C
00011BA2 0000                       		dc.w byte_11403-Map_obj0C
00011BA4 0000                       		dc.w byte_1140E-Map_obj0C
00011BA6 02                         byte_113F8:	dc.b 2
00011BA7 E007 0000 F8               		dc.b $E0, 7, 0,	0, $F8
00011BAC 0007 1000 F8               		dc.b 0,	7, $10,	0, $F8
00011BB1 02                         byte_11403:	dc.b 2
00011BB2 DA0F 0008 FB               		dc.b $DA, $F, 0, 8, $FB
00011BB7 060F 1008 FB               		dc.b 6,	$F, $10, 8, $FB
00011BBC 02                         byte_1140E:	dc.b 2
00011BBD D80D 0018 00               		dc.b $D8, $D, 0, $18, 0
00011BC2 180D 1018 00               		dc.b $18, $D, $10, $18,	0
00011BC8 00                         		even
00011BC8 00                         		even
00011BC8                            
00011BC8                            ; ===========================================================================
00011BC8                            ; ---------------------------------------------------------------------------
00011BC8                            ; Object 71 - invisible	solid blocks
00011BC8                            ; ---------------------------------------------------------------------------
00011BC8                            
00011BC8                            Obj71:					; XREF: Obj_Index
00011BC8 7000                       		moveq	#0,d0
00011BCA 1028 0024                  		move.b	$24(a0),d0
00011BCE 323B 0000                  		move.w	Obj71_Index(pc,d0.w),d1
00011BD2 4EFB 1000                  		jmp	Obj71_Index(pc,d1.w)
00011BD6                            ; ===========================================================================
00011BD6 0000                       Obj71_Index:	dc.w Obj71_Main-Obj71_Index
00011BD8 0000                       		dc.w Obj71_Solid-Obj71_Index
00011BDA                            ; ===========================================================================
00011BDA                            
00011BDA                            Obj71_Main:				; XREF: Obj71_Index
00011BDA 5428 0024                  		addq.b	#2,$24(a0)
00011BDE 217C 0000 0000 0004        		move.l	#Map_obj71,4(a0)
00011BE6 317C 8680 0002             		move.w	#$8680,2(a0)
00011BEC 0028 0004 0001             		ori.b	#4,1(a0)
00011BF2 1028 0028                  		move.b	$28(a0),d0	; get object type
00011BF6 1200                       		move.b	d0,d1
00011BF8 0240 00F0                  		andi.w	#$F0,d0		; read only the	1st byte
00011BFC 0640 0010                  		addi.w	#$10,d0
00011C00 E248                       		lsr.w	#1,d0
00011C02 1140 0019                  		move.b	d0,$19(a0)	; set object width
00011C06 0241 000F                  		andi.w	#$F,d1		; read only the	2nd byte
00011C0A 5241                       		addq.w	#1,d1
00011C0C E749                       		lsl.w	#3,d1
00011C0E 1141 0016                  		move.b	d1,$16(a0)	; set object height
00011C12                            
00011C12                            Obj71_Solid:				; XREF: Obj71_Index
00011C12 6100 C42E                  		bsr.w	ChkObjOnScreen
00011C16 6600                       		bne.s	Obj71_ChkDel
00011C18 7200                       		moveq	#0,d1
00011C1A 1228 0019                  		move.b	$19(a0),d1
00011C1E 0641 000B                  		addi.w	#$B,d1
00011C22 7400                       		moveq	#0,d2
00011C24 1428 0016                  		move.b	$16(a0),d2
00011C28 3602                       		move.w	d2,d3
00011C2A 5243                       		addq.w	#1,d3
00011C2C 3828 0008                  		move.w	8(a0),d4
00011C30 6100 E5A8                  		bsr.w	SolidObject71
00011C34                            
00011C34                            Obj71_ChkDel:
00011C34 3028 0008                  		move.w	8(a0),d0
00011C38 0240 FF80                  		andi.w	#$FF80,d0
00011C3C 3238 F700                  		move.w	($FFFFF700).w,d1
00011C40 0441 0080                  		subi.w	#$80,d1
00011C44 0241 FF80                  		andi.w	#$FF80,d1
00011C48 9041                       		sub.w	d1,d0
00011C4A 0C40 0280                  		cmpi.w	#$280,d0
00011C4E 6200                       		bhi.s	Obj71_Delete
00011C50 4A78 FE08                  		tst.w	($FFFFFE08).w	; are you using	debug mode?
00011C54 6700                       		beq.s	Obj71_NoDisplay	; if not, branch
00011C56 4EFA C170                  		jmp	DisplaySprite	; if yes, display the object
00011C5A                            ; ===========================================================================
00011C5A                            
00011C5A                            Obj71_NoDisplay:
00011C5A 4E75                       		rts	
00011C5C                            ; ===========================================================================
00011C5C                            
00011C5C                            Obj71_Delete:
00011C5C 4EFA C1A6                  		jmp	DeleteObject
00011C60                            ; ===========================================================================
00011C60                            ; ---------------------------------------------------------------------------
00011C60                            ; Sprite mappings - invisible solid blocks
00011C60                            ; ---------------------------------------------------------------------------
00011C60                            Map_obj71:
00011C60                            	include "_maps\obj71.asm"
00011C60                            ; ---------------------------------------------------------------------------
00011C60                            ; Sprite mappings - invisible solid blocks
00011C60                            ; ---------------------------------------------------------------------------
00011C60 0000                       		dc.w byte_114BC-Map_obj71
00011C62 0000                       		dc.w byte_114D1-Map_obj71
00011C64 0000                       		dc.w byte_114E6-Map_obj71
00011C66 04                         byte_114BC:	dc.b 4
00011C67 F005 0018 F0               		dc.b $F0, 5, 0,	$18, $F0
00011C6C F005 0018 00               		dc.b $F0, 5, 0,	$18, 0
00011C71 0005 0018 F0               		dc.b 0,	5, 0, $18, $F0
00011C76 0005 0018 00               		dc.b 0,	5, 0, $18, 0
00011C7B 04                         byte_114D1:	dc.b 4
00011C7C E005 0018 C0               		dc.b $E0, 5, 0,	$18, $C0
00011C81 E005 0018 30               		dc.b $E0, 5, 0,	$18, $30
00011C86 1005 0018 C0               		dc.b $10, 5, 0,	$18, $C0
00011C8B 1005 0018 30               		dc.b $10, 5, 0,	$18, $30
00011C90 04                         byte_114E6:	dc.b 4
00011C91 E005 0018 80               		dc.b $E0, 5, 0,	$18, $80
00011C96 E005 0018 70               		dc.b $E0, 5, 0,	$18, $70
00011C9B 1005 0018 80               		dc.b $10, 5, 0,	$18, $80
00011CA0 1005 0018 70               		dc.b $10, 5, 0,	$18, $70
00011CA6 00                         		even
00011CA6 00                         		even
00011CA6                            
00011CA6                            ; ===========================================================================
00011CA6                            ; ---------------------------------------------------------------------------
00011CA6                            ; Object 5D - fans (SLZ)
00011CA6                            ; ---------------------------------------------------------------------------
00011CA6                            
00011CA6                            Obj5D:					; XREF: Obj_Index
00011CA6 7000                       		moveq	#0,d0
00011CA8 1028 0024                  		move.b	$24(a0),d0
00011CAC 323B 0000                  		move.w	Obj5D_Index(pc,d0.w),d1
00011CB0 4EFB 1000                  		jmp	Obj5D_Index(pc,d1.w)
00011CB4                            ; ===========================================================================
00011CB4 0000                       Obj5D_Index:	dc.w Obj5D_Main-Obj5D_Index
00011CB6 0000                       		dc.w Obj5D_Delay-Obj5D_Index
00011CB8                            ; ===========================================================================
00011CB8                            
00011CB8                            Obj5D_Main:				; XREF: Obj5D_Index
00011CB8 5428 0024                  		addq.b	#2,$24(a0)
00011CBC 217C 0000 0000 0004        		move.l	#Map_obj5D,4(a0)
00011CC4 317C 43A0 0002             		move.w	#$43A0,2(a0)
00011CCA 0028 0004 0001             		ori.b	#4,1(a0)
00011CD0 117C 0010 0019             		move.b	#$10,$19(a0)
00011CD6 117C 0004 0018             		move.b	#4,$18(a0)
00011CDC                            
00011CDC                            Obj5D_Delay:				; XREF: Obj5D_Index
00011CDC 0828 0001 0028             		btst	#1,$28(a0)	; is object type 02/03?
00011CE2 6600                       		bne.s	Obj5D_Blow	; if yes, branch
00011CE4 5368 0030                  		subq.w	#1,$30(a0)	; subtract 1 from time delay
00011CE8 6A00                       		bpl.s	Obj5D_Blow	; if time remains, branch
00011CEA 317C 0078 0030             		move.w	#120,$30(a0)	; set delay to 2 seconds
00011CF0 0868 0000 0032             		bchg	#0,$32(a0)	; switch fan on/off
00011CF6 6700                       		beq.s	Obj5D_Blow	; if fan is off, branch
00011CF8 317C 00B4 0030             		move.w	#180,$30(a0)	; set delay to 3 seconds
00011CFE                            
00011CFE                            Obj5D_Blow:
00011CFE 4A28 0032                  		tst.b	$32(a0)		; is fan switched on?
00011D02 6600 0000                  		bne.w	Obj5D_ChkDel	; if not, branch
00011D06 43F8 D000                  		lea	($FFFFD000).w,a1
00011D0A 3029 0008                  		move.w	8(a1),d0
00011D0E 9068 0008                  		sub.w	8(a0),d0
00011D12 0828 0000 0022             		btst	#0,$22(a0)
00011D18 6600                       		bne.s	Obj5D_ChkSonic
00011D1A 4440                       		neg.w	d0
00011D1C                            
00011D1C                            Obj5D_ChkSonic:
00011D1C 0640 0050                  		addi.w	#$50,d0
00011D20 0C40 00F0                  		cmpi.w	#$F0,d0		; is Sonic more	than $A0 pixels	from the fan?
00011D24 6400                       		bcc.s	Obj5D_Animate	; if yes, branch
00011D26 3229 000C                  		move.w	$C(a1),d1
00011D2A 0641 0060                  		addi.w	#$60,d1
00011D2E 9268 000C                  		sub.w	$C(a0),d1
00011D32 6500                       		bcs.s	Obj5D_Animate
00011D34 0C41 0070                  		cmpi.w	#$70,d1
00011D38 6400                       		bcc.s	Obj5D_Animate
00011D3A 0440 0050                  		subi.w	#$50,d0
00011D3E 6400                       		bcc.s	loc_1159A
00011D40 4640                       		not.w	d0
00011D42 D040                       		add.w	d0,d0
00011D44                            
00011D44                            loc_1159A:
00011D44 0640 0060                  		addi.w	#$60,d0
00011D48 0828 0000 0022             		btst	#0,$22(a0)
00011D4E 6600                       		bne.s	loc_115A8
00011D50 4440                       		neg.w	d0
00011D52                            
00011D52                            loc_115A8:
00011D52 4400                       		neg.b	d0
00011D54 E840                       		asr.w	#4,d0
00011D56 0828 0000 0028             		btst	#0,$28(a0)
00011D5C 6700                       		beq.s	Obj5D_MoveSonic
00011D5E 4440                       		neg.w	d0
00011D60                            
00011D60                            Obj5D_MoveSonic:
00011D60 D169 0008                  		add.w	d0,8(a1)	; push Sonic away from the fan
00011D64                            
00011D64                            Obj5D_Animate:				; XREF: Obj5D_ChkSonic
00011D64 5328 001E                  		subq.b	#1,$1E(a0)
00011D68 6A00                       		bpl.s	Obj5D_ChkDel
00011D6A 117C 0000 001E             		move.b	#0,$1E(a0)
00011D70 5228 001B                  		addq.b	#1,$1B(a0)
00011D74 0C28 0003 001B             		cmpi.b	#3,$1B(a0)
00011D7A 6500                       		bcs.s	loc_115D8
00011D7C 117C 0000 001B             		move.b	#0,$1B(a0)
00011D82                            
00011D82                            loc_115D8:
00011D82 7000                       		moveq	#0,d0
00011D84 0828 0000 0028             		btst	#0,$28(a0)
00011D8A 6700                       		beq.s	loc_115E4
00011D8C 7002                       		moveq	#2,d0
00011D8E                            
00011D8E                            loc_115E4:
00011D8E D028 001B                  		add.b	$1B(a0),d0
00011D92 1140 001A                  		move.b	d0,$1A(a0)
00011D96                            
00011D96                            Obj5D_ChkDel:				; XREF: Obj5D_Animate
00011D96 6100 C030                  		bsr.w	DisplaySprite
00011D9A 3028 0008                  		move.w	8(a0),d0
00011D9E 0240 FF80                  		andi.w	#$FF80,d0
00011DA2 3238 F700                  		move.w	($FFFFF700).w,d1
00011DA6 0441 0080                  		subi.w	#$80,d1
00011DAA 0241 FF80                  		andi.w	#$FF80,d1
00011DAE 9041                       		sub.w	d1,d0
00011DB0 0C40 0280                  		cmpi.w	#$280,d0
00011DB4 6200 C04E                  		bhi.w	DeleteObject
00011DB8 4E75                       		rts	
00011DBA                            ; ===========================================================================
00011DBA                            ; ---------------------------------------------------------------------------
00011DBA                            ; Sprite mappings - fans (SLZ)
00011DBA                            ; ---------------------------------------------------------------------------
00011DBA                            Map_obj5D:
00011DBA                            	include "_maps\obj5D.asm"
00011DBA                            ; ---------------------------------------------------------------------------
00011DBA                            ; Sprite mappings - fans (SLZ)
00011DBA                            ; ---------------------------------------------------------------------------
00011DBA 0000 0000                  		dc.w byte_1161A-Map_obj5D, byte_11625-Map_obj5D
00011DBE 0000 0000                  		dc.w byte_11630-Map_obj5D, byte_11625-Map_obj5D
00011DC2 0000                       		dc.w byte_1161A-Map_obj5D
00011DC4 02                         byte_1161A:	dc.b 2
00011DC5 F009 0000 F8               		dc.b $F0, 9, 0,	0, $F8
00011DCA 000D 0006 F0               		dc.b 0,	$D, 0, 6, $F0
00011DCF 02                         byte_11625:	dc.b 2
00011DD0 F00D 000E F0               		dc.b $F0, $D, 0, $E, $F0
00011DD5 000D 0016 F0               		dc.b 0,	$D, 0, $16, $F0
00011DDA 02                         byte_11630:	dc.b 2
00011DDB F00D 001E F0               		dc.b $F0, $D, 0, $1E, $F0
00011DE0 0009 0026 F8               		dc.b 0,	9, 0, $26, $F8
00011DE6 00                         		even
00011DE6 00                         		even
00011DE6                            
00011DE6                            ; ===========================================================================
00011DE6                            ; ---------------------------------------------------------------------------
00011DE6                            ; Object 5E - seesaws (SLZ)
00011DE6                            ; ---------------------------------------------------------------------------
00011DE6                            
00011DE6                            Obj5E:					; XREF: Obj_Index
00011DE6 7000                       		moveq	#0,d0
00011DE8 1028 0024                  		move.b	$24(a0),d0
00011DEC 323B 0000                  		move.w	Obj5E_Index(pc,d0.w),d1
00011DF0 4EBB 1000                  		jsr	Obj5E_Index(pc,d1.w)
00011DF4 3028 0030                  		move.w	$30(a0),d0
00011DF8 0240 FF80                  		andi.w	#$FF80,d0
00011DFC 3238 F700                  		move.w	($FFFFF700).w,d1
00011E00 0441 0080                  		subi.w	#$80,d1
00011E04 0241 FF80                  		andi.w	#$FF80,d1
00011E08 9041                       		sub.w	d1,d0
00011E0A 6B00 BFF8                  		bmi.w	DeleteObject
00011E0E 0C40 0280                  		cmpi.w	#$280,d0
00011E12 6200 BFF0                  		bhi.w	DeleteObject
00011E16 6000 BFB0                  		bra.w	DisplaySprite
00011E1A                            ; ===========================================================================
00011E1A 0000                       Obj5E_Index:	dc.w Obj5E_Main-Obj5E_Index
00011E1C 0000                       		dc.w Obj5E_Slope-Obj5E_Index
00011E1E 0000                       		dc.w Obj5E_Slope2-Obj5E_Index
00011E20 0000                       		dc.w Obj5E_Spikeball-Obj5E_Index
00011E22 0000                       		dc.w Obj5E_MoveSpike-Obj5E_Index
00011E24 0000                       		dc.w Obj5E_SpikeFall-Obj5E_Index
00011E26                            ; ===========================================================================
00011E26                            
00011E26                            Obj5E_Main:				; XREF: Obj5E_Index
00011E26 5428 0024                  		addq.b	#2,$24(a0)
00011E2A 217C 0000 0000 0004        		move.l	#Map_obj5E,4(a0)
00011E32 317C 0374 0002             		move.w	#$374,2(a0)
00011E38 0028 0004 0001             		ori.b	#4,1(a0)
00011E3E 117C 0004 0018             		move.b	#4,$18(a0)
00011E44 117C 0030 0019             		move.b	#$30,$19(a0)
00011E4A 3168 0008 0030             		move.w	8(a0),$30(a0)
00011E50 4A28 0028                  		tst.b	$28(a0)		; is object type 00 ?
00011E54 6600                       		bne.s	loc_116D2	; if not, branch
00011E56 6100 C40C                  		bsr.w	SingleObjLoad2
00011E5A 6600                       		bne.s	loc_116D2
00011E5C 12BC 005E                  		move.b	#$5E,0(a1)	; load spikeball object
00011E60 5C29 0024                  		addq.b	#6,$24(a1)
00011E64 3368 0008 0008             		move.w	8(a0),8(a1)
00011E6A 3368 000C 000C             		move.w	$C(a0),$C(a1)
00011E70 1368 0022 0022             		move.b	$22(a0),$22(a1)
00011E76 2348 003C                  		move.l	a0,$3C(a1)
00011E7A                            
00011E7A                            loc_116D2:
00011E7A 0828 0000 0022             		btst	#0,$22(a0)
00011E80 6700                       		beq.s	loc_116E0
00011E82 117C 0002 001A             		move.b	#2,$1A(a0)
00011E88                            
00011E88                            loc_116E0:
00011E88 1168 001A 003A             		move.b	$1A(a0),$3A(a0)
00011E8E                            
00011E8E                            Obj5E_Slope:				; XREF: Obj5E_Index
00011E8E 1228 003A                  		move.b	$3A(a0),d1
00011E92 6100 0000                  		bsr.w	loc_11766
00011E96 45F9 0000 0000             		lea	(Obj5E_Data1).l,a2
00011E9C 0828 0000 001A             		btst	#0,$1A(a0)
00011EA2 6700                       		beq.s	loc_11702
00011EA4 45F9 0000 0000             		lea	(Obj5E_Data2).l,a2
00011EAA                            
00011EAA                            loc_11702:
00011EAA 43F8 D000                  		lea	($FFFFD000).w,a1
00011EAE 3169 0012 0038             		move.w	$12(a1),$38(a0)
00011EB4 323C 0030                  		move.w	#$30,d1
00011EB8 4EB9 0000 7B1C             		jsr	(SlopeObject).l
00011EBE 4E75                       		rts	
00011EC0                            ; ===========================================================================
00011EC0                            
00011EC0                            Obj5E_Slope2:				; XREF: Obj5E_Index
00011EC0 6100 0000                  		bsr.w	loc_1174A
00011EC4 45F9 0000 0000             		lea	(Obj5E_Data1).l,a2
00011ECA 0828 0000 001A             		btst	#0,$1A(a0)
00011ED0 6700                       		beq.s	loc_11730
00011ED2 45F9 0000 0000             		lea	(Obj5E_Data2).l,a2
00011ED8                            
00011ED8                            loc_11730:
00011ED8 323C 0030                  		move.w	#$30,d1
00011EDC 4EB9 0000 7BBC             		jsr	(ExitPlatform).l
00011EE2 323C 0030                  		move.w	#$30,d1
00011EE6 3428 0008                  		move.w	8(a0),d2
00011EEA 4EB9 0000 8BAC             		jsr	SlopeObject2
00011EF0 4E75                       		rts	
00011EF2                            ; ===========================================================================
00011EF2                            
00011EF2                            loc_1174A:				; XREF: Obj5E_Slope2
00011EF2 7202                       		moveq	#2,d1
00011EF4 43F8 D000                  		lea	($FFFFD000).w,a1
00011EF8 3028 0008                  		move.w	8(a0),d0
00011EFC 9069 0008                  		sub.w	8(a1),d0
00011F00 6400                       		bcc.s	loc_1175E
00011F02 4440                       		neg.w	d0
00011F04 7200                       		moveq	#0,d1
00011F06                            
00011F06                            loc_1175E:
00011F06 0C40 0008                  		cmpi.w	#8,d0
00011F0A 6400                       		bcc.s	loc_11766
00011F0C 7201                       		moveq	#1,d1
00011F0E                            
00011F0E                            loc_11766:
00011F0E 1028 001A                  		move.b	$1A(a0),d0
00011F12 B001                       		cmp.b	d1,d0
00011F14 6700                       		beq.s	locret_11790
00011F16 6400                       		bcc.s	loc_11772
00011F18 5400                       		addq.b	#2,d0
00011F1A                            
00011F1A                            loc_11772:
00011F1A 5300                       		subq.b	#1,d0
00011F1C 1140 001A                  		move.b	d0,$1A(a0)
00011F20 1141 003A                  		move.b	d1,$3A(a0)
00011F24 08A8 0000 0001             		bclr	#0,1(a0)
00011F2A 0828 0001 001A             		btst	#1,$1A(a0)
00011F30 6700                       		beq.s	locret_11790
00011F32 08E8 0000 0001             		bset	#0,1(a0)
00011F38                            
00011F38                            locret_11790:
00011F38 4E75                       		rts	
00011F3A                            ; ===========================================================================
00011F3A                            
00011F3A                            Obj5E_Spikeball:			; XREF: Obj5E_Index
00011F3A 5428 0024                  		addq.b	#2,$24(a0)
00011F3E 217C 0000 0000 0004        		move.l	#Map_obj5Ea,4(a0)
00011F46 317C 04F0 0002             		move.w	#$4F0,2(a0)
00011F4C 0028 0004 0001             		ori.b	#4,1(a0)
00011F52 117C 0004 0018             		move.b	#4,$18(a0)
00011F58 117C 008B 0020             		move.b	#$8B,$20(a0)
00011F5E 117C 000C 0019             		move.b	#$C,$19(a0)
00011F64 3168 0008 0030             		move.w	8(a0),$30(a0)
00011F6A 0668 0028 0008             		addi.w	#$28,8(a0)
00011F70 3168 000C 0034             		move.w	$C(a0),$34(a0)
00011F76 117C 0001 001A             		move.b	#1,$1A(a0)
00011F7C 0828 0000 0022             		btst	#0,$22(a0)
00011F82 6700                       		beq.s	Obj5E_MoveSpike
00011F84 0468 0050 0008             		subi.w	#$50,8(a0)
00011F8A 117C 0002 003A             		move.b	#2,$3A(a0)
00011F90                            
00011F90                            Obj5E_MoveSpike:			; XREF: Obj5E_Index
00011F90 2268 003C                  		movea.l	$3C(a0),a1
00011F94 7000                       		moveq	#0,d0
00011F96 1028 003A                  		move.b	$3A(a0),d0
00011F9A 9029 003A                  		sub.b	$3A(a1),d0
00011F9E 6700                       		beq.s	loc_1183E
00011FA0 6400                       		bcc.s	loc_117FC
00011FA2 4400                       		neg.b	d0
00011FA4                            
00011FA4                            loc_117FC:
00011FA4 323C F7E8                  		move.w	#-$818,d1
00011FA8 343C FEEC                  		move.w	#-$114,d2
00011FAC 0C00 0001                  		cmpi.b	#1,d0
00011FB0 6700                       		beq.s	loc_11822
00011FB2 323C F510                  		move.w	#-$AF0,d1
00011FB6 343C FF34                  		move.w	#-$CC,d2
00011FBA 0C69 0A00 0038             		cmpi.w	#$A00,$38(a1)
00011FC0 6D00                       		blt.s	loc_11822
00011FC2 323C F200                  		move.w	#-$E00,d1
00011FC6 343C FF60                  		move.w	#-$A0,d2
00011FCA                            
00011FCA                            loc_11822:
00011FCA 3141 0012                  		move.w	d1,$12(a0)
00011FCE 3142 0010                  		move.w	d2,$10(a0)
00011FD2 3028 0008                  		move.w	8(a0),d0
00011FD6 9068 0030                  		sub.w	$30(a0),d0
00011FDA 6400                       		bcc.s	loc_11838
00011FDC 4468 0010                  		neg.w	$10(a0)
00011FE0                            
00011FE0                            loc_11838:
00011FE0 5428 0024                  		addq.b	#2,$24(a0)
00011FE4 6000                       		bra.s	Obj5E_SpikeFall
00011FE6                            ; ===========================================================================
00011FE6                            
00011FE6                            loc_1183E:				; XREF: Obj5E_MoveSpike
00011FE6 45F9 0000 0000             		lea	(Obj5E_Speeds).l,a2
00011FEC 7000                       		moveq	#0,d0
00011FEE 1029 001A                  		move.b	$1A(a1),d0
00011FF2 343C 0028                  		move.w	#$28,d2
00011FF6 3228 0008                  		move.w	8(a0),d1
00011FFA 9268 0030                  		sub.w	$30(a0),d1
00011FFE 6400                       		bcc.s	loc_1185C
00012000 4442                       		neg.w	d2
00012002 5440                       		addq.w	#2,d0
00012004                            
00012004                            loc_1185C:
00012004 D040                       		add.w	d0,d0
00012006 3228 0034                  		move.w	$34(a0),d1
0001200A D272 0000                  		add.w	(a2,d0.w),d1
0001200E 3141 000C                  		move.w	d1,$C(a0)
00012012 D468 0030                  		add.w	$30(a0),d2
00012016 3142 0008                  		move.w	d2,8(a0)
0001201A 4268 000E                  		clr.w	$E(a0)
0001201E 4268 000A                  		clr.w	$A(a0)
00012022 4E75                       		rts	
00012024                            ; ===========================================================================
00012024                            
00012024                            Obj5E_SpikeFall:			; XREF: Obj5E_Index
00012024 4A68 0012                  		tst.w	$12(a0)
00012028 6A00                       		bpl.s	loc_1189A
0001202A 6100 BD4A                  		bsr.w	ObjectFall
0001202E 3028 0034                  		move.w	$34(a0),d0
00012032 0440 002F                  		subi.w	#$2F,d0
00012036 B068 000C                  		cmp.w	$C(a0),d0
0001203A 6E00                       		bgt.s	locret_11898
0001203C 6100 BD38                  		bsr.w	ObjectFall
00012040                            
00012040                            locret_11898:
00012040 4E75                       		rts	
00012042                            ; ===========================================================================
00012042                            
00012042                            loc_1189A:				; XREF: Obj5E_SpikeFall
00012042 6100 BD32                  		bsr.w	ObjectFall
00012046 2268 003C                  		movea.l	$3C(a0),a1
0001204A 45F9 0000 0000             		lea	(Obj5E_Speeds).l,a2
00012050 7000                       		moveq	#0,d0
00012052 1029 001A                  		move.b	$1A(a1),d0
00012056 3228 0008                  		move.w	8(a0),d1
0001205A 9268 0030                  		sub.w	$30(a0),d1
0001205E 6400                       		bcc.s	loc_118BA
00012060 5440                       		addq.w	#2,d0
00012062                            
00012062                            loc_118BA:
00012062 D040                       		add.w	d0,d0
00012064 3228 0034                  		move.w	$34(a0),d1
00012068 D272 0000                  		add.w	(a2,d0.w),d1
0001206C B268 000C                  		cmp.w	$C(a0),d1
00012070 6E00                       		bgt.s	locret_11938
00012072 2268 003C                  		movea.l	$3C(a0),a1
00012076 7202                       		moveq	#2,d1
00012078 4A68 0010                  		tst.w	$10(a0)
0001207C 6B00                       		bmi.s	Obj5E_Spring
0001207E 7200                       		moveq	#0,d1
00012080                            
00012080                            Obj5E_Spring:
00012080 1341 003A                  		move.b	d1,$3A(a1)
00012084 1141 003A                  		move.b	d1,$3A(a0)
00012088 B229 001A                  		cmp.b	$1A(a1),d1
0001208C 6700                       		beq.s	loc_1192C
0001208E 08A9 0003 0022             		bclr	#3,$22(a1)
00012094 6700                       		beq.s	loc_1192C
00012096 4229 0025                  		clr.b	$25(a1)
0001209A 137C 0002 0024             		move.b	#2,$24(a1)
000120A0 45F8 D000                  		lea	($FFFFD000).w,a2
000120A4 3568 0012 0012             		move.w	$12(a0),$12(a2)
000120AA 446A 0012                  		neg.w	$12(a2)
000120AE 08EA 0001 0022             		bset	#1,$22(a2)
000120B4 08AA 0003 0022             		bclr	#3,$22(a2)
000120BA 422A 003C                  		clr.b	$3C(a2)
000120BE 157C 0010 001C             		move.b	#$10,$1C(a2)	; change Sonic's animation to "spring" ($10)
000120C4 157C 0002 0024             		move.b	#2,$24(a2)
000120CA 303C 00CC                  		move.w	#$CC,d0
000120CE 4EB9 0000 15C0             		jsr	(PlaySound_Special).l ;	play spring sound
000120D4                            
000120D4                            loc_1192C:
000120D4 4268 0010                  		clr.w	$10(a0)
000120D8 4268 0012                  		clr.w	$12(a0)
000120DC 5528 0024                  		subq.b	#2,$24(a0)
000120E0                            
000120E0                            locret_11938:
000120E0 4E75                       		rts	
000120E2                            ; ===========================================================================
000120E2 FFF8 FFE4 FFD1 FFE4 FFF8   Obj5E_Speeds:	dc.w $FFF8, $FFE4, $FFD1, $FFE4, $FFF8
000120EC                            
000120EC                            Obj5E_Data1:	incbin	misc\slzssaw1.bin
0001211C                            		even
0001211C                            Obj5E_Data2:	incbin	misc\slzssaw2.bin
0001214C                            		even
0001214C                            ; ---------------------------------------------------------------------------
0001214C                            ; Sprite mappings - seesaws (SLZ)
0001214C                            ; ---------------------------------------------------------------------------
0001214C                            Map_obj5E:
0001214C                            	include "_maps\obj5E.asm"
0001214C                            ; ---------------------------------------------------------------------------
0001214C                            ; Sprite mappings - seesaws (SLZ)
0001214C                            ; ---------------------------------------------------------------------------
0001214C 0000 0000                  		dc.w byte_119AC-Map_obj5E, byte_119D0-Map_obj5E
00012150 0000 0000                  		dc.w byte_119AC-Map_obj5E, byte_119D0-Map_obj5E
00012154 07                         byte_119AC:	dc.b 7
00012155 D406 0000 D3               		dc.b $D4, 6, 0,	0, $D3
0001215A DC06 0006 E3               		dc.b $DC, 6, 0,	6, $E3
0001215F E404 000C F3               		dc.b $E4, 4, 0,	$C, $F3
00012164 EC0D 000E F3               		dc.b $EC, $D, 0, $E, $F3
00012169 FC08 0016 FB               		dc.b $FC, 8, 0,	$16, $FB
0001216E F406 0006 13               		dc.b $F4, 6, 0,	6, $13
00012173 FC05 0019 23               		dc.b $FC, 5, 0,	$19, $23
00012178 04                         byte_119D0:	dc.b 4
00012179 E60A 001D D0               		dc.b $E6, $A, 0, $1D, $D0
0001217E E60A 0023 E8               		dc.b $E6, $A, 0, $23, $E8
00012183 E60A 0823 00               		dc.b $E6, $A, 8, $23, 0
00012188 E60A 081D 18               		dc.b $E6, $A, 8, $1D, $18
0001218E 00                         		even
0001218E 00                         		even
0001218E                            
0001218E                            ; ---------------------------------------------------------------------------
0001218E                            ; Sprite mappings - spiked balls on the	seesaws	(SLZ)
0001218E                            ; ---------------------------------------------------------------------------
0001218E                            Map_obj5Ea:
0001218E                            	include "_maps\obj5Eballs.asm"
0001218E                            ; ---------------------------------------------------------------------------
0001218E                            ; Sprite mappings - spiked balls on the	seesaws	(SLZ)
0001218E                            ; ---------------------------------------------------------------------------
0001218E 0000                       		dc.w byte_119EA-Map_obj5Ea
00012190 0000                       		dc.w byte_119F0-Map_obj5Ea
00012192 01                         byte_119EA:	dc.b 1
00012193 F40A 0000 F4               		dc.b $F4, $A, 0, 0, $F4
00012198 01                         byte_119F0:	dc.b 1
00012199 F40A 0009 F4               		dc.b $F4, $A, 0, 9, $F4
0001219E                            		even
0001219E                            		even
0001219E                            
0001219E                            ; ===========================================================================
0001219E                            ; ---------------------------------------------------------------------------
0001219E                            ; Object 5F - walking bomb enemy (SLZ, SBZ)
0001219E                            ; ---------------------------------------------------------------------------
0001219E                            
0001219E                            Obj5F:					; XREF: Obj_Index
0001219E 7000                       		moveq	#0,d0
000121A0 1028 0024                  		move.b	$24(a0),d0
000121A4 323B 0000                  		move.w	Obj5F_Index(pc,d0.w),d1
000121A8 4EFB 1000                  		jmp	Obj5F_Index(pc,d1.w)
000121AC                            ; ===========================================================================
000121AC 0000                       Obj5F_Index:	dc.w Obj5F_Main-Obj5F_Index
000121AE 0000                       		dc.w Obj5F_Action-Obj5F_Index
000121B0 0000                       		dc.w Obj5F_Display-Obj5F_Index
000121B2 0000                       		dc.w Obj5F_End-Obj5F_Index
000121B4                            ; ===========================================================================
000121B4                            
000121B4                            Obj5F_Main:				; XREF: Obj5F_Index
000121B4 5428 0024                  		addq.b	#2,$24(a0)
000121B8 217C 0000 0000 0004        		move.l	#Map_obj5F,4(a0)
000121C0 317C 0400 0002             		move.w	#$400,2(a0)
000121C6 0028 0004 0001             		ori.b	#4,1(a0)
000121CC 117C 0003 0018             		move.b	#3,$18(a0)
000121D2 117C 000C 0019             		move.b	#$C,$19(a0)
000121D8 1028 0028                  		move.b	$28(a0),d0
000121DC 6700                       		beq.s	loc_11A3C
000121DE 1140 0024                  		move.b	d0,$24(a0)
000121E2 4E75                       		rts	
000121E4                            ; ===========================================================================
000121E4                            
000121E4                            loc_11A3C:
000121E4 117C 009A 0020             		move.b	#$9A,$20(a0)
000121EA 0868 0000 0022             		bchg	#0,$22(a0)
000121F0                            
000121F0                            Obj5F_Action:				; XREF: Obj5F_Index
000121F0 7000                       		moveq	#0,d0
000121F2 1028 0025                  		move.b	$25(a0),d0
000121F6 323B 0000                  		move.w	Obj5F_Index2(pc,d0.w),d1
000121FA 4EBB 1000                  		jsr	Obj5F_Index2(pc,d1.w)
000121FE 43F9 0000 0000             		lea	(Ani_obj5F).l,a1
00012204 6100 8C82                  		bsr.w	AnimateSprite
00012208 6000 DC66                  		bra.w	MarkObjGone
0001220C                            ; ===========================================================================
0001220C 0000                       Obj5F_Index2:	dc.w Obj5F_Walk-Obj5F_Index2
0001220E 0000                       		dc.w Obj5F_Wait-Obj5F_Index2
00012210 0000                       		dc.w Obj5F_Explode-Obj5F_Index2
00012212                            ; ===========================================================================
00012212                            
00012212                            Obj5F_Walk:				; XREF: Obj5F_Index2
00012212 6100 0000                  		bsr.w	Obj5F_ChkSonic
00012216 5368 0030                  		subq.w	#1,$30(a0)	; subtract 1 from time delay
0001221A 6A00                       		bpl.s	locret_11A96	; if time remains, branch
0001221C 5428 0025                  		addq.b	#2,$25(a0)
00012220 317C 05FF 0030             		move.w	#1535,$30(a0)	; set time delay to 25 seconds
00012226 317C 0010 0010             		move.w	#$10,$10(a0)
0001222C 117C 0001 001C             		move.b	#1,$1C(a0)
00012232 0868 0000 0022             		bchg	#0,$22(a0)
00012238 6700                       		beq.s	locret_11A96
0001223A 4468 0010                  		neg.w	$10(a0)		; change direction
0001223E                            
0001223E                            locret_11A96:
0001223E 4E75                       		rts	
00012240                            ; ===========================================================================
00012240                            
00012240                            Obj5F_Wait:				; XREF: Obj5F_Index2
00012240 6100 0000                  		bsr.w	Obj5F_ChkSonic
00012244 5368 0030                  		subq.w	#1,$30(a0)	; subtract 1 from time delay
00012248 6B00                       		bmi.s	loc_11AA8
0001224A 6100 BB56                  		bsr.w	SpeedToPos
0001224E 4E75                       		rts	
00012250                            ; ===========================================================================
00012250                            
00012250                            loc_11AA8:
00012250 5528 0025                  		subq.b	#2,$25(a0)
00012254 317C 00B3 0030             		move.w	#179,$30(a0)	; set time delay to 3 seconds
0001225A 4268 0010                  		clr.w	$10(a0)		; stop walking
0001225E 117C 0000 001C             		move.b	#0,$1C(a0)	; stop animation
00012264 4E75                       		rts	
00012266                            ; ===========================================================================
00012266                            
00012266                            Obj5F_Explode:				; XREF: Obj5F_Index2
00012266 5368 0030                  		subq.w	#1,$30(a0)
0001226A 6A00                       		bpl.s	locret_11AD0
0001226C 10BC 003F                  		move.b	#$3F,0(a0)	; change bomb into an explosion
00012270 117C 0000 0024             		move.b	#0,$24(a0)
00012276                            
00012276                            locret_11AD0:
00012276 4E75                       		rts	
00012278                            ; ===========================================================================
00012278                            
00012278                            Obj5F_ChkSonic:				; XREF: Obj5F_Walk; Obj5F_Wait
00012278 3038 D008                  		move.w	($FFFFD008).w,d0
0001227C 9068 0008                  		sub.w	8(a0),d0
00012280 6400                       		bcc.s	loc_11ADE
00012282 4440                       		neg.w	d0
00012284                            
00012284                            loc_11ADE:
00012284 0C40 0060                  		cmpi.w	#$60,d0
00012288 6400                       		bcc.s	locret_11B5E
0001228A 3038 D00C                  		move.w	($FFFFD00C).w,d0
0001228E 9068 000C                  		sub.w	$C(a0),d0
00012292 6400                       		bcc.s	Obj5F_MakeFuse
00012294 4440                       		neg.w	d0
00012296                            
00012296                            Obj5F_MakeFuse:
00012296 0C40 0060                  		cmpi.w	#$60,d0
0001229A 6400                       		bcc.s	locret_11B5E
0001229C 4A78 FE08                  		tst.w	($FFFFFE08).w
000122A0 6600                       		bne.s	locret_11B5E
000122A2 117C 0004 0025             		move.b	#4,$25(a0)
000122A8 317C 008F 0030             		move.w	#143,$30(a0)	; set fuse time
000122AE 4268 0010                  		clr.w	$10(a0)
000122B2 117C 0002 001C             		move.b	#2,$1C(a0)
000122B8 6100 BFAA                  		bsr.w	SingleObjLoad2
000122BC 6600                       		bne.s	locret_11B5E
000122BE 12BC 005F                  		move.b	#$5F,0(a1)	; load fuse object
000122C2 3368 0008 0008             		move.w	8(a0),8(a1)
000122C8 3368 000C 000C             		move.w	$C(a0),$C(a1)
000122CE 3368 000C 0034             		move.w	$C(a0),$34(a1)
000122D4 1368 0022 0022             		move.b	$22(a0),$22(a1)
000122DA 137C 0004 0028             		move.b	#4,$28(a1)
000122E0 137C 0003 001C             		move.b	#3,$1C(a1)
000122E6 337C 0010 0012             		move.w	#$10,$12(a1)
000122EC 0828 0001 0022             		btst	#1,$22(a0)
000122F2 6700                       		beq.s	loc_11B54
000122F4 4469 0012                  		neg.w	$12(a1)
000122F8                            
000122F8                            loc_11B54:
000122F8 337C 008F 0030             		move.w	#143,$30(a1)	; set fuse time
000122FE 2348 003C                  		move.l	a0,$3C(a1)
00012302                            
00012302                            locret_11B5E:
00012302 4E75                       		rts	
00012304                            ; ===========================================================================
00012304                            
00012304                            Obj5F_Display:				; XREF: Obj5F_Index
00012304 6100                       		bsr.s	loc_11B70
00012306 43F9 0000 0000             		lea	(Ani_obj5F).l,a1
0001230C 6100 8B7A                  		bsr.w	AnimateSprite
00012310 6000 DB5E                  		bra.w	MarkObjGone
00012314                            ; ===========================================================================
00012314                            
00012314                            loc_11B70:
00012314 5368 0030                  		subq.w	#1,$30(a0)
00012318 6B00                       		bmi.s	loc_11B7C
0001231A 6100 BA86                  		bsr.w	SpeedToPos
0001231E 4E75                       		rts	
00012320                            ; ===========================================================================
00012320                            
00012320                            loc_11B7C:
00012320 4268 0030                  		clr.w	$30(a0)
00012324 4228 0024                  		clr.b	$24(a0)
00012328 3168 0034 000C             		move.w	$34(a0),$C(a0)
0001232E 7203                       		moveq	#3,d1
00012330 2248                       		movea.l	a0,a1
00012332 45F9 0000 0000             		lea	(Obj5F_ShrSpeed).l,a2 ;	load shrapnel speed data
00012338 6000                       		bra.s	Obj5F_MakeShrap
0001233A                            ; ===========================================================================
0001233A                            
0001233A                            Obj5F_Loop:
0001233A 6100 BF28                  		bsr.w	SingleObjLoad2
0001233E 6600                       		bne.s	loc_11BCE
00012340                            
00012340                            Obj5F_MakeShrap:			; XREF: loc_11B7C
00012340 12BC 005F                  		move.b	#$5F,0(a1)	; load shrapnel	object
00012344 3368 0008 0008             		move.w	8(a0),8(a1)
0001234A 3368 000C 000C             		move.w	$C(a0),$C(a1)
00012350 137C 0006 0028             		move.b	#6,$28(a1)
00012356 137C 0004 001C             		move.b	#4,$1C(a1)
0001235C 335A 0010                  		move.w	(a2)+,$10(a1)
00012360 335A 0012                  		move.w	(a2)+,$12(a1)
00012364 137C 0098 0020             		move.b	#$98,$20(a1)
0001236A 08E9 0007 0001             		bset	#7,1(a1)
00012370                            
00012370                            loc_11BCE:
00012370 51C9 FFC8                  		dbf	d1,Obj5F_Loop	; repeat 3 more	times
00012374                            
00012374 117C 0006 0024             		move.b	#6,$24(a0)
0001237A                            
0001237A                            Obj5F_End:				; XREF: Obj5F_Index
0001237A 6100 BA26                  		bsr.w	SpeedToPos
0001237E 0668 0018 0012             		addi.w	#$18,$12(a0)
00012384 43F9 0000 0000             		lea	(Ani_obj5F).l,a1
0001238A 6100 8AFC                  		bsr.w	AnimateSprite
0001238E 4A28 0001                  		tst.b	1(a0)
00012392 6A00 BA70                  		bpl.w	DeleteObject
00012396 6000 BA30                  		bra.w	DisplaySprite
0001239A                            ; ===========================================================================
0001239A FE00 FD00 FF00 FE00 0200+  Obj5F_ShrSpeed:	dc.w $FE00, $FD00, $FF00, $FE00, $200, $FD00, $100, $FE00
000123AA                            
000123AA                            Ani_obj5F:
000123AA                            	include "_anim\obj5F.asm"
000123AA                            ; ---------------------------------------------------------------------------
000123AA                            ; Animation script - Bomb enemy
000123AA                            ; ---------------------------------------------------------------------------
000123AA 0000                       		dc.w byte_11C12-Ani_obj5F
000123AC 0000                       		dc.w byte_11C16-Ani_obj5F
000123AE 0000                       		dc.w byte_11C1C-Ani_obj5F
000123B0 0000                       		dc.w byte_11C20-Ani_obj5F
000123B2 0000                       		dc.w byte_11C24-Ani_obj5F
000123B4 1301 00FF                  byte_11C12:	dc.b $13, 1, 0,	$FF
000123B8 1305 0403 02FF             byte_11C16:	dc.b $13, 5, 4,	3, 2, $FF
000123BE 1307 06FF                  byte_11C1C:	dc.b $13, 7, 6,	$FF
000123C2 0308 09FF                  byte_11C20:	dc.b 3,	8, 9, $FF
000123C6 030A 0BFF                  byte_11C24:	dc.b 3,	$A, $B,	$FF
000123CA                            		even
000123CA                            		even
000123CA                            
000123CA                            ; ---------------------------------------------------------------------------
000123CA                            ; Sprite mappings - walking bomb enemy (SLZ, SBZ)
000123CA                            ; ---------------------------------------------------------------------------
000123CA                            Map_obj5F:
000123CA                            	include "_maps\obj5F.asm"
000123CA                            ; ---------------------------------------------------------------------------
000123CA                            ; Sprite mappings - walking bomb enemy (SLZ, SBZ)
000123CA                            ; ---------------------------------------------------------------------------
000123CA 0000 0000                  		dc.w byte_11C40-Map_obj5F, byte_11C50-Map_obj5F
000123CE 0000 0000                  		dc.w byte_11C60-Map_obj5F, byte_11C70-Map_obj5F
000123D2 0000 0000                  		dc.w byte_11C80-Map_obj5F, byte_11C90-Map_obj5F
000123D6 0000 0000                  		dc.w byte_11CA0-Map_obj5F, byte_11CAB-Map_obj5F
000123DA 0000 0000                  		dc.w byte_11CB6-Map_obj5F, byte_11CBC-Map_obj5F
000123DE 0000 0000                  		dc.w byte_11CC2-Map_obj5F, byte_11CC8-Map_obj5F
000123E2 03                         byte_11C40:	dc.b 3
000123E3 F10A 0000 F4               		dc.b $F1, $A, 0, 0, $F4
000123E8 0908 0012 F4               		dc.b 9,	8, 0, $12, $F4
000123ED E701 0021 FC               		dc.b $E7, 1, 0,	$21, $FC
000123F2 03                         byte_11C50:	dc.b 3
000123F3 F10A 0009 F4               		dc.b $F1, $A, 0, 9, $F4
000123F8 0908 0012 F4               		dc.b 9,	8, 0, $12, $F4
000123FD E701 0021 FC               		dc.b $E7, 1, 0,	$21, $FC
00012402 03                         byte_11C60:	dc.b 3
00012403 F00A 0000 F4               		dc.b $F0, $A, 0, 0, $F4
00012408 0808 0015 F4               		dc.b 8,	8, 0, $15, $F4
0001240D E601 0021 FC               		dc.b $E6, 1, 0,	$21, $FC
00012412 03                         byte_11C70:	dc.b 3
00012413 F10A 0009 F4               		dc.b $F1, $A, 0, 9, $F4
00012418 0908 0018 F4               		dc.b 9,	8, 0, $18, $F4
0001241D E701 0021 FC               		dc.b $E7, 1, 0,	$21, $FC
00012422 03                         byte_11C80:	dc.b 3
00012423 F00A 0000 F4               		dc.b $F0, $A, 0, 0, $F4
00012428 0808 001B F4               		dc.b 8,	8, 0, $1B, $F4
0001242D E601 0021 FC               		dc.b $E6, 1, 0,	$21, $FC
00012432 03                         byte_11C90:	dc.b 3
00012433 F10A 0009 F4               		dc.b $F1, $A, 0, 9, $F4
00012438 0908 001E F4               		dc.b 9,	8, 0, $1E, $F4
0001243D E701 0021 FC               		dc.b $E7, 1, 0,	$21, $FC
00012442 02                         byte_11CA0:	dc.b 2
00012443 F10A 0000 F4               		dc.b $F1, $A, 0, 0, $F4
00012448 0908 0012 F4               		dc.b 9,	8, 0, $12, $F4
0001244D 02                         byte_11CAB:	dc.b 2
0001244E F10A 0009 F4               		dc.b $F1, $A, 0, 9, $F4
00012453 0908 0012 F4               		dc.b 9,	8, 0, $12, $F4
00012458 01                         byte_11CB6:	dc.b 1			; fuse	(just before it	explodes)
00012459 E701 0023 FC               		dc.b $E7, 1, 0,	$23, $FC
0001245E 01                         byte_11CBC:	dc.b 1			; fuse
0001245F E701 0025 FC               		dc.b $E7, 1, 0,	$25, $FC
00012464 01                         byte_11CC2:	dc.b 1			; fireball (after it exploded)
00012465 FC00 0027 FC               		dc.b $FC, 0, 0,	$27, $FC
0001246A 01                         byte_11CC8:	dc.b 1			; fireball
0001246B FC00 0028 FC               		dc.b $FC, 0, 0,	$28, $FC
00012470                            		even
00012470                            		even
00012470                            
00012470                            ; ===========================================================================
00012470                            ; ---------------------------------------------------------------------------
00012470                            ; Object 60 - Orbinaut enemy (LZ, SLZ, SBZ)
00012470                            ; ---------------------------------------------------------------------------
00012470                            
00012470                            Obj60:					; XREF: Obj_Index
00012470 7000                       		moveq	#0,d0
00012472 1028 0024                  		move.b	$24(a0),d0
00012476 323B 0000                  		move.w	Obj60_Index(pc,d0.w),d1
0001247A 4EFB 1000                  		jmp	Obj60_Index(pc,d1.w)
0001247E                            ; ===========================================================================
0001247E 0000                       Obj60_Index:	dc.w Obj60_Main-Obj60_Index
00012480 0000                       		dc.w Obj60_ChkSonic-Obj60_Index
00012482 0000                       		dc.w Obj60_Display-Obj60_Index
00012484 0000                       		dc.w Obj60_MoveOrb-Obj60_Index
00012486 0000                       		dc.w Obj60_ChkDel2-Obj60_Index
00012488                            ; ===========================================================================
00012488                            
00012488                            Obj60_Main:				; XREF: Obj60_Index
00012488 217C 0000 0000 0004        		move.l	#Map_obj60,4(a0)
00012490 317C 0429 0002             		move.w	#$429,2(a0)	; SBZ specific code
00012496 0C38 0005 FE10             		cmpi.b	#5,($FFFFFE10).w ; check if level is SBZ
0001249C 6700                       		beq.s	loc_11D02
0001249E 317C 2429 0002             		move.w	#$2429,2(a0)	; SLZ specific code
000124A4                            
000124A4                            loc_11D02:
000124A4 0C38 0001 FE10             		cmpi.b	#1,($FFFFFE10).w ; check if level is LZ
000124AA 6600                       		bne.s	loc_11D10
000124AC 317C 0467 0002             		move.w	#$467,2(a0)	; LZ specific code
000124B2                            
000124B2                            loc_11D10:
000124B2 0028 0004 0001             		ori.b	#4,1(a0)
000124B8 117C 0004 0018             		move.b	#4,$18(a0)
000124BE 117C 000B 0020             		move.b	#$B,$20(a0)
000124C4 117C 000C 0019             		move.b	#$C,$19(a0)
000124CA 7400                       		moveq	#0,d2
000124CC 45E8 0037                  		lea	$37(a0),a2
000124D0 264A                       		movea.l	a2,a3
000124D2 524A                       		addq.w	#1,a2
000124D4 7203                       		moveq	#3,d1
000124D6                            
000124D6                            Obj60_MakeOrbs:
000124D6 6100 BD8C                  		bsr.w	SingleObjLoad2
000124DA 6600                       		bne.s	loc_11D90
000124DC 5213                       		addq.b	#1,(a3)
000124DE 3A09                       		move.w	a1,d5
000124E0 0445 D000                  		subi.w	#-$3000,d5
000124E4 EC4D                       		lsr.w	#6,d5
000124E6 0245 007F                  		andi.w	#$7F,d5
000124EA 14C5                       		move.b	d5,(a2)+
000124EC 1290                       		move.b	0(a0),0(a1)	; load spiked orb object
000124EE 137C 0006 0024             		move.b	#6,$24(a1)
000124F4 2368 0004 0004             		move.l	4(a0),4(a1)
000124FA 3368 0002 0002             		move.w	2(a0),2(a1)
00012500 0029 0004 0001             		ori.b	#4,1(a1)
00012506 137C 0004 0018             		move.b	#4,$18(a1)
0001250C 137C 0008 0019             		move.b	#8,$19(a1)
00012512 137C 0003 001A             		move.b	#3,$1A(a1)
00012518 137C 0098 0020             		move.b	#$98,$20(a1)
0001251E 1342 0026                  		move.b	d2,$26(a1)
00012522 0602 0040                  		addi.b	#$40,d2
00012526 2348 003C                  		move.l	a0,$3C(a1)
0001252A 51C9 FFAA                  		dbf	d1,Obj60_MakeOrbs ; repeat sequence 3 more times
0001252E                            
0001252E                            loc_11D90:
0001252E 7001                       		moveq	#1,d0
00012530 0828 0000 0022             		btst	#0,$22(a0)
00012536 6700                       		beq.s	Obj60_Move
00012538 4440                       		neg.w	d0
0001253A                            
0001253A                            Obj60_Move:
0001253A 1140 0036                  		move.b	d0,$36(a0)
0001253E 1168 0028 0024             		move.b	$28(a0),$24(a0)	; if type is 02, skip the firing rountine
00012544 5428 0024                  		addq.b	#2,$24(a0)
00012548 317C FFC0 0010             		move.w	#-$40,$10(a0)	; move orbinaut	to the left
0001254E 0828 0000 0022             		btst	#0,$22(a0)	; is orbinaut reversed?
00012554 6700                       		beq.s	locret_11DBC	; if not, branch
00012556 4468 0010                  		neg.w	$10(a0)		; move orbinaut	to the right
0001255A                            
0001255A                            locret_11DBC:
0001255A 4E75                       		rts	
0001255C                            ; ===========================================================================
0001255C                            
0001255C                            Obj60_ChkSonic:				; XREF: Obj60_Index
0001255C 3038 D008                  		move.w	($FFFFD008).w,d0
00012560 9068 0008                  		sub.w	8(a0),d0
00012564 6400                       		bcc.s	loc_11DCA
00012566 4440                       		neg.w	d0
00012568                            
00012568                            loc_11DCA:
00012568 0C40 00A0                  		cmpi.w	#$A0,d0		; is Sonic within $A0 pixels of	orbinaut?
0001256C 6400                       		bcc.s	Obj60_Animate	; if not, branch
0001256E 3038 D00C                  		move.w	($FFFFD00C).w,d0
00012572 9068 000C                  		sub.w	$C(a0),d0
00012576 6400                       		bcc.s	loc_11DDC
00012578 4440                       		neg.w	d0
0001257A                            
0001257A                            loc_11DDC:
0001257A 0C40 0050                  		cmpi.w	#$50,d0		; is Sonic within $50 pixels of	orbinaut?
0001257E 6400                       		bcc.s	Obj60_Animate	; if not, branch
00012580 4A78 FE08                  		tst.w	($FFFFFE08).w	; is debug mode	on?
00012584 6600                       		bne.s	Obj60_Animate	; if yes, branch
00012586 117C 0001 001C             		move.b	#1,$1C(a0)	; use "angry" animation
0001258C                            
0001258C                            Obj60_Animate:
0001258C 43F9 0000 0000             		lea	(Ani_obj60).l,a1
00012592 6100 88F4                  		bsr.w	AnimateSprite
00012596 6000 0000                  		bra.w	Obj60_ChkDel
0001259A                            ; ===========================================================================
0001259A                            
0001259A                            Obj60_Display:				; XREF: Obj60_Index
0001259A 6100 B806                  		bsr.w	SpeedToPos
0001259E                            
0001259E                            Obj60_ChkDel:				; XREF: Obj60_Animate
0001259E 3028 0008                  		move.w	8(a0),d0
000125A2 0240 FF80                  		andi.w	#$FF80,d0
000125A6 3238 F700                  		move.w	($FFFFF700).w,d1
000125AA 0441 0080                  		subi.w	#$80,d1
000125AE 0241 FF80                  		andi.w	#$FF80,d1
000125B2 9041                       		sub.w	d1,d0
000125B4 0C40 0280                  		cmpi.w	#$280,d0
000125B8 6200 0000                  		bhi.w	Obj60_ChkGone
000125BC 6000 B80A                  		bra.w	DisplaySprite
000125C0                            ; ===========================================================================
000125C0                            
000125C0                            Obj60_ChkGone:				; XREF: Obj60_ChkDel
000125C0 45F8 FC00                  		lea	($FFFFFC00).w,a2
000125C4 7000                       		moveq	#0,d0
000125C6 1028 0023                  		move.b	$23(a0),d0
000125CA 6700                       		beq.s	loc_11E34
000125CC 08B2 0007 0002             		bclr	#7,2(a2,d0.w)
000125D2                            
000125D2                            loc_11E34:
000125D2 45E8 0037                  		lea	$37(a0),a2
000125D6 7400                       		moveq	#0,d2
000125D8 141A                       		move.b	(a2)+,d2
000125DA 5342                       		subq.w	#1,d2
000125DC 6500                       		bcs.s	Obj60_Delete
000125DE                            
000125DE                            loc_11E40:
000125DE 7000                       		moveq	#0,d0
000125E0 101A                       		move.b	(a2)+,d0
000125E2 ED48                       		lsl.w	#6,d0
000125E4 0680 00FF D000             		addi.l	#$FFD000,d0
000125EA 2240                       		movea.l	d0,a1
000125EC 6100 B818                  		bsr.w	DeleteObject2
000125F0 51CA FFEC                  		dbf	d2,loc_11E40
000125F4                            
000125F4                            Obj60_Delete:
000125F4 6000 B80E                  		bra.w	DeleteObject
000125F8                            ; ===========================================================================
000125F8                            
000125F8                            Obj60_MoveOrb:				; XREF: Obj60_Index
000125F8 2268 003C                  		movea.l	$3C(a0),a1
000125FC 0C11 0060                  		cmpi.b	#$60,0(a1)
00012600 6600 B802                  		bne.w	DeleteObject
00012604 0C29 0002 001A             		cmpi.b	#2,$1A(a1)
0001260A 6600                       		bne.s	Obj60_Circle
0001260C 0C28 0040 0026             		cmpi.b	#$40,$26(a0)
00012612 6600                       		bne.s	Obj60_Circle
00012614 5428 0024                  		addq.b	#2,$24(a0)
00012618 5329 0037                  		subq.b	#1,$37(a1)
0001261C 6600                       		bne.s	Obj60_FireOrb
0001261E 5429 0024                  		addq.b	#2,$24(a1)
00012622                            
00012622                            Obj60_FireOrb:
00012622 317C FE00 0010             		move.w	#-$200,$10(a0)	; move orb to the left (quickly)
00012628 0829 0000 0022             		btst	#0,$22(a1)
0001262E 6700                       		beq.s	Obj60_Display2
00012630 4468 0010                  		neg.w	$10(a0)
00012634                            
00012634                            Obj60_Display2:
00012634 6000 B792                  		bra.w	DisplaySprite
00012638                            ; ===========================================================================
00012638                            
00012638                            Obj60_Circle:				; XREF: Obj60_MoveOrb
00012638 1028 0026                  		move.b	$26(a0),d0
0001263C 4EB9 0000 2CAC             		jsr	(CalcSine).l
00012642 E841                       		asr.w	#4,d1
00012644 D269 0008                  		add.w	8(a1),d1
00012648 3141 0008                  		move.w	d1,8(a0)
0001264C E840                       		asr.w	#4,d0
0001264E D069 000C                  		add.w	$C(a1),d0
00012652 3140 000C                  		move.w	d0,$C(a0)
00012656 1029 0036                  		move.b	$36(a1),d0
0001265A D128 0026                  		add.b	d0,$26(a0)
0001265E 6000 B768                  		bra.w	DisplaySprite
00012662                            ; ===========================================================================
00012662                            
00012662                            Obj60_ChkDel2:				; XREF: Obj60_Index
00012662 6100 B73E                  		bsr.w	SpeedToPos
00012666 4A28 0001                  		tst.b	1(a0)
0001266A 6A00 B798                  		bpl.w	DeleteObject
0001266E 6000 B758                  		bra.w	DisplaySprite
00012672                            ; ===========================================================================
00012672                            Ani_obj60:
00012672                            	include "_anim\obj60.asm"
00012672                            ; ---------------------------------------------------------------------------
00012672                            ; Animation script - Orbinaut enemy
00012672                            ; ---------------------------------------------------------------------------
00012672 0000                       		dc.w byte_11EDA-Ani_obj60
00012674 0000                       		dc.w byte_11EDE-Ani_obj60
00012676 0F00 FF00                  byte_11EDA:	dc.b $F, 0, $FF, 0
0001267A 0F01 02FE 0100             byte_11EDE:	dc.b $F, 1, 2, $FE, 1, 0
00012680                            		even
00012680                            		even
00012680                            
00012680                            ; ---------------------------------------------------------------------------
00012680                            ; Sprite mappings - Orbinaut enemy (LZ,	SLZ, SBZ)
00012680                            ; ---------------------------------------------------------------------------
00012680                            Map_obj60:
00012680                            	include "_maps\obj60.asm"
00012680                            ; ---------------------------------------------------------------------------
00012680                            ; Sprite mappings - Orbinaut enemy (LZ,	SLZ, SBZ)
00012680                            ; ---------------------------------------------------------------------------
00012680 0000 0000                  		dc.w byte_11EEC-Map_obj60, byte_11EF2-Map_obj60
00012684 0000 0000                  		dc.w byte_11EF8-Map_obj60, byte_11EFE-Map_obj60
00012688 01                         byte_11EEC:	dc.b 1
00012689 F40A 0000 F4               		dc.b $F4, $A, 0, 0, $F4
0001268E 01                         byte_11EF2:	dc.b 1
0001268F F40A 2009 F4               		dc.b $F4, $A, $20, 9, $F4
00012694 01                         byte_11EF8:	dc.b 1
00012695 F40A 0012 F4               		dc.b $F4, $A, 0, $12, $F4
0001269A 01                         byte_11EFE:	dc.b 1
0001269B F805 001B F8               		dc.b $F8, 5, 0,	$1B, $F8
000126A0                            		even
000126A0                            		even
000126A0                            
000126A0                            ; ===========================================================================
000126A0                            ; ---------------------------------------------------------------------------
000126A0                            ; Object 16 - harpoon (LZ)
000126A0                            ; ---------------------------------------------------------------------------
000126A0                            
000126A0                            Obj16:					; XREF: Obj_Index
000126A0 7000                       		moveq	#0,d0
000126A2 1028 0024                  		move.b	$24(a0),d0
000126A6 323B 0000                  		move.w	Obj16_Index(pc,d0.w),d1
000126AA 4EFB 1000                  		jmp	Obj16_Index(pc,d1.w)
000126AE                            ; ===========================================================================
000126AE 0000                       Obj16_Index:	dc.w Obj16_Main-Obj16_Index
000126B0 0000                       		dc.w Obj16_Move-Obj16_Index
000126B2 0000                       		dc.w Obj16_Wait-Obj16_Index
000126B4                            ; ===========================================================================
000126B4                            
000126B4                            Obj16_Main:				; XREF: Obj16_Index
000126B4 5428 0024                  		addq.b	#2,$24(a0)
000126B8 217C 0000 0000 0004        		move.l	#Map_obj16,4(a0)
000126C0 317C 03CC 0002             		move.w	#$3CC,2(a0)
000126C6 0028 0004 0001             		ori.b	#4,1(a0)
000126CC 117C 0004 0018             		move.b	#4,$18(a0)
000126D2 1168 0028 001C             		move.b	$28(a0),$1C(a0)
000126D8 117C 0014 0019             		move.b	#$14,$19(a0)
000126DE 317C 003C 0030             		move.w	#60,$30(a0)
000126E4                            
000126E4                            Obj16_Move:				; XREF: Obj16_Index
000126E4 43F9 0000 0000             		lea	(Ani_obj16).l,a1
000126EA 6100 879C                  		bsr.w	AnimateSprite
000126EE 7000                       		moveq	#0,d0
000126F0 1028 001A                  		move.b	$1A(a0),d0	; move frame number to d0
000126F4 117B 0000 0020             		move.b	Obj16_Data(pc,d0.w),$20(a0) ; load collision response (based on	d0)
000126FA 6000 D774                  		bra.w	MarkObjGone
000126FE                            ; ===========================================================================
000126FE 9B9C 9D9E 9FA0             Obj16_Data:	dc.b $9B, $9C, $9D, $9E, $9F, $A0
00012704                            ; ===========================================================================
00012704                            
00012704                            Obj16_Wait:				; XREF: Obj16_Index
00012704 5368 0030                  		subq.w	#1,$30(a0)
00012708 6A00                       		bpl.s	Obj16_ChkDel
0001270A 317C 003C 0030             		move.w	#60,$30(a0)
00012710 5528 0024                  		subq.b	#2,$24(a0)	; run "Obj16_Move" subroutine
00012714 0868 0000 001C             		bchg	#0,$1C(a0)	; reverse animation
0001271A                            
0001271A                            Obj16_ChkDel:
0001271A 6000 D754                  		bra.w	MarkObjGone
0001271E                            ; ===========================================================================
0001271E                            Ani_obj16:
0001271E                            	include "_anim\obj16.asm"
0001271E                            ; ---------------------------------------------------------------------------
0001271E                            ; Animation script - harpoon (LZ)
0001271E                            ; ---------------------------------------------------------------------------
0001271E 0000                       		dc.w byte_11F8A-Ani_obj16
00012720 0000                       		dc.w byte_11F8E-Ani_obj16
00012722 0000                       		dc.w byte_11F92-Ani_obj16
00012724 0000                       		dc.w byte_11F96-Ani_obj16
00012726 0301 02FC                  byte_11F8A:	dc.b 3,	1, 2, $FC
0001272A 0301 00FC                  byte_11F8E:	dc.b 3,	1, 0, $FC
0001272E 0304 05FC                  byte_11F92:	dc.b 3,	4, 5, $FC
00012732 0304 03FC                  byte_11F96:	dc.b 3,	4, 3, $FC
00012736                            		even
00012736                            		even
00012736                            
00012736                            ; ---------------------------------------------------------------------------
00012736                            ; Sprite mappings - harpoon (LZ)
00012736                            ; ---------------------------------------------------------------------------
00012736                            Map_obj16:
00012736                            	include "_maps\obj16.asm"
00012736                            ; ---------------------------------------------------------------------------
00012736                            ; Sprite mappings - harpoon (LZ)
00012736                            ; ---------------------------------------------------------------------------
00012736 0000 0000                  		dc.w byte_11FA6-Map_obj16, byte_11FAC-Map_obj16
0001273A 0000 0000                  		dc.w byte_11FB2-Map_obj16, byte_11FBD-Map_obj16
0001273E 0000 0000                  		dc.w byte_11FC3-Map_obj16, byte_11FC9-Map_obj16
00012742 01                         byte_11FA6:	dc.b 1
00012743 FC04 0000 F8               		dc.b $FC, 4, 0,	0, $F8
00012748 01                         byte_11FAC:	dc.b 1
00012749 FC0C 0002 F8               		dc.b $FC, $C, 0, 2, $F8
0001274E 02                         byte_11FB2:	dc.b 2
0001274F FC08 0006 F8               		dc.b $FC, 8, 0,	6, $F8
00012754 FC08 0003 10               		dc.b $FC, 8, 0,	3, $10
00012759 01                         byte_11FBD:	dc.b 1
0001275A F801 0009 FC               		dc.b $F8, 1, 0,	9, $FC
0001275F 01                         byte_11FC3:	dc.b 1
00012760 E803 000B FC               		dc.b $E8, 3, 0,	$B, $FC
00012765 02                         byte_11FC9:	dc.b 2
00012766 D802 000B FC               		dc.b $D8, 2, 0,	$B, $FC
0001276B F002 000F FC               		dc.b $F0, 2, 0,	$F, $FC
00012770                            		even
00012770                            		even
00012770                            
00012770                            ; ===========================================================================
00012770                            ; ---------------------------------------------------------------------------
00012770                            ; Object 61 - blocks (LZ)
00012770                            ; ---------------------------------------------------------------------------
00012770                            
00012770                            Obj61:					; XREF: Obj_Index
00012770 7000                       		moveq	#0,d0
00012772 1028 0024                  		move.b	$24(a0),d0
00012776 323B 0000                  		move.w	Obj61_Index(pc,d0.w),d1
0001277A 4EFB 1000                  		jmp	Obj61_Index(pc,d1.w)
0001277E                            ; ===========================================================================
0001277E 0000                       Obj61_Index:	dc.w Obj61_Main-Obj61_Index
00012780 0000                       		dc.w Obj61_Action-Obj61_Index
00012782                            
00012782 1010                       Obj61_Var:	dc.b $10, $10		; width, height
00012784 200C                       		dc.b $20, $C
00012786 1010                       		dc.b $10, $10
00012788 1010                       		dc.b $10, $10
0001278A                            ; ===========================================================================
0001278A                            
0001278A                            Obj61_Main:				; XREF: Obj61_Index
0001278A 5428 0024                  		addq.b	#2,$24(a0)
0001278E 217C 0000 0000 0004        		move.l	#Map_obj61,4(a0)
00012796 317C 43E6 0002             		move.w	#$43E6,2(a0)
0001279C 117C 0004 0001             		move.b	#4,1(a0)
000127A2 117C 0003 0018             		move.b	#3,$18(a0)
000127A8 7000                       		moveq	#0,d0
000127AA 1028 0028                  		move.b	$28(a0),d0
000127AE E648                       		lsr.w	#3,d0
000127B0 0240 000E                  		andi.w	#$E,d0
000127B4 45FB 00CC                  		lea	Obj61_Var(pc,d0.w),a2
000127B8 115A 0019                  		move.b	(a2)+,$19(a0)
000127BC 1152 0016                  		move.b	(a2),$16(a0)
000127C0 E248                       		lsr.w	#1,d0
000127C2 1140 001A                  		move.b	d0,$1A(a0)
000127C6 3168 0008 0034             		move.w	8(a0),$34(a0)
000127CC 3168 000C 0030             		move.w	$C(a0),$30(a0)
000127D2 1028 0028                  		move.b	$28(a0),d0
000127D6 0200 000F                  		andi.b	#$F,d0
000127DA 6700                       		beq.s	Obj61_Action
000127DC 0C00 0007                  		cmpi.b	#7,d0
000127E0 6700                       		beq.s	Obj61_Action
000127E2 117C 0001 0038             		move.b	#1,$38(a0)
000127E8                            
000127E8                            Obj61_Action:				; XREF: Obj61_Index
000127E8 3F28 0008                  		move.w	8(a0),-(sp)
000127EC 7000                       		moveq	#0,d0
000127EE 1028 0028                  		move.b	$28(a0),d0
000127F2 0240 000F                  		andi.w	#$F,d0
000127F6 D040                       		add.w	d0,d0
000127F8 323B 0000                  		move.w	Obj61_TypeIndex(pc,d0.w),d1
000127FC 4EBB 1000                  		jsr	Obj61_TypeIndex(pc,d1.w)
00012800 381F                       		move.w	(sp)+,d4
00012802 4A28 0001                  		tst.b	1(a0)
00012806 6A00                       		bpl.s	Obj61_ChkDel
00012808 7200                       		moveq	#0,d1
0001280A 1228 0019                  		move.b	$19(a0),d1
0001280E 0641 000B                  		addi.w	#$B,d1
00012812 7400                       		moveq	#0,d2
00012814 1428 0016                  		move.b	$16(a0),d2
00012818 3602                       		move.w	d2,d3
0001281A 5243                       		addq.w	#1,d3
0001281C 6100 D97A                  		bsr.w	SolidObject
00012820 1144 003F                  		move.b	d4,$3F(a0)
00012824 6100 0000                  		bsr.w	loc_12180
00012828                            
00012828                            Obj61_ChkDel:
00012828 3028 0034                  		move.w	$34(a0),d0
0001282C 0240 FF80                  		andi.w	#$FF80,d0
00012830 3238 F700                  		move.w	($FFFFF700).w,d1
00012834 0441 0080                  		subi.w	#$80,d1
00012838 0241 FF80                  		andi.w	#$FF80,d1
0001283C 9041                       		sub.w	d1,d0
0001283E 0C40 0280                  		cmpi.w	#$280,d0
00012842 6200 B5C0                  		bhi.w	DeleteObject
00012846 6000 B580                  		bra.w	DisplaySprite
0001284A                            ; ===========================================================================
0001284A 0000 0000                  Obj61_TypeIndex:dc.w Obj61_Type00-Obj61_TypeIndex, Obj61_Type01-Obj61_TypeIndex
0001284E 0000 0000                  		dc.w Obj61_Type02-Obj61_TypeIndex, Obj61_Type01-Obj61_TypeIndex
00012852 0000 0000                  		dc.w Obj61_Type04-Obj61_TypeIndex, Obj61_Type05-Obj61_TypeIndex
00012856 0000 0000                  		dc.w Obj61_Type02-Obj61_TypeIndex, Obj61_Type07-Obj61_TypeIndex
0001285A                            ; ===========================================================================
0001285A                            
0001285A                            Obj61_Type00:				; XREF: Obj61_TypeIndex
0001285A 4E75                       		rts	
0001285C                            ; ===========================================================================
0001285C                            
0001285C                            Obj61_Type01:				; XREF: Obj61_TypeIndex
0001285C 4A68 0036                  		tst.w	$36(a0)		; is Sonic standing on the object?
00012860 6600                       		bne.s	loc_120D6	; if yes, branch
00012862 0828 0003 0022             		btst	#3,$22(a0)
00012868 6700                       		beq.s	locret_120D4
0001286A 317C 001E 0036             		move.w	#30,$36(a0)	; wait for ยซ second
00012870                            
00012870                            locret_120D4:
00012870 4E75                       		rts	
00012872                            ; ===========================================================================
00012872                            
00012872                            loc_120D6:
00012872 5368 0036                  		subq.w	#1,$36(a0)	; subtract 1 from waiting time
00012876 66F8                       		bne.s	locret_120D4	; if time remains, branch
00012878 5228 0028                  		addq.b	#1,$28(a0)	; add 1	to type
0001287C 4228 0038                  		clr.b	$38(a0)
00012880 4E75                       		rts	
00012882                            ; ===========================================================================
00012882                            
00012882                            Obj61_Type02:				; XREF: Obj61_TypeIndex
00012882 6100 B51E                  		bsr.w	SpeedToPos
00012886 5068 0012                  		addq.w	#8,$12(a0)	; make object fall
0001288A 6100 0000                  		bsr.w	ObjHitFloor
0001288E 4A41                       		tst.w	d1
00012890 6A00 0000                  		bpl.w	locret_12106
00012894 5241                       		addq.w	#1,d1
00012896 D368 000C                  		add.w	d1,$C(a0)
0001289A 4268 0012                  		clr.w	$12(a0)		; stop when it touches the floor
0001289E 4228 0028                  		clr.b	$28(a0)		; set type to 00 (non-moving type)
000128A2                            
000128A2                            locret_12106:
000128A2 4E75                       		rts	
000128A4                            ; ===========================================================================
000128A4                            
000128A4                            Obj61_Type04:				; XREF: Obj61_TypeIndex
000128A4 6100 B4FC                  		bsr.w	SpeedToPos
000128A8 5168 0012                  		subq.w	#8,$12(a0)	; make object rise
000128AC 6100 0000                  		bsr.w	ObjHitCeiling
000128B0 4A41                       		tst.w	d1
000128B2 6A00 0000                  		bpl.w	locret_12126
000128B6 9368 000C                  		sub.w	d1,$C(a0)
000128BA 4268 0012                  		clr.w	$12(a0)		; stop when it touches the ceiling
000128BE 4228 0028                  		clr.b	$28(a0)		; set type to 00 (non-moving type)
000128C2                            
000128C2                            locret_12126:
000128C2 4E75                       		rts	
000128C4                            ; ===========================================================================
000128C4                            
000128C4                            Obj61_Type05:				; XREF: Obj61_TypeIndex
000128C4 0C28 0001 003F             		cmpi.b	#1,$3F(a0)	; is Sonic touching the	object?
000128CA 6600                       		bne.s	locret_12138	; if not, branch
000128CC 5228 0028                  		addq.b	#1,$28(a0)	; if yes, add 1	to type
000128D0 4228 0038                  		clr.b	$38(a0)
000128D4                            
000128D4                            locret_12138:
000128D4 4E75                       		rts	
000128D6                            ; ===========================================================================
000128D6                            
000128D6                            Obj61_Type07:				; XREF: Obj61_TypeIndex
000128D6 3038 F646                  		move.w	($FFFFF646).w,d0
000128DA 9068 000C                  		sub.w	$C(a0),d0
000128DE 6700                       		beq.s	locret_1217E
000128E0 6400                       		bcc.s	loc_12162
000128E2 0C40 FFFE                  		cmpi.w	#-2,d0
000128E6 6C00                       		bge.s	loc_1214E
000128E8 70FE                       		moveq	#-2,d0
000128EA                            
000128EA                            loc_1214E:
000128EA D168 000C                  		add.w	d0,$C(a0)	; make the block rise with water level
000128EE 6100 0000                  		bsr.w	ObjHitCeiling
000128F2 4A41                       		tst.w	d1
000128F4 6A00 0000                  		bpl.w	locret_12160
000128F8 9368 000C                  		sub.w	d1,$C(a0)
000128FC                            
000128FC                            locret_12160:
000128FC 4E75                       		rts	
000128FE                            ; ===========================================================================
000128FE                            
000128FE                            loc_12162:				; XREF: Obj61_Type07
000128FE 0C40 0002                  		cmpi.w	#2,d0
00012902 6F00                       		ble.s	loc_1216A
00012904 7002                       		moveq	#2,d0
00012906                            
00012906                            loc_1216A:
00012906 D168 000C                  		add.w	d0,$C(a0)	; make the block sink with water level
0001290A 6100 0000                  		bsr.w	ObjHitFloor
0001290E 4A41                       		tst.w	d1
00012910 6A00 0000                  		bpl.w	locret_1217E
00012914 5241                       		addq.w	#1,d1
00012916 D368 000C                  		add.w	d1,$C(a0)
0001291A                            
0001291A                            locret_1217E:
0001291A 4E75                       		rts	
0001291C                            ; ===========================================================================
0001291C                            
0001291C                            loc_12180:				; XREF: Obj61_Action
0001291C 4A28 0038                  		tst.b	$38(a0)
00012920 6700                       		beq.s	locret_121C0
00012922 0828 0003 0022             		btst	#3,$22(a0)
00012928 6600                       		bne.s	loc_1219A
0001292A 4A28 003E                  		tst.b	$3E(a0)
0001292E 6700                       		beq.s	locret_121C0
00012930 5928 003E                  		subq.b	#4,$3E(a0)
00012934 6000                       		bra.s	loc_121A6
00012936                            ; ===========================================================================
00012936                            
00012936                            loc_1219A:
00012936 0C28 0040 003E             		cmpi.b	#$40,$3E(a0)
0001293C 6700                       		beq.s	locret_121C0
0001293E 5828 003E                  		addq.b	#4,$3E(a0)
00012942                            
00012942                            loc_121A6:
00012942 1028 003E                  		move.b	$3E(a0),d0
00012946 4EB9 0000 2CAC             		jsr	(CalcSine).l
0001294C 323C 0400                  		move.w	#$400,d1
00012950 C1C1                       		muls.w	d1,d0
00012952 4840                       		swap	d0
00012954 D068 0030                  		add.w	$30(a0),d0
00012958 3140 000C                  		move.w	d0,$C(a0)
0001295C                            
0001295C                            locret_121C0:
0001295C 4E75                       		rts	
0001295E                            ; ===========================================================================
0001295E                            ; ---------------------------------------------------------------------------
0001295E                            ; Sprite mappings - blocks (LZ)
0001295E                            ; ---------------------------------------------------------------------------
0001295E                            Map_obj61:
0001295E                            	include "_maps\obj61.asm"
0001295E                            ; ---------------------------------------------------------------------------
0001295E                            ; Sprite mappings - blocks (LZ)
0001295E                            ; ---------------------------------------------------------------------------
0001295E 0000 0000                  		dc.w byte_121CA-Map_obj61, byte_121D0-Map_obj61
00012962 0000 0000                  		dc.w byte_121DB-Map_obj61, byte_121E1-Map_obj61
00012966 01                         byte_121CA:	dc.b 1
00012967 F00F 0000 F0               		dc.b $F0, $F, 0, 0, $F0
0001296C 02                         byte_121D0:	dc.b 2
0001296D F40E 0069 E0               		dc.b $F4, $E, 0, $69, $E0
00012972 F40E 0075 00               		dc.b $F4, $E, 0, $75, 0
00012977 01                         byte_121DB:	dc.b 1
00012978 F00F 011A F0               		dc.b $F0, $F, 1, $1A, $F0
0001297D 01                         byte_121E1:	dc.b 1
0001297E F00F FDFA F0               		dc.b $F0, $F, $FD, $FA,	$F0
00012984 00                         		even
00012984 00                         		even
00012984                            
00012984                            ; ===========================================================================
00012984                            ; ---------------------------------------------------------------------------
00012984                            ; Object 62 - gargoyle head (LZ)
00012984                            ; ---------------------------------------------------------------------------
00012984                            
00012984                            Obj62:					; XREF: Obj_Index
00012984 7000                       		moveq	#0,d0
00012986 1028 0024                  		move.b	$24(a0),d0
0001298A 323B 0000                  		move.w	Obj62_Index(pc,d0.w),d1
0001298E 4EBB 1000                  		jsr	Obj62_Index(pc,d1.w)
00012992 6000 D4DC                  		bra.w	MarkObjGone
00012996                            ; ===========================================================================
00012996 0000                       Obj62_Index:	dc.w Obj62_Main-Obj62_Index
00012998 0000                       		dc.w Obj62_MakeFire-Obj62_Index
0001299A 0000                       		dc.w Obj62_FireBall-Obj62_Index
0001299C 0000                       		dc.w Obj62_AniFire-Obj62_Index
0001299E                            
0001299E 1E3C 5A78 96B4 D2F0        Obj62_SpitRate:	dc.b 30, 60, 90, 120, 150, 180,	210, 240
000129A6                            ; ===========================================================================
000129A6                            
000129A6                            Obj62_Main:				; XREF: Obj62_Index
000129A6 5428 0024                  		addq.b	#2,$24(a0)
000129AA 217C 0000 0000 0004        		move.l	#Map_obj62,4(a0)
000129B2 317C 42E9 0002             		move.w	#$42E9,2(a0)
000129B8 0028 0004 0001             		ori.b	#4,1(a0)
000129BE 117C 0003 0018             		move.b	#3,$18(a0)
000129C4 117C 0010 0019             		move.b	#$10,$19(a0)
000129CA 1028 0028                  		move.b	$28(a0),d0	; get object type
000129CE 0240 000F                  		andi.w	#$F,d0		; read only the	2nd digit
000129D2 117B 00CA 001F             		move.b	Obj62_SpitRate(pc,d0.w),$1F(a0)	; set fireball spit rate
000129D8 1168 001F 001E             		move.b	$1F(a0),$1E(a0)
000129DE 0228 000F 0028             		andi.b	#$F,$28(a0)
000129E4                            
000129E4                            Obj62_MakeFire:				; XREF: Obj62_Index
000129E4 5328 001E                  		subq.b	#1,$1E(a0)
000129E8 6600                       		bne.s	Obj62_NoFire
000129EA 1168 001F 001E             		move.b	$1F(a0),$1E(a0)
000129F0 6100 B650                  		bsr.w	ChkObjOnScreen
000129F4 6600                       		bne.s	Obj62_NoFire
000129F6 6100 B856                  		bsr.w	SingleObjLoad
000129FA 6600                       		bne.s	Obj62_NoFire
000129FC 12BC 0062                  		move.b	#$62,0(a1)	; load fireball	object
00012A00 5829 0024                  		addq.b	#4,$24(a1)
00012A04 3368 0008 0008             		move.w	8(a0),8(a1)
00012A0A 3368 000C 000C             		move.w	$C(a0),$C(a1)
00012A10 1368 0001 0001             		move.b	1(a0),1(a1)
00012A16 1368 0022 0022             		move.b	$22(a0),$22(a1)
00012A1C                            
00012A1C                            Obj62_NoFire:
00012A1C 4E75                       		rts	
00012A1E                            ; ===========================================================================
00012A1E                            
00012A1E                            Obj62_FireBall:				; XREF: Obj62_Index
00012A1E 5428 0024                  		addq.b	#2,$24(a0)
00012A22 117C 0008 0016             		move.b	#8,$16(a0)
00012A28 117C 0008 0017             		move.b	#8,$17(a0)
00012A2E 217C 0000 0000 0004        		move.l	#Map_obj62,4(a0)
00012A36 317C 02E9 0002             		move.w	#$2E9,2(a0)
00012A3C 0028 0004 0001             		ori.b	#4,1(a0)
00012A42 117C 0004 0018             		move.b	#4,$18(a0)
00012A48 117C 0098 0020             		move.b	#$98,$20(a0)
00012A4E 117C 0008 0019             		move.b	#8,$19(a0)
00012A54 117C 0002 001A             		move.b	#2,$1A(a0)
00012A5A 5068 000C                  		addq.w	#8,$C(a0)
00012A5E 317C 0200 0010             		move.w	#$200,$10(a0)
00012A64 0828 0000 0022             		btst	#0,$22(a0)
00012A6A 6600                       		bne.s	Obj62_Sound
00012A6C 4468 0010                  		neg.w	$10(a0)
00012A70                            
00012A70                            Obj62_Sound:
00012A70 303C 00AE                  		move.w	#$AE,d0
00012A74 4EB9 0000 15C0             		jsr	(PlaySound_Special).l ;	play lava ball sound
00012A7A                            
00012A7A                            Obj62_AniFire:				; XREF: Obj62_Index
00012A7A 1038 FE05                  		move.b	($FFFFFE05).w,d0
00012A7E 0200 0007                  		andi.b	#7,d0
00012A82 6600                       		bne.s	Obj62_StopFire
00012A84 0868 0000 001A             		bchg	#0,$1A(a0)	; switch between frame 01 and 02
00012A8A                            
00012A8A                            Obj62_StopFire:
00012A8A 6100 B316                  		bsr.w	SpeedToPos
00012A8E 0828 0000 0022             		btst	#0,$22(a0)
00012A94 6600                       		bne.s	Obj62_StopFire2
00012A96 76F8                       		moveq	#-8,d3
00012A98 6100 0000                  		bsr.w	ObjHitWallLeft
00012A9C 4A41                       		tst.w	d1
00012A9E 6B00 B364                  		bmi.w	DeleteObject	; delete if the	fireball hits a	wall
00012AA2 4E75                       		rts	
00012AA4                            ; ===========================================================================
00012AA4                            
00012AA4                            Obj62_StopFire2:
00012AA4 7608                       		moveq	#8,d3
00012AA6 6100 0000                  		bsr.w	ObjHitWallRight
00012AAA 4A41                       		tst.w	d1
00012AAC 6B00 B356                  		bmi.w	DeleteObject
00012AB0 4E75                       		rts	
00012AB2                            ; ===========================================================================
00012AB2                            ; ---------------------------------------------------------------------------
00012AB2                            ; Sprite mappings - gargoyle head (LZ)
00012AB2                            ; ---------------------------------------------------------------------------
00012AB2                            Map_obj62:
00012AB2                            	include "_maps\obj62.asm"
00012AB2                            ; ---------------------------------------------------------------------------
00012AB2                            ; Sprite mappings - gargoyle head (LZ)
00012AB2                            ; ---------------------------------------------------------------------------
00012AB2 0000 0000                  		dc.w byte_12320-Map_obj62, byte_12320-Map_obj62
00012AB6 0000 0000                  		dc.w byte_12330-Map_obj62, byte_12336-Map_obj62
00012ABA 03                         byte_12320:	dc.b 3
00012ABB F004 0000 00               		dc.b $F0, 4, 0,	0, 0
00012AC0 F80D 0002 F0               		dc.b $F8, $D, 0, 2, $F0
00012AC5 0808 000A F8               		dc.b 8,	8, 0, $A, $F8
00012ACA 01                         byte_12330:	dc.b 1
00012ACB FC04 000D F8               		dc.b $FC, 4, 0,	$D, $F8
00012AD0 01                         byte_12336:	dc.b 1
00012AD1 FC04 000F F8               		dc.b $FC, 4, 0,	$F, $F8
00012AD6                            		even
00012AD6                            		even
00012AD6                            
00012AD6                            ; ===========================================================================
00012AD6                            ; ---------------------------------------------------------------------------
00012AD6                            ; Object 63 - platforms	on a conveyor belt (LZ)
00012AD6                            ; ---------------------------------------------------------------------------
00012AD6                            
00012AD6                            Obj63:					; XREF: Obj_Index
00012AD6 7000                       		moveq	#0,d0
00012AD8 1028 0024                  		move.b	$24(a0),d0
00012ADC 323B 0000                  		move.w	Obj63_Index(pc,d0.w),d1
00012AE0 4EBB 1000                  		jsr	Obj63_Index(pc,d1.w)
00012AE4 3028 0030                  		move.w	$30(a0),d0
00012AE8 0240 FF80                  		andi.w	#$FF80,d0
00012AEC 3238 F700                  		move.w	($FFFFF700).w,d1
00012AF0 0441 0080                  		subi.w	#$80,d1
00012AF4 0241 FF80                  		andi.w	#$FF80,d1
00012AF8 9041                       		sub.w	d1,d0
00012AFA 0C40 0280                  		cmpi.w	#$280,d0
00012AFE 6200                       		bhi.s	loc_1236A
00012B00                            
00012B00                            Obj63_Display:				; XREF: loc_1236A
00012B00 6000 B2C6                  		bra.w	DisplaySprite
00012B04                            ; ===========================================================================
00012B04                            
00012B04                            loc_1236A:				; XREF: Obj63
00012B04 0C38 0002 FE11             		cmpi.b	#2,($FFFFFE11).w
00012B0A 6600                       		bne.s	loc_12378
00012B0C 0C40 FF80                  		cmpi.w	#-$80,d0
00012B10 64EE                       		bcc.s	Obj63_Display
00012B12                            
00012B12                            loc_12378:
00012B12 1028 002F                  		move.b	$2F(a0),d0
00012B16 6A00 B2EC                  		bpl.w	DeleteObject
00012B1A 0240 007F                  		andi.w	#$7F,d0
00012B1E 45F8 F7C1                  		lea	($FFFFF7C1).w,a2
00012B22 08B2 0000 0000             		bclr	#0,(a2,d0.w)
00012B28 6000 B2DA                  		bra.w	DeleteObject
00012B2C                            ; ===========================================================================
00012B2C 0000                       Obj63_Index:	dc.w Obj63_Main-Obj63_Index
00012B2E 0000                       		dc.w loc_124B2-Obj63_Index
00012B30 0000                       		dc.w loc_124C2-Obj63_Index
00012B32 0000                       		dc.w loc_124DE-Obj63_Index
00012B34                            ; ===========================================================================
00012B34                            
00012B34                            Obj63_Main:				; XREF: Obj63_Index
00012B34 1028 0028                  		move.b	$28(a0),d0
00012B38 6B00 0000                  		bmi.w	loc_12460
00012B3C 5428 0024                  		addq.b	#2,$24(a0)
00012B40 217C 0000 0000 0004        		move.l	#Map_obj63,4(a0)
00012B48 317C 43F6 0002             		move.w	#$43F6,2(a0)
00012B4E 0028 0004 0001             		ori.b	#4,1(a0)
00012B54 117C 0010 0019             		move.b	#$10,$19(a0)
00012B5A 117C 0004 0018             		move.b	#4,$18(a0)
00012B60 0C28 007F 0028             		cmpi.b	#$7F,$28(a0)
00012B66 6600                       		bne.s	loc_123E2
00012B68 5828 0024                  		addq.b	#4,$24(a0)
00012B6C 317C 03F6 0002             		move.w	#$3F6,2(a0)
00012B72 117C 0001 0018             		move.b	#1,$18(a0)
00012B78 6000 0000                  		bra.w	loc_124DE
00012B7C                            ; ===========================================================================
00012B7C                            
00012B7C                            loc_123E2:
00012B7C 117C 0004 001A             		move.b	#4,$1A(a0)
00012B82 7000                       		moveq	#0,d0
00012B84 1028 0028                  		move.b	$28(a0),d0
00012B88 3200                       		move.w	d0,d1
00012B8A E648                       		lsr.w	#3,d0
00012B8C 0240 001E                  		andi.w	#$1E,d0
00012B90 45FA 0000                  		lea	Obj63_Data(pc),a2
00012B94 D4F2 0000                  		adda.w	(a2,d0.w),a2
00012B98 315A 0038                  		move.w	(a2)+,$38(a0)
00012B9C 315A 0030                  		move.w	(a2)+,$30(a0)
00012BA0 214A 003C                  		move.l	a2,$3C(a0)
00012BA4 0241 000F                  		andi.w	#$F,d1
00012BA8 E549                       		lsl.w	#2,d1
00012BAA 1141 0038                  		move.b	d1,$38(a0)
00012BAE 117C 0004 003A             		move.b	#4,$3A(a0)
00012BB4 4A38 F7C0                  		tst.b	($FFFFF7C0).w
00012BB8 6700                       		beq.s	loc_1244C
00012BBA 117C 0001 003B             		move.b	#1,$3B(a0)
00012BC0 4428 003A                  		neg.b	$3A(a0)
00012BC4 7200                       		moveq	#0,d1
00012BC6 1228 0038                  		move.b	$38(a0),d1
00012BCA D228 003A                  		add.b	$3A(a0),d1
00012BCE B228 0039                  		cmp.b	$39(a0),d1
00012BD2 6500                       		bcs.s	loc_12448
00012BD4 1001                       		move.b	d1,d0
00012BD6 7200                       		moveq	#0,d1
00012BD8 4A00                       		tst.b	d0
00012BDA 6A00                       		bpl.s	loc_12448
00012BDC 1228 0039                  		move.b	$39(a0),d1
00012BE0 5901                       		subq.b	#4,d1
00012BE2                            
00012BE2                            loc_12448:
00012BE2 1141 0038                  		move.b	d1,$38(a0)
00012BE6                            
00012BE6                            loc_1244C:
00012BE6 3172 1000 0034             		move.w	(a2,d1.w),$34(a0)
00012BEC 3172 1002 0036             		move.w	2(a2,d1.w),$36(a0)
00012BF2 6100 0000                  		bsr.w	Obj63_ChangeDir
00012BF6 6000 0000                  		bra.w	loc_124B2
00012BFA                            ; ===========================================================================
00012BFA                            
00012BFA                            loc_12460:				; XREF: Obj63_Main
00012BFA 1140 002F                  		move.b	d0,$2F(a0)
00012BFE 0240 007F                  		andi.w	#$7F,d0
00012C02 45F8 F7C1                  		lea	($FFFFF7C1).w,a2
00012C06 08F2 0000 0000             		bset	#0,(a2,d0.w)
00012C0C 6600 B1F6                  		bne.w	DeleteObject
00012C10 D040                       		add.w	d0,d0
00012C12 0240 001E                  		andi.w	#$1E,d0
00012C16 0640 0070                  		addi.w	#$70,d0
00012C1A 45F9 0000 0000             		lea	(ObjPos_Index).l,a2
00012C20 D4F2 0000                  		adda.w	(a2,d0.w),a2
00012C24 321A                       		move.w	(a2)+,d1
00012C26 2248                       		movea.l	a0,a1
00012C28 6000                       		bra.s	Obj63_MakePtfms
00012C2A                            ; ===========================================================================
00012C2A                            
00012C2A                            Obj63_Loop:
00012C2A 6100 B622                  		bsr.w	SingleObjLoad
00012C2E 6600                       		bne.s	loc_124AA
00012C30                            
00012C30                            Obj63_MakePtfms:			; XREF: loc_12460
00012C30 12BC 0063                  		move.b	#$63,0(a1)
00012C34 335A 0008                  		move.w	(a2)+,8(a1)
00012C38 335A 000C                  		move.w	(a2)+,$C(a1)
00012C3C 301A                       		move.w	(a2)+,d0
00012C3E 1340 0028                  		move.b	d0,$28(a1)
00012C42                            
00012C42                            loc_124AA:
00012C42 51C9 FFE6                  		dbf	d1,Obj63_Loop
00012C46                            
00012C46 588F                       		addq.l	#4,sp
00012C48 4E75                       		rts	
00012C4A                            ; ===========================================================================
00012C4A                            
00012C4A                            loc_124B2:				; XREF: Obj63_Index
00012C4A 7200                       		moveq	#0,d1
00012C4C 1228 0019                  		move.b	$19(a0),d1
00012C50 4EB9 0000 7A48             		jsr	(PlatformObject).l
00012C56 6000 0000                  		bra.w	sub_12502
00012C5A                            ; ===========================================================================
00012C5A                            
00012C5A                            loc_124C2:				; XREF: Obj63_Index
00012C5A 7200                       		moveq	#0,d1
00012C5C 1228 0019                  		move.b	$19(a0),d1
00012C60 4EB9 0000 7BBC             		jsr	(ExitPlatform).l
00012C66 3F28 0008                  		move.w	8(a0),-(sp)
00012C6A 6100 0000                  		bsr.w	sub_12502
00012C6E 341F                       		move.w	(sp)+,d2
00012C70 4EF9 0000 8126             		jmp	(MvSonicOnPtfm2).l
00012C76                            ; ===========================================================================
00012C76                            
00012C76                            loc_124DE:				; XREF: Obj63_Index
00012C76 3038 FE04                  		move.w	($FFFFFE04).w,d0
00012C7A 0240 0003                  		andi.w	#3,d0
00012C7E 6600                       		bne.s	loc_124FC
00012C80 7201                       		moveq	#1,d1
00012C82 4A38 F7C0                  		tst.b	($FFFFF7C0).w
00012C86 6700                       		beq.s	loc_124F2
00012C88 4401                       		neg.b	d1
00012C8A                            
00012C8A                            loc_124F2:
00012C8A D328 001A                  		add.b	d1,$1A(a0)
00012C8E 0228 0003 001A             		andi.b	#3,$1A(a0)
00012C94                            
00012C94                            loc_124FC:
00012C94 588F                       		addq.l	#4,sp
00012C96 6000 D1D8                  		bra.w	MarkObjGone
00012C9A                            
00012C9A                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00012C9A                            
00012C9A                            
00012C9A                            sub_12502:				; XREF: loc_124B2; loc_124C2
00012C9A 4A38 F7EE                  		tst.b	($FFFFF7EE).w
00012C9E 6700                       		beq.s	loc_12520
00012CA0 4A28 003B                  		tst.b	$3B(a0)
00012CA4 6600                       		bne.s	loc_12520
00012CA6 117C 0001 003B             		move.b	#1,$3B(a0)
00012CAC 11FC 0001 F7C0             		move.b	#1,($FFFFF7C0).w
00012CB2 4428 003A                  		neg.b	$3A(a0)
00012CB6 6000                       		bra.s	loc_12534
00012CB8                            ; ===========================================================================
00012CB8                            
00012CB8                            loc_12520:
00012CB8 3028 0008                  		move.w	8(a0),d0
00012CBC B068 0034                  		cmp.w	$34(a0),d0
00012CC0 6600                       		bne.s	loc_1256A
00012CC2 3028 000C                  		move.w	$C(a0),d0
00012CC6 B068 0036                  		cmp.w	$36(a0),d0
00012CCA 6600                       		bne.s	loc_1256A
00012CCC                            
00012CCC                            loc_12534:
00012CCC 7200                       		moveq	#0,d1
00012CCE 1228 0038                  		move.b	$38(a0),d1
00012CD2 D228 003A                  		add.b	$3A(a0),d1
00012CD6 B228 0039                  		cmp.b	$39(a0),d1
00012CDA 6500                       		bcs.s	loc_12552
00012CDC 1001                       		move.b	d1,d0
00012CDE 7200                       		moveq	#0,d1
00012CE0 4A00                       		tst.b	d0
00012CE2 6A00                       		bpl.s	loc_12552
00012CE4 1228 0039                  		move.b	$39(a0),d1
00012CE8 5901                       		subq.b	#4,d1
00012CEA                            
00012CEA                            loc_12552:
00012CEA 1141 0038                  		move.b	d1,$38(a0)
00012CEE 2268 003C                  		movea.l	$3C(a0),a1
00012CF2 3171 1000 0034             		move.w	(a1,d1.w),$34(a0)
00012CF8 3171 1002 0036             		move.w	2(a1,d1.w),$36(a0)
00012CFE 6100 0000                  		bsr.w	Obj63_ChangeDir
00012D02                            
00012D02                            loc_1256A:
00012D02 6100 B09E                  		bsr.w	SpeedToPos
00012D06 4E75                       		rts	
00012D08                            ; End of function sub_12502
00012D08                            
00012D08                            
00012D08                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00012D08                            
00012D08                            
00012D08                            Obj63_ChangeDir:			; XREF: loc_123E2; sub_12502
00012D08 7000                       		moveq	#0,d0
00012D0A 343C FF00                  		move.w	#-$100,d2
00012D0E 3028 0008                  		move.w	8(a0),d0
00012D12 9068 0034                  		sub.w	$34(a0),d0
00012D16 6400                       		bcc.s	loc_12584
00012D18 4440                       		neg.w	d0
00012D1A 4442                       		neg.w	d2
00012D1C                            
00012D1C                            loc_12584:
00012D1C 7200                       		moveq	#0,d1
00012D1E 363C FF00                  		move.w	#-$100,d3
00012D22 3228 000C                  		move.w	$C(a0),d1
00012D26 9268 0036                  		sub.w	$36(a0),d1
00012D2A 6400                       		bcc.s	loc_12598
00012D2C 4441                       		neg.w	d1
00012D2E 4443                       		neg.w	d3
00012D30                            
00012D30                            loc_12598:
00012D30 B240                       		cmp.w	d0,d1
00012D32 6500                       		bcs.s	loc_125C2
00012D34 3028 0008                  		move.w	8(a0),d0
00012D38 9068 0034                  		sub.w	$34(a0),d0
00012D3C 6700                       		beq.s	loc_125AE
00012D3E 48C0                       		ext.l	d0
00012D40 E180                       		asl.l	#8,d0
00012D42 81C1                       		divs.w	d1,d0
00012D44 4440                       		neg.w	d0
00012D46                            
00012D46                            loc_125AE:
00012D46 3140 0010                  		move.w	d0,$10(a0)
00012D4A 3143 0012                  		move.w	d3,$12(a0)
00012D4E 4840                       		swap	d0
00012D50 3140 000A                  		move.w	d0,$A(a0)
00012D54 4268 000E                  		clr.w	$E(a0)
00012D58 4E75                       		rts	
00012D5A                            ; ===========================================================================
00012D5A                            
00012D5A                            loc_125C2:				; XREF: Obj63_ChangeDir
00012D5A 3228 000C                  		move.w	$C(a0),d1
00012D5E 9268 0036                  		sub.w	$36(a0),d1
00012D62 6700                       		beq.s	loc_125D4
00012D64 48C1                       		ext.l	d1
00012D66 E181                       		asl.l	#8,d1
00012D68 83C0                       		divs.w	d0,d1
00012D6A 4441                       		neg.w	d1
00012D6C                            
00012D6C                            loc_125D4:
00012D6C 3141 0012                  		move.w	d1,$12(a0)
00012D70 3142 0010                  		move.w	d2,$10(a0)
00012D74 4841                       		swap	d1
00012D76 3141 000E                  		move.w	d1,$E(a0)
00012D7A 4268 000A                  		clr.w	$A(a0)
00012D7E 4E75                       		rts	
00012D80                            ; End of function Obj63_ChangeDir
00012D80                            
00012D80                            ; ===========================================================================
00012D80 0000                       Obj63_Data:	dc.w word_125F4-Obj63_Data
00012D82 0000                       		dc.w word_12610-Obj63_Data
00012D84 0000                       		dc.w word_12628-Obj63_Data
00012D86 0000                       		dc.w word_1263C-Obj63_Data
00012D88 0000                       		dc.w word_12650-Obj63_Data
00012D8A 0000                       		dc.w word_12668-Obj63_Data
00012D8C 0018 1070 1078 021A 10BE+  word_125F4:	dc.w $18, $1070, $1078,	$21A, $10BE, $260, $10BE, $393
00012D9C 108C 03C5 1022 0390 1022+  		dc.w $108C, $3C5, $1022, $390, $1022, $244
00012DA8 0014 1280 127E 0280 12CE+  word_12610:	dc.w $14, $1280, $127E,	$280, $12CE, $2D0, $12CE, $46E
00012DB8 1232 0420 1232 02CC        		dc.w $1232, $420, $1232, $2CC
00012DC0 0010 0D68 0D22 0482 0D22+  word_12628:	dc.w $10, $D68,	$D22, $482, $D22, $5DE,	$DAE, $5DE, $DAE, $482
00012DD4 0010 0DA0 0D62 03A2 0DEE+  word_1263C:	dc.w $10, $DA0,	$D62, $3A2, $DEE, $3A2,	$DEE, $4DE, $D62, $4DE
00012DE8 0014 0D00 0CAC 0242 0DDE+  word_12650:	dc.w $14, $D00,	$CAC, $242, $DDE, $242,	$DDE, $3DE, $C52, $3DE,	$C52, $29C
00012E00 0010 1300 1252 020A 13DE+  word_12668:	dc.w $10, $1300, $1252,	$20A, $13DE, $20A, $13DE, $2BE,	$1252, $2BE
00012E14                            
00012E14                            ; ---------------------------------------------------------------------------
00012E14                            ; Sprite mappings - platforms on a conveyor belt (LZ)
00012E14                            ; ---------------------------------------------------------------------------
00012E14                            Map_obj63:
00012E14                            	include "_maps\obj63.asm"
00012E14                            ; ---------------------------------------------------------------------------
00012E14                            ; Sprite mappings - platforms on a conveyor belt (LZ)
00012E14                            ; ---------------------------------------------------------------------------
00012E14 0000 0000                  		dc.w byte_12686-Map_obj63, byte_1268C-Map_obj63
00012E18 0000 0000                  		dc.w byte_12692-Map_obj63, byte_12698-Map_obj63
00012E1C 0000                       		dc.w byte_1269E-Map_obj63
00012E1E 01                         byte_12686:	dc.b 1
00012E1F F00F 0000 F0               		dc.b $F0, $F, 0, 0, $F0
00012E24 01                         byte_1268C:	dc.b 1
00012E25 F00F 0010 F0               		dc.b $F0, $F, 0, $10, $F0
00012E2A 01                         byte_12692:	dc.b 1
00012E2B F00F 0020 F0               		dc.b $F0, $F, 0, $20, $F0
00012E30 01                         byte_12698:	dc.b 1
00012E31 F00F 0030 F0               		dc.b $F0, $F, 0, $30, $F0
00012E36 01                         byte_1269E:	dc.b 1
00012E37 F80D 0040 F0               		dc.b $F8, $D, 0, $40, $F0
00012E3C                            		even
00012E3C                            		even
00012E3C                            
00012E3C                            ; ===========================================================================
00012E3C                            ; ---------------------------------------------------------------------------
00012E3C                            ; Object 64 - bubbles (LZ)
00012E3C                            ; ---------------------------------------------------------------------------
00012E3C                            
00012E3C                            Obj64:					; XREF: Obj_Index
00012E3C 7000                       		moveq	#0,d0
00012E3E 1028 0024                  		move.b	$24(a0),d0
00012E42 323B 0000                  		move.w	Obj64_Index(pc,d0.w),d1
00012E46 4EFB 1000                  		jmp	Obj64_Index(pc,d1.w)
00012E4A                            ; ===========================================================================
00012E4A 0000                       Obj64_Index:	dc.w Obj64_Main-Obj64_Index
00012E4C 0000                       		dc.w Obj64_Animate-Obj64_Index
00012E4E 0000                       		dc.w Obj64_ChkWater-Obj64_Index
00012E50 0000                       		dc.w Obj64_Display2-Obj64_Index
00012E52 0000                       		dc.w Obj64_Delete3-Obj64_Index
00012E54 0000                       		dc.w Obj64_BblMaker-Obj64_Index
00012E56                            ; ===========================================================================
00012E56                            
00012E56                            Obj64_Main:				; XREF: Obj64_Index
00012E56 5428 0024                  		addq.b	#2,$24(a0)
00012E5A 217C 0000 0000 0004        		move.l	#Map_obj64,4(a0)
00012E62 317C 8348 0002             		move.w	#$8348,2(a0)
00012E68 117C 0084 0001             		move.b	#$84,1(a0)
00012E6E 117C 0010 0019             		move.b	#$10,$19(a0)
00012E74 117C 0001 0018             		move.b	#1,$18(a0)
00012E7A 1028 0028                  		move.b	$28(a0),d0	; get object type
00012E7E 6A00                       		bpl.s	Obj64_Bubble	; if type is $0-$7F, branch
00012E80 5028 0024                  		addq.b	#8,$24(a0)
00012E84 0240 007F                  		andi.w	#$7F,d0		; read only last 7 bits	(deduct	$80)
00012E88 1140 0032                  		move.b	d0,$32(a0)
00012E8C 1140 0033                  		move.b	d0,$33(a0)
00012E90 117C 0006 001C             		move.b	#6,$1C(a0)
00012E96 6000 0000                  		bra.w	Obj64_BblMaker
00012E9A                            ; ===========================================================================
00012E9A                            
00012E9A                            Obj64_Bubble:				; XREF: Obj64_Main
00012E9A 1140 001C                  		move.b	d0,$1C(a0)
00012E9E 3168 0008 0030             		move.w	8(a0),$30(a0)
00012EA4 317C FF78 0012             		move.w	#-$88,$12(a0)	; float	bubble upwards
00012EAA 4EB9 0000 2C86             		jsr	(RandomNumber).l
00012EB0 1140 0026                  		move.b	d0,$26(a0)
00012EB4                            
00012EB4                            Obj64_Animate:				; XREF: Obj64_Index
00012EB4 43F9 0000 0000             		lea	(Ani_obj64).l,a1
00012EBA 4EB9 0000 AE88             		jsr	AnimateSprite
00012EC0 0C28 0006 001A             		cmpi.b	#6,$1A(a0)
00012EC6 6600                       		bne.s	Obj64_ChkWater
00012EC8 117C 0001 002E             		move.b	#1,$2E(a0)
00012ECE                            
00012ECE                            Obj64_ChkWater:				; XREF: Obj64_Index
00012ECE 3038 F646                  		move.w	($FFFFF646).w,d0
00012ED2 B068 000C                  		cmp.w	$C(a0),d0	; is bubble underwater?
00012ED6 6500                       		bcs.s	Obj64_Wobble	; if yes, branch
00012ED8                            
00012ED8                            Obj64_Burst:				; XREF: Obj64_Wobble
00012ED8 117C 0006 0024             		move.b	#6,$24(a0)
00012EDE 5628 001C                  		addq.b	#3,$1C(a0)	; run "bursting" animation
00012EE2 6000 0000                  		bra.w	Obj64_Display2
00012EE6                            ; ===========================================================================
00012EE6                            
00012EE6                            Obj64_Wobble:				; XREF: Obj64_ChkWater
00012EE6 1028 0026                  		move.b	$26(a0),d0
00012EEA 5228 0026                  		addq.b	#1,$26(a0)
00012EEE 0240 007F                  		andi.w	#$7F,d0
00012EF2 43F9 0000 0000             		lea	(Obj0A_WobbleData).l,a1
00012EF8 1031 0000                  		move.b	(a1,d0.w),d0
00012EFC 4880                       		ext.w	d0
00012EFE D068 0030                  		add.w	$30(a0),d0
00012F02 3140 0008                  		move.w	d0,8(a0)	; change bubble's horizontal position
00012F06 4A28 002E                  		tst.b	$2E(a0)
00012F0A 6700                       		beq.s	Obj64_Display
00012F0C 6100 0000                  		bsr.w	Obj64_ChkSonic	; has Sonic touched the	bubble?
00012F10 6700                       		beq.s	Obj64_Display	; if not, branch
00012F12                            
00012F12 6100 0000                  		bsr.w	ResumeMusic	; cancel countdown music
00012F16 303C 00AD                  		move.w	#$AD,d0
00012F1A 4EB9 0000 15C0             		jsr	(PlaySound_Special).l ;	play collecting	bubble sound
00012F20 43F8 D000                  		lea	($FFFFD000).w,a1
00012F24 4269 0010                  		clr.w	$10(a1)
00012F28 4269 0012                  		clr.w	$12(a1)
00012F2C 4269 0014                  		clr.w	$14(a1)
00012F30 137C 0015 001C             		move.b	#$15,$1C(a1)
00012F36 337C 0023 003E             		move.w	#$23,$3E(a1)
00012F3C 137C 0000 003C             		move.b	#0,$3C(a1)
00012F42 08A9 0005 0022             		bclr	#5,$22(a1)
00012F48 08A9 0004 0022             		bclr	#4,$22(a1)
00012F4E 0829 0002 0022             		btst	#2,$22(a1)
00012F54 6700 FF82                  		beq.w	Obj64_Burst
00012F58 08A9 0002 0022             		bclr	#2,$22(a1)
00012F5E 137C 0013 0016             		move.b	#$13,$16(a1)
00012F64 137C 0009 0017             		move.b	#9,$17(a1)
00012F6A 5B69 000C                  		subq.w	#5,$C(a1)
00012F6E 6000 FF68                  		bra.w	Obj64_Burst
00012F72                            ; ===========================================================================
00012F72                            
00012F72                            Obj64_Display:				; XREF: Obj64_Wobble
00012F72 6100 AE2E                  		bsr.w	SpeedToPos
00012F76 4A28 0001                  		tst.b	1(a0)
00012F7A 6A00                       		bpl.s	Obj64_Delete
00012F7C 4EFA AE4A                  		jmp	DisplaySprite
00012F80                            ; ===========================================================================
00012F80                            
00012F80                            Obj64_Delete:
00012F80 4EFA AE82                  		jmp	DeleteObject
00012F84                            ; ===========================================================================
00012F84                            
00012F84                            Obj64_Display2:				; XREF: Obj64_Index
00012F84 43F9 0000 0000             		lea	(Ani_obj64).l,a1
00012F8A 4EB9 0000 AE88             		jsr	AnimateSprite
00012F90 4A28 0001                  		tst.b	1(a0)
00012F94 6A00                       		bpl.s	Obj64_Delete2
00012F96 4EFA AE30                  		jmp	DisplaySprite
00012F9A                            ; ===========================================================================
00012F9A                            
00012F9A                            Obj64_Delete2:
00012F9A 4EFA AE68                  		jmp	DeleteObject
00012F9E                            ; ===========================================================================
00012F9E                            
00012F9E                            Obj64_Delete3:				; XREF: Obj64_Index
00012F9E 6000 AE64                  		bra.w	DeleteObject
00012FA2                            ; ===========================================================================
00012FA2                            
00012FA2                            Obj64_BblMaker:				; XREF: Obj64_Index
00012FA2 4A68 0036                  		tst.w	$36(a0)
00012FA6 6600                       		bne.s	loc_12874
00012FA8 3038 F646                  		move.w	($FFFFF646).w,d0
00012FAC B068 000C                  		cmp.w	$C(a0),d0	; is bubble maker underwater?
00012FB0 6400 0000                  		bcc.w	Obj64_ChkDel	; if not, branch
00012FB4 4A28 0001                  		tst.b	1(a0)
00012FB8 6A00 0000                  		bpl.w	Obj64_ChkDel
00012FBC 5368 0038                  		subq.w	#1,$38(a0)
00012FC0 6A00 0000                  		bpl.w	loc_12914
00012FC4 317C 0001 0036             		move.w	#1,$36(a0)
00012FCA                            
00012FCA                            loc_1283A:
00012FCA 4EB9 0000 2C86             		jsr	(RandomNumber).l
00012FD0 3200                       		move.w	d0,d1
00012FD2 0240 0007                  		andi.w	#7,d0
00012FD6 0C40 0006                  		cmpi.w	#6,d0
00012FDA 64EE                       		bcc.s	loc_1283A
00012FDC                            
00012FDC 1140 0034                  		move.b	d0,$34(a0)
00012FE0 0241 000C                  		andi.w	#$C,d1
00012FE4 43F9 0000 0000             		lea	(Obj64_BblTypes).l,a1
00012FEA D2C1                       		adda.w	d1,a1
00012FEC 2149 003C                  		move.l	a1,$3C(a0)
00012FF0 5328 0032                  		subq.b	#1,$32(a0)
00012FF4 6A00                       		bpl.s	loc_12872
00012FF6 1168 0033 0032             		move.b	$33(a0),$32(a0)
00012FFC 08E8 0007 0036             		bset	#7,$36(a0)
00013002                            
00013002                            loc_12872:
00013002 6000                       		bra.s	loc_1287C
00013004                            ; ===========================================================================
00013004                            
00013004                            loc_12874:				; XREF: Obj64_BblMaker
00013004 5368 0038                  		subq.w	#1,$38(a0)
00013008 6A00 0000                  		bpl.w	loc_12914
0001300C                            
0001300C                            loc_1287C:
0001300C 4EB9 0000 2C86             		jsr	(RandomNumber).l
00013012 0240 001F                  		andi.w	#$1F,d0
00013016 3140 0038                  		move.w	d0,$38(a0)
0001301A 6100 B232                  		bsr.w	SingleObjLoad
0001301E 6600                       		bne.s	loc_128F8
00013020 12BC 0064                  		move.b	#$64,0(a1)	; load bubble object
00013024 3368 0008 0008             		move.w	8(a0),8(a1)
0001302A 4EB9 0000 2C86             		jsr	(RandomNumber).l
00013030 0240 000F                  		andi.w	#$F,d0
00013034 5140                       		subq.w	#8,d0
00013036 D169 0008                  		add.w	d0,8(a1)
0001303A 3368 000C 000C             		move.w	$C(a0),$C(a1)
00013040 7000                       		moveq	#0,d0
00013042 1028 0034                  		move.b	$34(a0),d0
00013046 2468 003C                  		movea.l	$3C(a0),a2
0001304A 1372 0000 0028             		move.b	(a2,d0.w),$28(a1)
00013050 0828 0007 0036             		btst	#7,$36(a0)
00013056 6700                       		beq.s	loc_128F8
00013058 4EB9 0000 2C86             		jsr	(RandomNumber).l
0001305E 0240 0003                  		andi.w	#3,d0
00013062 6600                       		bne.s	loc_128E4
00013064 08E8 0006 0036             		bset	#6,$36(a0)
0001306A 6600                       		bne.s	loc_128F8
0001306C 137C 0002 0028             		move.b	#2,$28(a1)
00013072                            
00013072                            loc_128E4:
00013072 4A28 0034                  		tst.b	$34(a0)
00013076 6600                       		bne.s	loc_128F8
00013078 08E8 0006 0036             		bset	#6,$36(a0)
0001307E 6600                       		bne.s	loc_128F8
00013080 137C 0002 0028             		move.b	#2,$28(a1)
00013086                            
00013086                            loc_128F8:
00013086 5328 0034                  		subq.b	#1,$34(a0)
0001308A 6A00                       		bpl.s	loc_12914
0001308C 4EB9 0000 2C86             		jsr	(RandomNumber).l
00013092 0240 007F                  		andi.w	#$7F,d0
00013096 0640 0080                  		addi.w	#$80,d0
0001309A D168 0038                  		add.w	d0,$38(a0)
0001309E 4268 0036                  		clr.w	$36(a0)
000130A2                            
000130A2                            loc_12914:
000130A2 43F9 0000 0000             		lea	(Ani_obj64).l,a1
000130A8 4EB9 0000 AE88             		jsr	AnimateSprite
000130AE                            
000130AE                            Obj64_ChkDel:				; XREF: Obj64_BblMaker
000130AE 3028 0008                  		move.w	8(a0),d0
000130B2 0240 FF80                  		andi.w	#$FF80,d0
000130B6 3238 F700                  		move.w	($FFFFF700).w,d1
000130BA 0441 0080                  		subi.w	#$80,d1
000130BE 0241 FF80                  		andi.w	#$FF80,d1
000130C2 9041                       		sub.w	d1,d0
000130C4 0C40 0280                  		cmpi.w	#$280,d0
000130C8 6200 AD3A                  		bhi.w	DeleteObject
000130CC 3038 F646                  		move.w	($FFFFF646).w,d0
000130D0 B068 000C                  		cmp.w	$C(a0),d0
000130D4 6500 ACF2                  		bcs.w	DisplaySprite
000130D8 4E75                       		rts	
000130DA                            ; ===========================================================================
000130DA                            ; bubble production sequence
000130DA                            
000130DA                            ; 0 = small bubble, 1 =	large bubble
000130DA                            
000130DA 0001 0000 0000 0100 0000+  Obj64_BblTypes:	dc.b 0,	1, 0, 0, 0, 0, 1, 0, 0,	0, 0, 1, 0, 1, 0, 0, 1,	0
000130EC                            
000130EC                            ; ===========================================================================
000130EC                            
000130EC                            Obj64_ChkSonic:				; XREF: Obj64_Wobble
000130EC 4A38 F7C8                  		tst.b	($FFFFF7C8).w
000130F0 6B00                       		bmi.s	loc_12998
000130F2 43F8 D000                  		lea	($FFFFD000).w,a1
000130F6 3029 0008                  		move.w	8(a1),d0
000130FA 3228 0008                  		move.w	8(a0),d1
000130FE 0441 0010                  		subi.w	#$10,d1
00013102 B240                       		cmp.w	d0,d1
00013104 6400                       		bcc.s	loc_12998
00013106 0641 0020                  		addi.w	#$20,d1
0001310A B240                       		cmp.w	d0,d1
0001310C 6500                       		bcs.s	loc_12998
0001310E 3029 000C                  		move.w	$C(a1),d0
00013112 3228 000C                  		move.w	$C(a0),d1
00013116 B240                       		cmp.w	d0,d1
00013118 6400                       		bcc.s	loc_12998
0001311A 0641 0010                  		addi.w	#$10,d1
0001311E B240                       		cmp.w	d0,d1
00013120 6500                       		bcs.s	loc_12998
00013122 7001                       		moveq	#1,d0
00013124 4E75                       		rts	
00013126                            ; ===========================================================================
00013126                            
00013126                            loc_12998:
00013126 7000                       		moveq	#0,d0
00013128 4E75                       		rts	
0001312A                            ; ===========================================================================
0001312A                            Ani_obj64:
0001312A                            	include "_anim\obj64.asm"
0001312A                            ; ---------------------------------------------------------------------------
0001312A                            ; Animation script - bubbles (LZ)
0001312A                            ; ---------------------------------------------------------------------------
0001312A 0000                       		dc.w byte_129AA-Ani_obj64
0001312C 0000                       		dc.w byte_129B0-Ani_obj64
0001312E 0000                       		dc.w byte_129B6-Ani_obj64
00013130 0000                       		dc.w byte_129BE-Ani_obj64
00013132 0000                       		dc.w byte_129BE-Ani_obj64
00013134 0000                       		dc.w byte_129C0-Ani_obj64
00013136 0000                       		dc.w byte_129C6-Ani_obj64
00013138 0E00 0102 FC00             byte_129AA:	dc.b $E, 0, 1, 2, $FC, 0
0001313E 0E01 0203 04FC             byte_129B0:	dc.b $E, 1, 2, 3, 4, $FC
00013144 0E02 0304 0506 FC00        byte_129B6:	dc.b $E, 2, 3, 4, 5, 6,	$FC, 0
0001314C 04FC                       byte_129BE:	dc.b 4,	$FC
0001314E 0406 0708 FC00             byte_129C0:	dc.b 4,	6, 7, 8, $FC, 0
00013154 0F13 1415 FF               byte_129C6:	dc.b $F, $13, $14, $15,	$FF
0001315A 00                         		even
0001315A 00                         		even
0001315A                            
0001315A                            ; ---------------------------------------------------------------------------
0001315A                            ; Sprite mappings - bubbles (LZ)
0001315A                            ; ---------------------------------------------------------------------------
0001315A                            Map_obj64:
0001315A                            	include "_maps\obj64.asm"
0001315A                            ; ---------------------------------------------------------------------------
0001315A                            ; Sprite mappings - bubbles (LZ)
0001315A                            ; ---------------------------------------------------------------------------
0001315A 0000 0000                  		dc.w byte_129FA-Map_obj64, byte_12A00-Map_obj64
0001315E 0000 0000                  		dc.w byte_12A06-Map_obj64, byte_12A0C-Map_obj64
00013162 0000 0000                  		dc.w byte_12A12-Map_obj64, byte_12A18-Map_obj64
00013166 0000 0000                  		dc.w byte_12A1E-Map_obj64, byte_12A24-Map_obj64
0001316A 0000 0000                  		dc.w byte_12A39-Map_obj64, byte_12A4E-Map_obj64
0001316E 0000 0000                  		dc.w byte_12A54-Map_obj64, byte_12A5A-Map_obj64
00013172 0000 0000                  		dc.w byte_12A60-Map_obj64, byte_12A66-Map_obj64
00013176 0000 0000                  		dc.w byte_12A6C-Map_obj64, byte_12A72-Map_obj64
0001317A 0000 0000                  		dc.w byte_12A78-Map_obj64, byte_12A7E-Map_obj64
0001317E 0000 0000                  		dc.w byte_12A84-Map_obj64, byte_12A8A-Map_obj64
00013182 0000 0000                  		dc.w byte_12A90-Map_obj64, byte_12A96-Map_obj64
00013186 0000                       		dc.w byte_12A9C-Map_obj64
00013188 01                         byte_129FA:	dc.b 1
00013189 FC00 0000 FC               		dc.b $FC, 0, 0,	0, $FC
0001318E 01                         byte_12A00:	dc.b 1
0001318F FC00 0001 FC               		dc.b $FC, 0, 0,	1, $FC
00013194 01                         byte_12A06:	dc.b 1
00013195 FC00 0002 FC               		dc.b $FC, 0, 0,	2, $FC
0001319A 01                         byte_12A0C:	dc.b 1
0001319B F805 0003 F8               		dc.b $F8, 5, 0,	3, $F8
000131A0 01                         byte_12A12:	dc.b 1
000131A1 F805 0007 F8               		dc.b $F8, 5, 0,	7, $F8
000131A6 01                         byte_12A18:	dc.b 1
000131A7 F40A 000B F4               		dc.b $F4, $A, 0, $B, $F4
000131AC 01                         byte_12A1E:	dc.b 1
000131AD F00F 0014 F0               		dc.b $F0, $F, 0, $14, $F0
000131B2 04                         byte_12A24:	dc.b 4
000131B3 F005 0024 F0               		dc.b $F0, 5, 0,	$24, $F0
000131B8 F005 0824 00               		dc.b $F0, 5, 8,	$24, 0
000131BD 0005 1024 F0               		dc.b 0,	5, $10,	$24, $F0
000131C2 0005 1824 00               		dc.b 0,	5, $18,	$24, 0
000131C7 04                         byte_12A39:	dc.b 4
000131C8 F005 0028 F0               		dc.b $F0, 5, 0,	$28, $F0
000131CD F005 0828 00               		dc.b $F0, 5, 8,	$28, 0
000131D2 0005 1028 F0               		dc.b 0,	5, $10,	$28, $F0
000131D7 0005 1828 00               		dc.b 0,	5, $18,	$28, 0
000131DC 01                         byte_12A4E:	dc.b 1
000131DD F406 002C F8               		dc.b $F4, 6, 0,	$2C, $F8
000131E2 01                         byte_12A54:	dc.b 1
000131E3 F406 0032 F8               		dc.b $F4, 6, 0,	$32, $F8
000131E8 01                         byte_12A5A:	dc.b 1
000131E9 F406 0038 F8               		dc.b $F4, 6, 0,	$38, $F8
000131EE 01                         byte_12A60:	dc.b 1
000131EF F406 003E F8               		dc.b $F4, 6, 0,	$3E, $F8
000131F4 01                         byte_12A66:	dc.b 1
000131F5 F406 2044 F8               		dc.b $F4, 6, $20, $44, $F8
000131FA 01                         byte_12A6C:	dc.b 1
000131FB F406 204A F8               		dc.b $F4, 6, $20, $4A, $F8
00013200 01                         byte_12A72:	dc.b 1
00013201 F406 2050 F8               		dc.b $F4, 6, $20, $50, $F8
00013206 01                         byte_12A78:	dc.b 1
00013207 F406 2056 F8               		dc.b $F4, 6, $20, $56, $F8
0001320C 01                         byte_12A7E:	dc.b 1
0001320D F406 205C F8               		dc.b $F4, 6, $20, $5C, $F8
00013212 01                         byte_12A84:	dc.b 1
00013213 F406 2062 F8               		dc.b $F4, 6, $20, $62, $F8
00013218 01                         byte_12A8A:	dc.b 1
00013219 F805 0068 F8               		dc.b $F8, 5, 0,	$68, $F8
0001321E 01                         byte_12A90:	dc.b 1
0001321F F805 006C F8               		dc.b $F8, 5, 0,	$6C, $F8
00013224 01                         byte_12A96:	dc.b 1
00013225 F805 0070 F8               		dc.b $F8, 5, 0,	$70, $F8
0001322A 00                         byte_12A9C:	dc.b 0
0001322C 00                         		even
0001322C 00                         		even
0001322C                            
0001322C                            ; ===========================================================================
0001322C                            ; ---------------------------------------------------------------------------
0001322C                            ; Object 65 - waterfalls (LZ)
0001322C                            ; ---------------------------------------------------------------------------
0001322C                            
0001322C                            Obj65:					; XREF: Obj_Index
0001322C 7000                       		moveq	#0,d0
0001322E 1028 0024                  		move.b	$24(a0),d0
00013232 323B 0000                  		move.w	Obj65_Index(pc,d0.w),d1
00013236 4EFB 1000                  		jmp	Obj65_Index(pc,d1.w)
0001323A                            ; ===========================================================================
0001323A 0000                       Obj65_Index:	dc.w Obj65_Main-Obj65_Index
0001323C 0000                       		dc.w Obj65_Animate-Obj65_Index
0001323E 0000                       		dc.w Obj65_ChkDel-Obj65_Index
00013240 0000                       		dc.w Obj65_FixHeight-Obj65_Index
00013242 0000                       		dc.w loc_12B36-Obj65_Index
00013244                            ; ===========================================================================
00013244                            
00013244                            Obj65_Main:				; XREF: Obj65_Index
00013244 5828 0024                  		addq.b	#4,$24(a0)
00013248 217C 0000 0000 0004        		move.l	#Map_obj65,4(a0)
00013250 317C 4259 0002             		move.w	#$4259,2(a0)
00013256 0028 0004 0001             		ori.b	#4,1(a0)
0001325C 117C 0018 0019             		move.b	#$18,$19(a0)
00013262 117C 0001 0018             		move.b	#1,$18(a0)
00013268 1028 0028                  		move.b	$28(a0),d0	; get object type
0001326C 6A00                       		bpl.s	loc_12AE6
0001326E 08E8 0007 0002             		bset	#7,2(a0)
00013274                            
00013274                            loc_12AE6:
00013274 0200 000F                  		andi.b	#$F,d0		; read only the	2nd byte
00013278 1140 001A                  		move.b	d0,$1A(a0)	; set frame number
0001327C 0C00 0009                  		cmpi.b	#9,d0		; is object type $x9 ?
00013280 6600                       		bne.s	Obj65_ChkDel	; if not, branch
00013282 4228 0018                  		clr.b	$18(a0)
00013286 5528 0024                  		subq.b	#2,$24(a0)
0001328A 0828 0006 0028             		btst	#6,$28(a0)	; is object type $4x ?
00013290 6700                       		beq.s	loc_12B0A	; if not, branch
00013292 117C 0006 0024             		move.b	#6,$24(a0)
00013298                            
00013298                            loc_12B0A:
00013298 0828 0005 0028             		btst	#5,$28(a0)	; is object type $Ax ?
0001329E 6700                       		beq.s	Obj65_Animate	; if not, branch
000132A0 117C 0008 0024             		move.b	#8,$24(a0)
000132A6                            
000132A6                            Obj65_Animate:				; XREF: Obj65_Index
000132A6 43F9 0000 0000             		lea	(Ani_obj65).l,a1
000132AC 4EB9 0000 AE88             		jsr	AnimateSprite
000132B2                            
000132B2                            Obj65_ChkDel:				; XREF: Obj65_Index
000132B2 6000 CBBC                  		bra.w	MarkObjGone
000132B6                            ; ===========================================================================
000132B6                            
000132B6                            Obj65_FixHeight:			; XREF: Obj65_Index
000132B6 3038 F646                  		move.w	($FFFFF646).w,d0
000132BA 0440 0010                  		subi.w	#$10,d0
000132BE 3140 000C                  		move.w	d0,$C(a0)	; match	object position	to water height
000132C2 60E2                       		bra.s	Obj65_Animate
000132C4                            ; ===========================================================================
000132C4                            
000132C4                            loc_12B36:				; XREF: Obj65_Index
000132C4 08A8 0007 0002             		bclr	#7,2(a0)
000132CA 0C38 0007 A506             		cmpi.b	#7,($FFFFA506).w
000132D0 6600                       		bne.s	Obj65_Animate2
000132D2 08E8 0007 0002             		bset	#7,2(a0)
000132D8                            
000132D8                            Obj65_Animate2:
000132D8 60CC                       		bra.s	Obj65_Animate
000132DA                            ; ===========================================================================
000132DA                            Ani_obj65:
000132DA                            	include "_anim\obj65.asm"
000132DA                            ; ---------------------------------------------------------------------------
000132DA                            ; Animation script - waterfall (LZ)
000132DA                            ; ---------------------------------------------------------------------------
000132DA 0000                       		dc.w byte_12B4E-Ani_obj65
000132DC 0509 0A0B FF               byte_12B4E:	dc.b 5,	9, $A, $B, $FF
000132E2 00                         		even
000132E2 00                         		even
000132E2                            
000132E2                            ; ---------------------------------------------------------------------------
000132E2                            ; Sprite mappings - waterfalls (LZ)
000132E2                            ; ---------------------------------------------------------------------------
000132E2                            Map_obj65:
000132E2                            	include "_maps\obj65.asm"
000132E2                            ; ---------------------------------------------------------------------------
000132E2                            ; Sprite mappings - waterfalls (LZ)
000132E2                            ; ---------------------------------------------------------------------------
000132E2 0000 0000                  		dc.w byte_12B6C-Map_obj65, byte_12B72-Map_obj65
000132E6 0000 0000                  		dc.w byte_12B7D-Map_obj65, byte_12B88-Map_obj65
000132EA 0000 0000                  		dc.w byte_12B8E-Map_obj65, byte_12B99-Map_obj65
000132EE 0000 0000                  		dc.w byte_12B9F-Map_obj65, byte_12BA5-Map_obj65
000132F2 0000 0000                  		dc.w byte_12BAB-Map_obj65, byte_12BB6-Map_obj65
000132F6 0000 0000                  		dc.w byte_12BC1-Map_obj65, byte_12BCC-Map_obj65
000132FA 01                         byte_12B6C:	dc.b 1
000132FB F007 0000 F8               		dc.b $F0, 7, 0,	0, $F8
00013300 02                         byte_12B72:	dc.b 2
00013301 F804 0008 FC               		dc.b $F8, 4, 0,	8, $FC
00013306 0008 000A F4               		dc.b 0,	8, 0, $A, $F4
0001330B 02                         byte_12B7D:	dc.b 2
0001330C F800 0008 00               		dc.b $F8, 0, 0,	8, 0
00013311 0004 000D F8               		dc.b 0,	4, 0, $D, $F8
00013316 01                         byte_12B88:	dc.b 1
00013317 F801 000F 00               		dc.b $F8, 1, 0,	$F, 0
0001331C 02                         byte_12B8E:	dc.b 2
0001331D F800 0008 00               		dc.b $F8, 0, 0,	8, 0
00013322 0004 000D F8               		dc.b 0,	4, 0, $D, $F8
00013327 01                         byte_12B99:	dc.b 1
00013328 F801 0011 00               		dc.b $F8, 1, 0,	$11, 0
0001332D 01                         byte_12B9F:	dc.b 1
0001332E F801 0013 00               		dc.b $F8, 1, 0,	$13, 0
00013333 01                         byte_12BA5:	dc.b 1
00013334 F007 0015 F8               		dc.b $F0, 7, 0,	$15, $F8
00013339 02                         byte_12BAB:	dc.b 2
0001333A F80C 001D F6               		dc.b $F8, $C, 0, $1D, $F6
0001333F 000C 0021 E8               		dc.b 0,	$C, 0, $21, $E8
00013344 02                         byte_12BB6:	dc.b 2
00013345 F00B 0025 E8               		dc.b $F0, $B, 0, $25, $E8
0001334A F00B 0031 00               		dc.b $F0, $B, 0, $31, 0
0001334F 02                         byte_12BC1:	dc.b 2
00013350 F00B 003D E8               		dc.b $F0, $B, 0, $3D, $E8
00013355 F00B 0049 00               		dc.b $F0, $B, 0, $49, 0
0001335A 02                         byte_12BCC:	dc.b 2
0001335B F00B 0055 E8               		dc.b $F0, $B, 0, $55, $E8
00013360 F00B 0061 00               		dc.b $F0, $B, 0, $61, 0
00013366 00                         		even
00013366 00                         		even
00013366                            
00013366                            ; ===========================================================================
00013366                            ; ---------------------------------------------------------------------------
00013366                            ; Object 01 - Sonic
00013366                            ; ---------------------------------------------------------------------------
00013366                            
00013366                            Obj01:					; XREF: Obj_Index
00013366 4A78 FE08                  		tst.w	($FFFFFE08).w	; is debug mode	being used?
0001336A 6700                       		beq.s	Obj01_Normal	; if not, branch
0001336C 4EF9 0000 0000             		jmp	DebugMode
00013372                            ; ===========================================================================
00013372                            
00013372                            Obj01_Normal:
00013372 7000                       		moveq	#0,d0
00013374 1028 0024                  		move.b	$24(a0),d0
00013378 323B 0000                  		move.w	Obj01_Index(pc,d0.w),d1
0001337C 4EFB 1000                  		jmp	Obj01_Index(pc,d1.w)
00013380                            ; ===========================================================================
00013380 0000                       Obj01_Index:	dc.w Obj01_Main-Obj01_Index
00013382 0000                       		dc.w Obj01_Control-Obj01_Index
00013384 0000                       		dc.w Obj01_Hurt-Obj01_Index
00013386 0000                       		dc.w Obj01_Death-Obj01_Index
00013388 0000                       		dc.w Obj01_ResetLevel-Obj01_Index
0001338A                            ; ===========================================================================
0001338A                            
0001338A                            Player_Maps:
0001338A 0000 0000                  	dc.l	Map_Sonic
0001338E 0000 0000                  	dc.l	Map_Sonic ; gronic
00013392 0000 0000                  	dc.l	Map_Sonic ; anakama
00013396                            	; insert player mapping here
00013396                            	
00013396                            Obj01_Main:				; XREF: Obj01_Index
00013396 5428 0024                  		addq.b	#2,$24(a0)
0001339A 117C 0013 0016             		move.b	#$13,$16(a0)
000133A0 117C 0009 0017             		move.b	#9,$17(a0)
000133A6                            		
000133A6 7000                       		moveq	#0,d0
000133A8 1038 FFE8                  		move.b	(v_character),d0
000133AC E548                       		lsl.w	#2,d0
000133AE 43FA FFDA                  		lea 	Player_Maps(pc),a1
000133B2 2171 0000 0004             		move.l	(a1,d0.w),4(a0)	; load Map patterns
000133B8                            		
000133B8 317C 0780 0002             		move.w	#$780,2(a0)
000133BE 117C 0002 0018             		move.b	#2,$18(a0)
000133C4 117C 0018 0019             		move.b	#$18,$19(a0)
000133CA 117C 0004 0001             		move.b	#4,1(a0)
000133D0 31FC 0600 F760             		move.w	#$600,($FFFFF760).w ; Sonic's top speed
000133D6 31FC 000C F762             		move.w	#$C,($FFFFF762).w ; Sonic's acceleration
000133DC 31FC 0080 F764             		move.w	#$80,($FFFFF764).w ; Sonic's deceleration
000133E2                            
000133E2                            Obj01_Control:				; XREF: Obj01_Index
000133E2 4A78 FFFA                  		tst.w	($FFFFFFFA).w	; is debug cheat enabled?
000133E6 6700                       		beq.s	loc_12C58	; if not, branch
000133E8 0838 0004 F605             		btst	#4,($FFFFF605).w ; is button C pressed?
000133EE 6700                       		beq.s	loc_12C58	; if not, branch
000133F0 31FC 0001 FE08             		move.w	#1,($FFFFFE08).w ; change Sonic	into a ring/item
000133F6 4238 F7CC                  		clr.b	($FFFFF7CC).w
000133FA 4E75                       		rts	
000133FC                            ; ===========================================================================
000133FC                            
000133FC                            loc_12C58:
000133FC 4A38 F7CC                  		tst.b	($FFFFF7CC).w	; are controls locked?
00013400 6600                       		bne.s	loc_12C64	; if yes, branch
00013402 31F8 F604 F602             		move.w	($FFFFF604).w,($FFFFF602).w ; enable joypad control
00013408                            
00013408                            loc_12C64:
00013408 0838 0000 F7C8             		btst	#0,($FFFFF7C8).w ; are controls	locked?
0001340E 6600                       		bne.s	loc_12C7E	; if yes, branch
00013410 7000                       		moveq	#0,d0
00013412 1028 0022                  		move.b	$22(a0),d0
00013416 0240 0006                  		andi.w	#6,d0
0001341A 323B 0000                  		move.w	Obj01_Modes(pc,d0.w),d1
0001341E 4EBB 1000                  		jsr	Obj01_Modes(pc,d1.w)
00013422                            
00013422                            loc_12C7E:
00013422 6100                       		bsr.s	Sonic_Display
00013424 6100 0000                  		bsr.w	Sonic_RecordPos
00013428 6100 0000                  		bsr.w	Sonic_Water
0001342C 1178 F768 0036             		move.b	($FFFFF768).w,$36(a0)
00013432 1178 F76A 0037             		move.b	($FFFFF76A).w,$37(a0)
00013438 4A38 F7C7                  		tst.b	($FFFFF7C7).w
0001343C 6700                       		beq.s	loc_12CA6
0001343E 4A28 001C                  		tst.b	$1C(a0)
00013442 6600                       		bne.s	loc_12CA6
00013444 1168 001D 001C             		move.b	$1D(a0),$1C(a0)
0001344A                            
0001344A                            loc_12CA6:
0001344A 6100 0000                  		bsr.w	Sonic_Animate
0001344E 4A38 F7C8                  		tst.b	($FFFFF7C8).w
00013452 6B00                       		bmi.s	loc_12CB6
00013454 4EB9 0000 0000             		jsr	TouchResponse
0001345A                            
0001345A                            loc_12CB6:
0001345A 6100 0000                  		bsr.w	Sonic_Loops
0001345E 6100 0000                  		bsr.w	LoadSonicDynPLC
00013462 4E75                       		rts	
00013464                            ; ===========================================================================
00013464 0000                       Obj01_Modes:	dc.w Obj01_MdNormal-Obj01_Modes
00013466 0000                       		dc.w Obj01_MdJump-Obj01_Modes
00013468 0000                       		dc.w Obj01_MdRoll-Obj01_Modes
0001346A 0000                       		dc.w Obj01_MdJump2-Obj01_Modes
0001346C                            ; ---------------------------------------------------------------------------
0001346C                            ; Music	to play	after invincibility wears off
0001346C                            ; ---------------------------------------------------------------------------
0001346C                            ; ===========================================================================
0001346C                            
0001346C                            Sonic_Display:				; XREF: loc_12C7E
0001346C 3028 0030                  		move.w	$30(a0),d0
00013470 6700                       		beq.s	Obj01_Display
00013472 5368 0030                  		subq.w	#1,$30(a0)
00013476 E648                       		lsr.w	#3,d0
00013478 6400                       		bcc.s	Obj01_ChkInvin
0001347A                            
0001347A                            Obj01_Display:
0001347A 4EBA A94C                  		jsr	DisplaySprite
0001347E                            
0001347E                            ; Second part of the NineKode. Play different music on different acts - after invincibility wears off
0001347E                             
0001347E                            Obj01_ChkInvin:
0001347E 4A38 FE2D                  		tst.b	($FFFFFE2D).w	; does Sonic have invincibility?
00013482 6700 0000                  		beq.w	Obj01_ChkShoes	; if not, branch	; change to beq.w
00013486 4A68 0032                  		tst.w	$32(a0)		; check	time remaining for invinciblity
0001348A 6700 0000                  		beq.w	Obj01_ChkShoes	; if no	time remains, branch	; change to beq.w
0001348E 5368 0032                  		subq.w	#1,$32(a0)	; subtract 1 from time
00013492 6600 0000                  		bne.w	Obj01_ChkShoes	; change to bne.w
00013496 4A38 F7AA                  		tst.b	($FFFFF7AA).w
0001349A 6600 0000                  		bne.w	Obj01_RmvInvin	; change to bne.w
0001349E 0C78 000C FE14             		cmpi.w	#$C,($FFFFFE14).w
000134A4 6500 0000                  		bcs.w	Obj01_RmvInvin	; change to bcs.w
000134A8 7000                       		moveq	#0,d0
000134AA 1038 FE10                  		move.b	($FFFFFE10).w,d0
000134AE                             
000134AE 0C38 0000 FE11             		cmpi.b	#$0,($FFFFFE11).w	; is this act 1?
000134B4 6600                       		bne.s	Obj01_GetBgm2	; if not, branch
000134B6 43F9 0000 3C32             		lea	(MusicList1).l,a1	; load Music Playlist for Acts 1
000134BC 6000                       		bra.s	Obj01_PlayMusic	; go to PlayMusic
000134BE                             
000134BE                            Obj01_GetBgm2:
000134BE 0C38 0001 FE11             		cmpi.b	#$1,($FFFFFE11).w	; is this act 2?
000134C4 6600                       		bne.s	Obj01_GetBgm3	; if not, branch
000134C6 43F9 0000 3C3A             		lea	(MusicList2).l,a1	; load Music Playlist for Acts 2
000134CC 6000                       		bra.s	Obj01_PlayMusic	; go to PlayMusic
000134CE                             
000134CE                            Obj01_GetBgm3:
000134CE 0C38 0002 FE11             		cmpi.b	#$2,($FFFFFE11).w	; is this act 3?
000134D4 6600                       		bne.s	Obj01_GetBgm4	; if not, branch
000134D6 43F9 0000 3C40             		lea	(MusicList3).l,a1	; load Music Playlist for Acts 3
000134DC 6000                       		bra.s	Obj01_PlayMusic	; go to PlayMusic
000134DE                             
000134DE                            Obj01_GetBgm4:
000134DE 0C38 0003 FE11             		cmpi.b	#$3,($FFFFFE11).w	; is this act 4?
000134E4 6600                       		bne.s	Obj01_PlayMusic	; if not, branch
000134E6 43F9 0000 3C46             		lea	(MusicList4).l,a1	; load Music Playlist for Acts 4
000134EC                             
000134EC                            Obj01_PlayMusic:
000134EC 1031 0000                  		move.b	(a1,d0.w),d0
000134F0 4EB9 0000 15BA             		jsr	(PlaySound).l	; play normal music
000134F6                             
000134F6                            ; NineKode ends here.
000134F6                            
000134F6                            Obj01_RmvInvin:
000134F6 11FC 0000 FE2D             		move.b	#0,($FFFFFE2D).w ; cancel invincibility
000134FC                            
000134FC                            Obj01_ChkShoes:
000134FC 4A38 FE2E                  		tst.b	($FFFFFE2E).w	; does Sonic have speed	shoes?
00013500 6700                       		beq.s	Obj01_ExitChk	; if not, branch
00013502 4A68 0034                  		tst.w	$34(a0)		; check	time remaining
00013506 6700                       		beq.s	Obj01_ExitChk
00013508 5368 0034                  		subq.w	#1,$34(a0)	; subtract 1 from time
0001350C 6600                       		bne.s	Obj01_ExitChk
0001350E 31FC 0600 F760             		move.w	#$600,($FFFFF760).w ; restore Sonic's speed
00013514 31FC 000C F762             		move.w	#$C,($FFFFF762).w ; restore Sonic's acceleration
0001351A 31FC 0080 F764             		move.w	#$80,($FFFFF764).w ; restore Sonic's deceleration
00013520 11FC 0000 FE2E             		move.b	#0,($FFFFFE2E).w ; cancel speed	shoes
00013526 303C 00E3                  		move.w	#$E3,d0
0001352A 4EF9 0000 15BA             		jmp	(PlaySound).l	; run music at normal speed
00013530                            ; ===========================================================================
00013530                            
00013530                            Obj01_ExitChk:
00013530 4E75                       		rts	
00013532                            
00013532                            ; ---------------------------------------------------------------------------
00013532                            ; Subroutine to	record Sonic's previous positions for invincibility stars
00013532                            ; ---------------------------------------------------------------------------
00013532                            
00013532                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00013532                            
00013532                            
00013532                            Sonic_RecordPos:			; XREF: loc_12C7E; Obj01_Hurt; Obj01_Death
00013532 3038 F7A8                  		move.w	($FFFFF7A8).w,d0
00013536 43F8 CB00                  		lea	($FFFFCB00).w,a1
0001353A 43F1 0000                  		lea	(a1,d0.w),a1
0001353E 32E8 0008                  		move.w	8(a0),(a1)+
00013542 32E8 000C                  		move.w	$C(a0),(a1)+
00013546 5838 F7A9                  		addq.b	#4,($FFFFF7A9).w
0001354A 4E75                       		rts	
0001354C                            ; End of function Sonic_RecordPos
0001354C                            
0001354C                            ; ---------------------------------------------------------------------------
0001354C                            ; Subroutine for Sonic when he's underwater
0001354C                            ; ---------------------------------------------------------------------------
0001354C                            
0001354C                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0001354C                            
0001354C                            
0001354C                            Sonic_Water:				; XREF: loc_12C7E
0001354C 0C38 0001 FE10             		cmpi.b	#1,($FFFFFE10).w ; is level LZ?
00013552 6700                       		beq.s	Obj01_InWater	; if yes, branch
00013554                            
00013554                            locret_12D80:
00013554 4E75                       		rts	
00013556                            ; ===========================================================================
00013556                            
00013556                            Obj01_InWater:
00013556 3038 F646                  		move.w	($FFFFF646).w,d0
0001355A B068 000C                  		cmp.w	$C(a0),d0	; is Sonic above the water?
0001355E 6C00                       		bge.s	Obj01_OutWater	; if yes, branch
00013560 08E8 0006 0022             		bset	#6,$22(a0)
00013566 66EC                       		bne.s	locret_12D80
00013568 6100 0000                  		bsr.w	ResumeMusic
0001356C 11FC 000A D340             		move.b	#$A,($FFFFD340).w ; load bubbles object	from Sonic's mouth
00013572 11FC 0081 D368             		move.b	#$81,($FFFFD368).w
00013578 31FC 0300 F760             		move.w	#$300,($FFFFF760).w ; change Sonic's top speed
0001357E 31FC 0006 F762             		move.w	#6,($FFFFF762).w ; change Sonic's acceleration
00013584 31FC 0040 F764             		move.w	#$40,($FFFFF764).w ; change Sonic's deceleration
0001358A E0E8 0010                  		asr	$10(a0)
0001358E E0E8 0012                  		asr	$12(a0)
00013592 E0E8 0012                  		asr	$12(a0)
00013596 67BC                       		beq.s	locret_12D80
00013598 11FC 0008 D300             		move.b	#8,($FFFFD300).w ; load	splash object
0001359E 303C 00AA                  		move.w	#$AA,d0
000135A2 4EF9 0000 15C0             		jmp	(PlaySound_Special).l ;	play splash sound
000135A8                            ; ===========================================================================
000135A8                            
000135A8                            Obj01_OutWater:
000135A8 08A8 0006 0022             		bclr	#6,$22(a0)
000135AE 67A4                       		beq.s	locret_12D80
000135B0 6100 0000                  		bsr.w	ResumeMusic
000135B4 31FC 0600 F760             		move.w	#$600,($FFFFF760).w ; restore Sonic's speed
000135BA 31FC 000C F762             		move.w	#$C,($FFFFF762).w ; restore Sonic's acceleration
000135C0 31FC 0080 F764             		move.w	#$80,($FFFFF764).w ; restore Sonic's deceleration
000135C6 E1E8 0012                  		asl	$12(a0)
000135CA 6700 FF88                  		beq.w	locret_12D80
000135CE 11FC 0008 D300             		move.b	#8,($FFFFD300).w ; load	splash object
000135D4 0C68 F000 0012             		cmpi.w	#-$1000,$12(a0)
000135DA 6E00                       		bgt.s	loc_12E0E
000135DC 317C F000 0012             		move.w	#-$1000,$12(a0)	; set maximum speed on leaving water
000135E2                            
000135E2                            loc_12E0E:
000135E2 303C 00AA                  		move.w	#$AA,d0
000135E6 4EF9 0000 15C0             		jmp	(PlaySound_Special).l ;	play splash sound
000135EC                            ; End of function Sonic_Water
000135EC                            
000135EC                            ; ===========================================================================
000135EC                            ; ---------------------------------------------------------------------------
000135EC                            ; Modes	for controlling	Sonic
000135EC                            ; ---------------------------------------------------------------------------
000135EC                            
000135EC                            Obj01_MdNormal:				; XREF: Obj01_Modes
000135EC 6100 0000                  		bsr.w	Sonic_Jump
000135F0 6100 0000                  		bsr.w	Sonic_SlopeResist
000135F4 6100 0000                  		bsr.w	Sonic_Move
000135F8 6100 0000                  		bsr.w	Sonic_Roll
000135FC 6100 0000                  		bsr.w	Sonic_LevelBound
00013600 4EBA A7A0                  		jsr	SpeedToPos
00013604 6100 0000                  		bsr.w	Sonic_AnglePos
00013608 6100 0000                  		bsr.w	Sonic_SlopeRepel
0001360C 4E75                       		rts	
0001360E                            ; ===========================================================================
0001360E                            
0001360E                            Obj01_MdJump:				; XREF: Obj01_Modes
0001360E 6100 0000                  		bsr.w	Sonic_JumpHeight
00013612 6100 0000                  		bsr.w	Sonic_ChgJumpDir
00013616 6100 0000                  		bsr.w	Sonic_LevelBound
0001361A 4EBA A75A                  		jsr	ObjectFall
0001361E 0828 0006 0022             		btst	#6,$22(a0)
00013624 6700                       		beq.s	loc_12E5C
00013626 0468 0028 0012             		subi.w	#$28,$12(a0)
0001362C                            
0001362C                            loc_12E5C:
0001362C 6100 0000                  		bsr.w	Sonic_JumpAngle
00013630 6100 0000                  		bsr.w	Sonic_Floor
00013634 4E75                       		rts	
00013636                            ; ===========================================================================
00013636                            
00013636                            Obj01_MdRoll:				; XREF: Obj01_Modes
00013636 6100 0000                  		bsr.w	Sonic_Jump
0001363A 6100 0000                  		bsr.w	Sonic_RollRepel
0001363E 6100 0000                  		bsr.w	Sonic_RollSpeed
00013642 6100 0000                  		bsr.w	Sonic_LevelBound
00013646 4EBA A75A                  		jsr	SpeedToPos
0001364A 6100 0000                  		bsr.w	Sonic_AnglePos
0001364E 6100 0000                  		bsr.w	Sonic_SlopeRepel
00013652 4E75                       		rts	
00013654                            ; ===========================================================================
00013654                            
00013654                            Obj01_MdJump2:				; XREF: Obj01_Modes
00013654 6100 0000                  		bsr.w	Sonic_JumpHeight
00013658 6100 0000                  		bsr.w	Sonic_ChgJumpDir
0001365C 6100 0000                  		bsr.w	Sonic_LevelBound
00013660 6100 0000                  		bsr.w	Sonic_AirUnroll
00013664 4EBA A710                  		jsr	ObjectFall
00013668 0828 0006 0022             		btst	#6,$22(a0)
0001366E 6700                       		beq.s	loc_12EA6
00013670 0468 0028 0012             		subi.w	#$28,$12(a0)
00013676                            
00013676                            loc_12EA6:
00013676 6100 0000                  		bsr.w	Sonic_JumpAngle
0001367A 6100 0000                  		bsr.w	Sonic_Floor
0001367E 4E75                       		rts	
00013680                            ; ---------------------------------------------------------------------------
00013680                            ; Subroutine to	make Sonic walk/run
00013680                            ; ---------------------------------------------------------------------------
00013680                            
00013680                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00013680                            
00013680                            
00013680                            Sonic_Move:				; XREF: Obj01_MdNormal
00013680 3C38 F760                  		move.w	($FFFFF760).w,d6
00013684 3A38 F762                  		move.w	($FFFFF762).w,d5
00013688 3838 F764                  		move.w	($FFFFF764).w,d4
0001368C 4A38 F7CA                  		tst.b	($FFFFF7CA).w
00013690 6600 0000                  		bne.w	loc_12FEE
00013694 4A68 003E                  		tst.w	$3E(a0)
00013698 6600 0000                  		bne.w	Obj01_ResetScr
0001369C 0838 0002 F602             		btst	#2,($FFFFF602).w ; is left being pressed?
000136A2 6700                       		beq.s	Obj01_NotLeft	; if not, branch
000136A4 0838 0000 FE2F             		btst	#0,($FFFFFE2F).w	; GMZ: Have we got a reverse control power up?
000136AA 6600                       		bne.s	Obj01_MoveRight	; GMZ: If yes, branch
000136AC 6100 0000                  		bsr.w	Sonic_MoveLeft
000136B0                            
000136B0                            Obj01_NotLeft:
000136B0 0838 0003 F602             		btst	#3,($FFFFF602).w ; is right being pressed?
000136B6 6700                       		beq.s	Obj01_NotRight	; if not, branch
000136B8 0838 0000 FE2F             		btst	#0,($FFFFFE2F).w	; GMZ: Have we got a reverse control power up?
000136BE 6700                       		beq.s	Obj01_MoveRight	; GMZ: If not, branch
000136C0 6100 0000                  		bsr.w	Sonic_MoveLeft
000136C4 6000                       		bra.s	Obj01_NotRight
000136C6                            
000136C6                            Obj01_MoveRight:
000136C6 6100 0000                  		bsr.w	Sonic_MoveRight
000136CA                            
000136CA                            Obj01_NotRight:
000136CA 1028 0026                  		move.b	$26(a0),d0
000136CE 0600 0020                  		addi.b	#$20,d0
000136D2 0200 00C0                  		andi.b	#$C0,d0		; is Sonic on a	slope?
000136D6 6600 0000                  		bne.w	Obj01_ResetScr	; if yes, branch
000136DA 4A68 0014                  		tst.w	$14(a0)		; is Sonic moving?
000136DE 6600 0000                  		bne.w	Obj01_ResetScr	; if yes, branch
000136E2 08A8 0005 0022             		bclr	#5,$22(a0)
000136E8 117C 0005 001C             		move.b	#5,$1C(a0)	; use "standing" animation
000136EE 0828 0003 0022             		btst	#3,$22(a0)
000136F4 6700                       		beq.s	Sonic_Balance
000136F6 7000                       		moveq	#0,d0
000136F8 1028 003D                  		move.b	$3D(a0),d0
000136FC ED48                       		lsl.w	#6,d0
000136FE 43F8 D000                  		lea	($FFFFD000).w,a1
00013702 43F1 0000                  		lea	(a1,d0.w),a1
00013706 4A29 0022                  		tst.b	$22(a1)
0001370A 6B00                       		bmi.s	Sonic_LookUp
0001370C 7200                       		moveq	#0,d1
0001370E 1229 0019                  		move.b	$19(a1),d1
00013712 3401                       		move.w	d1,d2
00013714 D442                       		add.w	d2,d2
00013716 5942                       		subq.w	#4,d2
00013718 D268 0008                  		add.w	8(a0),d1
0001371C 9269 0008                  		sub.w	8(a1),d1
00013720 0C41 0004                  		cmpi.w	#4,d1
00013724 6D00                       		blt.s	loc_12F6A
00013726 B242                       		cmp.w	d2,d1
00013728 6C00                       		bge.s	loc_12F5A
0001372A 6000                       		bra.s	Sonic_LookUp
0001372C                            ; ===========================================================================
0001372C                            
0001372C                            Sonic_Balance:
0001372C 4EB9 0000 0000             		jsr	ObjHitFloor
00013732 0C41 000C                  		cmpi.w	#$C,d1
00013736 6D00                       		blt.s	Sonic_LookUp
00013738 0C28 0003 0036             		cmpi.b	#3,$36(a0)
0001373E 6600                       		bne.s	loc_12F62
00013740                            
00013740                            loc_12F5A:
00013740 08A8 0000 0022             		bclr	#0,$22(a0)
00013746 6000                       		bra.s	loc_12F70
00013748                            ; ===========================================================================
00013748                            
00013748                            loc_12F62:
00013748 0C28 0003 0037             		cmpi.b	#3,$37(a0)
0001374E 6600                       		bne.s	Sonic_LookUp
00013750                            
00013750                            loc_12F6A:
00013750 08E8 0000 0022             		bset	#0,$22(a0)
00013756                            
00013756                            loc_12F70:
00013756 117C 0006 001C             		move.b	#6,$1C(a0)	; use "balancing" animation
0001375C 6000                       		bra.s	Obj01_ResetScr
0001375E                            ; ===========================================================================
0001375E                            
0001375E                            Sonic_LookUp:
0001375E 0838 0000 F602             		btst	#0,($FFFFF602).w ; is up being pressed?
00013764 6700                       		beq.s	Sonic_Duck	; if not, branch
00013766 117C 0007 001C             		move.b	#7,$1C(a0)	; use "looking up" animation
0001376C 0C78 00C8 F73E             		cmpi.w	#$C8,($FFFFF73E).w
00013772 6700                       		beq.s	loc_12FC2
00013774 5478 F73E                  		addq.w	#2,($FFFFF73E).w
00013778 6000                       		bra.s	loc_12FC2
0001377A                            ; ===========================================================================
0001377A                            
0001377A                            Sonic_Duck:
0001377A 0838 0001 F602             		btst	#1,($FFFFF602).w ; is down being pressed?
00013780 6700                       		beq.s	Obj01_ResetScr	; if not, branch
00013782 117C 0008 001C             		move.b	#8,$1C(a0)	; use "ducking"	animation
00013788 0C78 0008 F73E             		cmpi.w	#8,($FFFFF73E).w
0001378E 6700                       		beq.s	loc_12FC2
00013790 5578 F73E                  		subq.w	#2,($FFFFF73E).w
00013794 6000                       		bra.s	loc_12FC2
00013796                            ; ===========================================================================
00013796                            
00013796                            Obj01_ResetScr:
00013796 0C78 0060 F73E             		cmpi.w	#$60,($FFFFF73E).w ; is	screen in its default position?
0001379C 6700                       		beq.s	loc_12FC2	; if yes, branch
0001379E 6400                       		bcc.s	loc_12FBE
000137A0 5878 F73E                  		addq.w	#4,($FFFFF73E).w ; move	screen back to default
000137A4                            
000137A4                            loc_12FBE:
000137A4 5578 F73E                  		subq.w	#2,($FFFFF73E).w ; move	screen back to default
000137A8                            
000137A8                            loc_12FC2:
000137A8 1038 F602                  		move.b	($FFFFF602).w,d0
000137AC 0200 000C                  		andi.b	#$C,d0		; is left/right	pressed?
000137B0 6600                       		bne.s	loc_12FEE	; if yes, branch
000137B2 3028 0014                  		move.w	$14(a0),d0
000137B6 6700                       		beq.s	loc_12FEE
000137B8 6B00                       		bmi.s	loc_12FE2
000137BA 9045                       		sub.w	d5,d0
000137BC 6400                       		bcc.s	loc_12FDC
000137BE 303C 0000                  		move.w	#0,d0
000137C2                            
000137C2                            loc_12FDC:
000137C2 3140 0014                  		move.w	d0,$14(a0)
000137C6 6000                       		bra.s	loc_12FEE
000137C8                            ; ===========================================================================
000137C8                            
000137C8                            loc_12FE2:
000137C8 D045                       		add.w	d5,d0
000137CA 6400                       		bcc.s	loc_12FEA
000137CC 303C 0000                  		move.w	#0,d0
000137D0                            
000137D0                            loc_12FEA:
000137D0 3140 0014                  		move.w	d0,$14(a0)
000137D4                            
000137D4                            loc_12FEE:
000137D4 1028 0026                  		move.b	$26(a0),d0
000137D8 4EB9 0000 2CAC             		jsr	(CalcSine).l
000137DE C3E8 0014                  		muls.w	$14(a0),d1
000137E2 E081                       		asr.l	#8,d1
000137E4 3141 0010                  		move.w	d1,$10(a0)
000137E8 C1E8 0014                  		muls.w	$14(a0),d0
000137EC E080                       		asr.l	#8,d0
000137EE 3140 0012                  		move.w	d0,$12(a0)
000137F2                            
000137F2                            loc_1300C:
000137F2 1028 0026                  		move.b	$26(a0),d0
000137F6 0600 0040                  		addi.b	#$40,d0
000137FA 6B00                       		bmi.s	locret_1307C
000137FC 123C 0040                  		move.b	#$40,d1
00013800 4A68 0014                  		tst.w	$14(a0)
00013804 6700                       		beq.s	locret_1307C
00013806 6B00                       		bmi.s	loc_13024
00013808 4441                       		neg.w	d1
0001380A                            
0001380A                            loc_13024:
0001380A 1028 0026                  		move.b	$26(a0),d0
0001380E D001                       		add.b	d1,d0
00013810 3F00                       		move.w	d0,-(sp)
00013812 6100 0000                  		bsr.w	Sonic_WalkSpeed
00013816 301F                       		move.w	(sp)+,d0
00013818 4A41                       		tst.w	d1
0001381A 6A00                       		bpl.s	locret_1307C
0001381C E141                       		asl.w	#8,d1
0001381E 0600 0020                  		addi.b	#$20,d0
00013822 0200 00C0                  		andi.b	#$C0,d0
00013826 6700                       		beq.s	loc_13078
00013828 0C00 0040                  		cmpi.b	#$40,d0
0001382C 6700                       		beq.s	loc_13066
0001382E 0C00 0080                  		cmpi.b	#$80,d0
00013832 6700                       		beq.s	loc_13060
00013834 D368 0010                  		add.w	d1,$10(a0)
00013838 08E8 0005 0022             		bset	#5,$22(a0)
0001383E 317C 0000 0014             		move.w	#0,$14(a0)
00013844 4E75                       		rts	
00013846                            ; ===========================================================================
00013846                            
00013846                            loc_13060:
00013846 9368 0012                  		sub.w	d1,$12(a0)
0001384A 4E75                       		rts	
0001384C                            ; ===========================================================================
0001384C                            
0001384C                            loc_13066:
0001384C 9368 0010                  		sub.w	d1,$10(a0)
00013850 08E8 0005 0022             		bset	#5,$22(a0)
00013856 317C 0000 0014             		move.w	#0,$14(a0)
0001385C 4E75                       		rts	
0001385E                            ; ===========================================================================
0001385E                            
0001385E                            loc_13078:
0001385E D368 0012                  		add.w	d1,$12(a0)
00013862                            
00013862                            locret_1307C:
00013862 4E75                       		rts	
00013864                            ; End of function Sonic_Move
00013864                            
00013864                            
00013864                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00013864                            
00013864                            
00013864                            Sonic_MoveLeft:				; XREF: Sonic_Move
00013864 3028 0014                  		move.w	$14(a0),d0
00013868 6700                       		beq.s	loc_13086
0001386A 6A00                       		bpl.s	loc_130B2
0001386C                            
0001386C                            loc_13086:
0001386C 08E8 0000 0022             		bset	#0,$22(a0)
00013872 6600                       		bne.s	loc_1309A
00013874 08A8 0005 0022             		bclr	#5,$22(a0)
0001387A 117C 0001 001D             		move.b	#1,$1D(a0)
00013880                            
00013880                            loc_1309A:
00013880 9045                       		sub.w	d5,d0
00013882 3206                       		move.w	d6,d1
00013884 4441                       		neg.w	d1
00013886 B041                       		cmp.w	d1,d0
00013888 6E00                       		bgt.s	loc_130A6
0001388A 3001                       		move.w	d1,d0
0001388C                            
0001388C                            loc_130A6:
0001388C 3140 0014                  		move.w	d0,$14(a0)
00013890 117C 0000 001C             		move.b	#0,$1C(a0)	; use walking animation
00013896 4E75                       		rts	
00013898                            ; ===========================================================================
00013898                            
00013898                            loc_130B2:				; XREF: Sonic_MoveLeft
00013898 9044                       		sub.w	d4,d0
0001389A 6400                       		bcc.s	loc_130BA
0001389C 303C FF80                  		move.w	#-$80,d0
000138A0                            
000138A0                            loc_130BA:
000138A0 3140 0014                  		move.w	d0,$14(a0)
000138A4 1028 0026                  		move.b	$26(a0),d0
000138A8 0600 0020                  		addi.b	#$20,d0
000138AC 0200 00C0                  		andi.b	#$C0,d0
000138B0 6600                       		bne.s	locret_130E8
000138B2 0C40 0400                  		cmpi.w	#$400,d0
000138B6 6D00                       		blt.s	locret_130E8
000138B8 117C 000D 001C             		move.b	#$D,$1C(a0)	; use "stopping" animation
000138BE 08A8 0000 0022             		bclr	#0,$22(a0)
000138C4 303C 00A4                  		move.w	#$A4,d0
000138C8 4EB9 0000 15C0             		jsr	(PlaySound_Special).l ;	play stopping sound
000138CE                            
000138CE                            locret_130E8:
000138CE 4E75                       		rts	
000138D0                            ; End of function Sonic_MoveLeft
000138D0                            
000138D0                            
000138D0                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000138D0                            
000138D0                            
000138D0                            Sonic_MoveRight:			; XREF: Sonic_Move
000138D0 3028 0014                  		move.w	$14(a0),d0
000138D4 6B00                       		bmi.s	loc_13118
000138D6 08A8 0000 0022             		bclr	#0,$22(a0)
000138DC 6700                       		beq.s	loc_13104
000138DE 08A8 0005 0022             		bclr	#5,$22(a0)
000138E4 117C 0001 001D             		move.b	#1,$1D(a0)
000138EA                            
000138EA                            loc_13104:
000138EA D045                       		add.w	d5,d0
000138EC B046                       		cmp.w	d6,d0
000138EE 6D00                       		blt.s	loc_1310C
000138F0 3006                       		move.w	d6,d0
000138F2                            
000138F2                            loc_1310C:
000138F2 3140 0014                  		move.w	d0,$14(a0)
000138F6 117C 0000 001C             		move.b	#0,$1C(a0)	; use walking animation
000138FC 4E75                       		rts	
000138FE                            ; ===========================================================================
000138FE                            
000138FE                            loc_13118:				; XREF: Sonic_MoveRight
000138FE D044                       		add.w	d4,d0
00013900 6400                       		bcc.s	loc_13120
00013902 303C 0080                  		move.w	#$80,d0
00013906                            
00013906                            loc_13120:
00013906 3140 0014                  		move.w	d0,$14(a0)
0001390A 1028 0026                  		move.b	$26(a0),d0
0001390E 0600 0020                  		addi.b	#$20,d0
00013912 0200 00C0                  		andi.b	#$C0,d0
00013916 6600                       		bne.s	locret_1314E
00013918 0C40 FC00                  		cmpi.w	#-$400,d0
0001391C 6E00                       		bgt.s	locret_1314E
0001391E 117C 000D 001C             		move.b	#$D,$1C(a0)	; use "stopping" animation
00013924 08E8 0000 0022             		bset	#0,$22(a0)
0001392A 303C 00A4                  		move.w	#$A4,d0
0001392E 4EB9 0000 15C0             		jsr	(PlaySound_Special).l ;	play stopping sound
00013934                            
00013934                            locret_1314E:
00013934 4E75                       		rts	
00013936                            ; End of function Sonic_MoveRight
00013936                            
00013936                            ; ---------------------------------------------------------------------------
00013936                            ; Subroutine to	change Sonic's speed as he rolls
00013936                            ; ---------------------------------------------------------------------------
00013936                            
00013936                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00013936                            
00013936                            
00013936                            Sonic_RollSpeed:			; XREF: Obj01_MdRoll
00013936 3C38 F760                  		move.w	($FFFFF760).w,d6
0001393A E346                       		asl.w	#1,d6
0001393C 3A38 F762                  		move.w	($FFFFF762).w,d5
00013940 E245                       		asr.w	#1,d5
00013942 3838 F764                  		move.w	($FFFFF764).w,d4
00013946 E444                       		asr.w	#2,d4
00013948 4A38 F7CA                  		tst.b	($FFFFF7CA).w
0001394C 6600 0000                  		bne.w	loc_131CC
00013950 4A68 003E                  		tst.w	$3E(a0)
00013954 6600                       		bne.s	loc_13188
00013956 0838 0002 F602             		btst	#2,($FFFFF602).w ; is left being pressed?
0001395C 6700                       		beq.s	loc_1317C	; if not, branch
0001395E 0838 0000 FE2F             		btst	#0,($FFFFFE2F).w	; GMZ: Have we got a reverse control power up?
00013964 6600                       		bne.s	SonicRS_RollRight	; GMZ: If yes, branch
00013966 6100 0000                  		bsr.w	Sonic_RollLeft
0001396A                            
0001396A                            loc_1317C:
0001396A 0838 0003 F602             		btst	#3,($FFFFF602).w ; is right being pressed?
00013970 6700                       		beq.s	loc_13188	; if not, branch
00013972 0838 0000 FE2F             		btst	#0,($FFFFFE2F).w	; GMZ: Have we got a reverse control power up?
00013978 6700                       		beq.s	SonicRS_RollRight	; GMZ: If not, branch
0001397A 6100 0000                  		bsr.w	Sonic_RollLeft
0001397E 6000                       		bra.s	loc_13188
00013980                            
00013980                            SonicRS_RollRight:
00013980 6100 0000                  		bsr.w	Sonic_RollRight
00013984                            
00013984                            loc_13188:
00013984 3028 0014                  		move.w	$14(a0),d0
00013988 6700                       		beq.s	loc_131AA
0001398A 6B00                       		bmi.s	loc_1319E
0001398C 9045                       		sub.w	d5,d0
0001398E 6400                       		bcc.s	loc_13198
00013990 303C 0000                  		move.w	#0,d0
00013994                            
00013994                            loc_13198:
00013994 3140 0014                  		move.w	d0,$14(a0)
00013998 6000                       		bra.s	loc_131AA
0001399A                            ; ===========================================================================
0001399A                            
0001399A                            loc_1319E:				; XREF: Sonic_RollSpeed
0001399A D045                       		add.w	d5,d0
0001399C 6400                       		bcc.s	loc_131A6
0001399E 303C 0000                  		move.w	#0,d0
000139A2                            
000139A2                            loc_131A6:
000139A2 3140 0014                  		move.w	d0,$14(a0)
000139A6                            
000139A6                            loc_131AA:
000139A6 4A68 0014                  		tst.w	$14(a0)		; is Sonic moving?
000139AA 6600                       		bne.s	loc_131CC	; if yes, branch
000139AC 08A8 0002 0022             		bclr	#2,$22(a0)
000139B2 117C 0013 0016             		move.b	#$13,$16(a0)
000139B8 117C 0009 0017             		move.b	#9,$17(a0)
000139BE 117C 0005 001C             		move.b	#5,$1C(a0)	; use "standing" animation
000139C4 5B68 000C                  		subq.w	#5,$C(a0)
000139C8                            
000139C8                            loc_131CC:
000139C8 1028 0026                  		move.b	$26(a0),d0
000139CC 4EB9 0000 2CAC             		jsr	(CalcSine).l
000139D2 C1E8 0014                  		muls.w	$14(a0),d0
000139D6 E080                       		asr.l	#8,d0
000139D8 3140 0012                  		move.w	d0,$12(a0)
000139DC C3E8 0014                  		muls.w	$14(a0),d1
000139E0 E081                       		asr.l	#8,d1
000139E2 0C41 1000                  		cmpi.w	#$1000,d1
000139E6 6F00                       		ble.s	loc_131F0
000139E8 323C 1000                  		move.w	#$1000,d1
000139EC                            
000139EC                            loc_131F0:
000139EC 0C41 F000                  		cmpi.w	#-$1000,d1
000139F0 6C00                       		bge.s	loc_131FA
000139F2 323C F000                  		move.w	#-$1000,d1
000139F6                            
000139F6                            loc_131FA:
000139F6 3141 0010                  		move.w	d1,$10(a0)
000139FA 6000 FDF6                  		bra.w	loc_1300C
000139FE                            ; End of function Sonic_RollSpeed
000139FE                            
000139FE                            
000139FE                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000139FE                            
000139FE                            
000139FE                            Sonic_RollLeft:				; XREF: Sonic_RollSpeed
000139FE 3028 0014                  		move.w	$14(a0),d0
00013A02 6700                       		beq.s	loc_1320A
00013A04 6A00                       		bpl.s	loc_13218
00013A06                            
00013A06                            loc_1320A:
00013A06 08E8 0000 0022             		bset	#0,$22(a0)
00013A0C 117C 0002 001C             		move.b	#2,$1C(a0)	; use "rolling"	animation
00013A12 4E75                       		rts	
00013A14                            ; ===========================================================================
00013A14                            
00013A14                            loc_13218:
00013A14 9044                       		sub.w	d4,d0
00013A16 6400                       		bcc.s	loc_13220
00013A18 303C FF80                  		move.w	#-$80,d0
00013A1C                            
00013A1C                            loc_13220:
00013A1C 3140 0014                  		move.w	d0,$14(a0)
00013A20 4E75                       		rts	
00013A22                            ; End of function Sonic_RollLeft
00013A22                            
00013A22                            
00013A22                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00013A22                            
00013A22                            
00013A22                            Sonic_RollRight:			; XREF: Sonic_RollSpeed
00013A22 3028 0014                  		move.w	$14(a0),d0
00013A26 6B00                       		bmi.s	loc_1323A
00013A28 08A8 0000 0022             		bclr	#0,$22(a0)
00013A2E 117C 0002 001C             		move.b	#2,$1C(a0)	; use "rolling"	animation
00013A34 4E75                       		rts	
00013A36                            ; ===========================================================================
00013A36                            
00013A36                            loc_1323A:
00013A36 D044                       		add.w	d4,d0
00013A38 6400                       		bcc.s	loc_13242
00013A3A 303C 0080                  		move.w	#$80,d0
00013A3E                            
00013A3E                            loc_13242:
00013A3E 3140 0014                  		move.w	d0,$14(a0)
00013A42 4E75                       		rts	
00013A44                            ; End of function Sonic_RollRight
00013A44                            
00013A44                            Sonic_AirUnroll:
00013A44                            		
00013A44 4A28 003A                  		tst.b	$3A(a0) ; check jump height control
00013A48 6600                       		bne.s	@timer
00013A4A 1038 F605                  		move.b	($FFFFF605).w,d0
00013A4E 0200 0070                  		andi.b	#$70,d0 ; is abc being pressed?
00013A52 6700                       		beq.s	@end	; if not, branch
00013A54 08A8 0002 0022             		bclr	#2,$22(a0)
00013A5A 117C 0013 0016             		move.b	#$13,$16(a0)
00013A60 117C 0009 0017             		move.b	#9,$17(a0)
00013A66 117C 000E 001C             		move.b	#14,$1C(a0)	; use dunk animation
00013A6C 303C 00A5                  		move.w	#$A5,d0
00013A70 4EB9 0000 15C0             		jsr	(PlaySound_Special).l ;	play fart sound
00013A76 2028 0010                  		move.l	$10(a0),d0
00013A7A D080                       		add.l	d0,d0
00013A7C 2140 0010                  		move.l	d0,$10(a0)
00013A80 5B68 000C                  		subq.w	#5,$C(a0)
00013A84                            	@end:
00013A84 4E75                       		rts
00013A86                            	@timer:
00013A86 5328 003A                  		subq.b	#1,$3A(a0)
00013A8A 4E75                       		rts
00013A8C                            
00013A8C                            ; ---------------------------------------------------------------------------
00013A8C                            ; Subroutine to	change Sonic's direction while jumping
00013A8C                            ; ---------------------------------------------------------------------------
00013A8C                            
00013A8C                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00013A8C                            
00013A8C                            
00013A8C                            Sonic_ChgJumpDir:			; XREF: Obj01_MdJump; Obj01_MdJump2
00013A8C 3C38 F760                  		move.w	($FFFFF760).w,d6
00013A90 3A38 F762                  		move.w	($FFFFF762).w,d5
00013A94 E345                       		asl.w	#1,d5
00013A96 0828 0004 0022             		btst	#4,$22(a0)
00013A9C 6600                       		bne.s	Obj01_ResetScr2
00013A9E 3028 0010                  		move.w	$10(a0),d0
00013AA2 0838 0002 F602             		btst	#2,($FFFFF602).w ; is left being pressed?
00013AA8 6700                       		beq.s	loc_13278	; if not, branch
00013AAA 0838 0000 FE2F             		btst	#0,($FFFFFE2F).w	; GMZ: Have we got a reverse control power up?
00013AB0 6600                       		bne.s	SonicCJD_JumpRight	; GMZ: If yes, branch
00013AB2 6100 0000                  		bsr.w	SonicCJD_JumpLeft
00013AB6 6E00                       		bgt.s	loc_13278
00013AB8 3001                       		move.w	d1,d0
00013ABA                            
00013ABA                            loc_13278:
00013ABA 0838 0003 F602             		btst	#3,($FFFFF602).w ; is right being pressed?
00013AC0 6700                       		beq.s	Obj01_JumpMove	; if not, branch
00013AC2 0838 0000 FE2F             		btst	#0,($FFFFFE2F).w	; GMZ: Have we got a reverse control power up?
00013AC8 6700                       		beq.s	SonicCJD_JumpRight	; GMZ: If not, branch
00013ACA 6100 0000                  		bsr.w	SonicCJD_JumpLeft
00013ACE 6E00                       		bgt.s	Obj01_JumpMove
00013AD0 3001                       		move.w	d1,d0
00013AD2 6000                       		bra.s	Obj01_JumpMove
00013AD4                            
00013AD4                            SonicCJD_JumpLeft:
00013AD4 08E8 0000 0022             		bset	#0,$22(a0)
00013ADA 9045                       		sub.w	d5,d0
00013ADC 3206                       		move.w	d6,d1
00013ADE 4441                       		neg.w	d1
00013AE0 B041                       		cmp.w	d1,d0
00013AE2                            		; bgt.s	loc_13278
00013AE2                            		; move.w	d1,d0
00013AE2 4E75                       		rts
00013AE4                            
00013AE4                            SonicCJD_JumpRight:
00013AE4 08A8 0000 0022             		bclr	#0,$22(a0)
00013AEA D045                       		add.w	d5,d0
00013AEC B046                       		cmp.w	d6,d0
00013AEE 6D00                       		blt.s	Obj01_JumpMove
00013AF0 3006                       		move.w	d6,d0
00013AF2                            
00013AF2                            Obj01_JumpMove:
00013AF2 3140 0010                  		move.w	d0,$10(a0)	; change Sonic's horizontal speed
00013AF6                            
00013AF6                            Obj01_ResetScr2:
00013AF6 0C78 0060 F73E             		cmpi.w	#$60,($FFFFF73E).w ; is	the screen in its default position?
00013AFC 6700                       		beq.s	loc_132A4	; if yes, branch
00013AFE 6400                       		bcc.s	loc_132A0
00013B00 5878 F73E                  		addq.w	#4,($FFFFF73E).w
00013B04                            
00013B04                            loc_132A0:
00013B04 5578 F73E                  		subq.w	#2,($FFFFF73E).w
00013B08                            
00013B08                            loc_132A4:
00013B08 0C68 FC00 0012             		cmpi.w	#-$400,$12(a0)	; is Sonic moving faster than -$400 upwards?
00013B0E 6500                       		bcs.s	locret_132D2	; if yes, branch
00013B10 3028 0010                  		move.w	$10(a0),d0
00013B14 3200                       		move.w	d0,d1
00013B16 EA41                       		asr.w	#5,d1
00013B18 6700                       		beq.s	locret_132D2
00013B1A 6B00                       		bmi.s	loc_132C6
00013B1C 9041                       		sub.w	d1,d0
00013B1E 6400                       		bcc.s	loc_132C0
00013B20 303C 0000                  		move.w	#0,d0
00013B24                            
00013B24                            loc_132C0:
00013B24 3140 0010                  		move.w	d0,$10(a0)
00013B28 4E75                       		rts	
00013B2A                            ; ===========================================================================
00013B2A                            
00013B2A                            loc_132C6:
00013B2A 9041                       		sub.w	d1,d0
00013B2C 6500                       		bcs.s	loc_132CE
00013B2E 303C 0000                  		move.w	#0,d0
00013B32                            
00013B32                            loc_132CE:
00013B32 3140 0010                  		move.w	d0,$10(a0)
00013B36                            
00013B36                            locret_132D2:
00013B36 4E75                       		rts	
00013B38                            ; End of function Sonic_ChgJumpDir
00013B38                            
00013B38                            ; ===========================================================================
00013B38                            ; ---------------------------------------------------------------------------
00013B38                            ; Unused subroutine to squash Sonic
00013B38                            ; ---------------------------------------------------------------------------
00013B38 1028 0026                  		move.b	$26(a0),d0
00013B3C 0600 0020                  		addi.b	#$20,d0
00013B40 0200 00C0                  		andi.b	#$C0,d0
00013B44 6600                       		bne.s	locret_13302
00013B46 6100 0000                  		bsr.w	Sonic_DontRunOnWalls
00013B4A 4A41                       		tst.w	d1
00013B4C 6A00                       		bpl.s	locret_13302
00013B4E 317C 0000 0014             		move.w	#0,$14(a0)	; stop Sonic moving
00013B54 317C 0000 0010             		move.w	#0,$10(a0)
00013B5A 317C 0000 0012             		move.w	#0,$12(a0)
00013B60 117C 000B 001C             		move.b	#$B,$1C(a0)	; use "warping"	animation
00013B66                            
00013B66                            locret_13302:
00013B66 4E75                       		rts	
00013B68                            ; ---------------------------------------------------------------------------
00013B68                            ; Subroutine to	prevent	Sonic leaving the boundaries of	a level
00013B68                            ; ---------------------------------------------------------------------------
00013B68                            
00013B68                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00013B68                            
00013B68                            
00013B68                            Sonic_LevelBound:			; XREF: Obj01_MdNormal; et al
00013B68 2228 0008                  		move.l	8(a0),d1
00013B6C 3028 0010                  		move.w	$10(a0),d0
00013B70 48C0                       		ext.l	d0
00013B72 E180                       		asl.l	#8,d0
00013B74 D280                       		add.l	d0,d1
00013B76 4841                       		swap	d1
00013B78 3038 F728                  		move.w	($FFFFF728).w,d0
00013B7C 0640 0010                  		addi.w	#$10,d0
00013B80 B041                       		cmp.w	d1,d0		; has Sonic touched the	side boundary?
00013B82 6200                       		bhi.s	Boundary_Sides	; if yes, branch
00013B84 3038 F72A                  		move.w	($FFFFF72A).w,d0
00013B88 0640 0128                  		addi.w	#$128,d0
00013B8C 4A38 F7AA                  		tst.b	($FFFFF7AA).w
00013B90 6600                       		bne.s	loc_13332
00013B92 0640 0040                  		addi.w	#$40,d0
00013B96                            
00013B96                            loc_13332:
00013B96 B041                       		cmp.w	d1,d0		; has Sonic touched the	side boundary?
00013B98 6300                       		bls.s	Boundary_Sides	; if yes, branch
00013B9A                            
00013B9A                            loc_13336:
00013B9A 3038 F72E                  		move.w	($FFFFF72E).w,d0
00013B9E 0640 00E0                  		addi.w	#$E0,d0
00013BA2 B068 000C                  		cmp.w	$C(a0),d0	; has Sonic touched the	bottom boundary?
00013BA6 6D00                       		blt.s	Boundary_Bottom	; if yes, branch
00013BA8 4E75                       		rts	
00013BAA                            ; ===========================================================================
00013BAA                            
00013BAA                            Boundary_Bottom:
00013BAA 0C78 0501 FE10             		cmpi.w	#$501,($FFFFFE10).w ; is level SBZ2 ?
00013BB0 6600 0000                  		bne.w	KillSonic	; if not, kill Sonic
00013BB4 0C78 2000 D008             		cmpi.w	#$2000,($FFFFD008).w
00013BBA 6500 0000                  		bcs.w	KillSonic
00013BBE 4238 FE30                  		clr.b	($FFFFFE30).w	; clear	lamppost counter
00013BC2 31FC 0001 FE02             		move.w	#1,($FFFFFE02).w ; restart the level
00013BC8 31FC 0103 FE10             		move.w	#$103,($FFFFFE10).w ; set level	to SBZ3	(LZ4)
00013BCE 4E75                       		rts	
00013BD0                            ; ===========================================================================
00013BD0                            
00013BD0                            Boundary_Sides:
00013BD0 3140 0008                  		move.w	d0,8(a0)
00013BD4 317C 0000 000A             		move.w	#0,$A(a0)
00013BDA 317C 0000 0010             		move.w	#0,$10(a0)	; stop Sonic moving
00013BE0 317C 0000 0014             		move.w	#0,$14(a0)
00013BE6 60B2                       		bra.s	loc_13336
00013BE8                            ; End of function Sonic_LevelBound
00013BE8                            
00013BE8                            ; ---------------------------------------------------------------------------
00013BE8                            ; Subroutine allowing Sonic to roll when he's moving
00013BE8                            ; ---------------------------------------------------------------------------
00013BE8                            
00013BE8                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00013BE8                            
00013BE8                            
00013BE8                            Sonic_Roll:				; XREF: Obj01_MdNormal
00013BE8 4A38 F7CA                  		tst.b	($FFFFF7CA).w
00013BEC 6600                       		bne.s	Obj01_NoRoll
00013BEE 3028 0014                  		move.w	$14(a0),d0
00013BF2 6A00                       		bpl.s	loc_13392
00013BF4 4440                       		neg.w	d0
00013BF6                            
00013BF6                            loc_13392:
00013BF6 0C40 0080                  		cmpi.w	#$80,d0		; is Sonic moving at $80 speed or faster?
00013BFA 6500                       		bcs.s	Obj01_NoRoll	; if not, branch
00013BFC 1038 F602                  		move.b	($FFFFF602).w,d0
00013C00 0200 000C                  		andi.b	#$C,d0		; is left/right	being pressed?
00013C04 6600                       		bne.s	Obj01_NoRoll	; if yes, branch
00013C06 0838 0001 F602             		btst	#1,($FFFFF602).w ; is down being pressed?
00013C0C 6600                       		bne.s	Obj01_ChkRoll	; if yes, branch
00013C0E                            
00013C0E                            Obj01_NoRoll:
00013C0E 4E75                       		rts	
00013C10                            ; ===========================================================================
00013C10                            
00013C10                            Obj01_ChkRoll:
00013C10 0828 0002 0022             		btst	#2,$22(a0)	; is Sonic already rolling?
00013C16 6700                       		beq.s	Obj01_DoRoll	; if not, branch
00013C18 4E75                       		rts	
00013C1A                            ; ===========================================================================
00013C1A                            
00013C1A                            Obj01_DoRoll:
00013C1A 08E8 0002 0022             		bset	#2,$22(a0)
00013C20 117C 000E 0016             		move.b	#$E,$16(a0)
00013C26 117C 0007 0017             		move.b	#7,$17(a0)
00013C2C 117C 0002 001C             		move.b	#2,$1C(a0)	; use "rolling"	animation
00013C32 5A68 000C                  		addq.w	#5,$C(a0)
00013C36 303C 00BE                  		move.w	#$BE,d0
00013C3A 4EB9 0000 15C0             		jsr	(PlaySound_Special).l ;	play rolling sound
00013C40 4A68 0014                  		tst.w	$14(a0)
00013C44 6600                       		bne.s	locret_133E8
00013C46 317C 0200 0014             		move.w	#$200,$14(a0)
00013C4C                            
00013C4C                            locret_133E8:
00013C4C 4E75                       		rts	
00013C4E                            ; End of function Sonic_Roll
00013C4E                            
00013C4E                            ; ---------------------------------------------------------------------------
00013C4E                            ; Subroutine allowing Sonic to jump
00013C4E                            ; ---------------------------------------------------------------------------
00013C4E                            
00013C4E                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00013C4E                            
00013C4E                            
00013C4E                            Sonic_Jump:				; XREF: Obj01_MdNormal; Obj01_MdRoll
00013C4E 1038 F603                  		move.b	($FFFFF603).w,d0
00013C52 0200 0070                  		andi.b	#$70,d0		; is A,	B or C pressed?
00013C56 6700 0000                  		beq.w	locret_1348E	; if not, branch
00013C5A 7000                       		moveq	#0,d0
00013C5C 1028 0026                  		move.b	$26(a0),d0
00013C60 0600 0080                  		addi.b	#$80,d0
00013C64 6100 0000                  		bsr.w	sub_14D48
00013C68 0C41 0006                  		cmpi.w	#6,d1
00013C6C 6D00 0000                  		blt.w	locret_1348E
00013C70 343C 0680                  		move.w	#$680,d2
00013C74 0828 0006 0022             		btst	#6,$22(a0)
00013C7A 6700                       		beq.s	loc_1341C
00013C7C 343C 0380                  		move.w	#$380,d2
00013C80                            
00013C80                            loc_1341C:
00013C80 7000                       		moveq	#0,d0
00013C82 1028 0026                  		move.b	$26(a0),d0
00013C86 0400 0040                  		subi.b	#$40,d0
00013C8A 4EB9 0000 2CAC             		jsr	(CalcSine).l
00013C90 C3C2                       		muls.w	d2,d1
00013C92 E081                       		asr.l	#8,d1
00013C94 D368 0010                  		add.w	d1,$10(a0)	; make Sonic jump
00013C98 C1C2                       		muls.w	d2,d0
00013C9A E080                       		asr.l	#8,d0
00013C9C D168 0012                  		add.w	d0,$12(a0)	; make Sonic jump
00013CA0 08E8 0001 0022             		bset	#1,$22(a0)
00013CA6 08A8 0005 0022             		bclr	#5,$22(a0)
00013CAC 588F                       		addq.l	#4,sp
00013CAE 117C 0001 003C             		move.b	#1,$3C(a0)
00013CB4 4228 0038                  		clr.b	$38(a0)
00013CB8 303C 00A0                  		move.w	#$A0,d0
00013CBC 4EB9 0000 15C0             		jsr	(PlaySound_Special).l ;	play jumping sound
00013CC2 117C 0013 0016             		move.b	#$13,$16(a0)
00013CC8 117C 0009 0017             		move.b	#9,$17(a0)
00013CCE 0828 0002 0022             		btst	#2,$22(a0)
00013CD4 6600                       		bne.s	loc_13490
00013CD6 117C 000E 0016             		move.b	#$E,$16(a0)
00013CDC 117C 0007 0017             		move.b	#7,$17(a0)
00013CE2 117C 0002 001C             		move.b	#2,$1C(a0)	; use "jumping"	animation
00013CE8 08E8 0002 0022             		bset	#2,$22(a0)
00013CEE 5A68 000C                  		addq.w	#5,$C(a0)
00013CF2 117C 000A 003A             		move.b	#10,$3A(a0) ; timer
00013CF8                            
00013CF8                            locret_1348E:
00013CF8 4E75                       		rts	
00013CFA                            ; ===========================================================================
00013CFA                            
00013CFA                            loc_13490:
00013CFA 08E8 0004 0022             		bset	#4,$22(a0)
00013D00 4E75                       		rts	
00013D02                            ; End of function Sonic_Jump
00013D02                            
00013D02                            
00013D02                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00013D02                            
00013D02                            
00013D02                            Sonic_JumpHeight:			; XREF: Obj01_MdJump; Obj01_MdJump2
00013D02 4A28 003C                  		tst.b	$3C(a0)
00013D06 6700                       		beq.s	loc_134C4
00013D08 323C FC00                  		move.w	#-$400,d1
00013D0C 0828 0006 0022             		btst	#6,$22(a0)
00013D12 6700                       		beq.s	loc_134AE
00013D14 323C FE00                  		move.w	#-$200,d1
00013D18                            
00013D18                            loc_134AE:
00013D18 B268 0012                  		cmp.w	$12(a0),d1
00013D1C 6F00                       		ble.s	locret_134C2
00013D1E 1038 F602                  		move.b	($FFFFF602).w,d0
00013D22 0200 0070                  		andi.b	#$70,d0		; is A,	B or C pressed?
00013D26 6600                       		bne.s	locret_134C2	; if yes, branch
00013D28 3141 0012                  		move.w	d1,$12(a0)
00013D2C                            
00013D2C                            locret_134C2:
00013D2C 4E75                       		rts	
00013D2E                            ; ===========================================================================
00013D2E                            
00013D2E                            loc_134C4:
00013D2E 0C68 F040 0012             		cmpi.w	#-$FC0,$12(a0)
00013D34 6C00                       		bge.s	locret_134D2
00013D36 317C F040 0012             		move.w	#-$FC0,$12(a0)
00013D3C                            
00013D3C                            locret_134D2:
00013D3C 4E75                       		rts	
00013D3E                            ; End of function Sonic_JumpHeight
00013D3E                            
00013D3E                            ; ---------------------------------------------------------------------------
00013D3E                            ; Subroutine to	slow Sonic walking up a	slope
00013D3E                            ; ---------------------------------------------------------------------------
00013D3E                            
00013D3E                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00013D3E                            
00013D3E                            
00013D3E                            Sonic_SlopeResist:			; XREF: Obj01_MdNormal
00013D3E 1028 0026                  		move.b	$26(a0),d0
00013D42 0600 0060                  		addi.b	#$60,d0
00013D46 0C00 00C0                  		cmpi.b	#$C0,d0
00013D4A 6400                       		bcc.s	locret_13508
00013D4C 1028 0026                  		move.b	$26(a0),d0
00013D50 4EB9 0000 2CAC             		jsr	(CalcSine).l
00013D56 C1FC 0020                  		muls.w	#$20,d0
00013D5A E080                       		asr.l	#8,d0
00013D5C 4A68 0014                  		tst.w	$14(a0)
00013D60 6700                       		beq.s	locret_13508
00013D62 6B00                       		bmi.s	loc_13504
00013D64 4A40                       		tst.w	d0
00013D66 6700                       		beq.s	locret_13502
00013D68 D168 0014                  		add.w	d0,$14(a0)	; change Sonic's inertia
00013D6C                            
00013D6C                            locret_13502:
00013D6C 4E75                       		rts	
00013D6E                            ; ===========================================================================
00013D6E                            
00013D6E                            loc_13504:
00013D6E D168 0014                  		add.w	d0,$14(a0)
00013D72                            
00013D72                            locret_13508:
00013D72 4E75                       		rts	
00013D74                            ; End of function Sonic_SlopeResist
00013D74                            
00013D74                            ; ---------------------------------------------------------------------------
00013D74                            ; Subroutine to	push Sonic down	a slope	while he's rolling
00013D74                            ; ---------------------------------------------------------------------------
00013D74                            
00013D74                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00013D74                            
00013D74                            
00013D74                            Sonic_RollRepel:			; XREF: Obj01_MdRoll
00013D74 1028 0026                  		move.b	$26(a0),d0
00013D78 0600 0060                  		addi.b	#$60,d0
00013D7C 0C00 00C0                  		cmpi.b	#-$40,d0
00013D80 6400                       		bcc.s	locret_13544
00013D82 1028 0026                  		move.b	$26(a0),d0
00013D86 4EB9 0000 2CAC             		jsr	(CalcSine).l
00013D8C C1FC 0050                  		muls.w	#$50,d0
00013D90 E080                       		asr.l	#8,d0
00013D92 4A68 0014                  		tst.w	$14(a0)
00013D96 6B00                       		bmi.s	loc_1353A
00013D98 4A40                       		tst.w	d0
00013D9A 6A00                       		bpl.s	loc_13534
00013D9C E480                       		asr.l	#2,d0
00013D9E                            
00013D9E                            loc_13534:
00013D9E D168 0014                  		add.w	d0,$14(a0)
00013DA2 4E75                       		rts	
00013DA4                            ; ===========================================================================
00013DA4                            
00013DA4                            loc_1353A:
00013DA4 4A40                       		tst.w	d0
00013DA6 6B00                       		bmi.s	loc_13540
00013DA8 E480                       		asr.l	#2,d0
00013DAA                            
00013DAA                            loc_13540:
00013DAA D168 0014                  		add.w	d0,$14(a0)
00013DAE                            
00013DAE                            locret_13544:
00013DAE 4E75                       		rts	
00013DB0                            ; End of function Sonic_RollRepel
00013DB0                            
00013DB0                            ; ---------------------------------------------------------------------------
00013DB0                            ; Subroutine to	push Sonic down	a slope
00013DB0                            ; ---------------------------------------------------------------------------
00013DB0                            
00013DB0                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00013DB0                            
00013DB0                            
00013DB0                            Sonic_SlopeRepel:			; XREF: Obj01_MdNormal; Obj01_MdRoll
00013DB0 4E71                       		nop	
00013DB2 4A28 0038                  		tst.b	$38(a0)
00013DB6 6600                       		bne.s	locret_13580
00013DB8 4A68 003E                  		tst.w	$3E(a0)
00013DBC 6600                       		bne.s	loc_13582
00013DBE 1028 0026                  		move.b	$26(a0),d0
00013DC2 0600 0020                  		addi.b	#$20,d0
00013DC6 0200 00C0                  		andi.b	#$C0,d0
00013DCA 6700                       		beq.s	locret_13580
00013DCC 3028 0014                  		move.w	$14(a0),d0
00013DD0 6A00                       		bpl.s	loc_1356A
00013DD2 4440                       		neg.w	d0
00013DD4                            
00013DD4                            loc_1356A:
00013DD4 0C40 0280                  		cmpi.w	#$280,d0
00013DD8 6400                       		bcc.s	locret_13580
00013DDA 4268 0014                  		clr.w	$14(a0)
00013DDE 08E8 0001 0022             		bset	#1,$22(a0)
00013DE4 317C 001E 003E             		move.w	#$1E,$3E(a0)
00013DEA                            
00013DEA                            locret_13580:
00013DEA 4E75                       		rts	
00013DEC                            ; ===========================================================================
00013DEC                            
00013DEC                            loc_13582:
00013DEC 5368 003E                  		subq.w	#1,$3E(a0)
00013DF0 4E75                       		rts	
00013DF2                            ; End of function Sonic_SlopeRepel
00013DF2                            
00013DF2                            ; ---------------------------------------------------------------------------
00013DF2                            ; Subroutine to	return Sonic's angle to 0 as he jumps
00013DF2                            ; ---------------------------------------------------------------------------
00013DF2                            
00013DF2                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00013DF2                            
00013DF2                            
00013DF2                            Sonic_JumpAngle:			; XREF: Obj01_MdJump; Obj01_MdJump2
00013DF2 1028 0026                  		move.b	$26(a0),d0	; get Sonic's angle
00013DF6 6700                       		beq.s	locret_135A2	; if already 0,	branch
00013DF8 6A00                       		bpl.s	loc_13598	; if higher than 0, branch
00013DFA                            
00013DFA 5400                       		addq.b	#2,d0		; increase angle
00013DFC 6400                       		bcc.s	loc_13596
00013DFE 7000                       		moveq	#0,d0
00013E00                            
00013E00                            loc_13596:
00013E00 6000                       		bra.s	loc_1359E
00013E02                            ; ===========================================================================
00013E02                            
00013E02                            loc_13598:
00013E02 5500                       		subq.b	#2,d0		; decrease angle
00013E04 6400                       		bcc.s	loc_1359E
00013E06 7000                       		moveq	#0,d0
00013E08                            
00013E08                            loc_1359E:
00013E08 1140 0026                  		move.b	d0,$26(a0)
00013E0C                            
00013E0C                            locret_135A2:
00013E0C 4E75                       		rts	
00013E0E                            ; End of function Sonic_JumpAngle
00013E0E                            
00013E0E                            ; ---------------------------------------------------------------------------
00013E0E                            ; Subroutine for Sonic to interact with	the floor after	jumping/falling
00013E0E                            ; ---------------------------------------------------------------------------
00013E0E                            
00013E0E                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00013E0E                            
00013E0E                            
00013E0E                            Sonic_Floor:				; XREF: Obj01_MdJump; Obj01_MdJump2
00013E0E 3228 0010                  		move.w	$10(a0),d1
00013E12 3428 0012                  		move.w	$12(a0),d2
00013E16 4EB9 0000 2F7A             		jsr	(CalcAngle).l
00013E1C 11C0 FFEC                  		move.b	d0,($FFFFFFEC).w
00013E20 0400 0020                  		subi.b	#$20,d0
00013E24 11C0 FFED                  		move.b	d0,($FFFFFFED).w
00013E28 0200 00C0                  		andi.b	#$C0,d0
00013E2C 11C0 FFEE                  		move.b	d0,($FFFFFFEE).w
00013E30 0C00 0040                  		cmpi.b	#$40,d0
00013E34 6700 0000                  		beq.w	loc_13680
00013E38 0C00 0080                  		cmpi.b	#$80,d0
00013E3C 6700 0000                  		beq.w	loc_136E2
00013E40 0C00 00C0                  		cmpi.b	#-$40,d0
00013E44 6700 0000                  		beq.w	loc_1373E
00013E48 6100 0000                  		bsr.w	Sonic_HitWall
00013E4C 4A41                       		tst.w	d1
00013E4E 6A00                       		bpl.s	loc_135F0
00013E50 9368 0008                  		sub.w	d1,8(a0)
00013E54 317C 0000 0010             		move.w	#0,$10(a0)
00013E5A                            
00013E5A                            loc_135F0:
00013E5A 6100 0000                  		bsr.w	sub_14EB4
00013E5E 4A41                       		tst.w	d1
00013E60 6A00                       		bpl.s	loc_13602
00013E62 D368 0008                  		add.w	d1,8(a0)
00013E66 317C 0000 0010             		move.w	#0,$10(a0)
00013E6C                            
00013E6C                            loc_13602:
00013E6C 6100 0000                  		bsr.w	Sonic_HitFloor
00013E70 11C1 FFEF                  		move.b	d1,($FFFFFFEF).w
00013E74 4A41                       		tst.w	d1
00013E76 6A00                       		bpl.s	locret_1367E
00013E78 1428 0012                  		move.b	$12(a0),d2
00013E7C 5002                       		addq.b	#8,d2
00013E7E 4402                       		neg.b	d2
00013E80 B202                       		cmp.b	d2,d1
00013E82 6C00                       		bge.s	loc_1361E
00013E84 B002                       		cmp.b	d2,d0
00013E86 6D00                       		blt.s	locret_1367E
00013E88                            
00013E88                            loc_1361E:
00013E88 D368 000C                  		add.w	d1,$C(a0)
00013E8C 1143 0026                  		move.b	d3,$26(a0)
00013E90 6100 0000                  		bsr.w	Sonic_ResetOnFloor
00013E94 117C 0000 001C             		move.b	#0,$1C(a0)
00013E9A 1003                       		move.b	d3,d0
00013E9C 0600 0020                  		addi.b	#$20,d0
00013EA0 0200 0040                  		andi.b	#$40,d0
00013EA4 6600                       		bne.s	loc_1365C
00013EA6 1003                       		move.b	d3,d0
00013EA8 0600 0010                  		addi.b	#$10,d0
00013EAC 0200 0020                  		andi.b	#$20,d0
00013EB0 6700                       		beq.s	loc_1364E
00013EB2 E0E8 0012                  		asr	$12(a0)
00013EB6 6000                       		bra.s	loc_13670
00013EB8                            ; ===========================================================================
00013EB8                            
00013EB8                            loc_1364E:
00013EB8 317C 0000 0012             		move.w	#0,$12(a0)
00013EBE 3168 0010 0014             		move.w	$10(a0),$14(a0)
00013EC4 4E75                       		rts	
00013EC6                            ; ===========================================================================
00013EC6                            
00013EC6                            loc_1365C:
00013EC6 317C 0000 0010             		move.w	#0,$10(a0)
00013ECC 0C68 0FC0 0012             		cmpi.w	#$FC0,$12(a0)
00013ED2 6F00                       		ble.s	loc_13670
00013ED4 317C 0FC0 0012             		move.w	#$FC0,$12(a0)
00013EDA                            
00013EDA                            loc_13670:
00013EDA 3168 0012 0014             		move.w	$12(a0),$14(a0)
00013EE0 4A03                       		tst.b	d3
00013EE2 6A00                       		bpl.s	locret_1367E
00013EE4 4468 0014                  		neg.w	$14(a0)
00013EE8                            
00013EE8                            locret_1367E:
00013EE8 4E75                       		rts	
00013EEA                            ; ===========================================================================
00013EEA                            
00013EEA                            loc_13680:
00013EEA 6100 0000                  		bsr.w	Sonic_HitWall
00013EEE 4A41                       		tst.w	d1
00013EF0 6A00                       		bpl.s	loc_1369A
00013EF2 9368 0008                  		sub.w	d1,8(a0)
00013EF6 317C 0000 0010             		move.w	#0,$10(a0)
00013EFC 3168 0012 0014             		move.w	$12(a0),$14(a0)
00013F02 4E75                       		rts	
00013F04                            ; ===========================================================================
00013F04                            
00013F04                            loc_1369A:
00013F04 6100 0000                  		bsr.w	Sonic_DontRunOnWalls
00013F08 4A41                       		tst.w	d1
00013F0A 6A00                       		bpl.s	loc_136B4
00013F0C 9368 000C                  		sub.w	d1,$C(a0)
00013F10 4A68 0012                  		tst.w	$12(a0)
00013F14 6A00                       		bpl.s	locret_136B2
00013F16 317C 0000 0012             		move.w	#0,$12(a0)
00013F1C                            
00013F1C                            locret_136B2:
00013F1C 4E75                       		rts	
00013F1E                            ; ===========================================================================
00013F1E                            
00013F1E                            loc_136B4:
00013F1E 4A68 0012                  		tst.w	$12(a0)
00013F22 6B00                       		bmi.s	locret_136E0
00013F24 6100 0000                  		bsr.w	Sonic_HitFloor
00013F28 4A41                       		tst.w	d1
00013F2A 6A00                       		bpl.s	locret_136E0
00013F2C D368 000C                  		add.w	d1,$C(a0)
00013F30 1143 0026                  		move.b	d3,$26(a0)
00013F34 6100 0000                  		bsr.w	Sonic_ResetOnFloor
00013F38 117C 0000 001C             		move.b	#0,$1C(a0)
00013F3E 317C 0000 0012             		move.w	#0,$12(a0)
00013F44 3168 0010 0014             		move.w	$10(a0),$14(a0)
00013F4A                            
00013F4A                            locret_136E0:
00013F4A 4E75                       		rts	
00013F4C                            ; ===========================================================================
00013F4C                            
00013F4C                            loc_136E2:
00013F4C 6100 0000                  		bsr.w	Sonic_HitWall
00013F50 4A41                       		tst.w	d1
00013F52 6A00                       		bpl.s	loc_136F4
00013F54 9368 0008                  		sub.w	d1,8(a0)
00013F58 317C 0000 0010             		move.w	#0,$10(a0)
00013F5E                            
00013F5E                            loc_136F4:
00013F5E 6100 0000                  		bsr.w	sub_14EB4
00013F62 4A41                       		tst.w	d1
00013F64 6A00                       		bpl.s	loc_13706
00013F66 D368 0008                  		add.w	d1,8(a0)
00013F6A 317C 0000 0010             		move.w	#0,$10(a0)
00013F70                            
00013F70                            loc_13706:
00013F70 6100 0000                  		bsr.w	Sonic_DontRunOnWalls
00013F74 4A41                       		tst.w	d1
00013F76 6A00                       		bpl.s	locret_1373C
00013F78 9368 000C                  		sub.w	d1,$C(a0)
00013F7C 1003                       		move.b	d3,d0
00013F7E 0600 0020                  		addi.b	#$20,d0
00013F82 0200 0040                  		andi.b	#$40,d0
00013F86 6600                       		bne.s	loc_13726
00013F88 317C 0000 0012             		move.w	#0,$12(a0)
00013F8E 4E75                       		rts	
00013F90                            ; ===========================================================================
00013F90                            
00013F90                            loc_13726:
00013F90 1143 0026                  		move.b	d3,$26(a0)
00013F94 6100 0000                  		bsr.w	Sonic_ResetOnFloor
00013F98 3168 0012 0014             		move.w	$12(a0),$14(a0)
00013F9E 4A03                       		tst.b	d3
00013FA0 6A00                       		bpl.s	locret_1373C
00013FA2 4468 0014                  		neg.w	$14(a0)
00013FA6                            
00013FA6                            locret_1373C:
00013FA6 4E75                       		rts	
00013FA8                            ; ===========================================================================
00013FA8                            
00013FA8                            loc_1373E:
00013FA8 6100 0000                  		bsr.w	sub_14EB4
00013FAC 4A41                       		tst.w	d1
00013FAE 6A00                       		bpl.s	loc_13758
00013FB0 D368 0008                  		add.w	d1,8(a0)
00013FB4 317C 0000 0010             		move.w	#0,$10(a0)
00013FBA 3168 0012 0014             		move.w	$12(a0),$14(a0)
00013FC0 4E75                       		rts	
00013FC2                            ; ===========================================================================
00013FC2                            
00013FC2                            loc_13758:
00013FC2 6100 0000                  		bsr.w	Sonic_DontRunOnWalls
00013FC6 4A41                       		tst.w	d1
00013FC8 6A00                       		bpl.s	loc_13772
00013FCA 9368 000C                  		sub.w	d1,$C(a0)
00013FCE 4A68 0012                  		tst.w	$12(a0)
00013FD2 6A00                       		bpl.s	locret_13770
00013FD4 317C 0000 0012             		move.w	#0,$12(a0)
00013FDA                            
00013FDA                            locret_13770:
00013FDA 4E75                       		rts	
00013FDC                            ; ===========================================================================
00013FDC                            
00013FDC                            loc_13772:
00013FDC 4A68 0012                  		tst.w	$12(a0)
00013FE0 6B00                       		bmi.s	locret_1379E
00013FE2 6100 0000                  		bsr.w	Sonic_HitFloor
00013FE6 4A41                       		tst.w	d1
00013FE8 6A00                       		bpl.s	locret_1379E
00013FEA D368 000C                  		add.w	d1,$C(a0)
00013FEE 1143 0026                  		move.b	d3,$26(a0)
00013FF2 6100 0000                  		bsr.w	Sonic_ResetOnFloor
00013FF6 117C 0000 001C             		move.b	#0,$1C(a0)
00013FFC 317C 0000 0012             		move.w	#0,$12(a0)
00014002 3168 0010 0014             		move.w	$10(a0),$14(a0)
00014008                            
00014008                            locret_1379E:
00014008 4E75                       		rts	
0001400A                            ; End of function Sonic_Floor
0001400A                            
0001400A                            ; ---------------------------------------------------------------------------
0001400A                            ; Subroutine to	reset Sonic's mode when he lands on the floor
0001400A                            ; ---------------------------------------------------------------------------
0001400A                            
0001400A                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0001400A                            
0001400A                            
0001400A                            Sonic_ResetOnFloor:			; XREF: PlatformObject; et al
0001400A 0828 0004 0022             		btst	#4,$22(a0)
00014010 6700                       		beq.s	loc_137AE
00014012 4E71                       		nop	
00014014 4E71                       		nop	
00014016 4E71                       		nop	
00014018                            
00014018                            loc_137AE:
00014018 08A8 0005 0022             		bclr	#5,$22(a0)
0001401E 08A8 0001 0022             		bclr	#1,$22(a0)
00014024 08A8 0004 0022             		bclr	#4,$22(a0)
0001402A 0828 0002 0022             		btst	#2,$22(a0)
00014030 6700                       		beq.s	loc_137E4
00014032 08A8 0002 0022             		bclr	#2,$22(a0)
00014038 117C 0013 0016             		move.b	#$13,$16(a0)
0001403E 117C 0009 0017             		move.b	#9,$17(a0)
00014044 117C 0000 001C             		move.b	#0,$1C(a0)	; use running/walking animation
0001404A 5B68 000C                  		subq.w	#5,$C(a0)
0001404E                            
0001404E                            loc_137E4:
0001404E 117C 0000 003C             		move.b	#0,$3C(a0)
00014054 31FC 0000 F7D0             		move.w	#0,($FFFFF7D0).w
0001405A 4E75                       		rts	
0001405C                            ; End of function Sonic_ResetOnFloor
0001405C                            
0001405C                            ; ===========================================================================
0001405C                            ; ---------------------------------------------------------------------------
0001405C                            ; Sonic	when he	gets hurt
0001405C                            ; ---------------------------------------------------------------------------
0001405C                            
0001405C                            Obj01_Hurt:				; XREF: Obj01_Index
0001405C 4EBA 9D44                  		jsr	SpeedToPos
00014060 0668 0030 0012             		addi.w	#$30,$12(a0)
00014066 0828 0006 0022             		btst	#6,$22(a0)
0001406C 6700                       		beq.s	loc_1380C
0001406E 0468 0020 0012             		subi.w	#$20,$12(a0)
00014074                            
00014074                            loc_1380C:
00014074 6100 0000                  		bsr.w	Sonic_HurtStop
00014078 6100 FAEE                  		bsr.w	Sonic_LevelBound
0001407C 6100 F4B4                  		bsr.w	Sonic_RecordPos
00014080 6100 0000                  		bsr.w	Sonic_Animate
00014084 6100 0000                  		bsr.w	LoadSonicDynPLC
00014088 4EFA 9D3E                  		jmp	DisplaySprite
0001408C                            
0001408C                            ; ---------------------------------------------------------------------------
0001408C                            ; Subroutine to	stop Sonic falling after he's been hurt
0001408C                            ; ---------------------------------------------------------------------------
0001408C                            
0001408C                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0001408C                            
0001408C                            
0001408C                            Sonic_HurtStop:				; XREF: Obj01_Hurt
0001408C 3038 F72E                  		move.w	($FFFFF72E).w,d0
00014090 0640 00E0                  		addi.w	#$E0,d0
00014094 B068 000C                  		cmp.w	$C(a0),d0
00014098 6500 0000                  		bcs.w	KillSonic
0001409C 6100 FD70                  		bsr.w	Sonic_Floor
000140A0 0828 0001 0022             		btst	#1,$22(a0)
000140A6 6600                       		bne.s	locret_13860
000140A8 7000                       		moveq	#0,d0
000140AA 3140 0012                  		move.w	d0,$12(a0)
000140AE 3140 0010                  		move.w	d0,$10(a0)
000140B2 3140 0014                  		move.w	d0,$14(a0)
000140B6 117C 0000 001C             		move.b	#0,$1C(a0)
000140BC 5528 0024                  		subq.b	#2,$24(a0)
000140C0 317C 0078 0030             		move.w	#$78,$30(a0)
000140C6                            
000140C6                            locret_13860:
000140C6 4E75                       		rts	
000140C8                            ; End of function Sonic_HurtStop
000140C8                            
000140C8                            ; ===========================================================================
000140C8                            ; ---------------------------------------------------------------------------
000140C8                            ; Sonic	when he	dies
000140C8                            ; ---------------------------------------------------------------------------
000140C8                            
000140C8                            Obj01_Death:				; XREF: Obj01_Index
000140C8 6100 0000                  		bsr.w	GameOver
000140CC 4EBA 9CA8                  		jsr	ObjectFall
000140D0 6100 F460                  		bsr.w	Sonic_RecordPos
000140D4 6100 0000                  		bsr.w	Sonic_Animate
000140D8 6100 0000                  		bsr.w	LoadSonicDynPLC
000140DC 4EFA 9CEA                  		jmp	DisplaySprite
000140E0                            
000140E0                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000140E0                            
000140E0                            
000140E0                            GameOver:				; XREF: Obj01_Death
000140E0 3038 F72E                  		move.w	($FFFFF72E).w,d0
000140E4 0640 0100                  		addi.w	#$100,d0
000140E8 B068 000C                  		cmp.w	$C(a0),d0
000140EC 6400 0000                  		bcc.w	locret_13900
000140F0 317C FFC8 0012             		move.w	#-$38,$12(a0)
000140F6 5428 0024                  		addq.b	#2,$24(a0)
000140FA 4238 FE1E                  		clr.b	($FFFFFE1E).w	; stop time counter
000140FE 5238 FE1C                  		addq.b	#1,($FFFFFE1C).w ; update lives	counter
00014102 5338 FE12                  		subq.b	#1,($FFFFFE12).w ; subtract 1 from number of lives
00014106 6600                       		bne.s	loc_138D4
00014108 317C 0000 003A             		move.w	#0,$3A(a0)
0001410E 11FC 0039 D080             		move.b	#$39,($FFFFD080).w ; load GAME object
00014114 11FC 0039 D0C0             		move.b	#$39,($FFFFD0C0).w ; load OVER object
0001411A 11FC 0001 D0DA             		move.b	#1,($FFFFD0DA).w ; set OVER object to correct frame
00014120 4238 FE1A                  		clr.b	($FFFFFE1A).w
00014124                            
00014124                            loc_138C2:
00014124 303C 008F                  		move.w	#$8F,d0
00014128 4EB9 0000 15BA             		jsr	(PlaySound).l	; play game over music
0001412E 7003                       		moveq	#3,d0
00014130 4EF9 0000 17A4             		jmp	(LoadPLC).l	; load game over patterns
00014136                            ; ===========================================================================
00014136                            
00014136                            loc_138D4:
00014136 317C 003C 003A             		move.w	#60,$3A(a0)	; set time delay to 1 second
0001413C 4A38 FE1A                  		tst.b	($FFFFFE1A).w	; is TIME OVER tag set?
00014140 6700                       		beq.s	locret_13900	; if not, branch
00014142 317C 0000 003A             		move.w	#0,$3A(a0)
00014148 11FC 0039 D080             		move.b	#$39,($FFFFD080).w ; load TIME object
0001414E 11FC 0039 D0C0             		move.b	#$39,($FFFFD0C0).w ; load OVER object
00014154 11FC 0002 D09A             		move.b	#2,($FFFFD09A).w
0001415A 11FC 0003 D0DA             		move.b	#3,($FFFFD0DA).w
00014160 60C2                       		bra.s	loc_138C2
00014162                            ; ===========================================================================
00014162                            
00014162                            locret_13900:
00014162 4E75                       		rts	
00014164                            ; End of function GameOver
00014164                            
00014164                            ; ===========================================================================
00014164                            ; ---------------------------------------------------------------------------
00014164                            ; Sonic	when the level is restarted
00014164                            ; ---------------------------------------------------------------------------
00014164                            
00014164                            Obj01_ResetLevel:			; XREF: Obj01_Index
00014164 4A68 003A                  		tst.w	$3A(a0)
00014168 6700                       		beq.s	locret_13914
0001416A 5368 003A                  		subq.w	#1,$3A(a0)	; subtract 1 from time delay
0001416E 6600                       		bne.s	locret_13914
00014170 31FC 0001 FE02             		move.w	#1,($FFFFFE02).w ; restart the level
00014176                            
00014176                            locret_13914:
00014176 4E75                       		rts	
00014178                            
00014178                            ; ---------------------------------------------------------------------------
00014178                            ; Subroutine to	make Sonic run around loops (GHZ/SLZ)
00014178                            ; ---------------------------------------------------------------------------
00014178                            
00014178                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00014178                            
00014178                            
00014178                            Sonic_Loops:				; XREF: Obj01_Control
00014178 0C38 0003 FE10             		cmpi.b	#3,($FFFFFE10).w ; is level SLZ	?
0001417E 6700                       		beq.s	loc_13926	; if yes, branch
00014180 4A38 FE10                  		tst.b	($FFFFFE10).w	; is level GHZ ?
00014184 6600 0000                  		bne.w	locret_139C2	; if not, branch
00014188                            
00014188                            loc_13926:
00014188 3028 000C                  		move.w	$C(a0),d0
0001418C E248                       		lsr.w	#1,d0
0001418E 0240 0380                  		andi.w	#$380,d0
00014192 1228 0008                  		move.b	8(a0),d1
00014196 0241 007F                  		andi.w	#$7F,d1
0001419A D041                       		add.w	d1,d0
0001419C 43F8 A400                  		lea	($FFFFA400).w,a1
000141A0 1231 0000                  		move.b	(a1,d0.w),d1	; d1 is	the 256x256 tile Sonic is currently on
000141A4 B238 F7AE                  		cmp.b	($FFFFF7AE).w,d1
000141A8 6700 FA66                  		beq.w	Obj01_ChkRoll
000141AC B238 F7AF                  		cmp.b	($FFFFF7AF).w,d1
000141B0 6700 FA5E                  		beq.w	Obj01_ChkRoll
000141B4 B238 F7AC                  		cmp.b	($FFFFF7AC).w,d1
000141B8 6700                       		beq.s	loc_13976
000141BA B238 F7AD                  		cmp.b	($FFFFF7AD).w,d1
000141BE 6700                       		beq.s	loc_13966
000141C0 08A8 0006 0001             		bclr	#6,1(a0)
000141C6 4E75                       		rts	
000141C8                            ; ===========================================================================
000141C8                            
000141C8                            loc_13966:
000141C8 0828 0001 0022             		btst	#1,$22(a0)
000141CE 6700                       		beq.s	loc_13976
000141D0 08A8 0006 0001             		bclr	#6,1(a0)	; send Sonic to	high plane
000141D6 4E75                       		rts	
000141D8                            ; ===========================================================================
000141D8                            
000141D8                            loc_13976:
000141D8 3428 0008                  		move.w	8(a0),d2
000141DC 0C02 002C                  		cmpi.b	#$2C,d2
000141E0 6400                       		bcc.s	loc_13988
000141E2 08A8 0006 0001             		bclr	#6,1(a0)	; send Sonic to	high plane
000141E8 4E75                       		rts	
000141EA                            ; ===========================================================================
000141EA                            
000141EA                            loc_13988:
000141EA 0C02 00E0                  		cmpi.b	#-$20,d2
000141EE 6500                       		bcs.s	loc_13996
000141F0 08E8 0006 0001             		bset	#6,1(a0)	; send Sonic to	low plane
000141F6 4E75                       		rts	
000141F8                            ; ===========================================================================
000141F8                            
000141F8                            loc_13996:
000141F8 0828 0006 0001             		btst	#6,1(a0)
000141FE 6600                       		bne.s	loc_139B2
00014200 1228 0026                  		move.b	$26(a0),d1
00014204 6700                       		beq.s	locret_139C2
00014206 0C01 0080                  		cmpi.b	#-$80,d1
0001420A 6200                       		bhi.s	locret_139C2
0001420C 08E8 0006 0001             		bset	#6,1(a0)	; send Sonic to	low plane
00014212 4E75                       		rts	
00014214                            ; ===========================================================================
00014214                            
00014214                            loc_139B2:
00014214 1228 0026                  		move.b	$26(a0),d1
00014218 0C01 0080                  		cmpi.b	#-$80,d1
0001421C 6300                       		bls.s	locret_139C2
0001421E 08A8 0006 0001             		bclr	#6,1(a0)	; send Sonic to	high plane
00014224                            
00014224                            locret_139C2:
00014224 4E75                       		rts	
00014226                            ; End of function Sonic_Loops
00014226                            
00014226                            ; ---------------------------------------------------------------------------
00014226                            ; Subroutine to	animate	Sonic's sprites
00014226                            ; ---------------------------------------------------------------------------
00014226                            
00014226                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00014226                            
00014226                            Player_Anim:
00014226 0000 0000                  	dc.l	SonicAniData
0001422A 0000 0000                  	dc.l	SonicAniData ; gronic
0001422E 0000 0000                  	dc.l	SonicAniData ; anakama
00014232                            	; Insert more animation data for other characters here
00014232                            	
00014232                            Sonic_Animate:				; XREF: Obj01_Control; et al
00014232 7000                       			moveq	#0,d0
00014234 1038 FFE8                  		move.b	(v_character),d0
00014238 E548                       		lsl.w	#2,d0
0001423A 43FA FFEA                  		lea 	Player_Anim(pc),a1
0001423E                            		
0001423E 2271 0000                  		movea.l	(a1,d0.w),a1	; load Sonic dplc
00014242                            	
00014242 7000                       		moveq	#0,d0
00014244 1028 001C                  		move.b	$1C(a0),d0
00014248 B028 001D                  		cmp.b	$1D(a0),d0	; is animation set to restart?
0001424C 6700                       		beq.s	SAnim_Do	; if not, branch
0001424E 1140 001D                  		move.b	d0,$1D(a0)	; set to "no restart"
00014252 117C 0000 001B             		move.b	#0,$1B(a0)	; reset	animation
00014258 117C 0000 001E             		move.b	#0,$1E(a0)	; reset	frame duration
0001425E                            
0001425E                            SAnim_Do:
0001425E D040                       		add.w	d0,d0
00014260 D2F1 0000                  		adda.w	(a1,d0.w),a1	; jump to appropriate animation	script
00014264 1011                       		move.b	(a1),d0
00014266 6B00                       		bmi.s	SAnim_WalkRun	; if animation is walk/run/roll/jump, branch
00014268 1228 0022                  		move.b	$22(a0),d1
0001426C 0201 0001                  		andi.b	#1,d1
00014270 0228 00FC 0001             		andi.b	#$FC,1(a0)
00014276 8328 0001                  		or.b	d1,1(a0)
0001427A 5328 001E                  		subq.b	#1,$1E(a0)	; subtract 1 from frame	duration
0001427E 6A00                       		bpl.s	SAnim_Delay	; if time remains, branch
00014280 1140 001E                  		move.b	d0,$1E(a0)	; load frame duration
00014284                            
00014284                            SAnim_Do2:
00014284 7200                       		moveq	#0,d1
00014286 1228 001B                  		move.b	$1B(a0),d1	; load current frame number
0001428A 1031 1001                  		move.b	1(a1,d1.w),d0	; read sprite number from script
0001428E 6B00                       		bmi.s	SAnim_End_FF	; if animation is complete, branch
00014290                            
00014290                            SAnim_Next:
00014290 1140 001A                  		move.b	d0,$1A(a0)	; load sprite number
00014294 5228 001B                  		addq.b	#1,$1B(a0)	; next frame number
00014298                            
00014298                            SAnim_Delay:
00014298 4E75                       		rts	
0001429A                            ; ===========================================================================
0001429A                            
0001429A                            SAnim_End_FF:
0001429A 5200                       		addq.b	#1,d0		; is the end flag = $FF	?
0001429C 6600                       		bne.s	SAnim_End_FE	; if not, branch
0001429E 117C 0000 001B             		move.b	#0,$1B(a0)	; restart the animation
000142A4 1029 0001                  		move.b	1(a1),d0	; read sprite number
000142A8 60E6                       		bra.s	SAnim_Next
000142AA                            ; ===========================================================================
000142AA                            
000142AA                            SAnim_End_FE:
000142AA 5200                       		addq.b	#1,d0		; is the end flag = $FE	?
000142AC 6600                       		bne.s	SAnim_End_FD	; if not, branch
000142AE 1031 1002                  		move.b	2(a1,d1.w),d0	; read the next	byte in	the script
000142B2 9128 001B                  		sub.b	d0,$1B(a0)	; jump back d0 bytes in	the script
000142B6 9200                       		sub.b	d0,d1
000142B8 1031 1001                  		move.b	1(a1,d1.w),d0	; read sprite number
000142BC 60D2                       		bra.s	SAnim_Next
000142BE                            ; ===========================================================================
000142BE                            
000142BE                            SAnim_End_FD:
000142BE 5200                       		addq.b	#1,d0		; is the end flag = $FD	?
000142C0 6600                       		bne.s	SAnim_End	; if not, branch
000142C2 1171 1002 001C             		move.b	2(a1,d1.w),$1C(a0) ; read next byte, run that animation
000142C8                            
000142C8                            SAnim_End:
000142C8 4E75                       		rts	
000142CA                            ; ===========================================================================
000142CA                            
000142CA                            SAnim_WalkRun:				; XREF: SAnim_Do
000142CA 5328 001E                  		subq.b	#1,$1E(a0)	; subtract 1 from frame	duration
000142CE 6AC8                       		bpl.s	SAnim_Delay	; if time remains, branch
000142D0 5200                       		addq.b	#1,d0		; is animation walking/running?
000142D2 6600 0000                  		bne.w	SAnim_RollJump	; if not, branch
000142D6 7200                       		moveq	#0,d1
000142D8 1028 0026                  		move.b	$26(a0),d0	; get Sonic's angle
000142DC 1428 0022                  		move.b	$22(a0),d2
000142E0 0202 0001                  		andi.b	#1,d2		; is Sonic mirrored horizontally?
000142E4 6600                       		bne.s	loc_13A70	; if yes, branch
000142E6 4600                       		not.b	d0		; reverse angle
000142E8                            
000142E8                            loc_13A70:
000142E8 0600 0010                  		addi.b	#$10,d0		; add $10 to angle
000142EC 6A00                       		bpl.s	loc_13A78	; if angle is $0-$7F, branch
000142EE 7203                       		moveq	#3,d1
000142F0                            
000142F0                            loc_13A78:
000142F0 0228 00FC 0001             		andi.b	#$FC,1(a0)
000142F6 B302                       		eor.b	d1,d2
000142F8 8528 0001                  		or.b	d2,1(a0)
000142FC 0828 0005 0022             		btst	#5,$22(a0)
00014302 6600 0000                  		bne.w	SAnim_Push
00014306 E808                       		lsr.b	#4,d0		; divide angle by $10
00014308 0200 0006                  		andi.b	#6,d0		; angle	must be	0, 2, 4	or 6
0001430C 3428 0014                  		move.w	$14(a0),d2	; get Sonic's speed
00014310 6A00                       		bpl.s	loc_13A9C
00014312 4442                       		neg.w	d2
00014314                            
00014314                            loc_13A9C:
00014314 43F9 0000 0000             		lea	(SonAni_Run).l,a1 ; use	running	animation
0001431A 0C42 0600                  		cmpi.w	#$600,d2	; is Sonic at running speed?
0001431E 6400                       		bcc.s	loc_13AB4	; if yes, branch
00014320 43F9 0000 0000             		lea	(SonAni_Walk).l,a1 ; use walking animation
00014326 1200                       		move.b	d0,d1
00014328 E209                       		lsr.b	#1,d1
0001432A D001                       		add.b	d1,d0
0001432C                            
0001432C                            loc_13AB4:
0001432C D000                       		add.b	d0,d0
0001432E 1600                       		move.b	d0,d3
00014330 4442                       		neg.w	d2
00014332 0642 0800                  		addi.w	#$800,d2
00014336 6A00                       		bpl.s	loc_13AC2
00014338 7400                       		moveq	#0,d2
0001433A                            
0001433A                            loc_13AC2:
0001433A E04A                       		lsr.w	#8,d2
0001433C 1142 001E                  		move.b	d2,$1E(a0)	; modify frame duration
00014340 6100 FF42                  		bsr.w	SAnim_Do2
00014344 D728 001A                  		add.b	d3,$1A(a0)	; modify frame number
00014348 4E75                       		rts	
0001434A                            ; ===========================================================================
0001434A                            
0001434A                            SAnim_RollJump:				; XREF: SAnim_WalkRun
0001434A 5200                       		addq.b	#1,d0		; is animation rolling/jumping?
0001434C 6600                       		bne.s	SAnim_Push	; if not, branch
0001434E 3428 0014                  		move.w	$14(a0),d2	; get Sonic's speed
00014352 6A00                       		bpl.s	loc_13ADE
00014354 4442                       		neg.w	d2
00014356                            
00014356                            loc_13ADE:
00014356 43F9 0000 0000             		lea	(SonAni_Roll2).l,a1 ; use fast animation
0001435C 0C42 0600                  		cmpi.w	#$600,d2	; is Sonic moving fast?
00014360 6400                       		bcc.s	loc_13AF0	; if yes, branch
00014362 43F9 0000 0000             		lea	(SonAni_Roll).l,a1 ; use slower	animation
00014368                            
00014368                            loc_13AF0:
00014368 4442                       		neg.w	d2
0001436A 0642 0400                  		addi.w	#$400,d2
0001436E 6A00                       		bpl.s	loc_13AFA
00014370 7400                       		moveq	#0,d2
00014372                            
00014372                            loc_13AFA:
00014372 E04A                       		lsr.w	#8,d2
00014374 1142 001E                  		move.b	d2,$1E(a0)	; modify frame duration
00014378 1228 0022                  		move.b	$22(a0),d1
0001437C 0201 0001                  		andi.b	#1,d1
00014380 0228 00FC 0001             		andi.b	#$FC,1(a0)
00014386 8328 0001                  		or.b	d1,1(a0)
0001438A 6000 FEF8                  		bra.w	SAnim_Do2
0001438E                            ; ===========================================================================
0001438E                            
0001438E                            SAnim_Push:				; XREF: SAnim_RollJump
0001438E 3428 0014                  		move.w	$14(a0),d2	; get Sonic's speed
00014392 6B00                       		bmi.s	loc_13B1E
00014394 4442                       		neg.w	d2
00014396                            
00014396                            loc_13B1E:
00014396 0642 0800                  		addi.w	#$800,d2
0001439A 6A00                       		bpl.s	loc_13B26
0001439C 7400                       		moveq	#0,d2
0001439E                            
0001439E                            loc_13B26:
0001439E EC4A                       		lsr.w	#6,d2
000143A0 1142 001E                  		move.b	d2,$1E(a0)	; modify frame duration
000143A4 43F9 0000 0000             		lea	(SonAni_Push).l,a1
000143AA 1228 0022                  		move.b	$22(a0),d1
000143AE 0201 0001                  		andi.b	#1,d1
000143B2 0228 00FC 0001             		andi.b	#$FC,1(a0)
000143B8 8328 0001                  		or.b	d1,1(a0)
000143BC 6000 FEC6                  		bra.w	SAnim_Do2
000143C0                            ; End of function Sonic_Animate
000143C0                            
000143C0                            ; ===========================================================================
000143C0                            SonicAniData:
000143C0                            	include "_anim\Sonic.asm"
000143C0                            ; ---------------------------------------------------------------------------
000143C0                            ; Animation script - Sonic
000143C0                            ; ---------------------------------------------------------------------------
000143C0 0000                       		dc.w SonAni_Walk-SonicAniData
000143C2 0000                       		dc.w SonAni_Run-SonicAniData
000143C4 0000                       		dc.w SonAni_Roll-SonicAniData
000143C6 0000                       		dc.w SonAni_Roll2-SonicAniData
000143C8 0000                       		dc.w SonAni_Push-SonicAniData
000143CA 0000                       		dc.w SonAni_Wait-SonicAniData
000143CC 0000                       		dc.w SonAni_Balance-SonicAniData
000143CE 0000                       		dc.w SonAni_LookUp-SonicAniData
000143D0 0000                       		dc.w SonAni_Duck-SonicAniData
000143D2 0000                       		dc.w SonAni_Warp1-SonicAniData
000143D4 0000                       		dc.w SonAni_Warp2-SonicAniData
000143D6 0000                       		dc.w SonAni_Warp3-SonicAniData
000143D8 0000                       		dc.w SonAni_Warp4-SonicAniData
000143DA 0000                       		dc.w SonAni_Stop-SonicAniData
000143DC 0000                       		dc.w SonAni_Float1-SonicAniData
000143DE 0000                       		dc.w SonAni_Float2-SonicAniData
000143E0 0000                       		dc.w SonAni_Spring-SonicAniData
000143E2 0000                       		dc.w SonAni_LZHang-SonicAniData
000143E4 0000                       		dc.w SonAni_Leap1-SonicAniData
000143E6 0000                       		dc.w SonAni_Leap2-SonicAniData
000143E8 0000                       		dc.w SonAni_Surf-SonicAniData
000143EA 0000                       		dc.w SonAni_Bubble-SonicAniData
000143EC 0000                       		dc.w SonAni_Death1-SonicAniData
000143EE 0000                       		dc.w SonAni_Drown-SonicAniData
000143F0 0000                       		dc.w SonAni_Death2-SonicAniData
000143F2 0000                       		dc.w SonAni_Shrink-SonicAniData
000143F4 0000                       		dc.w SonAni_Hurt-SonicAniData
000143F6 0000                       		dc.w SonAni_LZSlide-SonicAniData
000143F8 0000                       		dc.w SonAni_Blank-SonicAniData
000143FA 0000                       		dc.w SonAni_Float3-SonicAniData
000143FC 0000                       		dc.w SonAni_Float4-SonicAniData
000143FE FF08 095A 0A0B 0659 07FF   SonAni_Walk:	dc.b $FF, 8, 9, $5A, $A, $B, 6, $59, 7, $FF
00014408 FF1E 1F20 21FF FFFF        SonAni_Run:	dc.b $FF, $1E, $1F, $20, $21, $FF, $FF,	$FF
00014410 FE2E 2F30 3132 FFFF        SonAni_Roll:	dc.b $FE, $2E, $2F, $30, $31, $32, $FF,	$FF
00014418 FE2E 2F32 3031 32FF        SonAni_Roll2:	dc.b $FE, $2E, $2F, $32, $30, $31, $32,	$FF
00014420 FD45 4647 48FF FFFF        SonAni_Push:	dc.b $FD, $45, $46, $47, $48, $FF, $FF,	$FF
00014428 1701 0101 0101 0101 0101+  SonAni_Wait:	dc.b $17, 1, 1,	1, 1, 1, 1, 1, 1, 1, 1,	1, 1, 3, 2, 2, 2, 3, 4, $FE, 2, 0
0001443E 1E3A 3BFF                  SonAni_Balance:	dc.b $1E, $3A, $3B, $FF
00014442 3F05 FF00                  SonAni_LookUp:	dc.b $3F, 5, $FF, 0
00014446 3F39 FF00                  SonAni_Duck:	dc.b $3F, $39, $FF, 0
0001444A 3F33 FF00                  SonAni_Warp1:	dc.b $3F, $33, $FF, 0
0001444E 3F34 FF00                  SonAni_Warp2:	dc.b $3F, $34, $FF, 0
00014452 3F35 FF00                  SonAni_Warp3:	dc.b $3F, $35, $FF, 0
00014456 3F36 FF00                  SonAni_Warp4:	dc.b $3F, $36, $FF, 0
0001445A 0737 38FF                  SonAni_Stop:	dc.b 7,	$37, $38, $FF
0001445E 073C 3FFF                  SonAni_Float1:	dc.b 7,	$3C, $3F, $FF
00014462 073C 3D53 3E54 FF00        SonAni_Float2:	dc.b 7,	$3C, $3D, $53, $3E, $54, $FF, 0
0001446A 2F40 FD00                  SonAni_Spring:	dc.b $2F, $40, $FD, 0
0001446E 0441 42FF                  SonAni_LZHang:	dc.b 4,	$41, $42, $FF
00014472 0F43 4343 FE01             SonAni_Leap1:	dc.b $F, $43, $43, $43,	$FE, 1
00014478 0F43 44FE 0100             SonAni_Leap2:	dc.b $F, $43, $44, $FE,	1, 0
0001447E 3F49 FF00                  SonAni_Surf:	dc.b $3F, $49, $FF, 0
00014482 0B56 560A 0BFD 0000        SonAni_Bubble:	dc.b $B, $56, $56, $A, $B, $FD,	0, 0
0001448A 204B FF00                  SonAni_Death1:	dc.b $20, $4B, $FF, 0
0001448E 2F4C FF00                  SonAni_Drown:	dc.b $2F, $4C, $FF, 0
00014492 034D FF00                  SonAni_Death2:	dc.b 3,	$4D, $FF, 0
00014496 034E 4F50 5152 00FE 0100   SonAni_Shrink:	dc.b 3,	$4E, $4F, $50, $51, $52, 0, $FE, 1, 0
000144A0 035B FF00                  SonAni_Hurt:	dc.b 3,	$5B, $FF, 0
000144A4 0755 57FF                  SonAni_LZSlide:	dc.b 7, $55, $57, $FF
000144A8 7700 FD00                  SonAni_Blank:	dc.b $77, 0, $FD, 0
000144AC 033C 3D53 3E54 FF00        SonAni_Float3:	dc.b 3,	$3C, $3D, $53, $3E, $54, $FF, 0
000144B4 033C FD00                  SonAni_Float4:	dc.b 3,	$3C, $FD, 0
000144B8                            		even
000144B8                            		even
000144B8                            
000144B8                            ; ---------------------------------------------------------------------------
000144B8                            ; Sonic	pattern	loading	subroutine
000144B8                            ; ---------------------------------------------------------------------------
000144B8                            
000144B8                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000144B8                            Player_DPLC:
000144B8 0000 0000                  	dc.l	SonicDynPLC
000144BC 0000 0000                  	dc.l	SonicDynPLC ; gronic
000144C0 0000 0000                  	dc.l	SonicDynPLC ; anakama
000144C4                            	; add pointers for player dplc here
000144C4                            Player_Art:
000144C4 0000 0000                  	dc.l	Art_Sonic
000144C8 0000 0000                  	dc.l	Art_Sonic ; gronic
000144CC 0000 0000                  	dc.l	Art_Sonic ; anakama
000144D0                            	; add pointers for player art here
000144D0                            
000144D0                            LoadSonicDynPLC:			; XREF: Obj01_Control; et al
000144D0 7000                       		moveq	#0,d0
000144D2 1028 001A                  		move.b	$1A(a0),d0	; load frame number
000144D6 B038 F766                  		cmp.b	($FFFFF766).w,d0
000144DA 6700                       		beq.s	locret_13C96
000144DC 11C0 F766                  		move.b	d0,($FFFFF766).w
000144E0                            		
000144E0 323C 0000                  		move.w	#0,d1
000144E4 1238 FFE8                  		move.b	(v_character),d1
000144E8 E549                       		lsl.w	#2,d1
000144EA 45FA FFCC                  		lea 	Player_DPLC(pc),a2
000144EE                            
000144EE 2472 1000                  		movea.l	(a2,d1.w),a2	; load Sonic dplc
000144F2                            		
000144F2 D040                       		add.w	d0,d0
000144F4 D4F2 0000                  		adda.w	(a2,d0.w),a2
000144F8 7200                       		moveq	#0,d1
000144FA 121A                       		move.b	(a2)+,d1	; read "number of entries" value
000144FC 5301                       		subq.b	#1,d1
000144FE 6B00                       		bmi.s	locret_13C96
00014500 47F8 C800                  		lea	($FFFFC800).w,a3
00014504 11FC 0001 F767             		move.b	#1,($FFFFF767).w
0001450A                            
0001450A                            SPLC_ReadEntry:
0001450A 303C 0000                  		move.w	#0,d0
0001450E 1038 FFE8                  		move.b	(v_character),d0
00014512 E548                       		lsl.w	#2,d0
00014514 43FA FFAE                  		lea 	Player_Art(pc),a1
00014518                            
00014518 2271 0000                  		movea.l	(a1,d0.w),a1	; load Sonic art
0001451C                            
0001451C 7400                       		moveq	#0,d2
0001451E 141A                       		move.b	(a2)+,d2
00014520 3002                       		move.w	d2,d0
00014522 E808                       		lsr.b	#4,d0
00014524 E14A                       		lsl.w	#8,d2
00014526 141A                       		move.b	(a2)+,d2
00014528 EB4A                       		lsl.w	#5,d2
0001452A D3C2                       		adda.l	d2,a1
0001452C                            
0001452C                            SPLC_LoadTile:
0001452C 4CD9 707C                  		movem.l	(a1)+,d2-d6/a4-a6
00014530 48D3 707C                  		movem.l	d2-d6/a4-a6,(a3)
00014534 47EB 0020                  		lea	$20(a3),a3	; next tile
00014538 51C8 FFF2                  		dbf	d0,SPLC_LoadTile ; repeat for number of	tiles
0001453C                            
0001453C 51C9 FFCC                  		dbf	d1,SPLC_ReadEntry ; repeat for number of entries
00014540                            
00014540                            locret_13C96:
00014540 4E75                       		rts	
00014542                            ; End of function LoadSonicDynPLC
00014542                            
00014542                            ; ===========================================================================
00014542                            ; ---------------------------------------------------------------------------
00014542                            ; Object 0A - drowning countdown numbers and small bubbles (LZ)
00014542                            ; ---------------------------------------------------------------------------
00014542                            
00014542                            Obj0A:					; XREF: Obj_Index
00014542 7000                       		moveq	#0,d0
00014544 1028 0024                  		move.b	$24(a0),d0
00014548 323B 0000                  		move.w	Obj0A_Index(pc,d0.w),d1
0001454C 4EFB 1000                  		jmp	Obj0A_Index(pc,d1.w)
00014550                            ; ===========================================================================
00014550 0000 0000                  Obj0A_Index:	dc.w Obj0A_Main-Obj0A_Index, Obj0A_Animate-Obj0A_Index
00014554 0000 0000                  		dc.w Obj0A_ChkWater-Obj0A_Index, Obj0A_Display-Obj0A_Index
00014558 0000 0000                  		dc.w Obj0A_Delete2-Obj0A_Index,	Obj0A_Countdown-Obj0A_Index
0001455C 0000 0000                  		dc.w Obj0A_AirLeft-Obj0A_Index,	Obj0A_Display-Obj0A_Index
00014560 0000                       		dc.w Obj0A_Delete2-Obj0A_Index
00014562                            ; ===========================================================================
00014562                            
00014562                            Obj0A_Main:				; XREF: Obj0A_Index
00014562 5428 0024                  		addq.b	#2,$24(a0)
00014566 217C 0001 315A 0004        		move.l	#Map_obj64,4(a0)
0001456E 317C 8348 0002             		move.w	#$8348,2(a0)
00014574 117C 0084 0001             		move.b	#$84,1(a0)
0001457A 117C 0010 0019             		move.b	#$10,$19(a0)
00014580 117C 0001 0018             		move.b	#1,$18(a0)
00014586 1028 0028                  		move.b	$28(a0),d0
0001458A 6A00                       		bpl.s	loc_13D00
0001458C 5028 0024                  		addq.b	#8,$24(a0)
00014590 217C 0000 0000 0004        		move.l	#Map_obj0A,4(a0)
00014598 317C 0440 0002             		move.w	#$440,2(a0)
0001459E 0240 007F                  		andi.w	#$7F,d0
000145A2 1140 0033                  		move.b	d0,$33(a0)
000145A6 6000 0000                  		bra.w	Obj0A_Countdown
000145AA                            ; ===========================================================================
000145AA                            
000145AA                            loc_13D00:
000145AA 1140 001C                  		move.b	d0,$1C(a0)
000145AE 3168 0008 0030             		move.w	8(a0),$30(a0)
000145B4 317C FF78 0012             		move.w	#-$88,$12(a0)
000145BA                            
000145BA                            Obj0A_Animate:				; XREF: Obj0A_Index
000145BA 43F9 0000 0000             		lea	(Ani_obj0A).l,a1
000145C0 4EB9 0000 AE88             		jsr	AnimateSprite
000145C6                            
000145C6                            Obj0A_ChkWater:				; XREF: Obj0A_Index
000145C6 3038 F646                  		move.w	($FFFFF646).w,d0
000145CA B068 000C                  		cmp.w	$C(a0),d0	; has bubble reached the water surface?
000145CE 6500                       		bcs.s	Obj0A_Wobble	; if not, branch
000145D0 117C 0006 0024             		move.b	#6,$24(a0)
000145D6 5E28 001C                  		addq.b	#7,$1C(a0)
000145DA 0C28 000D 001C             		cmpi.b	#$D,$1C(a0)
000145E0 6700                       		beq.s	Obj0A_Display
000145E2 6000                       		bra.s	Obj0A_Display
000145E4                            ; ===========================================================================
000145E4                            
000145E4                            Obj0A_Wobble:
000145E4 4A38 F7C7                  		tst.b	($FFFFF7C7).w
000145E8 6700                       		beq.s	loc_13D44
000145EA 5868 0030                  		addq.w	#4,$30(a0)
000145EE                            
000145EE                            loc_13D44:
000145EE 1028 0026                  		move.b	$26(a0),d0
000145F2 5228 0026                  		addq.b	#1,$26(a0)
000145F6 0240 007F                  		andi.w	#$7F,d0
000145FA 43F9 0000 0000             		lea	(Obj0A_WobbleData).l,a1
00014600 1031 0000                  		move.b	(a1,d0.w),d0
00014604 4880                       		ext.w	d0
00014606 D068 0030                  		add.w	$30(a0),d0
0001460A 3140 0008                  		move.w	d0,8(a0)
0001460E 6100                       		bsr.s	Obj0A_ShowNumber
00014610 4EBA 9790                  		jsr	SpeedToPos
00014614 4A28 0001                  		tst.b	1(a0)
00014618 6A00                       		bpl.s	Obj0A_Delete
0001461A 4EFA 97AC                  		jmp	DisplaySprite
0001461E                            ; ===========================================================================
0001461E                            
0001461E                            Obj0A_Delete:
0001461E 4EFA 97E4                  		jmp	DeleteObject
00014622                            ; ===========================================================================
00014622                            
00014622                            Obj0A_Display:				; XREF: Obj0A_Index
00014622 6100                       		bsr.s	Obj0A_ShowNumber
00014624 43F9 0000 0000             		lea	(Ani_obj0A).l,a1
0001462A 4EB9 0000 AE88             		jsr	AnimateSprite
00014630 4EFA 9796                  		jmp	DisplaySprite
00014634                            ; ===========================================================================
00014634                            
00014634                            Obj0A_Delete2:				; XREF: Obj0A_Index
00014634 4EFA 97CE                  		jmp	DeleteObject
00014638                            ; ===========================================================================
00014638                            
00014638                            Obj0A_AirLeft:				; XREF: Obj0A_Index
00014638 0C78 000C FE14             		cmpi.w	#$C,($FFFFFE14).w ; check air remaining
0001463E 6200                       		bhi.s	Obj0A_Delete3	; if higher than $C, branch
00014640 5368 0038                  		subq.w	#1,$38(a0)
00014644 6600                       		bne.s	Obj0A_Display2
00014646 117C 000E 0024             		move.b	#$E,$24(a0)
0001464C 5E28 001C                  		addq.b	#7,$1C(a0)
00014650 60D0                       		bra.s	Obj0A_Display
00014652                            ; ===========================================================================
00014652                            
00014652                            Obj0A_Display2:
00014652 43F9 0000 0000             		lea	(Ani_obj0A).l,a1
00014658 4EB9 0000 AE88             		jsr	AnimateSprite
0001465E 4A28 0001                  		tst.b	1(a0)
00014662 6A00                       		bpl.s	Obj0A_Delete3
00014664 4EFA 9762                  		jmp	DisplaySprite
00014668                            ; ===========================================================================
00014668                            
00014668                            Obj0A_Delete3:
00014668 4EFA 979A                  		jmp	DeleteObject
0001466C                            ; ===========================================================================
0001466C                            
0001466C                            Obj0A_ShowNumber:			; XREF: Obj0A_Wobble; Obj0A_Display
0001466C 4A68 0038                  		tst.w	$38(a0)
00014670 6700                       		beq.s	locret_13E1A
00014672 5368 0038                  		subq.w	#1,$38(a0)
00014676 6600                       		bne.s	locret_13E1A
00014678 0C28 0007 001C             		cmpi.b	#7,$1C(a0)
0001467E 6400                       		bcc.s	locret_13E1A
00014680 317C 000F 0038             		move.w	#$F,$38(a0)
00014686 4268 0012                  		clr.w	$12(a0)
0001468A 117C 0080 0001             		move.b	#$80,1(a0)
00014690 3028 0008                  		move.w	8(a0),d0
00014694 9078 F700                  		sub.w	($FFFFF700).w,d0
00014698 0640 0080                  		addi.w	#$80,d0
0001469C 3140 0008                  		move.w	d0,8(a0)
000146A0 3028 000C                  		move.w	$C(a0),d0
000146A4 9078 F704                  		sub.w	($FFFFF704).w,d0
000146A8 0640 0080                  		addi.w	#$80,d0
000146AC 3140 000A                  		move.w	d0,$A(a0)
000146B0 117C 000C 0024             		move.b	#$C,$24(a0)
000146B6                            
000146B6                            locret_13E1A:
000146B6 4E75                       		rts	
000146B8                            ; ===========================================================================
000146B8                            Obj0A_WobbleData:
000146B8 0000 0000 0000 0101 0101+  		dc.b 0, 0, 0, 0, 0, 0,	1, 1, 1, 1, 1, 2, 2, 2,	2, 2, 2
000146C9 0203 0303 0303 0303 0303+  		dc.b 2,	3, 3, 3, 3, 3, 3, 3, 3,	3, 3, 3, 3, 3, 3, 4, 3
000146DA 0303 0303 0303 0303 0303+  		dc.b 3,	3, 3, 3, 3, 3, 3, 3, 3,	3, 3, 3, 3, 2, 2, 2, 2
000146EB 0202 0201 0101 0101 0000+  		dc.b 2,	2, 2, 1, 1, 1, 1, 1, 0,	0, 0, 0, 0, 0, -1, -1
000146FB FFFF FFFE FEFE FEFE FDFD+  		dc.b -1, -1, -1, -2, -2, -2, -2, -2, -3, -3, -3, -3, -3
00014708 FDFD FCFC FCFC FCFC FCFC+  		dc.b -3, -3, -4, -4, -4, -4, -4, -4, -4, -4, -4, -4, -4
00014715 FCFC FCFC FCFC FCFC FCFC+  		dc.b -4, -4, -4, -4, -4, -4, -4, -4, -4, -4, -4, -4, -4
00014722 FCFC FCFC FCFD FDFD FDFD+  		dc.b -4, -4, -4, -4, -4, -3, -3, -3, -3, -3, -3, -3, -2
0001472F FEFE FEFE FFFF FFFF FF     		dc.b -2, -2, -2, -2, -1, -1, -1, -1, -1
00014738                            ; ===========================================================================
00014738                            
00014738                            Obj0A_Countdown:			; XREF: Obj0A_Index
00014738 4A68 002C                  		tst.w	$2C(a0)
0001473C 6600 0000                  		bne.w	loc_13F86
00014740 0C38 0006 D024             		cmpi.b	#6,($FFFFD024).w
00014746 6400 0000                  		bcc.w	locret_1408C
0001474A 0838 0006 D022             		btst	#6,($FFFFD022).w
00014750 6700 0000                  		beq.w	locret_1408C
00014754 5368 0038                  		subq.w	#1,$38(a0)
00014758 6A00 0000                  		bpl.w	loc_13FAC
0001475C 317C 003B 0038             		move.w	#59,$38(a0)
00014762 317C 0001 0036             		move.w	#1,$36(a0)
00014768 4EB9 0000 2C86             		jsr	(RandomNumber).l
0001476E 0240 0001                  		andi.w	#1,d0
00014772 1140 0034                  		move.b	d0,$34(a0)
00014776 3038 FE14                  		move.w	($FFFFFE14).w,d0 ; check air remaining
0001477A 0C40 0019                  		cmpi.w	#$19,d0
0001477E 6700                       		beq.s	Obj0A_WarnSound	; play sound if	air is $19
00014780 0C40 0014                  		cmpi.w	#$14,d0
00014784 6700                       		beq.s	Obj0A_WarnSound
00014786 0C40 000F                  		cmpi.w	#$F,d0
0001478A 6700                       		beq.s	Obj0A_WarnSound
0001478C 0C40 000C                  		cmpi.w	#$C,d0
00014790 6200                       		bhi.s	Obj0A_ReduceAir	; if air is above $C, branch
00014792 6600                       		bne.s	loc_13F02
00014794 303C 0092                  		move.w	#$92,d0
00014798 4EB9 0000 15BA             		jsr	(PlaySound).l	; play countdown music
0001479E                            
0001479E                            loc_13F02:
0001479E 5328 0032                  		subq.b	#1,$32(a0)
000147A2 6A00                       		bpl.s	Obj0A_ReduceAir
000147A4 1168 0033 0032             		move.b	$33(a0),$32(a0)
000147AA 08E8 0007 0036             		bset	#7,$36(a0)
000147B0 6000                       		bra.s	Obj0A_ReduceAir
000147B2                            ; ===========================================================================
000147B2                            
000147B2                            Obj0A_WarnSound:			; XREF: Obj0A_Countdown
000147B2 303C 00C2                  		move.w	#$C2,d0
000147B6 4EB9 0000 15C0             		jsr	(PlaySound_Special).l ;	play "ding-ding" warning sound
000147BC                            
000147BC                            Obj0A_ReduceAir:
000147BC 5378 FE14                  		subq.w	#1,($FFFFFE14).w ; subtract 1 from air remaining
000147C0 6400 0000                  		bcc.w	Obj0A_GoMakeItem ; if air is above 0, branch
000147C4 6100 0000                  		bsr.w	ResumeMusic
000147C8 11FC 0081 F7C8             		move.b	#$81,($FFFFF7C8).w ; lock controls
000147CE 303C 00B2                  		move.w	#$B2,d0
000147D2 4EB9 0000 15C0             		jsr	(PlaySound_Special).l ;	play drowning sound
000147D8 117C 000A 0034             		move.b	#$A,$34(a0)
000147DE 317C 0001 0036             		move.w	#1,$36(a0)
000147E4 317C 0078 002C             		move.w	#$78,$2C(a0)
000147EA 2F08                       		move.l	a0,-(sp)
000147EC 41F8 D000                  		lea	($FFFFD000).w,a0
000147F0 6100 F818                  		bsr.w	Sonic_ResetOnFloor
000147F4 117C 0017 001C             		move.b	#$17,$1C(a0)	; use Sonic's drowning animation
000147FA 08E8 0001 0022             		bset	#1,$22(a0)
00014800 08E8 0007 0002             		bset	#7,2(a0)
00014806 317C 0000 0012             		move.w	#0,$12(a0)
0001480C 317C 0000 0010             		move.w	#0,$10(a0)
00014812 317C 0000 0014             		move.w	#0,$14(a0)
00014818 11FC 0001 F744             		move.b	#1,($FFFFF744).w
0001481E 205F                       		movea.l	(sp)+,a0
00014820 4E75                       		rts	
00014822                            ; ===========================================================================
00014822                            
00014822                            loc_13F86:
00014822 5368 002C                  		subq.w	#1,$2C(a0)
00014826 6600                       		bne.s	loc_13F94
00014828 11FC 0006 D024             		move.b	#6,($FFFFD024).w
0001482E 4E75                       		rts	
00014830                            ; ===========================================================================
00014830                            
00014830                            loc_13F94:
00014830 2F08                       		move.l	a0,-(sp)
00014832 41F8 D000                  		lea	($FFFFD000).w,a0
00014836 4EBA 956A                  		jsr	SpeedToPos
0001483A 0668 0010 0012             		addi.w	#$10,$12(a0)
00014840 205F                       		movea.l	(sp)+,a0
00014842 6000                       		bra.s	loc_13FAC
00014844                            ; ===========================================================================
00014844                            
00014844                            Obj0A_GoMakeItem:			; XREF: Obj0A_ReduceAir
00014844 6000                       		bra.s	Obj0A_MakeItem
00014846                            ; ===========================================================================
00014846                            
00014846                            loc_13FAC:
00014846 4A68 0036                  		tst.w	$36(a0)
0001484A 6700 0000                  		beq.w	locret_1408C
0001484E 5368 003A                  		subq.w	#1,$3A(a0)
00014852 6A00 0000                  		bpl.w	locret_1408C
00014856                            
00014856                            Obj0A_MakeItem:
00014856 4EB9 0000 2C86             		jsr	(RandomNumber).l
0001485C 0240 000F                  		andi.w	#$F,d0
00014860 3140 003A                  		move.w	d0,$3A(a0)
00014864 4EBA 99E8                  		jsr	SingleObjLoad
00014868 6600 0000                  		bne.w	locret_1408C
0001486C 12BC 000A                  		move.b	#$A,0(a1)	; load object
00014870 3378 D008 0008             		move.w	($FFFFD008).w,8(a1) ; match X position to Sonic
00014876 7006                       		moveq	#6,d0
00014878 0838 0000 D022             		btst	#0,($FFFFD022).w
0001487E 6700                       		beq.s	loc_13FF2
00014880 4440                       		neg.w	d0
00014882 137C 0040 0026             		move.b	#$40,$26(a1)
00014888                            
00014888                            loc_13FF2:
00014888 D169 0008                  		add.w	d0,8(a1)
0001488C 3378 D00C 000C             		move.w	($FFFFD00C).w,$C(a1)
00014892 137C 0006 0028             		move.b	#6,$28(a1)
00014898 4A68 002C                  		tst.w	$2C(a0)
0001489C 6700 0000                  		beq.w	loc_1403E
000148A0 0268 0007 003A             		andi.w	#7,$3A(a0)
000148A6 0668 0000 003A             		addi.w	#0,$3A(a0)
000148AC 3038 D00C                  		move.w	($FFFFD00C).w,d0
000148B0 0440 000C                  		subi.w	#$C,d0
000148B4 3340 000C                  		move.w	d0,$C(a1)
000148B8 4EB9 0000 2C86             		jsr	(RandomNumber).l
000148BE 1340 0026                  		move.b	d0,$26(a1)
000148C2 3038 FE04                  		move.w	($FFFFFE04).w,d0
000148C6 0200 0003                  		andi.b	#3,d0
000148CA 6600                       		bne.s	loc_14082
000148CC 137C 000E 0028             		move.b	#$E,$28(a1)
000148D2 6000                       		bra.s	loc_14082
000148D4                            ; ===========================================================================
000148D4                            
000148D4                            loc_1403E:
000148D4 0828 0007 0036             		btst	#7,$36(a0)
000148DA 6700                       		beq.s	loc_14082
000148DC 3438 FE14                  		move.w	($FFFFFE14).w,d2
000148E0 E24A                       		lsr.w	#1,d2
000148E2 4EB9 0000 2C86             		jsr	(RandomNumber).l
000148E8 0240 0003                  		andi.w	#3,d0
000148EC 6600                       		bne.s	loc_1406A
000148EE 08E8 0006 0036             		bset	#6,$36(a0)
000148F4 6600                       		bne.s	loc_14082
000148F6 1342 0028                  		move.b	d2,$28(a1)
000148FA 337C 001C 0038             		move.w	#$1C,$38(a1)
00014900                            
00014900                            loc_1406A:
00014900 4A28 0034                  		tst.b	$34(a0)
00014904 6600                       		bne.s	loc_14082
00014906 08E8 0006 0036             		bset	#6,$36(a0)
0001490C 6600                       		bne.s	loc_14082
0001490E 1342 0028                  		move.b	d2,$28(a1)
00014912 337C 001C 0038             		move.w	#$1C,$38(a1)
00014918                            
00014918                            loc_14082:
00014918 5328 0034                  		subq.b	#1,$34(a0)
0001491C 6A00                       		bpl.s	locret_1408C
0001491E 4268 0036                  		clr.w	$36(a0)
00014922                            
00014922                            locret_1408C:
00014922 4E75                       		rts	
00014924                            
00014924                            ; ---------------------------------------------------------------------------
00014924                            ; Subroutine to	play music for LZ/SBZ3 after a countdown
00014924                            ; ---------------------------------------------------------------------------
00014924                            
00014924                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00014924                            
00014924                            
00014924                            ResumeMusic:				; XREF: Obj64_Wobble; Sonic_Water; Obj0A_ReduceAir
00014924 0C78 000C FE14             		cmpi.w	#$C,($FFFFFE14).w
0001492A                             
0001492A                            ; Third section of the NineKode - Play correct music after the countdown (if you breathe)
0001492A                             
0001492A 6200 0000                  		bhi.w	loc_140AC	; change to bhi.w!
0001492E                             
0001492E 0C38 0000 FE11             		cmpi.b	#$0,($FFFFFE11).w	; is this act 1?
00014934 6600                       		bne.s	Air_GetBgm2	; if not, branch
00014936 43F9 0000 3C32             		lea	(MusicList1).l,a1	; load Music Playlist for Acts 1
0001493C 6000                       		bra.s	Air_PlayMusic	; go to PlayMusic
0001493E                             
0001493E                            Air_GetBgm2:
0001493E 0C38 0001 FE11             		cmpi.b	#$1,($FFFFFE11).w	; is this act 2?
00014944 6600                       		bne.s	Air_GetBgm3	; if not, branch
00014946 43F9 0000 3C3A             		lea	(MusicList2).l,a1	; load Music Playlist for Acts 2
0001494C 6000                       		bra.s	Air_PlayMusic	; go to PlayMusic
0001494E                             
0001494E                            Air_GetBgm3:
0001494E 0C38 0002 FE11             		cmpi.b	#$2,($FFFFFE11).w	; is this act 3?
00014954 6600                       		bne.s	Air_GetBgm4	; if not, branch
00014956 43F9 0000 3C40             		lea	(MusicList3).l,a1	; load Music Playlist for Acts 39
0001495C 6000                       		bra.s	Air_PlayMusic	; go to PlayMusic
0001495E                             
0001495E                            Air_GetBgm4:
0001495E 0C38 0003 FE11             		cmpi.b	#$3,($FFFFFE11).w	; is this act 4?
00014964 6600                       		bne.s	Air_PlayMusic	; if not, branch
00014966 43F9 0000 3C46             		lea	(MusicList4).l,a1	; load Music Playlist for Acts 4
0001496C                             
0001496C                            Air_PlayMusic:
0001496C 1029 0001                  		move.b	1(a1),d0	; load entry $1 from the playlist
00014970                             
00014970                            loc_140A6:
00014970 4EB9 0000 15BA             		jsr	(PlaySound).l
00014976                             
00014976                            ; NineKode ends here
00014976                            
00014976                            loc_140AC:
00014976 31FC 001E FE14             		move.w	#$1E,($FFFFFE14).w
0001497C 4238 D372                  		clr.b	($FFFFD372).w
00014980 4E75                       		rts	
00014982                            ; End of function ResumeMusic
00014982                            
00014982                            ; ===========================================================================
00014982                            Ani_obj0A:
00014982                            	include "_anim\obj0A.asm"
00014982                            ; ---------------------------------------------------------------------------
00014982                            ; Animation script - countdown numbers and bubbles (LZ)
00014982                            ; ---------------------------------------------------------------------------
00014982 0000                       		dc.w byte_140D6-Ani_obj0A
00014984 0000                       		dc.w byte_140E0-Ani_obj0A
00014986 0000                       		dc.w byte_140EA-Ani_obj0A
00014988 0000                       		dc.w byte_140F4-Ani_obj0A
0001498A 0000                       		dc.w byte_140FE-Ani_obj0A
0001498C 0000                       		dc.w byte_14108-Ani_obj0A
0001498E 0000                       		dc.w byte_14112-Ani_obj0A
00014990 0000                       		dc.w byte_14118-Ani_obj0A
00014992 0000                       		dc.w byte_14120-Ani_obj0A
00014994 0000                       		dc.w byte_14128-Ani_obj0A
00014996 0000                       		dc.w byte_14130-Ani_obj0A
00014998 0000                       		dc.w byte_14138-Ani_obj0A
0001499A 0000                       		dc.w byte_14140-Ani_obj0A
0001499C 0000                       		dc.w byte_14148-Ani_obj0A
0001499E 0000                       		dc.w byte_1414A-Ani_obj0A
000149A0 0500 0102 0304 090D FC00   byte_140D6:	dc.b 5,	0, 1, 2, 3, 4, 9, $D, $FC, 0
000149AA 0500 0102 0304 0C12 FC00   byte_140E0:	dc.b 5,	0, 1, 2, 3, 4, $C, $12,	$FC, 0
000149B4 0500 0102 0304 0C11 FC00   byte_140EA:	dc.b 5,	0, 1, 2, 3, 4, $C, $11,	$FC, 0
000149BE 0500 0102 0304 0B10 FC00   byte_140F4:	dc.b 5,	0, 1, 2, 3, 4, $B, $10,	$FC, 0
000149C8 0500 0102 0304 090F FC00   byte_140FE:	dc.b 5,	0, 1, 2, 3, 4, 9, $F, $FC, 0
000149D2 0500 0102 0304 0A0E FC00   byte_14108:	dc.b 5,	0, 1, 2, 3, 4, $A, $E, $FC, 0
000149DC 0E00 0102 FC00             byte_14112:	dc.b $E, 0, 1, 2, $FC, 0
000149E2 0716 0D16 0D16 0DFC        byte_14118:	dc.b 7,	$16, $D, $16, $D, $16, $D, $FC
000149EA 0716 1216 1216 12FC        byte_14120:	dc.b 7,	$16, $12, $16, $12, $16, $12, $FC
000149F2 0716 1116 1116 11FC        byte_14128:	dc.b 7,	$16, $11, $16, $11, $16, $11, $FC
000149FA 0716 1016 1016 10FC        byte_14130:	dc.b 7,	$16, $10, $16, $10, $16, $10, $FC
00014A02 0716 0F16 0F16 0FFC        byte_14138:	dc.b 7,	$16, $F, $16, $F, $16, $F, $FC
00014A0A 0716 0E16 0E16 0EFC        byte_14140:	dc.b 7,	$16, $E, $16, $E, $16, $E, $FC
00014A12 0EFC                       byte_14148:	dc.b $E, $FC
00014A14 0E01 0203 04FC             byte_1414A:	dc.b $E, 1, 2, 3, 4, $FC
00014A1A                            		even
00014A1A                            		even
00014A1A                            
00014A1A                            ; ---------------------------------------------------------------------------
00014A1A                            ; Sprite mappings - drowning countdown numbers (LZ)
00014A1A                            ; ---------------------------------------------------------------------------
00014A1A                            Map_obj0A:
00014A1A                            	include "_maps\obj0A.asm"
00014A1A                            ; ---------------------------------------------------------------------------
00014A1A                            ; Sprite mappings - drowning countdown numbers (LZ)
00014A1A                            ; ---------------------------------------------------------------------------
00014A1A 0000                       		dc.w byte_14152-Map_obj0A
00014A1C 01                         byte_14152:	dc.b 1
00014A1D E80E 0000 F2               		dc.b $E8, $E, 0, 0, $F2
00014A22                            		even
00014A22                            		even
00014A22                            
00014A22                            ; ===========================================================================
00014A22                            ; ---------------------------------------------------------------------------
00014A22                            ; Object 38 - shield and invincibility stars
00014A22                            ; ---------------------------------------------------------------------------
00014A22                            
00014A22                            Obj38:					; XREF: Obj_Index
00014A22 7000                       		moveq	#0,d0
00014A24 1028 0024                  		move.b	$24(a0),d0
00014A28 323B 0000                  		move.w	Obj38_Index(pc,d0.w),d1
00014A2C 4EFB 1000                  		jmp	Obj38_Index(pc,d1.w)
00014A30                            ; ===========================================================================
00014A30 0000                       Obj38_Index:	dc.w Obj38_Main-Obj38_Index
00014A32 0000                       		dc.w Obj38_Shield-Obj38_Index
00014A34 0000                       		dc.w Obj38_Stars-Obj38_Index
00014A36                            ; ===========================================================================
00014A36                            
00014A36                            Obj38_Main:				; XREF: Obj38_Index
00014A36 5428 0024                  		addq.b	#2,$24(a0)
00014A3A 217C 0000 0000 0004        		move.l	#Map_obj38,4(a0)
00014A42 117C 0004 0001             		move.b	#4,1(a0)
00014A48 117C 0001 0018             		move.b	#1,$18(a0)
00014A4E 117C 0010 0019             		move.b	#$10,$19(a0)
00014A54 4A28 001C                  		tst.b	$1C(a0)		; is object a shield?
00014A58 6600                       		bne.s	Obj38_DoStars	; if not, branch
00014A5A 317C 0541 0002             		move.w	#$541,2(a0)	; shield specific code
00014A60 4E75                       		rts	
00014A62                            ; ===========================================================================
00014A62                            
00014A62                            Obj38_DoStars:
00014A62 5428 0024                  		addq.b	#2,$24(a0)	; stars	specific code
00014A66 317C 055C 0002             		move.w	#$55C,2(a0)
00014A6C 4E75                       		rts	
00014A6E                            ; ===========================================================================
00014A6E                            
00014A6E                            Obj38_Shield:				; XREF: Obj38_Index
00014A6E 4A38 FE2D                  		tst.b	($FFFFFE2D).w	; does Sonic have invincibility?
00014A72 6600                       		bne.s	Obj38_RmvShield	; if yes, branch
00014A74 4A38 FE2C                  		tst.b	($FFFFFE2C).w	; does Sonic have shield?
00014A78 6700                       		beq.s	Obj38_Delete	; if not, branch
00014A7A 3178 D008 0008             		move.w	($FFFFD008).w,8(a0)
00014A80 3178 D00C 000C             		move.w	($FFFFD00C).w,$C(a0)
00014A86 1178 D022 0022             		move.b	($FFFFD022).w,$22(a0)
00014A8C 43F9 0000 0000             		lea	(Ani_obj38).l,a1
00014A92 4EB9 0000 AE88             		jsr	AnimateSprite
00014A98 4EFA 932E                  		jmp	DisplaySprite
00014A9C                            ; ===========================================================================
00014A9C                            
00014A9C                            Obj38_RmvShield:
00014A9C 4E75                       		rts	
00014A9E                            ; ===========================================================================
00014A9E                            
00014A9E                            Obj38_Delete:
00014A9E 4EFA 9364                  		jmp	DeleteObject
00014AA2                            ; ===========================================================================
00014AA2                            
00014AA2                            Obj38_Stars:				; XREF: Obj38_Index
00014AA2 4A38 FE2D                  		tst.b	($FFFFFE2D).w	; does Sonic have invincibility?
00014AA6 6700                       		beq.s	Obj38_Delete2	; if not, branch
00014AA8 3038 F7A8                  		move.w	($FFFFF7A8).w,d0
00014AAC 1228 001C                  		move.b	$1C(a0),d1
00014AB0 5301                       		subq.b	#1,d1
00014AB2 6000                       		bra.s	Obj38_StarTrail
00014AB4                            ; ===========================================================================
00014AB4 E909                       		lsl.b	#4,d1
00014AB6 5801                       		addq.b	#4,d1
00014AB8 9001                       		sub.b	d1,d0
00014ABA 1228 0030                  		move.b	$30(a0),d1
00014ABE 9001                       		sub.b	d1,d0
00014AC0 5801                       		addq.b	#4,d1
00014AC2 0201 000F                  		andi.b	#$F,d1
00014AC6 1141 0030                  		move.b	d1,$30(a0)
00014ACA 6000                       		bra.s	Obj38_StarTrail2a
00014ACC                            ; ===========================================================================
00014ACC                            
00014ACC                            Obj38_StarTrail:			; XREF: Obj38_Stars
00014ACC E709                       		lsl.b	#3,d1
00014ACE 1401                       		move.b	d1,d2
00014AD0 D201                       		add.b	d1,d1
00014AD2 D202                       		add.b	d2,d1
00014AD4 5801                       		addq.b	#4,d1
00014AD6 9001                       		sub.b	d1,d0
00014AD8 1228 0030                  		move.b	$30(a0),d1
00014ADC 9001                       		sub.b	d1,d0
00014ADE 5801                       		addq.b	#4,d1
00014AE0 0C01 0018                  		cmpi.b	#$18,d1
00014AE4 6500                       		bcs.s	Obj38_StarTrail2
00014AE6 7200                       		moveq	#0,d1
00014AE8                            
00014AE8                            Obj38_StarTrail2:
00014AE8 1141 0030                  		move.b	d1,$30(a0)
00014AEC                            
00014AEC                            Obj38_StarTrail2a:
00014AEC 43F8 CB00                  		lea	($FFFFCB00).w,a1
00014AF0 43F1 0000                  		lea	(a1,d0.w),a1
00014AF4 3159 0008                  		move.w	(a1)+,8(a0)
00014AF8 3159 000C                  		move.w	(a1)+,$C(a0)
00014AFC 1178 D022 0022             		move.b	($FFFFD022).w,$22(a0)
00014B02 43F9 0000 0000             		lea	(Ani_obj38).l,a1
00014B08 4EB9 0000 AE88             		jsr	AnimateSprite
00014B0E 4EFA 92B8                  		jmp	DisplaySprite
00014B12                            ; ===========================================================================
00014B12                            
00014B12                            Obj38_Delete2:				; XREF: Obj38_Stars
00014B12 4EFA 92F0                  		jmp	DeleteObject
00014B16                            ; ===========================================================================
00014B16                            ; ---------------------------------------------------------------------------
00014B16                            ; Object 4A - special stage entry from beta
00014B16                            ; ---------------------------------------------------------------------------
00014B16                            
00014B16                            Obj4A:					; XREF: Obj_Index
00014B16 7000                       		moveq	#0,d0
00014B18 1028 0024                  		move.b	$24(a0),d0
00014B1C 323B 0000                  		move.w	Obj4A_Index(pc,d0.w),d1
00014B20 4EFB 1000                  		jmp	Obj4A_Index(pc,d1.w)
00014B24                            ; ===========================================================================
00014B24 0000                       Obj4A_Index:	dc.w Obj4A_Main-Obj4A_Index
00014B26 0000                       		dc.w Obj4A_RmvSonic-Obj4A_Index
00014B28 0000                       		dc.w Obj4A_LoadSonic-Obj4A_Index
00014B2A                            ; ===========================================================================
00014B2A                            
00014B2A                            Obj4A_Main:				; XREF: Obj4A_Index
00014B2A 4AB8 F680                  		tst.l	($FFFFF680).w	; are pattern load cues	empty?
00014B2E 6700                       		beq.s	Obj4A_Main2	; if yes, branch
00014B30 4E75                       		rts	
00014B32                            ; ===========================================================================
00014B32                            
00014B32                            Obj4A_Main2:
00014B32 5428 0024                  		addq.b	#2,$24(a0)
00014B36 217C 0000 0000 0004        		move.l	#Map_obj4A,4(a0)
00014B3E 117C 0004 0001             		move.b	#4,1(a0)
00014B44 117C 0001 0018             		move.b	#1,$18(a0)
00014B4A 117C 0038 0019             		move.b	#$38,$19(a0)
00014B50 317C 0541 0002             		move.w	#$541,2(a0)
00014B56 317C 0078 0030             		move.w	#120,$30(a0)	; set time for Sonic's disappearance to 2 seconds
00014B5C                            
00014B5C                            Obj4A_RmvSonic:				; XREF: Obj4A_Index
00014B5C 3178 D008 0008             		move.w	($FFFFD008).w,8(a0)
00014B62 3178 D00C 000C             		move.w	($FFFFD00C).w,$C(a0)
00014B68 1178 D022 0022             		move.b	($FFFFD022).w,$22(a0)
00014B6E 43F9 0000 0000             		lea	(Ani_obj4A).l,a1
00014B74 4EB9 0000 AE88             		jsr	AnimateSprite
00014B7A 0C28 0002 001A             		cmpi.b	#2,$1A(a0)
00014B80 6600                       		bne.s	Obj4A_Display
00014B82 4A38 D000                  		tst.b	($FFFFD000).w
00014B86 6700                       		beq.s	Obj4A_Display
00014B88 11FC 0000 D000             		move.b	#0,($FFFFD000).w ; remove Sonic
00014B8E 303C 00A8                  		move.w	#$A8,d0
00014B92 4EB9 0000 15C0             		jsr	(PlaySound_Special).l ;	play Special Stage "GOAL" sound
00014B98                            
00014B98                            Obj4A_Display:
00014B98 4EFA 922E                  		jmp	DisplaySprite
00014B9C                            ; ===========================================================================
00014B9C                            
00014B9C                            Obj4A_LoadSonic:			; XREF: Obj4A_Index
00014B9C 5368 0030                  		subq.w	#1,$30(a0)	; subtract 1 from time
00014BA0 6600                       		bne.s	Obj4A_Wait	; if time remains, branch
00014BA2 11FC 0001 D000             		move.b	#1,($FFFFD000).w ; load	Sonic object
00014BA8 4EFA 925A                  		jmp	DeleteObject
00014BAC                            ; ===========================================================================
00014BAC                            
00014BAC                            Obj4A_Wait:
00014BAC 4E75                       		rts	
00014BAE                            ; ===========================================================================
00014BAE                            ; ---------------------------------------------------------------------------
00014BAE                            ; Object 08 - water splash (LZ)
00014BAE                            ; ---------------------------------------------------------------------------
00014BAE                            
00014BAE                            Obj08:					; XREF: Obj_Index
00014BAE 7000                       		moveq	#0,d0
00014BB0 1028 0024                  		move.b	$24(a0),d0
00014BB4 323B 0000                  		move.w	Obj08_Index(pc,d0.w),d1
00014BB8 4EFB 1000                  		jmp	Obj08_Index(pc,d1.w)
00014BBC                            ; ===========================================================================
00014BBC 0000                       Obj08_Index:	dc.w Obj08_Main-Obj08_Index
00014BBE 0000                       		dc.w Obj08_Display-Obj08_Index
00014BC0 0000                       		dc.w Obj08_Delete-Obj08_Index
00014BC2                            ; ===========================================================================
00014BC2                            
00014BC2                            Obj08_Main:				; XREF: Obj08_Index
00014BC2 5428 0024                  		addq.b	#2,$24(a0)
00014BC6 217C 0000 0000 0004        		move.l	#Map_obj08,4(a0)
00014BCE 0028 0004 0001             		ori.b	#4,1(a0)
00014BD4 117C 0001 0018             		move.b	#1,$18(a0)
00014BDA 117C 0010 0019             		move.b	#$10,$19(a0)
00014BE0 317C 4259 0002             		move.w	#$4259,2(a0)
00014BE6 3178 D008 0008             		move.w	($FFFFD008).w,8(a0) ; copy x-position from Sonic
00014BEC                            
00014BEC                            Obj08_Display:				; XREF: Obj08_Index
00014BEC 3178 F646 000C             		move.w	($FFFFF646).w,$C(a0) ; copy y-position from water height
00014BF2 43F9 0000 0000             		lea	(Ani_obj08).l,a1
00014BF8 4EB9 0000 AE88             		jsr	AnimateSprite
00014BFE 4EFA 91C8                  		jmp	DisplaySprite
00014C02                            ; ===========================================================================
00014C02                            
00014C02                            Obj08_Delete:				; XREF: Obj08_Index
00014C02 4EFA 9200                  		jmp	DeleteObject	; delete when animation	is complete
00014C06                            ; ===========================================================================
00014C06                            Ani_obj38:
00014C06                            	include "_anim\obj38.asm"
00014C06                            ; ---------------------------------------------------------------------------
00014C06                            ; Animation script - shield and invincibility stars
00014C06                            ; ---------------------------------------------------------------------------
00014C06 0000                       		dc.w byte_14356-Ani_obj38
00014C08 0000                       		dc.w byte_1435E-Ani_obj38
00014C0A 0000                       		dc.w byte_14364-Ani_obj38
00014C0C 0000                       		dc.w byte_1437E-Ani_obj38
00014C0E 0000                       		dc.w byte_14398-Ani_obj38
00014C10 0101 0002 0003 00FF        byte_14356:	dc.b 1,	1, 0, 2, 0, 3, 0, $FF
00014C18 0504 0506 07FF             byte_1435E:	dc.b 5,	4, 5, 6, 7, $FF
00014C1E 0004 0400 0404 0005 0500+  byte_14364:	dc.b 0,	4, 4, 0, 4, 4, 0, 5, 5,	0, 5, 5, 0, 6, 6, 0, 6
00014C2F 0600 0707 0007 0700 FF     		dc.b 6,	0, 7, 7, 0, 7, 7, 0, $FF
00014C38 0004 0400 0400 0005 0500+  byte_1437E:	dc.b 0,	4, 4, 0, 4, 0, 0, 5, 5,	0, 5, 0, 0, 6, 6, 0, 6
00014C49 0000 0707 0007 0000 FF     		dc.b 0,	0, 7, 7, 0, 7, 0, 0, $FF
00014C52 0004 0000 0400 0005 0000+  byte_14398:	dc.b 0,	4, 0, 0, 4, 0, 0, 5, 0,	0, 5, 0, 0, 6, 0, 0, 6
00014C63 0000 0700 0007 0000 FF     		dc.b 0,	0, 7, 0, 0, 7, 0, 0, $FF
00014C6C                            		even
00014C6C                            		even
00014C6C                            
00014C6C                            ; ---------------------------------------------------------------------------
00014C6C                            ; Sprite mappings - shield and invincibility stars
00014C6C                            ; ---------------------------------------------------------------------------
00014C6C                            Map_obj38:
00014C6C                            	include "_maps\obj38.asm"
00014C6C                            ; ---------------------------------------------------------------------------
00014C6C                            ; Sprite mappings - shield and invincibility stars
00014C6C                            ; ---------------------------------------------------------------------------
00014C6C 0000 0000                  		dc.w byte_143CD-Map_obj38, byte_143C2-Map_obj38
00014C70 0000 0000                  		dc.w byte_143D7-Map_obj38, byte_143EC-Map_obj38
00014C74 0000 0000                  		dc.w byte_14401-Map_obj38, byte_14416-Map_obj38
00014C78 0000 0000                  		dc.w byte_1442B-Map_obj38, byte_14440-Map_obj38
00014C7C 04                         byte_143C2:	dc.b 4
00014C7D E80A 0000 E8               		dc.b $E8, $A, 0, 0, $E8
00014C82 E80A 0009 00               		dc.b $E8, $A, 0, 9, 0
00014C87 000A 1000 E8               byte_143CD:	dc.b 0,	$A, $10, 0, $E8
00014C8C 000A 1009 00               		dc.b 0,	$A, $10, 9, 0
00014C91 04                         byte_143D7:	dc.b 4
00014C92 E80A 0812 E9               		dc.b $E8, $A, 8, $12, $E9
00014C97 E80A 0012 00               		dc.b $E8, $A, 0, $12, 0
00014C9C 000A 1812 E9               		dc.b 0,	$A, $18, $12, $E9
00014CA1 000A 1012 00               		dc.b 0,	$A, $10, $12, 0
00014CA6 04                         byte_143EC:	dc.b 4
00014CA7 E80A 0809 E8               		dc.b $E8, $A, 8, 9, $E8
00014CAC E80A 0800 00               		dc.b $E8, $A, 8, 0, 0
00014CB1 000A 1809 E8               		dc.b 0,	$A, $18, 9, $E8
00014CB6 000A 1800 00               		dc.b 0,	$A, $18, 0, 0
00014CBB 04                         byte_14401:	dc.b 4
00014CBC E80A 0000 E8               		dc.b $E8, $A, 0, 0, $E8
00014CC1 E80A 0009 00               		dc.b $E8, $A, 0, 9, 0
00014CC6 000A 1809 E8               		dc.b 0,	$A, $18, 9, $E8
00014CCB 000A 1800 00               		dc.b 0,	$A, $18, 0, 0
00014CD0 04                         byte_14416:	dc.b 4
00014CD1 E80A 0809 E8               		dc.b $E8, $A, 8, 9, $E8
00014CD6 E80A 0800 00               		dc.b $E8, $A, 8, 0, 0
00014CDB 000A 1000 E8               		dc.b 0,	$A, $10, 0, $E8
00014CE0 000A 1009 00               		dc.b 0,	$A, $10, 9, 0
00014CE5 04                         byte_1442B:	dc.b 4
00014CE6 E80A 0012 E8               		dc.b $E8, $A, 0, $12, $E8
00014CEB E80A 001B 00               		dc.b $E8, $A, 0, $1B, 0
00014CF0 000A 181B E8               		dc.b 0,	$A, $18, $1B, $E8
00014CF5 000A 1812 00               		dc.b 0,	$A, $18, $12, 0
00014CFA 04                         byte_14440:	dc.b 4
00014CFB E80A 081B E8               		dc.b $E8, $A, 8, $1B, $E8
00014D00 E80A 0812 00               		dc.b $E8, $A, 8, $12, 0
00014D05 000A 1012 E8               		dc.b 0,	$A, $10, $12, $E8
00014D0A 000A 101B 00               		dc.b 0,	$A, $10, $1B, 0
00014D10 00                         		even
00014D10 00                         		even
00014D10                            
00014D10                            Ani_obj4A:
00014D10                            	include "_anim\obj4A.asm"
00014D10                            ; ---------------------------------------------------------------------------
00014D10                            ; Animation script - special stage entry effect from beta
00014D10                            ; ---------------------------------------------------------------------------
00014D10 0000                       		dc.w byte_14458-Ani_obj4A
00014D12 0500 0100 0100 0701 0702+  byte_14458:	dc.b 5,	0, 1, 0, 1, 0, 7, 1, 7,	2, 7, 3, 7, 4, 7, 5, 7, 6, 7, $FC
00014D26                            		even
00014D26                            		even
00014D26                            
00014D26                            ; ---------------------------------------------------------------------------
00014D26                            ; Sprite mappings - special stage entry	from beta
00014D26                            ; ---------------------------------------------------------------------------
00014D26                            Map_obj4A:
00014D26                            	include "_maps\obj4A.asm"
00014D26                            ; ---------------------------------------------------------------------------
00014D26                            ; Sprite mappings - special stage entry	from beta
00014D26                            ; ---------------------------------------------------------------------------
00014D26 0000 0000                  		dc.w byte_1447C-Map_obj4A, byte_1448C-Map_obj4A
00014D2A 0000 0000                  		dc.w byte_1449C-Map_obj4A, byte_144B6-Map_obj4A
00014D2E 0000 0000                  		dc.w byte_144E4-Map_obj4A, byte_1453F-Map_obj4A
00014D32 0000 0000                  		dc.w byte_14595-Map_obj4A, byte_145BF-Map_obj4A
00014D36 03                         byte_1447C:	dc.b 3
00014D37 F800 0000 08               		dc.b $F8, 0, 0,	0, 8
00014D3C 0004 0001 00               		dc.b 0,	4, 0, 1, 0
00014D41 0800 1000 08               		dc.b 8,	0, $10,	0, 8
00014D46 03                         byte_1448C:	dc.b 3
00014D47 F00D 0003 F0               		dc.b $F0, $D, 0, 3, $F0
00014D4C 000C 000B F0               		dc.b 0,	$C, 0, $B, $F0
00014D51 080D 1003 F0               		dc.b 8,	$D, $10, 3, $F0
00014D56 05                         byte_1449C:	dc.b 5
00014D57 E40E 000F F4               		dc.b $E4, $E, 0, $F, $F4
00014D5C EC02 001B EC               		dc.b $EC, 2, 0,	$1B, $EC
00014D61 FC0C 001E F4               		dc.b $FC, $C, 0, $1E, $F4
00014D66 040E 100F F4               		dc.b 4,	$E, $10, $F, $F4
00014D6B 0401 101B EC               		dc.b 4,	1, $10,	$1B, $EC
00014D70 09                         byte_144B6:	dc.b 9
00014D71 F008 0022 F8               		dc.b $F0, 8, 0,	$22, $F8
00014D76 F80E 0025 F0               		dc.b $F8, $E, 0, $25, $F0
00014D7B 1008 0031 F0               		dc.b $10, 8, 0,	$31, $F0
00014D80 0005 0034 10               		dc.b 0,	5, 0, $34, $10
00014D85 F800 0825 10               		dc.b $F8, 0, 8,	$25, $10
00014D8A F000 1836 18               		dc.b $F0, 0, $18, $36, $18
00014D8F F800 1825 20               		dc.b $F8, 0, $18, $25, $20
00014D94 0000 0825 28               		dc.b 0,	0, 8, $25, $28
00014D99 F800 0025 30               		dc.b $F8, 0, 0,	$25, $30
00014D9E 12                         byte_144E4:	dc.b $12
00014D9F 0000 1825 F0               		dc.b 0,	0, $18,	$25, $F0
00014DA4 F804 0038 F8               		dc.b $F8, 4, 0,	$38, $F8
00014DA9 F000 0026 08               		dc.b $F0, 0, 0,	$26, 8
00014DAE 0000 0025 00               		dc.b 0,	0, 0, $25, 0
00014DB3 0800 1825 F8               		dc.b 8,	0, $18,	$25, $F8
00014DB8 1000 1026 00               		dc.b $10, 0, $10, $26, 0
00014DBD 0800 1038 08               		dc.b 8,	0, $10,	$38, 8
00014DC2 F800 0029 10               		dc.b $F8, 0, 0,	$29, $10
00014DC7 0000 0026 10               		dc.b 0,	0, 0, $26, $10
00014DCC 0000 002D 18               		dc.b 0,	0, 0, $2D, $18
00014DD1 0800 0826 18               		dc.b 8,	0, 8, $26, $18
00014DD6 0800 0029 20               		dc.b 8,	0, 0, $29, $20
00014DDB F800 0026 20               		dc.b $F8, 0, 0,	$26, $20
00014DE0 F800 002D 28               		dc.b $F8, 0, 0,	$2D, $28
00014DE5 0000 003A 28               		dc.b 0,	0, 0, $3A, $28
00014DEA F800 1826 30               		dc.b $F8, 0, $18, $26, $30
00014DEF 0000 1025 38               		dc.b 0,	0, $10,	$25, $38
00014DF4 F800 1025 40               		dc.b $F8, 0, $10, $25, $40
00014DF9 11                         byte_1453F:	dc.b $11
00014DFA F800 0825 00               		dc.b $F8, 0, 8,	$25, 0
00014DFF F000 0038 10               		dc.b $F0, 0, 0,	$38, $10
00014E04 1000 0825 00               		dc.b $10, 0, 8,	$25, 0
00014E09 0000 1825 10               		dc.b 0,	0, $18,	$25, $10
00014E0E 0800 1025 18               		dc.b 8,	0, $10,	$25, $18
00014E13 F800 1825 20               		dc.b $F8, 0, $18, $25, $20
00014E18 0000 1026 28               		dc.b 0,	0, $10,	$26, $28
00014E1D F800 1025 30               		dc.b $F8, 0, $10, $25, $30
00014E22 0000 0025 30               		dc.b 0,	0, 0, $25, $30
00014E27 0800 0825 30               		dc.b 8,	0, 8, $25, $30
00014E2C 0000 0826 38               		dc.b 0,	0, 8, $26, $38
00014E31 0800 0029 38               		dc.b 8,	0, 0, $29, $38
00014E36 F800 0826 40               		dc.b $F8, 0, 8,	$26, $40
00014E3B 0000 002D 40               		dc.b 0,	0, 0, $2D, $40
00014E40 F800 0825 48               		dc.b $F8, 0, 8,	$25, $48
00014E45 0000 0025 48               		dc.b 0,	0, 0, $25, $48
00014E4A 0000 1025 50               		dc.b 0,	0, $10,	$25, $50
00014E4F 09                         byte_14595:	dc.b 9
00014E50 FC00 0826 30               		dc.b $FC, 0, 8,	$26, $30
00014E55 0400 0825 28               		dc.b 4,	0, 8, $25, $28
00014E5A 0400 1027 38               		dc.b 4,	0, $10,	$27, $38
00014E5F 0400 0826 40               		dc.b 4,	0, 8, $26, $40
00014E64 FC00 1025 40               		dc.b $FC, 0, $10, $25, $40
00014E69 FC00 1026 48               		dc.b $FC, 0, $10, $26, $48
00014E6E 0C00 0827 48               		dc.b $C, 0, 8, $27, $48
00014E73 0400 1826 50               		dc.b 4,	0, $18,	$26, $50
00014E78 04                         		dc.b 4
00014E79 0008 2758 00               byte_145BF:	dc.b 0,	8, $27,	$58, 0
00014E7E                            		even
00014E7E                            		even
00014E7E                            
00014E7E                            Ani_obj08:
00014E7E                            	include "_anim\obj08.asm"
00014E7E                            ; ---------------------------------------------------------------------------
00014E7E                            ; Animation script - water splash (LZ)
00014E7E                            ; ---------------------------------------------------------------------------
00014E7E 0000                       		dc.w byte_145C6-Ani_obj08
00014E80 0400 0102 FC00             byte_145C6:	dc.b 4,	0, 1, 2, $FC, 0
00014E86                            		even
00014E86                            		even
00014E86                            
00014E86                            ; ---------------------------------------------------------------------------
00014E86                            ; Sprite mappings - water splash (LZ)
00014E86                            ; ---------------------------------------------------------------------------
00014E86                            Map_obj08:
00014E86                            	include "_maps\obj08.asm"
00014E86                            ; ---------------------------------------------------------------------------
00014E86                            ; Sprite mappings - water splash (LZ)
00014E86                            ; ---------------------------------------------------------------------------
00014E86 0000                       		dc.w byte_145D2-Map_obj08
00014E88 0000                       		dc.w byte_145DD-Map_obj08
00014E8A 0000                       		dc.w byte_145E8-Map_obj08
00014E8C 02                         byte_145D2:	dc.b 2
00014E8D F204 006D F8               		dc.b $F2, 4, 0,	$6D, $F8
00014E92 FA0C 006F F0               		dc.b $FA, $C, 0, $6F, $F0
00014E97 02                         byte_145DD:	dc.b 2
00014E98 E200 0073 F8               		dc.b $E2, 0, 0,	$73, $F8
00014E9D EA0E 0074 F0               		dc.b $EA, $E, 0, $74, $F0
00014EA2 01                         byte_145E8:	dc.b 1
00014EA3 E20F 0080 F0               		dc.b $E2, $F, 0, $80, $F0
00014EA8                            		even
00014EA8                            		even
00014EA8                            
00014EA8                            ; ---------------------------------------------------------------------------
00014EA8                            ; Subroutine to	change Sonic's angle & position as he walks along the floor
00014EA8                            ; ---------------------------------------------------------------------------
00014EA8                            
00014EA8                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00014EA8                            
00014EA8                            
00014EA8                            Sonic_AnglePos:				; XREF: Obj01_MdNormal; Obj01_MdRoll
00014EA8 0828 0003 0022             		btst	#3,$22(a0)
00014EAE 6700                       		beq.s	loc_14602
00014EB0 7000                       		moveq	#0,d0
00014EB2 11C0 F768                  		move.b	d0,($FFFFF768).w
00014EB6 11C0 F76A                  		move.b	d0,($FFFFF76A).w
00014EBA 4E75                       		rts	
00014EBC                            ; ===========================================================================
00014EBC                            
00014EBC                            loc_14602:
00014EBC 7003                       		moveq	#3,d0
00014EBE 11C0 F768                  		move.b	d0,($FFFFF768).w
00014EC2 11C0 F76A                  		move.b	d0,($FFFFF76A).w
00014EC6 1028 0026                  		move.b	$26(a0),d0
00014ECA 0600 0020                  		addi.b	#$20,d0
00014ECE 6A00                       		bpl.s	loc_14624
00014ED0 1028 0026                  		move.b	$26(a0),d0
00014ED4 6A00                       		bpl.s	loc_1461E
00014ED6 5300                       		subq.b	#1,d0
00014ED8                            
00014ED8                            loc_1461E:
00014ED8 0600 0020                  		addi.b	#$20,d0
00014EDC 6000                       		bra.s	loc_14630
00014EDE                            ; ===========================================================================
00014EDE                            
00014EDE                            loc_14624:
00014EDE 1028 0026                  		move.b	$26(a0),d0
00014EE2 6A00                       		bpl.s	loc_1462C
00014EE4 5200                       		addq.b	#1,d0
00014EE6                            
00014EE6                            loc_1462C:
00014EE6 0600 001F                  		addi.b	#$1F,d0
00014EEA                            
00014EEA                            loc_14630:
00014EEA 0200 00C0                  		andi.b	#$C0,d0
00014EEE 0C00 0040                  		cmpi.b	#$40,d0
00014EF2 6700 0000                  		beq.w	Sonic_WalkVertL
00014EF6 0C00 0080                  		cmpi.b	#$80,d0
00014EFA 6700 0000                  		beq.w	Sonic_WalkCeiling
00014EFE 0C00 00C0                  		cmpi.b	#$C0,d0
00014F02 6700 0000                  		beq.w	Sonic_WalkVertR
00014F06 3428 000C                  		move.w	$C(a0),d2
00014F0A 3628 0008                  		move.w	8(a0),d3
00014F0E 7000                       		moveq	#0,d0
00014F10 1028 0016                  		move.b	$16(a0),d0
00014F14 4880                       		ext.w	d0
00014F16 D440                       		add.w	d0,d2
00014F18 1028 0017                  		move.b	$17(a0),d0
00014F1C 4880                       		ext.w	d0
00014F1E D640                       		add.w	d0,d3
00014F20 49F8 F768                  		lea	($FFFFF768).w,a4
00014F24 367C 0010                  		movea.w	#$10,a3
00014F28 3C3C 0000                  		move.w	#0,d6
00014F2C 7A0D                       		moveq	#$D,d5
00014F2E 6100 0000                  		bsr.w	FindFloor
00014F32 3F01                       		move.w	d1,-(sp)
00014F34 3428 000C                  		move.w	$C(a0),d2
00014F38 3628 0008                  		move.w	8(a0),d3
00014F3C 7000                       		moveq	#0,d0
00014F3E 1028 0016                  		move.b	$16(a0),d0
00014F42 4880                       		ext.w	d0
00014F44 D440                       		add.w	d0,d2
00014F46 1028 0017                  		move.b	$17(a0),d0
00014F4A 4880                       		ext.w	d0
00014F4C 4440                       		neg.w	d0
00014F4E D640                       		add.w	d0,d3
00014F50 49F8 F76A                  		lea	($FFFFF76A).w,a4
00014F54 367C 0010                  		movea.w	#$10,a3
00014F58 3C3C 0000                  		move.w	#0,d6
00014F5C 7A0D                       		moveq	#$D,d5
00014F5E 6100 0000                  		bsr.w	FindFloor
00014F62 301F                       		move.w	(sp)+,d0
00014F64 6100 0000                  		bsr.w	Sonic_Angle
00014F68 4A41                       		tst.w	d1
00014F6A 6700                       		beq.s	locret_146BE
00014F6C 6A00                       		bpl.s	loc_146C0
00014F6E 0C41 FFF2                  		cmpi.w	#-$E,d1
00014F72 6D00                       		blt.s	locret_146E6
00014F74 D368 000C                  		add.w	d1,$C(a0)
00014F78                            
00014F78                            locret_146BE:
00014F78 4E75                       		rts	
00014F7A                            ; ===========================================================================
00014F7A                            
00014F7A                            loc_146C0:
00014F7A 0C41 000E                  		cmpi.w	#$E,d1
00014F7E 6E00                       		bgt.s	loc_146CC
00014F80                            
00014F80                            loc_146C6:
00014F80 D368 000C                  		add.w	d1,$C(a0)
00014F84 4E75                       		rts	
00014F86                            ; ===========================================================================
00014F86                            
00014F86                            loc_146CC:
00014F86 4A28 0038                  		tst.b	$38(a0)
00014F8A 66F4                       		bne.s	loc_146C6
00014F8C 08E8 0001 0022             		bset	#1,$22(a0)
00014F92 08A8 0005 0022             		bclr	#5,$22(a0)
00014F98 117C 0001 001D             		move.b	#1,$1D(a0)
00014F9E 4E75                       		rts	
00014FA0                            ; ===========================================================================
00014FA0                            
00014FA0                            locret_146E6:
00014FA0 4E75                       		rts	
00014FA2                            ; End of function Sonic_AnglePos
00014FA2                            
00014FA2                            ; ===========================================================================
00014FA2 2428 0008                  		move.l	8(a0),d2
00014FA6 3028 0010                  		move.w	$10(a0),d0
00014FAA 48C0                       		ext.l	d0
00014FAC E180                       		asl.l	#8,d0
00014FAE 9480                       		sub.l	d0,d2
00014FB0 2142 0008                  		move.l	d2,8(a0)
00014FB4 303C 0038                  		move.w	#$38,d0
00014FB8 48C0                       		ext.l	d0
00014FBA E180                       		asl.l	#8,d0
00014FBC 9680                       		sub.l	d0,d3
00014FBE 2143 000C                  		move.l	d3,$C(a0)
00014FC2 4E75                       		rts	
00014FC4                            ; ===========================================================================
00014FC4                            
00014FC4                            locret_1470A:
00014FC4 4E75                       		rts	
00014FC6                            ; ===========================================================================
00014FC6 2628 000C                  		move.l	$C(a0),d3
00014FCA 3028 0012                  		move.w	$12(a0),d0
00014FCE 0440 0038                  		subi.w	#$38,d0
00014FD2 3140 0012                  		move.w	d0,$12(a0)
00014FD6 48C0                       		ext.l	d0
00014FD8 E180                       		asl.l	#8,d0
00014FDA 9680                       		sub.l	d0,d3
00014FDC 2143 000C                  		move.l	d3,$C(a0)
00014FE0 4E75                       		rts	
00014FE2 4E75                       		rts	
00014FE4                            ; ===========================================================================
00014FE4 2428 0008                  		move.l	8(a0),d2
00014FE8 2628 000C                  		move.l	$C(a0),d3
00014FEC 3028 0010                  		move.w	$10(a0),d0
00014FF0 48C0                       		ext.l	d0
00014FF2 E180                       		asl.l	#8,d0
00014FF4 9480                       		sub.l	d0,d2
00014FF6 3028 0012                  		move.w	$12(a0),d0
00014FFA 48C0                       		ext.l	d0
00014FFC E180                       		asl.l	#8,d0
00014FFE 9680                       		sub.l	d0,d3
00015000 2142 0008                  		move.l	d2,8(a0)
00015004 2143 000C                  		move.l	d3,$C(a0)
00015008 4E75                       		rts	
0001500A                            
0001500A                            ; ---------------------------------------------------------------------------
0001500A                            ; Subroutine to	change Sonic's angle as he walks along the floor
0001500A                            ; ---------------------------------------------------------------------------
0001500A                            
0001500A                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0001500A                            
0001500A                            
0001500A                            Sonic_Angle:				; XREF: Sonic_AnglePos; et al
0001500A 1438 F76A                  		move.b	($FFFFF76A).w,d2
0001500E B240                       		cmp.w	d0,d1
00015010 6F00                       		ble.s	loc_1475E
00015012 1438 F768                  		move.b	($FFFFF768).w,d2
00015016 3200                       		move.w	d0,d1
00015018                            
00015018                            loc_1475E:
00015018 0802 0000                  		btst	#0,d2
0001501C 6600                       		bne.s	loc_1476A
0001501E 1142 0026                  		move.b	d2,$26(a0)
00015022 4E75                       		rts	
00015024                            ; ===========================================================================
00015024                            
00015024                            loc_1476A:
00015024 1428 0026                  		move.b	$26(a0),d2
00015028 0602 0020                  		addi.b	#$20,d2
0001502C 0202 00C0                  		andi.b	#$C0,d2
00015030 1142 0026                  		move.b	d2,$26(a0)
00015034 4E75                       		rts	
00015036                            ; End of function Sonic_Angle
00015036                            
00015036                            ; ---------------------------------------------------------------------------
00015036                            ; Subroutine allowing Sonic to walk up a vertical slope/wall to	his right
00015036                            ; ---------------------------------------------------------------------------
00015036                            
00015036                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00015036                            
00015036                            
00015036                            Sonic_WalkVertR:			; XREF: Sonic_AnglePos
00015036 3428 000C                  		move.w	$C(a0),d2
0001503A 3628 0008                  		move.w	8(a0),d3
0001503E 7000                       		moveq	#0,d0
00015040 1028 0017                  		move.b	$17(a0),d0
00015044 4880                       		ext.w	d0
00015046 4440                       		neg.w	d0
00015048 D440                       		add.w	d0,d2
0001504A 1028 0016                  		move.b	$16(a0),d0
0001504E 4880                       		ext.w	d0
00015050 D640                       		add.w	d0,d3
00015052 49F8 F768                  		lea	($FFFFF768).w,a4
00015056 367C 0010                  		movea.w	#$10,a3
0001505A 3C3C 0000                  		move.w	#0,d6
0001505E 7A0D                       		moveq	#$D,d5
00015060 6100 0000                  		bsr.w	FindWall
00015064 3F01                       		move.w	d1,-(sp)
00015066 3428 000C                  		move.w	$C(a0),d2
0001506A 3628 0008                  		move.w	8(a0),d3
0001506E 7000                       		moveq	#0,d0
00015070 1028 0017                  		move.b	$17(a0),d0
00015074 4880                       		ext.w	d0
00015076 D440                       		add.w	d0,d2
00015078 1028 0016                  		move.b	$16(a0),d0
0001507C 4880                       		ext.w	d0
0001507E D640                       		add.w	d0,d3
00015080 49F8 F76A                  		lea	($FFFFF76A).w,a4
00015084 367C 0010                  		movea.w	#$10,a3
00015088 3C3C 0000                  		move.w	#0,d6
0001508C 7A0D                       		moveq	#$D,d5
0001508E 6100 0000                  		bsr.w	FindWall
00015092 301F                       		move.w	(sp)+,d0
00015094 6100 FF74                  		bsr.w	Sonic_Angle
00015098 4A41                       		tst.w	d1
0001509A 6700                       		beq.s	locret_147F0
0001509C 6A00                       		bpl.s	loc_147F2
0001509E 0C41 FFF2                  		cmpi.w	#-$E,d1
000150A2 6D00 FF20                  		blt.w	locret_1470A
000150A6 D368 0008                  		add.w	d1,8(a0)
000150AA                            
000150AA                            locret_147F0:
000150AA 4E75                       		rts	
000150AC                            ; ===========================================================================
000150AC                            
000150AC                            loc_147F2:
000150AC 0C41 000E                  		cmpi.w	#$E,d1
000150B0 6E00                       		bgt.s	loc_147FE
000150B2                            
000150B2                            loc_147F8:
000150B2 D368 0008                  		add.w	d1,8(a0)
000150B6 4E75                       		rts	
000150B8                            ; ===========================================================================
000150B8                            
000150B8                            loc_147FE:
000150B8 4A28 0038                  		tst.b	$38(a0)
000150BC 66F4                       		bne.s	loc_147F8
000150BE 08E8 0001 0022             		bset	#1,$22(a0)
000150C4 08A8 0005 0022             		bclr	#5,$22(a0)
000150CA 117C 0001 001D             		move.b	#1,$1D(a0)
000150D0 4E75                       		rts	
000150D2                            ; End of function Sonic_WalkVertR
000150D2                            
000150D2                            ; ---------------------------------------------------------------------------
000150D2                            ; Subroutine allowing Sonic to walk upside-down
000150D2                            ; ---------------------------------------------------------------------------
000150D2                            
000150D2                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000150D2                            
000150D2                            
000150D2                            Sonic_WalkCeiling:			; XREF: Sonic_AnglePos
000150D2 3428 000C                  		move.w	$C(a0),d2
000150D6 3628 0008                  		move.w	8(a0),d3
000150DA 7000                       		moveq	#0,d0
000150DC 1028 0016                  		move.b	$16(a0),d0
000150E0 4880                       		ext.w	d0
000150E2 9440                       		sub.w	d0,d2
000150E4 0A42 000F                  		eori.w	#$F,d2
000150E8 1028 0017                  		move.b	$17(a0),d0
000150EC 4880                       		ext.w	d0
000150EE D640                       		add.w	d0,d3
000150F0 49F8 F768                  		lea	($FFFFF768).w,a4
000150F4 367C FFF0                  		movea.w	#-$10,a3
000150F8 3C3C 1000                  		move.w	#$1000,d6
000150FC 7A0D                       		moveq	#$D,d5
000150FE 6100 0000                  		bsr.w	FindFloor
00015102 3F01                       		move.w	d1,-(sp)
00015104 3428 000C                  		move.w	$C(a0),d2
00015108 3628 0008                  		move.w	8(a0),d3
0001510C 7000                       		moveq	#0,d0
0001510E 1028 0016                  		move.b	$16(a0),d0
00015112 4880                       		ext.w	d0
00015114 9440                       		sub.w	d0,d2
00015116 0A42 000F                  		eori.w	#$F,d2
0001511A 1028 0017                  		move.b	$17(a0),d0
0001511E 4880                       		ext.w	d0
00015120 9640                       		sub.w	d0,d3
00015122 49F8 F76A                  		lea	($FFFFF76A).w,a4
00015126 367C FFF0                  		movea.w	#-$10,a3
0001512A 3C3C 1000                  		move.w	#$1000,d6
0001512E 7A0D                       		moveq	#$D,d5
00015130 6100 0000                  		bsr.w	FindFloor
00015134 301F                       		move.w	(sp)+,d0
00015136 6100 FED2                  		bsr.w	Sonic_Angle
0001513A 4A41                       		tst.w	d1
0001513C 6700                       		beq.s	locret_14892
0001513E 6A00                       		bpl.s	loc_14894
00015140 0C41 FFF2                  		cmpi.w	#-$E,d1
00015144 6D00 FE5A                  		blt.w	locret_146E6
00015148 9368 000C                  		sub.w	d1,$C(a0)
0001514C                            
0001514C                            locret_14892:
0001514C 4E75                       		rts	
0001514E                            ; ===========================================================================
0001514E                            
0001514E                            loc_14894:
0001514E 0C41 000E                  		cmpi.w	#$E,d1
00015152 6E00                       		bgt.s	loc_148A0
00015154                            
00015154                            loc_1489A:
00015154 9368 000C                  		sub.w	d1,$C(a0)
00015158 4E75                       		rts	
0001515A                            ; ===========================================================================
0001515A                            
0001515A                            loc_148A0:
0001515A 4A28 0038                  		tst.b	$38(a0)
0001515E 66F4                       		bne.s	loc_1489A
00015160 08E8 0001 0022             		bset	#1,$22(a0)
00015166 08A8 0005 0022             		bclr	#5,$22(a0)
0001516C 117C 0001 001D             		move.b	#1,$1D(a0)
00015172 4E75                       		rts	
00015174                            ; End of function Sonic_WalkCeiling
00015174                            
00015174                            ; ---------------------------------------------------------------------------
00015174                            ; Subroutine allowing Sonic to walk up a vertical slope/wall to	his left
00015174                            ; ---------------------------------------------------------------------------
00015174                            
00015174                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00015174                            
00015174                            
00015174                            Sonic_WalkVertL:			; XREF: Sonic_AnglePos
00015174 3428 000C                  		move.w	$C(a0),d2
00015178 3628 0008                  		move.w	8(a0),d3
0001517C 7000                       		moveq	#0,d0
0001517E 1028 0017                  		move.b	$17(a0),d0
00015182 4880                       		ext.w	d0
00015184 9440                       		sub.w	d0,d2
00015186 1028 0016                  		move.b	$16(a0),d0
0001518A 4880                       		ext.w	d0
0001518C 9640                       		sub.w	d0,d3
0001518E 0A43 000F                  		eori.w	#$F,d3
00015192 49F8 F768                  		lea	($FFFFF768).w,a4
00015196 367C FFF0                  		movea.w	#-$10,a3
0001519A 3C3C 0800                  		move.w	#$800,d6
0001519E 7A0D                       		moveq	#$D,d5
000151A0 6100 0000                  		bsr.w	FindWall
000151A4 3F01                       		move.w	d1,-(sp)
000151A6 3428 000C                  		move.w	$C(a0),d2
000151AA 3628 0008                  		move.w	8(a0),d3
000151AE 7000                       		moveq	#0,d0
000151B0 1028 0017                  		move.b	$17(a0),d0
000151B4 4880                       		ext.w	d0
000151B6 D440                       		add.w	d0,d2
000151B8 1028 0016                  		move.b	$16(a0),d0
000151BC 4880                       		ext.w	d0
000151BE 9640                       		sub.w	d0,d3
000151C0 0A43 000F                  		eori.w	#$F,d3
000151C4 49F8 F76A                  		lea	($FFFFF76A).w,a4
000151C8 367C FFF0                  		movea.w	#-$10,a3
000151CC 3C3C 0800                  		move.w	#$800,d6
000151D0 7A0D                       		moveq	#$D,d5
000151D2 6100 0000                  		bsr.w	FindWall
000151D6 301F                       		move.w	(sp)+,d0
000151D8 6100 FE30                  		bsr.w	Sonic_Angle
000151DC 4A41                       		tst.w	d1
000151DE 6700                       		beq.s	locret_14934
000151E0 6A00                       		bpl.s	loc_14936
000151E2 0C41 FFF2                  		cmpi.w	#-$E,d1
000151E6 6D00 FDDC                  		blt.w	locret_1470A
000151EA 9368 0008                  		sub.w	d1,8(a0)
000151EE                            
000151EE                            locret_14934:
000151EE 4E75                       		rts	
000151F0                            ; ===========================================================================
000151F0                            
000151F0                            loc_14936:
000151F0 0C41 000E                  		cmpi.w	#$E,d1
000151F4 6E00                       		bgt.s	loc_14942
000151F6                            
000151F6                            loc_1493C:
000151F6 9368 0008                  		sub.w	d1,8(a0)
000151FA 4E75                       		rts	
000151FC                            ; ===========================================================================
000151FC                            
000151FC                            loc_14942:
000151FC 4A28 0038                  		tst.b	$38(a0)
00015200 66F4                       		bne.s	loc_1493C
00015202 08E8 0001 0022             		bset	#1,$22(a0)
00015208 08A8 0005 0022             		bclr	#5,$22(a0)
0001520E 117C 0001 001D             		move.b	#1,$1D(a0)
00015214 4E75                       		rts	
00015216                            ; End of function Sonic_WalkVertL
00015216                            
00015216                            ; ---------------------------------------------------------------------------
00015216                            ; Subroutine to	find which tile	the object is standing on
00015216                            ; ---------------------------------------------------------------------------
00015216                            
00015216                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00015216                            
00015216                            
00015216                            Floor_ChkTile:				; XREF: FindFloor; et al
00015216 3002                       		move.w	d2,d0
00015218 E248                       		lsr.w	#1,d0
0001521A 0240 0380                  		andi.w	#$380,d0
0001521E 3203                       		move.w	d3,d1
00015220 E049                       		lsr.w	#8,d1
00015222 0241 007F                  		andi.w	#$7F,d1
00015226 D041                       		add.w	d1,d0
00015228 72FF                       		moveq	#-1,d1
0001522A 43F8 A400                  		lea	($FFFFA400).w,a1
0001522E 1231 0000                  		move.b	(a1,d0.w),d1
00015232 6700                       		beq.s	loc_14996
00015234 6B00                       		bmi.s	loc_1499A
00015236 5301                       		subq.b	#1,d1
00015238 4881                       		ext.w	d1
0001523A EE59                       		ror.w	#7,d1
0001523C 3002                       		move.w	d2,d0
0001523E D040                       		add.w	d0,d0
00015240 0240 01E0                  		andi.w	#$1E0,d0
00015244 D240                       		add.w	d0,d1
00015246 3003                       		move.w	d3,d0
00015248 E648                       		lsr.w	#3,d0
0001524A 0240 001E                  		andi.w	#$1E,d0
0001524E D240                       		add.w	d0,d1
00015250                            
00015250                            loc_14996:
00015250 2241                       		movea.l	d1,a1
00015252 4E75                       		rts	
00015254                            ; ===========================================================================
00015254                            
00015254                            loc_1499A:
00015254 0241 007F                  		andi.w	#$7F,d1
00015258 0828 0006 0001             		btst	#6,1(a0)
0001525E 6700                       		beq.s	loc_149B2
00015260 5241                       		addq.w	#1,d1
00015262 0C41 0029                  		cmpi.w	#$29,d1
00015266 6600                       		bne.s	loc_149B2
00015268 323C 0051                  		move.w	#$51,d1
0001526C                            
0001526C                            loc_149B2:
0001526C 5301                       		subq.b	#1,d1
0001526E EE59                       		ror.w	#7,d1
00015270 3002                       		move.w	d2,d0
00015272 D040                       		add.w	d0,d0
00015274 0240 01E0                  		andi.w	#$1E0,d0
00015278 D240                       		add.w	d0,d1
0001527A 3003                       		move.w	d3,d0
0001527C E648                       		lsr.w	#3,d0
0001527E 0240 001E                  		andi.w	#$1E,d0
00015282 D240                       		add.w	d0,d1
00015284 2241                       		movea.l	d1,a1
00015286 4E75                       		rts	
00015288                            ; End of function Floor_ChkTile
00015288                            
00015288                            
00015288                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00015288                            
00015288                            
00015288                            FindFloor:				; XREF: Sonic_AnglePos; et al
00015288 618C                       		bsr.s	Floor_ChkTile
0001528A 3011                       		move.w	(a1),d0
0001528C 3800                       		move.w	d0,d4
0001528E 0240 07FF                  		andi.w	#$7FF,d0
00015292 6700                       		beq.s	loc_149DE
00015294 0B04                       		btst	d5,d4
00015296 6600                       		bne.s	loc_149EC
00015298                            
00015298                            loc_149DE:
00015298 D44B                       		add.w	a3,d2
0001529A 6100 0000                  		bsr.w	FindFloor2
0001529E 944B                       		sub.w	a3,d2
000152A0 0641 0010                  		addi.w	#$10,d1
000152A4 4E75                       		rts	
000152A6                            ; ===========================================================================
000152A6                            
000152A6                            loc_149EC:
000152A6 2478 F796                  		movea.l	($FFFFF796).w,a2 ; load	collision index
000152AA 1032 0000                  		move.b	(a2,d0.w),d0
000152AE 0240 00FF                  		andi.w	#$FF,d0
000152B2 67E4                       		beq.s	loc_149DE
000152B4 45F9 0000 0000             		lea	(AngleMap).l,a2
000152BA 18B2 0000                  		move.b	(a2,d0.w),(a4)
000152BE E948                       		lsl.w	#4,d0
000152C0 3203                       		move.w	d3,d1
000152C2 0804 000B                  		btst	#$B,d4
000152C6 6700                       		beq.s	loc_14A12
000152C8 4641                       		not.w	d1
000152CA 4414                       		neg.b	(a4)
000152CC                            
000152CC                            loc_14A12:
000152CC 0804 000C                  		btst	#$C,d4
000152D0 6700                       		beq.s	loc_14A22
000152D2 0614 0040                  		addi.b	#$40,(a4)
000152D6 4414                       		neg.b	(a4)
000152D8 0414 0040                  		subi.b	#$40,(a4)
000152DC                            
000152DC                            loc_14A22:
000152DC 0241 000F                  		andi.w	#$F,d1
000152E0 D240                       		add.w	d0,d1
000152E2 45F9 0000 0000             		lea	(CollArray1).l,a2
000152E8 1032 1000                  		move.b	(a2,d1.w),d0
000152EC 4880                       		ext.w	d0
000152EE BD44                       		eor.w	d6,d4
000152F0 0804 000C                  		btst	#$C,d4
000152F4 6700                       		beq.s	loc_14A3E
000152F6 4440                       		neg.w	d0
000152F8                            
000152F8                            loc_14A3E:
000152F8 4A40                       		tst.w	d0
000152FA 679C                       		beq.s	loc_149DE
000152FC 6B00                       		bmi.s	loc_14A5A
000152FE 0C00 0010                  		cmpi.b	#$10,d0
00015302 6700                       		beq.s	loc_14A66
00015304 3202                       		move.w	d2,d1
00015306 0241 000F                  		andi.w	#$F,d1
0001530A D041                       		add.w	d1,d0
0001530C 323C 000F                  		move.w	#$F,d1
00015310 9240                       		sub.w	d0,d1
00015312 4E75                       		rts	
00015314                            ; ===========================================================================
00015314                            
00015314                            loc_14A5A:
00015314 3202                       		move.w	d2,d1
00015316 0241 000F                  		andi.w	#$F,d1
0001531A D041                       		add.w	d1,d0
0001531C 6A00 FF7A                  		bpl.w	loc_149DE
00015320                            
00015320                            loc_14A66:
00015320 944B                       		sub.w	a3,d2
00015322 6100 0000                  		bsr.w	FindFloor2
00015326 D44B                       		add.w	a3,d2
00015328 0441 0010                  		subi.w	#$10,d1
0001532C 4E75                       		rts	
0001532E                            ; End of function FindFloor
0001532E                            
0001532E                            
0001532E                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0001532E                            
0001532E                            
0001532E                            FindFloor2:				; XREF: FindFloor
0001532E 6100 FEE6                  		bsr.w	Floor_ChkTile
00015332 3011                       		move.w	(a1),d0
00015334 3800                       		move.w	d0,d4
00015336 0240 07FF                  		andi.w	#$7FF,d0
0001533A 6700                       		beq.s	loc_14A86
0001533C 0B04                       		btst	d5,d4
0001533E 6600                       		bne.s	loc_14A94
00015340                            
00015340                            loc_14A86:
00015340 323C 000F                  		move.w	#$F,d1
00015344 3002                       		move.w	d2,d0
00015346 0240 000F                  		andi.w	#$F,d0
0001534A 9240                       		sub.w	d0,d1
0001534C 4E75                       		rts	
0001534E                            ; ===========================================================================
0001534E                            
0001534E                            loc_14A94:
0001534E 2478 F796                  		movea.l	($FFFFF796).w,a2
00015352 1032 0000                  		move.b	(a2,d0.w),d0
00015356 0240 00FF                  		andi.w	#$FF,d0
0001535A 67E4                       		beq.s	loc_14A86
0001535C 45F9 0000 0000             		lea	(AngleMap).l,a2
00015362 18B2 0000                  		move.b	(a2,d0.w),(a4)
00015366 E948                       		lsl.w	#4,d0
00015368 3203                       		move.w	d3,d1
0001536A 0804 000B                  		btst	#$B,d4
0001536E 6700                       		beq.s	loc_14ABA
00015370 4641                       		not.w	d1
00015372 4414                       		neg.b	(a4)
00015374                            
00015374                            loc_14ABA:
00015374 0804 000C                  		btst	#$C,d4
00015378 6700                       		beq.s	loc_14ACA
0001537A 0614 0040                  		addi.b	#$40,(a4)
0001537E 4414                       		neg.b	(a4)
00015380 0414 0040                  		subi.b	#$40,(a4)
00015384                            
00015384                            loc_14ACA:
00015384 0241 000F                  		andi.w	#$F,d1
00015388 D240                       		add.w	d0,d1
0001538A 45F9 0000 0000             		lea	(CollArray1).l,a2
00015390 1032 1000                  		move.b	(a2,d1.w),d0
00015394 4880                       		ext.w	d0
00015396 BD44                       		eor.w	d6,d4
00015398 0804 000C                  		btst	#$C,d4
0001539C 6700                       		beq.s	loc_14AE6
0001539E 4440                       		neg.w	d0
000153A0                            
000153A0                            loc_14AE6:
000153A0 4A40                       		tst.w	d0
000153A2 679C                       		beq.s	loc_14A86
000153A4 6B00                       		bmi.s	loc_14AFC
000153A6 3202                       		move.w	d2,d1
000153A8 0241 000F                  		andi.w	#$F,d1
000153AC D041                       		add.w	d1,d0
000153AE 323C 000F                  		move.w	#$F,d1
000153B2 9240                       		sub.w	d0,d1
000153B4 4E75                       		rts	
000153B6                            ; ===========================================================================
000153B6                            
000153B6                            loc_14AFC:
000153B6 3202                       		move.w	d2,d1
000153B8 0241 000F                  		andi.w	#$F,d1
000153BC D041                       		add.w	d1,d0
000153BE 6A00 FF80                  		bpl.w	loc_14A86
000153C2 4641                       		not.w	d1
000153C4 4E75                       		rts	
000153C6                            ; End of function FindFloor2
000153C6                            
000153C6                            
000153C6                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000153C6                            
000153C6                            
000153C6                            FindWall:				; XREF: Sonic_WalkVertR; et al
000153C6 6100 FE4E                  		bsr.w	Floor_ChkTile
000153CA 3011                       		move.w	(a1),d0
000153CC 3800                       		move.w	d0,d4
000153CE 0240 07FF                  		andi.w	#$7FF,d0
000153D2 6700                       		beq.s	loc_14B1E
000153D4 0B04                       		btst	d5,d4
000153D6 6600                       		bne.s	loc_14B2C
000153D8                            
000153D8                            loc_14B1E:
000153D8 D64B                       		add.w	a3,d3
000153DA 6100 0000                  		bsr.w	FindWall2
000153DE 964B                       		sub.w	a3,d3
000153E0 0641 0010                  		addi.w	#$10,d1
000153E4 4E75                       		rts	
000153E6                            ; ===========================================================================
000153E6                            
000153E6                            loc_14B2C:
000153E6 2478 F796                  		movea.l	($FFFFF796).w,a2
000153EA 1032 0000                  		move.b	(a2,d0.w),d0
000153EE 0240 00FF                  		andi.w	#$FF,d0
000153F2 67E4                       		beq.s	loc_14B1E
000153F4 45F9 0000 0000             		lea	(AngleMap).l,a2
000153FA 18B2 0000                  		move.b	(a2,d0.w),(a4)
000153FE E948                       		lsl.w	#4,d0
00015400 3202                       		move.w	d2,d1
00015402 0804 000C                  		btst	#$C,d4
00015406 6700                       		beq.s	loc_14B5A
00015408 4641                       		not.w	d1
0001540A 0614 0040                  		addi.b	#$40,(a4)
0001540E 4414                       		neg.b	(a4)
00015410 0414 0040                  		subi.b	#$40,(a4)
00015414                            
00015414                            loc_14B5A:
00015414 0804 000B                  		btst	#$B,d4
00015418 6700                       		beq.s	loc_14B62
0001541A 4414                       		neg.b	(a4)
0001541C                            
0001541C                            loc_14B62:
0001541C 0241 000F                  		andi.w	#$F,d1
00015420 D240                       		add.w	d0,d1
00015422 45F9 0000 0000             		lea	(CollArray2).l,a2
00015428 1032 1000                  		move.b	(a2,d1.w),d0
0001542C 4880                       		ext.w	d0
0001542E BD44                       		eor.w	d6,d4
00015430 0804 000B                  		btst	#$B,d4
00015434 6700                       		beq.s	loc_14B7E
00015436 4440                       		neg.w	d0
00015438                            
00015438                            loc_14B7E:
00015438 4A40                       		tst.w	d0
0001543A 679C                       		beq.s	loc_14B1E
0001543C 6B00                       		bmi.s	loc_14B9A
0001543E 0C00 0010                  		cmpi.b	#$10,d0
00015442 6700                       		beq.s	loc_14BA6
00015444 3203                       		move.w	d3,d1
00015446 0241 000F                  		andi.w	#$F,d1
0001544A D041                       		add.w	d1,d0
0001544C 323C 000F                  		move.w	#$F,d1
00015450 9240                       		sub.w	d0,d1
00015452 4E75                       		rts	
00015454                            ; ===========================================================================
00015454                            
00015454                            loc_14B9A:
00015454 3203                       		move.w	d3,d1
00015456 0241 000F                  		andi.w	#$F,d1
0001545A D041                       		add.w	d1,d0
0001545C 6A00 FF7A                  		bpl.w	loc_14B1E
00015460                            
00015460                            loc_14BA6:
00015460 964B                       		sub.w	a3,d3
00015462 6100 0000                  		bsr.w	FindWall2
00015466 D64B                       		add.w	a3,d3
00015468 0441 0010                  		subi.w	#$10,d1
0001546C 4E75                       		rts	
0001546E                            ; End of function FindWall
0001546E                            
0001546E                            
0001546E                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0001546E                            
0001546E                            
0001546E                            FindWall2:				; XREF: FindWall
0001546E 6100 FDA6                  		bsr.w	Floor_ChkTile
00015472 3011                       		move.w	(a1),d0
00015474 3800                       		move.w	d0,d4
00015476 0240 07FF                  		andi.w	#$7FF,d0
0001547A 6700                       		beq.s	loc_14BC6
0001547C 0B04                       		btst	d5,d4
0001547E 6600                       		bne.s	loc_14BD4
00015480                            
00015480                            loc_14BC6:
00015480 323C 000F                  		move.w	#$F,d1
00015484 3003                       		move.w	d3,d0
00015486 0240 000F                  		andi.w	#$F,d0
0001548A 9240                       		sub.w	d0,d1
0001548C 4E75                       		rts	
0001548E                            ; ===========================================================================
0001548E                            
0001548E                            loc_14BD4:
0001548E 2478 F796                  		movea.l	($FFFFF796).w,a2
00015492 1032 0000                  		move.b	(a2,d0.w),d0
00015496 0240 00FF                  		andi.w	#$FF,d0
0001549A 67E4                       		beq.s	loc_14BC6
0001549C 45F9 0000 0000             		lea	(AngleMap).l,a2
000154A2 18B2 0000                  		move.b	(a2,d0.w),(a4)
000154A6 E948                       		lsl.w	#4,d0
000154A8 3202                       		move.w	d2,d1
000154AA 0804 000C                  		btst	#$C,d4
000154AE 6700                       		beq.s	loc_14C02
000154B0 4641                       		not.w	d1
000154B2 0614 0040                  		addi.b	#$40,(a4)
000154B6 4414                       		neg.b	(a4)
000154B8 0414 0040                  		subi.b	#$40,(a4)
000154BC                            
000154BC                            loc_14C02:
000154BC 0804 000B                  		btst	#$B,d4
000154C0 6700                       		beq.s	loc_14C0A
000154C2 4414                       		neg.b	(a4)
000154C4                            
000154C4                            loc_14C0A:
000154C4 0241 000F                  		andi.w	#$F,d1
000154C8 D240                       		add.w	d0,d1
000154CA 45F9 0000 0000             		lea	(CollArray2).l,a2
000154D0 1032 1000                  		move.b	(a2,d1.w),d0
000154D4 4880                       		ext.w	d0
000154D6 BD44                       		eor.w	d6,d4
000154D8 0804 000B                  		btst	#$B,d4
000154DC 6700                       		beq.s	loc_14C26
000154DE 4440                       		neg.w	d0
000154E0                            
000154E0                            loc_14C26:
000154E0 4A40                       		tst.w	d0
000154E2 679C                       		beq.s	loc_14BC6
000154E4 6B00                       		bmi.s	loc_14C3C
000154E6 3203                       		move.w	d3,d1
000154E8 0241 000F                  		andi.w	#$F,d1
000154EC D041                       		add.w	d1,d0
000154EE 323C 000F                  		move.w	#$F,d1
000154F2 9240                       		sub.w	d0,d1
000154F4 4E75                       		rts	
000154F6                            ; ===========================================================================
000154F6                            
000154F6                            loc_14C3C:
000154F6 3203                       		move.w	d3,d1
000154F8 0241 000F                  		andi.w	#$F,d1
000154FC D041                       		add.w	d1,d0
000154FE 6A00 FF80                  		bpl.w	loc_14BC6
00015502 4641                       		not.w	d1
00015504 4E75                       		rts	
00015506                            ; End of function FindWall2
00015506                            
00015506                            ; ---------------------------------------------------------------------------
00015506                            ; Unused floor/wall subroutine - logs something	to do with collision
00015506                            ; ---------------------------------------------------------------------------
00015506                            
00015506                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00015506                            
00015506                            
00015506                            FloorLog_Unk:				; XREF: Level
00015506 4E75                       		rts	
00015508                            
00015508 43F9 0000 0000             		lea	(CollArray1).l,a1
0001550E 45F9 0000 0000             		lea	(CollArray1).l,a2
00015514 363C 00FF                  		move.w	#$FF,d3
00015518                            
00015518                            loc_14C5E:
00015518 7A10                       		moveq	#$10,d5
0001551A 343C 000F                  		move.w	#$F,d2
0001551E                            
0001551E                            loc_14C64:
0001551E 7800                       		moveq	#0,d4
00015520 323C 000F                  		move.w	#$F,d1
00015524                            
00015524                            loc_14C6A:
00015524 3019                       		move.w	(a1)+,d0
00015526 EAA8                       		lsr.l	d5,d0
00015528 D944                       		addx.w	d4,d4
0001552A 51C9 FFF8                  		dbf	d1,loc_14C6A
0001552E                            
0001552E 34C4                       		move.w	d4,(a2)+
00015530 92FC 0020                  		suba.w	#$20,a1
00015534 5345                       		subq.w	#1,d5
00015536 51CA FFE6                  		dbf	d2,loc_14C64
0001553A                            
0001553A D2FC 0020                  		adda.w	#$20,a1
0001553E 51CB FFD8                  		dbf	d3,loc_14C5E
00015542                            
00015542 43F9 0000 0000             		lea	(CollArray1).l,a1
00015548 45F9 0000 0000             		lea	(CollArray2).l,a2
0001554E 6100                       		bsr.s	FloorLog_Unk2
00015550 43F9 0000 0000             		lea	(CollArray1).l,a1
00015556 45F9 0000 0000             		lea	(CollArray1).l,a2
0001555C                            
0001555C                            ; End of function FloorLog_Unk
0001555C                            
0001555C                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0001555C                            
0001555C                            
0001555C                            FloorLog_Unk2:				; XREF: FloorLog_Unk
0001555C 363C 0FFF                  		move.w	#$FFF,d3
00015560                            
00015560                            loc_14CA6:
00015560 7400                       		moveq	#0,d2
00015562 323C 000F                  		move.w	#$F,d1
00015566 3019                       		move.w	(a1)+,d0
00015568 6700                       		beq.s	loc_14CD4
0001556A 6B00                       		bmi.s	loc_14CBE
0001556C                            
0001556C                            loc_14CB2:
0001556C E248                       		lsr.w	#1,d0
0001556E 6400                       		bcc.s	loc_14CB8
00015570 5202                       		addq.b	#1,d2
00015572                            
00015572                            loc_14CB8:
00015572 51C9 FFF8                  		dbf	d1,loc_14CB2
00015576                            
00015576 6000                       		bra.s	loc_14CD6
00015578                            ; ===========================================================================
00015578                            
00015578                            loc_14CBE:
00015578 0C40 FFFF                  		cmpi.w	#-1,d0
0001557C 6700                       		beq.s	loc_14CD0
0001557E                            
0001557E                            loc_14CC4:
0001557E E348                       		lsl.w	#1,d0
00015580 6400                       		bcc.s	loc_14CCA
00015582 5302                       		subq.b	#1,d2
00015584                            
00015584                            loc_14CCA:
00015584 51C9 FFF8                  		dbf	d1,loc_14CC4
00015588                            
00015588 6000                       		bra.s	loc_14CD6
0001558A                            ; ===========================================================================
0001558A                            
0001558A                            loc_14CD0:
0001558A 303C 0010                  		move.w	#$10,d0
0001558E                            
0001558E                            loc_14CD4:
0001558E 3400                       		move.w	d0,d2
00015590                            
00015590                            loc_14CD6:
00015590 14C2                       		move.b	d2,(a2)+
00015592 51CB FFCC                  		dbf	d3,loc_14CA6
00015596                            
00015596 4E75                       		rts	
00015598                            
00015598                            ; End of function FloorLog_Unk2
00015598                            
00015598                            
00015598                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00015598                            
00015598                            
00015598                            Sonic_WalkSpeed:			; XREF: Sonic_Move
00015598 2628 0008                  		move.l	8(a0),d3
0001559C 2428 000C                  		move.l	$C(a0),d2
000155A0 3228 0010                  		move.w	$10(a0),d1
000155A4 48C1                       		ext.l	d1
000155A6 E181                       		asl.l	#8,d1
000155A8 D681                       		add.l	d1,d3
000155AA 3228 0012                  		move.w	$12(a0),d1
000155AE 48C1                       		ext.l	d1
000155B0 E181                       		asl.l	#8,d1
000155B2 D481                       		add.l	d1,d2
000155B4 4842                       		swap	d2
000155B6 4843                       		swap	d3
000155B8 11C0 F768                  		move.b	d0,($FFFFF768).w
000155BC 11C0 F76A                  		move.b	d0,($FFFFF76A).w
000155C0 1200                       		move.b	d0,d1
000155C2 0600 0020                  		addi.b	#$20,d0
000155C6 6A00                       		bpl.s	loc_14D1A
000155C8 1001                       		move.b	d1,d0
000155CA 6A00                       		bpl.s	loc_14D14
000155CC 5300                       		subq.b	#1,d0
000155CE                            
000155CE                            loc_14D14:
000155CE 0600 0020                  		addi.b	#$20,d0
000155D2 6000                       		bra.s	loc_14D24
000155D4                            ; ===========================================================================
000155D4                            
000155D4                            loc_14D1A:
000155D4 1001                       		move.b	d1,d0
000155D6 6A00                       		bpl.s	loc_14D20
000155D8 5200                       		addq.b	#1,d0
000155DA                            
000155DA                            loc_14D20:
000155DA 0600 001F                  		addi.b	#$1F,d0
000155DE                            
000155DE                            loc_14D24:
000155DE 0200 00C0                  		andi.b	#$C0,d0
000155E2 6700 0000                  		beq.w	loc_14DF0
000155E6 0C00 0080                  		cmpi.b	#$80,d0
000155EA 6700 0000                  		beq.w	loc_14F7C
000155EE 0201 0038                  		andi.b	#$38,d1
000155F2 6600                       		bne.s	loc_14D3C
000155F4 5042                       		addq.w	#8,d2
000155F6                            
000155F6                            loc_14D3C:
000155F6 0C00 0040                  		cmpi.b	#$40,d0
000155FA 6700 0000                  		beq.w	loc_1504A
000155FE 6000 0000                  		bra.w	loc_14EBC
00015602                            
00015602                            ; End of function Sonic_WalkSpeed
00015602                            
00015602                            
00015602                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00015602                            
00015602                            
00015602                            sub_14D48:				; XREF: Sonic_Jump
00015602 11C0 F768                  		move.b	d0,($FFFFF768).w
00015606 11C0 F76A                  		move.b	d0,($FFFFF76A).w
0001560A 0600 0020                  		addi.b	#$20,d0
0001560E 0200 00C0                  		andi.b	#$C0,d0
00015612 0C00 0040                  		cmpi.b	#$40,d0
00015616 6700 0000                  		beq.w	loc_14FD6
0001561A 0C00 0080                  		cmpi.b	#$80,d0
0001561E 6700 0000                  		beq.w	Sonic_DontRunOnWalls
00015622 0C00 00C0                  		cmpi.b	#$C0,d0
00015626 6700 0000                  		beq.w	sub_14E50
0001562A                            
0001562A                            ; End of function sub_14D48
0001562A                            
0001562A                            ; ---------------------------------------------------------------------------
0001562A                            ; Subroutine to	make Sonic land	on the floor after jumping
0001562A                            ; ---------------------------------------------------------------------------
0001562A                            
0001562A                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0001562A                            
0001562A                            
0001562A                            Sonic_HitFloor:				; XREF: Sonic_Floor
0001562A 3428 000C                  		move.w	$C(a0),d2
0001562E 3628 0008                  		move.w	8(a0),d3
00015632 7000                       		moveq	#0,d0
00015634 1028 0016                  		move.b	$16(a0),d0
00015638 4880                       		ext.w	d0
0001563A D440                       		add.w	d0,d2
0001563C 1028 0017                  		move.b	$17(a0),d0
00015640 4880                       		ext.w	d0
00015642 D640                       		add.w	d0,d3
00015644 49F8 F768                  		lea	($FFFFF768).w,a4
00015648 367C 0010                  		movea.w	#$10,a3
0001564C 3C3C 0000                  		move.w	#0,d6
00015650 7A0D                       		moveq	#$D,d5
00015652 6100 FC34                  		bsr.w	FindFloor
00015656 3F01                       		move.w	d1,-(sp)
00015658 3428 000C                  		move.w	$C(a0),d2
0001565C 3628 0008                  		move.w	8(a0),d3
00015660 7000                       		moveq	#0,d0
00015662 1028 0016                  		move.b	$16(a0),d0
00015666 4880                       		ext.w	d0
00015668 D440                       		add.w	d0,d2
0001566A 1028 0017                  		move.b	$17(a0),d0
0001566E 4880                       		ext.w	d0
00015670 9640                       		sub.w	d0,d3
00015672 49F8 F76A                  		lea	($FFFFF76A).w,a4
00015676 367C 0010                  		movea.w	#$10,a3
0001567A 3C3C 0000                  		move.w	#0,d6
0001567E 7A0D                       		moveq	#$D,d5
00015680 6100 FC06                  		bsr.w	FindFloor
00015684 301F                       		move.w	(sp)+,d0
00015686 143C 0000                  		move.b	#0,d2
0001568A                            
0001568A                            loc_14DD0:
0001568A 1638 F76A                  		move.b	($FFFFF76A).w,d3
0001568E B240                       		cmp.w	d0,d1
00015690 6F00                       		ble.s	loc_14DDE
00015692 1638 F768                  		move.b	($FFFFF768).w,d3
00015696 C141                       		exg	d0,d1
00015698                            
00015698                            loc_14DDE:
00015698 0803 0000                  		btst	#0,d3
0001569C 6700                       		beq.s	locret_14DE6
0001569E 1602                       		move.b	d2,d3
000156A0                            
000156A0                            locret_14DE6:
000156A0 4E75                       		rts	
000156A2                            
000156A2                            ; End of function Sonic_HitFloor
000156A2                            
000156A2                            ; ===========================================================================
000156A2 3428 000C                  		move.w	$C(a0),d2
000156A6 3628 0008                  		move.w	8(a0),d3
000156AA                            
000156AA                            loc_14DF0:				; XREF: Sonic_WalkSpeed
000156AA 0642 000A                  		addi.w	#$A,d2
000156AE 49F8 F768                  		lea	($FFFFF768).w,a4
000156B2 367C 0010                  		movea.w	#$10,a3
000156B6 3C3C 0000                  		move.w	#0,d6
000156BA 7A0E                       		moveq	#$E,d5
000156BC 6100 FBCA                  		bsr.w	FindFloor
000156C0 143C 0000                  		move.b	#0,d2
000156C4                            
000156C4                            loc_14E0A:				; XREF: sub_14EB4
000156C4 1638 F768                  		move.b	($FFFFF768).w,d3
000156C8 0803 0000                  		btst	#0,d3
000156CC 6700                       		beq.s	locret_14E16
000156CE 1602                       		move.b	d2,d3
000156D0                            
000156D0                            locret_14E16:
000156D0 4E75                       		rts	
000156D2                            
000156D2                            ; ---------------------------------------------------------------------------
000156D2                            ; Subroutine allowing objects to interact with the floor
000156D2                            ; ---------------------------------------------------------------------------
000156D2                            
000156D2                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000156D2                            
000156D2                            
000156D2                            ObjHitFloor:
000156D2 3628 0008                  		move.w	8(a0),d3
000156D6                            
000156D6                            ; End of function ObjHitFloor
000156D6                            
000156D6                            
000156D6                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000156D6                            
000156D6                            
000156D6                            ObjHitFloor2:
000156D6 3428 000C                  		move.w	$C(a0),d2
000156DA 7000                       		moveq	#0,d0
000156DC 1028 0016                  		move.b	$16(a0),d0
000156E0 4880                       		ext.w	d0
000156E2 D440                       		add.w	d0,d2
000156E4 49F8 F768                  		lea	($FFFFF768).w,a4
000156E8 18BC 0000                  		move.b	#0,(a4)
000156EC 367C 0010                  		movea.w	#$10,a3
000156F0 3C3C 0000                  		move.w	#0,d6
000156F4 7A0D                       		moveq	#$D,d5
000156F6 6100 FB90                  		bsr.w	FindFloor
000156FA 1638 F768                  		move.b	($FFFFF768).w,d3
000156FE 0803 0000                  		btst	#0,d3
00015702 6700                       		beq.s	locret_14E4E
00015704 163C 0000                  		move.b	#0,d3
00015708                            
00015708                            locret_14E4E:
00015708 4E75                       		rts	
0001570A                            ; End of function ObjHitFloor2
0001570A                            
0001570A                            
0001570A                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0001570A                            
0001570A                            
0001570A                            sub_14E50:				; XREF: sub_14D48
0001570A 3428 000C                  		move.w	$C(a0),d2
0001570E 3628 0008                  		move.w	8(a0),d3
00015712 7000                       		moveq	#0,d0
00015714 1028 0017                  		move.b	$17(a0),d0
00015718 4880                       		ext.w	d0
0001571A 9440                       		sub.w	d0,d2
0001571C 1028 0016                  		move.b	$16(a0),d0
00015720 4880                       		ext.w	d0
00015722 D640                       		add.w	d0,d3
00015724 49F8 F768                  		lea	($FFFFF768).w,a4
00015728 367C 0010                  		movea.w	#$10,a3
0001572C 3C3C 0000                  		move.w	#0,d6
00015730 7A0E                       		moveq	#$E,d5
00015732 6100 FC92                  		bsr.w	FindWall
00015736 3F01                       		move.w	d1,-(sp)
00015738 3428 000C                  		move.w	$C(a0),d2
0001573C 3628 0008                  		move.w	8(a0),d3
00015740 7000                       		moveq	#0,d0
00015742 1028 0017                  		move.b	$17(a0),d0
00015746 4880                       		ext.w	d0
00015748 D440                       		add.w	d0,d2
0001574A 1028 0016                  		move.b	$16(a0),d0
0001574E 4880                       		ext.w	d0
00015750 D640                       		add.w	d0,d3
00015752 49F8 F76A                  		lea	($FFFFF76A).w,a4
00015756 367C 0010                  		movea.w	#$10,a3
0001575A 3C3C 0000                  		move.w	#0,d6
0001575E 7A0E                       		moveq	#$E,d5
00015760 6100 FC64                  		bsr.w	FindWall
00015764 301F                       		move.w	(sp)+,d0
00015766 143C 00C0                  		move.b	#-$40,d2
0001576A 6000 FF1E                  		bra.w	loc_14DD0
0001576E                            
0001576E                            ; End of function sub_14E50
0001576E                            
0001576E                            
0001576E                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0001576E                            
0001576E                            
0001576E                            sub_14EB4:				; XREF: Sonic_Floor
0001576E 3428 000C                  		move.w	$C(a0),d2
00015772 3628 0008                  		move.w	8(a0),d3
00015776                            
00015776                            loc_14EBC:
00015776 0643 000A                  		addi.w	#$A,d3
0001577A 49F8 F768                  		lea	($FFFFF768).w,a4
0001577E 367C 0010                  		movea.w	#$10,a3
00015782 3C3C 0000                  		move.w	#0,d6
00015786 7A0E                       		moveq	#$E,d5
00015788 6100 FC3C                  		bsr.w	FindWall
0001578C 143C 00C0                  		move.b	#-$40,d2
00015790 6000 FF32                  		bra.w	loc_14E0A
00015794                            
00015794                            ; End of function sub_14EB4
00015794                            
00015794                            ; ---------------------------------------------------------------------------
00015794                            ; Subroutine to	detect when an object hits a wall to its right
00015794                            ; ---------------------------------------------------------------------------
00015794                            
00015794                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00015794                            
00015794                            
00015794                            ObjHitWallRight:
00015794 D668 0008                  		add.w	8(a0),d3
00015798 3428 000C                  		move.w	$C(a0),d2
0001579C 49F8 F768                  		lea	($FFFFF768).w,a4
000157A0 18BC 0000                  		move.b	#0,(a4)
000157A4 367C 0010                  		movea.w	#$10,a3
000157A8 3C3C 0000                  		move.w	#0,d6
000157AC 7A0E                       		moveq	#$E,d5
000157AE 6100 FC16                  		bsr.w	FindWall
000157B2 1638 F768                  		move.b	($FFFFF768).w,d3
000157B6 0803 0000                  		btst	#0,d3
000157BA 6700                       		beq.s	locret_14F06
000157BC 163C 00C0                  		move.b	#-$40,d3
000157C0                            
000157C0                            locret_14F06:
000157C0 4E75                       		rts	
000157C2                            
000157C2                            ; End of function ObjHitWallRight
000157C2                            
000157C2                            ; ---------------------------------------------------------------------------
000157C2                            ; Subroutine preventing	Sonic from running on walls and	ceilings when he
000157C2                            ; touches them
000157C2                            ; ---------------------------------------------------------------------------
000157C2                            
000157C2                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000157C2                            
000157C2                            
000157C2                            Sonic_DontRunOnWalls:			; XREF: Sonic_Floor; et al
000157C2 3428 000C                  		move.w	$C(a0),d2
000157C6 3628 0008                  		move.w	8(a0),d3
000157CA 7000                       		moveq	#0,d0
000157CC 1028 0016                  		move.b	$16(a0),d0
000157D0 4880                       		ext.w	d0
000157D2 9440                       		sub.w	d0,d2
000157D4 0A42 000F                  		eori.w	#$F,d2
000157D8 1028 0017                  		move.b	$17(a0),d0
000157DC 4880                       		ext.w	d0
000157DE D640                       		add.w	d0,d3
000157E0 49F8 F768                  		lea	($FFFFF768).w,a4
000157E4 367C FFF0                  		movea.w	#-$10,a3
000157E8 3C3C 1000                  		move.w	#$1000,d6
000157EC 7A0E                       		moveq	#$E,d5
000157EE 6100 FA98                  		bsr.w	FindFloor
000157F2 3F01                       		move.w	d1,-(sp)
000157F4 3428 000C                  		move.w	$C(a0),d2
000157F8 3628 0008                  		move.w	8(a0),d3
000157FC 7000                       		moveq	#0,d0
000157FE 1028 0016                  		move.b	$16(a0),d0
00015802 4880                       		ext.w	d0
00015804 9440                       		sub.w	d0,d2
00015806 0A42 000F                  		eori.w	#$F,d2
0001580A 1028 0017                  		move.b	$17(a0),d0
0001580E 4880                       		ext.w	d0
00015810 9640                       		sub.w	d0,d3
00015812 49F8 F76A                  		lea	($FFFFF76A).w,a4
00015816 367C FFF0                  		movea.w	#-$10,a3
0001581A 3C3C 1000                  		move.w	#$1000,d6
0001581E 7A0E                       		moveq	#$E,d5
00015820 6100 FA66                  		bsr.w	FindFloor
00015824 301F                       		move.w	(sp)+,d0
00015826 143C 0080                  		move.b	#-$80,d2
0001582A 6000 FE5E                  		bra.w	loc_14DD0
0001582E                            ; End of function Sonic_DontRunOnWalls
0001582E                            
0001582E                            ; ===========================================================================
0001582E 3428 000C                  		move.w	$C(a0),d2
00015832 3628 0008                  		move.w	8(a0),d3
00015836                            
00015836                            loc_14F7C:
00015836 0442 000A                  		subi.w	#$A,d2
0001583A 0A42 000F                  		eori.w	#$F,d2
0001583E 49F8 F768                  		lea	($FFFFF768).w,a4
00015842 367C FFF0                  		movea.w	#-$10,a3
00015846 3C3C 1000                  		move.w	#$1000,d6
0001584A 7A0E                       		moveq	#$E,d5
0001584C 6100 FA3A                  		bsr.w	FindFloor
00015850 143C 0080                  		move.b	#-$80,d2
00015854 6000 FE6E                  		bra.w	loc_14E0A
00015858                            
00015858                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00015858                            
00015858                            
00015858                            ObjHitCeiling:
00015858 3428 000C                  		move.w	$C(a0),d2
0001585C 3628 0008                  		move.w	8(a0),d3
00015860 7000                       		moveq	#0,d0
00015862 1028 0016                  		move.b	$16(a0),d0
00015866 4880                       		ext.w	d0
00015868 9440                       		sub.w	d0,d2
0001586A 0A42 000F                  		eori.w	#$F,d2
0001586E 49F8 F768                  		lea	($FFFFF768).w,a4
00015872 367C FFF0                  		movea.w	#-$10,a3
00015876 3C3C 1000                  		move.w	#$1000,d6
0001587A 7A0E                       		moveq	#$E,d5
0001587C 6100 FA0A                  		bsr.w	FindFloor
00015880 1638 F768                  		move.b	($FFFFF768).w,d3
00015884 0803 0000                  		btst	#0,d3
00015888 6700                       		beq.s	locret_14FD4
0001588A 163C 0080                  		move.b	#-$80,d3
0001588E                            
0001588E                            locret_14FD4:
0001588E 4E75                       		rts	
00015890                            ; End of function ObjHitCeiling
00015890                            
00015890                            ; ===========================================================================
00015890                            
00015890                            loc_14FD6:				; XREF: sub_14D48
00015890 3428 000C                  		move.w	$C(a0),d2
00015894 3628 0008                  		move.w	8(a0),d3
00015898 7000                       		moveq	#0,d0
0001589A 1028 0017                  		move.b	$17(a0),d0
0001589E 4880                       		ext.w	d0
000158A0 9440                       		sub.w	d0,d2
000158A2 1028 0016                  		move.b	$16(a0),d0
000158A6 4880                       		ext.w	d0
000158A8 9640                       		sub.w	d0,d3
000158AA 0A43 000F                  		eori.w	#$F,d3
000158AE 49F8 F768                  		lea	($FFFFF768).w,a4
000158B2 367C FFF0                  		movea.w	#-$10,a3
000158B6 3C3C 0800                  		move.w	#$800,d6
000158BA 7A0E                       		moveq	#$E,d5
000158BC 6100 FB08                  		bsr.w	FindWall
000158C0 3F01                       		move.w	d1,-(sp)
000158C2 3428 000C                  		move.w	$C(a0),d2
000158C6 3628 0008                  		move.w	8(a0),d3
000158CA 7000                       		moveq	#0,d0
000158CC 1028 0017                  		move.b	$17(a0),d0
000158D0 4880                       		ext.w	d0
000158D2 D440                       		add.w	d0,d2
000158D4 1028 0016                  		move.b	$16(a0),d0
000158D8 4880                       		ext.w	d0
000158DA 9640                       		sub.w	d0,d3
000158DC 0A43 000F                  		eori.w	#$F,d3
000158E0 49F8 F76A                  		lea	($FFFFF76A).w,a4
000158E4 367C FFF0                  		movea.w	#-$10,a3
000158E8 3C3C 0800                  		move.w	#$800,d6
000158EC 7A0E                       		moveq	#$E,d5
000158EE 6100 FAD6                  		bsr.w	FindWall
000158F2 301F                       		move.w	(sp)+,d0
000158F4 143C 0040                  		move.b	#$40,d2
000158F8 6000 FD90                  		bra.w	loc_14DD0
000158FC                            
000158FC                            ; ---------------------------------------------------------------------------
000158FC                            ; Subroutine to	stop Sonic when	he jumps at a wall
000158FC                            ; ---------------------------------------------------------------------------
000158FC                            
000158FC                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000158FC                            
000158FC                            
000158FC                            Sonic_HitWall:				; XREF: Sonic_Floor
000158FC 3428 000C                  		move.w	$C(a0),d2
00015900 3628 0008                  		move.w	8(a0),d3
00015904                            
00015904                            loc_1504A:
00015904 0443 000A                  		subi.w	#$A,d3
00015908 0A43 000F                  		eori.w	#$F,d3
0001590C 49F8 F768                  		lea	($FFFFF768).w,a4
00015910 367C FFF0                  		movea.w	#-$10,a3
00015914 3C3C 0800                  		move.w	#$800,d6
00015918 7A0E                       		moveq	#$E,d5
0001591A 6100 FAAA                  		bsr.w	FindWall
0001591E 143C 0040                  		move.b	#$40,d2
00015922 6000 FDA0                  		bra.w	loc_14E0A
00015926                            ; End of function Sonic_HitWall
00015926                            
00015926                            ; ---------------------------------------------------------------------------
00015926                            ; Subroutine to	detect when an object hits a wall to its left
00015926                            ; ---------------------------------------------------------------------------
00015926                            
00015926                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00015926                            
00015926                            
00015926                            ObjHitWallLeft:
00015926 D668 0008                  		add.w	8(a0),d3
0001592A 3428 000C                  		move.w	$C(a0),d2
0001592E 49F8 F768                  		lea	($FFFFF768).w,a4
00015932 18BC 0000                  		move.b	#0,(a4)
00015936 367C FFF0                  		movea.w	#-$10,a3
0001593A 3C3C 0800                  		move.w	#$800,d6
0001593E 7A0E                       		moveq	#$E,d5
00015940 6100 FA84                  		bsr.w	FindWall
00015944 1638 F768                  		move.b	($FFFFF768).w,d3
00015948 0803 0000                  		btst	#0,d3
0001594C 6700                       		beq.s	locret_15098
0001594E 163C 0040                  		move.b	#$40,d3
00015952                            
00015952                            locret_15098:
00015952 4E75                       		rts	
00015954                            ; End of function ObjHitWallLeft
00015954                            
00015954                            ; ===========================================================================
00015954                            ; ---------------------------------------------------------------------------
00015954                            ; Object 66 - rotating disc that grabs Sonic (SBZ)
00015954                            ; ---------------------------------------------------------------------------
00015954                            
00015954                            Obj66:					; XREF: Obj_Index
00015954 7000                       		moveq	#0,d0
00015956 1028 0024                  		move.b	$24(a0),d0
0001595A 323B 0000                  		move.w	Obj66_Index(pc,d0.w),d1
0001595E 4EFB 1000                  		jmp	Obj66_Index(pc,d1.w)
00015962                            ; ===========================================================================
00015962 0000                       Obj66_Index:	dc.w Obj66_Main-Obj66_Index
00015964 0000                       		dc.w Obj66_Action-Obj66_Index
00015966 0000                       		dc.w Obj66_Display-Obj66_Index
00015968 0000                       		dc.w Obj66_Release-Obj66_Index
0001596A                            ; ===========================================================================
0001596A                            
0001596A                            Obj66_Main:				; XREF: Obj66_Index
0001596A 5428 0024                  		addq.b	#2,$24(a0)
0001596E 323C 0001                  		move.w	#1,d1
00015972 2248                       		movea.l	a0,a1
00015974 6000                       		bra.s	Obj66_MakeItem
00015976                            ; ===========================================================================
00015976                            
00015976                            Obj66_Loop:
00015976 6100 88D6                  		bsr.w	SingleObjLoad
0001597A 6600                       		bne.s	loc_150FE
0001597C 12BC 0066                  		move.b	#$66,0(a1)
00015980 5829 0024                  		addq.b	#4,$24(a1)
00015984 3368 0008 0008             		move.w	8(a0),8(a1)
0001598A 3368 000C 000C             		move.w	$C(a0),$C(a1)
00015990 137C 0003 0018             		move.b	#3,$18(a1)
00015996 137C 0010 001A             		move.b	#$10,$1A(a1)
0001599C                            
0001599C                            Obj66_MakeItem:				; XREF: Obj66_Main
0001599C 237C 0000 0000 0004        		move.l	#Map_obj66,4(a1)
000159A4 337C 4348 0002             		move.w	#$4348,2(a1)
000159AA 0029 0004 0001             		ori.b	#4,1(a1)
000159B0 137C 0038 0019             		move.b	#$38,$19(a1)
000159B6                            
000159B6                            loc_150FE:
000159B6 51C9 FFBE                  		dbf	d1,Obj66_Loop
000159BA                            
000159BA 117C 0030 0019             		move.b	#$30,$19(a0)
000159C0 117C 0004 0018             		move.b	#4,$18(a0)
000159C6 317C 003C 0030             		move.w	#$3C,$30(a0)
000159CC 117C 0001 0034             		move.b	#1,$34(a0)
000159D2 1168 0028 0038             		move.b	$28(a0),$38(a0)
000159D8                            
000159D8                            Obj66_Action:				; XREF: Obj66_Index
000159D8 6100 0000                  		bsr.w	Obj66_ChkSwitch
000159DC 4A28 0001                  		tst.b	1(a0)
000159E0 6A00 0000                  		bpl.w	Obj66_Display
000159E4 323C 0030                  		move.w	#$30,d1
000159E8 3401                       		move.w	d1,d2
000159EA 3602                       		move.w	d2,d3
000159EC 5243                       		addq.w	#1,d3
000159EE 3828 0008                  		move.w	8(a0),d4
000159F2 6100 A7A4                  		bsr.w	SolidObject
000159F6 0828 0005 0022             		btst	#5,$22(a0)
000159FC 6700 0000                  		beq.w	Obj66_Display
00015A00 43F8 D000                  		lea	($FFFFD000).w,a1
00015A04 720E                       		moveq	#$E,d1
00015A06 3029 0008                  		move.w	8(a1),d0
00015A0A B068 0008                  		cmp.w	8(a0),d0
00015A0E 6500                       		bcs.s	Obj66_GrabSonic
00015A10 7207                       		moveq	#7,d1
00015A12                            
00015A12                            Obj66_GrabSonic:
00015A12 B228 001A                  		cmp.b	$1A(a0),d1
00015A16 6600                       		bne.s	Obj66_Display
00015A18 1141 0032                  		move.b	d1,$32(a0)
00015A1C 5828 0024                  		addq.b	#4,$24(a0)
00015A20 11FC 0001 F7C8             		move.b	#1,($FFFFF7C8).w ; lock	controls
00015A26 137C 0002 001C             		move.b	#2,$1C(a1)	; make Sonic use "rolling" animation
00015A2C 337C 0800 0014             		move.w	#$800,$14(a1)
00015A32 337C 0000 0010             		move.w	#0,$10(a1)
00015A38 337C 0000 0012             		move.w	#0,$12(a1)
00015A3E 08A8 0005 0022             		bclr	#5,$22(a0)
00015A44 08A9 0005 0022             		bclr	#5,$22(a1)
00015A4A 08E9 0001 0022             		bset	#1,$22(a1)
00015A50 3429 0008                  		move.w	8(a1),d2
00015A54 3629 000C                  		move.w	$C(a1),d3
00015A58 6100 0000                  		bsr.w	Obj66_ChgPos
00015A5C D569 0008                  		add.w	d2,8(a1)
00015A60 D769 000C                  		add.w	d3,$C(a1)
00015A64 E0E9 0008                  		asr	8(a1)
00015A68 E0E9 000C                  		asr	$C(a1)
00015A6C                            
00015A6C                            Obj66_Display:				; XREF: Obj66_Index
00015A6C 6000 A402                  		bra.w	MarkObjGone
00015A70                            ; ===========================================================================
00015A70                            
00015A70                            Obj66_Release:				; XREF: Obj66_Index
00015A70 1028 001A                  		move.b	$1A(a0),d0
00015A74 0C00 0004                  		cmpi.b	#4,d0
00015A78 6700                       		beq.s	loc_151C8
00015A7A 0C00 0007                  		cmpi.b	#7,d0
00015A7E 6600                       		bne.s	loc_151F8
00015A80                            
00015A80                            loc_151C8:
00015A80 B028 0032                  		cmp.b	$32(a0),d0
00015A84 6700                       		beq.s	loc_151F8
00015A86 43F8 D000                  		lea	($FFFFD000).w,a1
00015A8A 337C 0000 0010             		move.w	#0,$10(a1)
00015A90 337C 0800 0012             		move.w	#$800,$12(a1)
00015A96 0C00 0004                  		cmpi.b	#4,d0
00015A9A 6700                       		beq.s	loc_151F0
00015A9C 337C 0800 0010             		move.w	#$800,$10(a1)
00015AA2 337C 0800 0012             		move.w	#$800,$12(a1)
00015AA8                            
00015AA8                            loc_151F0:
00015AA8 4238 F7C8                  		clr.b	($FFFFF7C8).w	; unlock controls
00015AAC 5928 0024                  		subq.b	#4,$24(a0)
00015AB0                            
00015AB0                            loc_151F8:
00015AB0 6100                       		bsr.s	Obj66_ChkSwitch
00015AB2 6100                       		bsr.s	Obj66_ChgPos
00015AB4 6000 A3BA                  		bra.w	MarkObjGone
00015AB8                            
00015AB8                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00015AB8                            
00015AB8                            
00015AB8                            Obj66_ChkSwitch:			; XREF: Obj66_Action
00015AB8 45F8 F7E0                  		lea	($FFFFF7E0).w,a2
00015ABC 7000                       		moveq	#0,d0
00015ABE 1028 0038                  		move.b	$38(a0),d0
00015AC2 0832 0000 0000             		btst	#0,(a2,d0.w)	; is switch pressed?
00015AC8 6700                       		beq.s	loc_15224	; if not, branch
00015ACA 4A28 0036                  		tst.b	$36(a0)		; has switch previously	been pressed?
00015ACE 6600                       		bne.s	Obj66_Animate	; if yes, branch
00015AD0 4428 0034                  		neg.b	$34(a0)
00015AD4 117C 0001 0036             		move.b	#1,$36(a0)	; set to "previously pressed"
00015ADA 6000                       		bra.s	Obj66_Animate
00015ADC                            ; ===========================================================================
00015ADC                            
00015ADC                            loc_15224:
00015ADC 4228 0036                  		clr.b	$36(a0)		; set to "not yet pressed"
00015AE0                            
00015AE0                            Obj66_Animate:
00015AE0 5328 001E                  		subq.b	#1,$1E(a0)
00015AE4 6A00                       		bpl.s	locret_15246
00015AE6 117C 0007 001E             		move.b	#7,$1E(a0)
00015AEC 1228 0034                  		move.b	$34(a0),d1
00015AF0 1028 001A                  		move.b	$1A(a0),d0
00015AF4 D001                       		add.b	d1,d0
00015AF6 0200 000F                  		andi.b	#$F,d0
00015AFA 1140 001A                  		move.b	d0,$1A(a0)
00015AFE                            
00015AFE                            locret_15246:
00015AFE 4E75                       		rts	
00015B00                            ; End of function Obj66_ChkSwitch
00015B00                            
00015B00                            
00015B00                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00015B00                            
00015B00                            
00015B00                            Obj66_ChgPos:				; XREF: Obj66_GrabSonic
00015B00 43F8 D000                  		lea	($FFFFD000).w,a1
00015B04 7000                       		moveq	#0,d0
00015B06 1028 001A                  		move.b	$1A(a0),d0
00015B0A D040                       		add.w	d0,d0
00015B0C 45FB 0000                  		lea	Obj66_PosData(pc,d0.w),a2
00015B10 101A                       		move.b	(a2)+,d0
00015B12 4880                       		ext.w	d0
00015B14 D068 0008                  		add.w	8(a0),d0
00015B18 3340 0008                  		move.w	d0,8(a1)
00015B1C 101A                       		move.b	(a2)+,d0
00015B1E 4880                       		ext.w	d0
00015B20 D068 000C                  		add.w	$C(a0),d0
00015B24 3340 000C                  		move.w	d0,$C(a1)
00015B28 4E75                       		rts	
00015B2A                            ; End of function Obj66_ChgPos
00015B2A                            
00015B2A                            ; ===========================================================================
00015B2A E000 E20E                  Obj66_PosData:	dc.b  $E0,   0,	$E2,  $E ; disc	x-pos, Sonic x-pos, disc y-pos,	Sonic y-pos
00015B2E E818 F21E                  		dc.b  $E8, $18,	$F2, $1E
00015B32 0020 0E1E                  		dc.b	0, $20,	 $E, $1E
00015B36 1818 1E0E                  		dc.b  $18, $18,	$1E,  $E
00015B3A 2000 1EF2                  		dc.b  $20,   0,	$1E, $F2
00015B3E 18E8 0EE2                  		dc.b  $18, $E8,	 $E, $E2
00015B42 00E0 F2E2                  		dc.b	0, $E0,	$F2, $E2
00015B46 E8E8 E2F2                  		dc.b  $E8, $E8,	$E2, $F2
00015B4A                            ; ---------------------------------------------------------------------------
00015B4A                            ; Sprite mappings - rotating disc that grabs Sonic (SBZ)
00015B4A                            ; ---------------------------------------------------------------------------
00015B4A                            Map_obj66:
00015B4A                            	include "_maps\obj66.asm"
00015B4A                            ; ---------------------------------------------------------------------------
00015B4A                            ; Sprite mappings - rotating disc that grabs Sonic (SBZ)
00015B4A                            ; ---------------------------------------------------------------------------
00015B4A 0000 0000                  		dc.w byte_152B4-Map_obj66, byte_152D3-Map_obj66
00015B4E 0000 0000                  		dc.w byte_152F2-Map_obj66, byte_15311-Map_obj66
00015B52 0000 0000                  		dc.w byte_15330-Map_obj66, byte_1534F-Map_obj66
00015B56 0000 0000                  		dc.w byte_1536E-Map_obj66, byte_1538D-Map_obj66
00015B5A 0000 0000                  		dc.w byte_153AC-Map_obj66, byte_153CB-Map_obj66
00015B5E 0000 0000                  		dc.w byte_153EA-Map_obj66, byte_15409-Map_obj66
00015B62 0000 0000                  		dc.w byte_15428-Map_obj66, byte_15447-Map_obj66
00015B66 0000 0000                  		dc.w byte_15466-Map_obj66, byte_15485-Map_obj66
00015B6A 0000                       		dc.w byte_154A4-Map_obj66
00015B6C 06                         byte_152B4:	dc.b 6
00015B6D E805 0022 D0               		dc.b $E8, 5, 0,	$22, $D0
00015B72 0805 1022 D0               		dc.b 8,	5, $10,	$22, $D0
00015B77 E80A 0000 C8               		dc.b $E8, $A, 0, 0, $C8
00015B7C E80A 0800 E0               		dc.b $E8, $A, 8, 0, $E0
00015B81 000A 1000 C8               		dc.b 0,	$A, $10, 0, $C8
00015B86 000A 1800 E0               		dc.b 0,	$A, $18, 0, $E0
00015B8B 06                         byte_152D3:	dc.b 6
00015B8C F803 0026 D0               		dc.b $F8, 3, 0,	$26, $D0
00015B91 1805 002A D8               		dc.b $18, 5, 0,	$2A, $D8
00015B96 F60A 0000 CA               		dc.b $F6, $A, 0, 0, $CA
00015B9B F60A 0800 E2               		dc.b $F6, $A, 8, 0, $E2
00015BA0 0E0A 1000 CA               		dc.b $E, $A, $10, 0, $CA
00015BA5 0E0A 1800 E2               		dc.b $E, $A, $18, 0, $E2
00015BAA 06                         byte_152F2:	dc.b 6
00015BAB 0006 002E D0               		dc.b 0,	6, 0, $2E, $D0
00015BB0 2009 0034 E8               		dc.b $20, 9, 0,	$34, $E8
00015BB5 000A 0000 D0               		dc.b 0,	$A, 0, 0, $D0
00015BBA 000A 0800 E8               		dc.b 0,	$A, 8, 0, $E8
00015BBF 180A 1000 D0               		dc.b $18, $A, $10, 0, $D0
00015BC4 180A 1800 E8               		dc.b $18, $A, $18, 0, $E8
00015BC9 06                         byte_15311:	dc.b 6
00015BCA 0807 003A D8               		dc.b 8,	7, 0, $3A, $D8
00015BCF 2808 0042 F0               		dc.b $28, 8, 0,	$42, $F0
00015BD4 060A 0000 DA               		dc.b 6,	$A, 0, 0, $DA
00015BD9 060A 0800 F2               		dc.b 6,	$A, 8, 0, $F2
00015BDE 1E0A 1000 DA               		dc.b $1E, $A, $10, 0, $DA
00015BE3 1E0A 1800 F2               		dc.b $1E, $A, $18, 0, $F2
00015BE8 06                         byte_15330:	dc.b 6
00015BE9 2005 0045 E8               		dc.b $20, 5, 0,	$45, $E8
00015BEE 2005 0845 08               		dc.b $20, 5, 8,	$45, 8
00015BF3 080A 0000 E8               		dc.b 8,	$A, 0, 0, $E8
00015BF8 080A 0800 00               		dc.b 8,	$A, 8, 0, 0
00015BFD 200A 1000 E8               		dc.b $20, $A, $10, 0, $E8
00015C02 200A 1800 00               		dc.b $20, $A, $18, 0, 0
00015C07 06                         byte_1534F:	dc.b 6
00015C08 2808 0842 F8               		dc.b $28, 8, 8,	$42, $F8
00015C0D 0807 083A 18               		dc.b 8,	7, 8, $3A, $18
00015C12 060A 0000 F6               		dc.b 6,	$A, 0, 0, $F6
00015C17 060A 0800 0E               		dc.b 6,	$A, 8, 0, $E
00015C1C 1E0A 1000 F6               		dc.b $1E, $A, $10, 0, $F6
00015C21 1E0A 1800 0E               		dc.b $1E, $A, $18, 0, $E
00015C26 06                         byte_1536E:	dc.b 6
00015C27 2009 0834 00               		dc.b $20, 9, 8,	$34, 0
00015C2C 0006 082E 20               		dc.b 0,	6, 8, $2E, $20
00015C31 000A 0000 00               		dc.b 0,	$A, 0, 0, 0
00015C36 000A 0800 18               		dc.b 0,	$A, 8, 0, $18
00015C3B 180A 1000 00               		dc.b $18, $A, $10, 0, 0
00015C40 180A 1800 18               		dc.b $18, $A, $18, 0, $18
00015C45 06                         byte_1538D:	dc.b 6
00015C46 1805 082A 18               		dc.b $18, 5, 8,	$2A, $18
00015C4B F803 0826 28               		dc.b $F8, 3, 8,	$26, $28
00015C50 F60A 0000 06               		dc.b $F6, $A, 0, 0, 6
00015C55 F60A 0800 1E               		dc.b $F6, $A, 8, 0, $1E
00015C5A 0E0A 1000 06               		dc.b $E, $A, $10, 0, 6
00015C5F 0E0A 1800 1E               		dc.b $E, $A, $18, 0, $1E
00015C64 06                         byte_153AC:	dc.b 6
00015C65 E805 0822 20               		dc.b $E8, 5, 8,	$22, $20
00015C6A 0805 1822 20               		dc.b 8,	5, $18,	$22, $20
00015C6F E80A 0000 08               		dc.b $E8, $A, 0, 0, 8
00015C74 E80A 0800 20               		dc.b $E8, $A, 8, 0, $20
00015C79 000A 1000 08               		dc.b 0,	$A, $10, 0, 8
00015C7E 000A 1800 20               		dc.b 0,	$A, $18, 0, $20
00015C83 06                         byte_153CB:	dc.b 6
00015C84 D805 182A 18               		dc.b $D8, 5, $18, $2A, $18
00015C89 E803 1826 28               		dc.b $E8, 3, $18, $26, $28
00015C8E DA0A 0000 06               		dc.b $DA, $A, 0, 0, 6
00015C93 DA0A 0800 1E               		dc.b $DA, $A, 8, 0, $1E
00015C98 F20A 1000 06               		dc.b $F2, $A, $10, 0, 6
00015C9D F20A 1800 1E               		dc.b $F2, $A, $18, 0, $1E
00015CA2 06                         byte_153EA:	dc.b 6
00015CA3 D009 1834 00               		dc.b $D0, 9, $18, $34, 0
00015CA8 E806 182E 20               		dc.b $E8, 6, $18, $2E, $20
00015CAD D00A 0000 00               		dc.b $D0, $A, 0, 0, 0
00015CB2 D00A 0800 18               		dc.b $D0, $A, 8, 0, $18
00015CB7 E80A 1000 00               		dc.b $E8, $A, $10, 0, 0
00015CBC E80A 1800 18               		dc.b $E8, $A, $18, 0, $18
00015CC1 06                         byte_15409:	dc.b 6
00015CC2 D008 1842 F8               		dc.b $D0, 8, $18, $42, $F8
00015CC7 D807 183A 18               		dc.b $D8, 7, $18, $3A, $18
00015CCC CA0A 0000 F6               		dc.b $CA, $A, 0, 0, $F6
00015CD1 CA0A 0800 0E               		dc.b $CA, $A, 8, 0, $E
00015CD6 E20A 1000 F6               		dc.b $E2, $A, $10, 0, $F6
00015CDB E20A 1800 0E               		dc.b $E2, $A, $18, 0, $E
00015CE0 06                         byte_15428:	dc.b 6
00015CE1 D005 1045 E8               		dc.b $D0, 5, $10, $45, $E8
00015CE6 D005 1845 08               		dc.b $D0, 5, $18, $45, 8
00015CEB C80A 0000 E8               		dc.b $C8, $A, 0, 0, $E8
00015CF0 C80A 0800 00               		dc.b $C8, $A, 8, 0, 0
00015CF5 E00A 1000 E8               		dc.b $E0, $A, $10, 0, $E8
00015CFA E00A 1800 00               		dc.b $E0, $A, $18, 0, 0
00015CFF 06                         byte_15447:	dc.b 6
00015D00 D807 103A D8               		dc.b $D8, 7, $10, $3A, $D8
00015D05 D008 1042 F0               		dc.b $D0, 8, $10, $42, $F0
00015D0A CA0A 0000 DA               		dc.b $CA, $A, 0, 0, $DA
00015D0F CA0A 0800 F2               		dc.b $CA, $A, 8, 0, $F2
00015D14 E20A 1000 DA               		dc.b $E2, $A, $10, 0, $DA
00015D19 E20A 1800 F2               		dc.b $E2, $A, $18, 0, $F2
00015D1E 06                         byte_15466:	dc.b 6
00015D1F E806 102E D0               		dc.b $E8, 6, $10, $2E, $D0
00015D24 D009 1034 E8               		dc.b $D0, 9, $10, $34, $E8
00015D29 D00A 0000 D0               		dc.b $D0, $A, 0, 0, $D0
00015D2E D00A 0800 E8               		dc.b $D0, $A, 8, 0, $E8
00015D33 E80A 1000 D0               		dc.b $E8, $A, $10, 0, $D0
00015D38 E80A 1800 E8               		dc.b $E8, $A, $18, 0, $E8
00015D3D 06                         byte_15485:	dc.b 6
00015D3E E803 1026 D0               		dc.b $E8, 3, $10, $26, $D0
00015D43 D805 102A D8               		dc.b $D8, 5, $10, $2A, $D8
00015D48 DA0A 0000 CA               		dc.b $DA, $A, 0, 0, $CA
00015D4D DA0A 0800 E2               		dc.b $DA, $A, 8, 0, $E2
00015D52 F20A 1000 CA               		dc.b $F2, $A, $10, 0, $CA
00015D57 F20A 1800 E2               		dc.b $F2, $A, $18, 0, $E2
00015D5C 0C                         byte_154A4:	dc.b $C
00015D5D C80D 0009 E0               		dc.b $C8, $D, 0, 9, $E0
00015D62 D00A 0011 D0               		dc.b $D0, $A, 0, $11, $D0
00015D67 E007 001A C8               		dc.b $E0, 7, 0,	$1A, $C8
00015D6C C80D 0809 00               		dc.b $C8, $D, 8, 9, 0
00015D71 D00A 0811 18               		dc.b $D0, $A, 8, $11, $18
00015D76 E007 081A 28               		dc.b $E0, 7, 8,	$1A, $28
00015D7B 0007 101A C8               		dc.b 0,	7, $10,	$1A, $C8
00015D80 180A 1011 D0               		dc.b $18, $A, $10, $11,	$D0
00015D85 280D 1009 E0               		dc.b $28, $D, $10, 9, $E0
00015D8A 280D 1809 00               		dc.b $28, $D, $18, 9, 0
00015D8F 180A 1811 18               		dc.b $18, $A, $18, $11,	$18
00015D94 0007 181A 28               		dc.b 0,	7, $18,	$1A, $28
00015D9A 00                         		even
00015D9A 00                         		even
00015D9A                            
00015D9A                            ; ===========================================================================
00015D9A                            ; ---------------------------------------------------------------------------
00015D9A                            ; Object 67 - disc that	you run	around (SBZ)
00015D9A                            ; ---------------------------------------------------------------------------
00015D9A                            
00015D9A                            Obj67:					; XREF: Obj_Index
00015D9A 7000                       		moveq	#0,d0
00015D9C 1028 0024                  		move.b	$24(a0),d0
00015DA0 323B 0000                  		move.w	Obj67_Index(pc,d0.w),d1
00015DA4 4EFB 1000                  		jmp	Obj67_Index(pc,d1.w)
00015DA8                            ; ===========================================================================
00015DA8 0000                       Obj67_Index:	dc.w Obj67_Main-Obj67_Index
00015DAA 0000                       		dc.w Obj67_Action-Obj67_Index
00015DAC                            ; ===========================================================================
00015DAC                            
00015DAC                            Obj67_Main:				; XREF: Obj67_Index
00015DAC 5428 0024                  		addq.b	#2,$24(a0)
00015DB0 217C 0000 0000 0004        		move.l	#Map_obj67,4(a0)
00015DB8 317C C344 0002             		move.w	#$C344,2(a0)
00015DBE 117C 0004 0001             		move.b	#4,1(a0)
00015DC4 117C 0004 0018             		move.b	#4,$18(a0)
00015DCA 117C 0008 0019             		move.b	#8,$19(a0)
00015DD0 3168 0008 0032             		move.w	8(a0),$32(a0)
00015DD6 3168 000C 0030             		move.w	$C(a0),$30(a0)
00015DDC 117C 0018 0034             		move.b	#$18,$34(a0)
00015DE2 117C 0048 0038             		move.b	#$48,$38(a0)
00015DE8 1228 0028                  		move.b	$28(a0),d1	; get object type
00015DEC 0201 000F                  		andi.b	#$F,d1		; read only the	2nd digit
00015DF0 6700                       		beq.s	loc_15546
00015DF2 117C 0010 0034             		move.b	#$10,$34(a0)
00015DF8 117C 0038 0038             		move.b	#$38,$38(a0)
00015DFE                            
00015DFE                            loc_15546:
00015DFE 1228 0028                  		move.b	$28(a0),d1	; get object type
00015E02 0201 00F0                  		andi.b	#$F0,d1		; read only the	1st digit
00015E06 4881                       		ext.w	d1
00015E08 E741                       		asl.w	#3,d1
00015E0A 3141 0036                  		move.w	d1,$36(a0)
00015E0E 1028 0022                  		move.b	$22(a0),d0
00015E12 E418                       		ror.b	#2,d0
00015E14 0200 00C0                  		andi.b	#-$40,d0
00015E18 1140 0026                  		move.b	d0,$26(a0)
00015E1C                            
00015E1C                            Obj67_Action:				; XREF: Obj67_Index
00015E1C 6100 0000                  		bsr.w	Obj67_MoveSonic
00015E20 6100 0000                  		bsr.w	Obj67_MoveSpot
00015E24 6000 0000                  		bra.w	Obj67_ChkDel
00015E28                            ; ===========================================================================
00015E28                            
00015E28                            Obj67_MoveSonic:			; XREF: Obj67_Action
00015E28 7400                       		moveq	#0,d2
00015E2A 1428 0038                  		move.b	$38(a0),d2
00015E2E 3602                       		move.w	d2,d3
00015E30 D643                       		add.w	d3,d3
00015E32 43F8 D000                  		lea	($FFFFD000).w,a1
00015E36 3029 0008                  		move.w	8(a1),d0
00015E3A 9068 0032                  		sub.w	$32(a0),d0
00015E3E D042                       		add.w	d2,d0
00015E40 B043                       		cmp.w	d3,d0
00015E42 6400                       		bcc.s	loc_155A8
00015E44 3229 000C                  		move.w	$C(a1),d1
00015E48 9268 0030                  		sub.w	$30(a0),d1
00015E4C D242                       		add.w	d2,d1
00015E4E B243                       		cmp.w	d3,d1
00015E50 6400                       		bcc.s	loc_155A8
00015E52 0829 0001 0022             		btst	#1,$22(a1)
00015E58 6700                       		beq.s	loc_155B8
00015E5A 4228 003A                  		clr.b	$3A(a0)
00015E5E 4E75                       		rts	
00015E60                            ; ===========================================================================
00015E60                            
00015E60                            loc_155A8:
00015E60 4A28 003A                  		tst.b	$3A(a0)
00015E64 6700                       		beq.s	locret_155B6
00015E66 4229 0038                  		clr.b	$38(a1)
00015E6A 4228 003A                  		clr.b	$3A(a0)
00015E6E                            
00015E6E                            locret_155B6:
00015E6E 4E75                       		rts	
00015E70                            ; ===========================================================================
00015E70                            
00015E70                            loc_155B8:
00015E70 4A28 003A                  		tst.b	$3A(a0)
00015E74 6600                       		bne.s	loc_155E2
00015E76 117C 0001 003A             		move.b	#1,$3A(a0)
00015E7C 0829 0002 0022             		btst	#2,$22(a1)
00015E82 6600                       		bne.s	loc_155D0
00015E84 4229 001C                  		clr.b	$1C(a1)
00015E88                            
00015E88                            loc_155D0:
00015E88 08A9 0005 0022             		bclr	#5,$22(a1)
00015E8E 137C 0001 001D             		move.b	#1,$1D(a1)
00015E94 137C 0001 0038             		move.b	#1,$38(a1)
00015E9A                            
00015E9A                            loc_155E2:
00015E9A 3029 0014                  		move.w	$14(a1),d0
00015E9E 4A68 0036                  		tst.w	$36(a0)
00015EA2 6A00                       		bpl.s	loc_15608
00015EA4 0C40 FC00                  		cmpi.w	#-$400,d0
00015EA8 6F00                       		ble.s	loc_155FA
00015EAA 337C FC00 0014             		move.w	#-$400,$14(a1)
00015EB0 4E75                       		rts	
00015EB2                            ; ===========================================================================
00015EB2                            
00015EB2                            loc_155FA:
00015EB2 0C40 F100                  		cmpi.w	#-$F00,d0
00015EB6 6C00                       		bge.s	locret_15606
00015EB8 337C F100 0014             		move.w	#-$F00,$14(a1)
00015EBE                            
00015EBE                            locret_15606:
00015EBE 4E75                       		rts	
00015EC0                            ; ===========================================================================
00015EC0                            
00015EC0                            loc_15608:
00015EC0 0C40 0400                  		cmpi.w	#$400,d0
00015EC4 6C00                       		bge.s	loc_15616
00015EC6 337C 0400 0014             		move.w	#$400,$14(a1)
00015ECC 4E75                       		rts	
00015ECE                            ; ===========================================================================
00015ECE                            
00015ECE                            loc_15616:
00015ECE 0C40 0F00                  		cmpi.w	#$F00,d0
00015ED2 6F00                       		ble.s	locret_15622
00015ED4 337C 0F00 0014             		move.w	#$F00,$14(a1)
00015EDA                            
00015EDA                            locret_15622:
00015EDA 4E75                       		rts	
00015EDC                            ; ===========================================================================
00015EDC                            
00015EDC                            Obj67_MoveSpot:				; XREF: Obj67_Action
00015EDC 3028 0036                  		move.w	$36(a0),d0
00015EE0 D168 0026                  		add.w	d0,$26(a0)
00015EE4 1028 0026                  		move.b	$26(a0),d0
00015EE8 4EB9 0000 2CAC             		jsr	(CalcSine).l
00015EEE 3428 0030                  		move.w	$30(a0),d2
00015EF2 3628 0032                  		move.w	$32(a0),d3
00015EF6 7800                       		moveq	#0,d4
00015EF8 1828 0034                  		move.b	$34(a0),d4
00015EFC E14C                       		lsl.w	#8,d4
00015EFE 2A04                       		move.l	d4,d5
00015F00 C9C0                       		muls.w	d0,d4
00015F02 4844                       		swap	d4
00015F04 CBC1                       		muls.w	d1,d5
00015F06 4845                       		swap	d5
00015F08 D842                       		add.w	d2,d4
00015F0A DA43                       		add.w	d3,d5
00015F0C 3144 000C                  		move.w	d4,$C(a0)
00015F10 3145 0008                  		move.w	d5,8(a0)
00015F14 4E75                       		rts	
00015F16                            ; ===========================================================================
00015F16                            
00015F16                            Obj67_ChkDel:				; XREF: Obj67_Action
00015F16 3028 0032                  		move.w	$32(a0),d0
00015F1A 0240 FF80                  		andi.w	#-$80,d0
00015F1E 3238 F700                  		move.w	($FFFFF700).w,d1
00015F22 0441 0080                  		subi.w	#$80,d1
00015F26 0241 FF80                  		andi.w	#-$80,d1
00015F2A 9041                       		sub.w	d1,d0
00015F2C 0C40 0280                  		cmpi.w	#$280,d0
00015F30 6200                       		bhi.s	Obj67_Delete
00015F32 4EF9 0000 DDC8             		jmp	DisplaySprite
00015F38                            ; ===========================================================================
00015F38                            
00015F38                            Obj67_Delete:
00015F38 4EF9 0000 DE04             		jmp	DeleteObject
00015F3E                            ; ===========================================================================
00015F3E                            ; ---------------------------------------------------------------------------
00015F3E                            ; Sprite mappings - disc that you run around (SBZ)
00015F3E                            ; (It's just a small blob that moves around in a circle. The disc itself is
00015F3E                            ; part of the level tiles.)
00015F3E                            ; ---------------------------------------------------------------------------
00015F3E                            Map_obj67:
00015F3E                            	include "_maps\obj67.asm"
00015F3E                            ; ---------------------------------------------------------------------------
00015F3E                            ; Sprite mappings - disc that you run around (SBZ)
00015F3E                            ; (It's just a small blob that moves around in a circle. The disc itself is
00015F3E                            ; part of the level tiles.)
00015F3E                            ; ---------------------------------------------------------------------------
00015F3E 0000                       		dc.w byte_15688-Map_obj67
00015F40 01                         byte_15688:	dc.b 1
00015F41 F805 0000 F8               		dc.b $F8, 5, 0,	0, $F8
00015F46                            		even
00015F46                            		even
00015F46                            
00015F46                            ; ===========================================================================
00015F46                            ; ---------------------------------------------------------------------------
00015F46                            ; Object 68 - conveyor belts (SBZ)
00015F46                            ; ---------------------------------------------------------------------------
00015F46                            
00015F46                            Obj68:					; XREF: Obj_Index
00015F46 7000                       		moveq	#0,d0
00015F48 1028 0024                  		move.b	$24(a0),d0
00015F4C 323B 0000                  		move.w	Obj68_Index(pc,d0.w),d1
00015F50 4EFB 1000                  		jmp	Obj68_Index(pc,d1.w)
00015F54                            ; ===========================================================================
00015F54 0000                       Obj68_Index:	dc.w Obj68_Main-Obj68_Index
00015F56 0000                       		dc.w Obj68_Action-Obj68_Index
00015F58                            ; ===========================================================================
00015F58                            
00015F58                            Obj68_Main:				; XREF: Obj68_Index
00015F58 5428 0024                  		addq.b	#2,$24(a0)
00015F5C 117C 0080 0038             		move.b	#128,$38(a0)	; set width to 128 pixels
00015F62 1228 0028                  		move.b	$28(a0),d1	; get object type
00015F66 0201 000F                  		andi.b	#$F,d1		; read only the	2nd digit
00015F6A 6700                       		beq.s	loc_156BA	; if zero, branch
00015F6C 117C 0038 0038             		move.b	#56,$38(a0)	; set width to 56 pixels
00015F72                            
00015F72                            loc_156BA:
00015F72 1228 0028                  		move.b	$28(a0),d1	; get object type
00015F76 0201 00F0                  		andi.b	#$F0,d1		; read only the	1st digit
00015F7A 4881                       		ext.w	d1
00015F7C E841                       		asr.w	#4,d1
00015F7E 3141 0036                  		move.w	d1,$36(a0)	; set belt speed
00015F82                            
00015F82                            Obj68_Action:				; XREF: Obj68_Index
00015F82 6100                       		bsr.s	Obj68_MoveSonic
00015F84 3028 0008                  		move.w	8(a0),d0
00015F88 0240 FF80                  		andi.w	#$FF80,d0
00015F8C 3238 F700                  		move.w	($FFFFF700).w,d1
00015F90 0441 0080                  		subi.w	#$80,d1
00015F94 0241 FF80                  		andi.w	#$FF80,d1
00015F98 9041                       		sub.w	d1,d0
00015F9A 0C40 0280                  		cmpi.w	#$280,d0
00015F9E 6200                       		bhi.s	Obj68_Delete
00015FA0 4E75                       		rts	
00015FA2                            ; ===========================================================================
00015FA2                            
00015FA2                            Obj68_Delete:
00015FA2 4EF9 0000 DE04             		jmp	DeleteObject
00015FA8                            ; ===========================================================================
00015FA8                            
00015FA8                            Obj68_MoveSonic:			; XREF: Obj68_Action
00015FA8 7400                       		moveq	#0,d2
00015FAA 1428 0038                  		move.b	$38(a0),d2
00015FAE 3602                       		move.w	d2,d3
00015FB0 D643                       		add.w	d3,d3
00015FB2 43F8 D000                  		lea	($FFFFD000).w,a1
00015FB6 3029 0008                  		move.w	8(a1),d0
00015FBA 9068 0008                  		sub.w	8(a0),d0
00015FBE D042                       		add.w	d2,d0
00015FC0 B043                       		cmp.w	d3,d0
00015FC2 6400                       		bcc.s	locret_1572E
00015FC4 3229 000C                  		move.w	$C(a1),d1
00015FC8 9268 000C                  		sub.w	$C(a0),d1
00015FCC 0641 0030                  		addi.w	#$30,d1
00015FD0 0C41 0030                  		cmpi.w	#$30,d1
00015FD4 6400                       		bcc.s	locret_1572E
00015FD6 0829 0001 0022             		btst	#1,$22(a1)
00015FDC 6600                       		bne.s	locret_1572E
00015FDE 3028 0036                  		move.w	$36(a0),d0
00015FE2 D169 0008                  		add.w	d0,8(a1)
00015FE6                            
00015FE6                            locret_1572E:
00015FE6 4E75                       		rts	
00015FE8                            
00015FE8                            ; ===========================================================================
00015FE8                            ; ---------------------------------------------------------------------------
00015FE8                            ; Object 69 - spinning platforms and trapdoors (SBZ)
00015FE8                            ; ---------------------------------------------------------------------------
00015FE8                            
00015FE8                            Obj69:					; XREF: Obj_Index
00015FE8 7000                       		moveq	#0,d0
00015FEA 1028 0024                  		move.b	$24(a0),d0
00015FEE 323B 0000                  		move.w	Obj69_Index(pc,d0.w),d1
00015FF2 4EFB 1000                  		jmp	Obj69_Index(pc,d1.w)
00015FF6                            ; ===========================================================================
00015FF6 0000                       Obj69_Index:	dc.w Obj69_Main-Obj69_Index
00015FF8 0000                       		dc.w Obj69_Trapdoor-Obj69_Index
00015FFA 0000                       		dc.w Obj69_Spinner-Obj69_Index
00015FFC                            ; ===========================================================================
00015FFC                            
00015FFC                            Obj69_Main:				; XREF: Obj69_Index
00015FFC 5428 0024                  		addq.b	#2,$24(a0)
00016000 217C 0000 0000 0004        		move.l	#Map_obj69,4(a0)
00016008 317C 4492 0002             		move.w	#$4492,2(a0)
0001600E 0028 0004 0001             		ori.b	#4,1(a0)
00016014 117C 0080 0019             		move.b	#$80,$19(a0)
0001601A 7000                       		moveq	#0,d0
0001601C 1028 0028                  		move.b	$28(a0),d0
00016020 0240 000F                  		andi.w	#$F,d0
00016024 C0FC 003C                  		mulu.w	#$3C,d0
00016028 3140 0032                  		move.w	d0,$32(a0)
0001602C 4A28 0028                  		tst.b	$28(a0)
00016030 6A00                       		bpl.s	Obj69_Trapdoor
00016032 5428 0024                  		addq.b	#2,$24(a0)
00016036 217C 0000 0000 0004        		move.l	#Map_obj69a,4(a0)
0001603E 317C 04DF 0002             		move.w	#$4DF,2(a0)
00016044 117C 0010 0019             		move.b	#$10,$19(a0)
0001604A 117C 0002 001C             		move.b	#2,$1C(a0)
00016050 7000                       		moveq	#0,d0
00016052 1028 0028                  		move.b	$28(a0),d0	; get object type
00016056 3200                       		move.w	d0,d1
00016058 0240 000F                  		andi.w	#$F,d0		; read only the	2nd digit
0001605C C0FC 0006                  		mulu.w	#6,d0		; multiply by 6
00016060 3140 0030                  		move.w	d0,$30(a0)	; set time delay
00016064 3140 0032                  		move.w	d0,$32(a0)
00016068 0241 0070                  		andi.w	#$70,d1
0001606C 0641 0010                  		addi.w	#$10,d1
00016070 E549                       		lsl.w	#2,d1
00016072 5341                       		subq.w	#1,d1
00016074 3141 0036                  		move.w	d1,$36(a0)
00016078 6000                       		bra.s	Obj69_Spinner
0001607A                            ; ===========================================================================
0001607A                            
0001607A                            Obj69_Trapdoor:				; XREF: Obj69_Index
0001607A 5368 0030                  		subq.w	#1,$30(a0)
0001607E 6A00                       		bpl.s	Obj69_Animate
00016080 3168 0032 0030             		move.w	$32(a0),$30(a0)
00016086 0868 0000 001C             		bchg	#0,$1C(a0)
0001608C 4A28 0001                  		tst.b	1(a0)
00016090 6A00                       		bpl.s	Obj69_Animate
00016092 303C 00BB                  		move.w	#$BB,d0
00016096 4EB9 0000 15C0             		jsr	(PlaySound_Special).l ;	play door sound
0001609C                            
0001609C                            Obj69_Animate:
0001609C 43F9 0000 0000             		lea	(Ani_obj69).l,a1
000160A2 4EB9 0000 AE88             		jsr	AnimateSprite
000160A8 4A28 001A                  		tst.b	$1A(a0)		; is frame number 0 displayed?
000160AC 6600                       		bne.s	Obj69_NotSolid	; if not, branch
000160AE 323C 004B                  		move.w	#$4B,d1
000160B2 343C 000C                  		move.w	#$C,d2
000160B6 3602                       		move.w	d2,d3
000160B8 5243                       		addq.w	#1,d3
000160BA 3828 0008                  		move.w	8(a0),d4
000160BE 6100 A0D8                  		bsr.w	SolidObject
000160C2 6000 9DAC                  		bra.w	MarkObjGone
000160C6                            ; ===========================================================================
000160C6                            
000160C6                            Obj69_NotSolid:
000160C6 0828 0003 0022             		btst	#3,$22(a0)
000160CC 6700                       		beq.s	Obj69_Display
000160CE 43F8 D000                  		lea	($FFFFD000).w,a1
000160D2 08A9 0003 0022             		bclr	#3,$22(a1)
000160D8 08A8 0003 0022             		bclr	#3,$22(a0)
000160DE 4228 0025                  		clr.b	$25(a0)
000160E2                            
000160E2                            Obj69_Display:
000160E2 6000 9D8C                  		bra.w	MarkObjGone
000160E6                            ; ===========================================================================
000160E6                            
000160E6                            Obj69_Spinner:				; XREF: Obj69_Index
000160E6 3038 FE04                  		move.w	($FFFFFE04).w,d0
000160EA C068 0036                  		and.w	$36(a0),d0
000160EE 6600                       		bne.s	Obj69_Delay
000160F0 117C 0001 0034             		move.b	#1,$34(a0)
000160F6                            
000160F6                            Obj69_Delay:
000160F6 4A28 0034                  		tst.b	$34(a0)
000160FA 6700                       		beq.s	Obj69_Animate2
000160FC 5368 0030                  		subq.w	#1,$30(a0)
00016100 6A00                       		bpl.s	Obj69_Animate2
00016102 3168 0032 0030             		move.w	$32(a0),$30(a0)
00016108 4228 0034                  		clr.b	$34(a0)
0001610C 0868 0000 001C             		bchg	#0,$1C(a0)
00016112                            
00016112                            Obj69_Animate2:
00016112 43F9 0000 0000             		lea	(Ani_obj69).l,a1
00016118 4EB9 0000 AE88             		jsr	AnimateSprite
0001611E 4A28 001A                  		tst.b	$1A(a0)		; check	if frame number	0 is displayed
00016122 6600                       		bne.s	Obj69_NotSolid2	; if not, branch
00016124 323C 001B                  		move.w	#$1B,d1
00016128 343C 0007                  		move.w	#7,d2
0001612C 3602                       		move.w	d2,d3
0001612E 5243                       		addq.w	#1,d3
00016130 3828 0008                  		move.w	8(a0),d4
00016134 6100 A062                  		bsr.w	SolidObject
00016138 6000 9D36                  		bra.w	MarkObjGone
0001613C                            ; ===========================================================================
0001613C                            
0001613C                            Obj69_NotSolid2:
0001613C 0828 0003 0022             		btst	#3,$22(a0)
00016142 6700                       		beq.s	Obj69_Display2
00016144 43F8 D000                  		lea	($FFFFD000).w,a1
00016148 08A9 0003 0022             		bclr	#3,$22(a1)
0001614E 08A8 0003 0022             		bclr	#3,$22(a0)
00016154 4228 0025                  		clr.b	$25(a0)
00016158                            
00016158                            Obj69_Display2:
00016158 6000 9D16                  		bra.w	MarkObjGone
0001615C                            ; ===========================================================================
0001615C                            Ani_obj69:
0001615C                            	include "_anim\obj69.asm"
0001615C                            ; ---------------------------------------------------------------------------
0001615C                            ; Animation script - trapdoor (SBZ)
0001615C                            ; ---------------------------------------------------------------------------
0001615C 0000                       		dc.w byte_158AC-Ani_obj69
0001615E 0000                       		dc.w byte_158B2-Ani_obj69
00016160 0000                       		dc.w byte_158B8-Ani_obj69
00016162 0000                       		dc.w byte_158CC-Ani_obj69
00016164 0300 0102 FE01             byte_158AC:	dc.b 3,	0, 1, 2, $FE, 1
0001616A 0302 0100 FE01             byte_158B2:	dc.b 3,	2, 1, 0, $FE, 1
00016170 0100 0102 0304 4342 4140+  byte_158B8:	dc.b 1,	0, 1, 2, 3, 4, $43, $42, $41, $40, $61,	$62, $63
0001617D 6423 2221 00FE 01          		dc.b $64, $23, $22, $21, 0, $FE, 1
00016184 0100 0102 0304 4342 4140+  byte_158CC:	dc.b 1,	0, 1, 2, 3, 4, $43, $42, $41, $40, $61,	$62, $63
00016191 6423 2221 00FE 01          		dc.b $64, $23, $22, $21, 0, $FE, 1
00016198                            		even
00016198                            		even
00016198                            
00016198                            ; ---------------------------------------------------------------------------
00016198                            ; Sprite mappings - trapdoor (SBZ)
00016198                            ; ---------------------------------------------------------------------------
00016198                            Map_obj69:
00016198                            	include "_maps\obj69.asm"
00016198                            ; ---------------------------------------------------------------------------
00016198                            ; Sprite mappings - trapdoor (SBZ)
00016198                            ; ---------------------------------------------------------------------------
00016198 0000                       		dc.w byte_158E6-Map_obj69
0001619A 0000                       		dc.w byte_158FB-Map_obj69
0001619C 0000                       		dc.w byte_15924-Map_obj69
0001619E 04                         byte_158E6:	dc.b 4
0001619F F40E 0000 C0               		dc.b $F4, $E, 0, 0, $C0
000161A4 F40E 0800 E0               		dc.b $F4, $E, 8, 0, $E0
000161A9 F40E 0000 00               		dc.b $F4, $E, 0, 0, 0
000161AE F40E 0800 20               		dc.b $F4, $E, 8, 0, $20
000161B3 08                         byte_158FB:	dc.b 8
000161B4 F20F 000C B6               		dc.b $F2, $F, 0, $C, $B6
000161B9 1A0F 180C D6               		dc.b $1A, $F, $18, $C, $D6
000161BE 020A 001C D6               		dc.b 2,	$A, 0, $1C, $D6
000161C3 120A 181C BE               		dc.b $12, $A, $18, $1C,	$BE
000161C8 F20F 080C 2A               		dc.b $F2, $F, 8, $C, $2A
000161CD 1A0F 100C 0A               		dc.b $1A, $F, $10, $C, $A
000161D2 020A 081C 12               		dc.b 2,	$A, 8, $1C, $12
000161D7 120A 101C 2A               		dc.b $12, $A, $10, $1C,	$2A
000161DC 04                         byte_15924:	dc.b 4
000161DD 000B 0025 B4               		dc.b 0,	$B, 0, $25, $B4
000161E2 200B 1025 B4               		dc.b $20, $B, $10, $25,	$B4
000161E7 000B 0025 34               		dc.b 0,	$B, 0, $25, $34
000161EC 200B 1025 34               		dc.b $20, $B, $10, $25,	$34
000161F2 00                         		even
000161F2 00                         		even
000161F2                            
000161F2                            ; ---------------------------------------------------------------------------
000161F2                            ; Sprite mappings - spinning platforms (SBZ)
000161F2                            ; ---------------------------------------------------------------------------
000161F2                            Map_obj69a:
000161F2                            	include "_maps\obj69a.asm"
000161F2                            ; ---------------------------------------------------------------------------
000161F2                            ; Sprite mappings - spinning platforms (SBZ)
000161F2                            ; ---------------------------------------------------------------------------
000161F2 0000 0000                  		dc.w byte_15944-Map_obj69a, byte_1594F-Map_obj69a
000161F6 0000 0000                  		dc.w byte_1595A-Map_obj69a, byte_15965-Map_obj69a
000161FA 0000                       		dc.w byte_15970-Map_obj69a
000161FC 02                         byte_15944:	dc.b 2
000161FD F805 0000 F0               		dc.b $F8, 5, 0,	0, $F0
00016202 F805 0800 00               		dc.b $F8, 5, 8,	0, 0
00016207 02                         byte_1594F:	dc.b 2
00016208 F00D 0014 F0               		dc.b $F0, $D, 0, $14, $F0
0001620D 000D 001C F0               		dc.b 0,	$D, 0, $1C, $F0
00016212 02                         byte_1595A:	dc.b 2
00016213 F009 0004 F0               		dc.b $F0, 9, 0,	4, $F0
00016218 0009 000A F8               		dc.b 0,	9, 0, $A, $F8
0001621D 02                         byte_15965:	dc.b 2
0001621E F009 0024 F0               		dc.b $F0, 9, 0,	$24, $F0
00016223 0009 002A F8               		dc.b 0,	9, 0, $2A, $F8
00016228 02                         byte_15970:	dc.b 2
00016229 F005 0010 F8               		dc.b $F0, 5, 0,	$10, $F8
0001622E 0005 1010 F8               		dc.b 0,	5, $10,	$10, $F8
00016234 00                         		even
00016234 00                         		even
00016234                            
00016234                            ; ===========================================================================
00016234                            ; ---------------------------------------------------------------------------
00016234                            ; Object 6A - ground saws and pizza cutters (SBZ)
00016234                            ; ---------------------------------------------------------------------------
00016234                            
00016234                            Obj6A:					; XREF: Obj_Index
00016234 7000                       		moveq	#0,d0
00016236 1028 0024                  		move.b	$24(a0),d0
0001623A 323B 0000                  		move.w	Obj6A_Index(pc,d0.w),d1
0001623E 4EFB 1000                  		jmp	Obj6A_Index(pc,d1.w)
00016242                            ; ===========================================================================
00016242 0000                       Obj6A_Index:	dc.w Obj6A_Main-Obj6A_Index
00016244 0000                       		dc.w Obj6A_Action-Obj6A_Index
00016246                            ; ===========================================================================
00016246                            
00016246                            Obj6A_Main:				; XREF: Obj6A_Index
00016246 5428 0024                  		addq.b	#2,$24(a0)
0001624A 217C 0000 0000 0004        		move.l	#Map_obj6A,4(a0)
00016252 317C 43B5 0002             		move.w	#$43B5,2(a0)
00016258 117C 0004 0001             		move.b	#4,1(a0)
0001625E 117C 0004 0018             		move.b	#4,$18(a0)
00016264 117C 0020 0019             		move.b	#$20,$19(a0)
0001626A 3168 0008 003A             		move.w	8(a0),$3A(a0)
00016270 3168 000C 0038             		move.w	$C(a0),$38(a0)
00016276 0C28 0003 0028             		cmpi.b	#3,$28(a0)
0001627C 6400                       		bcc.s	Obj6A_Action
0001627E 117C 00A2 0020             		move.b	#$A2,$20(a0)
00016284                            
00016284                            Obj6A_Action:				; XREF: Obj6A_Index
00016284 7000                       		moveq	#0,d0
00016286 1028 0028                  		move.b	$28(a0),d0
0001628A 0240 0007                  		andi.w	#7,d0
0001628E D040                       		add.w	d0,d0
00016290 323B 0000                  		move.w	Obj6A_TypeIndex(pc,d0.w),d1
00016294 4EBB 1000                  		jsr	Obj6A_TypeIndex(pc,d1.w)
00016298 3028 003A                  		move.w	$3A(a0),d0
0001629C 0240 FF80                  		andi.w	#$FF80,d0
000162A0 3238 F700                  		move.w	($FFFFF700).w,d1
000162A4 0441 0080                  		subi.w	#$80,d1
000162A8 0241 FF80                  		andi.w	#$FF80,d1
000162AC 9041                       		sub.w	d1,d0
000162AE 0C40 0280                  		cmpi.w	#$280,d0
000162B2 6200                       		bhi.s	Obj6A_Delete
000162B4 4EF9 0000 DDC8             		jmp	DisplaySprite
000162BA                            ; ===========================================================================
000162BA                            
000162BA                            Obj6A_Delete:
000162BA 4EF9 0000 DE04             		jmp	DeleteObject
000162C0                            ; ===========================================================================
000162C0 0000 0000                  Obj6A_TypeIndex:dc.w Obj6A_Type00-Obj6A_TypeIndex, Obj6A_Type01-Obj6A_TypeIndex
000162C4 0000 0000                  		dc.w Obj6A_Type02-Obj6A_TypeIndex, Obj6A_Type03-Obj6A_TypeIndex
000162C8 0000                       		dc.w Obj6A_Type04-Obj6A_TypeIndex
000162CA                            ; ===========================================================================
000162CA                            
000162CA                            Obj6A_Type00:				; XREF: Obj6A_TypeIndex
000162CA 4E75                       		rts	
000162CC                            ; ===========================================================================
000162CC                            
000162CC                            Obj6A_Type01:				; XREF: Obj6A_TypeIndex
000162CC 323C 0060                  		move.w	#$60,d1
000162D0 7000                       		moveq	#0,d0
000162D2 1038 FE6C                  		move.b	($FFFFFE6C).w,d0
000162D6 0828 0000 0022             		btst	#0,$22(a0)
000162DC 6700                       		beq.s	Obj6A_Animate01
000162DE 4440                       		neg.w	d0
000162E0 D041                       		add.w	d1,d0
000162E2                            
000162E2                            Obj6A_Animate01:
000162E2 3228 003A                  		move.w	$3A(a0),d1
000162E6 9240                       		sub.w	d0,d1
000162E8 3141 0008                  		move.w	d1,8(a0)	; move saw sideways
000162EC 5328 001E                  		subq.b	#1,$1E(a0)
000162F0 6A00                       		bpl.s	loc_15A46
000162F2 117C 0002 001E             		move.b	#2,$1E(a0)	; time between frame changes
000162F8 0868 0000 001A             		bchg	#0,$1A(a0)	; change frame
000162FE                            
000162FE                            loc_15A46:
000162FE 4A28 0001                  		tst.b	1(a0)
00016302 6A00                       		bpl.s	locret_15A60
00016304 3038 FE04                  		move.w	($FFFFFE04).w,d0
00016308 0240 000F                  		andi.w	#$F,d0
0001630C 6600                       		bne.s	locret_15A60
0001630E 303C 00B0                  		move.w	#$B0,d0
00016312 4EB9 0000 15C0             		jsr	(PlaySound_Special).l ;	play saw sound
00016318                            
00016318                            locret_15A60:
00016318 4E75                       		rts	
0001631A                            ; ===========================================================================
0001631A                            
0001631A                            Obj6A_Type02:				; XREF: Obj6A_TypeIndex
0001631A 323C 0030                  		move.w	#$30,d1
0001631E 7000                       		moveq	#0,d0
00016320 1038 FE64                  		move.b	($FFFFFE64).w,d0
00016324 0828 0000 0022             		btst	#0,$22(a0)
0001632A 6700                       		beq.s	Obj6A_Animate02
0001632C 4440                       		neg.w	d0
0001632E 0640 0080                  		addi.w	#$80,d0
00016332                            
00016332                            Obj6A_Animate02:
00016332 3228 0038                  		move.w	$38(a0),d1
00016336 9240                       		sub.w	d0,d1
00016338 3141 000C                  		move.w	d1,$C(a0)	; move saw vertically
0001633C 5328 001E                  		subq.b	#1,$1E(a0)
00016340 6A00                       		bpl.s	loc_15A96
00016342 117C 0002 001E             		move.b	#2,$1E(a0)
00016348 0868 0000 001A             		bchg	#0,$1A(a0)
0001634E                            
0001634E                            loc_15A96:
0001634E 4A28 0001                  		tst.b	1(a0)
00016352 6A00                       		bpl.s	locret_15AB0
00016354 1038 FE64                  		move.b	($FFFFFE64).w,d0
00016358 0C00 0018                  		cmpi.b	#$18,d0
0001635C 6600                       		bne.s	locret_15AB0
0001635E 303C 00B0                  		move.w	#$B0,d0
00016362 4EB9 0000 15C0             		jsr	(PlaySound_Special).l ;	play saw sound
00016368                            
00016368                            locret_15AB0:
00016368 4E75                       		rts	
0001636A                            ; ===========================================================================
0001636A                            
0001636A                            Obj6A_Type03:				; XREF: Obj6A_TypeIndex
0001636A 4A28 003D                  		tst.b	$3D(a0)
0001636E 6600                       		bne.s	Obj6A_Animate03
00016370 3038 D008                  		move.w	($FFFFD008).w,d0
00016374 0440 00C0                  		subi.w	#$C0,d0
00016378 6500                       		bcs.s	loc_15B02
0001637A 9068 0008                  		sub.w	8(a0),d0
0001637E 6500                       		bcs.s	loc_15B02
00016380 3038 D00C                  		move.w	($FFFFD00C).w,d0
00016384 0440 0080                  		subi.w	#$80,d0
00016388 B068 000C                  		cmp.w	$C(a0),d0
0001638C 6400                       		bcc.s	locret_15B04
0001638E 0640 0100                  		addi.w	#$100,d0
00016392 B068 000C                  		cmp.w	$C(a0),d0
00016396 6500                       		bcs.s	locret_15B04
00016398 117C 0001 003D             		move.b	#1,$3D(a0)
0001639E 317C 0600 0010             		move.w	#$600,$10(a0)	; move object to the right
000163A4 117C 00A2 0020             		move.b	#$A2,$20(a0)
000163AA 117C 0002 001A             		move.b	#2,$1A(a0)
000163B0 303C 00B0                  		move.w	#$B0,d0
000163B4 4EB9 0000 15C0             		jsr	(PlaySound_Special).l ;	play saw sound
000163BA                            
000163BA                            loc_15B02:
000163BA 588F                       		addq.l	#4,sp
000163BC                            
000163BC                            locret_15B04:
000163BC 4E75                       		rts	
000163BE                            ; ===========================================================================
000163BE                            
000163BE                            Obj6A_Animate03:			; XREF: ROM:00015AB6j
000163BE 4EB9 0000 DDA2             		jsr	SpeedToPos
000163C4 3168 0008 003A             		move.w	8(a0),$3A(a0)
000163CA 5328 001E                  		subq.b	#1,$1E(a0)
000163CE 6A00                       		bpl.s	locret_15B24
000163D0 117C 0002 001E             		move.b	#2,$1E(a0)
000163D6 0868 0000 001A             		bchg	#0,$1A(a0)
000163DC                            
000163DC                            locret_15B24:
000163DC 4E75                       		rts	
000163DE                            ; ===========================================================================
000163DE                            
000163DE                            Obj6A_Type04:				; XREF: Obj6A_TypeIndex
000163DE 4A28 003D                  		tst.b	$3D(a0)
000163E2 6600                       		bne.s	Obj6A_Animate04
000163E4 3038 D008                  		move.w	($FFFFD008).w,d0
000163E8 0640 00E0                  		addi.w	#$E0,d0
000163EC 9068 0008                  		sub.w	8(a0),d0
000163F0 6400                       		bcc.s	loc_15B74
000163F2 3038 D00C                  		move.w	($FFFFD00C).w,d0
000163F6 0440 0080                  		subi.w	#$80,d0
000163FA B068 000C                  		cmp.w	$C(a0),d0
000163FE 6400                       		bcc.s	locret_15B76
00016400 0640 0100                  		addi.w	#$100,d0
00016404 B068 000C                  		cmp.w	$C(a0),d0
00016408 6500                       		bcs.s	locret_15B76
0001640A 117C 0001 003D             		move.b	#1,$3D(a0)
00016410 317C FA00 0010             		move.w	#-$600,$10(a0)	; move object to the left
00016416 117C 00A2 0020             		move.b	#$A2,$20(a0)
0001641C 117C 0002 001A             		move.b	#2,$1A(a0)
00016422 303C 00B0                  		move.w	#$B0,d0
00016426 4EB9 0000 15C0             		jsr	(PlaySound_Special).l ;	play saw sound
0001642C                            
0001642C                            loc_15B74:
0001642C 588F                       		addq.l	#4,sp
0001642E                            
0001642E                            locret_15B76:
0001642E 4E75                       		rts	
00016430                            ; ===========================================================================
00016430                            
00016430                            Obj6A_Animate04:
00016430 4EB9 0000 DDA2             		jsr	SpeedToPos
00016436 3168 0008 003A             		move.w	8(a0),$3A(a0)
0001643C 5328 001E                  		subq.b	#1,$1E(a0)
00016440 6A00                       		bpl.s	locret_15B96
00016442 117C 0002 001E             		move.b	#2,$1E(a0)
00016448 0868 0000 001A             		bchg	#0,$1A(a0)
0001644E                            
0001644E                            locret_15B96:
0001644E 4E75                       		rts	
00016450                            ; ===========================================================================
00016450                            ; ---------------------------------------------------------------------------
00016450                            ; Sprite mappings - ground saws	and pizza cutters (SBZ)
00016450                            ; ---------------------------------------------------------------------------
00016450                            Map_obj6A:
00016450                            	include "_maps\obj6A.asm"
00016450                            ; ---------------------------------------------------------------------------
00016450                            ; Sprite mappings - ground saws	and pizza cutters (SBZ)
00016450                            ; ---------------------------------------------------------------------------
00016450 0000 0000                  		dc.w byte_15BA0-Map_obj6A, byte_15BC4-Map_obj6A
00016454 0000 0000                  		dc.w byte_15BE8-Map_obj6A, byte_15BFD-Map_obj6A
00016458 07                         byte_15BA0:	dc.b 7
00016459 C401 0020 FC               		dc.b $C4, 1, 0,	$20, $FC
0001645E D401 0020 FC               		dc.b $D4, 1, 0,	$20, $FC
00016463 E403 0020 FC               		dc.b $E4, 3, 0,	$20, $FC
00016468 E00F 0000 E0               		dc.b $E0, $F, 0, 0, $E0
0001646D E00F 0800 00               		dc.b $E0, $F, 8, 0, 0
00016472 000F 1000 E0               		dc.b 0,	$F, $10, 0, $E0
00016477 000F 1800 00               		dc.b 0,	$F, $18, 0, 0
0001647C 07                         byte_15BC4:	dc.b 7
0001647D C401 0020 FC               		dc.b $C4, 1, 0,	$20, $FC
00016482 D401 0020 FC               		dc.b $D4, 1, 0,	$20, $FC
00016487 E403 0020 FC               		dc.b $E4, 3, 0,	$20, $FC
0001648C E00F 0010 E0               		dc.b $E0, $F, 0, $10, $E0
00016491 E00F 0810 00               		dc.b $E0, $F, 8, $10, 0
00016496 000F 1010 E0               		dc.b 0,	$F, $10, $10, $E0
0001649B 000F 1810 00               		dc.b 0,	$F, $18, $10, 0
000164A0 04                         byte_15BE8:	dc.b 4
000164A1 E00F 0000 E0               		dc.b $E0, $F, 0, 0, $E0
000164A6 E00F 0800 00               		dc.b $E0, $F, 8, 0, 0
000164AB 000F 1000 E0               		dc.b 0,	$F, $10, 0, $E0
000164B0 000F 1800 00               		dc.b 0,	$F, $18, 0, 0
000164B5 04                         byte_15BFD:	dc.b 4
000164B6 E00F 0010 E0               		dc.b $E0, $F, 0, $10, $E0
000164BB E00F 0810 00               		dc.b $E0, $F, 8, $10, 0
000164C0 000F 1010 E0               		dc.b 0,	$F, $10, $10, $E0
000164C5 000F 1810 00               		dc.b 0,	$F, $18, $10, 0
000164CA                            		even
000164CA                            		even
000164CA                            
000164CA                            ; ===========================================================================
000164CA                            ; ---------------------------------------------------------------------------
000164CA                            ; Object 6B - stomper (SBZ)
000164CA                            ; ---------------------------------------------------------------------------
000164CA                            
000164CA                            Obj6B:					; XREF: Obj_Index
000164CA 7000                       		moveq	#0,d0
000164CC 1028 0024                  		move.b	$24(a0),d0
000164D0 323B 0000                  		move.w	Obj6B_Index(pc,d0.w),d1
000164D4 4EFB 1000                  		jmp	Obj6B_Index(pc,d1.w)
000164D8                            ; ===========================================================================
000164D8 0000                       Obj6B_Index:	dc.w Obj6B_Main-Obj6B_Index
000164DA 0000                       		dc.w Obj6B_Action-Obj6B_Index
000164DC                            
000164DC 400C 8001                  Obj6B_Var:	dc.b  $40,  $C,	$80,   1 ; width, height, ????,	type number
000164E0 1C20 3803                  		dc.b  $1C, $20,	$38,   3
000164E4 1C20 4004                  		dc.b  $1C, $20,	$40,   4
000164E8 1C20 6004                  		dc.b  $1C, $20,	$60,   4
000164EC 8040 0005                  		dc.b  $80, $40,	  0,   5
000164F0                            ; ===========================================================================
000164F0                            
000164F0                            Obj6B_Main:				; XREF: Obj6B_Index
000164F0 5428 0024                  		addq.b	#2,$24(a0)
000164F4 7000                       		moveq	#0,d0
000164F6 1028 0028                  		move.b	$28(a0),d0
000164FA E448                       		lsr.w	#2,d0
000164FC 0240 001C                  		andi.w	#$1C,d0
00016500 47FB 00DA                  		lea	Obj6B_Var(pc,d0.w),a3
00016504 115B 0019                  		move.b	(a3)+,$19(a0)
00016508 115B 0016                  		move.b	(a3)+,$16(a0)
0001650C E448                       		lsr.w	#2,d0
0001650E 1140 001A                  		move.b	d0,$1A(a0)
00016512 217C 0000 0000 0004        		move.l	#Map_obj6B,4(a0)
0001651A 317C 22C0 0002             		move.w	#$22C0,2(a0)
00016520 0C38 0001 FE10             		cmpi.b	#1,($FFFFFE10).w ; check if level is LZ/SBZ3
00016526 6600                       		bne.s	Obj6B_SBZ12	; if not, branch
00016528 08F8 0000 F7CB             		bset	#0,($FFFFF7CB).w
0001652E 6700                       		beq.s	Obj6B_SBZ3
00016530                            
00016530                            Obj6B_ChkGone:				; XREF: Obj6B_SBZ3
00016530 45F8 FC00                  		lea	($FFFFFC00).w,a2
00016534 7000                       		moveq	#0,d0
00016536 1028 0023                  		move.b	$23(a0),d0
0001653A 6700                       		beq.s	Obj6B_Delete
0001653C 08B2 0007 0002             		bclr	#7,2(a2,d0.w)
00016542                            
00016542                            Obj6B_Delete:
00016542 4EF9 0000 DE04             		jmp	DeleteObject
00016548                            ; ===========================================================================
00016548                            
00016548                            Obj6B_SBZ3:				; XREF: Obj6B_Main
00016548 317C 41F0 0002             		move.w	#$41F0,2(a0)
0001654E 0C68 0A80 0008             		cmpi.w	#$A80,8(a0)
00016554 6600                       		bne.s	Obj6B_SBZ12
00016556 45F8 FC00                  		lea	($FFFFFC00).w,a2
0001655A 7000                       		moveq	#0,d0
0001655C 1028 0023                  		move.b	$23(a0),d0
00016560 6700                       		beq.s	Obj6B_SBZ12
00016562 0832 0000 0002             		btst	#0,2(a2,d0.w)
00016568 6700                       		beq.s	Obj6B_SBZ12
0001656A 4238 F7CB                  		clr.b	($FFFFF7CB).w
0001656E 60C0                       		bra.s	Obj6B_ChkGone
00016570                            ; ===========================================================================
00016570                            
00016570                            Obj6B_SBZ12:				; XREF: Obj6B_Main
00016570 0028 0004 0001             		ori.b	#4,1(a0)
00016576 117C 0004 0018             		move.b	#4,$18(a0)
0001657C 3168 0008 0034             		move.w	8(a0),$34(a0)
00016582 3168 000C 0030             		move.w	$C(a0),$30(a0)
00016588 7000                       		moveq	#0,d0
0001658A 101B                       		move.b	(a3)+,d0
0001658C 3140 003C                  		move.w	d0,$3C(a0)
00016590 7000                       		moveq	#0,d0
00016592 1028 0028                  		move.b	$28(a0),d0
00016596 6A00                       		bpl.s	Obj6B_Action
00016598 0200 000F                  		andi.b	#$F,d0
0001659C 1140 003E                  		move.b	d0,$3E(a0)
000165A0 1153 0028                  		move.b	(a3),$28(a0)
000165A4 0C13 0005                  		cmpi.b	#5,(a3)
000165A8 6600                       		bne.s	Obj6B_ChkGone2
000165AA 08E8 0004 0001             		bset	#4,1(a0)
000165B0                            
000165B0                            Obj6B_ChkGone2:
000165B0 45F8 FC00                  		lea	($FFFFFC00).w,a2
000165B4 7000                       		moveq	#0,d0
000165B6 1028 0023                  		move.b	$23(a0),d0
000165BA 6700                       		beq.s	Obj6B_Action
000165BC 08B2 0007 0002             		bclr	#7,2(a2,d0.w)
000165C2                            
000165C2                            Obj6B_Action:				; XREF: Obj6B_Index
000165C2 3F28 0008                  		move.w	8(a0),-(sp)
000165C6 7000                       		moveq	#0,d0
000165C8 1028 0028                  		move.b	$28(a0),d0
000165CC 0240 000F                  		andi.w	#$F,d0
000165D0 D040                       		add.w	d0,d0
000165D2 323B 0000                  		move.w	Obj6B_TypeIndex(pc,d0.w),d1
000165D6 4EBB 1000                  		jsr	Obj6B_TypeIndex(pc,d1.w)
000165DA 381F                       		move.w	(sp)+,d4
000165DC 4A28 0001                  		tst.b	1(a0)
000165E0 6A00                       		bpl.s	Obj6B_ChkDel
000165E2 7200                       		moveq	#0,d1
000165E4 1228 0019                  		move.b	$19(a0),d1
000165E8 0641 000B                  		addi.w	#$B,d1
000165EC 7400                       		moveq	#0,d2
000165EE 1428 0016                  		move.b	$16(a0),d2
000165F2 3602                       		move.w	d2,d3
000165F4 5243                       		addq.w	#1,d3
000165F6 6100 9BA0                  		bsr.w	SolidObject
000165FA                            
000165FA                            Obj6B_ChkDel:
000165FA 3028 0034                  		move.w	$34(a0),d0
000165FE 0240 FF80                  		andi.w	#$FF80,d0
00016602 3238 F700                  		move.w	($FFFFF700).w,d1
00016606 0441 0080                  		subi.w	#$80,d1
0001660A 0241 FF80                  		andi.w	#$FF80,d1
0001660E 9041                       		sub.w	d1,d0
00016610 0C40 0280                  		cmpi.w	#$280,d0
00016614 6200                       		bhi.s	loc_15D64
00016616 4EF9 0000 DDC8             		jmp	DisplaySprite
0001661C                            ; ===========================================================================
0001661C                            
0001661C                            loc_15D64:
0001661C 0C38 0001 FE10             		cmpi.b	#1,($FFFFFE10).w
00016622 6600                       		bne.s	Obj6B_Delete2
00016624 4238 F7CB                  		clr.b	($FFFFF7CB).w
00016628 45F8 FC00                  		lea	($FFFFFC00).w,a2
0001662C 7000                       		moveq	#0,d0
0001662E 1028 0023                  		move.b	$23(a0),d0
00016632 6700                       		beq.s	Obj6B_Delete2
00016634 08B2 0007 0002             		bclr	#7,2(a2,d0.w)
0001663A                            
0001663A                            Obj6B_Delete2:
0001663A 4EF9 0000 DE04             		jmp	DeleteObject
00016640                            ; ===========================================================================
00016640 0000 0000                  Obj6B_TypeIndex:dc.w Obj6B_Type00-Obj6B_TypeIndex, Obj6B_Type01-Obj6B_TypeIndex
00016644 0000 0000                  		dc.w Obj6B_Type02-Obj6B_TypeIndex, Obj6B_Type03-Obj6B_TypeIndex
00016648 0000 0000                  		dc.w Obj6B_Type04-Obj6B_TypeIndex, Obj6B_Type05-Obj6B_TypeIndex
0001664C                            ; ===========================================================================
0001664C                            
0001664C                            Obj6B_Type00:				; XREF: Obj6B_TypeIndex
0001664C 4E75                       		rts	
0001664E                            ; ===========================================================================
0001664E                            
0001664E                            Obj6B_Type01:				; XREF: Obj6B_TypeIndex
0001664E 4A28 0038                  		tst.b	$38(a0)
00016652 6600                       		bne.s	loc_15DB4
00016654 45F8 F7E0                  		lea	($FFFFF7E0).w,a2
00016658 7000                       		moveq	#0,d0
0001665A 1028 003E                  		move.b	$3E(a0),d0
0001665E 0832 0000 0000             		btst	#0,(a2,d0.w)
00016664 6700                       		beq.s	loc_15DC2
00016666 117C 0001 0038             		move.b	#1,$38(a0)
0001666C                            
0001666C                            loc_15DB4:
0001666C 3028 003C                  		move.w	$3C(a0),d0
00016670 B068 003A                  		cmp.w	$3A(a0),d0
00016674 6700                       		beq.s	loc_15DE0
00016676 5468 003A                  		addq.w	#2,$3A(a0)
0001667A                            
0001667A                            loc_15DC2:
0001667A 3028 003A                  		move.w	$3A(a0),d0
0001667E 0828 0000 0022             		btst	#0,$22(a0)
00016684 6700                       		beq.s	loc_15DD4
00016686 4440                       		neg.w	d0
00016688 0640 0080                  		addi.w	#$80,d0
0001668C                            
0001668C                            loc_15DD4:
0001668C 3228 0034                  		move.w	$34(a0),d1
00016690 9240                       		sub.w	d0,d1
00016692 3141 0008                  		move.w	d1,8(a0)
00016696 4E75                       		rts	
00016698                            ; ===========================================================================
00016698                            
00016698                            loc_15DE0:
00016698 5228 0028                  		addq.b	#1,$28(a0)
0001669C 317C 00B4 0036             		move.w	#$B4,$36(a0)
000166A2 4228 0038                  		clr.b	$38(a0)
000166A6 45F8 FC00                  		lea	($FFFFFC00).w,a2
000166AA 7000                       		moveq	#0,d0
000166AC 1028 0023                  		move.b	$23(a0),d0
000166B0 67C8                       		beq.s	loc_15DC2
000166B2 08F2 0000 0002             		bset	#0,2(a2,d0.w)
000166B8 60C0                       		bra.s	loc_15DC2
000166BA                            ; ===========================================================================
000166BA                            
000166BA                            Obj6B_Type02:				; XREF: Obj6B_TypeIndex
000166BA 4A28 0038                  		tst.b	$38(a0)
000166BE 6600                       		bne.s	loc_15E14
000166C0 5368 0036                  		subq.w	#1,$36(a0)
000166C4 6600                       		bne.s	loc_15E1E
000166C6 117C 0001 0038             		move.b	#1,$38(a0)
000166CC                            
000166CC                            loc_15E14:
000166CC 4A68 003A                  		tst.w	$3A(a0)
000166D0 6700                       		beq.s	loc_15E3C
000166D2 5568 003A                  		subq.w	#2,$3A(a0)
000166D6                            
000166D6                            loc_15E1E:
000166D6 3028 003A                  		move.w	$3A(a0),d0
000166DA 0828 0000 0022             		btst	#0,$22(a0)
000166E0 6700                       		beq.s	loc_15E30
000166E2 4440                       		neg.w	d0
000166E4 0640 0080                  		addi.w	#$80,d0
000166E8                            
000166E8                            loc_15E30:
000166E8 3228 0034                  		move.w	$34(a0),d1
000166EC 9240                       		sub.w	d0,d1
000166EE 3141 0008                  		move.w	d1,8(a0)
000166F2 4E75                       		rts	
000166F4                            ; ===========================================================================
000166F4                            
000166F4                            loc_15E3C:
000166F4 5328 0028                  		subq.b	#1,$28(a0)
000166F8 4228 0038                  		clr.b	$38(a0)
000166FC 45F8 FC00                  		lea	($FFFFFC00).w,a2
00016700 7000                       		moveq	#0,d0
00016702 1028 0023                  		move.b	$23(a0),d0
00016706 67CE                       		beq.s	loc_15E1E
00016708 08B2 0000 0002             		bclr	#0,2(a2,d0.w)
0001670E 60C6                       		bra.s	loc_15E1E
00016710                            ; ===========================================================================
00016710                            
00016710                            Obj6B_Type03:				; XREF: Obj6B_TypeIndex
00016710 4A28 0038                  		tst.b	$38(a0)
00016714 6600                       		bne.s	loc_15E7C
00016716 4A68 003A                  		tst.w	$3A(a0)
0001671A 6700                       		beq.s	loc_15E6A
0001671C 5368 003A                  		subq.w	#1,$3A(a0)
00016720 6000                       		bra.s	loc_15E8E
00016722                            ; ===========================================================================
00016722                            
00016722                            loc_15E6A:
00016722 5368 0036                  		subq.w	#1,$36(a0)
00016726 6A00                       		bpl.s	loc_15E8E
00016728 317C 003C 0036             		move.w	#$3C,$36(a0)
0001672E 117C 0001 0038             		move.b	#1,$38(a0)
00016734                            
00016734                            loc_15E7C:
00016734 5068 003A                  		addq.w	#8,$3A(a0)
00016738 3028 003A                  		move.w	$3A(a0),d0
0001673C B068 003C                  		cmp.w	$3C(a0),d0
00016740 6600                       		bne.s	loc_15E8E
00016742 4228 0038                  		clr.b	$38(a0)
00016746                            
00016746                            loc_15E8E:
00016746 3028 003A                  		move.w	$3A(a0),d0
0001674A 0828 0000 0022             		btst	#0,$22(a0)
00016750 6700                       		beq.s	loc_15EA0
00016752 4440                       		neg.w	d0
00016754 0640 0038                  		addi.w	#$38,d0
00016758                            
00016758                            loc_15EA0:
00016758 3228 0030                  		move.w	$30(a0),d1
0001675C D240                       		add.w	d0,d1
0001675E 3141 000C                  		move.w	d1,$C(a0)
00016762 4E75                       		rts	
00016764                            ; ===========================================================================
00016764                            
00016764                            Obj6B_Type04:				; XREF: Obj6B_TypeIndex
00016764 4A28 0038                  		tst.b	$38(a0)
00016768 6600                       		bne.s	loc_15ED0
0001676A 4A68 003A                  		tst.w	$3A(a0)
0001676E 6700                       		beq.s	loc_15EBE
00016770 5168 003A                  		subq.w	#8,$3A(a0)
00016774 6000                       		bra.s	loc_15EF0
00016776                            ; ===========================================================================
00016776                            
00016776                            loc_15EBE:
00016776 5368 0036                  		subq.w	#1,$36(a0)
0001677A 6A00                       		bpl.s	loc_15EF0
0001677C 317C 003C 0036             		move.w	#$3C,$36(a0)
00016782 117C 0001 0038             		move.b	#1,$38(a0)
00016788                            
00016788                            loc_15ED0:
00016788 3028 003A                  		move.w	$3A(a0),d0
0001678C B068 003C                  		cmp.w	$3C(a0),d0
00016790 6700                       		beq.s	loc_15EE0
00016792 5068 003A                  		addq.w	#8,$3A(a0)
00016796 6000                       		bra.s	loc_15EF0
00016798                            ; ===========================================================================
00016798                            
00016798                            loc_15EE0:
00016798 5368 0036                  		subq.w	#1,$36(a0)
0001679C 6A00                       		bpl.s	loc_15EF0
0001679E 317C 003C 0036             		move.w	#$3C,$36(a0)
000167A4 4228 0038                  		clr.b	$38(a0)
000167A8                            
000167A8                            loc_15EF0:
000167A8 3028 003A                  		move.w	$3A(a0),d0
000167AC 0828 0000 0022             		btst	#0,$22(a0)
000167B2 6700                       		beq.s	loc_15F02
000167B4 4440                       		neg.w	d0
000167B6 0640 0038                  		addi.w	#$38,d0
000167BA                            
000167BA                            loc_15F02:
000167BA 3228 0030                  		move.w	$30(a0),d1
000167BE D240                       		add.w	d0,d1
000167C0 3141 000C                  		move.w	d1,$C(a0)
000167C4 4E75                       		rts	
000167C6                            ; ===========================================================================
000167C6                            
000167C6                            Obj6B_Type05:				; XREF: Obj6B_TypeIndex
000167C6 4A28 0038                  		tst.b	$38(a0)
000167CA 6600                       		bne.s	loc_15F3E
000167CC 45F8 F7E0                  		lea	($FFFFF7E0).w,a2
000167D0 7000                       		moveq	#0,d0
000167D2 1028 003E                  		move.b	$3E(a0),d0
000167D6 0832 0000 0000             		btst	#0,(a2,d0.w)
000167DC 6700                       		beq.s	locret_15F5C
000167DE 117C 0001 0038             		move.b	#1,$38(a0)
000167E4 45F8 FC00                  		lea	($FFFFFC00).w,a2
000167E8 7000                       		moveq	#0,d0
000167EA 1028 0023                  		move.b	$23(a0),d0
000167EE 6700                       		beq.s	loc_15F3E
000167F0 08F2 0000 0002             		bset	#0,2(a2,d0.w)
000167F6                            
000167F6                            loc_15F3E:
000167F6 04A8 0001 0000 0008        		subi.l	#$10000,8(a0)
000167FE 06A8 0000 8000 000C        		addi.l	#$8000,$C(a0)
00016806 3168 0008 0034             		move.w	8(a0),$34(a0)
0001680C 0C68 0980 0008             		cmpi.w	#$980,8(a0)
00016812 6700                       		beq.s	loc_15F5E
00016814                            
00016814                            locret_15F5C:
00016814 4E75                       		rts	
00016816                            ; ===========================================================================
00016816                            
00016816                            loc_15F5E:
00016816 4228 0028                  		clr.b	$28(a0)
0001681A 4228 0038                  		clr.b	$38(a0)
0001681E 4E75                       		rts	
00016820                            ; ===========================================================================
00016820                            ; ---------------------------------------------------------------------------
00016820                            ; Sprite mappings - stomper and	platforms (SBZ)
00016820                            ; ---------------------------------------------------------------------------
00016820                            Map_obj6B:
00016820                            	include "_maps\obj6B.asm"
00016820                            ; ---------------------------------------------------------------------------
00016820                            ; Sprite mappings - stomper and	platforms (SBZ)
00016820                            ; ---------------------------------------------------------------------------
00016820 0000 0000                  		dc.w byte_15F72-Map_obj6B, byte_15F87-Map_obj6B
00016824 0000 0000                  		dc.w byte_15F87-Map_obj6B, byte_15F87-Map_obj6B
00016828 0000                       		dc.w byte_15FB0-Map_obj6B
0001682A 04                         byte_15F72:	dc.b 4
0001682B F40E 21AF C0               		dc.b $F4, $E, $21, $AF,	$C0
00016830 F40E 21B2 E0               		dc.b $F4, $E, $21, $B2,	$E0
00016835 F40E 21B2 00               		dc.b $F4, $E, $21, $B2,	0
0001683A F40E 29AF 20               		dc.b $F4, $E, $29, $AF,	$20
0001683F 08                         byte_15F87:	dc.b 8
00016840 E00C 000C E4               		dc.b $E0, $C, 0, $C, $E4
00016845 E008 0010 04               		dc.b $E0, 8, 0,	$10, 4
0001684A E80E 2013 E4               		dc.b $E8, $E, $20, $13,	$E4
0001684F E80A 201F 04               		dc.b $E8, $A, $20, $1F,	4
00016854 000E 2013 E4               		dc.b 0,	$E, $20, $13, $E4
00016859 000A 201F 04               		dc.b 0,	$A, $20, $1F, 4
0001685E 180C 000C E4               		dc.b $18, $C, 0, $C, $E4
00016863 1808 0010 04               		dc.b $18, 8, 0,	$10, 4
00016868 0E                         byte_15FB0:	dc.b $E
00016869 C00F 0000 80               		dc.b $C0, $F, 0, 0, $80
0001686E C00F 0010 A0               		dc.b $C0, $F, 0, $10, $A0
00016873 C00F 0020 C0               		dc.b $C0, $F, 0, $20, $C0
00016878 C00F 0010 E0               		dc.b $C0, $F, 0, $10, $E0
0001687D C00F 0020 00               		dc.b $C0, $F, 0, $20, 0
00016882 C00F 0010 20               		dc.b $C0, $F, 0, $10, $20
00016887 C00F 0030 40               		dc.b $C0, $F, 0, $30, $40
0001688C C00D 0040 60               		dc.b $C0, $D, 0, $40, $60
00016891 E00F 0048 80               		dc.b $E0, $F, 0, $48, $80
00016896 E00F 0048 C0               		dc.b $E0, $F, 0, $48, $C0
0001689B E00F 0058 00               		dc.b $E0, $F, 0, $58, 0
000168A0 000F 0048 80               		dc.b 0,	$F, 0, $48, $80
000168A5 000F 0058 C0               		dc.b 0,	$F, 0, $58, $C0
000168AA 200F 0058 80               		dc.b $20, $F, 0, $58, $80
000168B0 00                         		even
000168B0 00                         		even
000168B0                            
000168B0                            ; ===========================================================================
000168B0                            ; ---------------------------------------------------------------------------
000168B0                            ; Object 6C - vanishing	platforms (SBZ)
000168B0                            ; ---------------------------------------------------------------------------
000168B0                            
000168B0                            Obj6C:					; XREF: Obj_Index
000168B0 7000                       		moveq	#0,d0
000168B2 1028 0024                  		move.b	$24(a0),d0
000168B6 323B 0000                  		move.w	Obj6C_Index(pc,d0.w),d1
000168BA 4EFB 1000                  		jmp	Obj6C_Index(pc,d1.w)
000168BE                            ; ===========================================================================
000168BE 0000                       Obj6C_Index:	dc.w Obj6C_Main-Obj6C_Index
000168C0 0000                       		dc.w Obj6C_Vanish-Obj6C_Index
000168C2 0000                       		dc.w Obj6C_Vanish-Obj6C_Index
000168C4 0000                       		dc.w loc_16068-Obj6C_Index
000168C6                            ; ===========================================================================
000168C6                            
000168C6                            Obj6C_Main:				; XREF: Obj6C_Index
000168C6 5C28 0024                  		addq.b	#6,$24(a0)
000168CA 217C 0000 0000 0004        		move.l	#Map_obj6C,4(a0)
000168D2 317C 44C3 0002             		move.w	#$44C3,2(a0)
000168D8 0028 0004 0001             		ori.b	#4,1(a0)
000168DE 117C 0010 0019             		move.b	#$10,$19(a0)
000168E4 117C 0004 0018             		move.b	#4,$18(a0)
000168EA 7000                       		moveq	#0,d0
000168EC 1028 0028                  		move.b	$28(a0),d0	; get object type
000168F0 0240 000F                  		andi.w	#$F,d0		; read only the	2nd digit
000168F4 5240                       		addq.w	#1,d0		; add 1
000168F6 EF48                       		lsl.w	#7,d0		; multiply by $80
000168F8 3200                       		move.w	d0,d1
000168FA 5340                       		subq.w	#1,d0
000168FC 3140 0030                  		move.w	d0,$30(a0)
00016900 3140 0032                  		move.w	d0,$32(a0)
00016904 7000                       		moveq	#0,d0
00016906 1028 0028                  		move.b	$28(a0),d0	; get object type
0001690A 0240 00F0                  		andi.w	#$F0,d0		; read only the	1st digit
0001690E 0641 0080                  		addi.w	#$80,d1
00016912 C0C1                       		mulu.w	d1,d0
00016914 E088                       		lsr.l	#8,d0
00016916 3140 0036                  		move.w	d0,$36(a0)
0001691A 5341                       		subq.w	#1,d1
0001691C 3141 0038                  		move.w	d1,$38(a0)
00016920                            
00016920                            loc_16068:				; XREF: Obj6C_Index
00016920 3038 FE04                  		move.w	($FFFFFE04).w,d0
00016924 9068 0036                  		sub.w	$36(a0),d0
00016928 C068 0038                  		and.w	$38(a0),d0
0001692C 6600                       		bne.s	Obj6C_Animate
0001692E 5928 0024                  		subq.b	#4,$24(a0)
00016932 6000                       		bra.s	Obj6C_Vanish
00016934                            ; ===========================================================================
00016934                            
00016934                            Obj6C_Animate:
00016934 43F9 0000 0000             		lea	(Ani_obj6C).l,a1
0001693A 4EB9 0000 AE88             		jsr	AnimateSprite
00016940 6000 952E                  		bra.w	MarkObjGone
00016944                            ; ===========================================================================
00016944                            
00016944                            Obj6C_Vanish:				; XREF: Obj6C_Index
00016944 5368 0030                  		subq.w	#1,$30(a0)
00016948 6A00                       		bpl.s	loc_160AA
0001694A 317C 007F 0030             		move.w	#127,$30(a0)
00016950 4A28 001C                  		tst.b	$1C(a0)
00016954 6700                       		beq.s	loc_160A4
00016956 3168 0032 0030             		move.w	$32(a0),$30(a0)
0001695C                            
0001695C                            loc_160A4:
0001695C 0868 0000 001C             		bchg	#0,$1C(a0)
00016962                            
00016962                            loc_160AA:
00016962 43F9 0000 0000             		lea	(Ani_obj6C).l,a1
00016968 4EB9 0000 AE88             		jsr	AnimateSprite
0001696E 0828 0001 001A             		btst	#1,$1A(a0)	; has platform vanished?
00016974 6600                       		bne.s	Obj6C_NotSolid	; if yes, branch
00016976 0C28 0002 0024             		cmpi.b	#2,$24(a0)
0001697C 6600                       		bne.s	loc_160D6
0001697E 7200                       		moveq	#0,d1
00016980 1228 0019                  		move.b	$19(a0),d1
00016984 4EB9 0000 7A48             		jsr	(PlatformObject).l
0001698A 6000 94E4                  		bra.w	MarkObjGone
0001698E                            ; ===========================================================================
0001698E                            
0001698E                            loc_160D6:
0001698E 7200                       		moveq	#0,d1
00016990 1228 0019                  		move.b	$19(a0),d1
00016994 4EB9 0000 7BBC             		jsr	(ExitPlatform).l
0001699A 3428 0008                  		move.w	8(a0),d2
0001699E 4EB9 0000 8126             		jsr	(MvSonicOnPtfm2).l
000169A4 6000 94CA                  		bra.w	MarkObjGone
000169A8                            ; ===========================================================================
000169A8                            
000169A8                            Obj6C_NotSolid:				; XREF: Obj6C_Vanish
000169A8 0828 0003 0022             		btst	#3,$22(a0)
000169AE 6700                       		beq.s	Obj6C_Display
000169B0 43F8 D000                  		lea	($FFFFD000).w,a1
000169B4 08A9 0003 0022             		bclr	#3,$22(a1)
000169BA 08A8 0003 0022             		bclr	#3,$22(a0)
000169C0 117C 0002 0024             		move.b	#2,$24(a0)
000169C6 4228 0025                  		clr.b	$25(a0)
000169CA                            
000169CA                            Obj6C_Display:
000169CA 6000 94A4                  		bra.w	MarkObjGone
000169CE                            ; ===========================================================================
000169CE                            Ani_obj6C:
000169CE                            	include "_anim\obj6C.asm"
000169CE                            ; ---------------------------------------------------------------------------
000169CE                            ; Animation script - vanishing platforms (SBZ)
000169CE                            ; ---------------------------------------------------------------------------
000169CE 0000                       		dc.w byte_1611A-Ani_obj6C
000169D0 0000                       		dc.w byte_16122-Ani_obj6C
000169D2 0700 0102 03FE 0100        byte_1611A:	dc.b 7,	0, 1, 2, 3, $FE, 1, 0
000169DA 0703 0201 00FE 0100        byte_16122:	dc.b 7,	3, 2, 1, 0, $FE, 1, 0
000169E2                            		even
000169E2                            		even
000169E2                            
000169E2                            ; ---------------------------------------------------------------------------
000169E2                            ; Sprite mappings - vanishing platforms	(SBZ)
000169E2                            ; ---------------------------------------------------------------------------
000169E2                            Map_obj6C:
000169E2                            	include "_maps\obj6C.asm"
000169E2                            ; ---------------------------------------------------------------------------
000169E2                            ; Sprite mappings - vanishing platforms	(SBZ)
000169E2                            ; ---------------------------------------------------------------------------
000169E2 0000 0000                  		dc.w byte_16132-Map_obj6C, byte_16138-Map_obj6C
000169E6 0000 0000                  		dc.w byte_1613E-Map_obj6C, byte_16144-Map_obj6C
000169EA 01                         byte_16132:	dc.b 1
000169EB F80F 0000 F0               		dc.b $F8, $F, 0, 0, $F0
000169F0 01                         byte_16138:	dc.b 1
000169F1 F807 0010 F8               		dc.b $F8, 7, 0,	$10, $F8
000169F6 01                         byte_1613E:	dc.b 1
000169F7 F803 0018 FC               		dc.b $F8, 3, 0,	$18, $FC
000169FC 00                         byte_16144:	dc.b 0
000169FE 00                         		even
000169FE 00                         		even
000169FE                            
000169FE                            ; ===========================================================================
000169FE                            ; ---------------------------------------------------------------------------
000169FE                            ; Object 6E - electrocution orbs (SBZ)
000169FE                            ; ---------------------------------------------------------------------------
000169FE                            
000169FE                            Obj6E:					; XREF: Obj_Index
000169FE 7000                       		moveq	#0,d0
00016A00 1028 0024                  		move.b	$24(a0),d0
00016A04 323B 0000                  		move.w	Obj6E_Index(pc,d0.w),d1
00016A08 4EFB 1000                  		jmp	Obj6E_Index(pc,d1.w)
00016A0C                            ; ===========================================================================
00016A0C 0000                       Obj6E_Index:	dc.w Obj6E_Main-Obj6E_Index
00016A0E 0000                       		dc.w Obj6E_Shock-Obj6E_Index
00016A10                            ; ===========================================================================
00016A10                            
00016A10                            Obj6E_Main:				; XREF: Obj6E_Index
00016A10 5428 0024                  		addq.b	#2,$24(a0)
00016A14 217C 0000 0000 0004        		move.l	#Map_obj6E,4(a0)
00016A1C 317C 047E 0002             		move.w	#$47E,2(a0)
00016A22 0028 0004 0001             		ori.b	#4,1(a0)
00016A28 117C 0028 0019             		move.b	#$28,$19(a0)
00016A2E 7000                       		moveq	#0,d0
00016A30 1028 0028                  		move.b	$28(a0),d0	; read object type
00016A34 E948                       		lsl.w	#4,d0		; multiply by $10
00016A36 5340                       		subq.w	#1,d0
00016A38 3140 0034                  		move.w	d0,$34(a0)
00016A3C                            
00016A3C                            Obj6E_Shock:				; XREF: Obj6E_Index
00016A3C 3038 FE04                  		move.w	($FFFFFE04).w,d0
00016A40 C068 0034                  		and.w	$34(a0),d0
00016A44 6600                       		bne.s	Obj6E_Animate
00016A46 117C 0001 001C             		move.b	#1,$1C(a0)	; run "shocking" animation
00016A4C 4A28 0001                  		tst.b	1(a0)
00016A50 6A00                       		bpl.s	Obj6E_Animate
00016A52 303C 00B1                  		move.w	#$B1,d0
00016A56 4EB9 0000 15C0             		jsr	(PlaySound_Special).l ;	play electricity sound
00016A5C                            
00016A5C                            Obj6E_Animate:
00016A5C 43F9 0000 0000             		lea	(Ani_obj6E).l,a1
00016A62 4EB9 0000 AE88             		jsr	AnimateSprite
00016A68 117C 0000 0020             		move.b	#0,$20(a0)
00016A6E 0C28 0004 001A             		cmpi.b	#4,$1A(a0)	; is frame number 4 displayed?
00016A74 6600                       		bne.s	Obj6E_Display	; if not, branch
00016A76 117C 00A4 0020             		move.b	#$A4,$20(a0)	; if yes, make object hurt Sonic
00016A7C                            
00016A7C                            Obj6E_Display:
00016A7C 6000 93F2                  		bra.w	MarkObjGone
00016A80                            ; ===========================================================================
00016A80                            Ani_obj6E:
00016A80                            	include "_anim\obj6E.asm"
00016A80                            ; ---------------------------------------------------------------------------
00016A80                            ; Animation script - electrocution orbs (SBZ)
00016A80                            ; ---------------------------------------------------------------------------
00016A80 0000                       		dc.w byte_161CC-Ani_obj6E
00016A82 0000                       		dc.w byte_161D0-Ani_obj6E
00016A84 0700 FF00                  byte_161CC:	dc.b 7,	0, $FF,	0
00016A88 0001 0101 0203 0304 0404+  byte_161D0:	dc.b 0,	1, 1, 1, 2, 3, 3, 4, 4,	4, 5, 5, 5, 0, $FD, 0
00016A98                            		even
00016A98                            		even
00016A98                            
00016A98                            ; ---------------------------------------------------------------------------
00016A98                            ; Sprite mappings - electrocution orbs (SBZ)
00016A98                            ; ---------------------------------------------------------------------------
00016A98                            Map_obj6E:
00016A98                            	include "_maps\obj6E.asm"
00016A98                            Map_26ed:
00016A98 0000                       Map_26ed_0: 	dc.w Map_26ed_C-Map_26ed
00016A9A 0000                       Map_26ed_2: 	dc.w Map_26ed_12-Map_26ed
00016A9C 0000                       Map_26ed_4: 	dc.w Map_26ed_1D-Map_26ed
00016A9E 0000                       Map_26ed_6: 	dc.w Map_26ed_3C-Map_26ed
00016AA0 0000                       Map_26ed_8: 	dc.w Map_26ed_65-Map_26ed
00016AA2 0000                       Map_26ed_A: 	dc.w Map_26ed_84-Map_26ed
00016AA4 01                         Map_26ed_C: 	dc.b $1
00016AA5 0805 0000 F8               	dc.b $8, $5, $0, $0, $F8
00016AAA 02                         Map_26ed_12: 	dc.b $2
00016AAB F80A 0004 F4               	dc.b $F8, $A, $0, $4, $F4
00016AB0 1008 000D F4               	dc.b $10, $8, $0, $D, $F4
00016AB5 06                         Map_26ed_1D: 	dc.b $6
00016AB6 F80A 0004 F4               	dc.b $F8, $A, $0, $4, $F4
00016ABB 1008 000D F4               	dc.b $10, $8, $0, $D, $F4
00016AC0 F605 0010 0C               	dc.b $F6, $5, $0, $10, $C
00016AC5 F605 0010 1C               	dc.b $F6, $5, $0, $10, $1C
00016ACA F605 0810 D4               	dc.b $F6, $5, $8, $10, $D4
00016ACF F605 0810 E4               	dc.b $F6, $5, $8, $10, $E4
00016AD4 08                         Map_26ed_3C: 	dc.b $8
00016AD5 F80A 0004 F4               	dc.b $F8, $A, $0, $4, $F4
00016ADA 1008 000D F4               	dc.b $10, $8, $0, $D, $F4
00016ADF F605 0010 0C               	dc.b $F6, $5, $0, $10, $C
00016AE4 F605 0010 1C               	dc.b $F6, $5, $0, $10, $1C
00016AE9 F605 0810 E4               	dc.b $F6, $5, $8, $10, $E4
00016AEE F605 0010 2C               	dc.b $F6, $5, $0, $10, $2C
00016AF3 F605 0810 D4               	dc.b $F6, $5, $8, $10, $D4
00016AF8 F605 0810 C4               	dc.b $F6, $5, $8, $10, $C4
00016AFD 06                         Map_26ed_65: 	dc.b $6
00016AFE F80A 0004 F4               	dc.b $F8, $A, $0, $4, $F4
00016B03 1008 000D F4               	dc.b $10, $8, $0, $D, $F4
00016B08 F605 0010 1C               	dc.b $F6, $5, $0, $10, $1C
00016B0D F605 0010 2C               	dc.b $F6, $5, $0, $10, $2C
00016B12 F605 0810 D4               	dc.b $F6, $5, $8, $10, $D4
00016B17 F605 0810 C4               	dc.b $F6, $5, $8, $10, $C4
00016B1C 04                         Map_26ed_84: 	dc.b $4
00016B1D F80A 0004 F4               	dc.b $F8, $A, $0, $4, $F4
00016B22 1008 000D F4               	dc.b $10, $8, $0, $D, $F4
00016B27 F605 0010 2C               	dc.b $F6, $5, $0, $10, $2C
00016B2C F605 0810 C4               	dc.b $F6, $5, $8, $10, $C4
00016B32 00                         	even
00016B32 00                         	even
00016B32                            
00016B32                            ; ===========================================================================
00016B32                            ; ---------------------------------------------------------------------------
00016B32                            ; Object 6F - spinning platforms that move around a conveyor belt (SBZ)
00016B32                            ; ---------------------------------------------------------------------------
00016B32                            
00016B32                            Obj6F:					; XREF: Obj_Index
00016B32 7000                       		moveq	#0,d0
00016B34 1028 0024                  		move.b	$24(a0),d0
00016B38 323B 0000                  		move.w	Obj6F_Index(pc,d0.w),d1
00016B3C 4EBB 1000                  		jsr	Obj6F_Index(pc,d1.w)
00016B40 3028 0030                  		move.w	$30(a0),d0
00016B44 0240 FF80                  		andi.w	#$FF80,d0
00016B48 3238 F700                  		move.w	($FFFFF700).w,d1
00016B4C 0441 0080                  		subi.w	#$80,d1
00016B50 0241 FF80                  		andi.w	#$FF80,d1
00016B54 9041                       		sub.w	d1,d0
00016B56 0C40 0280                  		cmpi.w	#$280,d0
00016B5A 6200                       		bhi.s	loc_1629A
00016B5C                            
00016B5C                            Obj6F_Display:
00016B5C 4EF9 0000 DDC8             		jmp	DisplaySprite
00016B62                            ; ===========================================================================
00016B62                            
00016B62                            loc_1629A:
00016B62 0C38 0002 FE11             		cmpi.b	#2,($FFFFFE11).w ; check if act	is 3
00016B68 6600                       		bne.s	Obj6F_Act1or2	; if not, branch
00016B6A 0C40 FF80                  		cmpi.w	#-$80,d0
00016B6E 64EC                       		bcc.s	Obj6F_Display
00016B70                            
00016B70                            Obj6F_Act1or2:
00016B70 1028 002F                  		move.b	$2F(a0),d0
00016B74 6A00                       		bpl.s	Obj6F_Delete
00016B76 0240 007F                  		andi.w	#$7F,d0
00016B7A 45F8 F7C1                  		lea	($FFFFF7C1).w,a2
00016B7E 08B2 0000 0000             		bclr	#0,(a2,d0.w)
00016B84                            
00016B84                            Obj6F_Delete:
00016B84 4EF9 0000 DE04             		jmp	DeleteObject
00016B8A                            ; ===========================================================================
00016B8A 0000                       Obj6F_Index:	dc.w Obj6F_Main-Obj6F_Index
00016B8C 0000                       		dc.w loc_163D8-Obj6F_Index
00016B8E                            ; ===========================================================================
00016B8E                            
00016B8E                            Obj6F_Main:				; XREF: Obj6F_Index
00016B8E 1028 0028                  		move.b	$28(a0),d0
00016B92 6B00 0000                  		bmi.w	loc_16380
00016B96 5428 0024                  		addq.b	#2,$24(a0)
00016B9A 217C 0001 61F2 0004        		move.l	#Map_obj69a,4(a0)
00016BA2 317C 04DF 0002             		move.w	#$4DF,2(a0)
00016BA8 117C 0010 0019             		move.b	#$10,$19(a0)
00016BAE 0028 0004 0001             		ori.b	#4,1(a0)
00016BB4 117C 0004 0018             		move.b	#4,$18(a0)
00016BBA 7000                       		moveq	#0,d0
00016BBC 1028 0028                  		move.b	$28(a0),d0
00016BC0 3200                       		move.w	d0,d1
00016BC2 E648                       		lsr.w	#3,d0
00016BC4 0240 001E                  		andi.w	#$1E,d0
00016BC8 45FA 0000                  		lea	off_164A6(pc),a2
00016BCC D4F2 0000                  		adda.w	(a2,d0.w),a2
00016BD0 315A 0038                  		move.w	(a2)+,$38(a0)
00016BD4 315A 0030                  		move.w	(a2)+,$30(a0)
00016BD8 214A 003C                  		move.l	a2,$3C(a0)
00016BDC 0241 000F                  		andi.w	#$F,d1
00016BE0 E549                       		lsl.w	#2,d1
00016BE2 1141 0038                  		move.b	d1,$38(a0)
00016BE6 117C 0004 003A             		move.b	#4,$3A(a0)
00016BEC 4A38 F7C0                  		tst.b	($FFFFF7C0).w
00016BF0 6700                       		beq.s	loc_16356
00016BF2 117C 0001 003B             		move.b	#1,$3B(a0)
00016BF8 4428 003A                  		neg.b	$3A(a0)
00016BFC 7200                       		moveq	#0,d1
00016BFE 1228 0038                  		move.b	$38(a0),d1
00016C02 D228 003A                  		add.b	$3A(a0),d1
00016C06 B228 0039                  		cmp.b	$39(a0),d1
00016C0A 6500                       		bcs.s	loc_16352
00016C0C 1001                       		move.b	d1,d0
00016C0E 7200                       		moveq	#0,d1
00016C10 4A00                       		tst.b	d0
00016C12 6A00                       		bpl.s	loc_16352
00016C14 1228 0039                  		move.b	$39(a0),d1
00016C18 5901                       		subq.b	#4,d1
00016C1A                            
00016C1A                            loc_16352:
00016C1A 1141 0038                  		move.b	d1,$38(a0)
00016C1E                            
00016C1E                            loc_16356:
00016C1E 3172 1000 0034             		move.w	(a2,d1.w),$34(a0)
00016C24 3172 1002 0036             		move.w	2(a2,d1.w),$36(a0)
00016C2A 4A41                       		tst.w	d1
00016C2C 6600                       		bne.s	loc_1636C
00016C2E 117C 0001 001C             		move.b	#1,$1C(a0)
00016C34                            
00016C34                            loc_1636C:
00016C34 0C41 0008                  		cmpi.w	#8,d1
00016C38 6600                       		bne.s	loc_16378
00016C3A 117C 0000 001C             		move.b	#0,$1C(a0)
00016C40                            
00016C40                            loc_16378:
00016C40 6100 C0C6                  		bsr.w	Obj63_ChangeDir
00016C44 6000 0000                  		bra.w	loc_163D8
00016C48                            ; ===========================================================================
00016C48                            
00016C48                            loc_16380:				; XREF: Obj6F_Main
00016C48 1140 002F                  		move.b	d0,$2F(a0)
00016C4C 0240 007F                  		andi.w	#$7F,d0
00016C50 45F8 F7C1                  		lea	($FFFFF7C1).w,a2
00016C54 08F2 0000 0000             		bset	#0,(a2,d0.w)
00016C5A 6700                       		beq.s	loc_1639A
00016C5C 4EF9 0000 DE04             		jmp	DeleteObject
00016C62                            ; ===========================================================================
00016C62                            
00016C62                            loc_1639A:
00016C62 D040                       		add.w	d0,d0
00016C64 0240 001E                  		andi.w	#$1E,d0
00016C68 0640 0080                  		addi.w	#$80,d0
00016C6C 45F9 0000 0000             		lea	(ObjPos_Index).l,a2
00016C72 D4F2 0000                  		adda.w	(a2,d0.w),a2
00016C76 321A                       		move.w	(a2)+,d1
00016C78 2248                       		movea.l	a0,a1
00016C7A 6000                       		bra.s	Obj6F_LoadPform
00016C7C                            ; ===========================================================================
00016C7C                            
00016C7C                            Obj6F_Loop:
00016C7C 4EB9 0000 E24E             		jsr	SingleObjLoad
00016C82 6600                       		bne.s	loc_163D0
00016C84                            
00016C84                            Obj6F_LoadPform:			; XREF: loc_1639A
00016C84 12BC 006F                  		move.b	#$6F,0(a1)
00016C88 335A 0008                  		move.w	(a2)+,8(a1)
00016C8C 335A 000C                  		move.w	(a2)+,$C(a1)
00016C90 301A                       		move.w	(a2)+,d0
00016C92 1340 0028                  		move.b	d0,$28(a1)
00016C96                            
00016C96                            loc_163D0:
00016C96 51C9 FFE4                  		dbf	d1,Obj6F_Loop
00016C9A                            
00016C9A 588F                       		addq.l	#4,sp
00016C9C 4E75                       		rts	
00016C9E                            ; ===========================================================================
00016C9E                            
00016C9E                            loc_163D8:				; XREF: Obj6F_Index
00016C9E 43F9 0000 0000             		lea	(Ani_obj6F).l,a1
00016CA4 4EB9 0000 AE88             		jsr	AnimateSprite
00016CAA 4A28 001A                  		tst.b	$1A(a0)
00016CAE 6600                       		bne.s	loc_16404
00016CB0 3F28 0008                  		move.w	8(a0),-(sp)
00016CB4 6100 0000                  		bsr.w	loc_16424
00016CB8 323C 001B                  		move.w	#$1B,d1
00016CBC 343C 0007                  		move.w	#7,d2
00016CC0 3602                       		move.w	d2,d3
00016CC2 5243                       		addq.w	#1,d3
00016CC4 381F                       		move.w	(sp)+,d4
00016CC6 6000 94D0                  		bra.w	SolidObject
00016CCA                            ; ===========================================================================
00016CCA                            
00016CCA                            loc_16404:
00016CCA 0828 0003 0022             		btst	#3,$22(a0)
00016CD0 6700                       		beq.s	loc_16420
00016CD2 43F8 D000                  		lea	($FFFFD000).w,a1
00016CD6 08A9 0003 0022             		bclr	#3,$22(a1)
00016CDC 08A8 0003 0022             		bclr	#3,$22(a0)
00016CE2 4228 0025                  		clr.b	$25(a0)
00016CE6                            
00016CE6                            loc_16420:
00016CE6 6000 0002                  		bra.w	*+4
00016CEA                            
00016CEA                            loc_16424:
00016CEA 3028 0008                  		move.w	8(a0),d0
00016CEE B068 0034                  		cmp.w	$34(a0),d0
00016CF2 6600                       		bne.s	loc_16484
00016CF4 3028 000C                  		move.w	$C(a0),d0
00016CF8 B068 0036                  		cmp.w	$36(a0),d0
00016CFC 6600                       		bne.s	loc_16484
00016CFE 7200                       		moveq	#0,d1
00016D00 1228 0038                  		move.b	$38(a0),d1
00016D04 D228 003A                  		add.b	$3A(a0),d1
00016D08 B228 0039                  		cmp.b	$39(a0),d1
00016D0C 6500                       		bcs.s	loc_16456
00016D0E 1001                       		move.b	d1,d0
00016D10 7200                       		moveq	#0,d1
00016D12 4A00                       		tst.b	d0
00016D14 6A00                       		bpl.s	loc_16456
00016D16 1228 0039                  		move.b	$39(a0),d1
00016D1A 5901                       		subq.b	#4,d1
00016D1C                            
00016D1C                            loc_16456:
00016D1C 1141 0038                  		move.b	d1,$38(a0)
00016D20 2268 003C                  		movea.l	$3C(a0),a1
00016D24 3171 1000 0034             		move.w	(a1,d1.w),$34(a0)
00016D2A 3171 1002 0036             		move.w	2(a1,d1.w),$36(a0)
00016D30 4A41                       		tst.w	d1
00016D32 6600                       		bne.s	loc_16474
00016D34 117C 0001 001C             		move.b	#1,$1C(a0)
00016D3A                            
00016D3A                            loc_16474:
00016D3A 0C41 0008                  		cmpi.w	#8,d1
00016D3E 6600                       		bne.s	loc_16480
00016D40 117C 0000 001C             		move.b	#0,$1C(a0)
00016D46                            
00016D46                            loc_16480:
00016D46 6100 BFC0                  		bsr.w	Obj63_ChangeDir
00016D4A                            
00016D4A                            loc_16484:
00016D4A 4EF9 0000 DDA2             		jmp	SpeedToPos
00016D50                            ; ===========================================================================
00016D50                            Ani_obj6F:
00016D50                            	include "_anim\obj6F.asm"
00016D50                            ; ---------------------------------------------------------------------------
00016D50                            ; Animation script - platform on conveyor belt (SBZ)
00016D50                            ; ---------------------------------------------------------------------------
00016D50 0000                       		dc.w byte_1648E-Ani_obj6F
00016D52 0000                       		dc.w byte_164A2-Ani_obj6F
00016D54 0000 0102 0304 4342 4140+  byte_1648E:	dc.b 0,	0, 1, 2, 3, 4, $43, $42, $41, $40, $61,	$62, $63
00016D61 6423 2221 00FF 00          		dc.b $64, $23, $22, $21, 0, $FF, 0
00016D68 0F00 FF                    byte_164A2:	dc.b $F, 0, $FF
00016D6C 00                         		even
00016D6C 00                         		even
00016D6C                            
00016D6C 0000 0000 0000             off_164A6:	dc.w word_164B2-off_164A6, word_164C6-off_164A6, word_164DA-off_164A6
00016D72 0000 0000 0000             		dc.w word_164EE-off_164A6, word_16502-off_164A6, word_16516-off_164A6
00016D78 0010 0E80 0E14 0370 0EEF+  word_164B2:	dc.w $10, $E80,	$E14, $370, $EEF, $302,	$EEF, $340, $E14, $3AE
00016D8C 0010 0F80 0F14 02E0 0FEF+  word_164C6:	dc.w $10, $F80,	$F14, $2E0, $FEF, $272,	$FEF, $2B0, $F14, $31E
00016DA0 0010 1080 1014 0270 10EF+  word_164DA:	dc.w $10, $1080, $1014,	$270, $10EF, $202, $10EF, $240,	$1014, $2AE
00016DB4 0010 0F80 0F14 0570 0FEF+  word_164EE:	dc.w $10, $F80,	$F14, $570, $FEF, $502,	$FEF, $540, $F14, $5AE
00016DC8 0010 1B80 1B14 0670 1BEF+  word_16502:	dc.w $10, $1B80, $1B14,	$670, $1BEF, $602, $1BEF, $640,	$1B14, $6AE
00016DDC 0010 1C80 1C14 05E0 1CEF+  word_16516:	dc.w $10, $1C80, $1C14,	$5E0, $1CEF, $572, $1CEF, $5B0,	$1C14, $61E
00016DF0                            ; ===========================================================================
00016DF0                            ; ---------------------------------------------------------------------------
00016DF0                            ; Object 70 - large girder block (SBZ)
00016DF0                            ; ---------------------------------------------------------------------------
00016DF0                            
00016DF0                            Obj70:					; XREF: Obj_Index
00016DF0 7000                       		moveq	#0,d0
00016DF2 1028 0024                  		move.b	$24(a0),d0
00016DF6 323B 0000                  		move.w	Obj70_Index(pc,d0.w),d1
00016DFA 4EFB 1000                  		jmp	Obj70_Index(pc,d1.w)
00016DFE                            ; ===========================================================================
00016DFE 0000                       Obj70_Index:	dc.w Obj70_Main-Obj70_Index
00016E00 0000                       		dc.w Obj70_Action-Obj70_Index
00016E02                            ; ===========================================================================
00016E02                            
00016E02                            Obj70_Main:				; XREF: Obj70_Index
00016E02 5428 0024                  		addq.b	#2,$24(a0)
00016E06 217C 0000 0000 0004        		move.l	#Map_obj70,4(a0)
00016E0E 317C 42F0 0002             		move.w	#$42F0,2(a0)
00016E14 0028 0004 0001             		ori.b	#4,1(a0)
00016E1A 117C 0004 0018             		move.b	#4,$18(a0)
00016E20 117C 0060 0019             		move.b	#$60,$19(a0)
00016E26 117C 0018 0016             		move.b	#$18,$16(a0)
00016E2C 3168 0008 0032             		move.w	8(a0),$32(a0)
00016E32 3168 000C 0030             		move.w	$C(a0),$30(a0)
00016E38 6100 0000                  		bsr.w	Obj70_Move2
00016E3C                            
00016E3C                            Obj70_Action:				; XREF: Obj70_Index
00016E3C 3F28 0008                  		move.w	8(a0),-(sp)
00016E40 4A68 003A                  		tst.w	$3A(a0)
00016E44 6700                       		beq.s	Obj70_Move
00016E46 5368 003A                  		subq.w	#1,$3A(a0)
00016E4A 6600                       		bne.s	Obj70_Solid
00016E4C                            
00016E4C                            Obj70_Move:
00016E4C 4EB9 0000 DDA2             		jsr	SpeedToPos
00016E52 5368 0034                  		subq.w	#1,$34(a0)	; subtract 1 from movement duration
00016E56 6600                       		bne.s	Obj70_Solid	; if time remains, branch
00016E58 6100 0000                  		bsr.w	Obj70_Move2	; if time is zero, branch
00016E5C                            
00016E5C                            Obj70_Solid:
00016E5C 381F                       		move.w	(sp)+,d4
00016E5E 4A28 0001                  		tst.b	1(a0)
00016E62 6A00                       		bpl.s	Obj70_ChkDel
00016E64 7200                       		moveq	#0,d1
00016E66 1228 0019                  		move.b	$19(a0),d1
00016E6A 0641 000B                  		addi.w	#$B,d1
00016E6E 7400                       		moveq	#0,d2
00016E70 1428 0016                  		move.b	$16(a0),d2
00016E74 3602                       		move.w	d2,d3
00016E76 5243                       		addq.w	#1,d3
00016E78 6100 931E                  		bsr.w	SolidObject
00016E7C                            
00016E7C                            Obj70_ChkDel:
00016E7C 3028 0032                  		move.w	$32(a0),d0
00016E80 0240 FF80                  		andi.w	#$FF80,d0
00016E84 3238 F700                  		move.w	($FFFFF700).w,d1
00016E88 0441 0080                  		subi.w	#$80,d1
00016E8C 0241 FF80                  		andi.w	#$FF80,d1
00016E90 9041                       		sub.w	d1,d0
00016E92 0C40 0280                  		cmpi.w	#$280,d0
00016E96 6200                       		bhi.s	Obj70_Delete
00016E98 4EF9 0000 DDC8             		jmp	DisplaySprite
00016E9E                            ; ===========================================================================
00016E9E                            
00016E9E                            Obj70_Delete:
00016E9E 4EF9 0000 DE04             		jmp	DeleteObject
00016EA4                            ; ===========================================================================
00016EA4                            
00016EA4                            Obj70_Move2:				; XREF: Obj70_Main
00016EA4 1028 0038                  		move.b	$38(a0),d0
00016EA8 0240 0018                  		andi.w	#$18,d0
00016EAC 43F9 0000 0000             		lea	(Obj70_MoveData).l,a1
00016EB2 43F1 0000                  		lea	(a1,d0.w),a1
00016EB6 3159 0010                  		move.w	(a1)+,$10(a0)
00016EBA 3159 0012                  		move.w	(a1)+,$12(a0)
00016EBE 3159 0034                  		move.w	(a1)+,$34(a0)
00016EC2 5028 0038                  		addq.b	#8,$38(a0)	; use next movedata set
00016EC6 317C 0007 003A             		move.w	#7,$3A(a0)
00016ECC 4E75                       		rts	
00016ECE                            ; ===========================================================================
00016ECE 0100 0000 0060 0000        Obj70_MoveData:	dc.w   $100,	 0,   $60,     0 ; x-speed, y-speed, duration, blank
00016ED6 0000 0100 0030 0000        		dc.w	  0,  $100,   $30,     0
00016EDE FF00 FFC0 0060 0000        		dc.w  $FF00, $FFC0,   $60,     0
00016EE6 0000 FF00 0018 0000        		dc.w	  0, $FF00,   $18,     0
00016EEE                            ; ---------------------------------------------------------------------------
00016EEE                            ; Sprite mappings - large girder block (SBZ)
00016EEE                            ; ---------------------------------------------------------------------------
00016EEE                            Map_obj70:
00016EEE                            	include "_maps\obj70.asm"
00016EEE                            ; ---------------------------------------------------------------------------
00016EEE                            ; Sprite mappings - large girder block (SBZ)
00016EEE                            ; ---------------------------------------------------------------------------
00016EEE 0000                       		dc.w byte_1662A-Map_obj70
00016EF0 0C                         byte_1662A:	dc.b $C
00016EF1 E80E 0000 A0               		dc.b $E8, $E, 0, 0, $A0
00016EF6 000E 1000 A0               		dc.b 0,	$E, $10, 0, $A0
00016EFB E80E 0006 C0               		dc.b $E8, $E, 0, 6, $C0
00016F00 000E 1006 C0               		dc.b 0,	$E, $10, 6, $C0
00016F05 E80E 0006 E0               		dc.b $E8, $E, 0, 6, $E0
00016F0A 000E 1006 E0               		dc.b 0,	$E, $10, 6, $E0
00016F0F E80E 0006 00               		dc.b $E8, $E, 0, 6, 0
00016F14 000E 1006 00               		dc.b 0,	$E, $10, 6, 0
00016F19 E80E 0006 20               		dc.b $E8, $E, 0, 6, $20
00016F1E 000E 1006 20               		dc.b 0,	$E, $10, 6, $20
00016F23 E80E 0006 40               		dc.b $E8, $E, 0, 6, $40
00016F28 000E 1006 40               		dc.b 0,	$E, $10, 6, $40
00016F2E 00                         		even
00016F2E 00                         		even
00016F2E                            
00016F2E                            ; ===========================================================================
00016F2E                            ; ---------------------------------------------------------------------------
00016F2E                            ; Object 72 - teleporter (SBZ)
00016F2E                            ; ---------------------------------------------------------------------------
00016F2E                            
00016F2E                            Obj72:					; XREF: Obj_Index
00016F2E 7000                       		moveq	#0,d0
00016F30 1028 0024                  		move.b	$24(a0),d0
00016F34 323B 0000                  		move.w	Obj72_Index(pc,d0.w),d1
00016F38 4EBB 1000                  		jsr	Obj72_Index(pc,d1.w)
00016F3C 3028 0008                  		move.w	8(a0),d0
00016F40 0240 FF80                  		andi.w	#$FF80,d0
00016F44 3238 F700                  		move.w	($FFFFF700).w,d1
00016F48 0441 0080                  		subi.w	#$80,d1
00016F4C 0241 FF80                  		andi.w	#$FF80,d1
00016F50 9041                       		sub.w	d1,d0
00016F52 0C40 0280                  		cmpi.w	#$280,d0
00016F56 6200                       		bhi.s	Obj72_Delete
00016F58 4E75                       		rts	
00016F5A                            ; ===========================================================================
00016F5A                            
00016F5A                            Obj72_Delete:
00016F5A 4EF9 0000 DE04             		jmp	DeleteObject
00016F60                            ; ===========================================================================
00016F60 0000                       Obj72_Index:	dc.w Obj72_Main-Obj72_Index
00016F62 0000                       		dc.w loc_166C8-Obj72_Index
00016F64 0000                       		dc.w loc_1675E-Obj72_Index
00016F66 0000                       		dc.w loc_16798-Obj72_Index
00016F68                            ; ===========================================================================
00016F68                            
00016F68                            Obj72_Main:				; XREF: Obj72_Index
00016F68 5428 0024                  		addq.b	#2,$24(a0)
00016F6C 1028 0028                  		move.b	$28(a0),d0
00016F70 D040                       		add.w	d0,d0
00016F72 0240 001E                  		andi.w	#$1E,d0
00016F76 45FA 0000                  		lea	Obj72_Data(pc),a2
00016F7A D4F2 0000                  		adda.w	(a2,d0.w),a2
00016F7E 315A 003A                  		move.w	(a2)+,$3A(a0)
00016F82 214A 003C                  		move.l	a2,$3C(a0)
00016F86 315A 0036                  		move.w	(a2)+,$36(a0)
00016F8A 315A 0038                  		move.w	(a2)+,$38(a0)
00016F8E                            
00016F8E                            loc_166C8:				; XREF: Obj72_Index
00016F8E 43F8 D000                  		lea	($FFFFD000).w,a1
00016F92 3029 0008                  		move.w	8(a1),d0
00016F96 9068 0008                  		sub.w	8(a0),d0
00016F9A 0828 0000 0022             		btst	#0,$22(a0)
00016FA0 6700                       		beq.s	loc_166E0
00016FA2 0640 000F                  		addi.w	#$F,d0
00016FA6                            
00016FA6                            loc_166E0:
00016FA6 0C40 0010                  		cmpi.w	#$10,d0
00016FAA 6400                       		bcc.s	locret_1675C
00016FAC 3229 000C                  		move.w	$C(a1),d1
00016FB0 9268 000C                  		sub.w	$C(a0),d1
00016FB4 0641 0020                  		addi.w	#$20,d1
00016FB8 0C41 0040                  		cmpi.w	#$40,d1
00016FBC 6400                       		bcc.s	locret_1675C
00016FBE 4A38 F7C8                  		tst.b	($FFFFF7C8).w
00016FC2 6600                       		bne.s	locret_1675C
00016FC4 0C28 0007 0028             		cmpi.b	#7,$28(a0)
00016FCA 6600                       		bne.s	loc_1670E
00016FCC 0C78 0032 FE20             		cmpi.w	#50,($FFFFFE20).w
00016FD2 6500                       		bcs.s	locret_1675C
00016FD4                            
00016FD4                            loc_1670E:
00016FD4 5428 0024                  		addq.b	#2,$24(a0)
00016FD8 11FC 0081 F7C8             		move.b	#$81,($FFFFF7C8).w ; lock controls
00016FDE 137C 0002 001C             		move.b	#2,$1C(a1)	; use Sonic's rolling animation
00016FE4 337C 0800 0014             		move.w	#$800,$14(a1)
00016FEA 337C 0000 0010             		move.w	#0,$10(a1)
00016FF0 337C 0000 0012             		move.w	#0,$12(a1)
00016FF6 08A8 0005 0022             		bclr	#5,$22(a0)
00016FFC 08A9 0005 0022             		bclr	#5,$22(a1)
00017002 08E9 0001 0022             		bset	#1,$22(a1)
00017008 3368 0008 0008             		move.w	8(a0),8(a1)
0001700E 3368 000C 000C             		move.w	$C(a0),$C(a1)
00017014 4228 0032                  		clr.b	$32(a0)
00017018 303C 00BE                  		move.w	#$BE,d0
0001701C 4EB9 0000 15C0             		jsr	(PlaySound_Special).l ;	play Sonic rolling sound
00017022                            
00017022                            locret_1675C:
00017022 4E75                       		rts	
00017024                            ; ===========================================================================
00017024                            
00017024                            loc_1675E:				; XREF: Obj72_Index
00017024 43F8 D000                  		lea	($FFFFD000).w,a1
00017028 1028 0032                  		move.b	$32(a0),d0
0001702C 5428 0032                  		addq.b	#2,$32(a0)
00017030 4EB9 0000 2CAC             		jsr	(CalcSine).l
00017036 EA40                       		asr.w	#5,d0
00017038 3428 000C                  		move.w	$C(a0),d2
0001703C 9440                       		sub.w	d0,d2
0001703E 3342 000C                  		move.w	d2,$C(a1)
00017042 0C28 0080 0032             		cmpi.b	#$80,$32(a0)
00017048 6600                       		bne.s	locret_16796
0001704A 6100 0000                  		bsr.w	sub_1681C
0001704E 5428 0024                  		addq.b	#2,$24(a0)
00017052 303C 00BC                  		move.w	#$BC,d0
00017056 4EB9 0000 15C0             		jsr	(PlaySound_Special).l ;	play teleport sound
0001705C                            
0001705C                            locret_16796:
0001705C 4E75                       		rts	
0001705E                            ; ===========================================================================
0001705E                            
0001705E                            loc_16798:				; XREF: Obj72_Index
0001705E 588F                       		addq.l	#4,sp
00017060 43F8 D000                  		lea	($FFFFD000).w,a1
00017064 5328 002E                  		subq.b	#1,$2E(a0)
00017068 6A00                       		bpl.s	loc_167DA
0001706A 3368 0036 0008             		move.w	$36(a0),8(a1)
00017070 3368 0038 000C             		move.w	$38(a0),$C(a1)
00017076 7200                       		moveq	#0,d1
00017078 1228 003A                  		move.b	$3A(a0),d1
0001707C 5801                       		addq.b	#4,d1
0001707E B228 003B                  		cmp.b	$3B(a0),d1
00017082 6500                       		bcs.s	loc_167C2
00017084 7200                       		moveq	#0,d1
00017086 6000                       		bra.s	loc_16800
00017088                            ; ===========================================================================
00017088                            
00017088                            loc_167C2:
00017088 1141 003A                  		move.b	d1,$3A(a0)
0001708C 2468 003C                  		movea.l	$3C(a0),a2
00017090 3172 1000 0036             		move.w	(a2,d1.w),$36(a0)
00017096 3172 1002 0038             		move.w	2(a2,d1.w),$38(a0)
0001709C 6000 0000                  		bra.w	sub_1681C
000170A0                            ; ===========================================================================
000170A0                            
000170A0                            loc_167DA:
000170A0 2429 0008                  		move.l	8(a1),d2
000170A4 2629 000C                  		move.l	$C(a1),d3
000170A8 3029 0010                  		move.w	$10(a1),d0
000170AC 48C0                       		ext.l	d0
000170AE E180                       		asl.l	#8,d0
000170B0 D480                       		add.l	d0,d2
000170B2 3029 0012                  		move.w	$12(a1),d0
000170B6 48C0                       		ext.l	d0
000170B8 E180                       		asl.l	#8,d0
000170BA D680                       		add.l	d0,d3
000170BC 2342 0008                  		move.l	d2,8(a1)
000170C0 2343 000C                  		move.l	d3,$C(a1)
000170C4 4E75                       		rts	
000170C6                            ; ===========================================================================
000170C6                            
000170C6                            loc_16800:
000170C6 0269 07FF 000C             		andi.w	#$7FF,$C(a1)
000170CC 4228 0024                  		clr.b	$24(a0)
000170D0 4238 F7C8                  		clr.b	($FFFFF7C8).w
000170D4 337C 0000 0010             		move.w	#0,$10(a1)
000170DA 337C 0200 0012             		move.w	#$200,$12(a1)
000170E0 4E75                       		rts	
000170E2                            
000170E2                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000170E2                            
000170E2                            
000170E2                            sub_1681C:
000170E2 7000                       		moveq	#0,d0
000170E4 343C 1000                  		move.w	#$1000,d2
000170E8 3028 0036                  		move.w	$36(a0),d0
000170EC 9069 0008                  		sub.w	8(a1),d0
000170F0 6C00                       		bge.s	loc_16830
000170F2 4440                       		neg.w	d0
000170F4 4442                       		neg.w	d2
000170F6                            
000170F6                            loc_16830:
000170F6 7200                       		moveq	#0,d1
000170F8 363C 1000                  		move.w	#$1000,d3
000170FC 3228 0038                  		move.w	$38(a0),d1
00017100 9269 000C                  		sub.w	$C(a1),d1
00017104 6C00                       		bge.s	loc_16844
00017106 4441                       		neg.w	d1
00017108 4443                       		neg.w	d3
0001710A                            
0001710A                            loc_16844:
0001710A B240                       		cmp.w	d0,d1
0001710C 6500                       		bcs.s	loc_1687A
0001710E 7200                       		moveq	#0,d1
00017110 3228 0038                  		move.w	$38(a0),d1
00017114 9269 000C                  		sub.w	$C(a1),d1
00017118 4841                       		swap	d1
0001711A 83C3                       		divs.w	d3,d1
0001711C 7000                       		moveq	#0,d0
0001711E 3028 0036                  		move.w	$36(a0),d0
00017122 9069 0008                  		sub.w	8(a1),d0
00017126 6700                       		beq.s	loc_16866
00017128 4840                       		swap	d0
0001712A 81C1                       		divs.w	d1,d0
0001712C                            
0001712C                            loc_16866:
0001712C 3340 0010                  		move.w	d0,$10(a1)
00017130 3343 0012                  		move.w	d3,$12(a1)
00017134 4A41                       		tst.w	d1
00017136 6A00                       		bpl.s	loc_16874
00017138 4441                       		neg.w	d1
0001713A                            
0001713A                            loc_16874:
0001713A 3141 002E                  		move.w	d1,$2E(a0)
0001713E 4E75                       		rts	
00017140                            ; ===========================================================================
00017140                            
00017140                            loc_1687A:
00017140 7000                       		moveq	#0,d0
00017142 3028 0036                  		move.w	$36(a0),d0
00017146 9069 0008                  		sub.w	8(a1),d0
0001714A 4840                       		swap	d0
0001714C 81C2                       		divs.w	d2,d0
0001714E 7200                       		moveq	#0,d1
00017150 3228 0038                  		move.w	$38(a0),d1
00017154 9269 000C                  		sub.w	$C(a1),d1
00017158 6700                       		beq.s	loc_16898
0001715A 4841                       		swap	d1
0001715C 83C0                       		divs.w	d0,d1
0001715E                            
0001715E                            loc_16898:
0001715E 3341 0012                  		move.w	d1,$12(a1)
00017162 3342 0010                  		move.w	d2,$10(a1)
00017166 4A40                       		tst.w	d0
00017168 6A00                       		bpl.s	loc_168A6
0001716A 4440                       		neg.w	d0
0001716C                            
0001716C                            loc_168A6:
0001716C 3140 002E                  		move.w	d0,$2E(a0)
00017170 4E75                       		rts	
00017172                            ; End of function sub_1681C
00017172                            
00017172                            ; ===========================================================================
00017172 0000 0000 0000             Obj72_Data:	dc.w word_168BC-Obj72_Data, word_168C2-Obj72_Data, word_168C8-Obj72_Data
00017178 0000 0000 0000             		dc.w word_168E6-Obj72_Data, word_168EC-Obj72_Data, word_1690A-Obj72_Data
0001717E 0000 0000                  		dc.w word_16910-Obj72_Data, word_1692E-Obj72_Data
00017182 0004 0794 098C             word_168BC:	dc.w 4,	$794, $98C
00017188 0004 0094 038C             word_168C2:	dc.w 4,	$94, $38C
0001718E 001C 0794 02E8             word_168C8:	dc.w $1C, $794,	$2E8
00017194 07A4 02C0 07D0             		dc.w $7A4, $2C0, $7D0
0001719A 02AC 0858 02AC             		dc.w $2AC, $858, $2AC
000171A0 0884 0298 0894             		dc.w $884, $298, $894
000171A6 0270 0894 0190             		dc.w $270, $894, $190
000171AC 0004 0894 0690             word_168E6:	dc.w 4,	$894, $690
000171B2 001C 1194 0470             word_168EC:	dc.w $1C, $1194, $470
000171B8 1184 0498 1158             		dc.w $1184, $498, $1158
000171BE 04AC 0FD0 04AC             		dc.w $4AC, $FD0, $4AC
000171C4 0FA4 04C0 0F94             		dc.w $FA4, $4C0, $F94
000171CA 04E8 0F94 0590             		dc.w $4E8, $F94, $590
000171D0 0004 1294 0490             word_1690A:	dc.w 4,	$1294, $490
000171D6 001C 1594 FFE8             word_16910:	dc.w $1C, $1594, $FFE8
000171DC 1584 FFC0 1560             		dc.w $1584, $FFC0, $1560
000171E2 FFAC 14D0 FFAC             		dc.w $FFAC, $14D0, $FFAC
000171E8 14A4 FF98 1494             		dc.w $14A4, $FF98, $1494
000171EE FF70 1494 FD90             		dc.w $FF70, $1494, $FD90
000171F4 0004 0894 0090             word_1692E:	dc.w 4,	$894, $90
000171FA                            ; ===========================================================================
000171FA                            ; ---------------------------------------------------------------------------
000171FA                            ; Object 78 - Caterkiller enemy	(MZ, SBZ)
000171FA                            ; ---------------------------------------------------------------------------
000171FA                            
000171FA                            Obj78:					; XREF: Obj_Index
000171FA 7000                       		moveq	#0,d0
000171FC 1028 0024                  		move.b	$24(a0),d0
00017200 323B 0000                  		move.w	Obj78_Index(pc,d0.w),d1
00017204 4EFB 1000                  		jmp	Obj78_Index(pc,d1.w)
00017208                            ; ===========================================================================
00017208 0000                       Obj78_Index:	dc.w Obj78_Main-Obj78_Index
0001720A 0000                       		dc.w Obj78_Action-Obj78_Index
0001720C 0000                       		dc.w Obj78_BodySeg1-Obj78_Index
0001720E 0000                       		dc.w Obj78_BodySeg2-Obj78_Index
00017210 0000                       		dc.w Obj78_BodySeg1-Obj78_Index
00017212 0000                       		dc.w Obj78_Delete-Obj78_Index
00017214 0000                       		dc.w loc_16CC0-Obj78_Index
00017216                            ; ===========================================================================
00017216                            
00017216                            locret_16950:
00017216 4E75                       		rts	
00017218                            ; ===========================================================================
00017218                            
00017218                            Obj78_Main:				; XREF: Obj78_Index
00017218 117C 0007 0016             		move.b	#7,$16(a0)
0001721E 117C 0008 0017             		move.b	#8,$17(a0)
00017224 4EB9 0000 DD76             		jsr	ObjectFall
0001722A 4EBA E4A6                  		jsr	ObjHitFloor
0001722E 4A41                       		tst.w	d1
00017230 6AE4                       		bpl.s	locret_16950
00017232 D368 000C                  		add.w	d1,$C(a0)
00017236 4268 0012                  		clr.w	$12(a0)
0001723A 5428 0024                  		addq.b	#2,$24(a0)
0001723E 217C 0000 0000 0004        		move.l	#Map_obj78,4(a0)
00017246 317C 22B0 0002             		move.w	#$22B0,2(a0)
0001724C 0C38 0005 FE10             		cmpi.b	#5,($FFFFFE10).w ; if level is SBZ, branch
00017252 6700                       		beq.s	loc_16996
00017254 317C 24FF 0002             		move.w	#$24FF,2(a0)	; MZ specific code
0001725A                            
0001725A                            loc_16996:
0001725A 0228 0003 0001             		andi.b	#3,1(a0)
00017260 0028 0004 0001             		ori.b	#4,1(a0)
00017266 1168 0001 0022             		move.b	1(a0),$22(a0)
0001726C 117C 0004 0018             		move.b	#4,$18(a0)
00017272 117C 0008 0019             		move.b	#8,$19(a0)
00017278 117C 000B 0020             		move.b	#$B,$20(a0)
0001727E 3428 0008                  		move.w	8(a0),d2
00017282 7A0C                       		moveq	#$C,d5
00017284 0828 0000 0022             		btst	#0,$22(a0)
0001728A 6700                       		beq.s	loc_169CA
0001728C 4445                       		neg.w	d5
0001728E                            
0001728E                            loc_169CA:
0001728E 1C3C 0004                  		move.b	#4,d6
00017292 7600                       		moveq	#0,d3
00017294 7804                       		moveq	#4,d4
00017296 2448                       		movea.l	a0,a2
00017298 7202                       		moveq	#2,d1
0001729A                            
0001729A                            Obj78_LoadBody:
0001729A 4EB9 0000 E264             		jsr	SingleObjLoad2
000172A0 6600                       		bne.s	Obj78_QuitLoad
000172A2 12BC 0078                  		move.b	#$78,0(a1)	; load body segment object
000172A6 1346 0024                  		move.b	d6,$24(a1)
000172AA 5406                       		addq.b	#2,d6
000172AC 2368 0004 0004             		move.l	4(a0),4(a1)
000172B2 3368 0002 0002             		move.w	2(a0),2(a1)
000172B8 137C 0005 0018             		move.b	#5,$18(a1)
000172BE 137C 0008 0019             		move.b	#8,$19(a1)
000172C4 137C 00CB 0020             		move.b	#$CB,$20(a1)
000172CA D445                       		add.w	d5,d2
000172CC 3342 0008                  		move.w	d2,8(a1)
000172D0 3368 000C 000C             		move.w	$C(a0),$C(a1)
000172D6 1368 0022 0022             		move.b	$22(a0),$22(a1)
000172DC 1368 0022 0001             		move.b	$22(a0),1(a1)
000172E2 137C 0008 001A             		move.b	#8,$1A(a1)
000172E8 234A 003C                  		move.l	a2,$3C(a1)
000172EC 1344 003C                  		move.b	d4,$3C(a1)
000172F0 5804                       		addq.b	#4,d4
000172F2 2449                       		movea.l	a1,a2
000172F4                            
000172F4                            Obj78_QuitLoad:
000172F4 51C9 FFA4                  		dbf	d1,Obj78_LoadBody ; repeat sequence 2 more times
000172F8                            
000172F8 117C 0007 002A             		move.b	#7,$2A(a0)
000172FE 4228 003C                  		clr.b	$3C(a0)
00017302                            
00017302                            Obj78_Action:				; XREF: Obj78_Index
00017302 4A28 0022                  		tst.b	$22(a0)
00017306 6B00 0000                  		bmi.w	loc_16C96
0001730A 7000                       		moveq	#0,d0
0001730C 1028 0025                  		move.b	$25(a0),d0
00017310 323B 0000                  		move.w	Obj78_Index2(pc,d0.w),d1
00017314 4EBB 1000                  		jsr	Obj78_Index2(pc,d1.w)
00017318 1228 002B                  		move.b	$2B(a0),d1
0001731C 6A00                       		bpl.s	Obj78_Display
0001731E 43F9 0000 0000             		lea	(Ani_obj78).l,a1
00017324 1028 0026                  		move.b	$26(a0),d0
00017328 0240 007F                  		andi.w	#$7F,d0
0001732C 5828 0026                  		addq.b	#4,$26(a0)
00017330 1031 0000                  		move.b	(a1,d0.w),d0
00017334 6A00                       		bpl.s	Obj78_AniHead
00017336 08A8 0007 002B             		bclr	#7,$2B(a0)
0001733C 6000                       		bra.s	Obj78_Display
0001733E                            ; ===========================================================================
0001733E                            
0001733E                            Obj78_AniHead:
0001733E 0201 0010                  		andi.b	#$10,d1
00017342 D001                       		add.b	d1,d0
00017344 1140 001A                  		move.b	d0,$1A(a0)
00017348                            
00017348                            Obj78_Display:
00017348 3028 0008                  		move.w	8(a0),d0
0001734C 0240 FF80                  		andi.w	#$FF80,d0
00017350 3238 F700                  		move.w	($FFFFF700).w,d1
00017354 0441 0080                  		subi.w	#$80,d1
00017358 0241 FF80                  		andi.w	#$FF80,d1
0001735C 9041                       		sub.w	d1,d0
0001735E 0C40 0280                  		cmpi.w	#$280,d0
00017362 6200 0000                  		bhi.w	Obj78_ChkGone
00017366 4EF9 0000 DDC8             		jmp	DisplaySprite
0001736C                            ; ===========================================================================
0001736C                            
0001736C                            Obj78_ChkGone:
0001736C 45F8 FC00                  		lea	($FFFFFC00).w,a2
00017370 7000                       		moveq	#0,d0
00017372 1028 0023                  		move.b	$23(a0),d0
00017376 6700                       		beq.s	loc_16ABC
00017378 08B2 0007 0002             		bclr	#7,2(a2,d0.w)
0001737E                            
0001737E                            loc_16ABC:
0001737E 117C 000A 0024             		move.b	#$A,$24(a0)	; run "Obj78_Delete" routine
00017384 4E75                       		rts	
00017386                            ; ===========================================================================
00017386                            
00017386                            Obj78_Delete:				; XREF: Obj78_Index
00017386 4EF9 0000 DE04             		jmp	DeleteObject
0001738C                            ; ===========================================================================
0001738C 0000                       Obj78_Index2:	dc.w Obj78_Move-Obj78_Index2
0001738E 0000                       		dc.w loc_16B02-Obj78_Index2
00017390                            ; ===========================================================================
00017390                            
00017390                            Obj78_Move:				; XREF: Obj78_Index2
00017390 5328 002A                  		subq.b	#1,$2A(a0)
00017394 6B00                       		bmi.s	Obj78_Move2
00017396 4E75                       		rts	
00017398                            ; ===========================================================================
00017398                            
00017398                            Obj78_Move2:
00017398 5428 0025                  		addq.b	#2,$25(a0)
0001739C 117C 0010 002A             		move.b	#$10,$2A(a0)
000173A2 317C FF40 0010             		move.w	#-$C0,$10(a0)
000173A8 317C 0040 0014             		move.w	#$40,$14(a0)
000173AE 0868 0004 002B             		bchg	#4,$2B(a0)
000173B4 6600                       		bne.s	loc_16AFC
000173B6 4268 0010                  		clr.w	$10(a0)
000173BA 4468 0014                  		neg.w	$14(a0)
000173BE                            
000173BE                            loc_16AFC:
000173BE 08E8 0007 002B             		bset	#7,$2B(a0)
000173C4                            
000173C4                            loc_16B02:				; XREF: Obj78_Index2
000173C4 5328 002A                  		subq.b	#1,$2A(a0)
000173C8 6B00                       		bmi.s	loc_16B5E
000173CA 2F28 0008                  		move.l	8(a0),-(sp)
000173CE 2428 0008                  		move.l	8(a0),d2
000173D2 3028 0010                  		move.w	$10(a0),d0
000173D6 0828 0000 0022             		btst	#0,$22(a0)
000173DC 6700                       		beq.s	loc_16B1E
000173DE 4440                       		neg.w	d0
000173E0                            
000173E0                            loc_16B1E:
000173E0 48C0                       		ext.l	d0
000173E2 E180                       		asl.l	#8,d0
000173E4 D480                       		add.l	d0,d2
000173E6 2142 0008                  		move.l	d2,8(a0)
000173EA 4EBA E2E6                  		jsr	ObjHitFloor
000173EE 241F                       		move.l	(sp)+,d2
000173F0 0C41 FFF8                  		cmpi.w	#-8,d1
000173F4 6D00                       		blt.s	loc_16B70
000173F6 0C41 000C                  		cmpi.w	#$C,d1
000173FA 6C00                       		bge.s	loc_16B70
000173FC D368 000C                  		add.w	d1,$C(a0)
00017400 4842                       		swap	d2
00017402 B468 0008                  		cmp.w	8(a0),d2
00017406 6700                       		beq.s	locret_16B5C
00017408 7000                       		moveq	#0,d0
0001740A 1028 003C                  		move.b	$3C(a0),d0
0001740E 5228 003C                  		addq.b	#1,$3C(a0)
00017412 0228 000F 003C             		andi.b	#$F,$3C(a0)
00017418 1181 002C                  		move.b	d1,$2C(a0,d0.w)
0001741C                            
0001741C                            locret_16B5C:
0001741C 4E75                       		rts	
0001741E                            ; ===========================================================================
0001741E                            
0001741E                            loc_16B5E:
0001741E 5528 0025                  		subq.b	#2,$25(a0)
00017422 117C 0007 002A             		move.b	#7,$2A(a0)
00017428 317C 0000 0010             		move.w	#0,$10(a0)
0001742E 4E75                       		rts	
00017430                            ; ===========================================================================
00017430                            
00017430                            loc_16B70:
00017430 2142 0008                  		move.l	d2,8(a0)
00017434 0868 0000 0022             		bchg	#0,$22(a0)
0001743A 1168 0022 0001             		move.b	$22(a0),1(a0)
00017440 7000                       		moveq	#0,d0
00017442 1028 003C                  		move.b	$3C(a0),d0
00017446 11BC 0080 002C             		move.b	#$80,$2C(a0,d0.w)
0001744C 5228 003C                  		addq.b	#1,$3C(a0)
00017450 0228 000F 003C             		andi.b	#$F,$3C(a0)
00017456 4E75                       		rts	
00017458                            ; ===========================================================================
00017458                            
00017458                            Obj78_BodySeg2:				; XREF: Obj78_Index
00017458 2268 003C                  		movea.l	$3C(a0),a1
0001745C 1169 002B 002B             		move.b	$2B(a1),$2B(a0)
00017462 6A00                       		bpl.s	Obj78_BodySeg1
00017464 43F9 0000 0000             		lea	(Ani_obj78).l,a1
0001746A 1028 0026                  		move.b	$26(a0),d0
0001746E 0240 007F                  		andi.w	#$7F,d0
00017472 5828 0026                  		addq.b	#4,$26(a0)
00017476 4A31 0004                  		tst.b	4(a1,d0.w)
0001747A 6A00                       		bpl.s	Obj78_AniBody
0001747C 5828 0026                  		addq.b	#4,$26(a0)
00017480                            
00017480                            Obj78_AniBody:
00017480 1031 0000                  		move.b	(a1,d0.w),d0
00017484 5000                       		addq.b	#8,d0
00017486 1140 001A                  		move.b	d0,$1A(a0)
0001748A                            
0001748A                            Obj78_BodySeg1:				; XREF: Obj78_Index
0001748A 2268 003C                  		movea.l	$3C(a0),a1
0001748E 4A28 0022                  		tst.b	$22(a0)
00017492 6B00 0000                  		bmi.w	loc_16C90
00017496 1169 002B 002B             		move.b	$2B(a1),$2B(a0)
0001749C 1169 0025 0025             		move.b	$25(a1),$25(a0)
000174A2 6700 0000                  		beq.w	loc_16C64
000174A6 3169 0014 0014             		move.w	$14(a1),$14(a0)
000174AC 3029 0010                  		move.w	$10(a1),d0
000174B0 D069 0014                  		add.w	$14(a1),d0
000174B4 3140 0010                  		move.w	d0,$10(a0)
000174B8 2428 0008                  		move.l	8(a0),d2
000174BC 2602                       		move.l	d2,d3
000174BE 3028 0010                  		move.w	$10(a0),d0
000174C2 0828 0000 0022             		btst	#0,$22(a0)
000174C8 6700                       		beq.s	loc_16C0C
000174CA 4440                       		neg.w	d0
000174CC                            
000174CC                            loc_16C0C:
000174CC 48C0                       		ext.l	d0
000174CE E180                       		asl.l	#8,d0
000174D0 D480                       		add.l	d0,d2
000174D2 2142 0008                  		move.l	d2,8(a0)
000174D6 4843                       		swap	d3
000174D8 B668 0008                  		cmp.w	8(a0),d3
000174DC 6700                       		beq.s	loc_16C64
000174DE 7000                       		moveq	#0,d0
000174E0 1028 003C                  		move.b	$3C(a0),d0
000174E4 1231 002C                  		move.b	$2C(a1,d0.w),d1
000174E8 0C01 0080                  		cmpi.b	#-$80,d1
000174EC 6600                       		bne.s	loc_16C50
000174EE 4843                       		swap	d3
000174F0 2143 0008                  		move.l	d3,8(a0)
000174F4 1181 002C                  		move.b	d1,$2C(a0,d0.w)
000174F8 0868 0000 0022             		bchg	#0,$22(a0)
000174FE 1168 0022 0001             		move.b	$22(a0),1(a0)
00017504 5228 003C                  		addq.b	#1,$3C(a0)
00017508 0228 000F 003C             		andi.b	#$F,$3C(a0)
0001750E 6000                       		bra.s	loc_16C64
00017510                            ; ===========================================================================
00017510                            
00017510                            loc_16C50:
00017510 4881                       		ext.w	d1
00017512 D368 000C                  		add.w	d1,$C(a0)
00017516 5228 003C                  		addq.b	#1,$3C(a0)
0001751A 0228 000F 003C             		andi.b	#$F,$3C(a0)
00017520 1181 002C                  		move.b	d1,$2C(a0,d0.w)
00017524                            
00017524                            loc_16C64:
00017524 0C29 000C 0024             		cmpi.b	#$C,$24(a1)
0001752A 6700                       		beq.s	loc_16C90
0001752C 0C11 0027                  		cmpi.b	#$27,0(a1)
00017530 6700                       		beq.s	loc_16C7C
00017532 0C29 000A 0024             		cmpi.b	#$A,$24(a1)
00017538 6600                       		bne.s	loc_16C82
0001753A                            
0001753A                            loc_16C7C:
0001753A 117C 000A 0024             		move.b	#$A,$24(a0)
00017540                            
00017540                            loc_16C82:
00017540 4EF9 0000 DDC8             		jmp	DisplaySprite
00017546                            
00017546                            ; ===========================================================================
00017546 FE00 FE80 0180 0200        Obj78_FragSpeed:dc.w $FE00, $FE80, $180, $200
0001754E                            ; ===========================================================================
0001754E                            
0001754E                            loc_16C90:
0001754E 08E9 0007 0022             		bset	#7,$22(a1)
00017554                            
00017554                            loc_16C96:
00017554 7000                       		moveq	#0,d0
00017556 1028 0024                  		move.b	$24(a0),d0
0001755A 303B 00E8                  		move.w	Obj78_FragSpeed-2(pc,d0.w),d0
0001755E 0828 0000 0022             		btst	#0,$22(a0)
00017564 6700                       		beq.s	loc_16CAA
00017566 4440                       		neg.w	d0
00017568                            
00017568                            loc_16CAA:
00017568 3140 0010                  		move.w	d0,$10(a0)
0001756C 317C FC00 0012             		move.w	#-$400,$12(a0)
00017572 117C 000C 0024             		move.b	#$C,$24(a0)
00017578 0228 00F8 001A             		andi.b	#-8,$1A(a0)
0001757E                            
0001757E                            loc_16CC0:				; XREF: Obj78_Index
0001757E 4EB9 0000 DD76             		jsr	ObjectFall
00017584 4A68 0012                  		tst.w	$12(a0)
00017588 6B00                       		bmi.s	loc_16CE0
0001758A 4EBA E146                  		jsr	ObjHitFloor
0001758E 4A41                       		tst.w	d1
00017590 6A00                       		bpl.s	loc_16CE0
00017592 D368 000C                  		add.w	d1,$C(a0)
00017596 317C FC00 0012             		move.w	#-$400,$12(a0)
0001759C                            
0001759C                            loc_16CE0:
0001759C 4A28 0001                  		tst.b	1(a0)
000175A0 6A00 FDCA                  		bpl.w	Obj78_ChkGone
000175A4 4EF9 0000 DDC8             		jmp	DisplaySprite
000175AA                            ; ===========================================================================
000175AA                            Ani_obj78:
000175AA                            	include "_anim\obj78.asm"
000175AA                            ; ---------------------------------------------------------------------------
000175AA                            ; Animation script - Caterkiller enemy (uses non-standard format)
000175AA                            ; ---------------------------------------------------------------------------
000175AA 0000 0000 0000 0000 0000+  	dc.b 0,	0, 0, 0, 0, 0, 0, 0, 0,	0, 0, 0, 0, 0, 0, 1
000175BA 0101 0101 0101 0202 0202+  	dc.b 1,	1, 1, 1, 1, 1, 2, 2, 2,	2, 2, 3, 3, 3, 3, 3
000175CA 0404 0404 0404 0505 0505+  	dc.b 4,	4, 4, 4, 4, 4, 5, 5, 5,	5, 5, 6, 6, 6, 6, 6
000175DA 0606 0707 0707 0707 0707+  	dc.b 6,	6, 7, 7, 7, 7, 7, 7, 7,	7, 7, 7, $FF, 7, 7, $FF
000175EA 0707 0707 0707 0707 0707+  	dc.b 7,	7, 7, 7, 7, 7, 7, 7, 7,	7, 7, 7, 7, 7, 7, 6
000175FA 0606 0606 0606 0505 0505+  	dc.b 6,	6, 6, 6, 6, 6, 5, 5, 5,	5, 5, 4, 4, 4, 4, 4
0001760A 0403 0303 0303 0202 0202+  	dc.b 4,	3, 3, 3, 3, 3, 2, 2, 2,	2, 2, 1, 1, 1, 1, 1
0001761A 0101 0000 0000 0000 0000+  	dc.b 1,	1, 0, 0, 0, 0, 0, 0, 0,	0, 0, 0, $FF, 0, 0, $FF
0001762A                            	even
0001762A                            	even
0001762A                            
0001762A                            ; ---------------------------------------------------------------------------
0001762A                            ; Sprite mappings - Caterkiller	enemy (MZ, SBZ)
0001762A                            ; ---------------------------------------------------------------------------
0001762A                            Map_obj78:
0001762A                            	include "_maps\obj78.asm"
0001762A                            ; ---------------------------------------------------------------------------
0001762A                            ; Sprite mappings - Caterkiller	enemy (MZ, SBZ)
0001762A                            ; ---------------------------------------------------------------------------
0001762A 0000 0000                  		dc.w byte_16D9E-Map_obj78, byte_16DA4-Map_obj78
0001762E 0000 0000                  		dc.w byte_16DAA-Map_obj78, byte_16DB0-Map_obj78
00017632 0000 0000                  		dc.w byte_16DB6-Map_obj78, byte_16DBC-Map_obj78
00017636 0000 0000                  		dc.w byte_16DC2-Map_obj78, byte_16DC8-Map_obj78
0001763A 0000 0000                  		dc.w byte_16DCE-Map_obj78, byte_16DD4-Map_obj78
0001763E 0000 0000                  		dc.w byte_16DDA-Map_obj78, byte_16DE0-Map_obj78
00017642 0000 0000                  		dc.w byte_16DE6-Map_obj78, byte_16DEC-Map_obj78
00017646 0000 0000                  		dc.w byte_16DF2-Map_obj78, byte_16DF8-Map_obj78
0001764A 0000 0000                  		dc.w byte_16DFE-Map_obj78, byte_16E04-Map_obj78
0001764E 0000 0000                  		dc.w byte_16E0A-Map_obj78, byte_16E10-Map_obj78
00017652 0000 0000                  		dc.w byte_16E16-Map_obj78, byte_16E1C-Map_obj78
00017656 0000 0000                  		dc.w byte_16E22-Map_obj78, byte_16E28-Map_obj78
0001765A 01                         byte_16D9E:	dc.b 1
0001765B F206 0000 F8               		dc.b $F2, 6, 0,	0, $F8
00017660 01                         byte_16DA4:	dc.b 1
00017661 F106 0000 F8               		dc.b $F1, 6, 0,	0, $F8
00017666 01                         byte_16DAA:	dc.b 1
00017667 F006 0000 F8               		dc.b $F0, 6, 0,	0, $F8
0001766C 01                         byte_16DB0:	dc.b 1
0001766D EF06 0000 F8               		dc.b $EF, 6, 0,	0, $F8
00017672 01                         byte_16DB6:	dc.b 1
00017673 EE06 0000 F8               		dc.b $EE, 6, 0,	0, $F8
00017678 01                         byte_16DBC:	dc.b 1
00017679 ED06 0000 F8               		dc.b $ED, 6, 0,	0, $F8
0001767E 01                         byte_16DC2:	dc.b 1
0001767F EC06 0000 F8               		dc.b $EC, 6, 0,	0, $F8
00017684 01                         byte_16DC8:	dc.b 1
00017685 EB06 0000 F8               		dc.b $EB, 6, 0,	0, $F8
0001768A 01                         byte_16DCE:	dc.b 1
0001768B F805 000C F8               		dc.b $F8, 5, 0,	$C, $F8
00017690 01                         byte_16DD4:	dc.b 1
00017691 F705 000C F8               		dc.b $F7, 5, 0,	$C, $F8
00017696 01                         byte_16DDA:	dc.b 1
00017697 F605 000C F8               		dc.b $F6, 5, 0,	$C, $F8
0001769C 01                         byte_16DE0:	dc.b 1
0001769D F505 000C F8               		dc.b $F5, 5, 0,	$C, $F8
000176A2 01                         byte_16DE6:	dc.b 1
000176A3 F405 000C F8               		dc.b $F4, 5, 0,	$C, $F8
000176A8 01                         byte_16DEC:	dc.b 1
000176A9 F305 000C F8               		dc.b $F3, 5, 0,	$C, $F8
000176AE 01                         byte_16DF2:	dc.b 1
000176AF F205 000C F8               		dc.b $F2, 5, 0,	$C, $F8
000176B4 01                         byte_16DF8:	dc.b 1
000176B5 F105 000C F8               		dc.b $F1, 5, 0,	$C, $F8
000176BA 01                         byte_16DFE:	dc.b 1
000176BB F206 0006 F8               		dc.b $F2, 6, 0,	6, $F8
000176C0 01                         byte_16E04:	dc.b 1
000176C1 F106 0006 F8               		dc.b $F1, 6, 0,	6, $F8
000176C6 01                         byte_16E0A:	dc.b 1
000176C7 F006 0006 F8               		dc.b $F0, 6, 0,	6, $F8
000176CC 01                         byte_16E10:	dc.b 1
000176CD EF06 0006 F8               		dc.b $EF, 6, 0,	6, $F8
000176D2 01                         byte_16E16:	dc.b 1
000176D3 EE06 0006 F8               		dc.b $EE, 6, 0,	6, $F8
000176D8 01                         byte_16E1C:	dc.b 1
000176D9 ED06 0006 F8               		dc.b $ED, 6, 0,	6, $F8
000176DE 01                         byte_16E22:	dc.b 1
000176DF EC06 0006 F8               		dc.b $EC, 6, 0,	6, $F8
000176E4 01                         byte_16E28:	dc.b 1
000176E5 EB06 0006 F8               		dc.b $EB, 6, 0,	6, $F8
000176EA                            		even
000176EA                            		even
000176EA                            
000176EA                            ; ===========================================================================
000176EA                            ; ---------------------------------------------------------------------------
000176EA                            ; Object 79 - lamppost
000176EA                            ; ---------------------------------------------------------------------------
000176EA                            
000176EA                            Obj79:					; XREF: Obj_Index
000176EA 7000                       		moveq	#0,d0
000176EC 1028 0024                  		move.b	$24(a0),d0
000176F0 323B 0000                  		move.w	Obj79_Index(pc,d0.w),d1
000176F4 4EBB 1000                  		jsr	Obj79_Index(pc,d1.w)
000176F8 4EFA 8776                  		jmp	MarkObjGone
000176FC                            ; ===========================================================================
000176FC 0000                       Obj79_Index:	dc.w Obj79_Main-Obj79_Index
000176FE 0000                       		dc.w Obj79_BlueLamp-Obj79_Index
00017700 0000                       		dc.w Obj79_AfterHit-Obj79_Index
00017702 0000                       		dc.w Obj79_Twirl-Obj79_Index
00017704                            ; ===========================================================================
00017704                            
00017704                            Obj79_Main:				; XREF: Obj79_Index
00017704 5428 0024                  		addq.b	#2,$24(a0)
00017708 217C 0000 0000 0004        		move.l	#Map_obj79,4(a0)
00017710 317C 07A0 0002             		move.w	#$7A0,2(a0)
00017716 117C 0004 0001             		move.b	#4,1(a0)
0001771C 117C 0008 0019             		move.b	#8,$19(a0)
00017722 117C 0005 0018             		move.b	#5,$18(a0)
00017728 45F8 FC00                  		lea	($FFFFFC00).w,a2
0001772C 7000                       		moveq	#0,d0
0001772E 1028 0023                  		move.b	$23(a0),d0
00017732 08B2 0007 0002             		bclr	#7,2(a2,d0.w)
00017738 0832 0000 0002             		btst	#0,2(a2,d0.w)
0001773E 6600                       		bne.s	Obj79_RedLamp
00017740 1238 FE30                  		move.b	($FFFFFE30).w,d1
00017744 0201 007F                  		andi.b	#$7F,d1
00017748 1428 0028                  		move.b	$28(a0),d2	; get lamppost number
0001774C 0202 007F                  		andi.b	#$7F,d2
00017750 B202                       		cmp.b	d2,d1		; is lamppost number higher than the number hit?
00017752 6500                       		bcs.s	Obj79_BlueLamp	; if yes, branch
00017754                            
00017754                            Obj79_RedLamp:
00017754 08F2 0000 0002             		bset	#0,2(a2,d0.w)
0001775A 117C 0004 0024             		move.b	#4,$24(a0)	; run "Obj79_AfterHit" routine
00017760 117C 0003 001A             		move.b	#3,$1A(a0)	; use red lamppost frame
00017766 4E75                       		rts	
00017768                            ; ===========================================================================
00017768                            
00017768                            Obj79_BlueLamp:				; XREF: Obj79_Index
00017768 4A78 FE08                  		tst.w	($FFFFFE08).w	; is debug mode	being used?
0001776C 6600 0000                  		bne.w	locret_16F90	; if yes, branch
00017770 4A38 F7C8                  		tst.b	($FFFFF7C8).w
00017774 6B00 0000                  		bmi.w	locret_16F90
00017778 1238 FE30                  		move.b	($FFFFFE30).w,d1
0001777C 0201 007F                  		andi.b	#$7F,d1
00017780 1428 0028                  		move.b	$28(a0),d2
00017784 0202 007F                  		andi.b	#$7F,d2
00017788 B202                       		cmp.b	d2,d1
0001778A 6500                       		bcs.s	Obj79_HitLamp
0001778C 45F8 FC00                  		lea	($FFFFFC00).w,a2
00017790 7000                       		moveq	#0,d0
00017792 1028 0023                  		move.b	$23(a0),d0
00017796 08F2 0000 0002             		bset	#0,2(a2,d0.w)
0001779C 117C 0004 0024             		move.b	#4,$24(a0)
000177A2 117C 0003 001A             		move.b	#3,$1A(a0)
000177A8 6000 0000                  		bra.w	locret_16F90
000177AC                            ; ===========================================================================
000177AC                            
000177AC                            Obj79_HitLamp:
000177AC 3038 D008                  		move.w	($FFFFD008).w,d0
000177B0 9068 0008                  		sub.w	8(a0),d0
000177B4 5040                       		addq.w	#8,d0
000177B6 0C40 0010                  		cmpi.w	#$10,d0
000177BA 6400 0000                  		bcc.w	locret_16F90
000177BE 3038 D00C                  		move.w	($FFFFD00C).w,d0
000177C2 9068 000C                  		sub.w	$C(a0),d0
000177C6 0640 0040                  		addi.w	#$40,d0
000177CA 0C40 0068                  		cmpi.w	#$68,d0
000177CE 6400                       		bcc.s	locret_16F90
000177D0 303C 00A1                  		move.w	#$A1,d0
000177D4 4EB9 0000 15C0             		jsr	(PlaySound_Special).l ;	play lamppost sound
000177DA 5428 0024                  		addq.b	#2,$24(a0)
000177DE 4EB9 0000 E24E             		jsr	SingleObjLoad
000177E4 6600                       		bne.s	loc_16F76
000177E6 12BC 0079                  		move.b	#$79,0(a1)	; load twirling	lamp object
000177EA 137C 0006 0024             		move.b	#6,$24(a1)	; use "Obj79_Twirl" routine
000177F0 3368 0008 0030             		move.w	8(a0),$30(a1)
000177F6 3368 000C 0032             		move.w	$C(a0),$32(a1)
000177FC 0469 0018 0032             		subi.w	#$18,$32(a1)
00017802 237C 0000 0000 0004        		move.l	#Map_obj79,4(a1)
0001780A 337C 07A0 0002             		move.w	#$7A0,2(a1)
00017810 137C 0004 0001             		move.b	#4,1(a1)
00017816 137C 0008 0019             		move.b	#8,$19(a1)
0001781C 137C 0004 0018             		move.b	#4,$18(a1)
00017822 137C 0002 001A             		move.b	#2,$1A(a1)
00017828 337C 0020 0036             		move.w	#$20,$36(a1)
0001782E                            
0001782E                            loc_16F76:
0001782E 117C 0001 001A             		move.b	#1,$1A(a0)	; use "post only" frame, with no lamp
00017834 6100 0000                  		bsr.w	Obj79_StoreInfo
00017838 45F8 FC00                  		lea	($FFFFFC00).w,a2
0001783C 7000                       		moveq	#0,d0
0001783E 1028 0023                  		move.b	$23(a0),d0
00017842 08F2 0000 0002             		bset	#0,2(a2,d0.w)
00017848                            
00017848                            locret_16F90:
00017848 4E75                       		rts	
0001784A                            ; ===========================================================================
0001784A                            
0001784A                            Obj79_AfterHit:				; XREF: Obj79_Index
0001784A 4E75                       		rts	
0001784C                            ; ===========================================================================
0001784C                            
0001784C                            Obj79_Twirl:				; XREF: Obj79_Index
0001784C 5368 0036                  		subq.w	#1,$36(a0)
00017850 6A00                       		bpl.s	loc_16FA0
00017852 117C 0004 0024             		move.b	#4,$24(a0)
00017858                            
00017858                            loc_16FA0:
00017858 1028 0026                  		move.b	$26(a0),d0
0001785C 0428 0010 0026             		subi.b	#$10,$26(a0)
00017862 0400 0040                  		subi.b	#$40,d0
00017866 4EB9 0000 2CAC             		jsr	(CalcSine).l
0001786C C3FC 0C00                  		muls.w	#$C00,d1
00017870 4841                       		swap	d1
00017872 D268 0030                  		add.w	$30(a0),d1
00017876 3141 0008                  		move.w	d1,8(a0)
0001787A C1FC 0C00                  		muls.w	#$C00,d0
0001787E 4840                       		swap	d0
00017880 D068 0032                  		add.w	$32(a0),d0
00017884 3140 000C                  		move.w	d0,$C(a0)
00017888 4E75                       		rts	
0001788A                            ; ===========================================================================
0001788A                            ; ---------------------------------------------------------------------------
0001788A                            ; Subroutine to	store information when you hit a lamppost
0001788A                            ; ---------------------------------------------------------------------------
0001788A                            
0001788A                            Obj79_StoreInfo:			; XREF: Obj79_HitLamp
0001788A 11E8 0028 FE30             		move.b	$28(a0),($FFFFFE30).w 		; lamppost number
00017890 11F8 FE30 FE31             		move.b	($FFFFFE30).w,($FFFFFE31).w
00017896 31E8 0008 FE32             		move.w	8(a0),($FFFFFE32).w		; x-position
0001789C 31E8 000C FE34             		move.w	$C(a0),($FFFFFE34).w		; y-position
000178A2 31F8 FE20 FE36             		move.w	($FFFFFE20).w,($FFFFFE36).w 	; rings
000178A8 11F8 FE1B FE54             		move.b	($FFFFFE1B).w,($FFFFFE54).w 	; lives
000178AE 21F8 FE22 FE38             		move.l	($FFFFFE22).w,($FFFFFE38).w 	; time
000178B4 11F8 F742 FE3C             		move.b	($FFFFF742).w,($FFFFFE3C).w 	; routine counter for dynamic level mod
000178BA 31F8 F72E FE3E             		move.w	($FFFFF72E).w,($FFFFFE3E).w 	; lower y-boundary of level
000178C0 31F8 F700 FE40             		move.w	($FFFFF700).w,($FFFFFE40).w 	; screen x-position
000178C6 31F8 F704 FE42             		move.w	($FFFFF704).w,($FFFFFE42).w 	; screen y-position
000178CC 31F8 F708 FE44             		move.w	($FFFFF708).w,($FFFFFE44).w 	; bg position
000178D2 31F8 F70C FE46             		move.w	($FFFFF70C).w,($FFFFFE46).w 	; bg position
000178D8 31F8 F710 FE48             		move.w	($FFFFF710).w,($FFFFFE48).w 	; bg position
000178DE 31F8 F714 FE4A             		move.w	($FFFFF714).w,($FFFFFE4A).w 	; bg position
000178E4 31F8 F718 FE4C             		move.w	($FFFFF718).w,($FFFFFE4C).w 	; bg position
000178EA 31F8 F71C FE4E             		move.w	($FFFFF71C).w,($FFFFFE4E).w 	; bg position
000178F0 31F8 F648 FE50             		move.w	($FFFFF648).w,($FFFFFE50).w 	; water height
000178F6 11F8 F64D FE52             		move.b	($FFFFF64D).w,($FFFFFE52).w 	; rountine counter for water
000178FC 11F8 F64E FE53             		move.b	($FFFFF64E).w,($FFFFFE53).w 	; water direction
00017902 4E75                       		rts	
00017904                            
00017904                            ; ---------------------------------------------------------------------------
00017904                            ; Subroutine to	load stored info when you start	a level	from a lamppost
00017904                            ; ---------------------------------------------------------------------------
00017904                            
00017904                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00017904                            
00017904                            
00017904                            Obj79_LoadInfo:				; XREF: LevelSizeLoad
00017904 11F8 FE31 FE30             		move.b	($FFFFFE31).w,($FFFFFE30).w
0001790A 31F8 FE32 D008             		move.w	($FFFFFE32).w,($FFFFD008).w
00017910 31F8 FE34 D00C             		move.w	($FFFFFE34).w,($FFFFD00C).w
00017916 31F8 FE36 FE20             		move.w	($FFFFFE36).w,($FFFFFE20).w
0001791C 11F8 FE54 FE1B             		move.b	($FFFFFE54).w,($FFFFFE1B).w
00017922 4278 FE20                  		clr.w	($FFFFFE20).w
00017926 4238 FE1B                  		clr.b	($FFFFFE1B).w
0001792A 21F8 FE38 FE22             		move.l	($FFFFFE38).w,($FFFFFE22).w
00017930 11FC 003B FE25             		move.b	#59,($FFFFFE25).w
00017936 5338 FE24                  		subq.b	#1,($FFFFFE24).w
0001793A 11F8 FE3C F742             		move.b	($FFFFFE3C).w,($FFFFF742).w
00017940 11F8 FE52 F64D             		move.b	($FFFFFE52).w,($FFFFF64D).w
00017946 31F8 FE3E F72E             		move.w	($FFFFFE3E).w,($FFFFF72E).w
0001794C 31F8 FE3E F726             		move.w	($FFFFFE3E).w,($FFFFF726).w
00017952 31F8 FE40 F700             		move.w	($FFFFFE40).w,($FFFFF700).w
00017958 31F8 FE42 F704             		move.w	($FFFFFE42).w,($FFFFF704).w
0001795E 31F8 FE44 F708             		move.w	($FFFFFE44).w,($FFFFF708).w
00017964 31F8 FE46 F70C             		move.w	($FFFFFE46).w,($FFFFF70C).w
0001796A 31F8 FE48 F710             		move.w	($FFFFFE48).w,($FFFFF710).w
00017970 31F8 FE4A F714             		move.w	($FFFFFE4A).w,($FFFFF714).w
00017976 31F8 FE4C F718             		move.w	($FFFFFE4C).w,($FFFFF718).w
0001797C 31F8 FE4E F71C             		move.w	($FFFFFE4E).w,($FFFFF71C).w
00017982 0C38 0001 FE10             		cmpi.b	#1,($FFFFFE10).w
00017988 6600                       		bne.s	loc_170E4
0001798A 31F8 FE50 F648             		move.w	($FFFFFE50).w,($FFFFF648).w
00017990 11F8 FE52 F64D             		move.b	($FFFFFE52).w,($FFFFF64D).w
00017996 11F8 FE53 F64E             		move.b	($FFFFFE53).w,($FFFFF64E).w
0001799C                            
0001799C                            loc_170E4:
0001799C 4A38 FE30                  		tst.b	($FFFFFE30).w
000179A0 6A00                       		bpl.s	locret_170F6
000179A2 3038 FE32                  		move.w	($FFFFFE32).w,d0
000179A6 0440 00A0                  		subi.w	#$A0,d0
000179AA 31C0 F728                  		move.w	d0,($FFFFF728).w
000179AE                            
000179AE                            locret_170F6:
000179AE 4E75                       		rts	
000179B0                            ; End of function Obj79_LoadInfo
000179B0                            
000179B0                            ; ===========================================================================
000179B0                            ; ---------------------------------------------------------------------------
000179B0                            ; Sprite mappings - lamppost
000179B0                            ; ---------------------------------------------------------------------------
000179B0                            Map_obj79:
000179B0                            	include "_maps\obj79.asm"
000179B0                            ; ---------------------------------------------------------------------------
000179B0                            ; Sprite mappings - lamppost
000179B0                            ; ---------------------------------------------------------------------------
000179B0 0000 0000                  		dc.w byte_17100-Map_obj79, byte_1711F-Map_obj79
000179B4 0000 0000                  		dc.w byte_17134-Map_obj79, byte_1713F-Map_obj79
000179B8 06                         byte_17100:	dc.b 6
000179B9 E401 0000 F8               		dc.b $E4, 1, 0,	0, $F8
000179BE E401 0800 00               		dc.b $E4, 1, 8,	0, 0
000179C3 F403 2002 F8               		dc.b $F4, 3, $20, 2, $F8
000179C8 F403 2802 00               		dc.b $F4, 3, $28, 2, 0
000179CD D401 0006 F8               		dc.b $D4, 1, 0,	6, $F8
000179D2 D401 0806 00               		dc.b $D4, 1, 8,	6, 0
000179D7 04                         byte_1711F:	dc.b 4
000179D8 E401 0000 F8               		dc.b $E4, 1, 0,	0, $F8
000179DD E401 0800 00               		dc.b $E4, 1, 8,	0, 0
000179E2 F403 2002 F8               		dc.b $F4, 3, $20, 2, $F8
000179E7 F403 2802 00               		dc.b $F4, 3, $28, 2, 0
000179EC 02                         byte_17134:	dc.b 2
000179ED F801 0008 F8               		dc.b $F8, 1, 0,	8, $F8
000179F2 F801 0808 00               		dc.b $F8, 1, 8,	8, 0
000179F7 06                         byte_1713F:	dc.b 6
000179F8 E401 0000 F8               		dc.b $E4, 1, 0,	0, $F8
000179FD E401 0800 00               		dc.b $E4, 1, 8,	0, 0
00017A02 F403 2002 F8               		dc.b $F4, 3, $20, 2, $F8
00017A07 F403 2802 00               		dc.b $F4, 3, $28, 2, 0
00017A0C D401 0008 F8               		dc.b $D4, 1, 0,	8, $F8
00017A11 D401 0808 00               		dc.b $D4, 1, 8,	8, 0
00017A16                            		even
00017A16                            		even
00017A16                            
00017A16                            ; ===========================================================================
00017A16                            ; ---------------------------------------------------------------------------
00017A16                            ; Object 7D - hidden points at the end of a level
00017A16                            ; ---------------------------------------------------------------------------
00017A16                            
00017A16                            Obj7D:					; XREF: Obj_Index
00017A16 7000                       		moveq	#0,d0
00017A18 1028 0024                  		move.b	$24(a0),d0
00017A1C 323B 0000                  		move.w	Obj7D_Index(pc,d0.w),d1
00017A20 4EFB 1000                  		jmp	Obj7D_Index(pc,d1.w)
00017A24                            ; ===========================================================================
00017A24 0000                       Obj7D_Index:	dc.w Obj7D_Main-Obj7D_Index
00017A26 0000                       		dc.w Obj7D_DelayDel-Obj7D_Index
00017A28                            ; ===========================================================================
00017A28                            
00017A28                            Obj7D_Main:				; XREF: Obj7D_Index
00017A28 7410                       		moveq	#$10,d2
00017A2A 3602                       		move.w	d2,d3
00017A2C D643                       		add.w	d3,d3
00017A2E 43F8 D000                  		lea	($FFFFD000).w,a1
00017A32 3029 0008                  		move.w	8(a1),d0
00017A36 9068 0008                  		sub.w	8(a0),d0
00017A3A D042                       		add.w	d2,d0
00017A3C B043                       		cmp.w	d3,d0
00017A3E 6400                       		bcc.s	Obj7D_ChkDel
00017A40 3229 000C                  		move.w	$C(a1),d1
00017A44 9268 000C                  		sub.w	$C(a0),d1
00017A48 D242                       		add.w	d2,d1
00017A4A B243                       		cmp.w	d3,d1
00017A4C 6400                       		bcc.s	Obj7D_ChkDel
00017A4E 4A78 FE08                  		tst.w	($FFFFFE08).w
00017A52 6600                       		bne.s	Obj7D_ChkDel
00017A54 4A38 F7CD                  		tst.b	($FFFFF7CD).w
00017A58 6600                       		bne.s	Obj7D_ChkDel
00017A5A 5428 0024                  		addq.b	#2,$24(a0)
00017A5E 217C 0000 0000 0004        		move.l	#Map_obj7D,4(a0)
00017A66 317C 84B6 0002             		move.w	#$84B6,2(a0)
00017A6C 0028 0004 0001             		ori.b	#4,1(a0)
00017A72 117C 0000 0018             		move.b	#0,$18(a0)
00017A78 117C 0010 0019             		move.b	#$10,$19(a0)
00017A7E 1168 0028 001A             		move.b	$28(a0),$1A(a0)
00017A84 317C 0077 0030             		move.w	#119,$30(a0)	; set display time to 2	seconds
00017A8A 303C 00C9                  		move.w	#$C9,d0
00017A8E 4EB9 0000 15C0             		jsr	(PlaySound_Special).l ;	play bonus sound
00017A94 7000                       		moveq	#0,d0
00017A96 1028 0028                  		move.b	$28(a0),d0
00017A9A D040                       		add.w	d0,d0
00017A9C 303B 0000                  		move.w	Obj7D_Points(pc,d0.w),d0 ; load	bonus points array
00017AA0 4EB9 0000 0000             		jsr	AddPoints
00017AA6                            
00017AA6                            Obj7D_ChkDel:
00017AA6 3028 0008                  		move.w	8(a0),d0
00017AAA 0240 FF80                  		andi.w	#$FF80,d0
00017AAE 3238 F700                  		move.w	($FFFFF700).w,d1
00017AB2 0441 0080                  		subi.w	#$80,d1
00017AB6 0241 FF80                  		andi.w	#$FF80,d1
00017ABA 9041                       		sub.w	d1,d0
00017ABC 0C40 0280                  		cmpi.w	#$280,d0
00017AC0 6200                       		bhi.s	Obj7D_Delete
00017AC2 4E75                       		rts	
00017AC4                            ; ===========================================================================
00017AC4                            
00017AC4                            Obj7D_Delete:
00017AC4 4EF9 0000 DE04             		jmp	DeleteObject
00017ACA                            ; ===========================================================================
00017ACA 0000                       Obj7D_Points:	dc.w 0			; Bonus	points array
00017ACC 03E8                       		dc.w 1000
00017ACE 0064                       		dc.w 100
00017AD0 0001                       		dc.w 1
00017AD2                            ; ===========================================================================
00017AD2                            
00017AD2                            Obj7D_DelayDel:				; XREF: Obj7D_Index
00017AD2 5368 0030                  		subq.w	#1,$30(a0)	; subtract 1 from display time
00017AD6 6B00                       		bmi.s	Obj7D_Delete2	; if time is zero, branch
00017AD8 3028 0008                  		move.w	8(a0),d0
00017ADC 0240 FF80                  		andi.w	#-$80,d0
00017AE0 3238 F700                  		move.w	($FFFFF700).w,d1
00017AE4 0441 0080                  		subi.w	#$80,d1
00017AE8 0241 FF80                  		andi.w	#-$80,d1
00017AEC 9041                       		sub.w	d1,d0
00017AEE 0C40 0280                  		cmpi.w	#$280,d0
00017AF2 6200                       		bhi.s	Obj7D_Delete2
00017AF4 4EF9 0000 DDC8             		jmp	DisplaySprite
00017AFA                            ; ===========================================================================
00017AFA                            
00017AFA                            Obj7D_Delete2:
00017AFA 4EF9 0000 DE04             		jmp	DeleteObject
00017B00                            ; ===========================================================================
00017B00                            ; ---------------------------------------------------------------------------
00017B00                            ; Sprite mappings - hidden points at the end of	a level
00017B00                            ; ---------------------------------------------------------------------------
00017B00                            Map_obj7D:
00017B00                            	include "_maps\obj7D.asm"
00017B00                            ; ---------------------------------------------------------------------------
00017B00                            ; Sprite mappings - hidden points at the end of	a level
00017B00                            ; ---------------------------------------------------------------------------
00017B00 0000 0000                  		dc.w byte_17250-Map_obj7D, byte_17251-Map_obj7D
00017B04 0000 0000                  		dc.w byte_17257-Map_obj7D, byte_1725D-Map_obj7D
00017B08 00                         byte_17250:	dc.b 0
00017B09 01                         byte_17251:	dc.b 1
00017B0A F40E 0000 F0               		dc.b $F4, $E, 0, 0, $F0
00017B0F 01                         byte_17257:	dc.b 1
00017B10 F40E 000C F0               		dc.b $F4, $E, 0, $C, $F0
00017B15 01                         byte_1725D:	dc.b 1
00017B16 F40E 0018 F0               		dc.b $F4, $E, 0, $18, $F0
00017B1C 00                         		even
00017B1C 00                         		even
00017B1C                            
00017B1C                            ; ===========================================================================
00017B1C                            ; ---------------------------------------------------------------------------
00017B1C                            ; Object 8A - "SONIC TEAM PRESENTS" and	credits
00017B1C                            ; ---------------------------------------------------------------------------
00017B1C                            
00017B1C                            Obj8A:					; XREF: Obj_Index
00017B1C 7000                       		moveq	#0,d0
00017B1E 1028 0024                  		move.b	$24(a0),d0
00017B22 323B 0000                  		move.w	Obj8A_Index(pc,d0.w),d1
00017B26 4EFB 1000                  		jmp	Obj8A_Index(pc,d1.w)
00017B2A                            ; ===========================================================================
00017B2A 0000                       Obj8A_Index:	dc.w Obj8A_Main-Obj8A_Index
00017B2C 0000                       		dc.w Obj8A_Display-Obj8A_Index
00017B2E                            ; ===========================================================================
00017B2E                            
00017B2E                            Obj8A_Main:				; XREF: Obj8A_Index
00017B2E 5428 0024                  		addq.b	#2,$24(a0)
00017B32 317C 0120 0008             		move.w	#$120,8(a0)
00017B38 317C 00F0 000A             		move.w	#$F0,$A(a0)
00017B3E 217C 0000 0000 0004        		move.l	#Map_obj8A,4(a0)
00017B46 317C 05A0 0002             		move.w	#$5A0,2(a0)
00017B4C 3038 FFF4                  		move.w	($FFFFFFF4).w,d0 ; load	credits	index number
00017B50 1140 001A                  		move.b	d0,$1A(a0)	; display appropriate sprite
00017B54 117C 0000 0001             		move.b	#0,1(a0)
00017B5A 117C 0000 0018             		move.b	#0,$18(a0)
00017B60 0C38 0004 F600             		cmpi.b	#4,($FFFFF600).w ; is the scene	number 04 (title screen)?
00017B66 6600                       		bne.s	Obj8A_Display	; if not, branch
00017B68 317C 00A6 0002             		move.w	#$A6,2(a0)
00017B6E 117C 000A 001A             		move.b	#$A,$1A(a0)	; display "SONIC TEAM PRESENTS"
00017B74 4A38 FFE3                  		tst.b	($FFFFFFE3).w	; is hidden credits cheat on?
00017B78 6700                       		beq.s	Obj8A_Display	; if not, branch
00017B7A 0C38 0072 F604             		cmpi.b	#$72,($FFFFF604).w ; is	Start+A+C+Down being pressed?
00017B80 6600                       		bne.s	Obj8A_Display	; if not, branch
00017B82 31FC 0EEE FBC0             		move.w	#$EEE,($FFFFFBC0).w ; 3rd pallet, 1st entry = white
00017B88 31FC 0880 FBC2             		move.w	#$880,($FFFFFBC2).w ; 3rd pallet, 2nd entry = cyan
00017B8E 4EF9 0000 DE04             		jmp	DeleteObject
00017B94                            ; ===========================================================================
00017B94                            
00017B94                            Obj8A_Display:				; XREF: Obj8A_Index
00017B94 4EF9 0000 DDC8             		jmp	DisplaySprite
00017B9A                            ; ===========================================================================
00017B9A                            ; ---------------------------------------------------------------------------
00017B9A                            ; Sprite mappings - "SONIC TEAM	PRESENTS" and credits
00017B9A                            ; ---------------------------------------------------------------------------
00017B9A                            Map_obj8A:
00017B9A                            	include "_maps\obj8A.asm"
00017B9A                            ; ================================================================================
00017B9A                            ; Sprite Mappings - generated by Flex 2 Sun Mar 23 2025 20:55:17 GMT-0500 (Central Daylight Time)
00017B9A                            ; ================================================================================
00017B9A                            
00017B9A                            DATAV02AM357W0A:
00017B9A 0000 0000                  	dc.w DATAV02AM357W0A_0-DATAV02AM357W0A, DATAV02AM357W0A_1-DATAV02AM357W0A
00017B9E 0000 0000                  	dc.w DATAV02AM357W0A_2-DATAV02AM357W0A, DATAV02AM357W0A_3-DATAV02AM357W0A
00017BA2 0000 0000                  	dc.w DATAV02AM357W0A_4-DATAV02AM357W0A, DATAV02AM357W0A_5-DATAV02AM357W0A
00017BA6 0000 0000                  	dc.w DATAV02AM357W0A_6-DATAV02AM357W0A, DATAV02AM357W0A_7-DATAV02AM357W0A
00017BAA 0000 0000                  	dc.w DATAV02AM357W0A_8-DATAV02AM357W0A, DATAV02AM357W0A_9-DATAV02AM357W0A
00017BAE 0000                       	dc.w DATAV02AM357W0A_A-DATAV02AM357W0A
00017BB0 0E                         DATAV02AM357W0A_0: dc.b $E
00017BB1 F805 802E 88               	dc.b $F8, $5, $80, $2E, $88
00017BB6 F805 8026 98               	dc.b $F8, $5, $80, $26, $98
00017BBB F805 801A A8               	dc.b $F8, $5, $80, $1A, $A8
00017BC0 F801 8046 B8               	dc.b $F8, $1, $80, $46, $B8
00017BC5 F805 801E C0               	dc.b $F8, $5, $80, $1E, $C0
00017BCA F805 803E D8               	dc.b $F8, $5, $80, $3E, $D8
00017BCF F805 800E E8               	dc.b $F8, $5, $80, $E, $E8
00017BD4 F805 8004 F8               	dc.b $F8, $5, $80, $4, $F8
00017BD9 F809 8008 08               	dc.b $F8, $9, $80, $8, $8
00017BDE F805 802E 28               	dc.b $F8, $5, $80, $2E, $28
00017BE3 F805 803E 38               	dc.b $F8, $5, $80, $3E, $38
00017BE8 F805 8004 48               	dc.b $F8, $5, $80, $4, $48
00017BED F805 805C 58               	dc.b $F8, $5, $80, $5C, $58
00017BF2 F805 805C 68               	dc.b $F8, $5, $80, $5C, $68
00017BF7 10                         DATAV02AM357W0A_1: dc.b $10
00017BF8 D805 0000 80               	dc.b $D8, $5, $0, $0, $80
00017BFD D805 0004 90               	dc.b $D8, $5, $0, $4, $90
00017C02 D809 0008 A0               	dc.b $D8, $9, $0, $8, $A0
00017C07 D805 000E B4               	dc.b $D8, $5, $0, $E, $B4
00017C0C D805 0012 D0               	dc.b $D8, $5, $0, $12, $D0
00017C11 D805 0016 E0               	dc.b $D8, $5, $0, $16, $E0
00017C16 D805 0004 F0               	dc.b $D8, $5, $0, $4, $F0
00017C1B D805 001A 00               	dc.b $D8, $5, $0, $1A, $0
00017C20 0805 001E C8               	dc.b $8, $5, $0, $1E, $C8
00017C25 0805 0004 D8               	dc.b $8, $5, $0, $4, $D8
00017C2A 0805 0022 E8               	dc.b $8, $5, $0, $22, $E8
00017C2F 0805 0026 F8               	dc.b $8, $5, $0, $26, $F8
00017C34 0805 0016 08               	dc.b $8, $5, $0, $16, $8
00017C39 0805 002A 20               	dc.b $8, $5, $0, $2A, $20
00017C3E 0805 0004 30               	dc.b $8, $5, $0, $4, $30
00017C43 0805 002E 44               	dc.b $8, $5, $0, $2E, $44
00017C48 0A                         DATAV02AM357W0A_2: dc.b $A
00017C49 D805 0012 80               	dc.b $D8, $5, $0, $12, $80
00017C4E D805 0022 90               	dc.b $D8, $5, $0, $22, $90
00017C53 D805 0026 A0               	dc.b $D8, $5, $0, $26, $A0
00017C58 D805 0000 B0               	dc.b $D8, $5, $0, $0, $B0
00017C5D D805 0022 C0               	dc.b $D8, $5, $0, $22, $C0
00017C62 D805 0004 D0               	dc.b $D8, $5, $0, $4, $D0
00017C67 D809 0008 E0               	dc.b $D8, $9, $0, $8, $E0
00017C6C 0805 002A E8               	dc.b $8, $5, $0, $2A, $E8
00017C71 0805 0032 F8               	dc.b $8, $5, $0, $32, $F8
00017C76 0805 0036 08               	dc.b $8, $5, $0, $36, $8
00017C7B 18                         DATAV02AM357W0A_3: dc.b $18
00017C7C D805 001E 88               	dc.b $D8, $5, $0, $1E, $88
00017C81 D805 003A 98               	dc.b $D8, $5, $0, $3A, $98
00017C86 D805 0004 A8               	dc.b $D8, $5, $0, $4, $A8
00017C8B D805 0022 B8               	dc.b $D8, $5, $0, $22, $B8
00017C90 D805 0004 C8               	dc.b $D8, $5, $0, $4, $C8
00017C95 D805 001E D8               	dc.b $D8, $5, $0, $1E, $D8
00017C9A D805 003E E8               	dc.b $D8, $5, $0, $3E, $E8
00017C9F D805 000E F8               	dc.b $D8, $5, $0, $E, $F8
00017CA4 D805 0022 08               	dc.b $D8, $5, $0, $22, $8
00017CA9 D805 0042 20               	dc.b $D8, $5, $0, $42, $20
00017CAE D805 000E 30               	dc.b $D8, $5, $0, $E, $30
00017CB3 D805 002E 40               	dc.b $D8, $5, $0, $2E, $40
00017CB8 D801 0046 50               	dc.b $D8, $1, $0, $46, $50
00017CBD D805 0000 58               	dc.b $D8, $5, $0, $0, $58
00017CC2 D805 001A 68               	dc.b $D8, $5, $0, $1A, $68
00017CC7 0805 0048 C0               	dc.b $8, $5, $0, $48, $C0
00017CCC 0801 0046 D0               	dc.b $8, $1, $0, $46, $D0
00017CD1 0805 0000 D8               	dc.b $8, $5, $0, $0, $D8
00017CD6 0801 0046 E8               	dc.b $8, $1, $0, $46, $E8
00017CDB 0805 002E F0               	dc.b $8, $5, $0, $2E, $F0
00017CE0 0805 0016 00               	dc.b $8, $5, $0, $16, $0
00017CE5 0805 0004 10               	dc.b $8, $5, $0, $4, $10
00017CEA 0805 001A 20               	dc.b $8, $5, $0, $1A, $20
00017CEF 0805 0042 30               	dc.b $8, $5, $0, $42, $30
00017CF4 14                         DATAV02AM357W0A_4: dc.b $14
00017CF5 D005 0042 A0               	dc.b $D0, $5, $0, $42, $A0
00017CFA D005 000E B0               	dc.b $D0, $5, $0, $E, $B0
00017CFF D005 002E C0               	dc.b $D0, $5, $0, $2E, $C0
00017D04 D001 0046 D0               	dc.b $D0, $1, $0, $46, $D0
00017D09 D005 0000 D8               	dc.b $D0, $5, $0, $0, $D8
00017D0E D005 001A E8               	dc.b $D0, $5, $0, $1A, $E8
00017D13 0005 004C E8               	dc.b $0, $5, $0, $4C, $E8
00017D18 0001 0046 F8               	dc.b $0, $1, $0, $46, $F8
00017D1D 0005 001A 04               	dc.b $0, $5, $0, $1A, $4
00017D22 0005 002A 14               	dc.b $0, $5, $0, $2A, $14
00017D27 0005 0004 24               	dc.b $0, $5, $0, $4, $24
00017D2C 2005 0012 D0               	dc.b $20, $5, $0, $12, $D0
00017D31 2005 003A E0               	dc.b $20, $5, $0, $3A, $E0
00017D36 2005 000E F0               	dc.b $20, $5, $0, $E, $F0
00017D3B 2005 001A 00               	dc.b $20, $5, $0, $1A, $0
00017D40 2001 0046 10               	dc.b $20, $1, $0, $46, $10
00017D45 2005 0050 18               	dc.b $20, $5, $0, $50, $18
00017D4A 2005 0022 30               	dc.b $20, $5, $0, $22, $30
00017D4F 2001 0046 40               	dc.b $20, $1, $0, $46, $40
00017D54 2005 000E 48               	dc.b $20, $5, $0, $E, $48
00017D59 1A                         DATAV02AM357W0A_5: dc.b $1A
00017D5A D805 002E 98               	dc.b $D8, $5, $0, $2E, $98
00017D5F D805 0026 A8               	dc.b $D8, $5, $0, $26, $A8
00017D64 D805 0032 B8               	dc.b $D8, $5, $0, $32, $B8
00017D69 D805 001A C8               	dc.b $D8, $5, $0, $1A, $C8
00017D6E D805 0054 D8               	dc.b $D8, $5, $0, $54, $D8
00017D73 D805 0012 F8               	dc.b $D8, $5, $0, $12, $F8
00017D78 D805 0022 08               	dc.b $D8, $5, $0, $22, $8
00017D7D D805 0026 18               	dc.b $D8, $5, $0, $26, $18
00017D82 D805 0042 28               	dc.b $D8, $5, $0, $42, $28
00017D87 D805 0032 38               	dc.b $D8, $5, $0, $32, $38
00017D8C D805 001E 48               	dc.b $D8, $5, $0, $1E, $48
00017D91 D805 000E 58               	dc.b $D8, $5, $0, $E, $58
00017D96 0809 0008 88               	dc.b $8, $9, $0, $8, $88
00017D9B 0805 0004 9C               	dc.b $8, $5, $0, $4, $9C
00017DA0 0805 002E AC               	dc.b $8, $5, $0, $2E, $AC
00017DA5 0805 0004 BC               	dc.b $8, $5, $0, $4, $BC
00017DAA 0805 003E CC               	dc.b $8, $5, $0, $3E, $CC
00017DAF 0805 0026 DC               	dc.b $8, $5, $0, $26, $DC
00017DB4 0805 001A F8               	dc.b $8, $5, $0, $1A, $F8
00017DB9 0805 0004 08               	dc.b $8, $5, $0, $4, $8
00017DBE 0805 0058 18               	dc.b $8, $5, $0, $58, $18
00017DC3 0805 0004 28               	dc.b $8, $5, $0, $4, $28
00017DC8 0809 0008 38               	dc.b $8, $9, $0, $8, $38
00017DCD 0805 0032 4C               	dc.b $8, $5, $0, $32, $4C
00017DD2 0805 0022 5C               	dc.b $8, $5, $0, $22, $5C
00017DD7 0805 0004 6C               	dc.b $8, $5, $0, $4, $6C
00017DDC 17                         DATAV02AM357W0A_6: dc.b $17
00017DDD D005 002E 98               	dc.b $D0, $5, $0, $2E, $98
00017DE2 D005 0026 A8               	dc.b $D0, $5, $0, $26, $A8
00017DE7 D005 0032 B8               	dc.b $D0, $5, $0, $32, $B8
00017DEC D005 001A C8               	dc.b $D0, $5, $0, $1A, $C8
00017DF1 D005 0054 D8               	dc.b $D0, $5, $0, $54, $D8
00017DF6 D005 0012 F8               	dc.b $D0, $5, $0, $12, $F8
00017DFB D005 0022 08               	dc.b $D0, $5, $0, $22, $8
00017E00 D005 0026 18               	dc.b $D0, $5, $0, $26, $18
00017E05 D005 0000 28               	dc.b $D0, $5, $0, $0, $28
00017E0A D005 0022 38               	dc.b $D0, $5, $0, $22, $38
00017E0F D005 0004 48               	dc.b $D0, $5, $0, $4, $48
00017E14 D009 0008 58               	dc.b $D0, $9, $0, $8, $58
00017E19 0005 004C D0               	dc.b $0, $5, $0, $4C, $D0
00017E1E 0001 0046 E0               	dc.b $0, $1, $0, $46, $E0
00017E23 0009 0008 E8               	dc.b $0, $9, $0, $8, $E8
00017E28 0001 0046 FC               	dc.b $0, $1, $0, $46, $FC
00017E2D 0005 003E 04               	dc.b $0, $5, $0, $3E, $4
00017E32 0005 0004 14               	dc.b $0, $5, $0, $4, $14
00017E37 2009 0008 D0               	dc.b $20, $9, $0, $8, $D0
00017E3C 2005 0004 E4               	dc.b $20, $5, $0, $4, $E4
00017E41 2005 001E F4               	dc.b $20, $5, $0, $1E, $F4
00017E46 2005 0058 04               	dc.b $20, $5, $0, $58, $4
00017E4B 2005 002A 14               	dc.b $20, $5, $0, $2A, $14
00017E50 1F                         DATAV02AM357W0A_7: dc.b $1F
00017E51 D805 002E 80               	dc.b $D8, $5, $0, $2E, $80
00017E56 D805 0012 90               	dc.b $D8, $5, $0, $12, $90
00017E5B D805 000E A0               	dc.b $D8, $5, $0, $E, $A0
00017E60 D805 001E B0               	dc.b $D8, $5, $0, $1E, $B0
00017E65 D801 0046 C0               	dc.b $D8, $1, $0, $46, $C0
00017E6A D805 0004 C8               	dc.b $D8, $5, $0, $4, $C8
00017E6F D805 0016 D8               	dc.b $D8, $5, $0, $16, $D8
00017E74 D805 003E F8               	dc.b $D8, $5, $0, $3E, $F8
00017E79 D805 003A 08               	dc.b $D8, $5, $0, $3A, $8
00017E7E D805 0004 18               	dc.b $D8, $5, $0, $4, $18
00017E83 D805 001A 28               	dc.b $D8, $5, $0, $1A, $28
00017E88 D805 0058 38               	dc.b $D8, $5, $0, $58, $38
00017E8D D805 002E 48               	dc.b $D8, $5, $0, $2E, $48
00017E92 0005 005C B0               	dc.b $0, $5, $0, $5C, $B0
00017E97 0005 0032 C0               	dc.b $0, $5, $0, $32, $C0
00017E9C 0005 004C D0               	dc.b $0, $5, $0, $4C, $D0
00017EA1 0001 0046 E0               	dc.b $0, $1, $0, $46, $E0
00017EA6 0005 0026 E8               	dc.b $0, $5, $0, $26, $E8
00017EAB 0009 0008 00               	dc.b $0, $9, $0, $8, $0
00017EB0 0001 0046 14               	dc.b $0, $1, $0, $46, $14
00017EB5 0005 001A 1C               	dc.b $0, $5, $0, $1A, $1C
00017EBA 0005 000E 2C               	dc.b $0, $5, $0, $E, $2C
00017EBF 0005 0000 3C               	dc.b $0, $5, $0, $0, $3C
00017EC4 0001 0046 4C               	dc.b $0, $1, $0, $46, $4C
00017EC9 0005 002E 54               	dc.b $0, $5, $0, $2E, $54
00017ECE 0005 003A 64               	dc.b $0, $5, $0, $3A, $64
00017ED3 0001 0046 74               	dc.b $0, $1, $0, $46, $74
00017ED8 2005 0012 F8               	dc.b $20, $5, $0, $12, $F8
00017EDD 2005 0004 08               	dc.b $20, $5, $0, $4, $8
00017EE2 2005 0012 18               	dc.b $20, $5, $0, $12, $18
00017EE7 2005 0004 28               	dc.b $20, $5, $0, $4, $28
00017EEC 0F                         DATAV02AM357W0A_8: dc.b $F
00017EED F805 0012 80               	dc.b $F8, $5, $0, $12, $80
00017EF2 F805 0022 90               	dc.b $F8, $5, $0, $22, $90
00017EF7 F805 000E A0               	dc.b $F8, $5, $0, $E, $A0
00017EFC F805 002E B0               	dc.b $F8, $5, $0, $2E, $B0
00017F01 F805 000E C0               	dc.b $F8, $5, $0, $E, $C0
00017F06 F805 001A D0               	dc.b $F8, $5, $0, $1A, $D0
00017F0B F805 003E E0               	dc.b $F8, $5, $0, $3E, $E0
00017F10 F805 000E F0               	dc.b $F8, $5, $0, $E, $F0
00017F15 F805 0042 00               	dc.b $F8, $5, $0, $42, $0
00017F1A F805 0048 18               	dc.b $F8, $5, $0, $48, $18
00017F1F F805 002A 28               	dc.b $F8, $5, $0, $2A, $28
00017F24 F805 002E 40               	dc.b $F8, $5, $0, $2E, $40
00017F29 F805 000E 50               	dc.b $F8, $5, $0, $E, $50
00017F2E F805 0000 60               	dc.b $F8, $5, $0, $0, $60
00017F33 F805 0004 70               	dc.b $F8, $5, $0, $4, $70
00017F38 08                         DATAV02AM357W0A_9: dc.b $8
00017F39 3005 003E C0               	dc.b $30, $5, $0, $3E, $C0
00017F3E 3005 0022 D0               	dc.b $30, $5, $0, $22, $D0
00017F43 3005 002A E0               	dc.b $30, $5, $0, $2A, $E0
00017F48 3005 0004 F8               	dc.b $30, $5, $0, $4, $F8
00017F4D 3005 0000 08               	dc.b $30, $5, $0, $0, $8
00017F52 3005 0004 18               	dc.b $30, $5, $0, $4, $18
00017F57 3001 0046 28               	dc.b $30, $1, $0, $46, $28
00017F5C 3005 001A 30               	dc.b $30, $5, $0, $1A, $30
00017F61 20                         DATAV02AM357W0A_A: dc.b $20
00017F62 ED05 002E BF               	dc.b $ED, $5, $0, $2E, $BF
00017F67 ED05 0026 CD               	dc.b $ED, $5, $0, $26, $CD
00017F6C ED09 0008 DD               	dc.b $ED, $9, $0, $8, $DD
00017F71 ED05 000E F1               	dc.b $ED, $5, $0, $E, $F1
00017F76 ED05 0026 00               	dc.b $ED, $5, $0, $26, $0
00017F7B ED05 001A 10               	dc.b $ED, $5, $0, $1A, $10
00017F80 ED05 000E 1F               	dc.b $ED, $5, $0, $E, $1F
00017F85 FD05 0012 BF               	dc.b $FD, $5, $0, $12, $BF
00017F8A FD05 0016 CE               	dc.b $FD, $5, $0, $16, $CE
00017F8F FD05 000E DD               	dc.b $FD, $5, $0, $E, $DD
00017F94 FD05 0004 EC               	dc.b $FD, $5, $0, $4, $EC
00017F99 FD05 002E FC               	dc.b $FD, $5, $0, $2E, $FC
00017F9E FD05 000E 0A               	dc.b $FD, $5, $0, $E, $A
00017FA3 0D05 0004 BE               	dc.b $D, $5, $0, $4, $BE
00017FA8 0D05 0054 CE               	dc.b $D, $5, $0, $54, $CE
00017FAD 0D05 0054 DD               	dc.b $D, $5, $0, $54, $DD
00017FB2 0D05 0032 F2               	dc.b $D, $5, $0, $32, $F2
00017FB7 0D05 001A 02               	dc.b $D, $5, $0, $1A, $2
00017FBC 0D05 0054 11               	dc.b $D, $5, $0, $54, $11
00017FC1 0D05 002A 20               	dc.b $D, $5, $0, $2A, $20
00017FC6 0D01 0046 30               	dc.b $D, $1, $0, $46, $30
00017FCB 0D05 001A 38               	dc.b $D, $5, $0, $1A, $38
00017FD0 0D05 0000 47               	dc.b $D, $5, $0, $0, $47
00017FD5 1D05 003E BE               	dc.b $1D, $5, $0, $3E, $BE
00017FDA 1D05 0026 CE               	dc.b $1D, $5, $0, $26, $CE
00017FDF 1D05 003E E4               	dc.b $1D, $5, $0, $3E, $E4
00017FE4 1D05 003A F4               	dc.b $1D, $5, $0, $3A, $F4
00017FE9 1D05 000E 04               	dc.b $1D, $5, $0, $E, $4
00017FEE 1D05 000E 2A               	dc.b $1D, $5, $0, $E, $2A
00017FF3 1D05 0022 1A               	dc.b $1D, $5, $0, $22, $1A
00017FF8 1D05 0012 39               	dc.b $1D, $5, $0, $12, $39
00017FFD 1D05 0026 48               	dc.b $1D, $5, $0, $26, $48
00018002                            	even
00018002                            	even
00018002                            
00018002                            ; ===========================================================================
00018002                            ; ---------------------------------------------------------------------------
00018002                            ; Object 3D - matthew boss - modified by GK89
00018002                            ; ---------------------------------------------------------------------------
00018002                            
00018002                            Obj3D:					; XREF: Obj_Index
00018002 7000                       		moveq	#0,d0
00018004 1028 0024                  		move.b	$24(a0),d0
00018008 323B 0000                  		move.w	Obj3D_Index(pc,d0.w),d1
0001800C 4EFB 1000                  		jmp	Obj3D_Index(pc,d1.w)
00018010                            ; ===========================================================================
00018010 0000                       Obj3D_Index:	dc.w Obj3D_Main-Obj3D_Index
00018012 0000                       		dc.w Obj3D_ShipMain-Obj3D_Index
00018014 0000                       		dc.w Obj3D_FaceMain-Obj3D_Index
00018016 0000                       		dc.w Obj3D_FlameMain-Obj3D_Index
00018018                            
00018018 0200                       Obj3D_ObjData:	dc.b 2,	0		; routine counter, animation
0001801A 0401                       		dc.b 4,	1
0001801C 0607                       		dc.b 6,	7
0001801E                            ; ===========================================================================
0001801E                            
0001801E                            Obj3D_Main:				; XREF: Obj3D_Index
0001801E 45F9 0001 8018             		lea	(Obj3D_ObjData).l,a2
00018024 2248                       		movea.l	a0,a1
00018026 7202                       		moveq	#2,d1
00018028 6000                       		bra.s	Obj3D_LoadBoss
0001802A                            ; ===========================================================================
0001802A                            
0001802A                            Obj3D_Loop:
0001802A 4EB9 0000 E264             		jsr	SingleObjLoad2
00018030 6600                       		bne.s	loc_17772
00018032                            
00018032                            Obj3D_LoadBoss:				; XREF: Obj3D_Main
00018032 135A 0024                  		move.b	(a2)+,$24(a1)
00018036 12BC 003D                  		move.b	#$3D,0(a1)
0001803A 3368 0008 0008             		move.w	8(a0),8(a1)
00018040 3368 000C 000C             		move.w	$C(a0),$C(a1)
00018046 237C 0000 0000 0004        		move.l	#Map_Eggman,4(a1)
0001804E 337C 0400 0002             		move.w	#$400,2(a1)
00018054 137C 0004 0001             		move.b	#4,1(a1)
0001805A 137C 0020 0019             		move.b	#$20,$19(a1)
00018060 137C 0003 0018             		move.b	#3,$18(a1)
00018066 135A 001C                  		move.b	(a2)+,$1C(a1)
0001806A 2348 0034                  		move.l	a0,$34(a1)
0001806E 51C9 FFBA                  		dbf	d1,Obj3D_Loop	; repeat sequence 2 more times
00018072                            
00018072                            loc_17772:
00018072 3168 0008 0030             		move.w	8(a0),$30(a0)
00018078 3168 000C 0038             		move.w	$C(a0),$38(a0)
0001807E 117C 000F 0020             		move.b	#$F,$20(a0)
00018084 117C 0028 0021             		move.b	#$28,$21(a0)	; set number of	hits to	8
0001808A                            
0001808A                            Obj3D_ShipMain:				; XREF: Obj3D_Index
0001808A 7000                       		moveq	#0,d0
0001808C 1028 0025                  		move.b	$25(a0),d0
00018090 323B 0000                  		move.w	Obj3D_ShipIndex(pc,d0.w),d1
00018094 4EBB 1000                  		jsr	Obj3D_ShipIndex(pc,d1.w)
00018098 43F9 0000 0000             		lea	(Ani_Eggman).l,a1
0001809E 4EB9 0000 AE88             		jsr	AnimateSprite
000180A4 1028 0022                  		move.b	$22(a0),d0
000180A8 0200 0003                  		andi.b	#3,d0
000180AC 0228 00FC 0001             		andi.b	#$FC,1(a0)
000180B2 8128 0001                  		or.b	d0,1(a0)
000180B6 4EF9 0000 DDC8             		jmp	DisplaySprite
000180BC                            ; ===========================================================================
000180BC 0000                       Obj3D_ShipIndex:dc.w Obj3D_ShipStart-Obj3D_ShipIndex
000180BE 0000                       		dc.w Obj3D_MakeBall-Obj3D_ShipIndex
000180C0 0000                       		dc.w Obj3D_ShipMove-Obj3D_ShipIndex
000180C2 0000                       		dc.w loc_17954-Obj3D_ShipIndex
000180C4 0000                       		dc.w loc_1797A-Obj3D_ShipIndex
000180C6 0000                       		dc.w loc_179AC-Obj3D_ShipIndex
000180C8 0000                       		dc.w loc_179F6-Obj3D_ShipIndex
000180CA                            ; ===========================================================================
000180CA                            
000180CA                            Obj3D_ShipStart:			; XREF: Obj3D_ShipIndex
000180CA 4EB9 0000 0000             		jsr    Obj3D_ShipMove
000180D0 6100 0000                  		bsr.w	BossMove
000180D4 0C68 0338 0038             		cmpi.w	#$338,$38(a0)
000180DA 6600                       		bne.s	loc_177E6
000180DC 317C 0000 0012             		move.w	#0,$12(a0)	; stop ship
000180E2 5428 0025                  		addq.b	#2,$25(a0)	; goto next routine
000180E6                            
000180E6                            loc_177E6:
000180E6 1028 003F                  		move.b	$3F(a0),d0
000180EA 4EB9 0000 2CAC             		jsr	(CalcSine).l
000180F0 EC40                       		asr.w	#6,d0
000180F2 D068 0038                  		add.w	$38(a0),d0
000180F6 3140 000C                  		move.w	d0,$C(a0)
000180FA 3168 0030 0008             		move.w	$30(a0),8(a0)
00018100 5428 003F                  		addq.b	#2,$3F(a0)
00018104 0C28 0008 0025             		cmpi.b	#8,$25(a0)
0001810A 6400                       		bcc.s	locret_1784A
0001810C 4A28 0022                  		tst.b	$22(a0)
00018110 6B00                       		bmi.s	loc_1784C
00018112 4A28 0020                  		tst.b	$20(a0)
00018116 6600                       		bne.s	locret_1784A
00018118 4A28 003E                  		tst.b	$3E(a0)
0001811C 6600                       		bne.s	Obj3D_ShipFlash
0001811E 117C 0020 003E             		move.b	#$20,$3E(a0)	; set number of	times for ship to flash
00018124 303C 00AC                  		move.w	#$AC,d0
00018128 4EB9 0000 15C0             		jsr	(PlaySound_Special).l ;	play boss damage sound
0001812E                            
0001812E                            Obj3D_ShipFlash:
0001812E 43F8 FB22                  		lea	($FFFFFB22).w,a1 ; load	2nd pallet, 2nd	entry
00018132 7000                       		moveq	#0,d0		; move 0 (black) to d0
00018134 4A51                       		tst.w	(a1)
00018136 6600                       		bne.s	loc_1783C
00018138 303C 0EEE                  		move.w	#$EEE,d0	; move 0EEE (white) to d0
0001813C                            
0001813C                            loc_1783C:
0001813C 3280                       		move.w	d0,(a1)		; load colour stored in	d0
0001813E 5328 003E                  		subq.b	#1,$3E(a0)
00018142 6600                       		bne.s	locret_1784A
00018144 117C 000F 0020             		move.b	#$F,$20(a0)
0001814A                            
0001814A                            locret_1784A:
0001814A 4E75                       		rts	
0001814C                            ; ===========================================================================
0001814C                            
0001814C                            loc_1784C:				; XREF: loc_177E6
0001814C 7064                       		moveq	#100,d0
0001814E 6100 0000                  		bsr.w	AddPoints
00018152 117C 0008 0025             		move.b	#8,$25(a0)
00018158 317C 00B3 003C             		move.w	#$B3,$3C(a0)
0001815E 4E75                       		rts	
00018160                            
00018160                            ; ---------------------------------------------------------------------------
00018160                            ; Defeated boss	subroutine
00018160                            ; ---------------------------------------------------------------------------
00018160                            
00018160                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00018160                            
00018160                            
00018160                            BossDefeated:
00018160 1038 FE0F                  		move.b	($FFFFFE0F).w,d0
00018164 0200 0007                  		andi.b	#7,d0
00018168 6600                       		bne.s	locret_178A2
0001816A 4EB9 0000 E24E             		jsr	SingleObjLoad
00018170 6600                       		bne.s	locret_178A2
00018172 12BC 003F                  		move.b	#$3F,0(a1)	; load explosion object
00018176 3368 0008 0008             		move.w	8(a0),8(a1)
0001817C 3368 000C 000C             		move.w	$C(a0),$C(a1)
00018182 4EB9 0000 2C86             		jsr	(RandomNumber).l
00018188 3200                       		move.w	d0,d1
0001818A 7200                       		moveq	#0,d1
0001818C 1200                       		move.b	d0,d1
0001818E E409                       		lsr.b	#2,d1
00018190 0441 0020                  		subi.w	#$20,d1
00018194 D369 0008                  		add.w	d1,8(a1)
00018198 E048                       		lsr.w	#8,d0
0001819A E608                       		lsr.b	#3,d0
0001819C D169 000C                  		add.w	d0,$C(a1)
000181A0                            
000181A0                            locret_178A2:
000181A0 4E75                       		rts	
000181A2                            ; End of function BossDefeated
000181A2                            
000181A2                            ; ---------------------------------------------------------------------------
000181A2                            ; Subroutine to	move a boss
000181A2                            ; ---------------------------------------------------------------------------
000181A2                            
000181A2                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000181A2                            
000181A2                            
000181A2                            BossMove:
000181A2 2428 0030                  		move.l	$30(a0),d2
000181A6 2628 0038                  		move.l	$38(a0),d3
000181AA 3028 0010                  		move.w	$10(a0),d0
000181AE 48C0                       		ext.l	d0
000181B0 E180                       		asl.l	#8,d0
000181B2 D480                       		add.l	d0,d2
000181B4 3028 0012                  		move.w	$12(a0),d0
000181B8 48C0                       		ext.l	d0
000181BA E180                       		asl.l	#8,d0
000181BC D680                       		add.l	d0,d3
000181BE 2142 0030                  		move.l	d2,$30(a0)
000181C2 2143 0038                  		move.l	d3,$38(a0)
000181C6 4E75                       		rts	
000181C8                            ; End of function BossMove
000181C8                            
000181C8                            ; ===========================================================================
000181C8                            
000181C8                            Obj3D_MakeBall:				; XREF: Obj3D_ShipIndex		
000181C8 6100 FFD8                  		bsr.w	BossMove
000181CC 0C68 2A00 0030             		cmpi.w	#$2A00,$30(a0)
000181D2 6600                       		bne.s	loc_17916
000181D4 317C 0000 0010             		move.w	#0,$10(a0)
000181DA 317C 0000 0012             		move.w	#0,$12(a0)
000181E0 5428 0025                  		addq.b	#2,$25(a0)
000181E4 4EB9 0000 E264             		jsr	SingleObjLoad2
000181EA 6600                       		bne.s	loc_17910
000181EC 12BC 0048                  		move.b	#$48,0(a1)	; load swinging	ball object
000181F0 3368 0030 0008             		move.w	$30(a0),8(a1)
000181F6 3368 0038 000C             		move.w	$38(a0),$C(a1)
000181FC 2348 0034                  		move.l	a0,$34(a1)
00018200                            
00018200                            loc_17910:
00018200 317C 0077 003C             		move.w	#$77,$3C(a0)
00018206                            
00018206                            loc_17916:
00018206 6000 FEDE                  		bra.w	loc_177E6
0001820A                            ; ===========================================================================
0001820A                            
0001820A                            Obj3D_ShipMove:				; XREF:  sonic follow move
0001820A 5368 003C                  		subq.w	#1,$3C(a0)
0001820E 4EB9 0000 0000             		jsr 	Obj3D_UpStuff
00018214 5428 0025                  		addq.b	#2,$25(a0)
00018218 317C 003F 003C             		move.w	#$3F,$3C(a0)
0001821E 3038 D008                  		move.w	($FFFFD008).w,d0	 
00018222 9068 0008                  		sub.w	8(a0),d0		 
00018226 6A00                       		bpl.s	Obj3D_left			 
00018228 08A8 0000 0022             		bclr	#0,$22(a0)		 
0001822E 6000                       		bra.s	Obj3D_right		 
00018230 08A8 0005 0022             		bclr	#5,$22(a0)
00018236 4EB9 0000 0000              		jsr     loc_17950
0001823C 4E75                       		rts
0001823E                            ; ===========================================================================
0001823E                            
0001823E                            Obj3D_right:
0001823E 317C FF00 0010             		move.w	#-$100,$10(a0)	
00018244 4E75                       		Rts
00018246                            
00018246                            Obj3D_left:
00018246 317C 0100 0010             		move.w	#$100,$10(a0)	 
0001824C 0828 0000 0022             		btst	#0,$22(a0)	; is matt facing	left?
00018252 6600                       		bne.s	RTSboss  	; if not, branch
00018254 0868 0000 0022              		bchg	#0,$22(a0)
0001825A                            
0001825A                            RTSboss:	    
0001825A 4E75                       		rts
0001825C                             ; ===========================================================================
0001825C                            
0001825C                            Obj3D_UpStuff:
0001825C 3038 D00C                  		move.w	($FFFFD00C).w,d0	 
00018260 9068 000C                  		sub.w	$C(a0),d0		 
00018264 6A00                       		bpl.s	Obj3D_down			 
00018266 6000                        		bra.s	Obj3D_up		 
00018268 08A8 0005 0022             		bclr	#5,$22(a0)
0001826E                             
0001826E                            Obj3D_up:		
0001826E 317C FEE0 0012             		move.w	#-$120,$12(a0)           ; Up	 
00018274 4E75                        	    rts
00018276                            
00018276                            Obj3D_down:
00018276 317C 0120 0012              		move.w	#$120, $12(a0)           ; Down
0001827C                            
0001827C                            loc_17950:
0001827C 6000 FE68                  		bra.w	loc_177E6
00018280                            ; ===========================================================================
00018280                            
00018280                            loc_17954:				; XREF: Obj3D_ShipIndex
00018280 5368 003C                  		subq.w	#1,$3C(a0)
00018284 6B00                       		bmi.s	loc_17960
00018286 6100 FF1A                  		bsr.w	BossMove
0001828A 6000                       		bra.s	loc_17976
0001828C                            ; ===========================================================================
0001828C                            
0001828C                            loc_17960:
0001828C 0868 0000 0022             		bchg	#0,$22(a0)
00018292 317C 003F 003C             		move.w	#$3F,$3C(a0)
00018298 5528 0025                  		subq.b	#2,$25(a0)
0001829C 317C 0000 0010             		move.w	#0,$10(a0)
000182A2                            
000182A2                            loc_17976:
000182A2 6000 FE42                  		bra.w	loc_177E6
000182A6                            ; ===========================================================================
000182A6                            
000182A6                            loc_1797A:				; XREF: Obj3D_ShipIndex
000182A6 5368 003C                  		subq.w	#1,$3C(a0)
000182AA 6B00                       		bmi.s	loc_17984
000182AC 6000 FEB2                  		bra.w	BossDefeated
000182B0                            ; ===========================================================================
000182B0                            
000182B0                            loc_17984:
000182B0 08E8 0000 0022             		bset	#0,$22(a0)
000182B6 08A8 0007 0022             		bclr	#7,$22(a0)
000182BC 4268 0010                  		clr.w	$10(a0)
000182C0 5428 0025                  		addq.b	#2,$25(a0)
000182C4 317C FFDA 003C             		move.w	#-$26,$3C(a0)
000182CA 4A38 F7A7                  		tst.b	($FFFFF7A7).w
000182CE 6600                       		bne.s	locret_179AA
000182D0 11FC 0001 F7A7             		move.b	#1,($FFFFF7A7).w
000182D6 31FC 0300 F726             		move.w	#$300,($FFFFF726).w
000182DC 6000 FE82                  		bra.w	BossDefeated
000182E0                            
000182E0                            locret_179AA:
000182E0 4E75                       		rts	
000182E2                            ; ===========================================================================
000182E2                            
000182E2                            loc_179AC:				; XREF: Obj3D_ShipIndex
000182E2 4EB9 0000 DD76             		jsr ObjectFall		
000182E8 5268 003C                  		addq.w	#1,$3C(a0)
000182EC 6700                       		beq.s	loc_179BC
000182EE 6A00                       		bpl.s	loc_179C2
000182F0 6000                       		bra.s	loc_179EE
000182F2                            ; ===========================================================================
000182F2                            
000182F2                            loc_179BC:
000182F2 4268 0012                  		clr.w	$12(a0)
000182F6 6000                       		bra.s	loc_179EE
000182F8                            ; ===========================================================================
000182F8                            
000182F8                            loc_179C2:
000182F8 0C68 0030 003C             		cmpi.w	#$30,$3C(a0)
000182FE 6500                       		bcs.s	loc_179DA
00018300 6700                       		beq.s	loc_179E0
00018302 0C68 0038 003C             		cmpi.w	#$38,$3C(a0)
00018308 6500                       		bcs.s	loc_179EE
0001830A 5428 0025                  		addq.b	#2,$25(a0)
0001830E 6000                       		bra.s	loc_179EE
00018310                            ; ===========================================================================
00018310                            
00018310                            loc_179DA:
00018310 5168 0012                  		subq.w	#8,$12(a0)
00018314 6000                       		bra.s	loc_179EE
00018316 6000 FE48                  		bra.w	BossDefeated
0001831A                            ; ===========================================================================
0001831A                            
0001831A                            loc_179E0:
0001831A 4268 0012                  		clr.w	$12(a0)
0001831E 303C 0081                  		move.w	#$81,d0
00018322 4EB9 0000 15BA             		jsr	(PlaySound).l	; play GHZ music
00018328                            
00018328                            loc_179EE:
00018328 6100 FE78                  		bsr.w	BossMove
0001832C 6000 FDB8                  		bra.w	loc_177E6
00018330                            ; ===========================================================================
00018330                            
00018330                            loc_179F6:				; XREF: Obj3D_ShipIndex
00018330 0C78 2AC0 F72A             		cmpi.w	#$2AC0,($FFFFF72A).w
00018336 6700                       		beq.s	loc_17A10
00018338 5478 F72A                  		addq.w	#2,($FFFFF72A).w
0001833C 6000                       		bra.s	loc_17A16
0001833E                            ; ===========================================================================
0001833E                            
0001833E                            loc_17A10:
0001833E 4A28 0001                  		tst.b	1(a0)
00018342 6A00                       		bpl.s	Obj3D_ShipDel
00018344                            
00018344                            loc_17A16:
00018344 6100 FE5C                  		bsr.w	BossMove
00018348 6000 FD9C                  		bra.w	loc_177E6
0001834C                            ; ===========================================================================
0001834C                            
0001834C                            Obj3D_ShipDel:
0001834C 4EF9 0000 DE04             		jmp	DeleteObject
00018352                            ; ===========================================================================
00018352                            
00018352                            Obj3D_FaceMain:				; XREF: Obj3D_Index
00018352 7000                       		moveq	#0,d0
00018354 7201                       		moveq	#1,d1
00018356 2268 0034                  		movea.l	$34(a0),a1
0001835A 1029 0025                  		move.b	$25(a1),d0
0001835E 5900                       		subq.b	#4,d0
00018360 6600                       		bne.s	loc_17A3E
00018362 0C69 2A00 0030             		cmpi.w	#$2A00,$30(a1)
00018368 6600                       		bne.s	loc_17A46
0001836A 7204                       		moveq	#4,d1
0001836C                            
0001836C                            loc_17A3E:
0001836C 5D00                       		subq.b	#6,d0
0001836E 6B00                       		bmi.s	loc_17A46
00018370 720A                       		moveq	#$A,d1
00018372 6000                       		bra.s	loc_17A5A
00018374                            ; ===========================================================================
00018374                            
00018374                            loc_17A46:
00018374 4A29 0020                  		tst.b	$20(a1)
00018378 6600                       		bne.s	loc_17A50
0001837A 7205                       		moveq	#5,d1
0001837C 6000                       		bra.s	loc_17A5A
0001837E                            ; ===========================================================================
0001837E                            
0001837E                            loc_17A50:
0001837E 0C38 0004 D024             		cmpi.b	#4,($FFFFD024).w
00018384 6500                       		bcs.s	loc_17A5A
00018386 7204                       		moveq	#4,d1
00018388                            
00018388                            loc_17A5A:
00018388 1141 001C                  		move.b	d1,$1C(a0)
0001838C 5500                       		subq.b	#2,d0
0001838E 6600                       		bne.s	Obj3D_FaceDisp
00018390 117C 0006 001C             		move.b	#6,$1C(a0)
00018396 4A28 0001                  		tst.b	1(a0)
0001839A 6A00                       		bpl.s	Obj3D_FaceDel
0001839C                            
0001839C                            Obj3D_FaceDisp:
0001839C 6000                       		bra.s	Obj3D_Display
0001839E                            ; ===========================================================================
0001839E                            
0001839E                            Obj3D_FaceDel:
0001839E 4EF9 0000 DE04             		jmp	DeleteObject
000183A4                            ; ===========================================================================
000183A4                            
000183A4                            Obj3D_FlameMain:			; XREF: Obj3D_Index
000183A4 117C 0007 001C             		move.b	#7,$1C(a0)
000183AA 2268 0034                  		movea.l	$34(a0),a1
000183AE 0C29 000C 0025             		cmpi.b	#$C,$25(a1)
000183B4 6600                       		bne.s	loc_17A96
000183B6 117C 000B 001C             		move.b	#$B,$1C(a0)
000183BC 4A28 0001                  		tst.b	1(a0)
000183C0 6A00                       		bpl.s	Obj3D_FlameDel
000183C2 6000                       		bra.s	Obj3D_FlameDisp
000183C4                            ; ===========================================================================
000183C4                            
000183C4                            loc_17A96:
000183C4 3029 0010                  		move.w	$10(a1),d0
000183C8 6700                       		beq.s	Obj3D_FlameDisp
000183CA 117C 0008 001C             		move.b	#8,$1C(a0)
000183D0                            
000183D0                            Obj3D_FlameDisp:
000183D0 6000                       		bra.s	Obj3D_Display
000183D2                            ; ===========================================================================
000183D2                            
000183D2                            Obj3D_FlameDel:
000183D2 4EF9 0000 DE04             		jmp	DeleteObject
000183D8                            ; ===========================================================================
000183D8                            
000183D8                            Obj3D_Display:				; XREF: Obj3D_FaceDisp; Obj3D_FlameDisp
000183D8 2268 0034                  		movea.l	$34(a0),a1
000183DC 3169 0008 0008             		move.w	8(a1),8(a0)
000183E2 3169 000C 000C             		move.w	$C(a1),$C(a0)
000183E8 1169 0022 0022             		move.b	$22(a1),$22(a0)
000183EE 43F9 0000 0000             		lea	(Ani_Eggman).l,a1
000183F4 4EB9 0000 AE88             		jsr	AnimateSprite
000183FA 1028 0022                  		move.b	$22(a0),d0
000183FE 0200 0003                  		andi.b	#3,d0
00018402 0228 00FC 0001             		andi.b	#$FC,1(a0)
00018408 8128 0001                  		or.b	d0,1(a0)
0001840C 4EF9 0000 DDC8             		jmp	DisplaySprite
00018412                            ; ===========================================================================
00018412                            ; ---------------------------------------------------------------------------
00018412                            ; Object 48 - ball on a	chain that Eggman swings (GHZ)
00018412                            ; ---------------------------------------------------------------------------
00018412                            
00018412                            Obj48:					; XREF: Obj_Index
00018412 7000                       		moveq	#0,d0
00018414 1028 0024                  		move.b	$24(a0),d0
00018418 323B 0000                  		move.w	Obj48_Index(pc,d0.w),d1
0001841C 4EFB 1000                  		jmp	Obj48_Index(pc,d1.w)
00018420                            ; ===========================================================================
00018420 0000                       Obj48_Index:	dc.w Obj48_Main-Obj48_Index
00018422 0000                       		dc.w Obj48_Base-Obj48_Index
00018424 0000                       		dc.w Obj48_Display2-Obj48_Index
00018426 0000                       		dc.w loc_17C68-Obj48_Index
00018428 0000                       		dc.w Obj48_ChkVanish-Obj48_Index
0001842A                            ; ===========================================================================
0001842A                            
0001842A                            Obj48_Main:				; XREF: Obj48_Index
0001842A 5428 0024                  		addq.b	#2,$24(a0)
0001842E 317C 4080 0026             		move.w	#$4080,$26(a0)
00018434 317C FE00 003E             		move.w	#-$200,$3E(a0)
0001843A 217C 0000 0000 0004        		move.l	#Map_BossItems,4(a0)
00018442 317C 046C 0002             		move.w	#$46C,2(a0)
00018448 45E8 0028                  		lea	$28(a0),a2
0001844C 14FC 0000                  		move.b	#0,(a2)+
00018450 7205                       		moveq	#5,d1
00018452 2248                       		movea.l	a0,a1
00018454 6000                       		bra.s	loc_17B60
00018456                            ; ===========================================================================
00018456                            
00018456                            Obj48_MakeLinks:
00018456 4EB9 0000 E264             		jsr	SingleObjLoad2
0001845C 6600                       		bne.s	Obj48_MakeBall
0001845E 3368 0008 0008             		move.w	8(a0),8(a1)
00018464 3368 000C 000C             		move.w	$C(a0),$C(a1)
0001846A 12BC 0048                  		move.b	#$48,0(a1)	; load chain link object
0001846E 137C 0006 0024             		move.b	#6,$24(a1)
00018474 237C 0000 8240 0004        		move.l	#Map_obj15,4(a1)
0001847C 337C 0380 0002             		move.w	#$380,2(a1)
00018482 137C 0001 001A             		move.b	#1,$1A(a1)
00018488 5228 0028                  		addq.b	#1,$28(a0)
0001848C                            
0001848C                            loc_17B60:				; XREF: Obj48_Main
0001848C 3A09                       		move.w	a1,d5
0001848E 0445 D000                  		subi.w	#$D000,d5
00018492 EC4D                       		lsr.w	#6,d5
00018494 0245 007F                  		andi.w	#$7F,d5
00018498 14C5                       		move.b	d5,(a2)+
0001849A 137C 0004 0001             		move.b	#4,1(a1)
000184A0 137C 0008 0019             		move.b	#8,$19(a1)
000184A6 137C 0006 0018             		move.b	#6,$18(a1)
000184AC 2368 0034 0034             		move.l	$34(a0),$34(a1)
000184B2 51C9 FFA2                  		dbf	d1,Obj48_MakeLinks ; repeat sequence 5 more times
000184B6                            
000184B6                            Obj48_MakeBall:
000184B6 137C 0008 0024             		move.b	#8,$24(a1)
000184BC 237C 0000 8830 0004        		move.l	#Map_obj48,4(a1) ; load	different mappings for final link
000184C4 337C 43AA 0002             		move.w	#$43AA,2(a1)	; use different	graphics
000184CA 137C 0001 001A             		move.b	#1,$1A(a1)
000184D0 137C 0005 0018             		move.b	#5,$18(a1)
000184D6 137C 0081 0020             		move.b	#$81,$20(a1)	; make object hurt Sonic
000184DC 4E75                       		rts	
000184DE                            ; ===========================================================================
000184DE                            
000184DE 0010 2030 4060             Obj48_PosData:	dc.b 0,	$10, $20, $30, $40, $60	; y-position data for links and	giant ball
000184E4                            
000184E4                            ; ===========================================================================
000184E4                            
000184E4                            Obj48_Base:				; XREF: Obj48_Index
000184E4 47F9 0001 84DE             		lea	(Obj48_PosData).l,a3
000184EA 45E8 0028                  		lea	$28(a0),a2
000184EE 7C00                       		moveq	#0,d6
000184F0 1C1A                       		move.b	(a2)+,d6
000184F2                            
000184F2                            loc_17BC6:
000184F2 7800                       		moveq	#0,d4
000184F4 181A                       		move.b	(a2)+,d4
000184F6 ED4C                       		lsl.w	#6,d4
000184F8 0684 00FF D000             		addi.l	#$FFD000,d4
000184FE 2244                       		movea.l	d4,a1
00018500 101B                       		move.b	(a3)+,d0
00018502 B029 003C                  		cmp.b	$3C(a1),d0
00018506 6700                       		beq.s	loc_17BE0
00018508 5229 003C                  		addq.b	#1,$3C(a1)
0001850C                            
0001850C                            loc_17BE0:
0001850C 51CE FFE4                  		dbf	d6,loc_17BC6
00018510                            
00018510 B029 003C                  		cmp.b	$3C(a1),d0
00018514 6600                       		bne.s	loc_17BFA
00018516 2268 0034                  		movea.l	$34(a0),a1
0001851A 0C29 0006 0025             		cmpi.b	#6,$25(a1)
00018520 6600                       		bne.s	loc_17BFA
00018522 5428 0024                  		addq.b	#2,$24(a0)
00018526                            
00018526                            loc_17BFA:
00018526 0C68 0020 0032             		cmpi.w	#$20,$32(a0)
0001852C 6700                       		beq.s	Obj48_Display
0001852E 5268 0032                  		addq.w	#1,$32(a0)
00018532                            
00018532                            Obj48_Display:
00018532 6100 0000                  		bsr.w	sub_17C2A
00018536 1028 0026                  		move.b	$26(a0),d0
0001853A 4EB9 0000 81B2             		jsr	(Obj15_Move2).l
00018540 4EF9 0000 DDC8             		jmp	DisplaySprite
00018546                            ; ===========================================================================
00018546                            
00018546                            Obj48_Display2:				; XREF: Obj48_Index
00018546 6100 0000                  		bsr.w	sub_17C2A
0001854A 4EB9 0000 8172             		jsr	(Obj48_Move).l
00018550 4EF9 0000 DDC8             		jmp	DisplaySprite
00018556                            
00018556                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00018556                            
00018556                            
00018556                            sub_17C2A:				; XREF: Obj48_Display; Obj48_Display2
00018556 2268 0034                  		movea.l	$34(a0),a1
0001855A 0628 0020 001B             		addi.b	#$20,$1B(a0)
00018560 6400                       		bcc.s	loc_17C3C
00018562 0868 0000 001A             		bchg	#0,$1A(a0)
00018568                            
00018568                            loc_17C3C:
00018568 3169 0008 003A             		move.w	8(a1),$3A(a0)
0001856E 3029 000C                  		move.w	$C(a1),d0
00018572 D068 0032                  		add.w	$32(a0),d0
00018576 3140 0038                  		move.w	d0,$38(a0)
0001857A 1169 0022 0022             		move.b	$22(a1),$22(a0)
00018580 4A29 0022                  		tst.b	$22(a1)
00018584 6A00                       		bpl.s	locret_17C66
00018586 10BC 003F                  		move.b	#$3F,0(a0)
0001858A 117C 0000 0024             		move.b	#0,$24(a0)
00018590                            
00018590                            locret_17C66:
00018590 4E75                       		rts	
00018592                            ; End of function sub_17C2A
00018592                            
00018592                            ; ===========================================================================
00018592                            
00018592                            loc_17C68:				; XREF: Obj48_Index
00018592 2268 0034                  		movea.l	$34(a0),a1
00018596 4A29 0022                  		tst.b	$22(a1)
0001859A 6A00                       		bpl.s	Obj48_Display3
0001859C 10BC 003F                  		move.b	#$3F,0(a0)
000185A0 117C 0000 0024             		move.b	#0,$24(a0)
000185A6                            
000185A6                            Obj48_Display3:
000185A6 4EF9 0000 DDC8             		jmp	DisplaySprite
000185AC                            ; ===========================================================================
000185AC                            
000185AC                            Obj48_ChkVanish:			; XREF: Obj48_Index
000185AC 7000                       		moveq	#0,d0
000185AE 4A28 001A                  		tst.b	$1A(a0)
000185B2 6600                       		bne.s	Obj48_Vanish
000185B4 5200                       		addq.b	#1,d0
000185B6                            
000185B6                            Obj48_Vanish:
000185B6 1140 001A                  		move.b	d0,$1A(a0)
000185BA 2268 0034                  		movea.l	$34(a0),a1
000185BE 4A29 0022                  		tst.b	$22(a1)
000185C2 6A00                       		bpl.s	Obj48_Display4
000185C4 117C 0000 0020             		move.b	#0,$20(a0)
000185CA 6100 FB94                  		bsr.w	BossDefeated
000185CE 5328 003C                  		subq.b	#1,$3C(a0)
000185D2 6A00                       		bpl.s	Obj48_Display4
000185D4 10BC 003F                  		move.b	#$3F,(a0)
000185D8 117C 0000 0024             		move.b	#0,$24(a0)
000185DE                            
000185DE                            Obj48_Display4:
000185DE 4EF9 0000 DDC8             		jmp	DisplaySprite
000185E4                            ; ===========================================================================
000185E4                            Ani_Eggman:
000185E4                            	include "_anim\Eggman.asm"
000185E4                            ; ---------------------------------------------------------------------------
000185E4                            ; Animation script - Eggman (bosses)
000185E4                            ; ---------------------------------------------------------------------------
000185E4 0000                       		dc.w byte_17CD4-Ani_Eggman
000185E6 0000                       		dc.w byte_17CD8-Ani_Eggman
000185E8 0000                       		dc.w byte_17CDC-Ani_Eggman
000185EA 0000                       		dc.w byte_17CE0-Ani_Eggman
000185EC 0000                       		dc.w byte_17CE4-Ani_Eggman
000185EE 0000                       		dc.w byte_17CE8-Ani_Eggman
000185F0 0000                       		dc.w byte_17CEC-Ani_Eggman
000185F2 0000                       		dc.w byte_17CF0-Ani_Eggman
000185F4 0000                       		dc.w byte_17CF4-Ani_Eggman
000185F6 0000                       		dc.w byte_17CF8-Ani_Eggman
000185F8 0000                       		dc.w byte_17CFC-Ani_Eggman
000185FA 0000                       		dc.w byte_17D00-Ani_Eggman
000185FC 0F00 FF00                  byte_17CD4:	dc.b $F, 0, $FF, 0
00018600 0501 02FF                  byte_17CD8:	dc.b 5,	1, 2, $FF
00018604 0301 02FF                  byte_17CDC:	dc.b 3,	1, 2, $FF
00018608 0101 02FF                  byte_17CE0:	dc.b 1,	1, 2, $FF
0001860C 0403 04FF                  byte_17CE4:	dc.b 4,	3, 4, $FF
00018610 1F05 01FF                  byte_17CE8:	dc.b $1F, 5, 1,	$FF
00018614 0306 01FF                  byte_17CEC:	dc.b 3,	6, 1, $FF
00018618 0F0A FF00                  byte_17CF0:	dc.b $F, $A, $FF, 0
0001861C 0308 09FF                  byte_17CF4:	dc.b 3,	8, 9, $FF
00018620 0108 09FF                  byte_17CF8:	dc.b 1,	8, 9, $FF
00018624 0F07 FF00                  byte_17CFC:	dc.b $F, 7, $FF, 0
00018628 0209 080B 0C0B 0C09 08FE+  byte_17D00:	dc.b 2,	9, 8, $B, $C, $B, $C, 9, 8, $FE, 2, 0
00018634                            		even
00018634                            		even
00018634                            Ani_TetoB:
00018634                            	include "_anim\TetoB.asm"
00018634                            ; ---------------------------------------------------------------------------
00018634                            ; Animation script - Eggman (bosses)
00018634                            ; ---------------------------------------------------------------------------
00018634 0000                       		dc.w spin-Ani_TetoB
00018636 0000                       		dc.w static-Ani_TetoB
00018638 0000                       		dc.w static2-Ani_TetoB
0001863A 0400 0102 03FF 00          spin:	dc.b 4, 0, 1, 2, 3, $FF, 0
00018641 0500 FF                    static:	dc.b 5,	0, $FF
00018644 0501 FF                    static2:	dc.b 5,	1, $FF
00018648 00                         		even
00018648 00                         		even
00018648                            ; ---------------------------------------------------------------------------
00018648                            ; Sprite mappings - Eggman (boss levels)
00018648                            ; ---------------------------------------------------------------------------
00018648                            Map_Eggman:
00018648                            	include "_maps\Eggman.asm"
00018648                            Map_dc7e:
00018648 0000                       Map_dc7e_0: 	dc.w Map_dc7e_1A-Map_dc7e
0001864A 0000                       Map_dc7e_2: 	dc.w Map_dc7e_39-Map_dc7e
0001864C 0000                       Map_dc7e_4: 	dc.w Map_dc7e_44-Map_dc7e
0001864E 0000                       Map_dc7e_6: 	dc.w Map_dc7e_4F-Map_dc7e
00018650 0000                       Map_dc7e_8: 	dc.w Map_dc7e_5F-Map_dc7e
00018652 0000                       Map_dc7e_A: 	dc.w Map_dc7e_6F-Map_dc7e
00018654 0000                       Map_dc7e_C: 	dc.w Map_dc7e_7F-Map_dc7e
00018656 0000                       Map_dc7e_E: 	dc.w Map_dc7e_8F-Map_dc7e
00018658 0000                       Map_dc7e_10: 	dc.w Map_dc7e_A4-Map_dc7e
0001865A 0000                       Map_dc7e_12: 	dc.w Map_dc7e_AA-Map_dc7e
0001865C 0000                       Map_dc7e_14: 	dc.w Map_dc7e_B0-Map_dc7e
0001865E 0000                       Map_dc7e_16: 	dc.w Map_dc7e_B1-Map_dc7e
00018660 0000                       Map_dc7e_18: 	dc.w Map_dc7e_BC-Map_dc7e
00018662 06                         Map_dc7e_1A: 	dc.b $6
00018663 EC01 000A E4               	dc.b $EC, $1, $0, $A, $E4
00018668 EC05 000C 0C               	dc.b $EC, $5, $0, $C, $C
0001866D FC0E 2010 E4               	dc.b $FC, $E, $20, $10, $E4
00018672 FC0E 201C 04               	dc.b $FC, $E, $20, $1C, $4
00018677 140C 2028 EC               	dc.b $14, $C, $20, $28, $EC
0001867C 1400 202C 0C               	dc.b $14, $0, $20, $2C, $C
00018681 02                         Map_dc7e_39: 	dc.b $2
00018682 E404 0000 F4               	dc.b $E4, $4, $0, $0, $F4
00018687 EC0D 0002 EC               	dc.b $EC, $D, $0, $2, $EC
0001868C 02                         Map_dc7e_44: 	dc.b $2
0001868D E404 0000 F4               	dc.b $E4, $4, $0, $0, $F4
00018692 EC0D 0035 EC               	dc.b $EC, $D, $0, $35, $EC
00018697 03                         Map_dc7e_4F: 	dc.b $3
00018698 E408 003D F4               	dc.b $E4, $8, $0, $3D, $F4
0001869D EC09 0040 EC               	dc.b $EC, $9, $0, $40, $EC
000186A2 EC05 0046 04               	dc.b $EC, $5, $0, $46, $4
000186A7 03                         Map_dc7e_5F: 	dc.b $3
000186A8 E408 004A F4               	dc.b $E4, $8, $0, $4A, $F4
000186AD EC09 004D EC               	dc.b $EC, $9, $0, $4D, $EC
000186B2 EC05 0053 04               	dc.b $EC, $5, $0, $53, $4
000186B7 03                         Map_dc7e_6F: 	dc.b $3
000186B8 E408 0057 F4               	dc.b $E4, $8, $0, $57, $F4
000186BD EC09 005A EC               	dc.b $EC, $9, $0, $5A, $EC
000186C2 EC05 0060 04               	dc.b $EC, $5, $0, $60, $4
000186C7 03                         Map_dc7e_7F: 	dc.b $3
000186C8 E404 0064 04               	dc.b $E4, $4, $0, $64, $4
000186CD E404 0000 F4               	dc.b $E4, $4, $0, $0, $F4
000186D2 EC0D 0035 EC               	dc.b $EC, $D, $0, $35, $EC
000186D7 04                         Map_dc7e_8F: 	dc.b $4
000186D8 E409 0066 F4               	dc.b $E4, $9, $0, $66, $F4
000186DD E408 0057 F4               	dc.b $E4, $8, $0, $57, $F4
000186E2 EC09 005A EC               	dc.b $EC, $9, $0, $5A, $EC
000186E7 EC05 0060 04               	dc.b $EC, $5, $0, $60, $4
000186EC 01                         Map_dc7e_A4: 	dc.b $1
000186ED 0405 002D 22               	dc.b $4, $5, $0, $2D, $22
000186F2 01                         Map_dc7e_AA: 	dc.b $1
000186F3 0405 0031 22               	dc.b $4, $5, $0, $31, $22
000186F8 00                         Map_dc7e_B0: 	dc.b $0
000186F9 02                         Map_dc7e_B1: 	dc.b $2
000186FA 0008 012A 22               	dc.b $0, $8, $1, $2A, $22
000186FF 0808 112A 22               	dc.b $8, $8, $11, $2A, $22
00018704 02                         Map_dc7e_BC: 	dc.b $2
00018705 F80B 012D 22               	dc.b $F8, $B, $1, $2D, $22
0001870A 0001 0139 3A               	dc.b $0, $1, $1, $39, $3A
00018710 00                         	even
00018710 00                         	even
00018710                            
00018710                            ; ---------------------------------------------------------------------------
00018710                            ; Sprite mappings - extra boss items (e.g. swinging ball on a chain in GHZ)
00018710                            ; ---------------------------------------------------------------------------
00018710                            Map_BossItems:
00018710                            	include "_maps\Boss items.asm"
00018710                            ; ---------------------------------------------------------------------------
00018710                            ; Sprite mappings - extra boss items (e.g. swinging ball on a chain in GHZ)
00018710                            ; ---------------------------------------------------------------------------
00018710 0000 0000                  		dc.w byte_17DE4-Map_BossItems, byte_17DEA-Map_BossItems
00018714 0000 0000                  		dc.w byte_17DF6-Map_BossItems, byte_17DFC-Map_BossItems
00018718 0000 0000                  		dc.w byte_17E02-Map_BossItems, byte_17E08-Map_BossItems
0001871C 0000 0000                  		dc.w byte_17E1E-Map_BossItems, byte_17E2A-Map_BossItems
00018720 01                         byte_17DE4:	dc.b 1
00018721 F805 0000 F8               		dc.b $F8, 5, 0,	0, $F8
00018726 02                         byte_17DEA:	dc.b 2
00018727 FC04 0004 F8               		dc.b $FC, 4, 0,	4, $F8
0001872C F805 0000 F8               		dc.b $F8, 5, 0,	0, $F8
00018731 00                         		dc.b 0
00018732 01                         byte_17DF6:	dc.b 1
00018733 FC00 0006 FC               		dc.b $FC, 0, 0,	6, $FC
00018738 01                         byte_17DFC:	dc.b 1
00018739 1409 0007 F4               		dc.b $14, 9, 0,	7, $F4
0001873E 01                         byte_17E02:	dc.b 1
0001873F 1405 000D F8               		dc.b $14, 5, 0,	$D, $F8
00018744 04                         byte_17E08:	dc.b 4
00018745 F004 0011 F8               		dc.b $F0, 4, 0,	$11, $F8
0001874A F801 0013 F8               		dc.b $F8, 1, 0,	$13, $F8
0001874F F801 0813 00               		dc.b $F8, 1, 8,	$13, 0
00018754 0804 0015 F8               		dc.b 8,	4, 0, $15, $F8
00018759 00                         		dc.b 0
0001875A 02                         byte_17E1E:	dc.b 2
0001875B 0005 0017 00               		dc.b 0,	5, 0, $17, 0
00018760 0000 001B 10               		dc.b 0,	0, 0, $1B, $10
00018765 00                         		dc.b 0
00018766 02                         byte_17E2A:	dc.b 2
00018767 1804 001C 00               		dc.b $18, 4, 0,	$1C, 0
0001876C 000B 001E 10               		dc.b 0,	$B, 0, $1E, $10
00018772 00                         		even
00018772 00                         		even
00018772                            
00018772                            ; ===========================================================================
00018772                            ; ---------------------------------------------------------------------------
00018772                            ; Object 77 - Fatass teto boss fight in LZ -STDH
00018772                            ; ---------------------------------------------------------------------------
00018772                            
00018772                            
00018772                            obj77:					; XREF: Obj_Index
00018772 7000                       		moveq	#0,d0
00018774 1028 0024                  		move.b	$24(a0),d0
00018778 323B 0000                  		move.w	obj77_Index(pc,d0.w),d1
0001877C 4EFB 1000                  		jmp	obj77_Index(pc,d1.w)
00018780                            ; ===========================================================================
00018780 0000                       obj77_Index:	dc.w obj77_Main-obj77_Index
00018782 0000                       		dc.w obj77_ShipMain-obj77_Index
00018784 0000                       		dc.w obj77_FaceMain-obj77_Index
00018786 0000                       		dc.w obj77_FlameMain-obj77_Index
00018788                            
00018788 0200                       obj77_ObjData:	dc.b 2,	0		; routine counter, animation
0001878A 0401                       		dc.b 4,	1
0001878C 0607                       		dc.b 6,	7
0001878E                            ; ===========================================================================
0001878E                            
0001878E                            obj77_Main:				; XREF: obj77_Index
0001878E 45F9 0001 8788             		lea	(obj77_ObjData).l,a2
00018794 2248                       		movea.l	a0,a1
00018796 7202                       		moveq	#2,d1
00018798 6000                       		bra.s	obj77_LoadBoss
0001879A                            ; ===========================================================================
0001879A                            
0001879A                            obj77_Loop:
0001879A 4EB9 0000 E264             		jsr	SingleObjLoad2
000187A0 6600                       		bne.s	loc2_17772
000187A2                            
000187A2                            obj77_LoadBoss:				; XREF: obj77_Main
000187A2 135A 0024                  		move.b	(a2)+,$24(a1)
000187A6 12BC 0077                  		move.b	#$77,0(a1)
000187AA 3368 0008 0008             		move.w	8(a0),8(a1)
000187B0 3368 000C 000C             		move.w	$C(a0),$C(a1)
000187B6 237C 0000 0000 0004        		move.l	#Map_TetoBoss,4(a1)
000187BE 337C 0400 0002             		move.w	#$400,2(a1)
000187C4 137C 0004 0001             		move.b	#4,1(a1)
000187CA 137C 0020 0019             		move.b	#$20,$19(a1)
000187D0 137C 0003 0018             		move.b	#3,$18(a1)
000187D6 135A 001C                  		move.b	(a2)+,$1C(a1)
000187DA 2348 0034                  		move.l	a0,$34(a1)
000187DE 51C9 FFBA                  		dbf	d1,obj77_Loop	; repeat sequence 2 more times
000187E2                            
000187E2                            loc2_17772:
000187E2 3168 0008 0030             		move.w	8(a0),$30(a0)
000187E8 3168 000C 0038             		move.w	$C(a0),$38(a0)
000187EE 117C 000F 0020             		move.b	#$F,$20(a0)
000187F4 117C 0008 0021             		move.b	#8,$21(a0)	; set number of	hits to	8
000187FA                            
000187FA                            obj77_ShipMain:				; XREF: obj77_Index
000187FA 7000                       		moveq	#0,d0
000187FC 1028 0025                  		move.b	$25(a0),d0
00018800 323B 0000                  		move.w	obj77_ShipIndex(pc,d0.w),d1
00018804 4EBB 1000                  		jsr	obj77_ShipIndex(pc,d1.w)
00018808 43F9 0001 8634             		lea	(Ani_TetoB).l,a1
0001880E 4EB9 0000 AE88             		jsr	AnimateSprite
00018814 1028 0022                  		move.b	$22(a0),d0
00018818 0200 0003                  		andi.b	#3,d0
0001881C 0228 00FC 0001             		andi.b	#$FC,1(a0)
00018822 8128 0001                  		or.b	d0,1(a0)
00018826 4EF9 0000 DDC8             		jmp	DisplaySprite
0001882C                            ; ===========================================================================
0001882C 0000                       obj77_ShipIndex:dc.w obj77_ShipStart-obj77_ShipIndex
0001882E 0000                       		dc.w obj77_MakeBall-obj77_ShipIndex
00018830 0000                       		dc.w obj77_ShipMove-obj77_ShipIndex
00018832 0000                       		dc.w loc2_17954-obj77_ShipIndex
00018834 0000                       		dc.w fatassruns-obj77_ShipIndex		
00018836 0000                       		dc.w loc2_1797A-obj77_ShipIndex
00018838 0000                       		dc.w loc2_179AC-obj77_ShipIndex
0001883A 0000                       		dc.w loc2_179F6-obj77_ShipIndex
0001883C                            ; ===========================================================================
0001883C                            
0001883C                            obj77_ShipStart:			; XREF: obj77_ShipIndex
0001883C                            	;	move.w	#$100,$12(a0)	; move ship down
0001883C 6100 F964                  		bsr.w	BossMove
00018840 0C68 06E0 0038             		cmpi.w	#$6E0,$38(a0)
00018846 6600                       		bne.s	loc2_177E6
00018848 317C 0000 0012             		move.w	#0,$12(a0)	; stop ship
0001884E 5428 0025                  		addq.b	#2,$25(a0)	; goto next routine
00018852                            
00018852                            loc2_177E6:
00018852                            ;		move.b	$3F(a0),d0
00018852                            ;		jsr	(CalcSine).l
00018852 EC40                       		asr.w	#6,d0
00018854 D068 0038                  		add.w	$38(a0),d0
00018858 3140 000C                  		move.w	d0,$C(a0)
0001885C 3168 0030 0008             		move.w	$30(a0),8(a0)
00018862 5428 003F                  		addq.b	#2,$3F(a0)
00018866 0C28 000A 0025             		cmpi.b	#$A,$25(a0)
0001886C 6400                       		bcc.s	locret_1784A2
0001886E 4A28 0022                  		tst.b	$22(a0)
00018872 6B00                       		bmi.s	loc2_1784C
00018874 4A28 0020                  		tst.b	$20(a0)
00018878 6600                       		bne.s	locret_1784A2
0001887A 4A28 003E                  		tst.b	$3E(a0)
0001887E 6600                       		bne.s	obj77_ShipFlash
00018880 117C 0060 003E             		move.b	#$60,$3E(a0)	; set number of	times for ship to flash
00018886 303C 00AC                  		move.w	#$AC,d0
0001888A 4EB9 0000 15C0             		jsr	(PlaySound_Special).l ;	play boss damage sound
00018890                            
00018890                            obj77_ShipFlash:
00018890 43F8 FB22                  		lea	($FFFFFB22).w,a1 ; load	2nd pallet, 2nd	entry
00018894 7000                       		moveq	#0,d0		; move 0 (black) to d0
00018896 4A51                       		tst.w	(a1)
00018898 6600                       		bne.s	loc2_1783C
0001889A 303C 0EEE                  		move.w	#$EEE,d0	; move 0EEE (white) to d0
0001889E                            
0001889E                            loc2_1783C:
0001889E 3280                       		move.w	d0,(a1)		; load colour stored in	d0
000188A0 5328 003E                  		subq.b	#1,$3E(a0)
000188A4 6600                       		bne.s	locret_1784A2
000188A6 117C 000F 0020             		move.b	#$F,$20(a0)
000188AC                            
000188AC                            locret_1784A2:
000188AC 4E75                       		rts	
000188AE                            ; ===========================================================================
000188AE                            
000188AE                            loc2_1784C:				; XREF: loc2_177E6
000188AE 7064                       		moveq	#100,d0
000188B0 6100 0000                  		bsr.w	AddPoints
000188B4 117C 000A 0025             		move.b	#$A,$25(a0)
000188BA 317C 00B3 003C             		move.w	#$B3,$3C(a0)
000188C0 4E75                       		rts	
000188C2                            ; ===========================================================================
000188C2                            
000188C2                            obj77_MakeBall:				; XREF: obj77_ShipIndex
000188C2 317C FF00 0010             		move.w	#-$100,$10(a0)
000188C8 117C 0001 001C             		move.b	#1,$1C(a0)	; it runs
000188CE 6100 F8D2                  		bsr.w	BossMove
000188D2 0C68 1E00 0030             		cmpi.w	#$1E00,$30(a0)
000188D8 6600                       		bne.s	loc2_17916
000188DA 317C 0000 0010             		move.w	#0,$10(a0)
000188E0 117C 0002 001C             		move.b	#2,$1C(a0)	; stare
000188E6 317C 0000 0012             		move.w	#0,$12(a0)
000188EC 5428 0025                  		addq.b	#2,$25(a0)
000188F0                            
000188F0                            loc2_17910:
000188F0 317C 0077 003C             		move.w	#$77,$3C(a0)
000188F6                            
000188F6                            loc2_17916:
000188F6 6000 FF5A                  		bra.w	loc2_177E6
000188FA                            ; ===========================================================================
000188FA                            
000188FA                            obj77_ShipMove:				; XREF: obj77_ShipIndex
000188FA 6100 F8A6                  		bsr.w	BossMove
000188FE 5368 003C                  		subq.w	#1,$3C(a0)
00018902 6A00                       		bpl.s	loc2_17950 ; if time remains go here
00018904 117C 0000 001C             		move.b	#0,$1C(a0)	; make it spin
0001890A 117C 0087 0020             		move.b	#$87,$20(a0) ; the spinning hurts you
00018910 317C FE00 0010             		move.w	#-$200,$10(a0)	; move the ship	sideways
00018916 0C68 1D10 0030             		cmpi.w	#$1D10,$30(a0) ; is teto here
0001891C 6600                       		bne.s	loc2_17950 ; if not branch
0001891E                            
0001891E                            fatass_attack:
0001891E 317C 0000 0010             		move.w	#0,$10(a0) ; stop her
00018924 317C FE00 0012             		move.w	#-$200,$12(a0) ; OH SHIT SHES GOING UP
0001892A 0C68 0680 0038              		cmpi.w	#$680,$38(a0) ; is she here
00018930 6600                       		bne.s	loc2_17950    ; if not you know the drill
00018932 5428 0025                  		addq.b	#2,$25(a0)	; next routine!
00018936 317C 0000 0012             		move.w	#0,$12(a0) ; stop her		
0001893C                            
0001893C                            loc2_17950:
0001893C 6000 FF14                  		bra.w	loc2_177E6
00018940                            ; ===========================================================================
00018940                            
00018940                            loc2_17954:				; XREF: obj77_ShipIndex
00018940 6100 F860                  		bsr.w	BossMove
00018944 317C 0400 0012             		move.w	#$400,$12(a0) ; RUN A EARTHQUAKE!!
0001894A                            		; i suck at programming
0001894A 0C68 06E0 0038              		cmpi.w	#$6E0,$38(a0) ; is she back to the ground
00018950 6600                       		bne.s	loc2_17976    ; if not blah blah
00018952 317C 0000 0012             		move.w	#0,$12(a0) ; stop her		
00018958 5428 0025                  		addq.b	#2,$25(a0)	; next routine!
0001895C 303C 00B9                  		move.w	#$B9,d0
00018960 4EB9 0000 15BA             		jsr	(PlaySound).l	; play the earthquake sound
00018966                            
00018966                            Peartobombs:	
00018966 4EB9 0000 E264                		jsr	SingleObjLoad2
0001896C 6600                       		bne.s	secondone
0001896E 12BC 0019                  		move.b	#$19,0(a1)	; load pearto bomb
00018972 337C 1D70 0008             		move.w	#$1D70,8(a1)
00018978 337C 0670 000C             		move.w	#$670,$C(a1)
0001897E                            secondone:		
0001897E 4EB9 0000 E264                		jsr	SingleObjLoad2
00018984 6600                       		bne.s	loc2_17976		
00018986 12BC 0019                  		move.b	#$19,0(a1)	; load pearto bomb 2
0001898A 337C 1D20 0008             		move.w	#$1D20,8(a1)
00018990 337C 0670 000C             		move.w	#$670,$C(a1)
00018996                            lastone:
00018996 4EB9 0000 E264                		jsr	SingleObjLoad2
0001899C 6600                       		bne.s	loc2_17976		
0001899E 12BC 0019                  		move.b	#$19,0(a1)	; load pearto bomb 3
000189A2 337C 1E00 0008             		move.w	#$1E00,8(a1)
000189A8 337C 0670 000C             		move.w	#$670,$C(a1)
000189AE                            		
000189AE                            loc2_17976:
000189AE 6000 FEA2                  		bra.w	loc2_177E6
000189B2                            		
000189B2                            ; ===========================================================================
000189B2                            Fatassruns:
000189B2 6100 F7EE                   		bsr.w	BossMove
000189B6 317C 0200 0010             		move.w	#$200,$10(a0)	; IT RUNS!!
000189BC 0C68 1E00 0030             		cmpi.w	#$1E00,$30(a0) ; is she back here
000189C2 6600                       		bne.s	processstuff ; is not go here
000189C4 317C 0000 0010             		move.w	#0,$10(a0)	; stop'
000189CA 117C 0002 001C             		move.b	#2,$1C(a0)	; stareeeee
000189D0 5928 0025                  		subq.b	#4,$25(a0) ; make the boss loop
000189D4 317C 0077 003C             		move.w	#$77,$3C(a0) ; timeerr
000189DA 117C 000F 0020             		move.b	#$F,$20(a0) ; now you can hit her
000189E0                            		
000189E0                            		
000189E0                            processstuff:
000189E0 6000 FE70                  		bra.w	loc2_177E6
000189E4                            ; ===========================================================================
000189E4                            
000189E4                            loc2_1797A:				; XREF: obj77_ShipIndex
000189E4 5368 003C                  		subq.w	#1,$3C(a0)
000189E8 6B00                       		bmi.s	loc2_17984
000189EA 6000 F774                  		bra.w	BossDefeated
000189EE                            ; ===========================================================================
000189EE                            
000189EE                            loc2_17984:
000189EE 08E8 0000 0022             		bset	#0,$22(a0)
000189F4 08A8 0007 0022             		bclr	#7,$22(a0)
000189FA 4268 0010                  		clr.w	$10(a0)
000189FE 5428 0025                  		addq.b	#2,$25(a0)
00018A02 317C FFDA 003C             		move.w	#-$26,$3C(a0)
00018A08 4A38 F7A7                  		tst.b	($FFFFF7A7).w
00018A0C 6600                       		bne.s	locret_179AA2
00018A0E 11FC 0001 F7A7             		move.b	#1,($FFFFF7A7).w
00018A14                            
00018A14                            locret_179AA2:
00018A14 4E75                       		rts	
00018A16                            ; ===========================================================================
00018A16                            
00018A16                            loc2_179AC:				; XREF: obj77_ShipIndex
00018A16 5268 003C                  		addq.w	#1,$3C(a0)
00018A1A 6700                       		beq.s	loc2_179BC
00018A1C 6A00                       		bpl.s	loc2_179C2
00018A1E 0668 0018 0012             		addi.w	#$18,$12(a0)
00018A24 6000                       		bra.s	loc2_179EE
00018A26                            ; ===========================================================================
00018A26                            
00018A26                            loc2_179BC:
00018A26 4268 0012                  		clr.w	$12(a0)
00018A2A 6000                       		bra.s	loc2_179EE
00018A2C                            ; ===========================================================================
00018A2C                            
00018A2C                            loc2_179C2:
00018A2C 0C68 0030 003C             		cmpi.w	#$30,$3C(a0)
00018A32 6500                       		bcs.s	loc2_179DA
00018A34 6700                       		beq.s	loc2_179E0
00018A36 0C68 0038 003C             		cmpi.w	#$38,$3C(a0)
00018A3C 6500                       		bcs.s	loc2_179EE
00018A3E 5428 0025                  		addq.b	#2,$25(a0)
00018A42 6000                       		bra.s	loc2_179EE
00018A44                            ; ===========================================================================
00018A44                            
00018A44                            loc2_179DA:
00018A44 5168 0012                  		subq.w	#8,$12(a0)
00018A48 6000                       		bra.s	loc2_179EE
00018A4A                            ; ===========================================================================
00018A4A                            
00018A4A                            loc2_179E0:
00018A4A 4268 0012                  		clr.w	$12(a0)
00018A4E 303C 0097                  		move.w	#$97,d0
00018A52 4EB9 0000 15BA             		jsr	(PlaySound).l	; play lz3 music
00018A58                            
00018A58                            loc2_179EE:
00018A58 6100 F748                  		bsr.w	BossMove
00018A5C 6000 FDF4                  		bra.w	loc2_177E6
00018A60                            ; ===========================================================================
00018A60                            
00018A60                            loc2_179F6:				; XREF: obj77_ShipIndex
00018A60 317C 0400 0010             		move.w	#$400,$10(a0)
00018A66 317C FFC0 0012             		move.w	#-$40,$12(a0)
00018A6C 0C78 1F00 F72A             		cmpi.w	#$1F00,($FFFFF72A).w
00018A72 6700                       		beq.s	loc2_17A10
00018A74 5478 F72A                  		addq.w	#2,($FFFFF72A).w
00018A78 6000                       		bra.s	loc2_17A16
00018A7A                            ; ===========================================================================
00018A7A                            
00018A7A                            loc2_17A10:
00018A7A 4A28 0001                  		tst.b	1(a0)
00018A7E 6A00                       		bpl.s	obj77_ShipDel
00018A80                            
00018A80                            loc2_17A16:
00018A80 6100 F720                  		bsr.w	BossMove
00018A84 6000 FDCC                  		bra.w	loc2_177E6
00018A88                            ; ===========================================================================
00018A88                            
00018A88                            obj77_ShipDel:
00018A88 4EF9 0000 DE04             		jmp	DeleteObject
00018A8E                            ; ===========================================================================
00018A8E                            
00018A8E                            obj77_FaceMain:				; XREF: obj77_Index
00018A8E 4E75                       		rts
00018A90                            ; ===========================================================================
00018A90                            
00018A90                            obj77_FlameMain:			; XREF: obj77_Index
00018A90 4E75                       		rts
00018A92                            ; ===========================================================================
00018A92                            
00018A92                            obj77_Display:				; XREF: obj77_FaceDisp; obj77_FlameDisp
00018A92 43F9 0001 8634             		lea	(Ani_TetoB).l,a1
00018A98 4EB9 0000 AE88             		jsr	AnimateSprite
00018A9E 4EF9 0000 DDC8             		jmp	DisplaySprite
00018AA4                            ; ---------------------------------------------------------------------------
00018AA4                            ; Sprite mappings - Fatass teto boss
00018AA4                            ; ---------------------------------------------------------------------------
00018AA4                            Map_TetoBoss:
00018AA4                            	include "_maps\tetoboss.asm"
00018AA4                            Map_f09a:
00018AA4 0000                       Map_f09a_0: 	dc.w Map_f09a_8-Map_f09a
00018AA6 0000                       Map_f09a_2: 	dc.w Map_f09a_18-Map_f09a
00018AA8 0000                       Map_f09a_4: 	dc.w Map_f09a_37-Map_f09a
00018AAA 0000                       Map_f09a_6: 	dc.w Map_f09a_47-Map_f09a
00018AAC 03                         Map_f09a_8: 	dc.b $3
00018AAD E50F 602B F0               	dc.b $E5, $F, $60, $2B, $F0
00018AB2 050E 603B F0               	dc.b $5, $E, $60, $3B, $F0
00018AB7 DD00 6047 F8               	dc.b $DD, $0, $60, $47, $F8
00018ABC 06                         Map_f09a_18: 	dc.b $6
00018ABD EC0E 6000 E4               	dc.b $EC, $E, $60, $0, $E4
00018AC2 040E 600C EC               	dc.b $4, $E, $60, $C, $EC
00018AC7 E408 6018 F4               	dc.b $E4, $8, $60, $18, $F4
00018ACC 1C00 601B F4               	dc.b $1C, $0, $60, $1B, $F4
00018AD1 EC0A 601C 04               	dc.b $EC, $A, $60, $1C, $4
00018AD6 0406 6025 0C               	dc.b $4, $6, $60, $25, $C
00018ADB 03                         Map_f09a_37: 	dc.b $3
00018ADC E50F 682B F0               	dc.b $E5, $F, $68, $2B, $F0
00018AE1 050E 683B F0               	dc.b $5, $E, $68, $3B, $F0
00018AE6 DD00 6847 00               	dc.b $DD, $0, $68, $47, $0
00018AEB 06                         Map_f09a_47: 	dc.b $6
00018AEC ED0E 6048 E4               	dc.b $ED, $E, $60, $48, $E4
00018AF1 050E 6054 EC               	dc.b $5, $E, $60, $54, $EC
00018AF6 E508 6060 F4               	dc.b $E5, $8, $60, $60, $F4
00018AFB DD00 6063 FC               	dc.b $DD, $0, $60, $63, $FC
00018B00 ED0A 6064 04               	dc.b $ED, $A, $60, $64, $4
00018B05 0502 606D 0C               	dc.b $5, $2, $60, $6D, $C
00018B0A                            	even
00018B0A                            	even
00018B0A                            ; ===========================================================================
00018B0A                            ; ---------------------------------------------------------------------------
00018B0A                            ; Object 73 - Eggman (MZ)
00018B0A                            ; ---------------------------------------------------------------------------
00018B0A                            
00018B0A                            Obj73:					; XREF: Obj_Index
00018B0A 7000                       		moveq	#0,d0
00018B0C 1028 0024                  		move.b	$24(a0),d0
00018B10 323B 0000                  		move.w	Obj73_Index(pc,d0.w),d1
00018B14 4EFB 1000                  		jmp	Obj73_Index(pc,d1.w)
00018B18                            ; ===========================================================================
00018B18 0000                       Obj73_Index:	dc.w Obj73_Main-Obj73_Index
00018B1A 0000                       		dc.w Obj73_ShipMain-Obj73_Index
00018B1C 0000                       		dc.w Obj73_FaceMain-Obj73_Index
00018B1E 0000                       		dc.w Obj73_FlameMain-Obj73_Index
00018B20 0000                       		dc.w Obj73_TubeMain-Obj73_Index
00018B22                            
00018B22 0200 04                    Obj73_ObjData:	dc.b 2,	0, 4		; routine number, animation, priority
00018B25 0401 04                    		dc.b 4,	1, 4
00018B28 0607 04                    		dc.b 6,	7, 4
00018B2B 0800 03                    		dc.b 8,	0, 3
00018B2E                            ; ===========================================================================
00018B2E                            
00018B2E                            Obj73_Main:				; XREF: Obj73_Index
00018B2E 3168 0008 0030             		move.w	8(a0),$30(a0)
00018B34 3168 000C 0038             		move.w	$C(a0),$38(a0)
00018B3A 117C 000F 0020             		move.b	#$F,$20(a0)
00018B40 117C 0008 0021             		move.b	#8,$21(a0)	; set number of	hits to	8
00018B46 45FA FFDA                  		lea	Obj73_ObjData(pc),a2
00018B4A 2248                       		movea.l	a0,a1
00018B4C 7203                       		moveq	#3,d1
00018B4E 6000                       		bra.s	Obj73_LoadBoss
00018B50                            ; ===========================================================================
00018B50                            
00018B50                            Obj73_Loop:
00018B50 4EB9 0000 E264             		jsr	SingleObjLoad2
00018B56 6600                       		bne.s	Obj73_ShipMain
00018B58 12BC 0073                  		move.b	#$73,0(a1)
00018B5C 3368 0008 0008             		move.w	8(a0),8(a1)
00018B62 3368 000C 000C             		move.w	$C(a0),$C(a1)
00018B68                            
00018B68                            Obj73_LoadBoss:				; XREF: Obj73_Main
00018B68 08A8 0000 0022             		bclr	#0,$22(a0)
00018B6E 4229 0025                  		clr.b	$25(a1)
00018B72 135A 0024                  		move.b	(a2)+,$24(a1)
00018B76 135A 001C                  		move.b	(a2)+,$1C(a1)
00018B7A 135A 0018                  		move.b	(a2)+,$18(a1)
00018B7E 237C 0001 8648 0004        		move.l	#Map_Eggman,4(a1)
00018B86 337C 0400 0002             		move.w	#$400,2(a1)
00018B8C 137C 0004 0001             		move.b	#4,1(a1)
00018B92 137C 0020 0019             		move.b	#$20,$19(a1)
00018B98 2348 0034                  		move.l	a0,$34(a1)
00018B9C 51C9 FFB2                  		dbf	d1,Obj73_Loop	; repeat sequence 3 more times
00018BA0                            
00018BA0                            Obj73_ShipMain:
00018BA0 7000                       		moveq	#0,d0
00018BA2 1028 0025                  		move.b	$25(a0),d0
00018BA6 323B 0000                  		move.w	Obj73_ShipIndex(pc,d0.w),d1
00018BAA 4EBB 1000                  		jsr	Obj73_ShipIndex(pc,d1.w)
00018BAE 43F9 0001 85E4             		lea	(Ani_Eggman).l,a1
00018BB4 4EB9 0000 AE88             		jsr	AnimateSprite
00018BBA 7003                       		moveq	#3,d0
00018BBC C028 0022                  		and.b	$22(a0),d0
00018BC0 0228 00FC 0001             		andi.b	#$FC,1(a0)
00018BC6 8128 0001                  		or.b	d0,1(a0)
00018BCA 4EF9 0000 DDC8             		jmp	DisplaySprite
00018BD0                            ; ===========================================================================
00018BD0 0000                       Obj73_ShipIndex:dc.w loc_18302-Obj73_ShipIndex
00018BD2 0000                       		dc.w loc_183AA-Obj73_ShipIndex
00018BD4 0000                       		dc.w loc_184F6-Obj73_ShipIndex
00018BD6 0000                       		dc.w loc_1852C-Obj73_ShipIndex
00018BD8 0000                       		dc.w loc_18582-Obj73_ShipIndex
00018BDA                            ; ===========================================================================
00018BDA                            
00018BDA                            loc_18302:				; XREF: Obj73_ShipIndex
00018BDA 1028 003F                  		move.b	$3F(a0),d0
00018BDE 5428 003F                  		addq.b	#2,$3F(a0)
00018BE2 4EB9 0000 2CAC             		jsr	(CalcSine).l
00018BE8 E440                       		asr.w	#2,d0
00018BEA 3140 0012                  		move.w	d0,$12(a0)
00018BEE 317C FF00 0010             		move.w	#-$100,$10(a0)
00018BF4 6100 F5AC                  		bsr.w	BossMove
00018BF8 0C68 1910 0030             		cmpi.w	#$1910,$30(a0)
00018BFE 6600                       		bne.s	loc_18334
00018C00 5428 0025                  		addq.b	#2,$25(a0)
00018C04 4228 0028                  		clr.b	$28(a0)
00018C08 42A8 0010                  		clr.l	$10(a0)
00018C0C                            
00018C0C                            loc_18334:
00018C0C 4EB9 0000 2C86             		jsr	(RandomNumber).l
00018C12 1140 0034                  		move.b	d0,$34(a0)
00018C16                            
00018C16                            loc_1833E:
00018C16 3168 0038 000C             		move.w	$38(a0),$C(a0)
00018C1C 3168 0030 0008             		move.w	$30(a0),8(a0)
00018C22 0C28 0004 0025             		cmpi.b	#4,$25(a0)
00018C28 6400                       		bcc.s	locret_18390
00018C2A 4A28 0022                  		tst.b	$22(a0)
00018C2E 6B00                       		bmi.s	loc_18392
00018C30 4A28 0020                  		tst.b	$20(a0)
00018C34 6600                       		bne.s	locret_18390
00018C36 4A28 003E                  		tst.b	$3E(a0)
00018C3A 6600                       		bne.s	loc_18374
00018C3C 117C 0028 003E             		move.b	#$28,$3E(a0)
00018C42 303C 00AC                  		move.w	#$AC,d0
00018C46 4EB9 0000 15C0             		jsr	(PlaySound_Special).l ;	play boss damage sound
00018C4C                            
00018C4C                            loc_18374:
00018C4C 43F8 FB22                  		lea	($FFFFFB22).w,a1
00018C50 7000                       		moveq	#0,d0
00018C52 4A51                       		tst.w	(a1)
00018C54 6600                       		bne.s	loc_18382
00018C56 303C 0EEE                  		move.w	#$EEE,d0
00018C5A                            
00018C5A                            loc_18382:
00018C5A 3280                       		move.w	d0,(a1)
00018C5C 5328 003E                  		subq.b	#1,$3E(a0)
00018C60 6600                       		bne.s	locret_18390
00018C62 117C 000F 0020             		move.b	#$F,$20(a0)
00018C68                            
00018C68                            locret_18390:
00018C68 4E75                       		rts	
00018C6A                            ; ===========================================================================
00018C6A                            
00018C6A                            loc_18392:				; XREF: loc_1833E
00018C6A 7064                       		moveq	#100,d0
00018C6C 6100 0000                  		bsr.w	AddPoints
00018C70 117C 0004 0025             		move.b	#4,$25(a0)
00018C76 317C 00B4 003C             		move.w	#$B4,$3C(a0)
00018C7C 4268 0010                  		clr.w	$10(a0)
00018C80 4E75                       		rts	
00018C82                            ; ===========================================================================
00018C82                            
00018C82                            loc_183AA:				; XREF: Obj73_ShipIndex
00018C82 7000                       		moveq	#0,d0
00018C84 1028 0028                  		move.b	$28(a0),d0
00018C88 303B 0000                  		move.w	off_183C2(pc,d0.w),d0
00018C8C 4EBB 0000                  		jsr	off_183C2(pc,d0.w)
00018C90 0228 0006 0028             		andi.b	#6,$28(a0)
00018C96 6000 FF7E                  		bra.w	loc_1833E
00018C9A                            ; ===========================================================================
00018C9A 0000                       off_183C2:	dc.w loc_183CA-off_183C2
00018C9C 0000                       		dc.w Obj73_MakeLava2-off_183C2
00018C9E 0000                       		dc.w loc_183CA-off_183C2
00018CA0 0000                       		dc.w Obj73_MakeLava2-off_183C2
00018CA2                            ; ===========================================================================
00018CA2                            
00018CA2                            loc_183CA:				; XREF: off_183C2
00018CA2 4A68 0010                  		tst.w	$10(a0)
00018CA6 6600                       		bne.s	loc_183FE
00018CA8 7040                       		moveq	#$40,d0
00018CAA 0C68 022C 0038             		cmpi.w	#$22C,$38(a0)
00018CB0 6700                       		beq.s	loc_183E6
00018CB2 6500                       		bcs.s	loc_183DE
00018CB4 4440                       		neg.w	d0
00018CB6                            
00018CB6                            loc_183DE:
00018CB6 3140 0012                  		move.w	d0,$12(a0)
00018CBA 6000 F4E6                  		bra.w	BossMove
00018CBE                            ; ===========================================================================
00018CBE                            
00018CBE                            loc_183E6:
00018CBE 317C 0200 0010             		move.w	#$200,$10(a0)
00018CC4 317C 0100 0012             		move.w	#$100,$12(a0)
00018CCA 0828 0000 0022             		btst	#0,$22(a0)
00018CD0 6600                       		bne.s	loc_183FE
00018CD2 4468 0010                  		neg.w	$10(a0)
00018CD6                            
00018CD6                            loc_183FE:
00018CD6 0C28 0018 003E             		cmpi.b	#$18,$3E(a0)
00018CDC 6400                       		bcc.s	Obj73_MakeLava
00018CDE 6100 F4C2                  		bsr.w	BossMove
00018CE2 5968 0012                  		subq.w	#4,$12(a0)
00018CE6                            
00018CE6                            Obj73_MakeLava:
00018CE6 5328 0034                  		subq.b	#1,$34(a0)
00018CEA 6400                       		bcc.s	loc_1845C
00018CEC 4EB9 0000 E24E             		jsr	SingleObjLoad
00018CF2 6600                       		bne.s	loc_1844A
00018CF4 12BC 0014                  		move.b	#$14,0(a1)	; load lava ball object
00018CF8 337C 02E8 000C             		move.w	#$2E8,$C(a1)	; set Y	position
00018CFE 4EB9 0000 2C86             		jsr	(RandomNumber).l
00018D04 0280 0000 FFFF             		andi.l	#$FFFF,d0
00018D0A 80FC 0050                  		divu.w	#$50,d0
00018D0E 4840                       		swap	d0
00018D10 0640 1878                  		addi.w	#$1878,d0
00018D14 3340 0008                  		move.w	d0,8(a1)
00018D18 EE09                       		lsr.b	#7,d1
00018D1A 337C 00FF 0028             		move.w	#$FF,$28(a1)
00018D20                            
00018D20                            loc_1844A:
00018D20 4EB9 0000 2C86             		jsr	(RandomNumber).l
00018D26 0200 001F                  		andi.b	#$1F,d0
00018D2A 0600 0040                  		addi.b	#$40,d0
00018D2E 1140 0034                  		move.b	d0,$34(a0)
00018D32                            
00018D32                            loc_1845C:
00018D32 0828 0000 0022             		btst	#0,$22(a0)
00018D38 6700                       		beq.s	loc_18474
00018D3A 0C68 1910 0030             		cmpi.w	#$1910,$30(a0)
00018D40 6D00                       		blt.s	locret_1849C
00018D42 317C 1910 0030             		move.w	#$1910,$30(a0)
00018D48 6000                       		bra.s	loc_18482
00018D4A                            ; ===========================================================================
00018D4A                            
00018D4A                            loc_18474:
00018D4A 0C68 1830 0030             		cmpi.w	#$1830,$30(a0)
00018D50 6E00                       		bgt.s	locret_1849C
00018D52 317C 1830 0030             		move.w	#$1830,$30(a0)
00018D58                            
00018D58                            loc_18482:
00018D58 4268 0010                  		clr.w	$10(a0)
00018D5C 317C FE80 0012             		move.w	#-$180,$12(a0)
00018D62 0C68 022C 0038             		cmpi.w	#$22C,$38(a0)
00018D68 6400                       		bcc.s	loc_18498
00018D6A 4468 0012                  		neg.w	$12(a0)
00018D6E                            
00018D6E                            loc_18498:
00018D6E 5428 0028                  		addq.b	#2,$28(a0)
00018D72                            
00018D72                            locret_1849C:
00018D72 4E75                       		rts	
00018D74                            ; ===========================================================================
00018D74                            
00018D74                            Obj73_MakeLava2:			; XREF: off_183C2
00018D74 6100 F42C                  		bsr.w	BossMove
00018D78 3028 0038                  		move.w	$38(a0),d0
00018D7C 0440 022C                  		subi.w	#$22C,d0
00018D80 6E00                       		bgt.s	locret_184F4
00018D82 303C 022C                  		move.w	#$22C,d0
00018D86 4A68 0012                  		tst.w	$12(a0)
00018D8A 6700                       		beq.s	loc_184EA
00018D8C 4268 0012                  		clr.w	$12(a0)
00018D90 317C 0050 003C             		move.w	#$50,$3C(a0)
00018D96 0868 0000 0022             		bchg	#0,$22(a0)
00018D9C 4EB9 0000 E24E             		jsr	SingleObjLoad
00018DA2 6600                       		bne.s	loc_184EA
00018DA4 3368 0030 0008             		move.w	$30(a0),8(a1)
00018DAA 3368 0038 000C             		move.w	$38(a0),$C(a1)
00018DB0 0669 0018 000C             		addi.w	#$18,$C(a1)
00018DB6 12BC 0074                  		move.b	#$74,(a1)	; load lava ball object
00018DBA 137C 0001 0028             		move.b	#1,$28(a1)
00018DC0                            
00018DC0                            loc_184EA:
00018DC0 5368 003C                  		subq.w	#1,$3C(a0)
00018DC4 6600                       		bne.s	locret_184F4
00018DC6 5428 0028                  		addq.b	#2,$28(a0)
00018DCA                            
00018DCA                            locret_184F4:
00018DCA 4E75                       		rts	
00018DCC                            ; ===========================================================================
00018DCC                            
00018DCC                            loc_184F6:				; XREF: Obj73_ShipIndex
00018DCC 5368 003C                  		subq.w	#1,$3C(a0)
00018DD0 6B00                       		bmi.s	loc_18500
00018DD2 6000 F38C                  		bra.w	BossDefeated
00018DD6                            ; ===========================================================================
00018DD6                            
00018DD6                            loc_18500:
00018DD6 08E8 0000 0022             		bset	#0,$22(a0)
00018DDC 08A8 0007 0022             		bclr	#7,$22(a0)
00018DE2 4268 0010                  		clr.w	$10(a0)
00018DE6 5428 0025                  		addq.b	#2,$25(a0)
00018DEA 317C FFDA 003C             		move.w	#-$26,$3C(a0)
00018DF0 4A38 F7A7                  		tst.b	($FFFFF7A7).w
00018DF4 6600                       		bne.s	locret_1852A
00018DF6 11FC 0001 F7A7             		move.b	#1,($FFFFF7A7).w
00018DFC 4268 0012                  		clr.w	$12(a0)
00018E00                            
00018E00                            locret_1852A:
00018E00 4E75                       		rts	
00018E02                            ; ===========================================================================
00018E02                            
00018E02                            loc_1852C:				; XREF: Obj73_ShipIndex
00018E02 5268 003C                  		addq.w	#1,$3C(a0)
00018E06 6700                       		beq.s	loc_18544
00018E08 6A00                       		bpl.s	loc_1854E
00018E0A 0C68 0270 0038             		cmpi.w	#$270,$38(a0)
00018E10 6400                       		bcc.s	loc_18544
00018E12 0668 0018 0012             		addi.w	#$18,$12(a0)
00018E18 6000                       		bra.s	loc_1857A
00018E1A                            ; ===========================================================================
00018E1A                            
00018E1A                            loc_18544:
00018E1A 4268 0012                  		clr.w	$12(a0)
00018E1E 4268 003C                  		clr.w	$3C(a0)
00018E22 6000                       		bra.s	loc_1857A
00018E24                            ; ===========================================================================
00018E24                            
00018E24                            loc_1854E:
00018E24 0C68 0030 003C             		cmpi.w	#$30,$3C(a0)
00018E2A 6500                       		bcs.s	loc_18566
00018E2C 6700                       		beq.s	loc_1856C
00018E2E 0C68 0038 003C             		cmpi.w	#$38,$3C(a0)
00018E34 6500                       		bcs.s	loc_1857A
00018E36 5428 0025                  		addq.b	#2,$25(a0)
00018E3A 6000                       		bra.s	loc_1857A
00018E3C                            ; ===========================================================================
00018E3C                            
00018E3C                            loc_18566:
00018E3C 5168 0012                  		subq.w	#8,$12(a0)
00018E40 6000                       		bra.s	loc_1857A
00018E42                            ; ===========================================================================
00018E42                            
00018E42                            loc_1856C:
00018E42 4268 0012                  		clr.w	$12(a0)
00018E46 303C 0083                  		move.w	#$83,d0
00018E4A 4EB9 0000 15BA             		jsr	(PlaySound).l	; play MZ music
00018E50                            
00018E50                            loc_1857A:
00018E50 6100 F350                  		bsr.w	BossMove
00018E54 6000 FDC0                  		bra.w	loc_1833E
00018E58                            ; ===========================================================================
00018E58                            
00018E58                            loc_18582:				; XREF: Obj73_ShipIndex
00018E58 317C 0500 0010             		move.w	#$500,$10(a0)
00018E5E 317C FFC0 0012             		move.w	#-$40,$12(a0)
00018E64 0C78 1960 F72A             		cmpi.w	#$1960,($FFFFF72A).w
00018E6A 6400                       		bcc.s	loc_1859C
00018E6C 5478 F72A                  		addq.w	#2,($FFFFF72A).w
00018E70 6000                       		bra.s	loc_185A2
00018E72                            ; ===========================================================================
00018E72                            
00018E72                            loc_1859C:
00018E72 4A28 0001                  		tst.b	1(a0)
00018E76 6A00                       		bpl.s	Obj73_ShipDel
00018E78                            
00018E78                            loc_185A2:
00018E78 6100 F328                  		bsr.w	BossMove
00018E7C 6000 FD98                  		bra.w	loc_1833E
00018E80                            ; ===========================================================================
00018E80                            
00018E80                            Obj73_ShipDel:
00018E80 4EF9 0000 DE04             		jmp	DeleteObject
00018E86                            ; ===========================================================================
00018E86                            
00018E86                            Obj73_FaceMain:				; XREF: Obj73_Index
00018E86 7000                       		moveq	#0,d0
00018E88 7201                       		moveq	#1,d1
00018E8A 2268 0034                  		movea.l	$34(a0),a1
00018E8E 1029 0025                  		move.b	$25(a1),d0
00018E92 5540                       		subq.w	#2,d0
00018E94 6600                       		bne.s	loc_185D2
00018E96 0829 0001 0028             		btst	#1,$28(a1)
00018E9C 6700                       		beq.s	loc_185DA
00018E9E 4A69 0012                  		tst.w	$12(a1)
00018EA2 6600                       		bne.s	loc_185DA
00018EA4 7204                       		moveq	#4,d1
00018EA6 6000                       		bra.s	loc_185EE
00018EA8                            ; ===========================================================================
00018EA8                            
00018EA8                            loc_185D2:
00018EA8 5500                       		subq.b	#2,d0
00018EAA 6B00                       		bmi.s	loc_185DA
00018EAC 720A                       		moveq	#$A,d1
00018EAE 6000                       		bra.s	loc_185EE
00018EB0                            ; ===========================================================================
00018EB0                            
00018EB0                            loc_185DA:
00018EB0 4A29 0020                  		tst.b	$20(a1)
00018EB4 6600                       		bne.s	loc_185E4
00018EB6 7205                       		moveq	#5,d1
00018EB8 6000                       		bra.s	loc_185EE
00018EBA                            ; ===========================================================================
00018EBA                            
00018EBA                            loc_185E4:
00018EBA 0C38 0004 D024             		cmpi.b	#4,($FFFFD024).w
00018EC0 6500                       		bcs.s	loc_185EE
00018EC2 7204                       		moveq	#4,d1
00018EC4                            
00018EC4                            loc_185EE:
00018EC4 1141 001C                  		move.b	d1,$1C(a0)
00018EC8 5900                       		subq.b	#4,d0
00018ECA 6600                       		bne.s	loc_18602
00018ECC 117C 0006 001C             		move.b	#6,$1C(a0)
00018ED2 4A28 0001                  		tst.b	1(a0)
00018ED6 6A00                       		bpl.s	Obj73_FaceDel
00018ED8                            
00018ED8                            loc_18602:
00018ED8 6000                       		bra.s	Obj73_Display
00018EDA                            ; ===========================================================================
00018EDA                            
00018EDA                            Obj73_FaceDel:
00018EDA 4EF9 0000 DE04             		jmp	DeleteObject
00018EE0                            ; ===========================================================================
00018EE0                            
00018EE0                            Obj73_FlameMain:			; XREF: Obj73_Index
00018EE0 117C 0007 001C             		move.b	#7,$1C(a0)
00018EE6 2268 0034                  		movea.l	$34(a0),a1
00018EEA 0C29 0008 0025             		cmpi.b	#8,$25(a1)
00018EF0 6D00                       		blt.s	loc_1862A
00018EF2 117C 000B 001C             		move.b	#$B,$1C(a0)
00018EF8 4A28 0001                  		tst.b	1(a0)
00018EFC 6A00                       		bpl.s	Obj73_FlameDel
00018EFE 6000                       		bra.s	loc_18636
00018F00                            ; ===========================================================================
00018F00                            
00018F00                            loc_1862A:
00018F00 4A69 0010                  		tst.w	$10(a1)
00018F04 6700                       		beq.s	loc_18636
00018F06 117C 0008 001C             		move.b	#8,$1C(a0)
00018F0C                            
00018F0C                            loc_18636:
00018F0C 6000                       		bra.s	Obj73_Display
00018F0E                            ; ===========================================================================
00018F0E                            
00018F0E                            Obj73_FlameDel:				; XREF: Obj73_FlameMain
00018F0E 4EF9 0000 DE04             		jmp	DeleteObject
00018F14                            ; ===========================================================================
00018F14                            
00018F14                            Obj73_Display:
00018F14 43F9 0001 85E4             		lea	(Ani_Eggman).l,a1
00018F1A 4EB9 0000 AE88             		jsr	AnimateSprite
00018F20                            
00018F20                            loc_1864A:
00018F20 2268 0034                  		movea.l	$34(a0),a1
00018F24 3169 0008 0008             		move.w	8(a1),8(a0)
00018F2A 3169 000C 000C             		move.w	$C(a1),$C(a0)
00018F30 1169 0022 0022             		move.b	$22(a1),$22(a0)
00018F36 7003                       		moveq	#3,d0
00018F38 C028 0022                  		and.b	$22(a0),d0
00018F3C 0228 00FC 0001             		andi.b	#-4,1(a0)
00018F42 8128 0001                  		or.b	d0,1(a0)
00018F46 4EF9 0000 DDC8             		jmp	DisplaySprite
00018F4C                            ; ===========================================================================
00018F4C                            
00018F4C                            Obj73_TubeMain:				; XREF: Obj73_Index
00018F4C 2268 0034                  		movea.l	$34(a0),a1
00018F50 0C29 0008 0025             		cmpi.b	#8,$25(a1)
00018F56 6600                       		bne.s	loc_18688
00018F58 4A28 0001                  		tst.b	1(a0)
00018F5C 6A00                       		bpl.s	Obj73_TubeDel
00018F5E                            
00018F5E                            loc_18688:
00018F5E 217C 0001 8710 0004        		move.l	#Map_BossItems,4(a0)
00018F66 317C 246C 0002             		move.w	#$246C,2(a0)
00018F6C 117C 0004 001A             		move.b	#4,$1A(a0)
00018F72 60AC                       		bra.s	loc_1864A
00018F74                            ; ===========================================================================
00018F74                            
00018F74                            Obj73_TubeDel:
00018F74 4EF9 0000 DE04             		jmp	DeleteObject
00018F7A                            ; ===========================================================================
00018F7A                            ; ---------------------------------------------------------------------------
00018F7A                            ; Object 74 - lava that	Eggman drops (MZ)
00018F7A                            ; ---------------------------------------------------------------------------
00018F7A                            
00018F7A                            Obj74:					; XREF: Obj_Index
00018F7A 7000                       		moveq	#0,d0
00018F7C 1028 0024                  		move.b	$24(a0),d0
00018F80 303B 0000                  		move.w	Obj74_Index(pc,d0.w),d0
00018F84 4EBB 0000                  		jsr	Obj74_Index(pc,d0.w)
00018F88 4EF9 0000 DDC8             		jmp	DisplaySprite
00018F8E                            ; ===========================================================================
00018F8E 0000                       Obj74_Index:	dc.w Obj74_Main-Obj74_Index
00018F90 0000                       		dc.w Obj74_Action-Obj74_Index
00018F92 0000                       		dc.w loc_18886-Obj74_Index
00018F94 0000                       		dc.w Obj74_Delete3-Obj74_Index
00018F96                            ; ===========================================================================
00018F96                            
00018F96                            Obj74_Main:				; XREF: Obj74_Index
00018F96 117C 0008 0016             		move.b	#8,$16(a0)
00018F9C 117C 0008 0017             		move.b	#8,$17(a0)
00018FA2 217C 0000 BA86 0004        		move.l	#Map_obj14,4(a0)
00018FAA 317C 0345 0002             		move.w	#$345,2(a0)
00018FB0 117C 0004 0001             		move.b	#4,1(a0)
00018FB6 117C 0005 0018             		move.b	#5,$18(a0)
00018FBC 3168 000C 0038             		move.w	$C(a0),$38(a0)
00018FC2 117C 0008 0019             		move.b	#8,$19(a0)
00018FC8 5428 0024                  		addq.b	#2,$24(a0)
00018FCC 4A28 0028                  		tst.b	$28(a0)
00018FD0 6600                       		bne.s	loc_1870A
00018FD2 117C 008B 0020             		move.b	#$8B,$20(a0)
00018FD8 5428 0024                  		addq.b	#2,$24(a0)
00018FDC 6000 0000                  		bra.w	loc_18886
00018FE0                            ; ===========================================================================
00018FE0                            
00018FE0                            loc_1870A:
00018FE0 117C 001E 0029             		move.b	#$1E,$29(a0)
00018FE6 303C 00AE                  		move.w	#$AE,d0
00018FEA 4EB9 0000 15C0             		jsr	(PlaySound_Special).l ;	play lava sound
00018FF0                            
00018FF0                            Obj74_Action:				; XREF: Obj74_Index
00018FF0 7000                       		moveq	#0,d0
00018FF2 1028 0025                  		move.b	$25(a0),d0
00018FF6 303B 0000                  		move.w	Obj74_Index2(pc,d0.w),d0
00018FFA 4EBB 0000                  		jsr	Obj74_Index2(pc,d0.w)
00018FFE 4EB9 0000 DDA2             		jsr	SpeedToPos
00019004 43F9 0000 EC82             		lea	(Ani_obj14).l,a1
0001900A 4EB9 0000 AE88             		jsr	AnimateSprite
00019010 0C68 02E8 000C             		cmpi.w	#$2E8,$C(a0)
00019016 6200                       		bhi.s	Obj74_Delete
00019018 4E75                       		rts	
0001901A                            ; ===========================================================================
0001901A                            
0001901A                            Obj74_Delete:
0001901A 4EF9 0000 DE04             		jmp	DeleteObject
00019020                            ; ===========================================================================
00019020 0000                       Obj74_Index2:	dc.w Obj74_Drop-Obj74_Index2
00019022 0000                       		dc.w Obj74_MakeFlame-Obj74_Index2
00019024 0000                       		dc.w Obj74_Duplicate-Obj74_Index2
00019026 0000                       		dc.w Obj74_FallEdge-Obj74_Index2
00019028                            ; ===========================================================================
00019028                            
00019028                            Obj74_Drop:				; XREF: Obj74_Index2
00019028 08E8 0001 0022             		bset	#1,$22(a0)
0001902E 5328 0029                  		subq.b	#1,$29(a0)
00019032 6A00                       		bpl.s	locret_18780
00019034 117C 008B 0020             		move.b	#$8B,$20(a0)
0001903A 4228 0028                  		clr.b	$28(a0)
0001903E 0668 0018 0012             		addi.w	#$18,$12(a0)
00019044 08A8 0001 0022             		bclr	#1,$22(a0)
0001904A 6100 C686                  		bsr.w	ObjHitFloor
0001904E 4A41                       		tst.w	d1
00019050 6A00                       		bpl.s	locret_18780
00019052 5428 0025                  		addq.b	#2,$25(a0)
00019056                            
00019056                            locret_18780:
00019056 4E75                       		rts	
00019058                            ; ===========================================================================
00019058                            
00019058                            Obj74_MakeFlame:			; XREF: Obj74_Index2
00019058 5568 000C                  		subq.w	#2,$C(a0)
0001905C 08E8 0007 0002             		bset	#7,2(a0)
00019062 317C 00A0 0010             		move.w	#$A0,$10(a0)
00019068 4268 0012                  		clr.w	$12(a0)
0001906C 3168 0008 0030             		move.w	8(a0),$30(a0)
00019072 3168 000C 0038             		move.w	$C(a0),$38(a0)
00019078 117C 0003 0029             		move.b	#3,$29(a0)
0001907E 4EB9 0000 E264             		jsr	SingleObjLoad2
00019084 6600                       		bne.s	loc_187CA
00019086 47D1                       		lea	(a1),a3
00019088 45D0                       		lea	(a0),a2
0001908A 7003                       		moveq	#3,d0
0001908C                            
0001908C                            Obj74_Loop:
0001908C 26DA                       		move.l	(a2)+,(a3)+
0001908E 26DA                       		move.l	(a2)+,(a3)+
00019090 26DA                       		move.l	(a2)+,(a3)+
00019092 26DA                       		move.l	(a2)+,(a3)+
00019094 51C8 FFF6                  		dbf	d0,Obj74_Loop
00019098                            
00019098 4469 0010                  		neg.w	$10(a1)
0001909C 5429 0025                  		addq.b	#2,$25(a1)
000190A0                            
000190A0                            loc_187CA:
000190A0 5428 0025                  		addq.b	#2,$25(a0)
000190A4 4E75                       		rts	
000190A6                            
000190A6                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000190A6                            
000190A6                            
000190A6                            Obj74_Duplicate2:			; XREF: Obj74_Duplicate
000190A6 4EB9 0000 E264             		jsr	SingleObjLoad2
000190AC 6600                       		bne.s	locret_187EE
000190AE 3368 0008 0008             		move.w	8(a0),8(a1)
000190B4 3368 000C 000C             		move.w	$C(a0),$C(a1)
000190BA 12BC 0074                  		move.b	#$74,(a1)
000190BE 337C 0067 0028             		move.w	#$67,$28(a1)
000190C4                            
000190C4                            locret_187EE:
000190C4 4E75                       		rts	
000190C6                            ; End of function Obj74_Duplicate2
000190C6                            
000190C6                            ; ===========================================================================
000190C6                            
000190C6                            Obj74_Duplicate:			; XREF: Obj74_Index2
000190C6 6100 C60A                  		bsr.w	ObjHitFloor
000190CA 4A41                       		tst.w	d1
000190CC 6A00                       		bpl.s	loc_18826
000190CE 3028 0008                  		move.w	8(a0),d0
000190D2 0C40 1940                  		cmpi.w	#$1940,d0
000190D6 6E00                       		bgt.s	loc_1882C
000190D8 3228 0030                  		move.w	$30(a0),d1
000190DC B240                       		cmp.w	d0,d1
000190DE 6700                       		beq.s	loc_1881E
000190E0 0240 0010                  		andi.w	#$10,d0
000190E4 0241 0010                  		andi.w	#$10,d1
000190E8 B240                       		cmp.w	d0,d1
000190EA 6700                       		beq.s	loc_1881E
000190EC 61B8                       		bsr.s	Obj74_Duplicate2
000190EE 3168 0008 0032             		move.w	8(a0),$32(a0)
000190F4                            
000190F4                            loc_1881E:
000190F4 3168 0008 0030             		move.w	8(a0),$30(a0)
000190FA 4E75                       		rts	
000190FC                            ; ===========================================================================
000190FC                            
000190FC                            loc_18826:
000190FC 5428 0025                  		addq.b	#2,$25(a0)
00019100 4E75                       		rts	
00019102                            ; ===========================================================================
00019102                            
00019102                            loc_1882C:
00019102 5428 0024                  		addq.b	#2,$24(a0)
00019106 4E75                       		rts	
00019108                            ; ===========================================================================
00019108                            
00019108                            Obj74_FallEdge:				; XREF: Obj74_Index2
00019108 08A8 0001 0022             		bclr	#1,$22(a0)
0001910E 0668 0024 0012             		addi.w	#$24,$12(a0)	; make flame fall
00019114 3028 0008                  		move.w	8(a0),d0
00019118 9068 0032                  		sub.w	$32(a0),d0
0001911C 6A00                       		bpl.s	loc_1884A
0001911E 4440                       		neg.w	d0
00019120                            
00019120                            loc_1884A:
00019120 0C40 0012                  		cmpi.w	#$12,d0
00019124 6600                       		bne.s	loc_18856
00019126 08A8 0007 0002             		bclr	#7,2(a0)
0001912C                            
0001912C                            loc_18856:
0001912C 6100 C5A4                  		bsr.w	ObjHitFloor
00019130 4A41                       		tst.w	d1
00019132 6A00                       		bpl.s	locret_1887E
00019134 5328 0029                  		subq.b	#1,$29(a0)
00019138 6700                       		beq.s	Obj74_Delete2
0001913A 4268 0012                  		clr.w	$12(a0)
0001913E 3168 0032 0008             		move.w	$32(a0),8(a0)
00019144 3168 0038 000C             		move.w	$38(a0),$C(a0)
0001914A 08E8 0007 0002             		bset	#7,2(a0)
00019150 5528 0025                  		subq.b	#2,$25(a0)
00019154                            
00019154                            locret_1887E:
00019154 4E75                       		rts	
00019156                            ; ===========================================================================
00019156                            
00019156                            Obj74_Delete2:
00019156 4EF9 0000 DE04             		jmp	DeleteObject
0001915C                            ; ===========================================================================
0001915C                            
0001915C                            loc_18886:				; XREF: Obj74_Index
0001915C 08E8 0007 0002             		bset	#7,2(a0)
00019162 5328 0029                  		subq.b	#1,$29(a0)
00019166 6600                       		bne.s	Obj74_Animate
00019168 117C 0001 001C             		move.b	#1,$1C(a0)
0001916E 5968 000C                  		subq.w	#4,$C(a0)
00019172 4228 0020                  		clr.b	$20(a0)
00019176                            
00019176                            Obj74_Animate:
00019176 43F9 0000 EC82             		lea	(Ani_obj14).l,a1
0001917C 4EF9 0000 AE88             		jmp	AnimateSprite
00019182                            ; ===========================================================================
00019182                            
00019182                            Obj74_Delete3:				; XREF: Obj74_Index
00019182 4EF9 0000 DE04             		jmp	DeleteObject
00019188                            ; ===========================================================================
00019188                            
00019188                            Obj7A_Delete:
00019188 4EF9 0000 DE04             		jmp	DeleteObject
0001918E                            ; ===========================================================================
0001918E                            ; ---------------------------------------------------------------------------
0001918E                            ; Object 7A - Eggman (SLZ)
0001918E                            ; ---------------------------------------------------------------------------
0001918E                            
0001918E                            Obj7A:					; XREF: Obj_Index
0001918E 7000                       		moveq	#0,d0
00019190 1028 0024                  		move.b	$24(a0),d0
00019194 323B 0000                  		move.w	Obj7A_Index(pc,d0.w),d1
00019198 4EFB 1000                  		jmp	Obj7A_Index(pc,d1.w)
0001919C                            ; ===========================================================================
0001919C 0000                       Obj7A_Index:	dc.w Obj7A_Main-Obj7A_Index
0001919E 0000                       		dc.w Obj7A_ShipMain-Obj7A_Index
000191A0 0000                       		dc.w Obj7A_FaceMain-Obj7A_Index
000191A2 0000                       		dc.w Obj7A_FlameMain-Obj7A_Index
000191A4 0000                       		dc.w Obj7A_TubeMain-Obj7A_Index
000191A6                            
000191A6 0200 04                    Obj7A_ObjData:	dc.b 2,	0, 4		; routine number, animation, priority
000191A9 0401 04                    		dc.b 4,	1, 4
000191AC 0607 04                    		dc.b 6,	7, 4
000191AF 0800 03                    		dc.b 8,	0, 3
000191B2                            ; ===========================================================================
000191B2                            
000191B2                            Obj7A_Main:				; XREF: Obj7A_Index
000191B2 317C 2188 0008             		move.w	#$2188,8(a0)
000191B8 317C 0228 000C             		move.w	#$228,$C(a0)
000191BE 3168 0008 0030             		move.w	8(a0),$30(a0)
000191C4 3168 000C 0038             		move.w	$C(a0),$38(a0)
000191CA 117C 000F 0020             		move.b	#$F,$20(a0)
000191D0 117C 0008 0021             		move.b	#8,$21(a0)	; set number of	hits to	8
000191D6 45FA FFCE                  		lea	Obj7A_ObjData(pc),a2
000191DA 2248                       		movea.l	a0,a1
000191DC 7203                       		moveq	#3,d1
000191DE 6000                       		bra.s	Obj7A_LoadBoss
000191E0                            ; ===========================================================================
000191E0                            
000191E0                            Obj7A_Loop:
000191E0 4EB9 0000 E264             		jsr	SingleObjLoad2
000191E6 6600                       		bne.s	loc_1895C
000191E8 12BC 007A                  		move.b	#$7A,0(a1)
000191EC 3368 0008 0008             		move.w	8(a0),8(a1)
000191F2 3368 000C 000C             		move.w	$C(a0),$C(a1)
000191F8                            
000191F8                            Obj7A_LoadBoss:				; XREF: Obj7A_Main
000191F8 08A8 0000 0022             		bclr	#0,$22(a0)
000191FE 4229 0025                  		clr.b	$25(a1)
00019202 135A 0024                  		move.b	(a2)+,$24(a1)
00019206 135A 001C                  		move.b	(a2)+,$1C(a1)
0001920A 135A 0018                  		move.b	(a2)+,$18(a1)
0001920E 237C 0001 8648 0004        		move.l	#Map_Eggman,4(a1)
00019216 337C 0400 0002             		move.w	#$400,2(a1)
0001921C 137C 0004 0001             		move.b	#4,1(a1)
00019222 137C 0020 0019             		move.b	#$20,$19(a1)
00019228 2348 0034                  		move.l	a0,$34(a1)
0001922C 51C9 FFB2                  		dbf	d1,Obj7A_Loop	; repeat sequence 3 more times
00019230                            
00019230                            loc_1895C:
00019230 43F8 D040                  		lea	($FFFFD040).w,a1
00019234 45E8 002A                  		lea	$2A(a0),a2
00019238 705E                       		moveq	#$5E,d0
0001923A 723E                       		moveq	#$3E,d1
0001923C                            
0001923C                            loc_18968:
0001923C B011                       		cmp.b	(a1),d0
0001923E 6600                       		bne.s	loc_18974
00019240 4A29 0028                  		tst.b	$28(a1)
00019244 6700                       		beq.s	loc_18974
00019246 34C9                       		move.w	a1,(a2)+
00019248                            
00019248                            loc_18974:
00019248 D2FC 0040                  		adda.w	#$40,a1
0001924C 51C9 FFEE                  		dbf	d1,loc_18968
00019250                            
00019250                            Obj7A_ShipMain:				; XREF: Obj7A_Index
00019250 7000                       		moveq	#0,d0
00019252 1028 0025                  		move.b	$25(a0),d0
00019256 303B 0000                  		move.w	Obj7A_ShipIndex(pc,d0.w),d0
0001925A 4EBB 0000                  		jsr	Obj7A_ShipIndex(pc,d0.w)
0001925E 43F9 0001 85E4             		lea	(Ani_Eggman).l,a1
00019264 4EB9 0000 AE88             		jsr	AnimateSprite
0001926A 7003                       		moveq	#3,d0
0001926C C028 0022                  		and.b	$22(a0),d0
00019270 0228 00FC 0001             		andi.b	#$FC,1(a0)
00019276 8128 0001                  		or.b	d0,1(a0)
0001927A 4EF9 0000 DDC8             		jmp	DisplaySprite
00019280                            ; ===========================================================================
00019280 0000                       Obj7A_ShipIndex:dc.w loc_189B8-Obj7A_ShipIndex
00019282 0000                       		dc.w loc_18A5E-Obj7A_ShipIndex
00019284 0000                       		dc.w Obj7A_MakeBall-Obj7A_ShipIndex
00019286 0000                       		dc.w loc_18B48-Obj7A_ShipIndex
00019288 0000                       		dc.w loc_18B80-Obj7A_ShipIndex
0001928A 0000                       		dc.w loc_18BC6-Obj7A_ShipIndex
0001928C                            ; ===========================================================================
0001928C                            
0001928C                            loc_189B8:				; XREF: Obj7A_ShipIndex
0001928C 317C FF00 0010             		move.w	#-$100,$10(a0)
00019292 0C68 2120 0030             		cmpi.w	#$2120,$30(a0)
00019298 6400                       		bcc.s	loc_189CA
0001929A 5428 0025                  		addq.b	#2,$25(a0)
0001929E                            
0001929E                            loc_189CA:
0001929E 6100 EF02                  		bsr.w	BossMove
000192A2 1028 003F                  		move.b	$3F(a0),d0
000192A6 5428 003F                  		addq.b	#2,$3F(a0)
000192AA 4EB9 0000 2CAC             		jsr	(CalcSine).l
000192B0 EC40                       		asr.w	#6,d0
000192B2 D068 0038                  		add.w	$38(a0),d0
000192B6 3140 000C                  		move.w	d0,$C(a0)
000192BA 3168 0030 0008             		move.w	$30(a0),8(a0)
000192C0 6000                       		bra.s	loc_189FE
000192C2                            ; ===========================================================================
000192C2                            
000192C2                            loc_189EE:
000192C2 6100 EEDE                  		bsr.w	BossMove
000192C6 3168 0038 000C             		move.w	$38(a0),$C(a0)
000192CC 3168 0030 0008             		move.w	$30(a0),8(a0)
000192D2                            
000192D2                            loc_189FE:
000192D2 0C28 0006 0025             		cmpi.b	#6,$25(a0)
000192D8 6400                       		bcc.s	locret_18A44
000192DA 4A28 0022                  		tst.b	$22(a0)
000192DE 6B00                       		bmi.s	loc_18A46
000192E0 4A28 0020                  		tst.b	$20(a0)
000192E4 6600                       		bne.s	locret_18A44
000192E6 4A28 003E                  		tst.b	$3E(a0)
000192EA 6600                       		bne.s	loc_18A28
000192EC 117C 0020 003E             		move.b	#$20,$3E(a0)
000192F2 303C 00AC                  		move.w	#$AC,d0
000192F6 4EB9 0000 15C0             		jsr	(PlaySound_Special).l ;	play boss damage sound
000192FC                            
000192FC                            loc_18A28:
000192FC 43F8 FB22                  		lea	($FFFFFB22).w,a1
00019300 7000                       		moveq	#0,d0
00019302 4A51                       		tst.w	(a1)
00019304 6600                       		bne.s	loc_18A36
00019306 303C 0EEE                  		move.w	#$EEE,d0
0001930A                            
0001930A                            loc_18A36:
0001930A 3280                       		move.w	d0,(a1)
0001930C 5328 003E                  		subq.b	#1,$3E(a0)
00019310 6600                       		bne.s	locret_18A44
00019312 117C 000F 0020             		move.b	#$F,$20(a0)
00019318                            
00019318                            locret_18A44:
00019318 4E75                       		rts	
0001931A                            ; ===========================================================================
0001931A                            
0001931A                            loc_18A46:
0001931A 7064                       		moveq	#100,d0
0001931C 6100 0000                  		bsr.w	AddPoints
00019320 117C 0006 0025             		move.b	#6,$25(a0)
00019326 117C 0078 003C             		move.b	#$78,$3C(a0)
0001932C 4268 0010                  		clr.w	$10(a0)
00019330 4E75                       		rts	
00019332                            ; ===========================================================================
00019332                            
00019332                            loc_18A5E:				; XREF: Obj7A_ShipIndex
00019332 3028 0030                  		move.w	$30(a0),d0
00019336 317C 0200 0010             		move.w	#$200,$10(a0)
0001933C 0828 0000 0022             		btst	#0,$22(a0)
00019342 6600                       		bne.s	loc_18A7C
00019344 4468 0010                  		neg.w	$10(a0)
00019348 0C40 2008                  		cmpi.w	#$2008,d0
0001934C 6E00                       		bgt.s	loc_18A88
0001934E 6000                       		bra.s	loc_18A82
00019350                            ; ===========================================================================
00019350                            
00019350                            loc_18A7C:
00019350 0C40 2138                  		cmpi.w	#$2138,d0
00019354 6D00                       		blt.s	loc_18A88
00019356                            
00019356                            loc_18A82:
00019356 0868 0000 0022             		bchg	#0,$22(a0)
0001935C                            
0001935C                            loc_18A88:
0001935C 3028 0008                  		move.w	8(a0),d0
00019360 72FF                       		moveq	#-1,d1
00019362 7402                       		moveq	#2,d2
00019364 45E8 002A                  		lea	$2A(a0),a2
00019368 7828                       		moveq	#$28,d4
0001936A 4A68 0010                  		tst.w	$10(a0)
0001936E 6A00                       		bpl.s	loc_18A9E
00019370 4444                       		neg.w	d4
00019372                            
00019372                            loc_18A9E:
00019372 321A                       		move.w	(a2)+,d1
00019374 2641                       		movea.l	d1,a3
00019376 082B 0003 0022             		btst	#3,$22(a3)
0001937C 6600                       		bne.s	loc_18AB4
0001937E 362B 0008                  		move.w	8(a3),d3
00019382 D644                       		add.w	d4,d3
00019384 9640                       		sub.w	d0,d3
00019386 6700                       		beq.s	loc_18AC0
00019388                            
00019388                            loc_18AB4:
00019388 51CA FFE8                  		dbf	d2,loc_18A9E
0001938C                            
0001938C 1142 0028                  		move.b	d2,$28(a0)
00019390 6000 FF0C                  		bra.w	loc_189CA
00019394                            ; ===========================================================================
00019394                            
00019394                            loc_18AC0:
00019394 1142 0028                  		move.b	d2,$28(a0)
00019398 5428 0025                  		addq.b	#2,$25(a0)
0001939C 117C 0028 003C             		move.b	#$28,$3C(a0)
000193A2 6000 FEFA                  		bra.w	loc_189CA
000193A6                            ; ===========================================================================
000193A6                            
000193A6                            Obj7A_MakeBall:				; XREF: Obj7A_ShipIndex
000193A6 0C28 0028 003C             		cmpi.b	#$28,$3C(a0)
000193AC 6600                       		bne.s	loc_18B36
000193AE 70FF                       		moveq	#-1,d0
000193B0 1028 0028                  		move.b	$28(a0),d0
000193B4 4880                       		ext.w	d0
000193B6 6B00                       		bmi.s	loc_18B40
000193B8 5540                       		subq.w	#2,d0
000193BA 4440                       		neg.w	d0
000193BC D040                       		add.w	d0,d0
000193BE 43E8 002A                  		lea	$2A(a0),a1
000193C2 3031 0000                  		move.w	(a1,d0.w),d0
000193C6 2440                       		movea.l	d0,a2
000193C8 43F8 D040                  		lea	($FFFFD040).w,a1
000193CC 723E                       		moveq	#$3E,d1
000193CE                            
000193CE                            loc_18AFA:
000193CE B0A9 003C                  		cmp.l	$3C(a1),d0
000193D2 6700                       		beq.s	loc_18B40
000193D4 D2FC 0040                  		adda.w	#$40,a1
000193D8 51C9 FFF4                  		dbf	d1,loc_18AFA
000193DC                            
000193DC 2F08                       		move.l	a0,-(sp)
000193DE 41D2                       		lea	(a2),a0
000193E0 4EB9 0000 E264             		jsr	SingleObjLoad2
000193E6 205F                       		movea.l	(sp)+,a0
000193E8 6600                       		bne.s	loc_18B40
000193EA 12BC 007B                  		move.b	#$7B,(a1)	; load spiked ball object
000193EE 3368 0008 0008             		move.w	8(a0),8(a1)
000193F4 3368 000C 000C             		move.w	$C(a0),$C(a1)
000193FA 0669 0020 000C             		addi.w	#$20,$C(a1)
00019400 136A 0022 0022             		move.b	$22(a2),$22(a1)
00019406 234A 003C                  		move.l	a2,$3C(a1)
0001940A                            
0001940A                            loc_18B36:
0001940A 5328 003C                  		subq.b	#1,$3C(a0)
0001940E 6700                       		beq.s	loc_18B40
00019410 6000 FEC0                  		bra.w	loc_189FE
00019414                            ; ===========================================================================
00019414                            
00019414                            loc_18B40:
00019414 5528 0025                  		subq.b	#2,$25(a0)
00019418 6000 FE84                  		bra.w	loc_189CA
0001941C                            ; ===========================================================================
0001941C                            
0001941C                            loc_18B48:				; XREF: Obj7A_ShipIndex
0001941C 5328 003C                  		subq.b	#1,$3C(a0)
00019420 6B00                       		bmi.s	loc_18B52
00019422 6000 ED3C                  		bra.w	BossDefeated
00019426                            ; ===========================================================================
00019426                            
00019426                            loc_18B52:
00019426 5428 0025                  		addq.b	#2,$25(a0)
0001942A 4268 0012                  		clr.w	$12(a0)
0001942E 08E8 0000 0022             		bset	#0,$22(a0)
00019434 08A8 0007 0022             		bclr	#7,$22(a0)
0001943A 4268 0010                  		clr.w	$10(a0)
0001943E 117C 00E8 003C             		move.b	#-$18,$3C(a0)
00019444 4A38 F7A7                  		tst.b	($FFFFF7A7).w
00019448 6600                       		bne.s	loc_18B7C
0001944A 11FC 0001 F7A7             		move.b	#1,($FFFFF7A7).w
00019450                            
00019450                            loc_18B7C:
00019450 6000 FE80                  		bra.w	loc_189FE
00019454                            ; ===========================================================================
00019454                            
00019454                            loc_18B80:				; XREF: Obj7A_ShipIndex
00019454 5228 003C                  		addq.b	#1,$3C(a0)
00019458 6700                       		beq.s	loc_18B90
0001945A 6A00                       		bpl.s	loc_18B96
0001945C 0668 0018 0012             		addi.w	#$18,$12(a0)
00019462 6000                       		bra.s	loc_18BC2
00019464                            ; ===========================================================================
00019464                            
00019464                            loc_18B90:
00019464 4268 0012                  		clr.w	$12(a0)
00019468 6000                       		bra.s	loc_18BC2
0001946A                            ; ===========================================================================
0001946A                            
0001946A                            loc_18B96:
0001946A 0C28 0020 003C             		cmpi.b	#$20,$3C(a0)
00019470 6500                       		bcs.s	loc_18BAE
00019472 6700                       		beq.s	loc_18BB4
00019474 0C28 002A 003C             		cmpi.b	#$2A,$3C(a0)
0001947A 6500                       		bcs.s	loc_18BC2
0001947C 5428 0025                  		addq.b	#2,$25(a0)
00019480 6000                       		bra.s	loc_18BC2
00019482                            ; ===========================================================================
00019482                            
00019482                            loc_18BAE:
00019482 5168 0012                  		subq.w	#8,$12(a0)
00019486 6000                       		bra.s	loc_18BC2
00019488                            ; ===========================================================================
00019488                            
00019488                            loc_18BB4:
00019488 4268 0012                  		clr.w	$12(a0)
0001948C 303C 0084                  		move.w	#$84,d0
00019490 4EB9 0000 15BA             		jsr	(PlaySound).l	; play SLZ music
00019496                            
00019496                            loc_18BC2:
00019496 6000 FE2A                  		bra.w	loc_189EE
0001949A                            ; ===========================================================================
0001949A                            
0001949A                            loc_18BC6:				; XREF: Obj7A_ShipIndex
0001949A 317C 0400 0010             		move.w	#$400,$10(a0)
000194A0 317C FFC0 0012             		move.w	#-$40,$12(a0)
000194A6 0C78 2160 F72A             		cmpi.w	#$2160,($FFFFF72A).w
000194AC 6400                       		bcc.s	loc_18BE0
000194AE 5478 F72A                  		addq.w	#2,($FFFFF72A).w
000194B2 6000                       		bra.s	loc_18BE8
000194B4                            ; ===========================================================================
000194B4                            
000194B4                            loc_18BE0:
000194B4 4A28 0001                  		tst.b	1(a0)
000194B8 6A00 FCCE                  		bpl.w	Obj7A_Delete
000194BC                            
000194BC                            loc_18BE8:
000194BC 6100 ECE4                  		bsr.w	BossMove
000194C0 6000 FDDC                  		bra.w	loc_189CA
000194C4                            ; ===========================================================================
000194C4                            
000194C4                            Obj7A_FaceMain:				; XREF: Obj7A_Index
000194C4 7000                       		moveq	#0,d0
000194C6 7201                       		moveq	#1,d1
000194C8 2268 0034                  		movea.l	$34(a0),a1
000194CC 1029 0025                  		move.b	$25(a1),d0
000194D0 0C00 0006                  		cmpi.b	#6,d0
000194D4 6B00                       		bmi.s	loc_18C06
000194D6 720A                       		moveq	#$A,d1
000194D8 6000                       		bra.s	loc_18C1A
000194DA                            ; ===========================================================================
000194DA                            
000194DA                            loc_18C06:
000194DA 4A29 0020                  		tst.b	$20(a1)
000194DE 6600                       		bne.s	loc_18C10
000194E0 7205                       		moveq	#5,d1
000194E2 6000                       		bra.s	loc_18C1A
000194E4                            ; ===========================================================================
000194E4                            
000194E4                            loc_18C10:
000194E4 0C38 0004 D024             		cmpi.b	#4,($FFFFD024).w
000194EA 6500                       		bcs.s	loc_18C1A
000194EC 7204                       		moveq	#4,d1
000194EE                            
000194EE                            loc_18C1A:
000194EE 1141 001C                  		move.b	d1,$1C(a0)
000194F2 0C00 000A                  		cmpi.b	#$A,d0
000194F6 6600                       		bne.s	loc_18C32
000194F8 117C 0006 001C             		move.b	#6,$1C(a0)
000194FE 4A28 0001                  		tst.b	1(a0)
00019502 6A00 FC84                  		bpl.w	Obj7A_Delete
00019506                            
00019506                            loc_18C32:
00019506 6000                       		bra.s	loc_18C6C
00019508                            ; ===========================================================================
00019508                            
00019508                            Obj7A_FlameMain:			; XREF: Obj7A_Index
00019508 117C 0008 001C             		move.b	#8,$1C(a0)
0001950E 2268 0034                  		movea.l	$34(a0),a1
00019512 0C29 000A 0025             		cmpi.b	#$A,$25(a1)
00019518 6600                       		bne.s	loc_18C56
0001951A 4A28 0001                  		tst.b	1(a0)
0001951E 6A00 FC68                  		bpl.w	Obj7A_Delete
00019522 117C 000B 001C             		move.b	#$B,$1C(a0)
00019528 6000                       		bra.s	loc_18C6C
0001952A                            ; ===========================================================================
0001952A                            
0001952A                            loc_18C56:
0001952A 0C29 0008 0025             		cmpi.b	#8,$25(a1)
00019530 6E00                       		bgt.s	loc_18C6C
00019532 0C29 0004 0025             		cmpi.b	#4,$25(a1)
00019538 6D00                       		blt.s	loc_18C6C
0001953A 117C 0007 001C             		move.b	#7,$1C(a0)
00019540                            
00019540                            loc_18C6C:
00019540 43F9 0001 85E4             		lea	(Ani_Eggman).l,a1
00019546 4EB9 0000 AE88             		jsr	AnimateSprite
0001954C                            
0001954C                            loc_18C78:
0001954C 2268 0034                  		movea.l	$34(a0),a1
00019550 3169 0008 0008             		move.w	8(a1),8(a0)
00019556 3169 000C 000C             		move.w	$C(a1),$C(a0)
0001955C 1169 0022 0022             		move.b	$22(a1),$22(a0)
00019562 7003                       		moveq	#3,d0
00019564 C028 0022                  		and.b	$22(a0),d0
00019568 0228 00FC 0001             		andi.b	#-4,1(a0)
0001956E 8128 0001                  		or.b	d0,1(a0)
00019572 4EF9 0000 DDC8             		jmp	DisplaySprite
00019578                            ; ===========================================================================
00019578                            
00019578                            Obj7A_TubeMain:				; XREF: Obj7A_Index
00019578 2268 0034                  		movea.l	$34(a0),a1
0001957C 0C29 000A 0025             		cmpi.b	#$A,$25(a1)
00019582 6600                       		bne.s	loc_18CB8
00019584 4A28 0001                  		tst.b	1(a0)
00019588 6A00 FBFE                  		bpl.w	Obj7A_Delete
0001958C                            
0001958C                            loc_18CB8:
0001958C 217C 0001 8710 0004        		move.l	#Map_BossItems,4(a0)
00019594 317C 246C 0002             		move.w	#$246C,2(a0)
0001959A 117C 0003 001A             		move.b	#3,$1A(a0)
000195A0 60AA                       		bra.s	loc_18C78
000195A2                            ; ===========================================================================
000195A2                            ; ---------------------------------------------------------------------------
000195A2                            ; Object 7B - exploding	spikeys	that Eggman drops (SLZ)
000195A2                            ; ---------------------------------------------------------------------------
000195A2                            
000195A2                            Obj7B:					; XREF: Obj_Index
000195A2 7000                       		moveq	#0,d0
000195A4 1028 0024                  		move.b	$24(a0),d0
000195A8 303B 0000                  		move.w	Obj7B_Index(pc,d0.w),d0
000195AC 4EBB 0000                  		jsr	Obj7B_Index(pc,d0.w)
000195B0 3028 0030                  		move.w	$30(a0),d0
000195B4 0240 FF80                  		andi.w	#$FF80,d0
000195B8 3238 F700                  		move.w	($FFFFF700).w,d1
000195BC 0441 0080                  		subi.w	#$80,d1
000195C0 0241 FF80                  		andi.w	#$FF80,d1
000195C4 9041                       		sub.w	d1,d0
000195C6 6B00 FBC0                  		bmi.w	Obj7A_Delete
000195CA 0C40 0280                  		cmpi.w	#$280,d0
000195CE 6200 FBB8                  		bhi.w	Obj7A_Delete
000195D2 4EF9 0000 DDC8             		jmp	DisplaySprite
000195D8                            ; ===========================================================================
000195D8 0000                       Obj7B_Index:	dc.w Obj7B_Main-Obj7B_Index
000195DA 0000                       		dc.w Obj7B_Fall-Obj7B_Index
000195DC 0000                       		dc.w loc_18DC6-Obj7B_Index
000195DE 0000                       		dc.w loc_18EAA-Obj7B_Index
000195E0 0000                       		dc.w Obj7B_Explode-Obj7B_Index
000195E2 0000                       		dc.w Obj7B_MoveFrag-Obj7B_Index
000195E4                            ; ===========================================================================
000195E4                            
000195E4                            Obj7B_Main:				; XREF: Obj7B_Index
000195E4 217C 0001 218E 0004        		move.l	#Map_obj5Ea,4(a0)
000195EC 317C 0518 0002             		move.w	#$518,2(a0)
000195F2 117C 0001 001A             		move.b	#1,$1A(a0)
000195F8 0028 0004 0001             		ori.b	#4,1(a0)
000195FE 117C 0004 0018             		move.b	#4,$18(a0)
00019604 117C 008B 0020             		move.b	#$8B,$20(a0)
0001960A 117C 000C 0019             		move.b	#$C,$19(a0)
00019610 2268 003C                  		movea.l	$3C(a0),a1
00019614 3169 0008 0030             		move.w	8(a1),$30(a0)
0001961A 3169 000C 0034             		move.w	$C(a1),$34(a0)
00019620 08E8 0000 0022             		bset	#0,$22(a0)
00019626 3028 0008                  		move.w	8(a0),d0
0001962A B069 0008                  		cmp.w	8(a1),d0
0001962E 6E00                       		bgt.s	loc_18D68
00019630 08A8 0000 0022             		bclr	#0,$22(a0)
00019636 117C 0002 003A             		move.b	#2,$3A(a0)
0001963C                            
0001963C                            loc_18D68:
0001963C 5428 0024                  		addq.b	#2,$24(a0)
00019640                            
00019640                            Obj7B_Fall:				; XREF: Obj7B_Index
00019640 4EB9 0000 DD76             		jsr	ObjectFall
00019646 2268 003C                  		movea.l	$3C(a0),a1
0001964A 45F9 0000 0000             		lea	(word_19018).l,a2
00019650 7000                       		moveq	#0,d0
00019652 1029 001A                  		move.b	$1A(a1),d0
00019656 3228 0008                  		move.w	8(a0),d1
0001965A 9268 0030                  		sub.w	$30(a0),d1
0001965E 6400                       		bcc.s	loc_18D8E
00019660 5440                       		addq.w	#2,d0
00019662                            
00019662                            loc_18D8E:
00019662 D040                       		add.w	d0,d0
00019664 3228 0034                  		move.w	$34(a0),d1
00019668 D272 0000                  		add.w	(a2,d0.w),d1
0001966C B268 000C                  		cmp.w	$C(a0),d1
00019670 6E00                       		bgt.s	locret_18DC4
00019672 2268 003C                  		movea.l	$3C(a0),a1
00019676 7202                       		moveq	#2,d1
00019678 0828 0000 0022             		btst	#0,$22(a0)
0001967E 6700                       		beq.s	loc_18DAE
00019680 7200                       		moveq	#0,d1
00019682                            
00019682                            loc_18DAE:
00019682 317C 00F0 0028             		move.w	#$F0,$28(a0)
00019688 117C 000A 001F             		move.b	#10,$1F(a0)	; set frame duration to	10 frames
0001968E 1168 001F 001E             		move.b	$1F(a0),$1E(a0)
00019694 6000 0000                  		bra.w	loc_18FA2
00019698                            ; ===========================================================================
00019698                            
00019698                            locret_18DC4:
00019698 4E75                       		rts	
0001969A                            ; ===========================================================================
0001969A                            
0001969A                            loc_18DC6:				; XREF: Obj7B_Index
0001969A 2268 003C                  		movea.l	$3C(a0),a1
0001969E 7000                       		moveq	#0,d0
000196A0 1028 003A                  		move.b	$3A(a0),d0
000196A4 9029 003A                  		sub.b	$3A(a1),d0
000196A8 6700                       		beq.s	loc_18E2A
000196AA 6400                       		bcc.s	loc_18DDA
000196AC 4400                       		neg.b	d0
000196AE                            
000196AE                            loc_18DDA:
000196AE 323C F7E8                  		move.w	#-$818,d1
000196B2 343C FEEC                  		move.w	#-$114,d2
000196B6 0C00 0001                  		cmpi.b	#1,d0
000196BA 6700                       		beq.s	loc_18E00
000196BC 323C F6A0                  		move.w	#-$960,d1
000196C0 343C FF0C                  		move.w	#-$F4,d2
000196C4 0C69 09C0 0038             		cmpi.w	#$9C0,$38(a1)
000196CA 6D00                       		blt.s	loc_18E00
000196CC 323C F5E0                  		move.w	#-$A20,d1
000196D0 343C FF80                  		move.w	#-$80,d2
000196D4                            
000196D4                            loc_18E00:
000196D4 3141 0012                  		move.w	d1,$12(a0)
000196D8 3142 0010                  		move.w	d2,$10(a0)
000196DC 3028 0008                  		move.w	8(a0),d0
000196E0 9068 0030                  		sub.w	$30(a0),d0
000196E4 6400                       		bcc.s	loc_18E16
000196E6 4468 0010                  		neg.w	$10(a0)
000196EA                            
000196EA                            loc_18E16:
000196EA 117C 0001 001A             		move.b	#1,$1A(a0)
000196F0 317C 0020 0028             		move.w	#$20,$28(a0)
000196F6 5428 0024                  		addq.b	#2,$24(a0)
000196FA 6000 0000                  		bra.w	loc_18EAA
000196FE                            ; ===========================================================================
000196FE                            
000196FE                            loc_18E2A:				; XREF: loc_18DC6
000196FE 45F9 0000 0000             		lea	(word_19018).l,a2
00019704 7000                       		moveq	#0,d0
00019706 1029 001A                  		move.b	$1A(a1),d0
0001970A 343C 0028                  		move.w	#$28,d2
0001970E 3228 0008                  		move.w	8(a0),d1
00019712 9268 0030                  		sub.w	$30(a0),d1
00019716 6400                       		bcc.s	loc_18E48
00019718 4442                       		neg.w	d2
0001971A 5440                       		addq.w	#2,d0
0001971C                            
0001971C                            loc_18E48:
0001971C D040                       		add.w	d0,d0
0001971E 3228 0034                  		move.w	$34(a0),d1
00019722 D272 0000                  		add.w	(a2,d0.w),d1
00019726 3141 000C                  		move.w	d1,$C(a0)
0001972A D468 0030                  		add.w	$30(a0),d2
0001972E 3142 0008                  		move.w	d2,8(a0)
00019732 4268 000E                  		clr.w	$E(a0)
00019736 4268 000A                  		clr.w	$A(a0)
0001973A 5368 0028                  		subq.w	#1,$28(a0)
0001973E 6600                       		bne.s	loc_18E7A
00019740 317C 0020 0028             		move.w	#$20,$28(a0)
00019746 117C 0008 0024             		move.b	#8,$24(a0)
0001974C 4E75                       		rts	
0001974E                            ; ===========================================================================
0001974E                            
0001974E                            loc_18E7A:
0001974E 0C68 0078 0028             		cmpi.w	#$78,$28(a0)
00019754 6600                       		bne.s	loc_18E88
00019756 117C 0005 001F             		move.b	#5,$1F(a0)
0001975C                            
0001975C                            loc_18E88:
0001975C 0C68 003C 0028             		cmpi.w	#$3C,$28(a0)
00019762 6600                       		bne.s	loc_18E96
00019764 117C 0002 001F             		move.b	#2,$1F(a0)
0001976A                            
0001976A                            loc_18E96:
0001976A 5328 001E                  		subq.b	#1,$1E(a0)
0001976E 6E00                       		bgt.s	locret_18EA8
00019770 0868 0000 001A             		bchg	#0,$1A(a0)
00019776 1168 001F 001E             		move.b	$1F(a0),$1E(a0)
0001977C                            
0001977C                            locret_18EA8:
0001977C 4E75                       		rts	
0001977E                            ; ===========================================================================
0001977E                            
0001977E                            loc_18EAA:				; XREF: Obj7B_Index
0001977E 43F8 D040                  		lea	($FFFFD040).w,a1
00019782 707A                       		moveq	#$7A,d0
00019784 7240                       		moveq	#$40,d1
00019786 743E                       		moveq	#$3E,d2
00019788                            
00019788                            loc_18EB4:
00019788 B011                       		cmp.b	(a1),d0
0001978A 6700                       		beq.s	loc_18EC0
0001978C D2C1                       		adda.w	d1,a1
0001978E 51CA FFF8                  		dbf	d2,loc_18EB4
00019792                            
00019792 6000                       		bra.s	loc_18F38
00019794                            ; ===========================================================================
00019794                            
00019794                            loc_18EC0:
00019794 3029 0008                  		move.w	8(a1),d0
00019798 3229 000C                  		move.w	$C(a1),d1
0001979C 3428 0008                  		move.w	8(a0),d2
000197A0 3628 000C                  		move.w	$C(a0),d3
000197A4 45FA 0000                  		lea	byte_19022(pc),a2
000197A8 47FA 0000                  		lea	byte_19026(pc),a3
000197AC 181A                       		move.b	(a2)+,d4
000197AE 4884                       		ext.w	d4
000197B0 D044                       		add.w	d4,d0
000197B2 181B                       		move.b	(a3)+,d4
000197B4 4884                       		ext.w	d4
000197B6 D444                       		add.w	d4,d2
000197B8 B440                       		cmp.w	d0,d2
000197BA 6500                       		bcs.s	loc_18F38
000197BC 181A                       		move.b	(a2)+,d4
000197BE 4884                       		ext.w	d4
000197C0 D044                       		add.w	d4,d0
000197C2 181B                       		move.b	(a3)+,d4
000197C4 4884                       		ext.w	d4
000197C6 D444                       		add.w	d4,d2
000197C8 B042                       		cmp.w	d2,d0
000197CA 6500                       		bcs.s	loc_18F38
000197CC 181A                       		move.b	(a2)+,d4
000197CE 4884                       		ext.w	d4
000197D0 D244                       		add.w	d4,d1
000197D2 181B                       		move.b	(a3)+,d4
000197D4 4884                       		ext.w	d4
000197D6 D644                       		add.w	d4,d3
000197D8 B641                       		cmp.w	d1,d3
000197DA 6500                       		bcs.s	loc_18F38
000197DC 181A                       		move.b	(a2)+,d4
000197DE 4884                       		ext.w	d4
000197E0 D244                       		add.w	d4,d1
000197E2 181B                       		move.b	(a3)+,d4
000197E4 4884                       		ext.w	d4
000197E6 D644                       		add.w	d4,d3
000197E8 B243                       		cmp.w	d3,d1
000197EA 6500                       		bcs.s	loc_18F38
000197EC 5428 0024                  		addq.b	#2,$24(a0)
000197F0 4268 0028                  		clr.w	$28(a0)
000197F4 4229 0020                  		clr.b	$20(a1)
000197F8 5329 0021                  		subq.b	#1,$21(a1)
000197FC 6600                       		bne.s	loc_18F38
000197FE 08E9 0007 0022             		bset	#7,$22(a1)
00019804 4268 0010                  		clr.w	$10(a0)
00019808 4268 0012                  		clr.w	$12(a0)
0001980C                            
0001980C                            loc_18F38:
0001980C 4A68 0012                  		tst.w	$12(a0)
00019810 6A00                       		bpl.s	loc_18F5C
00019812 4EB9 0000 DD76             		jsr	ObjectFall
00019818 3028 0034                  		move.w	$34(a0),d0
0001981C 0440 002F                  		subi.w	#$2F,d0
00019820 B068 000C                  		cmp.w	$C(a0),d0
00019824 6E00                       		bgt.s	loc_18F58
00019826 4EB9 0000 DD76             		jsr	ObjectFall
0001982C                            
0001982C                            loc_18F58:
0001982C 6000 FF20                  		bra.w	loc_18E7A
00019830                            ; ===========================================================================
00019830                            
00019830                            loc_18F5C:
00019830 4EB9 0000 DD76             		jsr	ObjectFall
00019836 2268 003C                  		movea.l	$3C(a0),a1
0001983A 45F9 0000 0000             		lea	(word_19018).l,a2
00019840 7000                       		moveq	#0,d0
00019842 1029 001A                  		move.b	$1A(a1),d0
00019846 3228 0008                  		move.w	8(a0),d1
0001984A 9268 0030                  		sub.w	$30(a0),d1
0001984E 6400                       		bcc.s	loc_18F7E
00019850 5440                       		addq.w	#2,d0
00019852                            
00019852                            loc_18F7E:
00019852 D040                       		add.w	d0,d0
00019854 3228 0034                  		move.w	$34(a0),d1
00019858 D272 0000                  		add.w	(a2,d0.w),d1
0001985C B268 000C                  		cmp.w	$C(a0),d1
00019860 6ECA                       		bgt.s	loc_18F58
00019862 2268 003C                  		movea.l	$3C(a0),a1
00019866 7202                       		moveq	#2,d1
00019868 4A68 0010                  		tst.w	$10(a0)
0001986C 6B00                       		bmi.s	loc_18F9C
0001986E 7200                       		moveq	#0,d1
00019870                            
00019870                            loc_18F9C:
00019870 317C 0000 0028             		move.w	#0,$28(a0)
00019876                            
00019876                            loc_18FA2:
00019876 1341 003A                  		move.b	d1,$3A(a1)
0001987A 1141 003A                  		move.b	d1,$3A(a0)
0001987E B229 001A                  		cmp.b	$1A(a1),d1
00019882 6700                       		beq.s	loc_19008
00019884 08A9 0003 0022             		bclr	#3,$22(a1)
0001988A 6700                       		beq.s	loc_19008
0001988C 4229 0025                  		clr.b	$25(a1)
00019890 137C 0002 0024             		move.b	#2,$24(a1)
00019896 45F8 D000                  		lea	($FFFFD000).w,a2
0001989A 3568 0012 0012             		move.w	$12(a0),$12(a2)
000198A0 446A 0012                  		neg.w	$12(a2)
000198A4 0C29 0001 001A             		cmpi.b	#1,$1A(a1)
000198AA 6600                       		bne.s	loc_18FDC
000198AC E0EA 0012                  		asr	$12(a2)
000198B0                            
000198B0                            loc_18FDC:
000198B0 08EA 0001 0022             		bset	#1,$22(a2)
000198B6 08AA 0003 0022             		bclr	#3,$22(a2)
000198BC 422A 003C                  		clr.b	$3C(a2)
000198C0 2F08                       		move.l	a0,-(sp)
000198C2 41D2                       		lea	(a2),a0
000198C4 4EBA A34A                  		jsr	Obj01_ChkRoll
000198C8 205F                       		movea.l	(sp)+,a0
000198CA 157C 0002 0024             		move.b	#2,$24(a2)
000198D0 303C 00CC                  		move.w	#$CC,d0
000198D4 4EB9 0000 15C0             		jsr	(PlaySound_Special).l ;	play "spring" sound
000198DA                            
000198DA                            loc_19008:
000198DA 4268 0010                  		clr.w	$10(a0)
000198DE 4268 0012                  		clr.w	$12(a0)
000198E2 5428 0024                  		addq.b	#2,$24(a0)
000198E6 6000 FE66                  		bra.w	loc_18E7A
000198EA                            ; ===========================================================================
000198EA FFF8 FFE4 FFD1 FFE4 FFF8   word_19018:	dc.w $FFF8, $FFE4, $FFD1, $FFE4, $FFF8
000198F4                            		even
000198F4 E830 E830                  byte_19022:	dc.b $E8, $30, $E8, $30
000198F8                            		even
000198F8 08F0 08F0                  byte_19026:	dc.b 8,	$F0, 8,	$F0
000198FC                            		even
000198FC                            ; ===========================================================================
000198FC                            
000198FC                            Obj7B_Explode:				; XREF: Obj7B_Index
000198FC 10BC 003F                  		move.b	#$3F,(a0)
00019900 4228 0024                  		clr.b	$24(a0)
00019904 0C68 0020 0028             		cmpi.w	#$20,$28(a0)
0001990A 6700                       		beq.s	Obj7B_MakeFrag
0001990C 4E75                       		rts	
0001990E                            ; ===========================================================================
0001990E                            
0001990E                            Obj7B_MakeFrag:
0001990E 3168 0034 000C             		move.w	$34(a0),$C(a0)
00019914 7203                       		moveq	#3,d1
00019916 45FA 0000                  		lea	Obj7B_FragSpeed(pc),a2
0001991A                            
0001991A                            Obj7B_Loop:
0001991A 4EB9 0000 E24E             		jsr	SingleObjLoad
00019920 6600                       		bne.s	loc_1909A
00019922 12BC 007B                  		move.b	#$7B,(a1)	; load shrapnel	object
00019926 137C 000A 0024             		move.b	#$A,$24(a1)
0001992C 237C 0000 0000 0004        		move.l	#Map_obj7B,4(a1)
00019934 137C 0003 0018             		move.b	#3,$18(a1)
0001993A 337C 0518 0002             		move.w	#$518,2(a1)
00019940 3368 0008 0008             		move.w	8(a0),8(a1)
00019946 3368 000C 000C             		move.w	$C(a0),$C(a1)
0001994C 335A 0010                  		move.w	(a2)+,$10(a1)
00019950 335A 0012                  		move.w	(a2)+,$12(a1)
00019954 137C 0098 0020             		move.b	#$98,$20(a1)
0001995A 0029 0004 0001             		ori.b	#4,1(a1)
00019960 08E9 0007 0001             		bset	#7,1(a1)
00019966 137C 000C 0019             		move.b	#$C,$19(a1)
0001996C                            
0001996C                            loc_1909A:
0001996C 51C9 FFAC                  		dbf	d1,Obj7B_Loop	; repeat sequence 3 more times
00019970                            
00019970 4E75                       		rts	
00019972                            ; ===========================================================================
00019972 FF00 FCC0                  Obj7B_FragSpeed:dc.w $FF00, $FCC0	; horizontal, vertical
00019976 FF60 FDC0                  		dc.w $FF60, $FDC0
0001997A 0100 FCC0                  		dc.w $100, $FCC0
0001997E 00A0 FDC0                  		dc.w $A0, $FDC0
00019982                            ; ===========================================================================
00019982                            
00019982                            Obj7B_MoveFrag:				; XREF: Obj7B_Index
00019982 4EB9 0000 DDA2             		jsr	SpeedToPos
00019988 3168 0008 0030             		move.w	8(a0),$30(a0)
0001998E 3168 000C 0034             		move.w	$C(a0),$34(a0)
00019994 0668 0018 0012             		addi.w	#$18,$12(a0)
0001999A 7004                       		moveq	#4,d0
0001999C C078 FE0E                  		and.w	($FFFFFE0E).w,d0
000199A0 E448                       		lsr.w	#2,d0
000199A2 1140 001A                  		move.b	d0,$1A(a0)
000199A6 4A28 0001                  		tst.b	1(a0)
000199AA 6A00 F7DC                  		bpl.w	Obj7A_Delete
000199AE 4E75                       		rts	
000199B0                            ; ===========================================================================
000199B0                            ; ---------------------------------------------------------------------------
000199B0                            ; Sprite mappings - exploding spikeys that the SLZ boss	drops
000199B0                            ; ---------------------------------------------------------------------------
000199B0                            Map_obj7B:
000199B0                            	include "_maps\obj7B.asm"
000199B0                            ; ---------------------------------------------------------------------------
000199B0                            ; Sprite mappings - exploding spikeys that the SLZ boss	drops
000199B0                            ; ---------------------------------------------------------------------------
000199B0 0000                       		dc.w byte_190E2-Map_obj7B
000199B2 0000                       		dc.w byte_190E8-Map_obj7B
000199B4 01                         byte_190E2:	dc.b 1
000199B5 FC00 0027 FC               		dc.b $FC, 0, 0,	$27, $FC
000199BA 01                         byte_190E8:	dc.b 1
000199BB FC00 0028 FC               		dc.b $FC, 0, 0,	$28, $FC
000199C0                            		even
000199C0                            		even
000199C0                            
000199C0                            ; ===========================================================================
000199C0                            ; ---------------------------------------------------------------------------
000199C0                            ; Object 75 - Eggman (SYZ)
000199C0                            ; ---------------------------------------------------------------------------
000199C0                            
000199C0                            Obj75:					; XREF: Obj_Index
000199C0 7000                       		moveq	#0,d0
000199C2 1028 0024                  		move.b	$24(a0),d0
000199C6 323B 0000                  		move.w	Obj75_Index(pc,d0.w),d1
000199CA 4EFB 1000                  		jmp	Obj75_Index(pc,d1.w)
000199CE                            ; ===========================================================================
000199CE 0000                       Obj75_Index:	dc.w Obj75_Main-Obj75_Index
000199D0 0000                       		dc.w Obj75_ShipMain-Obj75_Index
000199D2 0000                       		dc.w Obj75_FaceMain-Obj75_Index
000199D4 0000                       		dc.w Obj75_FlameMain-Obj75_Index
000199D6 0000                       		dc.w Obj75_SpikeMain-Obj75_Index
000199D8                            
000199D8 0200 05                    Obj75_ObjData:	dc.b 2,	0, 5		; routine number, animation, priority
000199DB 0401 05                    		dc.b 4,	1, 5
000199DE 0607 05                    		dc.b 6,	7, 5
000199E1 0800 05                    		dc.b 8,	0, 5
000199E4                            ; ===========================================================================
000199E4                            
000199E4                            Obj75_Main:				; XREF: Obj75_Index
000199E4 317C 2DB0 0008             		move.w	#$2DB0,8(a0)
000199EA 317C 04DA 000C             		move.w	#$4DA,$C(a0)
000199F0 3168 0008 0030             		move.w	8(a0),$30(a0)
000199F6 3168 000C 0038             		move.w	$C(a0),$38(a0)
000199FC 117C 000F 0020             		move.b	#$F,$20(a0)
00019A02 117C 0008 0021             		move.b	#8,$21(a0)	; set number of	hits to	8
00019A08 45FA FFCE                  		lea	Obj75_ObjData(pc),a2
00019A0C 2248                       		movea.l	a0,a1
00019A0E 7203                       		moveq	#3,d1
00019A10 6000                       		bra.s	Obj75_LoadBoss
00019A12                            ; ===========================================================================
00019A12                            
00019A12                            Obj75_Loop:
00019A12 4EB9 0000 E264             		jsr	SingleObjLoad2
00019A18 6600                       		bne.s	Obj75_ShipMain
00019A1A 12BC 0075                  		move.b	#$75,(a1)
00019A1E 3368 0008 0008             		move.w	8(a0),8(a1)
00019A24 3368 000C 000C             		move.w	$C(a0),$C(a1)
00019A2A                            
00019A2A                            Obj75_LoadBoss:				; XREF: Obj75_Main
00019A2A 08A8 0000 0022             		bclr	#0,$22(a0)
00019A30 4229 0025                  		clr.b	$25(a1)
00019A34 135A 0024                  		move.b	(a2)+,$24(a1)
00019A38 135A 001C                  		move.b	(a2)+,$1C(a1)
00019A3C 135A 0018                  		move.b	(a2)+,$18(a1)
00019A40 237C 0001 8648 0004        		move.l	#Map_Eggman,4(a1)
00019A48 337C 0400 0002             		move.w	#$400,2(a1)
00019A4E 137C 0004 0001             		move.b	#4,1(a1)
00019A54 137C 0020 0019             		move.b	#$20,$19(a1)
00019A5A 2348 0034                  		move.l	a0,$34(a1)
00019A5E 51C9 FFB2                  		dbf	d1,Obj75_Loop	; repeat sequence 3 more times
00019A62                            
00019A62                            Obj75_ShipMain:				; XREF: Obj75_Index
00019A62 7000                       		moveq	#0,d0
00019A64 1028 0025                  		move.b	$25(a0),d0
00019A68 323B 0000                  		move.w	Obj75_ShipIndex(pc,d0.w),d1
00019A6C 4EBB 1000                  		jsr	Obj75_ShipIndex(pc,d1.w)
00019A70 43F9 0001 85E4             		lea	(Ani_Eggman).l,a1
00019A76 4EB9 0000 AE88             		jsr	AnimateSprite
00019A7C 7003                       		moveq	#3,d0
00019A7E C028 0022                  		and.b	$22(a0),d0
00019A82 0228 00FC 0001             		andi.b	#$FC,1(a0)
00019A88 8128 0001                  		or.b	d0,1(a0)
00019A8C 4EF9 0000 DDC8             		jmp	DisplaySprite
00019A92                            ; ===========================================================================
00019A92 0000 0000                  Obj75_ShipIndex:dc.w loc_191CC-Obj75_ShipIndex,	loc_19270-Obj75_ShipIndex
00019A96 0000 0000                  		dc.w loc_192EC-Obj75_ShipIndex,	loc_19474-Obj75_ShipIndex
00019A9A 0000 0000                  		dc.w loc_194AC-Obj75_ShipIndex,	loc_194F2-Obj75_ShipIndex
00019A9E                            ; ===========================================================================
00019A9E                            
00019A9E                            loc_191CC:				; XREF: Obj75_ShipIndex
00019A9E 317C FF00 0010             		move.w	#-$100,$10(a0)
00019AA4 0C68 2D38 0030             		cmpi.w	#$2D38,$30(a0)
00019AAA 6400                       		bcc.s	loc_191DE
00019AAC 5428 0025                  		addq.b	#2,$25(a0)
00019AB0                            
00019AB0                            loc_191DE:
00019AB0 1028 003F                  		move.b	$3F(a0),d0
00019AB4 5428 003F                  		addq.b	#2,$3F(a0)
00019AB8 4EB9 0000 2CAC             		jsr	(CalcSine).l
00019ABE E440                       		asr.w	#2,d0
00019AC0 3140 0012                  		move.w	d0,$12(a0)
00019AC4                            
00019AC4                            loc_191F2:
00019AC4 6100 E6DC                  		bsr.w	BossMove
00019AC8 3168 0038 000C             		move.w	$38(a0),$C(a0)
00019ACE 3168 0030 0008             		move.w	$30(a0),8(a0)
00019AD4                            
00019AD4                            loc_19202:
00019AD4 3028 0008                  		move.w	8(a0),d0
00019AD8 0440 2C00                  		subi.w	#$2C00,d0
00019ADC EA48                       		lsr.w	#5,d0
00019ADE 1140 0034                  		move.b	d0,$34(a0)
00019AE2 0C28 0006 0025             		cmpi.b	#6,$25(a0)
00019AE8 6400                       		bcc.s	locret_19256
00019AEA 4A28 0022                  		tst.b	$22(a0)
00019AEE 6B00                       		bmi.s	loc_19258
00019AF0 4A28 0020                  		tst.b	$20(a0)
00019AF4 6600                       		bne.s	locret_19256
00019AF6 4A28 003E                  		tst.b	$3E(a0)
00019AFA 6600                       		bne.s	loc_1923A
00019AFC 117C 0020 003E             		move.b	#$20,$3E(a0)
00019B02 303C 00AC                  		move.w	#$AC,d0
00019B06 4EB9 0000 15C0             		jsr	(PlaySound_Special).l ;	play boss damage sound
00019B0C                            
00019B0C                            loc_1923A:
00019B0C 43F8 FB22                  		lea	($FFFFFB22).w,a1
00019B10 7000                       		moveq	#0,d0
00019B12 4A51                       		tst.w	(a1)
00019B14 6600                       		bne.s	loc_19248
00019B16 303C 0EEE                  		move.w	#$EEE,d0
00019B1A                            
00019B1A                            loc_19248:
00019B1A 3280                       		move.w	d0,(a1)
00019B1C 5328 003E                  		subq.b	#1,$3E(a0)
00019B20 6600                       		bne.s	locret_19256
00019B22 117C 000F 0020             		move.b	#$F,$20(a0)
00019B28                            
00019B28                            locret_19256:
00019B28 4E75                       		rts	
00019B2A                            ; ===========================================================================
00019B2A                            
00019B2A                            loc_19258:				; XREF: loc_19202
00019B2A 7064                       		moveq	#100,d0
00019B2C 6100 0000                  		bsr.w	AddPoints
00019B30 117C 0006 0025             		move.b	#6,$25(a0)
00019B36 317C 00B4 003C             		move.w	#$B4,$3C(a0)
00019B3C 4268 0010                  		clr.w	$10(a0)
00019B40 4E75                       		rts	
00019B42                            ; ===========================================================================
00019B42                            
00019B42                            loc_19270:				; XREF: Obj75_ShipIndex
00019B42 3028 0030                  		move.w	$30(a0),d0
00019B46 317C 0140 0010             		move.w	#$140,$10(a0)
00019B4C 0828 0000 0022             		btst	#0,$22(a0)
00019B52 6600                       		bne.s	loc_1928E
00019B54 4468 0010                  		neg.w	$10(a0)
00019B58 0C40 2C08                  		cmpi.w	#$2C08,d0
00019B5C 6E00                       		bgt.s	loc_1929E
00019B5E 6000                       		bra.s	loc_19294
00019B60                            ; ===========================================================================
00019B60                            
00019B60                            loc_1928E:
00019B60 0C40 2D38                  		cmpi.w	#$2D38,d0
00019B64 6D00                       		blt.s	loc_1929E
00019B66                            
00019B66                            loc_19294:
00019B66 0868 0000 0022             		bchg	#0,$22(a0)
00019B6C 4228 003D                  		clr.b	$3D(a0)
00019B70                            
00019B70                            loc_1929E:
00019B70 0440 2C10                  		subi.w	#$2C10,d0
00019B74 0240 001F                  		andi.w	#$1F,d0
00019B78 0440 001F                  		subi.w	#$1F,d0
00019B7C 6A00                       		bpl.s	loc_192AE
00019B7E 4440                       		neg.w	d0
00019B80                            
00019B80                            loc_192AE:
00019B80 5340                       		subq.w	#1,d0
00019B82 6E00                       		bgt.s	loc_192E8
00019B84 4A28 003D                  		tst.b	$3D(a0)
00019B88 6600                       		bne.s	loc_192E8
00019B8A 3238 D008                  		move.w	($FFFFD008).w,d1
00019B8E 0441 2C00                  		subi.w	#$2C00,d1
00019B92 EA41                       		asr.w	#5,d1
00019B94 B228 0034                  		cmp.b	$34(a0),d1
00019B98 6600                       		bne.s	loc_192E8
00019B9A 7000                       		moveq	#0,d0
00019B9C 1028 0034                  		move.b	$34(a0),d0
00019BA0 EB40                       		asl.w	#5,d0
00019BA2 0640 2C10                  		addi.w	#$2C10,d0
00019BA6 3140 0030                  		move.w	d0,$30(a0)
00019BAA 6100 0000                  		bsr.w	Obj75_FindBlocks
00019BAE 5428 0025                  		addq.b	#2,$25(a0)
00019BB2 4268 0028                  		clr.w	$28(a0)
00019BB6 4268 0010                  		clr.w	$10(a0)
00019BBA                            
00019BBA                            loc_192E8:
00019BBA 6000 FEF4                  		bra.w	loc_191DE
00019BBE                            ; ===========================================================================
00019BBE                            
00019BBE                            loc_192EC:				; XREF: Obj75_ShipIndex
00019BBE 7000                       		moveq	#0,d0
00019BC0 1028 0028                  		move.b	$28(a0),d0
00019BC4 303B 0000                  		move.w	off_192FA(pc,d0.w),d0
00019BC8 4EFB 0000                  		jmp	off_192FA(pc,d0.w)
00019BCC                            ; ===========================================================================
00019BCC 0000                       off_192FA:	dc.w loc_19302-off_192FA
00019BCE 0000                       		dc.w loc_19348-off_192FA
00019BD0 0000                       		dc.w loc_1938E-off_192FA
00019BD2 0000                       		dc.w loc_193D0-off_192FA
00019BD4                            ; ===========================================================================
00019BD4                            
00019BD4                            loc_19302:				; XREF: off_192FA
00019BD4 317C 0180 0012             		move.w	#$180,$12(a0)
00019BDA 3028 0038                  		move.w	$38(a0),d0
00019BDE 0C40 0556                  		cmpi.w	#$556,d0
00019BE2 6500                       		bcs.s	loc_19344
00019BE4 317C 0556 0038             		move.w	#$556,$38(a0)
00019BEA 4268 003C                  		clr.w	$3C(a0)
00019BEE 70FF                       		moveq	#-1,d0
00019BF0 3028 0036                  		move.w	$36(a0),d0
00019BF4 6700                       		beq.s	loc_1933C
00019BF6 2240                       		movea.l	d0,a1
00019BF8 137C 00FF 0029             		move.b	#-1,$29(a1)
00019BFE 117C 00FF 0029             		move.b	#-1,$29(a0)
00019C04 2348 0034                  		move.l	a0,$34(a1)
00019C08 317C 0032 003C             		move.w	#$32,$3C(a0)
00019C0E                            
00019C0E                            loc_1933C:
00019C0E 4268 0012                  		clr.w	$12(a0)
00019C12 5428 0028                  		addq.b	#2,$28(a0)
00019C16                            
00019C16                            loc_19344:
00019C16 6000 FEAC                  		bra.w	loc_191F2
00019C1A                            ; ===========================================================================
00019C1A                            
00019C1A                            loc_19348:				; XREF: off_192FA
00019C1A 5368 003C                  		subq.w	#1,$3C(a0)
00019C1E 6A00                       		bpl.s	loc_19366
00019C20 5428 0028                  		addq.b	#2,$28(a0)
00019C24 317C F800 0012             		move.w	#-$800,$12(a0)
00019C2A 4A68 0036                  		tst.w	$36(a0)
00019C2E 6600                       		bne.s	loc_19362
00019C30 E0E8 0012                  		asr	$12(a0)
00019C34                            
00019C34                            loc_19362:
00019C34 7000                       		moveq	#0,d0
00019C36 6000                       		bra.s	loc_1937C
00019C38                            ; ===========================================================================
00019C38                            
00019C38                            loc_19366:
00019C38 7000                       		moveq	#0,d0
00019C3A 0C68 001E 003C             		cmpi.w	#$1E,$3C(a0)
00019C40 6E00                       		bgt.s	loc_1937C
00019C42 7002                       		moveq	#2,d0
00019C44 0828 0001 003D             		btst	#1,$3D(a0)
00019C4A 6700                       		beq.s	loc_1937C
00019C4C 4440                       		neg.w	d0
00019C4E                            
00019C4E                            loc_1937C:
00019C4E D068 0038                  		add.w	$38(a0),d0
00019C52 3140 000C                  		move.w	d0,$C(a0)
00019C56 3168 0030 0008             		move.w	$30(a0),8(a0)
00019C5C 6000 FE76                  		bra.w	loc_19202
00019C60                            ; ===========================================================================
00019C60                            
00019C60                            loc_1938E:				; XREF: off_192FA
00019C60 303C 04DA                  		move.w	#$4DA,d0
00019C64 4A68 0036                  		tst.w	$36(a0)
00019C68 6700                       		beq.s	loc_1939C
00019C6A 0440 0018                  		subi.w	#$18,d0
00019C6E                            
00019C6E                            loc_1939C:
00019C6E B068 0038                  		cmp.w	$38(a0),d0
00019C72 6D00                       		blt.s	loc_193BE
00019C74 317C 0008 003C             		move.w	#8,$3C(a0)
00019C7A 4A68 0036                  		tst.w	$36(a0)
00019C7E 6700                       		beq.s	loc_193B4
00019C80 317C 002D 003C             		move.w	#$2D,$3C(a0)
00019C86                            
00019C86                            loc_193B4:
00019C86 5428 0028                  		addq.b	#2,$28(a0)
00019C8A 4268 0012                  		clr.w	$12(a0)
00019C8E 6000                       		bra.s	loc_193CC
00019C90                            ; ===========================================================================
00019C90                            
00019C90                            loc_193BE:
00019C90 0C68 FFC0 0012             		cmpi.w	#-$40,$12(a0)
00019C96 6C00                       		bge.s	loc_193CC
00019C98 0668 000C 0012             		addi.w	#$C,$12(a0)
00019C9E                            
00019C9E                            loc_193CC:
00019C9E 6000 FE24                  		bra.w	loc_191F2
00019CA2                            ; ===========================================================================
00019CA2                            
00019CA2                            loc_193D0:				; XREF: off_192FA
00019CA2 5368 003C                  		subq.w	#1,$3C(a0)
00019CA6 6E00                       		bgt.s	loc_19406
00019CA8 6B00                       		bmi.s	loc_193EE
00019CAA 70FF                       		moveq	#-1,d0
00019CAC 3028 0036                  		move.w	$36(a0),d0
00019CB0 6700                       		beq.s	loc_193E8
00019CB2 2240                       		movea.l	d0,a1
00019CB4 137C 000A 0029             		move.b	#$A,$29(a1)
00019CBA                            
00019CBA                            loc_193E8:
00019CBA 4268 0036                  		clr.w	$36(a0)
00019CBE 6000                       		bra.s	loc_19406
00019CC0                            ; ===========================================================================
00019CC0                            
00019CC0                            loc_193EE:
00019CC0 0C68 FFE2 003C             		cmpi.w	#-$1E,$3C(a0)
00019CC6 6600                       		bne.s	loc_19406
00019CC8 4228 0029                  		clr.b	$29(a0)
00019CCC 5528 0025                  		subq.b	#2,$25(a0)
00019CD0 117C 00FF 003D             		move.b	#-1,$3D(a0)
00019CD6 6000                       		bra.s	loc_19446
00019CD8                            ; ===========================================================================
00019CD8                            
00019CD8                            loc_19406:
00019CD8 7001                       		moveq	#1,d0
00019CDA 4A68 0036                  		tst.w	$36(a0)
00019CDE 6700                       		beq.s	loc_19410
00019CE0 7002                       		moveq	#2,d0
00019CE2                            
00019CE2                            loc_19410:
00019CE2 0C68 04DA 0038             		cmpi.w	#$4DA,$38(a0)
00019CE8 6700                       		beq.s	loc_19424
00019CEA 6D00                       		blt.s	loc_1941C
00019CEC 4440                       		neg.w	d0
00019CEE                            
00019CEE                            loc_1941C:
00019CEE 4A68 0036                  		tst.w	$36(a0)
00019CF2 D168 0038                  		add.w	d0,$38(a0)
00019CF6                            
00019CF6                            loc_19424:
00019CF6 7000                       		moveq	#0,d0
00019CF8 4A68 0036                  		tst.w	$36(a0)
00019CFC 6700                       		beq.s	loc_19438
00019CFE 7002                       		moveq	#2,d0
00019D00 0828 0000 003D             		btst	#0,$3D(a0)
00019D06 6700                       		beq.s	loc_19438
00019D08 4440                       		neg.w	d0
00019D0A                            
00019D0A                            loc_19438:
00019D0A D068 0038                  		add.w	$38(a0),d0
00019D0E 3140 000C                  		move.w	d0,$C(a0)
00019D12 3168 0030 0008             		move.w	$30(a0),8(a0)
00019D18                            
00019D18                            loc_19446:
00019D18 6000 FDBA                  		bra.w	loc_19202
00019D1C                            
00019D1C                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00019D1C                            
00019D1C                            
00019D1C                            Obj75_FindBlocks:			; XREF: loc_192AE
00019D1C 4268 0036                  		clr.w	$36(a0)
00019D20 43F8 D040                  		lea	($FFFFD040).w,a1
00019D24 703E                       		moveq	#$3E,d0
00019D26 7276                       		moveq	#$76,d1
00019D28 1428 0034                  		move.b	$34(a0),d2
00019D2C                            
00019D2C                            Obj75_FindLoop:
00019D2C B211                       		cmp.b	(a1),d1		; is object a SYZ boss block?
00019D2E 6600                       		bne.s	loc_1946A	; if not, branch
00019D30 B429 0028                  		cmp.b	$28(a1),d2
00019D34 6600                       		bne.s	loc_1946A
00019D36 3149 0036                  		move.w	a1,$36(a0)
00019D3A 6000                       		bra.s	locret_19472
00019D3C                            ; ===========================================================================
00019D3C                            
00019D3C                            loc_1946A:
00019D3C 43E9 0040                  		lea	$40(a1),a1	; next object RAM entry
00019D40 51C8 FFEA                  		dbf	d0,Obj75_FindLoop
00019D44                            
00019D44                            locret_19472:
00019D44 4E75                       		rts	
00019D46                            ; End of function Obj75_FindBlocks
00019D46                            
00019D46                            ; ===========================================================================
00019D46                            
00019D46                            loc_19474:				; XREF: Obj75_ShipIndex
00019D46 5368 003C                  		subq.w	#1,$3C(a0)
00019D4A 6B00                       		bmi.s	loc_1947E
00019D4C 6000 E412                  		bra.w	BossDefeated
00019D50                            ; ===========================================================================
00019D50                            
00019D50                            loc_1947E:
00019D50 5428 0025                  		addq.b	#2,$25(a0)
00019D54 4268 0012                  		clr.w	$12(a0)
00019D58 08E8 0000 0022             		bset	#0,$22(a0)
00019D5E 08A8 0007 0022             		bclr	#7,$22(a0)
00019D64 4268 0010                  		clr.w	$10(a0)
00019D68 317C FFFF 003C             		move.w	#-1,$3C(a0)
00019D6E 4A38 F7A7                  		tst.b	($FFFFF7A7).w
00019D72 6600                       		bne.s	loc_194A8
00019D74 11FC 0001 F7A7             		move.b	#1,($FFFFF7A7).w
00019D7A                            
00019D7A                            loc_194A8:
00019D7A 6000 FD58                  		bra.w	loc_19202
00019D7E                            ; ===========================================================================
00019D7E                            
00019D7E                            loc_194AC:				; XREF: Obj75_ShipIndex
00019D7E 5268 003C                  		addq.w	#1,$3C(a0)
00019D82 6700                       		beq.s	loc_194BC
00019D84 6A00                       		bpl.s	loc_194C2
00019D86 0668 0018 0012             		addi.w	#$18,$12(a0)
00019D8C 6000                       		bra.s	loc_194EE
00019D8E                            ; ===========================================================================
00019D8E                            
00019D8E                            loc_194BC:
00019D8E 4268 0012                  		clr.w	$12(a0)
00019D92 6000                       		bra.s	loc_194EE
00019D94                            ; ===========================================================================
00019D94                            
00019D94                            loc_194C2:
00019D94 0C68 0020 003C             		cmpi.w	#$20,$3C(a0)
00019D9A 6500                       		bcs.s	loc_194DA
00019D9C 6700                       		beq.s	loc_194E0
00019D9E 0C68 002A 003C             		cmpi.w	#$2A,$3C(a0)
00019DA4 6500                       		bcs.s	loc_194EE
00019DA6 5428 0025                  		addq.b	#2,$25(a0)
00019DAA 6000                       		bra.s	loc_194EE
00019DAC                            ; ===========================================================================
00019DAC                            
00019DAC                            loc_194DA:
00019DAC 5168 0012                  		subq.w	#8,$12(a0)
00019DB0 6000                       		bra.s	loc_194EE
00019DB2                            ; ===========================================================================
00019DB2                            
00019DB2                            loc_194E0:
00019DB2 4268 0012                  		clr.w	$12(a0)
00019DB6 303C 0085                  		move.w	#$85,d0
00019DBA 4EB9 0000 15BA             		jsr	(PlaySound).l	; play SYZ music
00019DC0                            
00019DC0                            loc_194EE:
00019DC0 6000 FD02                  		bra.w	loc_191F2
00019DC4                            ; ===========================================================================
00019DC4                            
00019DC4                            loc_194F2:				; XREF: Obj75_ShipIndex
00019DC4 317C 0400 0010             		move.w	#$400,$10(a0)
00019DCA 317C FFC0 0012             		move.w	#-$40,$12(a0)
00019DD0 0C78 2D40 F72A             		cmpi.w	#$2D40,($FFFFF72A).w
00019DD6 6400                       		bcc.s	loc_1950C
00019DD8 5478 F72A                  		addq.w	#2,($FFFFF72A).w
00019DDC 6000                       		bra.s	loc_19512
00019DDE                            ; ===========================================================================
00019DDE                            
00019DDE                            loc_1950C:
00019DDE 4A28 0001                  		tst.b	1(a0)
00019DE2 6A00                       		bpl.s	Obj75_ShipDelete
00019DE4                            
00019DE4                            loc_19512:
00019DE4 6100 E3BC                  		bsr.w	BossMove
00019DE8 6000 FCC6                  		bra.w	loc_191DE
00019DEC                            ; ===========================================================================
00019DEC                            
00019DEC                            Obj75_ShipDelete:
00019DEC 4EF9 0000 DE04             		jmp	DeleteObject
00019DF2                            ; ===========================================================================
00019DF2                            
00019DF2                            Obj75_FaceMain:				; XREF: Obj75_Index
00019DF2 7201                       		moveq	#1,d1
00019DF4 2268 0034                  		movea.l	$34(a0),a1
00019DF8 7000                       		moveq	#0,d0
00019DFA 1029 0025                  		move.b	$25(a1),d0
00019DFE 303B 0000                  		move.w	off_19546(pc,d0.w),d0
00019E02 4EBB 0000                  		jsr	off_19546(pc,d0.w)
00019E06 1141 001C                  		move.b	d1,$1C(a0)
00019E0A 1010                       		move.b	(a0),d0
00019E0C B011                       		cmp.b	(a1),d0
00019E0E 6600                       		bne.s	Obj75_FaceDelete
00019E10 6000                       		bra.s	loc_195BE
00019E12                            ; ===========================================================================
00019E12                            
00019E12                            Obj75_FaceDelete:
00019E12 4EF9 0000 DE04             		jmp	DeleteObject
00019E18                            ; ===========================================================================
00019E18 0000 0000                  off_19546:	dc.w loc_19574-off_19546, loc_19574-off_19546
00019E1C 0000 0000                  		dc.w loc_1955A-off_19546, loc_19552-off_19546
00019E20 0000 0000                  		dc.w loc_19552-off_19546, loc_19556-off_19546
00019E24                            ; ===========================================================================
00019E24                            
00019E24                            loc_19552:				; XREF: off_19546
00019E24 720A                       		moveq	#$A,d1
00019E26 4E75                       		rts	
00019E28                            ; ===========================================================================
00019E28                            
00019E28                            loc_19556:				; XREF: off_19546
00019E28 7206                       		moveq	#6,d1
00019E2A 4E75                       		rts	
00019E2C                            ; ===========================================================================
00019E2C                            
00019E2C                            loc_1955A:				; XREF: off_19546
00019E2C 7000                       		moveq	#0,d0
00019E2E 1029 0028                  		move.b	$28(a1),d0
00019E32 303B 0000                  		move.w	off_19568(pc,d0.w),d0
00019E36 4EFB 0000                  		jmp	off_19568(pc,d0.w)
00019E3A                            ; ===========================================================================
00019E3A 0000 0000                  off_19568:	dc.w loc_19570-off_19568, loc_19572-off_19568
00019E3E 0000 0000                  		dc.w loc_19570-off_19568, loc_19570-off_19568
00019E42                            ; ===========================================================================
00019E42                            
00019E42                            loc_19570:				; XREF: off_19568
00019E42 6000                       		bra.s	loc_19574
00019E44                            ; ===========================================================================
00019E44                            
00019E44                            loc_19572:				; XREF: off_19568
00019E44 7206                       		moveq	#6,d1
00019E46                            
00019E46                            loc_19574:				; XREF: off_19546
00019E46 4A29 0020                  		tst.b	$20(a1)
00019E4A 6600                       		bne.s	loc_1957E
00019E4C 7205                       		moveq	#5,d1
00019E4E 4E75                       		rts	
00019E50                            ; ===========================================================================
00019E50                            
00019E50                            loc_1957E:
00019E50 0C38 0004 D024             		cmpi.b	#4,($FFFFD024).w
00019E56 6500                       		bcs.s	locret_19588
00019E58 7204                       		moveq	#4,d1
00019E5A                            
00019E5A                            locret_19588:
00019E5A 4E75                       		rts	
00019E5C                            ; ===========================================================================
00019E5C                            
00019E5C                            Obj75_FlameMain:			; XREF: Obj75_Index
00019E5C 117C 0007 001C             		move.b	#7,$1C(a0)
00019E62 2268 0034                  		movea.l	$34(a0),a1
00019E66 0C29 000A 0025             		cmpi.b	#$A,$25(a1)
00019E6C 6600                       		bne.s	loc_195AA
00019E6E 117C 000B 001C             		move.b	#$B,$1C(a0)
00019E74 4A28 0001                  		tst.b	1(a0)
00019E78 6A00                       		bpl.s	Obj75_FlameDelete
00019E7A 6000                       		bra.s	loc_195B6
00019E7C                            ; ===========================================================================
00019E7C                            
00019E7C                            loc_195AA:
00019E7C 4A69 0010                  		tst.w	$10(a1)
00019E80 6700                       		beq.s	loc_195B6
00019E82 117C 0008 001C             		move.b	#8,$1C(a0)
00019E88                            
00019E88                            loc_195B6:
00019E88 6000                       		bra.s	loc_195BE
00019E8A                            ; ===========================================================================
00019E8A                            
00019E8A                            Obj75_FlameDelete:
00019E8A 4EF9 0000 DE04             		jmp	DeleteObject
00019E90                            ; ===========================================================================
00019E90                            
00019E90                            loc_195BE:
00019E90 43F9 0001 85E4             		lea	(Ani_Eggman).l,a1
00019E96 4EB9 0000 AE88             		jsr	AnimateSprite
00019E9C 2268 0034                  		movea.l	$34(a0),a1
00019EA0 3169 0008 0008             		move.w	8(a1),8(a0)
00019EA6 3169 000C 000C             		move.w	$C(a1),$C(a0)
00019EAC                            
00019EAC                            loc_195DA:
00019EAC 1169 0022 0022             		move.b	$22(a1),$22(a0)
00019EB2 7003                       		moveq	#3,d0
00019EB4 C028 0022                  		and.b	$22(a0),d0
00019EB8 0228 00FC 0001             		andi.b	#$FC,1(a0)
00019EBE 8128 0001                  		or.b	d0,1(a0)
00019EC2 4EF9 0000 DDC8             		jmp	DisplaySprite
00019EC8                            ; ===========================================================================
00019EC8                            
00019EC8                            Obj75_SpikeMain:			; XREF: Obj75_Index
00019EC8 217C 0001 8710 0004        		move.l	#Map_BossItems,4(a0)
00019ED0 317C 246C 0002             		move.w	#$246C,2(a0)
00019ED6 117C 0005 001A             		move.b	#5,$1A(a0)
00019EDC 2268 0034                  		movea.l	$34(a0),a1
00019EE0 0C29 000A 0025             		cmpi.b	#$A,$25(a1)
00019EE6 6600                       		bne.s	loc_1961C
00019EE8 4A28 0001                  		tst.b	1(a0)
00019EEC 6A00                       		bpl.s	Obj75_SpikeDelete
00019EEE                            
00019EEE                            loc_1961C:
00019EEE 3169 0008 0008             		move.w	8(a1),8(a0)
00019EF4 3169 000C 000C             		move.w	$C(a1),$C(a0)
00019EFA 3028 003C                  		move.w	$3C(a0),d0
00019EFE 0C29 0004 0025             		cmpi.b	#4,$25(a1)
00019F04 6600                       		bne.s	loc_19652
00019F06 0C29 0006 0028             		cmpi.b	#6,$28(a1)
00019F0C 6700                       		beq.s	loc_1964C
00019F0E 4A29 0028                  		tst.b	$28(a1)
00019F12 6600                       		bne.s	loc_19658
00019F14 0C40 0094                  		cmpi.w	#$94,d0
00019F18 6C00                       		bge.s	loc_19658
00019F1A 5E40                       		addq.w	#7,d0
00019F1C 6000                       		bra.s	loc_19658
00019F1E                            ; ===========================================================================
00019F1E                            
00019F1E                            loc_1964C:
00019F1E 4A69 003C                  		tst.w	$3C(a1)
00019F22 6A00                       		bpl.s	loc_19658
00019F24                            
00019F24                            loc_19652:
00019F24 4A40                       		tst.w	d0
00019F26 6F00                       		ble.s	loc_19658
00019F28 5B40                       		subq.w	#5,d0
00019F2A                            
00019F2A                            loc_19658:
00019F2A 3140 003C                  		move.w	d0,$3C(a0)
00019F2E E440                       		asr.w	#2,d0
00019F30 D168 000C                  		add.w	d0,$C(a0)
00019F34 117C 0008 0019             		move.b	#8,$19(a0)
00019F3A 117C 000C 0016             		move.b	#$C,$16(a0)
00019F40 4228 0020                  		clr.b	$20(a0)
00019F44 2268 0034                  		movea.l	$34(a0),a1
00019F48 4A29 0020                  		tst.b	$20(a1)
00019F4C 6700                       		beq.s	loc_19688
00019F4E 4A29 0029                  		tst.b	$29(a1)
00019F52 6600                       		bne.s	loc_19688
00019F54 117C 0084 0020             		move.b	#$84,$20(a0)
00019F5A                            
00019F5A                            loc_19688:
00019F5A 6000 FF50                  		bra.w	loc_195DA
00019F5E                            ; ===========================================================================
00019F5E                            
00019F5E                            Obj75_SpikeDelete:
00019F5E 4EF9 0000 DE04             		jmp	DeleteObject
00019F64                            ; ===========================================================================
00019F64                            ; ---------------------------------------------------------------------------
00019F64                            ; Object 76 - blocks that Eggman picks up (SYZ)
00019F64                            ; ---------------------------------------------------------------------------
00019F64                            
00019F64                            Obj76:					; XREF: Obj_Index
00019F64 7000                       		moveq	#0,d0
00019F66 1028 0024                  		move.b	$24(a0),d0
00019F6A 323B 0000                  		move.w	Obj76_Index(pc,d0.w),d1
00019F6E 4EFB 1000                  		jmp	Obj76_Index(pc,d1.w)
00019F72                            ; ===========================================================================
00019F72 0000                       Obj76_Index:	dc.w Obj76_Main-Obj76_Index
00019F74 0000                       		dc.w Obj76_Action-Obj76_Index
00019F76 0000                       		dc.w loc_19762-Obj76_Index
00019F78                            ; ===========================================================================
00019F78                            
00019F78                            Obj76_Main:				; XREF: Obj76_Index
00019F78 7800                       		moveq	#0,d4
00019F7A 3A3C 2C10                  		move.w	#$2C10,d5
00019F7E 7C09                       		moveq	#9,d6
00019F80 43D0                       		lea	(a0),a1
00019F82 6000                       		bra.s	Obj76_MakeBlock
00019F84                            ; ===========================================================================
00019F84                            
00019F84                            Obj76_Loop:
00019F84 4EB9 0000 E24E             		jsr	SingleObjLoad
00019F8A 6600                       		bne.s	Obj76_ExitLoop
00019F8C                            
00019F8C                            Obj76_MakeBlock:			; XREF: Obj76_Main
00019F8C 12BC 0076                  		move.b	#$76,(a1)
00019F90 237C 0000 0000 0004        		move.l	#Map_obj76,4(a1)
00019F98 337C 4000 0002             		move.w	#$4000,2(a1)
00019F9E 137C 0004 0001             		move.b	#4,1(a1)
00019FA4 137C 0010 0019             		move.b	#$10,$19(a1)
00019FAA 137C 0010 0016             		move.b	#$10,$16(a1)
00019FB0 137C 0003 0018             		move.b	#3,$18(a1)
00019FB6 3345 0008                  		move.w	d5,8(a1)	; set x-position
00019FBA 337C 0582 000C             		move.w	#$582,$C(a1)
00019FC0 3344 0028                  		move.w	d4,$28(a1)
00019FC4 0644 0101                  		addi.w	#$101,d4
00019FC8 0645 0020                  		addi.w	#$20,d5		; add $20 to next x-position
00019FCC 5429 0024                  		addq.b	#2,$24(a1)
00019FD0 51CE FFB2                  		dbf	d6,Obj76_Loop	; repeat sequence 9 more times
00019FD4                            
00019FD4                            Obj76_ExitLoop:
00019FD4 4E75                       		rts	
00019FD6                            ; ===========================================================================
00019FD6                            
00019FD6                            Obj76_Action:				; XREF: Obj76_Index
00019FD6 1028 0029                  		move.b	$29(a0),d0
00019FDA B028 0028                  		cmp.b	$28(a0),d0
00019FDE 6700                       		beq.s	Obj76_Solid
00019FE0 4A00                       		tst.b	d0
00019FE2 6B00                       		bmi.s	loc_19718
00019FE4                            
00019FE4                            loc_19712:
00019FE4 6100 0000                  		bsr.w	Obj76_Break
00019FE8 6000                       		bra.s	Obj76_Display
00019FEA                            ; ===========================================================================
00019FEA                            
00019FEA                            loc_19718:
00019FEA 2268 0034                  		movea.l	$34(a0),a1
00019FEE 4A29 0021                  		tst.b	$21(a1)
00019FF2 67F0                       		beq.s	loc_19712
00019FF4 3169 0008 0008             		move.w	8(a1),8(a0)
00019FFA 3169 000C 000C             		move.w	$C(a1),$C(a0)
0001A000 0668 002C 000C             		addi.w	#$2C,$C(a0)
0001A006 B2C8                       		cmpa.w	a0,a1
0001A008 6500                       		bcs.s	Obj76_Display
0001A00A 3029 0012                  		move.w	$12(a1),d0
0001A00E 48C0                       		ext.l	d0
0001A010 E080                       		asr.l	#8,d0
0001A012 D168 000C                  		add.w	d0,$C(a0)
0001A016 6000                       		bra.s	Obj76_Display
0001A018                            ; ===========================================================================
0001A018                            
0001A018                            Obj76_Solid:				; XREF: Obj76_Action
0001A018 323C 001B                  		move.w	#$1B,d1
0001A01C 343C 0010                  		move.w	#$10,d2
0001A020 363C 0011                  		move.w	#$11,d3
0001A024 3828 0008                  		move.w	8(a0),d4
0001A028 4EB9 0001 0198             		jsr	SolidObject
0001A02E                            
0001A02E                            Obj76_Display:				; XREF: Obj76_Action
0001A02E 4EF9 0000 DDC8             		jmp	DisplaySprite
0001A034                            ; ===========================================================================
0001A034                            
0001A034                            loc_19762:				; XREF: Obj76_Index
0001A034 4A28 0001                  		tst.b	1(a0)
0001A038 6A00                       		bpl.s	Obj76_Delete
0001A03A 4EB9 0000 DD76             		jsr	ObjectFall
0001A040 4EF9 0000 DDC8             		jmp	DisplaySprite
0001A046                            ; ===========================================================================
0001A046                            
0001A046                            Obj76_Delete:
0001A046 4EF9 0000 DE04             		jmp	DeleteObject
0001A04C                            
0001A04C                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0001A04C                            
0001A04C                            
0001A04C                            Obj76_Break:				; XREF: Obj76_Action
0001A04C 49FA 0000                  		lea	Obj76_FragSpeed(pc),a4
0001A050 4BFA 0000                  		lea	Obj76_FragPos(pc),a5
0001A054 7801                       		moveq	#1,d4
0001A056 7203                       		moveq	#3,d1
0001A058 7438                       		moveq	#$38,d2
0001A05A 5428 0024                  		addq.b	#2,$24(a0)
0001A05E 117C 0008 0019             		move.b	#8,$19(a0)
0001A064 117C 0008 0016             		move.b	#8,$16(a0)
0001A06A 43D0                       		lea	(a0),a1
0001A06C 6000                       		bra.s	Obj76_MakeFrag
0001A06E                            ; ===========================================================================
0001A06E                            
0001A06E                            Obj76_LoopFrag:
0001A06E 4EB9 0000 E264             		jsr	SingleObjLoad2
0001A074 6600                       		bne.s	loc_197D4
0001A076                            
0001A076                            Obj76_MakeFrag:
0001A076 45D0                       		lea	(a0),a2
0001A078 47D1                       		lea	(a1),a3
0001A07A 7603                       		moveq	#3,d3
0001A07C                            
0001A07C                            loc_197AA:
0001A07C 26DA                       		move.l	(a2)+,(a3)+
0001A07E 26DA                       		move.l	(a2)+,(a3)+
0001A080 26DA                       		move.l	(a2)+,(a3)+
0001A082 26DA                       		move.l	(a2)+,(a3)+
0001A084 51CB FFF6                  		dbf	d3,loc_197AA
0001A088                            
0001A088 335C 0010                  		move.w	(a4)+,$10(a1)
0001A08C 335C 0012                  		move.w	(a4)+,$12(a1)
0001A090 361D                       		move.w	(a5)+,d3
0001A092 D769 0008                  		add.w	d3,8(a1)
0001A096 361D                       		move.w	(a5)+,d3
0001A098 D769 000C                  		add.w	d3,$C(a1)
0001A09C 1344 001A                  		move.b	d4,$1A(a1)
0001A0A0 5244                       		addq.w	#1,d4
0001A0A2 51C9 FFCA                  		dbf	d1,Obj76_LoopFrag ; repeat sequence 3 more times
0001A0A6                            
0001A0A6                            loc_197D4:
0001A0A6 303C 00CB                  		move.w	#$CB,d0
0001A0AA 4EF9 0000 15C0             		jmp	(PlaySound_Special).l ;	play smashing sound
0001A0B0                            ; End of function Obj76_Break
0001A0B0                            
0001A0B0                            ; ===========================================================================
0001A0B0 FE80 FE00                  Obj76_FragSpeed:dc.w $FE80, $FE00
0001A0B4 0180 FE00                  		dc.w $180, $FE00
0001A0B8 FF00 FF00                  		dc.w $FF00, $FF00
0001A0BC 0100 FF00                  		dc.w $100, $FF00
0001A0C0 FFF8 FFF8                  Obj76_FragPos:	dc.w $FFF8, $FFF8
0001A0C4 0010 0000                  		dc.w $10, 0
0001A0C8 0000 0010                  		dc.w 0,	$10
0001A0CC 0010 0010                  		dc.w $10, $10
0001A0D0                            ; ---------------------------------------------------------------------------
0001A0D0                            ; Sprite mappings - blocks that	Eggman picks up (SYZ)
0001A0D0                            ; ---------------------------------------------------------------------------
0001A0D0                            Map_obj76:
0001A0D0                            	include "_maps\obj76.asm"
0001A0D0                            ; ---------------------------------------------------------------------------
0001A0D0                            ; Sprite mappings - blocks that	Robotnik picks up (SYZ)
0001A0D0                            ; ---------------------------------------------------------------------------
0001A0D0 0000 0000                  		dc.w byte_19808-Map_obj76, byte_19814-Map_obj76
0001A0D4 0000 0000                  		dc.w byte_1981A-Map_obj76, byte_19820-Map_obj76
0001A0D8 0000                       		dc.w byte_19826-Map_obj76
0001A0DA 02                         byte_19808:	dc.b 2
0001A0DB F00D 0071 F0               		dc.b $F0, $D, 0, $71, $F0
0001A0E0 000D 0079 F0               		dc.b 0,	$D, 0, $79, $F0
0001A0E5 00                         		dc.b 0
0001A0E6 01                         byte_19814:	dc.b 1
0001A0E7 F805 0071 F8               		dc.b $F8, 5, 0,	$71, $F8
0001A0EC 01                         byte_1981A:	dc.b 1
0001A0ED F805 0075 F8               		dc.b $F8, 5, 0,	$75, $F8
0001A0F2 01                         byte_19820:	dc.b 1
0001A0F3 F805 0079 F8               		dc.b $F8, 5, 0,	$79, $F8
0001A0F8 01                         byte_19826:	dc.b 1
0001A0F9 F805 007D F8               		dc.b $F8, 5, 0,	$7D, $F8
0001A0FE                            		even
0001A0FE                            		even
0001A0FE                            
0001A0FE                            ; ===========================================================================
0001A0FE                            
0001A0FE                            loc_1982C:				; XREF: loc_19C62; loc_19C80
0001A0FE 4EF9 0000 DE04             		jmp	DeleteObject
0001A104                            ; ===========================================================================
0001A104                            ; ---------------------------------------------------------------------------
0001A104                            ; Object 82 - Eggman (SBZ2)
0001A104                            ; ---------------------------------------------------------------------------
0001A104                            
0001A104                            Obj82:					; XREF: Obj_Index
0001A104 7000                       		moveq	#0,d0
0001A106 1028 0024                  		move.b	$24(a0),d0
0001A10A 323B 0000                  		move.w	Obj82_Index(pc,d0.w),d1
0001A10E 4EFB 1000                  		jmp	Obj82_Index(pc,d1.w)
0001A112                            ; ===========================================================================
0001A112 0000                       Obj82_Index:	dc.w Obj82_Main-Obj82_Index
0001A114 0000                       		dc.w Obj82_Eggman-Obj82_Index
0001A116 0000                       		dc.w Obj82_Switch-Obj82_Index
0001A118                            
0001A118 0200 03                    Obj82_ObjData:	dc.b 2,	0, 3		; routine number, animation, priority
0001A11B 0400 03                    		dc.b 4,	0, 3
0001A11E                            ; ===========================================================================
0001A11E                            
0001A11E                            Obj82_Main:				; XREF: Obj82_Index
0001A11E 45FA FFF8                  		lea	Obj82_ObjData(pc),a2
0001A122 317C 2160 0008             		move.w	#$2160,8(a0)
0001A128 317C 05A4 000C             		move.w	#$5A4,$C(a0)
0001A12E 117C 000F 0020             		move.b	#$F,$20(a0)
0001A134 117C 0010 0021             		move.b	#$10,$21(a0)
0001A13A 08A8 0000 0022             		bclr	#0,$22(a0)
0001A140 4228 0025                  		clr.b	$25(a0)
0001A144 115A 0024                  		move.b	(a2)+,$24(a0)
0001A148 115A 001C                  		move.b	(a2)+,$1C(a0)
0001A14C 115A 0018                  		move.b	(a2)+,$18(a0)
0001A150 217C 0000 0000 0004        		move.l	#Map_obj82,4(a0)
0001A158 317C 0400 0002             		move.w	#$400,2(a0)
0001A15E 117C 0004 0001             		move.b	#4,1(a0)
0001A164 08E8 0007 0001             		bset	#7,1(a0)
0001A16A 117C 0020 0019             		move.b	#$20,$19(a0)
0001A170 4EB9 0000 E264             		jsr	SingleObjLoad2
0001A176 6600                       		bne.s	Obj82_Eggman
0001A178 2348 0034                  		move.l	a0,$34(a1)
0001A17C 12BC 0082                  		move.b	#$82,(a1)	; load switch object
0001A180 337C 2130 0008             		move.w	#$2130,8(a1)
0001A186 337C 05BC 000C             		move.w	#$5BC,$C(a1)
0001A18C 4228 0025                  		clr.b	$25(a0)
0001A190 135A 0024                  		move.b	(a2)+,$24(a1)
0001A194 135A 001C                  		move.b	(a2)+,$1C(a1)
0001A198 135A 0018                  		move.b	(a2)+,$18(a1)
0001A19C 237C 0000 C5BC 0004        		move.l	#Map_obj32,4(a1)
0001A1A4 337C 04A4 0002             		move.w	#$4A4,2(a1)
0001A1AA 137C 0004 0001             		move.b	#4,1(a1)
0001A1B0 08E9 0007 0001             		bset	#7,1(a1)
0001A1B6 137C 0010 0019             		move.b	#$10,$19(a1)
0001A1BC 137C 0000 001A             		move.b	#0,$1A(a1)
0001A1C2                            
0001A1C2                            Obj82_Eggman:				; XREF: Obj82_Index
0001A1C2 7000                       		moveq	#0,d0
0001A1C4 1028 0025                  		move.b	$25(a0),d0
0001A1C8 323B 0000                  		move.w	Obj82_EggIndex(pc,d0.w),d1
0001A1CC 4EBB 1000                  		jsr	Obj82_EggIndex(pc,d1.w)
0001A1D0 43FA 0000                  		lea	Ani_obj82(pc),a1
0001A1D4 4EB9 0000 AE88             		jsr	AnimateSprite
0001A1DA 4EF9 0000 DDC8             		jmp	DisplaySprite
0001A1E0                            ; ===========================================================================
0001A1E0 0000                       Obj82_EggIndex:	dc.w Obj82_ChkSonic-Obj82_EggIndex
0001A1E2 0000                       		dc.w Obj82_PreLeap-Obj82_EggIndex
0001A1E4 0000                       		dc.w Obj82_Leap-Obj82_EggIndex
0001A1E6 0000                       		dc.w loc_19934-Obj82_EggIndex
0001A1E8                            ; ===========================================================================
0001A1E8                            
0001A1E8                            Obj82_ChkSonic:				; XREF: Obj82_EggIndex
0001A1E8 3028 0008                  		move.w	8(a0),d0
0001A1EC 9078 D008                  		sub.w	($FFFFD008).w,d0
0001A1F0 0C40 0080                  		cmpi.w	#128,d0		; is Sonic within 128 pixels of	Eggman?
0001A1F4 6400                       		bcc.s	loc_19934	; if not, branch
0001A1F6 5428 0025                  		addq.b	#2,$25(a0)
0001A1FA 317C 00B4 003C             		move.w	#180,$3C(a0)	; set delay to 3 seconds
0001A200 117C 0001 001C             		move.b	#1,$1C(a0)
0001A206                            
0001A206                            loc_19934:				; XREF: Obj82_EggIndex
0001A206 4EF9 0000 DDA2             		jmp	SpeedToPos
0001A20C                            ; ===========================================================================
0001A20C                            
0001A20C                            Obj82_PreLeap:				; XREF: Obj82_EggIndex
0001A20C 5368 003C                  		subq.w	#1,$3C(a0)	; subtract 1 from time delay
0001A210 6600                       		bne.s	loc_19954	; if time remains, branch
0001A212 5428 0025                  		addq.b	#2,$25(a0)
0001A216 117C 0002 001C             		move.b	#2,$1C(a0)
0001A21C 5868 000C                  		addq.w	#4,$C(a0)
0001A220 317C 000F 003C             		move.w	#15,$3C(a0)
0001A226                            
0001A226                            loc_19954:
0001A226 60DE                       		bra.s	loc_19934
0001A228                            ; ===========================================================================
0001A228                            
0001A228                            Obj82_Leap:				; XREF: Obj82_EggIndex
0001A228 5368 003C                  		subq.w	#1,$3C(a0)
0001A22C 6E00                       		bgt.s	loc_199D0
0001A22E 6600                       		bne.s	loc_1996A
0001A230 317C FF04 0010             		move.w	#-$FC,$10(a0)	; make Eggman leap
0001A236 317C FC40 0012             		move.w	#-$3C0,$12(a0)
0001A23C                            
0001A23C                            loc_1996A:
0001A23C 0C68 2132 0008             		cmpi.w	#$2132,8(a0)
0001A242 6E00                       		bgt.s	loc_19976
0001A244 4268 0010                  		clr.w	$10(a0)
0001A248                            
0001A248                            loc_19976:
0001A248 0668 0024 0012             		addi.w	#$24,$12(a0)
0001A24E 4A68 0012                  		tst.w	$12(a0)
0001A252 6B00                       		bmi.s	Obj82_FindBlocks
0001A254 0C68 0595 000C             		cmpi.w	#$595,$C(a0)
0001A25A 6500                       		bcs.s	Obj82_FindBlocks
0001A25C 317C 5357 0028             		move.w	#$5357,$28(a0)
0001A262 0C68 059B 000C             		cmpi.w	#$59B,$C(a0)
0001A268 6500                       		bcs.s	Obj82_FindBlocks
0001A26A 317C 059B 000C             		move.w	#$59B,$C(a0)
0001A270 4268 0012                  		clr.w	$12(a0)
0001A274                            
0001A274                            Obj82_FindBlocks:
0001A274 3028 0010                  		move.w	$10(a0),d0
0001A278 8068 0012                  		or.w	$12(a0),d0
0001A27C 6600                       		bne.s	loc_199D0
0001A27E 43F8 D000                  		lea	($FFFFD000).w,a1 ; start at the	first object RAM
0001A282 703E                       		moveq	#$3E,d0
0001A284 7240                       		moveq	#$40,d1
0001A286                            
0001A286                            Obj82_FindLoop:	
0001A286 D2C1                       		adda.w	d1,a1		; jump to next object RAM
0001A288 0C11 0083                  		cmpi.b	#$83,(a1)	; is object a block? (object $83)
0001A28C 57C8 FFF8                  		dbeq	d0,Obj82_FindLoop ; if not, repeat (max	$3E times)
0001A290                            
0001A290 6600                       		bne.s	loc_199D0
0001A292 337C 474F 0028             		move.w	#$474F,$28(a1)	; set block to disintegrate
0001A298 5428 0025                  		addq.b	#2,$25(a0)
0001A29C 117C 0001 001C             		move.b	#1,$1C(a0)
0001A2A2                            
0001A2A2                            loc_199D0:
0001A2A2 6000 FF62                  		bra.w	loc_19934
0001A2A6                            ; ===========================================================================
0001A2A6                            
0001A2A6                            Obj82_Switch:				; XREF: Obj82_Index
0001A2A6 7000                       		moveq	#0,d0
0001A2A8 1028 0025                  		move.b	$25(a0),d0
0001A2AC 303B 0000                  		move.w	Obj82_SwIndex(pc,d0.w),d0
0001A2B0 4EFB 0000                  		jmp	Obj82_SwIndex(pc,d0.w)
0001A2B4                            ; ===========================================================================
0001A2B4 0000                       Obj82_SwIndex:	dc.w loc_199E6-Obj82_SwIndex
0001A2B6 0000                       		dc.w Obj82_SwDisplay-Obj82_SwIndex
0001A2B8                            ; ===========================================================================
0001A2B8                            
0001A2B8                            loc_199E6:				; XREF: Obj82_SwIndex
0001A2B8 2268 0034                  		movea.l	$34(a0),a1
0001A2BC 0C69 5357 0028             		cmpi.w	#$5357,$28(a1)
0001A2C2 6600                       		bne.s	Obj82_SwDisplay
0001A2C4 117C 0001 001A             		move.b	#1,$1A(a0)
0001A2CA 5428 0025                  		addq.b	#2,$25(a0)
0001A2CE                            
0001A2CE                            Obj82_SwDisplay:			; XREF: Obj82_SwIndex
0001A2CE 4EF9 0000 DDC8             		jmp	DisplaySprite
0001A2D4                            ; ===========================================================================
0001A2D4                            Ani_obj82:
0001A2D4                            	include "_anim\obj82.asm"
0001A2D4                            ; ---------------------------------------------------------------------------
0001A2D4                            ; Animation script - Eggman (SBZ2)
0001A2D4                            ; ---------------------------------------------------------------------------
0001A2D4 0000                       		dc.w byte_19A10-Ani_obj82
0001A2D6 0000                       		dc.w byte_19A14-Ani_obj82
0001A2D8 0000                       		dc.w byte_19A18-Ani_obj82
0001A2DA 0000                       		dc.w byte_19A20-Ani_obj82
0001A2DC 0000                       		dc.w byte_19A24-Ani_obj82
0001A2DE 0000                       		dc.w byte_19A2A-Ani_obj82
0001A2E0 0000                       		dc.w byte_19A30-Ani_obj82
0001A2E2 7E00 FF00                  byte_19A10:	dc.b $7E, 0, $FF, 0
0001A2E6 0601 02FF                  byte_19A14:	dc.b 6,	1, 2, $FF
0001A2EA 0E03 0404 0000 00FF        byte_19A18:	dc.b $E, 3, 4, 4, 0, 0,	0, $FF
0001A2F2 0005 09FF                  byte_19A20:	dc.b 0,	5, 9, $FF
0001A2F6 0607 0408 04FF             byte_19A24:	dc.b 6,	7, 4, 8, 4, $FF
0001A2FC 0F04 0303 FF00             byte_19A2A:	dc.b $F, 4, 3, 3, $FF, 0
0001A302 7E06 FF00                  byte_19A30:	dc.b $7E, 6, $FF, 0
0001A306                            		even
0001A306                            		even
0001A306                            
0001A306                            ; ---------------------------------------------------------------------------
0001A306                            ; Sprite mappings - Eggman (SBZ2)
0001A306                            ; ---------------------------------------------------------------------------
0001A306                            Map_obj82:
0001A306                            	include "_maps\obj82.asm"
0001A306                            ; ================================================================================
0001A306                            ; Sprite Mappings - generated by Flex 2 Fri Mar 21 2025 21:13:29 GMT-0500 (Central Daylight Time)
0001A306                            ; ================================================================================
0001A306                            
0001A306                            DATAA16Z12RYSAF:
0001A306 0000 0000                  	dc.w DATAA16Z12RYSAF_0-DATAA16Z12RYSAF, DATAA16Z12RYSAF_1-DATAA16Z12RYSAF
0001A30A 0000 0000                  	dc.w DATAA16Z12RYSAF_2-DATAA16Z12RYSAF, DATAA16Z12RYSAF_3-DATAA16Z12RYSAF
0001A30E 0000 0000                  	dc.w DATAA16Z12RYSAF_4-DATAA16Z12RYSAF, DATAA16Z12RYSAF_5-DATAA16Z12RYSAF
0001A312 0000 0000                  	dc.w DATAA16Z12RYSAF_6-DATAA16Z12RYSAF, DATAA16Z12RYSAF_7-DATAA16Z12RYSAF
0001A316 0000 0000                  	dc.w DATAA16Z12RYSAF_8-DATAA16Z12RYSAF, DATAA16Z12RYSAF_9-DATAA16Z12RYSAF
0001A31A 0000                       	dc.w DATAA16Z12RYSAF_A-DATAA16Z12RYSAF
0001A31C 03                         DATAA16Z12RYSAF_0: dc.b $3
0001A31D FC00 006D E8               	dc.b $FC, $0, $0, $6D, $E8
0001A322 E80E 0000 F0               	dc.b $E8, $E, $0, $0, $F0
0001A327 000F 004D F0               	dc.b $0, $F, $0, $4D, $F0
0001A32C 04                         DATAA16Z12RYSAF_1: dc.b $4
0001A32D E80D 000C F0               	dc.b $E8, $D, $0, $C, $F0
0001A332 E80E 0000 F0               	dc.b $E8, $E, $0, $0, $F0
0001A337 000F 004D F0               	dc.b $0, $F, $0, $4D, $F0
0001A33C FC00 006D E8               	dc.b $FC, $0, $0, $6D, $E8
0001A341 04                         DATAA16Z12RYSAF_2: dc.b $4
0001A342 E90D 000C F0               	dc.b $E9, $D, $0, $C, $F0
0001A347 E90E 0000 F0               	dc.b $E9, $E, $0, $0, $F0
0001A34C 010F 005D F0               	dc.b $1, $F, $0, $5D, $F0
0001A351 FD00 006D E8               	dc.b $FD, $0, $0, $6D, $E8
0001A356 03                         DATAA16Z12RYSAF_3: dc.b $3
0001A357 E80F 006E E8               	dc.b $E8, $F, $0, $6E, $E8
0001A35C 080D 007E E8               	dc.b $8, $D, $0, $7E, $E8
0001A361 F005 0086 08               	dc.b $F0, $5, $0, $86, $8
0001A366 04                         DATAA16Z12RYSAF_4: dc.b $4
0001A367 E00F 008A E8               	dc.b $E0, $F, $0, $8A, $E8
0001A36C 000C 009A E8               	dc.b $0, $C, $0, $9A, $E8
0001A371 0806 009E F0               	dc.b $8, $6, $0, $9E, $F0
0001A376 E805 00A4 08               	dc.b $E8, $5, $0, $A4, $8
0001A37B 04                         DATAA16Z12RYSAF_5: dc.b $4
0001A37C E80D 0014 EC               	dc.b $E8, $D, $0, $14, $EC
0001A381 E801 001C 0C               	dc.b $E8, $1, $0, $1C, $C
0001A386 E80E 0000 F0               	dc.b $E8, $E, $0, $0, $F0
0001A38B 000F 004D F0               	dc.b $0, $F, $0, $4D, $F0
0001A390 07                         DATAA16Z12RYSAF_6: dc.b $7
0001A391 E80D 0014 EC               	dc.b $E8, $D, $0, $14, $EC
0001A396 E801 001C 0C               	dc.b $E8, $1, $0, $1C, $C
0001A39B 0409 082E 00               	dc.b $4, $9, $8, $2E, $0
0001A3A0 0405 0834 E8               	dc.b $4, $5, $8, $34, $E8
0001A3A5 F00F 081E F0               	dc.b $F0, $F, $8, $1E, $F0
0001A3AA F104 0838 10               	dc.b $F1, $4, $8, $38, $10
0001A3AF F104 0038 E0               	dc.b $F1, $4, $0, $38, $E0
0001A3B4 04                         DATAA16Z12RYSAF_7: dc.b $4
0001A3B5 080D 00A8 E4               	dc.b $8, $D, $0, $A8, $E4
0001A3BA E80F 00B0 EC               	dc.b $E8, $F, $0, $B0, $EC
0001A3BF 0805 00C0 04               	dc.b $8, $5, $0, $C0, $4
0001A3C4 F005 00C4 0C               	dc.b $F0, $5, $0, $C4, $C
0001A3C9 05                         DATAA16Z12RYSAF_8: dc.b $5
0001A3CA 0C05 00C8 E4               	dc.b $C, $5, $0, $C8, $E4
0001A3CF E40F 00CC EC               	dc.b $E4, $F, $0, $CC, $EC
0001A3D4 040C 00DC EC               	dc.b $4, $C, $0, $DC, $EC
0001A3D9 0C05 00E0 FC               	dc.b $C, $5, $0, $E0, $FC
0001A3DE EC04 00E4 0C               	dc.b $EC, $4, $0, $E4, $C
0001A3E3 08                         DATAA16Z12RYSAF_9: dc.b $8
0001A3E4 E80D 0014 EC               	dc.b $E8, $D, $0, $14, $EC
0001A3E9 E801 001C 0C               	dc.b $E8, $1, $0, $1C, $C
0001A3EE E80E 0000 F0               	dc.b $E8, $E, $0, $0, $F0
0001A3F3 000F 004D F0               	dc.b $0, $F, $0, $4D, $F0
0001A3F8 E00D 3ECE F0               	dc.b $E0, $D, $3E, $CE, $F0
0001A3FD F00D 3ECE F0               	dc.b $F0, $D, $3E, $CE, $F0
0001A402 000D 3ECE F0               	dc.b $0, $D, $3E, $CE, $F0
0001A407 100D 3ECE F0               	dc.b $10, $D, $3E, $CE, $F0
0001A40C 03                         DATAA16Z12RYSAF_A: dc.b $3
0001A40D EC0D 003A E4               	dc.b $EC, $D, $0, $3A, $E4
0001A412 F408 0042 04               	dc.b $F4, $8, $0, $42, $4
0001A417 EC0D 0045 FC               	dc.b $EC, $D, $0, $45, $FC
0001A41C                            	even
0001A41C                            	even
0001A41C                            
0001A41C                            ; ===========================================================================
0001A41C                            ; ---------------------------------------------------------------------------
0001A41C                            ; Object 83 - blocks that disintegrate Eggman	presses	a switch (SBZ2)
0001A41C                            ; ---------------------------------------------------------------------------
0001A41C                            
0001A41C                            Obj83:					; XREF: Obj_Index
0001A41C 7000                       		moveq	#0,d0
0001A41E 1028 0024                  		move.b	$24(a0),d0
0001A422 323B 0000                  		move.w	Obj83_Index(pc,d0.w),d1
0001A426 4EFB 1000                  		jmp	Obj83_Index(pc,d1.w)
0001A42A                            ; ===========================================================================
0001A42A 0000                       Obj83_Index:	dc.w Obj83_Main-Obj83_Index
0001A42C 0000                       		dc.w Obj83_ChkBreak-Obj83_Index
0001A42E 0000                       		dc.w loc_19C36-Obj83_Index
0001A430 0000                       		dc.w loc_19C62-Obj83_Index
0001A432 0000                       		dc.w loc_19C72-Obj83_Index
0001A434 0000                       		dc.w loc_19C80-Obj83_Index
0001A436                            ; ===========================================================================
0001A436                            
0001A436                            Obj83_Main:				; XREF: Obj83_Index
0001A436 317C 2080 0008             		move.w	#$2080,8(a0)
0001A43C 317C 05D0 000C             		move.w	#$5D0,$C(a0)
0001A442 117C 0080 0019             		move.b	#$80,$19(a0)
0001A448 117C 0010 0016             		move.b	#$10,$16(a0)
0001A44E 117C 0004 0001             		move.b	#4,1(a0)
0001A454 08E8 0007 0001             		bset	#7,1(a0)
0001A45A 7800                       		moveq	#0,d4
0001A45C 3A3C 2010                  		move.w	#$2010,d5
0001A460 7C07                       		moveq	#7,d6
0001A462 45E8 0030                  		lea	$30(a0),a2
0001A466                            
0001A466                            Obj83_MakeBlock:
0001A466 4EB9 0000 E24E             		jsr	SingleObjLoad
0001A46C 6600                       		bne.s	Obj83_ExitMake
0001A46E 34C9                       		move.w	a1,(a2)+
0001A470 12BC 0083                  		move.b	#$83,(a1)	; load block object
0001A474 237C 0000 0000 0004        		move.l	#Map_obj83,4(a1)
0001A47C 337C 4518 0002             		move.w	#$4518,2(a1)
0001A482 137C 0004 0001             		move.b	#4,1(a1)
0001A488 137C 0010 0019             		move.b	#$10,$19(a1)
0001A48E 137C 0010 0016             		move.b	#$10,$16(a1)
0001A494 137C 0003 0018             		move.b	#3,$18(a1)
0001A49A 3345 0008                  		move.w	d5,8(a1)	; set X	position
0001A49E 337C 05D0 000C             		move.w	#$5D0,$C(a1)
0001A4A4 0645 0020                  		addi.w	#$20,d5		; add $20 for next X position
0001A4A8 137C 0008 0024             		move.b	#8,$24(a1)
0001A4AE 51CE FFB6                  		dbf	d6,Obj83_MakeBlock ; repeat sequence 7 more times
0001A4B2                            
0001A4B2                            Obj83_ExitMake:
0001A4B2 5428 0024                  		addq.b	#2,$24(a0)
0001A4B6 4E75                       		rts	
0001A4B8                            ; ===========================================================================
0001A4B8                            
0001A4B8                            Obj83_ChkBreak:				; XREF: Obj83_Index
0001A4B8 0C68 474F 0028             		cmpi.w	#$474F,$28(a0)	; is object set	to disintegrate?
0001A4BE 6600                       		bne.s	Obj83_Solid	; if not, branch
0001A4C0 4228 001A                  		clr.b	$1A(a0)
0001A4C4 5428 0024                  		addq.b	#2,$24(a0)	; next subroutine
0001A4C8                            
0001A4C8                            Obj83_Solid:
0001A4C8 7000                       		moveq	#0,d0
0001A4CA 1028 001A                  		move.b	$1A(a0),d0
0001A4CE 4400                       		neg.b	d0
0001A4D0 4880                       		ext.w	d0
0001A4D2 5040                       		addq.w	#8,d0
0001A4D4 E940                       		asl.w	#4,d0
0001A4D6 383C 2100                  		move.w	#$2100,d4
0001A4DA 9840                       		sub.w	d0,d4
0001A4DC 1140 0019                  		move.b	d0,$19(a0)
0001A4E0 3144 0008                  		move.w	d4,8(a0)
0001A4E4 720B                       		moveq	#$B,d1
0001A4E6 D240                       		add.w	d0,d1
0001A4E8 7410                       		moveq	#$10,d2
0001A4EA 7611                       		moveq	#$11,d3
0001A4EC 4EF9 0001 0198             		jmp	SolidObject
0001A4F2                            ; ===========================================================================
0001A4F2                            
0001A4F2                            loc_19C36:				; XREF: Obj83_Index
0001A4F2 0428 000E 001E             		subi.b	#$E,$1E(a0)
0001A4F8 6400                       		bcc.s	Obj83_Solid2
0001A4FA 70FF                       		moveq	#-1,d0
0001A4FC 1028 001A                  		move.b	$1A(a0),d0
0001A500 4880                       		ext.w	d0
0001A502 D040                       		add.w	d0,d0
0001A504 3030 0030                  		move.w	$30(a0,d0.w),d0
0001A508 2240                       		movea.l	d0,a1
0001A50A 337C 474F 0028             		move.w	#$474F,$28(a1)
0001A510 5228 001A                  		addq.b	#1,$1A(a0)
0001A514 0C28 0008 001A             		cmpi.b	#8,$1A(a0)
0001A51A 6700                       		beq.s	loc_19C62
0001A51C                            
0001A51C                            Obj83_Solid2:
0001A51C 60AA                       		bra.s	Obj83_Solid
0001A51E                            ; ===========================================================================
0001A51E                            
0001A51E                            loc_19C62:				; XREF: Obj83_Index
0001A51E 08A8 0003 0022             		bclr	#3,$22(a0)
0001A524 08B8 0003 D022             		bclr	#3,($FFFFD022).w
0001A52A 6000 FBD2                  		bra.w	loc_1982C
0001A52E                            ; ===========================================================================
0001A52E                            
0001A52E                            loc_19C72:				; XREF: Obj83_Index
0001A52E 0C68 474F 0028             		cmpi.w	#$474F,$28(a0)	; is object set	to disintegrate?
0001A534 6700                       		beq.s	Obj83_Break	; if yes, branch
0001A536 4EF9 0000 DDC8             		jmp	DisplaySprite
0001A53C                            ; ===========================================================================
0001A53C                            
0001A53C                            loc_19C80:				; XREF: Obj83_Index
0001A53C 4A28 0001                  		tst.b	1(a0)
0001A540 6A00 FBBC                  		bpl.w	loc_1982C
0001A544 4EB9 0000 DD76             		jsr	ObjectFall
0001A54A 4EF9 0000 DDC8             		jmp	DisplaySprite
0001A550                            ; ===========================================================================
0001A550                            
0001A550                            Obj83_Break:				; XREF: loc_19C72
0001A550 49FA 0000                  		lea	Obj83_FragSpeed(pc),a4
0001A554 4BFA 0000                  		lea	Obj83_FragPos(pc),a5
0001A558 7801                       		moveq	#1,d4
0001A55A 7203                       		moveq	#3,d1
0001A55C 7438                       		moveq	#$38,d2
0001A55E 5428 0024                  		addq.b	#2,$24(a0)
0001A562 117C 0008 0019             		move.b	#8,$19(a0)
0001A568 117C 0008 0016             		move.b	#8,$16(a0)
0001A56E 43D0                       		lea	(a0),a1
0001A570 6000                       		bra.s	Obj83_MakeFrag
0001A572                            ; ===========================================================================
0001A572                            
0001A572                            Obj83_LoopFrag:
0001A572 4EB9 0000 E264             		jsr	SingleObjLoad2
0001A578 6600                       		bne.s	Obj83_BreakSnd
0001A57A                            
0001A57A                            Obj83_MakeFrag:				; XREF: Obj83_Break
0001A57A 45D0                       		lea	(a0),a2
0001A57C 47D1                       		lea	(a1),a3
0001A57E 7603                       		moveq	#3,d3
0001A580                            
0001A580                            loc_19CC4:
0001A580 26DA                       		move.l	(a2)+,(a3)+
0001A582 26DA                       		move.l	(a2)+,(a3)+
0001A584 26DA                       		move.l	(a2)+,(a3)+
0001A586 26DA                       		move.l	(a2)+,(a3)+
0001A588 51CB FFF6                  		dbf	d3,loc_19CC4
0001A58C                            
0001A58C 335C 0012                  		move.w	(a4)+,$12(a1)
0001A590 361D                       		move.w	(a5)+,d3
0001A592 D769 0008                  		add.w	d3,8(a1)
0001A596 361D                       		move.w	(a5)+,d3
0001A598 D769 000C                  		add.w	d3,$C(a1)
0001A59C 1344 001A                  		move.b	d4,$1A(a1)
0001A5A0 5244                       		addq.w	#1,d4
0001A5A2 51C9 FFCE                  		dbf	d1,Obj83_LoopFrag ; repeat sequence 3 more times
0001A5A6                            
0001A5A6                            Obj83_BreakSnd:
0001A5A6 303C 00CB                  		move.w	#$CB,d0
0001A5AA 4EB9 0000 15C0             		jsr	(PlaySound_Special).l ;	play smashing sound
0001A5B0 4EF9 0000 DDC8             		jmp	DisplaySprite
0001A5B6                            ; ===========================================================================
0001A5B6 0080 0000                  Obj83_FragSpeed:dc.w $80, 0
0001A5BA 0120 00C0                  		dc.w $120, $C0
0001A5BE FFF8 FFF8                  Obj83_FragPos:	dc.w $FFF8, $FFF8
0001A5C2 0010 0000                  		dc.w $10, 0
0001A5C6 0000 0010                  		dc.w 0,	$10
0001A5CA 0010 0010                  		dc.w $10, $10
0001A5CE                            ; ---------------------------------------------------------------------------
0001A5CE                            ; Sprite mappings - blocks that	disintegrate when Eggman presses a switch
0001A5CE                            ; ---------------------------------------------------------------------------
0001A5CE                            Map_obj83:
0001A5CE                            	include "_maps\obj83.asm"
0001A5CE                            ; ---------------------------------------------------------------------------
0001A5CE                            ; Sprite mappings - blocks that	disintegrate when Eggman presses a switch
0001A5CE                            ; ---------------------------------------------------------------------------
0001A5CE 0000 0000                  		dc.w byte_19D1C-Map_obj83, byte_19D22-Map_obj83
0001A5D2 0000 0000                  		dc.w byte_19D2E-Map_obj83, byte_19D3A-Map_obj83
0001A5D6 0000                       		dc.w byte_19D46-Map_obj83
0001A5D8 01                         byte_19D1C:	dc.b 1
0001A5D9 F00F 0000 F0               		dc.b $F0, $F, 0, 0, $F0
0001A5DE 02                         byte_19D22:	dc.b 2
0001A5DF F801 0000 F8               		dc.b $F8, 1, 0,	0, $F8
0001A5E4 F801 0004 00               		dc.b $F8, 1, 0,	4, 0
0001A5E9 00                         		dc.b 0
0001A5EA 02                         byte_19D2E:	dc.b 2
0001A5EB F801 0008 F8               		dc.b $F8, 1, 0,	8, $F8
0001A5F0 F801 000C 00               		dc.b $F8, 1, 0,	$C, 0
0001A5F5 00                         		dc.b 0
0001A5F6 02                         byte_19D3A:	dc.b 2
0001A5F7 F801 0002 F8               		dc.b $F8, 1, 0,	2, $F8
0001A5FC F801 0006 00               		dc.b $F8, 1, 0,	6, 0
0001A601 00                         		dc.b 0
0001A602 02                         byte_19D46:	dc.b 2
0001A603 F801 000A F8               		dc.b $F8, 1, 0,	$A, $F8
0001A608 F801 000E 00               		dc.b $F8, 1, 0,	$E, 0
0001A60E 00                         		even
0001A60E 00                         		even
0001A60E                            
0001A60E                            ; ===========================================================================
0001A60E                            ; ---------------------------------------------------------------------------
0001A60E                            ; Object 85 - Eggman (FZ)
0001A60E                            ; ---------------------------------------------------------------------------
0001A60E                            
0001A60E                            Obj85_Delete:
0001A60E 4EF9 0000 DE04             		jmp	DeleteObject
0001A614                            ; ===========================================================================
0001A614                            
0001A614                            Obj85:					; XREF: Obj_Index
0001A614 7000                       		moveq	#0,d0
0001A616 1028 0024                  		move.b	$24(a0),d0
0001A61A 303B 0000                  		move.w	Obj85_Index(pc,d0.w),d0
0001A61E 4EFB 0000                  		jmp	Obj85_Index(pc,d0.w)
0001A622                            ; ===========================================================================
0001A622 0000                       Obj85_Index:	dc.w Obj85_Main-Obj85_Index
0001A624 0000                       		dc.w Obj85_Eggman-Obj85_Index
0001A626 0000                       		dc.w loc_1A38E-Obj85_Index
0001A628 0000                       		dc.w loc_1A346-Obj85_Index
0001A62A 0000                       		dc.w loc_1A2C6-Obj85_Index
0001A62C 0000                       		dc.w loc_1A3AC-Obj85_Index
0001A62E 0000                       		dc.w loc_1A264-Obj85_Index
0001A630                            
0001A630 0100 0100 0470             Obj85_ObjData:	dc.w $100, $100, $470	; X pos, Y pos,	VRAM setting
0001A636 0001 A306                  		dc.l Map_obj82		; mappings pointer
0001A63A 25B0 0590 0300             		dc.w $25B0, $590, $300
0001A640 0000 0000                  		dc.l Map_obj84
0001A644 26E0 0596 03A0             		dc.w $26E0, $596, $3A0
0001A64A 0000 0000                  		dc.l Map_FZBoss
0001A64E 26E0 0596 0470             		dc.w $26E0, $596, $470
0001A654 0001 A306                  		dc.l Map_obj82
0001A658 26E0 0596 0400             		dc.w $26E0, $596, $400
0001A65E 0001 8648                  		dc.l Map_Eggman
0001A662 26E0 0596 0400             		dc.w $26E0, $596, $400
0001A668 0001 8648                  		dc.l Map_Eggman
0001A66C                            
0001A66C 0200 0420 19               Obj85_ObjData2:	dc.b 2,	0, 4, $20, $19	; routine num, animation, sprite priority, width, height
0001A671 0400 0112 08               		dc.b 4,	0, 1, $12, 8
0001A676 0600 0300 00               		dc.b 6,	0, 3, 0, 0
0001A67B 0800 0300 00               		dc.b 8,	0, 3, 0, 0
0001A680 0A00 0320 20               		dc.b $A, 0, 3, $20, $20
0001A685 0C00 0300 00               		dc.b $C, 0, 3, 0, 0
0001A68A                            ; ===========================================================================
0001A68A                            
0001A68A                            Obj85_Main:				; XREF: Obj85_Index
0001A68A 45FA FFA4                  		lea	Obj85_ObjData(pc),a2
0001A68E 47FA FFDC                  		lea	Obj85_ObjData2(pc),a3
0001A692 2248                       		movea.l	a0,a1
0001A694 7205                       		moveq	#5,d1
0001A696 6000                       		bra.s	Obj85_LoadBoss
0001A698                            ; ===========================================================================
0001A698                            
0001A698                            Obj85_Loop:
0001A698 4EB9 0000 E264             		jsr	SingleObjLoad2
0001A69E 6600                       		bne.s	loc_19E20
0001A6A0                            
0001A6A0                            Obj85_LoadBoss:				; XREF: Obj85_Main
0001A6A0 12BC 0085                  		move.b	#$85,(a1)
0001A6A4 335A 0008                  		move.w	(a2)+,8(a1)
0001A6A8 335A 000C                  		move.w	(a2)+,$C(a1)
0001A6AC 335A 0002                  		move.w	(a2)+,2(a1)
0001A6B0 235A 0004                  		move.l	(a2)+,4(a1)
0001A6B4 135B 0024                  		move.b	(a3)+,$24(a1)
0001A6B8 135B 001C                  		move.b	(a3)+,$1C(a1)
0001A6BC 135B 0018                  		move.b	(a3)+,$18(a1)
0001A6C0 135B 0017                  		move.b	(a3)+,$17(a1)
0001A6C4 135B 0016                  		move.b	(a3)+,$16(a1)
0001A6C8 137C 0004 0001             		move.b	#4,1(a1)
0001A6CE 08E8 0007 0001             		bset	#7,1(a0)
0001A6D4 2348 0034                  		move.l	a0,$34(a1)
0001A6D8 51C9 FFBE                  		dbf	d1,Obj85_Loop
0001A6DC                            
0001A6DC                            loc_19E20:
0001A6DC 45E8 0036                  		lea	$36(a0),a2
0001A6E0 4EB9 0000 E24E             		jsr	SingleObjLoad
0001A6E6 6600                       		bne.s	loc_19E5A
0001A6E8 12BC 0086                  		move.b	#$86,(a1)	; load energy ball object
0001A6EC 3489                       		move.w	a1,(a2)
0001A6EE 2348 0034                  		move.l	a0,$34(a1)
0001A6F2 45E8 0038                  		lea	$38(a0),a2
0001A6F6 7400                       		moveq	#0,d2
0001A6F8 7203                       		moveq	#3,d1
0001A6FA                            
0001A6FA                            loc_19E3E:
0001A6FA 4EB9 0000 E264             		jsr	SingleObjLoad2
0001A700 6600                       		bne.s	loc_19E5A
0001A702 34C9                       		move.w	a1,(a2)+
0001A704 12BC 0084                  		move.b	#$84,(a1)	; load crushing	cylinder object
0001A708 2348 0034                  		move.l	a0,$34(a1)
0001A70C 1342 0028                  		move.b	d2,$28(a1)
0001A710 5442                       		addq.w	#2,d2
0001A712 51C9 FFE6                  		dbf	d1,loc_19E3E
0001A716                            
0001A716                            loc_19E5A:
0001A716 317C 0000 0034             		move.w	#0,$34(a0)
0001A71C 117C 0008 0021             		move.b	#8,$21(a0)	; set number of	hits to	8
0001A722 317C FFFF 0030             		move.w	#-1,$30(a0)
0001A728                            
0001A728                            Obj85_Eggman:				; XREF: Obj85_Index
0001A728 7000                       		moveq	#0,d0
0001A72A 1028 0034                  		move.b	$34(a0),d0
0001A72E 303B 0000                  		move.w	off_19E80(pc,d0.w),d0
0001A732 4EBB 0000                  		jsr	off_19E80(pc,d0.w)
0001A736 4EF9 0000 DDC8             		jmp	DisplaySprite
0001A73C                            ; ===========================================================================
0001A73C 0000 0000                  off_19E80:	dc.w loc_19E90-off_19E80, loc_19EA8-off_19E80
0001A740 0000 0000                  		dc.w loc_19FE6-off_19E80, loc_1A02A-off_19E80
0001A744 0000 0000                  		dc.w loc_1A074-off_19E80, loc_1A112-off_19E80
0001A748 0000 0000                  		dc.w loc_1A192-off_19E80, loc_1A1D4-off_19E80
0001A74C                            ; ===========================================================================
0001A74C                            
0001A74C                            loc_19E90:				; XREF: off_19E80
0001A74C 4AB8 F680                  		tst.l	($FFFFF680).w
0001A750 6600                       		bne.s	loc_19EA2
0001A752 0C78 2450 F700             		cmpi.w	#$2450,($FFFFF700).w
0001A758 6500                       		bcs.s	loc_19EA2
0001A75A 5428 0034                  		addq.b	#2,$34(a0)
0001A75E                            
0001A75E                            loc_19EA2:
0001A75E 52B8 F636                  		addq.l	#1,($FFFFF636).w
0001A762 4E75                       		rts	
0001A764                            ; ===========================================================================
0001A764                            
0001A764                            loc_19EA8:				; XREF: off_19E80
0001A764 4A68 0030                  		tst.w	$30(a0)
0001A768 6A00                       		bpl.s	loc_19F10
0001A76A 4268 0030                  		clr.w	$30(a0)
0001A76E 4EB9 0000 2C86             		jsr	(RandomNumber).l
0001A774 0240 000C                  		andi.w	#$C,d0
0001A778 3200                       		move.w	d0,d1
0001A77A 5441                       		addq.w	#2,d1
0001A77C 4A80                       		tst.l	d0
0001A77E 6A00                       		bpl.s	loc_19EC6
0001A780 C141                       		exg	d1,d0
0001A782                            
0001A782                            loc_19EC6:
0001A782 43FA 0000                  		lea	word_19FD6(pc),a1
0001A786 3031 0000                  		move.w	(a1,d0.w),d0
0001A78A 3231 1000                  		move.w	(a1,d1.w),d1
0001A78E 3140 0030                  		move.w	d0,$30(a0)
0001A792 74FF                       		moveq	#-1,d2
0001A794 3430 0038                  		move.w	$38(a0,d0.w),d2
0001A798 2242                       		movea.l	d2,a1
0001A79A 137C 00FF 0029             		move.b	#-1,$29(a1)
0001A7A0 337C FFFF 0030             		move.w	#-1,$30(a1)
0001A7A6 3430 1038                  		move.w	$38(a0,d1.w),d2
0001A7AA 2242                       		movea.l	d2,a1
0001A7AC 137C 0001 0029             		move.b	#1,$29(a1)
0001A7B2 337C 0000 0030             		move.w	#0,$30(a1)
0001A7B8 317C 0001 0032             		move.w	#1,$32(a0)
0001A7BE 4228 0035                  		clr.b	$35(a0)
0001A7C2 303C 00B7                  		move.w	#$B7,d0
0001A7C6 4EB9 0000 15C0             		jsr	(PlaySound_Special).l ;	play rumbling sound
0001A7CC                            
0001A7CC                            loc_19F10:
0001A7CC 4A68 0032                  		tst.w	$32(a0)
0001A7D0 6B00 0000                  		bmi.w	loc_19FA6
0001A7D4 08A8 0000 0022             		bclr	#0,$22(a0)
0001A7DA 3038 D008                  		move.w	($FFFFD008).w,d0
0001A7DE 9068 0008                  		sub.w	8(a0),d0
0001A7E2 6500                       		bcs.s	loc_19F2E
0001A7E4 08E8 0000 0022             		bset	#0,$22(a0)
0001A7EA                            
0001A7EA                            loc_19F2E:
0001A7EA 323C 002B                  		move.w	#$2B,d1
0001A7EE 343C 0014                  		move.w	#$14,d2
0001A7F2 363C 0014                  		move.w	#$14,d3
0001A7F6 3828 0008                  		move.w	8(a0),d4
0001A7FA 4EB9 0001 0198             		jsr	SolidObject
0001A800 4A44                       		tst.w	d4
0001A802 6E00                       		bgt.s	loc_19F50
0001A804                            
0001A804                            loc_19F48:
0001A804 4A28 0035                  		tst.b	$35(a0)
0001A808 6600                       		bne.s	loc_19F88
0001A80A 6000                       		bra.s	loc_19F96
0001A80C                            ; ===========================================================================
0001A80C                            
0001A80C                            loc_19F50:
0001A80C 5E78 F636                  		addq.w	#7,($FFFFF636).w
0001A810 0C38 0002 D01C             		cmpi.b	#2,($FFFFD01C).w
0001A816 66EC                       		bne.s	loc_19F48
0001A818 303C 0300                  		move.w	#$300,d0
0001A81C 0828 0000 0022             		btst	#0,$22(a0)
0001A822 6600                       		bne.s	loc_19F6A
0001A824 4440                       		neg.w	d0
0001A826                            
0001A826                            loc_19F6A:
0001A826 31C0 D010                  		move.w	d0,($FFFFD010).w
0001A82A 4A28 0035                  		tst.b	$35(a0)
0001A82E 6600                       		bne.s	loc_19F88
0001A830 5328 0021                  		subq.b	#1,$21(a0)
0001A834 117C 0064 0035             		move.b	#$64,$35(a0)
0001A83A 303C 00AC                  		move.w	#$AC,d0
0001A83E 4EB9 0000 15C0             		jsr	(PlaySound_Special).l ;	play boss damage sound
0001A844                            
0001A844                            loc_19F88:
0001A844 5328 0035                  		subq.b	#1,$35(a0)
0001A848 6700                       		beq.s	loc_19F96
0001A84A 117C 0003 001C             		move.b	#3,$1C(a0)
0001A850 6000                       		bra.s	loc_19F9C
0001A852                            ; ===========================================================================
0001A852                            
0001A852                            loc_19F96:
0001A852 117C 0001 001C             		move.b	#1,$1C(a0)
0001A858                            
0001A858                            loc_19F9C:
0001A858 43FA FA7A                  		lea	Ani_obj82(pc),a1
0001A85C 4EF9 0000 AE88             		jmp	AnimateSprite
0001A862                            ; ===========================================================================
0001A862                            
0001A862                            loc_19FA6:
0001A862 4A28 0021                  		tst.b	$21(a0)
0001A866 6700                       		beq.s	loc_19FBC
0001A868 5428 0034                  		addq.b	#2,$34(a0)
0001A86C 317C FFFF 0030             		move.w	#-1,$30(a0)
0001A872 4268 0032                  		clr.w	$32(a0)
0001A876 4E75                       		rts	
0001A878                            ; ===========================================================================
0001A878                            
0001A878                            loc_19FBC:
0001A878 117C 0006 0034             		move.b	#6,$34(a0)
0001A87E 317C 25C0 0008             		move.w	#$25C0,8(a0)
0001A884 317C 053C 000C             		move.w	#$53C,$C(a0)
0001A88A 117C 0014 0016             		move.b	#$14,$16(a0)
0001A890 4E75                       		rts	
0001A892                            ; ===========================================================================
0001A892 0000 0002 0002 0004 0004+  word_19FD6:	dc.w 0,	2, 2, 4, 4, 6, 6, 0
0001A8A2                            ; ===========================================================================
0001A8A2                            
0001A8A2                            loc_19FE6:				; XREF: off_19E80
0001A8A2 70FF                       		moveq	#-1,d0
0001A8A4 3028 0036                  		move.w	$36(a0),d0
0001A8A8 2240                       		movea.l	d0,a1
0001A8AA 4A68 0030                  		tst.w	$30(a0)
0001A8AE 6A00                       		bpl.s	loc_1A000
0001A8B0 4268 0030                  		clr.w	$30(a0)
0001A8B4 137C 00FF 0029             		move.b	#-1,$29(a1)
0001A8BA 6100                       		bsr.s	loc_1A020
0001A8BC                            
0001A8BC                            loc_1A000:
0001A8BC 700F                       		moveq	#$F,d0
0001A8BE C078 FE0E                  		and.w	($FFFFFE0E).w,d0
0001A8C2 6600                       		bne.s	loc_1A00A
0001A8C4 6100                       		bsr.s	loc_1A020
0001A8C6                            
0001A8C6                            loc_1A00A:
0001A8C6 4A68 0032                  		tst.w	$32(a0)
0001A8CA 6700                       		beq.s	locret_1A01E
0001A8CC 5528 0034                  		subq.b	#2,$34(a0)
0001A8D0 317C FFFF 0030             		move.w	#-1,$30(a0)
0001A8D6 4268 0032                  		clr.w	$32(a0)
0001A8DA                            
0001A8DA                            locret_1A01E:
0001A8DA 4E75                       		rts	
0001A8DC                            ; ===========================================================================
0001A8DC                            
0001A8DC                            loc_1A020:
0001A8DC 303C 00B1                  		move.w	#$B1,d0
0001A8E0 4EF9 0000 15C0             		jmp	(PlaySound_Special).l ;	play electricity sound
0001A8E6                            ; ===========================================================================
0001A8E6                            
0001A8E6                            loc_1A02A:				; XREF: off_19E80
0001A8E6 117C 0030 0017             		move.b	#$30,$17(a0)
0001A8EC 08E8 0000 0022             		bset	#0,$22(a0)
0001A8F2 4EB9 0000 DDA2             		jsr	SpeedToPos
0001A8F8 117C 0006 001A             		move.b	#6,$1A(a0)
0001A8FE 0668 0010 0012             		addi.w	#$10,$12(a0)
0001A904 0C68 059C 000C             		cmpi.w	#$59C,$C(a0)
0001A90A 6500                       		bcs.s	loc_1A070
0001A90C 317C 059C 000C             		move.w	#$59C,$C(a0)
0001A912 5428 0034                  		addq.b	#2,$34(a0)
0001A916 117C 0020 0017             		move.b	#$20,$17(a0)
0001A91C 317C 0100 0010             		move.w	#$100,$10(a0)
0001A922 317C FF00 0012             		move.w	#-$100,$12(a0)
0001A928 5438 F742                  		addq.b	#2,($FFFFF742).w
0001A92C                            
0001A92C                            loc_1A070:
0001A92C 6000 0000                  		bra.w	loc_1A166
0001A930                            ; ===========================================================================
0001A930                            
0001A930                            loc_1A074:				; XREF: off_19E80
0001A930 08E8 0000 0022             		bset	#0,$22(a0)
0001A936 117C 0004 001C             		move.b	#4,$1C(a0)
0001A93C 4EB9 0000 DDA2             		jsr	SpeedToPos
0001A942 0668 0010 0012             		addi.w	#$10,$12(a0)
0001A948 0C68 05A3 000C             		cmpi.w	#$5A3,$C(a0)
0001A94E 6500                       		bcs.s	loc_1A09A
0001A950 317C FFC0 0012             		move.w	#-$40,$12(a0)
0001A956                            
0001A956                            loc_1A09A:
0001A956 317C 0400 0010             		move.w	#$400,$10(a0)
0001A95C 3028 0008                  		move.w	8(a0),d0
0001A960 9078 D008                  		sub.w	($FFFFD008).w,d0
0001A964 6A00                       		bpl.s	loc_1A0B4
0001A966 317C 0500 0010             		move.w	#$500,$10(a0)
0001A96C 6000 0000                  		bra.w	loc_1A0F2
0001A970                            ; ===========================================================================
0001A970                            
0001A970                            loc_1A0B4:
0001A970 0440 0070                  		subi.w	#$70,d0
0001A974 6500                       		bcs.s	loc_1A0F2
0001A976 0468 0100 0010             		subi.w	#$100,$10(a0)
0001A97C 5140                       		subq.w	#8,d0
0001A97E 6500                       		bcs.s	loc_1A0F2
0001A980 0468 0100 0010             		subi.w	#$100,$10(a0)
0001A986 5140                       		subq.w	#8,d0
0001A988 6500                       		bcs.s	loc_1A0F2
0001A98A 0468 0080 0010             		subi.w	#$80,$10(a0)
0001A990 5140                       		subq.w	#8,d0
0001A992 6500                       		bcs.s	loc_1A0F2
0001A994 0468 0080 0010             		subi.w	#$80,$10(a0)
0001A99A 5140                       		subq.w	#8,d0
0001A99C 6500                       		bcs.s	loc_1A0F2
0001A99E 0468 0080 0010             		subi.w	#$80,$10(a0)
0001A9A4 0440 0038                  		subi.w	#$38,d0
0001A9A8 6500                       		bcs.s	loc_1A0F2
0001A9AA 4268 0010                  		clr.w	$10(a0)
0001A9AE                            
0001A9AE                            loc_1A0F2:
0001A9AE 0C68 26A0 0008             		cmpi.w	#$26A0,8(a0)
0001A9B4 6500                       		bcs.s	loc_1A110
0001A9B6 317C 26A0 0008             		move.w	#$26A0,8(a0)
0001A9BC 317C 0240 0010             		move.w	#$240,$10(a0)
0001A9C2 317C FB40 0012             		move.w	#-$4C0,$12(a0)
0001A9C8 5428 0034                  		addq.b	#2,$34(a0)
0001A9CC                            
0001A9CC                            loc_1A110:
0001A9CC 6000                       		bra.s	loc_1A15C
0001A9CE                            ; ===========================================================================
0001A9CE                            
0001A9CE                            loc_1A112:				; XREF: off_19E80
0001A9CE 4EB9 0000 DDA2             		jsr	SpeedToPos
0001A9D4 0C68 26E0 0008             		cmpi.w	#$26E0,8(a0)
0001A9DA 6500                       		bcs.s	loc_1A124
0001A9DC 4268 0010                  		clr.w	$10(a0)
0001A9E0                            
0001A9E0                            loc_1A124:
0001A9E0 0668 0034 0012             		addi.w	#$34,$12(a0)
0001A9E6 4A68 0012                  		tst.w	$12(a0)
0001A9EA 6B00                       		bmi.s	loc_1A142
0001A9EC 0C68 0592 000C             		cmpi.w	#$592,$C(a0)
0001A9F2 6500                       		bcs.s	loc_1A142
0001A9F4 317C 0592 000C             		move.w	#$592,$C(a0)
0001A9FA 4268 0012                  		clr.w	$12(a0)
0001A9FE                            
0001A9FE                            loc_1A142:
0001A9FE 3028 0010                  		move.w	$10(a0),d0
0001AA02 8068 0012                  		or.w	$12(a0),d0
0001AA06 6600                       		bne.s	loc_1A15C
0001AA08 5428 0034                  		addq.b	#2,$34(a0)
0001AA0C 317C FE80 0012             		move.w	#-$180,$12(a0)
0001AA12 117C 0001 0021             		move.b	#1,$21(a0)
0001AA18                            
0001AA18                            loc_1A15C:
0001AA18 43FA F8BA                  		lea	Ani_obj82(pc),a1
0001AA1C 4EB9 0000 AE88             		jsr	AnimateSprite
0001AA22                            
0001AA22                            loc_1A166:
0001AA22 0C78 2700 F72A             		cmpi.w	#$2700,($FFFFF72A).w
0001AA28 6C00                       		bge.s	loc_1A172
0001AA2A 5478 F72A                  		addq.w	#2,($FFFFF72A).w
0001AA2E                            
0001AA2E                            loc_1A172:
0001AA2E 0C28 000C 0034             		cmpi.b	#$C,$34(a0)
0001AA34 6C00                       		bge.s	locret_1A190
0001AA36 323C 001B                  		move.w	#$1B,d1
0001AA3A 343C 0070                  		move.w	#$70,d2
0001AA3E 363C 0071                  		move.w	#$71,d3
0001AA42 3828 0008                  		move.w	8(a0),d4
0001AA46 4EF9 0001 0198             		jmp	SolidObject
0001AA4C                            ; ===========================================================================
0001AA4C                            
0001AA4C                            locret_1A190:
0001AA4C 4E75                       		rts	
0001AA4E                            ; ===========================================================================
0001AA4E                            
0001AA4E                            loc_1A192:				; XREF: off_19E80
0001AA4E 217C 0001 8648 0004        		move.l	#Map_Eggman,4(a0)
0001AA56 317C 0400 0002             		move.w	#$400,2(a0)
0001AA5C 117C 0000 001C             		move.b	#0,$1C(a0)
0001AA62 08E8 0000 0022             		bset	#0,$22(a0)
0001AA68 4EB9 0000 DDA2             		jsr	SpeedToPos
0001AA6E 0C68 0544 000C             		cmpi.w	#$544,$C(a0)
0001AA74 6400                       		bcc.s	loc_1A1D0
0001AA76 317C 0180 0010             		move.w	#$180,$10(a0)
0001AA7C 317C FFE8 0012             		move.w	#-$18,$12(a0)
0001AA82 117C 000F 0020             		move.b	#$F,$20(a0)
0001AA88 5428 0034                  		addq.b	#2,$34(a0)
0001AA8C                            
0001AA8C                            loc_1A1D0:
0001AA8C 6000 FF8A                  		bra.w	loc_1A15C
0001AA90                            ; ===========================================================================
0001AA90                            
0001AA90                            loc_1A1D4:				; XREF: off_19E80
0001AA90 08E8 0000 0022             		bset	#0,$22(a0)
0001AA96 4EB9 0000 DDA2             		jsr	SpeedToPos
0001AA9C 4A68 0030                  		tst.w	$30(a0)
0001AAA0 6600                       		bne.s	loc_1A1FC
0001AAA2 4A28 0020                  		tst.b	$20(a0)
0001AAA6 6600                       		bne.s	loc_1A216
0001AAA8 317C 001E 0030             		move.w	#$1E,$30(a0)
0001AAAE 303C 00AC                  		move.w	#$AC,d0
0001AAB2 4EB9 0000 15C0             		jsr	(PlaySound_Special).l ;	play boss damage sound
0001AAB8                            
0001AAB8                            loc_1A1FC:
0001AAB8 5368 0030                  		subq.w	#1,$30(a0)
0001AABC 6600                       		bne.s	loc_1A216
0001AABE 4A28 0022                  		tst.b	$22(a0)
0001AAC2 6A00                       		bpl.s	loc_1A210
0001AAC4 317C 0060 0012             		move.w	#$60,$12(a0)
0001AACA 6000                       		bra.s	loc_1A216
0001AACC                            ; ===========================================================================
0001AACC                            
0001AACC                            loc_1A210:
0001AACC 117C 000F 0020             		move.b	#$F,$20(a0)
0001AAD2                            
0001AAD2                            loc_1A216:
0001AAD2 0C78 2790 D008             		cmpi.w	#$2790,($FFFFD008).w
0001AAD8 6D00                       		blt.s	loc_1A23A
0001AADA 11FC 0001 F7CC             		move.b	#1,($FFFFF7CC).w
0001AAE0 31FC 0000 F602             		move.w	#0,($FFFFF602).w
0001AAE6 4278 D014                  		clr.w	($FFFFD014).w
0001AAEA 4A68 0012                  		tst.w	$12(a0)
0001AAEE 6A00                       		bpl.s	loc_1A248
0001AAF0 31FC 0100 F602             		move.w	#$100,($FFFFF602).w
0001AAF6                            
0001AAF6                            loc_1A23A:
0001AAF6 0C78 27E0 D008             		cmpi.w	#$27E0,($FFFFD008).w
0001AAFC 6D00                       		blt.s	loc_1A248
0001AAFE 31FC 27E0 D008             		move.w	#$27E0,($FFFFD008).w
0001AB04                            
0001AB04                            loc_1A248:
0001AB04 0C68 2900 0008             		cmpi.w	#$2900,8(a0)
0001AB0A 6500                       		bcs.s	loc_1A260
0001AB0C 4A28 0001                  		tst.b	1(a0)
0001AB10 6B00                       		bmi.s	loc_1A260
0001AB12 11FC 0018 F600             		move.b	#$18,($FFFFF600).w
0001AB18 6000 FAF4                  		bra.w	Obj85_Delete
0001AB1C                            ; ===========================================================================
0001AB1C                            
0001AB1C                            loc_1A260:
0001AB1C 6000 FEFA                  		bra.w	loc_1A15C
0001AB20                            ; ===========================================================================
0001AB20                            
0001AB20                            loc_1A264:				; XREF: Obj85_Index
0001AB20 2268 0034                  		movea.l	$34(a0),a1
0001AB24 1011                       		move.b	(a1),d0
0001AB26 B010                       		cmp.b	(a0),d0
0001AB28 6600 FAE4                  		bne.w	Obj85_Delete
0001AB2C 117C 0007 001C             		move.b	#7,$1C(a0)
0001AB32 0C29 000C 0034             		cmpi.b	#$C,$34(a1)
0001AB38 6C00                       		bge.s	loc_1A280
0001AB3A 6000                       		bra.s	loc_1A2A6
0001AB3C                            ; ===========================================================================
0001AB3C                            
0001AB3C                            loc_1A280:
0001AB3C 4A69 0010                  		tst.w	$10(a1)
0001AB40 6700                       		beq.s	loc_1A28C
0001AB42 117C 000B 001C             		move.b	#$B,$1C(a0)
0001AB48                            
0001AB48                            loc_1A28C:
0001AB48 43FA DA9A                  		lea	Ani_Eggman(pc),a1
0001AB4C 4EB9 0000 AE88             		jsr	AnimateSprite
0001AB52                            
0001AB52                            loc_1A296:
0001AB52 2268 0034                  		movea.l	$34(a0),a1
0001AB56 3169 0008 0008             		move.w	8(a1),8(a0)
0001AB5C 3169 000C 000C             		move.w	$C(a1),$C(a0)
0001AB62                            
0001AB62                            loc_1A2A6:
0001AB62 2268 0034                  		movea.l	$34(a0),a1
0001AB66 1169 0022 0022             		move.b	$22(a1),$22(a0)
0001AB6C 7003                       		moveq	#3,d0
0001AB6E C028 0022                  		and.b	$22(a0),d0
0001AB72 0228 00FC 0001             		andi.b	#-4,1(a0)
0001AB78 8128 0001                  		or.b	d0,1(a0)
0001AB7C 4EF9 0000 DDC8             		jmp	DisplaySprite
0001AB82                            ; ===========================================================================
0001AB82                            
0001AB82                            loc_1A2C6:				; XREF: Obj85_Index
0001AB82 2268 0034                  		movea.l	$34(a0),a1
0001AB86 1011                       		move.b	(a1),d0
0001AB88 B010                       		cmp.b	(a0),d0
0001AB8A 6600 FA82                  		bne.w	Obj85_Delete
0001AB8E 0CA9 0001 8648 0004        		cmpi.l	#Map_Eggman,4(a1)
0001AB96 6700                       		beq.s	loc_1A2E4
0001AB98 117C 000A 001A             		move.b	#$A,$1A(a0)
0001AB9E 60C2                       		bra.s	loc_1A2A6
0001ABA0                            ; ===========================================================================
0001ABA0                            
0001ABA0                            loc_1A2E4:
0001ABA0 117C 0001 001C             		move.b	#1,$1C(a0)
0001ABA6 4A29 0021                  		tst.b	$21(a1)
0001ABAA 6F00                       		ble.s	loc_1A312
0001ABAC 117C 0006 001C             		move.b	#6,$1C(a0)
0001ABB2 217C 0001 8648 0004        		move.l	#Map_Eggman,4(a0)
0001ABBA 317C 0400 0002             		move.w	#$400,2(a0)
0001ABC0 43FA DA22                  		lea	Ani_Eggman(pc),a1
0001ABC4 4EB9 0000 AE88             		jsr	AnimateSprite
0001ABCA 6000 FF86                  		bra.w	loc_1A296
0001ABCE                            ; ===========================================================================
0001ABCE                            
0001ABCE                            loc_1A312:
0001ABCE 4A28 0001                  		tst.b	1(a0)
0001ABD2 6A00 FA3A                  		bpl.w	Obj85_Delete
0001ABD6 6100 D588                  		bsr.w	BossDefeated
0001ABDA 117C 0002 0018             		move.b	#2,$18(a0)
0001ABE0 117C 0000 001C             		move.b	#0,$1C(a0)
0001ABE6 217C 0000 0000 0004        		move.l	#Map_Eggman2,4(a0)
0001ABEE 317C 03A0 0002             		move.w	#$3A0,2(a0)
0001ABF4 43FA 0000                  		lea	Ani_obj85(pc),a1
0001ABF8 4EB9 0000 AE88             		jsr	AnimateSprite
0001ABFE 6000 FF52                  		bra.w	loc_1A296
0001AC02                            ; ===========================================================================
0001AC02                            
0001AC02                            loc_1A346:				; XREF: Obj85_Index
0001AC02 08E8 0000 0022             		bset	#0,$22(a0)
0001AC08 2268 0034                  		movea.l	$34(a0),a1
0001AC0C 0CA9 0001 8648 0004        		cmpi.l	#Map_Eggman,4(a1)
0001AC14 6700                       		beq.s	loc_1A35E
0001AC16 6000 FF4A                  		bra.w	loc_1A2A6
0001AC1A                            ; ===========================================================================
0001AC1A                            
0001AC1A                            loc_1A35E:
0001AC1A 3169 0008 0008             		move.w	8(a1),8(a0)
0001AC20 3169 000C 000C             		move.w	$C(a1),$C(a0)
0001AC26 4A28 001E                  		tst.b	$1E(a0)
0001AC2A 6600                       		bne.s	loc_1A376
0001AC2C 117C 0014 001E             		move.b	#$14,$1E(a0)
0001AC32                            
0001AC32                            loc_1A376:
0001AC32 5328 001E                  		subq.b	#1,$1E(a0)
0001AC36 6E00                       		bgt.s	loc_1A38A
0001AC38 5228 001A                  		addq.b	#1,$1A(a0)
0001AC3C 0C28 0002 001A             		cmpi.b	#2,$1A(a0)
0001AC42 6E00 F9CA                  		bgt.w	Obj85_Delete
0001AC46                            
0001AC46                            loc_1A38A:
0001AC46 6000 FF0A                  		bra.w	loc_1A296
0001AC4A                            ; ===========================================================================
0001AC4A                            
0001AC4A                            loc_1A38E:				; XREF: Obj85_Index
0001AC4A 117C 000B 001A             		move.b	#$B,$1A(a0)
0001AC50 3038 D008                  		move.w	($FFFFD008).w,d0
0001AC54 9068 0008                  		sub.w	8(a0),d0
0001AC58 6500                       		bcs.s	loc_1A3A6
0001AC5A 4A28 0001                  		tst.b	1(a0)
0001AC5E 6A00 F9AE                  		bpl.w	Obj85_Delete
0001AC62                            
0001AC62                            loc_1A3A6:
0001AC62 4EF9 0000 DDC8             		jmp	DisplaySprite
0001AC68                            ; ===========================================================================
0001AC68                            
0001AC68                            loc_1A3AC:				; XREF: Obj85_Index
0001AC68 117C 0000 001A             		move.b	#0,$1A(a0)
0001AC6E 08E8 0000 0022             		bset	#0,$22(a0)
0001AC74 2268 0034                  		movea.l	$34(a0),a1
0001AC78 0C29 000C 0034             		cmpi.b	#$C,$34(a1)
0001AC7E 6600                       		bne.s	loc_1A3D0
0001AC80 0CA9 0001 8648 0004        		cmpi.l	#Map_Eggman,4(a1)
0001AC88 6700 F984                  		beq.w	Obj85_Delete
0001AC8C                            
0001AC8C                            loc_1A3D0:
0001AC8C 6000 FED4                  		bra.w	loc_1A2A6
0001AC90                            ; ===========================================================================
0001AC90                            Ani_obj85:
0001AC90                            	include "_anim\obj85.asm"
0001AC90                            ; ---------------------------------------------------------------------------
0001AC90                            ; Animation script - Eggman (FZ)
0001AC90                            ; ---------------------------------------------------------------------------
0001AC90 0000                       		dc.w byte_1A3D6-Ani_obj85
0001AC92 0300 01FF                  byte_1A3D6:	dc.b 3,	0, 1, $FF
0001AC96                            		even
0001AC96                            		even
0001AC96                            
0001AC96                            Map_Eggman2:
0001AC96                            	include "_maps\Eggman2.asm"
0001AC96                            ; ---------------------------------------------------------------------------
0001AC96                            ; Sprite mappings - Eggman (FZ)
0001AC96                            ; ---------------------------------------------------------------------------
0001AC96 0000                       		dc.w byte_1A3DE-Map_Eggman2
0001AC98 0000                       		dc.w byte_1A3FD-Map_Eggman2
0001AC9A 06                         byte_1A3DE:	dc.b 6
0001AC9B E408 0020 F4               		dc.b $E4, 8, 0,	$20, $F4
0001ACA0 EC0D 0023 E4               		dc.b $EC, $D, 0, $23, $E4
0001ACA5 EC09 002B 04               		dc.b $EC, 9, 0,	$2B, 4
0001ACAA FC05 203A E4               		dc.b $FC, 5, $20, $3A, $E4
0001ACAF FC0E 203E 04               		dc.b $FC, $E, $20, $3E,	4
0001ACB4 1404 204A 04               		dc.b $14, 4, $20, $4A, 4
0001ACB9 06                         byte_1A3FD:	dc.b 6
0001ACBA E40A 0031 F4               		dc.b $E4, $A, 0, $31, $F4
0001ACBF EC05 0023 E4               		dc.b $EC, 5, 0,	$23, $E4
0001ACC4 EC09 002B 04               		dc.b $EC, 9, 0,	$2B, 4
0001ACC9 FC05 203A E4               		dc.b $FC, 5, $20, $3A, $E4
0001ACCE FC0E 203E 04               		dc.b $FC, $E, $20, $3E,	4
0001ACD3 1404 204A 04               		dc.b $14, 4, $20, $4A, 4
0001ACD8                            		even
0001ACD8                            		even
0001ACD8                            
0001ACD8                            Map_FZBoss:
0001ACD8                            	include "_maps\FZ boss.asm"
0001ACD8                            ; ---------------------------------------------------------------------------
0001ACD8                            ; Sprite mappings - boss (FZ)
0001ACD8                            ; ---------------------------------------------------------------------------
0001ACD8 0000                       		dc.w byte_1A422-Map_FZBoss
0001ACDA 0000                       		dc.w byte_1A42D-Map_FZBoss
0001ACDC 0000                       		dc.w byte_1A43D-Map_FZBoss
0001ACDE 02                         byte_1A422:	dc.b 2
0001ACDF 140E 2800 F4               		dc.b $14, $E, $28, 0, $F4
0001ACE4 2400 280C EC               		dc.b $24, 0, $28, $C, $EC
0001ACE9 03                         byte_1A42D:	dc.b 3
0001ACEA 0C05 280D 0C               		dc.b $C, 5, $28, $D, $C
0001ACEF 1C00 2811 0C               		dc.b $1C, 0, $28, $11, $C
0001ACF4 140D 2812 EC               		dc.b $14, $D, $28, $12,	$EC
0001ACF9 02                         byte_1A43D:	dc.b 2
0001ACFA 0C01 281A 0C               		dc.b $C, 1, $28, $1A, $C
0001ACFF 140C 281C EC               		dc.b $14, $C, $28, $1C,	$EC
0001AD04                            		even
0001AD04                            		even
0001AD04                            
0001AD04                            ; ===========================================================================
0001AD04                            
0001AD04                            Obj84_Delete:
0001AD04 4EF9 0000 DE04             		jmp	DeleteObject
0001AD0A                            ; ===========================================================================
0001AD0A                            ; ---------------------------------------------------------------------------
0001AD0A                            ; Object 84 - cylinder Eggman	hides in (FZ)
0001AD0A                            ; ---------------------------------------------------------------------------
0001AD0A                            
0001AD0A                            Obj84:					; XREF: Obj_Index
0001AD0A 7000                       		moveq	#0,d0
0001AD0C 1028 0024                  		move.b	$24(a0),d0
0001AD10 303B 0000                  		move.w	Obj84_Index(pc,d0.w),d0
0001AD14 4EFB 0000                  		jmp	Obj84_Index(pc,d0.w)
0001AD18                            ; ===========================================================================
0001AD18 0000                       Obj84_Index:	dc.w Obj84_Main-Obj84_Index
0001AD1A 0000                       		dc.w loc_1A4CE-Obj84_Index
0001AD1C 0000                       		dc.w loc_1A57E-Obj84_Index
0001AD1E                            
0001AD1E 24D0 0620                  Obj84_PosData:	dc.w $24D0, $620
0001AD22 2550 0620                  		dc.w $2550, $620
0001AD26 2490 04C0                  		dc.w $2490, $4C0
0001AD2A 2510 04C0                  		dc.w $2510, $4C0
0001AD2E                            ; ===========================================================================
0001AD2E                            
0001AD2E                            Obj84_Main:				; XREF: Obj84_Index
0001AD2E 43FA FFEE                  		lea	Obj84_PosData(pc),a1
0001AD32 7000                       		moveq	#0,d0
0001AD34 1028 0028                  		move.b	$28(a0),d0
0001AD38 D040                       		add.w	d0,d0
0001AD3A D2C0                       		adda.w	d0,a1
0001AD3C 117C 0004 0001             		move.b	#4,1(a0)
0001AD42 08E8 0007 0001             		bset	#7,1(a0)
0001AD48 08E8 0004 0001             		bset	#4,1(a0)
0001AD4E 317C 0300 0002             		move.w	#$300,2(a0)
0001AD54 217C 0000 0000 0004        		move.l	#Map_obj84,4(a0)
0001AD5C 3159 0008                  		move.w	(a1)+,8(a0)
0001AD60 3151 000C                  		move.w	(a1),$C(a0)
0001AD64 3159 0038                  		move.w	(a1)+,$38(a0)
0001AD68 117C 0020 0016             		move.b	#$20,$16(a0)
0001AD6E 117C 0060 0017             		move.b	#$60,$17(a0)
0001AD74 117C 0020 0019             		move.b	#$20,$19(a0)
0001AD7A 117C 0060 0016             		move.b	#$60,$16(a0)
0001AD80 117C 0003 0018             		move.b	#3,$18(a0)
0001AD86 5428 0024                  		addq.b	#2,$24(a0)
0001AD8A                            
0001AD8A                            loc_1A4CE:				; XREF: Obj84_Index
0001AD8A 0C28 0002 0028             		cmpi.b	#2,$28(a0)
0001AD90 6F00                       		ble.s	loc_1A4DC
0001AD92 08E8 0001 0001             		bset	#1,1(a0)
0001AD98                            
0001AD98                            loc_1A4DC:
0001AD98 42A8 003C                  		clr.l	$3C(a0)
0001AD9C 4A28 0029                  		tst.b	$29(a0)
0001ADA0 6700                       		beq.s	loc_1A4EA
0001ADA2 5428 0024                  		addq.b	#2,$24(a0)
0001ADA6                            
0001ADA6                            loc_1A4EA:
0001ADA6 2028 003C                  		move.l	$3C(a0),d0
0001ADAA 2228 0038                  		move.l	$38(a0),d1
0001ADAE D280                       		add.l	d0,d1
0001ADB0 4841                       		swap	d1
0001ADB2 3141 000C                  		move.w	d1,$C(a0)
0001ADB6 0C28 0004 0024             		cmpi.b	#4,$24(a0)
0001ADBC 6600                       		bne.s	loc_1A524
0001ADBE 4A68 0030                  		tst.w	$30(a0)
0001ADC2 6A00                       		bpl.s	loc_1A524
0001ADC4 70F6                       		moveq	#-$A,d0
0001ADC6 0C28 0002 0028             		cmpi.b	#2,$28(a0)
0001ADCC 6F00                       		ble.s	loc_1A514
0001ADCE 700E                       		moveq	#$E,d0
0001ADD0                            
0001ADD0                            loc_1A514:
0001ADD0 D240                       		add.w	d0,d1
0001ADD2 2268 0034                  		movea.l	$34(a0),a1
0001ADD6 3341 000C                  		move.w	d1,$C(a1)
0001ADDA 3368 0008 0008             		move.w	8(a0),8(a1)
0001ADE0                            
0001ADE0                            loc_1A524:
0001ADE0 323C 002B                  		move.w	#$2B,d1
0001ADE4 343C 0060                  		move.w	#$60,d2
0001ADE8 363C 0061                  		move.w	#$61,d3
0001ADEC 3828 0008                  		move.w	8(a0),d4
0001ADF0 4EB9 0001 0198             		jsr	SolidObject
0001ADF6 7000                       		moveq	#0,d0
0001ADF8 3228 003C                  		move.w	$3C(a0),d1
0001ADFC 6A00                       		bpl.s	loc_1A550
0001ADFE 4441                       		neg.w	d1
0001AE00 5141                       		subq.w	#8,d1
0001AE02 6500                       		bcs.s	loc_1A55C
0001AE04 5200                       		addq.b	#1,d0
0001AE06 E841                       		asr.w	#4,d1
0001AE08 D041                       		add.w	d1,d0
0001AE0A 6000                       		bra.s	loc_1A55C
0001AE0C                            ; ===========================================================================
0001AE0C                            
0001AE0C                            loc_1A550:
0001AE0C 0441 0027                  		subi.w	#$27,d1
0001AE10 6500                       		bcs.s	loc_1A55C
0001AE12 5200                       		addq.b	#1,d0
0001AE14 E841                       		asr.w	#4,d1
0001AE16 D041                       		add.w	d1,d0
0001AE18                            
0001AE18                            loc_1A55C:
0001AE18 1140 001A                  		move.b	d0,$1A(a0)
0001AE1C 3038 D008                  		move.w	($FFFFD008).w,d0
0001AE20 9068 0008                  		sub.w	8(a0),d0
0001AE24 6B00                       		bmi.s	loc_1A578
0001AE26 0440 0140                  		subi.w	#$140,d0
0001AE2A 6B00                       		bmi.s	loc_1A578
0001AE2C 4A28 0001                  		tst.b	1(a0)
0001AE30 6A00 FED2                  		bpl.w	Obj84_Delete
0001AE34                            
0001AE34                            loc_1A578:
0001AE34 4EF9 0000 DDC8             		jmp	DisplaySprite
0001AE3A                            ; ===========================================================================
0001AE3A                            
0001AE3A                            loc_1A57E:				; XREF: Obj84_Index
0001AE3A 7000                       		moveq	#0,d0
0001AE3C 1028 0028                  		move.b	$28(a0),d0
0001AE40 303B 0000                  		move.w	off_1A590(pc,d0.w),d0
0001AE44 4EBB 0000                  		jsr	off_1A590(pc,d0.w)
0001AE48 6000 FF5C                  		bra.w	loc_1A4EA
0001AE4C                            ; ===========================================================================
0001AE4C 0000                       off_1A590:	dc.w loc_1A598-off_1A590
0001AE4E 0000                       		dc.w loc_1A598-off_1A590
0001AE50 0000                       		dc.w loc_1A604-off_1A590
0001AE52 0000                       		dc.w loc_1A604-off_1A590
0001AE54                            ; ===========================================================================
0001AE54                            
0001AE54                            loc_1A598:				; XREF: off_1A590
0001AE54 4A28 0029                  		tst.b	$29(a0)
0001AE58 6600                       		bne.s	loc_1A5D4
0001AE5A 2268 0034                  		movea.l	$34(a0),a1
0001AE5E 4A29 0021                  		tst.b	$21(a1)
0001AE62 6600                       		bne.s	loc_1A5B4
0001AE64 6100 D2FA                  		bsr.w	BossDefeated
0001AE68 04A8 0001 0000 003C        		subi.l	#$10000,$3C(a0)
0001AE70                            
0001AE70                            loc_1A5B4:
0001AE70 06A8 0002 0000 003C        		addi.l	#$20000,$3C(a0)
0001AE78 6400                       		bcc.s	locret_1A602
0001AE7A 42A8 003C                  		clr.l	$3C(a0)
0001AE7E 2268 0034                  		movea.l	$34(a0),a1
0001AE82 5369 0032                  		subq.w	#1,$32(a1)
0001AE86 4269 0030                  		clr.w	$30(a1)
0001AE8A 5528 0024                  		subq.b	#2,$24(a0)
0001AE8E 4E75                       		rts	
0001AE90                            ; ===========================================================================
0001AE90                            
0001AE90                            loc_1A5D4:
0001AE90 0C68 FFF0 003C             		cmpi.w	#-$10,$3C(a0)
0001AE96 6C00                       		bge.s	loc_1A5E4
0001AE98 04A8 0002 8000 003C        		subi.l	#$28000,$3C(a0)
0001AEA0                            
0001AEA0                            loc_1A5E4:
0001AEA0 04A8 0000 8000 003C        		subi.l	#$8000,$3C(a0)
0001AEA8 0C68 FF60 003C             		cmpi.w	#-$A0,$3C(a0)
0001AEAE 6E00                       		bgt.s	locret_1A602
0001AEB0 4268 003E                  		clr.w	$3E(a0)
0001AEB4 317C FF60 003C             		move.w	#-$A0,$3C(a0)
0001AEBA 4228 0029                  		clr.b	$29(a0)
0001AEBE                            
0001AEBE                            locret_1A602:
0001AEBE 4E75                       		rts	
0001AEC0                            ; ===========================================================================
0001AEC0                            
0001AEC0                            loc_1A604:				; XREF: off_1A590
0001AEC0 08E8 0001 0001             		bset	#1,1(a0)
0001AEC6 4A28 0029                  		tst.b	$29(a0)
0001AECA 6600                       		bne.s	loc_1A646
0001AECC 2268 0034                  		movea.l	$34(a0),a1
0001AED0 4A29 0021                  		tst.b	$21(a1)
0001AED4 6600                       		bne.s	loc_1A626
0001AED6 6100 D288                  		bsr.w	BossDefeated
0001AEDA 06A8 0001 0000 003C        		addi.l	#$10000,$3C(a0)
0001AEE2                            
0001AEE2                            loc_1A626:
0001AEE2 04A8 0002 0000 003C        		subi.l	#$20000,$3C(a0)
0001AEEA 6400                       		bcc.s	locret_1A674
0001AEEC 42A8 003C                  		clr.l	$3C(a0)
0001AEF0 2268 0034                  		movea.l	$34(a0),a1
0001AEF4 5369 0032                  		subq.w	#1,$32(a1)
0001AEF8 4269 0030                  		clr.w	$30(a1)
0001AEFC 5528 0024                  		subq.b	#2,$24(a0)
0001AF00 4E75                       		rts	
0001AF02                            ; ===========================================================================
0001AF02                            
0001AF02                            loc_1A646:
0001AF02 0C68 0010 003C             		cmpi.w	#$10,$3C(a0)
0001AF08 6D00                       		blt.s	loc_1A656
0001AF0A 06A8 0002 8000 003C        		addi.l	#$28000,$3C(a0)
0001AF12                            
0001AF12                            loc_1A656:
0001AF12 06A8 0000 8000 003C        		addi.l	#$8000,$3C(a0)
0001AF1A 0C68 00A0 003C             		cmpi.w	#$A0,$3C(a0)
0001AF20 6D00                       		blt.s	locret_1A674
0001AF22 4268 003E                  		clr.w	$3E(a0)
0001AF26 317C 00A0 003C             		move.w	#$A0,$3C(a0)
0001AF2C 4228 0029                  		clr.b	$29(a0)
0001AF30                            
0001AF30                            locret_1A674:
0001AF30 4E75                       		rts	
0001AF32                            ; ===========================================================================
0001AF32                            ; ---------------------------------------------------------------------------
0001AF32                            ; Sprite mappings - cylinders Eggman hides in (FZ)
0001AF32                            ; ---------------------------------------------------------------------------
0001AF32                            Map_obj84:
0001AF32                            	include "_maps\obj84.asm"
0001AF32                            ; ---------------------------------------------------------------------------
0001AF32                            ; Sprite mappings - cylinders Eggman hides in (FZ)
0001AF32                            ; ---------------------------------------------------------------------------
0001AF32 0000 0000                  		dc.w byte_1A68E-Map_obj84, byte_1A6AD-Map_obj84
0001AF36 0000 0000                  		dc.w byte_1A6D6-Map_obj84, byte_1A709-Map_obj84
0001AF3A 0000 0000                  		dc.w byte_1A746-Map_obj84, byte_1A788-Map_obj84
0001AF3E 0000 0000                  		dc.w byte_1A788-Map_obj84, byte_1A788-Map_obj84
0001AF42 0000 0000                  		dc.w byte_1A788-Map_obj84, byte_1A788-Map_obj84
0001AF46 0000 0000                  		dc.w byte_1A788-Map_obj84, byte_1A7CF-Map_obj84
0001AF4A 06                         byte_1A68E:	dc.b 6
0001AF4B A00D 4000 E0               		dc.b $A0, $D, $40, 0, $E0
0001AF50 A00D 4800 00               		dc.b $A0, $D, $48, 0, 0
0001AF55 B00C 2008 E0               		dc.b $B0, $C, $20, 8, $E0
0001AF5A B00C 200C 00               		dc.b $B0, $C, $20, $C, 0
0001AF5F B80F 4010 E0               		dc.b $B8, $F, $40, $10,	$E0
0001AF64 B80F 4810 00               		dc.b $B8, $F, $48, $10,	0
0001AF69 08                         byte_1A6AD:	dc.b 8
0001AF6A A00D 4000 E0               		dc.b $A0, $D, $40, 0, $E0
0001AF6F A00D 4800 00               		dc.b $A0, $D, $48, 0, 0
0001AF74 B00C 2008 E0               		dc.b $B0, $C, $20, 8, $E0
0001AF79 B00C 200C 00               		dc.b $B0, $C, $20, $C, 0
0001AF7E B80F 4010 E0               		dc.b $B8, $F, $40, $10,	$E0
0001AF83 B80F 4810 00               		dc.b $B8, $F, $48, $10,	0
0001AF88 D80F 4020 E0               		dc.b $D8, $F, $40, $20,	$E0
0001AF8D D80F 4820 00               		dc.b $D8, $F, $48, $20,	0
0001AF92 0A                         byte_1A6D6:	dc.b $A
0001AF93 A00D 4000 E0               		dc.b $A0, $D, $40, 0, $E0
0001AF98 A00D 4800 00               		dc.b $A0, $D, $48, 0, 0
0001AF9D B00C 2008 E0               		dc.b $B0, $C, $20, 8, $E0
0001AFA2 B00C 200C 00               		dc.b $B0, $C, $20, $C, 0
0001AFA7 B80F 4010 E0               		dc.b $B8, $F, $40, $10,	$E0
0001AFAC B80F 4810 00               		dc.b $B8, $F, $48, $10,	0
0001AFB1 D80F 4020 E0               		dc.b $D8, $F, $40, $20,	$E0
0001AFB6 D80F 4820 00               		dc.b $D8, $F, $48, $20,	0
0001AFBB F80F 4030 E0               		dc.b $F8, $F, $40, $30,	$E0
0001AFC0 F80F 4830 00               		dc.b $F8, $F, $48, $30,	0
0001AFC5 0C                         byte_1A709:	dc.b $C
0001AFC6 A00D 4000 E0               		dc.b $A0, $D, $40, 0, $E0
0001AFCB A00D 4800 00               		dc.b $A0, $D, $48, 0, 0
0001AFD0 B00C 2008 E0               		dc.b $B0, $C, $20, 8, $E0
0001AFD5 B00C 200C 00               		dc.b $B0, $C, $20, $C, 0
0001AFDA B80F 4010 E0               		dc.b $B8, $F, $40, $10,	$E0
0001AFDF B80F 4810 00               		dc.b $B8, $F, $48, $10,	0
0001AFE4 D80F 4020 E0               		dc.b $D8, $F, $40, $20,	$E0
0001AFE9 D80F 4820 00               		dc.b $D8, $F, $48, $20,	0
0001AFEE F80F 4030 E0               		dc.b $F8, $F, $40, $30,	$E0
0001AFF3 F80F 4830 00               		dc.b $F8, $F, $48, $30,	0
0001AFF8 180F 4040 E0               		dc.b $18, $F, $40, $40,	$E0
0001AFFD 180F 4840 00               		dc.b $18, $F, $48, $40,	0
0001B002 0D                         byte_1A746:	dc.b $D
0001B003 A00D 4000 E0               		dc.b $A0, $D, $40, 0, $E0
0001B008 A00D 4800 00               		dc.b $A0, $D, $48, 0, 0
0001B00D B00C 2008 E0               		dc.b $B0, $C, $20, 8, $E0
0001B012 B00C 200C 00               		dc.b $B0, $C, $20, $C, 0
0001B017 B80F 4010 E0               		dc.b $B8, $F, $40, $10,	$E0
0001B01C B80F 4810 00               		dc.b $B8, $F, $48, $10,	0
0001B021 D80F 4020 E0               		dc.b $D8, $F, $40, $20,	$E0
0001B026 D80F 4820 00               		dc.b $D8, $F, $48, $20,	0
0001B02B F80F 4030 E0               		dc.b $F8, $F, $40, $30,	$E0
0001B030 F80F 4830 00               		dc.b $F8, $F, $48, $30,	0
0001B035 180F 4040 E0               		dc.b $18, $F, $40, $40,	$E0
0001B03A 180F 4840 00               		dc.b $18, $F, $48, $40,	0
0001B03F 380F 4050 F0               		dc.b $38, $F, $40, $50,	$F0
0001B044 0E                         byte_1A788:	dc.b $E
0001B045 A00D 4000 E0               		dc.b $A0, $D, $40, 0, $E0
0001B04A A00D 4800 00               		dc.b $A0, $D, $48, 0, 0
0001B04F B00C 2008 E0               		dc.b $B0, $C, $20, 8, $E0
0001B054 B00C 200C 00               		dc.b $B0, $C, $20, $C, 0
0001B059 B80F 4010 E0               		dc.b $B8, $F, $40, $10,	$E0
0001B05E B80F 4810 00               		dc.b $B8, $F, $48, $10,	0
0001B063 D80F 4020 E0               		dc.b $D8, $F, $40, $20,	$E0
0001B068 D80F 4820 00               		dc.b $D8, $F, $48, $20,	0
0001B06D F80F 4030 E0               		dc.b $F8, $F, $40, $30,	$E0
0001B072 F80F 4830 00               		dc.b $F8, $F, $48, $30,	0
0001B077 180F 4040 E0               		dc.b $18, $F, $40, $40,	$E0
0001B07C 180F 4840 00               		dc.b $18, $F, $48, $40,	0
0001B081 380F 4050 F0               		dc.b $38, $F, $40, $50,	$F0
0001B086 580F 4050 F0               		dc.b $58, $F, $40, $50,	$F0
0001B08B 02                         byte_1A7CF:	dc.b 2
0001B08C F804 0068 F0               		dc.b $F8, 4, 0,	$68, $F0
0001B091 000C 006A F0               		dc.b 0,	$C, 0, $6A, $F0
0001B096                            		even
0001B096                            		even
0001B096                            
0001B096                            ; ===========================================================================
0001B096                            ; ---------------------------------------------------------------------------
0001B096                            ; Object 86 - energy balls (FZ)
0001B096                            ; ---------------------------------------------------------------------------
0001B096                            
0001B096                            Obj86:					; XREF: Obj_Index
0001B096 7000                       		moveq	#0,d0
0001B098 1028 0024                  		move.b	$24(a0),d0
0001B09C 303B 0000                  		move.w	Obj86_Index(pc,d0.w),d0
0001B0A0 4EFB 0000                  		jmp	Obj86_Index(pc,d0.w)
0001B0A4                            ; ===========================================================================
0001B0A4 0000                       Obj86_Index:	dc.w Obj86_Main-Obj86_Index
0001B0A6 0000                       		dc.w Obj86_Generator-Obj86_Index
0001B0A8 0000                       		dc.w Obj86_MakeBalls-Obj86_Index
0001B0AA 0000                       		dc.w loc_1A962-Obj86_Index
0001B0AC 0000                       		dc.w loc_1A982-Obj86_Index
0001B0AE                            ; ===========================================================================
0001B0AE                            
0001B0AE                            Obj86_Main:				; XREF: Obj86_Index
0001B0AE 317C 2588 0008             		move.w	#$2588,8(a0)
0001B0B4 317C 053C 000C             		move.w	#$53C,$C(a0)
0001B0BA 317C 0300 0002             		move.w	#$300,2(a0)
0001B0C0 217C 0000 0000 0004        		move.l	#Map_obj86,4(a0)
0001B0C8 117C 0000 001C             		move.b	#0,$1C(a0)
0001B0CE 117C 0003 0018             		move.b	#3,$18(a0)
0001B0D4 117C 0008 0017             		move.b	#8,$17(a0)
0001B0DA 117C 0008 0016             		move.b	#8,$16(a0)
0001B0E0 117C 0004 0001             		move.b	#4,1(a0)
0001B0E6 08E8 0007 0001             		bset	#7,1(a0)
0001B0EC 5428 0024                  		addq.b	#2,$24(a0)
0001B0F0                            
0001B0F0                            Obj86_Generator:			; XREF: Obj86_Index
0001B0F0 2268 0034                  		movea.l	$34(a0),a1
0001B0F4 0C29 0006 0034             		cmpi.b	#6,$34(a1)
0001B0FA 6600                       		bne.s	loc_1A850
0001B0FC 10BC 003F                  		move.b	#$3F,(a0)
0001B100 117C 0000 0024             		move.b	#0,$24(a0)
0001B106 4EF9 0000 DDC8             		jmp	DisplaySprite
0001B10C                            ; ===========================================================================
0001B10C                            
0001B10C                            loc_1A850:
0001B10C 117C 0000 001C             		move.b	#0,$1C(a0)
0001B112 4A28 0029                  		tst.b	$29(a0)
0001B116 6700                       		beq.s	loc_1A86C
0001B118 5428 0024                  		addq.b	#2,$24(a0)
0001B11C 117C 0001 001C             		move.b	#1,$1C(a0)
0001B122 117C 003E 0028             		move.b	#$3E,$28(a0)
0001B128                            
0001B128                            loc_1A86C:
0001B128 323C 0013                  		move.w	#$13,d1
0001B12C 343C 0008                  		move.w	#8,d2
0001B130 363C 0011                  		move.w	#$11,d3
0001B134 3828 0008                  		move.w	8(a0),d4
0001B138 4EB9 0001 0198             		jsr	SolidObject
0001B13E 3038 D008                  		move.w	($FFFFD008).w,d0
0001B142 9068 0008                  		sub.w	8(a0),d0
0001B146 6B00                       		bmi.s	loc_1A89A
0001B148 0440 0140                  		subi.w	#$140,d0
0001B14C 6B00                       		bmi.s	loc_1A89A
0001B14E 4A28 0001                  		tst.b	1(a0)
0001B152 6A00 FBB0                  		bpl.w	Obj84_Delete
0001B156                            
0001B156                            loc_1A89A:
0001B156 43FA 0000                  		lea	Ani_obj86(pc),a1
0001B15A 4EB9 0000 AE88             		jsr	AnimateSprite
0001B160 4EF9 0000 DDC8             		jmp	DisplaySprite
0001B166                            ; ===========================================================================
0001B166                            
0001B166                            Obj86_MakeBalls:			; XREF: Obj86_Index
0001B166 4A28 0029                  		tst.b	$29(a0)
0001B16A 6700 0000                  		beq.w	loc_1A954
0001B16E 4228 0029                  		clr.b	$29(a0)
0001B172 D068 0030                  		add.w	$30(a0),d0
0001B176 0240 001E                  		andi.w	#$1E,d0
0001B17A D4C0                       		adda.w	d0,a2
0001B17C 5868 0030                  		addq.w	#4,$30(a0)
0001B180 4268 0032                  		clr.w	$32(a0)
0001B184 7403                       		moveq	#3,d2
0001B186                            
0001B186                            Obj86_Loop:
0001B186 4EB9 0000 E264             		jsr	SingleObjLoad2
0001B18C 6600 0000                  		bne.w	loc_1A954
0001B190 12BC 0086                  		move.b	#$86,(a1)
0001B194 3368 0008 0008             		move.w	8(a0),8(a1)
0001B19A 337C 053C 000C             		move.w	#$53C,$C(a1)
0001B1A0 137C 0008 0024             		move.b	#8,$24(a1)
0001B1A6 337C 2300 0002             		move.w	#$2300,2(a1)
0001B1AC 237C 0000 0000 0004        		move.l	#Map_obj86a,4(a1)
0001B1B4 137C 000C 0016             		move.b	#$C,$16(a1)
0001B1BA 137C 000C 0017             		move.b	#$C,$17(a1)
0001B1C0 137C 0000 0020             		move.b	#0,$20(a1)
0001B1C6 137C 0003 0018             		move.b	#3,$18(a1)
0001B1CC 337C 003E 0028             		move.w	#$3E,$28(a1)
0001B1D2 137C 0004 0001             		move.b	#4,1(a1)
0001B1D8 08E9 0007 0001             		bset	#7,1(a1)
0001B1DE 2348 0034                  		move.l	a0,$34(a1)
0001B1E2 4EB9 0000 2C86             		jsr	(RandomNumber).l
0001B1E8 3228 0032                  		move.w	$32(a0),d1
0001B1EC C3FC FFB1                  		muls.w	#-$4F,d1
0001B1F0 0641 2578                  		addi.w	#$2578,d1
0001B1F4 0240 001F                  		andi.w	#$1F,d0
0001B1F8 0440 0010                  		subi.w	#$10,d0
0001B1FC D041                       		add.w	d1,d0
0001B1FE 3340 0030                  		move.w	d0,$30(a1)
0001B202 5268 0032                  		addq.w	#1,$32(a0)
0001B206 3168 0032 0038             		move.w	$32(a0),$38(a0)
0001B20C 51CA FF78                  		dbf	d2,Obj86_Loop	; repeat sequence 3 more times
0001B210                            
0001B210                            loc_1A954:
0001B210 4A68 0032                  		tst.w	$32(a0)
0001B214 6600                       		bne.s	loc_1A95E
0001B216 5428 0024                  		addq.b	#2,$24(a0)
0001B21A                            
0001B21A                            loc_1A95E:
0001B21A 6000 FF0C                  		bra.w	loc_1A86C
0001B21E                            ; ===========================================================================
0001B21E                            
0001B21E                            loc_1A962:				; XREF: Obj86_Index
0001B21E 117C 0002 001C             		move.b	#2,$1C(a0)
0001B224 4A68 0038                  		tst.w	$38(a0)
0001B228 6600                       		bne.s	loc_1A97E
0001B22A 117C 0002 0024             		move.b	#2,$24(a0)
0001B230 2268 0034                  		movea.l	$34(a0),a1
0001B234 337C FFFF 0032             		move.w	#-1,$32(a1)
0001B23A                            
0001B23A                            loc_1A97E:
0001B23A 6000 FEEC                  		bra.w	loc_1A86C
0001B23E                            ; ===========================================================================
0001B23E                            
0001B23E                            loc_1A982:				; XREF: Obj86_Index
0001B23E 7000                       		moveq	#0,d0
0001B240 1028 0025                  		move.b	$25(a0),d0
0001B244 303B 0000                  		move.w	Obj86_Index2(pc,d0.w),d0
0001B248 4EBB 0000                  		jsr	Obj86_Index2(pc,d0.w)
0001B24C 43FA 0000                  		lea	Ani_obj86a(pc),a1
0001B250 4EB9 0000 AE88             		jsr	AnimateSprite
0001B256 4EF9 0000 DDC8             		jmp	DisplaySprite
0001B25C                            ; ===========================================================================
0001B25C 0000                       Obj86_Index2:	dc.w loc_1A9A6-Obj86_Index2
0001B25E 0000                       		dc.w loc_1A9C0-Obj86_Index2
0001B260 0000                       		dc.w loc_1AA1E-Obj86_Index2
0001B262                            ; ===========================================================================
0001B262                            
0001B262                            loc_1A9A6:				; XREF: Obj86_Index2
0001B262 3028 0030                  		move.w	$30(a0),d0
0001B266 9068 0008                  		sub.w	8(a0),d0
0001B26A E940                       		asl.w	#4,d0
0001B26C 3140 0010                  		move.w	d0,$10(a0)
0001B270 317C 00B4 0028             		move.w	#$B4,$28(a0)
0001B276 5428 0025                  		addq.b	#2,$25(a0)
0001B27A 4E75                       		rts	
0001B27C                            ; ===========================================================================
0001B27C                            
0001B27C                            loc_1A9C0:				; XREF: Obj86_Index2
0001B27C 4A68 0010                  		tst.w	$10(a0)
0001B280 6700                       		beq.s	loc_1A9E6
0001B282 4EB9 0000 DDA2             		jsr	SpeedToPos
0001B288 3028 0008                  		move.w	8(a0),d0
0001B28C 9068 0030                  		sub.w	$30(a0),d0
0001B290 6400                       		bcc.s	loc_1A9E6
0001B292 4268 0010                  		clr.w	$10(a0)
0001B296 D168 0008                  		add.w	d0,8(a0)
0001B29A 2268 0034                  		movea.l	$34(a0),a1
0001B29E 5369 0032                  		subq.w	#1,$32(a1)
0001B2A2                            
0001B2A2                            loc_1A9E6:
0001B2A2 117C 0000 001C             		move.b	#0,$1C(a0)
0001B2A8 5368 0028                  		subq.w	#1,$28(a0)
0001B2AC 6600                       		bne.s	locret_1AA1C
0001B2AE 5428 0025                  		addq.b	#2,$25(a0)
0001B2B2 117C 0001 001C             		move.b	#1,$1C(a0)
0001B2B8 117C 009A 0020             		move.b	#$9A,$20(a0)
0001B2BE 317C 00B4 0028             		move.w	#$B4,$28(a0)
0001B2C4 7000                       		moveq	#0,d0
0001B2C6 3038 D008                  		move.w	($FFFFD008).w,d0
0001B2CA 9068 0008                  		sub.w	8(a0),d0
0001B2CE 3140 0010                  		move.w	d0,$10(a0)
0001B2D2 317C 0140 0012             		move.w	#$140,$12(a0)
0001B2D8                            
0001B2D8                            locret_1AA1C:
0001B2D8 4E75                       		rts	
0001B2DA                            ; ===========================================================================
0001B2DA                            
0001B2DA                            loc_1AA1E:				; XREF: Obj86_Index2
0001B2DA 4EB9 0000 DDA2             		jsr	SpeedToPos
0001B2E0 0C68 05E0 000C             		cmpi.w	#$5E0,$C(a0)
0001B2E6 6400                       		bcc.s	loc_1AA34
0001B2E8 5368 0028                  		subq.w	#1,$28(a0)
0001B2EC 6700                       		beq.s	loc_1AA34
0001B2EE 4E75                       		rts	
0001B2F0                            ; ===========================================================================
0001B2F0                            
0001B2F0                            loc_1AA34:
0001B2F0 2268 0034                  		movea.l	$34(a0),a1
0001B2F4 5369 0038                  		subq.w	#1,$38(a1)
0001B2F8 6000 FA0A                  		bra.w	Obj84_Delete
0001B2FC                            ; ===========================================================================
0001B2FC                            Ani_obj86:
0001B2FC                            	include "_anim\obj86.asm"
0001B2FC                            ; ---------------------------------------------------------------------------
0001B2FC                            ; Animation script - energy ball launcher (FZ)
0001B2FC                            ; ---------------------------------------------------------------------------
0001B2FC 0000                       		dc.w byte_1AA46-Ani_obj86
0001B2FE 0000                       		dc.w byte_1AA4A-Ani_obj86
0001B300 0000                       		dc.w byte_1AA50-Ani_obj86
0001B302 7E00 FF00                  byte_1AA46:	dc.b $7E, 0, $FF, 0
0001B306 0100 0200 03FF             byte_1AA4A:	dc.b 1,	0, 2, 0, 3, $FF
0001B30C 0101 0201 03FF             byte_1AA50:	dc.b 1,	1, 2, 1, 3, $FF
0001B312                            		even
0001B312                            		even
0001B312                            
0001B312                            ; ---------------------------------------------------------------------------
0001B312                            ; Sprite mappings - energy ball	launcher (FZ)
0001B312                            ; ---------------------------------------------------------------------------
0001B312                            Map_obj86:
0001B312                            	include "_maps\obj86.asm"
0001B312                            ; ---------------------------------------------------------------------------
0001B312                            ; Sprite mappings - energy ball	launcher (FZ)
0001B312                            ; ---------------------------------------------------------------------------
0001B312 0000 0000                  		dc.w byte_1AA5E-Map_obj86, byte_1AA64-Map_obj86
0001B316 0000 0000                  		dc.w byte_1AA6A-Map_obj86, byte_1AA70-Map_obj86
0001B31A 01                         byte_1AA5E:	dc.b 1
0001B31B F805 006E F8               		dc.b $F8, 5, 0,	$6E, $F8
0001B320 01                         byte_1AA64:	dc.b 1
0001B321 F805 0076 F8               		dc.b $F8, 5, 0,	$76, $F8
0001B326 01                         byte_1AA6A:	dc.b 1
0001B327 F805 0072 F8               		dc.b $F8, 5, 0,	$72, $F8
0001B32C 01                         byte_1AA70:	dc.b 1
0001B32D F805 1072 F8               		dc.b $F8, 5, $10, $72, $F8
0001B332                            		even
0001B332                            		even
0001B332                            
0001B332                            Ani_obj86a:
0001B332                            	include "_anim\obj86a.asm"
0001B332                            ; ---------------------------------------------------------------------------
0001B332                            ; Animation script - energy balls (FZ)
0001B332                            ; ---------------------------------------------------------------------------
0001B332 0000                       		dc.w byte_1AA7A-Ani_obj86a
0001B334 0000                       		dc.w byte_1AA9C-Ani_obj86a
0001B336 0100 0A08 0A01 0A09 0A06+  byte_1AA7A:	dc.b 1,	0, $A, 8, $A, 1, $A, 9,	$A, 6, $A, 7, $A, 0, $A
0001B345 080A 010A 090A 060A 070A+  		dc.b 8,	$A, 1, $A, 9, $A, 6, $A, 7, $A,	2, $A, 3, $A, 4
0001B354 0A05 FF00                  		dc.b $A, 5, $FF, 0
0001B358 0006 0501 0507 0501 05FF   byte_1AA9C:	dc.b 0,	6, 5, 1, 5, 7, 5, 1, 5,	$FF
0001B362                            		even
0001B362                            		even
0001B362                            
0001B362                            ; ---------------------------------------------------------------------------
0001B362                            ; Sprite mappings - energy balls (FZ)
0001B362                            ; ---------------------------------------------------------------------------
0001B362                            Map_obj86a:
0001B362                            	include "_maps\obj86a.asm"
0001B362                            ; ---------------------------------------------------------------------------
0001B362                            ; Sprite mappings - energy balls (FZ)
0001B362                            ; ---------------------------------------------------------------------------
0001B362 0000 0000                  		dc.w byte_1AABC-Map_obj86a, byte_1AAC7-Map_obj86a
0001B366 0000 0000                  		dc.w byte_1AAD2-Map_obj86a, byte_1AADD-Map_obj86a
0001B36A 0000 0000                  		dc.w byte_1AAE8-Map_obj86a, byte_1AAF3-Map_obj86a
0001B36E 0000 0000                  		dc.w byte_1AAFE-Map_obj86a, byte_1AB04-Map_obj86a
0001B372 0000 0000                  		dc.w byte_1AB0A-Map_obj86a, byte_1AB15-Map_obj86a
0001B376 0000                       		dc.w byte_1AB20-Map_obj86a
0001B378 02                         byte_1AABC:	dc.b 2
0001B379 F00D 007A F0               		dc.b $F0, $D, 0, $7A, $F0
0001B37E 000D 187A F0               		dc.b 0,	$D, $18, $7A, $F0
0001B383 02                         byte_1AAC7:	dc.b 2
0001B384 F406 0082 F4               		dc.b $F4, 6, 0,	$82, $F4
0001B389 F402 1882 04               		dc.b $F4, 2, $18, $82, 4
0001B38E 02                         byte_1AAD2:	dc.b 2
0001B38F F804 0088 F8               		dc.b $F8, 4, 0,	$88, $F8
0001B394 0004 1088 F8               		dc.b 0,	4, $10,	$88, $F8
0001B399 02                         byte_1AADD:	dc.b 2
0001B39A F804 008A F8               		dc.b $F8, 4, 0,	$8A, $F8
0001B39F 0004 108A F8               		dc.b 0,	4, $10,	$8A, $F8
0001B3A4 02                         byte_1AAE8:	dc.b 2
0001B3A5 F804 008C F8               		dc.b $F8, 4, 0,	$8C, $F8
0001B3AA 0004 108C F8               		dc.b 0,	4, $10,	$8C, $F8
0001B3AF 02                         byte_1AAF3:	dc.b 2
0001B3B0 F406 008E F4               		dc.b $F4, 6, 0,	$8E, $F4
0001B3B5 F402 188E 04               		dc.b $F4, 2, $18, $8E, 4
0001B3BA 01                         byte_1AAFE:	dc.b 1
0001B3BB F805 0094 F8               		dc.b $F8, 5, 0,	$94, $F8
0001B3C0 01                         byte_1AB04:	dc.b 1
0001B3C1 F805 0098 F8               		dc.b $F8, 5, 0,	$98, $F8
0001B3C6 02                         byte_1AB0A:	dc.b 2
0001B3C7 F00D 087A F0               		dc.b $F0, $D, 8, $7A, $F0
0001B3CC 000D 107A F0               		dc.b 0,	$D, $10, $7A, $F0
0001B3D1 02                         byte_1AB15:	dc.b 2
0001B3D2 F406 1082 F4               		dc.b $F4, 6, $10, $82, $F4
0001B3D7 F402 0882 04               		dc.b $F4, 2, 8,	$82, 4
0001B3DC 00                         byte_1AB20:	dc.b 0
0001B3DE 00                         		even
0001B3DE 00                         		even
0001B3DE                            
0001B3DE                            ; ===========================================================================
0001B3DE                            ; ---------------------------------------------------------------------------
0001B3DE                            ; Object 3E - prison capsule
0001B3DE                            ; ---------------------------------------------------------------------------
0001B3DE                            
0001B3DE                            Obj3E:					; XREF: Obj_Index
0001B3DE 7000                       		moveq	#0,d0
0001B3E0 1028 0024                  		move.b	$24(a0),d0
0001B3E4 323B 0000                  		move.w	Obj3E_Index(pc,d0.w),d1
0001B3E8 4EBB 1000                  		jsr	Obj3E_Index(pc,d1.w)
0001B3EC 3028 0008                  		move.w	8(a0),d0
0001B3F0 0240 FF80                  		andi.w	#$FF80,d0
0001B3F4 3238 F700                  		move.w	($FFFFF700).w,d1
0001B3F8 0441 0080                  		subi.w	#$80,d1
0001B3FC 0241 FF80                  		andi.w	#$FF80,d1
0001B400 9041                       		sub.w	d1,d0
0001B402 0C40 0280                  		cmpi.w	#$280,d0
0001B406 6200                       		bhi.s	Obj3E_Delete
0001B408 4EF9 0000 DDC8             		jmp	DisplaySprite
0001B40E                            ; ===========================================================================
0001B40E                            
0001B40E                            Obj3E_Delete:
0001B40E 4EF9 0000 DE04             		jmp	DeleteObject
0001B414                            ; ===========================================================================
0001B414 0000                       Obj3E_Index:	dc.w Obj3E_Main-Obj3E_Index
0001B416 0000                       		dc.w Obj3E_BodyMain-Obj3E_Index
0001B418 0000                       		dc.w Obj3E_Switched-Obj3E_Index
0001B41A 0000                       		dc.w Obj3E_Explosion-Obj3E_Index
0001B41C 0000                       		dc.w Obj3E_Explosion-Obj3E_Index
0001B41E 0000                       		dc.w Obj3E_Explosion-Obj3E_Index
0001B420 0000                       		dc.w Obj3E_Animals-Obj3E_Index
0001B422 0000                       		dc.w Obj3E_EndAct-Obj3E_Index
0001B424                            
0001B424 0220 0400                  Obj3E_Var:	dc.b 2,	$20, 4,	0	; routine, width, priority, frame
0001B428 040C 0501                  		dc.b 4,	$C, 5, 1
0001B42C 0610 0403                  		dc.b 6,	$10, 4,	3
0001B430 0810 0305                  		dc.b 8,	$10, 3,	5
0001B434                            ; ===========================================================================
0001B434                            
0001B434                            Obj3E_Main:				; XREF: Obj3E_Index
0001B434 217C 0000 0000 0004        		move.l	#Map_obj3E,4(a0)
0001B43C 317C 049D 0002             		move.w	#$49D,2(a0)
0001B442 117C 0004 0001             		move.b	#4,1(a0)
0001B448 3168 000C 0030             		move.w	$C(a0),$30(a0)
0001B44E 7000                       		moveq	#0,d0
0001B450 1028 0028                  		move.b	$28(a0),d0
0001B454 E548                       		lsl.w	#2,d0
0001B456 43FB 00CC                  		lea	Obj3E_Var(pc,d0.w),a1
0001B45A 1159 0024                  		move.b	(a1)+,$24(a0)
0001B45E 1159 0019                  		move.b	(a1)+,$19(a0)
0001B462 1159 0018                  		move.b	(a1)+,$18(a0)
0001B466 1159 001A                  		move.b	(a1)+,$1A(a0)
0001B46A 0C40 0008                  		cmpi.w	#8,d0		; is object type number	02?
0001B46E 6600                       		bne.s	Obj3E_Not02	; if not, branch
0001B470 117C 0006 0020             		move.b	#6,$20(a0)
0001B476 117C 0008 0021             		move.b	#8,$21(a0)
0001B47C                            
0001B47C                            Obj3E_Not02:
0001B47C 4E75                       		rts	
0001B47E                            ; ===========================================================================
0001B47E                            
0001B47E                            Obj3E_BodyMain:				; XREF: Obj3E_Index
0001B47E 0C38 0002 F7A7             		cmpi.b	#2,($FFFFF7A7).w
0001B484 6700                       		beq.s	Obj3E_ChkOpened
0001B486 323C 002B                  		move.w	#$2B,d1
0001B48A 343C 0018                  		move.w	#$18,d2
0001B48E 363C 0018                  		move.w	#$18,d3
0001B492 3828 0008                  		move.w	8(a0),d4
0001B496 4EF9 0001 0198             		jmp	SolidObject
0001B49C                            ; ===========================================================================
0001B49C                            
0001B49C                            Obj3E_ChkOpened:
0001B49C 4A28 0025                  		tst.b	$25(a0)		; has the prison been opened?
0001B4A0 6700                       		beq.s	Obj3E_DoOpen	; if yes, branch
0001B4A2 4228 0025                  		clr.b	$25(a0)
0001B4A6 08B8 0003 D022             		bclr	#3,($FFFFD022).w
0001B4AC 08F8 0001 D022             		bset	#1,($FFFFD022).w
0001B4B2                            
0001B4B2                            Obj3E_DoOpen:
0001B4B2 117C 0002 001A             		move.b	#2,$1A(a0)	; use frame number 2 (destroyed	prison)
0001B4B8 4E75                       		rts	
0001B4BA                            ; ===========================================================================
0001B4BA                            
0001B4BA                            Obj3E_Switched:				; XREF: Obj3E_Index
0001B4BA 323C 0017                  		move.w	#$17,d1
0001B4BE 343C 0008                  		move.w	#8,d2
0001B4C2 363C 0008                  		move.w	#8,d3
0001B4C6 3828 0008                  		move.w	8(a0),d4
0001B4CA 4EB9 0001 0198             		jsr	SolidObject
0001B4D0 43F9 0000 0000             		lea	(Ani_obj3E).l,a1
0001B4D6 4EB9 0000 AE88             		jsr	AnimateSprite
0001B4DC 3168 0030 000C             		move.w	$30(a0),$C(a0)
0001B4E2 4A28 0025                  		tst.b	$25(a0)
0001B4E6 6700                       		beq.s	locret_1AC60
0001B4E8 5068 000C                  		addq.w	#8,$C(a0)
0001B4EC 117C 000A 0024             		move.b	#$A,$24(a0)
0001B4F2 317C 003C 001E             		move.w	#$3C,$1E(a0)
0001B4F8 4238 FE1E                  		clr.b	($FFFFFE1E).w	; stop time counter
0001B4FC 4238 F7AA                  		clr.b	($FFFFF7AA).w	; lock screen position
0001B500 11FC 0001 F7CC             		move.b	#1,($FFFFF7CC).w ; lock	controls
0001B506 0838 0000 FE2F             		btst	#0,($FFFFFE2F).w	; GMZ: Have we got a reverse control power up?
0001B50C 6700                       		beq.s	Obj3E_MoveLeft	; GMZ: If not, branch
0001B50E 31FC 0400 F602             		move.w	#$400,($FFFFF602).w ; make Sonic run to	the right
0001B514 6000                       		bra.s	Obj3E_ContinueCode
0001B516                            
0001B516                            Obj3E_MoveLeft:
0001B516 31FC 0800 F602             		move.w	#$800,($FFFFF602).w ; make Sonic run to	the right
0001B51C                            
0001B51C                            Obj3E_ContinueCode:
0001B51C 4228 0025                  		clr.b	$25(a0)
0001B520 08B8 0003 D022             		bclr	#3,($FFFFD022).w
0001B526 08F8 0001 D022             		bset	#1,($FFFFD022).w
0001B52C                            
0001B52C                            locret_1AC60:
0001B52C 4E75                       		rts	
0001B52E                            ; ===========================================================================
0001B52E                            
0001B52E                            Obj3E_Explosion:			; XREF: Obj3E_Index
0001B52E 7007                       		moveq	#7,d0
0001B530 C038 FE0F                  		and.b	($FFFFFE0F).w,d0
0001B534 6600                       		bne.s	loc_1ACA0
0001B536 4EB9 0000 E24E             		jsr	SingleObjLoad
0001B53C 6600                       		bne.s	loc_1ACA0
0001B53E 12BC 003F                  		move.b	#$3F,0(a1)	; load explosion object
0001B542 3368 0008 0008             		move.w	8(a0),8(a1)
0001B548 3368 000C 000C             		move.w	$C(a0),$C(a1)
0001B54E 4EB9 0000 2C86             		jsr	(RandomNumber).l
0001B554 7200                       		moveq	#0,d1
0001B556 1200                       		move.b	d0,d1
0001B558 E409                       		lsr.b	#2,d1
0001B55A 0441 0020                  		subi.w	#$20,d1
0001B55E D369 0008                  		add.w	d1,8(a1)
0001B562 E048                       		lsr.w	#8,d0
0001B564 E608                       		lsr.b	#3,d0
0001B566 D169 000C                  		add.w	d0,$C(a1)
0001B56A                            
0001B56A                            loc_1ACA0:
0001B56A 5368 001E                  		subq.w	#1,$1E(a0)
0001B56E 6700                       		beq.s	Obj3E_MakeAnimal
0001B570 4E75                       		rts	
0001B572                            ; ===========================================================================
0001B572                            
0001B572                            Obj3E_MakeAnimal:
0001B572 11FC 0002 F7A7             		move.b	#2,($FFFFF7A7).w
0001B578 117C 000C 0024             		move.b	#$C,$24(a0)	; replace explosions with animals
0001B57E 117C 0006 001A             		move.b	#6,$1A(a0)
0001B584 317C 0096 001E             		move.w	#$96,$1E(a0)
0001B58A 0668 0020 000C             		addi.w	#$20,$C(a0)
0001B590 7C07                       		moveq	#7,d6
0001B592 3A3C 009A                  		move.w	#$9A,d5
0001B596 78E4                       		moveq	#-$1C,d4
0001B598                            
0001B598                            Obj3E_Loop:
0001B598 4EB9 0000 E24E             		jsr	SingleObjLoad
0001B59E 6600                       		bne.s	locret_1ACF8
0001B5A0 12BC 0028                  		move.b	#$28,0(a1)	; load animal object
0001B5A4 3368 0008 0008             		move.w	8(a0),8(a1)
0001B5AA 3368 000C 000C             		move.w	$C(a0),$C(a1)
0001B5B0 D969 0008                  		add.w	d4,8(a1)
0001B5B4 5E44                       		addq.w	#7,d4
0001B5B6 3345 0036                  		move.w	d5,$36(a1)
0001B5BA 5145                       		subq.w	#8,d5
0001B5BC 51CE FFDA                  		dbf	d6,Obj3E_Loop	; repeat 7 more	times
0001B5C0                            
0001B5C0                            locret_1ACF8:
0001B5C0 4E75                       		rts	
0001B5C2                            ; ===========================================================================
0001B5C2                            
0001B5C2                            Obj3E_Animals:				; XREF: Obj3E_Index
0001B5C2 7007                       		moveq	#7,d0
0001B5C4 C038 FE0F                  		and.b	($FFFFFE0F).w,d0
0001B5C8 6600                       		bne.s	loc_1AD38
0001B5CA 4EB9 0000 E24E             		jsr	SingleObjLoad
0001B5D0 6600                       		bne.s	loc_1AD38
0001B5D2 12BC 0028                  		move.b	#$28,0(a1)	; load animal object
0001B5D6 3368 0008 0008             		move.w	8(a0),8(a1)
0001B5DC 3368 000C 000C             		move.w	$C(a0),$C(a1)
0001B5E2 4EB9 0000 2C86             		jsr	(RandomNumber).l
0001B5E8 0240 001F                  		andi.w	#$1F,d0
0001B5EC 5D40                       		subq.w	#6,d0
0001B5EE 4A41                       		tst.w	d1
0001B5F0 6A00                       		bpl.s	loc_1AD2E
0001B5F2 4440                       		neg.w	d0
0001B5F4                            
0001B5F4                            loc_1AD2E:
0001B5F4 D169 0008                  		add.w	d0,8(a1)
0001B5F8 337C 000C 0036             		move.w	#$C,$36(a1)
0001B5FE                            
0001B5FE                            loc_1AD38:
0001B5FE 5368 001E                  		subq.w	#1,$1E(a0)
0001B602 6600                       		bne.s	locret_1AD48
0001B604 5428 0024                  		addq.b	#2,$24(a0)
0001B608 317C 00B4 001E             		move.w	#180,$1E(a0)
0001B60E                            
0001B60E                            locret_1AD48:
0001B60E 4E75                       		rts	
0001B610                            ; ===========================================================================
0001B610                            
0001B610                            Obj3E_EndAct:				; XREF: Obj3E_Index
0001B610 703E                       		moveq	#$3E,d0
0001B612 7228                       		moveq	#$28,d1
0001B614 7440                       		moveq	#$40,d2
0001B616 43F8 D040                  		lea	($FFFFD040).w,a1 ; load	object RAM
0001B61A                            
0001B61A                            Obj3E_FindObj28:
0001B61A B211                       		cmp.b	(a1),d1		; is object $28	(animal) loaded?
0001B61C 6700                       		beq.s	Obj3E_Obj28Found ; if yes, branch
0001B61E D2C2                       		adda.w	d2,a1		; next object RAM
0001B620 51C8 FFF8                  		dbf	d0,Obj3E_FindObj28 ; repeat $3E	times
0001B624                            
0001B624 4EB9 0000 F454             		jsr	GotThroughAct
0001B62A 4EF9 0000 DE04             		jmp	DeleteObject
0001B630                            ; ===========================================================================
0001B630                            
0001B630                            Obj3E_Obj28Found:
0001B630 4E75                       		rts	
0001B632                            ; ===========================================================================
0001B632                            Ani_obj3E:
0001B632                            	include "_anim\obj3E.asm"
0001B632                            ; ---------------------------------------------------------------------------
0001B632                            ; Animation script - prison capsule
0001B632                            ; ---------------------------------------------------------------------------
0001B632 0000                       		dc.w byte_1AD70-Ani_obj3E
0001B634 0000                       		dc.w byte_1AD70-Ani_obj3E
0001B636 0201 03FF                  byte_1AD70:	dc.b 2,	1, 3, $FF
0001B63A                            		even
0001B63A                            		even
0001B63A                            
0001B63A                            ; ---------------------------------------------------------------------------
0001B63A                            ; Sprite mappings - prison capsule
0001B63A                            ; ---------------------------------------------------------------------------
0001B63A                            Map_obj3E:
0001B63A                            	include "_maps\obj3E.asm"
0001B63A                            ; ---------------------------------------------------------------------------
0001B63A                            ; Sprite mappings - prison capsule
0001B63A                            ; ---------------------------------------------------------------------------
0001B63A 0000 0000                  		dc.w byte_1AD82-Map_obj3E, byte_1ADA6-Map_obj3E
0001B63E 0000 0000                  		dc.w byte_1ADAC-Map_obj3E, byte_1ADCB-Map_obj3E
0001B642 0000 0000                  		dc.w byte_1ADD1-Map_obj3E, byte_1ADDC-Map_obj3E
0001B646 0000                       		dc.w byte_1ADE2-Map_obj3E
0001B648 07                         byte_1AD82:	dc.b 7
0001B649 E00C 2000 F0               		dc.b $E0, $C, $20, 0, $F0
0001B64E E80D 2004 E0               		dc.b $E8, $D, $20, 4, $E0
0001B653 E80D 200C 00               		dc.b $E8, $D, $20, $C, 0
0001B658 F80E 2014 E0               		dc.b $F8, $E, $20, $14,	$E0
0001B65D F80E 2020 00               		dc.b $F8, $E, $20, $20,	0
0001B662 100D 202C E0               		dc.b $10, $D, $20, $2C,	$E0
0001B667 100D 2034 00               		dc.b $10, $D, $20, $34,	0
0001B66C 01                         byte_1ADA6:	dc.b 1
0001B66D F809 003C F4               		dc.b $F8, 9, 0,	$3C, $F4
0001B672 06                         byte_1ADAC:	dc.b 6
0001B673 0008 2042 E0               		dc.b 0,	8, $20,	$42, $E0
0001B678 080C 2045 E0               		dc.b 8,	$C, $20, $45, $E0
0001B67D 0004 2049 10               		dc.b 0,	4, $20,	$49, $10
0001B682 080C 204B 00               		dc.b 8,	$C, $20, $4B, 0
0001B687 100D 202C E0               		dc.b $10, $D, $20, $2C,	$E0
0001B68C 100D 2034 00               		dc.b $10, $D, $20, $34,	0
0001B691 01                         byte_1ADCB:	dc.b 1
0001B692 F809 004F F4               		dc.b $F8, 9, 0,	$4F, $F4
0001B697 02                         byte_1ADD1:	dc.b 2
0001B698 E80E 2055 F0               		dc.b $E8, $E, $20, $55,	$F0
0001B69D 000E 2061 F0               		dc.b 0,	$E, $20, $61, $F0
0001B6A2 01                         byte_1ADDC:	dc.b 1
0001B6A3 F007 206D F8               		dc.b $F0, 7, $20, $6D, $F8
0001B6A8 00                         byte_1ADE2:	dc.b 0
0001B6AA 00                         		even
0001B6AA 00                         		even
0001B6AA                            
0001B6AA                            ; ---------------------------------------------------------------------------
0001B6AA                            ; Object touch response	subroutine - $20(a0) in	the object RAM
0001B6AA                            ; ---------------------------------------------------------------------------
0001B6AA                            
0001B6AA                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0001B6AA                            
0001B6AA                            
0001B6AA                            TouchResponse:				; XREF: Obj01
0001B6AA 4E71                       		nop	
0001B6AC 3428 0008                  		move.w	8(a0),d2	; load Sonic's x-axis value
0001B6B0 3628 000C                  		move.w	$C(a0),d3	; load Sonic's y-axis value
0001B6B4 5142                       		subq.w	#8,d2
0001B6B6 7A00                       		moveq	#0,d5
0001B6B8 1A28 0016                  		move.b	$16(a0),d5	; load Sonic's height
0001B6BC 5705                       		subq.b	#3,d5
0001B6BE 9645                       		sub.w	d5,d3
0001B6C0 0C28 0039 001A             		cmpi.b	#$39,$1A(a0)	; is Sonic ducking?
0001B6C6 6600                       		bne.s	Touch_NoDuck	; if not, branch
0001B6C8 0643 000C                  		addi.w	#$C,d3
0001B6CC 7A0A                       		moveq	#$A,d5
0001B6CE                            
0001B6CE                            Touch_NoDuck:
0001B6CE 383C 0010                  		move.w	#$10,d4
0001B6D2 DA45                       		add.w	d5,d5
0001B6D4 43F8 D800                  		lea	($FFFFD800).w,a1 ; begin checking the object RAM
0001B6D8 3C3C 005F                  		move.w	#$5F,d6
0001B6DC                            
0001B6DC                            Touch_Loop:
0001B6DC 4A29 0001                  		tst.b	1(a1)
0001B6E0 6A00                       		bpl.s	Touch_NextObj
0001B6E2 1029 0020                  		move.b	$20(a1),d0	; load touch response number
0001B6E6 6600                       		bne.s	Touch_Height	; if touch response is not 0, branch
0001B6E8                            
0001B6E8                            Touch_NextObj:
0001B6E8 43E9 0040                  		lea	$40(a1),a1	; next object RAM
0001B6EC 51CE FFEE                  		dbf	d6,Touch_Loop	; repeat $5F more times
0001B6F0                            
0001B6F0 7000                       		moveq	#0,d0
0001B6F2 4E75                       		rts	
0001B6F4                            ; ===========================================================================
0001B6F4 1414                       Touch_Sizes:	dc.b  $14, $14		; width, height
0001B6F6 0C14                       		dc.b   $C, $14
0001B6F8 140C                       		dc.b  $14,  $C
0001B6FA 0410                       		dc.b	4, $10
0001B6FC 0C12                       		dc.b   $C, $12
0001B6FE 1010                       		dc.b  $10, $10
0001B700 0606                       		dc.b	6,   6
0001B702 180C                       		dc.b  $18,  $C
0001B704 0C10                       		dc.b   $C, $10
0001B706 100C                       		dc.b  $10,  $C
0001B708 0808                       		dc.b	8,   8
0001B70A 1410                       		dc.b  $14, $10
0001B70C 1408                       		dc.b  $14,   8
0001B70E 0E0E                       		dc.b   $E,  $E
0001B710 1818                       		dc.b  $18, $18
0001B712 2810                       		dc.b  $28, $10
0001B714 1018                       		dc.b  $10, $18
0001B716 0810                       		dc.b	8, $10
0001B718 2070                       		dc.b  $20, $70
0001B71A 4020                       		dc.b  $40, $20
0001B71C 8020                       		dc.b  $80, $20
0001B71E 2020                       		dc.b  $20, $20
0001B720 0808                       		dc.b	8,   8
0001B722 0404                       		dc.b	4,   4
0001B724 2008                       		dc.b  $20,   8
0001B726 0C0C                       		dc.b   $C,  $C
0001B728 0804                       		dc.b	8,   4
0001B72A 1804                       		dc.b  $18,   4
0001B72C 2804                       		dc.b  $28,   4
0001B72E 0408                       		dc.b	4,   8
0001B730 0418                       		dc.b	4, $18
0001B732 0428                       		dc.b	4, $28
0001B734 0420                       		dc.b	4, $20
0001B736 1818                       		dc.b  $18, $18
0001B738 0C18                       		dc.b   $C, $18
0001B73A 4808                       		dc.b  $48,   8
0001B73C                            ; ===========================================================================
0001B73C                            
0001B73C                            Touch_Height:				; XREF: TouchResponse
0001B73C 0240 003F                  		andi.w	#$3F,d0
0001B740 D040                       		add.w	d0,d0
0001B742 45FB 00AE                  		lea	Touch_Sizes-2(pc,d0.w),a2
0001B746 7200                       		moveq	#0,d1
0001B748 121A                       		move.b	(a2)+,d1
0001B74A 3029 0008                  		move.w	8(a1),d0
0001B74E 9041                       		sub.w	d1,d0
0001B750 9042                       		sub.w	d2,d0
0001B752 6400                       		bcc.s	loc_1AE98
0001B754 D241                       		add.w	d1,d1
0001B756 D041                       		add.w	d1,d0
0001B758 6500                       		bcs.s	Touch_Width
0001B75A 6000 FF8C                  		bra.w	Touch_NextObj
0001B75E                            ; ===========================================================================
0001B75E                            
0001B75E                            loc_1AE98:
0001B75E B044                       		cmp.w	d4,d0
0001B760 6200 FF86                  		bhi.w	Touch_NextObj
0001B764                            
0001B764                            Touch_Width:
0001B764 7200                       		moveq	#0,d1
0001B766 121A                       		move.b	(a2)+,d1
0001B768 3029 000C                  		move.w	$C(a1),d0
0001B76C 9041                       		sub.w	d1,d0
0001B76E 9043                       		sub.w	d3,d0
0001B770 6400                       		bcc.s	loc_1AEB6
0001B772 D241                       		add.w	d1,d1
0001B774 D240                       		add.w	d0,d1
0001B776 6500                       		bcs.s	Touch_ChkValue
0001B778 6000 FF6E                  		bra.w	Touch_NextObj
0001B77C                            ; ===========================================================================
0001B77C                            
0001B77C                            loc_1AEB6:
0001B77C B045                       		cmp.w	d5,d0
0001B77E 6200 FF68                  		bhi.w	Touch_NextObj
0001B782                            
0001B782                            Touch_ChkValue:
0001B782 1229 0020                  		move.b	$20(a1),d1	; load touch response number
0001B786 0201 00C0                  		andi.b	#$C0,d1		; is touch response $40	or higher?
0001B78A 6700 0000                  		beq.w	Touch_Enemy	; if not, branch
0001B78E 0C01 00C0                  		cmpi.b	#$C0,d1		; is touch response $C0	or higher?
0001B792 6700 0000                  		beq.w	Touch_Special	; if yes, branch
0001B796 4A01                       		tst.b	d1		; is touch response $80-$BF ?
0001B798 6B00 0000                  		bmi.w	Touch_ChkHurt	; if yes, branch
0001B79C                            
0001B79C                            ; touch	response is $40-$7F
0001B79C                            
0001B79C 1029 0020                  		move.b	$20(a1),d0
0001B7A0 0200 003F                  		andi.b	#$3F,d0
0001B7A4 0C00 0006                  		cmpi.b	#6,d0		; is touch response $46	?
0001B7A8 6700                       		beq.s	Touch_Monitor	; if yes, branch
0001B7AA 0C68 005A 0030             		cmpi.w	#$5A,$30(a0)
0001B7B0 6400 0000                  		bcc.w	locret_1AEF2
0001B7B4 5429 0024                  		addq.b	#2,$24(a1)	; advance the object's routine counter
0001B7B8                            
0001B7B8                            locret_1AEF2:
0001B7B8 4E75                       		rts	
0001B7BA                            ; ===========================================================================
0001B7BA                            
0001B7BA                            Touch_Monitor:
0001B7BA 4A68 0012                  		tst.w	$12(a0)		; is Sonic moving upwards?
0001B7BE 6A00                       		bpl.s	loc_1AF1E	; if not, branch
0001B7C0 3028 000C                  		move.w	$C(a0),d0
0001B7C4 0440 0010                  		subi.w	#$10,d0
0001B7C8 B069 000C                  		cmp.w	$C(a1),d0
0001B7CC 6500                       		bcs.s	locret_1AF2E
0001B7CE 4468 0012                  		neg.w	$12(a0)		; reverse Sonic's y-motion
0001B7D2 337C FE80 0012             		move.w	#-$180,$12(a1)
0001B7D8 4A29 0025                  		tst.b	$25(a1)
0001B7DC 6600                       		bne.s	locret_1AF2E
0001B7DE 5829 0025                  		addq.b	#4,$25(a1)	; advance the monitor's routine counter
0001B7E2 4E75                       		rts	
0001B7E4                            ; ===========================================================================
0001B7E4                            
0001B7E4                            loc_1AF1E:
0001B7E4 0C28 0002 001C             		cmpi.b	#2,$1C(a0)	; is Sonic rolling/jumping?
0001B7EA 6600                       		bne.s	locret_1AF2E
0001B7EC 4468 0012                  		neg.w	$12(a0)		; reverse Sonic's y-motion
0001B7F0 5429 0024                  		addq.b	#2,$24(a1)	; advance the monitor's routine counter
0001B7F4                            
0001B7F4                            locret_1AF2E:
0001B7F4 4E75                       		rts	
0001B7F6                            ; ===========================================================================
0001B7F6                            
0001B7F6                            Touch_Enemy:				; XREF: Touch_ChkValue
0001B7F6 4A38 FE2D                  		tst.b	($FFFFFE2D).w	; is Sonic invincible?
0001B7FA 6600                       		bne.s	loc_1AF40	; if yes, branch
0001B7FC 0C28 0002 001C             		cmpi.b	#2,$1C(a0)	; is Sonic rolling?
0001B802 6600 0000                  		bne.w	Touch_ChkHurt	; if not, branch
0001B806                            
0001B806                            loc_1AF40:
0001B806 4A29 0021                  		tst.b	$21(a1)
0001B80A 6700                       		beq.s	Touch_KillEnemy
0001B80C 4468 0010                  		neg.w	$10(a0)
0001B810 4468 0012                  		neg.w	$12(a0)
0001B814 E0E8 0010                  		asr	$10(a0)
0001B818 E0E8 0012                  		asr	$12(a0)
0001B81C 137C 0000 0020             		move.b	#0,$20(a1)
0001B822 5329 0021                  		subq.b	#1,$21(a1)
0001B826 6600                       		bne.s	locret_1AF68
0001B828 08E9 0007 0022             		bset	#7,$22(a1)
0001B82E                            
0001B82E                            locret_1AF68:
0001B82E 4E75                       		rts	
0001B830                            ; ===========================================================================
0001B830                            
0001B830                            Touch_KillEnemy:
0001B830 08E9 0007 0022             		bset	#7,$22(a1)
0001B836 7000                       		moveq	#0,d0
0001B838 3038 F7D0                  		move.w	($FFFFF7D0).w,d0
0001B83C 5478 F7D0                  		addq.w	#2,($FFFFF7D0).w ; add 2 to item bonus counter
0001B840 0C40 0006                  		cmpi.w	#6,d0
0001B844 6500                       		bcs.s	loc_1AF82
0001B846 7006                       		moveq	#6,d0
0001B848                            
0001B848                            loc_1AF82:
0001B848 3340 003E                  		move.w	d0,$3E(a1)
0001B84C 303B 0000                  		move.w	Enemy_Points(pc,d0.w),d0
0001B850 0C78 0020 F7D0             		cmpi.w	#$20,($FFFFF7D0).w ; have 16 enemies been destroyed?
0001B856 6500                       		bcs.s	loc_1AF9C	; if not, branch
0001B858 303C 03E8                  		move.w	#1000,d0	; fix bonus to 10000
0001B85C 337C 000A 003E             		move.w	#$A,$3E(a1)
0001B862                            
0001B862                            loc_1AF9C:
0001B862 6100 0000                  		bsr.w	AddPoints
0001B866 7400                       		moveq	#0,d2	; GMZ
0001B868 7205                       		moveq	#5,d1	; GMZ: Amount of explosion objects
0001B86A 2449                       		move.l	a1,a2	; GMZ: Save a1 address on a2
0001B86C                            
0001B86C                            TouchKE_Explode:
0001B86C 12BC 0027                  		move.b	#$27,0(a1)	; change object	to points
0001B870 137C 0000 0024             		move.b	#0,$24(a1)
0001B876 1342 0028                  		move.b	d2,$28(a1)	; GMZ: Set subtype
0001B87A                            
0001B87A                            TouchKE_NextExplosion:
0001B87A 5802                       		addq.b	#4,d2
0001B87C 4EB9 0000 E24E             		jsr	SingleObjLoad
0001B882 6600                       		bne.s	TouchKE_NoExplosion
0001B884 336A 0008 0008             		move.w	8(a2),8(a1)
0001B88A 336A 000C 000C             		move.w	$C(a2),$C(a1)
0001B890 51C9 FFDA                  		dbf	d1,TouchKE_Explode
0001B894                            
0001B894                            TouchKE_NoExplosion:
0001B894 224A                       		move.l	a2,a1	; GMZ: Restore original a1 address
0001B896 4A68 0012                  		tst.w	$12(a0)
0001B89A 6B00                       		bmi.s	loc_1AFC2
0001B89C 3028 000C                  		move.w	$C(a0),d0
0001B8A0 B069 000C                  		cmp.w	$C(a1),d0
0001B8A4 6400                       		bcc.s	loc_1AFCA
0001B8A6 4468 0012                  		neg.w	$12(a0)
0001B8AA 4E75                       		rts	
0001B8AC                            ; ===========================================================================
0001B8AC                            
0001B8AC                            loc_1AFC2:
0001B8AC 0668 0100 0012             		addi.w	#$100,$12(a0)
0001B8B2 4E75                       		rts	
0001B8B4                            ; ===========================================================================
0001B8B4                            
0001B8B4                            loc_1AFCA:
0001B8B4 0468 0100 0012             		subi.w	#$100,$12(a0)
0001B8BA 4E75                       		rts	
0001B8BC                            ; ===========================================================================
0001B8BC 000A 0014 0032 0064        Enemy_Points:	dc.w 10, 20, 50, 100
0001B8C4                            ; ===========================================================================
0001B8C4                            
0001B8C4                            loc_1AFDA:				; XREF: Touch_CatKiller
0001B8C4 08E9 0007 0022             		bset	#7,$22(a1)
0001B8CA                            
0001B8CA                            Touch_ChkHurt:				; XREF: Touch_ChkValue
0001B8CA 4A38 FE2D                  		tst.b	($FFFFFE2D).w	; is Sonic invincible?
0001B8CE 6700                       		beq.s	Touch_Hurt	; if not, branch
0001B8D0                            
0001B8D0                            loc_1AFE6:				; XREF: Touch_Hurt
0001B8D0 70FF                       		moveq	#-1,d0
0001B8D2 4E75                       		rts	
0001B8D4                            ; ===========================================================================
0001B8D4                            
0001B8D4                            Touch_Hurt:				; XREF: Touch_ChkHurt
0001B8D4 4E71                       		nop	
0001B8D6 4A68 0030                  		tst.w	$30(a0)
0001B8DA 66F4                       		bne.s	loc_1AFE6
0001B8DC 2449                       		movea.l	a1,a2
0001B8DE                            
0001B8DE                            ; End of function TouchResponse
0001B8DE                            ; continue straight to HurtSonic
0001B8DE                            
0001B8DE                            ; ---------------------------------------------------------------------------
0001B8DE                            ; Hurting Sonic	subroutine
0001B8DE                            ; ---------------------------------------------------------------------------
0001B8DE                            
0001B8DE                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0001B8DE                            
0001B8DE                            
0001B8DE                            HurtSonic:
0001B8DE 4A38 FE2C                  		tst.b	($FFFFFE2C).w	; does Sonic have a shield?
0001B8E2 6600                       		bne.s	Hurt_Shield	; if yes, branch
0001B8E4 4A78 FE20                  		tst.w	($FFFFFE20).w	; does Sonic have any rings?
0001B8E8 6700 0000                  		beq.w	Hurt_NoRings	; if not, branch
0001B8EC 4EB9 0000 E24E             		jsr	SingleObjLoad
0001B8F2 6600                       		bne.s	Hurt_Shield
0001B8F4 12BC 0037                  		move.b	#$37,0(a1)	; load bouncing	multi rings object
0001B8F8 3368 0008 0008             		move.w	8(a0),8(a1)
0001B8FE 3368 000C 000C             		move.w	$C(a0),$C(a1)
0001B904                            
0001B904                            Hurt_Shield:
0001B904 11FC 0000 FE2C             		move.b	#0,($FFFFFE2C).w ; remove shield
0001B90A 117C 0004 0024             		move.b	#4,$24(a0)
0001B910 6100 86F8                  		bsr.w	Sonic_ResetOnFloor
0001B914 08E8 0001 0022             		bset	#1,$22(a0)
0001B91A 317C FC00 0012             		move.w	#-$400,$12(a0)	; make Sonic bounce away from the object
0001B920 317C FE00 0010             		move.w	#-$200,$10(a0)
0001B926 0828 0006 0022             		btst	#6,$22(a0)
0001B92C 6700                       		beq.s	Hurt_Reverse
0001B92E 317C FE00 0012             		move.w	#-$200,$12(a0)
0001B934 317C FF00 0010             		move.w	#-$100,$10(a0)
0001B93A                            
0001B93A                            Hurt_Reverse:
0001B93A 3028 0008                  		move.w	8(a0),d0
0001B93E B06A 0008                  		cmp.w	8(a2),d0
0001B942 6500                       		bcs.s	Hurt_ChkSpikes	; if Sonic is left of the object, branch
0001B944 4468 0010                  		neg.w	$10(a0)		; if Sonic is right of the object, reverse
0001B948                            
0001B948                            Hurt_ChkSpikes:
0001B948 317C 0000 0014             		move.w	#0,$14(a0)
0001B94E 117C 001A 001C             		move.b	#$1A,$1C(a0)
0001B954 317C 0078 0030             		move.w	#$78,$30(a0)
0001B95A 303C 00A3                  		move.w	#$A3,d0		; load normal damage sound
0001B95E 0C12 0036                  		cmpi.b	#$36,(a2)	; was damage caused by spikes?
0001B962 6600                       		bne.s	Hurt_Sound	; if not, branch
0001B964 0C12 0016                  		cmpi.b	#$16,(a2)	; was damage caused by LZ harpoon?
0001B968 6600                       		bne.s	Hurt_Sound	; if not, branch
0001B96A 303C 00A6                  		move.w	#$A6,d0		; load spikes damage sound
0001B96E                            
0001B96E                            Hurt_Sound:
0001B96E 4EB9 0000 15C0             		jsr	(PlaySound_Special).l
0001B974 70FF                       		moveq	#-1,d0
0001B976 4E75                       		rts	
0001B978                            ; ===========================================================================
0001B978                            
0001B978                            Hurt_NoRings:
0001B978 4A78 FFFA                  		tst.w	($FFFFFFFA).w	; is debug mode	cheat on?
0001B97C 6600 FF86                  		bne.w	Hurt_Shield	; if yes, branch
0001B980                            ; End of function HurtSonic
0001B980                            
0001B980                            ; ---------------------------------------------------------------------------
0001B980                            ; Subroutine to	kill Sonic
0001B980                            ; ---------------------------------------------------------------------------
0001B980                            
0001B980                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0001B980                            
0001B980                            
0001B980                            KillSonic:
0001B980 4A78 FE08                  		tst.w	($FFFFFE08).w	; is debug mode	active?
0001B984 6600                       		bne.s	Kill_NoDeath	; if yes, branch
0001B986 11FC 0000 FE2D             		move.b	#0,($FFFFFE2D).w ; remove invincibility
0001B98C 117C 0006 0024             		move.b	#6,$24(a0)
0001B992 6100 8676                  		bsr.w	Sonic_ResetOnFloor
0001B996 08E8 0001 0022             		bset	#1,$22(a0)
0001B99C 317C F900 0012             		move.w	#-$700,$12(a0)
0001B9A2 317C 0000 0010             		move.w	#0,$10(a0)
0001B9A8 317C 0000 0014             		move.w	#0,$14(a0)
0001B9AE 3168 000C 0038             		move.w	$C(a0),$38(a0)
0001B9B4 117C 0018 001C             		move.b	#$18,$1C(a0)
0001B9BA 08E8 0007 0002             		bset	#7,2(a0)
0001B9C0 303C 00A3                  		move.w	#$A3,d0		; play normal death sound
0001B9C4 0C12 0036                  		cmpi.b	#$36,(a2)	; check	if you were killed by spikes
0001B9C8 6600                       		bne.s	Kill_Sound
0001B9CA 303C 00A6                  		move.w	#$A6,d0		; play spikes death sound
0001B9CE                            
0001B9CE                            Kill_Sound:
0001B9CE 4EB9 0000 15C0             		jsr	(PlaySound_Special).l
0001B9D4                            
0001B9D4                            Kill_NoDeath:
0001B9D4 70FF                       		moveq	#-1,d0
0001B9D6 4E75                       		rts	
0001B9D8                            ; End of function KillSonic
0001B9D8                            
0001B9D8                            
0001B9D8                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0001B9D8                            
0001B9D8                            
0001B9D8                            Touch_Special:				; XREF: Touch_ChkValue
0001B9D8 1229 0020                  		move.b	$20(a1),d1
0001B9DC 0201 003F                  		andi.b	#$3F,d1
0001B9E0 0C01 000B                  		cmpi.b	#$B,d1		; is touch response $CB	?
0001B9E4 6700                       		beq.s	Touch_CatKiller	; if yes, branch
0001B9E6 0C01 000C                  		cmpi.b	#$C,d1		; is touch response $CC	?
0001B9EA 6700                       		beq.s	Touch_Yadrin	; if yes, branch
0001B9EC 0C01 0017                  		cmpi.b	#$17,d1		; is touch response $D7	?
0001B9F0 6700                       		beq.s	Touch_D7orE1	; if yes, branch
0001B9F2 0C01 0021                  		cmpi.b	#$21,d1		; is touch response $E1	?
0001B9F6 6700                       		beq.s	Touch_D7orE1	; if yes, branch
0001B9F8 4E75                       		rts	
0001B9FA                            ; ===========================================================================
0001B9FA                            
0001B9FA                            Touch_CatKiller:			; XREF: Touch_Special
0001B9FA 6000 FEC8                  		bra.w	loc_1AFDA
0001B9FE                            ; ===========================================================================
0001B9FE                            
0001B9FE                            Touch_Yadrin:				; XREF: Touch_Special
0001B9FE 9A40                       		sub.w	d0,d5
0001BA00 0C45 0008                  		cmpi.w	#8,d5
0001BA04 6400                       		bcc.s	loc_1B144
0001BA06 3029 0008                  		move.w	8(a1),d0
0001BA0A 5940                       		subq.w	#4,d0
0001BA0C 0829 0000 0022             		btst	#0,$22(a1)
0001BA12 6700                       		beq.s	loc_1B130
0001BA14 0440 0010                  		subi.w	#$10,d0
0001BA18                            
0001BA18                            loc_1B130:
0001BA18 9042                       		sub.w	d2,d0
0001BA1A 6400                       		bcc.s	loc_1B13C
0001BA1C 0640 0018                  		addi.w	#$18,d0
0001BA20 6500                       		bcs.s	loc_1B140
0001BA22 6000                       		bra.s	loc_1B144
0001BA24                            ; ===========================================================================
0001BA24                            
0001BA24                            loc_1B13C:
0001BA24 B044                       		cmp.w	d4,d0
0001BA26 6200                       		bhi.s	loc_1B144
0001BA28                            
0001BA28                            loc_1B140:
0001BA28 6000 FEA0                  		bra.w	Touch_ChkHurt
0001BA2C                            ; ===========================================================================
0001BA2C                            
0001BA2C                            loc_1B144:
0001BA2C 6000 FDC8                  		bra.w	Touch_Enemy
0001BA30                            ; ===========================================================================
0001BA30                            
0001BA30                            Touch_D7orE1:				; XREF: Touch_Special
0001BA30 5229 0021                  		addq.b	#1,$21(a1)
0001BA34 4E75                       		rts	
0001BA36                            ; End of function Touch_Special
0001BA36                            
0001BA36                            ; ---------------------------------------------------------------------------
0001BA36                            ; Subroutine to	show the special stage layout
0001BA36                            ; ---------------------------------------------------------------------------
0001BA36                            
0001BA36                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0001BA36                            
0001BA36                            
0001BA36                            SS_ShowLayout:				; XREF: SpecialStage
0001BA36 6100 0000                  		bsr.w	SS_AniWallsRings
0001BA3A 6100 0000                  		bsr.w	SS_AniItems
0001BA3E 3F05                       		move.w	d5,-(sp)
0001BA40 43F8 8000                  		lea	($FFFF8000).w,a1
0001BA44 1038 F780                  		move.b	($FFFFF780).w,d0
0001BA48 0200 00FC                  		andi.b	#$FC,d0
0001BA4C 4EB9 0000 2CAC             		jsr	(CalcSine).l
0001BA52 3800                       		move.w	d0,d4
0001BA54 3A01                       		move.w	d1,d5
0001BA56 C9FC 0018                  		muls.w	#$18,d4
0001BA5A CBFC 0018                  		muls.w	#$18,d5
0001BA5E 7400                       		moveq	#0,d2
0001BA60 3438 F700                  		move.w	($FFFFF700).w,d2
0001BA64 84FC 0018                  		divu.w	#$18,d2
0001BA68 4842                       		swap	d2
0001BA6A 4442                       		neg.w	d2
0001BA6C 0642 FF4C                  		addi.w	#-$B4,d2
0001BA70 7600                       		moveq	#0,d3
0001BA72 3638 F704                  		move.w	($FFFFF704).w,d3
0001BA76 86FC 0018                  		divu.w	#$18,d3
0001BA7A 4843                       		swap	d3
0001BA7C 4443                       		neg.w	d3
0001BA7E 0643 FF4C                  		addi.w	#-$B4,d3
0001BA82 3E3C 000F                  		move.w	#$F,d7
0001BA86                            
0001BA86                            loc_1B19E:
0001BA86 48A7 E000                  		movem.w	d0-d2,-(sp)
0001BA8A 48A7 C000                  		movem.w	d0-d1,-(sp)
0001BA8E 4440                       		neg.w	d0
0001BA90 C3C2                       		muls.w	d2,d1
0001BA92 C1C3                       		muls.w	d3,d0
0001BA94 2C00                       		move.l	d0,d6
0001BA96 DC81                       		add.l	d1,d6
0001BA98 4C9F 0003                  		movem.w	(sp)+,d0-d1
0001BA9C C1C2                       		muls.w	d2,d0
0001BA9E C3C3                       		muls.w	d3,d1
0001BAA0 D280                       		add.l	d0,d1
0001BAA2 2406                       		move.l	d6,d2
0001BAA4 3C3C 000F                  		move.w	#$F,d6
0001BAA8                            
0001BAA8                            loc_1B1C0:
0001BAA8 2002                       		move.l	d2,d0
0001BAAA E080                       		asr.l	#8,d0
0001BAAC 32C0                       		move.w	d0,(a1)+
0001BAAE 2001                       		move.l	d1,d0
0001BAB0 E080                       		asr.l	#8,d0
0001BAB2 32C0                       		move.w	d0,(a1)+
0001BAB4 D485                       		add.l	d5,d2
0001BAB6 D284                       		add.l	d4,d1
0001BAB8 51CE FFEE                  		dbf	d6,loc_1B1C0
0001BABC                            
0001BABC 4C9F 0007                  		movem.w	(sp)+,d0-d2
0001BAC0 0643 0018                  		addi.w	#$18,d3
0001BAC4 51CF FFC0                  		dbf	d7,loc_1B19E
0001BAC8                            
0001BAC8 3A1F                       		move.w	(sp)+,d5
0001BACA 41F9 00FF 0000             		lea	($FF0000).l,a0
0001BAD0 7000                       		moveq	#0,d0
0001BAD2 3038 F704                  		move.w	($FFFFF704).w,d0
0001BAD6 80FC 0018                  		divu.w	#$18,d0
0001BADA C0FC 0080                  		mulu.w	#$80,d0
0001BADE D1C0                       		adda.l	d0,a0
0001BAE0 7000                       		moveq	#0,d0
0001BAE2 3038 F700                  		move.w	($FFFFF700).w,d0
0001BAE6 80FC 0018                  		divu.w	#$18,d0
0001BAEA D0C0                       		adda.w	d0,a0
0001BAEC 49F8 8000                  		lea	($FFFF8000).w,a4
0001BAF0 3E3C 000F                  		move.w	#$F,d7
0001BAF4                            
0001BAF4                            loc_1B20C:
0001BAF4 3C3C 000F                  		move.w	#$F,d6
0001BAF8                            
0001BAF8                            loc_1B210:
0001BAF8 7000                       		moveq	#0,d0
0001BAFA 1018                       		move.b	(a0)+,d0
0001BAFC 6700                       		beq.s	loc_1B268
0001BAFE 0C00 004E                  		cmpi.b	#$4E,d0
0001BB02 6200                       		bhi.s	loc_1B268
0001BB04 3614                       		move.w	(a4),d3
0001BB06 0643 0120                  		addi.w	#$120,d3
0001BB0A 0C43 0070                  		cmpi.w	#$70,d3
0001BB0E 6500                       		bcs.s	loc_1B268
0001BB10 0C43 01D0                  		cmpi.w	#$1D0,d3
0001BB14 6400                       		bcc.s	loc_1B268
0001BB16 342C 0002                  		move.w	2(a4),d2
0001BB1A 0642 00F0                  		addi.w	#$F0,d2
0001BB1E 0C42 0070                  		cmpi.w	#$70,d2
0001BB22 6500                       		bcs.s	loc_1B268
0001BB24 0C42 0170                  		cmpi.w	#$170,d2
0001BB28 6400                       		bcc.s	loc_1B268
0001BB2A 4BF9 00FF 4000             		lea	($FF4000).l,a5
0001BB30 E748                       		lsl.w	#3,d0
0001BB32 4BF5 0000                  		lea	(a5,d0.w),a5
0001BB36 225D                       		movea.l	(a5)+,a1
0001BB38 321D                       		move.w	(a5)+,d1
0001BB3A D241                       		add.w	d1,d1
0001BB3C D2F1 1000                  		adda.w	(a1,d1.w),a1
0001BB40 365D                       		movea.w	(a5)+,a3
0001BB42 7200                       		moveq	#0,d1
0001BB44 1219                       		move.b	(a1)+,d1
0001BB46 5301                       		subq.b	#1,d1
0001BB48 6B00                       		bmi.s	loc_1B268
0001BB4A 4EB9 0000 DF26             		jsr	sub_D762
0001BB50                            
0001BB50                            loc_1B268:
0001BB50 584C                       		addq.w	#4,a4
0001BB52 51CE FFA4                  		dbf	d6,loc_1B210
0001BB56                            
0001BB56 41E8 0070                  		lea	$70(a0),a0
0001BB5A 51CF FF98                  		dbf	d7,loc_1B20C
0001BB5E                            
0001BB5E 11C5 F62C                  		move.b	d5,($FFFFF62C).w
0001BB62 0C05 0050                  		cmpi.b	#$50,d5
0001BB66 6700                       		beq.s	loc_1B288
0001BB68 24BC 0000 0000             		move.l	#0,(a2)
0001BB6E 4E75                       		rts	
0001BB70                            ; ===========================================================================
0001BB70                            
0001BB70                            loc_1B288:
0001BB70 157C 0000 FFFB             		move.b	#0,-5(a2)
0001BB76 4E75                       		rts	
0001BB78                            ; End of function SS_ShowLayout
0001BB78                            
0001BB78                            ; ---------------------------------------------------------------------------
0001BB78                            ; Subroutine to	animate	walls and rings	in the special stage
0001BB78                            ; ---------------------------------------------------------------------------
0001BB78                            
0001BB78                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0001BB78                            
0001BB78                            
0001BB78                            SS_AniWallsRings:			; XREF: SS_ShowLayout
0001BB78 43F9 00FF 400C             		lea	($FF400C).l,a1
0001BB7E 7000                       		moveq	#0,d0
0001BB80 1038 F780                  		move.b	($FFFFF780).w,d0
0001BB84 E408                       		lsr.b	#2,d0
0001BB86 0240 000F                  		andi.w	#$F,d0
0001BB8A 7223                       		moveq	#$23,d1
0001BB8C                            
0001BB8C                            loc_1B2A4:
0001BB8C 3280                       		move.w	d0,(a1)
0001BB8E 5049                       		addq.w	#8,a1
0001BB90 51C9 FFFA                  		dbf	d1,loc_1B2A4
0001BB94                            
0001BB94 43F9 00FF 4005             		lea	($FF4005).l,a1
0001BB9A 5338 FEC2                  		subq.b	#1,($FFFFFEC2).w
0001BB9E 6A00                       		bpl.s	loc_1B2C8
0001BBA0 11FC 0007 FEC2             		move.b	#7,($FFFFFEC2).w
0001BBA6 5238 FEC3                  		addq.b	#1,($FFFFFEC3).w
0001BBAA 0238 0003 FEC3             		andi.b	#3,($FFFFFEC3).w
0001BBB0                            
0001BBB0                            loc_1B2C8:
0001BBB0 1378 FEC3 01D0             		move.b	($FFFFFEC3).w,$1D0(a1)
0001BBB6 5338 FEC4                  		subq.b	#1,($FFFFFEC4).w
0001BBBA 6A00                       		bpl.s	loc_1B2E4
0001BBBC 11FC 0007 FEC4             		move.b	#7,($FFFFFEC4).w
0001BBC2 5238 FEC5                  		addq.b	#1,($FFFFFEC5).w
0001BBC6 0238 0001 FEC5             		andi.b	#1,($FFFFFEC5).w
0001BBCC                            
0001BBCC                            loc_1B2E4:
0001BBCC 1038 FEC5                  		move.b	($FFFFFEC5).w,d0
0001BBD0 1340 0138                  		move.b	d0,$138(a1)
0001BBD4 1340 0160                  		move.b	d0,$160(a1)
0001BBD8 1340 0148                  		move.b	d0,$148(a1)
0001BBDC 1340 0150                  		move.b	d0,$150(a1)
0001BBE0 1340 01D8                  		move.b	d0,$1D8(a1)
0001BBE4 1340 01E0                  		move.b	d0,$1E0(a1)
0001BBE8 1340 01E8                  		move.b	d0,$1E8(a1)
0001BBEC 1340 01F0                  		move.b	d0,$1F0(a1)
0001BBF0 1340 01F8                  		move.b	d0,$1F8(a1)
0001BBF4 1340 0200                  		move.b	d0,$200(a1)
0001BBF8 5338 FEC6                  		subq.b	#1,($FFFFFEC6).w
0001BBFC 6A00                       		bpl.s	loc_1B326
0001BBFE 11FC 0004 FEC6             		move.b	#4,($FFFFFEC6).w
0001BC04 5238 FEC7                  		addq.b	#1,($FFFFFEC7).w
0001BC08 0238 0003 FEC7             		andi.b	#3,($FFFFFEC7).w
0001BC0E                            
0001BC0E                            loc_1B326:
0001BC0E 1038 FEC7                  		move.b	($FFFFFEC7).w,d0
0001BC12 1340 0168                  		move.b	d0,$168(a1)
0001BC16 1340 0170                  		move.b	d0,$170(a1)
0001BC1A 1340 0178                  		move.b	d0,$178(a1)
0001BC1E 1340 0180                  		move.b	d0,$180(a1)
0001BC22 5338 FEC0                  		subq.b	#1,($FFFFFEC0).w
0001BC26 6A00                       		bpl.s	loc_1B350
0001BC28 11FC 0007 FEC0             		move.b	#7,($FFFFFEC0).w
0001BC2E 5338 FEC1                  		subq.b	#1,($FFFFFEC1).w
0001BC32 0238 0007 FEC1             		andi.b	#7,($FFFFFEC1).w
0001BC38                            
0001BC38                            loc_1B350:
0001BC38 43F9 00FF 4016             		lea	($FF4016).l,a1
0001BC3E 41F9 0000 0000             		lea	(SS_WaRiVramSet).l,a0
0001BC44 7000                       		moveq	#0,d0
0001BC46 1038 FEC1                  		move.b	($FFFFFEC1).w,d0
0001BC4A D040                       		add.w	d0,d0
0001BC4C 41F0 0000                  		lea	(a0,d0.w),a0
0001BC50 3290                       		move.w	(a0),(a1)
0001BC52 3368 0002 0008             		move.w	2(a0),8(a1)
0001BC58 3368 0004 0010             		move.w	4(a0),$10(a1)
0001BC5E 3368 0006 0018             		move.w	6(a0),$18(a1)
0001BC64 3368 0008 0020             		move.w	8(a0),$20(a1)
0001BC6A 3368 000A 0028             		move.w	$A(a0),$28(a1)
0001BC70 3368 000C 0030             		move.w	$C(a0),$30(a1)
0001BC76 3368 000E 0038             		move.w	$E(a0),$38(a1)
0001BC7C D0FC 0020                  		adda.w	#$20,a0
0001BC80 D2FC 0048                  		adda.w	#$48,a1
0001BC84 3290                       		move.w	(a0),(a1)
0001BC86 3368 0002 0008             		move.w	2(a0),8(a1)
0001BC8C 3368 0004 0010             		move.w	4(a0),$10(a1)
0001BC92 3368 0006 0018             		move.w	6(a0),$18(a1)
0001BC98 3368 0008 0020             		move.w	8(a0),$20(a1)
0001BC9E 3368 000A 0028             		move.w	$A(a0),$28(a1)
0001BCA4 3368 000C 0030             		move.w	$C(a0),$30(a1)
0001BCAA 3368 000E 0038             		move.w	$E(a0),$38(a1)
0001BCB0 D0FC 0020                  		adda.w	#$20,a0
0001BCB4 D2FC 0048                  		adda.w	#$48,a1
0001BCB8 3290                       		move.w	(a0),(a1)
0001BCBA 3368 0002 0008             		move.w	2(a0),8(a1)
0001BCC0 3368 0004 0010             		move.w	4(a0),$10(a1)
0001BCC6 3368 0006 0018             		move.w	6(a0),$18(a1)
0001BCCC 3368 0008 0020             		move.w	8(a0),$20(a1)
0001BCD2 3368 000A 0028             		move.w	$A(a0),$28(a1)
0001BCD8 3368 000C 0030             		move.w	$C(a0),$30(a1)
0001BCDE 3368 000E 0038             		move.w	$E(a0),$38(a1)
0001BCE4 D0FC 0020                  		adda.w	#$20,a0
0001BCE8 D2FC 0048                  		adda.w	#$48,a1
0001BCEC 3290                       		move.w	(a0),(a1)
0001BCEE 3368 0002 0008             		move.w	2(a0),8(a1)
0001BCF4 3368 0004 0010             		move.w	4(a0),$10(a1)
0001BCFA 3368 0006 0018             		move.w	6(a0),$18(a1)
0001BD00 3368 0008 0020             		move.w	8(a0),$20(a1)
0001BD06 3368 000A 0028             		move.w	$A(a0),$28(a1)
0001BD0C 3368 000C 0030             		move.w	$C(a0),$30(a1)
0001BD12 3368 000E 0038             		move.w	$E(a0),$38(a1)
0001BD18 D0FC 0020                  		adda.w	#$20,a0
0001BD1C D2FC 0048                  		adda.w	#$48,a1
0001BD20 4E75                       		rts	
0001BD22                            ; End of function SS_AniWallsRings
0001BD22                            
0001BD22                            ; ===========================================================================
0001BD22 0142 6142 0142 0142 0142+  SS_WaRiVramSet:	dc.w $142, $6142, $142,	$142, $142, $142, $142,	$6142
0001BD32 0142 6142 0142 0142 0142+  		dc.w $142, $6142, $142,	$142, $142, $142, $142,	$6142
0001BD42 2142 0142 2142 2142 2142+  		dc.w $2142, $142, $2142, $2142,	$2142, $2142, $2142, $142
0001BD52 2142 0142 2142 2142 2142+  		dc.w $2142, $142, $2142, $2142,	$2142, $2142, $2142, $142
0001BD62 4142 2142 4142 4142 4142+  		dc.w $4142, $2142, $4142, $4142, $4142,	$4142, $4142, $2142
0001BD72 4142 2142 4142 4142 4142+  		dc.w $4142, $2142, $4142, $4142, $4142,	$4142, $4142, $2142
0001BD82 6142 4142 6142 6142 6142+  		dc.w $6142, $4142, $6142, $6142, $6142,	$6142, $6142, $4142
0001BD92 6142 4142 6142 6142 6142+  		dc.w $6142, $4142, $6142, $6142, $6142,	$6142, $6142, $4142
0001BDA2                            ; ---------------------------------------------------------------------------
0001BDA2                            ; Subroutine to	remove items when you collect them in the special stage
0001BDA2                            ; ---------------------------------------------------------------------------
0001BDA2                            
0001BDA2                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0001BDA2                            
0001BDA2                            
0001BDA2                            SS_RemoveCollectedItem:			; XREF: Obj09_ChkItems
0001BDA2 45F9 00FF 4400             		lea	($FF4400).l,a2
0001BDA8 303C 001F                  		move.w	#$1F,d0
0001BDAC                            
0001BDAC                            loc_1B4C4:
0001BDAC 4A12                       		tst.b	(a2)
0001BDAE 6700                       		beq.s	locret_1B4CE
0001BDB0 504A                       		addq.w	#8,a2
0001BDB2 51C8 FFF8                  		dbf	d0,loc_1B4C4
0001BDB6                            
0001BDB6                            locret_1B4CE:
0001BDB6 4E75                       		rts	
0001BDB8                            ; End of function SS_RemoveCollectedItem
0001BDB8                            
0001BDB8                            ; ---------------------------------------------------------------------------
0001BDB8                            ; Subroutine to	animate	special	stage items when you touch them
0001BDB8                            ; ---------------------------------------------------------------------------
0001BDB8                            
0001BDB8                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0001BDB8                            
0001BDB8                            
0001BDB8                            SS_AniItems:				; XREF: SS_ShowLayout
0001BDB8 41F9 00FF 4400             		lea	($FF4400).l,a0
0001BDBE 3E3C 001F                  		move.w	#$1F,d7
0001BDC2                            
0001BDC2                            loc_1B4DA:
0001BDC2 7000                       		moveq	#0,d0
0001BDC4 1010                       		move.b	(a0),d0
0001BDC6 6700                       		beq.s	loc_1B4E8
0001BDC8 E548                       		lsl.w	#2,d0
0001BDCA 227B 0000                  		movea.l	SS_AniIndex-4(pc,d0.w),a1
0001BDCE 4E91                       		jsr	(a1)
0001BDD0                            
0001BDD0                            loc_1B4E8:
0001BDD0 5048                       		addq.w	#8,a0
0001BDD2                            
0001BDD2                            loc_1B4EA:
0001BDD2 51CF FFEE                  		dbf	d7,loc_1B4DA
0001BDD6                            
0001BDD6 4E75                       		rts	
0001BDD8                            ; End of function SS_AniItems
0001BDD8                            
0001BDD8                            ; ===========================================================================
0001BDD8 0000 0000                  SS_AniIndex:	dc.l SS_AniRingSparks
0001BDDC 0000 0000                  		dc.l SS_AniBumper
0001BDE0 0000 0000                  		dc.l SS_Ani1Up
0001BDE4 0000 0000                  		dc.l SS_AniReverse
0001BDE8 0000 0000                  		dc.l SS_AniEmeraldSparks
0001BDEC 0000 0000                  		dc.l SS_AniGlassBlock
0001BDF0                            ; ===========================================================================
0001BDF0                            
0001BDF0                            SS_AniRingSparks:			; XREF: SS_AniIndex
0001BDF0 5328 0002                  		subq.b	#1,2(a0)
0001BDF4 6A00                       		bpl.s	locret_1B530
0001BDF6 117C 0005 0002             		move.b	#5,2(a0)
0001BDFC 7000                       		moveq	#0,d0
0001BDFE 1028 0003                  		move.b	3(a0),d0
0001BE02 5228 0003                  		addq.b	#1,3(a0)
0001BE06 2268 0004                  		movea.l	4(a0),a1
0001BE0A 103B 0000                  		move.b	SS_AniRingData(pc,d0.w),d0
0001BE0E 1280                       		move.b	d0,(a1)
0001BE10 6600                       		bne.s	locret_1B530
0001BE12 4290                       		clr.l	(a0)
0001BE14 42A8 0004                  		clr.l	4(a0)
0001BE18                            
0001BE18                            locret_1B530:
0001BE18 4E75                       		rts	
0001BE1A                            ; ===========================================================================
0001BE1A 4243 4445 0000             SS_AniRingData:	dc.b $42, $43, $44, $45, 0, 0
0001BE20                            ; ===========================================================================
0001BE20                            
0001BE20                            SS_AniBumper:				; XREF: SS_AniIndex
0001BE20 5328 0002                  		subq.b	#1,2(a0)
0001BE24 6A00                       		bpl.s	locret_1B566
0001BE26 117C 0007 0002             		move.b	#7,2(a0)
0001BE2C 7000                       		moveq	#0,d0
0001BE2E 1028 0003                  		move.b	3(a0),d0
0001BE32 5228 0003                  		addq.b	#1,3(a0)
0001BE36 2268 0004                  		movea.l	4(a0),a1
0001BE3A 103B 0000                  		move.b	SS_AniBumpData(pc,d0.w),d0
0001BE3E 6600                       		bne.s	loc_1B564
0001BE40 4290                       		clr.l	(a0)
0001BE42 42A8 0004                  		clr.l	4(a0)
0001BE46 12BC 0025                  		move.b	#$25,(a1)
0001BE4A 4E75                       		rts	
0001BE4C                            ; ===========================================================================
0001BE4C                            
0001BE4C                            loc_1B564:
0001BE4C 1280                       		move.b	d0,(a1)
0001BE4E                            
0001BE4E                            locret_1B566:
0001BE4E 4E75                       		rts	
0001BE50                            ; ===========================================================================
0001BE50 3233 3233 0000             SS_AniBumpData:	dc.b $32, $33, $32, $33, 0, 0
0001BE56                            ; ===========================================================================
0001BE56                            
0001BE56                            SS_Ani1Up:				; XREF: SS_AniIndex
0001BE56 5328 0002                  		subq.b	#1,2(a0)
0001BE5A 6A00                       		bpl.s	locret_1B596
0001BE5C 117C 0005 0002             		move.b	#5,2(a0)
0001BE62 7000                       		moveq	#0,d0
0001BE64 1028 0003                  		move.b	3(a0),d0
0001BE68 5228 0003                  		addq.b	#1,3(a0)
0001BE6C 2268 0004                  		movea.l	4(a0),a1
0001BE70 103B 0000                  		move.b	SS_Ani1UpData(pc,d0.w),d0
0001BE74 1280                       		move.b	d0,(a1)
0001BE76 6600                       		bne.s	locret_1B596
0001BE78 4290                       		clr.l	(a0)
0001BE7A 42A8 0004                  		clr.l	4(a0)
0001BE7E                            
0001BE7E                            locret_1B596:
0001BE7E 4E75                       		rts	
0001BE80                            ; ===========================================================================
0001BE80 4647 4849 0000             SS_Ani1UpData:	dc.b $46, $47, $48, $49, 0, 0
0001BE86                            ; ===========================================================================
0001BE86                            
0001BE86                            SS_AniReverse:				; XREF: SS_AniIndex
0001BE86 5328 0002                  		subq.b	#1,2(a0)
0001BE8A 6A00                       		bpl.s	locret_1B5CC
0001BE8C 117C 0007 0002             		move.b	#7,2(a0)
0001BE92 7000                       		moveq	#0,d0
0001BE94 1028 0003                  		move.b	3(a0),d0
0001BE98 5228 0003                  		addq.b	#1,3(a0)
0001BE9C 2268 0004                  		movea.l	4(a0),a1
0001BEA0 103B 0000                  		move.b	SS_AniRevData(pc,d0.w),d0
0001BEA4 6600                       		bne.s	loc_1B5CA
0001BEA6 4290                       		clr.l	(a0)
0001BEA8 42A8 0004                  		clr.l	4(a0)
0001BEAC 12BC 002B                  		move.b	#$2B,(a1)
0001BEB0 4E75                       		rts	
0001BEB2                            ; ===========================================================================
0001BEB2                            
0001BEB2                            loc_1B5CA:
0001BEB2 1280                       		move.b	d0,(a1)
0001BEB4                            
0001BEB4                            locret_1B5CC:
0001BEB4 4E75                       		rts	
0001BEB6                            ; ===========================================================================
0001BEB6 2B31 2B31 0000             SS_AniRevData:	dc.b $2B, $31, $2B, $31, 0, 0
0001BEBC                            ; ===========================================================================
0001BEBC                            
0001BEBC                            SS_AniEmeraldSparks:			; XREF: SS_AniIndex
0001BEBC 5328 0002                  		subq.b	#1,2(a0)
0001BEC0 6A00                       		bpl.s	locret_1B60C
0001BEC2 117C 0005 0002             		move.b	#5,2(a0)
0001BEC8 7000                       		moveq	#0,d0
0001BECA 1028 0003                  		move.b	3(a0),d0
0001BECE 5228 0003                  		addq.b	#1,3(a0)
0001BED2 2268 0004                  		movea.l	4(a0),a1
0001BED6 103B 0000                  		move.b	SS_AniEmerData(pc,d0.w),d0
0001BEDA 1280                       		move.b	d0,(a1)
0001BEDC 6600                       		bne.s	locret_1B60C
0001BEDE 4290                       		clr.l	(a0)
0001BEE0 42A8 0004                  		clr.l	4(a0)
0001BEE4 11FC 0004 D024             		move.b	#4,($FFFFD024).w
0001BEEA 303C 00A8                  		move.w	#$A8,d0
0001BEEE 4EB9 0000 15C0             		jsr	(PlaySound_Special).l ;	play special stage GOAL	sound
0001BEF4                            
0001BEF4                            locret_1B60C:
0001BEF4 4E75                       		rts	
0001BEF6                            ; ===========================================================================
0001BEF6 4647 4849 0000             SS_AniEmerData:	dc.b $46, $47, $48, $49, 0, 0
0001BEFC                            ; ===========================================================================
0001BEFC                            
0001BEFC                            SS_AniGlassBlock:			; XREF: SS_AniIndex
0001BEFC 5328 0002                  		subq.b	#1,2(a0)
0001BF00 6A00                       		bpl.s	locret_1B640
0001BF02 117C 0001 0002             		move.b	#1,2(a0)
0001BF08 7000                       		moveq	#0,d0
0001BF0A 1028 0003                  		move.b	3(a0),d0
0001BF0E 5228 0003                  		addq.b	#1,3(a0)
0001BF12 2268 0004                  		movea.l	4(a0),a1
0001BF16 103B 0000                  		move.b	SS_AniGlassData(pc,d0.w),d0
0001BF1A 1280                       		move.b	d0,(a1)
0001BF1C 6600                       		bne.s	locret_1B640
0001BF1E 12A8 0004                  		move.b	4(a0),(a1)
0001BF22 4290                       		clr.l	(a0)
0001BF24 42A8 0004                  		clr.l	4(a0)
0001BF28                            
0001BF28                            locret_1B640:
0001BF28 4E75                       		rts	
0001BF2A                            ; ===========================================================================
0001BF2A 4B4C 4D4E 4B4C 4D4E 0000   SS_AniGlassData:dc.b $4B, $4C, $4D, $4E, $4B, $4C, $4D,	$4E, 0,	0
0001BF34                            ; ---------------------------------------------------------------------------
0001BF34                            ; Special stage	layout pointers
0001BF34                            ; ---------------------------------------------------------------------------
0001BF34                            SS_LayoutIndex:
0001BF34                            	include "_inc\Special stage layout pointers.asm"
0001BF34                            ; ---------------------------------------------------------------------------
0001BF34                            ; Special stage	layout pointers
0001BF34                            ; ---------------------------------------------------------------------------
0001BF34 0000 0000                  	dc.l SS_1
0001BF38 0000 0000                  	dc.l SS_2
0001BF3C 0000 0000                  	dc.l SS_3
0001BF40 0000 0000                  	dc.l SS_4
0001BF44 0000 0000                  	dc.l SS_5
0001BF48 0000 0000                  	dc.l SS_6
0001BF4C                            	even
0001BF4C                            	even
0001BF4C                            
0001BF4C                            ; ---------------------------------------------------------------------------
0001BF4C                            ; Special stage	start locations
0001BF4C                            ; ---------------------------------------------------------------------------
0001BF4C                            SS_StartLoc:	incbin	misc\sloc_ss.bin
0001BF64                            		even
0001BF64                            
0001BF64                            ; ---------------------------------------------------------------------------
0001BF64                            ; Subroutine to	load special stage layout
0001BF64                            ; ---------------------------------------------------------------------------
0001BF64                            
0001BF64                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0001BF64                            
0001BF64                            
0001BF64                            SS_Load:				; XREF: SpecialStage
0001BF64 7000                       		moveq	#0,d0
0001BF66 1038 FE16                  		move.b	($FFFFFE16).w,d0 ; load	number of last special stage entered
0001BF6A 5238 FE16                  		addq.b	#1,($FFFFFE16).w
0001BF6E 0C38 0006 FE16             		cmpi.b	#6,($FFFFFE16).w
0001BF74 6500                       		bcs.s	SS_ChkEmldNum
0001BF76 11FC 0000 FE16             		move.b	#0,($FFFFFE16).w ; reset if higher than	6
0001BF7C                            
0001BF7C                            SS_ChkEmldNum:
0001BF7C 0C38 0006 FE57             		cmpi.b	#6,($FFFFFE57).w ; do you have all emeralds?
0001BF82 6700                       		beq.s	SS_LoadData	; if yes, branch
0001BF84 7200                       		moveq	#0,d1
0001BF86 1238 FE57                  		move.b	($FFFFFE57).w,d1
0001BF8A 5301                       		subq.b	#1,d1
0001BF8C 6500                       		bcs.s	SS_LoadData
0001BF8E 47F8 FE58                  		lea	($FFFFFE58).w,a3 ; check which emeralds	you have
0001BF92                            
0001BF92                            SS_ChkEmldLoop:	
0001BF92 B033 1000                  		cmp.b	(a3,d1.w),d0
0001BF96 6600                       		bne.s	SS_ChkEmldRepeat
0001BF98 60CA                       		bra.s	SS_Load
0001BF9A                            ; ===========================================================================
0001BF9A                            
0001BF9A                            SS_ChkEmldRepeat:
0001BF9A 51C9 FFF6                  		dbf	d1,SS_ChkEmldLoop
0001BF9E                            
0001BF9E                            SS_LoadData:
0001BF9E E548                       		lsl.w	#2,d0
0001BFA0 43FB 00AA                  		lea	SS_StartLoc(pc,d0.w),a1
0001BFA4 31D9 D008                  		move.w	(a1)+,($FFFFD008).w
0001BFA8 31D9 D00C                  		move.w	(a1)+,($FFFFD00C).w
0001BFAC 207B 0086                  		movea.l	SS_LayoutIndex(pc,d0.w),a0
0001BFB0 43F9 00FF 4000             		lea	($FF4000).l,a1
0001BFB6 303C 0000                  		move.w	#0,d0
0001BFBA 4EB9 0000 1942             		jsr	(EniDec).l
0001BFC0 43F9 00FF 0000             		lea	($FF0000).l,a1
0001BFC6 303C 0FFF                  		move.w	#$FFF,d0
0001BFCA                            
0001BFCA                            SS_ClrRAM3:
0001BFCA 4299                       		clr.l	(a1)+
0001BFCC 51C8 FFFC                  		dbf	d0,SS_ClrRAM3
0001BFD0                            
0001BFD0 43F9 00FF 1020             		lea	($FF1020).l,a1
0001BFD6 41F9 00FF 4000             		lea	($FF4000).l,a0
0001BFDC 723F                       		moveq	#$3F,d1
0001BFDE                            
0001BFDE                            loc_1B6F6:
0001BFDE 743F                       		moveq	#$3F,d2
0001BFE0                            
0001BFE0                            loc_1B6F8:
0001BFE0 12D8                       		move.b	(a0)+,(a1)+
0001BFE2 51CA FFFC                  		dbf	d2,loc_1B6F8
0001BFE6                            
0001BFE6 43E9 0040                  		lea	$40(a1),a1
0001BFEA 51C9 FFF2                  		dbf	d1,loc_1B6F6
0001BFEE                            
0001BFEE 43F9 00FF 4008             		lea	($FF4008).l,a1
0001BFF4 41F9 0000 0000             		lea	(SS_MapIndex).l,a0
0001BFFA 724D                       		moveq	#$4D,d1
0001BFFC                            
0001BFFC                            loc_1B714:
0001BFFC 22D8                       		move.l	(a0)+,(a1)+
0001BFFE 32FC 0000                  		move.w	#0,(a1)+
0001C002 1368 FFFC FFFF             		move.b	-4(a0),-1(a1)
0001C008 32D8                       		move.w	(a0)+,(a1)+
0001C00A 51C9 FFF0                  		dbf	d1,loc_1B714
0001C00E                            
0001C00E 43F9 00FF 4400             		lea	($FF4400).l,a1
0001C014 323C 003F                  		move.w	#$3F,d1
0001C018                            
0001C018                            loc_1B730:
0001C018                            
0001C018 4299                       		clr.l	(a1)+
0001C01A 51C9 FFFC                  		dbf	d1,loc_1B730
0001C01E                            
0001C01E 4E75                       		rts	
0001C020                            ; End of function SS_Load
0001C020                            
0001C020                            ; ===========================================================================
0001C020                            ; ---------------------------------------------------------------------------
0001C020                            ; Special stage	mappings and VRAM pointers
0001C020                            ; ---------------------------------------------------------------------------
0001C020                            SS_MapIndex:
0001C020                            	include "_inc\Special stage mappings and VRAM pointers.asm"
0001C020                            ; ---------------------------------------------------------------------------
0001C020                            ; Special stage	mappings and VRAM pointers
0001C020                            ; ---------------------------------------------------------------------------
0001C020 0000 0000                  	dc.l Map_SSWalls	; address of mappings
0001C024 0142                       	dc.w $142		; VRAM setting
0001C026 0000 0000                  	dc.l Map_SSWalls
0001C02A 0142                       	dc.w $142
0001C02C 0000 0000                  	dc.l Map_SSWalls
0001C030 0142                       	dc.w $142
0001C032 0000 0000                  	dc.l Map_SSWalls
0001C036 0142                       	dc.w $142
0001C038 0000 0000                  	dc.l Map_SSWalls
0001C03C 0142                       	dc.w $142
0001C03E 0000 0000                  	dc.l Map_SSWalls
0001C042 0142                       	dc.w $142
0001C044 0000 0000                  	dc.l Map_SSWalls
0001C048 0142                       	dc.w $142
0001C04A 0000 0000                  	dc.l Map_SSWalls
0001C04E 0142                       	dc.w $142
0001C050 0000 0000                  	dc.l Map_SSWalls
0001C054 0142                       	dc.w $142
0001C056 0000 0000                  	dc.l Map_SSWalls
0001C05A 2142                       	dc.w $2142
0001C05C 0000 0000                  	dc.l Map_SSWalls
0001C060 2142                       	dc.w $2142
0001C062 0000 0000                  	dc.l Map_SSWalls
0001C066 2142                       	dc.w $2142
0001C068 0000 0000                  	dc.l Map_SSWalls
0001C06C 2142                       	dc.w $2142
0001C06E 0000 0000                  	dc.l Map_SSWalls
0001C072 2142                       	dc.w $2142
0001C074 0000 0000                  	dc.l Map_SSWalls
0001C078 2142                       	dc.w $2142
0001C07A 0000 0000                  	dc.l Map_SSWalls
0001C07E 2142                       	dc.w $2142
0001C080 0000 0000                  	dc.l Map_SSWalls
0001C084 2142                       	dc.w $2142
0001C086 0000 0000                  	dc.l Map_SSWalls
0001C08A 2142                       	dc.w $2142
0001C08C 0000 0000                  	dc.l Map_SSWalls
0001C090 4142                       	dc.w $4142
0001C092 0000 0000                  	dc.l Map_SSWalls
0001C096 4142                       	dc.w $4142
0001C098 0000 0000                  	dc.l Map_SSWalls
0001C09C 4142                       	dc.w $4142
0001C09E 0000 0000                  	dc.l Map_SSWalls
0001C0A2 4142                       	dc.w $4142
0001C0A4 0000 0000                  	dc.l Map_SSWalls
0001C0A8 4142                       	dc.w $4142
0001C0AA 0000 0000                  	dc.l Map_SSWalls
0001C0AE 4142                       	dc.w $4142
0001C0B0 0000 0000                  	dc.l Map_SSWalls
0001C0B4 4142                       	dc.w $4142
0001C0B6 0000 0000                  	dc.l Map_SSWalls
0001C0BA 4142                       	dc.w $4142
0001C0BC 0000 0000                  	dc.l Map_SSWalls
0001C0C0 4142                       	dc.w $4142
0001C0C2 0000 0000                  	dc.l Map_SSWalls
0001C0C6 6142                       	dc.w $6142
0001C0C8 0000 0000                  	dc.l Map_SSWalls
0001C0CC 6142                       	dc.w $6142
0001C0CE 0000 0000                  	dc.l Map_SSWalls
0001C0D2 6142                       	dc.w $6142
0001C0D4 0000 0000                  	dc.l Map_SSWalls
0001C0D8 6142                       	dc.w $6142
0001C0DA 0000 0000                  	dc.l Map_SSWalls
0001C0DE 6142                       	dc.w $6142
0001C0E0 0000 0000                  	dc.l Map_SSWalls
0001C0E4 6142                       	dc.w $6142
0001C0E6 0000 0000                  	dc.l Map_SSWalls
0001C0EA 6142                       	dc.w $6142
0001C0EC 0000 0000                  	dc.l Map_SSWalls
0001C0F0 6142                       	dc.w $6142
0001C0F2 0000 0000                  	dc.l Map_SSWalls
0001C0F6 6142                       	dc.w $6142
0001C0F8 0000 F2BC                  	dc.l Map_obj47
0001C0FC 023B                       	dc.w $23B
0001C0FE 0000 0000                  	dc.l Map_SS_R
0001C102 0570                       	dc.w $570
0001C104 0000 0000                  	dc.l Map_SS_R
0001C108 0251                       	dc.w $251
0001C10A 0000 0000                  	dc.l Map_SS_R
0001C10E 0370                       	dc.w $370
0001C110 0000 0000                  	dc.l Map_SS_Up
0001C114 0263                       	dc.w $263
0001C116 0000 0000                  	dc.l Map_SS_Down
0001C11A 0263                       	dc.w $263
0001C11C 0000 0000                  	dc.l Map_SS_R
0001C120 22F0                       	dc.w $22F0
0001C122 0000 0000                  	dc.l Map_SS_Glass
0001C126 0470                       	dc.w $470
0001C128 0000 0000                  	dc.l Map_SS_Glass
0001C12C 05F0                       	dc.w $5F0
0001C12E 0000 0000                  	dc.l Map_SS_Glass
0001C132 65F0                       	dc.w $65F0
0001C134 0000 0000                  	dc.l Map_SS_Glass
0001C138 25F0                       	dc.w $25F0
0001C13A 0000 0000                  	dc.l Map_SS_Glass
0001C13E 45F0                       	dc.w $45F0
0001C140 0000 0000                  	dc.l Map_SS_R
0001C144 02F0                       	dc.w $2F0
0001C146 0100 F2BC                  	dc.l Map_obj47+$1000000	; add frame no.	* $1000000
0001C14A 023B                       	dc.w $23B
0001C14C 0200 F2BC                  	dc.l Map_obj47+$2000000
0001C150 023B                       	dc.w $23B
0001C152 0000 0000                  	dc.l Map_SS_R
0001C156 0797                       	dc.w $797
0001C158 0000 0000                  	dc.l Map_SS_R
0001C15C 07A0                       	dc.w $7A0
0001C15E 0000 0000                  	dc.l Map_SS_R
0001C162 07A9                       	dc.w $7A9
0001C164 0000 0000                  	dc.l Map_SS_R
0001C168 0797                       	dc.w $797
0001C16A 0000 0000                  	dc.l Map_SS_R
0001C16E 07A0                       	dc.w $7A0
0001C170 0000 0000                  	dc.l Map_SS_R
0001C174 07A9                       	dc.w $7A9
0001C176 0000 A626                  	dc.l Map_obj25
0001C17A 27B2                       	dc.w $27B2
0001C17C 0000 0000                  	dc.l Map_SS_Chaos3
0001C180 0770                       	dc.w $770
0001C182 0000 0000                  	dc.l Map_SS_Chaos3
0001C186 2770                       	dc.w $2770
0001C188 0000 0000                  	dc.l Map_SS_Chaos3
0001C18C 4770                       	dc.w $4770
0001C18E 0000 0000                  	dc.l Map_SS_Chaos3
0001C192 6770                       	dc.w $6770
0001C194 0000 0000                  	dc.l Map_SS_Chaos1
0001C198 0770                       	dc.w $770
0001C19A 0000 0000                  	dc.l Map_SS_Chaos2
0001C19E 0770                       	dc.w $770
0001C1A0 0000 0000                  	dc.l Map_SS_R
0001C1A4 04F0                       	dc.w $4F0
0001C1A6 0400 A626                  	dc.l Map_obj25+$4000000
0001C1AA 27B2                       	dc.w $27B2
0001C1AC 0500 A626                  	dc.l Map_obj25+$5000000
0001C1B0 27B2                       	dc.w $27B2
0001C1B2 0600 A626                  	dc.l Map_obj25+$6000000
0001C1B6 27B2                       	dc.w $27B2
0001C1B8 0700 A626                  	dc.l Map_obj25+$7000000
0001C1BC 27B2                       	dc.w $27B2
0001C1BE 0000 0000                  	dc.l Map_SS_Glass
0001C1C2 23F0                       	dc.w $23F0
0001C1C4 0000 0000                  	dc.l Map_SS_Glass+$1000000
0001C1C8 23F0                       	dc.w $23F0
0001C1CA 0000 0000                  	dc.l Map_SS_Glass+$2000000
0001C1CE 23F0                       	dc.w $23F0
0001C1D0 0000 0000                  	dc.l Map_SS_Glass+$3000000
0001C1D4 23F0                       	dc.w $23F0
0001C1D6 0000 0000                  	dc.l Map_SS_R+$2000000
0001C1DA 04F0                       	dc.w $4F0
0001C1DC 0000 0000                  	dc.l Map_SS_Glass
0001C1E0 05F0                       	dc.w $5F0
0001C1E2 0000 0000                  	dc.l Map_SS_Glass
0001C1E6 65F0                       	dc.w $65F0
0001C1E8 0000 0000                  	dc.l Map_SS_Glass
0001C1EC 25F0                       	dc.w $25F0
0001C1EE 0000 0000                  	dc.l Map_SS_Glass
0001C1F2 45F0                       	dc.w $45F0
0001C1F2 45F0                       	dc.w $45F0
0001C1F4                            
0001C1F4                            ; ---------------------------------------------------------------------------
0001C1F4                            ; Sprite mappings - special stage "R" block
0001C1F4                            ; ---------------------------------------------------------------------------
0001C1F4                            Map_SS_R:
0001C1F4                            	include "_maps\SSRblock.asm"
0001C1F4                            ; ---------------------------------------------------------------------------
0001C1F4                            ; Sprite mappings - special stage "R" block
0001C1F4                            ; ---------------------------------------------------------------------------
0001C1F4 0000 0000                  		dc.w byte_1B912-Map_SS_R, byte_1B918-Map_SS_R
0001C1F8 0000                       		dc.w byte_1B91E-Map_SS_R
0001C1FA 01                         byte_1B912:	dc.b 1
0001C1FB F40A 0000 F4               		dc.b $F4, $A, 0, 0, $F4
0001C200 01                         byte_1B918:	dc.b 1
0001C201 F40A 0009 F4               		dc.b $F4, $A, 0, 9, $F4
0001C206 00                         byte_1B91E:	dc.b 0
0001C208 00                         		even
0001C208 00                         		even
0001C208                            
0001C208                            ; ---------------------------------------------------------------------------
0001C208                            ; Sprite mappings - special stage breakable glass blocks and red-white blocks
0001C208                            ; ---------------------------------------------------------------------------
0001C208                            Map_SS_Glass:
0001C208                            	include "_maps\SSglassblock.asm"
0001C208                            ; ---------------------------------------------------------------------------
0001C208                            ; Sprite mappings - special stage breakable glass blocks and red-white blocks
0001C208                            ; ---------------------------------------------------------------------------
0001C208 0000 0000                  		dc.w byte_1B928-Map_SS_Glass, byte_1B92E-Map_SS_Glass
0001C20C 0000 0000                  		dc.w byte_1B934-Map_SS_Glass, byte_1B93A-Map_SS_Glass
0001C210 01                         byte_1B928:	dc.b 1
0001C211 F40A 0000 F4               		dc.b $F4, $A, 0, 0, $F4
0001C216 01                         byte_1B92E:	dc.b 1
0001C217 F40A 0800 F4               		dc.b $F4, $A, 8, 0, $F4
0001C21C 01                         byte_1B934:	dc.b 1
0001C21D F40A 1800 F4               		dc.b $F4, $A, $18, 0, $F4
0001C222 01                         byte_1B93A:	dc.b 1
0001C223 F40A 1000 F4               		dc.b $F4, $A, $10, 0, $F4
0001C228                            		even
0001C228                            		even
0001C228                            
0001C228                            ; ---------------------------------------------------------------------------
0001C228                            ; Sprite mappings - special stage "UP" block
0001C228                            ; ---------------------------------------------------------------------------
0001C228                            Map_SS_Up:
0001C228                            	include "_maps\SSUPblock.asm"
0001C228                            ; ---------------------------------------------------------------------------
0001C228                            ; Sprite mappings - special stage "UP" block
0001C228                            ; ---------------------------------------------------------------------------
0001C228 0000                       		dc.w byte_1B944-Map_SS_Up
0001C22A 0000                       		dc.w byte_1B94A-Map_SS_Up
0001C22C 01                         byte_1B944:	dc.b 1
0001C22D F40A 0000 F4               		dc.b $F4, $A, 0, 0, $F4
0001C232 01                         byte_1B94A:	dc.b 1
0001C233 F40A 0012 F4               		dc.b $F4, $A, 0, $12, $F4
0001C238                            		even
0001C238                            		even
0001C238                            
0001C238                            ; ---------------------------------------------------------------------------
0001C238                            ; Sprite mappings - special stage "DOWN" block
0001C238                            ; ---------------------------------------------------------------------------
0001C238                            Map_SS_Down:
0001C238                            	include "_maps\SSDOWNblock.asm"
0001C238                            ; ---------------------------------------------------------------------------
0001C238                            ; Sprite mappings - special stage "DOWN" block
0001C238                            ; ---------------------------------------------------------------------------
0001C238 0000                       		dc.w byte_1B954-Map_SS_Down
0001C23A 0000                       		dc.w byte_1B95A-Map_SS_Down
0001C23C 01                         byte_1B954:	dc.b 1
0001C23D F40A 0009 F4               		dc.b $F4, $A, 0, 9, $F4
0001C242 01                         byte_1B95A:	dc.b 1
0001C243 F40A 0012 F4               		dc.b $F4, $A, 0, $12, $F4
0001C248                            		even
0001C248                            		even
0001C248                            
0001C248                            ; ---------------------------------------------------------------------------
0001C248                            ; Sprite mappings - special stage chaos	emeralds
0001C248                            ; ---------------------------------------------------------------------------
0001C248 0000                       Map_SS_Chaos1:	dc.w byte_1B96C-Map_SS_Chaos1
0001C24A 0000                       		dc.w byte_1B97E-Map_SS_Chaos1
0001C24C 0000                       Map_SS_Chaos2:	dc.w byte_1B972-Map_SS_Chaos2
0001C24E 0000                       		dc.w byte_1B97E-Map_SS_Chaos2
0001C250 0000                       Map_SS_Chaos3:	dc.w byte_1B978-Map_SS_Chaos3
0001C252 0000                       		dc.w byte_1B97E-Map_SS_Chaos3
0001C254 01                         byte_1B96C:	dc.b 1
0001C255 F805 0000 F8               		dc.b $F8, 5, 0,	0, $F8
0001C25A 01                         byte_1B972:	dc.b 1
0001C25B F805 0004 F8               		dc.b $F8, 5, 0,	4, $F8
0001C260 01                         byte_1B978:	dc.b 1
0001C261 F805 0008 F8               		dc.b $F8, 5, 0,	8, $F8
0001C266 01                         byte_1B97E:	dc.b 1
0001C267 F805 000C F8               		dc.b $F8, 5, 0,	$C, $F8
0001C26C                            		even
0001C26C                            ; ===========================================================================
0001C26C                            ; ---------------------------------------------------------------------------
0001C26C                            ; Object 09 - Sonic (special stage)
0001C26C                            ; ---------------------------------------------------------------------------
0001C26C                            
0001C26C                            Obj09:					; XREF: Obj_Index
0001C26C 4A78 FE08                  		tst.w	($FFFFFE08).w	; is debug mode	being used?
0001C270 6700                       		beq.s	Obj09_Normal	; if not, branch
0001C272 6100 0000                  		bsr.w	SS_FixCamera
0001C276 6000 0000                  		bra.w	DebugMode
0001C27A                            ; ===========================================================================
0001C27A                            
0001C27A                            Obj09_Normal:
0001C27A 7000                       		moveq	#0,d0
0001C27C 1028 0024                  		move.b	$24(a0),d0
0001C280 323B 0000                  		move.w	Obj09_Index(pc,d0.w),d1
0001C284 4EFB 1000                  		jmp	Obj09_Index(pc,d1.w)
0001C288                            ; ===========================================================================
0001C288 0000                       Obj09_Index:	dc.w Obj09_Main-Obj09_Index
0001C28A 0000                       		dc.w Obj09_ChkDebug-Obj09_Index
0001C28C 0000                       		dc.w Obj09_ExitStage-Obj09_Index
0001C28E 0000                       		dc.w Obj09_Exit2-Obj09_Index
0001C290                            ; ===========================================================================
0001C290                            
0001C290                            Obj09_Main:				; XREF: Obj09_Index
0001C290 5428 0024                  		addq.b	#2,$24(a0)
0001C294 117C 000E 0016             		move.b	#$E,$16(a0)
0001C29A 117C 0007 0017             		move.b	#7,$17(a0)
0001C2A0 217C 0000 0000 0004        		move.l	#Map_Sonic,4(a0)
0001C2A8 317C 0780 0002             		move.w	#$780,2(a0)
0001C2AE 117C 0004 0001             		move.b	#4,1(a0)
0001C2B4 117C 0000 0018             		move.b	#0,$18(a0)
0001C2BA 117C 0002 001C             		move.b	#2,$1C(a0)
0001C2C0 08E8 0002 0022             		bset	#2,$22(a0)
0001C2C6 08E8 0001 0022             		bset	#1,$22(a0)
0001C2CC                            
0001C2CC                            Obj09_ChkDebug:				; XREF: Obj09_Index
0001C2CC 4A78 FFFA                  		tst.w	($FFFFFFFA).w	; is debug mode	cheat enabled?
0001C2D0 6700                       		beq.s	Obj09_NoDebug	; if not, branch
0001C2D2 0838 0004 F605             		btst	#4,($FFFFF605).w ; is button B pressed?
0001C2D8 6700                       		beq.s	Obj09_NoDebug	; if not, branch
0001C2DA 31FC 0001 FE08             		move.w	#1,($FFFFFE08).w ; change Sonic	into a ring
0001C2E0                            
0001C2E0                            Obj09_NoDebug:
0001C2E0 117C 0000 0030             		move.b	#0,$30(a0)
0001C2E6 7000                       		moveq	#0,d0
0001C2E8 1028 0022                  		move.b	$22(a0),d0
0001C2EC 0240 0002                  		andi.w	#2,d0
0001C2F0 323B 0000                  		move.w	Obj09_Modes(pc,d0.w),d1
0001C2F4 4EBB 1000                  		jsr	Obj09_Modes(pc,d1.w)
0001C2F8 4EBA 81D6                  		jsr	LoadSonicDynPLC
0001C2FC 4EF9 0000 DDC8             		jmp	DisplaySprite
0001C302                            ; ===========================================================================
0001C302 0000                       Obj09_Modes:	dc.w Obj09_OnWall-Obj09_Modes
0001C304 0000                       		dc.w Obj09_InAir-Obj09_Modes
0001C306                            ; ===========================================================================
0001C306                            
0001C306                            Obj09_OnWall:				; XREF: Obj09_Modes
0001C306 6100 0000                  		bsr.w	Obj09_Jump
0001C30A 6100 0000                  		bsr.w	Obj09_Move
0001C30E 6100 0000                  		bsr.w	Obj09_Fall
0001C312 6000                       		bra.s	Obj09_Display
0001C314                            ; ===========================================================================
0001C314                            
0001C314                            Obj09_InAir:				; XREF: Obj09_Modes
0001C314 6100 0000                  		bsr.w	nullsub_2
0001C318 6100 0000                  		bsr.w	Obj09_Move
0001C31C 6100 0000                  		bsr.w	Obj09_Fall
0001C320                            
0001C320                            Obj09_Display:				; XREF: Obj09_OnWall
0001C320 6100 0000                  		bsr.w	Obj09_ChkItems
0001C324 6100 0000                  		bsr.w	Obj09_ChkItems2
0001C328 4EB9 0000 DDA2             		jsr	SpeedToPos
0001C32E 6100 0000                  		bsr.w	SS_FixCamera
0001C332 3038 F780                  		move.w	($FFFFF780).w,d0
0001C336 D078 F782                  		add.w	($FFFFF782).w,d0
0001C33A 31C0 F780                  		move.w	d0,($FFFFF780).w
0001C33E 4EB9 0001 4232             		jsr	Sonic_Animate
0001C344 4E75                       		rts	
0001C346                            
0001C346                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0001C346                            
0001C346                            
0001C346                            Obj09_Move:				; XREF: Obj09_OnWall; Obj09_InAir
0001C346 0838 0002 F602             		btst	#2,($FFFFF602).w ; is left being pressed?
0001C34C 6700                       		beq.s	Obj09_ChkRight	; if not, branch
0001C34E 6100 0000                  		bsr.w	Obj09_MoveLeft
0001C352                            
0001C352                            Obj09_ChkRight:
0001C352 0838 0003 F602             		btst	#3,($FFFFF602).w ; is right being pressed?
0001C358 6700                       		beq.s	loc_1BA78	; if not, branch
0001C35A 6100 0000                  		bsr.w	Obj09_MoveRight
0001C35E                            
0001C35E                            loc_1BA78:
0001C35E 1038 F602                  		move.b	($FFFFF602).w,d0
0001C362 0200 000C                  		andi.b	#$C,d0
0001C366 6600                       		bne.s	loc_1BAA8
0001C368 3028 0014                  		move.w	$14(a0),d0
0001C36C 6700                       		beq.s	loc_1BAA8
0001C36E 6B00                       		bmi.s	loc_1BA9A
0001C370 0440 000C                  		subi.w	#$C,d0
0001C374 6400                       		bcc.s	loc_1BA94
0001C376 303C 0000                  		move.w	#0,d0
0001C37A                            
0001C37A                            loc_1BA94:
0001C37A 3140 0014                  		move.w	d0,$14(a0)
0001C37E 6000                       		bra.s	loc_1BAA8
0001C380                            ; ===========================================================================
0001C380                            
0001C380                            loc_1BA9A:
0001C380 0640 000C                  		addi.w	#$C,d0
0001C384 6400                       		bcc.s	loc_1BAA4
0001C386 303C 0000                  		move.w	#0,d0
0001C38A                            
0001C38A                            loc_1BAA4:
0001C38A 3140 0014                  		move.w	d0,$14(a0)
0001C38E                            
0001C38E                            loc_1BAA8:
0001C38E 1038 F780                  		move.b	($FFFFF780).w,d0
0001C392 0600 0020                  		addi.b	#$20,d0
0001C396 0200 00C0                  		andi.b	#$C0,d0
0001C39A 4400                       		neg.b	d0
0001C39C 4EB9 0000 2CAC             		jsr	(CalcSine).l
0001C3A2 C3E8 0014                  		muls.w	$14(a0),d1
0001C3A6 D3A8 0008                  		add.l	d1,8(a0)
0001C3AA C1E8 0014                  		muls.w	$14(a0),d0
0001C3AE D1A8 000C                  		add.l	d0,$C(a0)
0001C3B2 48E7 C000                  		movem.l	d0-d1,-(sp)
0001C3B6 2428 000C                  		move.l	$C(a0),d2
0001C3BA 2628 0008                  		move.l	8(a0),d3
0001C3BE 6100 0000                  		bsr.w	sub_1BCE8
0001C3C2 6700                       		beq.s	loc_1BAF2
0001C3C4 4CDF 0003                  		movem.l	(sp)+,d0-d1
0001C3C8 93A8 0008                  		sub.l	d1,8(a0)
0001C3CC 91A8 000C                  		sub.l	d0,$C(a0)
0001C3D0 317C 0000 0014             		move.w	#0,$14(a0)
0001C3D6 4E75                       		rts	
0001C3D8                            ; ===========================================================================
0001C3D8                            
0001C3D8                            loc_1BAF2:
0001C3D8 4CDF 0003                  		movem.l	(sp)+,d0-d1
0001C3DC 4E75                       		rts	
0001C3DE                            ; End of function Obj09_Move
0001C3DE                            
0001C3DE                            
0001C3DE                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0001C3DE                            
0001C3DE                            
0001C3DE                            Obj09_MoveLeft:				; XREF: Obj09_Move
0001C3DE 08E8 0000 0022             		bset	#0,$22(a0)
0001C3E4 3028 0014                  		move.w	$14(a0),d0
0001C3E8 6700                       		beq.s	loc_1BB06
0001C3EA 6A00                       		bpl.s	loc_1BB1A
0001C3EC                            
0001C3EC                            loc_1BB06:
0001C3EC 0440 000C                  		subi.w	#$C,d0
0001C3F0 0C40 F800                  		cmpi.w	#-$800,d0
0001C3F4 6E00                       		bgt.s	loc_1BB14
0001C3F6 303C F800                  		move.w	#-$800,d0
0001C3FA                            
0001C3FA                            loc_1BB14:
0001C3FA 3140 0014                  		move.w	d0,$14(a0)
0001C3FE 4E75                       		rts	
0001C400                            ; ===========================================================================
0001C400                            
0001C400                            loc_1BB1A:
0001C400 0440 0040                  		subi.w	#$40,d0
0001C404 6400                       		bcc.s	loc_1BB22
0001C406 4E71                       		nop	
0001C408                            
0001C408                            loc_1BB22:
0001C408 3140 0014                  		move.w	d0,$14(a0)
0001C40C 4E75                       		rts	
0001C40E                            ; End of function Obj09_MoveLeft
0001C40E                            
0001C40E                            
0001C40E                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0001C40E                            
0001C40E                            
0001C40E                            Obj09_MoveRight:			; XREF: Obj09_Move
0001C40E 08A8 0000 0022             		bclr	#0,$22(a0)
0001C414 3028 0014                  		move.w	$14(a0),d0
0001C418 6B00                       		bmi.s	loc_1BB48
0001C41A 0640 000C                  		addi.w	#$C,d0
0001C41E 0C40 0800                  		cmpi.w	#$800,d0
0001C422 6D00                       		blt.s	loc_1BB42
0001C424 303C 0800                  		move.w	#$800,d0
0001C428                            
0001C428                            loc_1BB42:
0001C428 3140 0014                  		move.w	d0,$14(a0)
0001C42C 6000                       		bra.s	locret_1BB54
0001C42E                            ; ===========================================================================
0001C42E                            
0001C42E                            loc_1BB48:
0001C42E 0640 0040                  		addi.w	#$40,d0
0001C432 6400                       		bcc.s	loc_1BB50
0001C434 4E71                       		nop	
0001C436                            
0001C436                            loc_1BB50:
0001C436 3140 0014                  		move.w	d0,$14(a0)
0001C43A                            
0001C43A                            locret_1BB54:
0001C43A 4E75                       		rts	
0001C43C                            ; End of function Obj09_MoveRight
0001C43C                            
0001C43C                            
0001C43C                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0001C43C                            
0001C43C                            
0001C43C                            Obj09_Jump:				; XREF: Obj09_OnWall
0001C43C 1038 F603                  		move.b	($FFFFF603).w,d0
0001C440 0200 0070                  		andi.b	#$70,d0		; is A,	B or C pressed?
0001C444 6700                       		beq.s	Obj09_NoJump	; if not, branch
0001C446 1038 F780                  		move.b	($FFFFF780).w,d0
0001C44A 0200 00FC                  		andi.b	#$FC,d0
0001C44E 4400                       		neg.b	d0
0001C450 0400 0040                  		subi.b	#$40,d0
0001C454 4EB9 0000 2CAC             		jsr	(CalcSine).l
0001C45A C3FC 0680                  		muls.w	#$680,d1
0001C45E E081                       		asr.l	#8,d1
0001C460 3141 0010                  		move.w	d1,$10(a0)
0001C464 C1FC 0680                  		muls.w	#$680,d0
0001C468 E080                       		asr.l	#8,d0
0001C46A 3140 0012                  		move.w	d0,$12(a0)
0001C46E 08E8 0001 0022             		bset	#1,$22(a0)
0001C474 303C 00A0                  		move.w	#$A0,d0
0001C478 4EB9 0000 15C0             		jsr	(PlaySound_Special).l ;	play jumping sound
0001C47E                            
0001C47E                            Obj09_NoJump:
0001C47E 4E75                       		rts	
0001C480                            ; End of function Obj09_Jump
0001C480                            
0001C480                            
0001C480                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0001C480                            
0001C480                            
0001C480                            nullsub_2:				; XREF: Obj09_InAir
0001C480 4E75                       		rts	
0001C482                            ; End of function nullsub_2
0001C482                            
0001C482                            ; ===========================================================================
0001C482                            ; ---------------------------------------------------------------------------
0001C482                            ; unused subroutine to limit Sonic's upward vertical speed
0001C482                            ; ---------------------------------------------------------------------------
0001C482 323C FC00                  		move.w	#-$400,d1
0001C486 B268 0012                  		cmp.w	$12(a0),d1
0001C48A 6F00                       		ble.s	locret_1BBB4
0001C48C 1038 F602                  		move.b	($FFFFF602).w,d0
0001C490 0200 0070                  		andi.b	#$70,d0
0001C494 6600                       		bne.s	locret_1BBB4
0001C496 3141 0012                  		move.w	d1,$12(a0)
0001C49A                            
0001C49A                            locret_1BBB4:
0001C49A 4E75                       		rts	
0001C49C                            ; ---------------------------------------------------------------------------
0001C49C                            ; Subroutine to	fix the	camera on Sonic's position (special stage)
0001C49C                            ; ---------------------------------------------------------------------------
0001C49C                            
0001C49C                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0001C49C                            
0001C49C                            
0001C49C                            SS_FixCamera:				; XREF: Obj09
0001C49C 3428 000C                  		move.w	$C(a0),d2
0001C4A0 3628 0008                  		move.w	8(a0),d3
0001C4A4 3038 F700                  		move.w	($FFFFF700).w,d0
0001C4A8 0443 00A0                  		subi.w	#$A0,d3
0001C4AC 6500                       		bcs.s	loc_1BBCE
0001C4AE 9043                       		sub.w	d3,d0
0001C4B0 9178 F700                  		sub.w	d0,($FFFFF700).w
0001C4B4                            
0001C4B4                            loc_1BBCE:
0001C4B4 3038 F704                  		move.w	($FFFFF704).w,d0
0001C4B8 0442 0070                  		subi.w	#$70,d2
0001C4BC 6500                       		bcs.s	locret_1BBDE
0001C4BE 9042                       		sub.w	d2,d0
0001C4C0 9178 F704                  		sub.w	d0,($FFFFF704).w
0001C4C4                            
0001C4C4                            locret_1BBDE:
0001C4C4 4E75                       		rts	
0001C4C6                            ; End of function SS_FixCamera
0001C4C6                            
0001C4C6                            ; ===========================================================================
0001C4C6                            
0001C4C6                            Obj09_ExitStage:			; XREF: Obj09_Index
0001C4C6 0678 0040 F782             		addi.w	#$40,($FFFFF782).w
0001C4CC 0C78 1800 F782             		cmpi.w	#$1800,($FFFFF782).w
0001C4D2 6600                       		bne.s	loc_1BBF4
0001C4D4 11FC 000C F600             		move.b	#$C,($FFFFF600).w
0001C4DA                            
0001C4DA                            loc_1BBF4:
0001C4DA 0C78 3000 F782             		cmpi.w	#$3000,($FFFFF782).w
0001C4E0 6D00                       		blt.s	loc_1BC12
0001C4E2 31FC 0000 F782             		move.w	#0,($FFFFF782).w
0001C4E8 31FC 4000 F780             		move.w	#$4000,($FFFFF780).w
0001C4EE 5428 0024                  		addq.b	#2,$24(a0)
0001C4F2 317C 003C 0038             		move.w	#$3C,$38(a0)
0001C4F8                            
0001C4F8                            loc_1BC12:
0001C4F8 3038 F780                  		move.w	($FFFFF780).w,d0
0001C4FC D078 F782                  		add.w	($FFFFF782).w,d0
0001C500 31C0 F780                  		move.w	d0,($FFFFF780).w
0001C504 4EB9 0001 4232             		jsr	Sonic_Animate
0001C50A 4EB9 0001 44D0             		jsr	LoadSonicDynPLC
0001C510 6100 FF8A                  		bsr.w	SS_FixCamera
0001C514 4EF9 0000 DDC8             		jmp	DisplaySprite
0001C51A                            ; ===========================================================================
0001C51A                            
0001C51A                            Obj09_Exit2:				; XREF: Obj09_Index
0001C51A 5368 0038                  		subq.w	#1,$38(a0)
0001C51E 6600                       		bne.s	loc_1BC40
0001C520 11FC 000C F600             		move.b	#$C,($FFFFF600).w
0001C526                            
0001C526                            loc_1BC40:
0001C526 4EB9 0001 4232             		jsr	Sonic_Animate
0001C52C 4EB9 0001 44D0             		jsr	LoadSonicDynPLC
0001C532 6100 FF68                  		bsr.w	SS_FixCamera
0001C536 4EF9 0000 DDC8             		jmp	DisplaySprite
0001C53C                            
0001C53C                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0001C53C                            
0001C53C                            
0001C53C                            Obj09_Fall:				; XREF: Obj09_OnWall; Obj09_InAir
0001C53C 2428 000C                  		move.l	$C(a0),d2
0001C540 2628 0008                  		move.l	8(a0),d3
0001C544 1038 F780                  		move.b	($FFFFF780).w,d0
0001C548 0200 00FC                  		andi.b	#$FC,d0
0001C54C 4EB9 0000 2CAC             		jsr	(CalcSine).l
0001C552 3828 0010                  		move.w	$10(a0),d4
0001C556 48C4                       		ext.l	d4
0001C558 E184                       		asl.l	#8,d4
0001C55A C1FC 002A                  		muls.w	#$2A,d0
0001C55E D084                       		add.l	d4,d0
0001C560 3828 0012                  		move.w	$12(a0),d4
0001C564 48C4                       		ext.l	d4
0001C566 E184                       		asl.l	#8,d4
0001C568 C3FC 002A                  		muls.w	#$2A,d1
0001C56C D284                       		add.l	d4,d1
0001C56E D680                       		add.l	d0,d3
0001C570 6100 0000                  		bsr.w	sub_1BCE8
0001C574 6700                       		beq.s	loc_1BCB0
0001C576 9680                       		sub.l	d0,d3
0001C578 7000                       		moveq	#0,d0
0001C57A 3140 0010                  		move.w	d0,$10(a0)
0001C57E 08A8 0001 0022             		bclr	#1,$22(a0)
0001C584 D481                       		add.l	d1,d2
0001C586 6100 0000                  		bsr.w	sub_1BCE8
0001C58A 6700                       		beq.s	loc_1BCC6
0001C58C 9481                       		sub.l	d1,d2
0001C58E 7200                       		moveq	#0,d1
0001C590 3141 0012                  		move.w	d1,$12(a0)
0001C594 4E75                       		rts	
0001C596                            ; ===========================================================================
0001C596                            
0001C596                            loc_1BCB0:
0001C596 D481                       		add.l	d1,d2
0001C598 6100 0000                  		bsr.w	sub_1BCE8
0001C59C 6700                       		beq.s	loc_1BCD4
0001C59E 9481                       		sub.l	d1,d2
0001C5A0 7200                       		moveq	#0,d1
0001C5A2 3141 0012                  		move.w	d1,$12(a0)
0001C5A6 08A8 0001 0022             		bclr	#1,$22(a0)
0001C5AC                            
0001C5AC                            loc_1BCC6:
0001C5AC E080                       		asr.l	#8,d0
0001C5AE E081                       		asr.l	#8,d1
0001C5B0 3140 0010                  		move.w	d0,$10(a0)
0001C5B4 3141 0012                  		move.w	d1,$12(a0)
0001C5B8 4E75                       		rts	
0001C5BA                            ; ===========================================================================
0001C5BA                            
0001C5BA                            loc_1BCD4:
0001C5BA E080                       		asr.l	#8,d0
0001C5BC E081                       		asr.l	#8,d1
0001C5BE 3140 0010                  		move.w	d0,$10(a0)
0001C5C2 3141 0012                  		move.w	d1,$12(a0)
0001C5C6 08E8 0001 0022             		bset	#1,$22(a0)
0001C5CC 4E75                       		rts	
0001C5CE                            ; End of function Obj09_Fall
0001C5CE                            
0001C5CE                            
0001C5CE                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0001C5CE                            
0001C5CE                            
0001C5CE                            sub_1BCE8:				; XREF: Obj09_Move; Obj09_Fall
0001C5CE 43F9 00FF 0000             		lea	($FF0000).l,a1
0001C5D4 7800                       		moveq	#0,d4
0001C5D6 4842                       		swap	d2
0001C5D8 3802                       		move.w	d2,d4
0001C5DA 4842                       		swap	d2
0001C5DC 0644 0044                  		addi.w	#$44,d4
0001C5E0 88FC 0018                  		divu.w	#$18,d4
0001C5E4 C8FC 0080                  		mulu.w	#$80,d4
0001C5E8 D3C4                       		adda.l	d4,a1
0001C5EA 7800                       		moveq	#0,d4
0001C5EC 4843                       		swap	d3
0001C5EE 3803                       		move.w	d3,d4
0001C5F0 4843                       		swap	d3
0001C5F2 0644 0014                  		addi.w	#$14,d4
0001C5F6 88FC 0018                  		divu.w	#$18,d4
0001C5FA D2C4                       		adda.w	d4,a1
0001C5FC 7A00                       		moveq	#0,d5
0001C5FE 1819                       		move.b	(a1)+,d4
0001C600 6100                       		bsr.s	sub_1BD30
0001C602 1819                       		move.b	(a1)+,d4
0001C604 6100                       		bsr.s	sub_1BD30
0001C606 D2FC 007E                  		adda.w	#$7E,a1
0001C60A 1819                       		move.b	(a1)+,d4
0001C60C 6100                       		bsr.s	sub_1BD30
0001C60E 1819                       		move.b	(a1)+,d4
0001C610 6100                       		bsr.s	sub_1BD30
0001C612 4A05                       		tst.b	d5
0001C614 4E75                       		rts	
0001C616                            ; End of function sub_1BCE8
0001C616                            
0001C616                            
0001C616                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0001C616                            
0001C616                            
0001C616                            sub_1BD30:				; XREF: sub_1BCE8
0001C616 6700                       		beq.s	locret_1BD44
0001C618 0C04 0028                  		cmpi.b	#$28,d4
0001C61C 6700                       		beq.s	locret_1BD44
0001C61E 0C04 003A                  		cmpi.b	#$3A,d4
0001C622 6500                       		bcs.s	loc_1BD46
0001C624 0C04 004B                  		cmpi.b	#$4B,d4
0001C628 6400                       		bcc.s	loc_1BD46
0001C62A                            
0001C62A                            locret_1BD44:
0001C62A 4E75                       		rts	
0001C62C                            ; ===========================================================================
0001C62C                            
0001C62C                            loc_1BD46:
0001C62C 1144 0030                  		move.b	d4,$30(a0)
0001C630 2149 0032                  		move.l	a1,$32(a0)
0001C634 7AFF                       		moveq	#-1,d5
0001C636 4E75                       		rts	
0001C638                            ; End of function sub_1BD30
0001C638                            
0001C638                            
0001C638                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0001C638                            
0001C638                            
0001C638                            Obj09_ChkItems:				; XREF: Obj09_Display
0001C638 43F9 00FF 0000             		lea	($FF0000).l,a1
0001C63E 7800                       		moveq	#0,d4
0001C640 3828 000C                  		move.w	$C(a0),d4
0001C644 0644 0050                  		addi.w	#$50,d4
0001C648 88FC 0018                  		divu.w	#$18,d4
0001C64C C8FC 0080                  		mulu.w	#$80,d4
0001C650 D3C4                       		adda.l	d4,a1
0001C652 7800                       		moveq	#0,d4
0001C654 3828 0008                  		move.w	8(a0),d4
0001C658 0644 0020                  		addi.w	#$20,d4
0001C65C 88FC 0018                  		divu.w	#$18,d4
0001C660 D2C4                       		adda.w	d4,a1
0001C662 1811                       		move.b	(a1),d4
0001C664 6600                       		bne.s	Obj09_ChkCont
0001C666 4A28 003A                  		tst.b	$3A(a0)
0001C66A 6600 0000                  		bne.w	Obj09_MakeGhostSolid
0001C66E 7800                       		moveq	#0,d4
0001C670 4E75                       		rts	
0001C672                            ; ===========================================================================
0001C672                            
0001C672                            Obj09_ChkCont:
0001C672 0C04 003A                  		cmpi.b	#$3A,d4		; is the item a	ring?
0001C676 6600                       		bne.s	Obj09_Chk1Up
0001C678 6100 F728                  		bsr.w	SS_RemoveCollectedItem
0001C67C 6600                       		bne.s	Obj09_GetCont
0001C67E 14BC 0001                  		move.b	#1,(a2)
0001C682 2549 0004                  		move.l	a1,4(a2)
0001C686                            
0001C686                            Obj09_GetCont:
0001C686 4EB9 0000 A30E             		jsr	CollectRing
0001C68C 0C78 0032 FE20             		cmpi.w	#50,($FFFFFE20).w ; check if you have 50 rings
0001C692 6500                       		bcs.s	Obj09_NoCont
0001C694 08F8 0000 FE1B             		bset	#0,($FFFFFE1B).w
0001C69A 6600                       		bne.s	Obj09_NoCont
0001C69C 5238 FE18                  		addq.b	#1,($FFFFFE18).w ; add 1 to number of continues
0001C6A0 303C 00BF                  		move.w	#$BF,d0
0001C6A4 4EB9 0000 15BA             		jsr	(PlaySound).l	; play extra continue sound
0001C6AA                            
0001C6AA                            Obj09_NoCont:
0001C6AA 7800                       		moveq	#0,d4
0001C6AC 4E75                       		rts	
0001C6AE                            ; ===========================================================================
0001C6AE                            
0001C6AE                            Obj09_Chk1Up:
0001C6AE 0C04 0028                  		cmpi.b	#$28,d4		; is the item an extra life?
0001C6B2 6600                       		bne.s	Obj09_ChkEmer
0001C6B4 6100 F6EC                  		bsr.w	SS_RemoveCollectedItem
0001C6B8 6600                       		bne.s	Obj09_Get1Up
0001C6BA 14BC 0003                  		move.b	#3,(a2)
0001C6BE 2549 0004                  		move.l	a1,4(a2)
0001C6C2                            
0001C6C2                            Obj09_Get1Up:
0001C6C2 5238 FE12                  		addq.b	#1,($FFFFFE12).w ; add 1 to number of lives
0001C6C6 5238 FE1C                  		addq.b	#1,($FFFFFE1C).w ; add 1 to lives counter
0001C6CA 303C 0088                  		move.w	#$88,d0
0001C6CE 4EB9 0000 15BA             		jsr	(PlaySound).l	; play extra life music
0001C6D4 7800                       		moveq	#0,d4
0001C6D6 4E75                       		rts	
0001C6D8                            ; ===========================================================================
0001C6D8                            
0001C6D8                            Obj09_ChkEmer:
0001C6D8 0C04 003B                  		cmpi.b	#$3B,d4		; is the item an emerald?
0001C6DC 6500                       		bcs.s	Obj09_ChkGhost
0001C6DE 0C04 0040                  		cmpi.b	#$40,d4
0001C6E2 6200                       		bhi.s	Obj09_ChkGhost
0001C6E4 6100 F6BC                  		bsr.w	SS_RemoveCollectedItem
0001C6E8 6600                       		bne.s	Obj09_GetEmer
0001C6EA 14BC 0005                  		move.b	#5,(a2)
0001C6EE 2549 0004                  		move.l	a1,4(a2)
0001C6F2                            
0001C6F2                            Obj09_GetEmer:
0001C6F2 0C38 0006 FE57             		cmpi.b	#6,($FFFFFE57).w ; do you have all the emeralds?
0001C6F8 6700                       		beq.s	Obj09_NoEmer	; if yes, branch
0001C6FA 0404 003B                  		subi.b	#$3B,d4
0001C6FE 7000                       		moveq	#0,d0
0001C700 1038 FE57                  		move.b	($FFFFFE57).w,d0
0001C704 45F8 FE58                  		lea	($FFFFFE58).w,a2
0001C708 1584 0000                  		move.b	d4,(a2,d0.w)
0001C70C 5238 FE57                  		addq.b	#1,($FFFFFE57).w ; add 1 to number of emeralds
0001C710                            
0001C710                            Obj09_NoEmer:
0001C710 303C 0093                  		move.w	#$93,d0
0001C714 4EB9 0000 15C0             		jsr	(PlaySound_Special).l ;	play emerald music
0001C71A 7800                       		moveq	#0,d4
0001C71C 4E75                       		rts	
0001C71E                            ; ===========================================================================
0001C71E                            
0001C71E                            Obj09_ChkGhost:
0001C71E 0C04 0041                  		cmpi.b	#$41,d4		; is the item a	ghost block?
0001C722 6600                       		bne.s	Obj09_ChkGhostTag
0001C724 117C 0001 003A             		move.b	#1,$3A(a0)	; mark the ghost block as "passed"
0001C72A                            
0001C72A                            Obj09_ChkGhostTag:
0001C72A 0C04 004A                  		cmpi.b	#$4A,d4		; is the item a	switch for ghost blocks?
0001C72E 6600                       		bne.s	Obj09_NoGhost
0001C730 0C28 0001 003A             		cmpi.b	#1,$3A(a0)	; have the ghost blocks	been passed?
0001C736 6600                       		bne.s	Obj09_NoGhost	; if not, branch
0001C738 117C 0002 003A             		move.b	#2,$3A(a0)	; mark the ghost blocks	as "solid"
0001C73E                            
0001C73E                            Obj09_NoGhost:
0001C73E 78FF                       		moveq	#-1,d4
0001C740 4E75                       		rts	
0001C742                            ; ===========================================================================
0001C742                            
0001C742                            Obj09_MakeGhostSolid:
0001C742 0C28 0002 003A             		cmpi.b	#2,$3A(a0)	; is the ghost marked as "solid"?
0001C748 6600                       		bne.s	Obj09_GhostNotSolid ; if not, branch
0001C74A 43F9 00FF 1020             		lea	($FF1020).l,a1
0001C750 723F                       		moveq	#$3F,d1
0001C752                            
0001C752                            Obj09_GhostLoop2:
0001C752 743F                       		moveq	#$3F,d2
0001C754                            
0001C754                            Obj09_GhostLoop:
0001C754 0C11 0041                  		cmpi.b	#$41,(a1)	; is the item a	ghost block?
0001C758 6600                       		bne.s	Obj09_NoReplace	; if not, branch
0001C75A 12BC 002C                  		move.b	#$2C,(a1)	; replace ghost	block with a solid block
0001C75E                            
0001C75E                            Obj09_NoReplace:
0001C75E 5249                       		addq.w	#1,a1
0001C760 51CA FFF2                  		dbf	d2,Obj09_GhostLoop
0001C764 43E9 0040                  		lea	$40(a1),a1
0001C768 51C9 FFE8                  		dbf	d1,Obj09_GhostLoop2
0001C76C                            
0001C76C                            Obj09_GhostNotSolid:
0001C76C 4228 003A                  		clr.b	$3A(a0)
0001C770 7800                       		moveq	#0,d4
0001C772 4E75                       		rts	
0001C774                            ; End of function Obj09_ChkItems
0001C774                            
0001C774                            
0001C774                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0001C774                            
0001C774                            
0001C774                            Obj09_ChkItems2:			; XREF: Obj09_Display
0001C774 1028 0030                  		move.b	$30(a0),d0
0001C778 6600                       		bne.s	Obj09_ChkBumper
0001C77A 5328 0036                  		subq.b	#1,$36(a0)
0001C77E 6A00                       		bpl.s	loc_1BEA0
0001C780 117C 0000 0036             		move.b	#0,$36(a0)
0001C786                            
0001C786                            loc_1BEA0:
0001C786 5328 0037                  		subq.b	#1,$37(a0)
0001C78A 6A00                       		bpl.s	locret_1BEAC
0001C78C 117C 0000 0037             		move.b	#0,$37(a0)
0001C792                            
0001C792                            locret_1BEAC:
0001C792 4E75                       		rts	
0001C794                            ; ===========================================================================
0001C794                            
0001C794                            Obj09_ChkBumper:
0001C794 0C00 0025                  		cmpi.b	#$25,d0		; is the item a	bumper?
0001C798 6600                       		bne.s	Obj09_GOAL
0001C79A 2228 0032                  		move.l	$32(a0),d1
0001C79E 0481 00FF 0001             		subi.l	#$FF0001,d1
0001C7A4 3401                       		move.w	d1,d2
0001C7A6 0241 007F                  		andi.w	#$7F,d1
0001C7AA C2FC 0018                  		mulu.w	#$18,d1
0001C7AE 0441 0014                  		subi.w	#$14,d1
0001C7B2 EE4A                       		lsr.w	#7,d2
0001C7B4 0242 007F                  		andi.w	#$7F,d2
0001C7B8 C4FC 0018                  		mulu.w	#$18,d2
0001C7BC 0442 0044                  		subi.w	#$44,d2
0001C7C0 9268 0008                  		sub.w	8(a0),d1
0001C7C4 9468 000C                  		sub.w	$C(a0),d2
0001C7C8 4EB9 0000 2F7A             		jsr	(CalcAngle).l
0001C7CE 4EB9 0000 2CAC             		jsr	(CalcSine).l
0001C7D4 C3FC F900                  		muls.w	#-$700,d1
0001C7D8 E081                       		asr.l	#8,d1
0001C7DA 3141 0010                  		move.w	d1,$10(a0)
0001C7DE C1FC F900                  		muls.w	#-$700,d0
0001C7E2 E080                       		asr.l	#8,d0
0001C7E4 3140 0012                  		move.w	d0,$12(a0)
0001C7E8 08E8 0001 0022             		bset	#1,$22(a0)
0001C7EE 6100 F5B2                  		bsr.w	SS_RemoveCollectedItem
0001C7F2 6600                       		bne.s	Obj09_BumpSnd
0001C7F4 14BC 0002                  		move.b	#2,(a2)
0001C7F8 2028 0032                  		move.l	$32(a0),d0
0001C7FC 5380                       		subq.l	#1,d0
0001C7FE 2540 0004                  		move.l	d0,4(a2)
0001C802                            
0001C802                            Obj09_BumpSnd:
0001C802 303C 00B4                  		move.w	#$B4,d0
0001C806 4EF9 0000 15C0             		jmp	(PlaySound_Special).l ;	play bumper sound
0001C80C                            ; ===========================================================================
0001C80C                            
0001C80C                            Obj09_GOAL:
0001C80C 0C00 0027                  		cmpi.b	#$27,d0		; is the item a	"GOAL"?
0001C810 6600                       		bne.s	Obj09_UPblock
0001C812 5428 0024                  		addq.b	#2,$24(a0)	; run routine "Obj09_ExitStage"
0001C816 303C 00A8                  		move.w	#$A8,d0		; change item
0001C81A 4EB9 0000 15C0             		jsr	(PlaySound_Special).l ;	play "GOAL" sound
0001C820 4E75                       		rts	
0001C822                            ; ===========================================================================
0001C822                            
0001C822                            Obj09_UPblock:
0001C822 0C00 0029                  		cmpi.b	#$29,d0		; is the item an "UP" block?
0001C826 6600                       		bne.s	Obj09_DOWNblock
0001C828 4A28 0036                  		tst.b	$36(a0)
0001C82C 6600 0000                  		bne.w	Obj09_NoGlass
0001C830 117C 001E 0036             		move.b	#$1E,$36(a0)
0001C836 0838 0006 F783             		btst	#6,($FFFFF783).w
0001C83C 6700                       		beq.s	Obj09_UPsnd
0001C83E E1F8 F782                  		asl	($FFFFF782).w	; increase stage rotation speed
0001C842 2268 0032                  		movea.l	$32(a0),a1
0001C846 5389                       		subq.l	#1,a1
0001C848 12BC 002A                  		move.b	#$2A,(a1)	; change item to a "DOWN" block
0001C84C                            
0001C84C                            Obj09_UPsnd:
0001C84C 303C 00A9                  		move.w	#$A9,d0
0001C850 4EF9 0000 15C0             		jmp	(PlaySound_Special).l ;	play up/down sound
0001C856                            ; ===========================================================================
0001C856                            
0001C856                            Obj09_DOWNblock:
0001C856 0C00 002A                  		cmpi.b	#$2A,d0		; is the item a	"DOWN" block?
0001C85A 6600                       		bne.s	Obj09_Rblock
0001C85C 4A28 0036                  		tst.b	$36(a0)
0001C860 6600 0000                  		bne.w	Obj09_NoGlass
0001C864 117C 001E 0036             		move.b	#$1E,$36(a0)
0001C86A 0838 0006 F783             		btst	#6,($FFFFF783).w
0001C870 6600                       		bne.s	Obj09_DOWNsnd
0001C872 E0F8 F782                  		asr	($FFFFF782).w	; reduce stage rotation	speed
0001C876 2268 0032                  		movea.l	$32(a0),a1
0001C87A 5389                       		subq.l	#1,a1
0001C87C 12BC 0029                  		move.b	#$29,(a1)	; change item to an "UP" block
0001C880                            
0001C880                            Obj09_DOWNsnd:
0001C880 303C 00A9                  		move.w	#$A9,d0
0001C884 4EF9 0000 15C0             		jmp	(PlaySound_Special).l ;	play up/down sound
0001C88A                            ; ===========================================================================
0001C88A                            
0001C88A                            Obj09_Rblock:
0001C88A 0C00 002B                  		cmpi.b	#$2B,d0		; is the item an "R" block?
0001C88E 6600                       		bne.s	Obj09_ChkGlass
0001C890 4A28 0037                  		tst.b	$37(a0)
0001C894 6600 0000                  		bne.w	Obj09_NoGlass
0001C898 117C 001E 0037             		move.b	#$1E,$37(a0)
0001C89E 6100 F502                  		bsr.w	SS_RemoveCollectedItem
0001C8A2 6600                       		bne.s	Obj09_RevStage
0001C8A4 14BC 0004                  		move.b	#4,(a2)
0001C8A8 2028 0032                  		move.l	$32(a0),d0
0001C8AC 5380                       		subq.l	#1,d0
0001C8AE 2540 0004                  		move.l	d0,4(a2)
0001C8B2                            
0001C8B2                            Obj09_RevStage:
0001C8B2 4478 F782                  		neg.w	($FFFFF782).w	; reverse stage	rotation
0001C8B6 303C 00A9                  		move.w	#$A9,d0
0001C8BA 4EF9 0000 15C0             		jmp	(PlaySound_Special).l ;	play sound
0001C8C0                            ; ===========================================================================
0001C8C0                            
0001C8C0                            Obj09_ChkGlass:
0001C8C0 0C00 002D                  		cmpi.b	#$2D,d0		; is the item a	glass block?
0001C8C4 6700                       		beq.s	Obj09_Glass	; if yes, branch
0001C8C6 0C00 002E                  		cmpi.b	#$2E,d0
0001C8CA 6700                       		beq.s	Obj09_Glass
0001C8CC 0C00 002F                  		cmpi.b	#$2F,d0
0001C8D0 6700                       		beq.s	Obj09_Glass
0001C8D2 0C00 0030                  		cmpi.b	#$30,d0
0001C8D6 6600                       		bne.s	Obj09_NoGlass	; if not, branch
0001C8D8                            
0001C8D8                            Obj09_Glass:
0001C8D8 6100 F4C8                  		bsr.w	SS_RemoveCollectedItem
0001C8DC 6600                       		bne.s	Obj09_GlassSnd
0001C8DE 14BC 0006                  		move.b	#6,(a2)
0001C8E2 2268 0032                  		movea.l	$32(a0),a1
0001C8E6 5389                       		subq.l	#1,a1
0001C8E8 2549 0004                  		move.l	a1,4(a2)
0001C8EC 1011                       		move.b	(a1),d0
0001C8EE 5200                       		addq.b	#1,d0		; change glass type when touched
0001C8F0 0C00 0030                  		cmpi.b	#$30,d0
0001C8F4 6300                       		bls.s	Obj09_GlassUpdate ; if glass is	still there, branch
0001C8F6 4200                       		clr.b	d0		; remove the glass block when it's destroyed
0001C8F8                            
0001C8F8                            Obj09_GlassUpdate:
0001C8F8 1540 0004                  		move.b	d0,4(a2)	; update the stage layout
0001C8FC                            
0001C8FC                            Obj09_GlassSnd:
0001C8FC 303C 00BA                  		move.w	#$BA,d0
0001C900 4EF9 0000 15C0             		jmp	(PlaySound_Special).l ;	play glass block sound
0001C906                            ; ===========================================================================
0001C906                            
0001C906                            Obj09_NoGlass:
0001C906 4E75                       		rts	
0001C908                            ; End of function Obj09_ChkItems2
0001C908                            
0001C908                            ; ===========================================================================
0001C908                            ; ---------------------------------------------------------------------------
0001C908                            ; Object 10 - blank
0001C908                            ; ---------------------------------------------------------------------------
0001C908                            
0001C908                            Obj10:					; XREF: Obj_Index
0001C908 4E75                       		rts	
0001C90A                            ; ---------------------------------------------------------------------------
0001C90A                            ; Subroutine to	animate	level graphics
0001C90A                            ; ---------------------------------------------------------------------------
0001C90A                            
0001C90A                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0001C90A                            
0001C90A                            
0001C90A                            AniArt_Load:				; XREF: Demo_Time; loc_F54
0001C90A 4A78 F63A                  		tst.w	($FFFFF63A).w	; is the game paused?
0001C90E 6600                       		bne.s	AniArt_Pause	; if yes, branch
0001C910 4DF9 00C0 0000             		lea	($C00000).l,a6
0001C916 6100 0000                  		bsr.w	AniArt_GiantRing
0001C91A 7000                       		moveq	#0,d0
0001C91C 1038 FE10                  		move.b	($FFFFFE10).w,d0
0001C920 D040                       		add.w	d0,d0
0001C922 303B 0000                  		move.w	AniArt_Index(pc,d0.w),d0
0001C926 4EFB 0000                  		jmp	AniArt_Index(pc,d0.w)
0001C92A                            ; ===========================================================================
0001C92A                            
0001C92A                            AniArt_Pause:
0001C92A 4E75                       		rts	
0001C92C                            ; End of function AniArt_Load
0001C92C                            
0001C92C                            ; ===========================================================================
0001C92C 0000 0000                  AniArt_Index:	dc.w AniArt_GHZ-AniArt_Index, AniArt_none-AniArt_Index
0001C930 0000 0000                  		dc.w AniArt_MZ-AniArt_Index, AniArt_none-AniArt_Index
0001C934 0000 0000                  		dc.w AniArt_none-AniArt_Index, AniArt_SBZ-AniArt_Index
0001C938 0000                       		dc.w AniArt_Ending-AniArt_Index
0001C93A                            ; ===========================================================================
0001C93A                            ; ---------------------------------------------------------------------------
0001C93A                            ; Animated pattern routine - Green Hill
0001C93A                            ; ---------------------------------------------------------------------------
0001C93A                            
0001C93A                            AniArt_GHZ:				; XREF: AniArt_Index
0001C93A 5338 F7B1                  		subq.b	#1,($FFFFF7B1).w
0001C93E 6A00                       		bpl.s	loc_1C08A
0001C940 11FC 0005 F7B1             		move.b	#5,($FFFFF7B1).w ; time	to display each	frame for
0001C946 43F9 0000 0000             		lea	(Art_GhzWater).l,a1 ; load waterfall patterns
0001C94C 1038 F7B0                  		move.b	($FFFFF7B0).w,d0
0001C950 5238 F7B0                  		addq.b	#1,($FFFFF7B0).w
0001C954 0240 0001                  		andi.w	#1,d0
0001C958 6700                       		beq.s	loc_1C078
0001C95A 43E9 0100                  		lea	$100(a1),a1	; load next frame
0001C95E                            
0001C95E                            loc_1C078:
0001C95E 23FC 6F00 0001 00C0 0004   		move.l	#$6F000001,($C00004).l ; VRAM address
0001C968 323C 0007                  		move.w	#7,d1		; number of 8x8	tiles
0001C96C 6000 0000                  		bra.w	LoadTiles
0001C970                            ; ===========================================================================
0001C970                            
0001C970                            loc_1C08A:
0001C970 5338 F7B3                  		subq.b	#1,($FFFFF7B3).w
0001C974 6A00                       		bpl.s	loc_1C0C0
0001C976 11FC 000F F7B3             		move.b	#$F,($FFFFF7B3).w
0001C97C 43F9 0000 0000             		lea	(Art_GhzFlower1).l,a1 ;	load big flower	patterns
0001C982 1038 F7B2                  		move.b	($FFFFF7B2).w,d0
0001C986 5238 F7B2                  		addq.b	#1,($FFFFF7B2).w
0001C98A 0240 0001                  		andi.w	#1,d0
0001C98E 6700                       		beq.s	loc_1C0AE
0001C990 43E9 0200                  		lea	$200(a1),a1
0001C994                            
0001C994                            loc_1C0AE:
0001C994 23FC 6B80 0001 00C0 0004   		move.l	#$6B800001,($C00004).l
0001C99E 323C 000F                  		move.w	#$F,d1
0001C9A2 6000 0000                  		bra.w	LoadTiles
0001C9A6                            ; ===========================================================================
0001C9A6                            
0001C9A6                            loc_1C0C0:
0001C9A6 5338 F7B5                  		subq.b	#1,($FFFFF7B5).w
0001C9AA 6A00                       		bpl.s	locret_1C10C
0001C9AC 11FC 0007 F7B5             		move.b	#7,($FFFFF7B5).w
0001C9B2 1038 F7B4                  		move.b	($FFFFF7B4).w,d0
0001C9B6 5238 F7B4                  		addq.b	#1,($FFFFF7B4).w
0001C9BA 0240 0003                  		andi.w	#3,d0
0001C9BE 103B 0000                  		move.b	byte_1C10E(pc,d0.w),d0
0001C9C2 0800 0000                  		btst	#0,d0
0001C9C6 6600                       		bne.s	loc_1C0E8
0001C9C8 11FC 007F F7B5             		move.b	#$7F,($FFFFF7B5).w
0001C9CE                            
0001C9CE                            loc_1C0E8:
0001C9CE EF48                       		lsl.w	#7,d0
0001C9D0 3200                       		move.w	d0,d1
0001C9D2 D040                       		add.w	d0,d0
0001C9D4 D041                       		add.w	d1,d0
0001C9D6 23FC 6D80 0001 00C0 0004   		move.l	#$6D800001,($C00004).l
0001C9E0 43F9 0000 0000             		lea	(Art_GhzFlower2).l,a1 ;	load small flower patterns
0001C9E6 43F1 0000                  		lea	(a1,d0.w),a1
0001C9EA 323C 000B                  		move.w	#$B,d1
0001C9EE 6100 0000                  		bsr.w	LoadTiles
0001C9F2                            
0001C9F2                            locret_1C10C:
0001C9F2 4E75                       		rts	
0001C9F4                            ; ===========================================================================
0001C9F4 0001 0201                  byte_1C10E:	dc.b 0,	1, 2, 1
0001C9F8                            ; ===========================================================================
0001C9F8                            ; ---------------------------------------------------------------------------
0001C9F8                            ; Animated pattern routine - Marble
0001C9F8                            ; ---------------------------------------------------------------------------
0001C9F8                            
0001C9F8                            AniArt_MZ:				; XREF: AniArt_Index
0001C9F8 5338 F7B1                  		subq.b	#1,($FFFFF7B1).w
0001C9FC 6A00                       		bpl.s	loc_1C150
0001C9FE 11FC 0013 F7B1             		move.b	#$13,($FFFFF7B1).w
0001CA04 43F9 0000 0000             		lea	(Art_MzLava1).l,a1 ; load lava surface patterns
0001CA0A 7000                       		moveq	#0,d0
0001CA0C 1038 F7B0                  		move.b	($FFFFF7B0).w,d0
0001CA10 5200                       		addq.b	#1,d0
0001CA12 0C00 0003                  		cmpi.b	#3,d0
0001CA16 6600                       		bne.s	loc_1C134
0001CA18 7000                       		moveq	#0,d0
0001CA1A                            
0001CA1A                            loc_1C134:
0001CA1A 11C0 F7B0                  		move.b	d0,($FFFFF7B0).w
0001CA1E C0FC 0100                  		mulu.w	#$100,d0
0001CA22 D2C0                       		adda.w	d0,a1
0001CA24 23FC 5C40 0001 00C0 0004   		move.l	#$5C400001,($C00004).l
0001CA2E 323C 0007                  		move.w	#7,d1
0001CA32 6100 0000                  		bsr.w	LoadTiles
0001CA36                            
0001CA36                            loc_1C150:
0001CA36 5338 F7B3                  		subq.b	#1,($FFFFF7B3).w
0001CA3A 6A00                       		bpl.s	loc_1C1AE
0001CA3C 11FC 0001 F7B3             		move.b	#1,($FFFFF7B3).w
0001CA42 7000                       		moveq	#0,d0
0001CA44 1038 F7B0                  		move.b	($FFFFF7B0).w,d0
0001CA48 49F9 0000 0000             		lea	(Art_MzLava2).l,a4 ; load lava patterns
0001CA4E EE58                       		ror.w	#7,d0
0001CA50 D8C0                       		adda.w	d0,a4
0001CA52 23FC 5A40 0001 00C0 0004   		move.l	#$5A400001,($C00004).l
0001CA5C 7600                       		moveq	#0,d3
0001CA5E 1638 F7B2                  		move.b	($FFFFF7B2).w,d3
0001CA62 5238 F7B2                  		addq.b	#1,($FFFFF7B2).w
0001CA66 1638 FE68                  		move.b	($FFFFFE68).w,d3
0001CA6A 343C 0003                  		move.w	#3,d2
0001CA6E                            
0001CA6E                            loc_1C188:
0001CA6E 3003                       		move.w	d3,d0
0001CA70 D040                       		add.w	d0,d0
0001CA72 0240 001E                  		andi.w	#$1E,d0
0001CA76 47F9 0000 0000             		lea	(AniArt_MZextra).l,a3
0001CA7C 3033 0000                  		move.w	(a3,d0.w),d0
0001CA80 47F3 0000                  		lea	(a3,d0.w),a3
0001CA84 224C                       		movea.l	a4,a1
0001CA86 323C 001F                  		move.w	#$1F,d1
0001CA8A 4E93                       		jsr	(a3)
0001CA8C 5843                       		addq.w	#4,d3
0001CA8E 51CA FFDE                  		dbf	d2,loc_1C188
0001CA92 4E75                       		rts	
0001CA94                            ; ===========================================================================
0001CA94                            
0001CA94                            loc_1C1AE:
0001CA94 5338 F7B5                  		subq.b	#1,($FFFFF7B5).w
0001CA98 6A00 0000                  		bpl.w	locret_1C1EA
0001CA9C 11FC 0007 F7B5             		move.b	#7,($FFFFF7B5).w
0001CAA2 43F9 0000 0000             		lea	(Art_MzTorch).l,a1 ; load torch	patterns
0001CAA8 7000                       		moveq	#0,d0
0001CAAA 1038 F7B6                  		move.b	($FFFFF7B6).w,d0
0001CAAE 5238 F7B6                  		addq.b	#1,($FFFFF7B6).w
0001CAB2 0238 0003 F7B6             		andi.b	#3,($FFFFF7B6).w
0001CAB8 C0FC 00C0                  		mulu.w	#$C0,d0
0001CABC D2C0                       		adda.w	d0,a1
0001CABE 23FC 5E40 0001 00C0 0004   		move.l	#$5E400001,($C00004).l
0001CAC8 323C 0005                  		move.w	#5,d1
0001CACC 6000 0000                  		bra.w	LoadTiles
0001CAD0                            ; ===========================================================================
0001CAD0                            
0001CAD0                            locret_1C1EA:
0001CAD0 4E75                       		rts	
0001CAD2                            ; ===========================================================================
0001CAD2                            ; ---------------------------------------------------------------------------
0001CAD2                            ; Animated pattern routine - Scrap Brain
0001CAD2                            ; ---------------------------------------------------------------------------
0001CAD2                            
0001CAD2                            AniArt_SBZ:				; XREF: AniArt_Index
0001CAD2 4A38 F7B4                  		tst.b	($FFFFF7B4).w
0001CAD6 6700                       		beq.s	loc_1C1F8
0001CAD8 5338 F7B4                  		subq.b	#1,($FFFFF7B4).w
0001CADC 6000                       		bra.s	loc_1C250
0001CADE                            ; ===========================================================================
0001CADE                            
0001CADE                            loc_1C1F8:
0001CADE 5338 F7B1                  		subq.b	#1,($FFFFF7B1).w
0001CAE2 6A00                       		bpl.s	loc_1C250
0001CAE4 11FC 0007 F7B1             		move.b	#7,($FFFFF7B1).w
0001CAEA 43F9 0000 0000             		lea	(Art_SbzSmoke).l,a1 ; load smoke patterns
0001CAF0 23FC 4900 0002 00C0 0004   		move.l	#$49000002,($C00004).l
0001CAFA 1038 F7B0                  		move.b	($FFFFF7B0).w,d0
0001CAFE 5238 F7B0                  		addq.b	#1,($FFFFF7B0).w
0001CB02 0240 0007                  		andi.w	#7,d0
0001CB06 6700                       		beq.s	loc_1C234
0001CB08 5340                       		subq.w	#1,d0
0001CB0A C0FC 0180                  		mulu.w	#$180,d0
0001CB0E 43F1 0000                  		lea	(a1,d0.w),a1
0001CB12 323C 000B                  		move.w	#$B,d1
0001CB16 6000 0000                  		bra.w	LoadTiles
0001CB1A                            ; ===========================================================================
0001CB1A                            
0001CB1A                            loc_1C234:
0001CB1A 11FC 00B4 F7B4             		move.b	#$B4,($FFFFF7B4).w
0001CB20                            
0001CB20                            loc_1C23A:
0001CB20 323C 0005                  		move.w	#5,d1
0001CB24 6100 0000                  		bsr.w	LoadTiles
0001CB28 43F9 0000 0000             		lea	(Art_SbzSmoke).l,a1
0001CB2E 323C 0005                  		move.w	#5,d1
0001CB32 6000 0000                  		bra.w	LoadTiles
0001CB36                            ; ===========================================================================
0001CB36                            
0001CB36                            loc_1C250:
0001CB36 4A38 F7B5                  		tst.b	($FFFFF7B5).w
0001CB3A 6700                       		beq.s	loc_1C25C
0001CB3C 5338 F7B5                  		subq.b	#1,($FFFFF7B5).w
0001CB40 6000                       		bra.s	locret_1C2A0
0001CB42                            ; ===========================================================================
0001CB42                            
0001CB42                            loc_1C25C:
0001CB42 5338 F7B3                  		subq.b	#1,($FFFFF7B3).w
0001CB46 6A00                       		bpl.s	locret_1C2A0
0001CB48 11FC 0007 F7B3             		move.b	#7,($FFFFF7B3).w
0001CB4E 43F9 0000 0000             		lea	(Art_SbzSmoke).l,a1
0001CB54 23FC 4A80 0002 00C0 0004   		move.l	#$4A800002,($C00004).l
0001CB5E 1038 F7B2                  		move.b	($FFFFF7B2).w,d0
0001CB62 5238 F7B2                  		addq.b	#1,($FFFFF7B2).w
0001CB66 0240 0007                  		andi.w	#7,d0
0001CB6A 6700                       		beq.s	loc_1C298
0001CB6C 5340                       		subq.w	#1,d0
0001CB6E C0FC 0180                  		mulu.w	#$180,d0
0001CB72 43F1 0000                  		lea	(a1,d0.w),a1
0001CB76 323C 000B                  		move.w	#$B,d1
0001CB7A 6000 0000                  		bra.w	LoadTiles
0001CB7E                            ; ===========================================================================
0001CB7E                            
0001CB7E                            loc_1C298:
0001CB7E 11FC 0078 F7B5             		move.b	#$78,($FFFFF7B5).w
0001CB84 609A                       		bra.s	loc_1C23A
0001CB86                            ; ===========================================================================
0001CB86                            
0001CB86                            locret_1C2A0:
0001CB86 4E75                       		rts	
0001CB88                            ; ===========================================================================
0001CB88                            ; ---------------------------------------------------------------------------
0001CB88                            ; Animated pattern routine - ending sequence
0001CB88                            ; ---------------------------------------------------------------------------
0001CB88                            
0001CB88                            AniArt_Ending:				; XREF: AniArt_Index
0001CB88 5338 F7B3                  		subq.b	#1,($FFFFF7B3).w
0001CB8C 6A00                       		bpl.s	loc_1C2F4
0001CB8E 11FC 0007 F7B3             		move.b	#7,($FFFFF7B3).w
0001CB94 43F9 0000 0000             		lea	(Art_GhzFlower1).l,a1 ;	load big flower	patterns
0001CB9A 45F8 9400                  		lea	($FFFF9400).w,a2
0001CB9E 1038 F7B2                  		move.b	($FFFFF7B2).w,d0
0001CBA2 5238 F7B2                  		addq.b	#1,($FFFFF7B2).w
0001CBA6 0240 0001                  		andi.w	#1,d0
0001CBAA 6700                       		beq.s	loc_1C2CE
0001CBAC 43E9 0200                  		lea	$200(a1),a1
0001CBB0 45EA 0200                  		lea	$200(a2),a2
0001CBB4                            
0001CBB4                            loc_1C2CE:
0001CBB4 23FC 6B80 0001 00C0 0004   		move.l	#$6B800001,($C00004).l
0001CBBE 323C 000F                  		move.w	#$F,d1
0001CBC2 6100 0000                  		bsr.w	LoadTiles
0001CBC6 224A                       		movea.l	a2,a1
0001CBC8 23FC 7200 0001 00C0 0004   		move.l	#$72000001,($C00004).l
0001CBD2 323C 000F                  		move.w	#$F,d1
0001CBD6 6000 0000                  		bra.w	LoadTiles
0001CBDA                            ; ===========================================================================
0001CBDA                            
0001CBDA                            loc_1C2F4:
0001CBDA 5338 F7B5                  		subq.b	#1,($FFFFF7B5).w
0001CBDE 6A00                       		bpl.s	loc_1C33C
0001CBE0 11FC 0007 F7B5             		move.b	#7,($FFFFF7B5).w
0001CBE6 1038 F7B4                  		move.b	($FFFFF7B4).w,d0
0001CBEA 5238 F7B4                  		addq.b	#1,($FFFFF7B4).w
0001CBEE 0240 0007                  		andi.w	#7,d0
0001CBF2 103B 0000                  		move.b	byte_1C334(pc,d0.w),d0
0001CBF6 EF48                       		lsl.w	#7,d0
0001CBF8 3200                       		move.w	d0,d1
0001CBFA D040                       		add.w	d0,d0
0001CBFC D041                       		add.w	d1,d0
0001CBFE 23FC 6D80 0001 00C0 0004   		move.l	#$6D800001,($C00004).l
0001CC08 43F9 0000 0000             		lea	(Art_GhzFlower2).l,a1 ;	load small flower patterns
0001CC0E 43F1 0000                  		lea	(a1,d0.w),a1
0001CC12 323C 000B                  		move.w	#$B,d1
0001CC16 6000 0000                  		bra.w	LoadTiles
0001CC1A                            ; ===========================================================================
0001CC1A 0000 0001 0202 0201        byte_1C334:	dc.b 0,	0, 0, 1, 2, 2, 2, 1
0001CC22                            ; ===========================================================================
0001CC22                            
0001CC22                            loc_1C33C:
0001CC22 5338 F7B9                  		subq.b	#1,($FFFFF7B9).w
0001CC26 6A00                       		bpl.s	loc_1C37A
0001CC28 11FC 000E F7B9             		move.b	#$E,($FFFFF7B9).w
0001CC2E 1038 F7B8                  		move.b	($FFFFF7B8).w,d0
0001CC32 5238 F7B8                  		addq.b	#1,($FFFFF7B8).w
0001CC36 0240 0003                  		andi.w	#3,d0
0001CC3A 103B 0000                  		move.b	byte_1C376(pc,d0.w),d0
0001CC3E E148                       		lsl.w	#8,d0
0001CC40 D040                       		add.w	d0,d0
0001CC42 23FC 7000 0001 00C0 0004   		move.l	#$70000001,($C00004).l
0001CC4C 43F8 9800                  		lea	($FFFF9800).w,a1 ; load	special	flower patterns	(from RAM)
0001CC50 43F1 0000                  		lea	(a1,d0.w),a1
0001CC54 323C 000F                  		move.w	#$F,d1
0001CC58 6000 0000                  		bra.w	LoadTiles
0001CC5C                            ; ===========================================================================
0001CC5C 0001 0201                  byte_1C376:	dc.b 0,	1, 2, 1
0001CC60                            ; ===========================================================================
0001CC60                            
0001CC60                            loc_1C37A:
0001CC60 5338 F7BB                  		subq.b	#1,($FFFFF7BB).w
0001CC64 6A00                       		bpl.s	locret_1C3B4
0001CC66 11FC 000B F7BB             		move.b	#$B,($FFFFF7BB).w
0001CC6C 1038 F7BA                  		move.b	($FFFFF7BA).w,d0
0001CC70 5238 F7BA                  		addq.b	#1,($FFFFF7BA).w
0001CC74 0240 0003                  		andi.w	#3,d0
0001CC78 103B 00E2                  		move.b	byte_1C376(pc,d0.w),d0
0001CC7C E148                       		lsl.w	#8,d0
0001CC7E D040                       		add.w	d0,d0
0001CC80 23FC 6800 0001 00C0 0004   		move.l	#$68000001,($C00004).l
0001CC8A 43F8 9E00                  		lea	($FFFF9E00).w,a1 ; load	special	flower patterns	(from RAM)
0001CC8E 43F1 0000                  		lea	(a1,d0.w),a1
0001CC92 323C 000F                  		move.w	#$F,d1
0001CC96 6000 0000                  		bra.w	LoadTiles
0001CC9A                            ; ===========================================================================
0001CC9A                            
0001CC9A                            locret_1C3B4:
0001CC9A 4E75                       		rts	
0001CC9C                            ; ===========================================================================
0001CC9C                            
0001CC9C                            AniArt_none:				; XREF: AniArt_Index
0001CC9C 4E75                       		rts	
0001CC9E                            
0001CC9E                            ; ---------------------------------------------------------------------------
0001CC9E                            ; Subroutine to	load (d1 - 1) 8x8 tiles
0001CC9E                            ; ---------------------------------------------------------------------------
0001CC9E                            
0001CC9E                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0001CC9E                            
0001CC9E                            
0001CC9E                            LoadTiles:
0001CC9E 2C99                       		move.l	(a1)+,(a6)
0001CCA0 2C99                       		move.l	(a1)+,(a6)
0001CCA2 2C99                       		move.l	(a1)+,(a6)
0001CCA4 2C99                       		move.l	(a1)+,(a6)
0001CCA6 2C99                       		move.l	(a1)+,(a6)
0001CCA8 2C99                       		move.l	(a1)+,(a6)
0001CCAA 2C99                       		move.l	(a1)+,(a6)
0001CCAC 2C99                       		move.l	(a1)+,(a6)
0001CCAE 51C9 FFEE                  		dbf	d1,LoadTiles
0001CCB2 4E75                       		rts	
0001CCB4                            ; End of function LoadTiles
0001CCB4                            
0001CCB4                            ; ===========================================================================
0001CCB4                            ; ---------------------------------------------------------------------------
0001CCB4                            ; Animated pattern routine - more Marble Zone
0001CCB4                            ; ---------------------------------------------------------------------------
0001CCB4 0000 0000                  AniArt_MZextra:	dc.w loc_1C3EE-AniArt_MZextra, loc_1C3FA-AniArt_MZextra
0001CCB8 0000 0000                  		dc.w loc_1C410-AniArt_MZextra, loc_1C41E-AniArt_MZextra
0001CCBC 0000 0000                  		dc.w loc_1C434-AniArt_MZextra, loc_1C442-AniArt_MZextra
0001CCC0 0000 0000                  		dc.w loc_1C458-AniArt_MZextra, loc_1C466-AniArt_MZextra
0001CCC4 0000 0000                  		dc.w loc_1C47C-AniArt_MZextra, loc_1C48A-AniArt_MZextra
0001CCC8 0000 0000                  		dc.w loc_1C4A0-AniArt_MZextra, loc_1C4AE-AniArt_MZextra
0001CCCC 0000 0000                  		dc.w loc_1C4C4-AniArt_MZextra, loc_1C4D2-AniArt_MZextra
0001CCD0 0000 0000                  		dc.w loc_1C4E8-AniArt_MZextra, loc_1C4FA-AniArt_MZextra
0001CCD4                            ; ===========================================================================
0001CCD4                            
0001CCD4                            loc_1C3EE:				; XREF: AniArt_MZextra
0001CCD4 2C91                       		move.l	(a1),(a6)
0001CCD6 43E9 0010                  		lea	$10(a1),a1
0001CCDA 51C9 FFF8                  		dbf	d1,loc_1C3EE
0001CCDE 4E75                       		rts	
0001CCE0                            ; ===========================================================================
0001CCE0                            
0001CCE0                            loc_1C3FA:				; XREF: AniArt_MZextra
0001CCE0 2029 0002                  		move.l	2(a1),d0
0001CCE4 1029 0001                  		move.b	1(a1),d0
0001CCE8 E098                       		ror.l	#8,d0
0001CCEA 2C80                       		move.l	d0,(a6)
0001CCEC 43E9 0010                  		lea	$10(a1),a1
0001CCF0 51C9 FFEE                  		dbf	d1,loc_1C3FA
0001CCF4 4E75                       		rts	
0001CCF6                            ; ===========================================================================
0001CCF6                            
0001CCF6                            loc_1C410:				; XREF: AniArt_MZextra
0001CCF6 2CA9 0002                  		move.l	2(a1),(a6)
0001CCFA 43E9 0010                  		lea	$10(a1),a1
0001CCFE 51C9 FFF6                  		dbf	d1,loc_1C410
0001CD02 4E75                       		rts	
0001CD04                            ; ===========================================================================
0001CD04                            
0001CD04                            loc_1C41E:				; XREF: AniArt_MZextra
0001CD04 2029 0004                  		move.l	4(a1),d0
0001CD08 1029 0003                  		move.b	3(a1),d0
0001CD0C E098                       		ror.l	#8,d0
0001CD0E 2C80                       		move.l	d0,(a6)
0001CD10 43E9 0010                  		lea	$10(a1),a1
0001CD14 51C9 FFEE                  		dbf	d1,loc_1C41E
0001CD18 4E75                       		rts	
0001CD1A                            ; ===========================================================================
0001CD1A                            
0001CD1A                            loc_1C434:				; XREF: AniArt_MZextra
0001CD1A 2CA9 0004                  		move.l	4(a1),(a6)
0001CD1E 43E9 0010                  		lea	$10(a1),a1
0001CD22 51C9 FFF6                  		dbf	d1,loc_1C434
0001CD26 4E75                       		rts	
0001CD28                            ; ===========================================================================
0001CD28                            
0001CD28                            loc_1C442:				; XREF: AniArt_MZextra
0001CD28 2029 0006                  		move.l	6(a1),d0
0001CD2C 1029 0005                  		move.b	5(a1),d0
0001CD30 E098                       		ror.l	#8,d0
0001CD32 2C80                       		move.l	d0,(a6)
0001CD34 43E9 0010                  		lea	$10(a1),a1
0001CD38 51C9 FFEE                  		dbf	d1,loc_1C442
0001CD3C 4E75                       		rts	
0001CD3E                            ; ===========================================================================
0001CD3E                            
0001CD3E                            loc_1C458:				; XREF: AniArt_MZextra
0001CD3E 2CA9 0006                  		move.l	6(a1),(a6)
0001CD42 43E9 0010                  		lea	$10(a1),a1
0001CD46 51C9 FFF6                  		dbf	d1,loc_1C458
0001CD4A 4E75                       		rts	
0001CD4C                            ; ===========================================================================
0001CD4C                            
0001CD4C                            loc_1C466:				; XREF: AniArt_MZextra
0001CD4C 2029 0008                  		move.l	8(a1),d0
0001CD50 1029 0007                  		move.b	7(a1),d0
0001CD54 E098                       		ror.l	#8,d0
0001CD56 2C80                       		move.l	d0,(a6)
0001CD58 43E9 0010                  		lea	$10(a1),a1
0001CD5C 51C9 FFEE                  		dbf	d1,loc_1C466
0001CD60 4E75                       		rts	
0001CD62                            ; ===========================================================================
0001CD62                            
0001CD62                            loc_1C47C:				; XREF: AniArt_MZextra
0001CD62 2CA9 0008                  		move.l	8(a1),(a6)
0001CD66 43E9 0010                  		lea	$10(a1),a1
0001CD6A 51C9 FFF6                  		dbf	d1,loc_1C47C
0001CD6E 4E75                       		rts	
0001CD70                            ; ===========================================================================
0001CD70                            
0001CD70                            loc_1C48A:				; XREF: AniArt_MZextra
0001CD70 2029 000A                  		move.l	$A(a1),d0
0001CD74 1029 0009                  		move.b	9(a1),d0
0001CD78 E098                       		ror.l	#8,d0
0001CD7A 2C80                       		move.l	d0,(a6)
0001CD7C 43E9 0010                  		lea	$10(a1),a1
0001CD80 51C9 FFEE                  		dbf	d1,loc_1C48A
0001CD84 4E75                       		rts	
0001CD86                            ; ===========================================================================
0001CD86                            
0001CD86                            loc_1C4A0:				; XREF: AniArt_MZextra
0001CD86 2CA9 000A                  		move.l	$A(a1),(a6)
0001CD8A 43E9 0010                  		lea	$10(a1),a1
0001CD8E 51C9 FFF6                  		dbf	d1,loc_1C4A0
0001CD92 4E75                       		rts	
0001CD94                            ; ===========================================================================
0001CD94                            
0001CD94                            loc_1C4AE:				; XREF: AniArt_MZextra
0001CD94 2029 000C                  		move.l	$C(a1),d0
0001CD98 1029 000B                  		move.b	$B(a1),d0
0001CD9C E098                       		ror.l	#8,d0
0001CD9E 2C80                       		move.l	d0,(a6)
0001CDA0 43E9 0010                  		lea	$10(a1),a1
0001CDA4 51C9 FFEE                  		dbf	d1,loc_1C4AE
0001CDA8 4E75                       		rts	
0001CDAA                            ; ===========================================================================
0001CDAA                            
0001CDAA                            loc_1C4C4:				; XREF: AniArt_MZextra
0001CDAA 2CA9 000C                  		move.l	$C(a1),(a6)
0001CDAE 43E9 0010                  		lea	$10(a1),a1
0001CDB2 51C9 FFF6                  		dbf	d1,loc_1C4C4
0001CDB6 4E75                       		rts	
0001CDB8                            ; ===========================================================================
0001CDB8                            
0001CDB8                            loc_1C4D2:				; XREF: AniArt_MZextra
0001CDB8 2029 000C                  		move.l	$C(a1),d0
0001CDBC E198                       		rol.l	#8,d0
0001CDBE 1011                       		move.b	0(a1),d0
0001CDC0 2C80                       		move.l	d0,(a6)
0001CDC2 43E9 0010                  		lea	$10(a1),a1
0001CDC6 51C9 FFF0                  		dbf	d1,loc_1C4D2
0001CDCA 4E75                       		rts	
0001CDCC                            ; ===========================================================================
0001CDCC                            
0001CDCC                            loc_1C4E8:				; XREF: AniArt_MZextra
0001CDCC 3CA9 000E                  		move.w	$E(a1),(a6)
0001CDD0 3C91                       		move.w	0(a1),(a6)
0001CDD2 43E9 0010                  		lea	$10(a1),a1
0001CDD6 51C9 FFF4                  		dbf	d1,loc_1C4E8
0001CDDA 4E75                       		rts	
0001CDDC                            ; ===========================================================================
0001CDDC                            
0001CDDC                            loc_1C4FA:				; XREF: AniArt_MZextra
0001CDDC 2011                       		move.l	0(a1),d0
0001CDDE 1029 000F                  		move.b	$F(a1),d0
0001CDE2 E098                       		ror.l	#8,d0
0001CDE4 2C80                       		move.l	d0,(a6)
0001CDE6 43E9 0010                  		lea	$10(a1),a1
0001CDEA 51C9 FFF0                  		dbf	d1,loc_1C4FA
0001CDEE 4E75                       		rts	
0001CDF0                            
0001CDF0                            ; ---------------------------------------------------------------------------
0001CDF0                            ; Animated pattern routine - giant ring
0001CDF0                            ; ---------------------------------------------------------------------------
0001CDF0                            
0001CDF0                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0001CDF0                            
0001CDF0                            
0001CDF0                            AniArt_GiantRing:			; XREF: AniArt_Load
0001CDF0 4A78 F7BE                  		tst.w	($FFFFF7BE).w
0001CDF4 6600                       		bne.s	loc_1C518
0001CDF6 4E75                       		rts	
0001CDF8                            ; ===========================================================================
0001CDF8                            
0001CDF8                            loc_1C518:
0001CDF8 0478 01C0 F7BE             		subi.w	#$1C0,($FFFFF7BE).w
0001CDFE 43F9 0000 0000             		lea	(Art_BigRing).l,a1 ; load giant	ring patterns
0001CE04 7000                       		moveq	#0,d0
0001CE06 3038 F7BE                  		move.w	($FFFFF7BE).w,d0
0001CE0A 43F1 0000                  		lea	(a1,d0.w),a1
0001CE0E 0640 8000                  		addi.w	#$8000,d0
0001CE12 E588                       		lsl.l	#2,d0
0001CE14 E448                       		lsr.w	#2,d0
0001CE16 0040 4000                  		ori.w	#$4000,d0
0001CE1A 4840                       		swap	d0
0001CE1C 2D40 0004                  		move.l	d0,4(a6)
0001CE20 323C 000D                  		move.w	#$D,d1
0001CE24 6000 FE78                  		bra.w	LoadTiles
0001CE28                            ; End of function AniArt_GiantRing
0001CE28                            
0001CE28                            ; ===========================================================================
0001CE28                            ; ---------------------------------------------------------------------------
0001CE28                            ; Object 21 - SCORE, TIME, RINGS
0001CE28                            ; ---------------------------------------------------------------------------
0001CE28                            
0001CE28                            Obj21:					; XREF: Obj_Index
0001CE28 7000                       		moveq	#0,d0
0001CE2A 1028 0024                  		move.b	$24(a0),d0
0001CE2E 323B 0000                  		move.w	Obj21_Index(pc,d0.w),d1
0001CE32 4EFB 1000                  		jmp	Obj21_Index(pc,d1.w)
0001CE36                            ; ===========================================================================
0001CE36 0000                       Obj21_Index:	dc.w Obj21_Main-Obj21_Index
0001CE38 0000                       		dc.w Obj21_Flash-Obj21_Index
0001CE3A                            ; ===========================================================================
0001CE3A                            
0001CE3A                            Obj21_Main:				; XREF: Obj21_Main
0001CE3A 5428 0024                  		addq.b	#2,$24(a0)
0001CE3E 317C 0090 0008             		move.w	#$90,8(a0)
0001CE44 317C 0108 000A             		move.w	#$108,$A(a0)
0001CE4A 217C 0000 0000 0004        		move.l	#Map_obj21,4(a0)
0001CE52 317C 06CA 0002             		move.w	#$6CA,2(a0)
0001CE58 117C 0000 0001             		move.b	#0,1(a0)
0001CE5E 117C 0000 0018             		move.b	#0,$18(a0)
0001CE64                            
0001CE64                            Obj21_Flash:				; XREF: Obj21_Main
0001CE64 4A78 FE20                  		tst.w	($FFFFFE20).w	; do you have any rings?
0001CE68 6700                       		beq.s	Obj21_Flash2	; if not, branch
0001CE6A 4228 001A                  		clr.b	$1A(a0)		; make all counters yellow
0001CE6E 4EF9 0000 DDC8             		jmp	DisplaySprite
0001CE74                            ; ===========================================================================
0001CE74                            
0001CE74                            Obj21_Flash2:
0001CE74 7000                       		moveq	#0,d0
0001CE76 0838 0003 FE05             		btst	#3,($FFFFFE05).w
0001CE7C 6600                       		bne.s	Obj21_Display
0001CE7E 5240                       		addq.w	#1,d0		; make ring counter flash red
0001CE80 0C38 0009 FE23             		cmpi.b	#9,($FFFFFE23).w ; have	9 minutes elapsed?
0001CE86 6600                       		bne.s	Obj21_Display	; if not, branch
0001CE88 5440                       		addq.w	#2,d0		; make time counter flash red
0001CE8A                            
0001CE8A                            Obj21_Display:
0001CE8A 1140 001A                  		move.b	d0,$1A(a0)
0001CE8E 4EF9 0000 DDC8             		jmp	DisplaySprite
0001CE94                            ; ===========================================================================
0001CE94                            ; ---------------------------------------------------------------------------
0001CE94                            ; Sprite mappings - SCORE, TIME, RINGS
0001CE94                            ; ---------------------------------------------------------------------------
0001CE94                            Map_obj21:
0001CE94                            	include "_maps\obj21.asm"
0001CE94                            ; ---------------------------------------------------------------------------
0001CE94                            ; Sprite mappings - SCORE, TIME, RINGS
0001CE94                            ; ---------------------------------------------------------------------------
0001CE94 0000 0000                  		dc.w byte_1C5BC-Map_obj21, byte_1C5F0-Map_obj21
0001CE98 0000 0000                  		dc.w byte_1C624-Map_obj21, byte_1C658-Map_obj21
0001CE9C 0A                         byte_1C5BC:	dc.b $A
0001CE9D 800D 8000 00               		dc.b $80, $D, $80, 0, 0
0001CEA2 800D 8018 20               		dc.b $80, $D, $80, $18,	$20
0001CEA7 800D 8020 40               		dc.b $80, $D, $80, $20,	$40
0001CEAC 900D 8010 00               		dc.b $90, $D, $80, $10,	0
0001CEB1 900D 8028 28               		dc.b $90, $D, $80, $28,	$28
0001CEB6 A00D 8008 00               		dc.b $A0, $D, $80, 8, 0
0001CEBB A001 8000 20               		dc.b $A0, 1, $80, 0, $20
0001CEC0 A009 8030 30               		dc.b $A0, 9, $80, $30, $30
0001CEC5 4005 810A 00               		dc.b $40, 5, $81, $A, 0
0001CECA 400D 810E 10               		dc.b $40, $D, $81, $E, $10
0001CECF 00                         		dc.b 0
0001CED0 0A                         byte_1C5F0:	dc.b $A
0001CED1 800D 8000 00               		dc.b $80, $D, $80, 0, 0
0001CED6 800D 8018 20               		dc.b $80, $D, $80, $18,	$20
0001CEDB 800D 8020 40               		dc.b $80, $D, $80, $20,	$40
0001CEE0 900D 8010 00               		dc.b $90, $D, $80, $10,	0
0001CEE5 900D 8028 28               		dc.b $90, $D, $80, $28,	$28
0001CEEA A00D A008 00               		dc.b $A0, $D, $A0, 8, 0
0001CEEF A001 A000 20               		dc.b $A0, 1, $A0, 0, $20
0001CEF4 A009 8030 30               		dc.b $A0, 9, $80, $30, $30
0001CEF9 4005 810A 00               		dc.b $40, 5, $81, $A, 0
0001CEFE 400D 810E 10               		dc.b $40, $D, $81, $E, $10
0001CF03 00                         		dc.b 0
0001CF04 0A                         byte_1C624:	dc.b $A
0001CF05 800D 8000 00               		dc.b $80, $D, $80, 0, 0
0001CF0A 800D 8018 20               		dc.b $80, $D, $80, $18,	$20
0001CF0F 800D 8020 40               		dc.b $80, $D, $80, $20,	$40
0001CF14 900D A010 00               		dc.b $90, $D, $A0, $10,	0
0001CF19 900D 8028 28               		dc.b $90, $D, $80, $28,	$28
0001CF1E A00D 8008 00               		dc.b $A0, $D, $80, 8, 0
0001CF23 A001 8000 20               		dc.b $A0, 1, $80, 0, $20
0001CF28 A009 8030 30               		dc.b $A0, 9, $80, $30, $30
0001CF2D 4005 810A 00               		dc.b $40, 5, $81, $A, 0
0001CF32 400D 810E 10               		dc.b $40, $D, $81, $E, $10
0001CF37 00                         		dc.b 0
0001CF38 0A                         byte_1C658:	dc.b $A
0001CF39 800D 8000 00               		dc.b $80, $D, $80, 0, 0
0001CF3E 800D 8018 20               		dc.b $80, $D, $80, $18,	$20
0001CF43 800D 8020 40               		dc.b $80, $D, $80, $20,	$40
0001CF48 900D A010 00               		dc.b $90, $D, $A0, $10,	0
0001CF4D 900D 8028 28               		dc.b $90, $D, $80, $28,	$28
0001CF52 A00D A008 00               		dc.b $A0, $D, $A0, 8, 0
0001CF57 A001 A000 20               		dc.b $A0, 1, $A0, 0, $20
0001CF5C A009 8030 30               		dc.b $A0, 9, $80, $30, $30
0001CF61 4005 810A 00               		dc.b $40, 5, $81, $A, 0
0001CF66 400D 810E 10               		dc.b $40, $D, $81, $E, $10
0001CF6C 00                         		even
0001CF6C 00                         		even
0001CF6C                            
0001CF6C                            ; ---------------------------------------------------------------------------
0001CF6C                            ; Add points subroutine
0001CF6C                            ; ---------------------------------------------------------------------------
0001CF6C                            
0001CF6C                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0001CF6C                            
0001CF6C                            
0001CF6C                            AddPoints:
0001CF6C 11FC 0001 FE1F             		move.b	#1,($FFFFFE1F).w ; set score counter to	update
0001CF72 45F8 FFC0                  		lea	($FFFFFFC0).w,a2
0001CF76 47F8 FE26                  		lea	($FFFFFE26).w,a3
0001CF7A D193                       		add.l	d0,(a3)		; add d0*10 to the score
0001CF7C 223C 000F 423F             		move.l	#999999,d1
0001CF82 B293                       		cmp.l	(a3),d1		; is #999999 higher than the score?
0001CF84 6200 0000                  		bhi.w	loc_1C6AC	; if yes, branch
0001CF88 2681                       		move.l	d1,(a3)		; reset	score to #999999
0001CF8A 2481                       		move.l	d1,(a2)
0001CF8C                            
0001CF8C                            loc_1C6AC:
0001CF8C 2013                       		move.l	(a3),d0
0001CF8E B092                       		cmp.l	(a2),d0
0001CF90 6500 0000                  		bcs.w	locret_1C6B6
0001CF94 2480                       		move.l	d0,(a2)
0001CF96                            
0001CF96                            locret_1C6B6:
0001CF96 4E75                       		rts	
0001CF98                            ; End of function AddPoints
0001CF98                            
0001CF98                            ; ---------------------------------------------------------------------------
0001CF98                            ; Subroutine to	update the HUD
0001CF98                            ; ---------------------------------------------------------------------------
0001CF98                            
0001CF98                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0001CF98                            
0001CF98                            
0001CF98                            HudUpdate:
0001CF98 4A78 FFFA                  		tst.w	($FFFFFFFA).w	; is debug mode	on?
0001CF9C 6600 0000                  		bne.w	HudDebug	; if yes, branch
0001CFA0 4A38 FE1F                  		tst.b	($FFFFFE1F).w	; does the score need updating?
0001CFA4 6700                       		beq.s	Hud_ChkRings	; if not, branch
0001CFA6 4238 FE1F                  		clr.b	($FFFFFE1F).w
0001CFAA 203C 5C80 0003             		move.l	#$5C800003,d0	; set VRAM address
0001CFB0 2238 FE26                  		move.l	($FFFFFE26).w,d1 ; load	score
0001CFB4 6100 0000                  		bsr.w	Hud_Score
0001CFB8                            
0001CFB8                            Hud_ChkRings:
0001CFB8 4A38 FE1D                  		tst.b	($FFFFFE1D).w	; does the ring	counter	need updating?
0001CFBC 6700                       		beq.s	Hud_ChkTime	; if not, branch
0001CFBE 6A00                       		bpl.s	loc_1C6E4
0001CFC0 6100 0000                  		bsr.w	Hud_LoadZero
0001CFC4                            
0001CFC4                            loc_1C6E4:
0001CFC4 4238 FE1D                  		clr.b	($FFFFFE1D).w
0001CFC8 203C 5F40 0003             		move.l	#$5F400003,d0	; set VRAM address
0001CFCE 7200                       		moveq	#0,d1
0001CFD0 3238 FE20                  		move.w	($FFFFFE20).w,d1 ; load	number of rings
0001CFD4 6100 0000                  		bsr.w	Hud_Rings
0001CFD8                            
0001CFD8                            Hud_ChkTime:
0001CFD8 4A38 FE1E                  		tst.b	($FFFFFE1E).w	; does the time	need updating?
0001CFDC 6700                       		beq.s	Hud_ChkLives	; if not, branch
0001CFDE 4A78 F63A                  		tst.w	($FFFFF63A).w	; is the game paused?
0001CFE2 6600                       		bne.s	Hud_ChkLives	; if yes, branch
0001CFE4 43F8 FE22                  		lea	($FFFFFE22).w,a1
0001CFE8 0C99 0009 3B3B             		cmpi.l	#$93B3B,(a1)+	; is the time 9.59?
0001CFEE 6700                       		beq.s	TimeOver	; if yes, branch
0001CFF0 5221                       		addq.b	#1,-(a1)
0001CFF2 0C11 003C                  		cmpi.b	#60,(a1)
0001CFF6 6500                       		bcs.s	Hud_ChkLives
0001CFF8 12BC 0000                  		move.b	#0,(a1)
0001CFFC 5221                       		addq.b	#1,-(a1)
0001CFFE 0C11 003C                  		cmpi.b	#60,(a1)
0001D002 6500                       		bcs.s	loc_1C734
0001D004 12BC 0000                  		move.b	#0,(a1)
0001D008 5221                       		addq.b	#1,-(a1)
0001D00A 0C11 0009                  		cmpi.b	#9,(a1)
0001D00E 6500                       		bcs.s	loc_1C734
0001D010 12BC 0009                  		move.b	#9,(a1)
0001D014                            
0001D014                            loc_1C734:
0001D014 203C 5E40 0003             		move.l	#$5E400003,d0
0001D01A 7200                       		moveq	#0,d1
0001D01C 1238 FE23                  		move.b	($FFFFFE23).w,d1 ; load	minutes
0001D020 6100 0000                  		bsr.w	Hud_Mins
0001D024 203C 5EC0 0003             		move.l	#$5EC00003,d0
0001D02A 7200                       		moveq	#0,d1
0001D02C 1238 FE24                  		move.b	($FFFFFE24).w,d1 ; load	seconds
0001D030 6100 0000                  		bsr.w	Hud_Secs
0001D034                            
0001D034                            Hud_ChkLives:
0001D034 4A38 FE1C                  		tst.b	($FFFFFE1C).w	; does the lives counter need updating?
0001D038 6700                       		beq.s	Hud_ChkBonus	; if not, branch
0001D03A 4238 FE1C                  		clr.b	($FFFFFE1C).w
0001D03E 6100 0000                  		bsr.w	Hud_Lives
0001D042                            
0001D042                            Hud_ChkBonus:
0001D042 4A38 F7D6                  		tst.b	($FFFFF7D6).w	; do time/ring bonus counters need updating?
0001D046 6700                       		beq.s	Hud_End		; if not, branch
0001D048 4238 F7D6                  		clr.b	($FFFFF7D6).w
0001D04C 23FC 6E00 0002 00C0 0004   		move.l	#$6E000002,($C00004).l
0001D056 7200                       		moveq	#0,d1
0001D058 3238 F7D2                  		move.w	($FFFFF7D2).w,d1 ; load	time bonus
0001D05C 6100 0000                  		bsr.w	Hud_TimeRingBonus
0001D060 7200                       		moveq	#0,d1
0001D062 3238 F7D4                  		move.w	($FFFFF7D4).w,d1 ; load	ring bonus
0001D066 6100 0000                  		bsr.w	Hud_TimeRingBonus
0001D06A                            
0001D06A                            Hud_End:
0001D06A 4E75                       		rts	
0001D06C                            ; ===========================================================================
0001D06C                            
0001D06C                            TimeOver:				; XREF: Hud_ChkTime
0001D06C 4238 FE1E                  		clr.b	($FFFFFE1E).w
0001D070 41F8 D000                  		lea	($FFFFD000).w,a0
0001D074 2448                       		movea.l	a0,a2
0001D076 6100 E908                  		bsr.w	KillSonic
0001D07A 11FC 0001 FE1A             		move.b	#1,($FFFFFE1A).w
0001D080 4E75                       		rts	
0001D082                            ; ===========================================================================
0001D082                            
0001D082                            HudDebug:				; XREF: HudUpdate
0001D082 6100 0000                  		bsr.w	HudDb_XY
0001D086 4A38 FE1D                  		tst.b	($FFFFFE1D).w	; does the ring	counter	need updating?
0001D08A 6700                       		beq.s	HudDb_ObjCount	; if not, branch
0001D08C 6A00                       		bpl.s	HudDb_Rings
0001D08E 6100 0000                  		bsr.w	Hud_LoadZero
0001D092                            
0001D092                            HudDb_Rings:
0001D092 4238 FE1D                  		clr.b	($FFFFFE1D).w
0001D096 203C 5F40 0003             		move.l	#$5F400003,d0	; set VRAM address
0001D09C 7200                       		moveq	#0,d1
0001D09E 3238 FE20                  		move.w	($FFFFFE20).w,d1 ; load	number of rings
0001D0A2 6100 0000                  		bsr.w	Hud_Rings
0001D0A6                            
0001D0A6                            HudDb_ObjCount:
0001D0A6 203C 5EC0 0003             		move.l	#$5EC00003,d0	; set VRAM address
0001D0AC 7200                       		moveq	#0,d1
0001D0AE 1238 F62C                  		move.b	($FFFFF62C).w,d1 ; load	"number	of objects" counter
0001D0B2 6100 0000                  		bsr.w	Hud_Secs
0001D0B6 4A38 FE1C                  		tst.b	($FFFFFE1C).w	; does the lives counter need updating?
0001D0BA 6700                       		beq.s	HudDb_ChkBonus	; if not, branch
0001D0BC 4238 FE1C                  		clr.b	($FFFFFE1C).w
0001D0C0 6100 0000                  		bsr.w	Hud_Lives
0001D0C4                            
0001D0C4                            HudDb_ChkBonus:
0001D0C4 4A38 F7D6                  		tst.b	($FFFFF7D6).w	; does the ring/time bonus counter need	updating?
0001D0C8 6700                       		beq.s	HudDb_End	; if not, branch
0001D0CA 4238 F7D6                  		clr.b	($FFFFF7D6).w
0001D0CE 23FC 6E00 0002 00C0 0004   		move.l	#$6E000002,($C00004).l ; set VRAM address
0001D0D8 7200                       		moveq	#0,d1
0001D0DA 3238 F7D2                  		move.w	($FFFFF7D2).w,d1 ; load	time bonus
0001D0DE 6100 0000                  		bsr.w	Hud_TimeRingBonus
0001D0E2 7200                       		moveq	#0,d1
0001D0E4 3238 F7D4                  		move.w	($FFFFF7D4).w,d1 ; load	ring bonus
0001D0E8 6100 0000                  		bsr.w	Hud_TimeRingBonus
0001D0EC                            
0001D0EC                            HudDb_End:
0001D0EC 4E75                       		rts	
0001D0EE                            ; End of function HudUpdate
0001D0EE                            
0001D0EE                            ; ---------------------------------------------------------------------------
0001D0EE                            ; Subroutine to	load "0" on the	HUD
0001D0EE                            ; ---------------------------------------------------------------------------
0001D0EE                            
0001D0EE                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0001D0EE                            
0001D0EE                            
0001D0EE                            Hud_LoadZero:				; XREF: HudUpdate
0001D0EE 23FC 5F40 0003 00C0 0004   		move.l	#$5F400003,($C00004).l
0001D0F8 45FA 0000                  		lea	Hud_TilesZero(pc),a2
0001D0FC 343C 0002                  		move.w	#2,d2
0001D100 6000                       		bra.s	loc_1C83E
0001D102                            ; End of function Hud_LoadZero
0001D102                            
0001D102                            ; ---------------------------------------------------------------------------
0001D102                            ; Subroutine to	load uncompressed HUD patterns ("E", "0", colon)
0001D102                            ; ---------------------------------------------------------------------------
0001D102                            
0001D102                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0001D102                            
0001D102                            
0001D102                            Hud_Base:				; XREF: Level; SS_EndLoop; EndingSequence
0001D102 4DF9 00C0 0000             		lea	($C00000).l,a6
0001D108 6100 0000                  		bsr.w	Hud_Lives
0001D10C 23FC 5C40 0003 00C0 0004   		move.l	#$5C400003,($C00004).l
0001D116 45FA 0000                  		lea	Hud_TilesBase(pc),a2
0001D11A 343C 000E                  		move.w	#$E,d2
0001D11E                            
0001D11E                            loc_1C83E:				; XREF: Hud_LoadZero
0001D11E 43FA 0000                  		lea	Art_Hud(pc),a1
0001D122                            
0001D122                            loc_1C842:
0001D122 323C 000F                  		move.w	#$F,d1
0001D126 101A                       		move.b	(a2)+,d0
0001D128 6B00                       		bmi.s	loc_1C85E
0001D12A 4880                       		ext.w	d0
0001D12C EB48                       		lsl.w	#5,d0
0001D12E 47F1 0000                  		lea	(a1,d0.w),a3
0001D132                            
0001D132                            loc_1C852:
0001D132 2C9B                       		move.l	(a3)+,(a6)
0001D134 51C9 FFFC                  		dbf	d1,loc_1C852
0001D138                            
0001D138                            loc_1C858:
0001D138 51CA FFE8                  		dbf	d2,loc_1C842
0001D13C                            
0001D13C 4E75                       		rts	
0001D13E                            ; ===========================================================================
0001D13E                            
0001D13E                            loc_1C85E:
0001D13E 2CBC 0000 0000             		move.l	#0,(a6)
0001D144 51C9 FFF8                  		dbf	d1,loc_1C85E
0001D148                            
0001D148 60EE                       		bra.s	loc_1C858
0001D14A                            ; End of function Hud_Base
0001D14A                            
0001D14A                            ; ===========================================================================
0001D14A 16FF FFFF FFFF FF00 0014+  Hud_TilesBase:	dc.b $16, $FF, $FF, $FF, $FF, $FF, $FF,	0, 0, $14, 0, 0
0001D156 FFFF 0000                  Hud_TilesZero:	dc.b $FF, $FF, 0, 0
0001D15A                            ; ---------------------------------------------------------------------------
0001D15A                            ; Subroutine to	load debug mode	numbers	patterns
0001D15A                            ; ---------------------------------------------------------------------------
0001D15A                            
0001D15A                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0001D15A                            
0001D15A                            
0001D15A                            HudDb_XY:				; XREF: HudDebug
0001D15A 23FC 5C40 0003 00C0 0004   		move.l	#$5C400003,($C00004).l ; set VRAM address
0001D164 3238 F700                  		move.w	($FFFFF700).w,d1 ; load	camera x-position
0001D168 4841                       		swap	d1
0001D16A 3238 D008                  		move.w	($FFFFD008).w,d1 ; load	Sonic's x-position
0001D16E 6100                       		bsr.s	HudDb_XY2
0001D170 3238 F704                  		move.w	($FFFFF704).w,d1 ; load	camera y-position
0001D174 4841                       		swap	d1
0001D176 3238 D00C                  		move.w	($FFFFD00C).w,d1 ; load	Sonic's y-position
0001D17A                            ; End of function HudDb_XY
0001D17A                            
0001D17A                            
0001D17A                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0001D17A                            
0001D17A                            
0001D17A                            HudDb_XY2:
0001D17A 7C07                       		moveq	#7,d6
0001D17C 43F9 0000 05F4             		lea	(Art_Text).l,a1
0001D182                            
0001D182                            HudDb_XYLoop:
0001D182 E959                       		rol.w	#4,d1
0001D184 3401                       		move.w	d1,d2
0001D186 0242 000F                  		andi.w	#$F,d2
0001D18A 0C42 000A                  		cmpi.w	#$A,d2
0001D18E 6500                       		bcs.s	loc_1C8B2
0001D190 5E42                       		addq.w	#7,d2
0001D192                            
0001D192                            loc_1C8B2:
0001D192 EB4A                       		lsl.w	#5,d2
0001D194 47F1 2000                  		lea	(a1,d2.w),a3
0001D198 2C9B                       		move.l	(a3)+,(a6)
0001D19A 2C9B                       		move.l	(a3)+,(a6)
0001D19C 2C9B                       		move.l	(a3)+,(a6)
0001D19E 2C9B                       		move.l	(a3)+,(a6)
0001D1A0 2C9B                       		move.l	(a3)+,(a6)
0001D1A2 2C9B                       		move.l	(a3)+,(a6)
0001D1A4 2C9B                       		move.l	(a3)+,(a6)
0001D1A6 2C9B                       		move.l	(a3)+,(a6)
0001D1A8 4841                       		swap	d1
0001D1AA 51CE FFD6                  		dbf	d6,HudDb_XYLoop	; repeat 7 more	times
0001D1AE                            
0001D1AE 4E75                       		rts	
0001D1B0                            ; End of function HudDb_XY2
0001D1B0                            
0001D1B0                            ; ---------------------------------------------------------------------------
0001D1B0                            ; Subroutine to	load rings numbers patterns
0001D1B0                            ; ---------------------------------------------------------------------------
0001D1B0                            
0001D1B0                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0001D1B0                            
0001D1B0                            
0001D1B0                            Hud_Rings:				; XREF: HudUpdate
0001D1B0 45F9 0000 0000             		lea	(Hud_100).l,a2
0001D1B6 7C02                       		moveq	#2,d6
0001D1B8 6000                       		bra.s	Hud_LoadArt
0001D1BA                            ; End of function Hud_Rings
0001D1BA                            
0001D1BA                            ; ---------------------------------------------------------------------------
0001D1BA                            ; Subroutine to	load score numbers patterns
0001D1BA                            ; ---------------------------------------------------------------------------
0001D1BA                            
0001D1BA                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0001D1BA                            
0001D1BA                            
0001D1BA                            Hud_Score:				; XREF: HudUpdate
0001D1BA 45F9 0000 0000             		lea	(Hud_100000).l,a2
0001D1C0 7C05                       		moveq	#5,d6
0001D1C2                            
0001D1C2                            Hud_LoadArt:
0001D1C2 7800                       		moveq	#0,d4
0001D1C4 43FA 0000                  		lea	Art_Hud(pc),a1
0001D1C8                            
0001D1C8                            Hud_ScoreLoop:
0001D1C8 7400                       		moveq	#0,d2
0001D1CA 261A                       		move.l	(a2)+,d3
0001D1CC                            
0001D1CC                            loc_1C8EC:
0001D1CC 9283                       		sub.l	d3,d1
0001D1CE 6500                       		bcs.s	loc_1C8F4
0001D1D0 5242                       		addq.w	#1,d2
0001D1D2 60F8                       		bra.s	loc_1C8EC
0001D1D4                            ; ===========================================================================
0001D1D4                            
0001D1D4                            loc_1C8F4:
0001D1D4 D283                       		add.l	d3,d1
0001D1D6 4A42                       		tst.w	d2
0001D1D8 6700                       		beq.s	loc_1C8FE
0001D1DA 383C 0001                  		move.w	#1,d4
0001D1DE                            
0001D1DE                            loc_1C8FE:
0001D1DE 4A44                       		tst.w	d4
0001D1E0 6700                       		beq.s	loc_1C92C
0001D1E2 ED4A                       		lsl.w	#6,d2
0001D1E4 2D40 0004                  		move.l	d0,4(a6)
0001D1E8 47F1 2000                  		lea	(a1,d2.w),a3
0001D1EC 2C9B                       		move.l	(a3)+,(a6)
0001D1EE 2C9B                       		move.l	(a3)+,(a6)
0001D1F0 2C9B                       		move.l	(a3)+,(a6)
0001D1F2 2C9B                       		move.l	(a3)+,(a6)
0001D1F4 2C9B                       		move.l	(a3)+,(a6)
0001D1F6 2C9B                       		move.l	(a3)+,(a6)
0001D1F8 2C9B                       		move.l	(a3)+,(a6)
0001D1FA 2C9B                       		move.l	(a3)+,(a6)
0001D1FC 2C9B                       		move.l	(a3)+,(a6)
0001D1FE 2C9B                       		move.l	(a3)+,(a6)
0001D200 2C9B                       		move.l	(a3)+,(a6)
0001D202 2C9B                       		move.l	(a3)+,(a6)
0001D204 2C9B                       		move.l	(a3)+,(a6)
0001D206 2C9B                       		move.l	(a3)+,(a6)
0001D208 2C9B                       		move.l	(a3)+,(a6)
0001D20A 2C9B                       		move.l	(a3)+,(a6)
0001D20C                            
0001D20C                            loc_1C92C:
0001D20C 0680 0040 0000             		addi.l	#$400000,d0
0001D212 51CE FFB4                  		dbf	d6,Hud_ScoreLoop
0001D216                            
0001D216 4E75                       		rts	
0001D218                            ; End of function Hud_Score
0001D218                            
0001D218                            ; ---------------------------------------------------------------------------
0001D218                            ; Subroutine to	load countdown numbers on the continue screen
0001D218                            ; ---------------------------------------------------------------------------
0001D218                            
0001D218                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0001D218                            
0001D218                            
0001D218                            ContScrCounter:				; XREF: ContinueScreen
0001D218 23FC 5F80 0003 00C0 0004   		move.l	#$5F800003,($C00004).l ; set VRAM address
0001D222 4DF9 00C0 0000             		lea	($C00000).l,a6
0001D228 45F9 0000 0000             		lea	(Hud_10).l,a2
0001D22E 7C01                       		moveq	#1,d6
0001D230 7800                       		moveq	#0,d4
0001D232 43FA 0000                  		lea	Art_Hud(pc),a1 ; load numbers patterns
0001D236                            
0001D236                            ContScr_Loop:
0001D236 7400                       		moveq	#0,d2
0001D238 261A                       		move.l	(a2)+,d3
0001D23A                            
0001D23A                            loc_1C95A:
0001D23A 9283                       		sub.l	d3,d1
0001D23C 6500                       		bcs.s	loc_1C962
0001D23E 5242                       		addq.w	#1,d2
0001D240 60F8                       		bra.s	loc_1C95A
0001D242                            ; ===========================================================================
0001D242                            
0001D242                            loc_1C962:
0001D242 D283                       		add.l	d3,d1
0001D244 ED4A                       		lsl.w	#6,d2
0001D246 47F1 2000                  		lea	(a1,d2.w),a3
0001D24A 2C9B                       		move.l	(a3)+,(a6)
0001D24C 2C9B                       		move.l	(a3)+,(a6)
0001D24E 2C9B                       		move.l	(a3)+,(a6)
0001D250 2C9B                       		move.l	(a3)+,(a6)
0001D252 2C9B                       		move.l	(a3)+,(a6)
0001D254 2C9B                       		move.l	(a3)+,(a6)
0001D256 2C9B                       		move.l	(a3)+,(a6)
0001D258 2C9B                       		move.l	(a3)+,(a6)
0001D25A 2C9B                       		move.l	(a3)+,(a6)
0001D25C 2C9B                       		move.l	(a3)+,(a6)
0001D25E 2C9B                       		move.l	(a3)+,(a6)
0001D260 2C9B                       		move.l	(a3)+,(a6)
0001D262 2C9B                       		move.l	(a3)+,(a6)
0001D264 2C9B                       		move.l	(a3)+,(a6)
0001D266 2C9B                       		move.l	(a3)+,(a6)
0001D268 2C9B                       		move.l	(a3)+,(a6)
0001D26A 51CE FFCA                  		dbf	d6,ContScr_Loop	; repeat 1 more	time
0001D26E                            
0001D26E 4E75                       		rts	
0001D270                            ; End of function ContScrCounter
0001D270                            
0001D270                            ; ===========================================================================
0001D270                            ; ---------------------------------------------------------------------------
0001D270                            ; HUD counter sizes
0001D270                            ; ---------------------------------------------------------------------------
0001D270 0001 86A0                  Hud_100000:	dc.l 100000		; XREF: Hud_Score
0001D274 0000 2710                  Hud_10000:	dc.l 10000
0001D278 0000 03E8                  Hud_1000:	dc.l 1000		; XREF: Hud_TimeRingBonus
0001D27C 0000 0064                  Hud_100:	dc.l 100		; XREF: Hud_Rings
0001D280 0000 000A                  Hud_10:		dc.l 10			; XREF: ContScrCounter; Hud_Secs; Hud_Lives
0001D284 0000 0001                  Hud_1:		dc.l 1			; XREF: Hud_Mins
0001D288                            
0001D288                            ; ---------------------------------------------------------------------------
0001D288                            ; Subroutine to	load time numbers patterns
0001D288                            ; ---------------------------------------------------------------------------
0001D288                            
0001D288                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0001D288                            
0001D288                            
0001D288                            Hud_Mins:				; XREF: Hud_ChkTime
0001D288 45F9 0001 D284             		lea	(Hud_1).l,a2
0001D28E 7C00                       		moveq	#0,d6
0001D290 6000                       		bra.s	loc_1C9BA
0001D292                            ; End of function Hud_Mins
0001D292                            
0001D292                            
0001D292                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0001D292                            
0001D292                            
0001D292                            Hud_Secs:				; XREF: Hud_ChkTime
0001D292 45F9 0001 D280             		lea	(Hud_10).l,a2
0001D298 7C01                       		moveq	#1,d6
0001D29A                            
0001D29A                            loc_1C9BA:
0001D29A 7800                       		moveq	#0,d4
0001D29C 43FA 0000                  		lea	Art_Hud(pc),a1
0001D2A0                            
0001D2A0                            Hud_TimeLoop:
0001D2A0 7400                       		moveq	#0,d2
0001D2A2 261A                       		move.l	(a2)+,d3
0001D2A4                            
0001D2A4                            loc_1C9C4:
0001D2A4 9283                       		sub.l	d3,d1
0001D2A6 6500                       		bcs.s	loc_1C9CC
0001D2A8 5242                       		addq.w	#1,d2
0001D2AA 60F8                       		bra.s	loc_1C9C4
0001D2AC                            ; ===========================================================================
0001D2AC                            
0001D2AC                            loc_1C9CC:
0001D2AC D283                       		add.l	d3,d1
0001D2AE 4A42                       		tst.w	d2
0001D2B0 6700                       		beq.s	loc_1C9D6
0001D2B2 383C 0001                  		move.w	#1,d4
0001D2B6                            
0001D2B6                            loc_1C9D6:
0001D2B6 ED4A                       		lsl.w	#6,d2
0001D2B8 2D40 0004                  		move.l	d0,4(a6)
0001D2BC 47F1 2000                  		lea	(a1,d2.w),a3
0001D2C0 2C9B                       		move.l	(a3)+,(a6)
0001D2C2 2C9B                       		move.l	(a3)+,(a6)
0001D2C4 2C9B                       		move.l	(a3)+,(a6)
0001D2C6 2C9B                       		move.l	(a3)+,(a6)
0001D2C8 2C9B                       		move.l	(a3)+,(a6)
0001D2CA 2C9B                       		move.l	(a3)+,(a6)
0001D2CC 2C9B                       		move.l	(a3)+,(a6)
0001D2CE 2C9B                       		move.l	(a3)+,(a6)
0001D2D0 2C9B                       		move.l	(a3)+,(a6)
0001D2D2 2C9B                       		move.l	(a3)+,(a6)
0001D2D4 2C9B                       		move.l	(a3)+,(a6)
0001D2D6 2C9B                       		move.l	(a3)+,(a6)
0001D2D8 2C9B                       		move.l	(a3)+,(a6)
0001D2DA 2C9B                       		move.l	(a3)+,(a6)
0001D2DC 2C9B                       		move.l	(a3)+,(a6)
0001D2DE 2C9B                       		move.l	(a3)+,(a6)
0001D2E0 0680 0040 0000             		addi.l	#$400000,d0
0001D2E6 51CE FFB8                  		dbf	d6,Hud_TimeLoop
0001D2EA                            
0001D2EA 4E75                       		rts	
0001D2EC                            ; End of function Hud_Secs
0001D2EC                            
0001D2EC                            ; ---------------------------------------------------------------------------
0001D2EC                            ; Subroutine to	load time/ring bonus numbers patterns
0001D2EC                            ; ---------------------------------------------------------------------------
0001D2EC                            
0001D2EC                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0001D2EC                            
0001D2EC                            
0001D2EC                            Hud_TimeRingBonus:			; XREF: Hud_ChkBonus
0001D2EC 45F9 0001 D278             		lea	(Hud_1000).l,a2
0001D2F2 7C03                       		moveq	#3,d6
0001D2F4 7800                       		moveq	#0,d4
0001D2F6 43FA 0000                  		lea	Art_Hud(pc),a1
0001D2FA                            
0001D2FA                            Hud_BonusLoop:
0001D2FA 7400                       		moveq	#0,d2
0001D2FC 261A                       		move.l	(a2)+,d3
0001D2FE                            
0001D2FE                            loc_1CA1E:
0001D2FE 9283                       		sub.l	d3,d1
0001D300 6500                       		bcs.s	loc_1CA26
0001D302 5242                       		addq.w	#1,d2
0001D304 60F8                       		bra.s	loc_1CA1E
0001D306                            ; ===========================================================================
0001D306                            
0001D306                            loc_1CA26:
0001D306 D283                       		add.l	d3,d1
0001D308 4A42                       		tst.w	d2
0001D30A 6700                       		beq.s	loc_1CA30
0001D30C 383C 0001                  		move.w	#1,d4
0001D310                            
0001D310                            loc_1CA30:
0001D310 4A44                       		tst.w	d4
0001D312 6700                       		beq.s	Hud_ClrBonus
0001D314 ED4A                       		lsl.w	#6,d2
0001D316 47F1 2000                  		lea	(a1,d2.w),a3
0001D31A 2C9B                       		move.l	(a3)+,(a6)
0001D31C 2C9B                       		move.l	(a3)+,(a6)
0001D31E 2C9B                       		move.l	(a3)+,(a6)
0001D320 2C9B                       		move.l	(a3)+,(a6)
0001D322 2C9B                       		move.l	(a3)+,(a6)
0001D324 2C9B                       		move.l	(a3)+,(a6)
0001D326 2C9B                       		move.l	(a3)+,(a6)
0001D328 2C9B                       		move.l	(a3)+,(a6)
0001D32A 2C9B                       		move.l	(a3)+,(a6)
0001D32C 2C9B                       		move.l	(a3)+,(a6)
0001D32E 2C9B                       		move.l	(a3)+,(a6)
0001D330 2C9B                       		move.l	(a3)+,(a6)
0001D332 2C9B                       		move.l	(a3)+,(a6)
0001D334 2C9B                       		move.l	(a3)+,(a6)
0001D336 2C9B                       		move.l	(a3)+,(a6)
0001D338 2C9B                       		move.l	(a3)+,(a6)
0001D33A                            
0001D33A                            loc_1CA5A:
0001D33A 51CE FFBE                  		dbf	d6,Hud_BonusLoop ; repeat 3 more times
0001D33E                            
0001D33E 4E75                       		rts	
0001D340                            ; ===========================================================================
0001D340                            
0001D340                            Hud_ClrBonus:
0001D340 7A0F                       		moveq	#$F,d5
0001D342                            
0001D342                            Hud_ClrBonusLoop:
0001D342 2CBC 0000 0000             		move.l	#0,(a6)
0001D348 51CD FFF8                  		dbf	d5,Hud_ClrBonusLoop
0001D34C                            
0001D34C 60EC                       		bra.s	loc_1CA5A
0001D34E                            ; End of function Hud_TimeRingBonus
0001D34E                            
0001D34E                            ; ---------------------------------------------------------------------------
0001D34E                            ; Subroutine to	load uncompressed lives	counter	patterns
0001D34E                            ; ---------------------------------------------------------------------------
0001D34E                            
0001D34E                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0001D34E                            
0001D34E                            
0001D34E                            Hud_Lives:				; XREF: Hud_ChkLives
0001D34E 203C 7BA0 0003             		move.l	#$7BA00003,d0	; set VRAM address
0001D354 7200                       		moveq	#0,d1
0001D356 1238 FE12                  		move.b	($FFFFFE12).w,d1 ; load	number of lives
0001D35A 45F9 0001 D280             		lea	(Hud_10).l,a2
0001D360 7C01                       		moveq	#1,d6
0001D362 7800                       		moveq	#0,d4
0001D364 43FA 0000                  		lea	Art_LivesNums(pc),a1
0001D368                            
0001D368                            Hud_LivesLoop:
0001D368 2D40 0004                  		move.l	d0,4(a6)
0001D36C 7400                       		moveq	#0,d2
0001D36E 261A                       		move.l	(a2)+,d3
0001D370                            
0001D370                            loc_1CA90:
0001D370 9283                       		sub.l	d3,d1
0001D372 6500                       		bcs.s	loc_1CA98
0001D374 5242                       		addq.w	#1,d2
0001D376 60F8                       		bra.s	loc_1CA90
0001D378                            ; ===========================================================================
0001D378                            
0001D378                            loc_1CA98:
0001D378 D283                       		add.l	d3,d1
0001D37A 4A42                       		tst.w	d2
0001D37C 6700                       		beq.s	loc_1CAA2
0001D37E 383C 0001                  		move.w	#1,d4
0001D382                            
0001D382                            loc_1CAA2:
0001D382 4A44                       		tst.w	d4
0001D384 6700                       		beq.s	Hud_ClrLives
0001D386                            
0001D386                            loc_1CAA6:
0001D386 EB4A                       		lsl.w	#5,d2
0001D388 47F1 2000                  		lea	(a1,d2.w),a3
0001D38C 2C9B                       		move.l	(a3)+,(a6)
0001D38E 2C9B                       		move.l	(a3)+,(a6)
0001D390 2C9B                       		move.l	(a3)+,(a6)
0001D392 2C9B                       		move.l	(a3)+,(a6)
0001D394 2C9B                       		move.l	(a3)+,(a6)
0001D396 2C9B                       		move.l	(a3)+,(a6)
0001D398 2C9B                       		move.l	(a3)+,(a6)
0001D39A 2C9B                       		move.l	(a3)+,(a6)
0001D39C                            
0001D39C                            loc_1CABC:
0001D39C 0680 0040 0000             		addi.l	#$400000,d0
0001D3A2 51CE FFC4                  		dbf	d6,Hud_LivesLoop ; repeat 1 more time
0001D3A6                            
0001D3A6 4E75                       		rts	
0001D3A8                            ; ===========================================================================
0001D3A8                            
0001D3A8                            Hud_ClrLives:
0001D3A8 4A46                       		tst.w	d6
0001D3AA 67DA                       		beq.s	loc_1CAA6
0001D3AC 7A07                       		moveq	#7,d5
0001D3AE                            
0001D3AE                            Hud_ClrLivesLoop:
0001D3AE 2CBC 0000 0000             		move.l	#0,(a6)
0001D3B4 51CD FFF8                  		dbf	d5,Hud_ClrLivesLoop
0001D3B8 60E2                       		bra.s	loc_1CABC
0001D3BA                            ; End of function Hud_Lives
0001D3BA                            
0001D3BA                            ; ===========================================================================
0001D3BA                            Art_Hud:	incbin	artunc\HUD.bin		; 8x16 pixel numbers on HUD
0001D6BA                            		even
0001D6BA                            Art_LivesNums:	incbin	artunc\livescnt.bin	; 8x8 pixel numbers on lives counter
0001D7FA                            		even
0001D7FA                            ; ===========================================================================
0001D7FA                            ; ---------------------------------------------------------------------------
0001D7FA                            ; When debug mode is currently in use
0001D7FA                            ; ---------------------------------------------------------------------------
0001D7FA                            
0001D7FA                            DebugMode:				; XREF: Obj01; Obj09
0001D7FA 7000                       		moveq	#0,d0
0001D7FC 1038 FE08                  		move.b	($FFFFFE08).w,d0
0001D800 323B 0000                  		move.w	Debug_Index(pc,d0.w),d1
0001D804 4EFB 1000                  		jmp	Debug_Index(pc,d1.w)
0001D808                            ; ===========================================================================
0001D808 0000                       Debug_Index:	dc.w Debug_Main-Debug_Index
0001D80A 0000                       		dc.w Debug_Skip-Debug_Index
0001D80C                            ; ===========================================================================
0001D80C                            
0001D80C                            Debug_Main:				; XREF: Debug_Index
0001D80C 5438 FE08                  		addq.b	#2,($FFFFFE08).w
0001D810 31F8 F72C FEF0             		move.w	($FFFFF72C).w,($FFFFFEF0).w ; buffer level x-boundary
0001D816 31F8 F726 FEF2             		move.w	($FFFFF726).w,($FFFFFEF2).w ; buffer level y-boundary
0001D81C 31FC 0000 F72C             		move.w	#0,($FFFFF72C).w
0001D822 31FC 0720 F726             		move.w	#$720,($FFFFF726).w
0001D828 0278 07FF D00C             		andi.w	#$7FF,($FFFFD00C).w
0001D82E 0278 07FF F704             		andi.w	#$7FF,($FFFFF704).w
0001D834 0278 03FF F70C             		andi.w	#$3FF,($FFFFF70C).w
0001D83A 117C 0000 001A             		move.b	#0,$1A(a0)
0001D840 117C 0000 001C             		move.b	#0,$1C(a0)
0001D846 0C38 0010 F600             		cmpi.b	#$10,($FFFFF600).w ; is	game mode = $10	(special stage)?
0001D84C 6600                       		bne.s	Debug_Zone	; if not, branch
0001D84E 31FC 0000 F782             		move.w	#0,($FFFFF782).w ; stop	special	stage rotating
0001D854 31FC 0000 F780             		move.w	#0,($FFFFF780).w ; make	special	stage "upright"
0001D85A 7006                       		moveq	#6,d0		; use 6th debug	item list
0001D85C 6000                       		bra.s	Debug_UseList
0001D85E                            ; ===========================================================================
0001D85E                            
0001D85E                            Debug_Zone:
0001D85E 7000                       		moveq	#0,d0
0001D860 1038 FE10                  		move.b	($FFFFFE10).w,d0
0001D864                            
0001D864                            Debug_UseList:
0001D864 45F9 0000 0000             		lea	(DebugList).l,a2
0001D86A D040                       		add.w	d0,d0
0001D86C D4F2 0000                  		adda.w	(a2,d0.w),a2
0001D870 3C1A                       		move.w	(a2)+,d6
0001D872 BC38 FE06                  		cmp.b	($FFFFFE06).w,d6
0001D876 6200                       		bhi.s	loc_1CF9E
0001D878 11FC 0000 FE06             		move.b	#0,($FFFFFE06).w
0001D87E                            
0001D87E                            loc_1CF9E:
0001D87E 6100 0000                  		bsr.w	Debug_ShowItem
0001D882 11FC 000C FE0A             		move.b	#$C,($FFFFFE0A).w
0001D888 11FC 0001 FE0B             		move.b	#1,($FFFFFE0B).w
0001D88E                            
0001D88E                            Debug_Skip:				; XREF: Debug_Index
0001D88E 7006                       		moveq	#6,d0
0001D890 0C38 0010 F600             		cmpi.b	#$10,($FFFFF600).w
0001D896 6700                       		beq.s	loc_1CFBE
0001D898 7000                       		moveq	#0,d0
0001D89A 1038 FE10                  		move.b	($FFFFFE10).w,d0
0001D89E                            
0001D89E                            loc_1CFBE:
0001D89E 45F9 0000 0000             		lea	(DebugList).l,a2
0001D8A4 D040                       		add.w	d0,d0
0001D8A6 D4F2 0000                  		adda.w	(a2,d0.w),a2
0001D8AA 3C1A                       		move.w	(a2)+,d6
0001D8AC 6100 0000                  		bsr.w	Debug_Control
0001D8B0 4EF9 0000 DDC8             		jmp	DisplaySprite
0001D8B6                            
0001D8B6                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0001D8B6                            
0001D8B6                            
0001D8B6                            Debug_Control:
0001D8B6 7800                       		moveq	#0,d4
0001D8B8 323C 0001                  		move.w	#1,d1
0001D8BC 1838 F605                  		move.b	($FFFFF605).w,d4
0001D8C0 0244 000F                  		andi.w	#$F,d4		; is up/down/left/right	pressed?
0001D8C4 6600                       		bne.s	loc_1D018	; if yes, branch
0001D8C6 1038 F604                  		move.b	($FFFFF604).w,d0
0001D8CA 0240 000F                  		andi.w	#$F,d0
0001D8CE 6600                       		bne.s	loc_1D000
0001D8D0 11FC 000C FE0A             		move.b	#$C,($FFFFFE0A).w
0001D8D6 11FC 000F FE0B             		move.b	#$F,($FFFFFE0B).w
0001D8DC 6000 0000                  		bra.w	Debug_BackItem
0001D8E0                            ; ===========================================================================
0001D8E0                            
0001D8E0                            loc_1D000:
0001D8E0 5338 FE0A                  		subq.b	#1,($FFFFFE0A).w
0001D8E4 6600                       		bne.s	loc_1D01C
0001D8E6 11FC 0001 FE0A             		move.b	#1,($FFFFFE0A).w
0001D8EC 5238 FE0B                  		addq.b	#1,($FFFFFE0B).w
0001D8F0 6600                       		bne.s	loc_1D018
0001D8F2 11FC 00FF FE0B             		move.b	#-1,($FFFFFE0B).w
0001D8F8                            
0001D8F8                            loc_1D018:
0001D8F8 1838 F604                  		move.b	($FFFFF604).w,d4
0001D8FC                            
0001D8FC                            loc_1D01C:
0001D8FC 7200                       		moveq	#0,d1
0001D8FE 1238 FE0B                  		move.b	($FFFFFE0B).w,d1
0001D902 5241                       		addq.w	#1,d1
0001D904 4841                       		swap	d1
0001D906 E881                       		asr.l	#4,d1
0001D908 2428 000C                  		move.l	$C(a0),d2
0001D90C 2628 0008                  		move.l	8(a0),d3
0001D910 0804 0000                  		btst	#0,d4		; is up	being pressed?
0001D914 6700                       		beq.s	loc_1D03C	; if not, branch
0001D916 9481                       		sub.l	d1,d2
0001D918 6400                       		bcc.s	loc_1D03C
0001D91A 7400                       		moveq	#0,d2
0001D91C                            
0001D91C                            loc_1D03C:
0001D91C 0804 0001                  		btst	#1,d4		; is down being	pressed?
0001D920 6700                       		beq.s	loc_1D052	; if not, branch
0001D922 D481                       		add.l	d1,d2
0001D924 0C82 07FF 0000             		cmpi.l	#$7FF0000,d2
0001D92A 6500                       		bcs.s	loc_1D052
0001D92C 243C 07FF 0000             		move.l	#$7FF0000,d2
0001D932                            
0001D932                            loc_1D052:
0001D932 0804 0002                  		btst	#2,d4
0001D936 6700                       		beq.s	loc_1D05E
0001D938 9681                       		sub.l	d1,d3
0001D93A 6400                       		bcc.s	loc_1D05E
0001D93C 7600                       		moveq	#0,d3
0001D93E                            
0001D93E                            loc_1D05E:
0001D93E 0804 0003                  		btst	#3,d4
0001D942 6700                       		beq.s	loc_1D066
0001D944 D681                       		add.l	d1,d3
0001D946                            
0001D946                            loc_1D066:
0001D946 2142 000C                  		move.l	d2,$C(a0)
0001D94A 2143 0008                  		move.l	d3,8(a0)
0001D94E                            
0001D94E                            Debug_BackItem:
0001D94E 0838 0006 F604             		btst	#6,($FFFFF604).w ; is button A pressed?
0001D954 6700                       		beq.s	Debug_MakeItem	; if not, branch
0001D956 0838 0005 F605             		btst	#5,($FFFFF605).w ; is button C pressed?
0001D95C 6700                       		beq.s	Debug_NextItem	; if not, branch
0001D95E 5338 FE06                  		subq.b	#1,($FFFFFE06).w ; go back 1 item
0001D962 6400                       		bcc.s	Debug_NoLoop
0001D964 DD38 FE06                  		add.b	d6,($FFFFFE06).w
0001D968 6000                       		bra.s	Debug_NoLoop
0001D96A                            ; ===========================================================================
0001D96A                            
0001D96A                            Debug_NextItem:
0001D96A 0838 0006 F605             		btst	#6,($FFFFF605).w ; is button A pressed?
0001D970 6700                       		beq.s	Debug_MakeItem	; if not, branch
0001D972 5238 FE06                  		addq.b	#1,($FFFFFE06).w ; go forwards 1 item
0001D976 BC38 FE06                  		cmp.b	($FFFFFE06).w,d6
0001D97A 6200                       		bhi.s	Debug_NoLoop
0001D97C 11FC 0000 FE06             		move.b	#0,($FFFFFE06).w ; loop	back to	first item
0001D982                            
0001D982                            Debug_NoLoop:
0001D982 6000 0000                  		bra.w	Debug_ShowItem
0001D986                            ; ===========================================================================
0001D986                            
0001D986                            Debug_MakeItem:
0001D986 0838 0005 F605             		btst	#5,($FFFFF605).w ; is button C pressed?
0001D98C 6700                       		beq.s	Debug_Exit	; if not, branch
0001D98E 4EB9 0000 E24E             		jsr	SingleObjLoad
0001D994 6600                       		bne.s	Debug_Exit
0001D996 3368 0008 0008             		move.w	8(a0),8(a1)
0001D99C 3368 000C 000C             		move.w	$C(a0),$C(a1)
0001D9A2 12A8 0004                  		move.b	4(a0),0(a1)	; create object
0001D9A6 1368 0001 0001             		move.b	1(a0),1(a1)
0001D9AC 1368 0001 0022             		move.b	1(a0),$22(a1)
0001D9B2 0229 007F 0022             		andi.b	#$7F,$22(a1)
0001D9B8 7000                       		moveq	#0,d0
0001D9BA 1038 FE06                  		move.b	($FFFFFE06).w,d0
0001D9BE E748                       		lsl.w	#3,d0
0001D9C0 1372 0004 0028             		move.b	4(a2,d0.w),$28(a1)
0001D9C6 4E75                       		rts	
0001D9C8                            ; ===========================================================================
0001D9C8                            
0001D9C8                            Debug_Exit:
0001D9C8 0838 0004 F605             		btst	#4,($FFFFF605).w ; is button B pressed?
0001D9CE 6700                       		beq.s	Debug_DoNothing	; if not, branch
0001D9D0 7000                       		moveq	#0,d0
0001D9D2 31C0 FE08                  		move.w	d0,($FFFFFE08).w ; deactivate debug mode
0001D9D6 21FC 0000 0000 D004        		move.l	#Map_Sonic,($FFFFD004).w
0001D9DE 31FC 0780 D002             		move.w	#$780,($FFFFD002).w
0001D9E4 11C0 D01C                  		move.b	d0,($FFFFD01C).w
0001D9E8 3140 000A                  		move.w	d0,$A(a0)
0001D9EC 3140 000E                  		move.w	d0,$E(a0)
0001D9F0 31F8 FEF0 F72C             		move.w	($FFFFFEF0).w,($FFFFF72C).w ; restore level boundaries
0001D9F6 31F8 FEF2 F726             		move.w	($FFFFFEF2).w,($FFFFF726).w
0001D9FC 0C38 0010 F600             		cmpi.b	#$10,($FFFFF600).w ; are you in	the special stage?
0001DA02 6600                       		bne.s	Debug_DoNothing	; if not, branch
0001DA04 4278 F780                  		clr.w	($FFFFF780).w
0001DA08 31FC 0040 F782             		move.w	#$40,($FFFFF782).w ; set new level rotation speed
0001DA0E 21FC 0000 0000 D004        		move.l	#Map_Sonic,($FFFFD004).w
0001DA16 31FC 0780 D002             		move.w	#$780,($FFFFD002).w
0001DA1C 11FC 0002 D01C             		move.b	#2,($FFFFD01C).w
0001DA22 08F8 0002 D022             		bset	#2,($FFFFD022).w
0001DA28 08F8 0001 D022             		bset	#1,($FFFFD022).w
0001DA2E                            
0001DA2E                            Debug_DoNothing:
0001DA2E 4E75                       		rts	
0001DA30                            ; End of function Debug_Control
0001DA30                            
0001DA30                            
0001DA30                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0001DA30                            
0001DA30                            
0001DA30                            Debug_ShowItem:				; XREF: Debug_Main
0001DA30 7000                       		moveq	#0,d0
0001DA32 1038 FE06                  		move.b	($FFFFFE06).w,d0
0001DA36 E748                       		lsl.w	#3,d0
0001DA38 2172 0000 0004             		move.l	(a2,d0.w),4(a0)	; load mappings	for item
0001DA3E 3172 0006 0002             		move.w	6(a2,d0.w),2(a0) ; load	VRAM setting for item
0001DA44 1172 0005 001A             		move.b	5(a2,d0.w),$1A(a0) ; load frame	number for item
0001DA4A 4E75                       		rts	
0001DA4C                            ; End of function Debug_ShowItem
0001DA4C                            
0001DA4C                            ; ===========================================================================
0001DA4C                            ; ---------------------------------------------------------------------------
0001DA4C                            ; Debug	list pointers
0001DA4C                            ; ---------------------------------------------------------------------------
0001DA4C                            DebugList:
0001DA4C                            	include "_inc\Debug list pointers.asm"
0001DA4C                            ; ---------------------------------------------------------------------------
0001DA4C                            ; Debug	list pointers
0001DA4C                            ; ---------------------------------------------------------------------------
0001DA4C 0000                       	dc.w Debug_GHZ-DebugList
0001DA4E 0000                       	dc.w Debug_LZ-DebugList
0001DA50 0000                       	dc.w Debug_MZ-DebugList
0001DA52 0000                       	dc.w Debug_SLZ-DebugList
0001DA54 0000                       	dc.w Debug_SYZ-DebugList
0001DA56 0000                       	dc.w Debug_SBZ-DebugList
0001DA58 0000                       	dc.w Debug_Ending-DebugList
0001DA58 0000                       	dc.w Debug_Ending-DebugList
0001DA5A                            
0001DA5A                            ; ---------------------------------------------------------------------------
0001DA5A                            ; Debug	list - Green Hill
0001DA5A                            ; ---------------------------------------------------------------------------
0001DA5A                            Debug_GHZ:
0001DA5A                            	include "_inc\Debug list - GHZ.asm"
0001DA5A                            ; ---------------------------------------------------------------------------
0001DA5A                            ; Debug	list - Green Hill
0001DA5A                            ; ---------------------------------------------------------------------------
0001DA5A 0010                       	dc.w $10			; number of items in list
0001DA5C 2500 A626                  	dc.l Map_obj25+$25000000	; mappings pointer, object type * 10^6
0001DA60 0000 27B2                  	dc.b 0,	0, $27,	$B2		; subtype, frame, VRAM setting (2 bytes)
0001DA64 2600 AC2C                  	dc.l Map_obj26+$26000000
0001DA68 0000 0680                  	dc.b 0,	0, 6, $80
0001DA6C 1F00 9E1E                  	dc.l Map_obj1F+$1F000000
0001DA70 0000 0400                  	dc.b 0,	0, 4, 0
0001DA74 2200 A0DA                  	dc.l Map_obj22+$22000000
0001DA78 0000 0444                  	dc.b 0,	0, 4, $44
0001DA7C 2B00 B2A0                  	dc.l Map_obj2B+$2B000000
0001DA80 0000 047B                  	dc.b 0,	0, 4, $7B
0001DA84 3600 D7B0                  	dc.l Map_obj36+$36000000
0001DA88 0000 051B                  	dc.b 0,	0, 5, $1B
0001DA8C 1800 8730                  	dc.l Map_obj18+$18000000
0001DA90 0000 4000                  	dc.b 0,	0, $40,	0
0001DA94 3B00 D8D6                  	dc.l Map_obj3B+$3B000000
0001DA98 0000 63D0                  	dc.b 0,	0, $63,	$D0
0001DA9C 4000 FF62                  	dc.l Map_obj40+$40000000
0001DAA0 0000 04F0                  	dc.b 0,	0, 4, $F0
0001DAA4 4100 E4DC                  	dc.l Map_obj41+$41000000
0001DAA8 0000 0523                  	dc.b 0,	0, 5, $23
0001DAAC 4200 E702                  	dc.l Map_obj42+$42000000
0001DAB0 0000 249B                  	dc.b 0,	0, $24,	$9B
0001DAB4 4400 EA10                  	dc.l Map_obj44+$44000000
0001DAB8 0000 434C                  	dc.b 0,	0, $43,	$4C
0001DABC 1900 8830                  	dc.l Map_obj48+$19000000
0001DAC0 0000 43AA                  	dc.b 0,	0, $43,	$AA
0001DAC4 7901 79B0                  	dc.l Map_obj79+$79000000
0001DAC8 0100 07A0                  	dc.b 1,	0, 7, $A0
0001DACC 4B00 A666                  	dc.l Map_obj4B+$4B000000
0001DAD0 0000 2400                  	dc.b 0,	0, $24,	0
0001DAD4 7D01 7B00                  	dc.l Map_obj7D+$7D000000
0001DAD8 0101 84B6                  	dc.b 1,	1, $84,	$B6
0001DADC                            	even
0001DADC                            	even
0001DADC                            
0001DADC                            ; ---------------------------------------------------------------------------
0001DADC                            ; Debug	list - Labyrinth
0001DADC                            ; ---------------------------------------------------------------------------
0001DADC                            Debug_LZ:
0001DADC                            	include "_inc\Debug list - LZ.asm"
0001DADC                            ; ---------------------------------------------------------------------------
0001DADC                            ; Debug	list - Labyrinth
0001DADC                            ; ---------------------------------------------------------------------------
0001DADC 0019                       	dc.w $19
0001DADE 2500 A626                  	dc.l Map_obj25+$25000000
0001DAE2 0000 27B2                  	dc.b 0,	0, $27,	$B2
0001DAE6 2600 AC2C                  	dc.l Map_obj26+$26000000
0001DAEA 0000 0680                  	dc.b 0,	0, 6, $80
0001DAEE 4100 E4DC                  	dc.l Map_obj41+$41000000
0001DAF2 0000 0523                  	dc.b 0,	0, 5, $23
0001DAF6 2C00 B350                  	dc.l Map_obj2C+$2C000000
0001DAFA 0800 2486                  	dc.b 8,	0, $24,	$86
0001DAFE 2D00 B544                  	dc.l Map_obj2D+$2D000000
0001DB02 0002 84A6                  	dc.b 0,	2, $84,	$A6
0001DB06 1601 2736                  	dc.l Map_obj16+$16000000
0001DB0A 0000 03CC                  	dc.b 0,	0, 3, $CC
0001DB0E 1601 2736                  	dc.l Map_obj16+$16000000
0001DB12 0203 03CC                  	dc.b 2,	3, 3, $CC
0001DB16 3300 C9FC                  	dc.l Map_obj33+$33000000
0001DB1A 0000 43DE                  	dc.b 0,	0, $43,	$DE
0001DB1E 3200 C5BC                  	dc.l Map_obj32+$32000000
0001DB22 0000 0513                  	dc.b 0,	0, 5, $13
0001DB26 3600 D7B0                  	dc.l Map_obj36+$36000000
0001DB2A 0000 051B                  	dc.b 0,	0, 5, $1B
0001DB2E 5201 0858                  	dc.l Map_obj52a+$52000000
0001DB32 0400 43BC                  	dc.b 4,	0, $43,	$BC
0001DB36 6101 295E                  	dc.l Map_obj61+$61000000
0001DB3A 0100 43E6                  	dc.b 1,	0, $43,	$E6
0001DB3E 6101 295E                  	dc.l Map_obj61+$61000000
0001DB42 1301 43E6                  	dc.b $13, 1, $43, $E6
0001DB46 6101 295E                  	dc.l Map_obj61+$61000000
0001DB4A 0500 43E6                  	dc.b 5,	0, $43,	$E6
0001DB4E 6201 2AB2                  	dc.l Map_obj62+$62000000
0001DB52 0000 443E                  	dc.b 0,	0, $44,	$3E
0001DB56 6101 295E                  	dc.l Map_obj61+$61000000
0001DB5A 2702 43E6                  	dc.b $27, 2, $43, $E6
0001DB5E 6101 295E                  	dc.l Map_obj61+$61000000
0001DB62 3003 43E6                  	dc.b $30, 3, $43, $E6
0001DB66 6301 2E14                  	dc.l Map_obj63+$63000000
0001DB6A 7F00 03F6                  	dc.b $7F, 0, 3,	$F6
0001DB6E 6001 2680                  	dc.l Map_obj60+$60000000
0001DB72 0000 0467                  	dc.b 0,	0, 4, $67
0001DB76 6401 315A                  	dc.l Map_obj64+$64000000
0001DB7A 8413 8348                  	dc.b $84, $13, $83, $48
0001DB7E 6501 32E2                  	dc.l Map_obj65+$65000000
0001DB82 0202 C259                  	dc.b 2,	2, $C2,	$59
0001DB86 6501 32E2                  	dc.l Map_obj65+$65000000
0001DB8A 0909 C259                  	dc.b 9,	9, $C2,	$59
0001DB8E 0B01 1AD0                  	dc.l Map_obj0B+$B000000
0001DB92 0000 43DE                  	dc.b 0,	0, $43,	$DE
0001DB96 0C01 1BA0                  	dc.l Map_obj0C+$C000000
0001DB9A 0200 4328                  	dc.b 2,	0, $43,	$28
0001DB9E 7901 79B0                  	dc.l Map_obj79+$79000000
0001DBA2 0100 07A0                  	dc.b 1,	0, 7, $A0
0001DBA6                            	even
0001DBA6                            	even
0001DBA6                            
0001DBA6                            ; ---------------------------------------------------------------------------
0001DBA6                            ; Debug	list - Marble
0001DBA6                            ; ---------------------------------------------------------------------------
0001DBA6                            Debug_MZ:
0001DBA6                            	include "_inc\Debug list - MZ.asm"
0001DBA6                            ; ---------------------------------------------------------------------------
0001DBA6                            ; Debug	list - Marble
0001DBA6                            ; ---------------------------------------------------------------------------
0001DBA6 0012                       	dc.w $12
0001DBA8 2500 A626                  	dc.l Map_obj25+$25000000
0001DBAC 0000 27B2                  	dc.b 0,	0, $27,	$B2
0001DBB0 2600 AC2C                  	dc.l Map_obj26+$26000000
0001DBB4 0000 0680                  	dc.b 0,	0, 6, $80
0001DBB8 2200 A0DA                  	dc.l Map_obj22+$22000000
0001DBBC 0000 0444                  	dc.b 0,	0, 4, $44
0001DBC0 3600 D7B0                  	dc.l Map_obj36+$36000000
0001DBC4 0000 051B                  	dc.b 0,	0, 5, $1B
0001DBC8 4100 E4DC                  	dc.l Map_obj41+$41000000
0001DBCC 0000 0523                  	dc.b 0,	0, 5, $23
0001DBD0 1300 BA86                  	dc.l Map_obj14+$13000000
0001DBD4 0000 0345                  	dc.b 0,	0, 3, $45
0001DBD8 4600 F0C2                  	dc.l Map_obj46+$46000000
0001DBDC 0000 4000                  	dc.b 0,	0, $40,	0
0001DBE0 4C00 FA0E                  	dc.l Map_obj4C+$4C000000
0001DBE4 0000 63A8                  	dc.b 0,	0, $63,	$A8
0001DBE8 4E00 FCF2                  	dc.l Map_obj4E+$4E000000
0001DBEC 0000 63A8                  	dc.b 0,	0, $63,	$A8
0001DBF0 3300 C9FC                  	dc.l Map_obj33+$33000000
0001DBF4 0000 42B8                  	dc.b 0,	0, $42,	$B8
0001DBF8 5001 00F0                  	dc.l Map_obj50+$50000000
0001DBFC 0000 247B                  	dc.b 0,	0, $24,	$7B
0001DC00 5101 058C                  	dc.l Map_obj51+$51000000
0001DC04 0000 42B8                  	dc.b 0,	0, $42,	$B8
0001DC08 5201 0802                  	dc.l Map_obj52+$52000000
0001DC0C 0000 02B8                  	dc.b 0,	0, 2, $B8
0001DC10 5300 8DC8                  	dc.l Map_obj53+$53000000
0001DC14 0000 62B8                  	dc.b 0,	0, $62,	$B8
0001DC18 5400 F9D4                  	dc.l Map_obj54+$54000000
0001DC1C 0000 8680                  	dc.b 0,	0, $86,	$80
0001DC20 5501 09F6                  	dc.l Map_obj55+$55000000
0001DC24 0000 04B8                  	dc.b 0,	0, 4, $B8
0001DC28 7801 762A                  	dc.l Map_obj78+$78000000
0001DC2C 0000 24FF                  	dc.b 0,	0, $24,	$FF
0001DC30 7901 79B0                  	dc.l Map_obj79+$79000000
0001DC34 0100 07A0                  	dc.b 1,	0, 7, $A0
0001DC38                            	even
0001DC38                            	even
0001DC38                            
0001DC38                            ; ---------------------------------------------------------------------------
0001DC38                            ; Debug	list - Star Light
0001DC38                            ; ---------------------------------------------------------------------------
0001DC38                            Debug_SLZ:
0001DC38                            	include "_inc\Debug list - SLZ.asm"
0001DC38                            ; ---------------------------------------------------------------------------
0001DC38                            ; Debug	list - Star Light
0001DC38                            ; ---------------------------------------------------------------------------
0001DC38 000F                       	dc.w $F
0001DC3A 2500 A626                  	dc.l Map_obj25+$25000000
0001DC3E 0000 27B2                  	dc.b 0,	0, $27,	$B2
0001DC42 2600 AC2C                  	dc.l Map_obj26+$26000000
0001DC46 0000 0680                  	dc.b 0,	0, 6, $80
0001DC4A 5901 14F8                  	dc.l Map_obj59+$59000000
0001DC4E 0000 4000                  	dc.b 0,	0, $40,	0
0001DC52 5300 8DC8                  	dc.l Map_obj53+$53000000
0001DC56 0002 44E0                  	dc.b 0,	2, $44,	$E0
0001DC5A 1800 878E                  	dc.l Map_obj18b+$18000000
0001DC5E 0000 4000                  	dc.b 0,	0, $40,	0
0001DC62 5A01 1632                  	dc.l Map_obj5A+$5A000000
0001DC66 0000 4000                  	dc.b 0,	0, $40,	0
0001DC6A 5B01 17EA                  	dc.l Map_obj5B+$5B000000
0001DC6E 0000 4000                  	dc.b 0,	0, $40,	0
0001DC72 5D01 1DBA                  	dc.l Map_obj5D+$5D000000
0001DC76 0000 43A0                  	dc.b 0,	0, $43,	$A0
0001DC7A 5E01 214C                  	dc.l Map_obj5E+$5E000000
0001DC7E 0000 0374                  	dc.b 0,	0, 3, $74
0001DC82 4100 E4DC                  	dc.l Map_obj41+$41000000
0001DC86 0000 0523                  	dc.b 0,	0, 5, $23
0001DC8A 1300 BA86                  	dc.l Map_obj14+$13000000
0001DC8E 0000 0480                  	dc.b 0,	0, 4, $80
0001DC92 1C00 8ED8                  	dc.l Map_obj1C+$1C000000
0001DC96 0000 44D8                  	dc.b 0,	0, $44,	$D8
0001DC9A 5F01 23CA                  	dc.l Map_obj5F+$5F000000
0001DC9E 0000 0400                  	dc.b 0,	0, 4, 0
0001DCA2 6001 2680                  	dc.l Map_obj60+$60000000
0001DCA6 0000 2429                  	dc.b 0,	0, $24,	$29
0001DCAA 7901 79B0                  	dc.l Map_obj79+$79000000
0001DCAE 0100 07A0                  	dc.b 1,	0, 7, $A0
0001DCB2                            	even
0001DCB2                            	even
0001DCB2                            
0001DCB2                            ; ---------------------------------------------------------------------------
0001DCB2                            ; Debug	list - Spring Yard
0001DCB2                            ; ---------------------------------------------------------------------------
0001DCB2                            Debug_SYZ:
0001DCB2                            	include "_inc\Debug list - SYZ.asm"
0001DCB2                            ; ---------------------------------------------------------------------------
0001DCB2                            ; Debug	list - Spring Yard
0001DCB2                            ; ---------------------------------------------------------------------------
0001DCB2 000F                       	dc.w $F
0001DCB4 2500 A626                  	dc.l Map_obj25+$25000000
0001DCB8 0000 27B2                  	dc.b 0,	0, $27,	$B2
0001DCBC 2600 AC2C                  	dc.l Map_obj26+$26000000
0001DCC0 0000 0680                  	dc.b 0,	0, 6, $80
0001DCC4 3600 D7B0                  	dc.l Map_obj36+$36000000
0001DCC8 0000 051B                  	dc.b 0,	0, 5, $1B
0001DCCC 4100 E4DC                  	dc.l Map_obj41+$41000000
0001DCD0 0000 0523                  	dc.b 0,	0, 5, $23
0001DCD4 4300 E962                  	dc.l Map_obj43+$43000000
0001DCD8 0000 04B8                  	dc.b 0,	0, 4, $B8
0001DCDC 1200 F140                  	dc.l Map_obj12+$12000000
0001DCE0 0000 0000                  	dc.b 0,	0, 0, 0
0001DCE4 4700 F2BC                  	dc.l Map_obj47+$47000000
0001DCE8 0000 0380                  	dc.b 0,	0, 3, $80
0001DCEC 1F00 9E1E                  	dc.l Map_obj1F+$1F000000
0001DCF0 0000 0400                  	dc.b 0,	0, 4, 0
0001DCF4 2200 A0DA                  	dc.l Map_obj22+$22000000
0001DCF8 0000 0444                  	dc.b 0,	0, 4, $44
0001DCFC 5001 00F0                  	dc.l Map_obj50+$50000000
0001DD00 0000 247B                  	dc.b 0,	0, $24,	$7B
0001DD04 1800 877C                  	dc.l Map_obj18a+$18000000
0001DD08 0000 4000                  	dc.b 0,	0, $40,	0
0001DD0C 5601 0EB8                  	dc.l Map_obj56+$56000000
0001DD10 0000 4000                  	dc.b 0,	0, $40,	0
0001DD14 3200 C5BC                  	dc.l Map_obj32+$32000000
0001DD18 0000 0513                  	dc.b 0,	0, 5, $13
0001DD1C 7801 762A                  	dc.l Map_obj78+$78000000
0001DD20 0000 24FF                  	dc.b 0,	0, $24,	$FF
0001DD24 7901 79B0                  	dc.l Map_obj79+$79000000
0001DD28 0100 07A0                  	dc.b 1,	0, 7, $A0
0001DD2C                            	even
0001DD2C                            	even
0001DD2C                            
0001DD2C                            ; ---------------------------------------------------------------------------
0001DD2C                            ; Debug	list - Scrap Brain
0001DD2C                            ; ---------------------------------------------------------------------------
0001DD2C                            Debug_SBZ:
0001DD2C                            	include "_inc\Debug list - SBZ.asm"
0001DD2C                            ; ---------------------------------------------------------------------------
0001DD2C                            ; Debug	list - Scrap Brain
0001DD2C                            ; ---------------------------------------------------------------------------
0001DD2C 001D                       	dc.w $1D
0001DD2E 2500 A626                  	dc.l Map_obj25+$25000000
0001DD32 0000 27B2                  	dc.b 0,	0, $27,	$B2
0001DD36 2600 AC2C                  	dc.l Map_obj26+$26000000
0001DD3A 0000 0680                  	dc.b 0,	0, 6, $80
0001DD3E 5F01 23CA                  	dc.l Map_obj5F+$5F000000
0001DD42 0000 0400                  	dc.b 0,	0, 4, 0
0001DD46 6001 2680                  	dc.l Map_obj60+$60000000
0001DD4A 0000 0429                  	dc.b 0,	0, 4, $29
0001DD4E 7801 762A                  	dc.l Map_obj78+$78000000
0001DD52 0000 22B0                  	dc.b 0,	0, $22,	$B0
0001DD56 1501 1254                  	dc.l Map_obj15b+$15000000
0001DD5A 0702 4391                  	dc.b 7,	2, $43,	$91
0001DD5E 6701 5F3E                  	dc.l Map_obj67+$67000000
0001DD62 E000 C344                  	dc.b $E0, 0, $C3, $44
0001DD66 5201 0802                  	dc.l Map_obj52+$52000000
0001DD6A 2802 22C0                  	dc.b $28, 2, $22, $C0
0001DD6E 3200 C5BC                  	dc.l Map_obj32+$32000000
0001DD72 0000 0513                  	dc.b 0,	0, 5, $13
0001DD76 6901 6198                  	dc.l Map_obj69+$69000000
0001DD7A 0300 4492                  	dc.b 3,	0, $44,	$92
0001DD7E 6901 61F2                  	dc.l Map_obj69a+$69000000
0001DD82 8300 04DF                  	dc.b $83, 0, 4,	$DF
0001DD86 6A01 6450                  	dc.l Map_obj6A+$6A000000
0001DD8A 0200 43B5                  	dc.b 2,	0, $43,	$B5
0001DD8E 5300 8DC8                  	dc.l Map_obj53+$53000000
0001DD92 0000 43F5                  	dc.b 0,	0, $43,	$F5
0001DD96 5201 0802                  	dc.l Map_obj52+$52000000
0001DD9A 3903 4460                  	dc.b $39, 3, $44, $60
0001DD9E 6B01 6820                  	dc.l Map_obj6B+$6B000000
0001DDA2 0000 22C0                  	dc.b 0,	0, $22,	$C0
0001DDA6 2A00 906E                  	dc.l Map_obj2A+$2A000000
0001DDAA 0000 42E8                  	dc.b 0,	0, $42,	$E8
0001DDAE 6B01 6820                  	dc.l Map_obj6B+$6B000000
0001DDB2 1301 22C0                  	dc.b $13, 1, $22, $C0
0001DDB6 6A01 6450                  	dc.l Map_obj6A+$6A000000
0001DDBA 0100 43B5                  	dc.b 1,	0, $43,	$B5
0001DDBE 6B01 6820                  	dc.l Map_obj6B+$6B000000
0001DDC2 2401 22C0                  	dc.b $24, 1, $22, $C0
0001DDC6 6A01 6450                  	dc.l Map_obj6A+$6A000000
0001DDCA 0402 43B5                  	dc.b 4,	2, $43,	$B5
0001DDCE 6B01 6820                  	dc.l Map_obj6B+$6B000000
0001DDD2 3401 22C0                  	dc.b $34, 1, $22, $C0
0001DDD6 6C01 69E2                  	dc.l Map_obj6C+$6C000000
0001DDDA 0000 44C3                  	dc.b 0,	0, $44,	$C3
0001DDDE 6D00 EDB2                  	dc.l Map_obj6D+$6D000000
0001DDE2 6400 83D9                  	dc.b $64, 0, $83, $D9
0001DDE6 6D00 EDB2                  	dc.l Map_obj6D+$6D000000
0001DDEA 640B 83D9                  	dc.b $64, $B, $83, $D9
0001DDEE 6E01 6A98                  	dc.l Map_obj6E+$6E000000
0001DDF2 0400 047E                  	dc.b 4,	0, 4, $7E
0001DDF6 7001 6EEE                  	dc.l Map_obj70+$70000000
0001DDFA 0000 42F0                  	dc.b 0,	0, $42,	$F0
0001DDFE 7101 1C60                  	dc.l Map_obj71+$71000000
0001DE02 1100 8680                  	dc.b $11, 0, $86, $80
0001DE06 1E00 952C                  	dc.l Map_obj1E+$1E000000
0001DE0A 0400 2302                  	dc.b 4,	0, $23,	2
0001DE0E 7901 79B0                  	dc.l Map_obj79+$79000000
0001DE12 0100 07A0                  	dc.b 1,	0, 7, $A0
0001DE16                            	even
0001DE16                            	even
0001DE16                            
0001DE16                            ; ---------------------------------------------------------------------------
0001DE16                            ; Debug	list - ending sequence / special stage
0001DE16                            ; ---------------------------------------------------------------------------
0001DE16                            Debug_Ending:
0001DE16                            	include "_inc\Debug list - Ending and SS.asm"
0001DE16                            ; ---------------------------------------------------------------------------
0001DE16                            ; Debug	list - ending sequence / special stage
0001DE16                            ; ---------------------------------------------------------------------------
0001DE16 000D                       	dc.w $D
0001DE18 2500 A626                  	dc.l Map_obj25+$25000000
0001DE1C 0000 27B2                  	dc.b 0,	0, $27,	$B2
0001DE20 4700 F2BC                  	dc.l Map_obj47+$47000000
0001DE24 0000 0380                  	dc.b 0,	0, 3, $80
0001DE28 2800 9B50                  	dc.l Map_obj28a+$28000000
0001DE2C 0A00 05A0                  	dc.b $A, 0, 5, $A0
0001DE30 2800 9B50                  	dc.l Map_obj28a+$28000000
0001DE34 0B00 05A0                  	dc.b $B, 0, 5, $A0
0001DE38 2800 9B50                  	dc.l Map_obj28a+$28000000
0001DE3C 0C00 05A0                  	dc.b $C, 0, 5, $A0
0001DE40 2800 9B38                  	dc.l Map_obj28+$28000000
0001DE44 0D00 0553                  	dc.b $D, 0, 5, $53
0001DE48 2800 9B38                  	dc.l Map_obj28+$28000000
0001DE4C 0E00 0553                  	dc.b $E, 0, 5, $53
0001DE50 2800 9B38                  	dc.l Map_obj28+$28000000
0001DE54 0F00 0573                  	dc.b $F, 0, 5, $73
0001DE58 2800 9B38                  	dc.l Map_obj28+$28000000
0001DE5C 1000 0573                  	dc.b $10, 0, 5,	$73
0001DE60 2800 9B50                  	dc.l Map_obj28a+$28000000
0001DE64 1100 0585                  	dc.b $11, 0, 5,	$85
0001DE68 2800 9B68                  	dc.l Map_obj28b+$28000000
0001DE6C 1200 0593                  	dc.b $12, 0, 5,	$93
0001DE70 2800 9B50                  	dc.l Map_obj28a+$28000000
0001DE74 1300 0565                  	dc.b $13, 0, 5,	$65
0001DE78 2800 9B68                  	dc.l Map_obj28b+$28000000
0001DE7C 1400 05B3                  	dc.b $14, 0, 5,	$B3
0001DE80                            	even
0001DE80                            	even
0001DE80                            
0001DE80                            ; ---------------------------------------------------------------------------
0001DE80                            ; Main level load blocks
0001DE80                            ; ---------------------------------------------------------------------------
0001DE80                            MainLoadBlocks:
0001DE80                            	include "_inc\Main level load blocks.asm"
0001DE80                            ; ---------------------------------------------------------------------------
0001DE80                            ; Main level load blocks
0001DE80                            ;
0001DE80                            ; ===FORMAT===
0001DE80                            ; level	patterns + (1st	PLC num	* 10^6)
0001DE80                            ; 16x16	mappings + (2nd	PLC num	* 10^6)
0001DE80                            ; 256x256 mappings
0001DE80                            ; blank, music (unused), pal index (unused), pal index
0001DE80                            ; ---------------------------------------------------------------------------
0001DE80 0000 0000                  	dc.l Nem_GHZ_2nd+$4000000
0001DE84 0000 0000                  	dc.l Blk16_GHZ+$5000000
0001DE88 0000 0000                  	dc.l Blk256_GHZ
0001DE8C 0081 0404                  	dc.b 0,	$81, 4,	4
0001DE90 0000 0000                  	dc.l Nem_LZ+$6000000
0001DE94 0000 0000                  	dc.l Blk16_LZ+$7000000
0001DE98 0000 0000                  	dc.l Blk256_LZ
0001DE9C 0082 0505                  	dc.b 0,	$82, 5,	5
0001DEA0 0000 0000                  	dc.l Nem_MZ+$8000000
0001DEA4 0000 0000                  	dc.l Blk16_MZ+$9000000
0001DEA8 0000 0000                  	dc.l Blk256_MZ
0001DEAC 0083 0606                  	dc.b 0,	$83, 6,	6
0001DEB0 0000 0000                  	dc.l Nem_SLZ+$A000000
0001DEB4 0000 0000                  	dc.l Blk16_SLZ+$B000000
0001DEB8 0000 0000                  	dc.l Blk256_SLZ
0001DEBC 0084 0707                  	dc.b 0,	$84, 7,	7
0001DEC0 0000 0000                  	dc.l Nem_SYZ+$C000000
0001DEC4 0000 0000                  	dc.l Blk16_SYZ+$D000000
0001DEC8 0000 0000                  	dc.l Blk256_SYZ
0001DECC 0085 0808                  	dc.b 0,	$85, 8,	8
0001DED0 0000 0000                  	dc.l Nem_SBZ+$E000000
0001DED4 0000 0000                  	dc.l Blk16_SBZ+$F000000
0001DED8 0000 0000                  	dc.l Blk256_SBZ
0001DEDC 0086 0909                  	dc.b 0,	$86, 9,	9
0001DEE0 0000 0000                  	dc.l Nem_GHZ_2nd	; main load block for ending
0001DEE4 0000 0000                  	dc.l Blk16_GHZ
0001DEE8 0000 0000                  	dc.l Blk256_GHZ
0001DEEC 0086 1313                  	dc.b 0,	$86, $13, $13
0001DEF0                            	even
0001DEF0                            	even
0001DEF0                            
0001DEF0                            ; ---------------------------------------------------------------------------
0001DEF0                            ; Pattern load cues
0001DEF0                            ; ---------------------------------------------------------------------------
0001DEF0                            ArtLoadCues:
0001DEF0                            	include "_inc\Pattern load cues.asm"
0001DEF0                            ; ---------------------------------------------------------------------------
0001DEF0                            ; Pattern load cues - index
0001DEF0                            ; ---------------------------------------------------------------------------
0001DEF0 0000 0000                  	dc.w PLC_Main-ArtLoadCues, PLC_Main2-ArtLoadCues
0001DEF4 0000 0000                  	dc.w PLC_Explode-ArtLoadCues, PLC_GameOver-ArtLoadCues
0001DEF8 0000 0000                  	dc.w PLC_GHZ-ArtLoadCues, PLC_GHZ2-ArtLoadCues
0001DEFC 0000 0000                  	dc.w PLC_LZ-ArtLoadCues, PLC_LZ2-ArtLoadCues
0001DF00 0000 0000                  	dc.w PLC_MZ-ArtLoadCues, PLC_MZ2-ArtLoadCues
0001DF04 0000 0000                  	dc.w PLC_SLZ-ArtLoadCues, PLC_SLZ2-ArtLoadCues
0001DF08 0000 0000                  	dc.w PLC_SYZ-ArtLoadCues, PLC_SYZ2-ArtLoadCues
0001DF0C 0000 0000                  	dc.w PLC_SBZ-ArtLoadCues, PLC_SBZ2-ArtLoadCues
0001DF10 0000 0000                  	dc.w PLC_TitleCard-ArtLoadCues,	PLC_Boss-ArtLoadCues
0001DF14 0000 0000                  	dc.w PLC_Signpost-ArtLoadCues, PLC_Warp-ArtLoadCues
0001DF18 0000 0000                  	dc.w PLC_SpeStage-ArtLoadCues, PLC_GHZAnimals-ArtLoadCues
0001DF1C 0000 0000                  	dc.w PLC_LZAnimals-ArtLoadCues,	PLC_MZAnimals-ArtLoadCues
0001DF20 0000 0000                  	dc.w PLC_SLZAnimals-ArtLoadCues, PLC_SYZAnimals-ArtLoadCues
0001DF24 0000 0000                  	dc.w PLC_SBZAnimals-ArtLoadCues, PLC_SpeStResult-ArtLoadCues
0001DF28 0000 0000                  	dc.w PLC_Ending-ArtLoadCues, PLC_TryAgain-ArtLoadCues
0001DF2C 0000 0000                  	dc.w PLC_EggmanSBZ2-ArtLoadCues, PLC_FZBoss-ArtLoadCues
0001DF30 0000                       	dc.w Plc_TetoBoss-ArtLoadCues
0001DF32                            ; ---------------------------------------------------------------------------
0001DF32                            ; Pattern load cues - standard block 1
0001DF32                            ; ---------------------------------------------------------------------------
0001DF32 0004                       PLC_Main:	dc.w 4
0001DF34 0000 0000                  		dc.l Nem_Lamp		; lamppost
0001DF38 F400                       		dc.w $F400
0001DF3A 0000 0000                  		dc.l Nem_Hud		; HUD
0001DF3E D940                       		dc.w $D940
0001DF40 0000 0000                  		dc.l Nem_Lives		; lives	counter
0001DF44 FA80                       		dc.w $FA80
0001DF46 0000 0000                  		dc.l Nem_Ring		; rings
0001DF4A F640                       		dc.w $F640
0001DF4C 0000 0000                  		dc.l Nem_Points		; points from enemy
0001DF50 F2E0                       		dc.w $F2E0
0001DF52                            ; ---------------------------------------------------------------------------
0001DF52                            ; Pattern load cues - standard block 2
0001DF52                            ; ---------------------------------------------------------------------------
0001DF52 0002                       PLC_Main2:	dc.w 2
0001DF54 0000 0000                  		dc.l Nem_Monitors	; monitors
0001DF58 D000                       		dc.w $D000
0001DF5A 0000 0000                  		dc.l Nem_Shield		; shield
0001DF5E A820                       		dc.w $A820
0001DF60 0000 0000                  		dc.l Nem_Stars		; invincibility	stars
0001DF64 AB80                       		dc.w $AB80
0001DF66                            ; ---------------------------------------------------------------------------
0001DF66                            ; Pattern load cues - explosion
0001DF66                            ; ---------------------------------------------------------------------------
0001DF66 0000                       PLC_Explode:	dc.w 0
0001DF68 0000 0000                  		dc.l Nem_Explode	; explosion
0001DF6C B400                       		dc.w $B400
0001DF6E                            ; ---------------------------------------------------------------------------
0001DF6E                            ; Pattern load cues - game/time	over
0001DF6E                            ; ---------------------------------------------------------------------------
0001DF6E 0000                       PLC_GameOver:	dc.w 0
0001DF70 0000 0000                  		dc.l Nem_GameOver	; game/time over
0001DF74 ABC0                       		dc.w $ABC0
0001DF76                            ; ---------------------------------------------------------------------------
0001DF76                            ; Pattern load cues - Green Hill
0001DF76                            ; ---------------------------------------------------------------------------
0001DF76 000B                       PLC_GHZ:	dc.w $B
0001DF78 0000 0000                  		dc.l Nem_GHZ_1st	; GHZ main patterns
0001DF7C 0000                       		dc.w 0
0001DF7E 0000 0000                  		dc.l Nem_GHZ_2nd	; GHZ secondary	patterns
0001DF82 39A0                       		dc.w $39A0
0001DF84 0000 0000                  		dc.l Nem_Stalk		; flower stalk
0001DF88 6B00                       		dc.w $6B00
0001DF8A 0000 0000                  		dc.l Nem_PplRock	; purple rock
0001DF8E 7A00                       		dc.w $7A00
0001DF90 0000 0000                  		dc.l Nem_Crabmeat	; crabmeat enemy
0001DF94 8000                       		dc.w $8000
0001DF96 0000 0000                  		dc.l Nem_Buzz		; buzz bomber enemy
0001DF9A 8880                       		dc.w $8880
0001DF9C 0000 0000                  		dc.l Nem_Chopper	; chopper enemy
0001DFA0 8F60                       		dc.w $8F60
0001DFA2 0000 0000                  		dc.l Nem_Newtron	; newtron enemy
0001DFA6 9360                       		dc.w $9360
0001DFA8 0000 0000                  		dc.l Nem_Motobug	; motobug enemy
0001DFAC 9E00                       		dc.w $9E00
0001DFAE 0000 0000                  		dc.l Nem_Spikes		; spikes
0001DFB2 A360                       		dc.w $A360
0001DFB4 0000 0000                  		dc.l Nem_HSpring	; horizontal spring
0001DFB8 A460                       		dc.w $A460
0001DFBA 0000 0000                  		dc.l Nem_VSpring	; vertical spring
0001DFBE A660                       		dc.w $A660
0001DFC0 0005                       PLC_GHZ2:	dc.w 5
0001DFC2 0000 0000                  		dc.l Nem_Swing		; swinging platform
0001DFC6 7000                       		dc.w $7000
0001DFC8 0000 0000                  		dc.l Nem_Bridge		; bridge
0001DFCC 71C0                       		dc.w $71C0
0001DFCE 0000 0000                  		dc.l Nem_SpikePole	; spiked pole
0001DFD2 7300                       		dc.w $7300
0001DFD4 0000 0000                  		dc.l Nem_Ball		; giant	ball
0001DFD8 7540                       		dc.w $7540
0001DFDA 0000 0000                  		dc.l Nem_GhzWall1	; breakable wall
0001DFDE A1E0                       		dc.w $A1E0
0001DFE0 0000 0000                  		dc.l Nem_GhzWall2	; normal wall
0001DFE4 6980                       		dc.w $6980
0001DFE6                            ; ---------------------------------------------------------------------------
0001DFE6                            ; Pattern load cues - Labyrinth
0001DFE6                            ; ---------------------------------------------------------------------------
0001DFE6 000B                       PLC_LZ:		dc.w $B
0001DFE8 0000 0000                  		dc.l Nem_LZ		; LZ main patterns
0001DFEC 0000                       		dc.w 0
0001DFEE 0000 0000                  		dc.l Nem_LzBlock1	; block
0001DFF2 3C00                       		dc.w $3C00
0001DFF4 0000 0000                  		dc.l Nem_LzBlock2	; blocks
0001DFF8 3E00                       		dc.w $3E00
0001DFFA 0000 0000                  		dc.l Nem_Splash		; waterfalls and splash
0001DFFE 4B20                       		dc.w $4B20
0001E000 0000 0000                  		dc.l Nem_Water		; water	surface
0001E004 6000                       		dc.w $6000
0001E006 0000 0000                  		dc.l Nem_LzSpikeBall	; spiked ball
0001E00A 6200                       		dc.w $6200
0001E00C 0000 0000                  		dc.l Nem_FlapDoor	; flapping door
0001E010 6500                       		dc.w $6500
0001E012 0000 0000                  		dc.l Nem_Bubbles	; bubbles and numbers
0001E016 6900                       		dc.w $6900
0001E018 0000 0000                  		dc.l Nem_LzBlock3	; block
0001E01C 7780                       		dc.w $7780
0001E01E 0000 0000                  		dc.l Nem_LzDoor1	; vertical door
0001E022 7880                       		dc.w $7880
0001E024 0000 0000                  		dc.l Nem_Harpoon	; harpoon
0001E028 7980                       		dc.w $7980
0001E02A 0000 0000                  		dc.l Nem_Burrobot	; burrobot enemy
0001E02E 94C0                       		dc.w $94C0
0001E030 000C                       PLC_LZ2:	dc.w $C
0001E032 0000 0000                  		dc.l Nem_LzPole		; pole that breaks
0001E036 7BC0                       		dc.w $7BC0
0001E038 0000 0000                  		dc.l Nem_LzDoor2	; large	horizontal door
0001E03C 7CC0                       		dc.w $7CC0
0001E03E 0000 0000                  		dc.l Nem_LzWheel	; wheel
0001E042 7EC0                       		dc.w $7EC0
0001E044 0000 0000                  		dc.l Nem_Gargoyle	; gargoyle head
0001E048 5D20                       		dc.w $5D20
0001E04A 0000 0000                  		dc.l Nem_LzSonic	; Sonic	holding	his breath
0001E04E 8800                       		dc.w $8800
0001E050 0000 0000                  		dc.l Nem_LzPlatfm	; rising platform
0001E054 89E0                       		dc.w $89E0
0001E056 0000 0000                  		dc.l Nem_Orbinaut	; orbinaut enemy
0001E05A 8CE0                       		dc.w $8CE0
0001E05C 0000 0000                  		dc.l Nem_Jaws		; jaws enemy
0001E060 90C0                       		dc.w $90C0
0001E062 0000 0000                  		dc.l Nem_LzSwitch	; switch
0001E066 A1E0                       		dc.w $A1E0
0001E068 0000 0000                  		dc.l Nem_Cork		; cork block
0001E06C A000                       		dc.w $A000
0001E06E 0000 0000                  		dc.l Nem_Spikes		; spikes
0001E072 A360                       		dc.w $A360
0001E074 0000 0000                  		dc.l Nem_HSpring	; horizontal spring
0001E078 A460                       		dc.w $A460
0001E07A 0000 0000                  		dc.l Nem_VSpring	; vertical spring
0001E07E A660                       		dc.w $A660
0001E080                            ; ---------------------------------------------------------------------------
0001E080                            ; Pattern load cues - Marble
0001E080                            ; ---------------------------------------------------------------------------
0001E080 0009                       PLC_MZ:		dc.w 9
0001E082 0000 0000                  		dc.l Nem_MZ		; MZ main patterns
0001E086 0000                       		dc.w 0
0001E088 0000 0000                  		dc.l Nem_MzMetal	; metal	blocks
0001E08C 6000                       		dc.w $6000
0001E08E 0000 0000                  		dc.l Nem_MzFire		; fireballs
0001E092 68A0                       		dc.w $68A0
0001E094 0000 0000                  		dc.l Nem_Swing		; swinging platform
0001E098 7000                       		dc.w $7000
0001E09A 0000 0000                  		dc.l Nem_MzGlass	; green	glassy block
0001E09E 71C0                       		dc.w $71C0
0001E0A0 0000 0000                  		dc.l Nem_Lava		; lava
0001E0A4 7500                       		dc.w $7500
0001E0A6 0000 0000                  		dc.l Nem_Buzz		; buzz bomber enemy
0001E0AA 8880                       		dc.w $8880
0001E0AC 0000 0000                  		dc.l Nem_Yadrin		; yadrin enemy
0001E0B0 8F60                       		dc.w $8F60
0001E0B2 0000 0000                  		dc.l Nem_Basaran	; basaran enemy
0001E0B6 9700                       		dc.w $9700
0001E0B8 0000 0000                  		dc.l Nem_Cater		; caterkiller enemy
0001E0BC 9FE0                       		dc.w $9FE0
0001E0BE 0004                       PLC_MZ2:	dc.w 4
0001E0C0 0000 0000                  		dc.l Nem_MzSwitch	; switch
0001E0C4 A260                       		dc.w $A260
0001E0C6 0000 0000                  		dc.l Nem_Spikes		; spikes
0001E0CA A360                       		dc.w $A360
0001E0CC 0000 0000                  		dc.l Nem_HSpring	; horizontal spring
0001E0D0 A460                       		dc.w $A460
0001E0D2 0000 0000                  		dc.l Nem_VSpring	; vertical spring
0001E0D6 A660                       		dc.w $A660
0001E0D8 0000 0000                  		dc.l Nem_MzBlock	; green	stone block
0001E0DC 5700                       		dc.w $5700
0001E0DE                            ; ---------------------------------------------------------------------------
0001E0DE                            ; Pattern load cues - Star Light
0001E0DE                            ; ---------------------------------------------------------------------------
0001E0DE 0008                       PLC_SLZ:	dc.w 8
0001E0E0 0000 0000                  		dc.l Nem_SLZ		; SLZ main patterns
0001E0E4 0000                       		dc.w 0
0001E0E6 0000 0000                  		dc.l Nem_Bomb		; bomb enemy
0001E0EA 8000                       		dc.w $8000
0001E0EC 0000 0000                  		dc.l Nem_Orbinaut	; orbinaut enemy
0001E0F0 8520                       		dc.w $8520
0001E0F2 0000 0000                  		dc.l Nem_MzFire		; fireballs
0001E0F6 9000                       		dc.w $9000
0001E0F8 0000 0000                  		dc.l Nem_SlzBlock	; block
0001E0FC 9C00                       		dc.w $9C00
0001E0FE 0000 0000                  		dc.l Nem_SlzWall	; breakable wall
0001E102 A260                       		dc.w $A260
0001E104 0000 0000                  		dc.l Nem_Spikes		; spikes
0001E108 A360                       		dc.w $A360
0001E10A 0000 0000                  		dc.l Nem_HSpring	; horizontal spring
0001E10E A460                       		dc.w $A460
0001E110 0000 0000                  		dc.l Nem_VSpring	; vertical spring
0001E114 A660                       		dc.w $A660
0001E116 0005                       PLC_SLZ2:	dc.w 5
0001E118 0000 0000                  		dc.l Nem_Seesaw		; seesaw
0001E11C 6E80                       		dc.w $6E80
0001E11E 0000 0000                  		dc.l Nem_Fan		; fan
0001E122 7400                       		dc.w $7400
0001E124 0000 0000                  		dc.l Nem_Pylon		; foreground pylon
0001E128 7980                       		dc.w $7980
0001E12A 0000 0000                  		dc.l Nem_SlzSwing	; swinging platform
0001E12E 7B80                       		dc.w $7B80
0001E130 0000 0000                  		dc.l Nem_SlzCannon	; fireball launcher
0001E134 9B00                       		dc.w $9B00
0001E136 0000 0000                  		dc.l Nem_SlzSpike	; spikeball
0001E13A 9E00                       		dc.w $9E00
0001E13C                            ; ---------------------------------------------------------------------------
0001E13C                            ; Pattern load cues - Spring Yard
0001E13C                            ; ---------------------------------------------------------------------------
0001E13C 0004                       PLC_SYZ:	dc.w 4
0001E13E 0000 0000                  		dc.l Nem_SYZ		; SYZ main patterns
0001E142 0000                       		dc.w 0
0001E144 0000 0000                  		dc.l Nem_Crabmeat	; crabmeat enemy
0001E148 8000                       		dc.w $8000
0001E14A 0000 0000                  		dc.l Nem_Buzz		; buzz bomber enemy
0001E14E 8880                       		dc.w $8880
0001E150 0000 0000                  		dc.l Nem_Yadrin		; yadrin enemy
0001E154 8F60                       		dc.w $8F60
0001E156 0000 0000                  		dc.l Nem_Roller		; roller enemy
0001E15A 9700                       		dc.w $9700
0001E15C 0007                       PLC_SYZ2:	dc.w 7
0001E15E 0000 0000                  		dc.l Nem_Bumper		; bumper
0001E162 7000                       		dc.w $7000
0001E164 0000 0000                  		dc.l Nem_SyzSpike1	; large	spikeball
0001E168 72C0                       		dc.w $72C0
0001E16A 0000 0000                  		dc.l Nem_SyzSpike2	; small	spikeball
0001E16E 7740                       		dc.w $7740
0001E170 0000 0000                  		dc.l Nem_Cater		; caterkiller enemy
0001E174 9FE0                       		dc.w $9FE0
0001E176 0000 0000                  		dc.l Nem_LzSwitch	; switch
0001E17A A1E0                       		dc.w $A1E0
0001E17C 0000 0000                  		dc.l Nem_Spikes		; spikes
0001E180 A360                       		dc.w $A360
0001E182 0000 0000                  		dc.l Nem_HSpring	; horizontal spring
0001E186 A460                       		dc.w $A460
0001E188 0000 0000                  		dc.l Nem_VSpring	; vertical spring
0001E18C A660                       		dc.w $A660
0001E18E                            ; ---------------------------------------------------------------------------
0001E18E                            ; Pattern load cues - Scrap Brain
0001E18E                            ; ---------------------------------------------------------------------------
0001E18E 000B                       PLC_SBZ:	dc.w $B
0001E190 0000 0000                  		dc.l Nem_SBZ		; SBZ main patterns
0001E194 0000                       		dc.w 0
0001E196 0000 0000                  		dc.l Nem_Stomper	; moving platform and stomper
0001E19A 5800                       		dc.w $5800
0001E19C 0000 0000                  		dc.l Nem_SbzDoor1	; door
0001E1A0 5D00                       		dc.w $5D00
0001E1A2 0000 0000                  		dc.l Nem_Girder		; girder
0001E1A6 5E00                       		dc.w $5E00
0001E1A8 0000 0000                  		dc.l Nem_BallHog	; ball hog enemy
0001E1AC 6040                       		dc.w $6040
0001E1AE 0000 0000                  		dc.l Nem_SbzWheel1	; spot on large	wheel
0001E1B2 6880                       		dc.w $6880
0001E1B4 0000 0000                  		dc.l Nem_SbzWheel2	; wheel	that grabs Sonic
0001E1B8 6900                       		dc.w $6900
0001E1BA 0000 0000                  		dc.l Nem_SyzSpike1	; large	spikeball
0001E1BE 7220                       		dc.w $7220
0001E1C0 0000 0000                  		dc.l Nem_Cutter		; pizza	cutter
0001E1C4 76A0                       		dc.w $76A0
0001E1C6 0000 0000                  		dc.l Nem_FlamePipe	; flaming pipe
0001E1CA 7B20                       		dc.w $7B20
0001E1CC 0000 0000                  		dc.l Nem_SbzFloor	; collapsing floor
0001E1D0 7EA0                       		dc.w $7EA0
0001E1D2 0000 0000                  		dc.l Nem_SbzBlock	; vanishing block
0001E1D6 9860                       		dc.w $9860
0001E1D8 000C                       PLC_SBZ2:	dc.w $C
0001E1DA 0000 0000                  		dc.l Nem_Cater		; caterkiller enemy
0001E1DE 5600                       		dc.w $5600
0001E1E0 0000 0000                  		dc.l Nem_Bomb		; bomb enemy
0001E1E4 8000                       		dc.w $8000
0001E1E6 0000 0000                  		dc.l Nem_Orbinaut	; orbinaut enemy
0001E1EA 8520                       		dc.w $8520
0001E1EC 0000 0000                  		dc.l Nem_SlideFloor	; floor	that slides away
0001E1F0 8C00                       		dc.w $8C00
0001E1F2 0000 0000                  		dc.l Nem_SbzDoor2	; horizontal door
0001E1F6 8DE0                       		dc.w $8DE0
0001E1F8 0000 0000                  		dc.l Nem_Electric	; electric orb
0001E1FC 8FC0                       		dc.w $8FC0
0001E1FE 0000 0000                  		dc.l Nem_TrapDoor	; trapdoor
0001E202 9240                       		dc.w $9240
0001E204 0000 0000                  		dc.l Nem_SbzFloor	; collapsing floor
0001E208 7F20                       		dc.w $7F20
0001E20A 0000 0000                  		dc.l Nem_SpinPform	; small	spinning platform
0001E20E 9BE0                       		dc.w $9BE0
0001E210 0000 0000                  		dc.l Nem_LzSwitch	; switch
0001E214 A1E0                       		dc.w $A1E0
0001E216 0000 0000                  		dc.l Nem_Spikes		; spikes
0001E21A A360                       		dc.w $A360
0001E21C 0000 0000                  		dc.l Nem_HSpring	; horizontal spring
0001E220 A460                       		dc.w $A460
0001E222 0000 0000                  		dc.l Nem_VSpring	; vertical spring
0001E226 A660                       		dc.w $A660
0001E228                            ; ---------------------------------------------------------------------------
0001E228                            ; Pattern load cues - title card
0001E228                            ; ---------------------------------------------------------------------------
0001E228 0000                       PLC_TitleCard:	dc.w 0
0001E22A 0000 0000                  		dc.l Nem_TitleCard
0001E22E B000                       		dc.w $B000
0001E230                            ; ---------------------------------------------------------------------------
0001E230                            ; Pattern load cues - act 3 boss
0001E230                            ; ---------------------------------------------------------------------------
0001E230 0005                       PLC_Boss:	dc.w 5
0001E232 0000 0000                  		dc.l Nem_Eggman		; Eggman main patterns
0001E236 8000                       		dc.w $8000
0001E238 0000 0000                  		dc.l Nem_Weapons	; Eggman's weapons
0001E23C 8D80                       		dc.w $8D80
0001E23E 0000 0000                  		dc.l Nem_Prison		; prison capsule
0001E242 93A0                       		dc.w $93A0
0001E244 0000 0000                  		dc.l Nem_Bomb		; bomb enemy (gets overwritten)
0001E248 A300                       		dc.w $A300
0001E24A 0000 0000                  		dc.l Nem_SlzSpike	; spikeball (SLZ boss)
0001E24E A300                       		dc.w $A300
0001E250 0000 0000                  		dc.l Nem_Exhaust	; exhaust flame
0001E254 A540                       		dc.w $A540
0001E256                            ; ---------------------------------------------------------------------------
0001E256                            ; Pattern load cues - act 1/2 signpost
0001E256                            ; ---------------------------------------------------------------------------
0001E256 0002                       PLC_Signpost:	dc.w 2
0001E258 0000 0000                  		dc.l Nem_SignPost	; signpost
0001E25C D000                       		dc.w $D000
0001E25E 0000 0000                  		dc.l Nem_Bonus		; hidden bonus points
0001E262 96C0                       		dc.w $96C0
0001E264 0000 0000                  		dc.l Nem_BigFlash	; giant	ring flash effect
0001E268 8C40                       		dc.w $8C40
0001E26A                            ; ---------------------------------------------------------------------------
0001E26A                            ; Pattern load cues - beta special stage warp effect
0001E26A                            ; ---------------------------------------------------------------------------
0001E26A 0000                       PLC_Warp:	dc.w 0
0001E26C 0000 0000                  		dc.l Nem_Warp
0001E270 A820                       		dc.w $A820
0001E272                            ; ---------------------------------------------------------------------------
0001E272                            ; Pattern load cues - special stage
0001E272                            ; ---------------------------------------------------------------------------
0001E272 0010                       PLC_SpeStage:	dc.w $10
0001E274 0000 0000                  		dc.l Nem_SSBgCloud	; bubble and cloud background
0001E278 0000                       		dc.w 0
0001E27A 0000 0000                  		dc.l Nem_SSBgFish	; bird and fish	background
0001E27E 0A20                       		dc.w $A20
0001E280 0000 0000                  		dc.l Nem_SSWalls	; walls
0001E284 2840                       		dc.w $2840
0001E286 0000 0000                  		dc.l Nem_Bumper		; bumper
0001E28A 4760                       		dc.w $4760
0001E28C 0000 0000                  		dc.l Nem_SSGOAL		; GOAL block
0001E290 4A20                       		dc.w $4A20
0001E292 0000 0000                  		dc.l Nem_SSUpDown	; UP and DOWN blocks
0001E296 4C60                       		dc.w $4C60
0001E298 0000 0000                  		dc.l Nem_SSRBlock	; R block
0001E29C 5E00                       		dc.w $5E00
0001E29E 0000 0000                  		dc.l Nem_SS1UpBlock	; 1UP block
0001E2A2 6E00                       		dc.w $6E00
0001E2A4 0000 0000                  		dc.l Nem_SSEmStars	; emerald collection stars
0001E2A8 7E00                       		dc.w $7E00
0001E2AA 0000 0000                  		dc.l Nem_SSRedWhite	; red and white	block
0001E2AE 8E00                       		dc.w $8E00
0001E2B0 0000 0000                  		dc.l Nem_SSGhost	; ghost	block
0001E2B4 9E00                       		dc.w $9E00
0001E2B6 0000 0000                  		dc.l Nem_SSWBlock	; W block
0001E2BA AE00                       		dc.w $AE00
0001E2BC 0000 0000                  		dc.l Nem_SSGlass	; glass	block
0001E2C0 BE00                       		dc.w $BE00
0001E2C2 0000 0000                  		dc.l Nem_SSEmerald	; emeralds
0001E2C6 EE00                       		dc.w $EE00
0001E2C8 0000 0000                  		dc.l Nem_SSZone1	; ZONE 1 block
0001E2CC F2E0                       		dc.w $F2E0
0001E2CE 0000 0000                  		dc.l Nem_SSZone2	; ZONE 2 block
0001E2D2 F400                       		dc.w $F400
0001E2D4 0000 0000                  		dc.l Nem_SSZone3	; ZONE 3 block
0001E2D8 F520                       		dc.w $F520
0001E2DA 0000 0000                  		dc.l Nem_SSZone4	; ZONE 4 block
0001E2DE F2E0                       		dc.w $F2E0
0001E2E0 0000 0000                  		dc.l Nem_SSZone5	; ZONE 5 block
0001E2E4 F400                       		dc.w $F400
0001E2E6 0000 0000                  		dc.l Nem_SSZone6	; ZONE 6 block
0001E2EA F520                       		dc.w $F520
0001E2EC                            ; ---------------------------------------------------------------------------
0001E2EC                            ; Pattern load cues - GHZ animals
0001E2EC                            ; ---------------------------------------------------------------------------
0001E2EC 0001                       PLC_GHZAnimals:	dc.w 1
0001E2EE 0000 0000                  		dc.l Nem_Rabbit		; rabbit
0001E2F2 B000                       		dc.w $B000
0001E2F4 0000 0000                  		dc.l Nem_Flicky		; flicky
0001E2F8 B240                       		dc.w $B240
0001E2FA                            ; ---------------------------------------------------------------------------
0001E2FA                            ; Pattern load cues - LZ animals
0001E2FA                            ; ---------------------------------------------------------------------------
0001E2FA 0001                       PLC_LZAnimals:	dc.w 1
0001E2FC 0000 0000                  		dc.l Nem_BlackBird	; blackbird
0001E300 B000                       		dc.w $B000
0001E302 0000 0000                  		dc.l Nem_Seal		; seal
0001E306 B240                       		dc.w $B240
0001E308                            ; ---------------------------------------------------------------------------
0001E308                            ; Pattern load cues - MZ animals
0001E308                            ; ---------------------------------------------------------------------------
0001E308 0001                       PLC_MZAnimals:	dc.w 1
0001E30A 0000 0000                  		dc.l Nem_Squirrel	; squirrel
0001E30E B000                       		dc.w $B000
0001E310 0000 0000                  		dc.l Nem_Seal		; seal
0001E314 B240                       		dc.w $B240
0001E316                            ; ---------------------------------------------------------------------------
0001E316                            ; Pattern load cues - SLZ animals
0001E316                            ; ---------------------------------------------------------------------------
0001E316 0001                       PLC_SLZAnimals:	dc.w 1
0001E318 0000 0000                  		dc.l Nem_Pig		; pig
0001E31C B000                       		dc.w $B000
0001E31E 0000 0000                  		dc.l Nem_Flicky		; flicky
0001E322 B240                       		dc.w $B240
0001E324                            ; ---------------------------------------------------------------------------
0001E324                            ; Pattern load cues - SYZ animals
0001E324                            ; ---------------------------------------------------------------------------
0001E324 0001                       PLC_SYZAnimals:	dc.w 1
0001E326 0000 0000                  		dc.l Nem_Pig		; pig
0001E32A B000                       		dc.w $B000
0001E32C 0000 0000                  		dc.l Nem_Chicken	; chicken
0001E330 B240                       		dc.w $B240
0001E332                            ; ---------------------------------------------------------------------------
0001E332                            ; Pattern load cues - SBZ animals
0001E332                            ; ---------------------------------------------------------------------------
0001E332 0001                       PLC_SBZAnimals:	dc.w 1
0001E334 0000 0000                  		dc.l Nem_Rabbit		; rabbit
0001E338 B000                       		dc.w $B000
0001E33A 0000 0000                  		dc.l Nem_Chicken	; chicken
0001E33E B240                       		dc.w $B240
0001E340                            ; ---------------------------------------------------------------------------
0001E340                            ; Pattern load cues - special stage results screen
0001E340                            ; ---------------------------------------------------------------------------
0001E340 0001                       PLC_SpeStResult:dc.w 1
0001E342 0000 0000                  		dc.l Nem_ResultEm	; emeralds
0001E346 A820                       		dc.w $A820
0001E348 0000 0000                  		dc.l Nem_MiniSonic	; mini Sonic
0001E34C AA20                       		dc.w $AA20
0001E34E                            ; ---------------------------------------------------------------------------
0001E34E                            ; Pattern load cues - ending sequence
0001E34E                            ; ---------------------------------------------------------------------------
0001E34E 000E                       PLC_Ending:	dc.w $E
0001E350 0000 0000                  		dc.l Nem_GHZ_1st	; GHZ main patterns
0001E354 0000                       		dc.w 0
0001E356 0000 0000                  		dc.l Nem_GHZ_2nd	; GHZ secondary	patterns
0001E35A 39A0                       		dc.w $39A0
0001E35C 0000 0000                  		dc.l Nem_Stalk		; flower stalk
0001E360 6B00                       		dc.w $6B00
0001E362 0000 0000                  		dc.l Nem_EndFlower	; flowers
0001E366 7400                       		dc.w $7400
0001E368 0000 0000                  		dc.l Nem_EndEm		; emeralds
0001E36C 78A0                       		dc.w $78A0
0001E36E 0000 0000                  		dc.l Nem_EndSonic	; Sonic
0001E372 7C20                       		dc.w $7C20
0001E374 0000 0000                  		dc.l Nem_EndEggman	; Eggman's death (unused)
0001E378 A480                       		dc.w $A480
0001E37A 0000 0000                  		dc.l Nem_Rabbit		; rabbit
0001E37E AA60                       		dc.w $AA60
0001E380 0000 0000                  		dc.l Nem_Chicken	; chicken
0001E384 ACA0                       		dc.w $ACA0
0001E386 0000 0000                  		dc.l Nem_BlackBird	; blackbird
0001E38A AE60                       		dc.w $AE60
0001E38C 0000 0000                  		dc.l Nem_Seal		; seal
0001E390 B0A0                       		dc.w $B0A0
0001E392 0000 0000                  		dc.l Nem_Pig		; pig
0001E396 B260                       		dc.w $B260
0001E398 0000 0000                  		dc.l Nem_Flicky		; flicky
0001E39C B4A0                       		dc.w $B4A0
0001E39E 0000 0000                  		dc.l Nem_Squirrel	; squirrel
0001E3A2 B660                       		dc.w $B660
0001E3A4 0000 0000                  		dc.l Nem_EndStH		; "SONIC THE HEDGEHOG"
0001E3A8 B8A0                       		dc.w $B8A0
0001E3AA                            ; ---------------------------------------------------------------------------
0001E3AA                            ; Pattern load cues - "TRY AGAIN" and "END" screens
0001E3AA                            ; ---------------------------------------------------------------------------
0001E3AA 0002                       PLC_TryAgain:	dc.w 2
0001E3AC 0000 0000                  		dc.l Nem_EndEm		; emeralds
0001E3B0 78A0                       		dc.w $78A0
0001E3B2 0000 0000                  		dc.l Nem_TryAgain	; Eggman
0001E3B6 7C20                       		dc.w $7C20
0001E3B8 0000 0000                  		dc.l Nem_CreditText	; credits alphabet
0001E3BC B400                       		dc.w $B400
0001E3BE                            ; ---------------------------------------------------------------------------
0001E3BE                            ; Pattern load cues - Eggman on SBZ 2
0001E3BE                            ; ---------------------------------------------------------------------------
0001E3BE 0002                       PLC_EggmanSBZ2:	dc.w 2
0001E3C0 0000 0000                  		dc.l Nem_SbzBlock	; block
0001E3C4 A300                       		dc.w $A300
0001E3C6 0000 0000                  		dc.l Nem_Sbz2Eggman	; Eggman
0001E3CA 8000                       		dc.w $8000
0001E3CC 0000 0000                  		dc.l Nem_LzSwitch	; switch
0001E3D0 9400                       		dc.w $9400
0001E3D2                            ; ---------------------------------------------------------------------------
0001E3D2                            ; Pattern load cues - final boss
0001E3D2                            ; ---------------------------------------------------------------------------
0001E3D2 0004                       PLC_FZBoss:	dc.w 4
0001E3D4 0000 0000                  		dc.l Nem_FzEggman	; Eggman after boss
0001E3D8 7400                       		dc.w $7400
0001E3DA 0000 0000                  		dc.l Nem_FzBoss		; FZ boss
0001E3DE 6000                       		dc.w $6000
0001E3E0 0000 0000                  		dc.l Nem_Eggman		; Eggman main patterns
0001E3E4 8000                       		dc.w $8000
0001E3E6 0000 0000                  		dc.l Nem_Sbz2Eggman	; Eggman without ship
0001E3EA 8E00                       		dc.w $8E00
0001E3EC 0000 0000                  		dc.l Nem_Exhaust	; exhaust flame
0001E3F0 A540                       		dc.w $A540
0001E3F2                            ; ---------------------------------------------------------------------------
0001E3F2                            ; Pattern load cues - Teto boss
0001E3F2                            ; ---------------------------------------------------------------------------
0001E3F2 0002                       PLC_TetoBoss:	dc.w 2
0001E3F4 0000 0000                  		dc.l Nem_Tetoboss		; Eggman main patterns
0001E3F8 8000                       		dc.w $8000
0001E3FA 0000 0000                  		dc.l Nem_Prison		; prison capsule
0001E3FE 93A0                       		dc.w $93A0
0001E400 0000 0000                  		dc.l Nem_Peartobomb		; bomb enemy (gets overwritten)
0001E404 9000                       		dc.w $9000
0001E406                            		even
0001E406                            		even
0001E406                            
0001E406                            		incbin	misc\padding.bin
0001E4F4                            		even
0001E4F4                            Nem_SegaLogo:	incbin	artnem\segalogo.bin	; large Sega logo
0001E94A                            		even
0001E94A                            Eni_SegaLogo:	incbin	mapeni\segalogo.bin	; large Sega logo (mappings)
0001E9E2                            		even
0001E9E2                            Nem_Gomer:	incbin	artnem\gomer.bin
0001EB24                            		even
0001EB24                            Eni_Gomer:	incbin	mapeni\gomer.bin
0001EB72                            		even
0001EB72                            Eni_Title:	incbin	mapeni\titlescr.bin	; title screen foreground (mappings)
0001EC86                            		even
0001EC86                            Nem_TitleFg:	incbin	artnem\titlefor.bin	; title screen foreground
0001FB50                            		even
0001FB50                            Nem_TitleSonic:	incbin	artnem\titleson.bin	; Sonic on title screen
00023C56                            		even
00023C56                            Nem_TitleTM:	incbin	artnem\titletm.bin	; TM on title screen
00023C8A                            		even
00023C8A                            Eni_JapNames:	incbin	mapeni\japcreds.bin	; Japanese credits (mappings)
00023D48                            		even
00023D48                            Nem_JapNames:	incbin	artnem\japcreds.bin	; Japanese credits
000241F0                            		even
000241F0                            Eni_Idiot:	incbin	mapeni\idiot.bin	; Idiot (mappings)
0002424E                            		even
0002424E                            Nem_Idiot:	incbin	artnem\idiot.bin	; Idiot
00024E54                            		even
00024E54                            ; ---------------------------------------------------------------------------
00024E54                            ; Sprite mappings - Sonic
00024E54                            ; ---------------------------------------------------------------------------
00024E54                            Map_Sonic:
00024E54                            	include "_maps\Sonic.asm"
00024E54                            Map_6d2d:
00024E54 0000                       Map_6d2d_0: 	dc.w Map_6d2d_B8-Map_6d2d
00024E56 0000                       Map_6d2d_2: 	dc.w Map_6d2d_B9-Map_6d2d
00024E58 0000                       Map_6d2d_4: 	dc.w Map_6d2d_C4-Map_6d2d
00024E5A 0000                       Map_6d2d_6: 	dc.w Map_6d2d_D4-Map_6d2d
00024E5C 0000                       Map_6d2d_8: 	dc.w Map_6d2d_E4-Map_6d2d
00024E5E 0000                       Map_6d2d_A: 	dc.w Map_6d2d_F4-Map_6d2d
00024E60 0000                       Map_6d2d_C: 	dc.w Map_6d2d_104-Map_6d2d
00024E62 0000                       Map_6d2d_E: 	dc.w Map_6d2d_119-Map_6d2d
00024E64 0000                       Map_6d2d_10: 	dc.w Map_6d2d_124-Map_6d2d
00024E66 0000                       Map_6d2d_12: 	dc.w Map_6d2d_12F-Map_6d2d
00024E68 0000                       Map_6d2d_14: 	dc.w Map_6d2d_144-Map_6d2d
00024E6A 0000                       Map_6d2d_16: 	dc.w Map_6d2d_14F-Map_6d2d
00024E6C 0000                       Map_6d2d_18: 	dc.w Map_6d2d_15F-Map_6d2d
00024E6E 0000                       Map_6d2d_1A: 	dc.w Map_6d2d_179-Map_6d2d
00024E70 0000                       Map_6d2d_1C: 	dc.w Map_6d2d_198-Map_6d2d
00024E72 0000                       Map_6d2d_1E: 	dc.w Map_6d2d_1AD-Map_6d2d
00024E74 0000                       Map_6d2d_20: 	dc.w Map_6d2d_1C7-Map_6d2d
00024E76 0000                       Map_6d2d_22: 	dc.w Map_6d2d_1DC-Map_6d2d
00024E78 0000                       Map_6d2d_24: 	dc.w Map_6d2d_1F6-Map_6d2d
00024E7A 0000                       Map_6d2d_26: 	dc.w Map_6d2d_20B-Map_6d2d
00024E7C 0000                       Map_6d2d_28: 	dc.w Map_6d2d_216-Map_6d2d
00024E7E 0000                       Map_6d2d_2A: 	dc.w Map_6d2d_221-Map_6d2d
00024E80 0000                       Map_6d2d_2C: 	dc.w Map_6d2d_236-Map_6d2d
00024E82 0000                       Map_6d2d_2E: 	dc.w Map_6d2d_241-Map_6d2d
00024E84 0000                       Map_6d2d_30: 	dc.w Map_6d2d_251-Map_6d2d
00024E86 0000                       Map_6d2d_32: 	dc.w Map_6d2d_270-Map_6d2d
00024E88 0000                       Map_6d2d_34: 	dc.w Map_6d2d_28F-Map_6d2d
00024E8A 0000                       Map_6d2d_36: 	dc.w Map_6d2d_2A4-Map_6d2d
00024E8C 0000                       Map_6d2d_38: 	dc.w Map_6d2d_2BE-Map_6d2d
00024E8E 0000                       Map_6d2d_3A: 	dc.w Map_6d2d_2D3-Map_6d2d
00024E90 0000                       Map_6d2d_3C: 	dc.w Map_6d2d_2ED-Map_6d2d
00024E92 0000                       Map_6d2d_3E: 	dc.w Map_6d2d_2F8-Map_6d2d
00024E94 0000                       Map_6d2d_40: 	dc.w Map_6d2d_303-Map_6d2d
00024E96 0000                       Map_6d2d_42: 	dc.w Map_6d2d_30E-Map_6d2d
00024E98 0000                       Map_6d2d_44: 	dc.w Map_6d2d_319-Map_6d2d
00024E9A 0000                       Map_6d2d_46: 	dc.w Map_6d2d_32E-Map_6d2d
00024E9C 0000                       Map_6d2d_48: 	dc.w Map_6d2d_33E-Map_6d2d
00024E9E 0000                       Map_6d2d_4A: 	dc.w Map_6d2d_353-Map_6d2d
00024EA0 0000                       Map_6d2d_4C: 	dc.w Map_6d2d_363-Map_6d2d
00024EA2 0000                       Map_6d2d_4E: 	dc.w Map_6d2d_36E-Map_6d2d
00024EA4 0000                       Map_6d2d_50: 	dc.w Map_6d2d_379-Map_6d2d
00024EA6 0000                       Map_6d2d_52: 	dc.w Map_6d2d_384-Map_6d2d
00024EA8 0000                       Map_6d2d_54: 	dc.w Map_6d2d_38F-Map_6d2d
00024EAA 0000                       Map_6d2d_56: 	dc.w Map_6d2d_3A4-Map_6d2d
00024EAC 0000                       Map_6d2d_58: 	dc.w Map_6d2d_3AF-Map_6d2d
00024EAE 0000                       Map_6d2d_5A: 	dc.w Map_6d2d_3C4-Map_6d2d
00024EB0 0000                       Map_6d2d_5C: 	dc.w Map_6d2d_3CF-Map_6d2d
00024EB2 0000                       Map_6d2d_5E: 	dc.w Map_6d2d_3D5-Map_6d2d
00024EB4 0000                       Map_6d2d_60: 	dc.w Map_6d2d_3DB-Map_6d2d
00024EB6 0000                       Map_6d2d_62: 	dc.w Map_6d2d_3E1-Map_6d2d
00024EB8 0000                       Map_6d2d_64: 	dc.w Map_6d2d_3E7-Map_6d2d
00024EBA 0000                       Map_6d2d_66: 	dc.w Map_6d2d_3ED-Map_6d2d
00024EBC 0000                       Map_6d2d_68: 	dc.w Map_6d2d_3F8-Map_6d2d
00024EBE 0000                       Map_6d2d_6A: 	dc.w Map_6d2d_3FE-Map_6d2d
00024EC0 0000                       Map_6d2d_6C: 	dc.w Map_6d2d_409-Map_6d2d
00024EC2 0000                       Map_6d2d_6E: 	dc.w Map_6d2d_40F-Map_6d2d
00024EC4 0000                       Map_6d2d_70: 	dc.w Map_6d2d_41A-Map_6d2d
00024EC6 0000                       Map_6d2d_72: 	dc.w Map_6d2d_42F-Map_6d2d
00024EC8 0000                       Map_6d2d_74: 	dc.w Map_6d2d_44E-Map_6d2d
00024ECA 0000                       Map_6d2d_76: 	dc.w Map_6d2d_459-Map_6d2d
00024ECC 0000                       Map_6d2d_78: 	dc.w Map_6d2d_464-Map_6d2d
00024ECE 0000                       Map_6d2d_7A: 	dc.w Map_6d2d_479-Map_6d2d
00024ED0 0000                       Map_6d2d_7C: 	dc.w Map_6d2d_484-Map_6d2d
00024ED2 0000                       Map_6d2d_7E: 	dc.w Map_6d2d_494-Map_6d2d
00024ED4 0000                       Map_6d2d_80: 	dc.w Map_6d2d_4A9-Map_6d2d
00024ED6 0000                       Map_6d2d_82: 	dc.w Map_6d2d_4B9-Map_6d2d
00024ED8 0000                       Map_6d2d_84: 	dc.w Map_6d2d_4CE-Map_6d2d
00024EDA 0000                       Map_6d2d_86: 	dc.w Map_6d2d_4E3-Map_6d2d
00024EDC 0000                       Map_6d2d_88: 	dc.w Map_6d2d_4FD-Map_6d2d
00024EDE 0000                       Map_6d2d_8A: 	dc.w Map_6d2d_517-Map_6d2d
00024EE0 0000                       Map_6d2d_8C: 	dc.w Map_6d2d_522-Map_6d2d
00024EE2 0000                       Map_6d2d_8E: 	dc.w Map_6d2d_532-Map_6d2d
00024EE4 0000                       Map_6d2d_90: 	dc.w Map_6d2d_53D-Map_6d2d
00024EE6 0000                       Map_6d2d_92: 	dc.w Map_6d2d_54D-Map_6d2d
00024EE8 0000                       Map_6d2d_94: 	dc.w Map_6d2d_558-Map_6d2d
00024EEA 0000                       Map_6d2d_96: 	dc.w Map_6d2d_568-Map_6d2d
00024EEC 0000                       Map_6d2d_98: 	dc.w Map_6d2d_578-Map_6d2d
00024EEE 0000                       Map_6d2d_9A: 	dc.w Map_6d2d_592-Map_6d2d
00024EF0 0000                       Map_6d2d_9C: 	dc.w Map_6d2d_5AC-Map_6d2d
00024EF2 0000                       Map_6d2d_9E: 	dc.w Map_6d2d_5B7-Map_6d2d
00024EF4 0000                       Map_6d2d_A0: 	dc.w Map_6d2d_5C7-Map_6d2d
00024EF6 0000                       Map_6d2d_A2: 	dc.w Map_6d2d_5CD-Map_6d2d
00024EF8 0000                       Map_6d2d_A4: 	dc.w Map_6d2d_5D3-Map_6d2d
00024EFA 0000                       Map_6d2d_A6: 	dc.w Map_6d2d_5D9-Map_6d2d
00024EFC 0000                       Map_6d2d_A8: 	dc.w Map_6d2d_5EE-Map_6d2d
00024EFE 0000                       Map_6d2d_AA: 	dc.w Map_6d2d_5FE-Map_6d2d
00024F00 0000                       Map_6d2d_AC: 	dc.w Map_6d2d_60E-Map_6d2d
00024F02 0000                       Map_6d2d_AE: 	dc.w Map_6d2d_61E-Map_6d2d
00024F04 0000                       Map_6d2d_B0: 	dc.w Map_6d2d_629-Map_6d2d
00024F06 0000                       Map_6d2d_B2: 	dc.w Map_6d2d_634-Map_6d2d
00024F08 0000                       Map_6d2d_B4: 	dc.w Map_6d2d_644-Map_6d2d
00024F0A 0000                       Map_6d2d_B6: 	dc.w Map_6d2d_64F-Map_6d2d
00024F0C 00                         Map_6d2d_B8: 	dc.b $0
00024F0D 02                         Map_6d2d_B9: 	dc.b $2
00024F0E ED0E 0000 ED               	dc.b $ED, $E, $0, $0, $ED
00024F13 0509 000C F5               	dc.b $5, $9, $0, $C, $F5
00024F18 03                         Map_6d2d_C4: 	dc.b $3
00024F19 EC09 0000 F0               	dc.b $EC, $9, $0, $0, $F0
00024F1E FC09 0006 F0               	dc.b $FC, $9, $0, $6, $F0
00024F23 0C08 000C F8               	dc.b $C, $8, $0, $C, $F8
00024F28 03                         Map_6d2d_D4: 	dc.b $3
00024F29 EC09 0000 F0               	dc.b $EC, $9, $0, $0, $F0
00024F2E FC09 0006 F0               	dc.b $FC, $9, $0, $6, $F0
00024F33 0C08 000C F8               	dc.b $C, $8, $0, $C, $F8
00024F38 03                         Map_6d2d_E4: 	dc.b $3
00024F39 EC09 0000 F0               	dc.b $EC, $9, $0, $0, $F0
00024F3E FC09 0006 F0               	dc.b $FC, $9, $0, $6, $F0
00024F43 0C08 000C F8               	dc.b $C, $8, $0, $C, $F8
00024F48 03                         Map_6d2d_F4: 	dc.b $3
00024F49 EC0A 0000 F0               	dc.b $EC, $A, $0, $0, $F0
00024F4E 0408 0009 F0               	dc.b $4, $8, $0, $9, $F0
00024F53 0C08 000C F8               	dc.b $C, $8, $0, $C, $F8
00024F58 04                         Map_6d2d_104: 	dc.b $4
00024F59 EB0D 0000 EC               	dc.b $EB, $D, $0, $0, $EC
00024F5E FB09 0008 EC               	dc.b $FB, $9, $0, $8, $EC
00024F63 FB06 000E 04               	dc.b $FB, $6, $0, $E, $4
00024F68 0B04 0014 EC               	dc.b $B, $4, $0, $14, $EC
00024F6D 02                         Map_6d2d_119: 	dc.b $2
00024F6E EC0D 0000 ED               	dc.b $EC, $D, $0, $0, $ED
00024F73 FC0E 0008 F5               	dc.b $FC, $E, $0, $8, $F5
00024F78 02                         Map_6d2d_124: 	dc.b $2
00024F79 ED09 0000 F3               	dc.b $ED, $9, $0, $0, $F3
00024F7E FD0A 0006 F3               	dc.b $FD, $A, $0, $6, $F3
00024F83 04                         Map_6d2d_12F: 	dc.b $4
00024F84 EB09 0000 F4               	dc.b $EB, $9, $0, $0, $F4
00024F89 FB09 0006 EC               	dc.b $FB, $9, $0, $6, $EC
00024F8E FB06 000C 04               	dc.b $FB, $6, $0, $C, $4
00024F93 0B04 0012 EC               	dc.b $B, $4, $0, $12, $EC
00024F98 02                         Map_6d2d_144: 	dc.b $2
00024F99 FC0E 0000 EB               	dc.b $FC, $E, $0, $0, $EB
00024F9E EC09 000C F3               	dc.b $EC, $9, $0, $C, $F3
00024FA3 03                         Map_6d2d_14F: 	dc.b $3
00024FA4 ED0D 0000 EC               	dc.b $ED, $D, $0, $0, $EC
00024FA9 FD0C 0008 F4               	dc.b $FD, $C, $0, $8, $F4
00024FAE 0509 000C F4               	dc.b $5, $9, $0, $C, $F4
00024FB3 05                         Map_6d2d_15F: 	dc.b $5
00024FB4 EB09 0000 EB               	dc.b $EB, $9, $0, $0, $EB
00024FB9 EB06 0006 03               	dc.b $EB, $6, $0, $6, $3
00024FBE FB08 000C EB               	dc.b $FB, $8, $0, $C, $EB
00024FC3 0309 000F F3               	dc.b $3, $9, $0, $F, $F3
00024FC8 1300 0015 FB               	dc.b $13, $0, $0, $15, $FB
00024FCD 06                         Map_6d2d_179: 	dc.b $6
00024FCE EC09 0000 EC               	dc.b $EC, $9, $0, $0, $EC
00024FD3 EC01 0006 04               	dc.b $EC, $1, $0, $6, $4
00024FD8 FC0C 0008 EC               	dc.b $FC, $C, $0, $8, $EC
00024FDD 0409 000C F4               	dc.b $4, $9, $0, $C, $F4
00024FE2 FC05 0012 0C               	dc.b $FC, $5, $0, $12, $C
00024FE7 F400 0016 14               	dc.b $F4, $0, $0, $16, $14
00024FEC 04                         Map_6d2d_198: 	dc.b $4
00024FED ED09 0000 ED               	dc.b $ED, $9, $0, $0, $ED
00024FF2 ED01 0006 05               	dc.b $ED, $1, $0, $6, $5
00024FF7 FD0D 0008 F5               	dc.b $FD, $D, $0, $8, $F5
00024FFC 0D08 0010 FD               	dc.b $D, $8, $0, $10, $FD
00025001 05                         Map_6d2d_1AD: 	dc.b $5
00025002 EB09 0000 EB               	dc.b $EB, $9, $0, $0, $EB
00025007 EB05 0006 03               	dc.b $EB, $5, $0, $6, $3
0002500C FB0D 000A F3               	dc.b $FB, $D, $0, $A, $F3
00025011 0B08 0012 F3               	dc.b $B, $8, $0, $12, $F3
00025016 1304 0015 FB               	dc.b $13, $4, $0, $15, $FB
0002501B 04                         Map_6d2d_1C7: 	dc.b $4
0002501C EC09 0000 EC               	dc.b $EC, $9, $0, $0, $EC
00025021 EC01 0006 04               	dc.b $EC, $1, $0, $6, $4
00025026 FC0D 0008 F4               	dc.b $FC, $D, $0, $8, $F4
0002502B 0C08 0010 FC               	dc.b $C, $8, $0, $10, $FC
00025030 05                         Map_6d2d_1DC: 	dc.b $5
00025031 ED09 0000 ED               	dc.b $ED, $9, $0, $0, $ED
00025036 ED01 0006 05               	dc.b $ED, $1, $0, $6, $5
0002503B FD00 0008 ED               	dc.b $FD, $0, $0, $8, $ED
00025040 FD0D 0009 F5               	dc.b $FD, $D, $0, $9, $F5
00025045 0D08 0011 FD               	dc.b $D, $8, $0, $11, $FD
0002504A 04                         Map_6d2d_1F6: 	dc.b $4
0002504B F407 0000 EB               	dc.b $F4, $7, $0, $0, $EB
00025050 EC09 0008 FB               	dc.b $EC, $9, $0, $8, $FB
00025055 FC04 000E FB               	dc.b $FC, $4, $0, $E, $FB
0002505A 0409 0010 FB               	dc.b $4, $9, $0, $10, $FB
0002505F 02                         Map_6d2d_20B: 	dc.b $2
00025060 F407 0000 EC               	dc.b $F4, $7, $0, $0, $EC
00025065 EC0B 0008 FC               	dc.b $EC, $B, $0, $8, $FC
0002506A 02                         Map_6d2d_216: 	dc.b $2
0002506B F406 0000 ED               	dc.b $F4, $6, $0, $0, $ED
00025070 F40A 0006 FD               	dc.b $F4, $A, $0, $6, $FD
00025075 04                         Map_6d2d_221: 	dc.b $4
00025076 F406 0000 EB               	dc.b $F4, $6, $0, $0, $EB
0002507B EC09 0006 FB               	dc.b $EC, $9, $0, $6, $FB
00025080 FC04 000C FB               	dc.b $FC, $4, $0, $C, $FB
00025085 0409 000E FB               	dc.b $4, $9, $0, $E, $FB
0002508A 02                         Map_6d2d_236: 	dc.b $2
0002508B F406 0000 EC               	dc.b $F4, $6, $0, $0, $EC
00025090 F40B 0006 FC               	dc.b $F4, $B, $0, $6, $FC
00025095 03                         Map_6d2d_241: 	dc.b $3
00025096 F407 0000 ED               	dc.b $F4, $7, $0, $0, $ED
0002509B EC00 0008 FD               	dc.b $EC, $0, $0, $8, $FD
000250A0 F40A 0009 FD               	dc.b $F4, $A, $0, $9, $FD
000250A5 06                         Map_6d2d_251: 	dc.b $6
000250A6 FD06 0000 EB               	dc.b $FD, $6, $0, $0, $EB
000250AB ED04 0006 F3               	dc.b $ED, $4, $0, $6, $F3
000250B0 F504 0008 EB               	dc.b $F5, $4, $0, $8, $EB
000250B5 F50A 000A FB               	dc.b $F5, $A, $0, $A, $FB
000250BA 0D00 0013 FB               	dc.b $D, $0, $0, $13, $FB
000250BF FD00 0014 13               	dc.b $FD, $0, $0, $14, $13
000250C4 06                         Map_6d2d_270: 	dc.b $6
000250C5 FC06 0000 EC               	dc.b $FC, $6, $0, $0, $EC
000250CA E408 0006 F4               	dc.b $E4, $8, $0, $6, $F4
000250CF EC04 0009 FC               	dc.b $EC, $4, $0, $9, $FC
000250D4 F404 000B EC               	dc.b $F4, $4, $0, $B, $EC
000250D9 F40A 000D FC               	dc.b $F4, $A, $0, $D, $FC
000250DE 0C00 0016 FC               	dc.b $C, $0, $0, $16, $FC
000250E3 04                         Map_6d2d_28F: 	dc.b $4
000250E4 FB06 0000 ED               	dc.b $FB, $6, $0, $0, $ED
000250E9 F304 0006 ED               	dc.b $F3, $4, $0, $6, $ED
000250EE EB0A 0008 FD               	dc.b $EB, $A, $0, $8, $FD
000250F3 0304 0011 FD               	dc.b $3, $4, $0, $11, $FD
000250F8 05                         Map_6d2d_2A4: 	dc.b $5
000250F9 FD06 0000 EB               	dc.b $FD, $6, $0, $0, $EB
000250FE ED08 0006 F3               	dc.b $ED, $8, $0, $6, $F3
00025103 F504 0009 EB               	dc.b $F5, $4, $0, $9, $EB
00025108 F50D 000B FB               	dc.b $F5, $D, $0, $B, $FB
0002510D 0508 0013 FB               	dc.b $5, $8, $0, $13, $FB
00025112 04                         Map_6d2d_2BE: 	dc.b $4
00025113 FC06 0000 EC               	dc.b $FC, $6, $0, $0, $EC
00025118 F404 0006 EC               	dc.b $F4, $4, $0, $6, $EC
0002511D EC0A 0008 FC               	dc.b $EC, $A, $0, $8, $FC
00025122 0404 0011 FC               	dc.b $4, $4, $0, $11, $FC
00025127 05                         Map_6d2d_2D3: 	dc.b $5
00025128 FB06 0000 ED               	dc.b $FB, $6, $0, $0, $ED
0002512D EB0A 0006 FD               	dc.b $EB, $A, $0, $6, $FD
00025132 F304 000F ED               	dc.b $F3, $4, $0, $F, $ED
00025137 0304 0011 FD               	dc.b $3, $4, $0, $11, $FD
0002513C 0B00 0013 FD               	dc.b $B, $0, $0, $13, $FD
00025141 02                         Map_6d2d_2ED: 	dc.b $2
00025142 EE09 0000 F4               	dc.b $EE, $9, $0, $0, $F4
00025147 FE0E 0006 EC               	dc.b $FE, $E, $0, $6, $EC
0002514C 02                         Map_6d2d_2F8: 	dc.b $2
0002514D EE09 0000 F4               	dc.b $EE, $9, $0, $0, $F4
00025152 FE0E 0006 EC               	dc.b $FE, $E, $0, $6, $EC
00025157 02                         Map_6d2d_303: 	dc.b $2
00025158 EE09 0000 F4               	dc.b $EE, $9, $0, $0, $F4
0002515D FE0E 0006 EC               	dc.b $FE, $E, $0, $6, $EC
00025162 02                         Map_6d2d_30E: 	dc.b $2
00025163 EE09 0000 F4               	dc.b $EE, $9, $0, $0, $F4
00025168 FE0E 0006 EC               	dc.b $FE, $E, $0, $6, $EC
0002516D 04                         Map_6d2d_319: 	dc.b $4
0002516E EE09 0000 EE               	dc.b $EE, $9, $0, $0, $EE
00025173 EE01 0006 06               	dc.b $EE, $1, $0, $6, $6
00025178 FE0E 0008 F6               	dc.b $FE, $E, $0, $8, $F6
0002517D FE00 0014 EE               	dc.b $FE, $0, $0, $14, $EE
00025182 03                         Map_6d2d_32E: 	dc.b $3
00025183 EE09 0000 EE               	dc.b $EE, $9, $0, $0, $EE
00025188 EE01 0006 06               	dc.b $EE, $1, $0, $6, $6
0002518D FE0E 0008 F6               	dc.b $FE, $E, $0, $8, $F6
00025192 04                         Map_6d2d_33E: 	dc.b $4
00025193 EE09 0000 EE               	dc.b $EE, $9, $0, $0, $EE
00025198 EE01 0006 06               	dc.b $EE, $1, $0, $6, $6
0002519D FE0E 0008 F6               	dc.b $FE, $E, $0, $8, $F6
000251A2 FE00 0014 EE               	dc.b $FE, $0, $0, $14, $EE
000251A7 03                         Map_6d2d_353: 	dc.b $3
000251A8 EE09 0000 EE               	dc.b $EE, $9, $0, $0, $EE
000251AD EE01 0006 06               	dc.b $EE, $1, $0, $6, $6
000251B2 FE0E 0008 F6               	dc.b $FE, $E, $0, $8, $F6
000251B7 02                         Map_6d2d_363: 	dc.b $2
000251B8 F406 0000 EE               	dc.b $F4, $6, $0, $0, $EE
000251BD F40B 0006 FE               	dc.b $F4, $B, $0, $6, $FE
000251C2 02                         Map_6d2d_36E: 	dc.b $2
000251C3 F406 0000 EE               	dc.b $F4, $6, $0, $0, $EE
000251C8 F40B 0006 FE               	dc.b $F4, $B, $0, $6, $FE
000251CD 02                         Map_6d2d_379: 	dc.b $2
000251CE F406 0000 EE               	dc.b $F4, $6, $0, $0, $EE
000251D3 F40B 0006 FE               	dc.b $F4, $B, $0, $6, $FE
000251D8 02                         Map_6d2d_384: 	dc.b $2
000251D9 F406 0000 EE               	dc.b $F4, $6, $0, $0, $EE
000251DE F40B 0006 FE               	dc.b $F4, $B, $0, $6, $FE
000251E3 04                         Map_6d2d_38F: 	dc.b $4
000251E4 FA06 0000 EE               	dc.b $FA, $6, $0, $0, $EE
000251E9 F204 0006 EE               	dc.b $F2, $4, $0, $6, $EE
000251EE EA0B 0008 FE               	dc.b $EA, $B, $0, $8, $FE
000251F3 0A00 0014 FE               	dc.b $A, $0, $0, $14, $FE
000251F8 02                         Map_6d2d_3A4: 	dc.b $2
000251F9 F207 0000 EE               	dc.b $F2, $7, $0, $0, $EE
000251FE EA0B 0008 FE               	dc.b $EA, $B, $0, $8, $FE
00025203 04                         Map_6d2d_3AF: 	dc.b $4
00025204 FA06 0000 EE               	dc.b $FA, $6, $0, $0, $EE
00025209 F204 0006 EE               	dc.b $F2, $4, $0, $6, $EE
0002520E EA0B 0008 FE               	dc.b $EA, $B, $0, $8, $FE
00025213 0A00 0014 FE               	dc.b $A, $0, $0, $14, $FE
00025218 02                         Map_6d2d_3C4: 	dc.b $2
00025219 F207 0000 EE               	dc.b $F2, $7, $0, $0, $EE
0002521E EA0B 0008 FE               	dc.b $EA, $B, $0, $8, $FE
00025223 01                         Map_6d2d_3CF: 	dc.b $1
00025224 F00F 0000 F0               	dc.b $F0, $F, $0, $0, $F0
00025229 01                         Map_6d2d_3D5: 	dc.b $1
0002522A F00F 0000 F0               	dc.b $F0, $F, $0, $0, $F0
0002522F 01                         Map_6d2d_3DB: 	dc.b $1
00025230 F00F 0000 F0               	dc.b $F0, $F, $0, $0, $F0
00025235 01                         Map_6d2d_3E1: 	dc.b $1
00025236 F00F 0000 F0               	dc.b $F0, $F, $0, $0, $F0
0002523B 01                         Map_6d2d_3E7: 	dc.b $1
0002523C F00F 0000 F0               	dc.b $F0, $F, $0, $0, $F0
00025241 02                         Map_6d2d_3ED: 	dc.b $2
00025242 F40E 0000 EC               	dc.b $F4, $E, $0, $0, $EC
00025247 F402 000C 0C               	dc.b $F4, $2, $0, $C, $C
0002524C 01                         Map_6d2d_3F8: 	dc.b $1
0002524D F00F 0000 F0               	dc.b $F0, $F, $0, $0, $F0
00025252 02                         Map_6d2d_3FE: 	dc.b $2
00025253 EC0B 0000 F4               	dc.b $EC, $B, $0, $0, $F4
00025258 0C08 000C F4               	dc.b $C, $8, $0, $C, $F4
0002525D 01                         Map_6d2d_409: 	dc.b $1
0002525E F00F 0000 F0               	dc.b $F0, $F, $0, $0, $F0
00025263 02                         Map_6d2d_40F: 	dc.b $2
00025264 ED09 0000 F0               	dc.b $ED, $9, $0, $0, $F0
00025269 FD0E 0006 F0               	dc.b $FD, $E, $0, $6, $F0
0002526E 04                         Map_6d2d_41A: 	dc.b $4
0002526F ED09 0000 F0               	dc.b $ED, $9, $0, $0, $F0
00025274 FD0D 0006 F0               	dc.b $FD, $D, $0, $6, $F0
00025279 0D04 000E 00               	dc.b $D, $4, $0, $E, $0
0002527E 0500 0010 E8               	dc.b $5, $0, $0, $10, $E8
00025283 06                         Map_6d2d_42F: 	dc.b $6
00025284 F404 0000 F4               	dc.b $F4, $4, $0, $0, $F4
00025289 FC0D 0002 EC               	dc.b $FC, $D, $0, $2, $EC
0002528E 0C08 000A F4               	dc.b $C, $8, $0, $A, $F4
00025293 0C00 000D EC               	dc.b $C, $0, $0, $D, $EC
00025298 FC02 000E 0C               	dc.b $FC, $2, $0, $E, $C
0002529D F400 0011 04               	dc.b $F4, $0, $0, $11, $4
000252A2 02                         Map_6d2d_44E: 	dc.b $2
000252A3 040D 0000 E4               	dc.b $4, $D, $0, $0, $E4
000252A8 EC0A 0008 EC               	dc.b $EC, $A, $0, $8, $EC
000252AD 02                         Map_6d2d_459: 	dc.b $2
000252AE 040D 0000 E3               	dc.b $4, $D, $0, $0, $E3
000252B3 EC0A 0008 EB               	dc.b $EC, $A, $0, $8, $EB
000252B8 04                         Map_6d2d_464: 	dc.b $4
000252B9 F40D 0000 FC               	dc.b $F4, $D, $0, $0, $FC
000252BE F705 0008 EC               	dc.b $F7, $5, $0, $8, $EC
000252C3 0408 000C 03               	dc.b $4, $8, $0, $C, $3
000252C8 0700 000F EC               	dc.b $7, $0, $0, $F, $EC
000252CD 02                         Map_6d2d_479: 	dc.b $2
000252CE F40A 0000 E8               	dc.b $F4, $A, $0, $0, $E8
000252D3 F40A 0800 00               	dc.b $F4, $A, $8, $0, $0
000252D8 03                         Map_6d2d_484: 	dc.b $3
000252D9 F40D 0000 EB               	dc.b $F4, $D, $0, $0, $EB
000252DE FC00 0008 0B               	dc.b $FC, $0, $0, $8, $B
000252E3 040C 0009 EC               	dc.b $4, $C, $0, $9, $EC
000252E8 04                         Map_6d2d_494: 	dc.b $4
000252E9 F40D 0000 FC               	dc.b $F4, $D, $0, $0, $FC
000252EE F705 0008 EC               	dc.b $F7, $5, $0, $8, $EC
000252F3 0408 000C 02               	dc.b $4, $8, $0, $C, $2
000252F8 0700 000F EC               	dc.b $7, $0, $0, $F, $EC
000252FD 03                         Map_6d2d_4A9: 	dc.b $3
000252FE E80B 0000 F0               	dc.b $E8, $B, $0, $0, $F0
00025303 0804 000C F8               	dc.b $8, $4, $0, $C, $F8
00025308 1000 000E F8               	dc.b $10, $0, $0, $E, $F8
0002530D 04                         Map_6d2d_4B9: 	dc.b $4
0002530E F80E 0000 E8               	dc.b $F8, $E, $0, $0, $E8
00025313 0005 000C 08               	dc.b $0, $5, $0, $C, $8
00025318 F800 0010 08               	dc.b $F8, $0, $0, $10, $8
0002531D F000 0011 F8               	dc.b $F0, $0, $0, $11, $F8
00025322 04                         Map_6d2d_4CE: 	dc.b $4
00025323 F80E 0000 E8               	dc.b $F8, $E, $0, $0, $E8
00025328 0005 000C 08               	dc.b $0, $5, $0, $C, $8
0002532D F800 0010 08               	dc.b $F8, $0, $0, $10, $8
00025332 F000 0011 F8               	dc.b $F0, $0, $0, $11, $F8
00025337 05                         Map_6d2d_4E3: 	dc.b $5
00025338 E80A 0000 F4               	dc.b $E8, $A, $0, $0, $F4
0002533D F001 0009 0C               	dc.b $F0, $1, $0, $9, $C
00025342 0009 000B F4               	dc.b $0, $9, $0, $B, $F4
00025347 1004 0011 F4               	dc.b $10, $4, $0, $11, $F4
0002534C 0000 0013 EC               	dc.b $0, $0, $0, $13, $EC
00025351 05                         Map_6d2d_4FD: 	dc.b $5
00025352 E80A 0000 F4               	dc.b $E8, $A, $0, $0, $F4
00025357 E801 0009 0C               	dc.b $E8, $1, $0, $9, $C
0002535C 0009 000B F4               	dc.b $0, $9, $0, $B, $F4
00025361 1004 0011 F4               	dc.b $10, $4, $0, $11, $F4
00025366 0000 0013 EC               	dc.b $0, $0, $0, $13, $EC
0002536B 02                         Map_6d2d_517: 	dc.b $2
0002536C ED0A 0000 F3               	dc.b $ED, $A, $0, $0, $F3
00025371 050D 0009 EB               	dc.b $5, $D, $0, $9, $EB
00025376 03                         Map_6d2d_522: 	dc.b $3
00025377 EC0A 0000 F3               	dc.b $EC, $A, $0, $0, $F3
0002537C 0408 0009 F3               	dc.b $4, $8, $0, $9, $F3
00025381 0C04 000C F3               	dc.b $C, $4, $0, $C, $F3
00025386 02                         Map_6d2d_532: 	dc.b $2
00025387 ED0A 0000 F3               	dc.b $ED, $A, $0, $0, $F3
0002538C 050D 0009 EB               	dc.b $5, $D, $0, $9, $EB
00025391 03                         Map_6d2d_53D: 	dc.b $3
00025392 EC0A 0000 F3               	dc.b $EC, $A, $0, $0, $F3
00025397 0408 0009 F3               	dc.b $4, $8, $0, $9, $F3
0002539C 0C04 000C F3               	dc.b $C, $4, $0, $C, $F3
000253A1 02                         Map_6d2d_54D: 	dc.b $2
000253A2 EC09 0000 F0               	dc.b $EC, $9, $0, $0, $F0
000253A7 FC0E 0006 F0               	dc.b $FC, $E, $0, $6, $F0
000253AC 03                         Map_6d2d_558: 	dc.b $3
000253AD EC0A 0000 F0               	dc.b $EC, $A, $0, $0, $F0
000253B2 0405 0009 F8               	dc.b $4, $5, $0, $9, $F8
000253B7 E400 000D F8               	dc.b $E4, $0, $0, $D, $F8
000253BC 03                         Map_6d2d_568: 	dc.b $3
000253BD E80D 0000 EC               	dc.b $E8, $D, $0, $0, $EC
000253C2 E801 0008 0C               	dc.b $E8, $1, $0, $8, $C
000253C7 F80B 000A F4               	dc.b $F8, $B, $0, $A, $F4
000253CC 05                         Map_6d2d_578: 	dc.b $5
000253CD E80D 0000 EC               	dc.b $E8, $D, $0, $0, $EC
000253D2 E801 0008 0C               	dc.b $E8, $1, $0, $8, $C
000253D7 F809 000A F4               	dc.b $F8, $9, $0, $A, $F4
000253DC 080C 0010 F4               	dc.b $8, $C, $0, $10, $F4
000253E1 1000 0014 F4               	dc.b $10, $0, $0, $14, $F4
000253E6 05                         Map_6d2d_592: 	dc.b $5
000253E7 E80D 0000 EC               	dc.b $E8, $D, $0, $0, $EC
000253EC E801 0008 0C               	dc.b $E8, $1, $0, $8, $C
000253F1 F809 000A F4               	dc.b $F8, $9, $0, $A, $F4
000253F6 080C 0010 F4               	dc.b $8, $C, $0, $10, $F4
000253FB 1000 0014 F4               	dc.b $10, $0, $0, $14, $F4
00025400 02                         Map_6d2d_5AC: 	dc.b $2
00025401 EC08 0000 F0               	dc.b $EC, $8, $0, $0, $F0
00025406 F40F 0003 F0               	dc.b $F4, $F, $0, $3, $F0
0002540B 03                         Map_6d2d_5B7: 	dc.b $3
0002540C EC08 0000 F0               	dc.b $EC, $8, $0, $0, $F0
00025411 F40E 0003 F0               	dc.b $F4, $E, $0, $3, $F0
00025416 0C08 000F F8               	dc.b $C, $8, $0, $F, $F8
0002541B 01                         Map_6d2d_5C7: 	dc.b $1
0002541C F00B 0000 F4               	dc.b $F0, $B, $0, $0, $F4
00025421 01                         Map_6d2d_5CD: 	dc.b $1
00025422 F406 0000 F8               	dc.b $F4, $6, $0, $0, $F8
00025427 01                         Map_6d2d_5D3: 	dc.b $1
00025428 F801 0000 FC               	dc.b $F8, $1, $0, $0, $FC
0002542D 04                         Map_6d2d_5D9: 	dc.b $4
0002542E F40D 0800 E4               	dc.b $F4, $D, $8, $0, $E4
00025433 F705 0808 04               	dc.b $F7, $5, $8, $8, $4
00025438 0408 080C E5               	dc.b $4, $8, $8, $C, $E5
0002543D 0700 080F 0C               	dc.b $7, $0, $8, $F, $C
00025442 03                         Map_6d2d_5EE: 	dc.b $3
00025443 F40D 0800 F5               	dc.b $F4, $D, $8, $0, $F5
00025448 FC00 0808 ED               	dc.b $FC, $0, $8, $8, $ED
0002544D 040C 0809 F4               	dc.b $4, $C, $8, $9, $F4
00025452 03                         Map_6d2d_5FE: 	dc.b $3
00025453 F00E 0000 EC               	dc.b $F0, $E, $0, $0, $EC
00025458 F801 000C 0C               	dc.b $F8, $1, $0, $C, $C
0002545D 080C 000E F4               	dc.b $8, $C, $0, $E, $F4
00025462 03                         Map_6d2d_60E: 	dc.b $3
00025463 EB09 0000 F4               	dc.b $EB, $9, $0, $0, $F4
00025468 FB0E 0006 EC               	dc.b $FB, $E, $0, $6, $EC
0002546D 0301 0012 0C               	dc.b $3, $1, $0, $12, $C
00025472 02                         Map_6d2d_61E: 	dc.b $2
00025473 F00F 0000 EC               	dc.b $F0, $F, $0, $0, $EC
00025478 F802 0010 0C               	dc.b $F8, $2, $0, $10, $C
0002547D 02                         Map_6d2d_629: 	dc.b $2
0002547E F40F 0000 F0               	dc.b $F4, $F, $0, $0, $F0
00025483 EC04 0010 F8               	dc.b $EC, $4, $0, $10, $F8
00025488 03                         Map_6d2d_634: 	dc.b $3
00025489 ED0F 0000 F3               	dc.b $ED, $F, $0, $0, $F3
0002548E 0D00 0010 F3               	dc.b $D, $0, $0, $10, $F3
00025493 0D04 0011 03               	dc.b $D, $4, $0, $11, $3
00025498 02                         Map_6d2d_644: 	dc.b $2
00025499 F60F 0000 EE               	dc.b $F6, $F, $0, $0, $EE
0002549E EE08 0010 F6               	dc.b $EE, $8, $0, $10, $F6
000254A3 04                         Map_6d2d_64F: 	dc.b $4
000254A4 ED08 0000 F3               	dc.b $ED, $8, $0, $0, $F3
000254A9 F50E 0003 EB               	dc.b $F5, $E, $0, $3, $EB
000254AE F503 000F 0B               	dc.b $F5, $3, $0, $F, $B
000254B3 0D08 0013 F3               	dc.b $D, $8, $0, $13, $F3
000254B8                            	even
000254B8                            	even
000254B8                            
000254B8                            ; ---------------------------------------------------------------------------
000254B8                            ; Uncompressed graphics	loading	array for Sonic
000254B8                            ; ---------------------------------------------------------------------------
000254B8                            SonicDynPLC:
000254B8                            	include "_inc\Sonic dynamic pattern load cues.asm"
000254B8                            DPLC_2d5b:
000254B8 0000                       DPLC_2d5b_0: 	dc.w DPLC_2d5b_B8-DPLC_2d5b
000254BA 0000                       DPLC_2d5b_2: 	dc.w DPLC_2d5b_B9-DPLC_2d5b
000254BC 0000                       DPLC_2d5b_4: 	dc.w DPLC_2d5b_BE-DPLC_2d5b
000254BE 0000                       DPLC_2d5b_6: 	dc.w DPLC_2d5b_C5-DPLC_2d5b
000254C0 0000                       DPLC_2d5b_8: 	dc.w DPLC_2d5b_CC-DPLC_2d5b
000254C2 0000                       DPLC_2d5b_A: 	dc.w DPLC_2d5b_D3-DPLC_2d5b
000254C4 0000                       DPLC_2d5b_C: 	dc.w DPLC_2d5b_DA-DPLC_2d5b
000254C6 0000                       DPLC_2d5b_E: 	dc.w DPLC_2d5b_E3-DPLC_2d5b
000254C8 0000                       DPLC_2d5b_10: 	dc.w DPLC_2d5b_E8-DPLC_2d5b
000254CA 0000                       DPLC_2d5b_12: 	dc.w DPLC_2d5b_ED-DPLC_2d5b
000254CC 0000                       DPLC_2d5b_14: 	dc.w DPLC_2d5b_F6-DPLC_2d5b
000254CE 0000                       DPLC_2d5b_16: 	dc.w DPLC_2d5b_FB-DPLC_2d5b
000254D0 0000                       DPLC_2d5b_18: 	dc.w DPLC_2d5b_102-DPLC_2d5b
000254D2 0000                       DPLC_2d5b_1A: 	dc.w DPLC_2d5b_10D-DPLC_2d5b
000254D4 0000                       DPLC_2d5b_1C: 	dc.w DPLC_2d5b_11A-DPLC_2d5b
000254D6 0000                       DPLC_2d5b_1E: 	dc.w DPLC_2d5b_123-DPLC_2d5b
000254D8 0000                       DPLC_2d5b_20: 	dc.w DPLC_2d5b_12E-DPLC_2d5b
000254DA 0000                       DPLC_2d5b_22: 	dc.w DPLC_2d5b_137-DPLC_2d5b
000254DC 0000                       DPLC_2d5b_24: 	dc.w DPLC_2d5b_142-DPLC_2d5b
000254DE 0000                       DPLC_2d5b_26: 	dc.w DPLC_2d5b_14B-DPLC_2d5b
000254E0 0000                       DPLC_2d5b_28: 	dc.w DPLC_2d5b_150-DPLC_2d5b
000254E2 0000                       DPLC_2d5b_2A: 	dc.w DPLC_2d5b_155-DPLC_2d5b
000254E4 0000                       DPLC_2d5b_2C: 	dc.w DPLC_2d5b_15E-DPLC_2d5b
000254E6 0000                       DPLC_2d5b_2E: 	dc.w DPLC_2d5b_163-DPLC_2d5b
000254E8 0000                       DPLC_2d5b_30: 	dc.w DPLC_2d5b_16A-DPLC_2d5b
000254EA 0000                       DPLC_2d5b_32: 	dc.w DPLC_2d5b_177-DPLC_2d5b
000254EC 0000                       DPLC_2d5b_34: 	dc.w DPLC_2d5b_184-DPLC_2d5b
000254EE 0000                       DPLC_2d5b_36: 	dc.w DPLC_2d5b_18D-DPLC_2d5b
000254F0 0000                       DPLC_2d5b_38: 	dc.w DPLC_2d5b_198-DPLC_2d5b
000254F2 0000                       DPLC_2d5b_3A: 	dc.w DPLC_2d5b_1A1-DPLC_2d5b
000254F4 0000                       DPLC_2d5b_3C: 	dc.w DPLC_2d5b_1AC-DPLC_2d5b
000254F6 0000                       DPLC_2d5b_3E: 	dc.w DPLC_2d5b_1B1-DPLC_2d5b
000254F8 0000                       DPLC_2d5b_40: 	dc.w DPLC_2d5b_1B6-DPLC_2d5b
000254FA 0000                       DPLC_2d5b_42: 	dc.w DPLC_2d5b_1BB-DPLC_2d5b
000254FC 0000                       DPLC_2d5b_44: 	dc.w DPLC_2d5b_1C0-DPLC_2d5b
000254FE 0000                       DPLC_2d5b_46: 	dc.w DPLC_2d5b_1C9-DPLC_2d5b
00025500 0000                       DPLC_2d5b_48: 	dc.w DPLC_2d5b_1D0-DPLC_2d5b
00025502 0000                       DPLC_2d5b_4A: 	dc.w DPLC_2d5b_1D9-DPLC_2d5b
00025504 0000                       DPLC_2d5b_4C: 	dc.w DPLC_2d5b_1E0-DPLC_2d5b
00025506 0000                       DPLC_2d5b_4E: 	dc.w DPLC_2d5b_1E5-DPLC_2d5b
00025508 0000                       DPLC_2d5b_50: 	dc.w DPLC_2d5b_1EA-DPLC_2d5b
0002550A 0000                       DPLC_2d5b_52: 	dc.w DPLC_2d5b_1EF-DPLC_2d5b
0002550C 0000                       DPLC_2d5b_54: 	dc.w DPLC_2d5b_1F4-DPLC_2d5b
0002550E 0000                       DPLC_2d5b_56: 	dc.w DPLC_2d5b_1FD-DPLC_2d5b
00025510 0000                       DPLC_2d5b_58: 	dc.w DPLC_2d5b_202-DPLC_2d5b
00025512 0000                       DPLC_2d5b_5A: 	dc.w DPLC_2d5b_20B-DPLC_2d5b
00025514 0000                       DPLC_2d5b_5C: 	dc.w DPLC_2d5b_210-DPLC_2d5b
00025516 0000                       DPLC_2d5b_5E: 	dc.w DPLC_2d5b_213-DPLC_2d5b
00025518 0000                       DPLC_2d5b_60: 	dc.w DPLC_2d5b_216-DPLC_2d5b
0002551A 0000                       DPLC_2d5b_62: 	dc.w DPLC_2d5b_219-DPLC_2d5b
0002551C 0000                       DPLC_2d5b_64: 	dc.w DPLC_2d5b_21C-DPLC_2d5b
0002551E 0000                       DPLC_2d5b_66: 	dc.w DPLC_2d5b_21F-DPLC_2d5b
00025520 0000                       DPLC_2d5b_68: 	dc.w DPLC_2d5b_224-DPLC_2d5b
00025522 0000                       DPLC_2d5b_6A: 	dc.w DPLC_2d5b_227-DPLC_2d5b
00025524 0000                       DPLC_2d5b_6C: 	dc.w DPLC_2d5b_22C-DPLC_2d5b
00025526 0000                       DPLC_2d5b_6E: 	dc.w DPLC_2d5b_22F-DPLC_2d5b
00025528 0000                       DPLC_2d5b_70: 	dc.w DPLC_2d5b_234-DPLC_2d5b
0002552A 0000                       DPLC_2d5b_72: 	dc.w DPLC_2d5b_23D-DPLC_2d5b
0002552C 0000                       DPLC_2d5b_74: 	dc.w DPLC_2d5b_242-DPLC_2d5b
0002552E 0000                       DPLC_2d5b_76: 	dc.w DPLC_2d5b_247-DPLC_2d5b
00025530 0000                       DPLC_2d5b_78: 	dc.w DPLC_2d5b_24C-DPLC_2d5b
00025532 0000                       DPLC_2d5b_7A: 	dc.w DPLC_2d5b_251-DPLC_2d5b
00025534 0000                       DPLC_2d5b_7C: 	dc.w DPLC_2d5b_254-DPLC_2d5b
00025536 0000                       DPLC_2d5b_7E: 	dc.w DPLC_2d5b_25B-DPLC_2d5b
00025538 0000                       DPLC_2d5b_80: 	dc.w DPLC_2d5b_260-DPLC_2d5b
0002553A 0000                       DPLC_2d5b_82: 	dc.w DPLC_2d5b_267-DPLC_2d5b
0002553C 0000                       DPLC_2d5b_84: 	dc.w DPLC_2d5b_270-DPLC_2d5b
0002553E 0000                       DPLC_2d5b_86: 	dc.w DPLC_2d5b_279-DPLC_2d5b
00025540 0000                       DPLC_2d5b_88: 	dc.w DPLC_2d5b_284-DPLC_2d5b
00025542 0000                       DPLC_2d5b_8A: 	dc.w DPLC_2d5b_28F-DPLC_2d5b
00025544 0000                       DPLC_2d5b_8C: 	dc.w DPLC_2d5b_294-DPLC_2d5b
00025546 0000                       DPLC_2d5b_8E: 	dc.w DPLC_2d5b_29B-DPLC_2d5b
00025548 0000                       DPLC_2d5b_90: 	dc.w DPLC_2d5b_2A0-DPLC_2d5b
0002554A 0000                       DPLC_2d5b_92: 	dc.w DPLC_2d5b_2A7-DPLC_2d5b
0002554C 0000                       DPLC_2d5b_94: 	dc.w DPLC_2d5b_2AC-DPLC_2d5b
0002554E 0000                       DPLC_2d5b_96: 	dc.w DPLC_2d5b_2B3-DPLC_2d5b
00025550 0000                       DPLC_2d5b_98: 	dc.w DPLC_2d5b_2BA-DPLC_2d5b
00025552 0000                       DPLC_2d5b_9A: 	dc.w DPLC_2d5b_2C5-DPLC_2d5b
00025554 0000                       DPLC_2d5b_9C: 	dc.w DPLC_2d5b_2D0-DPLC_2d5b
00025556 0000                       DPLC_2d5b_9E: 	dc.w DPLC_2d5b_2D5-DPLC_2d5b
00025558 0000                       DPLC_2d5b_A0: 	dc.w DPLC_2d5b_2DC-DPLC_2d5b
0002555A 0000                       DPLC_2d5b_A2: 	dc.w DPLC_2d5b_2DF-DPLC_2d5b
0002555C 0000                       DPLC_2d5b_A4: 	dc.w DPLC_2d5b_2E2-DPLC_2d5b
0002555E 0000                       DPLC_2d5b_A6: 	dc.w DPLC_2d5b_2E5-DPLC_2d5b
00025560 0000                       DPLC_2d5b_A8: 	dc.w DPLC_2d5b_2EA-DPLC_2d5b
00025562 0000                       DPLC_2d5b_AA: 	dc.w DPLC_2d5b_2F1-DPLC_2d5b
00025564 0000                       DPLC_2d5b_AC: 	dc.w DPLC_2d5b_2F8-DPLC_2d5b
00025566 0000                       DPLC_2d5b_AE: 	dc.w DPLC_2d5b_2FF-DPLC_2d5b
00025568 0000                       DPLC_2d5b_B0: 	dc.w DPLC_2d5b_304-DPLC_2d5b
0002556A 0000                       DPLC_2d5b_B2: 	dc.w DPLC_2d5b_309-DPLC_2d5b
0002556C 0000                       DPLC_2d5b_B4: 	dc.w DPLC_2d5b_30E-DPLC_2d5b
0002556E 0000                       DPLC_2d5b_B6: 	dc.w DPLC_2d5b_313-DPLC_2d5b
00025570 00                         DPLC_2d5b_B8: 	dc.b $0
00025571 02                         DPLC_2d5b_B9: 	dc.b $2
00025572 F000                       	dc.b $F0, $0
00025574 1010                       	dc.b $10, $10
00025576 03                         DPLC_2d5b_BE: 	dc.b $3
00025577 5012                       	dc.b $50, $12
00025579 5018                       	dc.b $50, $18
0002557B 201E                       	dc.b $20, $1E
0002557D 03                         DPLC_2d5b_C5: 	dc.b $3
0002557E 5021                       	dc.b $50, $21
00025580 5018                       	dc.b $50, $18
00025582 201E                       	dc.b $20, $1E
00025584 03                         DPLC_2d5b_CC: 	dc.b $3
00025585 5021                       	dc.b $50, $21
00025587 5018                       	dc.b $50, $18
00025589 2027                       	dc.b $20, $27
0002558B 03                         DPLC_2d5b_D3: 	dc.b $3
0002558C 802A                       	dc.b $80, $2A
0002558E 2033                       	dc.b $20, $33
00025590 2036                       	dc.b $20, $36
00025592 04                         DPLC_2d5b_DA: 	dc.b $4
00025593 7039                       	dc.b $70, $39
00025595 5041                       	dc.b $50, $41
00025597 5047                       	dc.b $50, $47
00025599 104D                       	dc.b $10, $4D
0002559B 02                         DPLC_2d5b_E3: 	dc.b $2
0002559C 7039                       	dc.b $70, $39
0002559E B04F                       	dc.b $B0, $4F
000255A0 02                         DPLC_2d5b_E8: 	dc.b $2
000255A1 505B                       	dc.b $50, $5B
000255A3 8061                       	dc.b $80, $61
000255A5 04                         DPLC_2d5b_ED: 	dc.b $4
000255A6 505B                       	dc.b $50, $5B
000255A8 506A                       	dc.b $50, $6A
000255AA 5070                       	dc.b $50, $70
000255AC 1076                       	dc.b $10, $76
000255AE 02                         DPLC_2d5b_F6: 	dc.b $2
000255AF F4F0                       	dc.b $F4, $F0
000255B1 1500                       	dc.b $15, $0
000255B3 03                         DPLC_2d5b_FB: 	dc.b $3
000255B4 7039                       	dc.b $70, $39
000255B6 3078                       	dc.b $30, $78
000255B8 507C                       	dc.b $50, $7C
000255BA 05                         DPLC_2d5b_102: 	dc.b $5
000255BB 5082                       	dc.b $50, $82
000255BD 5088                       	dc.b $50, $88
000255BF 208E                       	dc.b $20, $8E
000255C1 5091                       	dc.b $50, $91
000255C3 0097                       	dc.b $0, $97
000255C5 06                         DPLC_2d5b_10D: 	dc.b $6
000255C6 5082                       	dc.b $50, $82
000255C8 1098                       	dc.b $10, $98
000255CA 309A                       	dc.b $30, $9A
000255CC 509E                       	dc.b $50, $9E
000255CE 30A4                       	dc.b $30, $A4
000255D0 00A8                       	dc.b $0, $A8
000255D2 04                         DPLC_2d5b_11A: 	dc.b $4
000255D3 50A9                       	dc.b $50, $A9
000255D5 10AF                       	dc.b $10, $AF
000255D7 70B1                       	dc.b $70, $B1
000255D9 20B9                       	dc.b $20, $B9
000255DB 05                         DPLC_2d5b_123: 	dc.b $5
000255DC 50BC                       	dc.b $50, $BC
000255DE 30C2                       	dc.b $30, $C2
000255E0 70C6                       	dc.b $70, $C6
000255E2 20CE                       	dc.b $20, $CE
000255E4 10D1                       	dc.b $10, $D1
000255E6 04                         DPLC_2d5b_12E: 	dc.b $4
000255E7 50BC                       	dc.b $50, $BC
000255E9 10D3                       	dc.b $10, $D3
000255EB 70D5                       	dc.b $70, $D5
000255ED 20DD                       	dc.b $20, $DD
000255EF 05                         DPLC_2d5b_137: 	dc.b $5
000255F0 5082                       	dc.b $50, $82
000255F2 1098                       	dc.b $10, $98
000255F4 008E                       	dc.b $0, $8E
000255F6 70E0                       	dc.b $70, $E0
000255F8 20E8                       	dc.b $20, $E8
000255FA 04                         DPLC_2d5b_142: 	dc.b $4
000255FB 70EB                       	dc.b $70, $EB
000255FD 50F3                       	dc.b $50, $F3
000255FF 10F9                       	dc.b $10, $F9
00025601 50FB                       	dc.b $50, $FB
00025603 02                         DPLC_2d5b_14B: 	dc.b $2
00025604 70EB                       	dc.b $70, $EB
00025606 B101                       	dc.b $B1, $1
00025608 02                         DPLC_2d5b_150: 	dc.b $2
00025609 510D                       	dc.b $51, $D
0002560B 8113                       	dc.b $81, $13
0002560D 04                         DPLC_2d5b_155: 	dc.b $4
0002560E 510D                       	dc.b $51, $D
00025610 511C                       	dc.b $51, $1C
00025612 1122                       	dc.b $11, $22
00025614 5124                       	dc.b $51, $24
00025616 02                         DPLC_2d5b_15E: 	dc.b $2
00025617 510D                       	dc.b $51, $D
00025619 B12A                       	dc.b $B1, $2A
0002561B 03                         DPLC_2d5b_163: 	dc.b $3
0002561C 70EB                       	dc.b $70, $EB
0002561E 0101                       	dc.b $1, $1
00025620 8136                       	dc.b $81, $36
00025622 06                         DPLC_2d5b_16A: 	dc.b $6
00025623 513F                       	dc.b $51, $3F
00025625 1145                       	dc.b $11, $45
00025627 1147                       	dc.b $11, $47
00025629 8149                       	dc.b $81, $49
0002562B 0152                       	dc.b $1, $52
0002562D 0153                       	dc.b $1, $53
0002562F 06                         DPLC_2d5b_177: 	dc.b $6
00025630 513F                       	dc.b $51, $3F
00025632 2154                       	dc.b $21, $54
00025634 1157                       	dc.b $11, $57
00025636 1159                       	dc.b $11, $59
00025638 815B                       	dc.b $81, $5B
0002563A 0152                       	dc.b $1, $52
0002563C 04                         DPLC_2d5b_184: 	dc.b $4
0002563D 5164                       	dc.b $51, $64
0002563F 116A                       	dc.b $11, $6A
00025641 816C                       	dc.b $81, $6C
00025643 1175                       	dc.b $11, $75
00025645 05                         DPLC_2d5b_18D: 	dc.b $5
00025646 5177                       	dc.b $51, $77
00025648 217D                       	dc.b $21, $7D
0002564A 1180                       	dc.b $11, $80
0002564C 7182                       	dc.b $71, $82
0002564E 218A                       	dc.b $21, $8A
00025650 04                         DPLC_2d5b_198: 	dc.b $4
00025651 5177                       	dc.b $51, $77
00025653 118D                       	dc.b $11, $8D
00025655 818F                       	dc.b $81, $8F
00025657 1198                       	dc.b $11, $98
00025659 05                         DPLC_2d5b_1A1: 	dc.b $5
0002565A 513F                       	dc.b $51, $3F
0002565C 819A                       	dc.b $81, $9A
0002565E 1159                       	dc.b $11, $59
00025660 11A3                       	dc.b $11, $A3
00025662 0152                       	dc.b $1, $52
00025664 02                         DPLC_2d5b_1AC: 	dc.b $2
00025665 51A5                       	dc.b $51, $A5
00025667 B1AB                       	dc.b $B1, $AB
00025669 02                         DPLC_2d5b_1B1: 	dc.b $2
0002566A 505B                       	dc.b $50, $5B
0002566C B1B7                       	dc.b $B1, $B7
0002566E 02                         DPLC_2d5b_1B6: 	dc.b $2
0002566F 51A5                       	dc.b $51, $A5
00025671 B1C3                       	dc.b $B1, $C3
00025673 02                         DPLC_2d5b_1BB: 	dc.b $2
00025674 505B                       	dc.b $50, $5B
00025676 B1CF                       	dc.b $B1, $CF
00025678 04                         DPLC_2d5b_1C0: 	dc.b $4
00025679 51DB                       	dc.b $51, $DB
0002567B 11E1                       	dc.b $11, $E1
0002567D B1E3                       	dc.b $B1, $E3
0002567F 01EF                       	dc.b $1, $EF
00025681 03                         DPLC_2d5b_1C9: 	dc.b $3
00025682 51F0                       	dc.b $51, $F0
00025684 11F6                       	dc.b $11, $F6
00025686 B1F8                       	dc.b $B1, $F8
00025688 04                         DPLC_2d5b_1D0: 	dc.b $4
00025689 51DB                       	dc.b $51, $DB
0002568B 1204                       	dc.b $12, $4
0002568D B206                       	dc.b $B2, $6
0002568F 01EF                       	dc.b $1, $EF
00025691 03                         DPLC_2d5b_1D9: 	dc.b $3
00025692 51F0                       	dc.b $51, $F0
00025694 11F6                       	dc.b $11, $F6
00025696 B212                       	dc.b $B2, $12
00025698 02                         DPLC_2d5b_1E0: 	dc.b $2
00025699 521E                       	dc.b $52, $1E
0002569B B224                       	dc.b $B2, $24
0002569D 02                         DPLC_2d5b_1E5: 	dc.b $2
0002569E 510D                       	dc.b $51, $D
000256A0 B230                       	dc.b $B2, $30
000256A2 02                         DPLC_2d5b_1EA: 	dc.b $2
000256A3 521E                       	dc.b $52, $1E
000256A5 B23C                       	dc.b $B2, $3C
000256A7 02                         DPLC_2d5b_1EF: 	dc.b $2
000256A8 510D                       	dc.b $51, $D
000256AA B248                       	dc.b $B2, $48
000256AC 04                         DPLC_2d5b_1F4: 	dc.b $4
000256AD 5254                       	dc.b $52, $54
000256AF 125A                       	dc.b $12, $5A
000256B1 B25C                       	dc.b $B2, $5C
000256B3 0268                       	dc.b $2, $68
000256B5 02                         DPLC_2d5b_1FD: 	dc.b $2
000256B6 7269                       	dc.b $72, $69
000256B8 B271                       	dc.b $B2, $71
000256BA 04                         DPLC_2d5b_202: 	dc.b $4
000256BB 5254                       	dc.b $52, $54
000256BD 127D                       	dc.b $12, $7D
000256BF B27F                       	dc.b $B2, $7F
000256C1 0268                       	dc.b $2, $68
000256C3 02                         DPLC_2d5b_20B: 	dc.b $2
000256C4 7269                       	dc.b $72, $69
000256C6 B28B                       	dc.b $B2, $8B
000256C8 01                         DPLC_2d5b_210: 	dc.b $1
000256C9 F297                       	dc.b $F2, $97
000256CB 01                         DPLC_2d5b_213: 	dc.b $1
000256CC F2A7                       	dc.b $F2, $A7
000256CE 01                         DPLC_2d5b_216: 	dc.b $1
000256CF F2B7                       	dc.b $F2, $B7
000256D1 01                         DPLC_2d5b_219: 	dc.b $1
000256D2 F2C7                       	dc.b $F2, $C7
000256D4 01                         DPLC_2d5b_21C: 	dc.b $1
000256D5 F2D7                       	dc.b $F2, $D7
000256D7 02                         DPLC_2d5b_21F: 	dc.b $2
000256D8 B2E7                       	dc.b $B2, $E7
000256DA 22F3                       	dc.b $22, $F3
000256DC 01                         DPLC_2d5b_224: 	dc.b $1
000256DD F2F6                       	dc.b $F2, $F6
000256DF 02                         DPLC_2d5b_227: 	dc.b $2
000256E0 B306                       	dc.b $B3, $6
000256E2 2312                       	dc.b $23, $12
000256E4 01                         DPLC_2d5b_22C: 	dc.b $1
000256E5 F315                       	dc.b $F3, $15
000256E7 02                         DPLC_2d5b_22F: 	dc.b $2
000256E8 5325                       	dc.b $53, $25
000256EA B32B                       	dc.b $B3, $2B
000256EC 04                         DPLC_2d5b_234: 	dc.b $4
000256ED 5337                       	dc.b $53, $37
000256EF 733D                       	dc.b $73, $3D
000256F1 1345                       	dc.b $13, $45
000256F3 0347                       	dc.b $3, $47
000256F5 02                         DPLC_2d5b_23D: 	dc.b $2
000256F6 D348                       	dc.b $D3, $48
000256F8 34EC                       	dc.b $34, $EC
000256FA 02                         DPLC_2d5b_242: 	dc.b $2
000256FB F528                       	dc.b $F5, $28
000256FD 0538                       	dc.b $5, $38
000256FF 02                         DPLC_2d5b_247: 	dc.b $2
00025700 F539                       	dc.b $F5, $39
00025702 0549                       	dc.b $5, $49
00025704 02                         DPLC_2d5b_24C: 	dc.b $2
00025705 E356                       	dc.b $E3, $56
00025707 054A                       	dc.b $5, $4A
00025709 01                         DPLC_2d5b_251: 	dc.b $1
0002570A 8365                       	dc.b $83, $65
0002570C 03                         DPLC_2d5b_254: 	dc.b $3
0002570D 736E                       	dc.b $73, $6E
0002570F 0376                       	dc.b $3, $76
00025711 3377                       	dc.b $33, $77
00025713 02                         DPLC_2d5b_25B: 	dc.b $2
00025714 E37B                       	dc.b $E3, $7B
00025716 054A                       	dc.b $5, $4A
00025718 03                         DPLC_2d5b_260: 	dc.b $3
00025719 B38A                       	dc.b $B3, $8A
0002571B 1396                       	dc.b $13, $96
0002571D 0398                       	dc.b $3, $98
0002571F 04                         DPLC_2d5b_267: 	dc.b $4
00025720 B399                       	dc.b $B3, $99
00025722 33A5                       	dc.b $33, $A5
00025724 03A9                       	dc.b $3, $A9
00025726 03AA                       	dc.b $3, $AA
00025728 04                         DPLC_2d5b_270: 	dc.b $4
00025729 B3AB                       	dc.b $B3, $AB
0002572B 33B7                       	dc.b $33, $B7
0002572D 03BB                       	dc.b $3, $BB
0002572F 03BC                       	dc.b $3, $BC
00025731 05                         DPLC_2d5b_279: 	dc.b $5
00025732 83BD                       	dc.b $83, $BD
00025734 13C6                       	dc.b $13, $C6
00025736 53C8                       	dc.b $53, $C8
00025738 13CE                       	dc.b $13, $CE
0002573A 03D0                       	dc.b $3, $D0
0002573C 05                         DPLC_2d5b_284: 	dc.b $5
0002573D 83D1                       	dc.b $83, $D1
0002573F 13DA                       	dc.b $13, $DA
00025741 53C8                       	dc.b $53, $C8
00025743 13CE                       	dc.b $13, $CE
00025745 03D0                       	dc.b $3, $D0
00025747 02                         DPLC_2d5b_28F: 	dc.b $2
00025748 83DC                       	dc.b $83, $DC
0002574A 73E5                       	dc.b $73, $E5
0002574C 03                         DPLC_2d5b_294: 	dc.b $3
0002574D 83ED                       	dc.b $83, $ED
0002574F 23F6                       	dc.b $23, $F6
00025751 13F9                       	dc.b $13, $F9
00025753 02                         DPLC_2d5b_29B: 	dc.b $2
00025754 83FB                       	dc.b $83, $FB
00025756 7404                       	dc.b $74, $4
00025758 03                         DPLC_2d5b_2A0: 	dc.b $3
00025759 83ED                       	dc.b $83, $ED
0002575B 240C                       	dc.b $24, $C
0002575D 140F                       	dc.b $14, $F
0002575F 02                         DPLC_2d5b_2A7: 	dc.b $2
00025760 5411                       	dc.b $54, $11
00025762 B417                       	dc.b $B4, $17
00025764 03                         DPLC_2d5b_2AC: 	dc.b $3
00025765 8423                       	dc.b $84, $23
00025767 342C                       	dc.b $34, $2C
00025769 0430                       	dc.b $4, $30
0002576B 03                         DPLC_2d5b_2B3: 	dc.b $3
0002576C 7431                       	dc.b $74, $31
0002576E 1439                       	dc.b $14, $39
00025770 B43B                       	dc.b $B4, $3B
00025772 05                         DPLC_2d5b_2BA: 	dc.b $5
00025773 7447                       	dc.b $74, $47
00025775 144F                       	dc.b $14, $4F
00025777 5451                       	dc.b $54, $51
00025779 3457                       	dc.b $34, $57
0002577B 045B                       	dc.b $4, $5B
0002577D 05                         DPLC_2d5b_2C5: 	dc.b $5
0002577E 745C                       	dc.b $74, $5C
00025780 144F                       	dc.b $14, $4F
00025782 5464                       	dc.b $54, $64
00025784 3457                       	dc.b $34, $57
00025786 045B                       	dc.b $4, $5B
00025788 02                         DPLC_2d5b_2D0: 	dc.b $2
00025789 246A                       	dc.b $24, $6A
0002578B F46D                       	dc.b $F4, $6D
0002578D 03                         DPLC_2d5b_2D5: 	dc.b $3
0002578E 247D                       	dc.b $24, $7D
00025790 B480                       	dc.b $B4, $80
00025792 248C                       	dc.b $24, $8C
00025794 01                         DPLC_2d5b_2DC: 	dc.b $1
00025795 B48F                       	dc.b $B4, $8F
00025797 01                         DPLC_2d5b_2DF: 	dc.b $1
00025798 549B                       	dc.b $54, $9B
0002579A 01                         DPLC_2d5b_2E2: 	dc.b $1
0002579B 14A1                       	dc.b $14, $A1
0002579D 02                         DPLC_2d5b_2E5: 	dc.b $2
0002579E E356                       	dc.b $E3, $56
000257A0 054A                       	dc.b $5, $4A
000257A2 03                         DPLC_2d5b_2EA: 	dc.b $3
000257A3 736E                       	dc.b $73, $6E
000257A5 0376                       	dc.b $3, $76
000257A7 3377                       	dc.b $33, $77
000257A9 03                         DPLC_2d5b_2F1: 	dc.b $3
000257AA B4A3                       	dc.b $B4, $A3
000257AC 14AF                       	dc.b $14, $AF
000257AE 34B1                       	dc.b $34, $B1
000257B0 03                         DPLC_2d5b_2F8: 	dc.b $3
000257B1 54B5                       	dc.b $54, $B5
000257B3 B4BB                       	dc.b $B4, $BB
000257B5 1074                       	dc.b $10, $74
000257B7 02                         DPLC_2d5b_2FF: 	dc.b $2
000257B8 F4C7                       	dc.b $F4, $C7
000257BA 24D7                       	dc.b $24, $D7
000257BC 02                         DPLC_2d5b_304: 	dc.b $2
000257BD F4DA                       	dc.b $F4, $DA
000257BF 14EA                       	dc.b $14, $EA
000257C1 02                         DPLC_2d5b_309: 	dc.b $2
000257C2 F502                       	dc.b $F5, $2
000257C4 2512                       	dc.b $25, $12
000257C6 02                         DPLC_2d5b_30E: 	dc.b $2
000257C7 F515                       	dc.b $F5, $15
000257C9 2525                       	dc.b $25, $25
000257CB 02                         DPLC_2d5b_313: 	dc.b $2
000257CC F54B                       	dc.b $F5, $4B
000257CE 755B                       	dc.b $75, $5B
000257D0                            	even
000257D0                            	even
000257D0                            
000257D0                            ; ---------------------------------------------------------------------------
000257D0                            ; Uncompressed graphics	- Sonic
000257D0                            ; ---------------------------------------------------------------------------
000257D0                            Art_Sonic:	incbin	artunc\sonic.bin	; Sonic
000303F0                            		even
000303F0                            ; ---------------------------------------------------------------------------
000303F0                            ; Compressed graphics - various
000303F0                            ; ---------------------------------------------------------------------------
000303F0                            Nem_Smoke:	incbin	artnem\xxxsmoke.bin	; unused smoke
000304F4                            		even
000304F4                            Nem_SyzSparkle:	incbin	artnem\xxxstars.bin	; unused stars
0003052E                            		even
0003052E                            Nem_Shield:	incbin	artnem\shield.bin	; shield
000306C4                            		even
000306C4                            Nem_Stars:	incbin	artnem\invstars.bin	; invincibility stars
0003080C                            		even
0003080C                            Nem_LzSonic:	incbin	artnem\xxxlzson.bin	; unused LZ Sonic holding his breath
00030916                            		even
00030916                            Nem_UnkFire:	incbin	artnem\xxxfire.bin	; unused fireball
00030968                            		even
00030968                            Nem_Warp:	incbin	artnem\xxxflash.bin	; unused entry to special stage flash
00030BB0                            		even
00030BB0                            Nem_Goggle:	incbin	artnem\xxxgoggl.bin	; unused goggles
00030D36                            		even
00030D36                            ; ---------------------------------------------------------------------------
00030D36                            ; Sprite mappings - walls of the special stage
00030D36                            ; ---------------------------------------------------------------------------
00030D36                            Map_SSWalls:
00030D36                            	include "_maps\SSwalls.asm"
00030D36                            ; ---------------------------------------------------------------------------
00030D36                            ; Sprite mappings - walls of the special stage
00030D36                            ; ---------------------------------------------------------------------------
00030D36 0000 0000                  		dc.w byte_2C584-Map_SSWalls, byte_2C58A-Map_SSWalls
00030D3A 0000 0000                  		dc.w byte_2C590-Map_SSWalls, byte_2C596-Map_SSWalls
00030D3E 0000 0000                  		dc.w byte_2C59C-Map_SSWalls, byte_2C5A2-Map_SSWalls
00030D42 0000 0000                  		dc.w byte_2C5A8-Map_SSWalls, byte_2C5AE-Map_SSWalls
00030D46 0000 0000                  		dc.w byte_2C5B4-Map_SSWalls, byte_2C5BA-Map_SSWalls
00030D4A 0000 0000                  		dc.w byte_2C5C0-Map_SSWalls, byte_2C5C6-Map_SSWalls
00030D4E 0000 0000                  		dc.w byte_2C5CC-Map_SSWalls, byte_2C5D2-Map_SSWalls
00030D52 0000 0000                  		dc.w byte_2C5D8-Map_SSWalls, byte_2C5DE-Map_SSWalls
00030D56 01                         byte_2C584:	dc.b 1
00030D57 F40A 0000 F4               		dc.b $F4, $A, 0, 0, $F4
00030D5C 01                         byte_2C58A:	dc.b 1
00030D5D F00F 0009 F0               		dc.b $F0, $F, 0, 9, $F0
00030D62 01                         byte_2C590:	dc.b 1
00030D63 F00F 0019 F0               		dc.b $F0, $F, 0, $19, $F0
00030D68 01                         byte_2C596:	dc.b 1
00030D69 F00F 0029 F0               		dc.b $F0, $F, 0, $29, $F0
00030D6E 01                         byte_2C59C:	dc.b 1
00030D6F F00F 0039 F0               		dc.b $F0, $F, 0, $39, $F0
00030D74 01                         byte_2C5A2:	dc.b 1
00030D75 F00F 0049 F0               		dc.b $F0, $F, 0, $49, $F0
00030D7A 01                         byte_2C5A8:	dc.b 1
00030D7B F00F 0059 F0               		dc.b $F0, $F, 0, $59, $F0
00030D80 01                         byte_2C5AE:	dc.b 1
00030D81 F00F 0069 F0               		dc.b $F0, $F, 0, $69, $F0
00030D86 01                         byte_2C5B4:	dc.b 1
00030D87 F00F 0079 F0               		dc.b $F0, $F, 0, $79, $F0
00030D8C 01                         byte_2C5BA:	dc.b 1
00030D8D F00F 0089 F0               		dc.b $F0, $F, 0, $89, $F0
00030D92 01                         byte_2C5C0:	dc.b 1
00030D93 F00F 0099 F0               		dc.b $F0, $F, 0, $99, $F0
00030D98 01                         byte_2C5C6:	dc.b 1
00030D99 F00F 00A9 F0               		dc.b $F0, $F, 0, $A9, $F0
00030D9E 01                         byte_2C5CC:	dc.b 1
00030D9F F00F 00B9 F0               		dc.b $F0, $F, 0, $B9, $F0
00030DA4 01                         byte_2C5D2:	dc.b 1
00030DA5 F00F 00C9 F0               		dc.b $F0, $F, 0, $C9, $F0
00030DAA 01                         byte_2C5D8:	dc.b 1
00030DAB F00F 00D9 F0               		dc.b $F0, $F, 0, $D9, $F0
00030DB0 01                         byte_2C5DE:	dc.b 1
00030DB1 F00F 00E9 F0               		dc.b $F0, $F, 0, $E9, $F0
00030DB6                            		even
00030DB6                            		even
00030DB6                            ; ---------------------------------------------------------------------------
00030DB6                            ; Compressed graphics - special stage
00030DB6                            ; ---------------------------------------------------------------------------
00030DB6                            Nem_SSWalls:	incbin	artnem\sswalls.bin	; special stage walls
000316EE                            		even
000316EE                            Eni_SSBg1:	incbin	mapeni\ssbg1.bin	; special stage background (mappings)
0003183C                            		even
0003183C                            Nem_SSBgFish:	incbin	artnem\ssbg1.bin	; special stage birds and fish background
00032CCE                            		even
00032CCE                            Eni_SSBg2:	incbin	mapeni\ssbg2.bin	; special stage background (mappings)
00032FCE                            		even
00032FCE                            Nem_SSBgCloud:	incbin	artnem\ssbg2.bin	; special stage clouds background
000334C2                            		even
000334C2                            Nem_SSGOAL:	incbin	artnem\ssgoal.bin	; special stage GOAL block
000335B0                            		even
000335B0                            Nem_SSRBlock:	incbin	artnem\ssr.bin		; special stage R block
00033680                            		even
00033680                            Nem_SS1UpBlock:	incbin	artnem\ss1up.bin	; special stage 1UP block
00033776                            		even
00033776                            Nem_SSEmStars:	incbin	artnem\ssemstar.bin	; special stage stars from a collected emerald
000337D4                            		even
000337D4                            Nem_SSRedWhite:	incbin	artnem\ssredwhi.bin	; special stage red/white block
00033866                            		even
00033866                            Nem_SSZone1:	incbin	artnem\sszone1.bin	; special stage ZONE1 block
00033928                            		even
00033928                            Nem_SSZone2:	incbin	artnem\sszone2.bin	; ZONE2 block
000339F6                            		even
000339F6                            Nem_SSZone3:	incbin	artnem\sszone3.bin	; ZONE3 block
00033AC2                            		even
00033AC2                            Nem_SSZone4:	incbin	artnem\sszone4.bin	; ZONE4 block
00033B8A                            		even
00033B8A                            Nem_SSZone5:	incbin	artnem\sszone5.bin	; ZONE5 block
00033C54                            		even
00033C54                            Nem_SSZone6:	incbin	artnem\sszone6.bin	; ZONE6 block
00033D24                            		even
00033D24                            Nem_SSUpDown:	incbin	artnem\ssupdown.bin	; special stage UP/DOWN block
00033F18                            		even
00033F18                            Nem_SSEmerald:	incbin	artnem\ssemeral.bin	; special stage chaos emeralds
00034080                            		even
00034080                            Nem_SSGhost:	incbin	artnem\ssghost.bin	; special stage ghost block
00034130                            		even
00034130                            Nem_SSWBlock:	incbin	artnem\ssw.bin		; special stage W block
0003420A                            		even
0003420A                            Nem_SSGlass:	incbin	artnem\ssglass.bin	; special stage destroyable glass block
0003428E                            		even
0003428E                            Nem_ResultEm:	incbin	artnem\ssresems.bin	; chaos emeralds on special stage results screen
0003440C                            		even
0003440C                            ; ---------------------------------------------------------------------------
0003440C                            ; Compressed graphics - GHZ stuff
0003440C                            ; ---------------------------------------------------------------------------
0003440C                            Nem_Stalk:	incbin	artnem\ghzstalk.bin	; GHZ flower stalk
00034456                            		even
00034456                            Nem_Swing:	incbin	artnem\ghzswing.bin	; GHZ swinging platform
00034570                            		even
00034570                            Nem_Bridge:	incbin	artnem\ghzbridg.bin	; GHZ bridge
0003465C                            		even
0003465C                            Nem_GhzUnkBlock:incbin	artnem\xxxghzbl.bin	; unused GHZ block
000346A4                            		even
000346A4                            Nem_Ball:	incbin	artnem\ghzball.bin	; GHZ giant ball
00034842                            		even
00034842                            Nem_Spikes:	incbin	artnem\spikes.bin	; spikes
000348FE                            		even
000348FE                            Nem_GhzLog:	incbin	artnem\xxxghzlo.bin	; unused GHZ log
00034B12                            		even
00034B12                            Nem_SpikePole:	incbin	artnem\ghzlog.bin	; GHZ spiked log
00034C3E                            		even
00034C3E                            Nem_PplRock:	incbin	artnem\ghzrock.bin	; GHZ purple rock
00034D6C                            		even
00034D6C                            Nem_GhzWall1:	incbin	artnem\ghzwall1.bin	; GHZ destroyable wall
00034E0A                            		even
00034E0A                            Nem_GhzWall2:	incbin	artnem\ghzwall2.bin	; GHZ normal wall
00034E6A                            		even
00034E6A                            ; ---------------------------------------------------------------------------
00034E6A                            ; Compressed graphics - LZ stuff
00034E6A                            ; ---------------------------------------------------------------------------
00034E6A                            Nem_Water:	incbin	artnem\lzwater.bin	; LZ water surface
00034F8E                            		even
00034F8E                            Nem_Splash:	incbin	artnem\lzsplash.bin	; LZ waterfalls and splashes
00035782                            		even
00035782                            Nem_LzSpikeBall:incbin	artnem\lzspball.bin	; LZ spiked ball on chain
00035902                            		even
00035902                            Nem_FlapDoor:	incbin	artnem\lzflapdo.bin	; LZ flapping door
00035A6C                            		even
00035A6C                            Nem_Bubbles:	incbin	artnem\lzbubble.bin	; LZ bubbles and countdown numbers
000360C2                            		even
000360C2                            Nem_LzBlock3:	incbin	artnem\lzblock3.bin	; LZ 32x16 block
00036178                            		even
00036178                            Nem_LzDoor1:	incbin	artnem\lzvdoor.bin	; LZ vertical door
0003621A                            		even
0003621A                            Nem_Harpoon:	incbin	artnem\lzharpoo.bin	; LZ harpoon
00036376                            		even
00036376                            Nem_LzPole:	incbin	artnem\lzpole.bin	; LZ pole that breaks
000363DA                            		even
000363DA                            Nem_LzDoor2:	incbin	artnem\lzhdoor.bin	; LZ large horizontal door
0003652C                            		even
0003652C                            Nem_LzWheel:	incbin	artnem\lzwheel.bin	; LZ wheel from corner of conveyor belt
00036A0E                            		even
00036A0E                            Nem_Gargoyle:	incbin	artnem\lzgargoy.bin	; LZ gargoyle head and spitting fire
00036B7E                            		even
00036B7E                            Nem_LzBlock2:	incbin	artnem\lzblock2.bin	; LZ blocks
00036E36                            		even
00036E36                            Nem_LzPlatfm:	incbin	artnem\lzptform.bin	; LZ rising platforms
00036F6E                            		even
00036F6E                            Nem_Cork:	incbin	artnem\lzcork.bin	; LZ cork block
00037098                            		even
00037098                            Nem_LzBlock1:	incbin	artnem\lzblock1.bin	; LZ 32x32 block
000371A8                            		even
000371A8                            ; ---------------------------------------------------------------------------
000371A8                            ; Compressed graphics - MZ stuff
000371A8                            ; ---------------------------------------------------------------------------
000371A8                            Nem_MzMetal:	incbin	artnem\mzmetal.bin	; MZ metal blocks
00037436                            		even
00037436                            Nem_MzSwitch:	incbin	artnem\mzswitch.bin	; MZ switch
000374F4                            		even
000374F4                            Nem_MzGlass:	incbin	artnem\mzglassy.bin	; MZ green glassy block
000375AC                            		even
000375AC                            Nem_GhzGrass:	incbin	artnem\xxxgrass.bin	; unused grass (GHZ or MZ?)
00037600                            		even
00037600                            Nem_MzFire:	incbin	artnem\mzfire.bin	; MZ fireballs
000378D2 00                         		even
000378D2                            Nem_Lava:	incbin	artnem\mzlava.bin	; MZ lava
000381E8                            		even
000381E8                            Nem_MzBlock:	incbin	artnem\mzblock.bin	; MZ green pushable block
0003834C                            		even
0003834C                            Nem_MzUnkBlock:	incbin	artnem\xxxmzblo.bin	; MZ unused background block
000383D4                            		even
000383D4                            ; ---------------------------------------------------------------------------
000383D4                            ; Compressed graphics - SLZ stuff
000383D4                            ; ---------------------------------------------------------------------------
000383D4                            Nem_Seesaw:	incbin	artnem\slzseesa.bin	; SLZ seesaw
00038610                            		even
00038610                            Nem_SlzSpike:	incbin	artnem\slzspike.bin	; SLZ spikeball that sits on a seesaw
00038756                            		even
00038756                            Nem_Fan:	incbin	artnem\slzfan.bin	; SLZ fan
0003899A                            		even
0003899A                            Nem_SlzWall:	incbin	artnem\slzwall.bin	; SLZ smashable wall
000389FC                            		even
000389FC                            Nem_Pylon:	incbin	artnem\slzpylon.bin	; SLZ foreground pylon
00038ADE                            		even
00038ADE                            Nem_SlzSwing:	incbin	artnem\slzswing.bin	; SLZ swinging platform
00038CC0                            		even
00038CC0                            Nem_SlzBlock:	incbin	artnem\slzblock.bin	; SLZ 32x32 block
00038DCC                            		even
00038DCC                            Nem_SlzCannon:	incbin	artnem\slzcanno.bin	; SLZ fireball launcher cannon
00038E70                            		even
00038E70                            ; ---------------------------------------------------------------------------
00038E70                            ; Compressed graphics - SYZ stuff
00038E70                            ; ---------------------------------------------------------------------------
00038E70                            Nem_Bumper:	incbin	artnem\syzbumpe.bin	; SYZ bumper
00038FDA                            		even
00038FDA                            Nem_SyzSpike2:	incbin	artnem\syzsspik.bin	; SYZ small spikeball
0003903C                            		even
0003903C                            Nem_LzSwitch:	incbin	artnem\switch.bin	; LZ/SYZ/SBZ switch
0003911E                            		even
0003911E                            Nem_SyzSpike1:	incbin	artnem\syzlspik.bin	; SYZ/SBZ large spikeball
000393AC                            		even
000393AC                            ; ---------------------------------------------------------------------------
000393AC                            ; Compressed graphics - SBZ stuff
000393AC                            ; ---------------------------------------------------------------------------
000393AC                            Nem_SbzWheel1:	incbin	artnem\sbzwhee1.bin	; SBZ spot on rotating wheel that Sonic runs around
00039400                            		even
00039400                            Nem_SbzWheel2:	incbin	artnem\sbzwhee2.bin	; SBZ wheel that grabs Sonic
0003969C                            		even
0003969C                            Nem_Cutter:	incbin	artnem\sbzcutte.bin	; SBZ pizza cutter
000398A0                            		even
000398A0                            Nem_Stomper:	incbin	artnem\sbzstomp.bin	; SBZ stomper
00039A3E                            		even
00039A3E                            Nem_SpinPform:	incbin	artnem\sbzpform.bin	; SBZ spinning platform
00039D6E                            		even
00039D6E                            Nem_TrapDoor:	incbin	artnem\sbztrapd.bin	; SBZ trapdoor
00039F4C                            		even
00039F4C                            Nem_SbzFloor:	incbin	artnem\sbzfloor.bin	; SBZ collapsing floor
00039FA4                            		even
00039FA4                            Nem_Electric:	incbin	artnem\sbzshock.bin	; SBZ electric shock orb
0003A16E 00                         		even
0003A16E                            Nem_SbzBlock:	incbin	artnem\sbzvanis.bin	; SBZ vanishing block
0003A26C                            		even
0003A26C                            Nem_FlamePipe:	incbin	artnem\sbzflame.bin	; SBZ flaming pipe
0003A3F8                            		even
0003A3F8                            Nem_SbzDoor1:	incbin	artnem\sbzvdoor.bin	; SBZ small vertical door
0003A448                            		even
0003A448                            Nem_SlideFloor:	incbin	artnem\sbzslide.bin	; SBZ floor that slides away
0003A4A0                            		even
0003A4A0                            Nem_SbzDoor2:	incbin	artnem\sbzhdoor.bin	; SBZ large horizontal door
0003A59C                            		even
0003A59C                            Nem_Girder:	incbin	artnem\sbzgirde.bin	; SBZ crushing girder
0003A6B2                            		even
0003A6B2                            ; ---------------------------------------------------------------------------
0003A6B2                            ; Compressed graphics - enemies
0003A6B2                            ; ---------------------------------------------------------------------------
0003A6B2                            Nem_BallHog:	incbin	artnem\ballhog.bin	; ball hog
0003AB20 00                         		even
0003AB20                            Nem_Crabmeat:	incbin	artnem\crabmeat.bin	; crabmeat
0003ACCA 00                         		even
0003ACCA                            Nem_Buzz:	incbin	artnem\buzzbomb.bin	; buzz bomber
0003B08C 00                         		even
0003B08C                            Nem_UnkExplode:	incbin	artnem\xxxexplo.bin	; unused explosion
0003B274                            		even
0003B274                            Nem_Burrobot:	incbin	artnem\burrobot.bin	; burrobot
0003B42C 00                         		even
0003B42C                            Nem_Chopper:	incbin	artnem\chopper.bin	; chopper
0003B576                            		even
0003B576                            Nem_Jaws:	incbin	artnem\jaws.bin		; jaws
0003B800                            		even
0003B800                            Nem_Roller:	incbin	artnem\roller.bin	; roller
0003BE24                            		even
0003BE24                            Nem_Motobug:	incbin	artnem\motobug.bin	; moto bug
0003C01A                            		even
0003C01A                            Nem_Newtron:	incbin	artnem\newtron.bin	; newtron
0003C638                            		even
0003C638                            Nem_Yadrin:	incbin	artnem\yadrin.bin	; yadrin
0003CA38 00                         		even
0003CA38                            Nem_Basaran:	incbin	artnem\basaran.bin	; basaran
0003CD34                            		even
0003CD34                            Nem_Splats:	incbin	artnem\splats.bin	; splats
0003CF7C                            		even
0003CF7C                            Nem_Bomb:	incbin	artnem\bomb.bin		; bomb
0003D214                            		even
0003D214                            Nem_Orbinaut:	incbin	artnem\orbinaut.bin	; orbinaut
0003D3F2                            		even
0003D3F2                            Nem_Cater:	incbin	artnem\caterkil.bin	; caterkiller
0003D580                            		even
0003D580                            ; ---------------------------------------------------------------------------
0003D580                            ; Compressed graphics - various
0003D580                            ; ---------------------------------------------------------------------------
0003D580                            Nem_TitleCard:	incbin	artnem\ttlcards.bin	; title cards
0003DAC8 00                         		even
0003DAC8                            Nem_Hud:	incbin	artnem\hud.bin		; HUD (rings, time, score)
0003DBBE                            		even
0003DBBE                            Nem_Lives:	incbin	artnem\lifeicon.bin	; life counter icon
0003DCC4                            		even
0003DCC4                            Nem_Ring:	incbin	artnem\rings.bin	; rings
0003DDB8                            		even
0003DDB8                            Nem_Monitors:	incbin	artnem\monitors.bin	; monitors
0003E2FC                            		even
0003E2FC                            Nem_Explode:	incbin	artnem\explosio.bin	; explosion
0003E962                            		even
0003E962                            Nem_Points:	incbin	artnem\points.bin	; points from destroyed enemy or object
0003EA12                            		even
0003EA12                            Nem_GameOver:	incbin	artnem\gameover.bin	; game over / time over
0003EBA4                            		even
0003EBA4                            Nem_HSpring:	incbin	artnem\springh.bin	; horizontal spring
0003ECB8                            		even
0003ECB8                            Nem_VSpring:	incbin	artnem\springv.bin	; vertical spring
0003ED8A                            		even
0003ED8A                            Nem_SignPost:	incbin	artnem\signpost.bin	; end of level signpost
0003F206                            		even
0003F206                            Nem_Lamp:	incbin	artnem\lamppost.bin	; lamppost
0003F2C6                            		even
0003F2C6                            Nem_BigFlash:	incbin	artnem\rngflash.bin	; flash from giant ring
0003F43A                            		even
0003F43A                            Nem_Bonus:	incbin	artnem\bonus.bin	; hidden bonuses at end of a level
0003F73C                            		even
0003F73C                            ; ---------------------------------------------------------------------------
0003F73C                            ; Compressed graphics - continue screen
0003F73C                            ; ---------------------------------------------------------------------------
0003F73C                            Nem_ContSonic:	incbin	artnem\cntsonic.bin	; Sonic on continue screen
0003F9EC                            		even
0003F9EC                            Nem_MiniSonic:	incbin	artnem\cntother.bin	; mini Sonic and text on continue screen
0003FC26                            		even
0003FC26                            ; ---------------------------------------------------------------------------
0003FC26                            ; Compressed graphics - animals
0003FC26                            ; ---------------------------------------------------------------------------
0003FC26                            Nem_Rabbit:	incbin	artnem\rabbit.bin	; rabbit
0003FD7E                            		even
0003FD7E                            Nem_Chicken:	incbin	artnem\chicken.bin	; chicken
0003FEDA                            		even
0003FEDA                            Nem_BlackBird:	incbin	artnem\blackbrd.bin	; blackbird
00040056                            		even
00040056                            Nem_Seal:	incbin	artnem\seal.bin		; seal
00040172                            		even
00040172                            Nem_Pig:	incbin	artnem\pig.bin		; pig
000402A8                            		even
000402A8                            Nem_Flicky:	incbin	artnem\flicky.bin	; flicky
000403E2                            		even
000403E2                            Nem_Squirrel:	incbin	artnem\squirrel.bin	; squirrel
0004053E                            		even
0004053E                            ; ---------------------------------------------------------------------------
0004053E                            ; Compressed graphics - primary patterns and block mappings
0004053E                            ; ---------------------------------------------------------------------------
0004053E                            Blk16_GHZ:	incbin	map16\ghz.bin
00040E52                            		even
00040E52                            Nem_GHZ_1st:	incbin	artnem\8x8ghz1.bin	; GHZ primary patterns
00042760                            		even
00042760                            Nem_GHZ_2nd:	incbin	artnem\8x8ghz2.bin	; GHZ secondary patterns
00043AE0                            		even
00043AE0                            Blk256_GHZ:	incbin	map256\ghz.bin
00045DDE                            		even
00045DDE                            Blk16_LZ:	incbin	map16\lz.bin
00046518                            		even
00046518                            Nem_LZ:		incbin	artnem\8x8lz.bin	; LZ primary patterns
0004891E                            		even
0004891E                            Blk256_LZ:	incbin	map256\lz.bin
0004B29E                            		even
0004B29E                            Blk16_MZ:	incbin	map16\mz.bin
0004B9FA                            		even
0004B9FA                            Nem_MZ:		incbin	artnem\8x8mz.bin	; MZ primary patterns
0004E282                            		even
0004E282                            Blk256_MZ:	incbin	map256\mz.bin
0004FA06                            		even
0004FA06                            Blk16_SLZ:	incbin	map16\slz.bin
000500D0                            		even
000500D0                            Nem_SLZ:	incbin	artnem\8x8slz.bin	; SLZ primary patterns
00052024                            		even
00052024                            Blk256_SLZ:	incbin	map256\slz.bin
0005269E                            		even
0005269E                            Blk16_SYZ:	incbin	map16\syz.bin
000532C4                            		even
000532C4                            Nem_SYZ:	incbin	artnem\8x8syz.bin	; SYZ primary patterns
00057856                            		even
00057856                            Blk256_SYZ:	incbin	map256\syz.bin
000598B2                            		even
000598B2                            Blk16_SBZ:	incbin	map16\sbz.bin
0005A7FA                            		even
0005A7FA                            Nem_SBZ:	incbin	artnem\8x8sbz.bin	; SBZ primary patterns
0005D1BE                            		even
0005D1BE                            Blk256_SBZ:	incbin	map256\sbz.bin
0005FCB4                            		even
0005FCB4                            ; ---------------------------------------------------------------------------
0005FCB4                            ; Compressed graphics - bosses and ending sequence
0005FCB4                            ; ---------------------------------------------------------------------------
0005FCB4                            Nem_Eggman:	incbin	artnem\bossmain.bin	; boss main patterns
000604CE 00                         		even
000604CE                            Nem_Tetoboss:	incbin	artnem\TetoBoss.bin	; boss main patterns
00060B1C                            		even
00060B1C                            Nem_Peartobomb:	incbin	artnem\peartobomb.bin	; boss main patterns
00060B96                            		even
00060B96                            Nem_Weapons:	incbin	artnem\bossxtra.bin	; boss add-ons and weapons
00060E80                            		even
00060E80                            Nem_Prison:	incbin	artnem\prison.bin	; prison capsule
00061704                            		even
00061704                            Nem_Sbz2Eggman:	incbin	artnem\sbz2boss.bin	; Eggman in SBZ2 and FZ
0006245A 00                         		even
0006245A                            Nem_FzBoss:	incbin	artnem\fzboss.bin	; FZ boss
00062BC2                            		even
00062BC2                            Nem_FzEggman:	incbin	artnem\fzboss2.bin	; Eggman after the FZ boss
00063142                            		even
00063142                            Nem_Exhaust:	incbin	artnem\bossflam.bin	; boss exhaust flame
00063262                            		even
00063262                            Nem_EndEm:	incbin	artnem\endemera.bin	; ending sequence chaos emeralds
00063460                            		even
00063460                            Nem_EndSonic:	incbin	artnem\endsonic.bin	; ending sequence Sonic
0006463E                            		even
0006463E                            Nem_TryAgain:	incbin	artnem\tryagain.bin	; ending "try again" screen
00064F82                            		even
00064F82                            Nem_EndEggman:	incbin	artnem\xxxend.bin	; unused boss sequence on ending
00065358                            		even
00065358                            Kos_EndFlowers:	incbin	artkos\flowers.bin	; ending sequence animated flowers
000658E8                            		even
000658E8                            Nem_EndFlower:	incbin	artnem\endflowe.bin	; ending sequence flowers
00065B70                            		even
00065B70                            Nem_CreditText:	incbin	artnem\credits.bin	; credits alphabet
0006615E 00                         		even
0006615E                            Nem_EndStH:	incbin	artnem\endtext.bin	; ending sequence "Sonic the Hedgehog" text
000663E6                            		even
000663E6                            		incbin	misc\padding2.bin
000664EA                            		even
000664EA                            ; ---------------------------------------------------------------------------
000664EA                            ; Collision data
000664EA                            ; ---------------------------------------------------------------------------
000664EA                            AngleMap:	incbin	collide\anglemap.bin	; floor angle map
000665EA                            		even
000665EA                            CollArray1:	incbin	collide\carray_n.bin	; normal collision array
000675EA                            		even
000675EA                            CollArray2:	incbin	collide\carray_r.bin	; rotated collision array
000685EA                            		even
000685EA                            Col_GHZ:	incbin	collide\ghz.bin		; GHZ index
000687A2 00                         		even
000687A2                            Col_LZ:		incbin	collide\lz.bin		; LZ index
0006890A                            		even
0006890A                            Col_MZ:		incbin	collide\mz.bin		; MZ index
00068A9A                            		even
00068A9A                            Col_SLZ:	incbin	collide\slz.bin		; SLZ index
00068C8E                            		even
00068C8E                            Col_SYZ:	incbin	collide\syz.bin		; SYZ index
00068E94                            		even
00068E94                            Col_SBZ:	incbin	collide\sbz.bin		; SBZ index
00069132                            		even
00069132                            ; ---------------------------------------------------------------------------
00069132                            ; Special layouts
00069132                            ; ---------------------------------------------------------------------------
00069132                            SS_1:		incbin	sslayout\1.bin
000693AC                            		even
000693AC                            SS_2:		incbin	sslayout\2.bin
000697BE                            		even
000697BE                            SS_3:		incbin	sslayout\3.bin
00069B1A                            		even
00069B1A                            SS_4:		incbin	sslayout\4.bin
00069FF4                            		even
00069FF4                            SS_5:		incbin	sslayout\5.bin
0006A4C6                            		even
0006A4C6                            SS_6:		incbin	sslayout\6.bin
0006A7D6                            		even
0006A7D6                            ; ---------------------------------------------------------------------------
0006A7D6                            ; Animated uncompressed graphics
0006A7D6                            ; ---------------------------------------------------------------------------
0006A7D6                            Art_GhzWater:	incbin	artunc\ghzwater.bin	; GHZ waterfall
0006A9D6                            		even
0006A9D6                            Art_GhzFlower1:	incbin	artunc\ghzflowl.bin	; GHZ large flower
0006ADD6                            		even
0006ADD6                            Art_GhzFlower2:	incbin	artunc\ghzflows.bin	; GHZ small flower
0006B256                            		even
0006B256                            Art_MzLava1:	incbin	artunc\mzlava1.bin	; MZ lava surface
0006B556                            		even
0006B556                            Art_MzLava2:	incbin	artunc\mzlava2.bin	; MZ lava
0006BB56                            		even
0006BB56                            Art_MzTorch:	incbin	artunc\mztorch.bin	; MZ torch in background
0006BE56                            		even
0006BE56                            Art_SbzSmoke:	incbin	artunc\sbzsmoke.bin	; SBZ smoke in background
0006C8D6                            		even
0006C8D6                            
0006C8D6                            ; ---------------------------------------------------------------------------
0006C8D6                            ; Level	layout index
0006C8D6                            ; ---------------------------------------------------------------------------
0006C8D6 0000 0000 0000             Level_Index:	dc.w Level_GHZ1-Level_Index, Level_GHZbg-Level_Index, byte_68D70-Level_Index
0006C8DC 0000 0000 0000             		dc.w Level_GHZ2-Level_Index, Level_GHZbg-Level_Index, byte_68E3C-Level_Index
0006C8E2 0000 0000 0000             		dc.w Level_GHZ3-Level_Index, Level_GHZbg-Level_Index, byte_68F84-Level_Index
0006C8E8 0000 0000 0000             		dc.w byte_68F88-Level_Index, byte_68F88-Level_Index, byte_68F88-Level_Index
0006C8EE 0000 0000 0000             		dc.w Level_LZ1-Level_Index, Level_LZbg-Level_Index, byte_69190-Level_Index
0006C8F4 0000 0000 0000             		dc.w Level_LZ2-Level_Index, Level_LZbg-Level_Index, byte_6922E-Level_Index
0006C8FA 0000 0000 0000             		dc.w Level_LZ3-Level_Index, Level_LZbg-Level_Index, byte_6934C-Level_Index
0006C900 0000 0000 0000             		dc.w Level_SBZ3-Level_Index, Level_LZbg-Level_Index, byte_6940A-Level_Index
0006C906 0000 0000 0000             		dc.w Level_MZ1-Level_Index, Level_MZ1bg-Level_Index, Level_MZ1-Level_Index
0006C90C 0000 0000 0000             		dc.w Level_MZ2-Level_Index, Level_MZ2bg-Level_Index, byte_6965C-Level_Index
0006C912 0000 0000 0000             		dc.w Level_MZ3-Level_Index, Level_MZ3bg-Level_Index, byte_697E6-Level_Index
0006C918 0000 0000 0000             		dc.w byte_697EA-Level_Index, byte_697EA-Level_Index, byte_697EA-Level_Index
0006C91E 0000 0000 0000             		dc.w Level_SLZ1-Level_Index, Level_SLZbg-Level_Index, byte_69B84-Level_Index
0006C924 0000 0000 0000             		dc.w Level_SLZ2-Level_Index, Level_SLZbg-Level_Index, byte_69B84-Level_Index
0006C92A 0000 0000 0000             		dc.w Level_SLZ3-Level_Index, Level_SLZbg-Level_Index, byte_69B84-Level_Index
0006C930 0000 0000 0000             		dc.w byte_69B84-Level_Index, byte_69B84-Level_Index, byte_69B84-Level_Index
0006C936 0000 0000 0000             		dc.w Level_SYZ1-Level_Index, Level_SYZbg-Level_Index, byte_69C7E-Level_Index
0006C93C 0000 0000 0000             		dc.w Level_SYZ2-Level_Index, Level_SYZbg-Level_Index, byte_69D86-Level_Index
0006C942 0000 0000 0000             		dc.w Level_SYZ3-Level_Index, Level_SYZbg-Level_Index, byte_69EE4-Level_Index
0006C948 0000 0000 0000             		dc.w byte_69EE8-Level_Index, byte_69EE8-Level_Index, byte_69EE8-Level_Index
0006C94E 0000 0000 0000             		dc.w Level_SBZ1-Level_Index, Level_SBZ1bg-Level_Index, Level_SBZ1bg-Level_Index
0006C954 0000 0000 0000             		dc.w Level_SBZ2-Level_Index, Level_SBZ2bg-Level_Index, Level_SBZ2bg-Level_Index
0006C95A 0000 0000 0000             		dc.w Level_SBZ2-Level_Index, Level_SBZ2bg-Level_Index, byte_6A2F8-Level_Index
0006C960 0000 0000 0000             		dc.w byte_6A2FC-Level_Index, byte_6A2FC-Level_Index, byte_6A2FC-Level_Index
0006C966 0000 0000 0000             		dc.w Level_End-Level_Index, Level_GHZbg-Level_Index, byte_6A320-Level_Index
0006C96C 0000 0000 0000             		dc.w Level_End-Level_Index, Level_GHZbg-Level_Index, byte_6A320-Level_Index
0006C972 0000 0000 0000             		dc.w byte_6A320-Level_Index, byte_6A320-Level_Index, byte_6A320-Level_Index
0006C978 0000 0000 0000             		dc.w byte_6A320-Level_Index, byte_6A320-Level_Index, byte_6A320-Level_Index
0006C97E                            
0006C97E                            Level_GHZ1:	incbin	levels\ghz1.bin
0006CA70                            		even
0006CA70 0000 0000                  byte_68D70:	dc.b 0,	0, 0, 0
0006CA74                            Level_GHZ2:	incbin	levels\ghz2.bin
0006CB3C                            		even
0006CB3C 0000 0000                  byte_68E3C:	dc.b 0,	0, 0, 0
0006CB40                            Level_GHZ3:	incbin	levels\ghz3.bin
0006CC62                            		even
0006CC62                            Level_GHZbg:	incbin	levels\ghzbg.bin
0006CC84                            		even
0006CC84 0000 0000                  byte_68F84:	dc.b 0,	0, 0, 0
0006CC88 0000 0000                  byte_68F88:	dc.b 0,	0, 0, 0
0006CC8C                            
0006CC8C                            Level_LZ1:	incbin	levels\lz1.bin
0006CD8E                            		even
0006CD8E                            Level_LZbg:	incbin	levels\lzbg.bin
0006CE90                            		even
0006CE90 0000 0000                  byte_69190:	dc.b 0,	0, 0, 0
0006CE94                            Level_LZ2:	incbin	levels\lz2.bin
0006CF2E                            		even
0006CF2E 0000 0000                  byte_6922E:	dc.b 0,	0, 0, 0
0006CF32                            Level_LZ3:	incbin	levels\lz3.bin
0006D04C                            		even
0006D04C 0000 0000                  byte_6934C:	dc.b 0,	0, 0, 0
0006D050                            Level_SBZ3:	incbin	levels\sbz3.bin
0006D10A                            		even
0006D10A 0000 0000                  byte_6940A:	dc.b 0,	0, 0, 0
0006D10E                            
0006D10E                            Level_MZ1:	incbin	levels\mz1.bin
0006D1AC                            		even
0006D1AC                            Level_MZ1bg:	incbin	levels\mz1bg.bin
0006D226                            		even
0006D226                            Level_MZ2:	incbin	levels\mz2.bin
0006D2CA                            		even
0006D2CA                            Level_MZ2bg:	incbin	levels\mz2bg.bin
0006D35C                            		even
0006D35C 0000 0000                  byte_6965C:	dc.b 0,	0, 0, 0
0006D360                            Level_MZ3:	incbin	levels\mz3.bin
0006D442                            		even
0006D442                            Level_MZ3bg:	incbin	levels\mz3bg.bin
0006D4E6 00                         		even
0006D4E6 0000 0000                  byte_697E6:	dc.b 0,	0, 0, 0
0006D4EA 0000 0000                  byte_697EA:	dc.b 0,	0, 0, 0
0006D4EE                            
0006D4EE                            Level_SLZ1:	incbin	levels\slz1.bin
0006D600                            		even
0006D600                            Level_SLZbg:	incbin	levels\slzbg.bin
0006D61A                            		even
0006D61A                            Level_SLZ2:	incbin	levels\slz2.bin
0006D70A                            		even
0006D70A                            Level_SLZ3:	incbin	levels\slz3.bin
0006D824                            		even
0006D824 0000 0000                  byte_69B84:	dc.b 0,	0, 0, 0
0006D828                            
0006D828                            Level_SYZ1:	incbin	levels\syz1.bin
0006D8E4 00                         		even
0006D8E4                            Level_SYZbg:	incbin	levels\syzbg.bin
0006D91E                            		even
0006D91E 0000 0000                  byte_69C7E:	dc.b 0,	0, 0, 0
0006D922                            Level_SYZ2:	incbin	levels\syz2.bin
0006DA26                            		even
0006DA26 0000 0000                  byte_69D86:	dc.b 0,	0, 0, 0
0006DA2A                            Level_SYZ3:	incbin	levels\syz3.bin
0006DB84 00                         		even
0006DB84 0000 0000                  byte_69EE4:	dc.b 0,	0, 0, 0
0006DB88 0000 0000                  byte_69EE8:	dc.b 0,	0, 0, 0
0006DB8C                            
0006DB8C                            Level_SBZ1:	incbin	levels\sbz1.bin
0006DCAE                            		even
0006DCAE                            Level_SBZ1bg:	incbin	levels\sbz1bg.bin
0006DCEC                            		even
0006DCEC                            Level_SBZ2:	incbin	levels\sbz2.bin
0006DE2E                            		even
0006DE2E                            Level_SBZ2bg:	incbin	levels\sbz2bg.bin
0006DF98                            		even
0006DF98 0000 0000                  byte_6A2F8:	dc.b 0,	0, 0, 0
0006DF9C 0000 0000                  byte_6A2FC:	dc.b 0,	0, 0, 0
0006DFA0                            Level_End:	incbin	levels\ending.bin
0006DFD0 00                         		even
0006DFD0 0000 0000                  byte_6A320:	dc.b 0,	0, 0, 0
0006DFD4                            
0006DFD4                            ; ---------------------------------------------------------------------------
0006DFD4                            ; Animated uncompressed giant ring graphics
0006DFD4                            ; ---------------------------------------------------------------------------
0006DFD4                            Art_BigRing:	incbin	artunc\bigring.bin
0006EC14                            		even
0006EC14                            
0006EC14                            		incbin	misc\padding3.bin
0006ECB0                            		even
0006ECB0                            
0006ECB0                            ; ---------------------------------------------------------------------------
0006ECB0                            ; Sprite locations index
0006ECB0                            ; ---------------------------------------------------------------------------
0006ECB0 0000 0000                  ObjPos_Index:	dc.w ObjPos_GHZ1-ObjPos_Index, ObjPos_Null-ObjPos_Index
0006ECB4 0000 0000                  		dc.w ObjPos_GHZ2-ObjPos_Index, ObjPos_Null-ObjPos_Index
0006ECB8 0000 0000                  		dc.w ObjPos_GHZ3-ObjPos_Index, ObjPos_Null-ObjPos_Index
0006ECBC 0000 0000                  		dc.w ObjPos_GHZ1-ObjPos_Index, ObjPos_Null-ObjPos_Index
0006ECC0 0000 0000                  		dc.w ObjPos_LZ1-ObjPos_Index, ObjPos_Null-ObjPos_Index
0006ECC4 0000 0000                  		dc.w ObjPos_LZ2-ObjPos_Index, ObjPos_Null-ObjPos_Index
0006ECC8 0000 0000                  		dc.w ObjPos_LZ3-ObjPos_Index, ObjPos_Null-ObjPos_Index
0006ECCC 0000 0000                  		dc.w ObjPos_SBZ3-ObjPos_Index, ObjPos_Null-ObjPos_Index
0006ECD0 0000 0000                  		dc.w ObjPos_MZ1-ObjPos_Index, ObjPos_Null-ObjPos_Index
0006ECD4 0000 0000                  		dc.w ObjPos_MZ2-ObjPos_Index, ObjPos_Null-ObjPos_Index
0006ECD8 0000 0000                  		dc.w ObjPos_MZ3-ObjPos_Index, ObjPos_Null-ObjPos_Index
0006ECDC 0000 0000                  		dc.w ObjPos_MZ1-ObjPos_Index, ObjPos_Null-ObjPos_Index
0006ECE0 0000 0000                  		dc.w ObjPos_SLZ1-ObjPos_Index, ObjPos_Null-ObjPos_Index
0006ECE4 0000 0000                  		dc.w ObjPos_SLZ2-ObjPos_Index, ObjPos_Null-ObjPos_Index
0006ECE8 0000 0000                  		dc.w ObjPos_SLZ3-ObjPos_Index, ObjPos_Null-ObjPos_Index
0006ECEC 0000 0000                  		dc.w ObjPos_SLZ1-ObjPos_Index, ObjPos_Null-ObjPos_Index
0006ECF0 0000 0000                  		dc.w ObjPos_SYZ1-ObjPos_Index, ObjPos_Null-ObjPos_Index
0006ECF4 0000 0000                  		dc.w ObjPos_SYZ2-ObjPos_Index, ObjPos_Null-ObjPos_Index
0006ECF8 0000 0000                  		dc.w ObjPos_SYZ3-ObjPos_Index, ObjPos_Null-ObjPos_Index
0006ECFC 0000 0000                  		dc.w ObjPos_SYZ1-ObjPos_Index, ObjPos_Null-ObjPos_Index
0006ED00 0000 0000                  		dc.w ObjPos_SBZ1-ObjPos_Index, ObjPos_Null-ObjPos_Index
0006ED04 0000 0000                  		dc.w ObjPos_SBZ2-ObjPos_Index, ObjPos_Null-ObjPos_Index
0006ED08 0000 0000                  		dc.w ObjPos_FZ-ObjPos_Index, ObjPos_Null-ObjPos_Index
0006ED0C 0000 0000                  		dc.w ObjPos_SBZ1-ObjPos_Index, ObjPos_Null-ObjPos_Index
0006ED10 0000 0000                  		dc.w ObjPos_End-ObjPos_Index, ObjPos_Null-ObjPos_Index
0006ED14 0000 0000                  		dc.w ObjPos_End-ObjPos_Index, ObjPos_Null-ObjPos_Index
0006ED18 0000 0000                  		dc.w ObjPos_End-ObjPos_Index, ObjPos_Null-ObjPos_Index
0006ED1C 0000 0000                  		dc.w ObjPos_End-ObjPos_Index, ObjPos_Null-ObjPos_Index
0006ED20 0000 0000                  		dc.w ObjPos_LZ1pf1-ObjPos_Index, ObjPos_LZ1pf2-ObjPos_Index
0006ED24 0000 0000                  		dc.w ObjPos_LZ2pf1-ObjPos_Index, ObjPos_LZ2pf2-ObjPos_Index
0006ED28 0000 0000                  		dc.w ObjPos_LZ3pf1-ObjPos_Index, ObjPos_LZ3pf2-ObjPos_Index
0006ED2C 0000 0000                  		dc.w ObjPos_LZ1pf1-ObjPos_Index, ObjPos_LZ1pf2-ObjPos_Index
0006ED30 0000 0000                  		dc.w ObjPos_SBZ1pf1-ObjPos_Index, ObjPos_SBZ1pf2-ObjPos_Index
0006ED34 0000 0000                  		dc.w ObjPos_SBZ1pf3-ObjPos_Index, ObjPos_SBZ1pf4-ObjPos_Index
0006ED38 0000 0000                  		dc.w ObjPos_SBZ1pf5-ObjPos_Index, ObjPos_SBZ1pf6-ObjPos_Index
0006ED3C 0000 0000                  		dc.w ObjPos_SBZ1pf1-ObjPos_Index, ObjPos_SBZ1pf2-ObjPos_Index
0006ED40 FFFF 0000 0000             		dc.b $FF, $FF, 0, 0, 0,	0
0006ED46                            ObjPos_GHZ1:	incbin	objpos\ghz1.bin
0006F592                            		even
0006F592                            ObjPos_GHZ2:	incbin	objpos\ghz2.bin
0006F646                            		even
0006F646                            ObjPos_GHZ3:	incbin	objpos\ghz3.bin
0007008A                            		even
0007008A                            ObjPos_LZ1:	incbin	objpos\lz1.bin
00070432                            		even
00070432                            ObjPos_LZ2:	incbin	objpos\lz2.bin
00070768                            		even
00070768                            ObjPos_LZ3:	incbin	objpos\lz3.bin
00070C7E                            		even
00070C7E                            ObjPos_SBZ3:	incbin	objpos\sbz3.bin
00071116                            		even
00071116                            ObjPos_LZ1pf1:	incbin	objpos\lz1pf1.bin
00071148                            		even
00071148                            ObjPos_LZ1pf2:	incbin	objpos\lz1pf2.bin
0007117A                            		even
0007117A                            ObjPos_LZ2pf1:	incbin	objpos\lz2pf1.bin
000711AC                            		even
000711AC                            ObjPos_LZ2pf2:	incbin	objpos\lz2pf2.bin
000711DE                            		even
000711DE                            ObjPos_LZ3pf1:	incbin	objpos\lz3pf1.bin
00071228                            		even
00071228                            ObjPos_LZ3pf2:	incbin	objpos\lz3pf2.bin
00071266                            		even
00071266                            ObjPos_MZ1:	incbin	objpos\mz1.bin
000715D2                            		even
000715D2                            ObjPos_MZ2:	incbin	objpos\mz2.bin
00071A7C                            		even
00071A7C                            ObjPos_MZ3:	incbin	objpos\mz3.bin
00071FF2                            		even
00071FF2                            ObjPos_SLZ1:	incbin	objpos\slz1.bin
0007201C                            		even
0007201C                            ObjPos_SLZ2:	incbin	objpos\slz2.bin
00072484                            		even
00072484                            ObjPos_SLZ3:	incbin	objpos\slz3.bin
00072A66                            		even
00072A66                            ObjPos_SYZ1:	incbin	objpos\syz1.bin
000730D8                            		even
000730D8                            ObjPos_SYZ2:	incbin	objpos\syz2.bin
00073642                            		even
00073642                            ObjPos_SYZ3:	incbin	objpos\syz3.bin
00073C48                            		even
00073C48                            ObjPos_SBZ1:	incbin	objpos\sbz1.bin
00074386                            		even
00074386                            ObjPos_SBZ2:	incbin	objpos\sbz2.bin
00074A64                            		even
00074A64                            ObjPos_FZ:	incbin	objpos\fz.bin
00074A76                            		even
00074A76                            ObjPos_SBZ1pf1:	incbin	objpos\sbz1pf1.bin
00074AA8                            		even
00074AA8                            ObjPos_SBZ1pf2:	incbin	objpos\sbz1pf2.bin
00074ADA                            		even
00074ADA                            ObjPos_SBZ1pf3:	incbin	objpos\sbz1pf3.bin
00074B0C                            		even
00074B0C                            ObjPos_SBZ1pf4:	incbin	objpos\sbz1pf4.bin
00074B3E                            		even
00074B3E                            ObjPos_SBZ1pf5:	incbin	objpos\sbz1pf5.bin
00074B70                            		even
00074B70                            ObjPos_SBZ1pf6:	incbin	objpos\sbz1pf6.bin
00074BA8                            		even
00074BA8                            ObjPos_End:	incbin	objpos\ending.bin
00074D04                            		even
00074D04 FFFF 0000 0000             ObjPos_Null:	dc.b $FF, $FF, 0, 0, 0,	0
00074D0A                            ; ---------------------------------------------------------------------------
00074D0A                            		incbin	misc\padding4.bin
00075334                            		even
00075334                            
00075334 0000 0000                  Go_SoundTypes:	dc.l SoundTypes		; XREF: Sound_Play
00075338 0000 0000                  Go_SoundD0:	dc.l SoundD0Index	; XREF: Sound_D0toDF
0007533C 0000 0000                  Go_MusicIndex:	dc.l MusicIndex		; XREF: Sound_81to9F
00075340 0000 0000                  Go_SoundIndex:	dc.l SoundIndex		; XREF: Sound_A0toCF
00075344 0000 0000                  off_719A0:	dc.l byte_71A94		; XREF: Sound_81to9F
00075348 0000 0000                  Go_PSGIndex:	dc.l PSG_Index		; XREF: sub_72926
0007534C                            ; ---------------------------------------------------------------------------
0007534C                            ; PSG instruments used in music
0007534C                            ; ---------------------------------------------------------------------------
0007534C 0000 0000 0000 0000 0000+  PSG_Index:	dc.l PSG1, PSG2, PSG3
00075358 0000 0000 0000 0000 0000+  		dc.l PSG4, PSG5, PSG6
00075364 0000 0000 0000 0000 0000+  		dc.l PSG7, PSG8, PSG9
00075370                            PSG1:		incbin	sound\psg1.bin
00075387                            PSG2:		incbin	sound\psg2.bin
0007538E                            PSG3:		incbin	sound\psg3.bin
0007539F                            PSG4:		incbin	sound\psg4.bin
000753AA                            PSG6:		incbin	sound\psg6.bin
000753B9                            PSG5:		incbin	sound\psg5.bin
000753E3                            PSG7:		incbin	sound\psg7.bin
000753FF                            PSG8:		incbin	sound\psg8.bin
00075427                            PSG9:		incbin	sound\psg9.bin
00075438                            
00075438 0772 7326 1508 FF05        byte_71A94:	dc.b 7,	$72, $73, $26, $15, 8, $FF, 5
00075440                            ; ---------------------------------------------------------------------------
00075440                            ; Music	Pointers
00075440                            ; ---------------------------------------------------------------------------
00075440 0000 0000 0000 0000        MusicIndex:	dc.l Music81, Music82
00075448 0000 0000 0000 0000        		dc.l Music83, Music84
00075450 0000 0000 0000 0000        		dc.l Music85, Music86
00075458 0000 0000 0000 0000        		dc.l Music87, Music88
00075460 0000 0000 0000 0000        		dc.l Music89, Music8A
00075468 0000 0000 0000 0000        		dc.l Music8B, Music8C
00075470 0000 0000 0000 0000        		dc.l Music8D, Music8E
00075478 0000 0000 0000 0000        		dc.l Music8F, Music90
00075480 0000 0000 0000 0000        		dc.l Music91, Music92
00075488 0000 0000 0000 0000        		dc.l Music93, Music94
00075490 0000 0000 0000 0000        		dc.l Music95, Music96
00075498 0000 0000 0000 0000        		dc.l Music97, Music98
000754A0 0000 0000 0000 0000        		dc.l Music99, Music9A
000754A8 0000 0000 0000 0000        		dc.l Music9B, Music9C
000754B0 0000 0000 0000 0000        		dc.l Music9D, Music9E
000754B8 0000 0000                  		dc.l Music9F
000754BC                            ; ---------------------------------------------------------------------------
000754BC                            ; Type of sound	being played ($90 = music; $70 = normal	sound effect)
000754BC                            ; ---------------------------------------------------------------------------
000754BC 9090 9090 9090 9090 9090+  SoundTypes:	dc.b $90, $90, $90, $90, $90, $90, $90,	$90, $90, $90, $90, $90, $90, $90, $90,	$90
000754CC 9090 9090 9090 9090 9090+  		dc.b $90, $90, $90, $90, $90, $90, $90,	$90, $90, $90, $90, $90, $90, $90, $90,	$80
000754DC 7070 7070 7070 7070 7068+  		dc.b $70, $70, $70, $70, $70, $70, $70,	$70, $70, $68, $70, $70, $70, $60, $70,	$70
000754EC 6070 6070 7070 7070 7070+  		dc.b $60, $70, $60, $70, $70, $70, $70,	$70, $70, $70, $70, $70, $70, $70, $7F,	$60
000754FC 7070 7070 7070 7070 7070+  		dc.b $70, $70, $70, $70, $70, $70, $70,	$70, $70, $70, $70, $70, $70, $70, $70,	$80
0007550C 8080 8080 8080 8080 8080+  		dc.b $80, $80, $80, $80, $80, $80, $80,	$80, $80, $80, $80, $80, $80, $80, $80,	$90
0007551C 9090 9090                  		dc.b $90, $90, $90, $90
00075520                            
00075520                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00075520                            
00075520                            
00075520                            sub_71B4C:				; XREF: loc_B10; PalToCRAM
00075520 33FC 0100 00A1 1100        		move.w	#$100,($A11100).l ; stop the Z80
00075528 4E71                       		nop	
0007552A 4E71                       		nop	
0007552C 4E71                       		nop	
0007552E                            
0007552E                            loc_71B5A:
0007552E 0839 0000 00A1 1100        		btst	#0,($A11100).l
00075536 66F6                       		bne.s	loc_71B5A
00075538                            
00075538 0839 0007 00A0 1FFD        		btst	#7,($A01FFD).l
00075540 6700                       		beq.s	loc_71B82
00075542 33FC 0000 00A1 1100        		move.w	#0,($A11100).l	; start	the Z80
0007554A 4E71                       		nop	
0007554C 4E71                       		nop	
0007554E 4E71                       		nop	
00075550 4E71                       		nop	
00075552 4E71                       		nop	
00075554 60CA                       		bra.s	sub_71B4C
00075556                            ; ===========================================================================
00075556                            
00075556                            loc_71B82:
00075556 4DF9 00FF F000             		lea	($FFF000).l,a6
0007555C 422E 000E                  		clr.b	$E(a6)
00075560 4A2E 0003                  		tst.b	3(a6)		; is music paused?
00075564 6600 0000                  		bne.w	loc_71E50	; if yes, branch
00075568 532E 0001                  		subq.b	#1,1(a6)
0007556C 6600                       		bne.s	loc_71B9E
0007556E 4EBA 0000                  		jsr	sub_7260C(pc)
00075572                            
00075572                            loc_71B9E:
00075572 102E 0004                  		move.b	4(a6),d0
00075576 6700                       		beq.s	loc_71BA8
00075578 4EBA 0000                  		jsr	sub_72504(pc)
0007557C                            
0007557C                            loc_71BA8:
0007557C 4A2E 0024                  		tst.b	$24(a6)
00075580 6700                       		beq.s	loc_71BB2
00075582 4EBA 0000                  		jsr	sub_7267C(pc)
00075586                            
00075586                            loc_71BB2:
00075586 4A6E 000A                  		tst.w	$A(a6)		; is music or sound being played?
0007558A 6700                       		beq.s	loc_71BBC	; if not, branch
0007558C 4EBA 0000                  		jsr	Sound_Play(pc)
00075590                            
00075590                            loc_71BBC:
00075590 0C2E 0080 0009             		cmpi.b	#$80,9(a6)
00075596 6700                       		beq.s	loc_71BC8
00075598 4EBA 0000                  		jsr	Sound_ChkValue(pc)
0007559C                            
0007559C                            loc_71BC8:
0007559C 4BEE 0040                  		lea	$40(a6),a5
000755A0 4A15                       		tst.b	(a5)
000755A2 6A00                       		bpl.s	loc_71BD4
000755A4 4EBA 0000                  		jsr	sub_71C4E(pc)
000755A8                            
000755A8                            loc_71BD4:
000755A8 422E 0008                  		clr.b	8(a6)
000755AC 7E05                       		moveq	#5,d7
000755AE                            
000755AE                            loc_71BDA:
000755AE DAFC 0030                  		adda.w	#$30,a5
000755B2 4A15                       		tst.b	(a5)
000755B4 6A00                       		bpl.s	loc_71BE6
000755B6 4EBA 0000                  		jsr	sub_71CCA(pc)
000755BA                            
000755BA                            loc_71BE6:
000755BA 51CF FFF2                  		dbf	d7,loc_71BDA
000755BE                            
000755BE 7E02                       		moveq	#2,d7
000755C0                            
000755C0                            loc_71BEC:
000755C0 DAFC 0030                  		adda.w	#$30,a5
000755C4 4A15                       		tst.b	(a5)
000755C6 6A00                       		bpl.s	loc_71BF8
000755C8 4EBA 0000                  		jsr	sub_72850(pc)
000755CC                            
000755CC                            loc_71BF8:
000755CC 51CF FFF2                  		dbf	d7,loc_71BEC
000755D0                            
000755D0 1D7C 0080 000E             		move.b	#$80,$E(a6)
000755D6 7E02                       		moveq	#2,d7
000755D8                            
000755D8                            loc_71C04:
000755D8 DAFC 0030                  		adda.w	#$30,a5
000755DC 4A15                       		tst.b	(a5)
000755DE 6A00                       		bpl.s	loc_71C10
000755E0 4EBA 0000                  		jsr	sub_71CCA(pc)
000755E4                            
000755E4                            loc_71C10:
000755E4 51CF FFF2                  		dbf	d7,loc_71C04
000755E8                            
000755E8 7E02                       		moveq	#2,d7
000755EA                            
000755EA                            loc_71C16:
000755EA DAFC 0030                  		adda.w	#$30,a5
000755EE 4A15                       		tst.b	(a5)
000755F0 6A00                       		bpl.s	loc_71C22
000755F2 4EBA 0000                  		jsr	sub_72850(pc)
000755F6                            
000755F6                            loc_71C22:
000755F6 51CF FFF2                  		dbf	d7,loc_71C16
000755FA 1D7C 0040 000E             		move.b	#$40,$E(a6)
00075600 DAFC 0030                  		adda.w	#$30,a5
00075604 4A15                       		tst.b	(a5)
00075606 6A00                       		bpl.s	loc_71C38
00075608 4EBA 0000                  		jsr	sub_71CCA(pc)
0007560C                            
0007560C                            loc_71C38:
0007560C DAFC 0030                  		adda.w	#$30,a5
00075610 4A15                       		tst.b	(a5)
00075612 6A00                       		bpl.s	loc_71C44
00075614 4EBA 0000                  		jsr	sub_72850(pc)
00075618                            
00075618                            loc_71C44:
00075618 33FC 0000 00A1 1100        		move.w	#0,($A11100).l	; start	the Z80
00075620 4E75                       		rts	
00075622                            ; End of function sub_71B4C
00075622                            
00075622                            
00075622                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00075622                            
00075622                            
00075622                            sub_71C4E:				; XREF: sub_71B4C
00075622 532D 000E                  		subq.b	#1,$E(a5)
00075626 6600                       		bne.s	locret_71CAA
00075628 1D7C 0080 0008             		move.b	#$80,8(a6)
0007562E 286D 0004                  		movea.l	4(a5),a4
00075632                            
00075632                            loc_71C5E:
00075632 7A00                       		moveq	#0,d5
00075634 1A1C                       		move.b	(a4)+,d5
00075636 0C05 00E0                  		cmpi.b	#-$20,d5
0007563A 6500                       		bcs.s	loc_71C6E
0007563C 4EBA 0000                  		jsr	sub_72A5A(pc)
00075640 60F0                       		bra.s	loc_71C5E
00075642                            ; ===========================================================================
00075642                            
00075642                            loc_71C6E:
00075642 4A05                       		tst.b	d5
00075644 6A00                       		bpl.s	loc_71C84
00075646 1B45 0010                  		move.b	d5,$10(a5)
0007564A 1A1C                       		move.b	(a4)+,d5
0007564C 6A00                       		bpl.s	loc_71C84
0007564E 534C                       		subq.w	#1,a4
00075650 1B6D 000F 000E             		move.b	$F(a5),$E(a5)
00075656 6000                       		bra.s	loc_71C88
00075658                            ; ===========================================================================
00075658                            
00075658                            loc_71C84:
00075658 4EBA 0000                  		jsr	sub_71D40(pc)
0007565C                            
0007565C                            loc_71C88:
0007565C 2B4C 0004                  		move.l	a4,4(a5)
00075660 0815 0002                  		btst	#2,(a5)
00075664 6600                       		bne.s	locret_71CAA
00075666 7000                       		moveq	#0,d0
00075668 102D 0010                  		move.b	$10(a5),d0
0007566C 0C00 0080                  		cmpi.b	#$80,d0
00075670 6700                       		beq.s	locret_71CAA
00075672 0800 0003                  		btst	#3,d0
00075676 6600                       		bne.s	loc_71CAC
00075678 13C0 00A0 1FFF             		move.b	d0,($A01FFF).l
0007567E                            
0007567E                            locret_71CAA:
0007567E 4E75                       		rts	
00075680                            ; ===========================================================================
00075680                            
00075680                            loc_71CAC:
00075680 0400 0088                  		subi.b	#$88,d0
00075684 103B 0000                  		move.b	byte_71CC4(pc,d0.w),d0
00075688 13C0 00A0 00EA             		move.b	d0,($A000EA).l
0007568E 13FC 0083 00A0 1FFF        		move.b	#$83,($A01FFF).l
00075696 4E75                       		rts	
00075698                            ; End of function sub_71C4E
00075698                            
00075698                            ; ===========================================================================
00075698 1215 1C1D FFFF             byte_71CC4:	dc.b $12, $15, $1C, $1D, $FF, $FF
0007569E                            
0007569E                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0007569E                            
0007569E                            
0007569E                            sub_71CCA:				; XREF: sub_71B4C
0007569E 532D 000E                  		subq.b	#1,$E(a5)
000756A2 6600                       		bne.s	loc_71CE0
000756A4 0895 0004                  		bclr	#4,(a5)
000756A8 4EBA 0000                  		jsr	sub_71CEC(pc)
000756AC 4EBA 0000                  		jsr	sub_71E18(pc)
000756B0 6000 0000                  		bra.w	loc_726E2
000756B4                            ; ===========================================================================
000756B4                            
000756B4                            loc_71CE0:
000756B4 4EBA 0000                  		jsr	sub_71D9E(pc)
000756B8 4EBA 0000                  		jsr	sub_71DC6(pc)
000756BC 6000 0000                  		bra.w	loc_71E24
000756C0                            ; End of function sub_71CCA
000756C0                            
000756C0                            
000756C0                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000756C0                            
000756C0                            
000756C0                            sub_71CEC:				; XREF: sub_71CCA
000756C0 286D 0004                  		movea.l	4(a5),a4
000756C4 0895 0001                  		bclr	#1,(a5)
000756C8                            
000756C8                            loc_71CF4:
000756C8 7A00                       		moveq	#0,d5
000756CA 1A1C                       		move.b	(a4)+,d5
000756CC 0C05 00E0                  		cmpi.b	#-$20,d5
000756D0 6500                       		bcs.s	loc_71D04
000756D2 4EBA 0000                  		jsr	sub_72A5A(pc)
000756D6 60F0                       		bra.s	loc_71CF4
000756D8                            ; ===========================================================================
000756D8                            
000756D8                            loc_71D04:
000756D8 4EBA 0000                  		jsr	sub_726FE(pc)
000756DC 4A05                       		tst.b	d5
000756DE 6A00                       		bpl.s	loc_71D1A
000756E0 4EBA 0000                  		jsr	sub_71D22(pc)
000756E4 1A1C                       		move.b	(a4)+,d5
000756E6 6A00                       		bpl.s	loc_71D1A
000756E8 534C                       		subq.w	#1,a4
000756EA 6000 0000                  		bra.w	sub_71D60
000756EE                            ; ===========================================================================
000756EE                            
000756EE                            loc_71D1A:
000756EE 4EBA 0000                  		jsr	sub_71D40(pc)
000756F2 6000 0000                  		bra.w	sub_71D60
000756F6                            ; End of function sub_71CEC
000756F6                            
000756F6                            
000756F6                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000756F6                            
000756F6                            
000756F6                            sub_71D22:				; XREF: sub_71CEC
000756F6 0405 0080                  		subi.b	#$80,d5
000756FA 6700                       		beq.s	loc_71D58
000756FC DA2D 0008                  		add.b	8(a5),d5
00075700 0245 007F                  		andi.w	#$7F,d5
00075704 E34D                       		lsl.w	#1,d5
00075706 41FA 0000                  		lea	word_72790(pc),a0
0007570A 3C30 5000                  		move.w	(a0,d5.w),d6
0007570E 3B46 0010                  		move.w	d6,$10(a5)
00075712 4E75                       		rts	
00075714                            ; End of function sub_71D22
00075714                            
00075714                            
00075714                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00075714                            
00075714                            
00075714                            sub_71D40:				; XREF: sub_71C4E; sub_71CEC; sub_72878
00075714 1005                       		move.b	d5,d0
00075716 122D 0002                  		move.b	2(a5),d1
0007571A                            
0007571A                            loc_71D46:
0007571A 5301                       		subq.b	#1,d1
0007571C 6700                       		beq.s	loc_71D4E
0007571E D005                       		add.b	d5,d0
00075720 60F8                       		bra.s	loc_71D46
00075722                            ; ===========================================================================
00075722                            
00075722                            loc_71D4E:
00075722 1B40 000F                  		move.b	d0,$F(a5)
00075726 1B40 000E                  		move.b	d0,$E(a5)
0007572A 4E75                       		rts	
0007572C                            ; End of function sub_71D40
0007572C                            
0007572C                            ; ===========================================================================
0007572C                            
0007572C                            loc_71D58:				; XREF: sub_71D22
0007572C 08D5 0001                  		bset	#1,(a5)
00075730 426D 0010                  		clr.w	$10(a5)
00075734                            
00075734                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00075734                            
00075734                            
00075734                            sub_71D60:				; XREF: sub_71CEC; sub_72878; sub_728AC
00075734 2B4C 0004                  		move.l	a4,4(a5)
00075738 1B6D 000F 000E             		move.b	$F(a5),$E(a5)
0007573E 0815 0004                  		btst	#4,(a5)
00075742 6600                       		bne.s	locret_71D9C
00075744 1B6D 0013 0012             		move.b	$13(a5),$12(a5)
0007574A 422D 000C                  		clr.b	$C(a5)
0007574E 0815 0003                  		btst	#3,(a5)
00075752 6700                       		beq.s	locret_71D9C
00075754 206D 0014                  		movea.l	$14(a5),a0
00075758 1B58 0018                  		move.b	(a0)+,$18(a5)
0007575C 1B58 0019                  		move.b	(a0)+,$19(a5)
00075760 1B58 001A                  		move.b	(a0)+,$1A(a5)
00075764 1018                       		move.b	(a0)+,d0
00075766 E208                       		lsr.b	#1,d0
00075768 1B40 001B                  		move.b	d0,$1B(a5)
0007576C 426D 001C                  		clr.w	$1C(a5)
00075770                            
00075770                            locret_71D9C:
00075770 4E75                       		rts	
00075772                            ; End of function sub_71D60
00075772                            
00075772                            
00075772                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00075772                            
00075772                            
00075772                            sub_71D9E:				; XREF: sub_71CCA; sub_72850
00075772 4A2D 0012                  		tst.b	$12(a5)
00075776 6700                       		beq.s	locret_71DC4
00075778 532D 0012                  		subq.b	#1,$12(a5)
0007577C 6600                       		bne.s	locret_71DC4
0007577E 08D5 0001                  		bset	#1,(a5)
00075782 4A2D 0001                  		tst.b	1(a5)
00075786 6B00 0000                  		bmi.w	loc_71DBE
0007578A 4EBA 0000                  		jsr	sub_726FE(pc)
0007578E 584F                       		addq.w	#4,sp
00075790 4E75                       		rts	
00075792                            ; ===========================================================================
00075792                            
00075792                            loc_71DBE:
00075792 4EBA 0000                  		jsr	sub_729A0(pc)
00075796 584F                       		addq.w	#4,sp
00075798                            
00075798                            locret_71DC4:
00075798 4E75                       		rts	
0007579A                            ; End of function sub_71D9E
0007579A                            
0007579A                            
0007579A                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0007579A                            
0007579A                            
0007579A                            sub_71DC6:				; XREF: sub_71CCA; sub_72850
0007579A 584F                       		addq.w	#4,sp
0007579C 0815 0003                  		btst	#3,(a5)
000757A0 6700                       		beq.s	locret_71E16
000757A2 4A2D 0018                  		tst.b	$18(a5)
000757A6 6700                       		beq.s	loc_71DDA
000757A8 532D 0018                  		subq.b	#1,$18(a5)
000757AC 4E75                       		rts	
000757AE                            ; ===========================================================================
000757AE                            
000757AE                            loc_71DDA:
000757AE 532D 0019                  		subq.b	#1,$19(a5)
000757B2 6700                       		beq.s	loc_71DE2
000757B4 4E75                       		rts	
000757B6                            ; ===========================================================================
000757B6                            
000757B6                            loc_71DE2:
000757B6 206D 0014                  		movea.l	$14(a5),a0
000757BA 1B68 0001 0019             		move.b	1(a0),$19(a5)
000757C0 4A2D 001B                  		tst.b	$1B(a5)
000757C4 6600                       		bne.s	loc_71DFE
000757C6 1B68 0003 001B             		move.b	3(a0),$1B(a5)
000757CC 442D 001A                  		neg.b	$1A(a5)
000757D0 4E75                       		rts	
000757D2                            ; ===========================================================================
000757D2                            
000757D2                            loc_71DFE:
000757D2 532D 001B                  		subq.b	#1,$1B(a5)
000757D6 1C2D 001A                  		move.b	$1A(a5),d6
000757DA 4886                       		ext.w	d6
000757DC DC6D 001C                  		add.w	$1C(a5),d6
000757E0 3B46 001C                  		move.w	d6,$1C(a5)
000757E4 DC6D 0010                  		add.w	$10(a5),d6
000757E8 594F                       		subq.w	#4,sp
000757EA                            
000757EA                            locret_71E16:
000757EA 4E75                       		rts	
000757EC                            ; End of function sub_71DC6
000757EC                            
000757EC                            
000757EC                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000757EC                            
000757EC                            
000757EC                            sub_71E18:				; XREF: sub_71CCA
000757EC 0815 0001                  		btst	#1,(a5)
000757F0 6600                       		bne.s	locret_71E48
000757F2 3C2D 0010                  		move.w	$10(a5),d6
000757F6 6700                       		beq.s	loc_71E4A
000757F8                            
000757F8                            loc_71E24:				; XREF: sub_71CCA
000757F8 102D 001E                  		move.b	$1E(a5),d0
000757FC 4880                       		ext.w	d0
000757FE DC40                       		add.w	d0,d6
00075800 0815 0002                  		btst	#2,(a5)
00075804 6600                       		bne.s	locret_71E48
00075806 3206                       		move.w	d6,d1
00075808 E049                       		lsr.w	#8,d1
0007580A 103C 00A4                  		move.b	#-$5C,d0
0007580E 4EBA 0000                  		jsr	sub_72722(pc)
00075812 1206                       		move.b	d6,d1
00075814 103C 00A0                  		move.b	#-$60,d0
00075818 4EBA 0000                  		jsr	sub_72722(pc)
0007581C                            
0007581C                            locret_71E48:
0007581C 4E75                       		rts	
0007581E                            ; ===========================================================================
0007581E                            
0007581E                            loc_71E4A:
0007581E 08D5 0001                  		bset	#1,(a5)
00075822 4E75                       		rts	
00075824                            ; End of function sub_71E18
00075824                            
00075824                            ; ===========================================================================
00075824                            
00075824                            loc_71E50:				; XREF: sub_71B4C
00075824 6B00                       		bmi.s	loc_71E94
00075826 0C2E 0002 0003             		cmpi.b	#2,3(a6)
0007582C 6700 0000                  		beq.w	loc_71EFE
00075830 1D7C 0002 0003             		move.b	#2,3(a6)
00075836 7602                       		moveq	#2,d3
00075838 103C 00B4                  		move.b	#-$4C,d0
0007583C 7200                       		moveq	#0,d1
0007583E                            
0007583E                            loc_71E6A:
0007583E 4EBA 0000                  		jsr	sub_7272E(pc)
00075842 4EBA 0000                  		jsr	sub_72764(pc)
00075846 5200                       		addq.b	#1,d0
00075848 51CB FFF4                  		dbf	d3,loc_71E6A
0007584C                            
0007584C 7602                       		moveq	#2,d3
0007584E 7028                       		moveq	#$28,d0
00075850                            
00075850                            loc_71E7C:
00075850 1203                       		move.b	d3,d1
00075852 4EBA 0000                  		jsr	sub_7272E(pc)
00075856 5801                       		addq.b	#4,d1
00075858 4EBA 0000                  		jsr	sub_7272E(pc)
0007585C 51CB FFF2                  		dbf	d3,loc_71E7C
00075860                            
00075860 4EBA 0000                  		jsr	sub_729B6(pc)
00075864 6000 FDB2                  		bra.w	loc_71C44
00075868                            ; ===========================================================================
00075868                            
00075868                            loc_71E94:				; XREF: loc_71E50
00075868 422E 0003                  		clr.b	3(a6)
0007586C 7630                       		moveq	#$30,d3
0007586E 4BEE 0040                  		lea	$40(a6),a5
00075872 7806                       		moveq	#6,d4
00075874                            
00075874                            loc_71EA0:
00075874 0815 0007                  		btst	#7,(a5)
00075878 6700                       		beq.s	loc_71EB8
0007587A 0815 0002                  		btst	#2,(a5)
0007587E 6600                       		bne.s	loc_71EB8
00075880 103C 00B4                  		move.b	#-$4C,d0
00075884 122D 000A                  		move.b	$A(a5),d1
00075888 4EBA 0000                  		jsr	sub_72722(pc)
0007588C                            
0007588C                            loc_71EB8:
0007588C DAC3                       		adda.w	d3,a5
0007588E 51CC FFE4                  		dbf	d4,loc_71EA0
00075892                            
00075892 4BEE 0220                  		lea	$220(a6),a5
00075896 7802                       		moveq	#2,d4
00075898                            
00075898                            loc_71EC4:
00075898 0815 0007                  		btst	#7,(a5)
0007589C 6700                       		beq.s	loc_71EDC
0007589E 0815 0002                  		btst	#2,(a5)
000758A2 6600                       		bne.s	loc_71EDC
000758A4 103C 00B4                  		move.b	#-$4C,d0
000758A8 122D 000A                  		move.b	$A(a5),d1
000758AC 4EBA 0000                  		jsr	sub_72722(pc)
000758B0                            
000758B0                            loc_71EDC:
000758B0 DAC3                       		adda.w	d3,a5
000758B2 51CC FFE4                  		dbf	d4,loc_71EC4
000758B6                            
000758B6 4BEE 0340                  		lea	$340(a6),a5
000758BA 0815 0007                  		btst	#7,(a5)
000758BE 6700                       		beq.s	loc_71EFE
000758C0 0815 0002                  		btst	#2,(a5)
000758C4 6600                       		bne.s	loc_71EFE
000758C6 103C 00B4                  		move.b	#-$4C,d0
000758CA 122D 000A                  		move.b	$A(a5),d1
000758CE 4EBA 0000                  		jsr	sub_72722(pc)
000758D2                            
000758D2                            loc_71EFE:
000758D2 6000 FD44                  		bra.w	loc_71C44
000758D6                            
000758D6                            ; ---------------------------------------------------------------------------
000758D6                            ; Subroutine to	play a sound or	music track
000758D6                            ; ---------------------------------------------------------------------------
000758D6                            
000758D6                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000758D6                            
000758D6                            
000758D6                            Sound_Play:				; XREF: sub_71B4C
000758D6 2079 0007 5334             		movea.l	(Go_SoundTypes).l,a0
000758DC 43EE 000A                  		lea	$A(a6),a1	; load music track number
000758E0 1616                       		move.b	0(a6),d3
000758E2 7802                       		moveq	#2,d4
000758E4                            
000758E4                            loc_71F12:
000758E4 1011                       		move.b	(a1),d0		; move track number to d0
000758E6 1200                       		move.b	d0,d1
000758E8 4219                       		clr.b	(a1)+
000758EA 0400 0081                  		subi.b	#$81,d0
000758EE 6500                       		bcs.s	loc_71F3E
000758F0 0C2E 0080 0009             		cmpi.b	#$80,9(a6)
000758F6 6700                       		beq.s	loc_71F2C
000758F8 1D41 000A                  		move.b	d1,$A(a6)
000758FC 6000                       		bra.s	loc_71F3E
000758FE                            ; ===========================================================================
000758FE                            
000758FE                            loc_71F2C:
000758FE 0240 007F                  		andi.w	#$7F,d0
00075902 1430 0000                  		move.b	(a0,d0.w),d2
00075906 B403                       		cmp.b	d3,d2
00075908 6500                       		bcs.s	loc_71F3E
0007590A 1602                       		move.b	d2,d3
0007590C 1D41 0009                  		move.b	d1,9(a6)	; set music flag
00075910                            
00075910                            loc_71F3E:
00075910 51CC FFD2                  		dbf	d4,loc_71F12
00075914                            
00075914 4A03                       		tst.b	d3
00075916 6B00                       		bmi.s	locret_71F4A
00075918 1C83                       		move.b	d3,0(a6)
0007591A                            
0007591A                            locret_71F4A:
0007591A 4E75                       		rts	
0007591C                            ; End of function Sound_Play
0007591C                            
0007591C                            
0007591C                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0007591C                            
0007591C                            
0007591C                            Sound_ChkValue:				; XREF: sub_71B4C
0007591C 7E00                       		moveq	#0,d7
0007591E 1E2E 0009                  		move.b	9(a6),d7
00075922 6700 0000                  		beq.w	Sound_E4
00075926 6A00                       		bpl.s	locret_71F8C
00075928 1D7C 0080 0009             		move.b	#$80,9(a6)	; reset	music flag
0007592E 0C07 009F                  		cmpi.b	#$9F,d7
00075932 6300 0000                  		bls.w	Sound_81to9F	; music	$81-$9F
00075936 0C07 00A0                  		cmpi.b	#$A0,d7
0007593A 6500 0000                  		bcs.w	locret_71F8C
0007593E 0C07 00CF                  		cmpi.b	#$CF,d7
00075942 6300 0000                  		bls.w	Sound_A0toCF	; sound	$A0-$CF
00075946 0C07 00D0                  		cmpi.b	#$D0,d7
0007594A 6500 0000                  		bcs.w	locret_71F8C
0007594E 0C07 00E0                  		cmpi.b	#$E0,d7
00075952 6500 0000                  		bcs.w	Sound_D0toDF	; sound	$D0-$DF
00075956 0C07 00E5                  		cmpi.b	#$E5,d7
0007595A 6300                       		bls.s	Sound_E0toE5	; sound	$E0-$E5
0007595C                            
0007595C                            locret_71F8C:
0007595C 4E75                       		rts	
0007595E                            ; ===========================================================================
0007595E                            
0007595E                            Sound_E0toE5				; XREF: Sound_ChkValue
0007595E 0407 00E0                  		subi.b	#$E0,d7
00075962 E54F                       		lsl.w	#2,d7
00075964 4EFB 7000                  		jmp	Sound_ExIndex(pc,d7.w)
00075968                            ; ===========================================================================
00075968                            
00075968                            Sound_ExIndex:
00075968 6000 0000                  		bra.w	Sound_E0
0007596C                            ; ===========================================================================
0007596C 6000 0000                  		bra.w	Sound_E1
00075970                            ; ===========================================================================
00075970 6000 0000                  		bra.w	Sound_E2
00075974                            ; ===========================================================================
00075974 6000 0000                  		bra.w	Sound_E3
00075978                            ; ===========================================================================
00075978 6000 0000                  		bra.w	Sound_E4
0007597C                            ; ===========================================================================
0007597C 6000 0000                  		bra.w	Sound_E5
00075980                            ; ===========================================================================
00075980                            ; ---------------------------------------------------------------------------
00075980                            ; Play "Say-gaa" PCM sound
00075980                            ; ---------------------------------------------------------------------------
00075980                            
00075980                            Sound_E1:				  
00075980 45F9 0000 0000             		lea	(SegaPCM).l,a2			; Load the SEGA PCM sample into a2. It's important that we use a2 since a0 and a1 are going to be used up ahead when reading the joypad ports 
00075986 263C 0000 0000             		move.l	#(SegaPCM_End-SegaPCM),d3			; Load the size of the SEGA PCM sample into d3 
0007598C 13FC 002A 00A0 4000        		move.b	#$2A,($A04000).l		; $A04000 = $2A -> Write to DAC channel	  
00075994                            PlayPCM_Loop:	  
00075994 13DA 00A0 4001             		move.b	(a2)+,($A04001).l		; Write the PCM data (contained in a2) to $A04001 (YM2612 register D0) 
0007599A 303C 0014                  		move.w	#$14,d0				; Write the pitch ($14 in this case) to d0 
0007599E 51C8 FFFE                  		dbf	d0,*				; Decrement d0; jump to itself if not 0. (for pitch control, avoids playing the sample too fast)  
000759A2 5383                       		sub.l	#1,d3				; Subtract 1 from the PCM sample size 
000759A4 6700                       		beq.s	return_PlayPCM			; If d3 = 0, we finished playing the PCM sample, so stop playing, leave this loop, and unfreeze the 68K 
000759A6 41F8 F604                  		lea	($FFFFF604).w,a0		; address where JoyPad states are written 
000759AA 43F9 00A1 0003             		lea	($A10003).l,a1			; address where JoyPad states are read from 
000759B0 4EB8 1418                  		jsr	(Joypad_Read).w			; Read only the first joypad port. It's important that we do NOT do the two ports, we don't have the cycles for that 
000759B4 0838 0007 F604             		btst	#7,($FFFFF604).w		; Check for Start button 
000759BA 6600                       		bne.s	return_PlayPCM			; If start is pressed, stop playing, leave this loop, and unfreeze the 68K 
000759BC 60D6                       		bra.s	PlayPCM_Loop			; Otherwise, continue playing PCM sample 
000759BE                            return_PlayPCM: 
000759BE 584F                       		addq.w	#4,sp 
000759C0 4E75                       		rts
000759C2                            		
000759C2                            ; ---------------------------------------------------------------------------
000759C2                            ; Play you are an idiot pcm sound
000759C2                            ; since the sfx already crashes the game forever load it here :V
000759C2                            ; ---------------------------------------------------------------------------
000759C2                            
000759C2                            Sound_E5: 
000759C2 4EB8 14E8                  		jsr	ClearScreen
000759C6                            		;control port on a5
000759C6 2ABC 9401 9340             		move.l	#$94000000+((($280>>1)&$FF00)<<8)+$9300+(($280>>1)&$FF),(a5)
000759CC 2ABC 96FC 9500             		move.l	#$96000000+((($FFFFF800>>1)&$FF00)<<8)+$9500+(($FFFFF800>>1)&$FF),(a5)
000759D2 3ABC 977F                  		move.w	#$9700+(((($FFFFF800>>1)&$FF0000)>>16)&$7F),(a5)
000759D6 3ABC 7800                  		move.w	#$4000+($F800&$3FFF),(a5)
000759DA 3ABC 0083                  		move.w	#$80+(($F800&$C000)>>14),(a5) ; clear sprites
000759DE                            		
000759DE 3ABC 8700                  		move.w	#$8700,(a5) ; first colour is bg now
000759E2                            		
000759E2 2ABC 4000 0000             		move.l	#$40000000,(a5)
000759E8 41F9 0002 424E             		lea	(Nem_Idiot).l,a0 ;	load idiot sprites
000759EE 4EB8 1664                  		jsr	NemDec
000759F2 43F9 00FF 0000             		lea	($FF0000).l,a1
000759F8 41F9 0002 41F0             		lea	(Eni_Idiot).l,a0 ; load mappings for IDIOT
000759FE 303C 0000                  		move.w	#0,d0
00075A02 4EB8 1942                  		jsr	EniDec
00075A06 43F9 00FF 0000             		lea	($FF0000).l,a1
00075A0C 203C 4304 0003             		move.l	#$43040003,d0
00075A12 7223                       		moveq	#35,d1
00075A14 740D                       		moveq	#13,d2
00075A16 4EB8 1644                  		jsr	ShowVDPGraphics
00075A1A 7014                       		moveq	#20,d0
00075A1C 4EB8 2302                  		jsr	PalLoad2	; load pallet
00075A20                            		
00075A20                            Sound_E5_StartPCM:
00075A20 45F9 0000 0000             		lea	(IdiotPCM).l,a2			; Load the idiot PCM sample into a2. It's important that we use a2 since a0 and a1 are going to be used up ahead when reading the joypad ports 
00075A26 263C 0000 0000             		move.l	#(IdiotPCM_End-IdiotPCM),d3			; Load the size of the idiot PCM sample into d3 
00075A2C 13FC 002A 00A0 4000        		move.b	#$2A,($A04000).l		; $A04000 = $2A -> Write to DAC channel	  
00075A34                            PlayPCM_LoopE5:	  
00075A34                            
00075A34 13DA 00A0 4001             		move.b	(a2)+,($A04001).l		; Write the PCM data (contained in a2) to $A04001 (YM2612 register D0) 
00075A3A                            		
00075A3A 5278 FE24                  		addq.w	#1,($FFFFFE24).w
00075A3E                            		
00075A3E 1038 FE24                  		move.b	($FFFFFE24).w,d0
00075A42 0200 000F                  		andi.b	#$F,d0
00075A46 6700                       		beq.s	SfxE5SwapPalette
00075A48                            		
00075A48 303C 0056                  		move.w	#$58-2,d0				; Write the pitch ($58 in this case) to d0  (-28 from the check before)
00075A4C 51C8 FFFE                  		dbf	d0,*				; Decrement d0; jump to itself if not 0. (for pitch control, avoids playing the sample too fast)   (14 cycles)
00075A50 5383                       		sub.l	#1,d3				; Subtract 1 from the PCM sample size 
00075A52 67CC                       		beq.s	Sound_E5_StartPCM			; If d3 = 0, we finished playing the PCM sample, DONT STOP
00075A54 60DE                       		bra.s	PlayPCM_LoopE5
00075A56                            		
00075A56                            SfxE5SwapPalette:
00075A56                            		
00075A56 2ABC 9400 9308             		move.l	#$94000000+((($10>>1)&$FF00)<<8)+$9300+(($10>>1)&$FF),(a5) ; len
00075A5C                            		
00075A5C                            		
00075A5C 0838 0004 FE24             		btst	#4,($FFFFFE24).w
00075A62 6700                       		beq.s	@not_black
00075A64 2ABC 96FD 9598             		move.l	#$96000000+((($FFFFFB30>>1)&$FF00)<<8)+$9500+(($FFFFFB30>>1)&$FF),(a5)	; source	
00075A6A 6000                       		bra.s	@merge
00075A6C                            	@not_black:
00075A6C 2ABC 96FD 9590             		move.l	#$96000000+((($FFFFFB20>>1)&$FF00)<<8)+$9500+(($FFFFFB20>>1)&$FF),(a5)	; source
00075A72                            	@merge:
00075A72 3ABC 977F                  		move.w	#$9700+(((($FFFFFB20>>1)&$FF0000)>>16)&$7F),(a5) ; source
00075A76 3ABC C000                  		move.w	#$C000+(0&$3FFF),(a5) ; dest
00075A7A 31FC 0080 F640             		move.w	#$80+((0&$C000)>>14),($FFFFF640).w ;dest
00075A80 3AB8 F640                  		move.w	($FFFFF640).w,(a5)
00075A84                            		
00075A84 303C 004D                  		move.w	#$58-11,d0				; attempt at removing the little jumps
00075A88 51C8 FFFE                  		dbf	d0,*				; (14 cycles)
00075A8C 60A6                       		bra.s	PlayPCM_LoopE5
00075A8E                            		
00075A8E                            ; ===========================================================================
00075A8E                            ; ---------------------------------------------------------------------------
00075A8E                            ; Play music track $81-$9F
00075A8E                            ; ---------------------------------------------------------------------------
00075A8E                            
00075A8E                            Sound_81to9F:				; XREF: Sound_ChkValue
00075A8E 0C07 0088                  		cmpi.b	#$88,d7		; is "extra life" music	played?
00075A92 6600                       		bne.s	loc_72024	; if not, branch
00075A94 4A2E 0027                  		tst.b	$27(a6)
00075A98 6600 0000                  		bne.w	loc_721B6
00075A9C 4BEE 0040                  		lea	$40(a6),a5
00075AA0 7009                       		moveq	#9,d0
00075AA2                            
00075AA2                            loc_71FE6:
00075AA2 0895 0002                  		bclr	#2,(a5)
00075AA6 DAFC 0030                  		adda.w	#$30,a5
00075AAA 51C8 FFF6                  		dbf	d0,loc_71FE6
00075AAE                            
00075AAE 4BEE 0220                  		lea	$220(a6),a5
00075AB2 7005                       		moveq	#5,d0
00075AB4                            
00075AB4                            loc_71FF8:
00075AB4 0895 0007                  		bclr	#7,(a5)
00075AB8 DAFC 0030                  		adda.w	#$30,a5
00075ABC 51C8 FFF6                  		dbf	d0,loc_71FF8
00075AC0 4216                       		clr.b	0(a6)
00075AC2 204E                       		movea.l	a6,a0
00075AC4 43EE 03A0                  		lea	$3A0(a6),a1
00075AC8 303C 0087                  		move.w	#$87,d0
00075ACC                            
00075ACC                            loc_72012:
00075ACC 22D8                       		move.l	(a0)+,(a1)+
00075ACE 51C8 FFFC                  		dbf	d0,loc_72012
00075AD2                            
00075AD2 1D7C 0080 0027             		move.b	#$80,$27(a6)
00075AD8 4216                       		clr.b	0(a6)
00075ADA 6000                       		bra.s	loc_7202C
00075ADC                            ; ===========================================================================
00075ADC                            
00075ADC                            loc_72024:
00075ADC 422E 0027                  		clr.b	$27(a6)
00075AE0 422E 0026                  		clr.b	$26(a6)
00075AE4                            
00075AE4                            loc_7202C:
00075AE4 4EBA 0000                  		jsr	sub_725CA(pc)
00075AE8 2879 0007 5344             		movea.l	(off_719A0).l,a4
00075AEE 0407 0081                  		subi.b	#$81,d7
00075AF2 1D74 7000 0029             		move.b	(a4,d7.w),$29(a6)
00075AF8 2879 0007 533C             		movea.l	(Go_MusicIndex).l,a4
00075AFE E54F                       		lsl.w	#2,d7
00075B00 2874 7000                  		movea.l	(a4,d7.w),a4
00075B04 7000                       		moveq	#0,d0
00075B06 3014                       		move.w	(a4),d0
00075B08 D08C                       		add.l	a4,d0
00075B0A 2D40 0018                  		move.l	d0,$18(a6)
00075B0E 102C 0005                  		move.b	5(a4),d0
00075B12 1D40 0028                  		move.b	d0,$28(a6)
00075B16 4A2E 002A                  		tst.b	$2A(a6)
00075B1A 6700                       		beq.s	loc_72068
00075B1C 102E 0029                  		move.b	$29(a6),d0
00075B20                            
00075B20                            loc_72068:
00075B20 1D40 0002                  		move.b	d0,2(a6)
00075B24 1D40 0001                  		move.b	d0,1(a6)
00075B28 7200                       		moveq	#0,d1
00075B2A 264C                       		movea.l	a4,a3
00075B2C 5C4C                       		addq.w	#6,a4
00075B2E 7E00                       		moveq	#0,d7
00075B30 1E2B 0002                  		move.b	2(a3),d7
00075B34 6700 0000                  		beq.w	loc_72114
00075B38 5307                       		subq.b	#1,d7
00075B3A 123C 00C0                  		move.b	#-$40,d1
00075B3E 182B 0004                  		move.b	4(a3),d4
00075B42 7C30                       		moveq	#$30,d6
00075B44 1A3C 0001                  		move.b	#1,d5
00075B48 43EE 0040                  		lea	$40(a6),a1
00075B4C 45FA 0000                  		lea	byte_721BA(pc),a2
00075B50                            
00075B50                            loc_72098:
00075B50 08D1 0007                  		bset	#7,(a1)
00075B54 135A 0001                  		move.b	(a2)+,1(a1)
00075B58 1344 0002                  		move.b	d4,2(a1)
00075B5C 1346 000D                  		move.b	d6,$D(a1)
00075B60 1341 000A                  		move.b	d1,$A(a1)
00075B64 1345 000E                  		move.b	d5,$E(a1)
00075B68 7000                       		moveq	#0,d0
00075B6A 301C                       		move.w	(a4)+,d0
00075B6C D08B                       		add.l	a3,d0
00075B6E 2340 0004                  		move.l	d0,4(a1)
00075B72 335C 0008                  		move.w	(a4)+,8(a1)
00075B76 D2C6                       		adda.w	d6,a1
00075B78 51CF FFD6                  		dbf	d7,loc_72098
00075B7C 0C2B 0007 0002             		cmpi.b	#7,2(a3)
00075B82 6600                       		bne.s	loc_720D8
00075B84 702B                       		moveq	#$2B,d0
00075B86 7200                       		moveq	#0,d1
00075B88 4EBA 0000                  		jsr	sub_7272E(pc)
00075B8C 6000 0000                  		bra.w	loc_72114
00075B90                            ; ===========================================================================
00075B90                            
00075B90                            loc_720D8:
00075B90 7028                       		moveq	#$28,d0
00075B92 7206                       		moveq	#6,d1
00075B94 4EBA 0000                  		jsr	sub_7272E(pc)
00075B98 103C 0042                  		move.b	#$42,d0
00075B9C 727F                       		moveq	#$7F,d1
00075B9E 4EBA 0000                  		jsr	sub_72764(pc)
00075BA2 103C 004A                  		move.b	#$4A,d0
00075BA6 727F                       		moveq	#$7F,d1
00075BA8 4EBA 0000                  		jsr	sub_72764(pc)
00075BAC 103C 0046                  		move.b	#$46,d0
00075BB0 727F                       		moveq	#$7F,d1
00075BB2 4EBA 0000                  		jsr	sub_72764(pc)
00075BB6 103C 004E                  		move.b	#$4E,d0
00075BBA 727F                       		moveq	#$7F,d1
00075BBC 4EBA 0000                  		jsr	sub_72764(pc)
00075BC0 103C 00B6                  		move.b	#-$4A,d0
00075BC4 123C 00C0                  		move.b	#-$40,d1
00075BC8 4EBA 0000                  		jsr	sub_72764(pc)
00075BCC                            
00075BCC                            loc_72114:
00075BCC 7E00                       		moveq	#0,d7
00075BCE 1E2B 0003                  		move.b	3(a3),d7
00075BD2 6700                       		beq.s	loc_72154
00075BD4 5307                       		subq.b	#1,d7
00075BD6 43EE 0190                  		lea	$190(a6),a1
00075BDA 45FA 0000                  		lea	byte_721C2(pc),a2
00075BDE                            
00075BDE                            loc_72126:
00075BDE 08D1 0007                  		bset	#7,(a1)
00075BE2 135A 0001                  		move.b	(a2)+,1(a1)
00075BE6 1344 0002                  		move.b	d4,2(a1)
00075BEA 1346 000D                  		move.b	d6,$D(a1)
00075BEE 1345 000E                  		move.b	d5,$E(a1)
00075BF2 7000                       		moveq	#0,d0
00075BF4 301C                       		move.w	(a4)+,d0
00075BF6 D08B                       		add.l	a3,d0
00075BF8 2340 0004                  		move.l	d0,4(a1)
00075BFC 335C 0008                  		move.w	(a4)+,8(a1)
00075C00 101C                       		move.b	(a4)+,d0
00075C02 135C 000B                  		move.b	(a4)+,$B(a1)
00075C06 D2C6                       		adda.w	d6,a1
00075C08 51CF FFD4                  		dbf	d7,loc_72126
00075C0C                            
00075C0C                            loc_72154:
00075C0C 43EE 0220                  		lea	$220(a6),a1
00075C10 7E05                       		moveq	#5,d7
00075C12                            
00075C12                            loc_7215A:
00075C12 4A11                       		tst.b	(a1)
00075C14 6A00 0000                  		bpl.w	loc_7217C
00075C18 7000                       		moveq	#0,d0
00075C1A 1029 0001                  		move.b	1(a1),d0
00075C1E 6B00                       		bmi.s	loc_7216E
00075C20 5500                       		subq.b	#2,d0
00075C22 E508                       		lsl.b	#2,d0
00075C24 6000                       		bra.s	loc_72170
00075C26                            ; ===========================================================================
00075C26                            
00075C26                            loc_7216E:
00075C26 E608                       		lsr.b	#3,d0
00075C28                            
00075C28                            loc_72170:
00075C28 41FA 0000                  		lea	dword_722CC(pc),a0
00075C2C 2070 0000                  		movea.l	(a0,d0.w),a0
00075C30 08D0 0002                  		bset	#2,(a0)
00075C34                            
00075C34                            loc_7217C:
00075C34 D2C6                       		adda.w	d6,a1
00075C36 51CF FFDA                  		dbf	d7,loc_7215A
00075C3A                            
00075C3A 4A6E 0340                  		tst.w	$340(a6)
00075C3E 6A00                       		bpl.s	loc_7218E
00075C40 08EE 0002 0100             		bset	#2,$100(a6)
00075C46                            
00075C46                            loc_7218E:
00075C46 4A6E 0370                  		tst.w	$370(a6)
00075C4A 6A00                       		bpl.s	loc_7219A
00075C4C 08EE 0002 01F0             		bset	#2,$1F0(a6)
00075C52                            
00075C52                            loc_7219A:
00075C52 4BEE 0070                  		lea	$70(a6),a5
00075C56 7805                       		moveq	#5,d4
00075C58                            
00075C58                            loc_721A0:
00075C58 4EBA 0000                  		jsr	sub_726FE(pc)
00075C5C DAC6                       		adda.w	d6,a5
00075C5E 51CC FFF8                  		dbf	d4,loc_721A0
00075C62 7802                       		moveq	#2,d4
00075C64                            
00075C64                            loc_721AC:
00075C64 4EBA 0000                  		jsr	sub_729A0(pc)
00075C68 DAC6                       		adda.w	d6,a5
00075C6A 51CC FFF8                  		dbf	d4,loc_721AC
00075C6E                            
00075C6E                            loc_721B6:
00075C6E 584F                       		addq.w	#4,sp
00075C70 4E75                       		rts	
00075C72                            ; ===========================================================================
00075C72 0600 0102 0405 0600        byte_721BA:	dc.b 6,	0, 1, 2, 4, 5, 6, 0
00075C7A                            		even
00075C7A 80A0 C000                  byte_721C2:	dc.b $80, $A0, $C0, 0
00075C7E                            		even
00075C7E                            ; ===========================================================================
00075C7E                            ; ---------------------------------------------------------------------------
00075C7E                            ; Play normal sound effect
00075C7E                            ; ---------------------------------------------------------------------------
00075C7E                            
00075C7E                            Sound_A0toCF:				; XREF: Sound_ChkValue
00075C7E 4A2E 0027                  		tst.b	$27(a6)
00075C82 6600 0000                  		bne.w	loc_722C6
00075C86 4A2E 0004                  		tst.b	4(a6)
00075C8A 6600 0000                  		bne.w	loc_722C6
00075C8E 4A2E 0024                  		tst.b	$24(a6)
00075C92 6600 0000                  		bne.w	loc_722C6
00075C96 0C07 00B5                  		cmpi.b	#$B5,d7		; is ring sound	effect played?
00075C9A 6600                       		bne.s	Sound_notB5	; if not, branch
00075C9C 4A2E 002B                  		tst.b	$2B(a6)
00075CA0 6600                       		bne.s	loc_721EE
00075CA2 1E3C 00CE                  		move.b	#$CE,d7		; play ring sound in left speaker
00075CA6                            
00075CA6                            loc_721EE:
00075CA6 086E 0000 002B             		bchg	#0,$2B(a6)	; change speaker
00075CAC                            
00075CAC                            Sound_notB5:
00075CAC 0C07 00A7                  		cmpi.b	#$A7,d7		; is "pushing" sound played?
00075CB0 6600                       		bne.s	Sound_notA7	; if not, branch
00075CB2 4A2E 002C                  		tst.b	$2C(a6)
00075CB6 6600 0000                  		bne.w	locret_722C4
00075CBA 1D7C 0080 002C             		move.b	#$80,$2C(a6)
00075CC0                            
00075CC0                            Sound_notA7:
00075CC0 2079 0007 5340             		movea.l	(Go_SoundIndex).l,a0
00075CC6 0407 00A0                  		subi.b	#$A0,d7
00075CCA E54F                       		lsl.w	#2,d7
00075CCC 2670 7000                  		movea.l	(a0,d7.w),a3
00075CD0 224B                       		movea.l	a3,a1
00075CD2 7200                       		moveq	#0,d1
00075CD4 3219                       		move.w	(a1)+,d1
00075CD6 D28B                       		add.l	a3,d1
00075CD8 1A19                       		move.b	(a1)+,d5
00075CDA 1E19                       		move.b	(a1)+,d7
00075CDC 5307                       		subq.b	#1,d7
00075CDE 7C30                       		moveq	#$30,d6
00075CE0                            
00075CE0                            loc_72228:
00075CE0 7600                       		moveq	#0,d3
00075CE2 1629 0001                  		move.b	1(a1),d3
00075CE6 1803                       		move.b	d3,d4
00075CE8 6B00                       		bmi.s	loc_72244
00075CEA 5543                       		subq.w	#2,d3
00075CEC E54B                       		lsl.w	#2,d3
00075CEE 4BFA 0000                  		lea	dword_722CC(pc),a5
00075CF2 2A75 3000                  		movea.l	(a5,d3.w),a5
00075CF6 08D5 0002                  		bset	#2,(a5)
00075CFA 6000                       		bra.s	loc_7226E
00075CFC                            ; ===========================================================================
00075CFC                            
00075CFC                            loc_72244:
00075CFC E64B                       		lsr.w	#3,d3
00075CFE 4BFA 0000                  		lea	dword_722CC(pc),a5
00075D02 2A75 3000                  		movea.l	(a5,d3.w),a5
00075D06 08D5 0002                  		bset	#2,(a5)
00075D0A 0C04 00C0                  		cmpi.b	#$C0,d4
00075D0E 6600                       		bne.s	loc_7226E
00075D10 1004                       		move.b	d4,d0
00075D12 0000 001F                  		ori.b	#$1F,d0
00075D16 13C0 00C0 0011             		move.b	d0,($C00011).l
00075D1C 0840 0005                  		bchg	#5,d0
00075D20 13C0 00C0 0011             		move.b	d0,($C00011).l
00075D26                            
00075D26                            loc_7226E:
00075D26 2A7B 3000                  		movea.l	dword_722EC(pc,d3.w),a5
00075D2A 244D                       		movea.l	a5,a2
00075D2C 700B                       		moveq	#$B,d0
00075D2E                            
00075D2E                            loc_72276:
00075D2E 429A                       		clr.l	(a2)+
00075D30 51C8 FFFC                  		dbf	d0,loc_72276
00075D34                            
00075D34 3A99                       		move.w	(a1)+,(a5)
00075D36 1B45 0002                  		move.b	d5,2(a5)
00075D3A 7000                       		moveq	#0,d0
00075D3C 3019                       		move.w	(a1)+,d0
00075D3E D08B                       		add.l	a3,d0
00075D40 2B40 0004                  		move.l	d0,4(a5)
00075D44 3B59 0008                  		move.w	(a1)+,8(a5)
00075D48 1B7C 0001 000E             		move.b	#1,$E(a5)
00075D4E 1B46 000D                  		move.b	d6,$D(a5)
00075D52 4A04                       		tst.b	d4
00075D54 6B00                       		bmi.s	loc_722A8
00075D56 1B7C 00C0 000A             		move.b	#$C0,$A(a5)
00075D5C 2B41 0020                  		move.l	d1,$20(a5)
00075D60                            
00075D60                            loc_722A8:
00075D60 51CF FF7E                  		dbf	d7,loc_72228
00075D64                            
00075D64 4A2E 0250                  		tst.b	$250(a6)
00075D68 6A00                       		bpl.s	loc_722B8
00075D6A 08EE 0002 0340             		bset	#2,$340(a6)
00075D70                            
00075D70                            loc_722B8:
00075D70 4A2E 0310                  		tst.b	$310(a6)
00075D74 6A00                       		bpl.s	locret_722C4
00075D76 08EE 0002 0370             		bset	#2,$370(a6)
00075D7C                            
00075D7C                            locret_722C4:
00075D7C 4E75                       		rts	
00075D7E                            ; ===========================================================================
00075D7E                            
00075D7E                            loc_722C6:
00075D7E 4216                       		clr.b	0(a6)
00075D80 4E75                       		rts	
00075D82                            ; ===========================================================================
00075D82 00FF F0D0                  dword_722CC:	dc.l $FFF0D0
00075D86 0000 0000                  		dc.l 0
00075D8A 00FF F100                  		dc.l $FFF100
00075D8E 00FF F130                  		dc.l $FFF130
00075D92 00FF F190                  		dc.l $FFF190
00075D96 00FF F1C0                  		dc.l $FFF1C0
00075D9A 00FF F1F0                  		dc.l $FFF1F0
00075D9E 00FF F1F0                  		dc.l $FFF1F0
00075DA2 00FF F220                  dword_722EC:	dc.l $FFF220
00075DA6 0000 0000                  		dc.l 0
00075DAA 00FF F250                  		dc.l $FFF250
00075DAE 00FF F280                  		dc.l $FFF280
00075DB2 00FF F2B0                  		dc.l $FFF2B0
00075DB6 00FF F2E0                  		dc.l $FFF2E0
00075DBA 00FF F310                  		dc.l $FFF310
00075DBE 00FF F310                  		dc.l $FFF310
00075DC2                            ; ===========================================================================
00075DC2                            ; ---------------------------------------------------------------------------
00075DC2                            ; Play GHZ waterfall sound
00075DC2                            ; ---------------------------------------------------------------------------
00075DC2                            
00075DC2                            Sound_D0toDF:				; XREF: Sound_ChkValue
00075DC2 4A2E 0027                  		tst.b	$27(a6)
00075DC6 6600 0000                  		bne.w	locret_723C6
00075DCA 4A2E 0004                  		tst.b	4(a6)
00075DCE 6600 0000                  		bne.w	locret_723C6
00075DD2 4A2E 0024                  		tst.b	$24(a6)
00075DD6 6600 0000                  		bne.w	locret_723C6
00075DDA 2079 0007 5338             		movea.l	(Go_SoundD0).l,a0
00075DE0 0407 00D0                  		subi.b	#$D0,d7
00075DE4 E54F                       		lsl.w	#2,d7
00075DE6 2670 7000                  		movea.l	(a0,d7.w),a3
00075DEA 224B                       		movea.l	a3,a1
00075DEC 7000                       		moveq	#0,d0
00075DEE 3019                       		move.w	(a1)+,d0
00075DF0 D08B                       		add.l	a3,d0
00075DF2 2D40 0020                  		move.l	d0,$20(a6)
00075DF6 1A19                       		move.b	(a1)+,d5
00075DF8 1E19                       		move.b	(a1)+,d7
00075DFA 5307                       		subq.b	#1,d7
00075DFC 7C30                       		moveq	#$30,d6
00075DFE                            
00075DFE                            loc_72348:
00075DFE 1829 0001                  		move.b	1(a1),d4
00075E02 6B00                       		bmi.s	loc_7235A
00075E04 08EE 0002 0100             		bset	#2,$100(a6)
00075E0A 4BEE 0340                  		lea	$340(a6),a5
00075E0E 6000                       		bra.s	loc_72364
00075E10                            ; ===========================================================================
00075E10                            
00075E10                            loc_7235A:
00075E10 08EE 0002 01F0             		bset	#2,$1F0(a6)
00075E16 4BEE 0370                  		lea	$370(a6),a5
00075E1A                            
00075E1A                            loc_72364:
00075E1A 244D                       		movea.l	a5,a2
00075E1C 700B                       		moveq	#$B,d0
00075E1E                            
00075E1E                            loc_72368:
00075E1E 429A                       		clr.l	(a2)+
00075E20 51C8 FFFC                  		dbf	d0,loc_72368
00075E24                            
00075E24 3A99                       		move.w	(a1)+,(a5)
00075E26 1B45 0002                  		move.b	d5,2(a5)
00075E2A 7000                       		moveq	#0,d0
00075E2C 3019                       		move.w	(a1)+,d0
00075E2E D08B                       		add.l	a3,d0
00075E30 2B40 0004                  		move.l	d0,4(a5)
00075E34 3B59 0008                  		move.w	(a1)+,8(a5)
00075E38 1B7C 0001 000E             		move.b	#1,$E(a5)
00075E3E 1B46 000D                  		move.b	d6,$D(a5)
00075E42 4A04                       		tst.b	d4
00075E44 6B00                       		bmi.s	loc_72396
00075E46 1B7C 00C0 000A             		move.b	#$C0,$A(a5)
00075E4C                            
00075E4C                            loc_72396:
00075E4C 51CF FFB0                  		dbf	d7,loc_72348
00075E50                            
00075E50 4A2E 0250                  		tst.b	$250(a6)
00075E54 6A00                       		bpl.s	loc_723A6
00075E56 08EE 0002 0340             		bset	#2,$340(a6)
00075E5C                            
00075E5C                            loc_723A6:
00075E5C 4A2E 0310                  		tst.b	$310(a6)
00075E60 6A00                       		bpl.s	locret_723C6
00075E62 08EE 0002 0370             		bset	#2,$370(a6)
00075E68 0004 001F                  		ori.b	#$1F,d4
00075E6C 13C4 00C0 0011             		move.b	d4,($C00011).l
00075E72 0844 0005                  		bchg	#5,d4
00075E76 13C4 00C0 0011             		move.b	d4,($C00011).l
00075E7C                            
00075E7C                            locret_723C6:
00075E7C 4E75                       		rts	
00075E7E                            ; End of function Sound_ChkValue
00075E7E                            
00075E7E                            ; ===========================================================================
00075E7E 00FF F100                  		dc.l $FFF100
00075E82 00FF F1F0                  		dc.l $FFF1F0
00075E86 00FF F250                  		dc.l $FFF250
00075E8A 00FF F310                  		dc.l $FFF310
00075E8E 00FF F340                  		dc.l $FFF340
00075E92 00FF F370                  		dc.l $FFF370
00075E96                            
00075E96                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00075E96                            
00075E96                            
00075E96                            Snd_FadeOut1:				; XREF: Sound_E0
00075E96 4216                       		clr.b	0(a6)
00075E98 4BEE 0220                  		lea	$220(a6),a5
00075E9C 7E05                       		moveq	#5,d7
00075E9E                            
00075E9E                            loc_723EA:
00075E9E 4A15                       		tst.b	(a5)
00075EA0 6A00 0000                  		bpl.w	loc_72472
00075EA4 0895 0007                  		bclr	#7,(a5)
00075EA8 7600                       		moveq	#0,d3
00075EAA 162D 0001                  		move.b	1(a5),d3
00075EAE 6B00                       		bmi.s	loc_7243C
00075EB0 4EBA 0000                  		jsr	sub_726FE(pc)
00075EB4 0C03 0004                  		cmpi.b	#4,d3
00075EB8 6600                       		bne.s	loc_72416
00075EBA 4A2E 0340                  		tst.b	$340(a6)
00075EBE 6A00                       		bpl.s	loc_72416
00075EC0 4BEE 0340                  		lea	$340(a6),a5
00075EC4 226E 0020                  		movea.l	$20(a6),a1
00075EC8 6000                       		bra.s	loc_72428
00075ECA                            ; ===========================================================================
00075ECA                            
00075ECA                            loc_72416:
00075ECA 5503                       		subq.b	#2,d3
00075ECC E50B                       		lsl.b	#2,d3
00075ECE 41FA FEB2                  		lea	dword_722CC(pc),a0
00075ED2 264D                       		movea.l	a5,a3
00075ED4 2A70 3000                  		movea.l	(a0,d3.w),a5
00075ED8 226E 0018                  		movea.l	$18(a6),a1
00075EDC                            
00075EDC                            loc_72428:
00075EDC 0895 0002                  		bclr	#2,(a5)
00075EE0 08D5 0001                  		bset	#1,(a5)
00075EE4 102D 000B                  		move.b	$B(a5),d0
00075EE8 4EBA 0000                  		jsr	sub_72C4E(pc)
00075EEC 2A4B                       		movea.l	a3,a5
00075EEE 6000                       		bra.s	loc_72472
00075EF0                            ; ===========================================================================
00075EF0                            
00075EF0                            loc_7243C:
00075EF0 4EBA 0000                  		jsr	sub_729A0(pc)
00075EF4 41EE 0370                  		lea	$370(a6),a0
00075EF8 0C03 00E0                  		cmpi.b	#$E0,d3
00075EFC 6700                       		beq.s	loc_7245A
00075EFE 0C03 00C0                  		cmpi.b	#$C0,d3
00075F02 6700                       		beq.s	loc_7245A
00075F04 E60B                       		lsr.b	#3,d3
00075F06 41FA FE7A                  		lea	dword_722CC(pc),a0
00075F0A 2070 3000                  		movea.l	(a0,d3.w),a0
00075F0E                            
00075F0E                            loc_7245A:
00075F0E 0890 0002                  		bclr	#2,(a0)
00075F12 08D0 0001                  		bset	#1,(a0)
00075F16 0C28 00E0 0001             		cmpi.b	#$E0,1(a0)
00075F1C 6600                       		bne.s	loc_72472
00075F1E 13E8 001F 00C0 0011        		move.b	$1F(a0),($C00011).l
00075F26                            
00075F26                            loc_72472:
00075F26 DAFC 0030                  		adda.w	#$30,a5
00075F2A 51CF FF72                  		dbf	d7,loc_723EA
00075F2E                            
00075F2E 4E75                       		rts	
00075F30                            ; End of function Snd_FadeOut1
00075F30                            
00075F30                            
00075F30                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00075F30                            
00075F30                            
00075F30                            Snd_FadeOut2:				; XREF: Sound_E0
00075F30 4BEE 0340                  		lea	$340(a6),a5
00075F34 4A15                       		tst.b	(a5)
00075F36 6A00                       		bpl.s	loc_724AE
00075F38 0895 0007                  		bclr	#7,(a5)
00075F3C 0815 0002                  		btst	#2,(a5)
00075F40 6600                       		bne.s	loc_724AE
00075F42 4EBA 0000                  		jsr	loc_7270A(pc)
00075F46 4BEE 0100                  		lea	$100(a6),a5
00075F4A 0895 0002                  		bclr	#2,(a5)
00075F4E 08D5 0001                  		bset	#1,(a5)
00075F52 4A15                       		tst.b	(a5)
00075F54 6A00                       		bpl.s	loc_724AE
00075F56 226E 0018                  		movea.l	$18(a6),a1
00075F5A 102D 000B                  		move.b	$B(a5),d0
00075F5E 4EBA 0000                  		jsr	sub_72C4E(pc)
00075F62                            
00075F62                            loc_724AE:
00075F62 4BEE 0370                  		lea	$370(a6),a5
00075F66 4A15                       		tst.b	(a5)
00075F68 6A00                       		bpl.s	locret_724E4
00075F6A 0895 0007                  		bclr	#7,(a5)
00075F6E 0815 0002                  		btst	#2,(a5)
00075F72 6600                       		bne.s	locret_724E4
00075F74 4EBA 0000                  		jsr	loc_729A6(pc)
00075F78 4BEE 01F0                  		lea	$1F0(a6),a5
00075F7C 0895 0002                  		bclr	#2,(a5)
00075F80 08D5 0001                  		bset	#1,(a5)
00075F84 4A15                       		tst.b	(a5)
00075F86 6A00                       		bpl.s	locret_724E4
00075F88 0C2D 00E0 0001             		cmpi.b	#-$20,1(a5)
00075F8E 6600                       		bne.s	locret_724E4
00075F90 13ED 001F 00C0 0011        		move.b	$1F(a5),($C00011).l
00075F98                            
00075F98                            locret_724E4:
00075F98 4E75                       		rts	
00075F9A                            ; End of function Snd_FadeOut2
00075F9A                            
00075F9A                            ; ===========================================================================
00075F9A                            ; ---------------------------------------------------------------------------
00075F9A                            ; Fade out music
00075F9A                            ; ---------------------------------------------------------------------------
00075F9A                            
00075F9A                            Sound_E0:				; XREF: Sound_ExIndex
00075F9A 4EBA FEFA                  		jsr	Snd_FadeOut1(pc)
00075F9E 4EBA FF90                  		jsr	Snd_FadeOut2(pc)
00075FA2 1D7C 0003 0006             		move.b	#3,6(a6)
00075FA8 1D7C 0028 0004             		move.b	#$28,4(a6)
00075FAE 422E 0040                  		clr.b	$40(a6)
00075FB2 422E 002A                  		clr.b	$2A(a6)
00075FB6 4E75                       		rts	
00075FB8                            
00075FB8                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00075FB8                            
00075FB8                            
00075FB8                            sub_72504:				; XREF: sub_71B4C
00075FB8 102E 0006                  		move.b	6(a6),d0
00075FBC 6700                       		beq.s	loc_72510
00075FBE 532E 0006                  		subq.b	#1,6(a6)
00075FC2 4E75                       		rts	
00075FC4                            ; ===========================================================================
00075FC4                            
00075FC4                            loc_72510:
00075FC4 532E 0004                  		subq.b	#1,4(a6)
00075FC8 6700 0000                  		beq.w	Sound_E4
00075FCC 1D7C 0003 0006             		move.b	#3,6(a6)
00075FD2 4BEE 0070                  		lea	$70(a6),a5
00075FD6 7E05                       		moveq	#5,d7
00075FD8                            
00075FD8                            loc_72524:
00075FD8 4A15                       		tst.b	(a5)
00075FDA 6A00                       		bpl.s	loc_72538
00075FDC 522D 0009                  		addq.b	#1,9(a5)
00075FE0 6A00                       		bpl.s	loc_72534
00075FE2 0895 0007                  		bclr	#7,(a5)
00075FE6 6000                       		bra.s	loc_72538
00075FE8                            ; ===========================================================================
00075FE8                            
00075FE8                            loc_72534:
00075FE8 4EBA 0000                  		jsr	sub_72CB4(pc)
00075FEC                            
00075FEC                            loc_72538:
00075FEC DAFC 0030                  		adda.w	#$30,a5
00075FF0 51CF FFE6                  		dbf	d7,loc_72524
00075FF4                            
00075FF4 7E02                       		moveq	#2,d7
00075FF6                            
00075FF6                            loc_72542:
00075FF6 4A15                       		tst.b	(a5)
00075FF8 6A00                       		bpl.s	loc_72560
00075FFA 522D 0009                  		addq.b	#1,9(a5)
00075FFE 0C2D 0010 0009             		cmpi.b	#$10,9(a5)
00076004 6500                       		bcs.s	loc_72558
00076006 0895 0007                  		bclr	#7,(a5)
0007600A 6000                       		bra.s	loc_72560
0007600C                            ; ===========================================================================
0007600C                            
0007600C                            loc_72558:
0007600C 1C2D 0009                  		move.b	9(a5),d6
00076010 4EBA 0000                  		jsr	sub_7296A(pc)
00076014                            
00076014                            loc_72560:
00076014 DAFC 0030                  		adda.w	#$30,a5
00076018 51CF FFDC                  		dbf	d7,loc_72542
0007601C                            
0007601C 4E75                       		rts	
0007601E                            ; End of function sub_72504
0007601E                            
0007601E                            
0007601E                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0007601E                            
0007601E                            
0007601E                            sub_7256A:				; XREF: Sound_E4; sub_725CA
0007601E 7602                       		moveq	#2,d3
00076020 7028                       		moveq	#$28,d0
00076022                            
00076022                            loc_7256E:
00076022 1203                       		move.b	d3,d1
00076024 4EBA 0000                  		jsr	sub_7272E(pc)
00076028 5801                       		addq.b	#4,d1
0007602A 4EBA 0000                  		jsr	sub_7272E(pc)
0007602E 51CB FFF2                  		dbf	d3,loc_7256E
00076032                            
00076032 7040                       		moveq	#$40,d0
00076034 727F                       		moveq	#$7F,d1
00076036 7802                       		moveq	#2,d4
00076038                            
00076038                            loc_72584:
00076038 7603                       		moveq	#3,d3
0007603A                            
0007603A                            loc_72586:
0007603A 4EBA 0000                  		jsr	sub_7272E(pc)
0007603E 4EBA 0000                  		jsr	sub_72764(pc)
00076042 5840                       		addq.w	#4,d0
00076044 51CB FFF4                  		dbf	d3,loc_72586
00076048                            
00076048 0400 000F                  		subi.b	#$F,d0
0007604C 51CC FFEA                  		dbf	d4,loc_72584
00076050                            
00076050 4E75                       		rts	
00076052                            ; End of function sub_7256A
00076052                            
00076052                            ; ===========================================================================
00076052                            ; ---------------------------------------------------------------------------
00076052                            ; Stop music
00076052                            ; ---------------------------------------------------------------------------
00076052                            
00076052                            Sound_E4:				; XREF: Sound_ChkValue; Sound_ExIndex; sub_72504
00076052 702B                       		moveq	#$2B,d0
00076054 123C 0080                  		move.b	#$80,d1
00076058 4EBA 0000                  		jsr	sub_7272E(pc)
0007605C 7027                       		moveq	#$27,d0
0007605E 7200                       		moveq	#0,d1
00076060 4EBA 0000                  		jsr	sub_7272E(pc)
00076064 204E                       		movea.l	a6,a0
00076066 303C 00E3                  		move.w	#$E3,d0
0007606A                            
0007606A                            loc_725B6:
0007606A 4298                       		clr.l	(a0)+
0007606C 51C8 FFFC                  		dbf	d0,loc_725B6
00076070                            
00076070 1D7C 0080 0009             		move.b	#$80,9(a6)	; set music to $80 (silence)
00076076 4EBA FFA6                  		jsr	sub_7256A(pc)
0007607A 6000 0000                  		bra.w	sub_729B6
0007607E                            
0007607E                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0007607E                            
0007607E                            
0007607E                            sub_725CA:				; XREF: Sound_ChkValue
0007607E 204E                       		movea.l	a6,a0
00076080 1216                       		move.b	0(a6),d1
00076082 142E 0027                  		move.b	$27(a6),d2
00076086 162E 002A                  		move.b	$2A(a6),d3
0007608A 182E 0026                  		move.b	$26(a6),d4
0007608E 3A2E 000A                  		move.w	$A(a6),d5
00076092 303C 0087                  		move.w	#$87,d0
00076096                            
00076096                            loc_725E4:
00076096 4298                       		clr.l	(a0)+
00076098 51C8 FFFC                  		dbf	d0,loc_725E4
0007609C                            
0007609C 1C81                       		move.b	d1,0(a6)
0007609E 1D42 0027                  		move.b	d2,$27(a6)
000760A2 1D43 002A                  		move.b	d3,$2A(a6)
000760A6 1D44 0026                  		move.b	d4,$26(a6)
000760AA 3D45 000A                  		move.w	d5,$A(a6)
000760AE 1D7C 0080 0009             		move.b	#$80,9(a6)
000760B4 4EBA FF68                  		jsr	sub_7256A(pc)
000760B8 6000 0000                  		bra.w	sub_729B6
000760BC                            ; End of function sub_725CA
000760BC                            
000760BC                            
000760BC                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000760BC                            
000760BC                            
000760BC                            sub_7260C:				; XREF: sub_71B4C
000760BC 1D6E 0002 0001             		move.b	2(a6),1(a6)
000760C2 41EE 004E                  		lea	$4E(a6),a0
000760C6 7030                       		moveq	#$30,d0
000760C8 7209                       		moveq	#9,d1
000760CA                            
000760CA                            loc_7261A:
000760CA 5210                       		addq.b	#1,(a0)
000760CC D0C0                       		adda.w	d0,a0
000760CE 51C9 FFFA                  		dbf	d1,loc_7261A
000760D2                            
000760D2 4E75                       		rts	
000760D4                            ; End of function sub_7260C
000760D4                            
000760D4                            ; ===========================================================================
000760D4                            ; ---------------------------------------------------------------------------
000760D4                            ; Speed	up music
000760D4                            ; ---------------------------------------------------------------------------
000760D4                            
000760D4                            Sound_E2:				; XREF: Sound_ExIndex
000760D4 4A2E 0027                  		tst.b	$27(a6)
000760D8 6600                       		bne.s	loc_7263E
000760DA 1D6E 0029 0002             		move.b	$29(a6),2(a6)
000760E0 1D6E 0029 0001             		move.b	$29(a6),1(a6)
000760E6 1D7C 0080 002A             		move.b	#$80,$2A(a6)
000760EC 4E75                       		rts	
000760EE                            ; ===========================================================================
000760EE                            
000760EE                            loc_7263E:
000760EE 1D6E 03C9 03A2             		move.b	$3C9(a6),$3A2(a6)
000760F4 1D6E 03C9 03A1             		move.b	$3C9(a6),$3A1(a6)
000760FA 1D7C 0080 03CA             		move.b	#$80,$3CA(a6)
00076100 4E75                       		rts	
00076102                            ; ===========================================================================
00076102                            ; ---------------------------------------------------------------------------
00076102                            ; Change music back to normal speed
00076102                            ; ---------------------------------------------------------------------------
00076102                            
00076102                            Sound_E3:				; XREF: Sound_ExIndex
00076102 4A2E 0027                  		tst.b	$27(a6)
00076106 6600                       		bne.s	loc_7266A
00076108 1D6E 0028 0002             		move.b	$28(a6),2(a6)
0007610E 1D6E 0028 0001             		move.b	$28(a6),1(a6)
00076114 422E 002A                  		clr.b	$2A(a6)
00076118 4E75                       		rts	
0007611A                            ; ===========================================================================
0007611A                            
0007611A                            loc_7266A:
0007611A 1D6E 03C8 03A2             		move.b	$3C8(a6),$3A2(a6)
00076120 1D6E 03C8 03A1             		move.b	$3C8(a6),$3A1(a6)
00076126 422E 03CA                  		clr.b	$3CA(a6)
0007612A 4E75                       		rts	
0007612C                            
0007612C                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0007612C                            
0007612C                            
0007612C                            sub_7267C:				; XREF: sub_71B4C
0007612C 4A2E 0025                  		tst.b	$25(a6)
00076130 6700                       		beq.s	loc_72688
00076132 532E 0025                  		subq.b	#1,$25(a6)
00076136 4E75                       		rts	
00076138                            ; ===========================================================================
00076138                            
00076138                            loc_72688:
00076138 4A2E 0026                  		tst.b	$26(a6)
0007613C 6700                       		beq.s	loc_726D6
0007613E 532E 0026                  		subq.b	#1,$26(a6)
00076142 1D7C 0002 0025             		move.b	#2,$25(a6)
00076148 4BEE 0070                  		lea	$70(a6),a5
0007614C 7E05                       		moveq	#5,d7
0007614E                            
0007614E                            loc_7269E:
0007614E 4A15                       		tst.b	(a5)
00076150 6A00                       		bpl.s	loc_726AA
00076152 532D 0009                  		subq.b	#1,9(a5)
00076156 4EBA 0000                  		jsr	sub_72CB4(pc)
0007615A                            
0007615A                            loc_726AA:
0007615A DAFC 0030                  		adda.w	#$30,a5
0007615E 51CF FFEE                  		dbf	d7,loc_7269E
00076162 7E02                       		moveq	#2,d7
00076164                            
00076164                            loc_726B4:
00076164 4A15                       		tst.b	(a5)
00076166 6A00                       		bpl.s	loc_726CC
00076168 532D 0009                  		subq.b	#1,9(a5)
0007616C 1C2D 0009                  		move.b	9(a5),d6
00076170 0C06 0010                  		cmpi.b	#$10,d6
00076174 6500                       		bcs.s	loc_726C8
00076176 7C0F                       		moveq	#$F,d6
00076178                            
00076178                            loc_726C8:
00076178 4EBA 0000                  		jsr	sub_7296A(pc)
0007617C                            
0007617C                            loc_726CC:
0007617C DAFC 0030                  		adda.w	#$30,a5
00076180 51CF FFE2                  		dbf	d7,loc_726B4
00076184 4E75                       		rts	
00076186                            ; ===========================================================================
00076186                            
00076186                            loc_726D6:
00076186 08AE 0002 0040             		bclr	#2,$40(a6)
0007618C 422E 0024                  		clr.b	$24(a6)
00076190 4E75                       		rts	
00076192                            ; End of function sub_7267C
00076192                            
00076192                            ; ===========================================================================
00076192                            
00076192                            loc_726E2:				; XREF: sub_71CCA
00076192 0815 0001                  		btst	#1,(a5)
00076196 6600                       		bne.s	locret_726FC
00076198 0815 0002                  		btst	#2,(a5)
0007619C 6600                       		bne.s	locret_726FC
0007619E 7028                       		moveq	#$28,d0
000761A0 122D 0001                  		move.b	1(a5),d1
000761A4 0001 00F0                  		ori.b	#-$10,d1
000761A8 6000 0000                  		bra.w	sub_7272E
000761AC                            ; ===========================================================================
000761AC                            
000761AC                            locret_726FC:
000761AC 4E75                       		rts	
000761AE                            
000761AE                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000761AE                            
000761AE                            
000761AE                            sub_726FE:				; XREF: sub_71CEC; sub_71D9E; Sound_ChkValue; Snd_FadeOut1
000761AE 0815 0004                  		btst	#4,(a5)
000761B2 6600                       		bne.s	locret_72714
000761B4 0815 0002                  		btst	#2,(a5)
000761B8 6600                       		bne.s	locret_72714
000761BA                            
000761BA                            loc_7270A:				; XREF: Snd_FadeOut2
000761BA 7028                       		moveq	#$28,d0
000761BC 122D 0001                  		move.b	1(a5),d1
000761C0 6000 0000                  		bra.w	sub_7272E
000761C4                            ; ===========================================================================
000761C4                            
000761C4                            locret_72714:
000761C4 4E75                       		rts	
000761C6                            ; End of function sub_726FE
000761C6                            
000761C6                            ; ===========================================================================
000761C6                            
000761C6                            loc_72716:				; XREF: sub_72A5A
000761C6 0815 0002                  		btst	#2,(a5)
000761CA 6600                       		bne.s	locret_72720
000761CC 6000 0000                  		bra.w	sub_72722
000761D0                            ; ===========================================================================
000761D0                            
000761D0                            locret_72720:
000761D0 4E75                       		rts	
000761D2                            
000761D2                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000761D2                            
000761D2                            
000761D2                            sub_72722:				; XREF: sub_71E18; sub_72C4E; sub_72CB4
000761D2 082D 0002 0001             		btst	#2,1(a5)
000761D8 6600                       		bne.s	loc_7275A
000761DA D02D 0001                  		add.b	1(a5),d0
000761DE                            ; End of function sub_72722
000761DE                            
000761DE                            
000761DE                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000761DE                            
000761DE                            
000761DE                            sub_7272E:				; XREF: loc_71E6A
000761DE 1439 00A0 4000             		move.b	($A04000).l,d2
000761E4 0802 0007                  		btst	#7,d2
000761E8 66F4                       		bne.s	sub_7272E
000761EA 13C0 00A0 4000             		move.b	d0,($A04000).l
000761F0 4E71                       		nop	
000761F2 4E71                       		nop	
000761F4 4E71                       		nop	
000761F6                            
000761F6                            loc_72746:
000761F6 1439 00A0 4000             		move.b	($A04000).l,d2
000761FC 0802 0007                  		btst	#7,d2
00076200 66F4                       		bne.s	loc_72746
00076202                            
00076202 13C1 00A0 4001             		move.b	d1,($A04001).l
00076208 4E75                       		rts	
0007620A                            ; End of function sub_7272E
0007620A                            
0007620A                            ; ===========================================================================
0007620A                            
0007620A                            loc_7275A:				; XREF: sub_72722
0007620A 142D 0001                  		move.b	1(a5),d2
0007620E 0882 0002                  		bclr	#2,d2
00076212 D002                       		add.b	d2,d0
00076214                            
00076214                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00076214                            
00076214                            
00076214                            sub_72764:				; XREF: loc_71E6A; Sound_ChkValue; sub_7256A; sub_72764
00076214 1439 00A0 4000             		move.b	($A04000).l,d2
0007621A 0802 0007                  		btst	#7,d2
0007621E 66F4                       		bne.s	sub_72764
00076220 13C0 00A0 4002             		move.b	d0,($A04002).l
00076226 4E71                       		nop	
00076228 4E71                       		nop	
0007622A 4E71                       		nop	
0007622C                            
0007622C                            loc_7277C:
0007622C 1439 00A0 4000             		move.b	($A04000).l,d2
00076232 0802 0007                  		btst	#7,d2
00076236 66F4                       		bne.s	loc_7277C
00076238                            
00076238 13C1 00A0 4003             		move.b	d1,($A04003).l
0007623E 4E75                       		rts	
00076240                            ; End of function sub_72764
00076240                            
00076240                            ; ===========================================================================
00076240 025E 0284 02AB 02D3 02FE+  word_72790:	dc.w $25E, $284, $2AB, $2D3, $2FE, $32D, $35C, $38F, $3C5
00076252 03FF 043C 047C 0A5E 0A84+  		dc.w $3FF, $43C, $47C, $A5E, $A84, $AAB, $AD3, $AFE, $B2D
00076264 0B5C 0B8F 0BC5 0BFF 0C3C+  		dc.w $B5C, $B8F, $BC5, $BFF, $C3C, $C7C, $125E,	$1284
00076274 12AB 12D3 12FE 132D 135C+  		dc.w $12AB, $12D3, $12FE, $132D, $135C,	$138F, $13C5, $13FF
00076284 143C 147C 1A5E 1A84 1AAB+  		dc.w $143C, $147C, $1A5E, $1A84, $1AAB,	$1AD3, $1AFE, $1B2D
00076294 1B5C 1B8F 1BC5 1BFF 1C3C+  		dc.w $1B5C, $1B8F, $1BC5, $1BFF, $1C3C,	$1C7C, $225E, $2284
000762A4 22AB 22D3 22FE 232D 235C+  		dc.w $22AB, $22D3, $22FE, $232D, $235C,	$238F, $23C5, $23FF
000762B4 243C 247C 2A5E 2A84 2AAB+  		dc.w $243C, $247C, $2A5E, $2A84, $2AAB,	$2AD3, $2AFE, $2B2D
000762C4 2B5C 2B8F 2BC5 2BFF 2C3C+  		dc.w $2B5C, $2B8F, $2BC5, $2BFF, $2C3C,	$2C7C, $325E, $3284
000762D4 32AB 32D3 32FE 332D 335C+  		dc.w $32AB, $32D3, $32FE, $332D, $335C,	$338F, $33C5, $33FF
000762E4 343C 347C 3A5E 3A84 3AAB+  		dc.w $343C, $347C, $3A5E, $3A84, $3AAB,	$3AD3, $3AFE, $3B2D
000762F4 3B5C 3B8F 3BC5 3BFF 3C3C+  		dc.w $3B5C, $3B8F, $3BC5, $3BFF, $3C3C,	$3C7C
00076300                            
00076300                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00076300                            
00076300                            
00076300                            sub_72850:				; XREF: sub_71B4C
00076300 532D 000E                  		subq.b	#1,$E(a5)
00076304 6600                       		bne.s	loc_72866
00076306 0895 0004                  		bclr	#4,(a5)
0007630A 4EBA 0000                  		jsr	sub_72878(pc)
0007630E 4EBA 0000                  		jsr	sub_728DC(pc)
00076312 6000 0000                  		bra.w	loc_7292E
00076316                            ; ===========================================================================
00076316                            
00076316                            loc_72866:
00076316 4EBA F45A                  		jsr	sub_71D9E(pc)
0007631A 4EBA 0000                  		jsr	sub_72926(pc)
0007631E 4EBA F47A                  		jsr	sub_71DC6(pc)
00076322 4EBA 0000                  		jsr	sub_728E2(pc)
00076326 4E75                       		rts	
00076328                            ; End of function sub_72850
00076328                            
00076328                            
00076328                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00076328                            
00076328                            
00076328                            sub_72878:				; XREF: sub_72850
00076328 0895 0001                  		bclr	#1,(a5)
0007632C 286D 0004                  		movea.l	4(a5),a4
00076330                            
00076330                            loc_72880:
00076330 7A00                       		moveq	#0,d5
00076332 1A1C                       		move.b	(a4)+,d5
00076334 0C05 00E0                  		cmpi.b	#$E0,d5
00076338 6500                       		bcs.s	loc_72890
0007633A 4EBA 0000                  		jsr	sub_72A5A(pc)
0007633E 60F0                       		bra.s	loc_72880
00076340                            ; ===========================================================================
00076340                            
00076340                            loc_72890:
00076340 4A05                       		tst.b	d5
00076342 6A00                       		bpl.s	loc_728A4
00076344 4EBA 0000                  		jsr	sub_728AC(pc)
00076348 1A1C                       		move.b	(a4)+,d5
0007634A 4A05                       		tst.b	d5
0007634C 6A00                       		bpl.s	loc_728A4
0007634E 534C                       		subq.w	#1,a4
00076350 6000 F3E2                  		bra.w	sub_71D60
00076354                            ; ===========================================================================
00076354                            
00076354                            loc_728A4:
00076354 4EBA F3BE                  		jsr	sub_71D40(pc)
00076358 6000 F3DA                  		bra.w	sub_71D60
0007635C                            ; End of function sub_72878
0007635C                            
0007635C                            
0007635C                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0007635C                            
0007635C                            
0007635C                            sub_728AC:				; XREF: sub_72878
0007635C 0405 0081                  		subi.b	#$81,d5
00076360 6500                       		bcs.s	loc_728CA
00076362 DA2D 0008                  		add.b	8(a5),d5
00076366 0245 007F                  		andi.w	#$7F,d5
0007636A E34D                       		lsl.w	#1,d5
0007636C 41FA 0000                  		lea	word_729CE(pc),a0
00076370 3B70 5000 0010             		move.w	(a0,d5.w),$10(a5)
00076376 6000 F3BC                  		bra.w	sub_71D60
0007637A                            ; ===========================================================================
0007637A                            
0007637A                            loc_728CA:
0007637A 08D5 0001                  		bset	#1,(a5)
0007637E 3B7C FFFF 0010             		move.w	#-1,$10(a5)
00076384 4EBA F3AE                  		jsr	sub_71D60(pc)
00076388 6000 0000                  		bra.w	sub_729A0
0007638C                            ; End of function sub_728AC
0007638C                            
0007638C                            
0007638C                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0007638C                            
0007638C                            
0007638C                            sub_728DC:				; XREF: sub_72850
0007638C 3C2D 0010                  		move.w	$10(a5),d6
00076390 6B00                       		bmi.s	loc_72920
00076392                            ; End of function sub_728DC
00076392                            
00076392                            
00076392                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00076392                            
00076392                            
00076392                            sub_728E2:				; XREF: sub_72850
00076392 102D 001E                  		move.b	$1E(a5),d0
00076396 4880                       		ext.w	d0
00076398 DC40                       		add.w	d0,d6
0007639A 0815 0002                  		btst	#2,(a5)
0007639E 6600                       		bne.s	locret_7291E
000763A0 0815 0001                  		btst	#1,(a5)
000763A4 6600                       		bne.s	locret_7291E
000763A6 102D 0001                  		move.b	1(a5),d0
000763AA 0C00 00E0                  		cmpi.b	#$E0,d0
000763AE 6600                       		bne.s	loc_72904
000763B0 103C 00C0                  		move.b	#$C0,d0
000763B4                            
000763B4                            loc_72904:
000763B4 3206                       		move.w	d6,d1
000763B6 0201 000F                  		andi.b	#$F,d1
000763BA 8001                       		or.b	d1,d0
000763BC E84E                       		lsr.w	#4,d6
000763BE 0206 003F                  		andi.b	#$3F,d6
000763C2 13C0 00C0 0011             		move.b	d0,($C00011).l
000763C8 13C6 00C0 0011             		move.b	d6,($C00011).l
000763CE                            
000763CE                            locret_7291E:
000763CE 4E75                       		rts	
000763D0                            ; End of function sub_728E2
000763D0                            
000763D0                            ; ===========================================================================
000763D0                            
000763D0                            loc_72920:				; XREF: sub_728DC
000763D0 08D5 0001                  		bset	#1,(a5)
000763D4 4E75                       		rts	
000763D6                            
000763D6                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000763D6                            
000763D6                            
000763D6                            sub_72926:				; XREF: sub_72850
000763D6 4A2D 000B                  		tst.b	$B(a5)
000763DA 6700 0000                  		beq.w	locret_7298A
000763DE                            
000763DE                            loc_7292E:				; XREF: sub_72850
000763DE 1C2D 0009                  		move.b	9(a5),d6
000763E2 7000                       		moveq	#0,d0
000763E4 102D 000B                  		move.b	$B(a5),d0
000763E8 6700                       		beq.s	sub_7296A
000763EA 2079 0007 5348             		movea.l	(Go_PSGIndex).l,a0
000763F0 5340                       		subq.w	#1,d0
000763F2 E548                       		lsl.w	#2,d0
000763F4 2070 0000                  		movea.l	(a0,d0.w),a0
000763F8 102D 000C                  		move.b	$C(a5),d0
000763FC 1030 0000                  		move.b	(a0,d0.w),d0
00076400 522D 000C                  		addq.b	#1,$C(a5)
00076404 0800 0007                  		btst	#7,d0
00076408 6700                       		beq.s	loc_72960
0007640A 0C00 0080                  		cmpi.b	#$80,d0
0007640E 6700                       		beq.s	loc_7299A
00076410                            
00076410                            loc_72960:
00076410 DC40                       		add.w	d0,d6
00076412 0C06 0010                  		cmpi.b	#$10,d6
00076416 6500                       		bcs.s	sub_7296A
00076418 7C0F                       		moveq	#$F,d6
0007641A                            ; End of function sub_72926
0007641A                            
0007641A                            
0007641A                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0007641A                            
0007641A                            
0007641A                            sub_7296A:				; XREF: sub_72504; sub_7267C; sub_72926
0007641A 0815 0001                  		btst	#1,(a5)
0007641E 6600                       		bne.s	locret_7298A
00076420 0815 0002                  		btst	#2,(a5)
00076424 6600                       		bne.s	locret_7298A
00076426 0815 0004                  		btst	#4,(a5)
0007642A 6600                       		bne.s	loc_7298C
0007642C                            
0007642C                            loc_7297C:
0007642C 8C2D 0001                  		or.b	1(a5),d6
00076430 0606 0010                  		addi.b	#$10,d6
00076434 13C6 00C0 0011             		move.b	d6,($C00011).l
0007643A                            
0007643A                            locret_7298A:
0007643A 4E75                       		rts	
0007643C                            ; ===========================================================================
0007643C                            
0007643C                            loc_7298C:
0007643C 4A2D 0013                  		tst.b	$13(a5)
00076440 67EA                       		beq.s	loc_7297C
00076442 4A2D 0012                  		tst.b	$12(a5)
00076446 66E4                       		bne.s	loc_7297C
00076448 4E75                       		rts	
0007644A                            ; End of function sub_7296A
0007644A                            
0007644A                            ; ===========================================================================
0007644A                            
0007644A                            loc_7299A:				; XREF: sub_72926
0007644A 532D 000C                  		subq.b	#1,$C(a5)
0007644E 4E75                       		rts	
00076450                            
00076450                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00076450                            
00076450                            
00076450                            sub_729A0:				; XREF: sub_71D9E; Sound_ChkValue; Snd_FadeOut1; sub_728AC
00076450 0815 0002                  		btst	#2,(a5)
00076454 6600                       		bne.s	locret_729B4
00076456                            
00076456                            loc_729A6:				; XREF: Snd_FadeOut2
00076456 102D 0001                  		move.b	1(a5),d0
0007645A 0000 001F                  		ori.b	#$1F,d0
0007645E 13C0 00C0 0011             		move.b	d0,($C00011).l
00076464                            
00076464                            locret_729B4:
00076464 4E75                       		rts	
00076466                            ; End of function sub_729A0
00076466                            
00076466                            
00076466                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00076466                            
00076466                            
00076466                            sub_729B6:				; XREF: loc_71E7C
00076466 41F9 00C0 0011             		lea	($C00011).l,a0
0007646C 10BC 009F                  		move.b	#$9F,(a0)
00076470 10BC 00BF                  		move.b	#$BF,(a0)
00076474 10BC 00DF                  		move.b	#$DF,(a0)
00076478 10BC 00FF                  		move.b	#$FF,(a0)
0007647C 4E75                       		rts	
0007647E                            ; End of function sub_729B6
0007647E                            
0007647E                            ; ===========================================================================
0007647E 0356 0326 02F9 02CE 02A5+  word_729CE:	dc.w $356, $326, $2F9, $2CE, $2A5, $280, $25C, $23A, $21A
00076490 01FB 01DF 01C4 01AB 0193+  		dc.w $1FB, $1DF, $1C4, $1AB, $193, $17D, $167, $153, $140
000764A2 012E 011D 010D 00FE 00EF+  		dc.w $12E, $11D, $10D, $FE, $EF, $E2, $D6, $C9,	$BE, $B4
000764B6 00A9 00A0 0097 008F 0087+  		dc.w $A9, $A0, $97, $8F, $87, $7F, $78,	$71, $6B, $65
000764CA 005F 005A 0055 0050 004B+  		dc.w $5F, $5A, $55, $50, $4B, $47, $43,	$40, $3C, $39
000764DE 0036 0033 0030 002D 002B+  		dc.w $36, $33, $30, $2D, $2B, $28, $26,	$24, $22, $20
000764F2 001F 001D 001B 001A 0018+  		dc.w $1F, $1D, $1B, $1A, $18, $17, $16,	$15, $13, $12
00076506 0011 0000                  		dc.w $11, 0
0007650A                            
0007650A                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0007650A                            
0007650A                            
0007650A                            sub_72A5A:				; XREF: sub_71C4E; sub_71CEC; sub_72878
0007650A 0445 00E0                  		subi.w	#$E0,d5
0007650E E54D                       		lsl.w	#2,d5
00076510 4EFB 5000                  		jmp	loc_72A64(pc,d5.w)
00076514                            ; End of function sub_72A5A
00076514                            
00076514                            ; ===========================================================================
00076514                            
00076514                            loc_72A64:
00076514 6000 0000                  		bra.w	loc_72ACC
00076518                            ; ===========================================================================
00076518 6000 0000                  		bra.w	loc_72AEC
0007651C                            ; ===========================================================================
0007651C 6000 0000                  		bra.w	loc_72AF2
00076520                            ; ===========================================================================
00076520 6000 0000                  		bra.w	loc_72AF8
00076524                            ; ===========================================================================
00076524 6000 0000                  		bra.w	loc_72B14
00076528                            ; ===========================================================================
00076528 6000 0000                  		bra.w	loc_72B9E
0007652C                            ; ===========================================================================
0007652C 6000 0000                  		bra.w	loc_72BA4
00076530                            ; ===========================================================================
00076530 6000 0000                  		bra.w	loc_72BAE
00076534                            ; ===========================================================================
00076534 6000 0000                  		bra.w	loc_72BB4
00076538                            ; ===========================================================================
00076538 6000 0000                  		bra.w	loc_72BBE
0007653C                            ; ===========================================================================
0007653C 6000 0000                  		bra.w	loc_72BC6
00076540                            ; ===========================================================================
00076540 6000 0000                  		bra.w	loc_72BD0
00076544                            ; ===========================================================================
00076544 6000 0000                  		bra.w	loc_72BE6
00076548                            ; ===========================================================================
00076548 6000 0000                  		bra.w	loc_72BEE
0007654C                            ; ===========================================================================
0007654C 6000 0000                  		bra.w	loc_72BF4
00076550                            ; ===========================================================================
00076550 6000 0000                  		bra.w	loc_72C26
00076554                            ; ===========================================================================
00076554 6000 0000                  		bra.w	loc_72D30
00076558                            ; ===========================================================================
00076558 6000 0000                  		bra.w	loc_72D52
0007655C                            ; ===========================================================================
0007655C 6000 0000                  		bra.w	loc_72D58
00076560                            ; ===========================================================================
00076560 6000 0000                  		bra.w	loc_72E06
00076564                            ; ===========================================================================
00076564 6000 0000                  		bra.w	loc_72E20
00076568                            ; ===========================================================================
00076568 6000 0000                  		bra.w	loc_72E26
0007656C                            ; ===========================================================================
0007656C 6000 0000                  		bra.w	loc_72E2C
00076570                            ; ===========================================================================
00076570 6000 0000                  		bra.w	loc_72E38
00076574                            ; ===========================================================================
00076574 6000 0000                  		bra.w	loc_72E52
00076578                            ; ===========================================================================
00076578 6000 0000                  		bra.w	loc_72E64
0007657C                            ; ===========================================================================
0007657C                            
0007657C                            loc_72ACC:				; XREF: loc_72A64
0007657C 121C                       		move.b	(a4)+,d1
0007657E 4A2D 0001                  		tst.b	1(a5)
00076582 6B00                       		bmi.s	locret_72AEA
00076584 102D 000A                  		move.b	$A(a5),d0
00076588 0200 0037                  		andi.b	#$37,d0
0007658C 8200                       		or.b	d0,d1
0007658E 1B41 000A                  		move.b	d1,$A(a5)
00076592 103C 00B4                  		move.b	#$B4,d0
00076596 6000 FC2E                  		bra.w	loc_72716
0007659A                            ; ===========================================================================
0007659A                            
0007659A                            locret_72AEA:
0007659A 4E75                       		rts	
0007659C                            ; ===========================================================================
0007659C                            
0007659C                            loc_72AEC:				; XREF: loc_72A64
0007659C 1B5C 001E                  		move.b	(a4)+,$1E(a5)
000765A0 4E75                       		rts	
000765A2                            ; ===========================================================================
000765A2                            
000765A2                            loc_72AF2:				; XREF: loc_72A64
000765A2 1D5C 0007                  		move.b	(a4)+,7(a6)
000765A6 4E75                       		rts	
000765A8                            ; ===========================================================================
000765A8                            
000765A8                            loc_72AF8:				; XREF: loc_72A64
000765A8 7000                       		moveq	#0,d0
000765AA 102D 000D                  		move.b	$D(a5),d0
000765AE 2875 0000                  		movea.l	(a5,d0.w),a4
000765B2 2BBC 0000 0000 0000        		move.l	#0,(a5,d0.w)
000765BA 544C                       		addq.w	#2,a4
000765BC 5800                       		addq.b	#4,d0
000765BE 1B40 000D                  		move.b	d0,$D(a5)
000765C2 4E75                       		rts	
000765C4                            ; ===========================================================================
000765C4                            
000765C4                            loc_72B14:				; XREF: loc_72A64
000765C4 204E                       		movea.l	a6,a0
000765C6 43EE 03A0                  		lea	$3A0(a6),a1
000765CA 303C 0087                  		move.w	#$87,d0
000765CE                            
000765CE                            loc_72B1E:
000765CE 20D9                       		move.l	(a1)+,(a0)+
000765D0 51C8 FFFC                  		dbf	d0,loc_72B1E
000765D4                            
000765D4 08EE 0002 0040             		bset	#2,$40(a6)
000765DA 264D                       		movea.l	a5,a3
000765DC 1C3C 0028                  		move.b	#$28,d6
000765E0 9C2E 0026                  		sub.b	$26(a6),d6
000765E4 7E05                       		moveq	#5,d7
000765E6 4BEE 0070                  		lea	$70(a6),a5
000765EA                            
000765EA                            loc_72B3A:
000765EA 0815 0007                  		btst	#7,(a5)
000765EE 6700                       		beq.s	loc_72B5C
000765F0 08D5 0001                  		bset	#1,(a5)
000765F4 DD2D 0009                  		add.b	d6,9(a5)
000765F8 0815 0002                  		btst	#2,(a5)
000765FC 6600                       		bne.s	loc_72B5C
000765FE 7000                       		moveq	#0,d0
00076600 102D 000B                  		move.b	$B(a5),d0
00076604 226E 0018                  		movea.l	$18(a6),a1
00076608 4EBA 0000                  		jsr	sub_72C4E(pc)
0007660C                            
0007660C                            loc_72B5C:
0007660C DAFC 0030                  		adda.w	#$30,a5
00076610 51CF FFD8                  		dbf	d7,loc_72B3A
00076614                            
00076614 7E02                       		moveq	#2,d7
00076616                            
00076616                            loc_72B66:
00076616 0815 0007                  		btst	#7,(a5)
0007661A 6700                       		beq.s	loc_72B78
0007661C 08D5 0001                  		bset	#1,(a5)
00076620 4EBA FE2E                  		jsr	sub_729A0(pc)
00076624 DD2D 0009                  		add.b	d6,9(a5)
00076628                            
00076628                            loc_72B78:
00076628 DAFC 0030                  		adda.w	#$30,a5
0007662C 51CF FFE8                  		dbf	d7,loc_72B66
00076630 2A4B                       		movea.l	a3,a5
00076632 1D7C 0080 0024             		move.b	#$80,$24(a6)
00076638 1D7C 0028 0026             		move.b	#$28,$26(a6)
0007663E 422E 0027                  		clr.b	$27(a6)
00076642 33FC 0000 00A1 1100        		move.w	#0,($A11100).l
0007664A 504F                       		addq.w	#8,sp
0007664C 4E75                       		rts	
0007664E                            ; ===========================================================================
0007664E                            
0007664E                            loc_72B9E:				; XREF: loc_72A64
0007664E 1B5C 0002                  		move.b	(a4)+,2(a5)
00076652 4E75                       		rts	
00076654                            ; ===========================================================================
00076654                            
00076654                            loc_72BA4:				; XREF: loc_72A64
00076654 101C                       		move.b	(a4)+,d0
00076656 D12D 0009                  		add.b	d0,9(a5)
0007665A 6000 0000                  		bra.w	sub_72CB4
0007665E                            ; ===========================================================================
0007665E                            
0007665E                            loc_72BAE:				; XREF: loc_72A64
0007665E 08D5 0004                  		bset	#4,(a5)
00076662 4E75                       		rts	
00076664                            ; ===========================================================================
00076664                            
00076664                            loc_72BB4:				; XREF: loc_72A64
00076664 1B54 0012                  		move.b	(a4),$12(a5)
00076668 1B5C 0013                  		move.b	(a4)+,$13(a5)
0007666C 4E75                       		rts	
0007666E                            ; ===========================================================================
0007666E                            
0007666E                            loc_72BBE:				; XREF: loc_72A64
0007666E 101C                       		move.b	(a4)+,d0
00076670 D12D 0008                  		add.b	d0,8(a5)
00076674 4E75                       		rts	
00076676                            ; ===========================================================================
00076676                            
00076676                            loc_72BC6:				; XREF: loc_72A64
00076676 1D54 0002                  		move.b	(a4),2(a6)
0007667A 1D5C 0001                  		move.b	(a4)+,1(a6)
0007667E 4E75                       		rts	
00076680                            ; ===========================================================================
00076680                            
00076680                            loc_72BD0:				; XREF: loc_72A64
00076680 41EE 0040                  		lea	$40(a6),a0
00076684 101C                       		move.b	(a4)+,d0
00076686 7230                       		moveq	#$30,d1
00076688 7409                       		moveq	#9,d2
0007668A                            
0007668A                            loc_72BDA:
0007668A 1140 0002                  		move.b	d0,2(a0)
0007668E D0C1                       		adda.w	d1,a0
00076690 51CA FFF8                  		dbf	d2,loc_72BDA
00076694                            
00076694 4E75                       		rts	
00076696                            ; ===========================================================================
00076696                            
00076696                            loc_72BE6:				; XREF: loc_72A64
00076696 101C                       		move.b	(a4)+,d0
00076698 D12D 0009                  		add.b	d0,9(a5)
0007669C 4E75                       		rts	
0007669E                            ; ===========================================================================
0007669E                            
0007669E                            loc_72BEE:				; XREF: loc_72A64
0007669E 422E 002C                  		clr.b	$2C(a6)
000766A2 4E75                       		rts	
000766A4                            ; ===========================================================================
000766A4                            
000766A4                            loc_72BF4:				; XREF: loc_72A64
000766A4 0895 0007                  		bclr	#7,(a5)
000766A8 0895 0004                  		bclr	#4,(a5)
000766AC 4EBA FB00                  		jsr	sub_726FE(pc)
000766B0 4A2E 0250                  		tst.b	$250(a6)
000766B4 6B00                       		bmi.s	loc_72C22
000766B6 264D                       		movea.l	a5,a3
000766B8 4BEE 0100                  		lea	$100(a6),a5
000766BC 226E 0018                  		movea.l	$18(a6),a1
000766C0 0895 0002                  		bclr	#2,(a5)
000766C4 08D5 0001                  		bset	#1,(a5)
000766C8 102D 000B                  		move.b	$B(a5),d0
000766CC 4EBA 0000                  		jsr	sub_72C4E(pc)
000766D0 2A4B                       		movea.l	a3,a5
000766D2                            
000766D2                            loc_72C22:
000766D2 504F                       		addq.w	#8,sp
000766D4 4E75                       		rts	
000766D6                            ; ===========================================================================
000766D6                            
000766D6                            loc_72C26:				; XREF: loc_72A64
000766D6 7000                       		moveq	#0,d0
000766D8 101C                       		move.b	(a4)+,d0
000766DA 1B40 000B                  		move.b	d0,$B(a5)
000766DE 0815 0002                  		btst	#2,(a5)
000766E2 6600 0000                  		bne.w	locret_72CAA
000766E6 226E 0018                  		movea.l	$18(a6),a1
000766EA 4A2E 000E                  		tst.b	$E(a6)
000766EE 6700                       		beq.s	sub_72C4E
000766F0 226D 0020                  		movea.l	$20(a5),a1
000766F4 4A2E 000E                  		tst.b	$E(a6)
000766F8 6B00                       		bmi.s	sub_72C4E
000766FA 226E 0020                  		movea.l	$20(a6),a1
000766FE                            
000766FE                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000766FE                            
000766FE                            
000766FE                            sub_72C4E:				; XREF: Snd_FadeOut1; et al
000766FE 5340                       		subq.w	#1,d0
00076700 6B00                       		bmi.s	loc_72C5C
00076702 323C 0019                  		move.w	#$19,d1
00076706                            
00076706                            loc_72C56:
00076706 D2C1                       		adda.w	d1,a1
00076708 51C8 FFFC                  		dbf	d0,loc_72C56
0007670C                            
0007670C                            loc_72C5C:
0007670C 1219                       		move.b	(a1)+,d1
0007670E 1B41 001F                  		move.b	d1,$1F(a5)
00076712 1801                       		move.b	d1,d4
00076714 103C 00B0                  		move.b	#$B0,d0
00076718 4EBA FAB8                  		jsr	sub_72722(pc)
0007671C 45FA 0000                  		lea	byte_72D18(pc),a2
00076720 7613                       		moveq	#$13,d3
00076722                            
00076722                            loc_72C72:
00076722 101A                       		move.b	(a2)+,d0
00076724 1219                       		move.b	(a1)+,d1
00076726 4EBA FAAA                  		jsr	sub_72722(pc)
0007672A 51CB FFF6                  		dbf	d3,loc_72C72
0007672E 7A03                       		moveq	#3,d5
00076730 0244 0007                  		andi.w	#7,d4
00076734 183B 4000                  		move.b	byte_72CAC(pc,d4.w),d4
00076738 162D 0009                  		move.b	9(a5),d3
0007673C                            
0007673C                            loc_72C8C:
0007673C 101A                       		move.b	(a2)+,d0
0007673E 1219                       		move.b	(a1)+,d1
00076740 E20C                       		lsr.b	#1,d4
00076742 6400                       		bcc.s	loc_72C96
00076744 D203                       		add.b	d3,d1
00076746                            
00076746                            loc_72C96:
00076746 4EBA FA8A                  		jsr	sub_72722(pc)
0007674A 51CD FFF0                  		dbf	d5,loc_72C8C
0007674E 103C 00B4                  		move.b	#$B4,d0
00076752 122D 000A                  		move.b	$A(a5),d1
00076756 4EBA FA7A                  		jsr	sub_72722(pc)
0007675A                            
0007675A                            locret_72CAA:
0007675A 4E75                       		rts	
0007675C                            ; End of function sub_72C4E
0007675C                            
0007675C                            ; ===========================================================================
0007675C 0808 0808 0A0E 0E0F        byte_72CAC:	dc.b 8,	8, 8, 8, $A, $E, $E, $F
00076764                            
00076764                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00076764                            
00076764                            
00076764                            sub_72CB4:				; XREF: sub_72504; sub_7267C; loc_72BA4
00076764 0815 0002                  		btst	#2,(a5)
00076768 6600                       		bne.s	locret_72D16
0007676A 7000                       		moveq	#0,d0
0007676C 102D 000B                  		move.b	$B(a5),d0
00076770 226E 0018                  		movea.l	$18(a6),a1
00076774 4A2E 000E                  		tst.b	$E(a6)
00076778 6700                       		beq.s	loc_72CD8
0007677A 226E 0020                  		movea.l	$20(a6),a1
0007677E 4A2E 000E                  		tst.b	$E(a6)
00076782 6B00                       		bmi.s	loc_72CD8
00076784 226E 0020                  		movea.l	$20(a6),a1
00076788                            
00076788                            loc_72CD8:
00076788 5340                       		subq.w	#1,d0
0007678A 6B00                       		bmi.s	loc_72CE6
0007678C 323C 0019                  		move.w	#$19,d1
00076790                            
00076790                            loc_72CE0:
00076790 D2C1                       		adda.w	d1,a1
00076792 51C8 FFFC                  		dbf	d0,loc_72CE0
00076796                            
00076796                            loc_72CE6:
00076796 D2FC 0015                  		adda.w	#$15,a1
0007679A 45FA 0000                  		lea	byte_72D2C(pc),a2
0007679E 102D 001F                  		move.b	$1F(a5),d0
000767A2 0240 0007                  		andi.w	#7,d0
000767A6 183B 00B4                  		move.b	byte_72CAC(pc,d0.w),d4
000767AA 162D 0009                  		move.b	9(a5),d3
000767AE 6B00                       		bmi.s	locret_72D16
000767B0 7A03                       		moveq	#3,d5
000767B2                            
000767B2                            loc_72D02:
000767B2 101A                       		move.b	(a2)+,d0
000767B4 1219                       		move.b	(a1)+,d1
000767B6 E20C                       		lsr.b	#1,d4
000767B8 6400                       		bcc.s	loc_72D12
000767BA D203                       		add.b	d3,d1
000767BC 6500                       		bcs.s	loc_72D12
000767BE 4EBA FA12                  		jsr	sub_72722(pc)
000767C2                            
000767C2                            loc_72D12:
000767C2 51CD FFEE                  		dbf	d5,loc_72D02
000767C6                            
000767C6                            locret_72D16:
000767C6 4E75                       		rts	
000767C8                            ; End of function sub_72CB4
000767C8                            
000767C8                            ; ===========================================================================
000767C8 3038 343C 5058 545C 6068   byte_72D18:	dc.b $30, $38, $34, $3C, $50, $58, $54,	$5C, $60, $68
000767D2 646C 7078 747C 8088 848C   		dc.b $64, $6C, $70, $78, $74, $7C, $80,	$88, $84, $8C
000767DC 4048 444C                  byte_72D2C:	dc.b $40, $48, $44, $4C
000767E0                            ; ===========================================================================
000767E0                            
000767E0                            loc_72D30:				; XREF: loc_72A64
000767E0 08D5 0003                  		bset	#3,(a5)
000767E4 2B4C 0014                  		move.l	a4,$14(a5)
000767E8 1B5C 0018                  		move.b	(a4)+,$18(a5)
000767EC 1B5C 0019                  		move.b	(a4)+,$19(a5)
000767F0 1B5C 001A                  		move.b	(a4)+,$1A(a5)
000767F4 101C                       		move.b	(a4)+,d0
000767F6 E208                       		lsr.b	#1,d0
000767F8 1B40 001B                  		move.b	d0,$1B(a5)
000767FC 426D 001C                  		clr.w	$1C(a5)
00076800 4E75                       		rts	
00076802                            ; ===========================================================================
00076802                            
00076802                            loc_72D52:				; XREF: loc_72A64
00076802 08D5 0003                  		bset	#3,(a5)
00076806 4E75                       		rts	
00076808                            ; ===========================================================================
00076808                            
00076808                            loc_72D58:				; XREF: loc_72A64
00076808 0895 0007                  		bclr	#7,(a5)
0007680C 0895 0004                  		bclr	#4,(a5)
00076810 4A2D 0001                  		tst.b	1(a5)
00076814 6B00                       		bmi.s	loc_72D74
00076816 4A2E 0008                  		tst.b	8(a6)
0007681A 6B00 0000                  		bmi.w	loc_72E02
0007681E 4EBA F98E                  		jsr	sub_726FE(pc)
00076822 6000                       		bra.s	loc_72D78
00076824                            ; ===========================================================================
00076824                            
00076824                            loc_72D74:
00076824 4EBA FC2A                  		jsr	sub_729A0(pc)
00076828                            
00076828                            loc_72D78:
00076828 4A2E 000E                  		tst.b	$E(a6)
0007682C 6A00 0000                  		bpl.w	loc_72E02
00076830 4216                       		clr.b	0(a6)
00076832 7000                       		moveq	#0,d0
00076834 102D 0001                  		move.b	1(a5),d0
00076838 6B00                       		bmi.s	loc_72DCC
0007683A 41FA F546                  		lea	dword_722CC(pc),a0
0007683E 264D                       		movea.l	a5,a3
00076840 0C00 0004                  		cmpi.b	#4,d0
00076844 6600                       		bne.s	loc_72DA8
00076846 4A2E 0340                  		tst.b	$340(a6)
0007684A 6A00                       		bpl.s	loc_72DA8
0007684C 4BEE 0340                  		lea	$340(a6),a5
00076850 226E 0020                  		movea.l	$20(a6),a1
00076854 6000                       		bra.s	loc_72DB8
00076856                            ; ===========================================================================
00076856                            
00076856                            loc_72DA8:
00076856 5500                       		subq.b	#2,d0
00076858 E508                       		lsl.b	#2,d0
0007685A 2A70 0000                  		movea.l	(a0,d0.w),a5
0007685E 4A15                       		tst.b	(a5)
00076860 6A00                       		bpl.s	loc_72DC8
00076862 226E 0018                  		movea.l	$18(a6),a1
00076866                            
00076866                            loc_72DB8:
00076866 0895 0002                  		bclr	#2,(a5)
0007686A 08D5 0001                  		bset	#1,(a5)
0007686E 102D 000B                  		move.b	$B(a5),d0
00076872 4EBA FE8A                  		jsr	sub_72C4E(pc)
00076876                            
00076876                            loc_72DC8:
00076876 2A4B                       		movea.l	a3,a5
00076878 6000                       		bra.s	loc_72E02
0007687A                            ; ===========================================================================
0007687A                            
0007687A                            loc_72DCC:
0007687A 41EE 0370                  		lea	$370(a6),a0
0007687E 4A10                       		tst.b	(a0)
00076880 6A00                       		bpl.s	loc_72DE0
00076882 0C00 00E0                  		cmpi.b	#$E0,d0
00076886 6700                       		beq.s	loc_72DEA
00076888 0C00 00C0                  		cmpi.b	#$C0,d0
0007688C 6700                       		beq.s	loc_72DEA
0007688E                            
0007688E                            loc_72DE0:
0007688E 41FA F4F2                  		lea	dword_722CC(pc),a0
00076892 E608                       		lsr.b	#3,d0
00076894 2070 0000                  		movea.l	(a0,d0.w),a0
00076898                            
00076898                            loc_72DEA:
00076898 0890 0002                  		bclr	#2,(a0)
0007689C 08D0 0001                  		bset	#1,(a0)
000768A0 0C28 00E0 0001             		cmpi.b	#$E0,1(a0)
000768A6 6600                       		bne.s	loc_72E02
000768A8 13E8 001F 00C0 0011        		move.b	$1F(a0),($C00011).l
000768B0                            
000768B0                            loc_72E02:
000768B0 504F                       		addq.w	#8,sp
000768B2 4E75                       		rts	
000768B4                            ; ===========================================================================
000768B4                            
000768B4                            loc_72E06:				; XREF: loc_72A64
000768B4 1B7C 00E0 0001             		move.b	#$E0,1(a5)
000768BA 1B5C 001F                  		move.b	(a4)+,$1F(a5)
000768BE 0815 0002                  		btst	#2,(a5)
000768C2 6600                       		bne.s	locret_72E1E
000768C4 13EC FFFF 00C0 0011        		move.b	-1(a4),($C00011).l
000768CC                            
000768CC                            locret_72E1E:
000768CC 4E75                       		rts	
000768CE                            ; ===========================================================================
000768CE                            
000768CE                            loc_72E20:				; XREF: loc_72A64
000768CE 0895 0003                  		bclr	#3,(a5)
000768D2 4E75                       		rts	
000768D4                            ; ===========================================================================
000768D4                            
000768D4                            loc_72E26:				; XREF: loc_72A64
000768D4 1B5C 000B                  		move.b	(a4)+,$B(a5)
000768D8 4E75                       		rts	
000768DA                            ; ===========================================================================
000768DA                            
000768DA                            loc_72E2C:				; XREF: loc_72A64
000768DA 101C                       		move.b	(a4)+,d0
000768DC E148                       		lsl.w	#8,d0
000768DE 101C                       		move.b	(a4)+,d0
000768E0 D8C0                       		adda.w	d0,a4
000768E2 534C                       		subq.w	#1,a4
000768E4 4E75                       		rts	
000768E6                            ; ===========================================================================
000768E6                            
000768E6                            loc_72E38:				; XREF: loc_72A64
000768E6 7000                       		moveq	#0,d0
000768E8 101C                       		move.b	(a4)+,d0
000768EA 121C                       		move.b	(a4)+,d1
000768EC 4A35 0024                  		tst.b	$24(a5,d0.w)
000768F0 6600                       		bne.s	loc_72E48
000768F2 1B81 0024                  		move.b	d1,$24(a5,d0.w)
000768F6                            
000768F6                            loc_72E48:
000768F6 5335 0024                  		subq.b	#1,$24(a5,d0.w)
000768FA 66DE                       		bne.s	loc_72E2C
000768FC 544C                       		addq.w	#2,a4
000768FE 4E75                       		rts	
00076900                            ; ===========================================================================
00076900                            
00076900                            loc_72E52:				; XREF: loc_72A64
00076900 7000                       		moveq	#0,d0
00076902 102D 000D                  		move.b	$D(a5),d0
00076906 5900                       		subq.b	#4,d0
00076908 2B8C 0000                  		move.l	a4,(a5,d0.w)
0007690C 1B40 000D                  		move.b	d0,$D(a5)
00076910 60C8                       		bra.s	loc_72E2C
00076912                            ; ===========================================================================
00076912                            
00076912                            loc_72E64:				; XREF: loc_72A64
00076912 103C 0088                  		move.b	#$88,d0
00076916 123C 000F                  		move.b	#$F,d1
0007691A 4EBA F8C2                  		jsr	sub_7272E(pc)
0007691E 103C 008C                  		move.b	#$8C,d0
00076922 123C 000F                  		move.b	#$F,d1
00076926 6000 F8B6                  		bra.w	sub_7272E
0007692A                            ; ===========================================================================
0007692A                            Kos_Z80:	incbin	sound\z80_1.bin
000769DA 0000                       		dc.w ((SegaPCM&$FF)<<8)+((SegaPCM&$FF00)>>8)
000769DC 21                         		dc.b $21
000769DD 0000                       		dc.w (((EndOfRom-SegaPCM)&$FF)<<8)+(((EndOfRom-SegaPCM)&$FF00)>>8)
000769DF                            		incbin	sound\z80_2.bin
0007808A                            		even
0007808A                            Music81:	incbin	sound\jahl.bin ; 	Green Hill Act 1
0007E88A                            		even
0007E88A                            Music82:	incbin	sound\music82.bin ; Labyrinth Act 1
00088128                            		even
00088128                            Music83:	incbin	sound\music83.bin ; Marble Act 1
0008BD48 00                         		even
0008BD48                            Music84:	include	sound\music84.asm ; Star Light Act 1
0008BD48                            music84_Header:
0008BD48 =00000001                  smpsHeaderStartSong = 1
0008BD48 0000                       	smpsHeaderVoice     music84_Voices
0008BD4A 0603                       	smpsHeaderChan      $06, $03
0008BD4C 0205                       	smpsHeaderTempo     $02, $05
0008BD4E                            
0008BD52 0000 0000                  	smpsHeaderFM        music84_FM1,	$00, $00
0008BD56 0000 0000                  	smpsHeaderFM        music84_FM2,	$00, $00
0008BD5A 0000 0000                  	smpsHeaderFM        music84_FM3,	$00, $00
0008BD5E 0000 0000                  	smpsHeaderFM        music84_FM4,	$00, $00
0008BD62 0000 0000                  	smpsHeaderFM        music84_FM5,	$00, $00
0008BD66 0000 0000 0000             	smpsHeaderPSG       music84_PSG1,	$00, $00, $00, $00
0008BD6C 0000 0000 0000             	smpsHeaderPSG       music84_PSG2,	$00, $00, $00, $00
0008BD72 0000 0000 0000             	smpsHeaderPSG       music84_PSG3,	$00, $00, $00, $00
0008BD78                            
0008BD78                            ; FM1 Data
0008BD78                            music84_FM1:
0008BD78 E0C0                       	smpsPan             panCenter, $00
0008BD7C E107                       	smpsAlterNote       $07
0008BD7E 9B03 8007                  	dc.b	nD2, $03, nRst, $07
0008BD82 E106                       	smpsAlterNote       $06
0008BD84 9903 800B                  	dc.b	nC2, $03, nRst, $0B
0008BD88 E10B                       	smpsAlterNote       $0B
0008BD8A 9606 800B A201             	dc.b	nA1, $06, nRst, $0B, nA2, $01
0008BD90 E10C                       	smpsAlterNote       $0C
0008BD92 E7A3 01                    	dc.b	smpsNoAttack, nBb2, $01
0008BD95 E10B                       	smpsAlterNote       $0B
0008BD97 E7A2 01                    	dc.b	smpsNoAttack, nA2, $01
0008BD9A E109                       	smpsAlterNote       $09
0008BD9C E7A0 029E 01               	dc.b	smpsNoAttack, nG2, $02, nF2, $01
0008BDA1 E108                       	smpsAlterNote       $08
0008BDA3 8001                       	dc.b	nRst, $01
0008BDA5 E10B                       	smpsAlterNote       $0B
0008BDA7 9603 A203 8001             	dc.b	nA1, $03, nA2, $03, nRst, $01
0008BDAD E107                       	smpsAlterNote       $07
0008BDAF 9B03                       	dc.b	nD2, $03
0008BDB1                            
0008BDB1                            music84_Jump04:
0008BDB1 E107                       	smpsAlterNote       $07
0008BDB3 9B03 8001                  	dc.b	nD2, $03, nRst, $01
0008BDB7 E10B                       	smpsAlterNote       $0B
0008BDB9 A202 8001                  	dc.b	nA2, $02, nRst, $01
0008BDBD E107                       	smpsAlterNote       $07
0008BDBF 9B03                       	dc.b	nD2, $03
0008BDC1 E11A                       	smpsAlterNote       $1A
0008BDC3 A301                       	dc.b	nBb2, $01
0008BDC5 E1F2                       	smpsAlterNote       $F2
0008BDC7 E7A4 01                    	dc.b	smpsNoAttack, nB2, $01
0008BDCA E1FF                       	smpsAlterNote       $FF
0008BDCC E701                       	dc.b	smpsNoAttack, $01
0008BDCE E111                       	smpsAlterNote       $11
0008BDD0 E701                       	dc.b	smpsNoAttack, $01
0008BDD2 E106                       	smpsAlterNote       $06
0008BDD4 E7A5 03                    	dc.b	smpsNoAttack, nC3, $03
0008BDD7 E107                       	smpsAlterNote       $07
0008BDD9 9B03 8001                  	dc.b	nD2, $03, nRst, $01
0008BDDD E108                       	smpsAlterNote       $08
0008BDDF 9C06 8001 9C02 8001        	dc.b	nEb2, $06, nRst, $01, nEb2, $02, nRst, $01
0008BDE7 E109                       	smpsAlterNote       $09
0008BDE9 A003                       	dc.b	nG2, $03
0008BDEB E10C                       	smpsAlterNote       $0C
0008BDED A303 8001                  	dc.b	nBb2, $03, nRst, $01
0008BDF1 E1FD                       	smpsAlterNote       $FD
0008BDF3 A401                       	dc.b	nB2, $01
0008BDF5 E109                       	smpsAlterNote       $09
0008BDF7 E701                       	dc.b	smpsNoAttack, $01
0008BDF9 E106                       	smpsAlterNote       $06
0008BDFB E7A5 01                    	dc.b	smpsNoAttack, nC3, $01
0008BDFE E109                       	smpsAlterNote       $09
0008BE00 A007                       	dc.b	nG2, $07
0008BE02 E108                       	smpsAlterNote       $08
0008BE04 9C03 8001                  	dc.b	nEb2, $03, nRst, $01
0008BE08 E107                       	smpsAlterNote       $07
0008BE0A 9B02 8001 9B03             	dc.b	nD2, $02, nRst, $01, nD2, $03
0008BE10 E10B                       	smpsAlterNote       $0B
0008BE12 A203 8001                  	dc.b	nA2, $03, nRst, $01
0008BE16 E107                       	smpsAlterNote       $07
0008BE18 9B03                       	dc.b	nD2, $03
0008BE1A E11A                       	smpsAlterNote       $1A
0008BE1C A301                       	dc.b	nBb2, $01
0008BE1E E1F9                       	smpsAlterNote       $F9
0008BE20 E7A4 01                    	dc.b	smpsNoAttack, nB2, $01
0008BE23 E107                       	smpsAlterNote       $07
0008BE25 E701                       	dc.b	smpsNoAttack, $01
0008BE27 E111                       	smpsAlterNote       $11
0008BE29 E701                       	dc.b	smpsNoAttack, $01
0008BE2B E106                       	smpsAlterNote       $06
0008BE2D E7A5 0280 01               	dc.b	smpsNoAttack, nC3, $02, nRst, $01
0008BE32 E107                       	smpsAlterNote       $07
0008BE34 9B03 A707 9B03 8001        	dc.b	nD2, $03, nD3, $07, nD2, $03, nRst, $01
0008BE3C E1EC                       	smpsAlterNote       $EC
0008BE3E A101                       	dc.b	nAb2, $01
0008BE40 E108                       	smpsAlterNote       $08
0008BE42 E701                       	dc.b	smpsNoAttack, $01
0008BE44 E116                       	smpsAlterNote       $16
0008BE46 E701                       	dc.b	smpsNoAttack, $01
0008BE48 E1F5                       	smpsAlterNote       $F5
0008BE4A E7A2 01                    	dc.b	smpsNoAttack, nA2, $01
0008BE4D E10B                       	smpsAlterNote       $0B
0008BE4F E702 8001                  	dc.b	smpsNoAttack, $02, nRst, $01
0008BE53 E107                       	smpsAlterNote       $07
0008BE55 9B02 8001 9B03             	dc.b	nD2, $02, nRst, $01, nD2, $03
0008BE5B E109                       	smpsAlterNote       $09
0008BE5D 9E03 8001                  	dc.b	nF2, $03, nRst, $01
0008BE61 E10B                       	smpsAlterNote       $0B
0008BE63 9603                       	dc.b	nA1, $03
0008BE65 E107                       	smpsAlterNote       $07
0008BE67 9B03 8001 9B03             	dc.b	nD2, $03, nRst, $01, nD2, $03
0008BE6D E10B                       	smpsAlterNote       $0B
0008BE6F A203 8001                  	dc.b	nA2, $03, nRst, $01
0008BE73 E107                       	smpsAlterNote       $07
0008BE75 9B02 8001                  	dc.b	nD2, $02, nRst, $01
0008BE79 E11A                       	smpsAlterNote       $1A
0008BE7B A301                       	dc.b	nBb2, $01
0008BE7D E1F9                       	smpsAlterNote       $F9
0008BE7F E7A4 01                    	dc.b	smpsNoAttack, nB2, $01
0008BE82 E107                       	smpsAlterNote       $07
0008BE84 E701                       	dc.b	smpsNoAttack, $01
0008BE86 E1FB                       	smpsAlterNote       $FB
0008BE88 E7A5 01                    	dc.b	smpsNoAttack, nC3, $01
0008BE8B E106                       	smpsAlterNote       $06
0008BE8D E702 8001                  	dc.b	smpsNoAttack, $02, nRst, $01
0008BE91 E107                       	smpsAlterNote       $07
0008BE93 9B03                       	dc.b	nD2, $03
0008BE95 E108                       	smpsAlterNote       $08
0008BE97 9C07 9C03 8001             	dc.b	nEb2, $07, nEb2, $03, nRst, $01
0008BE9D E109                       	smpsAlterNote       $09
0008BE9F A002 8001                  	dc.b	nG2, $02, nRst, $01
0008BEA3 E10C                       	smpsAlterNote       $0C
0008BEA5 A303                       	dc.b	nBb2, $03
0008BEA7 E1F0                       	smpsAlterNote       $F0
0008BEA9 A401                       	dc.b	nB2, $01
0008BEAB E1FD                       	smpsAlterNote       $FD
0008BEAD E701 E7A5 01               	dc.b	smpsNoAttack, $01, smpsNoAttack, nC3, $01
0008BEB2 E106                       	smpsAlterNote       $06
0008BEB4 8001                       	dc.b	nRst, $01
0008BEB6 E109                       	smpsAlterNote       $09
0008BEB8 A006 8001                  	dc.b	nG2, $06, nRst, $01
0008BEBC E108                       	smpsAlterNote       $08
0008BEBE 9C02 8001                  	dc.b	nEb2, $02, nRst, $01
0008BEC2 E107                       	smpsAlterNote       $07
0008BEC4 9B03 9B03 8001             	dc.b	nD2, $03, nD2, $03, nRst, $01
0008BECA E10B                       	smpsAlterNote       $0B
0008BECC A203                       	dc.b	nA2, $03
0008BECE E107                       	smpsAlterNote       $07
0008BED0 9B03 8001                  	dc.b	nD2, $03, nRst, $01
0008BED4 E1F2                       	smpsAlterNote       $F2
0008BED6 A401                       	dc.b	nB2, $01
0008BED8 E1FF                       	smpsAlterNote       $FF
0008BEDA E701                       	dc.b	smpsNoAttack, $01
0008BEDC E107                       	smpsAlterNote       $07
0008BEDE E701                       	dc.b	smpsNoAttack, $01
0008BEE0 E1FB                       	smpsAlterNote       $FB
0008BEE2 E7A5 01                    	dc.b	smpsNoAttack, nC3, $01
0008BEE5 E106                       	smpsAlterNote       $06
0008BEE7 E702 8001                  	dc.b	smpsNoAttack, $02, nRst, $01
0008BEEB E107                       	smpsAlterNote       $07
0008BEED 9B02 8001 A706 8001 9B03   	dc.b	nD2, $02, nRst, $01, nD3, $06, nRst, $01, nD2, $03
0008BEF7 E117                       	smpsAlterNote       $17
0008BEF9 A001                       	dc.b	nG2, $01
0008BEFB E1FA                       	smpsAlterNote       $FA
0008BEFD E7A1 01                    	dc.b	smpsNoAttack, nAb2, $01
0008BF00 E108                       	smpsAlterNote       $08
0008BF02 E701                       	dc.b	smpsNoAttack, $01
0008BF04 E1E7                       	smpsAlterNote       $E7
0008BF06 E7A2 01                    	dc.b	smpsNoAttack, nA2, $01
0008BF09 E103                       	smpsAlterNote       $03
0008BF0B E701                       	dc.b	smpsNoAttack, $01
0008BF0D E10B                       	smpsAlterNote       $0B
0008BF0F E702                       	dc.b	smpsNoAttack, $02
0008BF11 E107                       	smpsAlterNote       $07
0008BF13 9B03 8001 A702 8001        	dc.b	nD2, $03, nRst, $01, nD3, $02, nRst, $01
0008BF1B E106                       	smpsAlterNote       $06
0008BF1D 9903 A503 8001             	dc.b	nC2, $03, nC3, $03, nRst, $01
0008BF23 E10C                       	smpsAlterNote       $0C
0008BF25 9703 9703 8001             	dc.b	nBb1, $03, nBb1, $03, nRst, $01
0008BF2B E109                       	smpsAlterNote       $09
0008BF2D 9E03                       	dc.b	nF2, $03
0008BF2F E10C                       	smpsAlterNote       $0C
0008BF31 9703 8001                  	dc.b	nBb1, $03, nRst, $01
0008BF35 E1EA                       	smpsAlterNote       $EA
0008BF37 A201                       	dc.b	nA2, $01
0008BF39 E106                       	smpsAlterNote       $06
0008BF3B E701                       	dc.b	smpsNoAttack, $01
0008BF3D E1E2                       	smpsAlterNote       $E2
0008BF3F E7A3 01                    	dc.b	smpsNoAttack, nBb2, $01
0008BF42 E1F0                       	smpsAlterNote       $F0
0008BF44 E701                       	dc.b	smpsNoAttack, $01
0008BF46 E10C                       	smpsAlterNote       $0C
0008BF48 E702 9703 8001 A306 8001+  	dc.b	smpsNoAttack, $02, nBb1, $03, nRst, $01, nBb2, $06, nRst, $01, nBb1, $03
0008BF54 E116                       	smpsAlterNote       $16
0008BF56 9C01                       	dc.b	nEb2, $01
0008BF58 E105                       	smpsAlterNote       $05
0008BF5A E79D 01                    	dc.b	smpsNoAttack, nE2, $01
0008BF5D E1F1                       	smpsAlterNote       $F1
0008BF5F E79E 01                    	dc.b	smpsNoAttack, nF2, $01
0008BF62 E1FF                       	smpsAlterNote       $FF
0008BF64 E701                       	dc.b	smpsNoAttack, $01
0008BF66 E109                       	smpsAlterNote       $09
0008BF68 E702 8001                  	dc.b	smpsNoAttack, $02, nRst, $01
0008BF6C E10C                       	smpsAlterNote       $0C
0008BF6E 9703 9703 8001 A303 9703+  	dc.b	nBb1, $03, nBb1, $03, nRst, $01, nBb2, $03, nBb1, $03, nRst, $01
0008BF7A 9702 8001 9703             	dc.b	nBb1, $02, nRst, $01, nBb1, $03
0008BF80 E109                       	smpsAlterNote       $09
0008BF82 9E03 8001                  	dc.b	nF2, $03, nRst, $01
0008BF86 E10C                       	smpsAlterNote       $0C
0008BF88 9703                       	dc.b	nBb1, $03
0008BF8A E11A                       	smpsAlterNote       $1A
0008BF8C A101                       	dc.b	nAb2, $01
0008BF8E E1FB                       	smpsAlterNote       $FB
0008BF90 E7A2 01                    	dc.b	smpsNoAttack, nA2, $01
0008BF93 E10A                       	smpsAlterNote       $0A
0008BF95 E701                       	dc.b	smpsNoAttack, $01
0008BF97 E1E8                       	smpsAlterNote       $E8
0008BF99 E7A3 01                    	dc.b	smpsNoAttack, nBb2, $01
0008BF9C E106                       	smpsAlterNote       $06
0008BF9E E701                       	dc.b	smpsNoAttack, $01
0008BFA0 E10C                       	smpsAlterNote       $0C
0008BFA2 E702 9703 8001 A306 9703+  	dc.b	smpsNoAttack, $02, nBb1, $03, nRst, $01, nBb2, $06, nBb1, $03, nRst, $01
0008BFAE E1F9                       	smpsAlterNote       $F9
0008BFB0 9D01                       	dc.b	nE2, $01
0008BFB2 E108                       	smpsAlterNote       $08
0008BFB4 E701                       	dc.b	smpsNoAttack, $01
0008BFB6 E1F6                       	smpsAlterNote       $F6
0008BFB8 E79E 01                    	dc.b	smpsNoAttack, nF2, $01
0008BFBB E109                       	smpsAlterNote       $09
0008BFBD E703 8001                  	dc.b	smpsNoAttack, $03, nRst, $01
0008BFC1 E10C                       	smpsAlterNote       $0C
0008BFC3 9703 9703 8001 A302 8001+  	dc.b	nBb1, $03, nBb1, $03, nRst, $01, nBb2, $02, nRst, $01, nBb1, $03
0008BFCF E108                       	smpsAlterNote       $08
0008BFD1 9D03 8001 9D03             	dc.b	nE2, $03, nRst, $01, nE2, $03
0008BFD7 E106                       	smpsAlterNote       $06
0008BFD9 A403 8001                  	dc.b	nB2, $03, nRst, $01
0008BFDD E108                       	smpsAlterNote       $08
0008BFDF 9D03                       	dc.b	nE2, $03
0008BFE1 E1EB                       	smpsAlterNote       $EB
0008BFE3 A801                       	dc.b	nEb3, $01
0008BFE5 E109                       	smpsAlterNote       $09
0008BFE7 E701                       	dc.b	smpsNoAttack, $01
0008BFE9 E1FA                       	smpsAlterNote       $FA
0008BFEB E7A9 01                    	dc.b	smpsNoAttack, nE3, $01
0008BFEE E108                       	smpsAlterNote       $08
0008BFF0 E703 8001 9D03 A907 9D03+  	dc.b	smpsNoAttack, $03, nRst, $01, nE2, $03, nE3, $07, nE2, $03, nRst, $01
0008BFFC E1E9                       	smpsAlterNote       $E9
0008BFFE A301                       	dc.b	nBb2, $01
0008C000 E107                       	smpsAlterNote       $07
0008C002 E701                       	dc.b	smpsNoAttack, $01
0008C004 E1F0                       	smpsAlterNote       $F0
0008C006 E7A4 01                    	dc.b	smpsNoAttack, nB2, $01
0008C009 E1F7                       	smpsAlterNote       $F7
0008C00B E701                       	dc.b	smpsNoAttack, $01
0008C00D E107                       	smpsAlterNote       $07
0008C00F E701                       	dc.b	smpsNoAttack, $01
0008C011 E106                       	smpsAlterNote       $06
0008C013 E701                       	dc.b	smpsNoAttack, $01
0008C015 E108                       	smpsAlterNote       $08
0008C017 9D03 8001 9D03             	dc.b	nE2, $03, nRst, $01, nE2, $03
0008C01D E106                       	smpsAlterNote       $06
0008C01F A403 8001                  	dc.b	nB2, $03, nRst, $01
0008C023 E108                       	smpsAlterNote       $08
0008C025 9D03                       	dc.b	nE2, $03
0008C027 E10B                       	smpsAlterNote       $0B
0008C029 9603 8001 9602 8001        	dc.b	nA1, $03, nRst, $01, nA1, $02, nRst, $01
0008C031 E108                       	smpsAlterNote       $08
0008C033 9D03                       	dc.b	nE2, $03
0008C035 E10B                       	smpsAlterNote       $0B
0008C037 9603 8001                  	dc.b	nA1, $03, nRst, $01
0008C03B E113                       	smpsAlterNote       $13
0008C03D A001                       	dc.b	nG2, $01
0008C03F E118                       	smpsAlterNote       $18
0008C041 E701                       	dc.b	smpsNoAttack, $01
0008C043 E1E9                       	smpsAlterNote       $E9
0008C045 E7A1 01                    	dc.b	smpsNoAttack, nAb2, $01
0008C048 E1F3                       	smpsAlterNote       $F3
0008C04A E701                       	dc.b	smpsNoAttack, $01
0008C04C E1FD                       	smpsAlterNote       $FD
0008C04E E701                       	dc.b	smpsNoAttack, $01
0008C050 E102                       	smpsAlterNote       $02
0008C052 E701                       	dc.b	smpsNoAttack, $01
0008C054 E107                       	smpsAlterNote       $07
0008C056 8001                       	dc.b	nRst, $01
0008C058 E10B                       	smpsAlterNote       $0B
0008C05A 9603                       	dc.b	nA1, $03
0008C05C E10C                       	smpsAlterNote       $0C
0008C05E 9706 8001 9703             	dc.b	nBb1, $06, nRst, $01, nBb1, $03
0008C064 E10B                       	smpsAlterNote       $0B
0008C066 9603 8001 A206 8001 9603+  	dc.b	nA1, $03, nRst, $01, nA2, $06, nRst, $01, nA1, $03, nA2, $03
0008C072 8001 9602 8001             	dc.b	nRst, $01, nA1, $02, nRst, $01
0008C078 E107                       	smpsAlterNote       $07
0008C07A 9B03 9B03 8001             	dc.b	nD2, $03, nD2, $03, nRst, $01
0008C080 E10B                       	smpsAlterNote       $0B
0008C082 A203                       	dc.b	nA2, $03
0008C084 E107                       	smpsAlterNote       $07
0008C086 9B03 8001                  	dc.b	nD2, $03, nRst, $01
0008C08A E1F2                       	smpsAlterNote       $F2
0008C08C A401                       	dc.b	nB2, $01
0008C08E E1FF                       	smpsAlterNote       $FF
0008C090 E701                       	dc.b	smpsNoAttack, $01
0008C092 E107                       	smpsAlterNote       $07
0008C094 E701                       	dc.b	smpsNoAttack, $01
0008C096 E1FB                       	smpsAlterNote       $FB
0008C098 E7A5 01                    	dc.b	smpsNoAttack, nC3, $01
0008C09B E106                       	smpsAlterNote       $06
0008C09D E702 8001                  	dc.b	smpsNoAttack, $02, nRst, $01
0008C0A1 E107                       	smpsAlterNote       $07
0008C0A3 9B02 8001                  	dc.b	nD2, $02, nRst, $01
0008C0A7 E108                       	smpsAlterNote       $08
0008C0A9 9C06 8001 9C03             	dc.b	nEb2, $06, nRst, $01, nEb2, $03
0008C0AF E109                       	smpsAlterNote       $09
0008C0B1 A003 8001                  	dc.b	nG2, $03, nRst, $01
0008C0B5 E10C                       	smpsAlterNote       $0C
0008C0B7 A302 8001                  	dc.b	nBb2, $02, nRst, $01
0008C0BB E1F0                       	smpsAlterNote       $F0
0008C0BD A401                       	dc.b	nB2, $01
0008C0BF E109                       	smpsAlterNote       $09
0008C0C1 E701                       	dc.b	smpsNoAttack, $01
0008C0C3 E106                       	smpsAlterNote       $06
0008C0C5 E7A5 01                    	dc.b	smpsNoAttack, nC3, $01
0008C0C8 E109                       	smpsAlterNote       $09
0008C0CA A007                       	dc.b	nG2, $07
0008C0CC E108                       	smpsAlterNote       $08
0008C0CE 9C03 8001                  	dc.b	nEb2, $03, nRst, $01
0008C0D2 E107                       	smpsAlterNote       $07
0008C0D4 9B03 9B03 8001             	dc.b	nD2, $03, nD2, $03, nRst, $01
0008C0DA E10B                       	smpsAlterNote       $0B
0008C0DC A202 8001                  	dc.b	nA2, $02, nRst, $01
0008C0E0 E107                       	smpsAlterNote       $07
0008C0E2 9B03                       	dc.b	nD2, $03
0008C0E4 E11A                       	smpsAlterNote       $1A
0008C0E6 A301                       	dc.b	nBb2, $01
0008C0E8 E1F2                       	smpsAlterNote       $F2
0008C0EA E7A4 01                    	dc.b	smpsNoAttack, nB2, $01
0008C0ED E1FF                       	smpsAlterNote       $FF
0008C0EF E701                       	dc.b	smpsNoAttack, $01
0008C0F1 E111                       	smpsAlterNote       $11
0008C0F3 E701                       	dc.b	smpsNoAttack, $01
0008C0F5 E106                       	smpsAlterNote       $06
0008C0F7 E7A5 03                    	dc.b	smpsNoAttack, nC3, $03
0008C0FA E107                       	smpsAlterNote       $07
0008C0FC 9B03 8001 A706 8001 9B02+  	dc.b	nD2, $03, nRst, $01, nD3, $06, nRst, $01, nD2, $02, nRst, $01
0008C108 E117                       	smpsAlterNote       $17
0008C10A A001                       	dc.b	nG2, $01
0008C10C E1FA                       	smpsAlterNote       $FA
0008C10E E7A1 01                    	dc.b	smpsNoAttack, nAb2, $01
0008C111 E116                       	smpsAlterNote       $16
0008C113 E701                       	dc.b	smpsNoAttack, $01
0008C115 E1F5                       	smpsAlterNote       $F5
0008C117 E7A2 01                    	dc.b	smpsNoAttack, nA2, $01
0008C11A E103                       	smpsAlterNote       $03
0008C11C E701                       	dc.b	smpsNoAttack, $01
0008C11E E10B                       	smpsAlterNote       $0B
0008C120 E701 8001                  	dc.b	smpsNoAttack, $01, nRst, $01
0008C124 E107                       	smpsAlterNote       $07
0008C126 9B03 9B03 8001             	dc.b	nD2, $03, nD2, $03, nRst, $01
0008C12C E109                       	smpsAlterNote       $09
0008C12E 9E03                       	dc.b	nF2, $03
0008C130 E10B                       	smpsAlterNote       $0B
0008C132 9603 8001                  	dc.b	nA1, $03, nRst, $01
0008C136 E107                       	smpsAlterNote       $07
0008C138 9B02 8001 9B03             	dc.b	nD2, $02, nRst, $01, nD2, $03
0008C13E E10B                       	smpsAlterNote       $0B
0008C140 A203 8001                  	dc.b	nA2, $03, nRst, $01
0008C144 E107                       	smpsAlterNote       $07
0008C146 9B03                       	dc.b	nD2, $03
0008C148 E11A                       	smpsAlterNote       $1A
0008C14A A301                       	dc.b	nBb2, $01
0008C14C E1F9                       	smpsAlterNote       $F9
0008C14E E7A4 01                    	dc.b	smpsNoAttack, nB2, $01
0008C151 E107                       	smpsAlterNote       $07
0008C153 E701                       	dc.b	smpsNoAttack, $01
0008C155 E111                       	smpsAlterNote       $11
0008C157 E701                       	dc.b	smpsNoAttack, $01
0008C159 E106                       	smpsAlterNote       $06
0008C15B E7A5 0280 01               	dc.b	smpsNoAttack, nC3, $02, nRst, $01
0008C160 E107                       	smpsAlterNote       $07
0008C162 9B03                       	dc.b	nD2, $03
0008C164 E108                       	smpsAlterNote       $08
0008C166 9C07 9C03 8001             	dc.b	nEb2, $07, nEb2, $03, nRst, $01
0008C16C E109                       	smpsAlterNote       $09
0008C16E A003                       	dc.b	nG2, $03
0008C170 E10C                       	smpsAlterNote       $0C
0008C172 A303 8001                  	dc.b	nBb2, $03, nRst, $01
0008C176 E1FD                       	smpsAlterNote       $FD
0008C178 A401 E7A5 01               	dc.b	nB2, $01, smpsNoAttack, nC3, $01
0008C17D E106                       	smpsAlterNote       $06
0008C17F 8001                       	dc.b	nRst, $01
0008C181 E109                       	smpsAlterNote       $09
0008C183 A006 8001                  	dc.b	nG2, $06, nRst, $01
0008C187 E108                       	smpsAlterNote       $08
0008C189 9C03                       	dc.b	nEb2, $03
0008C18B E107                       	smpsAlterNote       $07
0008C18D 9B03 8001 9B03             	dc.b	nD2, $03, nRst, $01, nD2, $03
0008C193 E10B                       	smpsAlterNote       $0B
0008C195 A203 8001                  	dc.b	nA2, $03, nRst, $01
0008C199 E107                       	smpsAlterNote       $07
0008C19B 9B02 8001                  	dc.b	nD2, $02, nRst, $01
0008C19F E11A                       	smpsAlterNote       $1A
0008C1A1 A301                       	dc.b	nBb2, $01
0008C1A3 E1F9                       	smpsAlterNote       $F9
0008C1A5 E7A4 01                    	dc.b	smpsNoAttack, nB2, $01
0008C1A8 E107                       	smpsAlterNote       $07
0008C1AA E701                       	dc.b	smpsNoAttack, $01
0008C1AC E1FB                       	smpsAlterNote       $FB
0008C1AE E7A5 01                    	dc.b	smpsNoAttack, nC3, $01
0008C1B1 E106                       	smpsAlterNote       $06
0008C1B3 E702 8001                  	dc.b	smpsNoAttack, $02, nRst, $01
0008C1B7 E107                       	smpsAlterNote       $07
0008C1B9 9B03 A707 9B03 8001        	dc.b	nD2, $03, nD3, $07, nD2, $03, nRst, $01
0008C1C1 E1EC                       	smpsAlterNote       $EC
0008C1C3 A101                       	dc.b	nAb2, $01
0008C1C5 E108                       	smpsAlterNote       $08
0008C1C7 E701                       	dc.b	smpsNoAttack, $01
0008C1C9 E1E7                       	smpsAlterNote       $E7
0008C1CB E7A2 01                    	dc.b	smpsNoAttack, nA2, $01
0008C1CE E1F5                       	smpsAlterNote       $F5
0008C1D0 E701                       	dc.b	smpsNoAttack, $01
0008C1D2 E10B                       	smpsAlterNote       $0B
0008C1D4 E702                       	dc.b	smpsNoAttack, $02
0008C1D6 E107                       	smpsAlterNote       $07
0008C1D8 9B03 8001 A703             	dc.b	nD2, $03, nRst, $01, nD3, $03
0008C1DE E106                       	smpsAlterNote       $06
0008C1E0 9903 8001 A503             	dc.b	nC2, $03, nRst, $01, nC3, $03
0008C1E6 E10C                       	smpsAlterNote       $0C
0008C1E8 9703 8001 9702 8001        	dc.b	nBb1, $03, nRst, $01, nBb1, $02, nRst, $01
0008C1F0 E109                       	smpsAlterNote       $09
0008C1F2 9E03                       	dc.b	nF2, $03
0008C1F4 E10C                       	smpsAlterNote       $0C
0008C1F6 9703 8001                  	dc.b	nBb1, $03, nRst, $01
0008C1FA E1EA                       	smpsAlterNote       $EA
0008C1FC A201                       	dc.b	nA2, $01
0008C1FE E106                       	smpsAlterNote       $06
0008C200 E701                       	dc.b	smpsNoAttack, $01
0008C202 E114                       	smpsAlterNote       $14
0008C204 E701                       	dc.b	smpsNoAttack, $01
0008C206 E1F0                       	smpsAlterNote       $F0
0008C208 E7A3 01                    	dc.b	smpsNoAttack, nBb2, $01
0008C20B E10C                       	smpsAlterNote       $0C
0008C20D E702 8001 9702 8001 A306+  	dc.b	smpsNoAttack, $02, nRst, $01, nBb1, $02, nRst, $01, nBb2, $06, nRst, $01
0008C219 9703                       	dc.b	nBb1, $03
0008C21B E116                       	smpsAlterNote       $16
0008C21D 9C01                       	dc.b	nEb2, $01
0008C21F E105                       	smpsAlterNote       $05
0008C221 E79D 01                    	dc.b	smpsNoAttack, nE2, $01
0008C224 E113                       	smpsAlterNote       $13
0008C226 E701                       	dc.b	smpsNoAttack, $01
0008C228 E1FF                       	smpsAlterNote       $FF
0008C22A E79E 01                    	dc.b	smpsNoAttack, nF2, $01
0008C22D E109                       	smpsAlterNote       $09
0008C22F E703                       	dc.b	smpsNoAttack, $03
0008C231 E10C                       	smpsAlterNote       $0C
0008C233 9703 8001 9702 8001 A303+  	dc.b	nBb1, $03, nRst, $01, nBb1, $02, nRst, $01, nBb2, $03, nBb1, $03
0008C23F 8001 9703 9703 8001        	dc.b	nRst, $01, nBb1, $03, nBb1, $03, nRst, $01
0008C247 E109                       	smpsAlterNote       $09
0008C249 9E03                       	dc.b	nF2, $03
0008C24B E10C                       	smpsAlterNote       $0C
0008C24D 9703 8001                  	dc.b	nBb1, $03, nRst, $01
0008C251 E1EC                       	smpsAlterNote       $EC
0008C253 A201                       	dc.b	nA2, $01
0008C255 E10A                       	smpsAlterNote       $0A
0008C257 E701                       	dc.b	smpsNoAttack, $01
0008C259 E1E8                       	smpsAlterNote       $E8
0008C25B E7A3 01                    	dc.b	smpsNoAttack, nBb2, $01
0008C25E E1F7                       	smpsAlterNote       $F7
0008C260 E701                       	dc.b	smpsNoAttack, $01
0008C262 E10C                       	smpsAlterNote       $0C
0008C264 E702 9703 8001 A306 8001+  	dc.b	smpsNoAttack, $02, nBb1, $03, nRst, $01, nBb2, $06, nRst, $01, nBb1, $03
0008C270 E1EA                       	smpsAlterNote       $EA
0008C272 9D01                       	dc.b	nE2, $01
0008C274 E108                       	smpsAlterNote       $08
0008C276 E701                       	dc.b	smpsNoAttack, $01
0008C278 E1F6                       	smpsAlterNote       $F6
0008C27A E79E 01                    	dc.b	smpsNoAttack, nF2, $01
0008C27D E105                       	smpsAlterNote       $05
0008C27F E701                       	dc.b	smpsNoAttack, $01
0008C281 E109                       	smpsAlterNote       $09
0008C283 E702 8001                  	dc.b	smpsNoAttack, $02, nRst, $01
0008C287 E10C                       	smpsAlterNote       $0C
0008C289 9703 9703 8001 A303 9703+  	dc.b	nBb1, $03, nBb1, $03, nRst, $01, nBb2, $03, nBb1, $03, nRst, $01
0008C295 E108                       	smpsAlterNote       $08
0008C297 9D02 8001 9D03             	dc.b	nE2, $02, nRst, $01, nE2, $03
0008C29D E106                       	smpsAlterNote       $06
0008C29F A403 8001                  	dc.b	nB2, $03, nRst, $01
0008C2A3 E108                       	smpsAlterNote       $08
0008C2A5 9D03                       	dc.b	nE2, $03
0008C2A7 E1EB                       	smpsAlterNote       $EB
0008C2A9 A801                       	dc.b	nEb3, $01
0008C2AB E109                       	smpsAlterNote       $09
0008C2AD E701                       	dc.b	smpsNoAttack, $01
0008C2AF E1EB                       	smpsAlterNote       $EB
0008C2B1 E7A9 01                    	dc.b	smpsNoAttack, nE3, $01
0008C2B4 E108                       	smpsAlterNote       $08
0008C2B6 E704 9D03 8001 A906 9D03+  	dc.b	smpsNoAttack, $04, nE2, $03, nRst, $01, nE3, $06, nE2, $03, nRst, $01
0008C2C2 E1E9                       	smpsAlterNote       $E9
0008C2C4 A301                       	dc.b	nBb2, $01
0008C2C6 E1F8                       	smpsAlterNote       $F8
0008C2C8 E701                       	dc.b	smpsNoAttack, $01
0008C2CA E116                       	smpsAlterNote       $16
0008C2CC E701                       	dc.b	smpsNoAttack, $01
0008C2CE E1F7                       	smpsAlterNote       $F7
0008C2D0 E7A4 01                    	dc.b	smpsNoAttack, nB2, $01
0008C2D3 E107                       	smpsAlterNote       $07
0008C2D5 E701                       	dc.b	smpsNoAttack, $01
0008C2D7 E1EE                       	smpsAlterNote       $EE
0008C2D9 E7A5 01                    	dc.b	smpsNoAttack, nC3, $01
0008C2DC E106                       	smpsAlterNote       $06
0008C2DE 8001                       	dc.b	nRst, $01
0008C2E0 E108                       	smpsAlterNote       $08
0008C2E2 9D03 9D03 8001             	dc.b	nE2, $03, nE2, $03, nRst, $01
0008C2E8 E106                       	smpsAlterNote       $06
0008C2EA A402 8001                  	dc.b	nB2, $02, nRst, $01
0008C2EE E108                       	smpsAlterNote       $08
0008C2F0 9D03                       	dc.b	nE2, $03
0008C2F2 E10B                       	smpsAlterNote       $0B
0008C2F4 9603 8001 9603             	dc.b	nA1, $03, nRst, $01, nA1, $03
0008C2FA E108                       	smpsAlterNote       $08
0008C2FC 9D03 8001                  	dc.b	nE2, $03, nRst, $01
0008C300 E10B                       	smpsAlterNote       $0B
0008C302 9603                       	dc.b	nA1, $03
0008C304 E10E                       	smpsAlterNote       $0E
0008C306 A001                       	dc.b	nG2, $01
0008C308 E118                       	smpsAlterNote       $18
0008C30A E701                       	dc.b	smpsNoAttack, $01
0008C30C E1E9                       	smpsAlterNote       $E9
0008C30E E7A1 01                    	dc.b	smpsNoAttack, nAb2, $01
0008C311 E1EE                       	smpsAlterNote       $EE
0008C313 E701                       	dc.b	smpsNoAttack, $01
0008C315 E1F8                       	smpsAlterNote       $F8
0008C317 E701                       	dc.b	smpsNoAttack, $01
0008C319 E102                       	smpsAlterNote       $02
0008C31B E701                       	dc.b	smpsNoAttack, $01
0008C31D E107                       	smpsAlterNote       $07
0008C31F 8001                       	dc.b	nRst, $01
0008C321 E10B                       	smpsAlterNote       $0B
0008C323 9603                       	dc.b	nA1, $03
0008C325 E10C                       	smpsAlterNote       $0C
0008C327 9707 9703 8001             	dc.b	nBb1, $07, nBb1, $03, nRst, $01
0008C32D E10B                       	smpsAlterNote       $0B
0008C32F 9602 8001 A206 8001 9603+  	dc.b	nA1, $02, nRst, $01, nA2, $06, nRst, $01, nA1, $03, nA2, $03
0008C33B 8001 9603                  	dc.b	nRst, $01, nA1, $03
0008C33F E10C                       	smpsAlterNote       $0C
0008C341 9706 800F 9703 9703 8019+  	dc.b	nBb1, $06, nRst, $0F, nBb1, $03, nBb1, $03, nRst, $19, nBb1, $02
0008C34D 8001                       	dc.b	nRst, $01
0008C34F E10B                       	smpsAlterNote       $0B
0008C351 9606 800F 9602 8001        	dc.b	nA1, $06, nRst, $0F, nA1, $02, nRst, $01
0008C359 E107                       	smpsAlterNote       $07
0008C35B 9B06 8001                  	dc.b	nD2, $06, nRst, $01
0008C35F E10B                       	smpsAlterNote       $0B
0008C361 9603                       	dc.b	nA1, $03
0008C363 E109                       	smpsAlterNote       $09
0008C365 9E03 8001                  	dc.b	nF2, $03, nRst, $01
0008C369 E108                       	smpsAlterNote       $08
0008C36B 9D06                       	dc.b	nE2, $06
0008C36D E107                       	smpsAlterNote       $07
0008C36F 9B03 8001                  	dc.b	nD2, $03, nRst, $01
0008C373 E106                       	smpsAlterNote       $06
0008C375 9903                       	dc.b	nC2, $03
0008C377 E10C                       	smpsAlterNote       $0C
0008C379 9703 8001                  	dc.b	nBb1, $03, nRst, $01
0008C37D E10B                       	smpsAlterNote       $0B
0008C37F 9603 9603 8001 9602 8001+  	dc.b	nA1, $03, nA1, $03, nRst, $01, nA1, $02, nRst, $01, nA1, $03
0008C38B 9603 8001 9603 9603 8001   	dc.b	nA1, $03, nRst, $01, nA1, $03, nA1, $03, nRst, $01
0008C395 E10C                       	smpsAlterNote       $0C
0008C397 9706 8001 9702 8001 9703+  	dc.b	nBb1, $06, nRst, $01, nBb1, $02, nRst, $01, nBb1, $03, nBb1, $03
0008C3A3 8001 9703 9703 8001 9703+  	dc.b	nRst, $01, nBb1, $03, nBb1, $03, nRst, $01, nBb1, $03, nBb1, $03
0008C3AF 8001                       	dc.b	nRst, $01
0008C3B1 E10B                       	smpsAlterNote       $0B
0008C3B3 9602 8001 9603 9603 8001+  	dc.b	nA1, $02, nRst, $01, nA1, $03, nA1, $03, nRst, $01, nA1, $03
0008C3BF 9603 8001 9602 8001 9603+  	dc.b	nA1, $03, nRst, $01, nA1, $02, nRst, $01, nA1, $03, nA1, $07
0008C3CB 9603 8001 9603 9603 8001+  	dc.b	nA1, $03, nRst, $01, nA1, $03, nA1, $03, nRst, $01, nA1, $02
0008C3D7 8001 9603 9603 8001 9603   	dc.b	nRst, $01, nA1, $03, nA1, $03, nRst, $01, nA1, $03
0008C3E1 E10C                       	smpsAlterNote       $0C
0008C3E3 9707 800E 9703 9703 8019+  	dc.b	nBb1, $07, nRst, $0E, nBb1, $03, nBb1, $03, nRst, $19, nBb1, $03
0008C3EF E10B                       	smpsAlterNote       $0B
0008C3F1 9606 800F 9602 8001        	dc.b	nA1, $06, nRst, $0F, nA1, $02, nRst, $01
0008C3F9 E107                       	smpsAlterNote       $07
0008C3FB 9B06 8001                  	dc.b	nD2, $06, nRst, $01
0008C3FF E10B                       	smpsAlterNote       $0B
0008C401 9603                       	dc.b	nA1, $03
0008C403 E109                       	smpsAlterNote       $09
0008C405 9E03 8001                  	dc.b	nF2, $03, nRst, $01
0008C409 E108                       	smpsAlterNote       $08
0008C40B 9D06 8001                  	dc.b	nE2, $06, nRst, $01
0008C40F E107                       	smpsAlterNote       $07
0008C411 9B02 8001                  	dc.b	nD2, $02, nRst, $01
0008C415 E106                       	smpsAlterNote       $06
0008C417 9903                       	dc.b	nC2, $03
0008C419 E10C                       	smpsAlterNote       $0C
0008C41B 9703 8001                  	dc.b	nBb1, $03, nRst, $01
0008C41F E10B                       	smpsAlterNote       $0B
0008C421 9603 9603 8001 9603 9603+  	dc.b	nA1, $03, nA1, $03, nRst, $01, nA1, $03, nA1, $03, nRst, $01
0008C42D 9602 8001 9603 9603 8001   	dc.b	nA1, $02, nRst, $01, nA1, $03, nA1, $03, nRst, $01
0008C437 E10C                       	smpsAlterNote       $0C
0008C439 9706 8001 9703 9703 8001+  	dc.b	nBb1, $06, nRst, $01, nBb1, $03, nBb1, $03, nRst, $01, nBb1, $02
0008C445 8001 9703 9703 8001 9703+  	dc.b	nRst, $01, nBb1, $03, nBb1, $03, nRst, $01, nBb1, $03, nBb1, $03
0008C451 8001                       	dc.b	nRst, $01
0008C453 E10B                       	smpsAlterNote       $0B
0008C455 9602 8001 9603 9603 8001+  	dc.b	nA1, $02, nRst, $01, nA1, $03, nA1, $03, nRst, $01, nA1, $03
0008C461 9603 8001 9603 9603 8001   	dc.b	nA1, $03, nRst, $01, nA1, $03, nA1, $03, nRst, $01
0008C46B E10C                       	smpsAlterNote       $0C
0008C46D 9706 9703 8001 9703 9703+  	dc.b	nBb1, $06, nBb1, $03, nRst, $01, nBb1, $03, nBb1, $03, nRst, $01
0008C479 9703 9703 8001 9702 8001+  	dc.b	nBb1, $03, nBb1, $03, nRst, $01, nBb1, $02, nRst, $01, nBb1, $03
0008C485 E10B                       	smpsAlterNote       $0B
0008C487 9603 8001 9603 9603 8001+  	dc.b	nA1, $03, nRst, $01, nA1, $03, nA1, $03, nRst, $01, nA1, $03
0008C493 9603 8001 9602 8001 9603   	dc.b	nA1, $03, nRst, $01, nA1, $02, nRst, $01, nA1, $03
0008C49D E10C                       	smpsAlterNote       $0C
0008C49F 9707 9703 8001 9703 9703+  	dc.b	nBb1, $07, nBb1, $03, nRst, $01, nBb1, $03, nBb1, $03, nRst, $01
0008C4AB 9702 8001 9703 9703 8001+  	dc.b	nBb1, $02, nRst, $01, nBb1, $03, nBb1, $03, nRst, $01, nBb1, $03
0008C4B7 E10B                       	smpsAlterNote       $0B
0008C4B9 9603 8001 9602 8001 9603+  	dc.b	nA1, $03, nRst, $01, nA1, $02, nRst, $01, nA1, $03, nA1, $03
0008C4C5 8001                       	dc.b	nRst, $01
0008C4C7 E1EC                       	smpsAlterNote       $EC
0008C4C9 A101                       	dc.b	nAb2, $01
0008C4CB E1FA                       	smpsAlterNote       $FA
0008C4CD E701                       	dc.b	smpsNoAttack, $01
0008C4CF E116                       	smpsAlterNote       $16
0008C4D1 E701                       	dc.b	smpsNoAttack, $01
0008C4D3 E1F5                       	smpsAlterNote       $F5
0008C4D5 E7A2 01                    	dc.b	smpsNoAttack, nA2, $01
0008C4D8 E10B                       	smpsAlterNote       $0B
0008C4DA E702 8001 9603 9606 8001+  	dc.b	smpsNoAttack, $02, nRst, $01, nA1, $03, nA1, $06, nRst, $01, nA1, $03
0008C4E6 9603 8001 9603 800B 9602+  	dc.b	nA1, $03, nRst, $01, nA1, $03, nRst, $0B, nA1, $02, nRst, $01
0008C4F2 E107                       	smpsAlterNote       $07
0008C4F4 9B03 9B03 8001             	dc.b	nD2, $03, nD2, $03, nRst, $01
0008C4FA E10B                       	smpsAlterNote       $0B
0008C4FC A203                       	dc.b	nA2, $03
0008C4FE E107                       	smpsAlterNote       $07
0008C500 9B03 8001                  	dc.b	nD2, $03, nRst, $01
0008C504 E1F3                       	smpsAlterNote       $F3
0008C506 A401                       	dc.b	nB2, $01
0008C508 E102                       	smpsAlterNote       $02
0008C50A E701                       	dc.b	smpsNoAttack, $01
0008C50C E109                       	smpsAlterNote       $09
0008C50E E701                       	dc.b	smpsNoAttack, $01
0008C510 E102                       	smpsAlterNote       $02
0008C512 E7A5 01                    	dc.b	smpsNoAttack, nC3, $01
0008C515 E106                       	smpsAlterNote       $06
0008C517 E702 8001                  	dc.b	smpsNoAttack, $02, nRst, $01
0008C51B E107                       	smpsAlterNote       $07
0008C51D 9B02 8001                  	dc.b	nD2, $02, nRst, $01
0008C521 E108                       	smpsAlterNote       $08
0008C523 9C06 8001 9C03             	dc.b	nEb2, $06, nRst, $01, nEb2, $03
0008C529 E109                       	smpsAlterNote       $09
0008C52B A003 8001                  	dc.b	nG2, $03, nRst, $01
0008C52F E1F2                       	smpsAlterNote       $F2
0008C531 A401                       	dc.b	nB2, $01
0008C533 E1FF                       	smpsAlterNote       $FF
0008C535 E701                       	dc.b	smpsNoAttack, $01
0008C537 E111                       	smpsAlterNote       $11
0008C539 E701                       	dc.b	smpsNoAttack, $01
0008C53B E1FB                       	smpsAlterNote       $FB
0008C53D E7A5 01                    	dc.b	smpsNoAttack, nC3, $01
0008C540 E106                       	smpsAlterNote       $06
0008C542 E702                       	dc.b	smpsNoAttack, $02
0008C544 E109                       	smpsAlterNote       $09
0008C546 A007                       	dc.b	nG2, $07
0008C548 E108                       	smpsAlterNote       $08
0008C54A 9C03 8001                  	dc.b	nEb2, $03, nRst, $01
0008C54E E107                       	smpsAlterNote       $07
0008C550 9B03 9B03 8001             	dc.b	nD2, $03, nD2, $03, nRst, $01
0008C556 E10B                       	smpsAlterNote       $0B
0008C558 A202 8001                  	dc.b	nA2, $02, nRst, $01
0008C55C E107                       	smpsAlterNote       $07
0008C55E 9B03                       	dc.b	nD2, $03
0008C560 E11A                       	smpsAlterNote       $1A
0008C562 A301                       	dc.b	nBb2, $01
0008C564 E1F2                       	smpsAlterNote       $F2
0008C566 E7A4 01                    	dc.b	smpsNoAttack, nB2, $01
0008C569 E1FF                       	smpsAlterNote       $FF
0008C56B E701                       	dc.b	smpsNoAttack, $01
0008C56D E111                       	smpsAlterNote       $11
0008C56F E701                       	dc.b	smpsNoAttack, $01
0008C571 E106                       	smpsAlterNote       $06
0008C573 E7A5 03                    	dc.b	smpsNoAttack, nC3, $03
0008C576 E107                       	smpsAlterNote       $07
0008C578 9B03 8001 A706 8001 9B02+  	dc.b	nD2, $03, nRst, $01, nD3, $06, nRst, $01, nD2, $02, nRst, $01
0008C584 E117                       	smpsAlterNote       $17
0008C586 A001                       	dc.b	nG2, $01
0008C588 E1FA                       	smpsAlterNote       $FA
0008C58A E7A1 01                    	dc.b	smpsNoAttack, nAb2, $01
0008C58D E116                       	smpsAlterNote       $16
0008C58F E701                       	dc.b	smpsNoAttack, $01
0008C591 E1F5                       	smpsAlterNote       $F5
0008C593 E7A2 01                    	dc.b	smpsNoAttack, nA2, $01
0008C596 E103                       	smpsAlterNote       $03
0008C598 E701                       	dc.b	smpsNoAttack, $01
0008C59A E10B                       	smpsAlterNote       $0B
0008C59C E701 8001                  	dc.b	smpsNoAttack, $01, nRst, $01
0008C5A0 E107                       	smpsAlterNote       $07
0008C5A2 9B03 9B03 8001             	dc.b	nD2, $03, nD2, $03, nRst, $01
0008C5A8 E109                       	smpsAlterNote       $09
0008C5AA 9E03                       	dc.b	nF2, $03
0008C5AC E10B                       	smpsAlterNote       $0B
0008C5AE 9603 8001                  	dc.b	nA1, $03, nRst, $01
0008C5B2 E107                       	smpsAlterNote       $07
0008C5B4 9B02 8001 9B03             	dc.b	nD2, $02, nRst, $01, nD2, $03
0008C5BA E10B                       	smpsAlterNote       $0B
0008C5BC A203 8001                  	dc.b	nA2, $03, nRst, $01
0008C5C0 E107                       	smpsAlterNote       $07
0008C5C2 9B03                       	dc.b	nD2, $03
0008C5C4 E11A                       	smpsAlterNote       $1A
0008C5C6 A301                       	dc.b	nBb2, $01
0008C5C8 E1F9                       	smpsAlterNote       $F9
0008C5CA E7A4 01                    	dc.b	smpsNoAttack, nB2, $01
0008C5CD E1FF                       	smpsAlterNote       $FF
0008C5CF E701                       	dc.b	smpsNoAttack, $01
0008C5D1 E111                       	smpsAlterNote       $11
0008C5D3 E701                       	dc.b	smpsNoAttack, $01
0008C5D5 E106                       	smpsAlterNote       $06
0008C5D7 E7A5 03                    	dc.b	smpsNoAttack, nC3, $03
0008C5DA E107                       	smpsAlterNote       $07
0008C5DC 9B03                       	dc.b	nD2, $03
0008C5DE E108                       	smpsAlterNote       $08
0008C5E0 9C07 9C03 8001             	dc.b	nEb2, $07, nEb2, $03, nRst, $01
0008C5E6 E109                       	smpsAlterNote       $09
0008C5E8 A003                       	dc.b	nG2, $03
0008C5EA E1F0                       	smpsAlterNote       $F0
0008C5EC A501                       	dc.b	nC3, $01
0008C5EE E106                       	smpsAlterNote       $06
0008C5F0 E705 8001                  	dc.b	smpsNoAttack, $05, nRst, $01
0008C5F4 E109                       	smpsAlterNote       $09
0008C5F6 A006 8001                  	dc.b	nG2, $06, nRst, $01
0008C5FA E108                       	smpsAlterNote       $08
0008C5FC 9C03                       	dc.b	nEb2, $03
0008C5FE E107                       	smpsAlterNote       $07
0008C600 9B03 8001 9B03             	dc.b	nD2, $03, nRst, $01, nD2, $03
0008C606 E10B                       	smpsAlterNote       $0B
0008C608 A203 8001                  	dc.b	nA2, $03, nRst, $01
0008C60C E107                       	smpsAlterNote       $07
0008C60E 9B02 8001                  	dc.b	nD2, $02, nRst, $01
0008C612 E11A                       	smpsAlterNote       $1A
0008C614 A301                       	dc.b	nBb2, $01
0008C616 E1F9                       	smpsAlterNote       $F9
0008C618 E7A4 01                    	dc.b	smpsNoAttack, nB2, $01
0008C61B E107                       	smpsAlterNote       $07
0008C61D E701                       	dc.b	smpsNoAttack, $01
0008C61F E1FB                       	smpsAlterNote       $FB
0008C621 E7A5 01                    	dc.b	smpsNoAttack, nC3, $01
0008C624 E106                       	smpsAlterNote       $06
0008C626 E702 8001                  	dc.b	smpsNoAttack, $02, nRst, $01
0008C62A E107                       	smpsAlterNote       $07
0008C62C 9B03 A707 9B03 8001        	dc.b	nD2, $03, nD3, $07, nD2, $03, nRst, $01
0008C634 E1EC                       	smpsAlterNote       $EC
0008C636 A101                       	dc.b	nAb2, $01
0008C638 E108                       	smpsAlterNote       $08
0008C63A E701                       	dc.b	smpsNoAttack, $01
0008C63C E1E7                       	smpsAlterNote       $E7
0008C63E E7A2 01                    	dc.b	smpsNoAttack, nA2, $01
0008C641 E1F5                       	smpsAlterNote       $F5
0008C643 E701                       	dc.b	smpsNoAttack, $01
0008C645 E10B                       	smpsAlterNote       $0B
0008C647 E702                       	dc.b	smpsNoAttack, $02
0008C649 E107                       	smpsAlterNote       $07
0008C64B 9B03 8001 A703             	dc.b	nD2, $03, nRst, $01, nD3, $03
0008C651 E106                       	smpsAlterNote       $06
0008C653 9903 8001 A503             	dc.b	nC2, $03, nRst, $01, nC3, $03
0008C659 E10C                       	smpsAlterNote       $0C
0008C65B 9703 8001 9702 8001        	dc.b	nBb1, $03, nRst, $01, nBb1, $02, nRst, $01
0008C663 E109                       	smpsAlterNote       $09
0008C665 9E03                       	dc.b	nF2, $03
0008C667 E10C                       	smpsAlterNote       $0C
0008C669 9703 8001                  	dc.b	nBb1, $03, nRst, $01
0008C66D E1EA                       	smpsAlterNote       $EA
0008C66F A201                       	dc.b	nA2, $01
0008C671 E106                       	smpsAlterNote       $06
0008C673 E701                       	dc.b	smpsNoAttack, $01
0008C675 E114                       	smpsAlterNote       $14
0008C677 E701                       	dc.b	smpsNoAttack, $01
0008C679 E1F0                       	smpsAlterNote       $F0
0008C67B E7A3 01                    	dc.b	smpsNoAttack, nBb2, $01
0008C67E E10C                       	smpsAlterNote       $0C
0008C680 E702 8001 9702 8001 A306+  	dc.b	smpsNoAttack, $02, nRst, $01, nBb1, $02, nRst, $01, nBb2, $06, nRst, $01
0008C68C 9703                       	dc.b	nBb1, $03
0008C68E E116                       	smpsAlterNote       $16
0008C690 9C01                       	dc.b	nEb2, $01
0008C692 E105                       	smpsAlterNote       $05
0008C694 E79D 01                    	dc.b	smpsNoAttack, nE2, $01
0008C697 E113                       	smpsAlterNote       $13
0008C699 E701                       	dc.b	smpsNoAttack, $01
0008C69B E1FF                       	smpsAlterNote       $FF
0008C69D E79E 01                    	dc.b	smpsNoAttack, nF2, $01
0008C6A0 E109                       	smpsAlterNote       $09
0008C6A2 E703                       	dc.b	smpsNoAttack, $03
0008C6A4 E10C                       	smpsAlterNote       $0C
0008C6A6 9703 8001 9702 8001 A303+  	dc.b	nBb1, $03, nRst, $01, nBb1, $02, nRst, $01, nBb2, $03, nBb1, $03
0008C6B2 8001 9703 9703 8001        	dc.b	nRst, $01, nBb1, $03, nBb1, $03, nRst, $01
0008C6BA E109                       	smpsAlterNote       $09
0008C6BC 9E03                       	dc.b	nF2, $03
0008C6BE E10C                       	smpsAlterNote       $0C
0008C6C0 9703 8001                  	dc.b	nBb1, $03, nRst, $01
0008C6C4 E1EA                       	smpsAlterNote       $EA
0008C6C6 A201                       	dc.b	nA2, $01
0008C6C8 E106                       	smpsAlterNote       $06
0008C6CA E701                       	dc.b	smpsNoAttack, $01
0008C6CC E1E2                       	smpsAlterNote       $E2
0008C6CE E7A3 01                    	dc.b	smpsNoAttack, nBb2, $01
0008C6D1 E1F0                       	smpsAlterNote       $F0
0008C6D3 E701                       	dc.b	smpsNoAttack, $01
0008C6D5 E10C                       	smpsAlterNote       $0C
0008C6D7 E702 9703 8001 A306 8001+  	dc.b	smpsNoAttack, $02, nBb1, $03, nRst, $01, nBb2, $06, nRst, $01, nBb1, $03
0008C6E3 E116                       	smpsAlterNote       $16
0008C6E5 9C01                       	dc.b	nEb2, $01
0008C6E7 E105                       	smpsAlterNote       $05
0008C6E9 E79D 01                    	dc.b	smpsNoAttack, nE2, $01
0008C6EC E1F1                       	smpsAlterNote       $F1
0008C6EE E79E 01                    	dc.b	smpsNoAttack, nF2, $01
0008C6F1 E1FF                       	smpsAlterNote       $FF
0008C6F3 E701                       	dc.b	smpsNoAttack, $01
0008C6F5 E109                       	smpsAlterNote       $09
0008C6F7 E702 8001                  	dc.b	smpsNoAttack, $02, nRst, $01
0008C6FB E10C                       	smpsAlterNote       $0C
0008C6FD 9703 9703 8001 A303 9703+  	dc.b	nBb1, $03, nBb1, $03, nRst, $01, nBb2, $03, nBb1, $03, nRst, $04
0008C709 E106                       	smpsAlterNote       $06
0008C70B 9903                       	dc.b	nC2, $03
0008C70D E107                       	smpsAlterNote       $07
0008C70F 9B03 8001                  	dc.b	nD2, $03, nRst, $01
0008C713 E109                       	smpsAlterNote       $09
0008C715 8003 940D 8004             	dc.b	nRst, $03, nG1, $0D, nRst, $04
0008C71B E107                       	smpsAlterNote       $07
0008C71D 9B03 8001                  	dc.b	nD2, $03, nRst, $01
0008C721 E108                       	smpsAlterNote       $08
0008C723 9D03                       	dc.b	nE2, $03
0008C725 E10B                       	smpsAlterNote       $0B
0008C727 8004 960D 8004             	dc.b	nRst, $04, nA1, $0D, nRst, $04
0008C72D E109                       	smpsAlterNote       $09
0008C72F 9E03 A003 8001             	dc.b	nF2, $03, nG2, $03, nRst, $01
0008C735 E10C                       	smpsAlterNote       $0C
0008C737 8003 970D 8001             	dc.b	nRst, $03, nBb1, $0D, nRst, $01
0008C73D E106                       	smpsAlterNote       $06
0008C73F 9903                       	dc.b	nC2, $03
0008C741 E11A                       	smpsAlterNote       $1A
0008C743 A301                       	dc.b	nBb2, $01
0008C745 E1F9                       	smpsAlterNote       $F9
0008C747 E7A4 01                    	dc.b	smpsNoAttack, nB2, $01
0008C74A E1FF                       	smpsAlterNote       $FF
0008C74C E701                       	dc.b	smpsNoAttack, $01
0008C74E E111                       	smpsAlterNote       $11
0008C750 E701                       	dc.b	smpsNoAttack, $01
0008C752 E106                       	smpsAlterNote       $06
0008C754 E7A5 0399 0380 04          	dc.b	smpsNoAttack, nC3, $03, nC2, $03, nRst, $04
0008C75B E109                       	smpsAlterNote       $09
0008C75D A003                       	dc.b	nG2, $03
0008C75F E106                       	smpsAlterNote       $06
0008C761 9907                       	dc.b	nC2, $07
0008C763 E107                       	smpsAlterNote       $07
0008C765 9B03 8001 9B02 8001        	dc.b	nD2, $03, nRst, $01, nD2, $02, nRst, $01
0008C76D E10B                       	smpsAlterNote       $0B
0008C76F A203                       	dc.b	nA2, $03
0008C771 E107                       	smpsAlterNote       $07
0008C773 9B03 8001                  	dc.b	nD2, $03, nRst, $01
0008C777 E1F2                       	smpsAlterNote       $F2
0008C779 A401                       	dc.b	nB2, $01
0008C77B E1F9                       	smpsAlterNote       $F9
0008C77D E701                       	dc.b	smpsNoAttack, $01
0008C77F E107                       	smpsAlterNote       $07
0008C781 E701                       	dc.b	smpsNoAttack, $01
0008C783 E1FB                       	smpsAlterNote       $FB
0008C785 E7A5 01                    	dc.b	smpsNoAttack, nC3, $01
0008C788 E106                       	smpsAlterNote       $06
0008C78A E702 8001                  	dc.b	smpsNoAttack, $02, nRst, $01
0008C78E E107                       	smpsAlterNote       $07
0008C790 9B03                       	dc.b	nD2, $03
0008C792 E108                       	smpsAlterNote       $08
0008C794 9C06 8001 A803             	dc.b	nEb2, $06, nRst, $01, nEb3, $03
0008C79A E109                       	smpsAlterNote       $09
0008C79C A003 8001                  	dc.b	nG2, $03, nRst, $01
0008C7A0 E1F2                       	smpsAlterNote       $F2
0008C7A2 A401                       	dc.b	nB2, $01
0008C7A4 E1F9                       	smpsAlterNote       $F9
0008C7A6 E701                       	dc.b	smpsNoAttack, $01
0008C7A8 E107                       	smpsAlterNote       $07
0008C7AA E701                       	dc.b	smpsNoAttack, $01
0008C7AC E1FB                       	smpsAlterNote       $FB
0008C7AE E7A5 01                    	dc.b	smpsNoAttack, nC3, $01
0008C7B1 E106                       	smpsAlterNote       $06
0008C7B3 E702 8001                  	dc.b	smpsNoAttack, $02, nRst, $01
0008C7B7 E108                       	smpsAlterNote       $08
0008C7B9 9C06 8001                  	dc.b	nEb2, $06, nRst, $01
0008C7BD E10C                       	smpsAlterNote       $0C
0008C7BF A302 8001                  	dc.b	nBb2, $02, nRst, $01
0008C7C3 E107                       	smpsAlterNote       $07
0008C7C5 9B03 9B03 8001             	dc.b	nD2, $03, nD2, $03, nRst, $01
0008C7CB E10B                       	smpsAlterNote       $0B
0008C7CD A203                       	dc.b	nA2, $03
0008C7CF E107                       	smpsAlterNote       $07
0008C7D1 9B03 8001                  	dc.b	nD2, $03, nRst, $01
0008C7D5 E1F2                       	smpsAlterNote       $F2
0008C7D7 A401                       	dc.b	nB2, $01
0008C7D9 E1FF                       	smpsAlterNote       $FF
0008C7DB E701                       	dc.b	smpsNoAttack, $01
0008C7DD E107                       	smpsAlterNote       $07
0008C7DF E701                       	dc.b	smpsNoAttack, $01
0008C7E1 E1FB                       	smpsAlterNote       $FB
0008C7E3 E7A5 01                    	dc.b	smpsNoAttack, nC3, $01
0008C7E6 E106                       	smpsAlterNote       $06
0008C7E8 E702 8001                  	dc.b	smpsNoAttack, $02, nRst, $01
0008C7EC E107                       	smpsAlterNote       $07
0008C7EE 9B02 8001                  	dc.b	nD2, $02, nRst, $01
0008C7F2 E108                       	smpsAlterNote       $08
0008C7F4 9C06 8001 A803             	dc.b	nEb2, $06, nRst, $01, nEb3, $03
0008C7FA E109                       	smpsAlterNote       $09
0008C7FC A003 8001                  	dc.b	nG2, $03, nRst, $01
0008C800 E1F2                       	smpsAlterNote       $F2
0008C802 A401                       	dc.b	nB2, $01
0008C804 E1FF                       	smpsAlterNote       $FF
0008C806 E701                       	dc.b	smpsNoAttack, $01
0008C808 E111                       	smpsAlterNote       $11
0008C80A E701                       	dc.b	smpsNoAttack, $01
0008C80C E1FB                       	smpsAlterNote       $FB
0008C80E E7A5 01                    	dc.b	smpsNoAttack, nC3, $01
0008C811 E106                       	smpsAlterNote       $06
0008C813 E702                       	dc.b	smpsNoAttack, $02
0008C815 E108                       	smpsAlterNote       $08
0008C817 9C07                       	dc.b	nEb2, $07
0008C819 E10C                       	smpsAlterNote       $0C
0008C81B A303 8001                  	dc.b	nBb2, $03, nRst, $01
0008C81F E107                       	smpsAlterNote       $07
0008C821 9B03 9B03 8001             	dc.b	nD2, $03, nD2, $03, nRst, $01
0008C827 E10B                       	smpsAlterNote       $0B
0008C829 A202 8001                  	dc.b	nA2, $02, nRst, $01
0008C82D E107                       	smpsAlterNote       $07
0008C82F 9B03                       	dc.b	nD2, $03
0008C831 E11A                       	smpsAlterNote       $1A
0008C833 A301                       	dc.b	nBb2, $01
0008C835 E1F2                       	smpsAlterNote       $F2
0008C837 E7A4 01                    	dc.b	smpsNoAttack, nB2, $01
0008C83A E1FF                       	smpsAlterNote       $FF
0008C83C E701                       	dc.b	smpsNoAttack, $01
0008C83E E111                       	smpsAlterNote       $11
0008C840 E701                       	dc.b	smpsNoAttack, $01
0008C842 E106                       	smpsAlterNote       $06
0008C844 E7A5 03                    	dc.b	smpsNoAttack, nC3, $03
0008C847 E107                       	smpsAlterNote       $07
0008C849 9B03 8001                  	dc.b	nD2, $03, nRst, $01
0008C84D E108                       	smpsAlterNote       $08
0008C84F 9C06 8001 A802 8001        	dc.b	nEb2, $06, nRst, $01, nEb3, $02, nRst, $01
0008C857 E109                       	smpsAlterNote       $09
0008C859 A003                       	dc.b	nG2, $03
0008C85B E11A                       	smpsAlterNote       $1A
0008C85D A301                       	dc.b	nBb2, $01
0008C85F E1F2                       	smpsAlterNote       $F2
0008C861 E7A4 01                    	dc.b	smpsNoAttack, nB2, $01
0008C864 E1FF                       	smpsAlterNote       $FF
0008C866 E701                       	dc.b	smpsNoAttack, $01
0008C868 E111                       	smpsAlterNote       $11
0008C86A E701                       	dc.b	smpsNoAttack, $01
0008C86C E106                       	smpsAlterNote       $06
0008C86E E7A5 03                    	dc.b	smpsNoAttack, nC3, $03
0008C871 E108                       	smpsAlterNote       $08
0008C873 9C07                       	dc.b	nEb2, $07
0008C875 E10C                       	smpsAlterNote       $0C
0008C877 A303 8001                  	dc.b	nBb2, $03, nRst, $01
0008C87B E107                       	smpsAlterNote       $07
0008C87D 9B02 8001 9B03 9B03 8001+  	dc.b	nD2, $02, nRst, $01, nD2, $03, nD2, $03, nRst, $01, nD2, $03
0008C889 9B03 8001 9B03 9B03 8001   	dc.b	nD2, $03, nRst, $01, nD2, $03, nD2, $03, nRst, $01
0008C893 E108                       	smpsAlterNote       $08
0008C895 9C06                       	dc.b	nEb2, $06
0008C897 E10C                       	smpsAlterNote       $0C
0008C899 9703 8001                  	dc.b	nBb1, $03, nRst, $01
0008C89D E108                       	smpsAlterNote       $08
0008C89F 9C03                       	dc.b	nEb2, $03
0008C8A1 E109                       	smpsAlterNote       $09
0008C8A3 A003 8001                  	dc.b	nG2, $03, nRst, $01
0008C8A7 E10C                       	smpsAlterNote       $0C
0008C8A9 A302 8001 A303 8007        	dc.b	nBb2, $02, nRst, $01, nBb2, $03, nRst, $07
0008C8B1 E107                       	smpsAlterNote       $07
0008C8B3 9B03 8001                  	dc.b	nD2, $03, nRst, $01
0008C8B7 F6F4 F8                    	smpsJump            music84_Jump04
0008C8BA                            
0008C8BA                            ; FM2 Data
0008C8BA                            music84_FM2:
0008C8BA E0C0                       	smpsPan             panCenter, $00
0008C8BE E10B                       	smpsAlterNote       $0B
0008C8C0 C603 8007                  	dc.b	nA5, $03, nRst, $07
0008C8C4 E109                       	smpsAlterNote       $09
0008C8C6 C403 800B                  	dc.b	nG5, $03, nRst, $0B
0008C8CA E108                       	smpsAlterNote       $08
0008C8CC C103 8004                  	dc.b	nE5, $03, nRst, $04
0008C8D2 E080                       	smpsPan             panLeft, $00
0008C8D4 E10C                       	smpsAlterNote       $0C
0008C8D6 E6F9                       	smpsAlterVol        $F9
0008C8D8 C703                       	dc.b	nBb5, $03
0008C8DA E10B                       	smpsAlterNote       $0B
0008C8DC C603 8001                  	dc.b	nA5, $03, nRst, $01
0008C8E0 E109                       	smpsAlterNote       $09
0008C8E2 C402 8001 C203             	dc.b	nG5, $02, nRst, $01, nF5, $03
0008C8E8 E108                       	smpsAlterNote       $08
0008C8EA C103 8001                  	dc.b	nE5, $03, nRst, $01
0008C8EE E106                       	smpsAlterNote       $06
0008C8F0 BD03                       	dc.b	nC5, $03
0008C8F2 E10B                       	smpsAlterNote       $0B
0008C8F4 BA03 8001                  	dc.b	nA4, $03, nRst, $01
0008C8FA E0C0                       	smpsPan             panCenter, $00
0008C8FC E107                       	smpsAlterNote       $07
0008C8FE E606                       	smpsAlterVol        $06
0008C900 BF03                       	dc.b	nD5, $03
0008C902                            
0008C902                            music84_Jump03:
0008C902 E108                       	smpsAlterNote       $08
0008C904 C103 8001                  	dc.b	nE5, $03, nRst, $01
0008C908 E109                       	smpsAlterNote       $09
0008C90A C202 8001 C403             	dc.b	nF5, $02, nRst, $01, nG5, $03
0008C910 E10B                       	smpsAlterNote       $0B
0008C912 C607                       	dc.b	nA5, $07
0008C914 E107                       	smpsAlterNote       $07
0008C916 BF03 8001                  	dc.b	nD5, $03, nRst, $01
0008C91A E106                       	smpsAlterNote       $06
0008C91C C90D                       	dc.b	nC6, $0D
0008C91E E100                       	smpsAlterNote       $00
0008C920 E701                       	dc.b	smpsNoAttack, $01
0008C922 E1FF                       	smpsAlterNote       $FF
0008C924 E701                       	dc.b	smpsNoAttack, $01
0008C926 E103                       	smpsAlterNote       $03
0008C928 E701                       	dc.b	smpsNoAttack, $01
0008C92A E109                       	smpsAlterNote       $09
0008C92C E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008C930 E106                       	smpsAlterNote       $06
0008C932 E701                       	dc.b	smpsNoAttack, $01
0008C934 E100                       	smpsAlterNote       $00
0008C936 E701                       	dc.b	smpsNoAttack, $01
0008C938 E10C                       	smpsAlterNote       $0C
0008C93A C703 8001                  	dc.b	nBb5, $03, nRst, $01
0008C93E E10B                       	smpsAlterNote       $0B
0008C940 C603                       	dc.b	nA5, $03
0008C942 E109                       	smpsAlterNote       $09
0008C944 C403 8001                  	dc.b	nG5, $03, nRst, $01
0008C948 E10B                       	smpsAlterNote       $0B
0008C94A C60D                       	dc.b	nA5, $0D
0008C94C E105                       	smpsAlterNote       $05
0008C94E E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008C952 E10B                       	smpsAlterNote       $0B
0008C954 E701                       	dc.b	smpsNoAttack, $01
0008C956 E10E                       	smpsAlterNote       $0E
0008C958 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008C95C E108                       	smpsAlterNote       $08
0008C95E E701                       	dc.b	smpsNoAttack, $01
0008C960 E104                       	smpsAlterNote       $04
0008C962 E701                       	dc.b	smpsNoAttack, $01
0008C964 E105                       	smpsAlterNote       $05
0008C966 E701                       	dc.b	smpsNoAttack, $01
0008C968 E10B                       	smpsAlterNote       $0B
0008C96A E701                       	dc.b	smpsNoAttack, $01
0008C96C E10F                       	smpsAlterNote       $0F
0008C96E E701                       	dc.b	smpsNoAttack, $01
0008C970 E10B                       	smpsAlterNote       $0B
0008C972 E701                       	dc.b	smpsNoAttack, $01
0008C974 E108                       	smpsAlterNote       $08
0008C976 E701                       	dc.b	smpsNoAttack, $01
0008C978 E104                       	smpsAlterNote       $04
0008C97A E701                       	dc.b	smpsNoAttack, $01
0008C97C E108                       	smpsAlterNote       $08
0008C97E E701                       	dc.b	smpsNoAttack, $01
0008C980 E10E                       	smpsAlterNote       $0E
0008C982 E701                       	dc.b	smpsNoAttack, $01
0008C984 E10F                       	smpsAlterNote       $0F
0008C986 E701                       	dc.b	smpsNoAttack, $01
0008C988 E10B                       	smpsAlterNote       $0B
0008C98A E701                       	dc.b	smpsNoAttack, $01
0008C98C E105                       	smpsAlterNote       $05
0008C98E E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008C992 E108                       	smpsAlterNote       $08
0008C994 E701                       	dc.b	smpsNoAttack, $01
0008C996 E10E                       	smpsAlterNote       $0E
0008C998 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008C99C E108                       	smpsAlterNote       $08
0008C99E E701                       	dc.b	smpsNoAttack, $01
0008C9A0 E105                       	smpsAlterNote       $05
0008C9A2 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008C9A6 E10B                       	smpsAlterNote       $0B
0008C9A8 E701                       	dc.b	smpsNoAttack, $01
0008C9AA E10F                       	smpsAlterNote       $0F
0008C9AC E701 800E                  	dc.b	smpsNoAttack, $01, nRst, $0E
0008C9B0 E107                       	smpsAlterNote       $07
0008C9B2 BF03 8001                  	dc.b	nD5, $03, nRst, $01
0008C9B6 E108                       	smpsAlterNote       $08
0008C9B8 C103                       	dc.b	nE5, $03
0008C9BA E109                       	smpsAlterNote       $09
0008C9BC C203 8001 C402 8001        	dc.b	nF5, $03, nRst, $01, nG5, $02, nRst, $01
0008C9C4 E10B                       	smpsAlterNote       $0B
0008C9C6 C606 8001                  	dc.b	nA5, $06, nRst, $01
0008C9CA E107                       	smpsAlterNote       $07
0008C9CC BF03                       	dc.b	nD5, $03
0008C9CE E106                       	smpsAlterNote       $06
0008C9D0 C90D 8001                  	dc.b	nC6, $0D, nRst, $01
0008C9D4 E107                       	smpsAlterNote       $07
0008C9D6 CB03                       	dc.b	nD6, $03
0008C9D8 E10C                       	smpsAlterNote       $0C
0008C9DA C704 8001                  	dc.b	nBb5, $04, nRst, $01
0008C9DE E10B                       	smpsAlterNote       $0B
0008C9E0 C604 8001                  	dc.b	nA5, $04, nRst, $01
0008C9E4 E109                       	smpsAlterNote       $09
0008C9E6 C404                       	dc.b	nG5, $04
0008C9E8 E10B                       	smpsAlterNote       $0B
0008C9EA C60D                       	dc.b	nA5, $0D
0008C9EC E108                       	smpsAlterNote       $08
0008C9EE E701                       	dc.b	smpsNoAttack, $01
0008C9F0 E104                       	smpsAlterNote       $04
0008C9F2 E701                       	dc.b	smpsNoAttack, $01
0008C9F4 E108                       	smpsAlterNote       $08
0008C9F6 E701                       	dc.b	smpsNoAttack, $01
0008C9F8 E10B                       	smpsAlterNote       $0B
0008C9FA E701                       	dc.b	smpsNoAttack, $01
0008C9FC E10F                       	smpsAlterNote       $0F
0008C9FE E701                       	dc.b	smpsNoAttack, $01
0008CA00 E10B                       	smpsAlterNote       $0B
0008CA02 E701                       	dc.b	smpsNoAttack, $01
0008CA04 E105                       	smpsAlterNote       $05
0008CA06 E701                       	dc.b	smpsNoAttack, $01
0008CA08 E104                       	smpsAlterNote       $04
0008CA0A E701                       	dc.b	smpsNoAttack, $01
0008CA0C E108                       	smpsAlterNote       $08
0008CA0E E701                       	dc.b	smpsNoAttack, $01
0008CA10 E10E                       	smpsAlterNote       $0E
0008CA12 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008CA16 E10B                       	smpsAlterNote       $0B
0008CA18 E701                       	dc.b	smpsNoAttack, $01
0008CA1A E105                       	smpsAlterNote       $05
0008CA1C E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008CA20 E10B                       	smpsAlterNote       $0B
0008CA22 E701                       	dc.b	smpsNoAttack, $01
0008CA24 E10E                       	smpsAlterNote       $0E
0008CA26 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008CA2A E108                       	smpsAlterNote       $08
0008CA2C E701                       	dc.b	smpsNoAttack, $01
0008CA2E E104                       	smpsAlterNote       $04
0008CA30 E701                       	dc.b	smpsNoAttack, $01
0008CA32 E105                       	smpsAlterNote       $05
0008CA34 E701                       	dc.b	smpsNoAttack, $01
0008CA36 E10B                       	smpsAlterNote       $0B
0008CA38 E701                       	dc.b	smpsNoAttack, $01
0008CA3A E10F                       	smpsAlterNote       $0F
0008CA3C E701                       	dc.b	smpsNoAttack, $01
0008CA3E E10B                       	smpsAlterNote       $0B
0008CA40 E701                       	dc.b	smpsNoAttack, $01
0008CA42 E108                       	smpsAlterNote       $08
0008CA44 E701                       	dc.b	smpsNoAttack, $01
0008CA46 E105                       	smpsAlterNote       $05
0008CA48 8001                       	dc.b	nRst, $01
0008CA4A E109                       	smpsAlterNote       $09
0008CA4C C401                       	dc.b	nG5, $01
0008CA4E E10B                       	smpsAlterNote       $0B
0008CA50 E7C5 02C6 0D80 01C6 04     	dc.b	smpsNoAttack, nAb5, $02, nA5, $0D, nRst, $01, nA5, $04
0008CA59 E109                       	smpsAlterNote       $09
0008CA5B C404 8001                  	dc.b	nG5, $04, nRst, $01
0008CA5F E10B                       	smpsAlterNote       $0B
0008CA61 C604 8001                  	dc.b	nA5, $04, nRst, $01
0008CA65 E107                       	smpsAlterNote       $07
0008CA67 BF0D                       	dc.b	nD5, $0D
0008CA69 E101                       	smpsAlterNote       $01
0008CA6B E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008CA6F E104                       	smpsAlterNote       $04
0008CA71 E701                       	dc.b	smpsNoAttack, $01
0008CA73 E10A                       	smpsAlterNote       $0A
0008CA75 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008CA79 E104                       	smpsAlterNote       $04
0008CA7B E701                       	dc.b	smpsNoAttack, $01
0008CA7D E101                       	smpsAlterNote       $01
0008CA7F E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008CA83 E107                       	smpsAlterNote       $07
0008CA85 E701                       	dc.b	smpsNoAttack, $01
0008CA87 E10B                       	smpsAlterNote       $0B
0008CA89 E701 8001                  	dc.b	smpsNoAttack, $01, nRst, $01
0008CA8D E108                       	smpsAlterNote       $08
0008CA8F C101                       	dc.b	nE5, $01
0008CA91 E109                       	smpsAlterNote       $09
0008CA93 E7C2 01C4 01               	dc.b	smpsNoAttack, nF5, $01, nG5, $01
0008CA98 E10B                       	smpsAlterNote       $0B
0008CA9A C606 8001 C606 8001        	dc.b	nA5, $06, nRst, $01, nA5, $06, nRst, $01
0008CAA2 E108                       	smpsAlterNote       $08
0008CAA4 CD06                       	dc.b	nE6, $06
0008CAA6 E109                       	smpsAlterNote       $09
0008CAA8 CE07                       	dc.b	nF6, $07
0008CAAA E108                       	smpsAlterNote       $08
0008CAAC CD03 8001                  	dc.b	nE6, $03, nRst, $01
0008CAB0 E106                       	smpsAlterNote       $06
0008CAB2 C903                       	dc.b	nC6, $03
0008CAB4 E109                       	smpsAlterNote       $09
0008CAB6 C403 8001                  	dc.b	nG5, $03, nRst, $01
0008CABA E10C                       	smpsAlterNote       $0C
0008CABC C70D                       	dc.b	nBb5, $0D
0008CABE E106                       	smpsAlterNote       $06
0008CAC0 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008CAC4 E109                       	smpsAlterNote       $09
0008CAC6 E701                       	dc.b	smpsNoAttack, $01
0008CAC8 E10F                       	smpsAlterNote       $0F
0008CACA E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008CACE E109                       	smpsAlterNote       $09
0008CAD0 E701                       	dc.b	smpsNoAttack, $01
0008CAD2 E106                       	smpsAlterNote       $06
0008CAD4 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008CAD8 E10C                       	smpsAlterNote       $0C
0008CADA E701                       	dc.b	smpsNoAttack, $01
0008CADC E110                       	smpsAlterNote       $10
0008CADE E701 8001                  	dc.b	smpsNoAttack, $01, nRst, $01
0008CAE2 E10B                       	smpsAlterNote       $0B
0008CAE4 C606 C50E                  	dc.b	nA5, $06, nAb5, $0E
0008CAE8 E105                       	smpsAlterNote       $05
0008CAEA E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008CAEE E10B                       	smpsAlterNote       $0B
0008CAF0 E701                       	dc.b	smpsNoAttack, $01
0008CAF2 E10E                       	smpsAlterNote       $0E
0008CAF4 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008CAF8 E108                       	smpsAlterNote       $08
0008CAFA E701                       	dc.b	smpsNoAttack, $01
0008CAFC E104                       	smpsAlterNote       $04
0008CAFE E701                       	dc.b	smpsNoAttack, $01
0008CB00 E105                       	smpsAlterNote       $05
0008CB02 E701                       	dc.b	smpsNoAttack, $01
0008CB04 E10B                       	smpsAlterNote       $0B
0008CB06 E701                       	dc.b	smpsNoAttack, $01
0008CB08 E10F                       	smpsAlterNote       $0F
0008CB0A E701                       	dc.b	smpsNoAttack, $01
0008CB0C E10B                       	smpsAlterNote       $0B
0008CB0E E701                       	dc.b	smpsNoAttack, $01
0008CB10 E108                       	smpsAlterNote       $08
0008CB12 E701                       	dc.b	smpsNoAttack, $01
0008CB14 E104                       	smpsAlterNote       $04
0008CB16 E701                       	dc.b	smpsNoAttack, $01
0008CB18 E108                       	smpsAlterNote       $08
0008CB1A E701                       	dc.b	smpsNoAttack, $01
0008CB1C E10E                       	smpsAlterNote       $0E
0008CB1E E701                       	dc.b	smpsNoAttack, $01
0008CB20 E10F                       	smpsAlterNote       $0F
0008CB22 E701                       	dc.b	smpsNoAttack, $01
0008CB24 E10B                       	smpsAlterNote       $0B
0008CB26 E701                       	dc.b	smpsNoAttack, $01
0008CB28 E105                       	smpsAlterNote       $05
0008CB2A E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008CB2E E108                       	smpsAlterNote       $08
0008CB30 E701                       	dc.b	smpsNoAttack, $01
0008CB32 E10E                       	smpsAlterNote       $0E
0008CB34 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008CB38 E108                       	smpsAlterNote       $08
0008CB3A E701                       	dc.b	smpsNoAttack, $01
0008CB3C E105                       	smpsAlterNote       $05
0008CB3E E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008CB42 E10B                       	smpsAlterNote       $0B
0008CB44 E701                       	dc.b	smpsNoAttack, $01
0008CB46 E10F                       	smpsAlterNote       $0F
0008CB48 E701                       	dc.b	smpsNoAttack, $01
0008CB4A E10E                       	smpsAlterNote       $0E
0008CB4C E701                       	dc.b	smpsNoAttack, $01
0008CB4E E108                       	smpsAlterNote       $08
0008CB50 E701                       	dc.b	smpsNoAttack, $01
0008CB52 E104                       	smpsAlterNote       $04
0008CB54 E701                       	dc.b	smpsNoAttack, $01
0008CB56 E108                       	smpsAlterNote       $08
0008CB58 E701                       	dc.b	smpsNoAttack, $01
0008CB5A E10E                       	smpsAlterNote       $0E
0008CB5C E701                       	dc.b	smpsNoAttack, $01
0008CB5E E10F                       	smpsAlterNote       $0F
0008CB60 E701                       	dc.b	smpsNoAttack, $01
0008CB62 E10B                       	smpsAlterNote       $0B
0008CB64 E701                       	dc.b	smpsNoAttack, $01
0008CB66 E105                       	smpsAlterNote       $05
0008CB68 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008CB6C E108                       	smpsAlterNote       $08
0008CB6E E701                       	dc.b	smpsNoAttack, $01
0008CB70 E10E                       	smpsAlterNote       $0E
0008CB72 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008CB76 E108                       	smpsAlterNote       $08
0008CB78 E701                       	dc.b	smpsNoAttack, $01
0008CB7A E105                       	smpsAlterNote       $05
0008CB7C E701                       	dc.b	smpsNoAttack, $01
0008CB7E E10B                       	smpsAlterNote       $0B
0008CB80 C60D                       	dc.b	nA5, $0D
0008CB82 E108                       	smpsAlterNote       $08
0008CB84 E701                       	dc.b	smpsNoAttack, $01
0008CB86 E104                       	smpsAlterNote       $04
0008CB88 E701                       	dc.b	smpsNoAttack, $01
0008CB8A E105                       	smpsAlterNote       $05
0008CB8C E701                       	dc.b	smpsNoAttack, $01
0008CB8E E10B                       	smpsAlterNote       $0B
0008CB90 E701                       	dc.b	smpsNoAttack, $01
0008CB92 E10F                       	smpsAlterNote       $0F
0008CB94 E701                       	dc.b	smpsNoAttack, $01
0008CB96 E10B                       	smpsAlterNote       $0B
0008CB98 E701                       	dc.b	smpsNoAttack, $01
0008CB9A E108                       	smpsAlterNote       $08
0008CB9C E701                       	dc.b	smpsNoAttack, $01
0008CB9E E104                       	smpsAlterNote       $04
0008CBA0 E701                       	dc.b	smpsNoAttack, $01
0008CBA2 E108                       	smpsAlterNote       $08
0008CBA4 E701                       	dc.b	smpsNoAttack, $01
0008CBA6 E10E                       	smpsAlterNote       $0E
0008CBA8 E701                       	dc.b	smpsNoAttack, $01
0008CBAA E10F                       	smpsAlterNote       $0F
0008CBAC E701                       	dc.b	smpsNoAttack, $01
0008CBB0 E109                       	smpsAlterNote       $09
0008CBB2 E6FF                       	smpsAlterVol        $FF
0008CBB4 C206 8001 C203 C203 8001   	dc.b	nF5, $06, nRst, $01, nF5, $03, nF5, $03, nRst, $01
0008CBBE E108                       	smpsAlterNote       $08
0008CBC0 C103 800E                  	dc.b	nE5, $03, nRst, $0E
0008CBC6 E107                       	smpsAlterNote       $07
0008CBC8 E601                       	smpsAlterVol        $01
0008CBCA BF03                       	dc.b	nD5, $03
0008CBCC E108                       	smpsAlterNote       $08
0008CBCE C103 8001                  	dc.b	nE5, $03, nRst, $01
0008CBD2 E109                       	smpsAlterNote       $09
0008CBD4 C203 C403 8001             	dc.b	nF5, $03, nG5, $03, nRst, $01
0008CBDA E10B                       	smpsAlterNote       $0B
0008CBDC C606 8001                  	dc.b	nA5, $06, nRst, $01
0008CBE0 E107                       	smpsAlterNote       $07
0008CBE2 BF02 8001                  	dc.b	nD5, $02, nRst, $01
0008CBE6 E106                       	smpsAlterNote       $06
0008CBE8 C90D                       	dc.b	nC6, $0D
0008CBEA E103                       	smpsAlterNote       $03
0008CBEC E701                       	dc.b	smpsNoAttack, $01
0008CBEE E1FF                       	smpsAlterNote       $FF
0008CBF0 E701                       	dc.b	smpsNoAttack, $01
0008CBF2 E103                       	smpsAlterNote       $03
0008CBF4 E701                       	dc.b	smpsNoAttack, $01
0008CBF6 E109                       	smpsAlterNote       $09
0008CBF8 E701                       	dc.b	smpsNoAttack, $01
0008CBFA E10A                       	smpsAlterNote       $0A
0008CBFC E701                       	dc.b	smpsNoAttack, $01
0008CBFE E106                       	smpsAlterNote       $06
0008CC00 E701                       	dc.b	smpsNoAttack, $01
0008CC02 E100                       	smpsAlterNote       $00
0008CC04 E701                       	dc.b	smpsNoAttack, $01
0008CC06 E10C                       	smpsAlterNote       $0C
0008CC08 C703 8001                  	dc.b	nBb5, $03, nRst, $01
0008CC0C E10B                       	smpsAlterNote       $0B
0008CC0E C603                       	dc.b	nA5, $03
0008CC10 E109                       	smpsAlterNote       $09
0008CC12 C403 8001                  	dc.b	nG5, $03, nRst, $01
0008CC16 E10B                       	smpsAlterNote       $0B
0008CC18 C60D                       	dc.b	nA5, $0D
0008CC1A E105                       	smpsAlterNote       $05
0008CC1C E701                       	dc.b	smpsNoAttack, $01
0008CC1E E104                       	smpsAlterNote       $04
0008CC20 E701                       	dc.b	smpsNoAttack, $01
0008CC22 E108                       	smpsAlterNote       $08
0008CC24 E701                       	dc.b	smpsNoAttack, $01
0008CC26 E10E                       	smpsAlterNote       $0E
0008CC28 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008CC2C E10B                       	smpsAlterNote       $0B
0008CC2E E701                       	dc.b	smpsNoAttack, $01
0008CC30 E105                       	smpsAlterNote       $05
0008CC32 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008CC36 E10B                       	smpsAlterNote       $0B
0008CC38 E701                       	dc.b	smpsNoAttack, $01
0008CC3A E10E                       	smpsAlterNote       $0E
0008CC3C E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008CC40 E108                       	smpsAlterNote       $08
0008CC42 E701                       	dc.b	smpsNoAttack, $01
0008CC44 E104                       	smpsAlterNote       $04
0008CC46 E701                       	dc.b	smpsNoAttack, $01
0008CC48 E105                       	smpsAlterNote       $05
0008CC4A E701                       	dc.b	smpsNoAttack, $01
0008CC4C E10B                       	smpsAlterNote       $0B
0008CC4E E701                       	dc.b	smpsNoAttack, $01
0008CC50 E10F                       	smpsAlterNote       $0F
0008CC52 E701                       	dc.b	smpsNoAttack, $01
0008CC54 E10B                       	smpsAlterNote       $0B
0008CC56 E701                       	dc.b	smpsNoAttack, $01
0008CC58 E108                       	smpsAlterNote       $08
0008CC5A E701                       	dc.b	smpsNoAttack, $01
0008CC5C E104                       	smpsAlterNote       $04
0008CC5E E701                       	dc.b	smpsNoAttack, $01
0008CC60 E108                       	smpsAlterNote       $08
0008CC62 E701                       	dc.b	smpsNoAttack, $01
0008CC64 E10E                       	smpsAlterNote       $0E
0008CC66 E701                       	dc.b	smpsNoAttack, $01
0008CC68 E10F                       	smpsAlterNote       $0F
0008CC6A E701                       	dc.b	smpsNoAttack, $01
0008CC6C E10B                       	smpsAlterNote       $0B
0008CC6E E701                       	dc.b	smpsNoAttack, $01
0008CC70 E105                       	smpsAlterNote       $05
0008CC72 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008CC76 E108                       	smpsAlterNote       $08
0008CC78 E701                       	dc.b	smpsNoAttack, $01
0008CC7A E10E                       	smpsAlterNote       $0E
0008CC7C E701                       	dc.b	smpsNoAttack, $01
0008CC7E E10F                       	smpsAlterNote       $0F
0008CC80 800F                       	dc.b	nRst, $0F
0008CC82 E107                       	smpsAlterNote       $07
0008CC84 BF02 8001                  	dc.b	nD5, $02, nRst, $01
0008CC88 E108                       	smpsAlterNote       $08
0008CC8A C103                       	dc.b	nE5, $03
0008CC8C E109                       	smpsAlterNote       $09
0008CC8E C203 8001 C403             	dc.b	nF5, $03, nRst, $01, nG5, $03
0008CC94 E10B                       	smpsAlterNote       $0B
0008CC96 C606 8001                  	dc.b	nA5, $06, nRst, $01
0008CC9A E107                       	smpsAlterNote       $07
0008CC9C BF03                       	dc.b	nD5, $03
0008CC9E E106                       	smpsAlterNote       $06
0008CCA0 C90E                       	dc.b	nC6, $0E
0008CCA2 E107                       	smpsAlterNote       $07
0008CCA4 CB03 8001                  	dc.b	nD6, $03, nRst, $01
0008CCA8 E10C                       	smpsAlterNote       $0C
0008CCAA C704                       	dc.b	nBb5, $04
0008CCAC E10B                       	smpsAlterNote       $0B
0008CCAE C604 8001                  	dc.b	nA5, $04, nRst, $01
0008CCB2 E109                       	smpsAlterNote       $09
0008CCB4 C404                       	dc.b	nG5, $04
0008CCB6 E10B                       	smpsAlterNote       $0B
0008CCB8 C60D                       	dc.b	nA5, $0D
0008CCBA E108                       	smpsAlterNote       $08
0008CCBC E701                       	dc.b	smpsNoAttack, $01
0008CCBE E105                       	smpsAlterNote       $05
0008CCC0 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008CCC4 E10B                       	smpsAlterNote       $0B
0008CCC6 E701                       	dc.b	smpsNoAttack, $01
0008CCC8 E10F                       	smpsAlterNote       $0F
0008CCCA E701                       	dc.b	smpsNoAttack, $01
0008CCCC E10E                       	smpsAlterNote       $0E
0008CCCE E701                       	dc.b	smpsNoAttack, $01
0008CCD0 E108                       	smpsAlterNote       $08
0008CCD2 E701                       	dc.b	smpsNoAttack, $01
0008CCD4 E104                       	smpsAlterNote       $04
0008CCD6 E701                       	dc.b	smpsNoAttack, $01
0008CCD8 E108                       	smpsAlterNote       $08
0008CCDA E701                       	dc.b	smpsNoAttack, $01
0008CCDC E10B                       	smpsAlterNote       $0B
0008CCDE E701                       	dc.b	smpsNoAttack, $01
0008CCE0 E10F                       	smpsAlterNote       $0F
0008CCE2 E701                       	dc.b	smpsNoAttack, $01
0008CCE4 E10B                       	smpsAlterNote       $0B
0008CCE6 E701                       	dc.b	smpsNoAttack, $01
0008CCE8 E105                       	smpsAlterNote       $05
0008CCEA E701                       	dc.b	smpsNoAttack, $01
0008CCEC E104                       	smpsAlterNote       $04
0008CCEE E701                       	dc.b	smpsNoAttack, $01
0008CCF0 E108                       	smpsAlterNote       $08
0008CCF2 E701                       	dc.b	smpsNoAttack, $01
0008CCF4 E10E                       	smpsAlterNote       $0E
0008CCF6 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008CCFA E10B                       	smpsAlterNote       $0B
0008CCFC E701                       	dc.b	smpsNoAttack, $01
0008CCFE E105                       	smpsAlterNote       $05
0008CD00 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008CD04 E10B                       	smpsAlterNote       $0B
0008CD06 E701                       	dc.b	smpsNoAttack, $01
0008CD08 E10E                       	smpsAlterNote       $0E
0008CD0A E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008CD0E E108                       	smpsAlterNote       $08
0008CD10 E701                       	dc.b	smpsNoAttack, $01
0008CD12 E105                       	smpsAlterNote       $05
0008CD14 8001                       	dc.b	nRst, $01
0008CD16 E109                       	smpsAlterNote       $09
0008CD18 C402                       	dc.b	nG5, $02
0008CD1A E10B                       	smpsAlterNote       $0B
0008CD1C E7C5 01C6 0EC6 0480 01     	dc.b	smpsNoAttack, nAb5, $01, nA5, $0E, nA5, $04, nRst, $01
0008CD25 E109                       	smpsAlterNote       $09
0008CD27 C404                       	dc.b	nG5, $04
0008CD29 E10B                       	smpsAlterNote       $0B
0008CD2B C604 8001                  	dc.b	nA5, $04, nRst, $01
0008CD2F E107                       	smpsAlterNote       $07
0008CD31 BF0D                       	dc.b	nD5, $0D
0008CD33 E101                       	smpsAlterNote       $01
0008CD35 E701                       	dc.b	smpsNoAttack, $01
0008CD37 E100                       	smpsAlterNote       $00
0008CD39 E701                       	dc.b	smpsNoAttack, $01
0008CD3B E104                       	smpsAlterNote       $04
0008CD3D E701                       	dc.b	smpsNoAttack, $01
0008CD3F E10A                       	smpsAlterNote       $0A
0008CD41 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008CD45 E107                       	smpsAlterNote       $07
0008CD47 E701                       	dc.b	smpsNoAttack, $01
0008CD49 E101                       	smpsAlterNote       $01
0008CD4B E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008CD4F E107                       	smpsAlterNote       $07
0008CD51 E701                       	dc.b	smpsNoAttack, $01
0008CD53 E10A                       	smpsAlterNote       $0A
0008CD55 E701                       	dc.b	smpsNoAttack, $01
0008CD57 E10B                       	smpsAlterNote       $0B
0008CD59 8001                       	dc.b	nRst, $01
0008CD5B E108                       	smpsAlterNote       $08
0008CD5D C101                       	dc.b	nE5, $01
0008CD5F E109                       	smpsAlterNote       $09
0008CD61 E7C2 01C4 01               	dc.b	smpsNoAttack, nF5, $01, nG5, $01
0008CD66 E10B                       	smpsAlterNote       $0B
0008CD68 C606 8001 C606 8001        	dc.b	nA5, $06, nRst, $01, nA5, $06, nRst, $01
0008CD70 E108                       	smpsAlterNote       $08
0008CD72 CD06 8001                  	dc.b	nE6, $06, nRst, $01
0008CD76 E109                       	smpsAlterNote       $09
0008CD78 CE06 8001                  	dc.b	nF6, $06, nRst, $01
0008CD7C E108                       	smpsAlterNote       $08
0008CD7E CD02 8001                  	dc.b	nE6, $02, nRst, $01
0008CD82 E106                       	smpsAlterNote       $06
0008CD84 C903                       	dc.b	nC6, $03
0008CD86 E109                       	smpsAlterNote       $09
0008CD88 C403 8001                  	dc.b	nG5, $03, nRst, $01
0008CD8C E10C                       	smpsAlterNote       $0C
0008CD8E C70D                       	dc.b	nBb5, $0D
0008CD90 E109                       	smpsAlterNote       $09
0008CD92 E701                       	dc.b	smpsNoAttack, $01
0008CD94 E105                       	smpsAlterNote       $05
0008CD96 E701                       	dc.b	smpsNoAttack, $01
0008CD98 E109                       	smpsAlterNote       $09
0008CD9A E701                       	dc.b	smpsNoAttack, $01
0008CD9C E10F                       	smpsAlterNote       $0F
0008CD9E E701                       	dc.b	smpsNoAttack, $01
0008CDA0 E110                       	smpsAlterNote       $10
0008CDA2 E701                       	dc.b	smpsNoAttack, $01
0008CDA4 E10C                       	smpsAlterNote       $0C
0008CDA6 E701                       	dc.b	smpsNoAttack, $01
0008CDA8 E106                       	smpsAlterNote       $06
0008CDAA E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008CDAE E109                       	smpsAlterNote       $09
0008CDB0 E701                       	dc.b	smpsNoAttack, $01
0008CDB2 E10F                       	smpsAlterNote       $0F
0008CDB4 E701                       	dc.b	smpsNoAttack, $01
0008CDB6 E110                       	smpsAlterNote       $10
0008CDB8 8001                       	dc.b	nRst, $01
0008CDBA E10B                       	smpsAlterNote       $0B
0008CDBC C606 8001 C50D             	dc.b	nA5, $06, nRst, $01, nAb5, $0D
0008CDC2 E105                       	smpsAlterNote       $05
0008CDC4 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008CDC8 E108                       	smpsAlterNote       $08
0008CDCA E701                       	dc.b	smpsNoAttack, $01
0008CDCC E10E                       	smpsAlterNote       $0E
0008CDCE E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008CDD2 E108                       	smpsAlterNote       $08
0008CDD4 E701                       	dc.b	smpsNoAttack, $01
0008CDD6 E105                       	smpsAlterNote       $05
0008CDD8 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008CDDC E10B                       	smpsAlterNote       $0B
0008CDDE E701                       	dc.b	smpsNoAttack, $01
0008CDE0 E10F                       	smpsAlterNote       $0F
0008CDE2 E701                       	dc.b	smpsNoAttack, $01
0008CDE4 E10E                       	smpsAlterNote       $0E
0008CDE6 E701                       	dc.b	smpsNoAttack, $01
0008CDE8 E108                       	smpsAlterNote       $08
0008CDEA E701                       	dc.b	smpsNoAttack, $01
0008CDEC E104                       	smpsAlterNote       $04
0008CDEE E701                       	dc.b	smpsNoAttack, $01
0008CDF0 E108                       	smpsAlterNote       $08
0008CDF2 E701                       	dc.b	smpsNoAttack, $01
0008CDF4 E10B                       	smpsAlterNote       $0B
0008CDF6 E701                       	dc.b	smpsNoAttack, $01
0008CDF8 E10F                       	smpsAlterNote       $0F
0008CDFA E701                       	dc.b	smpsNoAttack, $01
0008CDFC E10B                       	smpsAlterNote       $0B
0008CDFE E701                       	dc.b	smpsNoAttack, $01
0008CE00 E105                       	smpsAlterNote       $05
0008CE02 E701                       	dc.b	smpsNoAttack, $01
0008CE04 E104                       	smpsAlterNote       $04
0008CE06 E701                       	dc.b	smpsNoAttack, $01
0008CE08 E108                       	smpsAlterNote       $08
0008CE0A E701                       	dc.b	smpsNoAttack, $01
0008CE0C E10E                       	smpsAlterNote       $0E
0008CE0E E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008CE12 E10B                       	smpsAlterNote       $0B
0008CE14 E701                       	dc.b	smpsNoAttack, $01
0008CE16 E105                       	smpsAlterNote       $05
0008CE18 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008CE1C E10B                       	smpsAlterNote       $0B
0008CE1E E701                       	dc.b	smpsNoAttack, $01
0008CE20 E10E                       	smpsAlterNote       $0E
0008CE22 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008CE26 E108                       	smpsAlterNote       $08
0008CE28 E701                       	dc.b	smpsNoAttack, $01
0008CE2A E104                       	smpsAlterNote       $04
0008CE2C E701                       	dc.b	smpsNoAttack, $01
0008CE2E E105                       	smpsAlterNote       $05
0008CE30 E701                       	dc.b	smpsNoAttack, $01
0008CE32 E10B                       	smpsAlterNote       $0B
0008CE34 E701                       	dc.b	smpsNoAttack, $01
0008CE36 E10F                       	smpsAlterNote       $0F
0008CE38 E701                       	dc.b	smpsNoAttack, $01
0008CE3A E10B                       	smpsAlterNote       $0B
0008CE3C E701                       	dc.b	smpsNoAttack, $01
0008CE3E E108                       	smpsAlterNote       $08
0008CE40 E701                       	dc.b	smpsNoAttack, $01
0008CE42 E104                       	smpsAlterNote       $04
0008CE44 E701                       	dc.b	smpsNoAttack, $01
0008CE46 E108                       	smpsAlterNote       $08
0008CE48 E701                       	dc.b	smpsNoAttack, $01
0008CE4A E10E                       	smpsAlterNote       $0E
0008CE4C E701                       	dc.b	smpsNoAttack, $01
0008CE4E E10F                       	smpsAlterNote       $0F
0008CE50 E701                       	dc.b	smpsNoAttack, $01
0008CE52 E10B                       	smpsAlterNote       $0B
0008CE54 E701                       	dc.b	smpsNoAttack, $01
0008CE56 E105                       	smpsAlterNote       $05
0008CE58 E701                       	dc.b	smpsNoAttack, $01
0008CE5A E10B                       	smpsAlterNote       $0B
0008CE5C C60E                       	dc.b	nA5, $0E
0008CE5E E105                       	smpsAlterNote       $05
0008CE60 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008CE64 E10B                       	smpsAlterNote       $0B
0008CE66 E701                       	dc.b	smpsNoAttack, $01
0008CE68 E10E                       	smpsAlterNote       $0E
0008CE6A E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008CE6E E108                       	smpsAlterNote       $08
0008CE70 E701                       	dc.b	smpsNoAttack, $01
0008CE72 E104                       	smpsAlterNote       $04
0008CE74 E701                       	dc.b	smpsNoAttack, $01
0008CE76 E105                       	smpsAlterNote       $05
0008CE78 E701                       	dc.b	smpsNoAttack, $01
0008CE7A E10B                       	smpsAlterNote       $0B
0008CE7C E701                       	dc.b	smpsNoAttack, $01
0008CE7E E10F                       	smpsAlterNote       $0F
0008CE80 E701                       	dc.b	smpsNoAttack, $01
0008CE82 E10B                       	smpsAlterNote       $0B
0008CE84 E701                       	dc.b	smpsNoAttack, $01
0008CE86 E108                       	smpsAlterNote       $08
0008CE88 E701                       	dc.b	smpsNoAttack, $01
0008CE8A E104                       	smpsAlterNote       $04
0008CE8C E701                       	dc.b	smpsNoAttack, $01
0008CE8E E108                       	smpsAlterNote       $08
0008CE90 E701                       	dc.b	smpsNoAttack, $01
0008CE92 E10E                       	smpsAlterNote       $0E
0008CE94 E701                       	dc.b	smpsNoAttack, $01
0008CE96 E10F                       	smpsAlterNote       $0F
0008CE98 E701                       	dc.b	smpsNoAttack, $01
0008CE9A E10B                       	smpsAlterNote       $0B
0008CE9C E701                       	dc.b	smpsNoAttack, $01
0008CE9E E105                       	smpsAlterNote       $05
0008CEA0 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008CEA4 E108                       	smpsAlterNote       $08
0008CEA6 E701                       	dc.b	smpsNoAttack, $01
0008CEA8 E10E                       	smpsAlterNote       $0E
0008CEAA E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008CEAE E108                       	smpsAlterNote       $08
0008CEB0 E701                       	dc.b	smpsNoAttack, $01
0008CEB2 E105                       	smpsAlterNote       $05
0008CEB4 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008CEB8 E10B                       	smpsAlterNote       $0B
0008CEBA E701                       	dc.b	smpsNoAttack, $01
0008CEBC E10F                       	smpsAlterNote       $0F
0008CEBE E701                       	dc.b	smpsNoAttack, $01
0008CEC0 E10E                       	smpsAlterNote       $0E
0008CEC2 E701                       	dc.b	smpsNoAttack, $01
0008CEC4 E108                       	smpsAlterNote       $08
0008CEC6 E701                       	dc.b	smpsNoAttack, $01
0008CEC8 E104                       	smpsAlterNote       $04
0008CECA E701                       	dc.b	smpsNoAttack, $01
0008CECC E108                       	smpsAlterNote       $08
0008CECE E701                       	dc.b	smpsNoAttack, $01
0008CED0 E10E                       	smpsAlterNote       $0E
0008CED2 E701                       	dc.b	smpsNoAttack, $01
0008CED4 E10F                       	smpsAlterNote       $0F
0008CED6 E701                       	dc.b	smpsNoAttack, $01
0008CED8 E10B                       	smpsAlterNote       $0B
0008CEDA E701                       	dc.b	smpsNoAttack, $01
0008CEDC E105                       	smpsAlterNote       $05
0008CEDE E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008CEE2 E108                       	smpsAlterNote       $08
0008CEE4 E701                       	dc.b	smpsNoAttack, $01
0008CEE6 E10E                       	smpsAlterNote       $0E
0008CEE8 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008CEEC E108                       	smpsAlterNote       $08
0008CEEE E701                       	dc.b	smpsNoAttack, $01
0008CEF0 E105                       	smpsAlterNote       $05
0008CEF2 E701                       	dc.b	smpsNoAttack, $01
0008CEF6 E10B                       	smpsAlterNote       $0B
0008CEF8 E6FD                       	smpsAlterVol        $FD
0008CEFA C604 8001                  	dc.b	nA5, $04, nRst, $01
0008CEFE E109                       	smpsAlterNote       $09
0008CF00 C404                       	dc.b	nG5, $04
0008CF02 E10B                       	smpsAlterNote       $0B
0008CF04 C604 8001                  	dc.b	nA5, $04, nRst, $01
0008CF08 E107                       	smpsAlterNote       $07
0008CF0A BF0A BF03 8001             	dc.b	nD5, $0A, nD5, $03, nRst, $01
0008CF10 E10B                       	smpsAlterNote       $0B
0008CF12 C604                       	dc.b	nA5, $04
0008CF14 E109                       	smpsAlterNote       $09
0008CF16 C404 8001                  	dc.b	nG5, $04, nRst, $01
0008CF1A E10B                       	smpsAlterNote       $0B
0008CF1C C604                       	dc.b	nA5, $04
0008CF1E E108                       	smpsAlterNote       $08
0008CF20 C10A 8001 C102 8001        	dc.b	nE5, $0A, nRst, $01, nE5, $02, nRst, $01
0008CF28 E106                       	smpsAlterNote       $06
0008CF2A C904 8001                  	dc.b	nC6, $04, nRst, $01
0008CF2E E10C                       	smpsAlterNote       $0C
0008CF30 C704                       	dc.b	nBb5, $04
0008CF32 E10B                       	smpsAlterNote       $0B
0008CF34 C604 8001                  	dc.b	nA5, $04, nRst, $01
0008CF38 E109                       	smpsAlterNote       $09
0008CF3A C403 C203 8001 C402 8001   	dc.b	nG5, $03, nF5, $03, nRst, $01, nG5, $02, nRst, $01
0008CF44 E10B                       	smpsAlterNote       $0B
0008CF46 C60D                       	dc.b	nA5, $0D
0008CF48 E108                       	smpsAlterNote       $08
0008CF4A E701                       	dc.b	smpsNoAttack, $01
0008CF4C E104                       	smpsAlterNote       $04
0008CF4E E701                       	dc.b	smpsNoAttack, $01
0008CF50 E108                       	smpsAlterNote       $08
0008CF52 E701                       	dc.b	smpsNoAttack, $01
0008CF54 E10E                       	smpsAlterNote       $0E
0008CF56 E701                       	dc.b	smpsNoAttack, $01
0008CF58 E10F                       	smpsAlterNote       $0F
0008CF5A E701                       	dc.b	smpsNoAttack, $01
0008CF5C E10B                       	smpsAlterNote       $0B
0008CF5E E701                       	dc.b	smpsNoAttack, $01
0008CF60 E105                       	smpsAlterNote       $05
0008CF62 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008CF66 E108                       	smpsAlterNote       $08
0008CF68 E701                       	dc.b	smpsNoAttack, $01
0008CF6A E10E                       	smpsAlterNote       $0E
0008CF6C E701                       	dc.b	smpsNoAttack, $01
0008CF6E E10F                       	smpsAlterNote       $0F
0008CF70 8001                       	dc.b	nRst, $01
0008CF72 E109                       	smpsAlterNote       $09
0008CF74 C403 C203 8001             	dc.b	nG5, $03, nF5, $03, nRst, $01
0008CF7A E108                       	smpsAlterNote       $08
0008CF7C C10D                       	dc.b	nE5, $0D
0008CF7E E102                       	smpsAlterNote       $02
0008CF80 E701                       	dc.b	smpsNoAttack, $01
0008CF82 E101                       	smpsAlterNote       $01
0008CF84 E701                       	dc.b	smpsNoAttack, $01
0008CF86 E105                       	smpsAlterNote       $05
0008CF88 E701                       	dc.b	smpsNoAttack, $01
0008CF8A E10B                       	smpsAlterNote       $0B
0008CF8C E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008CF90 E108                       	smpsAlterNote       $08
0008CF92 E701                       	dc.b	smpsNoAttack, $01
0008CF94 E102                       	smpsAlterNote       $02
0008CF96 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008CF9A E108                       	smpsAlterNote       $08
0008CF9C E701                       	dc.b	smpsNoAttack, $01
0008CF9E E10B                       	smpsAlterNote       $0B
0008CFA0 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008CFA4 E105                       	smpsAlterNote       $05
0008CFA6 E701                       	dc.b	smpsNoAttack, $01
0008CFA8 E101                       	smpsAlterNote       $01
0008CFAA E701                       	dc.b	smpsNoAttack, $01
0008CFAC E102                       	smpsAlterNote       $02
0008CFAE E701                       	dc.b	smpsNoAttack, $01
0008CFB0 E108                       	smpsAlterNote       $08
0008CFB2 E701                       	dc.b	smpsNoAttack, $01
0008CFB4 E10C                       	smpsAlterNote       $0C
0008CFB6 E701                       	dc.b	smpsNoAttack, $01
0008CFB8 E108                       	smpsAlterNote       $08
0008CFBA E701                       	dc.b	smpsNoAttack, $01
0008CFBC E105                       	smpsAlterNote       $05
0008CFBE E701                       	dc.b	smpsNoAttack, $01
0008CFC0 E101                       	smpsAlterNote       $01
0008CFC2 E701                       	dc.b	smpsNoAttack, $01
0008CFC4 E105                       	smpsAlterNote       $05
0008CFC6 E701                       	dc.b	smpsNoAttack, $01
0008CFC8 E10B                       	smpsAlterNote       $0B
0008CFCA E701                       	dc.b	smpsNoAttack, $01
0008CFCC E10C                       	smpsAlterNote       $0C
0008CFCE E701                       	dc.b	smpsNoAttack, $01
0008CFD0 E108                       	smpsAlterNote       $08
0008CFD2 E701                       	dc.b	smpsNoAttack, $01
0008CFD4 E102                       	smpsAlterNote       $02
0008CFD6 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008CFDA E105                       	smpsAlterNote       $05
0008CFDC E701                       	dc.b	smpsNoAttack, $01
0008CFDE E10B                       	smpsAlterNote       $0B
0008CFE0 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008CFE4 E105                       	smpsAlterNote       $05
0008CFE6 E701                       	dc.b	smpsNoAttack, $01
0008CFE8 E102                       	smpsAlterNote       $02
0008CFEA E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008CFEE E108                       	smpsAlterNote       $08
0008CFF0 E701                       	dc.b	smpsNoAttack, $01
0008CFF2 E10C                       	smpsAlterNote       $0C
0008CFF4 E701                       	dc.b	smpsNoAttack, $01
0008CFF6 E10B                       	smpsAlterNote       $0B
0008CFF8 E701                       	dc.b	smpsNoAttack, $01
0008CFFA E105                       	smpsAlterNote       $05
0008CFFC E701                       	dc.b	smpsNoAttack, $01
0008CFFE E101                       	smpsAlterNote       $01
0008D000 E701                       	dc.b	smpsNoAttack, $01
0008D002 E105                       	smpsAlterNote       $05
0008D004 E701                       	dc.b	smpsNoAttack, $01
0008D006 E108                       	smpsAlterNote       $08
0008D008 E701                       	dc.b	smpsNoAttack, $01
0008D00A E10C                       	smpsAlterNote       $0C
0008D00C E701                       	dc.b	smpsNoAttack, $01
0008D00E E108                       	smpsAlterNote       $08
0008D010 E701                       	dc.b	smpsNoAttack, $01
0008D012 E102                       	smpsAlterNote       $02
0008D014 E701                       	dc.b	smpsNoAttack, $01
0008D016 E101                       	smpsAlterNote       $01
0008D018 E701                       	dc.b	smpsNoAttack, $01
0008D01A E105                       	smpsAlterNote       $05
0008D01C E701                       	dc.b	smpsNoAttack, $01
0008D01E E10B                       	smpsAlterNote       $0B
0008D020 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008D024 E108                       	smpsAlterNote       $08
0008D026 E701                       	dc.b	smpsNoAttack, $01
0008D028 E102                       	smpsAlterNote       $02
0008D02A E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008D02E E108                       	smpsAlterNote       $08
0008D030 E701                       	dc.b	smpsNoAttack, $01
0008D032 E10B                       	smpsAlterNote       $0B
0008D034 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008D038 E105                       	smpsAlterNote       $05
0008D03A E701                       	dc.b	smpsNoAttack, $01
0008D03C E101                       	smpsAlterNote       $01
0008D03E E701                       	dc.b	smpsNoAttack, $01
0008D040 E102                       	smpsAlterNote       $02
0008D042 E701                       	dc.b	smpsNoAttack, $01
0008D044 E108                       	smpsAlterNote       $08
0008D046 E701                       	dc.b	smpsNoAttack, $01
0008D048 E10C                       	smpsAlterNote       $0C
0008D04A E701                       	dc.b	smpsNoAttack, $01
0008D04C E108                       	smpsAlterNote       $08
0008D04E E701                       	dc.b	smpsNoAttack, $01
0008D050 E105                       	smpsAlterNote       $05
0008D052 E701                       	dc.b	smpsNoAttack, $01
0008D054 E101                       	smpsAlterNote       $01
0008D056 E701                       	dc.b	smpsNoAttack, $01
0008D058 E105                       	smpsAlterNote       $05
0008D05A E701                       	dc.b	smpsNoAttack, $01
0008D05C E10B                       	smpsAlterNote       $0B
0008D05E E701                       	dc.b	smpsNoAttack, $01
0008D060 E10C                       	smpsAlterNote       $0C
0008D062 E701                       	dc.b	smpsNoAttack, $01
0008D064 E108                       	smpsAlterNote       $08
0008D066 E701                       	dc.b	smpsNoAttack, $01
0008D068 E102                       	smpsAlterNote       $02
0008D06A E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008D06E E105                       	smpsAlterNote       $05
0008D070 E701                       	dc.b	smpsNoAttack, $01
0008D072 E10B                       	smpsAlterNote       $0B
0008D074 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008D078 E105                       	smpsAlterNote       $05
0008D07A E701                       	dc.b	smpsNoAttack, $01
0008D07C E101                       	smpsAlterNote       $01
0008D07E E701                       	dc.b	smpsNoAttack, $01
0008D080 E102                       	smpsAlterNote       $02
0008D082 E701                       	dc.b	smpsNoAttack, $01
0008D084 E108                       	smpsAlterNote       $08
0008D086 E701                       	dc.b	smpsNoAttack, $01
0008D088 E10C                       	smpsAlterNote       $0C
0008D08A E701                       	dc.b	smpsNoAttack, $01
0008D08C E108                       	smpsAlterNote       $08
0008D08E E701                       	dc.b	smpsNoAttack, $01
0008D090 E105                       	smpsAlterNote       $05
0008D092 E701                       	dc.b	smpsNoAttack, $01
0008D094 E101                       	smpsAlterNote       $01
0008D096 E701                       	dc.b	smpsNoAttack, $01
0008D098 E105                       	smpsAlterNote       $05
0008D09A E701                       	dc.b	smpsNoAttack, $01
0008D09C E10B                       	smpsAlterNote       $0B
0008D09E E701                       	dc.b	smpsNoAttack, $01
0008D0A0 E10C                       	smpsAlterNote       $0C
0008D0A2 E701                       	dc.b	smpsNoAttack, $01
0008D0A4 E108                       	smpsAlterNote       $08
0008D0A6 E701                       	dc.b	smpsNoAttack, $01
0008D0A8 E102                       	smpsAlterNote       $02
0008D0AA E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008D0AE E105                       	smpsAlterNote       $05
0008D0B0 E701                       	dc.b	smpsNoAttack, $01
0008D0B2 E10B                       	smpsAlterNote       $0B
0008D0B4 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008D0B8 E105                       	smpsAlterNote       $05
0008D0BA E701                       	dc.b	smpsNoAttack, $01
0008D0BC E102                       	smpsAlterNote       $02
0008D0BE E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008D0C2 E108                       	smpsAlterNote       $08
0008D0C4 E701                       	dc.b	smpsNoAttack, $01
0008D0C6 E10C                       	smpsAlterNote       $0C
0008D0C8 E701                       	dc.b	smpsNoAttack, $01
0008D0CA E10B                       	smpsAlterNote       $0B
0008D0CC E701                       	dc.b	smpsNoAttack, $01
0008D0CE E105                       	smpsAlterNote       $05
0008D0D0 E701                       	dc.b	smpsNoAttack, $01
0008D0D2 E101                       	smpsAlterNote       $01
0008D0D4 E701                       	dc.b	smpsNoAttack, $01
0008D0D6 E105                       	smpsAlterNote       $05
0008D0D8 E701                       	dc.b	smpsNoAttack, $01
0008D0DA E108                       	smpsAlterNote       $08
0008D0DC E701                       	dc.b	smpsNoAttack, $01
0008D0DE E10C                       	smpsAlterNote       $0C
0008D0E0 E701                       	dc.b	smpsNoAttack, $01
0008D0E4 E10B                       	smpsAlterNote       $0B
0008D0E6 C604 8001                  	dc.b	nA5, $04, nRst, $01
0008D0EA E109                       	smpsAlterNote       $09
0008D0EC C404                       	dc.b	nG5, $04
0008D0EE E10B                       	smpsAlterNote       $0B
0008D0F0 C604 8001                  	dc.b	nA5, $04, nRst, $01
0008D0F4 E107                       	smpsAlterNote       $07
0008D0F6 BF0A BF03 8001             	dc.b	nD5, $0A, nD5, $03, nRst, $01
0008D0FC E10B                       	smpsAlterNote       $0B
0008D0FE C604                       	dc.b	nA5, $04
0008D100 E109                       	smpsAlterNote       $09
0008D102 C404 8001                  	dc.b	nG5, $04, nRst, $01
0008D106 E10B                       	smpsAlterNote       $0B
0008D108 C604                       	dc.b	nA5, $04
0008D10A E108                       	smpsAlterNote       $08
0008D10C C10A 8001 C103             	dc.b	nE5, $0A, nRst, $01, nE5, $03
0008D112 E106                       	smpsAlterNote       $06
0008D114 C904 8001                  	dc.b	nC6, $04, nRst, $01
0008D118 E10C                       	smpsAlterNote       $0C
0008D11A C704                       	dc.b	nBb5, $04
0008D11C E10B                       	smpsAlterNote       $0B
0008D11E C604 8001                  	dc.b	nA5, $04, nRst, $01
0008D122 E109                       	smpsAlterNote       $09
0008D124 C403 C203 8001 C402 8001   	dc.b	nG5, $03, nF5, $03, nRst, $01, nG5, $02, nRst, $01
0008D12E E10B                       	smpsAlterNote       $0B
0008D130 C60D                       	dc.b	nA5, $0D
0008D132 E108                       	smpsAlterNote       $08
0008D134 E701                       	dc.b	smpsNoAttack, $01
0008D136 E104                       	smpsAlterNote       $04
0008D138 E701                       	dc.b	smpsNoAttack, $01
0008D13A E108                       	smpsAlterNote       $08
0008D13C E701                       	dc.b	smpsNoAttack, $01
0008D13E E10B                       	smpsAlterNote       $0B
0008D140 E701                       	dc.b	smpsNoAttack, $01
0008D142 E10F                       	smpsAlterNote       $0F
0008D144 E701                       	dc.b	smpsNoAttack, $01
0008D146 E10B                       	smpsAlterNote       $0B
0008D148 E701                       	dc.b	smpsNoAttack, $01
0008D14A E105                       	smpsAlterNote       $05
0008D14C E701                       	dc.b	smpsNoAttack, $01
0008D14E E104                       	smpsAlterNote       $04
0008D150 E701                       	dc.b	smpsNoAttack, $01
0008D152 E108                       	smpsAlterNote       $08
0008D154 E701                       	dc.b	smpsNoAttack, $01
0008D156 E10E                       	smpsAlterNote       $0E
0008D158 E701                       	dc.b	smpsNoAttack, $01
0008D15A E10F                       	smpsAlterNote       $0F
0008D15C 8001                       	dc.b	nRst, $01
0008D15E E109                       	smpsAlterNote       $09
0008D160 C403 C203 8001             	dc.b	nG5, $03, nF5, $03, nRst, $01
0008D166 E108                       	smpsAlterNote       $08
0008D168 C10D                       	dc.b	nE5, $0D
0008D16A E105                       	smpsAlterNote       $05
0008D16C E701                       	dc.b	smpsNoAttack, $01
0008D16E E101                       	smpsAlterNote       $01
0008D170 E701                       	dc.b	smpsNoAttack, $01
0008D172 E105                       	smpsAlterNote       $05
0008D174 E701                       	dc.b	smpsNoAttack, $01
0008D176 E10B                       	smpsAlterNote       $0B
0008D178 E701                       	dc.b	smpsNoAttack, $01
0008D17A E10C                       	smpsAlterNote       $0C
0008D17C E701                       	dc.b	smpsNoAttack, $01
0008D17E E108                       	smpsAlterNote       $08
0008D180 E701                       	dc.b	smpsNoAttack, $01
0008D182 E102                       	smpsAlterNote       $02
0008D184 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008D188 E105                       	smpsAlterNote       $05
0008D18A E701                       	dc.b	smpsNoAttack, $01
0008D18C E10B                       	smpsAlterNote       $0B
0008D18E E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008D192 E105                       	smpsAlterNote       $05
0008D194 E701                       	dc.b	smpsNoAttack, $01
0008D196 E102                       	smpsAlterNote       $02
0008D198 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008D19C E108                       	smpsAlterNote       $08
0008D19E E701                       	dc.b	smpsNoAttack, $01
0008D1A0 E10C                       	smpsAlterNote       $0C
0008D1A2 E701                       	dc.b	smpsNoAttack, $01
0008D1A4 E10B                       	smpsAlterNote       $0B
0008D1A6 E701                       	dc.b	smpsNoAttack, $01
0008D1A8 E105                       	smpsAlterNote       $05
0008D1AA E701                       	dc.b	smpsNoAttack, $01
0008D1AC E101                       	smpsAlterNote       $01
0008D1AE E701                       	dc.b	smpsNoAttack, $01
0008D1B0 E105                       	smpsAlterNote       $05
0008D1B2 E701                       	dc.b	smpsNoAttack, $01
0008D1B4 E108                       	smpsAlterNote       $08
0008D1B6 E701                       	dc.b	smpsNoAttack, $01
0008D1B8 E10C                       	smpsAlterNote       $0C
0008D1BA E701                       	dc.b	smpsNoAttack, $01
0008D1BC E108                       	smpsAlterNote       $08
0008D1BE E701                       	dc.b	smpsNoAttack, $01
0008D1C0 E102                       	smpsAlterNote       $02
0008D1C2 E701                       	dc.b	smpsNoAttack, $01
0008D1C4 E101                       	smpsAlterNote       $01
0008D1C6 E701                       	dc.b	smpsNoAttack, $01
0008D1C8 E105                       	smpsAlterNote       $05
0008D1CA E701                       	dc.b	smpsNoAttack, $01
0008D1CC E10B                       	smpsAlterNote       $0B
0008D1CE E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008D1D2 E108                       	smpsAlterNote       $08
0008D1D4 E701                       	dc.b	smpsNoAttack, $01
0008D1D6 E102                       	smpsAlterNote       $02
0008D1D8 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008D1DC E108                       	smpsAlterNote       $08
0008D1DE E701                       	dc.b	smpsNoAttack, $01
0008D1E0 E10B                       	smpsAlterNote       $0B
0008D1E2 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008D1E6 E105                       	smpsAlterNote       $05
0008D1E8 E701                       	dc.b	smpsNoAttack, $01
0008D1EA E101                       	smpsAlterNote       $01
0008D1EC E701                       	dc.b	smpsNoAttack, $01
0008D1EE E102                       	smpsAlterNote       $02
0008D1F0 E701                       	dc.b	smpsNoAttack, $01
0008D1F2 E108                       	smpsAlterNote       $08
0008D1F4 E701                       	dc.b	smpsNoAttack, $01
0008D1F6 E10C                       	smpsAlterNote       $0C
0008D1F8 E701                       	dc.b	smpsNoAttack, $01
0008D1FA E108                       	smpsAlterNote       $08
0008D1FC E701                       	dc.b	smpsNoAttack, $01
0008D1FE E105                       	smpsAlterNote       $05
0008D200 E701                       	dc.b	smpsNoAttack, $01
0008D202 E101                       	smpsAlterNote       $01
0008D204 E701                       	dc.b	smpsNoAttack, $01
0008D206 E105                       	smpsAlterNote       $05
0008D208 E701                       	dc.b	smpsNoAttack, $01
0008D20A E10B                       	smpsAlterNote       $0B
0008D20C E701                       	dc.b	smpsNoAttack, $01
0008D20E E10C                       	smpsAlterNote       $0C
0008D210 E701                       	dc.b	smpsNoAttack, $01
0008D212 E108                       	smpsAlterNote       $08
0008D214 E701                       	dc.b	smpsNoAttack, $01
0008D216 E102                       	smpsAlterNote       $02
0008D218 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008D21C E108                       	smpsAlterNote       $08
0008D21E E701                       	dc.b	smpsNoAttack, $01
0008D220 E10B                       	smpsAlterNote       $0B
0008D222 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008D226 E105                       	smpsAlterNote       $05
0008D228 E701                       	dc.b	smpsNoAttack, $01
0008D22A E101                       	smpsAlterNote       $01
0008D22C E701                       	dc.b	smpsNoAttack, $01
0008D22E E102                       	smpsAlterNote       $02
0008D230 E701                       	dc.b	smpsNoAttack, $01
0008D232 E108                       	smpsAlterNote       $08
0008D234 E701                       	dc.b	smpsNoAttack, $01
0008D236 E10C                       	smpsAlterNote       $0C
0008D238 E701                       	dc.b	smpsNoAttack, $01
0008D23A E108                       	smpsAlterNote       $08
0008D23C E701                       	dc.b	smpsNoAttack, $01
0008D23E E105                       	smpsAlterNote       $05
0008D240 E701                       	dc.b	smpsNoAttack, $01
0008D242 E101                       	smpsAlterNote       $01
0008D244 E701                       	dc.b	smpsNoAttack, $01
0008D246 E105                       	smpsAlterNote       $05
0008D248 E701                       	dc.b	smpsNoAttack, $01
0008D24A E10B                       	smpsAlterNote       $0B
0008D24C E701                       	dc.b	smpsNoAttack, $01
0008D24E E10C                       	smpsAlterNote       $0C
0008D250 E701                       	dc.b	smpsNoAttack, $01
0008D252 E108                       	smpsAlterNote       $08
0008D254 E701                       	dc.b	smpsNoAttack, $01
0008D256 E102                       	smpsAlterNote       $02
0008D258 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008D25C E105                       	smpsAlterNote       $05
0008D25E E701                       	dc.b	smpsNoAttack, $01
0008D260 E10B                       	smpsAlterNote       $0B
0008D262 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008D266 E105                       	smpsAlterNote       $05
0008D268 E701                       	dc.b	smpsNoAttack, $01
0008D26A E102                       	smpsAlterNote       $02
0008D26C E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008D270 E108                       	smpsAlterNote       $08
0008D272 E701                       	dc.b	smpsNoAttack, $01
0008D274 E10C                       	smpsAlterNote       $0C
0008D276 E701                       	dc.b	smpsNoAttack, $01
0008D278 E10B                       	smpsAlterNote       $0B
0008D27A E701                       	dc.b	smpsNoAttack, $01
0008D27C E105                       	smpsAlterNote       $05
0008D27E E701                       	dc.b	smpsNoAttack, $01
0008D280 E101                       	smpsAlterNote       $01
0008D282 E701                       	dc.b	smpsNoAttack, $01
0008D284 E105                       	smpsAlterNote       $05
0008D286 E701                       	dc.b	smpsNoAttack, $01
0008D288 E108                       	smpsAlterNote       $08
0008D28A E701                       	dc.b	smpsNoAttack, $01
0008D28C E10C                       	smpsAlterNote       $0C
0008D28E E701                       	dc.b	smpsNoAttack, $01
0008D290 E108                       	smpsAlterNote       $08
0008D292 E701                       	dc.b	smpsNoAttack, $01
0008D294 E102                       	smpsAlterNote       $02
0008D296 E701                       	dc.b	smpsNoAttack, $01
0008D298 E101                       	smpsAlterNote       $01
0008D29A E701                       	dc.b	smpsNoAttack, $01
0008D29C E105                       	smpsAlterNote       $05
0008D29E E701                       	dc.b	smpsNoAttack, $01
0008D2A0 E10B                       	smpsAlterNote       $0B
0008D2A2 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008D2A6 E108                       	smpsAlterNote       $08
0008D2A8 E701                       	dc.b	smpsNoAttack, $01
0008D2AA E102                       	smpsAlterNote       $02
0008D2AC E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008D2B0 E108                       	smpsAlterNote       $08
0008D2B2 E701                       	dc.b	smpsNoAttack, $01
0008D2B4 E10B                       	smpsAlterNote       $0B
0008D2B6 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008D2BA E105                       	smpsAlterNote       $05
0008D2BC E701                       	dc.b	smpsNoAttack, $01
0008D2BE E102                       	smpsAlterNote       $02
0008D2C0 8001                       	dc.b	nRst, $01
0008D2C2 E107                       	smpsAlterNote       $07
0008D2C4 BF01 8001                  	dc.b	nD5, $01, nRst, $01
0008D2C8 E108                       	smpsAlterNote       $08
0008D2CA C001 C10E                  	dc.b	nEb5, $01, nE5, $0E
0008D2CE E102                       	smpsAlterNote       $02
0008D2D0 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008D2D4 E108                       	smpsAlterNote       $08
0008D2D6 E701                       	dc.b	smpsNoAttack, $01
0008D2D8 E10B                       	smpsAlterNote       $0B
0008D2DA E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008D2DE E105                       	smpsAlterNote       $05
0008D2E0 E701                       	dc.b	smpsNoAttack, $01
0008D2E2 E101                       	smpsAlterNote       $01
0008D2E4 E701                       	dc.b	smpsNoAttack, $01
0008D2E6 E102                       	smpsAlterNote       $02
0008D2E8 E701                       	dc.b	smpsNoAttack, $01
0008D2EA E108                       	smpsAlterNote       $08
0008D2EC E701                       	dc.b	smpsNoAttack, $01
0008D2EE E10C                       	smpsAlterNote       $0C
0008D2F0 E701                       	dc.b	smpsNoAttack, $01
0008D2F2 E108                       	smpsAlterNote       $08
0008D2F4 E701                       	dc.b	smpsNoAttack, $01
0008D2F6 E105                       	smpsAlterNote       $05
0008D2F8 E701                       	dc.b	smpsNoAttack, $01
0008D2FA E101                       	smpsAlterNote       $01
0008D2FC E701                       	dc.b	smpsNoAttack, $01
0008D2FE E105                       	smpsAlterNote       $05
0008D300 E701                       	dc.b	smpsNoAttack, $01
0008D302 E10B                       	smpsAlterNote       $0B
0008D304 E701                       	dc.b	smpsNoAttack, $01
0008D306 E10C                       	smpsAlterNote       $0C
0008D308 E701                       	dc.b	smpsNoAttack, $01
0008D30A E108                       	smpsAlterNote       $08
0008D30C E701                       	dc.b	smpsNoAttack, $01
0008D30E E102                       	smpsAlterNote       $02
0008D310 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008D314 E105                       	smpsAlterNote       $05
0008D316 E701                       	dc.b	smpsNoAttack, $01
0008D318 E10B                       	smpsAlterNote       $0B
0008D31A E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008D31E E105                       	smpsAlterNote       $05
0008D320 E701                       	dc.b	smpsNoAttack, $01
0008D322 E102                       	smpsAlterNote       $02
0008D324 E701                       	dc.b	smpsNoAttack, $01
0008D326 E109                       	smpsAlterNote       $09
0008D328 C40A C207                  	dc.b	nG5, $0A, nF5, $07
0008D32C E108                       	smpsAlterNote       $08
0008D32E C10D                       	dc.b	nE5, $0D
0008D330 E105                       	smpsAlterNote       $05
0008D332 E701                       	dc.b	smpsNoAttack, $01
0008D334 E101                       	smpsAlterNote       $01
0008D336 E701                       	dc.b	smpsNoAttack, $01
0008D338 E102                       	smpsAlterNote       $02
0008D33A E701                       	dc.b	smpsNoAttack, $01
0008D33C E108                       	smpsAlterNote       $08
0008D33E E701                       	dc.b	smpsNoAttack, $01
0008D340 E10C                       	smpsAlterNote       $0C
0008D342 E701                       	dc.b	smpsNoAttack, $01
0008D344 E108                       	smpsAlterNote       $08
0008D346 E701                       	dc.b	smpsNoAttack, $01
0008D348 E105                       	smpsAlterNote       $05
0008D34A E701                       	dc.b	smpsNoAttack, $01
0008D34C E101                       	smpsAlterNote       $01
0008D34E E701                       	dc.b	smpsNoAttack, $01
0008D350 E105                       	smpsAlterNote       $05
0008D352 E701                       	dc.b	smpsNoAttack, $01
0008D354 E10B                       	smpsAlterNote       $0B
0008D356 E701                       	dc.b	smpsNoAttack, $01
0008D358 E10C                       	smpsAlterNote       $0C
0008D35A E701                       	dc.b	smpsNoAttack, $01
0008D35C E108                       	smpsAlterNote       $08
0008D35E E701                       	dc.b	smpsNoAttack, $01
0008D360 E102                       	smpsAlterNote       $02
0008D362 E701 E701 800E             	dc.b	smpsNoAttack, $01, smpsNoAttack, $01, nRst, $0E
0008D36A E10B                       	smpsAlterNote       $0B
0008D36C BA01 8001                  	dc.b	nA4, $01, nRst, $01
0008D370 E10C                       	smpsAlterNote       $0C
0008D372 BB01 8001                  	dc.b	nBb4, $01, nRst, $01
0008D376 E10B                       	smpsAlterNote       $0B
0008D378 BA03 BA06 8001             	dc.b	nA4, $03, nA4, $06, nRst, $01
0008D37E E107                       	smpsAlterNote       $07
0008D380 BF03                       	dc.b	nD5, $03
0008D382 E108                       	smpsAlterNote       $08
0008D384 C103 8001                  	dc.b	nE5, $03, nRst, $01
0008D388 E109                       	smpsAlterNote       $09
0008D38A C203 C403 8001             	dc.b	nF5, $03, nG5, $03, nRst, $01
0008D390 E10B                       	smpsAlterNote       $0B
0008D392 C606 8001                  	dc.b	nA5, $06, nRst, $01
0008D396 E107                       	smpsAlterNote       $07
0008D398 BF02 8001                  	dc.b	nD5, $02, nRst, $01
0008D39C E106                       	smpsAlterNote       $06
0008D39E C90D                       	dc.b	nC6, $0D
0008D3A0 E103                       	smpsAlterNote       $03
0008D3A2 E701                       	dc.b	smpsNoAttack, $01
0008D3A4 E1FF                       	smpsAlterNote       $FF
0008D3A6 E701                       	dc.b	smpsNoAttack, $01
0008D3A8 E103                       	smpsAlterNote       $03
0008D3AA E701                       	dc.b	smpsNoAttack, $01
0008D3AC E109                       	smpsAlterNote       $09
0008D3AE E701                       	dc.b	smpsNoAttack, $01
0008D3B0 E10A                       	smpsAlterNote       $0A
0008D3B2 E701                       	dc.b	smpsNoAttack, $01
0008D3B4 E106                       	smpsAlterNote       $06
0008D3B6 E701                       	dc.b	smpsNoAttack, $01
0008D3B8 E100                       	smpsAlterNote       $00
0008D3BA E701                       	dc.b	smpsNoAttack, $01
0008D3BC E10C                       	smpsAlterNote       $0C
0008D3BE C703 8001                  	dc.b	nBb5, $03, nRst, $01
0008D3C2 E10B                       	smpsAlterNote       $0B
0008D3C4 C603                       	dc.b	nA5, $03
0008D3C6 E109                       	smpsAlterNote       $09
0008D3C8 C403 8001                  	dc.b	nG5, $03, nRst, $01
0008D3CC E10B                       	smpsAlterNote       $0B
0008D3CE C60D                       	dc.b	nA5, $0D
0008D3D0 E105                       	smpsAlterNote       $05
0008D3D2 E701                       	dc.b	smpsNoAttack, $01
0008D3D4 E104                       	smpsAlterNote       $04
0008D3D6 E701                       	dc.b	smpsNoAttack, $01
0008D3D8 E108                       	smpsAlterNote       $08
0008D3DA E701                       	dc.b	smpsNoAttack, $01
0008D3DC E10E                       	smpsAlterNote       $0E
0008D3DE E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008D3E2 E10B                       	smpsAlterNote       $0B
0008D3E4 E701                       	dc.b	smpsNoAttack, $01
0008D3E6 E105                       	smpsAlterNote       $05
0008D3E8 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008D3EC E10B                       	smpsAlterNote       $0B
0008D3EE E701                       	dc.b	smpsNoAttack, $01
0008D3F0 E10E                       	smpsAlterNote       $0E
0008D3F2 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008D3F6 E108                       	smpsAlterNote       $08
0008D3F8 E701                       	dc.b	smpsNoAttack, $01
0008D3FA E104                       	smpsAlterNote       $04
0008D3FC E701                       	dc.b	smpsNoAttack, $01
0008D3FE E105                       	smpsAlterNote       $05
0008D400 E701                       	dc.b	smpsNoAttack, $01
0008D402 E10B                       	smpsAlterNote       $0B
0008D404 E701                       	dc.b	smpsNoAttack, $01
0008D406 E10F                       	smpsAlterNote       $0F
0008D408 E701                       	dc.b	smpsNoAttack, $01
0008D40A E10B                       	smpsAlterNote       $0B
0008D40C E701                       	dc.b	smpsNoAttack, $01
0008D40E E108                       	smpsAlterNote       $08
0008D410 E701                       	dc.b	smpsNoAttack, $01
0008D412 E104                       	smpsAlterNote       $04
0008D414 E701                       	dc.b	smpsNoAttack, $01
0008D416 E108                       	smpsAlterNote       $08
0008D418 E701                       	dc.b	smpsNoAttack, $01
0008D41A E10E                       	smpsAlterNote       $0E
0008D41C E701                       	dc.b	smpsNoAttack, $01
0008D41E E10F                       	smpsAlterNote       $0F
0008D420 E701                       	dc.b	smpsNoAttack, $01
0008D422 E10B                       	smpsAlterNote       $0B
0008D424 E701                       	dc.b	smpsNoAttack, $01
0008D426 E105                       	smpsAlterNote       $05
0008D428 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008D42C E108                       	smpsAlterNote       $08
0008D42E E701                       	dc.b	smpsNoAttack, $01
0008D430 E10E                       	smpsAlterNote       $0E
0008D432 E701                       	dc.b	smpsNoAttack, $01
0008D434 E10F                       	smpsAlterNote       $0F
0008D436 800F                       	dc.b	nRst, $0F
0008D438 E107                       	smpsAlterNote       $07
0008D43A BF02 8001                  	dc.b	nD5, $02, nRst, $01
0008D43E E108                       	smpsAlterNote       $08
0008D440 C103                       	dc.b	nE5, $03
0008D442 E109                       	smpsAlterNote       $09
0008D444 C203 8001 C403             	dc.b	nF5, $03, nRst, $01, nG5, $03
0008D44A E10B                       	smpsAlterNote       $0B
0008D44C C607                       	dc.b	nA5, $07
0008D44E E107                       	smpsAlterNote       $07
0008D450 BF03 8001                  	dc.b	nD5, $03, nRst, $01
0008D454 E106                       	smpsAlterNote       $06
0008D456 C90D                       	dc.b	nC6, $0D
0008D458 E107                       	smpsAlterNote       $07
0008D45A CB03 8001                  	dc.b	nD6, $03, nRst, $01
0008D45E E10C                       	smpsAlterNote       $0C
0008D460 C704                       	dc.b	nBb5, $04
0008D462 E10B                       	smpsAlterNote       $0B
0008D464 C604 8001                  	dc.b	nA5, $04, nRst, $01
0008D468 E109                       	smpsAlterNote       $09
0008D46A C404                       	dc.b	nG5, $04
0008D46C E10B                       	smpsAlterNote       $0B
0008D46E C60D                       	dc.b	nA5, $0D
0008D470 E108                       	smpsAlterNote       $08
0008D472 E701                       	dc.b	smpsNoAttack, $01
0008D474 E105                       	smpsAlterNote       $05
0008D476 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008D47A E10B                       	smpsAlterNote       $0B
0008D47C E701                       	dc.b	smpsNoAttack, $01
0008D47E E10F                       	smpsAlterNote       $0F
0008D480 E701                       	dc.b	smpsNoAttack, $01
0008D482 E10E                       	smpsAlterNote       $0E
0008D484 E701                       	dc.b	smpsNoAttack, $01
0008D486 E108                       	smpsAlterNote       $08
0008D488 E701                       	dc.b	smpsNoAttack, $01
0008D48A E104                       	smpsAlterNote       $04
0008D48C E701                       	dc.b	smpsNoAttack, $01
0008D48E E108                       	smpsAlterNote       $08
0008D490 E701                       	dc.b	smpsNoAttack, $01
0008D492 E10B                       	smpsAlterNote       $0B
0008D494 E701                       	dc.b	smpsNoAttack, $01
0008D496 E10F                       	smpsAlterNote       $0F
0008D498 E701                       	dc.b	smpsNoAttack, $01
0008D49A E10B                       	smpsAlterNote       $0B
0008D49C E701                       	dc.b	smpsNoAttack, $01
0008D49E E105                       	smpsAlterNote       $05
0008D4A0 E701                       	dc.b	smpsNoAttack, $01
0008D4A2 E104                       	smpsAlterNote       $04
0008D4A4 E701                       	dc.b	smpsNoAttack, $01
0008D4A6 E108                       	smpsAlterNote       $08
0008D4A8 E701                       	dc.b	smpsNoAttack, $01
0008D4AA E10E                       	smpsAlterNote       $0E
0008D4AC E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008D4B0 E10B                       	smpsAlterNote       $0B
0008D4B2 E701                       	dc.b	smpsNoAttack, $01
0008D4B4 E105                       	smpsAlterNote       $05
0008D4B6 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008D4BA E10B                       	smpsAlterNote       $0B
0008D4BC E701                       	dc.b	smpsNoAttack, $01
0008D4BE E10E                       	smpsAlterNote       $0E
0008D4C0 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008D4C4 E108                       	smpsAlterNote       $08
0008D4C6 E701                       	dc.b	smpsNoAttack, $01
0008D4C8 E105                       	smpsAlterNote       $05
0008D4CA 8001                       	dc.b	nRst, $01
0008D4CC E109                       	smpsAlterNote       $09
0008D4CE C401 8001                  	dc.b	nG5, $01, nRst, $01
0008D4D2 E10B                       	smpsAlterNote       $0B
0008D4D4 C501 C60E C604 8001        	dc.b	nAb5, $01, nA5, $0E, nA5, $04, nRst, $01
0008D4DC E109                       	smpsAlterNote       $09
0008D4DE C404                       	dc.b	nG5, $04
0008D4E0 E10B                       	smpsAlterNote       $0B
0008D4E2 C604 8001                  	dc.b	nA5, $04, nRst, $01
0008D4E6 E107                       	smpsAlterNote       $07
0008D4E8 BF0D                       	dc.b	nD5, $0D
0008D4EA E101                       	smpsAlterNote       $01
0008D4EC E701                       	dc.b	smpsNoAttack, $01
0008D4EE E100                       	smpsAlterNote       $00
0008D4F0 E701                       	dc.b	smpsNoAttack, $01
0008D4F2 E104                       	smpsAlterNote       $04
0008D4F4 E701                       	dc.b	smpsNoAttack, $01
0008D4F6 E10A                       	smpsAlterNote       $0A
0008D4F8 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008D4FC E107                       	smpsAlterNote       $07
0008D4FE E701                       	dc.b	smpsNoAttack, $01
0008D500 E101                       	smpsAlterNote       $01
0008D502 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008D506 E107                       	smpsAlterNote       $07
0008D508 E701                       	dc.b	smpsNoAttack, $01
0008D50A E10A                       	smpsAlterNote       $0A
0008D50C E701                       	dc.b	smpsNoAttack, $01
0008D50E E10B                       	smpsAlterNote       $0B
0008D510 8001                       	dc.b	nRst, $01
0008D512 E108                       	smpsAlterNote       $08
0008D514 8001                       	dc.b	nRst, $01
0008D516 E109                       	smpsAlterNote       $09
0008D518 8001 C401                  	dc.b	nRst, $01, nG5, $01
0008D51C E10B                       	smpsAlterNote       $0B
0008D51E C606 8001 C606 8001        	dc.b	nA5, $06, nRst, $01, nA5, $06, nRst, $01
0008D526 E108                       	smpsAlterNote       $08
0008D528 CD06 8001                  	dc.b	nE6, $06, nRst, $01
0008D52C E109                       	smpsAlterNote       $09
0008D52E CE06 8001                  	dc.b	nF6, $06, nRst, $01
0008D532 E108                       	smpsAlterNote       $08
0008D534 CD02 8001                  	dc.b	nE6, $02, nRst, $01
0008D538 E106                       	smpsAlterNote       $06
0008D53A C903                       	dc.b	nC6, $03
0008D53C E109                       	smpsAlterNote       $09
0008D53E C403 8001                  	dc.b	nG5, $03, nRst, $01
0008D542 E10C                       	smpsAlterNote       $0C
0008D544 C70D                       	dc.b	nBb5, $0D
0008D546 E109                       	smpsAlterNote       $09
0008D548 E701                       	dc.b	smpsNoAttack, $01
0008D54A E105                       	smpsAlterNote       $05
0008D54C E701                       	dc.b	smpsNoAttack, $01
0008D54E E109                       	smpsAlterNote       $09
0008D550 E701                       	dc.b	smpsNoAttack, $01
0008D552 E10F                       	smpsAlterNote       $0F
0008D554 E701                       	dc.b	smpsNoAttack, $01
0008D556 E110                       	smpsAlterNote       $10
0008D558 E701                       	dc.b	smpsNoAttack, $01
0008D55A E10C                       	smpsAlterNote       $0C
0008D55C E701                       	dc.b	smpsNoAttack, $01
0008D55E E106                       	smpsAlterNote       $06
0008D560 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008D564 E109                       	smpsAlterNote       $09
0008D566 E701                       	dc.b	smpsNoAttack, $01
0008D568 E10F                       	smpsAlterNote       $0F
0008D56A E701                       	dc.b	smpsNoAttack, $01
0008D56C E110                       	smpsAlterNote       $10
0008D56E 8001                       	dc.b	nRst, $01
0008D570 E10B                       	smpsAlterNote       $0B
0008D572 C606 8001                  	dc.b	nA5, $06, nRst, $01
0008D576 E109                       	smpsAlterNote       $09
0008D578 C40D                       	dc.b	nG5, $0D
0008D57A E103                       	smpsAlterNote       $03
0008D57C E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008D580 E106                       	smpsAlterNote       $06
0008D582 E701                       	dc.b	smpsNoAttack, $01
0008D584 E10C                       	smpsAlterNote       $0C
0008D586 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008D58A E106                       	smpsAlterNote       $06
0008D58C E701                       	dc.b	smpsNoAttack, $01
0008D58E E103                       	smpsAlterNote       $03
0008D590 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008D594 E109                       	smpsAlterNote       $09
0008D596 E701                       	dc.b	smpsNoAttack, $01
0008D598 E10D                       	smpsAlterNote       $0D
0008D59A E701                       	dc.b	smpsNoAttack, $01
0008D59C E10C                       	smpsAlterNote       $0C
0008D59E E701                       	dc.b	smpsNoAttack, $01
0008D5A0 E106                       	smpsAlterNote       $06
0008D5A2 E701                       	dc.b	smpsNoAttack, $01
0008D5A4 E102                       	smpsAlterNote       $02
0008D5A6 E701                       	dc.b	smpsNoAttack, $01
0008D5A8 E103                       	smpsAlterNote       $03
0008D5AA 8001                       	dc.b	nRst, $01
0008D5AC E10B                       	smpsAlterNote       $0B
0008D5AE C60D                       	dc.b	nA5, $0D
0008D5B0 E108                       	smpsAlterNote       $08
0008D5B2 E701                       	dc.b	smpsNoAttack, $01
0008D5B4 E104                       	smpsAlterNote       $04
0008D5B6 E701                       	dc.b	smpsNoAttack, $01
0008D5B8 E108                       	smpsAlterNote       $08
0008D5BA E701                       	dc.b	smpsNoAttack, $01
0008D5BC E10B                       	smpsAlterNote       $0B
0008D5BE E701                       	dc.b	smpsNoAttack, $01
0008D5C0 E10F                       	smpsAlterNote       $0F
0008D5C2 E701                       	dc.b	smpsNoAttack, $01
0008D5C4 E10B                       	smpsAlterNote       $0B
0008D5C6 E701                       	dc.b	smpsNoAttack, $01
0008D5C8 E105                       	smpsAlterNote       $05
0008D5CA E701                       	dc.b	smpsNoAttack, $01
0008D5CC E104                       	smpsAlterNote       $04
0008D5CE E701                       	dc.b	smpsNoAttack, $01
0008D5D0 E108                       	smpsAlterNote       $08
0008D5D2 E701                       	dc.b	smpsNoAttack, $01
0008D5D4 E10E                       	smpsAlterNote       $0E
0008D5D6 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008D5DA E10B                       	smpsAlterNote       $0B
0008D5DC E701                       	dc.b	smpsNoAttack, $01
0008D5DE E105                       	smpsAlterNote       $05
0008D5E0 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008D5E4 E10C                       	smpsAlterNote       $0C
0008D5E6 C70E                       	dc.b	nBb5, $0E
0008D5E8 E106                       	smpsAlterNote       $06
0008D5EA E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008D5EE E10C                       	smpsAlterNote       $0C
0008D5F0 E701                       	dc.b	smpsNoAttack, $01
0008D5F2 E10F                       	smpsAlterNote       $0F
0008D5F4 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008D5F8 E109                       	smpsAlterNote       $09
0008D5FA E701                       	dc.b	smpsNoAttack, $01
0008D5FC E105                       	smpsAlterNote       $05
0008D5FE E701                       	dc.b	smpsNoAttack, $01
0008D600 E106                       	smpsAlterNote       $06
0008D602 E701                       	dc.b	smpsNoAttack, $01
0008D604 E10C                       	smpsAlterNote       $0C
0008D606 E701                       	dc.b	smpsNoAttack, $01
0008D608 E110                       	smpsAlterNote       $10
0008D60A E701                       	dc.b	smpsNoAttack, $01
0008D60C E10C                       	smpsAlterNote       $0C
0008D60E E701                       	dc.b	smpsNoAttack, $01
0008D610 E109                       	smpsAlterNote       $09
0008D612 E701                       	dc.b	smpsNoAttack, $01
0008D614 E105                       	smpsAlterNote       $05
0008D616 E701                       	dc.b	smpsNoAttack, $01
0008D618 E106                       	smpsAlterNote       $06
0008D61A 8001 C90C                  	dc.b	nRst, $01, nC6, $0C
0008D61E E107                       	smpsAlterNote       $07
0008D620 CA01 E7CB 01               	dc.b	nCs6, $01, smpsNoAttack, nD6, $01
0008D625 E108                       	smpsAlterNote       $08
0008D627 CD0D                       	dc.b	nE6, $0D
0008D629 E107                       	smpsAlterNote       $07
0008D62B CB0D                       	dc.b	nD6, $0D
0008D62D E104                       	smpsAlterNote       $04
0008D62F E701                       	dc.b	smpsNoAttack, $01
0008D631 E100                       	smpsAlterNote       $00
0008D633 E701                       	dc.b	smpsNoAttack, $01
0008D635 E101                       	smpsAlterNote       $01
0008D637 E701                       	dc.b	smpsNoAttack, $01
0008D639 E107                       	smpsAlterNote       $07
0008D63B E701                       	dc.b	smpsNoAttack, $01
0008D63D E10B                       	smpsAlterNote       $0B
0008D63F E701                       	dc.b	smpsNoAttack, $01
0008D641 E107                       	smpsAlterNote       $07
0008D643 E701                       	dc.b	smpsNoAttack, $01
0008D645 E104                       	smpsAlterNote       $04
0008D647 E701                       	dc.b	smpsNoAttack, $01
0008D649 E100                       	smpsAlterNote       $00
0008D64B E701                       	dc.b	smpsNoAttack, $01
0008D64D E104                       	smpsAlterNote       $04
0008D64F E701                       	dc.b	smpsNoAttack, $01
0008D651 E10A                       	smpsAlterNote       $0A
0008D653 E701                       	dc.b	smpsNoAttack, $01
0008D655 E10B                       	smpsAlterNote       $0B
0008D657 E701                       	dc.b	smpsNoAttack, $01
0008D659 E108                       	smpsAlterNote       $08
0008D65B CC0D                       	dc.b	nEb6, $0D
0008D65D E105                       	smpsAlterNote       $05
0008D65F E701                       	dc.b	smpsNoAttack, $01
0008D661 E101                       	smpsAlterNote       $01
0008D663 E701                       	dc.b	smpsNoAttack, $01
0008D665 E102                       	smpsAlterNote       $02
0008D667 E701                       	dc.b	smpsNoAttack, $01
0008D669 E108                       	smpsAlterNote       $08
0008D66B E701                       	dc.b	smpsNoAttack, $01
0008D66D E106                       	smpsAlterNote       $06
0008D66F C903 8004 C902 C902 8001+  	dc.b	nC6, $03, nRst, $04, nC6, $02, nC6, $02, nRst, $01, nC6, $01
0008D67B 8001                       	dc.b	nRst, $01
0008D67D E107                       	smpsAlterNote       $07
0008D67F CB0D                       	dc.b	nD6, $0D
0008D681 E104                       	smpsAlterNote       $04
0008D683 E701                       	dc.b	smpsNoAttack, $01
0008D685 E100                       	smpsAlterNote       $00
0008D687 E701                       	dc.b	smpsNoAttack, $01
0008D689 E104                       	smpsAlterNote       $04
0008D68B E701                       	dc.b	smpsNoAttack, $01
0008D68D E107                       	smpsAlterNote       $07
0008D68F E701                       	dc.b	smpsNoAttack, $01
0008D691 E10B                       	smpsAlterNote       $0B
0008D693 E701                       	dc.b	smpsNoAttack, $01
0008D695 E107                       	smpsAlterNote       $07
0008D697 E701                       	dc.b	smpsNoAttack, $01
0008D699 E101                       	smpsAlterNote       $01
0008D69B E701                       	dc.b	smpsNoAttack, $01
0008D69D E100                       	smpsAlterNote       $00
0008D69F E701                       	dc.b	smpsNoAttack, $01
0008D6A1 E104                       	smpsAlterNote       $04
0008D6A3 E701                       	dc.b	smpsNoAttack, $01
0008D6A5 E10A                       	smpsAlterNote       $0A
0008D6A7 E701                       	dc.b	smpsNoAttack, $01
0008D6A9 E10B                       	smpsAlterNote       $0B
0008D6AB 8001                       	dc.b	nRst, $01
0008D6AD E109                       	smpsAlterNote       $09
0008D6AF CE0A                       	dc.b	nF6, $0A
0008D6B1 E108                       	smpsAlterNote       $08
0008D6B3 CC07                       	dc.b	nEb6, $07
0008D6B5 E106                       	smpsAlterNote       $06
0008D6B7 C903 8004 C902 C902 C902+  	dc.b	nC6, $03, nRst, $04, nC6, $02, nC6, $02, nC6, $02, nRst, $01
0008D6C3 E107                       	smpsAlterNote       $07
0008D6C5 CB0D                       	dc.b	nD6, $0D
0008D6C7 E101                       	smpsAlterNote       $01
0008D6C9 E701                       	dc.b	smpsNoAttack, $01
0008D6CB E100                       	smpsAlterNote       $00
0008D6CD E701                       	dc.b	smpsNoAttack, $01
0008D6CF E104                       	smpsAlterNote       $04
0008D6D1 E701                       	dc.b	smpsNoAttack, $01
0008D6D3 E10A                       	smpsAlterNote       $0A
0008D6D5 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008D6D9 E107                       	smpsAlterNote       $07
0008D6DB E701                       	dc.b	smpsNoAttack, $01
0008D6DD E101                       	smpsAlterNote       $01
0008D6DF E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008D6E3 E107                       	smpsAlterNote       $07
0008D6E5 E701                       	dc.b	smpsNoAttack, $01
0008D6E7 E10A                       	smpsAlterNote       $0A
0008D6E9 E701                       	dc.b	smpsNoAttack, $01
0008D6EB E10B                       	smpsAlterNote       $0B
0008D6ED 8001                       	dc.b	nRst, $01
0008D6EF E108                       	smpsAlterNote       $08
0008D6F1 CC0D                       	dc.b	nEb6, $0D
0008D6F3 E102                       	smpsAlterNote       $02
0008D6F5 E701                       	dc.b	smpsNoAttack, $01
0008D6F7 E101                       	smpsAlterNote       $01
0008D6F9 E701                       	dc.b	smpsNoAttack, $01
0008D6FB E105                       	smpsAlterNote       $05
0008D6FD E701                       	dc.b	smpsNoAttack, $01
0008D6FF E108                       	smpsAlterNote       $08
0008D701 8001                       	dc.b	nRst, $01
0008D703 E106                       	smpsAlterNote       $06
0008D705 C903 8004 C901 8001 C902+  	dc.b	nC6, $03, nRst, $04, nC6, $01, nRst, $01, nC6, $02, nC6, $02
0008D711 8001                       	dc.b	nRst, $01
0008D713 E107                       	smpsAlterNote       $07
0008D715 CB0D                       	dc.b	nD6, $0D
0008D717 E101                       	smpsAlterNote       $01
0008D719 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008D71D E104                       	smpsAlterNote       $04
0008D71F E701                       	dc.b	smpsNoAttack, $01
0008D721 E10A                       	smpsAlterNote       $0A
0008D723 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008D727 E104                       	smpsAlterNote       $04
0008D729 E701                       	dc.b	smpsNoAttack, $01
0008D72B E101                       	smpsAlterNote       $01
0008D72D E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008D731 E107                       	smpsAlterNote       $07
0008D733 E701                       	dc.b	smpsNoAttack, $01
0008D735 E10B                       	smpsAlterNote       $0B
0008D737 E701                       	dc.b	smpsNoAttack, $01
0008D739 E10A                       	smpsAlterNote       $0A
0008D73B E701                       	dc.b	smpsNoAttack, $01
0008D73D E104                       	smpsAlterNote       $04
0008D73F E701                       	dc.b	smpsNoAttack, $01
0008D741 E100                       	smpsAlterNote       $00
0008D743 E701                       	dc.b	smpsNoAttack, $01
0008D745 E101                       	smpsAlterNote       $01
0008D747 801C                       	dc.b	nRst, $1C
0008D74B E107                       	smpsAlterNote       $07
0008D74D BF03 8001                  	dc.b	nD5, $03, nRst, $01
0008D751 E603                       	smpsAlterVol        $03
0008D753 F6F1 AD                    	smpsJump            music84_Jump03
0008D756                            
0008D756                            ; FM3 Data
0008D756                            music84_FM3:
0008D756 E0C0                       	smpsPan             panCenter, $00
0008D75A E109                       	smpsAlterNote       $09
0008D75C C203 8007                  	dc.b	nF5, $03, nRst, $07
0008D760 E108                       	smpsAlterNote       $08
0008D762 C103 800B                  	dc.b	nE5, $03, nRst, $0B
0008D766 E10B                       	smpsAlterNote       $0B
0008D768 BA03 8006                  	dc.b	nA4, $03, nRst, $06
0008D76E E040                       	smpsPan             panRight, $00
0008D770 E110                       	smpsAlterNote       $10
0008D772 E6F9                       	smpsAlterVol        $F9
0008D774 C702 8001                  	dc.b	nBb5, $02, nRst, $01
0008D778 E10F                       	smpsAlterNote       $0F
0008D77A C603                       	dc.b	nA5, $03
0008D77C E10D                       	smpsAlterNote       $0D
0008D77E C403 8001 C203             	dc.b	nG5, $03, nRst, $01, nF5, $03
0008D784 E10C                       	smpsAlterNote       $0C
0008D786 C103 8001                  	dc.b	nE5, $03, nRst, $01
0008D78A E10A                       	smpsAlterNote       $0A
0008D78C BD02 8001                  	dc.b	nC5, $02, nRst, $01
0008D790 E10F                       	smpsAlterNote       $0F
0008D792 BA01 8001                  	dc.b	nA4, $01, nRst, $01
0008D796 E0C0                       	smpsPan             panCenter, $00
0008D79A E109                       	smpsAlterNote       $09
0008D79C E609                       	smpsAlterVol        $09
0008D79E B603                       	dc.b	nF4, $03
0008D7A0                            
0008D7A0                            music84_Jump02:
0008D7A0 E70A                       	dc.b	smpsNoAttack, $0A
0008D7A2 E103                       	smpsAlterNote       $03
0008D7A4 E701                       	dc.b	smpsNoAttack, $01
0008D7A6 E102                       	smpsAlterNote       $02
0008D7A8 E701                       	dc.b	smpsNoAttack, $01
0008D7AA E106                       	smpsAlterNote       $06
0008D7AC E701                       	dc.b	smpsNoAttack, $01
0008D7AE E10C                       	smpsAlterNote       $0C
0008D7B0 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008D7B4 E109                       	smpsAlterNote       $09
0008D7B6 E701                       	dc.b	smpsNoAttack, $01
0008D7B8 E103                       	smpsAlterNote       $03
0008D7BA E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008D7BE E109                       	smpsAlterNote       $09
0008D7C0 E701                       	dc.b	smpsNoAttack, $01
0008D7C2 E10C                       	smpsAlterNote       $0C
0008D7C4 E701                       	dc.b	smpsNoAttack, $01
0008D7C6 E10D                       	smpsAlterNote       $0D
0008D7C8 8001                       	dc.b	nRst, $01
0008D7CA E109                       	smpsAlterNote       $09
0008D7CC B80D                       	dc.b	nG4, $0D
0008D7CE E103                       	smpsAlterNote       $03
0008D7D0 E701                       	dc.b	smpsNoAttack, $01
0008D7D2 E102                       	smpsAlterNote       $02
0008D7D4 E701                       	dc.b	smpsNoAttack, $01
0008D7D6 E106                       	smpsAlterNote       $06
0008D7D8 E701                       	dc.b	smpsNoAttack, $01
0008D7DA E10C                       	smpsAlterNote       $0C
0008D7DC E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008D7E0 E109                       	smpsAlterNote       $09
0008D7E2 E701                       	dc.b	smpsNoAttack, $01
0008D7E4 E103                       	smpsAlterNote       $03
0008D7E6 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008D7EA E109                       	smpsAlterNote       $09
0008D7EC E701                       	dc.b	smpsNoAttack, $01
0008D7EE E10C                       	smpsAlterNote       $0C
0008D7F0 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008D7F4 E106                       	smpsAlterNote       $06
0008D7F6 E701                       	dc.b	smpsNoAttack, $01
0008D7F8 E102                       	smpsAlterNote       $02
0008D7FA E701                       	dc.b	smpsNoAttack, $01
0008D7FC E103                       	smpsAlterNote       $03
0008D7FE E701                       	dc.b	smpsNoAttack, $01
0008D800 E109                       	smpsAlterNote       $09
0008D802 E701                       	dc.b	smpsNoAttack, $01
0008D804 E10D                       	smpsAlterNote       $0D
0008D806 E701                       	dc.b	smpsNoAttack, $01
0008D808 E109                       	smpsAlterNote       $09
0008D80A E701 8001                  	dc.b	smpsNoAttack, $01, nRst, $01
0008D80E E10B                       	smpsAlterNote       $0B
0008D810 BA0D                       	dc.b	nA4, $0D
0008D812 E105                       	smpsAlterNote       $05
0008D814 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008D818 E108                       	smpsAlterNote       $08
0008D81A E701                       	dc.b	smpsNoAttack, $01
0008D81C E10E                       	smpsAlterNote       $0E
0008D81E E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008D822 E108                       	smpsAlterNote       $08
0008D824 E701                       	dc.b	smpsNoAttack, $01
0008D826 E104                       	smpsAlterNote       $04
0008D828 E701                       	dc.b	smpsNoAttack, $01
0008D82A E105                       	smpsAlterNote       $05
0008D82C E701                       	dc.b	smpsNoAttack, $01
0008D82E E10B                       	smpsAlterNote       $0B
0008D830 E701                       	dc.b	smpsNoAttack, $01
0008D832 E10F                       	smpsAlterNote       $0F
0008D834 E701                       	dc.b	smpsNoAttack, $01
0008D836 E10B                       	smpsAlterNote       $0B
0008D838 E701                       	dc.b	smpsNoAttack, $01
0008D83A E108                       	smpsAlterNote       $08
0008D83C E701                       	dc.b	smpsNoAttack, $01
0008D83E E104                       	smpsAlterNote       $04
0008D840 E701                       	dc.b	smpsNoAttack, $01
0008D842 E108                       	smpsAlterNote       $08
0008D844 E701                       	dc.b	smpsNoAttack, $01
0008D846 E10E                       	smpsAlterNote       $0E
0008D848 E701                       	dc.b	smpsNoAttack, $01
0008D84A E10F                       	smpsAlterNote       $0F
0008D84C E701                       	dc.b	smpsNoAttack, $01
0008D84E E10B                       	smpsAlterNote       $0B
0008D850 E701                       	dc.b	smpsNoAttack, $01
0008D852 E105                       	smpsAlterNote       $05
0008D854 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008D858 E108                       	smpsAlterNote       $08
0008D85A E701                       	dc.b	smpsNoAttack, $01
0008D85C E10E                       	smpsAlterNote       $0E
0008D85E E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008D862 E108                       	smpsAlterNote       $08
0008D864 E701                       	dc.b	smpsNoAttack, $01
0008D866 E105                       	smpsAlterNote       $05
0008D868 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008D86C E10B                       	smpsAlterNote       $0B
0008D86E E701                       	dc.b	smpsNoAttack, $01
0008D870 E10F                       	smpsAlterNote       $0F
0008D872 E701                       	dc.b	smpsNoAttack, $01
0008D874 E10E                       	smpsAlterNote       $0E
0008D876 E701                       	dc.b	smpsNoAttack, $01
0008D878 E108                       	smpsAlterNote       $08
0008D87A E701                       	dc.b	smpsNoAttack, $01
0008D87C E104                       	smpsAlterNote       $04
0008D87E E701                       	dc.b	smpsNoAttack, $01
0008D880 E105                       	smpsAlterNote       $05
0008D882 8001                       	dc.b	nRst, $01
0008D884 E108                       	smpsAlterNote       $08
0008D886 B50A                       	dc.b	nE4, $0A
0008D888 E109                       	smpsAlterNote       $09
0008D88A B60D                       	dc.b	nF4, $0D
0008D88C E106                       	smpsAlterNote       $06
0008D88E E701                       	dc.b	smpsNoAttack, $01
0008D890 E103                       	smpsAlterNote       $03
0008D892 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008D896 E109                       	smpsAlterNote       $09
0008D898 E701                       	dc.b	smpsNoAttack, $01
0008D89A E10D                       	smpsAlterNote       $0D
0008D89C E701                       	dc.b	smpsNoAttack, $01
0008D89E E10C                       	smpsAlterNote       $0C
0008D8A0 E701                       	dc.b	smpsNoAttack, $01
0008D8A2 E106                       	smpsAlterNote       $06
0008D8A4 E701                       	dc.b	smpsNoAttack, $01
0008D8A6 E102                       	smpsAlterNote       $02
0008D8A8 E701                       	dc.b	smpsNoAttack, $01
0008D8AA E106                       	smpsAlterNote       $06
0008D8AC E701                       	dc.b	smpsNoAttack, $01
0008D8AE E109                       	smpsAlterNote       $09
0008D8B0 E701                       	dc.b	smpsNoAttack, $01
0008D8B2 E10D                       	smpsAlterNote       $0D
0008D8B4 E701                       	dc.b	smpsNoAttack, $01
0008D8B6 E109                       	smpsAlterNote       $09
0008D8B8 B80D                       	dc.b	nG4, $0D
0008D8BA E106                       	smpsAlterNote       $06
0008D8BC E701                       	dc.b	smpsNoAttack, $01
0008D8BE E103                       	smpsAlterNote       $03
0008D8C0 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008D8C4 E109                       	smpsAlterNote       $09
0008D8C6 E701                       	dc.b	smpsNoAttack, $01
0008D8C8 E10D                       	smpsAlterNote       $0D
0008D8CA E701                       	dc.b	smpsNoAttack, $01
0008D8CC E10C                       	smpsAlterNote       $0C
0008D8CE E701                       	dc.b	smpsNoAttack, $01
0008D8D0 E106                       	smpsAlterNote       $06
0008D8D2 E701                       	dc.b	smpsNoAttack, $01
0008D8D4 E102                       	smpsAlterNote       $02
0008D8D6 E701                       	dc.b	smpsNoAttack, $01
0008D8D8 E106                       	smpsAlterNote       $06
0008D8DA E701                       	dc.b	smpsNoAttack, $01
0008D8DC E109                       	smpsAlterNote       $09
0008D8DE E701                       	dc.b	smpsNoAttack, $01
0008D8E0 E10D                       	smpsAlterNote       $0D
0008D8E2 E701                       	dc.b	smpsNoAttack, $01
0008D8E4 E109                       	smpsAlterNote       $09
0008D8E6 E701                       	dc.b	smpsNoAttack, $01
0008D8E8 E103                       	smpsAlterNote       $03
0008D8EA E701                       	dc.b	smpsNoAttack, $01
0008D8EC E102                       	smpsAlterNote       $02
0008D8EE E701                       	dc.b	smpsNoAttack, $01
0008D8F0 E106                       	smpsAlterNote       $06
0008D8F2 E701                       	dc.b	smpsNoAttack, $01
0008D8F4 E10C                       	smpsAlterNote       $0C
0008D8F6 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008D8FA E109                       	smpsAlterNote       $09
0008D8FC E701                       	dc.b	smpsNoAttack, $01
0008D8FE E10B                       	smpsAlterNote       $0B
0008D900 BA0D                       	dc.b	nA4, $0D
0008D902 E108                       	smpsAlterNote       $08
0008D904 E701                       	dc.b	smpsNoAttack, $01
0008D906 E104                       	smpsAlterNote       $04
0008D908 E701                       	dc.b	smpsNoAttack, $01
0008D90A E108                       	smpsAlterNote       $08
0008D90C E701                       	dc.b	smpsNoAttack, $01
0008D90E E10B                       	smpsAlterNote       $0B
0008D910 E701                       	dc.b	smpsNoAttack, $01
0008D912 E10F                       	smpsAlterNote       $0F
0008D914 E701                       	dc.b	smpsNoAttack, $01
0008D916 E10B                       	smpsAlterNote       $0B
0008D918 E701                       	dc.b	smpsNoAttack, $01
0008D91A E105                       	smpsAlterNote       $05
0008D91C E701                       	dc.b	smpsNoAttack, $01
0008D91E E104                       	smpsAlterNote       $04
0008D920 E701                       	dc.b	smpsNoAttack, $01
0008D922 E108                       	smpsAlterNote       $08
0008D924 E701                       	dc.b	smpsNoAttack, $01
0008D926 E10E                       	smpsAlterNote       $0E
0008D928 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008D92C E10B                       	smpsAlterNote       $0B
0008D92E E701                       	dc.b	smpsNoAttack, $01
0008D930 E105                       	smpsAlterNote       $05
0008D932 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008D936 E10B                       	smpsAlterNote       $0B
0008D938 E701                       	dc.b	smpsNoAttack, $01
0008D93A E10E                       	smpsAlterNote       $0E
0008D93C E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008D940 E108                       	smpsAlterNote       $08
0008D942 E701                       	dc.b	smpsNoAttack, $01
0008D944 E104                       	smpsAlterNote       $04
0008D946 E701                       	dc.b	smpsNoAttack, $01
0008D948 E105                       	smpsAlterNote       $05
0008D94A E701                       	dc.b	smpsNoAttack, $01
0008D94C E10B                       	smpsAlterNote       $0B
0008D94E E701                       	dc.b	smpsNoAttack, $01
0008D950 E10F                       	smpsAlterNote       $0F
0008D952 E701                       	dc.b	smpsNoAttack, $01
0008D954 E10B                       	smpsAlterNote       $0B
0008D956 E701                       	dc.b	smpsNoAttack, $01
0008D958 E108                       	smpsAlterNote       $08
0008D95A E701                       	dc.b	smpsNoAttack, $01
0008D95C E105                       	smpsAlterNote       $05
0008D95E 8001                       	dc.b	nRst, $01
0008D960 E109                       	smpsAlterNote       $09
0008D962 B609 8001                  	dc.b	nF4, $09, nRst, $01
0008D966 E108                       	smpsAlterNote       $08
0008D968 B506 8001                  	dc.b	nE4, $06, nRst, $01
0008D96C E107                       	smpsAlterNote       $07
0008D96E B30D 8001                  	dc.b	nD4, $0D, nRst, $01
0008D972 E108                       	smpsAlterNote       $08
0008D974 B502 8001                  	dc.b	nE4, $02, nRst, $01
0008D978 E109                       	smpsAlterNote       $09
0008D97A B603 B803 8001             	dc.b	nF4, $03, nG4, $03, nRst, $01
0008D980 E10B                       	smpsAlterNote       $0B
0008D982 BA0D                       	dc.b	nA4, $0D
0008D984 E108                       	smpsAlterNote       $08
0008D986 E701                       	dc.b	smpsNoAttack, $01
0008D988 E104                       	smpsAlterNote       $04
0008D98A E701                       	dc.b	smpsNoAttack, $01
0008D98C E108                       	smpsAlterNote       $08
0008D98E E701                       	dc.b	smpsNoAttack, $01
0008D990 E10E                       	smpsAlterNote       $0E
0008D992 E701                       	dc.b	smpsNoAttack, $01
0008D994 E10F                       	smpsAlterNote       $0F
0008D996 E701                       	dc.b	smpsNoAttack, $01
0008D998 E10B                       	smpsAlterNote       $0B
0008D99A E701                       	dc.b	smpsNoAttack, $01
0008D99C E105                       	smpsAlterNote       $05
0008D99E E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008D9A2 E108                       	smpsAlterNote       $08
0008D9A4 E701                       	dc.b	smpsNoAttack, $01
0008D9A6 E10E                       	smpsAlterNote       $0E
0008D9A8 E701                       	dc.b	smpsNoAttack, $01
0008D9AA E10F                       	smpsAlterNote       $0F
0008D9AC 8001                       	dc.b	nRst, $01
0008D9AE E109                       	smpsAlterNote       $09
0008D9B0 C20D                       	dc.b	nF5, $0D
0008D9B2 E103                       	smpsAlterNote       $03
0008D9B4 E701                       	dc.b	smpsNoAttack, $01
0008D9B6 E102                       	smpsAlterNote       $02
0008D9B8 E701                       	dc.b	smpsNoAttack, $01
0008D9BA E106                       	smpsAlterNote       $06
0008D9BC E701                       	dc.b	smpsNoAttack, $01
0008D9BE E10C                       	smpsAlterNote       $0C
0008D9C0 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008D9C4 E109                       	smpsAlterNote       $09
0008D9C6 E701                       	dc.b	smpsNoAttack, $01
0008D9C8 E103                       	smpsAlterNote       $03
0008D9CA E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008D9CE E109                       	smpsAlterNote       $09
0008D9D0 E701                       	dc.b	smpsNoAttack, $01
0008D9D2 E10C                       	smpsAlterNote       $0C
0008D9D4 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008D9D8 E106                       	smpsAlterNote       $06
0008D9DA E701                       	dc.b	smpsNoAttack, $01
0008D9DC E102                       	smpsAlterNote       $02
0008D9DE E701                       	dc.b	smpsNoAttack, $01
0008D9E0 E103                       	smpsAlterNote       $03
0008D9E2 E701                       	dc.b	smpsNoAttack, $01
0008D9E4 E109                       	smpsAlterNote       $09
0008D9E6 E701                       	dc.b	smpsNoAttack, $01
0008D9E8 E10D                       	smpsAlterNote       $0D
0008D9EA E701                       	dc.b	smpsNoAttack, $01
0008D9EC E109                       	smpsAlterNote       $09
0008D9EE E701                       	dc.b	smpsNoAttack, $01
0008D9F0 E106                       	smpsAlterNote       $06
0008D9F2 E701                       	dc.b	smpsNoAttack, $01
0008D9F4 E102                       	smpsAlterNote       $02
0008D9F6 E701                       	dc.b	smpsNoAttack, $01
0008D9F8 E106                       	smpsAlterNote       $06
0008D9FA E701                       	dc.b	smpsNoAttack, $01
0008D9FC E10C                       	smpsAlterNote       $0C
0008D9FE E701                       	dc.b	smpsNoAttack, $01
0008DA00 E10D                       	smpsAlterNote       $0D
0008DA02 E701                       	dc.b	smpsNoAttack, $01
0008DA04 E109                       	smpsAlterNote       $09
0008DA06 E701                       	dc.b	smpsNoAttack, $01
0008DA08 E103                       	smpsAlterNote       $03
0008DA0A E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008DA0E E106                       	smpsAlterNote       $06
0008DA10 E701                       	dc.b	smpsNoAttack, $01
0008DA12 E10C                       	smpsAlterNote       $0C
0008DA14 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008DA18 E106                       	smpsAlterNote       $06
0008DA1A E701                       	dc.b	smpsNoAttack, $01
0008DA1C E103                       	smpsAlterNote       $03
0008DA1E E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008DA22 E109                       	smpsAlterNote       $09
0008DA24 E701                       	dc.b	smpsNoAttack, $01
0008DA26 E10D                       	smpsAlterNote       $0D
0008DA28 E701                       	dc.b	smpsNoAttack, $01
0008DA2A E10C                       	smpsAlterNote       $0C
0008DA2C E701                       	dc.b	smpsNoAttack, $01
0008DA2E E106                       	smpsAlterNote       $06
0008DA30 E701                       	dc.b	smpsNoAttack, $01
0008DA32 E102                       	smpsAlterNote       $02
0008DA34 E701                       	dc.b	smpsNoAttack, $01
0008DA36 E106                       	smpsAlterNote       $06
0008DA38 E701                       	dc.b	smpsNoAttack, $01
0008DA3A E109                       	smpsAlterNote       $09
0008DA3C E701                       	dc.b	smpsNoAttack, $01
0008DA3E E10D                       	smpsAlterNote       $0D
0008DA40 E701                       	dc.b	smpsNoAttack, $01
0008DA42 E109                       	smpsAlterNote       $09
0008DA44 E701                       	dc.b	smpsNoAttack, $01
0008DA46 E103                       	smpsAlterNote       $03
0008DA48 E701 8001                  	dc.b	smpsNoAttack, $01, nRst, $01
0008DA4C E109                       	smpsAlterNote       $09
0008DA4E C206                       	dc.b	nF5, $06
0008DA50 E108                       	smpsAlterNote       $08
0008DA52 C10E                       	dc.b	nE5, $0E
0008DA54 E102                       	smpsAlterNote       $02
0008DA56 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008DA5A E108                       	smpsAlterNote       $08
0008DA5C E701                       	dc.b	smpsNoAttack, $01
0008DA5E E10B                       	smpsAlterNote       $0B
0008DA60 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008DA64 E105                       	smpsAlterNote       $05
0008DA66 E701                       	dc.b	smpsNoAttack, $01
0008DA68 E101                       	smpsAlterNote       $01
0008DA6A E701                       	dc.b	smpsNoAttack, $01
0008DA6C E102                       	smpsAlterNote       $02
0008DA6E E701                       	dc.b	smpsNoAttack, $01
0008DA70 E108                       	smpsAlterNote       $08
0008DA72 E701                       	dc.b	smpsNoAttack, $01
0008DA74 E10C                       	smpsAlterNote       $0C
0008DA76 E701                       	dc.b	smpsNoAttack, $01
0008DA78 E107                       	smpsAlterNote       $07
0008DA7A BF0E                       	dc.b	nD5, $0E
0008DA7C E101                       	smpsAlterNote       $01
0008DA7E E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008DA82 E107                       	smpsAlterNote       $07
0008DA84 E701                       	dc.b	smpsNoAttack, $01
0008DA86 E10A                       	smpsAlterNote       $0A
0008DA88 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008DA8C E104                       	smpsAlterNote       $04
0008DA8E E701                       	dc.b	smpsNoAttack, $01
0008DA90 E100                       	smpsAlterNote       $00
0008DA92 E701                       	dc.b	smpsNoAttack, $01
0008DA94 E104                       	smpsAlterNote       $04
0008DA96 E701                       	dc.b	smpsNoAttack, $01
0008DA98 E107                       	smpsAlterNote       $07
0008DA9A E701                       	dc.b	smpsNoAttack, $01
0008DA9C E10B                       	smpsAlterNote       $0B
0008DA9E E701                       	dc.b	smpsNoAttack, $01
0008DAA0 E107                       	smpsAlterNote       $07
0008DAA2 E701                       	dc.b	smpsNoAttack, $01
0008DAA4 E101                       	smpsAlterNote       $01
0008DAA6 E701                       	dc.b	smpsNoAttack, $01
0008DAA8 E100                       	smpsAlterNote       $00
0008DAAA E701                       	dc.b	smpsNoAttack, $01
0008DAAC E104                       	smpsAlterNote       $04
0008DAAE E701                       	dc.b	smpsNoAttack, $01
0008DAB0 E10A                       	smpsAlterNote       $0A
0008DAB2 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008DAB6 E107                       	smpsAlterNote       $07
0008DAB8 E701                       	dc.b	smpsNoAttack, $01
0008DABA E101                       	smpsAlterNote       $01
0008DABC E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008DAC0 E107                       	smpsAlterNote       $07
0008DAC2 E701                       	dc.b	smpsNoAttack, $01
0008DAC4 E10A                       	smpsAlterNote       $0A
0008DAC6 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008DACA E104                       	smpsAlterNote       $04
0008DACC E701                       	dc.b	smpsNoAttack, $01
0008DACE E100                       	smpsAlterNote       $00
0008DAD0 E701                       	dc.b	smpsNoAttack, $01
0008DAD2 E101                       	smpsAlterNote       $01
0008DAD4 E701                       	dc.b	smpsNoAttack, $01
0008DAD6 E107                       	smpsAlterNote       $07
0008DAD8 E701                       	dc.b	smpsNoAttack, $01
0008DADA E10B                       	smpsAlterNote       $0B
0008DADC E701                       	dc.b	smpsNoAttack, $01
0008DADE E107                       	smpsAlterNote       $07
0008DAE0 E701                       	dc.b	smpsNoAttack, $01
0008DAE2 E104                       	smpsAlterNote       $04
0008DAE4 E701                       	dc.b	smpsNoAttack, $01
0008DAE6 E100                       	smpsAlterNote       $00
0008DAE8 E701                       	dc.b	smpsNoAttack, $01
0008DAEA E104                       	smpsAlterNote       $04
0008DAEC E701                       	dc.b	smpsNoAttack, $01
0008DAEE E10A                       	smpsAlterNote       $0A
0008DAF0 E701                       	dc.b	smpsNoAttack, $01
0008DAF2 E10B                       	smpsAlterNote       $0B
0008DAF4 E701                       	dc.b	smpsNoAttack, $01
0008DAF6 E107                       	smpsAlterNote       $07
0008DAF8 E701                       	dc.b	smpsNoAttack, $01
0008DAFA E101                       	smpsAlterNote       $01
0008DAFC E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008DB00 E104                       	smpsAlterNote       $04
0008DB02 E701                       	dc.b	smpsNoAttack, $01
0008DB04 E10A                       	smpsAlterNote       $0A
0008DB06 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008DB0A E104                       	smpsAlterNote       $04
0008DB0C E701                       	dc.b	smpsNoAttack, $01
0008DB0E E101                       	smpsAlterNote       $01
0008DB10 E701                       	dc.b	smpsNoAttack, $01
0008DB14 E107                       	smpsAlterNote       $07
0008DB16 E6FF                       	smpsAlterVol        $FF
0008DB18 BF06 8001 BF03 BF03 8001+  	dc.b	nD5, $06, nRst, $01, nD5, $03, nD5, $03, nRst, $01, nCs5, $03
0008DB24 8004                       	dc.b	nRst, $04
0008DB28 E109                       	smpsAlterNote       $09
0008DB2A E602                       	smpsAlterVol        $02
0008DB2C B803 B603 8001             	dc.b	nG4, $03, nF4, $03, nRst, $01
0008DB32 E108                       	smpsAlterNote       $08
0008DB34 B502 8001                  	dc.b	nE4, $02, nRst, $01
0008DB38 E109                       	smpsAlterNote       $09
0008DB3A B60D                       	dc.b	nF4, $0D
0008DB3C E106                       	smpsAlterNote       $06
0008DB3E E701                       	dc.b	smpsNoAttack, $01
0008DB40 E102                       	smpsAlterNote       $02
0008DB42 E701                       	dc.b	smpsNoAttack, $01
0008DB44 E106                       	smpsAlterNote       $06
0008DB46 E701                       	dc.b	smpsNoAttack, $01
0008DB48 E109                       	smpsAlterNote       $09
0008DB4A E701                       	dc.b	smpsNoAttack, $01
0008DB4C E10D                       	smpsAlterNote       $0D
0008DB4E E701                       	dc.b	smpsNoAttack, $01
0008DB50 E109                       	smpsAlterNote       $09
0008DB52 E701                       	dc.b	smpsNoAttack, $01
0008DB54 E103                       	smpsAlterNote       $03
0008DB56 E701                       	dc.b	smpsNoAttack, $01
0008DB58 E102                       	smpsAlterNote       $02
0008DB5A E701                       	dc.b	smpsNoAttack, $01
0008DB5C E106                       	smpsAlterNote       $06
0008DB5E E701                       	dc.b	smpsNoAttack, $01
0008DB60 E10C                       	smpsAlterNote       $0C
0008DB62 E701                       	dc.b	smpsNoAttack, $01
0008DB64 E10D                       	smpsAlterNote       $0D
0008DB66 8001                       	dc.b	nRst, $01
0008DB68 E109                       	smpsAlterNote       $09
0008DB6A B80D                       	dc.b	nG4, $0D
0008DB6C E106                       	smpsAlterNote       $06
0008DB6E E701                       	dc.b	smpsNoAttack, $01
0008DB70 E102                       	smpsAlterNote       $02
0008DB72 E701                       	dc.b	smpsNoAttack, $01
0008DB74 E106                       	smpsAlterNote       $06
0008DB76 E701                       	dc.b	smpsNoAttack, $01
0008DB78 E10C                       	smpsAlterNote       $0C
0008DB7A E701                       	dc.b	smpsNoAttack, $01
0008DB7C E10D                       	smpsAlterNote       $0D
0008DB7E E701                       	dc.b	smpsNoAttack, $01
0008DB80 E109                       	smpsAlterNote       $09
0008DB82 E701                       	dc.b	smpsNoAttack, $01
0008DB84 E103                       	smpsAlterNote       $03
0008DB86 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008DB8A E106                       	smpsAlterNote       $06
0008DB8C E701                       	dc.b	smpsNoAttack, $01
0008DB8E E10C                       	smpsAlterNote       $0C
0008DB90 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008DB94 E106                       	smpsAlterNote       $06
0008DB96 E701                       	dc.b	smpsNoAttack, $01
0008DB98 E103                       	smpsAlterNote       $03
0008DB9A E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008DB9E E109                       	smpsAlterNote       $09
0008DBA0 E701                       	dc.b	smpsNoAttack, $01
0008DBA2 E10D                       	smpsAlterNote       $0D
0008DBA4 E701                       	dc.b	smpsNoAttack, $01
0008DBA6 E10C                       	smpsAlterNote       $0C
0008DBA8 E701                       	dc.b	smpsNoAttack, $01
0008DBAA E109                       	smpsAlterNote       $09
0008DBAC 8001                       	dc.b	nRst, $01
0008DBAE E10B                       	smpsAlterNote       $0B
0008DBB0 BA03                       	dc.b	nA4, $03
0008DBB2 E10C                       	smpsAlterNote       $0C
0008DBB4 BB03 8001                  	dc.b	nBb4, $03, nRst, $01
0008DBB8 E10B                       	smpsAlterNote       $0B
0008DBBA BA02 8001 C603             	dc.b	nA4, $02, nRst, $01, nA5, $03
0008DBC0 E10C                       	smpsAlterNote       $0C
0008DBC2 C703 8001                  	dc.b	nBb5, $03, nRst, $01
0008DBC6 E10B                       	smpsAlterNote       $0B
0008DBC8 C603 D203 8001             	dc.b	nA5, $03, nA6, $03, nRst, $01
0008DBCE E10C                       	smpsAlterNote       $0C
0008DBD0 D303                       	dc.b	nBb6, $03
0008DBD2 E10B                       	smpsAlterNote       $0B
0008DBD4 D20D                       	dc.b	nA6, $0D
0008DBD6 E108                       	smpsAlterNote       $08
0008DBD8 E701                       	dc.b	smpsNoAttack, $01
0008DBDA E104                       	smpsAlterNote       $04
0008DBDC E701                       	dc.b	smpsNoAttack, $01
0008DBDE E105                       	smpsAlterNote       $05
0008DBE0 E701                       	dc.b	smpsNoAttack, $01
0008DBE2 E10B                       	smpsAlterNote       $0B
0008DBE4 E701                       	dc.b	smpsNoAttack, $01
0008DBE6 E10F                       	smpsAlterNote       $0F
0008DBE8 E701                       	dc.b	smpsNoAttack, $01
0008DBEA E10B                       	smpsAlterNote       $0B
0008DBEC E701                       	dc.b	smpsNoAttack, $01
0008DBEE E108                       	smpsAlterNote       $08
0008DBF0 E701                       	dc.b	smpsNoAttack, $01
0008DBF2 E104                       	smpsAlterNote       $04
0008DBF4 E701                       	dc.b	smpsNoAttack, $01
0008DBF6 E108                       	smpsAlterNote       $08
0008DBF8 E701                       	dc.b	smpsNoAttack, $01
0008DBFA E10E                       	smpsAlterNote       $0E
0008DBFC E701                       	dc.b	smpsNoAttack, $01
0008DBFE E10F                       	smpsAlterNote       $0F
0008DC00 E701                       	dc.b	smpsNoAttack, $01
0008DC02 E10B                       	smpsAlterNote       $0B
0008DC04 E701                       	dc.b	smpsNoAttack, $01
0008DC06 E105                       	smpsAlterNote       $05
0008DC08 E701 E701 8007             	dc.b	smpsNoAttack, $01, smpsNoAttack, $01, nRst, $07
0008DC0E E109                       	smpsAlterNote       $09
0008DC10 CE07                       	dc.b	nF6, $07
0008DC12 E108                       	smpsAlterNote       $08
0008DC14 CD06 8001                  	dc.b	nE6, $06, nRst, $01
0008DC18 E109                       	smpsAlterNote       $09
0008DC1A CE03 8001                  	dc.b	nF6, $03, nRst, $01
0008DC1E E108                       	smpsAlterNote       $08
0008DC20 CC0D                       	dc.b	nEb6, $0D
0008DC22 E102                       	smpsAlterNote       $02
0008DC24 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008DC28 E108                       	smpsAlterNote       $08
0008DC2A E701                       	dc.b	smpsNoAttack, $01
0008DC2C E10B                       	smpsAlterNote       $0B
0008DC2E E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008DC32 E105                       	smpsAlterNote       $05
0008DC34 E701                       	dc.b	smpsNoAttack, $01
0008DC36 E101                       	smpsAlterNote       $01
0008DC38 E701                       	dc.b	smpsNoAttack, $01
0008DC3A E102                       	smpsAlterNote       $02
0008DC3C E701                       	dc.b	smpsNoAttack, $01
0008DC3E E108                       	smpsAlterNote       $08
0008DC40 E701                       	dc.b	smpsNoAttack, $01
0008DC42 E10C                       	smpsAlterNote       $0C
0008DC44 E701                       	dc.b	smpsNoAttack, $01
0008DC46 E108                       	smpsAlterNote       $08
0008DC48 E701                       	dc.b	smpsNoAttack, $01
0008DC4A E105                       	smpsAlterNote       $05
0008DC4C E701                       	dc.b	smpsNoAttack, $01
0008DC4E E101                       	smpsAlterNote       $01
0008DC50 E701                       	dc.b	smpsNoAttack, $01
0008DC52 E105                       	smpsAlterNote       $05
0008DC54 E701                       	dc.b	smpsNoAttack, $01
0008DC56 E10B                       	smpsAlterNote       $0B
0008DC58 E701                       	dc.b	smpsNoAttack, $01
0008DC5A E10C                       	smpsAlterNote       $0C
0008DC5C E701                       	dc.b	smpsNoAttack, $01
0008DC5E E108                       	smpsAlterNote       $08
0008DC60 E701                       	dc.b	smpsNoAttack, $01
0008DC62 E107                       	smpsAlterNote       $07
0008DC64 CB03 8001 CA03 CB03 8001   	dc.b	nD6, $03, nRst, $01, nCs6, $03, nD6, $03, nRst, $01
0008DC6E E10B                       	smpsAlterNote       $0B
0008DC70 C602 8001 C503 C603 8001   	dc.b	nA5, $02, nRst, $01, nAb5, $03, nA5, $03, nRst, $01
0008DC7A E109                       	smpsAlterNote       $09
0008DC7C C203                       	dc.b	nF5, $03
0008DC7E E108                       	smpsAlterNote       $08
0008DC80 C103 8001                  	dc.b	nE5, $03, nRst, $01
0008DC84 E109                       	smpsAlterNote       $09
0008DC86 C20D                       	dc.b	nF5, $0D
0008DC88 E108                       	smpsAlterNote       $08
0008DC8A C10E                       	dc.b	nE5, $0E
0008DC8C E107                       	smpsAlterNote       $07
0008DC8E BF0D                       	dc.b	nD5, $0D
0008DC90 E104                       	smpsAlterNote       $04
0008DC92 E701                       	dc.b	smpsNoAttack, $01
0008DC94 E100                       	smpsAlterNote       $00
0008DC96 E701                       	dc.b	smpsNoAttack, $01
0008DC98 E104                       	smpsAlterNote       $04
0008DC9A E701                       	dc.b	smpsNoAttack, $01
0008DC9C E107                       	smpsAlterNote       $07
0008DC9E E701                       	dc.b	smpsNoAttack, $01
0008DCA0 E10B                       	smpsAlterNote       $0B
0008DCA2 E701                       	dc.b	smpsNoAttack, $01
0008DCA4 E107                       	smpsAlterNote       $07
0008DCA6 E701                       	dc.b	smpsNoAttack, $01
0008DCA8 E101                       	smpsAlterNote       $01
0008DCAA E701                       	dc.b	smpsNoAttack, $01
0008DCAC E100                       	smpsAlterNote       $00
0008DCAE E701                       	dc.b	smpsNoAttack, $01
0008DCB0 E104                       	smpsAlterNote       $04
0008DCB2 E701                       	dc.b	smpsNoAttack, $01
0008DCB4 E10A                       	smpsAlterNote       $0A
0008DCB6 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008DCBA E107                       	smpsAlterNote       $07
0008DCBC E701                       	dc.b	smpsNoAttack, $01
0008DCBE E101                       	smpsAlterNote       $01
0008DCC0 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008DCC4 E107                       	smpsAlterNote       $07
0008DCC6 E701                       	dc.b	smpsNoAttack, $01
0008DCC8 E10A                       	smpsAlterNote       $0A
0008DCCA E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008DCCE E104                       	smpsAlterNote       $04
0008DCD0 E701                       	dc.b	smpsNoAttack, $01
0008DCD2 E100                       	smpsAlterNote       $00
0008DCD4 E701                       	dc.b	smpsNoAttack, $01
0008DCD6 E101                       	smpsAlterNote       $01
0008DCD8 E701                       	dc.b	smpsNoAttack, $01
0008DCDA E107                       	smpsAlterNote       $07
0008DCDC E701                       	dc.b	smpsNoAttack, $01
0008DCDE E10B                       	smpsAlterNote       $0B
0008DCE0 E701                       	dc.b	smpsNoAttack, $01
0008DCE2 E107                       	smpsAlterNote       $07
0008DCE4 E701                       	dc.b	smpsNoAttack, $01
0008DCE6 E104                       	smpsAlterNote       $04
0008DCE8 E701                       	dc.b	smpsNoAttack, $01
0008DCEA E100                       	smpsAlterNote       $00
0008DCEC E701                       	dc.b	smpsNoAttack, $01
0008DCEE E104                       	smpsAlterNote       $04
0008DCF0 E701                       	dc.b	smpsNoAttack, $01
0008DCF2 E10A                       	smpsAlterNote       $0A
0008DCF4 E701                       	dc.b	smpsNoAttack, $01
0008DCF6 E10B                       	smpsAlterNote       $0B
0008DCF8 E701                       	dc.b	smpsNoAttack, $01
0008DCFA E107                       	smpsAlterNote       $07
0008DCFC E701                       	dc.b	smpsNoAttack, $01
0008DCFE E101                       	smpsAlterNote       $01
0008DD00 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008DD04 E104                       	smpsAlterNote       $04
0008DD06 E701                       	dc.b	smpsNoAttack, $01
0008DD08 E10A                       	smpsAlterNote       $0A
0008DD0A E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008DD0E E104                       	smpsAlterNote       $04
0008DD10 E701                       	dc.b	smpsNoAttack, $01
0008DD12 E101                       	smpsAlterNote       $01
0008DD14 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008DD18 E107                       	smpsAlterNote       $07
0008DD1A E701                       	dc.b	smpsNoAttack, $01
0008DD1C E10B                       	smpsAlterNote       $0B
0008DD1E E701                       	dc.b	smpsNoAttack, $01
0008DD20 E10A                       	smpsAlterNote       $0A
0008DD22 E701                       	dc.b	smpsNoAttack, $01
0008DD24 E104                       	smpsAlterNote       $04
0008DD26 E701                       	dc.b	smpsNoAttack, $01
0008DD28 E100                       	smpsAlterNote       $00
0008DD2A E701                       	dc.b	smpsNoAttack, $01
0008DD2C E104                       	smpsAlterNote       $04
0008DD2E E701                       	dc.b	smpsNoAttack, $01
0008DD30 E107                       	smpsAlterNote       $07
0008DD32 E701                       	dc.b	smpsNoAttack, $01
0008DD34 E10B                       	smpsAlterNote       $0B
0008DD36 E701                       	dc.b	smpsNoAttack, $01
0008DD38 E107                       	smpsAlterNote       $07
0008DD3A E701                       	dc.b	smpsNoAttack, $01
0008DD3C E101                       	smpsAlterNote       $01
0008DD3E E701                       	dc.b	smpsNoAttack, $01
0008DD40 E100                       	smpsAlterNote       $00
0008DD42 E701                       	dc.b	smpsNoAttack, $01
0008DD44 E104                       	smpsAlterNote       $04
0008DD46 E701                       	dc.b	smpsNoAttack, $01
0008DD48 E10A                       	smpsAlterNote       $0A
0008DD4A E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008DD4E E107                       	smpsAlterNote       $07
0008DD50 E701                       	dc.b	smpsNoAttack, $01
0008DD52 E101                       	smpsAlterNote       $01
0008DD54 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008DD58 E107                       	smpsAlterNote       $07
0008DD5A E701                       	dc.b	smpsNoAttack, $01
0008DD5C E10A                       	smpsAlterNote       $0A
0008DD5E E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008DD62 E104                       	smpsAlterNote       $04
0008DD64 E701                       	dc.b	smpsNoAttack, $01
0008DD66 E100                       	smpsAlterNote       $00
0008DD68 E701                       	dc.b	smpsNoAttack, $01
0008DD6A E101                       	smpsAlterNote       $01
0008DD6C E701                       	dc.b	smpsNoAttack, $01
0008DD6E E107                       	smpsAlterNote       $07
0008DD70 E701                       	dc.b	smpsNoAttack, $01
0008DD72 E10B                       	smpsAlterNote       $0B
0008DD74 E701                       	dc.b	smpsNoAttack, $01
0008DD76 E107                       	smpsAlterNote       $07
0008DD78 E701                       	dc.b	smpsNoAttack, $01
0008DD7A E104                       	smpsAlterNote       $04
0008DD7C E701                       	dc.b	smpsNoAttack, $01
0008DD7E E100                       	smpsAlterNote       $00
0008DD80 E701                       	dc.b	smpsNoAttack, $01
0008DD82 E101                       	smpsAlterNote       $01
0008DD84 8001                       	dc.b	nRst, $01
0008DD86 E109                       	smpsAlterNote       $09
0008DD88 C20D                       	dc.b	nF5, $0D
0008DD8A E106                       	smpsAlterNote       $06
0008DD8C E701                       	dc.b	smpsNoAttack, $01
0008DD8E E102                       	smpsAlterNote       $02
0008DD90 E701                       	dc.b	smpsNoAttack, $01
0008DD92 E106                       	smpsAlterNote       $06
0008DD94 E701                       	dc.b	smpsNoAttack, $01
0008DD96 E10C                       	smpsAlterNote       $0C
0008DD98 E701                       	dc.b	smpsNoAttack, $01
0008DD9A E10D                       	smpsAlterNote       $0D
0008DD9C E701                       	dc.b	smpsNoAttack, $01
0008DD9E E109                       	smpsAlterNote       $09
0008DDA0 E701                       	dc.b	smpsNoAttack, $01
0008DDA2 E103                       	smpsAlterNote       $03
0008DDA4 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008DDA8 E106                       	smpsAlterNote       $06
0008DDAA E701                       	dc.b	smpsNoAttack, $01
0008DDAC E10C                       	smpsAlterNote       $0C
0008DDAE E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008DDB2 E106                       	smpsAlterNote       $06
0008DDB4 E701                       	dc.b	smpsNoAttack, $01
0008DDB6 E103                       	smpsAlterNote       $03
0008DDB8 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008DDBC E109                       	smpsAlterNote       $09
0008DDBE E701                       	dc.b	smpsNoAttack, $01
0008DDC0 E10D                       	smpsAlterNote       $0D
0008DDC2 E701                       	dc.b	smpsNoAttack, $01
0008DDC4 E10C                       	smpsAlterNote       $0C
0008DDC6 E701                       	dc.b	smpsNoAttack, $01
0008DDC8 E109                       	smpsAlterNote       $09
0008DDCA 8001                       	dc.b	nRst, $01
0008DDCC E108                       	smpsAlterNote       $08
0008DDCE C10D                       	dc.b	nE5, $0D
0008DDD0 E109                       	smpsAlterNote       $09
0008DDD2 C20A 8001                  	dc.b	nF5, $0A, nRst, $01
0008DDD6 E108                       	smpsAlterNote       $08
0008DDD8 C10D                       	dc.b	nE5, $0D
0008DDDA E102                       	smpsAlterNote       $02
0008DDDC E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008DDE0 E105                       	smpsAlterNote       $05
0008DDE2 E701                       	dc.b	smpsNoAttack, $01
0008DDE4 E108                       	smpsAlterNote       $08
0008DDE6 8001                       	dc.b	nRst, $01
0008DDE8 E107                       	smpsAlterNote       $07
0008DDEA BF0D                       	dc.b	nD5, $0D
0008DDEC E108                       	smpsAlterNote       $08
0008DDEE C107                       	dc.b	nE5, $07
0008DDF0 E109                       	smpsAlterNote       $09
0008DDF2 C207 C406 8001             	dc.b	nF5, $07, nG5, $06, nRst, $01
0008DDF8 E10B                       	smpsAlterNote       $0B
0008DDFA C603                       	dc.b	nA5, $03
0008DDFC E10C                       	smpsAlterNote       $0C
0008DDFE C707 C703 8001             	dc.b	nBb5, $07, nBb5, $03, nRst, $01
0008DE04 E10B                       	smpsAlterNote       $0B
0008DE06 C603 D206 8001             	dc.b	nA5, $03, nA6, $06, nRst, $01
0008DE0C E109                       	smpsAlterNote       $09
0008DE0E D003                       	dc.b	nG6, $03
0008DE10 E108                       	smpsAlterNote       $08
0008DE12 CD02 8001                  	dc.b	nE6, $02, nRst, $01
0008DE16 E10B                       	smpsAlterNote       $0B
0008DE18 C601 8001                  	dc.b	nA5, $01, nRst, $01
0008DE1C E108                       	smpsAlterNote       $08
0008DE1E C102                       	dc.b	nE5, $02
0008DE22 E10C                       	smpsAlterNote       $0C
0008DE24 E6FB                       	smpsAlterVol        $FB
0008DE26 A306 800F A303 A303 8019+  	dc.b	nBb2, $06, nRst, $0F, nBb2, $03, nBb2, $03, nRst, $19, nBb2, $02
0008DE32 8001                       	dc.b	nRst, $01
0008DE34 E10B                       	smpsAlterNote       $0B
0008DE36 A206 800F A202 8001        	dc.b	nA2, $06, nRst, $0F, nA2, $02, nRst, $01
0008DE3E E107                       	smpsAlterNote       $07
0008DE40 A706 8001                  	dc.b	nD3, $06, nRst, $01
0008DE44 E10B                       	smpsAlterNote       $0B
0008DE46 A203                       	dc.b	nA2, $03
0008DE48 E109                       	smpsAlterNote       $09
0008DE4A AA03 8001                  	dc.b	nF3, $03, nRst, $01
0008DE4E E108                       	smpsAlterNote       $08
0008DE50 A906                       	dc.b	nE3, $06
0008DE52 E107                       	smpsAlterNote       $07
0008DE54 A703 8001                  	dc.b	nD3, $03, nRst, $01
0008DE58 E106                       	smpsAlterNote       $06
0008DE5A A503                       	dc.b	nC3, $03
0008DE5C E10C                       	smpsAlterNote       $0C
0008DE5E A303 8001                  	dc.b	nBb2, $03, nRst, $01
0008DE62 E10B                       	smpsAlterNote       $0B
0008DE64 A203 8004                  	dc.b	nA2, $03, nRst, $04
0008DE68 E11B                       	smpsAlterNote       $1B
0008DE6A C401                       	dc.b	nG5, $01
0008DE6C E1F4                       	smpsAlterNote       $F4
0008DE6E E7C5 01                    	dc.b	smpsNoAttack, nAb5, $01
0008DE71 E106                       	smpsAlterNote       $06
0008DE73 E701                       	dc.b	smpsNoAttack, $01
0008DE75 E10F                       	smpsAlterNote       $0F
0008DE77 E701                       	dc.b	smpsNoAttack, $01
0008DE79 E1E4                       	smpsAlterNote       $E4
0008DE7B E7C6 01                    	dc.b	smpsNoAttack, nA5, $01
0008DE7E E1F6                       	smpsAlterNote       $F6
0008DE80 E701                       	dc.b	smpsNoAttack, $01
0008DE82 E108                       	smpsAlterNote       $08
0008DE84 E701                       	dc.b	smpsNoAttack, $01
0008DE86 E10B                       	smpsAlterNote       $0B
0008DE88 E706                       	dc.b	smpsNoAttack, $06
0008DE8A E105                       	smpsAlterNote       $05
0008DE8C E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008DE90 E108                       	smpsAlterNote       $08
0008DE92 E701                       	dc.b	smpsNoAttack, $01
0008DE94 E10E                       	smpsAlterNote       $0E
0008DE96 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008DE9A E108                       	smpsAlterNote       $08
0008DE9C E701                       	dc.b	smpsNoAttack, $01
0008DE9E E105                       	smpsAlterNote       $05
0008DEA0 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008DEA4 E10B                       	smpsAlterNote       $0B
0008DEA6 E701                       	dc.b	smpsNoAttack, $01
0008DEA8 E10F                       	smpsAlterNote       $0F
0008DEAA E701                       	dc.b	smpsNoAttack, $01
0008DEAC E10E                       	smpsAlterNote       $0E
0008DEAE E701                       	dc.b	smpsNoAttack, $01
0008DEB0 E108                       	smpsAlterNote       $08
0008DEB2 E701                       	dc.b	smpsNoAttack, $01
0008DEB4 E104                       	smpsAlterNote       $04
0008DEB6 E701                       	dc.b	smpsNoAttack, $01
0008DEB8 E108                       	smpsAlterNote       $08
0008DEBA E701                       	dc.b	smpsNoAttack, $01
0008DEBC E10B                       	smpsAlterNote       $0B
0008DEBE E701                       	dc.b	smpsNoAttack, $01
0008DEC0 E10F                       	smpsAlterNote       $0F
0008DEC2 E701                       	dc.b	smpsNoAttack, $01
0008DEC4 E10B                       	smpsAlterNote       $0B
0008DEC6 E701                       	dc.b	smpsNoAttack, $01
0008DEC8 E105                       	smpsAlterNote       $05
0008DECA E701                       	dc.b	smpsNoAttack, $01
0008DECC E104                       	smpsAlterNote       $04
0008DECE E701                       	dc.b	smpsNoAttack, $01
0008DED0 E108                       	smpsAlterNote       $08
0008DED2 E701                       	dc.b	smpsNoAttack, $01
0008DED4 E10E                       	smpsAlterNote       $0E
0008DED6 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008DEDA E10B                       	smpsAlterNote       $0B
0008DEDC E701                       	dc.b	smpsNoAttack, $01
0008DEDE E105                       	smpsAlterNote       $05
0008DEE0 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008DEE4 E10B                       	smpsAlterNote       $0B
0008DEE6 E701                       	dc.b	smpsNoAttack, $01
0008DEE8 E10E                       	smpsAlterNote       $0E
0008DEEA E701                       	dc.b	smpsNoAttack, $01
0008DEEC E10F                       	smpsAlterNote       $0F
0008DEEE 8001                       	dc.b	nRst, $01
0008DEF0 E109                       	smpsAlterNote       $09
0008DEF2 C403 C203 8001             	dc.b	nG5, $03, nF5, $03, nRst, $01
0008DEF8 E108                       	smpsAlterNote       $08
0008DEFA C101 8001                  	dc.b	nE5, $01, nRst, $01
0008DEFE E109                       	smpsAlterNote       $09
0008DF00 C202                       	dc.b	nF5, $02
0008DF02 E108                       	smpsAlterNote       $08
0008DF04 C102                       	dc.b	nE5, $02
0008DF06 E107                       	smpsAlterNote       $07
0008DF08 BF02 8001                  	dc.b	nD5, $02, nRst, $01
0008DF0C E108                       	smpsAlterNote       $08
0008DF0E C101 8001                  	dc.b	nE5, $01, nRst, $01
0008DF12 E107                       	smpsAlterNote       $07
0008DF14 BF02                       	dc.b	nD5, $02
0008DF16 E106                       	smpsAlterNote       $06
0008DF18 BD02 8001                  	dc.b	nC5, $02, nRst, $01
0008DF1C E107                       	smpsAlterNote       $07
0008DF1E BF01 8001                  	dc.b	nD5, $01, nRst, $01
0008DF22 E106                       	smpsAlterNote       $06
0008DF24 BD02                       	dc.b	nC5, $02
0008DF26 E10C                       	smpsAlterNote       $0C
0008DF28 BB02                       	dc.b	nBb4, $02
0008DF2A E106                       	smpsAlterNote       $06
0008DF2C BD02 8001                  	dc.b	nC5, $02, nRst, $01
0008DF30 E10C                       	smpsAlterNote       $0C
0008DF32 BB01 8001                  	dc.b	nBb4, $01, nRst, $01
0008DF36 E10B                       	smpsAlterNote       $0B
0008DF38 BA02                       	dc.b	nA4, $02
0008DF3A E10C                       	smpsAlterNote       $0C
0008DF3C BB02                       	dc.b	nBb4, $02
0008DF3E E10B                       	smpsAlterNote       $0B
0008DF40 BA02 8001 B901 8001 BA02   	dc.b	nA4, $02, nRst, $01, nAb4, $01, nRst, $01, nA4, $02
0008DF4A E108                       	smpsAlterNote       $08
0008DF4C B502 8001 C101 8001        	dc.b	nE4, $02, nRst, $01, nE5, $01, nRst, $01
0008DF54 E107                       	smpsAlterNote       $07
0008DF56 BE02                       	dc.b	nCs5, $02
0008DF58 E10B                       	smpsAlterNote       $0B
0008DF5A BA02                       	dc.b	nA4, $02
0008DF5C E109                       	smpsAlterNote       $09
0008DF5E B802 8001                  	dc.b	nG4, $02, nRst, $01
0008DF62 E108                       	smpsAlterNote       $08
0008DF64 B501 8001                  	dc.b	nE4, $01, nRst, $01
0008DF68 E10B                       	smpsAlterNote       $0B
0008DF6A AE02                       	dc.b	nA3, $02
0008DF6C E10C                       	smpsAlterNote       $0C
0008DF6E A307 800E A303 A303 8019+  	dc.b	nBb2, $07, nRst, $0E, nBb2, $03, nBb2, $03, nRst, $19, nBb2, $03
0008DF7A E10B                       	smpsAlterNote       $0B
0008DF7C A206 800F A202 8001        	dc.b	nA2, $06, nRst, $0F, nA2, $02, nRst, $01
0008DF84 E107                       	smpsAlterNote       $07
0008DF86 A706 8001                  	dc.b	nD3, $06, nRst, $01
0008DF8A E10B                       	smpsAlterNote       $0B
0008DF8C A203                       	dc.b	nA2, $03
0008DF8E E109                       	smpsAlterNote       $09
0008DF90 AA03 8001                  	dc.b	nF3, $03, nRst, $01
0008DF94 E108                       	smpsAlterNote       $08
0008DF96 A906 8001                  	dc.b	nE3, $06, nRst, $01
0008DF9A E107                       	smpsAlterNote       $07
0008DF9C A702 8001                  	dc.b	nD3, $02, nRst, $01
0008DFA0 E106                       	smpsAlterNote       $06
0008DFA2 A503                       	dc.b	nC3, $03
0008DFA4 E10C                       	smpsAlterNote       $0C
0008DFA6 A303 8001                  	dc.b	nBb2, $03, nRst, $01
0008DFAC E107                       	smpsAlterNote       $07
0008DFAE B20D                       	dc.b	nCs4, $0D
0008DFB0 E104                       	smpsAlterNote       $04
0008DFB2 E701                       	dc.b	smpsNoAttack, $01
0008DFB4 E100                       	smpsAlterNote       $00
0008DFB6 E701                       	dc.b	smpsNoAttack, $01
0008DFB8 E104                       	smpsAlterNote       $04
0008DFBA E701                       	dc.b	smpsNoAttack, $01
0008DFBC E10A                       	smpsAlterNote       $0A
0008DFBE E701                       	dc.b	smpsNoAttack, $01
0008DFC0 E10B                       	smpsAlterNote       $0B
0008DFC2 E701                       	dc.b	smpsNoAttack, $01
0008DFC4 E107                       	smpsAlterNote       $07
0008DFC6 E701                       	dc.b	smpsNoAttack, $01
0008DFC8 E101                       	smpsAlterNote       $01
0008DFCA E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008DFCE E104                       	smpsAlterNote       $04
0008DFD0 E701                       	dc.b	smpsNoAttack, $01
0008DFD2 E10A                       	smpsAlterNote       $0A
0008DFD4 E701                       	dc.b	smpsNoAttack, $01
0008DFD6 E10B                       	smpsAlterNote       $0B
0008DFD8 8001                       	dc.b	nRst, $01
0008DFDA E107                       	smpsAlterNote       $07
0008DFDC B30D                       	dc.b	nD4, $0D
0008DFDE E104                       	smpsAlterNote       $04
0008DFE0 E701                       	dc.b	smpsNoAttack, $01
0008DFE2 E100                       	smpsAlterNote       $00
0008DFE4 E701                       	dc.b	smpsNoAttack, $01
0008DFE6 E104                       	smpsAlterNote       $04
0008DFE8 E701                       	dc.b	smpsNoAttack, $01
0008DFEA E10A                       	smpsAlterNote       $0A
0008DFEC E701                       	dc.b	smpsNoAttack, $01
0008DFEE E10B                       	smpsAlterNote       $0B
0008DFF0 E701                       	dc.b	smpsNoAttack, $01
0008DFF2 E107                       	smpsAlterNote       $07
0008DFF4 E701                       	dc.b	smpsNoAttack, $01
0008DFF6 E101                       	smpsAlterNote       $01
0008DFF8 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008DFFC E104                       	smpsAlterNote       $04
0008DFFE E701                       	dc.b	smpsNoAttack, $01
0008E000 E10A                       	smpsAlterNote       $0A
0008E002 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008E006 E104                       	smpsAlterNote       $04
0008E008 E701                       	dc.b	smpsNoAttack, $01
0008E00A E101                       	smpsAlterNote       $01
0008E00C E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008E010 E107                       	smpsAlterNote       $07
0008E012 E701                       	dc.b	smpsNoAttack, $01
0008E014 E10B                       	smpsAlterNote       $0B
0008E016 E701                       	dc.b	smpsNoAttack, $01
0008E018 E10A                       	smpsAlterNote       $0A
0008E01A E701                       	dc.b	smpsNoAttack, $01
0008E01C E107                       	smpsAlterNote       $07
0008E01E 8001                       	dc.b	nRst, $01
0008E020 E108                       	smpsAlterNote       $08
0008E022 B50D                       	dc.b	nE4, $0D
0008E024 E102                       	smpsAlterNote       $02
0008E026 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008E02A E105                       	smpsAlterNote       $05
0008E02C E701                       	dc.b	smpsNoAttack, $01
0008E02E E10B                       	smpsAlterNote       $0B
0008E030 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008E034 E105                       	smpsAlterNote       $05
0008E036 E701                       	dc.b	smpsNoAttack, $01
0008E038 E102                       	smpsAlterNote       $02
0008E03A E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008E03E E108                       	smpsAlterNote       $08
0008E040 E701                       	dc.b	smpsNoAttack, $01
0008E042 E10C                       	smpsAlterNote       $0C
0008E044 E701 8001                  	dc.b	smpsNoAttack, $01, nRst, $01
0008E048 E107                       	smpsAlterNote       $07
0008E04A B30D                       	dc.b	nD4, $0D
0008E04C E101                       	smpsAlterNote       $01
0008E04E E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008E052 E104                       	smpsAlterNote       $04
0008E054 E701                       	dc.b	smpsNoAttack, $01
0008E056 E10A                       	smpsAlterNote       $0A
0008E058 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008E05C E104                       	smpsAlterNote       $04
0008E05E E701                       	dc.b	smpsNoAttack, $01
0008E060 E101                       	smpsAlterNote       $01
0008E062 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008E066 E107                       	smpsAlterNote       $07
0008E068 E701                       	dc.b	smpsNoAttack, $01
0008E06A E10B                       	smpsAlterNote       $0B
0008E06C E701                       	dc.b	smpsNoAttack, $01
0008E06E E10A                       	smpsAlterNote       $0A
0008E070 E701                       	dc.b	smpsNoAttack, $01
0008E072 E104                       	smpsAlterNote       $04
0008E074 E701                       	dc.b	smpsNoAttack, $01
0008E076 E100                       	smpsAlterNote       $00
0008E078 E701                       	dc.b	smpsNoAttack, $01
0008E07A E104                       	smpsAlterNote       $04
0008E07C E701                       	dc.b	smpsNoAttack, $01
0008E07E E107                       	smpsAlterNote       $07
0008E080 E701                       	dc.b	smpsNoAttack, $01
0008E082 E10B                       	smpsAlterNote       $0B
0008E084 E701                       	dc.b	smpsNoAttack, $01
0008E086 E107                       	smpsAlterNote       $07
0008E088 E701 B20E                  	dc.b	smpsNoAttack, $01, nCs4, $0E
0008E08C E101                       	smpsAlterNote       $01
0008E08E E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008E092 E107                       	smpsAlterNote       $07
0008E094 E701                       	dc.b	smpsNoAttack, $01
0008E096 E10A                       	smpsAlterNote       $0A
0008E098 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008E09C E104                       	smpsAlterNote       $04
0008E09E E701                       	dc.b	smpsNoAttack, $01
0008E0A0 E100                       	smpsAlterNote       $00
0008E0A2 E701                       	dc.b	smpsNoAttack, $01
0008E0A4 E101                       	smpsAlterNote       $01
0008E0A6 E701                       	dc.b	smpsNoAttack, $01
0008E0A8 E107                       	smpsAlterNote       $07
0008E0AA E701                       	dc.b	smpsNoAttack, $01
0008E0AC E10B                       	smpsAlterNote       $0B
0008E0AE E701                       	dc.b	smpsNoAttack, $01
0008E0B0 E107                       	smpsAlterNote       $07
0008E0B2 B30E                       	dc.b	nD4, $0E
0008E0B4 E101                       	smpsAlterNote       $01
0008E0B6 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008E0BA E107                       	smpsAlterNote       $07
0008E0BC E701                       	dc.b	smpsNoAttack, $01
0008E0BE E10A                       	smpsAlterNote       $0A
0008E0C0 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008E0C4 E104                       	smpsAlterNote       $04
0008E0C6 E701                       	dc.b	smpsNoAttack, $01
0008E0C8 E100                       	smpsAlterNote       $00
0008E0CA E701                       	dc.b	smpsNoAttack, $01
0008E0CC E101                       	smpsAlterNote       $01
0008E0CE E701                       	dc.b	smpsNoAttack, $01
0008E0D0 E107                       	smpsAlterNote       $07
0008E0D2 E701                       	dc.b	smpsNoAttack, $01
0008E0D4 E10B                       	smpsAlterNote       $0B
0008E0D6 E701                       	dc.b	smpsNoAttack, $01
0008E0D8 E107                       	smpsAlterNote       $07
0008E0DA E701                       	dc.b	smpsNoAttack, $01
0008E0DC E104                       	smpsAlterNote       $04
0008E0DE E701                       	dc.b	smpsNoAttack, $01
0008E0E0 E100                       	smpsAlterNote       $00
0008E0E2 E701                       	dc.b	smpsNoAttack, $01
0008E0E4 E104                       	smpsAlterNote       $04
0008E0E6 E701                       	dc.b	smpsNoAttack, $01
0008E0E8 E10A                       	smpsAlterNote       $0A
0008E0EA E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008E0EE E107                       	smpsAlterNote       $07
0008E0F0 E701 B20D                  	dc.b	smpsNoAttack, $01, nCs4, $0D
0008E0F4 E104                       	smpsAlterNote       $04
0008E0F6 E701                       	dc.b	smpsNoAttack, $01
0008E0F8 E100                       	smpsAlterNote       $00
0008E0FA E701                       	dc.b	smpsNoAttack, $01
0008E0FC E101                       	smpsAlterNote       $01
0008E0FE E701                       	dc.b	smpsNoAttack, $01
0008E100 E107                       	smpsAlterNote       $07
0008E102 E701                       	dc.b	smpsNoAttack, $01
0008E104 E10B                       	smpsAlterNote       $0B
0008E106 E701                       	dc.b	smpsNoAttack, $01
0008E108 E107                       	smpsAlterNote       $07
0008E10A E701                       	dc.b	smpsNoAttack, $01
0008E10C E104                       	smpsAlterNote       $04
0008E10E E701                       	dc.b	smpsNoAttack, $01
0008E110 E100                       	smpsAlterNote       $00
0008E112 E701                       	dc.b	smpsNoAttack, $01
0008E114 E104                       	smpsAlterNote       $04
0008E116 E701                       	dc.b	smpsNoAttack, $01
0008E118 E10A                       	smpsAlterNote       $0A
0008E11A E701                       	dc.b	smpsNoAttack, $01
0008E11C E10B                       	smpsAlterNote       $0B
0008E11E E701                       	dc.b	smpsNoAttack, $01
0008E122 E6FF                       	smpsAlterVol        $FF
0008E124 A206 8001 A203 A203 8001+  	dc.b	nA2, $06, nRst, $01, nA2, $03, nA2, $03, nRst, $01, nA2, $03
0008E130 800B A202 8001             	dc.b	nRst, $0B, nA2, $02, nRst, $01
0008E138 E109                       	smpsAlterNote       $09
0008E13A E601                       	smpsAlterVol        $01
0008E13C B60D                       	dc.b	nF4, $0D
0008E13E E106                       	smpsAlterNote       $06
0008E140 E701                       	dc.b	smpsNoAttack, $01
0008E142 E102                       	smpsAlterNote       $02
0008E144 E701                       	dc.b	smpsNoAttack, $01
0008E146 E106                       	smpsAlterNote       $06
0008E148 E701                       	dc.b	smpsNoAttack, $01
0008E14A E109                       	smpsAlterNote       $09
0008E14C E701                       	dc.b	smpsNoAttack, $01
0008E14E E10D                       	smpsAlterNote       $0D
0008E150 E701                       	dc.b	smpsNoAttack, $01
0008E152 E109                       	smpsAlterNote       $09
0008E154 E701                       	dc.b	smpsNoAttack, $01
0008E156 E103                       	smpsAlterNote       $03
0008E158 E701                       	dc.b	smpsNoAttack, $01
0008E15A E102                       	smpsAlterNote       $02
0008E15C E701                       	dc.b	smpsNoAttack, $01
0008E15E E106                       	smpsAlterNote       $06
0008E160 E701                       	dc.b	smpsNoAttack, $01
0008E162 E10C                       	smpsAlterNote       $0C
0008E164 E701                       	dc.b	smpsNoAttack, $01
0008E166 E10D                       	smpsAlterNote       $0D
0008E168 8001                       	dc.b	nRst, $01
0008E16A E109                       	smpsAlterNote       $09
0008E16C B80D                       	dc.b	nG4, $0D
0008E16E E106                       	smpsAlterNote       $06
0008E170 E701                       	dc.b	smpsNoAttack, $01
0008E172 E102                       	smpsAlterNote       $02
0008E174 E701                       	dc.b	smpsNoAttack, $01
0008E176 E106                       	smpsAlterNote       $06
0008E178 E701                       	dc.b	smpsNoAttack, $01
0008E17A E109                       	smpsAlterNote       $09
0008E17C E701                       	dc.b	smpsNoAttack, $01
0008E17E E10D                       	smpsAlterNote       $0D
0008E180 E701                       	dc.b	smpsNoAttack, $01
0008E182 E109                       	smpsAlterNote       $09
0008E184 E701                       	dc.b	smpsNoAttack, $01
0008E186 E103                       	smpsAlterNote       $03
0008E188 E701                       	dc.b	smpsNoAttack, $01
0008E18A E102                       	smpsAlterNote       $02
0008E18C E701                       	dc.b	smpsNoAttack, $01
0008E18E E106                       	smpsAlterNote       $06
0008E190 E701                       	dc.b	smpsNoAttack, $01
0008E192 E10C                       	smpsAlterNote       $0C
0008E194 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008E198 E106                       	smpsAlterNote       $06
0008E19A E701                       	dc.b	smpsNoAttack, $01
0008E19C E103                       	smpsAlterNote       $03
0008E19E E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008E1A2 E109                       	smpsAlterNote       $09
0008E1A4 E701                       	dc.b	smpsNoAttack, $01
0008E1A6 E10D                       	smpsAlterNote       $0D
0008E1A8 E701                       	dc.b	smpsNoAttack, $01
0008E1AA E10C                       	smpsAlterNote       $0C
0008E1AC E701                       	dc.b	smpsNoAttack, $01
0008E1AE E109                       	smpsAlterNote       $09
0008E1B0 8001                       	dc.b	nRst, $01
0008E1B2 E10B                       	smpsAlterNote       $0B
0008E1B4 BA0D                       	dc.b	nA4, $0D
0008E1B6 E105                       	smpsAlterNote       $05
0008E1B8 E701                       	dc.b	smpsNoAttack, $01
0008E1BA E104                       	smpsAlterNote       $04
0008E1BC E701                       	dc.b	smpsNoAttack, $01
0008E1BE E108                       	smpsAlterNote       $08
0008E1C0 E701                       	dc.b	smpsNoAttack, $01
0008E1C2 E10E                       	smpsAlterNote       $0E
0008E1C4 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008E1C8 E10B                       	smpsAlterNote       $0B
0008E1CA E701                       	dc.b	smpsNoAttack, $01
0008E1CC E105                       	smpsAlterNote       $05
0008E1CE E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008E1D2 E10B                       	smpsAlterNote       $0B
0008E1D4 E701                       	dc.b	smpsNoAttack, $01
0008E1D6 E10E                       	smpsAlterNote       $0E
0008E1D8 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008E1DC E108                       	smpsAlterNote       $08
0008E1DE E701                       	dc.b	smpsNoAttack, $01
0008E1E0 E104                       	smpsAlterNote       $04
0008E1E2 E701                       	dc.b	smpsNoAttack, $01
0008E1E4 E105                       	smpsAlterNote       $05
0008E1E6 E701                       	dc.b	smpsNoAttack, $01
0008E1E8 E10B                       	smpsAlterNote       $0B
0008E1EA E701                       	dc.b	smpsNoAttack, $01
0008E1EC E10F                       	smpsAlterNote       $0F
0008E1EE E701                       	dc.b	smpsNoAttack, $01
0008E1F0 E10B                       	smpsAlterNote       $0B
0008E1F2 E701                       	dc.b	smpsNoAttack, $01
0008E1F4 E108                       	smpsAlterNote       $08
0008E1F6 E701                       	dc.b	smpsNoAttack, $01
0008E1F8 E104                       	smpsAlterNote       $04
0008E1FA E701                       	dc.b	smpsNoAttack, $01
0008E1FC E108                       	smpsAlterNote       $08
0008E1FE E701                       	dc.b	smpsNoAttack, $01
0008E200 E10E                       	smpsAlterNote       $0E
0008E202 E701                       	dc.b	smpsNoAttack, $01
0008E204 E10F                       	smpsAlterNote       $0F
0008E206 E701                       	dc.b	smpsNoAttack, $01
0008E208 E10B                       	smpsAlterNote       $0B
0008E20A E701                       	dc.b	smpsNoAttack, $01
0008E20C E105                       	smpsAlterNote       $05
0008E20E E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008E212 E108                       	smpsAlterNote       $08
0008E214 E701                       	dc.b	smpsNoAttack, $01
0008E216 E10E                       	smpsAlterNote       $0E
0008E218 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008E21C E108                       	smpsAlterNote       $08
0008E21E E701                       	dc.b	smpsNoAttack, $01
0008E220 E105                       	smpsAlterNote       $05
0008E222 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008E226 E108                       	smpsAlterNote       $08
0008E228 B50A 8001                  	dc.b	nE4, $0A, nRst, $01
0008E22C E109                       	smpsAlterNote       $09
0008E22E B60D                       	dc.b	nF4, $0D
0008E230 E103                       	smpsAlterNote       $03
0008E232 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008E236 E106                       	smpsAlterNote       $06
0008E238 E701                       	dc.b	smpsNoAttack, $01
0008E23A E10C                       	smpsAlterNote       $0C
0008E23C E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008E240 E106                       	smpsAlterNote       $06
0008E242 E701                       	dc.b	smpsNoAttack, $01
0008E244 E103                       	smpsAlterNote       $03
0008E246 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008E24A E109                       	smpsAlterNote       $09
0008E24C E701                       	dc.b	smpsNoAttack, $01
0008E24E E10D                       	smpsAlterNote       $0D
0008E250 E701 8001                  	dc.b	smpsNoAttack, $01, nRst, $01
0008E254 E109                       	smpsAlterNote       $09
0008E256 B80D                       	dc.b	nG4, $0D
0008E258 E103                       	smpsAlterNote       $03
0008E25A E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008E25E E109                       	smpsAlterNote       $09
0008E260 E701                       	dc.b	smpsNoAttack, $01
0008E262 E10C                       	smpsAlterNote       $0C
0008E264 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008E268 E106                       	smpsAlterNote       $06
0008E26A E701                       	dc.b	smpsNoAttack, $01
0008E26C E102                       	smpsAlterNote       $02
0008E26E E701                       	dc.b	smpsNoAttack, $01
0008E270 E103                       	smpsAlterNote       $03
0008E272 E701                       	dc.b	smpsNoAttack, $01
0008E274 E109                       	smpsAlterNote       $09
0008E276 E701                       	dc.b	smpsNoAttack, $01
0008E278 E10D                       	smpsAlterNote       $0D
0008E27A E701                       	dc.b	smpsNoAttack, $01
0008E27C E109                       	smpsAlterNote       $09
0008E27E E701                       	dc.b	smpsNoAttack, $01
0008E280 E106                       	smpsAlterNote       $06
0008E282 E701                       	dc.b	smpsNoAttack, $01
0008E284 E102                       	smpsAlterNote       $02
0008E286 E701                       	dc.b	smpsNoAttack, $01
0008E288 E106                       	smpsAlterNote       $06
0008E28A E701                       	dc.b	smpsNoAttack, $01
0008E28C E10C                       	smpsAlterNote       $0C
0008E28E E701                       	dc.b	smpsNoAttack, $01
0008E290 E10D                       	smpsAlterNote       $0D
0008E292 E701                       	dc.b	smpsNoAttack, $01
0008E294 E109                       	smpsAlterNote       $09
0008E296 E701                       	dc.b	smpsNoAttack, $01
0008E298 E10B                       	smpsAlterNote       $0B
0008E29A BA0D                       	dc.b	nA4, $0D
0008E29C E108                       	smpsAlterNote       $08
0008E29E E701                       	dc.b	smpsNoAttack, $01
0008E2A0 E105                       	smpsAlterNote       $05
0008E2A2 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008E2A6 E10B                       	smpsAlterNote       $0B
0008E2A8 E701                       	dc.b	smpsNoAttack, $01
0008E2AA E10F                       	smpsAlterNote       $0F
0008E2AC E701                       	dc.b	smpsNoAttack, $01
0008E2AE E10E                       	smpsAlterNote       $0E
0008E2B0 E701                       	dc.b	smpsNoAttack, $01
0008E2B2 E108                       	smpsAlterNote       $08
0008E2B4 E701                       	dc.b	smpsNoAttack, $01
0008E2B6 E104                       	smpsAlterNote       $04
0008E2B8 E701                       	dc.b	smpsNoAttack, $01
0008E2BA E108                       	smpsAlterNote       $08
0008E2BC E701                       	dc.b	smpsNoAttack, $01
0008E2BE E10B                       	smpsAlterNote       $0B
0008E2C0 E701                       	dc.b	smpsNoAttack, $01
0008E2C2 E10F                       	smpsAlterNote       $0F
0008E2C4 E701                       	dc.b	smpsNoAttack, $01
0008E2C6 E10B                       	smpsAlterNote       $0B
0008E2C8 E701                       	dc.b	smpsNoAttack, $01
0008E2CA E105                       	smpsAlterNote       $05
0008E2CC E701                       	dc.b	smpsNoAttack, $01
0008E2CE E104                       	smpsAlterNote       $04
0008E2D0 E701                       	dc.b	smpsNoAttack, $01
0008E2D2 E108                       	smpsAlterNote       $08
0008E2D4 E701                       	dc.b	smpsNoAttack, $01
0008E2D6 E10E                       	smpsAlterNote       $0E
0008E2D8 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008E2DC E10B                       	smpsAlterNote       $0B
0008E2DE E701                       	dc.b	smpsNoAttack, $01
0008E2E0 E105                       	smpsAlterNote       $05
0008E2E2 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008E2E6 E10B                       	smpsAlterNote       $0B
0008E2E8 E701                       	dc.b	smpsNoAttack, $01
0008E2EA E10E                       	smpsAlterNote       $0E
0008E2EC E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008E2F0 E108                       	smpsAlterNote       $08
0008E2F2 E701                       	dc.b	smpsNoAttack, $01
0008E2F4 E105                       	smpsAlterNote       $05
0008E2F6 8001                       	dc.b	nRst, $01
0008E2F8 E109                       	smpsAlterNote       $09
0008E2FA B60A                       	dc.b	nF4, $0A
0008E2FC E108                       	smpsAlterNote       $08
0008E2FE B507                       	dc.b	nE4, $07
0008E300 E107                       	smpsAlterNote       $07
0008E302 B30D 8001                  	dc.b	nD4, $0D, nRst, $01
0008E306 E108                       	smpsAlterNote       $08
0008E308 B503                       	dc.b	nE4, $03
0008E30A E109                       	smpsAlterNote       $09
0008E30C B603 8001 B802 8001        	dc.b	nF4, $03, nRst, $01, nG4, $02, nRst, $01
0008E314 E10B                       	smpsAlterNote       $0B
0008E316 BA0D                       	dc.b	nA4, $0D
0008E318 E108                       	smpsAlterNote       $08
0008E31A E701                       	dc.b	smpsNoAttack, $01
0008E31C E104                       	smpsAlterNote       $04
0008E31E E701                       	dc.b	smpsNoAttack, $01
0008E320 E108                       	smpsAlterNote       $08
0008E322 E701                       	dc.b	smpsNoAttack, $01
0008E324 E10B                       	smpsAlterNote       $0B
0008E326 E701                       	dc.b	smpsNoAttack, $01
0008E328 E10F                       	smpsAlterNote       $0F
0008E32A E701                       	dc.b	smpsNoAttack, $01
0008E32C E10B                       	smpsAlterNote       $0B
0008E32E E701                       	dc.b	smpsNoAttack, $01
0008E330 E105                       	smpsAlterNote       $05
0008E332 E701                       	dc.b	smpsNoAttack, $01
0008E334 E104                       	smpsAlterNote       $04
0008E336 E701                       	dc.b	smpsNoAttack, $01
0008E338 E108                       	smpsAlterNote       $08
0008E33A E701                       	dc.b	smpsNoAttack, $01
0008E33C E10E                       	smpsAlterNote       $0E
0008E33E E701                       	dc.b	smpsNoAttack, $01
0008E340 E10F                       	smpsAlterNote       $0F
0008E342 8001                       	dc.b	nRst, $01
0008E344 E109                       	smpsAlterNote       $09
0008E346 C20D                       	dc.b	nF5, $0D
0008E348 E106                       	smpsAlterNote       $06
0008E34A E701                       	dc.b	smpsNoAttack, $01
0008E34C E102                       	smpsAlterNote       $02
0008E34E E701                       	dc.b	smpsNoAttack, $01
0008E350 E106                       	smpsAlterNote       $06
0008E352 E701                       	dc.b	smpsNoAttack, $01
0008E354 E109                       	smpsAlterNote       $09
0008E356 E701                       	dc.b	smpsNoAttack, $01
0008E358 E10D                       	smpsAlterNote       $0D
0008E35A E701                       	dc.b	smpsNoAttack, $01
0008E35C E109                       	smpsAlterNote       $09
0008E35E E701                       	dc.b	smpsNoAttack, $01
0008E360 E103                       	smpsAlterNote       $03
0008E362 E701                       	dc.b	smpsNoAttack, $01
0008E364 E102                       	smpsAlterNote       $02
0008E366 E701                       	dc.b	smpsNoAttack, $01
0008E368 E106                       	smpsAlterNote       $06
0008E36A E701                       	dc.b	smpsNoAttack, $01
0008E36C E10C                       	smpsAlterNote       $0C
0008E36E E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008E372 E109                       	smpsAlterNote       $09
0008E374 E701                       	dc.b	smpsNoAttack, $01
0008E376 E103                       	smpsAlterNote       $03
0008E378 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008E37C E109                       	smpsAlterNote       $09
0008E37E E701                       	dc.b	smpsNoAttack, $01
0008E380 E10C                       	smpsAlterNote       $0C
0008E382 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008E386 E106                       	smpsAlterNote       $06
0008E388 E701                       	dc.b	smpsNoAttack, $01
0008E38A E102                       	smpsAlterNote       $02
0008E38C E701                       	dc.b	smpsNoAttack, $01
0008E38E E103                       	smpsAlterNote       $03
0008E390 E701                       	dc.b	smpsNoAttack, $01
0008E392 E109                       	smpsAlterNote       $09
0008E394 E701                       	dc.b	smpsNoAttack, $01
0008E396 E10D                       	smpsAlterNote       $0D
0008E398 E701                       	dc.b	smpsNoAttack, $01
0008E39A E109                       	smpsAlterNote       $09
0008E39C E701                       	dc.b	smpsNoAttack, $01
0008E39E E106                       	smpsAlterNote       $06
0008E3A0 E701                       	dc.b	smpsNoAttack, $01
0008E3A2 E102                       	smpsAlterNote       $02
0008E3A4 E701                       	dc.b	smpsNoAttack, $01
0008E3A6 E106                       	smpsAlterNote       $06
0008E3A8 E701                       	dc.b	smpsNoAttack, $01
0008E3AA E10C                       	smpsAlterNote       $0C
0008E3AC E701                       	dc.b	smpsNoAttack, $01
0008E3AE E10D                       	smpsAlterNote       $0D
0008E3B0 E701                       	dc.b	smpsNoAttack, $01
0008E3B2 E109                       	smpsAlterNote       $09
0008E3B4 E701                       	dc.b	smpsNoAttack, $01
0008E3B6 E103                       	smpsAlterNote       $03
0008E3B8 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008E3BC E106                       	smpsAlterNote       $06
0008E3BE E701                       	dc.b	smpsNoAttack, $01
0008E3C0 E10C                       	smpsAlterNote       $0C
0008E3C2 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008E3C6 E106                       	smpsAlterNote       $06
0008E3C8 E701                       	dc.b	smpsNoAttack, $01
0008E3CA E103                       	smpsAlterNote       $03
0008E3CC E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008E3D0 E109                       	smpsAlterNote       $09
0008E3D2 E701                       	dc.b	smpsNoAttack, $01
0008E3D4 E10D                       	smpsAlterNote       $0D
0008E3D6 E701                       	dc.b	smpsNoAttack, $01
0008E3D8 E10C                       	smpsAlterNote       $0C
0008E3DA E701                       	dc.b	smpsNoAttack, $01
0008E3DC E106                       	smpsAlterNote       $06
0008E3DE E701                       	dc.b	smpsNoAttack, $01
0008E3E0 E103                       	smpsAlterNote       $03
0008E3E2 8001                       	dc.b	nRst, $01
0008E3E4 E109                       	smpsAlterNote       $09
0008E3E6 C206 8001                  	dc.b	nF5, $06, nRst, $01
0008E3EC E10C                       	smpsAlterNote       $0C
0008E3EE E601                       	smpsAlterVol        $01
0008E3F0 BB0D                       	dc.b	nBb4, $0D
0008E3F2 E106                       	smpsAlterNote       $06
0008E3F4 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008E3F8 E109                       	smpsAlterNote       $09
0008E3FA E701                       	dc.b	smpsNoAttack, $01
0008E3FC E10F                       	smpsAlterNote       $0F
0008E3FE E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008E402 E109                       	smpsAlterNote       $09
0008E404 E701                       	dc.b	smpsNoAttack, $01
0008E406 E106                       	smpsAlterNote       $06
0008E408 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008E40C E10C                       	smpsAlterNote       $0C
0008E40E E701                       	dc.b	smpsNoAttack, $01
0008E410 E110                       	smpsAlterNote       $10
0008E412 E701                       	dc.b	smpsNoAttack, $01
0008E414 E10F                       	smpsAlterNote       $0F
0008E416 E701                       	dc.b	smpsNoAttack, $01
0008E418 E109                       	smpsAlterNote       $09
0008E41A E701                       	dc.b	smpsNoAttack, $01
0008E41C E105                       	smpsAlterNote       $05
0008E41E E701                       	dc.b	smpsNoAttack, $01
0008E420 E106                       	smpsAlterNote       $06
0008E422 8001 BD0D                  	dc.b	nRst, $01, nC5, $0D
0008E426 E103                       	smpsAlterNote       $03
0008E428 E701                       	dc.b	smpsNoAttack, $01
0008E42A E1FF                       	smpsAlterNote       $FF
0008E42C E701                       	dc.b	smpsNoAttack, $01
0008E42E E103                       	smpsAlterNote       $03
0008E430 E701                       	dc.b	smpsNoAttack, $01
0008E432 E106                       	smpsAlterNote       $06
0008E434 E701                       	dc.b	smpsNoAttack, $01
0008E436 E10A                       	smpsAlterNote       $0A
0008E438 E701                       	dc.b	smpsNoAttack, $01
0008E43A E106                       	smpsAlterNote       $06
0008E43C E701                       	dc.b	smpsNoAttack, $01
0008E43E E100                       	smpsAlterNote       $00
0008E440 E701                       	dc.b	smpsNoAttack, $01
0008E442 E1FF                       	smpsAlterNote       $FF
0008E444 E701                       	dc.b	smpsNoAttack, $01
0008E446 E103                       	smpsAlterNote       $03
0008E448 E701                       	dc.b	smpsNoAttack, $01
0008E44A E109                       	smpsAlterNote       $09
0008E44C E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008E450 E106                       	smpsAlterNote       $06
0008E452 E701                       	dc.b	smpsNoAttack, $01
0008E454 E100                       	smpsAlterNote       $00
0008E456 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008E45A E107                       	smpsAlterNote       $07
0008E45C BF0E                       	dc.b	nD5, $0E
0008E45E E101                       	smpsAlterNote       $01
0008E460 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008E464 E107                       	smpsAlterNote       $07
0008E466 E701                       	dc.b	smpsNoAttack, $01
0008E468 E10A                       	smpsAlterNote       $0A
0008E46A E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008E46E E104                       	smpsAlterNote       $04
0008E470 E701                       	dc.b	smpsNoAttack, $01
0008E472 E100                       	smpsAlterNote       $00
0008E474 E701                       	dc.b	smpsNoAttack, $01
0008E476 E101                       	smpsAlterNote       $01
0008E478 E701                       	dc.b	smpsNoAttack, $01
0008E47A E107                       	smpsAlterNote       $07
0008E47C E701                       	dc.b	smpsNoAttack, $01
0008E47E E10B                       	smpsAlterNote       $0B
0008E480 E701                       	dc.b	smpsNoAttack, $01
0008E482 E107                       	smpsAlterNote       $07
0008E484 E701                       	dc.b	smpsNoAttack, $01
0008E486 E104                       	smpsAlterNote       $04
0008E488 E701                       	dc.b	smpsNoAttack, $01
0008E48A E100                       	smpsAlterNote       $00
0008E48C E701                       	dc.b	smpsNoAttack, $01
0008E48E E101                       	smpsAlterNote       $01
0008E490 8001                       	dc.b	nRst, $01
0008E492 E108                       	smpsAlterNote       $08
0008E494 C10C                       	dc.b	nE5, $0C
0008E496 E109                       	smpsAlterNote       $09
0008E498 C201 8001                  	dc.b	nF5, $01, nRst, $01
0008E49C E10A                       	smpsAlterNote       $0A
0008E49E 8001                       	dc.b	nRst, $01
0008E4A0 E109                       	smpsAlterNote       $09
0008E4A2 C40C C20D                  	dc.b	nG5, $0C, nF5, $0D
0008E4A6 E106                       	smpsAlterNote       $06
0008E4A8 E701                       	dc.b	smpsNoAttack, $01
0008E4AA E102                       	smpsAlterNote       $02
0008E4AC E701                       	dc.b	smpsNoAttack, $01
0008E4AE E103                       	smpsAlterNote       $03
0008E4B0 E701                       	dc.b	smpsNoAttack, $01
0008E4B2 E109                       	smpsAlterNote       $09
0008E4B4 E701                       	dc.b	smpsNoAttack, $01
0008E4B6 E10D                       	smpsAlterNote       $0D
0008E4B8 E701                       	dc.b	smpsNoAttack, $01
0008E4BA E109                       	smpsAlterNote       $09
0008E4BC E701                       	dc.b	smpsNoAttack, $01
0008E4BE E106                       	smpsAlterNote       $06
0008E4C0 E701                       	dc.b	smpsNoAttack, $01
0008E4C2 E102                       	smpsAlterNote       $02
0008E4C4 E701                       	dc.b	smpsNoAttack, $01
0008E4C6 E106                       	smpsAlterNote       $06
0008E4C8 E701                       	dc.b	smpsNoAttack, $01
0008E4CA E10C                       	smpsAlterNote       $0C
0008E4CC E701                       	dc.b	smpsNoAttack, $01
0008E4CE E10D                       	smpsAlterNote       $0D
0008E4D0 E701                       	dc.b	smpsNoAttack, $01
0008E4D2 E109                       	smpsAlterNote       $09
0008E4D4 C40D                       	dc.b	nG5, $0D
0008E4D6 E106                       	smpsAlterNote       $06
0008E4D8 E701                       	dc.b	smpsNoAttack, $01
0008E4DA E102                       	smpsAlterNote       $02
0008E4DC E701                       	dc.b	smpsNoAttack, $01
0008E4DE E103                       	smpsAlterNote       $03
0008E4E0 E701                       	dc.b	smpsNoAttack, $01
0008E4E2 E109                       	smpsAlterNote       $09
0008E4E4 E701                       	dc.b	smpsNoAttack, $01
0008E4E6 E108                       	smpsAlterNote       $08
0008E4E8 C007 C002 C002 8001 C001+  	dc.b	nEb5, $07, nEb5, $02, nEb5, $02, nRst, $01, nEb5, $01, nRst, $01
0008E4F4 E109                       	smpsAlterNote       $09
0008E4F6 C20D                       	dc.b	nF5, $0D
0008E4F8 E106                       	smpsAlterNote       $06
0008E4FA E701                       	dc.b	smpsNoAttack, $01
0008E4FC E102                       	smpsAlterNote       $02
0008E4FE E701                       	dc.b	smpsNoAttack, $01
0008E500 E106                       	smpsAlterNote       $06
0008E502 E701                       	dc.b	smpsNoAttack, $01
0008E504 E109                       	smpsAlterNote       $09
0008E506 E701                       	dc.b	smpsNoAttack, $01
0008E508 E10D                       	smpsAlterNote       $0D
0008E50A E701                       	dc.b	smpsNoAttack, $01
0008E50C E109                       	smpsAlterNote       $09
0008E50E E701                       	dc.b	smpsNoAttack, $01
0008E510 E103                       	smpsAlterNote       $03
0008E512 E701                       	dc.b	smpsNoAttack, $01
0008E514 E102                       	smpsAlterNote       $02
0008E516 E701                       	dc.b	smpsNoAttack, $01
0008E518 E106                       	smpsAlterNote       $06
0008E51A E701                       	dc.b	smpsNoAttack, $01
0008E51C E10C                       	smpsAlterNote       $0C
0008E51E E701                       	dc.b	smpsNoAttack, $01
0008E520 E10D                       	smpsAlterNote       $0D
0008E522 8001                       	dc.b	nRst, $01
0008E524 E112                       	smpsAlterNote       $12
0008E526 C401                       	dc.b	nG5, $01
0008E528 E1EB                       	smpsAlterNote       $EB
0008E52A E7C5 01                    	dc.b	smpsNoAttack, nAb5, $01
0008E52D E1FD                       	smpsAlterNote       $FD
0008E52F E701                       	dc.b	smpsNoAttack, $01
0008E531 E10F                       	smpsAlterNote       $0F
0008E533 E701                       	dc.b	smpsNoAttack, $01
0008E535 E118                       	smpsAlterNote       $18
0008E537 E701                       	dc.b	smpsNoAttack, $01
0008E539 E1ED                       	smpsAlterNote       $ED
0008E53B E7C6 01                    	dc.b	smpsNoAttack, nA5, $01
0008E53E E1FF                       	smpsAlterNote       $FF
0008E540 E701                       	dc.b	smpsNoAttack, $01
0008E542 E10B                       	smpsAlterNote       $0B
0008E544 E703                       	dc.b	smpsNoAttack, $03
0008E546 E109                       	smpsAlterNote       $09
0008E548 C407                       	dc.b	nG5, $07
0008E54A E108                       	smpsAlterNote       $08
0008E54C C006 8001 C002 C002 C002+  	dc.b	nEb5, $06, nRst, $01, nEb5, $02, nEb5, $02, nEb5, $02, nRst, $01
0008E558 E109                       	smpsAlterNote       $09
0008E55A C20D                       	dc.b	nF5, $0D
0008E55C E103                       	smpsAlterNote       $03
0008E55E E701                       	dc.b	smpsNoAttack, $01
0008E560 E102                       	smpsAlterNote       $02
0008E562 E701                       	dc.b	smpsNoAttack, $01
0008E564 E106                       	smpsAlterNote       $06
0008E566 E701                       	dc.b	smpsNoAttack, $01
0008E568 E10C                       	smpsAlterNote       $0C
0008E56A E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008E56E E109                       	smpsAlterNote       $09
0008E570 E701                       	dc.b	smpsNoAttack, $01
0008E572 E103                       	smpsAlterNote       $03
0008E574 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008E578 E109                       	smpsAlterNote       $09
0008E57A E701                       	dc.b	smpsNoAttack, $01
0008E57C E10C                       	smpsAlterNote       $0C
0008E57E E701                       	dc.b	smpsNoAttack, $01
0008E580 E10D                       	smpsAlterNote       $0D
0008E582 8001                       	dc.b	nRst, $01
0008E584 E10B                       	smpsAlterNote       $0B
0008E586 C609 8001                  	dc.b	nA5, $09, nRst, $01
0008E58A E109                       	smpsAlterNote       $09
0008E58C B806 8001                  	dc.b	nG4, $06, nRst, $01
0008E590 E108                       	smpsAlterNote       $08
0008E592 C006 8001 C001 8001 C002+  	dc.b	nEb5, $06, nRst, $01, nEb5, $01, nRst, $01, nEb5, $02, nEb5, $02
0008E59E 8001                       	dc.b	nRst, $01
0008E5A0 E109                       	smpsAlterNote       $09
0008E5A2 C20D                       	dc.b	nF5, $0D
0008E5A4 E103                       	smpsAlterNote       $03
0008E5A6 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008E5AA E106                       	smpsAlterNote       $06
0008E5AC E701                       	dc.b	smpsNoAttack, $01
0008E5AE E10C                       	smpsAlterNote       $0C
0008E5B0 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008E5B4 E106                       	smpsAlterNote       $06
0008E5B6 E701                       	dc.b	smpsNoAttack, $01
0008E5B8 E103                       	smpsAlterNote       $03
0008E5BA E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008E5BE E109                       	smpsAlterNote       $09
0008E5C0 E701                       	dc.b	smpsNoAttack, $01
0008E5C2 E10D                       	smpsAlterNote       $0D
0008E5C4 E701 8001                  	dc.b	smpsNoAttack, $01, nRst, $01
0008E5CA E108                       	smpsAlterNote       $08
0008E5CC E6FF                       	smpsAlterVol        $FF
0008E5CE A806                       	dc.b	nEb3, $06
0008E5D0 E10C                       	smpsAlterNote       $0C
0008E5D2 A303 8001                  	dc.b	nBb2, $03, nRst, $01
0008E5D6 E108                       	smpsAlterNote       $08
0008E5D8 A803                       	dc.b	nEb3, $03
0008E5DA E109                       	smpsAlterNote       $09
0008E5DC AC03 8001                  	dc.b	nG3, $03, nRst, $01
0008E5E0 E10C                       	smpsAlterNote       $0C
0008E5E2 AF02 8001 AF03 8007        	dc.b	nBb3, $02, nRst, $01, nBb3, $03, nRst, $07
0008E5EC E109                       	smpsAlterNote       $09
0008E5EE E602                       	smpsAlterVol        $02
0008E5F0 B604                       	dc.b	nF4, $04
0008E5F2 E602                       	smpsAlterVol        $02
0008E5F4 F6F1 AA                    	smpsJump            music84_Jump02
0008E5F7                            
0008E5F7                            ; FM4 Data
0008E5F7                            music84_FM4:
0008E5F9 E040                       	smpsPan             panRight, $00
0008E5FB 8003                       	dc.b	nRst, $03
0008E5FD E10F                       	smpsAlterNote       $0F
0008E5FF C603 8008                  	dc.b	nA5, $03, nRst, $08
0008E603 E10D                       	smpsAlterNote       $0D
0008E605 C403 800A                  	dc.b	nG5, $03, nRst, $0A
0008E609 E10C                       	smpsAlterNote       $0C
0008E60B C103 8004                  	dc.b	nE5, $03, nRst, $04
0008E611 E6FE                       	smpsAlterVol        $FE
0008E613 E110                       	smpsAlterNote       $10
0008E615 C703 8001                  	dc.b	nBb5, $03, nRst, $01
0008E619 E10F                       	smpsAlterNote       $0F
0008E61B C602 8001                  	dc.b	nA5, $02, nRst, $01
0008E61F E10D                       	smpsAlterNote       $0D
0008E621 C403 C401 E7C2 0280 01     	dc.b	nG5, $03, nG5, $01, smpsNoAttack, nF5, $02, nRst, $01
0008E62A E10C                       	smpsAlterNote       $0C
0008E62C C103                       	dc.b	nE5, $03
0008E62E E10A                       	smpsAlterNote       $0A
0008E630 BD03 8001                  	dc.b	nC5, $03, nRst, $01
0008E636 03                         	dc.b	$03
0008E637                            
0008E637                            music84_Jump01:
0008E637 E10B                       	smpsAlterNote       $0B
0008E639 BF03 8001                  	dc.b	nD5, $03, nRst, $01
0008E63D E10C                       	smpsAlterNote       $0C
0008E63F C102 8001                  	dc.b	nE5, $02, nRst, $01
0008E643 E10D                       	smpsAlterNote       $0D
0008E645 C203 C403 8001 C606 8001   	dc.b	nF5, $03, nG5, $03, nRst, $01, nA5, $06, nRst, $01
0008E64F E10B                       	smpsAlterNote       $0B
0008E651 BF03 C90D                  	dc.b	nD5, $03, nC6, $0D
0008E655 E107                       	smpsAlterNote       $07
0008E657 E701                       	dc.b	smpsNoAttack, $01
0008E659 E103                       	smpsAlterNote       $03
0008E65B E701                       	dc.b	smpsNoAttack, $01
0008E65D E104                       	smpsAlterNote       $04
0008E65F E701                       	dc.b	smpsNoAttack, $01
0008E661 E10A                       	smpsAlterNote       $0A
0008E663 E701                       	dc.b	smpsNoAttack, $01
0008E665 E10E                       	smpsAlterNote       $0E
0008E667 E701                       	dc.b	smpsNoAttack, $01
0008E669 E10A                       	smpsAlterNote       $0A
0008E66B E701                       	dc.b	smpsNoAttack, $01
0008E66D E107                       	smpsAlterNote       $07
0008E66F E701                       	dc.b	smpsNoAttack, $01
0008E671 E104                       	smpsAlterNote       $04
0008E673 8001                       	dc.b	nRst, $01
0008E675 E110                       	smpsAlterNote       $10
0008E677 C703                       	dc.b	nBb5, $03
0008E679 E10F                       	smpsAlterNote       $0F
0008E67B C603 8001                  	dc.b	nA5, $03, nRst, $01
0008E67F E10D                       	smpsAlterNote       $0D
0008E681 C402 8001 C60D             	dc.b	nG5, $02, nRst, $01, nA5, $0D
0008E687 E10C                       	smpsAlterNote       $0C
0008E689 E701                       	dc.b	smpsNoAttack, $01
0008E68B E108                       	smpsAlterNote       $08
0008E68D E701                       	dc.b	smpsNoAttack, $01
0008E68F E10C                       	smpsAlterNote       $0C
0008E691 E701                       	dc.b	smpsNoAttack, $01
0008E693 E10F                       	smpsAlterNote       $0F
0008E695 E701                       	dc.b	smpsNoAttack, $01
0008E697 E113                       	smpsAlterNote       $13
0008E699 E701                       	dc.b	smpsNoAttack, $01
0008E69B E10F                       	smpsAlterNote       $0F
0008E69D E701                       	dc.b	smpsNoAttack, $01
0008E69F E109                       	smpsAlterNote       $09
0008E6A1 E701                       	dc.b	smpsNoAttack, $01
0008E6A3 E108                       	smpsAlterNote       $08
0008E6A5 E701                       	dc.b	smpsNoAttack, $01
0008E6A7 E10C                       	smpsAlterNote       $0C
0008E6A9 E701                       	dc.b	smpsNoAttack, $01
0008E6AB E112                       	smpsAlterNote       $12
0008E6AD E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008E6B1 E10C                       	smpsAlterNote       $0C
0008E6B3 E701                       	dc.b	smpsNoAttack, $01
0008E6B5 E109                       	smpsAlterNote       $09
0008E6B7 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008E6BB E10F                       	smpsAlterNote       $0F
0008E6BD E701                       	dc.b	smpsNoAttack, $01
0008E6BF E113                       	smpsAlterNote       $13
0008E6C1 E701                       	dc.b	smpsNoAttack, $01
0008E6C3 E112                       	smpsAlterNote       $12
0008E6C5 E701                       	dc.b	smpsNoAttack, $01
0008E6C7 E10C                       	smpsAlterNote       $0C
0008E6C9 E701                       	dc.b	smpsNoAttack, $01
0008E6CB E108                       	smpsAlterNote       $08
0008E6CD E701                       	dc.b	smpsNoAttack, $01
0008E6CF E10C                       	smpsAlterNote       $0C
0008E6D1 E701                       	dc.b	smpsNoAttack, $01
0008E6D3 E10F                       	smpsAlterNote       $0F
0008E6D5 E701                       	dc.b	smpsNoAttack, $01
0008E6D7 E113                       	smpsAlterNote       $13
0008E6D9 E701                       	dc.b	smpsNoAttack, $01
0008E6DB E10F                       	smpsAlterNote       $0F
0008E6DD E701                       	dc.b	smpsNoAttack, $01
0008E6DF E109                       	smpsAlterNote       $09
0008E6E1 E701                       	dc.b	smpsNoAttack, $01
0008E6E3 E108                       	smpsAlterNote       $08
0008E6E5 E701                       	dc.b	smpsNoAttack, $01
0008E6E7 E10C                       	smpsAlterNote       $0C
0008E6E9 E701                       	dc.b	smpsNoAttack, $01
0008E6EB E112                       	smpsAlterNote       $12
0008E6ED E701                       	dc.b	smpsNoAttack, $01
0008E6EF E113                       	smpsAlterNote       $13
0008E6F1 800F                       	dc.b	nRst, $0F
0008E6F3 E10B                       	smpsAlterNote       $0B
0008E6F5 BF03                       	dc.b	nD5, $03
0008E6F7 E10C                       	smpsAlterNote       $0C
0008E6F9 C103 8001                  	dc.b	nE5, $03, nRst, $01
0008E6FD E10D                       	smpsAlterNote       $0D
0008E6FF C202 8001 C403 C607        	dc.b	nF5, $02, nRst, $01, nG5, $03, nA5, $07
0008E707 E10B                       	smpsAlterNote       $0B
0008E709 BF03 8001 C90D CB03 8001   	dc.b	nD5, $03, nRst, $01, nC6, $0D, nD6, $03, nRst, $01
0008E713 E110                       	smpsAlterNote       $10
0008E715 C704                       	dc.b	nBb5, $04
0008E717 E10F                       	smpsAlterNote       $0F
0008E719 C604 8001                  	dc.b	nA5, $04, nRst, $01
0008E71D E10D                       	smpsAlterNote       $0D
0008E71F C404 8001 C60D             	dc.b	nG5, $04, nRst, $01, nA5, $0D
0008E725 E109                       	smpsAlterNote       $09
0008E727 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008E72B E10F                       	smpsAlterNote       $0F
0008E72D E701                       	dc.b	smpsNoAttack, $01
0008E72F E112                       	smpsAlterNote       $12
0008E731 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008E735 E10C                       	smpsAlterNote       $0C
0008E737 E701                       	dc.b	smpsNoAttack, $01
0008E739 E108                       	smpsAlterNote       $08
0008E73B E701                       	dc.b	smpsNoAttack, $01
0008E73D E109                       	smpsAlterNote       $09
0008E73F E701                       	dc.b	smpsNoAttack, $01
0008E741 E10F                       	smpsAlterNote       $0F
0008E743 E701                       	dc.b	smpsNoAttack, $01
0008E745 E113                       	smpsAlterNote       $13
0008E747 E701                       	dc.b	smpsNoAttack, $01
0008E749 E10F                       	smpsAlterNote       $0F
0008E74B E701                       	dc.b	smpsNoAttack, $01
0008E74D E10C                       	smpsAlterNote       $0C
0008E74F E701                       	dc.b	smpsNoAttack, $01
0008E751 E108                       	smpsAlterNote       $08
0008E753 E701                       	dc.b	smpsNoAttack, $01
0008E755 E10C                       	smpsAlterNote       $0C
0008E757 E701                       	dc.b	smpsNoAttack, $01
0008E759 E112                       	smpsAlterNote       $12
0008E75B E701                       	dc.b	smpsNoAttack, $01
0008E75D E113                       	smpsAlterNote       $13
0008E75F E701                       	dc.b	smpsNoAttack, $01
0008E761 E10F                       	smpsAlterNote       $0F
0008E763 E701                       	dc.b	smpsNoAttack, $01
0008E765 E109                       	smpsAlterNote       $09
0008E767 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008E76B E10C                       	smpsAlterNote       $0C
0008E76D E701                       	dc.b	smpsNoAttack, $01
0008E76F E112                       	smpsAlterNote       $12
0008E771 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008E775 E10C                       	smpsAlterNote       $0C
0008E777 E701                       	dc.b	smpsNoAttack, $01
0008E779 E109                       	smpsAlterNote       $09
0008E77B E701                       	dc.b	smpsNoAttack, $01
0008E77D E10D                       	smpsAlterNote       $0D
0008E77F C401 8001                  	dc.b	nG5, $01, nRst, $01
0008E783 E10F                       	smpsAlterNote       $0F
0008E785 C501 8001 C60D C604 8001   	dc.b	nAb5, $01, nRst, $01, nA5, $0D, nA5, $04, nRst, $01
0008E78F E10D                       	smpsAlterNote       $0D
0008E791 C404 C604 8001             	dc.b	nG5, $04, nA5, $04, nRst, $01
0008E797 E10B                       	smpsAlterNote       $0B
0008E799 BF0D                       	dc.b	nD5, $0D
0008E79B E108                       	smpsAlterNote       $08
0008E79D E701                       	dc.b	smpsNoAttack, $01
0008E79F E104                       	smpsAlterNote       $04
0008E7A1 E701                       	dc.b	smpsNoAttack, $01
0008E7A3 E108                       	smpsAlterNote       $08
0008E7A5 E701                       	dc.b	smpsNoAttack, $01
0008E7A7 E10B                       	smpsAlterNote       $0B
0008E7A9 E701                       	dc.b	smpsNoAttack, $01
0008E7AB E10F                       	smpsAlterNote       $0F
0008E7AD E701                       	dc.b	smpsNoAttack, $01
0008E7AF E10B                       	smpsAlterNote       $0B
0008E7B1 E701                       	dc.b	smpsNoAttack, $01
0008E7B3 E105                       	smpsAlterNote       $05
0008E7B5 E701                       	dc.b	smpsNoAttack, $01
0008E7B7 E104                       	smpsAlterNote       $04
0008E7B9 E701                       	dc.b	smpsNoAttack, $01
0008E7BB E108                       	smpsAlterNote       $08
0008E7BD E701                       	dc.b	smpsNoAttack, $01
0008E7BF E10E                       	smpsAlterNote       $0E
0008E7C1 E701                       	dc.b	smpsNoAttack, $01
0008E7C3 E10F                       	smpsAlterNote       $0F
0008E7C5 8001                       	dc.b	nRst, $01
0008E7C7 E10C                       	smpsAlterNote       $0C
0008E7C9 C101                       	dc.b	nE5, $01
0008E7CB E10D                       	smpsAlterNote       $0D
0008E7CD C201 C401 C607             	dc.b	nF5, $01, nG5, $01, nA5, $07
0008E7D3 E10F                       	smpsAlterNote       $0F
0008E7D5 C606 8001                  	dc.b	nA5, $06, nRst, $01
0008E7D9 E10C                       	smpsAlterNote       $0C
0008E7DB CD06 8001                  	dc.b	nE6, $06, nRst, $01
0008E7DF E10D                       	smpsAlterNote       $0D
0008E7E1 CE06 8001                  	dc.b	nF6, $06, nRst, $01
0008E7E5 E10C                       	smpsAlterNote       $0C
0008E7E7 CD03                       	dc.b	nE6, $03
0008E7E9 E10A                       	smpsAlterNote       $0A
0008E7EB C903 8001                  	dc.b	nC6, $03, nRst, $01
0008E7EF E10D                       	smpsAlterNote       $0D
0008E7F1 C402 8001 C70D E701        	dc.b	nG5, $02, nRst, $01, nBb5, $0D, smpsNoAttack, $01
0008E7F9 E109                       	smpsAlterNote       $09
0008E7FB E701                       	dc.b	smpsNoAttack, $01
0008E7FD E10D                       	smpsAlterNote       $0D
0008E7FF E701                       	dc.b	smpsNoAttack, $01
0008E801 E110                       	smpsAlterNote       $10
0008E803 E701                       	dc.b	smpsNoAttack, $01
0008E805 E114                       	smpsAlterNote       $14
0008E807 E701                       	dc.b	smpsNoAttack, $01
0008E809 E110                       	smpsAlterNote       $10
0008E80B E701                       	dc.b	smpsNoAttack, $01
0008E80D E10A                       	smpsAlterNote       $0A
0008E80F E701                       	dc.b	smpsNoAttack, $01
0008E811 E109                       	smpsAlterNote       $09
0008E813 E701                       	dc.b	smpsNoAttack, $01
0008E815 E10D                       	smpsAlterNote       $0D
0008E817 E701                       	dc.b	smpsNoAttack, $01
0008E819 E113                       	smpsAlterNote       $13
0008E81B E701                       	dc.b	smpsNoAttack, $01
0008E81D E114                       	smpsAlterNote       $14
0008E81F 8001                       	dc.b	nRst, $01
0008E821 E10F                       	smpsAlterNote       $0F
0008E823 C606 8001 C50D             	dc.b	nA5, $06, nRst, $01, nAb5, $0D
0008E829 E10C                       	smpsAlterNote       $0C
0008E82B E701                       	dc.b	smpsNoAttack, $01
0008E82D E108                       	smpsAlterNote       $08
0008E82F E701                       	dc.b	smpsNoAttack, $01
0008E831 E10C                       	smpsAlterNote       $0C
0008E833 E701                       	dc.b	smpsNoAttack, $01
0008E835 E112                       	smpsAlterNote       $12
0008E837 E701                       	dc.b	smpsNoAttack, $01
0008E839 E113                       	smpsAlterNote       $13
0008E83B E701                       	dc.b	smpsNoAttack, $01
0008E83D E10F                       	smpsAlterNote       $0F
0008E83F E701                       	dc.b	smpsNoAttack, $01
0008E841 E109                       	smpsAlterNote       $09
0008E843 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008E847 E10C                       	smpsAlterNote       $0C
0008E849 E701                       	dc.b	smpsNoAttack, $01
0008E84B E112                       	smpsAlterNote       $12
0008E84D E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008E851 E10C                       	smpsAlterNote       $0C
0008E853 E701                       	dc.b	smpsNoAttack, $01
0008E855 E109                       	smpsAlterNote       $09
0008E857 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008E85B E10F                       	smpsAlterNote       $0F
0008E85D E701                       	dc.b	smpsNoAttack, $01
0008E85F E113                       	smpsAlterNote       $13
0008E861 E701                       	dc.b	smpsNoAttack, $01
0008E863 E112                       	smpsAlterNote       $12
0008E865 E701                       	dc.b	smpsNoAttack, $01
0008E867 E10C                       	smpsAlterNote       $0C
0008E869 E701                       	dc.b	smpsNoAttack, $01
0008E86B E108                       	smpsAlterNote       $08
0008E86D E701                       	dc.b	smpsNoAttack, $01
0008E86F E10C                       	smpsAlterNote       $0C
0008E871 E701                       	dc.b	smpsNoAttack, $01
0008E873 E10F                       	smpsAlterNote       $0F
0008E875 E701                       	dc.b	smpsNoAttack, $01
0008E877 E113                       	smpsAlterNote       $13
0008E879 E701                       	dc.b	smpsNoAttack, $01
0008E87B E10F                       	smpsAlterNote       $0F
0008E87D E701                       	dc.b	smpsNoAttack, $01
0008E87F E109                       	smpsAlterNote       $09
0008E881 E701                       	dc.b	smpsNoAttack, $01
0008E883 E108                       	smpsAlterNote       $08
0008E885 E701                       	dc.b	smpsNoAttack, $01
0008E887 E10C                       	smpsAlterNote       $0C
0008E889 E701                       	dc.b	smpsNoAttack, $01
0008E88B E112                       	smpsAlterNote       $12
0008E88D E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008E891 E10F                       	smpsAlterNote       $0F
0008E893 E701                       	dc.b	smpsNoAttack, $01
0008E895 E109                       	smpsAlterNote       $09
0008E897 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008E89B E10F                       	smpsAlterNote       $0F
0008E89D E701                       	dc.b	smpsNoAttack, $01
0008E89F E113                       	smpsAlterNote       $13
0008E8A1 E701                       	dc.b	smpsNoAttack, $01
0008E8A3 E112                       	smpsAlterNote       $12
0008E8A5 E701                       	dc.b	smpsNoAttack, $01
0008E8A7 E10C                       	smpsAlterNote       $0C
0008E8A9 E701                       	dc.b	smpsNoAttack, $01
0008E8AB E108                       	smpsAlterNote       $08
0008E8AD E701                       	dc.b	smpsNoAttack, $01
0008E8AF E10C                       	smpsAlterNote       $0C
0008E8B1 E701                       	dc.b	smpsNoAttack, $01
0008E8B3 E10F                       	smpsAlterNote       $0F
0008E8B5 E701                       	dc.b	smpsNoAttack, $01
0008E8B7 E113                       	smpsAlterNote       $13
0008E8B9 E701                       	dc.b	smpsNoAttack, $01
0008E8BB E10F                       	smpsAlterNote       $0F
0008E8BD E701                       	dc.b	smpsNoAttack, $01
0008E8BF E109                       	smpsAlterNote       $09
0008E8C1 E701 8001                  	dc.b	smpsNoAttack, $01, nRst, $01
0008E8C5 E10F                       	smpsAlterNote       $0F
0008E8C7 C60D                       	dc.b	nA5, $0D
0008E8C9 E109                       	smpsAlterNote       $09
0008E8CB E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008E8CF E10C                       	smpsAlterNote       $0C
0008E8D1 E701                       	dc.b	smpsNoAttack, $01
0008E8D3 E112                       	smpsAlterNote       $12
0008E8D5 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008E8D9 E10C                       	smpsAlterNote       $0C
0008E8DB E701                       	dc.b	smpsNoAttack, $01
0008E8DD E109                       	smpsAlterNote       $09
0008E8DF E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008E8E3 E10F                       	smpsAlterNote       $0F
0008E8E5 E701                       	dc.b	smpsNoAttack, $01
0008E8E7 E113                       	smpsAlterNote       $13
0008E8E9 E701 8001                  	dc.b	smpsNoAttack, $01, nRst, $01
0008E8EF E10D                       	smpsAlterNote       $0D
0008E8F1 C206 C203 8001 C203        	dc.b	nF5, $06, nF5, $03, nRst, $01, nF5, $03
0008E8F9 E10C                       	smpsAlterNote       $0C
0008E8FB C103 800E                  	dc.b	nE5, $03, nRst, $0E
0008E901 E6FF                       	smpsAlterVol        $FF
0008E903 E10B                       	smpsAlterNote       $0B
0008E905 BF03 8001                  	dc.b	nD5, $03, nRst, $01
0008E909 E10C                       	smpsAlterNote       $0C
0008E90B C103                       	dc.b	nE5, $03
0008E90D E10D                       	smpsAlterNote       $0D
0008E90F C203 8001 C403 C606 8001   	dc.b	nF5, $03, nRst, $01, nG5, $03, nA5, $06, nRst, $01
0008E919 E10B                       	smpsAlterNote       $0B
0008E91B BF03 C90D                  	dc.b	nD5, $03, nC6, $0D
0008E91F E107                       	smpsAlterNote       $07
0008E921 E701                       	dc.b	smpsNoAttack, $01
0008E923 E104                       	smpsAlterNote       $04
0008E925 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008E929 E10A                       	smpsAlterNote       $0A
0008E92B E701                       	dc.b	smpsNoAttack, $01
0008E92D E10D                       	smpsAlterNote       $0D
0008E92F E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008E933 E107                       	smpsAlterNote       $07
0008E935 E701                       	dc.b	smpsNoAttack, $01
0008E937 E104                       	smpsAlterNote       $04
0008E939 8001                       	dc.b	nRst, $01
0008E93B E110                       	smpsAlterNote       $10
0008E93D C703                       	dc.b	nBb5, $03
0008E93F E10F                       	smpsAlterNote       $0F
0008E941 C603 8001                  	dc.b	nA5, $03, nRst, $01
0008E945 E10D                       	smpsAlterNote       $0D
0008E947 C403 C60D                  	dc.b	nG5, $03, nA5, $0D
0008E94B E10C                       	smpsAlterNote       $0C
0008E94D E701                       	dc.b	smpsNoAttack, $01
0008E94F E108                       	smpsAlterNote       $08
0008E951 E701                       	dc.b	smpsNoAttack, $01
0008E953 E109                       	smpsAlterNote       $09
0008E955 E701                       	dc.b	smpsNoAttack, $01
0008E957 E10F                       	smpsAlterNote       $0F
0008E959 E701                       	dc.b	smpsNoAttack, $01
0008E95B E113                       	smpsAlterNote       $13
0008E95D E701                       	dc.b	smpsNoAttack, $01
0008E95F E10F                       	smpsAlterNote       $0F
0008E961 E701                       	dc.b	smpsNoAttack, $01
0008E963 E10C                       	smpsAlterNote       $0C
0008E965 E701                       	dc.b	smpsNoAttack, $01
0008E967 E108                       	smpsAlterNote       $08
0008E969 E701                       	dc.b	smpsNoAttack, $01
0008E96B E10C                       	smpsAlterNote       $0C
0008E96D E701                       	dc.b	smpsNoAttack, $01
0008E96F E112                       	smpsAlterNote       $12
0008E971 E701                       	dc.b	smpsNoAttack, $01
0008E973 E113                       	smpsAlterNote       $13
0008E975 E701                       	dc.b	smpsNoAttack, $01
0008E977 E10F                       	smpsAlterNote       $0F
0008E979 E701                       	dc.b	smpsNoAttack, $01
0008E97B E109                       	smpsAlterNote       $09
0008E97D E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008E981 E10C                       	smpsAlterNote       $0C
0008E983 E701                       	dc.b	smpsNoAttack, $01
0008E985 E112                       	smpsAlterNote       $12
0008E987 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008E98B E10C                       	smpsAlterNote       $0C
0008E98D E701                       	dc.b	smpsNoAttack, $01
0008E98F E109                       	smpsAlterNote       $09
0008E991 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008E995 E10F                       	smpsAlterNote       $0F
0008E997 E701                       	dc.b	smpsNoAttack, $01
0008E999 E113                       	smpsAlterNote       $13
0008E99B E701                       	dc.b	smpsNoAttack, $01
0008E99D E112                       	smpsAlterNote       $12
0008E99F E701                       	dc.b	smpsNoAttack, $01
0008E9A1 E10C                       	smpsAlterNote       $0C
0008E9A3 E701                       	dc.b	smpsNoAttack, $01
0008E9A5 E108                       	smpsAlterNote       $08
0008E9A7 E701                       	dc.b	smpsNoAttack, $01
0008E9A9 E10C                       	smpsAlterNote       $0C
0008E9AB E701                       	dc.b	smpsNoAttack, $01
0008E9AD E10F                       	smpsAlterNote       $0F
0008E9AF E701                       	dc.b	smpsNoAttack, $01
0008E9B1 E113                       	smpsAlterNote       $13
0008E9B3 E701                       	dc.b	smpsNoAttack, $01
0008E9B5 E10F                       	smpsAlterNote       $0F
0008E9B7 BA03 8001                  	dc.b	nA4, $03, nRst, $01
0008E9BB E110                       	smpsAlterNote       $10
0008E9BD BB03                       	dc.b	nBb4, $03
0008E9BF E10F                       	smpsAlterNote       $0F
0008E9C1 BA06 8001                  	dc.b	nA4, $06, nRst, $01
0008E9C5 E10B                       	smpsAlterNote       $0B
0008E9C7 BF03                       	dc.b	nD5, $03
0008E9C9 E10C                       	smpsAlterNote       $0C
0008E9CB C103 8001                  	dc.b	nE5, $03, nRst, $01
0008E9CF E10D                       	smpsAlterNote       $0D
0008E9D1 C203 C403 8001 C606 8001   	dc.b	nF5, $03, nG5, $03, nRst, $01, nA5, $06, nRst, $01
0008E9DB E10B                       	smpsAlterNote       $0B
0008E9DD BF02 8001 C90D 8001 CB02+  	dc.b	nD5, $02, nRst, $01, nC6, $0D, nRst, $01, nD6, $02, nRst, $01
0008E9E9 E110                       	smpsAlterNote       $10
0008E9EB C704 8001                  	dc.b	nBb5, $04, nRst, $01
0008E9EF E10F                       	smpsAlterNote       $0F
0008E9F1 C604                       	dc.b	nA5, $04
0008E9F3 E10D                       	smpsAlterNote       $0D
0008E9F5 C404 8001 C60D             	dc.b	nG5, $04, nRst, $01, nA5, $0D
0008E9FB E109                       	smpsAlterNote       $09
0008E9FD E701                       	dc.b	smpsNoAttack, $01
0008E9FF E108                       	smpsAlterNote       $08
0008EA01 E701                       	dc.b	smpsNoAttack, $01
0008EA03 E10C                       	smpsAlterNote       $0C
0008EA05 E701                       	dc.b	smpsNoAttack, $01
0008EA07 E112                       	smpsAlterNote       $12
0008EA09 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008EA0D E10F                       	smpsAlterNote       $0F
0008EA0F E701                       	dc.b	smpsNoAttack, $01
0008EA11 E109                       	smpsAlterNote       $09
0008EA13 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008EA17 E10F                       	smpsAlterNote       $0F
0008EA19 E701                       	dc.b	smpsNoAttack, $01
0008EA1B E112                       	smpsAlterNote       $12
0008EA1D E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008EA21 E10C                       	smpsAlterNote       $0C
0008EA23 E701                       	dc.b	smpsNoAttack, $01
0008EA25 E108                       	smpsAlterNote       $08
0008EA27 E701                       	dc.b	smpsNoAttack, $01
0008EA29 E109                       	smpsAlterNote       $09
0008EA2B E701                       	dc.b	smpsNoAttack, $01
0008EA2D E10F                       	smpsAlterNote       $0F
0008EA2F E701                       	dc.b	smpsNoAttack, $01
0008EA31 E113                       	smpsAlterNote       $13
0008EA33 E701                       	dc.b	smpsNoAttack, $01
0008EA35 E10F                       	smpsAlterNote       $0F
0008EA37 E701                       	dc.b	smpsNoAttack, $01
0008EA39 E10C                       	smpsAlterNote       $0C
0008EA3B E701                       	dc.b	smpsNoAttack, $01
0008EA3D E108                       	smpsAlterNote       $08
0008EA3F E701                       	dc.b	smpsNoAttack, $01
0008EA41 E10C                       	smpsAlterNote       $0C
0008EA43 E701                       	dc.b	smpsNoAttack, $01
0008EA45 E112                       	smpsAlterNote       $12
0008EA47 E701                       	dc.b	smpsNoAttack, $01
0008EA49 E113                       	smpsAlterNote       $13
0008EA4B E701                       	dc.b	smpsNoAttack, $01
0008EA4D E10F                       	smpsAlterNote       $0F
0008EA4F E701                       	dc.b	smpsNoAttack, $01
0008EA51 E109                       	smpsAlterNote       $09
0008EA53 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008EA57 E10C                       	smpsAlterNote       $0C
0008EA59 E701                       	dc.b	smpsNoAttack, $01
0008EA5B E112                       	smpsAlterNote       $12
0008EA5D E701                       	dc.b	smpsNoAttack, $01
0008EA5F E113                       	smpsAlterNote       $13
0008EA61 8001                       	dc.b	nRst, $01
0008EA63 E10F                       	smpsAlterNote       $0F
0008EA65 C602 C602 C602 8001 C601+  	dc.b	nA5, $02, nA5, $02, nA5, $02, nRst, $01, nA5, $01, nRst, $01
0008EA71 C602 C602 8001 C604        	dc.b	nA5, $02, nA5, $02, nRst, $01, nA5, $04
0008EA79 E10D                       	smpsAlterNote       $0D
0008EA7B C404 8001 C604             	dc.b	nG5, $04, nRst, $01, nA5, $04
0008EA81 E10B                       	smpsAlterNote       $0B
0008EA83 BF0D                       	dc.b	nD5, $0D
0008EA85 E108                       	smpsAlterNote       $08
0008EA87 E701                       	dc.b	smpsNoAttack, $01
0008EA89 E104                       	smpsAlterNote       $04
0008EA8B E701                       	dc.b	smpsNoAttack, $01
0008EA8D E105                       	smpsAlterNote       $05
0008EA8F E701                       	dc.b	smpsNoAttack, $01
0008EA91 E10B                       	smpsAlterNote       $0B
0008EA93 E701                       	dc.b	smpsNoAttack, $01
0008EA95 E10F                       	smpsAlterNote       $0F
0008EA97 E701                       	dc.b	smpsNoAttack, $01
0008EA99 E10B                       	smpsAlterNote       $0B
0008EA9B E701                       	dc.b	smpsNoAttack, $01
0008EA9D E108                       	smpsAlterNote       $08
0008EA9F E701                       	dc.b	smpsNoAttack, $01
0008EAA1 E104                       	smpsAlterNote       $04
0008EAA3 E701                       	dc.b	smpsNoAttack, $01
0008EAA5 E108                       	smpsAlterNote       $08
0008EAA7 E701                       	dc.b	smpsNoAttack, $01
0008EAA9 E10E                       	smpsAlterNote       $0E
0008EAAB E701                       	dc.b	smpsNoAttack, $01
0008EAAD E10F                       	smpsAlterNote       $0F
0008EAAF E701                       	dc.b	smpsNoAttack, $01
0008EAB1 E10C                       	smpsAlterNote       $0C
0008EAB3 C101                       	dc.b	nE5, $01
0008EAB5 E10D                       	smpsAlterNote       $0D
0008EAB7 C201 C401 8001 C606        	dc.b	nF5, $01, nG5, $01, nRst, $01, nA5, $06
0008EABF E10F                       	smpsAlterNote       $0F
0008EAC1 C607                       	dc.b	nA5, $07
0008EAC3 E10C                       	smpsAlterNote       $0C
0008EAC5 CD07                       	dc.b	nE6, $07
0008EAC7 E10D                       	smpsAlterNote       $0D
0008EAC9 CE06 8001                  	dc.b	nF6, $06, nRst, $01
0008EACD E10C                       	smpsAlterNote       $0C
0008EACF CD03                       	dc.b	nE6, $03
0008EAD1 E10A                       	smpsAlterNote       $0A
0008EAD3 C903 8001                  	dc.b	nC6, $03, nRst, $01
0008EAD7 E10D                       	smpsAlterNote       $0D
0008EAD9 C403 C70D E701             	dc.b	nG5, $03, nBb5, $0D, smpsNoAttack, $01
0008EADF E10A                       	smpsAlterNote       $0A
0008EAE1 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008EAE5 E110                       	smpsAlterNote       $10
0008EAE7 E701                       	dc.b	smpsNoAttack, $01
0008EAE9 E114                       	smpsAlterNote       $14
0008EAEB E701                       	dc.b	smpsNoAttack, $01
0008EAED E113                       	smpsAlterNote       $13
0008EAEF E701                       	dc.b	smpsNoAttack, $01
0008EAF1 E10D                       	smpsAlterNote       $0D
0008EAF3 E701                       	dc.b	smpsNoAttack, $01
0008EAF5 E109                       	smpsAlterNote       $09
0008EAF7 E701                       	dc.b	smpsNoAttack, $01
0008EAF9 E10D                       	smpsAlterNote       $0D
0008EAFB E701                       	dc.b	smpsNoAttack, $01
0008EAFD E110                       	smpsAlterNote       $10
0008EAFF E701                       	dc.b	smpsNoAttack, $01
0008EB01 E114                       	smpsAlterNote       $14
0008EB03 E701                       	dc.b	smpsNoAttack, $01
0008EB05 E10F                       	smpsAlterNote       $0F
0008EB07 C607 C50D                  	dc.b	nA5, $07, nAb5, $0D
0008EB0B E10C                       	smpsAlterNote       $0C
0008EB0D E701                       	dc.b	smpsNoAttack, $01
0008EB0F E108                       	smpsAlterNote       $08
0008EB11 E701                       	dc.b	smpsNoAttack, $01
0008EB13 E10C                       	smpsAlterNote       $0C
0008EB15 E701                       	dc.b	smpsNoAttack, $01
0008EB17 E10F                       	smpsAlterNote       $0F
0008EB19 E701                       	dc.b	smpsNoAttack, $01
0008EB1B E113                       	smpsAlterNote       $13
0008EB1D E701                       	dc.b	smpsNoAttack, $01
0008EB1F E10F                       	smpsAlterNote       $0F
0008EB21 E701                       	dc.b	smpsNoAttack, $01
0008EB23 E109                       	smpsAlterNote       $09
0008EB25 E701                       	dc.b	smpsNoAttack, $01
0008EB27 E108                       	smpsAlterNote       $08
0008EB29 E701                       	dc.b	smpsNoAttack, $01
0008EB2B E10C                       	smpsAlterNote       $0C
0008EB2D E701                       	dc.b	smpsNoAttack, $01
0008EB2F E112                       	smpsAlterNote       $12
0008EB31 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008EB35 E10F                       	smpsAlterNote       $0F
0008EB37 E701                       	dc.b	smpsNoAttack, $01
0008EB39 E109                       	smpsAlterNote       $09
0008EB3B E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008EB3F E10F                       	smpsAlterNote       $0F
0008EB41 E701                       	dc.b	smpsNoAttack, $01
0008EB43 E112                       	smpsAlterNote       $12
0008EB45 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008EB49 E10C                       	smpsAlterNote       $0C
0008EB4B E701                       	dc.b	smpsNoAttack, $01
0008EB4D E108                       	smpsAlterNote       $08
0008EB4F E701                       	dc.b	smpsNoAttack, $01
0008EB51 E109                       	smpsAlterNote       $09
0008EB53 E701                       	dc.b	smpsNoAttack, $01
0008EB55 E10F                       	smpsAlterNote       $0F
0008EB57 E701                       	dc.b	smpsNoAttack, $01
0008EB59 E113                       	smpsAlterNote       $13
0008EB5B E701                       	dc.b	smpsNoAttack, $01
0008EB5D E10F                       	smpsAlterNote       $0F
0008EB5F E701                       	dc.b	smpsNoAttack, $01
0008EB61 E10C                       	smpsAlterNote       $0C
0008EB63 E701                       	dc.b	smpsNoAttack, $01
0008EB65 E108                       	smpsAlterNote       $08
0008EB67 E701                       	dc.b	smpsNoAttack, $01
0008EB69 E10C                       	smpsAlterNote       $0C
0008EB6B E701                       	dc.b	smpsNoAttack, $01
0008EB6D E112                       	smpsAlterNote       $12
0008EB6F E701                       	dc.b	smpsNoAttack, $01
0008EB71 E113                       	smpsAlterNote       $13
0008EB73 E701                       	dc.b	smpsNoAttack, $01
0008EB75 E10F                       	smpsAlterNote       $0F
0008EB77 E701                       	dc.b	smpsNoAttack, $01
0008EB79 E109                       	smpsAlterNote       $09
0008EB7B E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008EB7F E10C                       	smpsAlterNote       $0C
0008EB81 E701                       	dc.b	smpsNoAttack, $01
0008EB83 E112                       	smpsAlterNote       $12
0008EB85 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008EB89 E10C                       	smpsAlterNote       $0C
0008EB8B E701                       	dc.b	smpsNoAttack, $01
0008EB8D E109                       	smpsAlterNote       $09
0008EB8F E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008EB93 E10F                       	smpsAlterNote       $0F
0008EB95 E701                       	dc.b	smpsNoAttack, $01
0008EB97 E113                       	smpsAlterNote       $13
0008EB99 E701                       	dc.b	smpsNoAttack, $01
0008EB9B E112                       	smpsAlterNote       $12
0008EB9D E701                       	dc.b	smpsNoAttack, $01
0008EB9F E10C                       	smpsAlterNote       $0C
0008EBA1 E701                       	dc.b	smpsNoAttack, $01
0008EBA3 E109                       	smpsAlterNote       $09
0008EBA5 8001                       	dc.b	nRst, $01
0008EBA7 E10F                       	smpsAlterNote       $0F
0008EBA9 C60D                       	dc.b	nA5, $0D
0008EBAB E10C                       	smpsAlterNote       $0C
0008EBAD E701                       	dc.b	smpsNoAttack, $01
0008EBAF E108                       	smpsAlterNote       $08
0008EBB1 E701                       	dc.b	smpsNoAttack, $01
0008EBB3 E10C                       	smpsAlterNote       $0C
0008EBB5 E701                       	dc.b	smpsNoAttack, $01
0008EBB7 E112                       	smpsAlterNote       $12
0008EBB9 E701                       	dc.b	smpsNoAttack, $01
0008EBBB E113                       	smpsAlterNote       $13
0008EBBD E701                       	dc.b	smpsNoAttack, $01
0008EBBF E10F                       	smpsAlterNote       $0F
0008EBC1 E701                       	dc.b	smpsNoAttack, $01
0008EBC3 E109                       	smpsAlterNote       $09
0008EBC5 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008EBC9 E10C                       	smpsAlterNote       $0C
0008EBCB E701                       	dc.b	smpsNoAttack, $01
0008EBCD E112                       	smpsAlterNote       $12
0008EBCF E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008EBD3 E10C                       	smpsAlterNote       $0C
0008EBD5 E701                       	dc.b	smpsNoAttack, $01
0008EBD7 E109                       	smpsAlterNote       $09
0008EBD9 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008EBDD E10F                       	smpsAlterNote       $0F
0008EBDF E701                       	dc.b	smpsNoAttack, $01
0008EBE1 E113                       	smpsAlterNote       $13
0008EBE3 E701                       	dc.b	smpsNoAttack, $01
0008EBE5 E112                       	smpsAlterNote       $12
0008EBE7 E701                       	dc.b	smpsNoAttack, $01
0008EBE9 E10C                       	smpsAlterNote       $0C
0008EBEB E701                       	dc.b	smpsNoAttack, $01
0008EBED E108                       	smpsAlterNote       $08
0008EBEF E701                       	dc.b	smpsNoAttack, $01
0008EBF1 E10C                       	smpsAlterNote       $0C
0008EBF3 E701                       	dc.b	smpsNoAttack, $01
0008EBF5 E10F                       	smpsAlterNote       $0F
0008EBF7 E701                       	dc.b	smpsNoAttack, $01
0008EBF9 E113                       	smpsAlterNote       $13
0008EBFB E701                       	dc.b	smpsNoAttack, $01
0008EBFD E10F                       	smpsAlterNote       $0F
0008EBFF E701                       	dc.b	smpsNoAttack, $01
0008EC01 E109                       	smpsAlterNote       $09
0008EC03 E701                       	dc.b	smpsNoAttack, $01
0008EC05 E108                       	smpsAlterNote       $08
0008EC07 E701                       	dc.b	smpsNoAttack, $01
0008EC09 E10C                       	smpsAlterNote       $0C
0008EC0B E701                       	dc.b	smpsNoAttack, $01
0008EC0D E112                       	smpsAlterNote       $12
0008EC0F E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008EC13 E10F                       	smpsAlterNote       $0F
0008EC15 E701                       	dc.b	smpsNoAttack, $01
0008EC17 E109                       	smpsAlterNote       $09
0008EC19 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008EC1D E10F                       	smpsAlterNote       $0F
0008EC1F E701                       	dc.b	smpsNoAttack, $01
0008EC21 E112                       	smpsAlterNote       $12
0008EC23 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008EC27 E10C                       	smpsAlterNote       $0C
0008EC29 E701                       	dc.b	smpsNoAttack, $01
0008EC2B E108                       	smpsAlterNote       $08
0008EC2D E701                       	dc.b	smpsNoAttack, $01
0008EC2F E10C                       	smpsAlterNote       $0C
0008EC31 E701                       	dc.b	smpsNoAttack, $01
0008EC33 E10F                       	smpsAlterNote       $0F
0008EC35 E701                       	dc.b	smpsNoAttack, $01
0008EC37 E113                       	smpsAlterNote       $13
0008EC39 E701                       	dc.b	smpsNoAttack, $01
0008EC3B E10F                       	smpsAlterNote       $0F
0008EC3D E701                       	dc.b	smpsNoAttack, $01
0008EC3F E109                       	smpsAlterNote       $09
0008EC41 E701 8001                  	dc.b	smpsNoAttack, $01, nRst, $01
0008EC47 E601                       	smpsAlterVol        $01
0008EC49 E10F                       	smpsAlterNote       $0F
0008EC4B C604                       	dc.b	nA5, $04
0008EC4D E10D                       	smpsAlterNote       $0D
0008EC4F C404 8001 C604             	dc.b	nG5, $04, nRst, $01, nA5, $04
0008EC55 E10B                       	smpsAlterNote       $0B
0008EC57 BF0A 8001 BF02 8001        	dc.b	nD5, $0A, nRst, $01, nD5, $02, nRst, $01
0008EC5F E10F                       	smpsAlterNote       $0F
0008EC61 C604 8001                  	dc.b	nA5, $04, nRst, $01
0008EC65 E10D                       	smpsAlterNote       $0D
0008EC67 C404 C604 8001             	dc.b	nG5, $04, nA5, $04, nRst, $01
0008EC6D E10C                       	smpsAlterNote       $0C
0008EC6F C109 8001 C103             	dc.b	nE5, $09, nRst, $01, nE5, $03
0008EC75 E10A                       	smpsAlterNote       $0A
0008EC77 C904 8001                  	dc.b	nC6, $04, nRst, $01
0008EC7B E110                       	smpsAlterNote       $10
0008EC7D C704 8001                  	dc.b	nBb5, $04, nRst, $01
0008EC81 E10F                       	smpsAlterNote       $0F
0008EC83 C604                       	dc.b	nA5, $04
0008EC85 E10D                       	smpsAlterNote       $0D
0008EC87 C403 8001 C202 8001 C403+  	dc.b	nG5, $03, nRst, $01, nF5, $02, nRst, $01, nG5, $03, nA5, $0E
0008EC93 E109                       	smpsAlterNote       $09
0008EC95 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008EC99 E10F                       	smpsAlterNote       $0F
0008EC9B E701                       	dc.b	smpsNoAttack, $01
0008EC9D E112                       	smpsAlterNote       $12
0008EC9F E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008ECA3 E10C                       	smpsAlterNote       $0C
0008ECA5 E701                       	dc.b	smpsNoAttack, $01
0008ECA7 E108                       	smpsAlterNote       $08
0008ECA9 E701                       	dc.b	smpsNoAttack, $01
0008ECAB E10C                       	smpsAlterNote       $0C
0008ECAD E701                       	dc.b	smpsNoAttack, $01
0008ECAF E10F                       	smpsAlterNote       $0F
0008ECB1 E701                       	dc.b	smpsNoAttack, $01
0008ECB3 E113                       	smpsAlterNote       $13
0008ECB5 E701                       	dc.b	smpsNoAttack, $01
0008ECB7 E10D                       	smpsAlterNote       $0D
0008ECB9 C403 8001 C203             	dc.b	nG5, $03, nRst, $01, nF5, $03
0008ECBF E10C                       	smpsAlterNote       $0C
0008ECC1 C10D                       	dc.b	nE5, $0D
0008ECC3 E109                       	smpsAlterNote       $09
0008ECC5 E701                       	dc.b	smpsNoAttack, $01
0008ECC7 E105                       	smpsAlterNote       $05
0008ECC9 E701                       	dc.b	smpsNoAttack, $01
0008ECCB E106                       	smpsAlterNote       $06
0008ECCD E701                       	dc.b	smpsNoAttack, $01
0008ECCF E10C                       	smpsAlterNote       $0C
0008ECD1 E701                       	dc.b	smpsNoAttack, $01
0008ECD3 E110                       	smpsAlterNote       $10
0008ECD5 E701                       	dc.b	smpsNoAttack, $01
0008ECD7 E10C                       	smpsAlterNote       $0C
0008ECD9 E701                       	dc.b	smpsNoAttack, $01
0008ECDB E109                       	smpsAlterNote       $09
0008ECDD E701                       	dc.b	smpsNoAttack, $01
0008ECDF E105                       	smpsAlterNote       $05
0008ECE1 E701                       	dc.b	smpsNoAttack, $01
0008ECE3 E109                       	smpsAlterNote       $09
0008ECE5 E701                       	dc.b	smpsNoAttack, $01
0008ECE7 E10F                       	smpsAlterNote       $0F
0008ECE9 E701                       	dc.b	smpsNoAttack, $01
0008ECEB E110                       	smpsAlterNote       $10
0008ECED E701                       	dc.b	smpsNoAttack, $01
0008ECEF E10C                       	smpsAlterNote       $0C
0008ECF1 E701                       	dc.b	smpsNoAttack, $01
0008ECF3 E106                       	smpsAlterNote       $06
0008ECF5 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008ECF9 E109                       	smpsAlterNote       $09
0008ECFB E701                       	dc.b	smpsNoAttack, $01
0008ECFD E10F                       	smpsAlterNote       $0F
0008ECFF E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008ED03 E109                       	smpsAlterNote       $09
0008ED05 E701                       	dc.b	smpsNoAttack, $01
0008ED07 E106                       	smpsAlterNote       $06
0008ED09 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008ED0D E10C                       	smpsAlterNote       $0C
0008ED0F E701                       	dc.b	smpsNoAttack, $01
0008ED11 E110                       	smpsAlterNote       $10
0008ED13 E701                       	dc.b	smpsNoAttack, $01
0008ED15 E10F                       	smpsAlterNote       $0F
0008ED17 E701                       	dc.b	smpsNoAttack, $01
0008ED19 E109                       	smpsAlterNote       $09
0008ED1B E701                       	dc.b	smpsNoAttack, $01
0008ED1D E105                       	smpsAlterNote       $05
0008ED1F E701                       	dc.b	smpsNoAttack, $01
0008ED21 E109                       	smpsAlterNote       $09
0008ED23 E701                       	dc.b	smpsNoAttack, $01
0008ED25 E10C                       	smpsAlterNote       $0C
0008ED27 E701                       	dc.b	smpsNoAttack, $01
0008ED29 E110                       	smpsAlterNote       $10
0008ED2B E701                       	dc.b	smpsNoAttack, $01
0008ED2D E10C                       	smpsAlterNote       $0C
0008ED2F E701                       	dc.b	smpsNoAttack, $01
0008ED31 E106                       	smpsAlterNote       $06
0008ED33 E701                       	dc.b	smpsNoAttack, $01
0008ED35 E105                       	smpsAlterNote       $05
0008ED37 E701                       	dc.b	smpsNoAttack, $01
0008ED39 E109                       	smpsAlterNote       $09
0008ED3B E701                       	dc.b	smpsNoAttack, $01
0008ED3D E10F                       	smpsAlterNote       $0F
0008ED3F E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008ED43 E10C                       	smpsAlterNote       $0C
0008ED45 E701                       	dc.b	smpsNoAttack, $01
0008ED47 E106                       	smpsAlterNote       $06
0008ED49 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008ED4D E10C                       	smpsAlterNote       $0C
0008ED4F E701                       	dc.b	smpsNoAttack, $01
0008ED51 E10F                       	smpsAlterNote       $0F
0008ED53 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008ED57 E109                       	smpsAlterNote       $09
0008ED59 E701                       	dc.b	smpsNoAttack, $01
0008ED5B E105                       	smpsAlterNote       $05
0008ED5D E701                       	dc.b	smpsNoAttack, $01
0008ED5F E106                       	smpsAlterNote       $06
0008ED61 E701                       	dc.b	smpsNoAttack, $01
0008ED63 E10C                       	smpsAlterNote       $0C
0008ED65 E701                       	dc.b	smpsNoAttack, $01
0008ED67 E110                       	smpsAlterNote       $10
0008ED69 E701                       	dc.b	smpsNoAttack, $01
0008ED6B E10C                       	smpsAlterNote       $0C
0008ED6D E701                       	dc.b	smpsNoAttack, $01
0008ED6F E109                       	smpsAlterNote       $09
0008ED71 E701                       	dc.b	smpsNoAttack, $01
0008ED73 E105                       	smpsAlterNote       $05
0008ED75 E701                       	dc.b	smpsNoAttack, $01
0008ED77 E109                       	smpsAlterNote       $09
0008ED79 E701                       	dc.b	smpsNoAttack, $01
0008ED7B E10F                       	smpsAlterNote       $0F
0008ED7D E701                       	dc.b	smpsNoAttack, $01
0008ED7F E110                       	smpsAlterNote       $10
0008ED81 E701                       	dc.b	smpsNoAttack, $01
0008ED83 E10C                       	smpsAlterNote       $0C
0008ED85 E701                       	dc.b	smpsNoAttack, $01
0008ED87 E106                       	smpsAlterNote       $06
0008ED89 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008ED8D E109                       	smpsAlterNote       $09
0008ED8F E701                       	dc.b	smpsNoAttack, $01
0008ED91 E10F                       	smpsAlterNote       $0F
0008ED93 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008ED97 E109                       	smpsAlterNote       $09
0008ED99 E701                       	dc.b	smpsNoAttack, $01
0008ED9B E106                       	smpsAlterNote       $06
0008ED9D E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008EDA1 E10C                       	smpsAlterNote       $0C
0008EDA3 E701                       	dc.b	smpsNoAttack, $01
0008EDA5 E110                       	smpsAlterNote       $10
0008EDA7 E701                       	dc.b	smpsNoAttack, $01
0008EDA9 E10F                       	smpsAlterNote       $0F
0008EDAB E701                       	dc.b	smpsNoAttack, $01
0008EDAD E109                       	smpsAlterNote       $09
0008EDAF E701                       	dc.b	smpsNoAttack, $01
0008EDB1 E105                       	smpsAlterNote       $05
0008EDB3 E701                       	dc.b	smpsNoAttack, $01
0008EDB5 E109                       	smpsAlterNote       $09
0008EDB7 E701                       	dc.b	smpsNoAttack, $01
0008EDB9 E10C                       	smpsAlterNote       $0C
0008EDBB E701                       	dc.b	smpsNoAttack, $01
0008EDBD E110                       	smpsAlterNote       $10
0008EDBF E701                       	dc.b	smpsNoAttack, $01
0008EDC1 E10C                       	smpsAlterNote       $0C
0008EDC3 E701                       	dc.b	smpsNoAttack, $01
0008EDC5 E106                       	smpsAlterNote       $06
0008EDC7 E701                       	dc.b	smpsNoAttack, $01
0008EDC9 E105                       	smpsAlterNote       $05
0008EDCB E701                       	dc.b	smpsNoAttack, $01
0008EDCD E109                       	smpsAlterNote       $09
0008EDCF E701                       	dc.b	smpsNoAttack, $01
0008EDD1 E10F                       	smpsAlterNote       $0F
0008EDD3 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008EDD7 E109                       	smpsAlterNote       $09
0008EDD9 E701                       	dc.b	smpsNoAttack, $01
0008EDDB E106                       	smpsAlterNote       $06
0008EDDD E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008EDE1 E10C                       	smpsAlterNote       $0C
0008EDE3 E701                       	dc.b	smpsNoAttack, $01
0008EDE5 E110                       	smpsAlterNote       $10
0008EDE7 E701                       	dc.b	smpsNoAttack, $01
0008EDE9 E10F                       	smpsAlterNote       $0F
0008EDEB E701                       	dc.b	smpsNoAttack, $01
0008EDED E109                       	smpsAlterNote       $09
0008EDEF E701                       	dc.b	smpsNoAttack, $01
0008EDF1 E105                       	smpsAlterNote       $05
0008EDF3 E701                       	dc.b	smpsNoAttack, $01
0008EDF5 E109                       	smpsAlterNote       $09
0008EDF7 E701                       	dc.b	smpsNoAttack, $01
0008EDF9 E10C                       	smpsAlterNote       $0C
0008EDFB E701                       	dc.b	smpsNoAttack, $01
0008EDFD E110                       	smpsAlterNote       $10
0008EDFF E701                       	dc.b	smpsNoAttack, $01
0008EE01 E10C                       	smpsAlterNote       $0C
0008EE03 E701                       	dc.b	smpsNoAttack, $01
0008EE05 E106                       	smpsAlterNote       $06
0008EE07 E701                       	dc.b	smpsNoAttack, $01
0008EE09 E105                       	smpsAlterNote       $05
0008EE0B E701                       	dc.b	smpsNoAttack, $01
0008EE0D E109                       	smpsAlterNote       $09
0008EE0F E701                       	dc.b	smpsNoAttack, $01
0008EE11 E10F                       	smpsAlterNote       $0F
0008EE13 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008EE17 E10C                       	smpsAlterNote       $0C
0008EE19 E701                       	dc.b	smpsNoAttack, $01
0008EE1B E106                       	smpsAlterNote       $06
0008EE1D E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008EE21 E10C                       	smpsAlterNote       $0C
0008EE23 E701                       	dc.b	smpsNoAttack, $01
0008EE25 E10F                       	smpsAlterNote       $0F
0008EE27 E701                       	dc.b	smpsNoAttack, $01
0008EE29 E110                       	smpsAlterNote       $10
0008EE2B 8001                       	dc.b	nRst, $01
0008EE2D E10F                       	smpsAlterNote       $0F
0008EE2F C604                       	dc.b	nA5, $04
0008EE31 E10D                       	smpsAlterNote       $0D
0008EE33 C404 8001 C604             	dc.b	nG5, $04, nRst, $01, nA5, $04
0008EE39 E10B                       	smpsAlterNote       $0B
0008EE3B BF0A 8001 BF03             	dc.b	nD5, $0A, nRst, $01, nD5, $03
0008EE41 E10F                       	smpsAlterNote       $0F
0008EE43 C604 8001                  	dc.b	nA5, $04, nRst, $01
0008EE47 E10D                       	smpsAlterNote       $0D
0008EE49 C404 C604 8001             	dc.b	nG5, $04, nA5, $04, nRst, $01
0008EE4F E10C                       	smpsAlterNote       $0C
0008EE51 C10A C103 8001             	dc.b	nE5, $0A, nE5, $03, nRst, $01
0008EE57 E10A                       	smpsAlterNote       $0A
0008EE59 C904                       	dc.b	nC6, $04
0008EE5B E110                       	smpsAlterNote       $10
0008EE5D C704 8001                  	dc.b	nBb5, $04, nRst, $01
0008EE61 E10F                       	smpsAlterNote       $0F
0008EE63 C604                       	dc.b	nA5, $04
0008EE65 E10D                       	smpsAlterNote       $0D
0008EE67 C403 8001 C202 8001 C403+  	dc.b	nG5, $03, nRst, $01, nF5, $02, nRst, $01, nG5, $03, nA5, $0E
0008EE73 E109                       	smpsAlterNote       $09
0008EE75 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008EE79 E10F                       	smpsAlterNote       $0F
0008EE7B E701                       	dc.b	smpsNoAttack, $01
0008EE7D E112                       	smpsAlterNote       $12
0008EE7F E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008EE83 E10C                       	smpsAlterNote       $0C
0008EE85 E701                       	dc.b	smpsNoAttack, $01
0008EE87 E108                       	smpsAlterNote       $08
0008EE89 E701                       	dc.b	smpsNoAttack, $01
0008EE8B E109                       	smpsAlterNote       $09
0008EE8D E701                       	dc.b	smpsNoAttack, $01
0008EE8F E10F                       	smpsAlterNote       $0F
0008EE91 E701                       	dc.b	smpsNoAttack, $01
0008EE93 E113                       	smpsAlterNote       $13
0008EE95 E701                       	dc.b	smpsNoAttack, $01
0008EE97 E10D                       	smpsAlterNote       $0D
0008EE99 C403 8001 C203             	dc.b	nG5, $03, nRst, $01, nF5, $03
0008EE9F E10C                       	smpsAlterNote       $0C
0008EEA1 C10D                       	dc.b	nE5, $0D
0008EEA3 E109                       	smpsAlterNote       $09
0008EEA5 E701                       	dc.b	smpsNoAttack, $01
0008EEA7 E106                       	smpsAlterNote       $06
0008EEA9 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008EEAD E10C                       	smpsAlterNote       $0C
0008EEAF E701                       	dc.b	smpsNoAttack, $01
0008EEB1 E110                       	smpsAlterNote       $10
0008EEB3 E701                       	dc.b	smpsNoAttack, $01
0008EEB5 E10F                       	smpsAlterNote       $0F
0008EEB7 E701                       	dc.b	smpsNoAttack, $01
0008EEB9 E109                       	smpsAlterNote       $09
0008EEBB E701                       	dc.b	smpsNoAttack, $01
0008EEBD E105                       	smpsAlterNote       $05
0008EEBF E701                       	dc.b	smpsNoAttack, $01
0008EEC1 E109                       	smpsAlterNote       $09
0008EEC3 E701                       	dc.b	smpsNoAttack, $01
0008EEC5 E10C                       	smpsAlterNote       $0C
0008EEC7 E701                       	dc.b	smpsNoAttack, $01
0008EEC9 E110                       	smpsAlterNote       $10
0008EECB E701                       	dc.b	smpsNoAttack, $01
0008EECD E10C                       	smpsAlterNote       $0C
0008EECF E701                       	dc.b	smpsNoAttack, $01
0008EED1 E106                       	smpsAlterNote       $06
0008EED3 E701                       	dc.b	smpsNoAttack, $01
0008EED5 E105                       	smpsAlterNote       $05
0008EED7 E701                       	dc.b	smpsNoAttack, $01
0008EED9 E109                       	smpsAlterNote       $09
0008EEDB E701                       	dc.b	smpsNoAttack, $01
0008EEDD E10F                       	smpsAlterNote       $0F
0008EEDF E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008EEE3 E10C                       	smpsAlterNote       $0C
0008EEE5 E701                       	dc.b	smpsNoAttack, $01
0008EEE7 E106                       	smpsAlterNote       $06
0008EEE9 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008EEED E10C                       	smpsAlterNote       $0C
0008EEEF E701                       	dc.b	smpsNoAttack, $01
0008EEF1 E10F                       	smpsAlterNote       $0F
0008EEF3 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008EEF7 E109                       	smpsAlterNote       $09
0008EEF9 E701                       	dc.b	smpsNoAttack, $01
0008EEFB E105                       	smpsAlterNote       $05
0008EEFD E701                       	dc.b	smpsNoAttack, $01
0008EEFF E106                       	smpsAlterNote       $06
0008EF01 E701                       	dc.b	smpsNoAttack, $01
0008EF03 E10C                       	smpsAlterNote       $0C
0008EF05 E701                       	dc.b	smpsNoAttack, $01
0008EF07 E110                       	smpsAlterNote       $10
0008EF09 E701                       	dc.b	smpsNoAttack, $01
0008EF0B E10C                       	smpsAlterNote       $0C
0008EF0D E701                       	dc.b	smpsNoAttack, $01
0008EF0F E109                       	smpsAlterNote       $09
0008EF11 E701                       	dc.b	smpsNoAttack, $01
0008EF13 E105                       	smpsAlterNote       $05
0008EF15 E701                       	dc.b	smpsNoAttack, $01
0008EF17 E109                       	smpsAlterNote       $09
0008EF19 E701                       	dc.b	smpsNoAttack, $01
0008EF1B E10F                       	smpsAlterNote       $0F
0008EF1D E701                       	dc.b	smpsNoAttack, $01
0008EF1F E110                       	smpsAlterNote       $10
0008EF21 E701                       	dc.b	smpsNoAttack, $01
0008EF23 E10C                       	smpsAlterNote       $0C
0008EF25 E701                       	dc.b	smpsNoAttack, $01
0008EF27 E106                       	smpsAlterNote       $06
0008EF29 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008EF2D E109                       	smpsAlterNote       $09
0008EF2F E701                       	dc.b	smpsNoAttack, $01
0008EF31 E10F                       	smpsAlterNote       $0F
0008EF33 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008EF37 E109                       	smpsAlterNote       $09
0008EF39 E701                       	dc.b	smpsNoAttack, $01
0008EF3B E106                       	smpsAlterNote       $06
0008EF3D E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008EF41 E10C                       	smpsAlterNote       $0C
0008EF43 E701                       	dc.b	smpsNoAttack, $01
0008EF45 E110                       	smpsAlterNote       $10
0008EF47 E701                       	dc.b	smpsNoAttack, $01
0008EF49 E10F                       	smpsAlterNote       $0F
0008EF4B E701                       	dc.b	smpsNoAttack, $01
0008EF4D E109                       	smpsAlterNote       $09
0008EF4F E701                       	dc.b	smpsNoAttack, $01
0008EF51 E105                       	smpsAlterNote       $05
0008EF53 E701                       	dc.b	smpsNoAttack, $01
0008EF55 E109                       	smpsAlterNote       $09
0008EF57 E701                       	dc.b	smpsNoAttack, $01
0008EF59 E10F                       	smpsAlterNote       $0F
0008EF5B E701                       	dc.b	smpsNoAttack, $01
0008EF5D E110                       	smpsAlterNote       $10
0008EF5F E701                       	dc.b	smpsNoAttack, $01
0008EF61 E10C                       	smpsAlterNote       $0C
0008EF63 E701                       	dc.b	smpsNoAttack, $01
0008EF65 E106                       	smpsAlterNote       $06
0008EF67 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008EF6B E109                       	smpsAlterNote       $09
0008EF6D E701                       	dc.b	smpsNoAttack, $01
0008EF6F E10F                       	smpsAlterNote       $0F
0008EF71 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008EF75 E109                       	smpsAlterNote       $09
0008EF77 E701                       	dc.b	smpsNoAttack, $01
0008EF79 E106                       	smpsAlterNote       $06
0008EF7B E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008EF7F E10C                       	smpsAlterNote       $0C
0008EF81 E701                       	dc.b	smpsNoAttack, $01
0008EF83 E110                       	smpsAlterNote       $10
0008EF85 E701                       	dc.b	smpsNoAttack, $01
0008EF87 E10F                       	smpsAlterNote       $0F
0008EF89 E701                       	dc.b	smpsNoAttack, $01
0008EF8B E109                       	smpsAlterNote       $09
0008EF8D E701                       	dc.b	smpsNoAttack, $01
0008EF8F E105                       	smpsAlterNote       $05
0008EF91 E701                       	dc.b	smpsNoAttack, $01
0008EF93 E109                       	smpsAlterNote       $09
0008EF95 E701                       	dc.b	smpsNoAttack, $01
0008EF97 E10C                       	smpsAlterNote       $0C
0008EF99 E701                       	dc.b	smpsNoAttack, $01
0008EF9B E110                       	smpsAlterNote       $10
0008EF9D E701                       	dc.b	smpsNoAttack, $01
0008EF9F E10C                       	smpsAlterNote       $0C
0008EFA1 E701                       	dc.b	smpsNoAttack, $01
0008EFA3 E106                       	smpsAlterNote       $06
0008EFA5 E701                       	dc.b	smpsNoAttack, $01
0008EFA7 E105                       	smpsAlterNote       $05
0008EFA9 E701                       	dc.b	smpsNoAttack, $01
0008EFAB E109                       	smpsAlterNote       $09
0008EFAD E701                       	dc.b	smpsNoAttack, $01
0008EFAF E10F                       	smpsAlterNote       $0F
0008EFB1 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008EFB5 E10C                       	smpsAlterNote       $0C
0008EFB7 E701                       	dc.b	smpsNoAttack, $01
0008EFB9 E106                       	smpsAlterNote       $06
0008EFBB E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008EFBF E10C                       	smpsAlterNote       $0C
0008EFC1 E701                       	dc.b	smpsNoAttack, $01
0008EFC3 E10F                       	smpsAlterNote       $0F
0008EFC5 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008EFC9 E109                       	smpsAlterNote       $09
0008EFCB E701                       	dc.b	smpsNoAttack, $01
0008EFCD E105                       	smpsAlterNote       $05
0008EFCF E701                       	dc.b	smpsNoAttack, $01
0008EFD1 E106                       	smpsAlterNote       $06
0008EFD3 E701                       	dc.b	smpsNoAttack, $01
0008EFD5 E10C                       	smpsAlterNote       $0C
0008EFD7 E701                       	dc.b	smpsNoAttack, $01
0008EFD9 E110                       	smpsAlterNote       $10
0008EFDB E701                       	dc.b	smpsNoAttack, $01
0008EFDD E10C                       	smpsAlterNote       $0C
0008EFDF E701                       	dc.b	smpsNoAttack, $01
0008EFE1 E109                       	smpsAlterNote       $09
0008EFE3 E701                       	dc.b	smpsNoAttack, $01
0008EFE5 E105                       	smpsAlterNote       $05
0008EFE7 E701                       	dc.b	smpsNoAttack, $01
0008EFE9 E109                       	smpsAlterNote       $09
0008EFEB E701                       	dc.b	smpsNoAttack, $01
0008EFED E10F                       	smpsAlterNote       $0F
0008EFEF E701                       	dc.b	smpsNoAttack, $01
0008EFF1 E110                       	smpsAlterNote       $10
0008EFF3 E701                       	dc.b	smpsNoAttack, $01
0008EFF5 E10C                       	smpsAlterNote       $0C
0008EFF7 E701                       	dc.b	smpsNoAttack, $01
0008EFF9 E106                       	smpsAlterNote       $06
0008EFFB E701                       	dc.b	smpsNoAttack, $01
0008EFFD E10B                       	smpsAlterNote       $0B
0008EFFF BF02                       	dc.b	nD5, $02
0008F001 E10C                       	smpsAlterNote       $0C
0008F003 C001 8001 C10D             	dc.b	nEb5, $01, nRst, $01, nE5, $0D
0008F009 E109                       	smpsAlterNote       $09
0008F00B E701                       	dc.b	smpsNoAttack, $01
0008F00D E105                       	smpsAlterNote       $05
0008F00F E701                       	dc.b	smpsNoAttack, $01
0008F011 E109                       	smpsAlterNote       $09
0008F013 E701                       	dc.b	smpsNoAttack, $01
0008F015 E10F                       	smpsAlterNote       $0F
0008F017 E701                       	dc.b	smpsNoAttack, $01
0008F019 E110                       	smpsAlterNote       $10
0008F01B E701                       	dc.b	smpsNoAttack, $01
0008F01D E10C                       	smpsAlterNote       $0C
0008F01F E701                       	dc.b	smpsNoAttack, $01
0008F021 E106                       	smpsAlterNote       $06
0008F023 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008F027 E109                       	smpsAlterNote       $09
0008F029 E701                       	dc.b	smpsNoAttack, $01
0008F02B E10F                       	smpsAlterNote       $0F
0008F02D E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008F031 E109                       	smpsAlterNote       $09
0008F033 E701                       	dc.b	smpsNoAttack, $01
0008F035 E106                       	smpsAlterNote       $06
0008F037 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008F03B E10C                       	smpsAlterNote       $0C
0008F03D E701                       	dc.b	smpsNoAttack, $01
0008F03F E110                       	smpsAlterNote       $10
0008F041 E701                       	dc.b	smpsNoAttack, $01
0008F043 E10F                       	smpsAlterNote       $0F
0008F045 E701                       	dc.b	smpsNoAttack, $01
0008F047 E109                       	smpsAlterNote       $09
0008F049 E701                       	dc.b	smpsNoAttack, $01
0008F04B E105                       	smpsAlterNote       $05
0008F04D E701                       	dc.b	smpsNoAttack, $01
0008F04F E109                       	smpsAlterNote       $09
0008F051 E701                       	dc.b	smpsNoAttack, $01
0008F053 E10C                       	smpsAlterNote       $0C
0008F055 E701                       	dc.b	smpsNoAttack, $01
0008F057 E110                       	smpsAlterNote       $10
0008F059 E701                       	dc.b	smpsNoAttack, $01
0008F05B E10C                       	smpsAlterNote       $0C
0008F05D E701                       	dc.b	smpsNoAttack, $01
0008F05F E106                       	smpsAlterNote       $06
0008F061 E701 8001                  	dc.b	smpsNoAttack, $01, nRst, $01
0008F065 E10D                       	smpsAlterNote       $0D
0008F067 C409 8001 C206 8001        	dc.b	nG5, $09, nRst, $01, nF5, $06, nRst, $01
0008F06F E10C                       	smpsAlterNote       $0C
0008F071 C10D                       	dc.b	nE5, $0D
0008F073 E106                       	smpsAlterNote       $06
0008F075 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008F079 E109                       	smpsAlterNote       $09
0008F07B E701                       	dc.b	smpsNoAttack, $01
0008F07D E10F                       	smpsAlterNote       $0F
0008F07F E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008F083 E109                       	smpsAlterNote       $09
0008F085 E701                       	dc.b	smpsNoAttack, $01
0008F087 E106                       	smpsAlterNote       $06
0008F089 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008F08D E10C                       	smpsAlterNote       $0C
0008F08F E701                       	dc.b	smpsNoAttack, $01
0008F091 E110                       	smpsAlterNote       $10
0008F093 E701                       	dc.b	smpsNoAttack, $01
0008F095 E10F                       	smpsAlterNote       $0F
0008F097 E701                       	dc.b	smpsNoAttack, $01
0008F099 E109                       	smpsAlterNote       $09
0008F09B E701                       	dc.b	smpsNoAttack, $01
0008F09D E105                       	smpsAlterNote       $05
0008F09F E701                       	dc.b	smpsNoAttack, $01
0008F0A1 E106                       	smpsAlterNote       $06
0008F0A3 800F                       	dc.b	nRst, $0F
0008F0A7 E6FF                       	smpsAlterVol        $FF
0008F0A9 E10F                       	smpsAlterNote       $0F
0008F0AB BA01                       	dc.b	nA4, $01
0008F0AD E110                       	smpsAlterNote       $10
0008F0AF BB02                       	dc.b	nBb4, $02
0008F0B1 E10F                       	smpsAlterNote       $0F
0008F0B3 BA03 8001 BA06             	dc.b	nA4, $03, nRst, $01, nA4, $06
0008F0B9 E10B                       	smpsAlterNote       $0B
0008F0BB BF03 8001                  	dc.b	nD5, $03, nRst, $01
0008F0BF E10C                       	smpsAlterNote       $0C
0008F0C1 C103                       	dc.b	nE5, $03
0008F0C3 E10D                       	smpsAlterNote       $0D
0008F0C5 C203 8001 C403 C606 8001   	dc.b	nF5, $03, nRst, $01, nG5, $03, nA5, $06, nRst, $01
0008F0CF E10B                       	smpsAlterNote       $0B
0008F0D1 BF03 C90E                  	dc.b	nD5, $03, nC6, $0E
0008F0D5 E104                       	smpsAlterNote       $04
0008F0D7 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008F0DB E10A                       	smpsAlterNote       $0A
0008F0DD E701                       	dc.b	smpsNoAttack, $01
0008F0DF E10D                       	smpsAlterNote       $0D
0008F0E1 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008F0E5 E107                       	smpsAlterNote       $07
0008F0E7 E701                       	dc.b	smpsNoAttack, $01
0008F0E9 E104                       	smpsAlterNote       $04
0008F0EB 8001                       	dc.b	nRst, $01
0008F0ED E110                       	smpsAlterNote       $10
0008F0EF C703                       	dc.b	nBb5, $03
0008F0F1 E10F                       	smpsAlterNote       $0F
0008F0F3 C603 8001                  	dc.b	nA5, $03, nRst, $01
0008F0F7 E10D                       	smpsAlterNote       $0D
0008F0F9 C403 C60D                  	dc.b	nG5, $03, nA5, $0D
0008F0FD E10C                       	smpsAlterNote       $0C
0008F0FF E701                       	dc.b	smpsNoAttack, $01
0008F101 E108                       	smpsAlterNote       $08
0008F103 E701                       	dc.b	smpsNoAttack, $01
0008F105 E109                       	smpsAlterNote       $09
0008F107 E701                       	dc.b	smpsNoAttack, $01
0008F109 E10F                       	smpsAlterNote       $0F
0008F10B E701                       	dc.b	smpsNoAttack, $01
0008F10D E113                       	smpsAlterNote       $13
0008F10F E701                       	dc.b	smpsNoAttack, $01
0008F111 E10F                       	smpsAlterNote       $0F
0008F113 E701                       	dc.b	smpsNoAttack, $01
0008F115 E10C                       	smpsAlterNote       $0C
0008F117 E701                       	dc.b	smpsNoAttack, $01
0008F119 E108                       	smpsAlterNote       $08
0008F11B E701                       	dc.b	smpsNoAttack, $01
0008F11D E10C                       	smpsAlterNote       $0C
0008F11F E701                       	dc.b	smpsNoAttack, $01
0008F121 E112                       	smpsAlterNote       $12
0008F123 E701                       	dc.b	smpsNoAttack, $01
0008F125 E113                       	smpsAlterNote       $13
0008F127 E701                       	dc.b	smpsNoAttack, $01
0008F129 E10F                       	smpsAlterNote       $0F
0008F12B E701                       	dc.b	smpsNoAttack, $01
0008F12D E109                       	smpsAlterNote       $09
0008F12F E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008F133 E10C                       	smpsAlterNote       $0C
0008F135 E701                       	dc.b	smpsNoAttack, $01
0008F137 E112                       	smpsAlterNote       $12
0008F139 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008F13D E10C                       	smpsAlterNote       $0C
0008F13F E701                       	dc.b	smpsNoAttack, $01
0008F141 E109                       	smpsAlterNote       $09
0008F143 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008F147 E10F                       	smpsAlterNote       $0F
0008F149 E701                       	dc.b	smpsNoAttack, $01
0008F14B E113                       	smpsAlterNote       $13
0008F14D E701                       	dc.b	smpsNoAttack, $01
0008F14F E112                       	smpsAlterNote       $12
0008F151 E701                       	dc.b	smpsNoAttack, $01
0008F153 E10C                       	smpsAlterNote       $0C
0008F155 E701                       	dc.b	smpsNoAttack, $01
0008F157 E108                       	smpsAlterNote       $08
0008F159 E701                       	dc.b	smpsNoAttack, $01
0008F15B E10C                       	smpsAlterNote       $0C
0008F15D E701                       	dc.b	smpsNoAttack, $01
0008F15F E10F                       	smpsAlterNote       $0F
0008F161 E701                       	dc.b	smpsNoAttack, $01
0008F163 E113                       	smpsAlterNote       $13
0008F165 E701 800E                  	dc.b	smpsNoAttack, $01, nRst, $0E
0008F169 E10B                       	smpsAlterNote       $0B
0008F16B BF03                       	dc.b	nD5, $03
0008F16D E10C                       	smpsAlterNote       $0C
0008F16F C103 8001                  	dc.b	nE5, $03, nRst, $01
0008F173 E10D                       	smpsAlterNote       $0D
0008F175 C203 C403 8001 C606 8001   	dc.b	nF5, $03, nG5, $03, nRst, $01, nA5, $06, nRst, $01
0008F17F E10B                       	smpsAlterNote       $0B
0008F181 BF02 8001 C90D 8001 CB02+  	dc.b	nD5, $02, nRst, $01, nC6, $0D, nRst, $01, nD6, $02, nRst, $01
0008F18D E110                       	smpsAlterNote       $10
0008F18F C704 8001                  	dc.b	nBb5, $04, nRst, $01
0008F193 E10F                       	smpsAlterNote       $0F
0008F195 C604                       	dc.b	nA5, $04
0008F197 E10D                       	smpsAlterNote       $0D
0008F199 C404 8001 C60D             	dc.b	nG5, $04, nRst, $01, nA5, $0D
0008F19F E109                       	smpsAlterNote       $09
0008F1A1 E701                       	dc.b	smpsNoAttack, $01
0008F1A3 E108                       	smpsAlterNote       $08
0008F1A5 E701                       	dc.b	smpsNoAttack, $01
0008F1A7 E10C                       	smpsAlterNote       $0C
0008F1A9 E701                       	dc.b	smpsNoAttack, $01
0008F1AB E112                       	smpsAlterNote       $12
0008F1AD E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008F1B1 E10F                       	smpsAlterNote       $0F
0008F1B3 E701                       	dc.b	smpsNoAttack, $01
0008F1B5 E109                       	smpsAlterNote       $09
0008F1B7 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008F1BB E10F                       	smpsAlterNote       $0F
0008F1BD E701                       	dc.b	smpsNoAttack, $01
0008F1BF E112                       	smpsAlterNote       $12
0008F1C1 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008F1C5 E10C                       	smpsAlterNote       $0C
0008F1C7 E701                       	dc.b	smpsNoAttack, $01
0008F1C9 E108                       	smpsAlterNote       $08
0008F1CB E701                       	dc.b	smpsNoAttack, $01
0008F1CD E109                       	smpsAlterNote       $09
0008F1CF E701                       	dc.b	smpsNoAttack, $01
0008F1D1 E10F                       	smpsAlterNote       $0F
0008F1D3 E701                       	dc.b	smpsNoAttack, $01
0008F1D5 E113                       	smpsAlterNote       $13
0008F1D7 E701                       	dc.b	smpsNoAttack, $01
0008F1D9 E10F                       	smpsAlterNote       $0F
0008F1DB E701                       	dc.b	smpsNoAttack, $01
0008F1DD E10C                       	smpsAlterNote       $0C
0008F1DF E701                       	dc.b	smpsNoAttack, $01
0008F1E1 E108                       	smpsAlterNote       $08
0008F1E3 E701                       	dc.b	smpsNoAttack, $01
0008F1E5 E10C                       	smpsAlterNote       $0C
0008F1E7 E701                       	dc.b	smpsNoAttack, $01
0008F1E9 E112                       	smpsAlterNote       $12
0008F1EB E701                       	dc.b	smpsNoAttack, $01
0008F1ED E113                       	smpsAlterNote       $13
0008F1EF E701                       	dc.b	smpsNoAttack, $01
0008F1F1 E10F                       	smpsAlterNote       $0F
0008F1F3 E701                       	dc.b	smpsNoAttack, $01
0008F1F5 E109                       	smpsAlterNote       $09
0008F1F7 E701                       	dc.b	smpsNoAttack, $01
0008F1F9 E10D                       	smpsAlterNote       $0D
0008F1FB C402                       	dc.b	nG5, $02
0008F1FD E10F                       	smpsAlterNote       $0F
0008F1FF C501 8001 C60D 8001 C604   	dc.b	nAb5, $01, nRst, $01, nA5, $0D, nRst, $01, nA5, $04
0008F209 E10D                       	smpsAlterNote       $0D
0008F20B C404 8001 C604             	dc.b	nG5, $04, nRst, $01, nA5, $04
0008F211 E10B                       	smpsAlterNote       $0B
0008F213 BF0D                       	dc.b	nD5, $0D
0008F215 E108                       	smpsAlterNote       $08
0008F217 E701                       	dc.b	smpsNoAttack, $01
0008F219 E104                       	smpsAlterNote       $04
0008F21B E701                       	dc.b	smpsNoAttack, $01
0008F21D E105                       	smpsAlterNote       $05
0008F21F E701                       	dc.b	smpsNoAttack, $01
0008F221 E10B                       	smpsAlterNote       $0B
0008F223 E701                       	dc.b	smpsNoAttack, $01
0008F225 E10F                       	smpsAlterNote       $0F
0008F227 E701                       	dc.b	smpsNoAttack, $01
0008F229 E10B                       	smpsAlterNote       $0B
0008F22B E701                       	dc.b	smpsNoAttack, $01
0008F22D E108                       	smpsAlterNote       $08
0008F22F E701                       	dc.b	smpsNoAttack, $01
0008F231 E104                       	smpsAlterNote       $04
0008F233 E701                       	dc.b	smpsNoAttack, $01
0008F235 E108                       	smpsAlterNote       $08
0008F237 E701                       	dc.b	smpsNoAttack, $01
0008F239 E10E                       	smpsAlterNote       $0E
0008F23B E701                       	dc.b	smpsNoAttack, $01
0008F23D E10F                       	smpsAlterNote       $0F
0008F23F E701                       	dc.b	smpsNoAttack, $01
0008F241 E10C                       	smpsAlterNote       $0C
0008F243 C101                       	dc.b	nE5, $01
0008F245 E10D                       	smpsAlterNote       $0D
0008F247 C201 C401 8001 C606        	dc.b	nF5, $01, nG5, $01, nRst, $01, nA5, $06
0008F24F E10F                       	smpsAlterNote       $0F
0008F251 C607                       	dc.b	nA5, $07
0008F253 E10C                       	smpsAlterNote       $0C
0008F255 CD07                       	dc.b	nE6, $07
0008F257 E10D                       	smpsAlterNote       $0D
0008F259 CE06 8001                  	dc.b	nF6, $06, nRst, $01
0008F25D E10C                       	smpsAlterNote       $0C
0008F25F CD03                       	dc.b	nE6, $03
0008F261 E10A                       	smpsAlterNote       $0A
0008F263 C903 8001                  	dc.b	nC6, $03, nRst, $01
0008F267 E10D                       	smpsAlterNote       $0D
0008F269 C403 C70D E701             	dc.b	nG5, $03, nBb5, $0D, smpsNoAttack, $01
0008F26F E10A                       	smpsAlterNote       $0A
0008F271 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008F275 E110                       	smpsAlterNote       $10
0008F277 E701                       	dc.b	smpsNoAttack, $01
0008F279 E114                       	smpsAlterNote       $14
0008F27B E701                       	dc.b	smpsNoAttack, $01
0008F27D E113                       	smpsAlterNote       $13
0008F27F E701                       	dc.b	smpsNoAttack, $01
0008F281 E10D                       	smpsAlterNote       $0D
0008F283 E701                       	dc.b	smpsNoAttack, $01
0008F285 E109                       	smpsAlterNote       $09
0008F287 E701                       	dc.b	smpsNoAttack, $01
0008F289 E10D                       	smpsAlterNote       $0D
0008F28B E701                       	dc.b	smpsNoAttack, $01
0008F28D E110                       	smpsAlterNote       $10
0008F28F E701                       	dc.b	smpsNoAttack, $01
0008F291 E114                       	smpsAlterNote       $14
0008F293 E701                       	dc.b	smpsNoAttack, $01
0008F295 E10F                       	smpsAlterNote       $0F
0008F297 C607                       	dc.b	nA5, $07
0008F299 E10D                       	smpsAlterNote       $0D
0008F29B C40D                       	dc.b	nG5, $0D
0008F29D E10A                       	smpsAlterNote       $0A
0008F29F E701                       	dc.b	smpsNoAttack, $01
0008F2A1 E106                       	smpsAlterNote       $06
0008F2A3 E701                       	dc.b	smpsNoAttack, $01
0008F2A5 E10A                       	smpsAlterNote       $0A
0008F2A7 E701                       	dc.b	smpsNoAttack, $01
0008F2A9 E10D                       	smpsAlterNote       $0D
0008F2AB E701                       	dc.b	smpsNoAttack, $01
0008F2AD E111                       	smpsAlterNote       $11
0008F2AF E701                       	dc.b	smpsNoAttack, $01
0008F2B1 E10D                       	smpsAlterNote       $0D
0008F2B3 E701                       	dc.b	smpsNoAttack, $01
0008F2B5 E107                       	smpsAlterNote       $07
0008F2B7 E701                       	dc.b	smpsNoAttack, $01
0008F2B9 E106                       	smpsAlterNote       $06
0008F2BB E701                       	dc.b	smpsNoAttack, $01
0008F2BD E10A                       	smpsAlterNote       $0A
0008F2BF E701                       	dc.b	smpsNoAttack, $01
0008F2C1 E110                       	smpsAlterNote       $10
0008F2C3 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008F2C7 E10D                       	smpsAlterNote       $0D
0008F2C9 E701                       	dc.b	smpsNoAttack, $01
0008F2CB E107                       	smpsAlterNote       $07
0008F2CD E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008F2D1 E10F                       	smpsAlterNote       $0F
0008F2D3 C60E                       	dc.b	nA5, $0E
0008F2D5 E109                       	smpsAlterNote       $09
0008F2D7 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008F2DB E10F                       	smpsAlterNote       $0F
0008F2DD E701                       	dc.b	smpsNoAttack, $01
0008F2DF E112                       	smpsAlterNote       $12
0008F2E1 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008F2E5 E10C                       	smpsAlterNote       $0C
0008F2E7 E701                       	dc.b	smpsNoAttack, $01
0008F2E9 E108                       	smpsAlterNote       $08
0008F2EB E701                       	dc.b	smpsNoAttack, $01
0008F2ED E109                       	smpsAlterNote       $09
0008F2EF E701                       	dc.b	smpsNoAttack, $01
0008F2F1 E10F                       	smpsAlterNote       $0F
0008F2F3 E701                       	dc.b	smpsNoAttack, $01
0008F2F5 E113                       	smpsAlterNote       $13
0008F2F7 E701                       	dc.b	smpsNoAttack, $01
0008F2F9 E10F                       	smpsAlterNote       $0F
0008F2FB E701                       	dc.b	smpsNoAttack, $01
0008F2FD E10C                       	smpsAlterNote       $0C
0008F2FF E701                       	dc.b	smpsNoAttack, $01
0008F301 E108                       	smpsAlterNote       $08
0008F303 E701                       	dc.b	smpsNoAttack, $01
0008F305 E109                       	smpsAlterNote       $09
0008F307 8001                       	dc.b	nRst, $01
0008F309 E110                       	smpsAlterNote       $10
0008F30B C70D                       	dc.b	nBb5, $0D
0008F30D E10D                       	smpsAlterNote       $0D
0008F30F E701                       	dc.b	smpsNoAttack, $01
0008F311 E109                       	smpsAlterNote       $09
0008F313 E701                       	dc.b	smpsNoAttack, $01
0008F315 E10D                       	smpsAlterNote       $0D
0008F317 E701                       	dc.b	smpsNoAttack, $01
0008F319 E113                       	smpsAlterNote       $13
0008F31B E701                       	dc.b	smpsNoAttack, $01
0008F31D E114                       	smpsAlterNote       $14
0008F31F E701                       	dc.b	smpsNoAttack, $01
0008F321 E110                       	smpsAlterNote       $10
0008F323 E701                       	dc.b	smpsNoAttack, $01
0008F325 E10A                       	smpsAlterNote       $0A
0008F327 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008F32B E10D                       	smpsAlterNote       $0D
0008F32D E701                       	dc.b	smpsNoAttack, $01
0008F32F E113                       	smpsAlterNote       $13
0008F331 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008F335 E10D                       	smpsAlterNote       $0D
0008F337 E701                       	dc.b	smpsNoAttack, $01
0008F339 E10A                       	smpsAlterNote       $0A
0008F33B E701 E701 C90C 8001 8001   	dc.b	smpsNoAttack, $01, smpsNoAttack, $01, nC6, $0C, nRst, $01, nRst, $01
0008F345 E10B                       	smpsAlterNote       $0B
0008F347 8001                       	dc.b	nRst, $01
0008F349 E10C                       	smpsAlterNote       $0C
0008F34B CD0C 8001                  	dc.b	nE6, $0C, nRst, $01
0008F34F E10B                       	smpsAlterNote       $0B
0008F351 CB0D                       	dc.b	nD6, $0D
0008F353 E105                       	smpsAlterNote       $05
0008F355 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008F359 E108                       	smpsAlterNote       $08
0008F35B E701                       	dc.b	smpsNoAttack, $01
0008F35D E10E                       	smpsAlterNote       $0E
0008F35F E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008F363 E108                       	smpsAlterNote       $08
0008F365 E701                       	dc.b	smpsNoAttack, $01
0008F367 E105                       	smpsAlterNote       $05
0008F369 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008F36D E10B                       	smpsAlterNote       $0B
0008F36F E701                       	dc.b	smpsNoAttack, $01
0008F371 E10F                       	smpsAlterNote       $0F
0008F373 E701 8001                  	dc.b	smpsNoAttack, $01, nRst, $01
0008F377 E10C                       	smpsAlterNote       $0C
0008F379 CC0D                       	dc.b	nEb6, $0D
0008F37B E106                       	smpsAlterNote       $06
0008F37D E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008F381 E109                       	smpsAlterNote       $09
0008F383 E701                       	dc.b	smpsNoAttack, $01
0008F385 E10C                       	smpsAlterNote       $0C
0008F387 8001                       	dc.b	nRst, $01
0008F389 E10A                       	smpsAlterNote       $0A
0008F38B C906 8001 C901 8001 C902+  	dc.b	nC6, $06, nRst, $01, nC6, $01, nRst, $01, nC6, $02, nC6, $02
0008F397 CB0E                       	dc.b	nD6, $0E
0008F399 E105                       	smpsAlterNote       $05
0008F39B E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008F39F E10B                       	smpsAlterNote       $0B
0008F3A1 E701                       	dc.b	smpsNoAttack, $01
0008F3A3 E10E                       	smpsAlterNote       $0E
0008F3A5 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008F3A9 E108                       	smpsAlterNote       $08
0008F3AB E701                       	dc.b	smpsNoAttack, $01
0008F3AD E104                       	smpsAlterNote       $04
0008F3AF E701                       	dc.b	smpsNoAttack, $01
0008F3B1 E105                       	smpsAlterNote       $05
0008F3B3 E701                       	dc.b	smpsNoAttack, $01
0008F3B5 E10B                       	smpsAlterNote       $0B
0008F3B7 E701                       	dc.b	smpsNoAttack, $01
0008F3B9 E10F                       	smpsAlterNote       $0F
0008F3BB E701                       	dc.b	smpsNoAttack, $01
0008F3BD E10D                       	smpsAlterNote       $0D
0008F3BF CE0A 8001                  	dc.b	nF6, $0A, nRst, $01
0008F3C3 E10C                       	smpsAlterNote       $0C
0008F3C5 CC06 8001                  	dc.b	nEb6, $06, nRst, $01
0008F3C9 E10A                       	smpsAlterNote       $0A
0008F3CB C906 C902 8001 C901 8001+  	dc.b	nC6, $06, nC6, $02, nRst, $01, nC6, $01, nRst, $01, nC6, $02
0008F3D7 CB0D                       	dc.b	nD6, $0D
0008F3D9 E108                       	smpsAlterNote       $08
0008F3DB E701                       	dc.b	smpsNoAttack, $01
0008F3DD E104                       	smpsAlterNote       $04
0008F3DF E701                       	dc.b	smpsNoAttack, $01
0008F3E1 E105                       	smpsAlterNote       $05
0008F3E3 E701                       	dc.b	smpsNoAttack, $01
0008F3E5 E10B                       	smpsAlterNote       $0B
0008F3E7 E701                       	dc.b	smpsNoAttack, $01
0008F3E9 E10F                       	smpsAlterNote       $0F
0008F3EB E701                       	dc.b	smpsNoAttack, $01
0008F3ED E10B                       	smpsAlterNote       $0B
0008F3EF E701                       	dc.b	smpsNoAttack, $01
0008F3F1 E108                       	smpsAlterNote       $08
0008F3F3 E701                       	dc.b	smpsNoAttack, $01
0008F3F5 E104                       	smpsAlterNote       $04
0008F3F7 E701                       	dc.b	smpsNoAttack, $01
0008F3F9 E108                       	smpsAlterNote       $08
0008F3FB E701                       	dc.b	smpsNoAttack, $01
0008F3FD E10E                       	smpsAlterNote       $0E
0008F3FF E701                       	dc.b	smpsNoAttack, $01
0008F401 E10F                       	smpsAlterNote       $0F
0008F403 E701                       	dc.b	smpsNoAttack, $01
0008F405 E10C                       	smpsAlterNote       $0C
0008F407 CC0D                       	dc.b	nEb6, $0D
0008F409 E109                       	smpsAlterNote       $09
0008F40B E701                       	dc.b	smpsNoAttack, $01
0008F40D E105                       	smpsAlterNote       $05
0008F40F E701                       	dc.b	smpsNoAttack, $01
0008F411 E106                       	smpsAlterNote       $06
0008F413 E701                       	dc.b	smpsNoAttack, $01
0008F415 E10C                       	smpsAlterNote       $0C
0008F417 E701                       	dc.b	smpsNoAttack, $01
0008F419 E10A                       	smpsAlterNote       $0A
0008F41B C907 C902 C902 8001 C901+  	dc.b	nC6, $07, nC6, $02, nC6, $02, nRst, $01, nC6, $01, nRst, $01
0008F427 CB0D                       	dc.b	nD6, $0D
0008F429 E108                       	smpsAlterNote       $08
0008F42B E701                       	dc.b	smpsNoAttack, $01
0008F42D E104                       	smpsAlterNote       $04
0008F42F E701                       	dc.b	smpsNoAttack, $01
0008F431 E108                       	smpsAlterNote       $08
0008F433 E701                       	dc.b	smpsNoAttack, $01
0008F435 E10B                       	smpsAlterNote       $0B
0008F437 E701                       	dc.b	smpsNoAttack, $01
0008F439 E10F                       	smpsAlterNote       $0F
0008F43B E701                       	dc.b	smpsNoAttack, $01
0008F43D E10B                       	smpsAlterNote       $0B
0008F43F E701                       	dc.b	smpsNoAttack, $01
0008F441 E105                       	smpsAlterNote       $05
0008F443 E701                       	dc.b	smpsNoAttack, $01
0008F445 E104                       	smpsAlterNote       $04
0008F447 E701                       	dc.b	smpsNoAttack, $01
0008F449 E108                       	smpsAlterNote       $08
0008F44B E701                       	dc.b	smpsNoAttack, $01
0008F44D E10E                       	smpsAlterNote       $0E
0008F44F E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008F453 E10B                       	smpsAlterNote       $0B
0008F455 E701                       	dc.b	smpsNoAttack, $01
0008F457 E105                       	smpsAlterNote       $05
0008F459 E701 E701 8019             	dc.b	smpsNoAttack, $01, smpsNoAttack, $01, nRst, $19
0008F461 03                         	dc.b	$03
0008F462 E601                       	smpsAlterVol        $01
0008F464 F6F1 D1                    	smpsJump            music84_Jump01
0008F467                            
0008F467                            ; FM5 Data
0008F467                            music84_FM5:
0008F469 E080                       	smpsPan             panLeft, $00
0008F46B 8003                       	dc.b	nRst, $03
0008F46D E10D                       	smpsAlterNote       $0D
0008F46F C203 8008                  	dc.b	nF5, $03, nRst, $08
0008F473 E10C                       	smpsAlterNote       $0C
0008F475 C103 800A                  	dc.b	nE5, $03, nRst, $0A
0008F479 E10F                       	smpsAlterNote       $0F
0008F47B BA03 8006                  	dc.b	nA4, $03, nRst, $06
0008F481 E6FE                       	smpsAlterVol        $FE
0008F483 C703 C603 8001             	dc.b	nBb5, $03, nA5, $03, nRst, $01
0008F489 E10D                       	smpsAlterNote       $0D
0008F48B C403 C203 8001             	dc.b	nG5, $03, nF5, $03, nRst, $01
0008F491 E10C                       	smpsAlterNote       $0C
0008F493 C102 8001                  	dc.b	nE5, $02, nRst, $01
0008F497 E10A                       	smpsAlterNote       $0A
0008F499 BD01 8001                  	dc.b	nC5, $01, nRst, $01
0008F49F 03                         	dc.b	$03
0008F4A0                            
0008F4A0                            music84_Jump00:
0008F4A0 8004                       	dc.b	nRst, $04
0008F4A2 E602                       	smpsAlterVol        $02
0008F4A4 E10D                       	smpsAlterNote       $0D
0008F4A6 B60D                       	dc.b	nF4, $0D
0008F4A8 E107                       	smpsAlterNote       $07
0008F4AA E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008F4AE E10A                       	smpsAlterNote       $0A
0008F4B0 E701                       	dc.b	smpsNoAttack, $01
0008F4B2 E110                       	smpsAlterNote       $10
0008F4B4 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008F4B8 E10A                       	smpsAlterNote       $0A
0008F4BA E701                       	dc.b	smpsNoAttack, $01
0008F4BC E107                       	smpsAlterNote       $07
0008F4BE E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008F4C2 E10D                       	smpsAlterNote       $0D
0008F4C4 E701                       	dc.b	smpsNoAttack, $01
0008F4C6 E111                       	smpsAlterNote       $11
0008F4C8 E701 8001                  	dc.b	smpsNoAttack, $01, nRst, $01
0008F4CC E10D                       	smpsAlterNote       $0D
0008F4CE B80D                       	dc.b	nG4, $0D
0008F4D0 E107                       	smpsAlterNote       $07
0008F4D2 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008F4D6 E10A                       	smpsAlterNote       $0A
0008F4D8 E701                       	dc.b	smpsNoAttack, $01
0008F4DA E110                       	smpsAlterNote       $10
0008F4DC E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008F4E0 E10A                       	smpsAlterNote       $0A
0008F4E2 E701                       	dc.b	smpsNoAttack, $01
0008F4E4 E107                       	smpsAlterNote       $07
0008F4E6 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008F4EA E10D                       	smpsAlterNote       $0D
0008F4EC E701                       	dc.b	smpsNoAttack, $01
0008F4EE E111                       	smpsAlterNote       $11
0008F4F0 E701                       	dc.b	smpsNoAttack, $01
0008F4F2 E110                       	smpsAlterNote       $10
0008F4F4 E701                       	dc.b	smpsNoAttack, $01
0008F4F6 E10A                       	smpsAlterNote       $0A
0008F4F8 E701                       	dc.b	smpsNoAttack, $01
0008F4FA E106                       	smpsAlterNote       $06
0008F4FC E701                       	dc.b	smpsNoAttack, $01
0008F4FE E10A                       	smpsAlterNote       $0A
0008F500 E701                       	dc.b	smpsNoAttack, $01
0008F502 E10D                       	smpsAlterNote       $0D
0008F504 E701                       	dc.b	smpsNoAttack, $01
0008F506 E111                       	smpsAlterNote       $11
0008F508 E701                       	dc.b	smpsNoAttack, $01
0008F50A E10D                       	smpsAlterNote       $0D
0008F50C E701                       	dc.b	smpsNoAttack, $01
0008F50E E10F                       	smpsAlterNote       $0F
0008F510 BA0E                       	dc.b	nA4, $0E
0008F512 E109                       	smpsAlterNote       $09
0008F514 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008F518 E10F                       	smpsAlterNote       $0F
0008F51A E701                       	dc.b	smpsNoAttack, $01
0008F51C E112                       	smpsAlterNote       $12
0008F51E E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008F522 E10C                       	smpsAlterNote       $0C
0008F524 E701                       	dc.b	smpsNoAttack, $01
0008F526 E108                       	smpsAlterNote       $08
0008F528 E701                       	dc.b	smpsNoAttack, $01
0008F52A E109                       	smpsAlterNote       $09
0008F52C E701                       	dc.b	smpsNoAttack, $01
0008F52E E10F                       	smpsAlterNote       $0F
0008F530 E701                       	dc.b	smpsNoAttack, $01
0008F532 E113                       	smpsAlterNote       $13
0008F534 E701                       	dc.b	smpsNoAttack, $01
0008F536 E10F                       	smpsAlterNote       $0F
0008F538 E701                       	dc.b	smpsNoAttack, $01
0008F53A E109                       	smpsAlterNote       $09
0008F53C E701                       	dc.b	smpsNoAttack, $01
0008F53E E108                       	smpsAlterNote       $08
0008F540 E701                       	dc.b	smpsNoAttack, $01
0008F542 E10C                       	smpsAlterNote       $0C
0008F544 E701                       	dc.b	smpsNoAttack, $01
0008F546 E112                       	smpsAlterNote       $12
0008F548 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008F54C E10F                       	smpsAlterNote       $0F
0008F54E E701                       	dc.b	smpsNoAttack, $01
0008F550 E109                       	smpsAlterNote       $09
0008F552 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008F556 E10F                       	smpsAlterNote       $0F
0008F558 E701                       	dc.b	smpsNoAttack, $01
0008F55A E112                       	smpsAlterNote       $12
0008F55C E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008F560 E10C                       	smpsAlterNote       $0C
0008F562 E701                       	dc.b	smpsNoAttack, $01
0008F564 E108                       	smpsAlterNote       $08
0008F566 E701                       	dc.b	smpsNoAttack, $01
0008F568 E109                       	smpsAlterNote       $09
0008F56A E701                       	dc.b	smpsNoAttack, $01
0008F56C E10F                       	smpsAlterNote       $0F
0008F56E E701                       	dc.b	smpsNoAttack, $01
0008F570 E113                       	smpsAlterNote       $13
0008F572 E701                       	dc.b	smpsNoAttack, $01
0008F574 E10F                       	smpsAlterNote       $0F
0008F576 E701                       	dc.b	smpsNoAttack, $01
0008F578 E10C                       	smpsAlterNote       $0C
0008F57A E701                       	dc.b	smpsNoAttack, $01
0008F57C E108                       	smpsAlterNote       $08
0008F57E E701                       	dc.b	smpsNoAttack, $01
0008F580 E109                       	smpsAlterNote       $09
0008F582 8001                       	dc.b	nRst, $01
0008F584 E10C                       	smpsAlterNote       $0C
0008F586 B50A                       	dc.b	nE4, $0A
0008F588 E10D                       	smpsAlterNote       $0D
0008F58A B60D                       	dc.b	nF4, $0D
0008F58C E10A                       	smpsAlterNote       $0A
0008F58E E701                       	dc.b	smpsNoAttack, $01
0008F590 E106                       	smpsAlterNote       $06
0008F592 E701                       	dc.b	smpsNoAttack, $01
0008F594 E107                       	smpsAlterNote       $07
0008F596 E701                       	dc.b	smpsNoAttack, $01
0008F598 E10D                       	smpsAlterNote       $0D
0008F59A E701                       	dc.b	smpsNoAttack, $01
0008F59C E111                       	smpsAlterNote       $11
0008F59E E701                       	dc.b	smpsNoAttack, $01
0008F5A0 E10D                       	smpsAlterNote       $0D
0008F5A2 E701                       	dc.b	smpsNoAttack, $01
0008F5A4 E10A                       	smpsAlterNote       $0A
0008F5A6 E701                       	dc.b	smpsNoAttack, $01
0008F5A8 E106                       	smpsAlterNote       $06
0008F5AA E701                       	dc.b	smpsNoAttack, $01
0008F5AC E10A                       	smpsAlterNote       $0A
0008F5AE E701                       	dc.b	smpsNoAttack, $01
0008F5B0 E110                       	smpsAlterNote       $10
0008F5B2 E701                       	dc.b	smpsNoAttack, $01
0008F5B4 E111                       	smpsAlterNote       $11
0008F5B6 E701                       	dc.b	smpsNoAttack, $01
0008F5B8 E10D                       	smpsAlterNote       $0D
0008F5BA B80D                       	dc.b	nG4, $0D
0008F5BC E10A                       	smpsAlterNote       $0A
0008F5BE E701                       	dc.b	smpsNoAttack, $01
0008F5C0 E106                       	smpsAlterNote       $06
0008F5C2 E701                       	dc.b	smpsNoAttack, $01
0008F5C4 E107                       	smpsAlterNote       $07
0008F5C6 E701                       	dc.b	smpsNoAttack, $01
0008F5C8 E10D                       	smpsAlterNote       $0D
0008F5CA E701                       	dc.b	smpsNoAttack, $01
0008F5CC E111                       	smpsAlterNote       $11
0008F5CE E701                       	dc.b	smpsNoAttack, $01
0008F5D0 E10D                       	smpsAlterNote       $0D
0008F5D2 E701                       	dc.b	smpsNoAttack, $01
0008F5D4 E10A                       	smpsAlterNote       $0A
0008F5D6 E701                       	dc.b	smpsNoAttack, $01
0008F5D8 E106                       	smpsAlterNote       $06
0008F5DA E701                       	dc.b	smpsNoAttack, $01
0008F5DC E10A                       	smpsAlterNote       $0A
0008F5DE E701                       	dc.b	smpsNoAttack, $01
0008F5E0 E110                       	smpsAlterNote       $10
0008F5E2 E701                       	dc.b	smpsNoAttack, $01
0008F5E4 E111                       	smpsAlterNote       $11
0008F5E6 E701                       	dc.b	smpsNoAttack, $01
0008F5E8 E10D                       	smpsAlterNote       $0D
0008F5EA E701                       	dc.b	smpsNoAttack, $01
0008F5EC E107                       	smpsAlterNote       $07
0008F5EE E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008F5F2 E10A                       	smpsAlterNote       $0A
0008F5F4 E701                       	dc.b	smpsNoAttack, $01
0008F5F6 E110                       	smpsAlterNote       $10
0008F5F8 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008F5FC E10D                       	smpsAlterNote       $0D
0008F5FE 8001                       	dc.b	nRst, $01
0008F600 E10F                       	smpsAlterNote       $0F
0008F602 BA0D                       	dc.b	nA4, $0D
0008F604 E10C                       	smpsAlterNote       $0C
0008F606 E701                       	dc.b	smpsNoAttack, $01
0008F608 E108                       	smpsAlterNote       $08
0008F60A E701                       	dc.b	smpsNoAttack, $01
0008F60C E10C                       	smpsAlterNote       $0C
0008F60E E701                       	dc.b	smpsNoAttack, $01
0008F610 E112                       	smpsAlterNote       $12
0008F612 E701                       	dc.b	smpsNoAttack, $01
0008F614 E113                       	smpsAlterNote       $13
0008F616 E701                       	dc.b	smpsNoAttack, $01
0008F618 E10F                       	smpsAlterNote       $0F
0008F61A E701                       	dc.b	smpsNoAttack, $01
0008F61C E109                       	smpsAlterNote       $09
0008F61E E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008F622 E10C                       	smpsAlterNote       $0C
0008F624 E701                       	dc.b	smpsNoAttack, $01
0008F626 E112                       	smpsAlterNote       $12
0008F628 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008F62C E10C                       	smpsAlterNote       $0C
0008F62E E701                       	dc.b	smpsNoAttack, $01
0008F630 E109                       	smpsAlterNote       $09
0008F632 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008F636 E10F                       	smpsAlterNote       $0F
0008F638 E701                       	dc.b	smpsNoAttack, $01
0008F63A E113                       	smpsAlterNote       $13
0008F63C E701                       	dc.b	smpsNoAttack, $01
0008F63E E112                       	smpsAlterNote       $12
0008F640 E701                       	dc.b	smpsNoAttack, $01
0008F642 E10C                       	smpsAlterNote       $0C
0008F644 E701                       	dc.b	smpsNoAttack, $01
0008F646 E108                       	smpsAlterNote       $08
0008F648 E701                       	dc.b	smpsNoAttack, $01
0008F64A E10C                       	smpsAlterNote       $0C
0008F64C E701                       	dc.b	smpsNoAttack, $01
0008F64E E10F                       	smpsAlterNote       $0F
0008F650 E701                       	dc.b	smpsNoAttack, $01
0008F652 E113                       	smpsAlterNote       $13
0008F654 E701                       	dc.b	smpsNoAttack, $01
0008F656 E10F                       	smpsAlterNote       $0F
0008F658 E701                       	dc.b	smpsNoAttack, $01
0008F65A E109                       	smpsAlterNote       $09
0008F65C E701 8001                  	dc.b	smpsNoAttack, $01, nRst, $01
0008F660 E10D                       	smpsAlterNote       $0D
0008F662 B609 8001                  	dc.b	nF4, $09, nRst, $01
0008F666 E10C                       	smpsAlterNote       $0C
0008F668 B506 8001                  	dc.b	nE4, $06, nRst, $01
0008F66C E10B                       	smpsAlterNote       $0B
0008F66E B30D                       	dc.b	nD4, $0D
0008F670 E10C                       	smpsAlterNote       $0C
0008F672 B503 8001                  	dc.b	nE4, $03, nRst, $01
0008F676 E10D                       	smpsAlterNote       $0D
0008F678 B603 B803 8001 BA0D        	dc.b	nF4, $03, nG4, $03, nRst, $01, nA4, $0D
0008F680 E109                       	smpsAlterNote       $09
0008F682 E701                       	dc.b	smpsNoAttack, $01
0008F684 E108                       	smpsAlterNote       $08
0008F686 E701                       	dc.b	smpsNoAttack, $01
0008F688 E10C                       	smpsAlterNote       $0C
0008F68A E701                       	dc.b	smpsNoAttack, $01
0008F68C E112                       	smpsAlterNote       $12
0008F68E E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008F692 E10F                       	smpsAlterNote       $0F
0008F694 E701                       	dc.b	smpsNoAttack, $01
0008F696 E109                       	smpsAlterNote       $09
0008F698 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008F69C E10F                       	smpsAlterNote       $0F
0008F69E E701                       	dc.b	smpsNoAttack, $01
0008F6A0 E112                       	smpsAlterNote       $12
0008F6A2 E701                       	dc.b	smpsNoAttack, $01
0008F6A4 E113                       	smpsAlterNote       $13
0008F6A6 8001                       	dc.b	nRst, $01
0008F6A8 E10D                       	smpsAlterNote       $0D
0008F6AA C20D                       	dc.b	nF5, $0D
0008F6AC E107                       	smpsAlterNote       $07
0008F6AE E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008F6B2 E10A                       	smpsAlterNote       $0A
0008F6B4 E701                       	dc.b	smpsNoAttack, $01
0008F6B6 E110                       	smpsAlterNote       $10
0008F6B8 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008F6BC E10A                       	smpsAlterNote       $0A
0008F6BE E701                       	dc.b	smpsNoAttack, $01
0008F6C0 E107                       	smpsAlterNote       $07
0008F6C2 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008F6C6 E10D                       	smpsAlterNote       $0D
0008F6C8 E701                       	dc.b	smpsNoAttack, $01
0008F6CA E111                       	smpsAlterNote       $11
0008F6CC E701                       	dc.b	smpsNoAttack, $01
0008F6CE E110                       	smpsAlterNote       $10
0008F6D0 E701                       	dc.b	smpsNoAttack, $01
0008F6D2 E10A                       	smpsAlterNote       $0A
0008F6D4 E701                       	dc.b	smpsNoAttack, $01
0008F6D6 E106                       	smpsAlterNote       $06
0008F6D8 E701                       	dc.b	smpsNoAttack, $01
0008F6DA E10A                       	smpsAlterNote       $0A
0008F6DC E701                       	dc.b	smpsNoAttack, $01
0008F6DE E10D                       	smpsAlterNote       $0D
0008F6E0 E701                       	dc.b	smpsNoAttack, $01
0008F6E2 E111                       	smpsAlterNote       $11
0008F6E4 E701                       	dc.b	smpsNoAttack, $01
0008F6E6 E10D                       	smpsAlterNote       $0D
0008F6E8 E701                       	dc.b	smpsNoAttack, $01
0008F6EA E107                       	smpsAlterNote       $07
0008F6EC E701                       	dc.b	smpsNoAttack, $01
0008F6EE E106                       	smpsAlterNote       $06
0008F6F0 E701                       	dc.b	smpsNoAttack, $01
0008F6F2 E10A                       	smpsAlterNote       $0A
0008F6F4 E701                       	dc.b	smpsNoAttack, $01
0008F6F6 E110                       	smpsAlterNote       $10
0008F6F8 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008F6FC E10D                       	smpsAlterNote       $0D
0008F6FE E701                       	dc.b	smpsNoAttack, $01
0008F700 E107                       	smpsAlterNote       $07
0008F702 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008F706 E10D                       	smpsAlterNote       $0D
0008F708 E701                       	dc.b	smpsNoAttack, $01
0008F70A E110                       	smpsAlterNote       $10
0008F70C E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008F710 E10A                       	smpsAlterNote       $0A
0008F712 E701                       	dc.b	smpsNoAttack, $01
0008F714 E106                       	smpsAlterNote       $06
0008F716 E701                       	dc.b	smpsNoAttack, $01
0008F718 E107                       	smpsAlterNote       $07
0008F71A E701                       	dc.b	smpsNoAttack, $01
0008F71C E10D                       	smpsAlterNote       $0D
0008F71E E701                       	dc.b	smpsNoAttack, $01
0008F720 E111                       	smpsAlterNote       $11
0008F722 E701                       	dc.b	smpsNoAttack, $01
0008F724 E10D                       	smpsAlterNote       $0D
0008F726 E701                       	dc.b	smpsNoAttack, $01
0008F728 E10A                       	smpsAlterNote       $0A
0008F72A E701                       	dc.b	smpsNoAttack, $01
0008F72C E106                       	smpsAlterNote       $06
0008F72E E701                       	dc.b	smpsNoAttack, $01
0008F730 E10A                       	smpsAlterNote       $0A
0008F732 E701                       	dc.b	smpsNoAttack, $01
0008F734 E110                       	smpsAlterNote       $10
0008F736 E701                       	dc.b	smpsNoAttack, $01
0008F738 E111                       	smpsAlterNote       $11
0008F73A E701                       	dc.b	smpsNoAttack, $01
0008F73C E10D                       	smpsAlterNote       $0D
0008F73E E701                       	dc.b	smpsNoAttack, $01
0008F740 E107                       	smpsAlterNote       $07
0008F742 E701                       	dc.b	smpsNoAttack, $01
0008F744 E10D                       	smpsAlterNote       $0D
0008F746 C207                       	dc.b	nF5, $07
0008F748 E10C                       	smpsAlterNote       $0C
0008F74A C10D                       	dc.b	nE5, $0D
0008F74C E109                       	smpsAlterNote       $09
0008F74E E701                       	dc.b	smpsNoAttack, $01
0008F750 E106                       	smpsAlterNote       $06
0008F752 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008F756 E10C                       	smpsAlterNote       $0C
0008F758 E701                       	dc.b	smpsNoAttack, $01
0008F75A E110                       	smpsAlterNote       $10
0008F75C E701                       	dc.b	smpsNoAttack, $01
0008F75E E10F                       	smpsAlterNote       $0F
0008F760 E701                       	dc.b	smpsNoAttack, $01
0008F762 E109                       	smpsAlterNote       $09
0008F764 E701                       	dc.b	smpsNoAttack, $01
0008F766 E105                       	smpsAlterNote       $05
0008F768 E701                       	dc.b	smpsNoAttack, $01
0008F76A E109                       	smpsAlterNote       $09
0008F76C E701                       	dc.b	smpsNoAttack, $01
0008F76E E10C                       	smpsAlterNote       $0C
0008F770 E701                       	dc.b	smpsNoAttack, $01
0008F772 E110                       	smpsAlterNote       $10
0008F774 E701                       	dc.b	smpsNoAttack, $01
0008F776 E10B                       	smpsAlterNote       $0B
0008F778 BF0D                       	dc.b	nD5, $0D
0008F77A E108                       	smpsAlterNote       $08
0008F77C E701                       	dc.b	smpsNoAttack, $01
0008F77E E105                       	smpsAlterNote       $05
0008F780 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008F784 E10B                       	smpsAlterNote       $0B
0008F786 E701                       	dc.b	smpsNoAttack, $01
0008F788 E10F                       	smpsAlterNote       $0F
0008F78A E701                       	dc.b	smpsNoAttack, $01
0008F78C E10E                       	smpsAlterNote       $0E
0008F78E E701                       	dc.b	smpsNoAttack, $01
0008F790 E108                       	smpsAlterNote       $08
0008F792 E701                       	dc.b	smpsNoAttack, $01
0008F794 E104                       	smpsAlterNote       $04
0008F796 E701                       	dc.b	smpsNoAttack, $01
0008F798 E108                       	smpsAlterNote       $08
0008F79A E701                       	dc.b	smpsNoAttack, $01
0008F79C E10E                       	smpsAlterNote       $0E
0008F79E E701                       	dc.b	smpsNoAttack, $01
0008F7A0 E10F                       	smpsAlterNote       $0F
0008F7A2 E701                       	dc.b	smpsNoAttack, $01
0008F7A4 E10B                       	smpsAlterNote       $0B
0008F7A6 E701                       	dc.b	smpsNoAttack, $01
0008F7A8 E105                       	smpsAlterNote       $05
0008F7AA E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008F7AE E108                       	smpsAlterNote       $08
0008F7B0 E701                       	dc.b	smpsNoAttack, $01
0008F7B2 E10E                       	smpsAlterNote       $0E
0008F7B4 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008F7B8 E108                       	smpsAlterNote       $08
0008F7BA E701                       	dc.b	smpsNoAttack, $01
0008F7BC E105                       	smpsAlterNote       $05
0008F7BE E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008F7C2 E10B                       	smpsAlterNote       $0B
0008F7C4 E701                       	dc.b	smpsNoAttack, $01
0008F7C6 E10F                       	smpsAlterNote       $0F
0008F7C8 E701                       	dc.b	smpsNoAttack, $01
0008F7CA E10E                       	smpsAlterNote       $0E
0008F7CC E701                       	dc.b	smpsNoAttack, $01
0008F7CE E108                       	smpsAlterNote       $08
0008F7D0 E701                       	dc.b	smpsNoAttack, $01
0008F7D2 E104                       	smpsAlterNote       $04
0008F7D4 E701                       	dc.b	smpsNoAttack, $01
0008F7D6 E108                       	smpsAlterNote       $08
0008F7D8 E701                       	dc.b	smpsNoAttack, $01
0008F7DA E10B                       	smpsAlterNote       $0B
0008F7DC E701                       	dc.b	smpsNoAttack, $01
0008F7DE E10F                       	smpsAlterNote       $0F
0008F7E0 E701                       	dc.b	smpsNoAttack, $01
0008F7E2 E10B                       	smpsAlterNote       $0B
0008F7E4 E701                       	dc.b	smpsNoAttack, $01
0008F7E6 E105                       	smpsAlterNote       $05
0008F7E8 E701                       	dc.b	smpsNoAttack, $01
0008F7EA E104                       	smpsAlterNote       $04
0008F7EC E701                       	dc.b	smpsNoAttack, $01
0008F7EE E108                       	smpsAlterNote       $08
0008F7F0 E701                       	dc.b	smpsNoAttack, $01
0008F7F2 E10E                       	smpsAlterNote       $0E
0008F7F4 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008F7F8 E10B                       	smpsAlterNote       $0B
0008F7FA E701                       	dc.b	smpsNoAttack, $01
0008F7FC E105                       	smpsAlterNote       $05
0008F7FE E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008F802 E10B                       	smpsAlterNote       $0B
0008F804 E701                       	dc.b	smpsNoAttack, $01
0008F806 E10E                       	smpsAlterNote       $0E
0008F808 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008F80C E108                       	smpsAlterNote       $08
0008F80E E701                       	dc.b	smpsNoAttack, $01
0008F810 E105                       	smpsAlterNote       $05
0008F812 8001                       	dc.b	nRst, $01
0008F816 E601                       	smpsAlterVol        $01
0008F818 E10B                       	smpsAlterNote       $0B
0008F81A BF06 8001 BF03 BF03 8001+  	dc.b	nD5, $06, nRst, $01, nD5, $03, nD5, $03, nRst, $01, nCs5, $03
0008F826 8004                       	dc.b	nRst, $04
0008F82A E6FF                       	smpsAlterVol        $FF
0008F82C E10D                       	smpsAlterNote       $0D
0008F82E B802 8001 B603 B601        	dc.b	nG4, $02, nRst, $01, nF4, $03, nF4, $01
0008F836 E10C                       	smpsAlterNote       $0C
0008F838 E7B5 0280 01               	dc.b	smpsNoAttack, nE4, $02, nRst, $01
0008F83D E10D                       	smpsAlterNote       $0D
0008F83F B60D                       	dc.b	nF4, $0D
0008F841 E10A                       	smpsAlterNote       $0A
0008F843 E701                       	dc.b	smpsNoAttack, $01
0008F845 E106                       	smpsAlterNote       $06
0008F847 E701                       	dc.b	smpsNoAttack, $01
0008F849 E10A                       	smpsAlterNote       $0A
0008F84B E701                       	dc.b	smpsNoAttack, $01
0008F84D E110                       	smpsAlterNote       $10
0008F84F E701                       	dc.b	smpsNoAttack, $01
0008F851 E111                       	smpsAlterNote       $11
0008F853 E701                       	dc.b	smpsNoAttack, $01
0008F855 E10D                       	smpsAlterNote       $0D
0008F857 E701                       	dc.b	smpsNoAttack, $01
0008F859 E107                       	smpsAlterNote       $07
0008F85B E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008F85F E10A                       	smpsAlterNote       $0A
0008F861 E701                       	dc.b	smpsNoAttack, $01
0008F863 E110                       	smpsAlterNote       $10
0008F865 E701                       	dc.b	smpsNoAttack, $01
0008F867 E111                       	smpsAlterNote       $11
0008F869 8001                       	dc.b	nRst, $01
0008F86B E10D                       	smpsAlterNote       $0D
0008F86D B80D                       	dc.b	nG4, $0D
0008F86F E10A                       	smpsAlterNote       $0A
0008F871 E701                       	dc.b	smpsNoAttack, $01
0008F873 E106                       	smpsAlterNote       $06
0008F875 E701                       	dc.b	smpsNoAttack, $01
0008F877 E10A                       	smpsAlterNote       $0A
0008F879 E701                       	dc.b	smpsNoAttack, $01
0008F87B E110                       	smpsAlterNote       $10
0008F87D E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008F881 E10D                       	smpsAlterNote       $0D
0008F883 E701                       	dc.b	smpsNoAttack, $01
0008F885 E107                       	smpsAlterNote       $07
0008F887 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008F88B E10D                       	smpsAlterNote       $0D
0008F88D E701                       	dc.b	smpsNoAttack, $01
0008F88F E110                       	smpsAlterNote       $10
0008F891 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008F895 E10A                       	smpsAlterNote       $0A
0008F897 E701                       	dc.b	smpsNoAttack, $01
0008F899 E106                       	smpsAlterNote       $06
0008F89B E701                       	dc.b	smpsNoAttack, $01
0008F89D E107                       	smpsAlterNote       $07
0008F89F E701                       	dc.b	smpsNoAttack, $01
0008F8A1 E10D                       	smpsAlterNote       $0D
0008F8A3 E701                       	dc.b	smpsNoAttack, $01
0008F8A5 E111                       	smpsAlterNote       $11
0008F8A7 E701                       	dc.b	smpsNoAttack, $01
0008F8A9 E10D                       	smpsAlterNote       $0D
0008F8AB E701 8001                  	dc.b	smpsNoAttack, $01, nRst, $01
0008F8AF E10F                       	smpsAlterNote       $0F
0008F8B1 BA02 8001                  	dc.b	nA4, $02, nRst, $01
0008F8B5 E110                       	smpsAlterNote       $10
0008F8B7 BB03                       	dc.b	nBb4, $03
0008F8B9 E10F                       	smpsAlterNote       $0F
0008F8BB BA03 8001 C603             	dc.b	nA4, $03, nRst, $01, nA5, $03
0008F8C1 E110                       	smpsAlterNote       $10
0008F8C3 C703 8001                  	dc.b	nBb5, $03, nRst, $01
0008F8C7 E10F                       	smpsAlterNote       $0F
0008F8C9 C603 D203 8001             	dc.b	nA5, $03, nA6, $03, nRst, $01
0008F8CF E110                       	smpsAlterNote       $10
0008F8D1 D302 8001                  	dc.b	nBb6, $02, nRst, $01
0008F8D5 E10F                       	smpsAlterNote       $0F
0008F8D7 D20D                       	dc.b	nA6, $0D
0008F8D9 E10C                       	smpsAlterNote       $0C
0008F8DB E701                       	dc.b	smpsNoAttack, $01
0008F8DD E108                       	smpsAlterNote       $08
0008F8DF E701                       	dc.b	smpsNoAttack, $01
0008F8E1 E10C                       	smpsAlterNote       $0C
0008F8E3 E701                       	dc.b	smpsNoAttack, $01
0008F8E5 E10F                       	smpsAlterNote       $0F
0008F8E7 E701                       	dc.b	smpsNoAttack, $01
0008F8E9 E113                       	smpsAlterNote       $13
0008F8EB E701                       	dc.b	smpsNoAttack, $01
0008F8ED E10F                       	smpsAlterNote       $0F
0008F8EF E701                       	dc.b	smpsNoAttack, $01
0008F8F1 E109                       	smpsAlterNote       $09
0008F8F3 E701                       	dc.b	smpsNoAttack, $01
0008F8F5 E108                       	smpsAlterNote       $08
0008F8F7 E701                       	dc.b	smpsNoAttack, $01
0008F8F9 E10C                       	smpsAlterNote       $0C
0008F8FB E701                       	dc.b	smpsNoAttack, $01
0008F8FD E112                       	smpsAlterNote       $12
0008F8FF E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008F903 E10F                       	smpsAlterNote       $0F
0008F905 E701                       	dc.b	smpsNoAttack, $01
0008F907 E109                       	smpsAlterNote       $09
0008F909 E701 E701 8007             	dc.b	smpsNoAttack, $01, smpsNoAttack, $01, nRst, $07
0008F90F E10D                       	smpsAlterNote       $0D
0008F911 CE07                       	dc.b	nF6, $07
0008F913 E10C                       	smpsAlterNote       $0C
0008F915 CD06 8001                  	dc.b	nE6, $06, nRst, $01
0008F919 E10D                       	smpsAlterNote       $0D
0008F91B CE03                       	dc.b	nF6, $03
0008F91D E10C                       	smpsAlterNote       $0C
0008F91F CC0D                       	dc.b	nEb6, $0D
0008F921 E109                       	smpsAlterNote       $09
0008F923 E701                       	dc.b	smpsNoAttack, $01
0008F925 E106                       	smpsAlterNote       $06
0008F927 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008F92B E10C                       	smpsAlterNote       $0C
0008F92D E701                       	dc.b	smpsNoAttack, $01
0008F92F E110                       	smpsAlterNote       $10
0008F931 E701                       	dc.b	smpsNoAttack, $01
0008F933 E10F                       	smpsAlterNote       $0F
0008F935 E701                       	dc.b	smpsNoAttack, $01
0008F937 E109                       	smpsAlterNote       $09
0008F939 E701                       	dc.b	smpsNoAttack, $01
0008F93B E105                       	smpsAlterNote       $05
0008F93D E701                       	dc.b	smpsNoAttack, $01
0008F93F E109                       	smpsAlterNote       $09
0008F941 E701                       	dc.b	smpsNoAttack, $01
0008F943 E10C                       	smpsAlterNote       $0C
0008F945 E701                       	dc.b	smpsNoAttack, $01
0008F947 E110                       	smpsAlterNote       $10
0008F949 E701                       	dc.b	smpsNoAttack, $01
0008F94B E10C                       	smpsAlterNote       $0C
0008F94D E701                       	dc.b	smpsNoAttack, $01
0008F94F E106                       	smpsAlterNote       $06
0008F951 E701                       	dc.b	smpsNoAttack, $01
0008F953 E105                       	smpsAlterNote       $05
0008F955 E701                       	dc.b	smpsNoAttack, $01
0008F957 E109                       	smpsAlterNote       $09
0008F959 E701                       	dc.b	smpsNoAttack, $01
0008F95B E10F                       	smpsAlterNote       $0F
0008F95D E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008F961 E10C                       	smpsAlterNote       $0C
0008F963 E701                       	dc.b	smpsNoAttack, $01
0008F965 E10B                       	smpsAlterNote       $0B
0008F967 CB03 8001 CA02 8001 CB03   	dc.b	nD6, $03, nRst, $01, nCs6, $02, nRst, $01, nD6, $03
0008F971 E10F                       	smpsAlterNote       $0F
0008F973 C603 8001 C503 C603 8001   	dc.b	nA5, $03, nRst, $01, nAb5, $03, nA5, $03, nRst, $01
0008F97D E10D                       	smpsAlterNote       $0D
0008F97F C203                       	dc.b	nF5, $03
0008F981 E10C                       	smpsAlterNote       $0C
0008F983 C103 8001                  	dc.b	nE5, $03, nRst, $01
0008F987 E10D                       	smpsAlterNote       $0D
0008F989 C20D                       	dc.b	nF5, $0D
0008F98B E10C                       	smpsAlterNote       $0C
0008F98D C10D 8001                  	dc.b	nE5, $0D, nRst, $01
0008F991 E10B                       	smpsAlterNote       $0B
0008F993 BF0D                       	dc.b	nD5, $0D
0008F995 E108                       	smpsAlterNote       $08
0008F997 E701                       	dc.b	smpsNoAttack, $01
0008F999 E104                       	smpsAlterNote       $04
0008F99B E701                       	dc.b	smpsNoAttack, $01
0008F99D E108                       	smpsAlterNote       $08
0008F99F E701                       	dc.b	smpsNoAttack, $01
0008F9A1 E10E                       	smpsAlterNote       $0E
0008F9A3 E701                       	dc.b	smpsNoAttack, $01
0008F9A5 E10F                       	smpsAlterNote       $0F
0008F9A7 E701                       	dc.b	smpsNoAttack, $01
0008F9A9 E10B                       	smpsAlterNote       $0B
0008F9AB E701                       	dc.b	smpsNoAttack, $01
0008F9AD E105                       	smpsAlterNote       $05
0008F9AF E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008F9B3 E108                       	smpsAlterNote       $08
0008F9B5 E701                       	dc.b	smpsNoAttack, $01
0008F9B7 E10E                       	smpsAlterNote       $0E
0008F9B9 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008F9BD E108                       	smpsAlterNote       $08
0008F9BF E701                       	dc.b	smpsNoAttack, $01
0008F9C1 E105                       	smpsAlterNote       $05
0008F9C3 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008F9C7 E10B                       	smpsAlterNote       $0B
0008F9C9 E701                       	dc.b	smpsNoAttack, $01
0008F9CB E10F                       	smpsAlterNote       $0F
0008F9CD E701                       	dc.b	smpsNoAttack, $01
0008F9CF E10E                       	smpsAlterNote       $0E
0008F9D1 E701                       	dc.b	smpsNoAttack, $01
0008F9D3 E108                       	smpsAlterNote       $08
0008F9D5 E701                       	dc.b	smpsNoAttack, $01
0008F9D7 E104                       	smpsAlterNote       $04
0008F9D9 E701                       	dc.b	smpsNoAttack, $01
0008F9DB E108                       	smpsAlterNote       $08
0008F9DD E701                       	dc.b	smpsNoAttack, $01
0008F9DF E10B                       	smpsAlterNote       $0B
0008F9E1 E701                       	dc.b	smpsNoAttack, $01
0008F9E3 E10F                       	smpsAlterNote       $0F
0008F9E5 E701                       	dc.b	smpsNoAttack, $01
0008F9E7 E10B                       	smpsAlterNote       $0B
0008F9E9 E701                       	dc.b	smpsNoAttack, $01
0008F9EB E105                       	smpsAlterNote       $05
0008F9ED E701                       	dc.b	smpsNoAttack, $01
0008F9EF E104                       	smpsAlterNote       $04
0008F9F1 E701                       	dc.b	smpsNoAttack, $01
0008F9F3 E108                       	smpsAlterNote       $08
0008F9F5 E701                       	dc.b	smpsNoAttack, $01
0008F9F7 E10E                       	smpsAlterNote       $0E
0008F9F9 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008F9FD E10B                       	smpsAlterNote       $0B
0008F9FF E701                       	dc.b	smpsNoAttack, $01
0008FA01 E105                       	smpsAlterNote       $05
0008FA03 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008FA07 E10B                       	smpsAlterNote       $0B
0008FA09 E701                       	dc.b	smpsNoAttack, $01
0008FA0B E10E                       	smpsAlterNote       $0E
0008FA0D E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008FA11 E108                       	smpsAlterNote       $08
0008FA13 E701                       	dc.b	smpsNoAttack, $01
0008FA15 E104                       	smpsAlterNote       $04
0008FA17 E701                       	dc.b	smpsNoAttack, $01
0008FA19 E105                       	smpsAlterNote       $05
0008FA1B E701                       	dc.b	smpsNoAttack, $01
0008FA1D E10B                       	smpsAlterNote       $0B
0008FA1F E701                       	dc.b	smpsNoAttack, $01
0008FA21 E10F                       	smpsAlterNote       $0F
0008FA23 E701                       	dc.b	smpsNoAttack, $01
0008FA25 E10B                       	smpsAlterNote       $0B
0008FA27 E701                       	dc.b	smpsNoAttack, $01
0008FA29 E108                       	smpsAlterNote       $08
0008FA2B E701                       	dc.b	smpsNoAttack, $01
0008FA2D E104                       	smpsAlterNote       $04
0008FA2F E701                       	dc.b	smpsNoAttack, $01
0008FA31 E108                       	smpsAlterNote       $08
0008FA33 E701                       	dc.b	smpsNoAttack, $01
0008FA35 E10E                       	smpsAlterNote       $0E
0008FA37 E701                       	dc.b	smpsNoAttack, $01
0008FA39 E10F                       	smpsAlterNote       $0F
0008FA3B E701                       	dc.b	smpsNoAttack, $01
0008FA3D E10B                       	smpsAlterNote       $0B
0008FA3F E701                       	dc.b	smpsNoAttack, $01
0008FA41 E105                       	smpsAlterNote       $05
0008FA43 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008FA47 E108                       	smpsAlterNote       $08
0008FA49 E701                       	dc.b	smpsNoAttack, $01
0008FA4B E10E                       	smpsAlterNote       $0E
0008FA4D E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008FA51 E108                       	smpsAlterNote       $08
0008FA53 E701                       	dc.b	smpsNoAttack, $01
0008FA55 E105                       	smpsAlterNote       $05
0008FA57 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008FA5B E10B                       	smpsAlterNote       $0B
0008FA5D E701                       	dc.b	smpsNoAttack, $01
0008FA5F E10F                       	smpsAlterNote       $0F
0008FA61 E701                       	dc.b	smpsNoAttack, $01
0008FA63 E10E                       	smpsAlterNote       $0E
0008FA65 E701                       	dc.b	smpsNoAttack, $01
0008FA67 E108                       	smpsAlterNote       $08
0008FA69 E701                       	dc.b	smpsNoAttack, $01
0008FA6B E104                       	smpsAlterNote       $04
0008FA6D E701                       	dc.b	smpsNoAttack, $01
0008FA6F E108                       	smpsAlterNote       $08
0008FA71 E701                       	dc.b	smpsNoAttack, $01
0008FA73 E10B                       	smpsAlterNote       $0B
0008FA75 E701                       	dc.b	smpsNoAttack, $01
0008FA77 E10F                       	smpsAlterNote       $0F
0008FA79 E701                       	dc.b	smpsNoAttack, $01
0008FA7B E10B                       	smpsAlterNote       $0B
0008FA7D E701                       	dc.b	smpsNoAttack, $01
0008FA7F E105                       	smpsAlterNote       $05
0008FA81 E701                       	dc.b	smpsNoAttack, $01
0008FA83 E104                       	smpsAlterNote       $04
0008FA85 E701                       	dc.b	smpsNoAttack, $01
0008FA87 E105                       	smpsAlterNote       $05
0008FA89 8001                       	dc.b	nRst, $01
0008FA8B E10D                       	smpsAlterNote       $0D
0008FA8D C20D                       	dc.b	nF5, $0D
0008FA8F E107                       	smpsAlterNote       $07
0008FA91 E701                       	dc.b	smpsNoAttack, $01
0008FA93 E106                       	smpsAlterNote       $06
0008FA95 E701                       	dc.b	smpsNoAttack, $01
0008FA97 E10A                       	smpsAlterNote       $0A
0008FA99 E701                       	dc.b	smpsNoAttack, $01
0008FA9B E110                       	smpsAlterNote       $10
0008FA9D E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008FAA1 E10D                       	smpsAlterNote       $0D
0008FAA3 E701                       	dc.b	smpsNoAttack, $01
0008FAA5 E107                       	smpsAlterNote       $07
0008FAA7 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008FAAB E10D                       	smpsAlterNote       $0D
0008FAAD E701                       	dc.b	smpsNoAttack, $01
0008FAAF E110                       	smpsAlterNote       $10
0008FAB1 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008FAB5 E10A                       	smpsAlterNote       $0A
0008FAB7 E701                       	dc.b	smpsNoAttack, $01
0008FAB9 E106                       	smpsAlterNote       $06
0008FABB E701                       	dc.b	smpsNoAttack, $01
0008FABD E107                       	smpsAlterNote       $07
0008FABF E701                       	dc.b	smpsNoAttack, $01
0008FAC1 E10D                       	smpsAlterNote       $0D
0008FAC3 E701                       	dc.b	smpsNoAttack, $01
0008FAC5 E111                       	smpsAlterNote       $11
0008FAC7 E701                       	dc.b	smpsNoAttack, $01
0008FAC9 E10D                       	smpsAlterNote       $0D
0008FACB E701 8001                  	dc.b	smpsNoAttack, $01, nRst, $01
0008FACF E10C                       	smpsAlterNote       $0C
0008FAD1 C10D                       	dc.b	nE5, $0D
0008FAD3 E10D                       	smpsAlterNote       $0D
0008FAD5 C20A                       	dc.b	nF5, $0A
0008FAD7 E10C                       	smpsAlterNote       $0C
0008FAD9 C10E                       	dc.b	nE5, $0E
0008FADB E106                       	smpsAlterNote       $06
0008FADD E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008FAE1 E10C                       	smpsAlterNote       $0C
0008FAE3 E701 8001                  	dc.b	smpsNoAttack, $01, nRst, $01
0008FAE7 E10B                       	smpsAlterNote       $0B
0008FAE9 BF0D                       	dc.b	nD5, $0D
0008FAEB E10C                       	smpsAlterNote       $0C
0008FAED C107                       	dc.b	nE5, $07
0008FAEF E10D                       	smpsAlterNote       $0D
0008FAF1 C206 8001 C406 8001 C603   	dc.b	nF5, $06, nRst, $01, nG5, $06, nRst, $01, nA5, $03
0008FAFB E110                       	smpsAlterNote       $10
0008FAFD C707 C703 8001             	dc.b	nBb5, $07, nBb5, $03, nRst, $01
0008FB03 E10F                       	smpsAlterNote       $0F
0008FB05 C602 8001 D206 8001        	dc.b	nA5, $02, nRst, $01, nA6, $06, nRst, $01
0008FB0D E10D                       	smpsAlterNote       $0D
0008FB0F D003                       	dc.b	nG6, $03
0008FB13 E0C0                       	smpsPan             panCenter, $00
0008FB15 E6FF                       	smpsAlterVol        $FF
0008FB17 AA06 800F AA03 AA03 8019+  	dc.b	nF3, $06, nRst, $0F, nF3, $03, nF3, $03, nRst, $19, nF3, $02
0008FB23 8001                       	dc.b	nRst, $01
0008FB25 E10C                       	smpsAlterNote       $0C
0008FB27 A906 800F A902 8001        	dc.b	nE3, $06, nRst, $0F, nE3, $02, nRst, $01
0008FB31 E604                       	smpsAlterVol        $04
0008FB33 E10B                       	smpsAlterNote       $0B
0008FB35 B306 8001                  	dc.b	nD4, $06, nRst, $01
0008FB39 E10F                       	smpsAlterNote       $0F
0008FB3B AE03                       	dc.b	nA3, $03
0008FB3D E10D                       	smpsAlterNote       $0D
0008FB3F B603 8001                  	dc.b	nF4, $03, nRst, $01
0008FB43 E10C                       	smpsAlterNote       $0C
0008FB45 B506 8001                  	dc.b	nE4, $06, nRst, $01
0008FB49 E10B                       	smpsAlterNote       $0B
0008FB4B B302 8001                  	dc.b	nD4, $02, nRst, $01
0008FB4F E10A                       	smpsAlterNote       $0A
0008FB51 B103                       	dc.b	nC4, $03
0008FB53 E110                       	smpsAlterNote       $10
0008FB55 AF03 8001                  	dc.b	nBb3, $03, nRst, $01
0008FB59 E10F                       	smpsAlterNote       $0F
0008FB5B AE03 800A                  	dc.b	nA3, $03, nRst, $0A
0008FB5F E080                       	smpsPan             panLeft, $00
0008FB61 01                         	dc.b	$01
0008FB64 E6FB                       	smpsAlterVol        $FB
0008FB66 E1E4                       	smpsAlterNote       $E4
0008FB68 C501                       	dc.b	nAb5, $01
0008FB6A E1F4                       	smpsAlterNote       $F4
0008FB6C E701                       	dc.b	smpsNoAttack, $01
0008FB6E E104                       	smpsAlterNote       $04
0008FB70 E701                       	dc.b	smpsNoAttack, $01
0008FB72 E114                       	smpsAlterNote       $14
0008FB74 E701                       	dc.b	smpsNoAttack, $01
0008FB76 E11C                       	smpsAlterNote       $1C
0008FB78 E701                       	dc.b	smpsNoAttack, $01
0008FB7A E1EF                       	smpsAlterNote       $EF
0008FB7C E7C6 01                    	dc.b	smpsNoAttack, nA5, $01
0008FB7F E1FF                       	smpsAlterNote       $FF
0008FB81 E701                       	dc.b	smpsNoAttack, $01
0008FB83 E10F                       	smpsAlterNote       $0F
0008FB85 C606                       	dc.b	nA5, $06
0008FB87 E109                       	smpsAlterNote       $09
0008FB89 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008FB8D E10F                       	smpsAlterNote       $0F
0008FB8F E701                       	dc.b	smpsNoAttack, $01
0008FB91 E112                       	smpsAlterNote       $12
0008FB93 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008FB97 E10C                       	smpsAlterNote       $0C
0008FB99 E701                       	dc.b	smpsNoAttack, $01
0008FB9B E108                       	smpsAlterNote       $08
0008FB9D E701                       	dc.b	smpsNoAttack, $01
0008FB9F E109                       	smpsAlterNote       $09
0008FBA1 E701                       	dc.b	smpsNoAttack, $01
0008FBA3 E10F                       	smpsAlterNote       $0F
0008FBA5 E701                       	dc.b	smpsNoAttack, $01
0008FBA7 E113                       	smpsAlterNote       $13
0008FBA9 E701                       	dc.b	smpsNoAttack, $01
0008FBAB E10F                       	smpsAlterNote       $0F
0008FBAD E701                       	dc.b	smpsNoAttack, $01
0008FBAF E10C                       	smpsAlterNote       $0C
0008FBB1 E701                       	dc.b	smpsNoAttack, $01
0008FBB3 E108                       	smpsAlterNote       $08
0008FBB5 E701                       	dc.b	smpsNoAttack, $01
0008FBB7 E10C                       	smpsAlterNote       $0C
0008FBB9 E701                       	dc.b	smpsNoAttack, $01
0008FBBB E112                       	smpsAlterNote       $12
0008FBBD E701                       	dc.b	smpsNoAttack, $01
0008FBBF E113                       	smpsAlterNote       $13
0008FBC1 E701                       	dc.b	smpsNoAttack, $01
0008FBC3 E10F                       	smpsAlterNote       $0F
0008FBC5 E701                       	dc.b	smpsNoAttack, $01
0008FBC7 E109                       	smpsAlterNote       $09
0008FBC9 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008FBCD E10C                       	smpsAlterNote       $0C
0008FBCF E701                       	dc.b	smpsNoAttack, $01
0008FBD1 E112                       	smpsAlterNote       $12
0008FBD3 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008FBD7 E10C                       	smpsAlterNote       $0C
0008FBD9 E701                       	dc.b	smpsNoAttack, $01
0008FBDB E109                       	smpsAlterNote       $09
0008FBDD E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008FBE1 E10F                       	smpsAlterNote       $0F
0008FBE3 E701                       	dc.b	smpsNoAttack, $01
0008FBE5 E113                       	smpsAlterNote       $13
0008FBE7 E701 8001                  	dc.b	smpsNoAttack, $01, nRst, $01
0008FBEB E10D                       	smpsAlterNote       $0D
0008FBED C402 8001 C203             	dc.b	nG5, $02, nRst, $01, nF5, $03
0008FBF3 E10C                       	smpsAlterNote       $0C
0008FBF5 C102 8001                  	dc.b	nE5, $02, nRst, $01
0008FBF9 E10D                       	smpsAlterNote       $0D
0008FBFB C201 8001                  	dc.b	nF5, $01, nRst, $01
0008FBFF E10C                       	smpsAlterNote       $0C
0008FC01 C102                       	dc.b	nE5, $02
0008FC03 E10B                       	smpsAlterNote       $0B
0008FC05 BF02 8001                  	dc.b	nD5, $02, nRst, $01
0008FC09 E10C                       	smpsAlterNote       $0C
0008FC0B C101 8001                  	dc.b	nE5, $01, nRst, $01
0008FC0F E10B                       	smpsAlterNote       $0B
0008FC11 BF02                       	dc.b	nD5, $02
0008FC13 E10A                       	smpsAlterNote       $0A
0008FC15 BD02 BF02 8001 BD01 8001   	dc.b	nC5, $02, nD5, $02, nRst, $01, nC5, $01, nRst, $01
0008FC1F E110                       	smpsAlterNote       $10
0008FC21 BB02                       	dc.b	nBb4, $02
0008FC23 E10A                       	smpsAlterNote       $0A
0008FC25 BD02 8001                  	dc.b	nC5, $02, nRst, $01
0008FC29 E110                       	smpsAlterNote       $10
0008FC2B BB01 8001                  	dc.b	nBb4, $01, nRst, $01
0008FC2F E10F                       	smpsAlterNote       $0F
0008FC31 BA01 8001                  	dc.b	nA4, $01, nRst, $01
0008FC35 E110                       	smpsAlterNote       $10
0008FC37 BB02                       	dc.b	nBb4, $02
0008FC39 E10F                       	smpsAlterNote       $0F
0008FC3B BA02 8001 B901 8001 BA02   	dc.b	nA4, $02, nRst, $01, nAb4, $01, nRst, $01, nA4, $02
0008FC45 E10C                       	smpsAlterNote       $0C
0008FC47 B502 B501 C101 8001        	dc.b	nE4, $02, nE4, $01, nE5, $01, nRst, $01
0008FC4F E10B                       	smpsAlterNote       $0B
0008FC51 BE01 8001                  	dc.b	nCs5, $01, nRst, $01
0008FC55 E10F                       	smpsAlterNote       $0F
0008FC57 BA02                       	dc.b	nA4, $02
0008FC5B E0C0                       	smpsPan             panCenter, $00
0008FC5D E601                       	smpsAlterVol        $01
0008FC5F E109                       	smpsAlterNote       $09
0008FC61 AA07 800E AA03 AA07 8015+  	dc.b	nF3, $07, nRst, $0E, nF3, $03, nF3, $07, nRst, $15, nF3, $03
0008FC6D E108                       	smpsAlterNote       $08
0008FC6F A906 800F A903             	dc.b	nE3, $06, nRst, $0F, nE3, $03
0008FC75 E107                       	smpsAlterNote       $07
0008FC77 B306 8001 AE03             	dc.b	nD4, $06, nRst, $01, nA3, $03
0008FC7D E109                       	smpsAlterNote       $09
0008FC7F B603 8001                  	dc.b	nF4, $03, nRst, $01
0008FC83 E108                       	smpsAlterNote       $08
0008FC85 B506 8001                  	dc.b	nE4, $06, nRst, $01
0008FC89 E107                       	smpsAlterNote       $07
0008FC8B B302 8001                  	dc.b	nD4, $02, nRst, $01
0008FC8F E106                       	smpsAlterNote       $06
0008FC91 B103                       	dc.b	nC4, $03
0008FC93 E10C                       	smpsAlterNote       $0C
0008FC95 AF03 8001                  	dc.b	nBb3, $03, nRst, $01
0008FC9B E080                       	smpsPan             panLeft, $00
0008FC9D 07                         	dc.b	$07
0008FC9E E6FE                       	smpsAlterVol        $FE
0008FCA0 E10B                       	smpsAlterNote       $0B
0008FCA2 B20D                       	dc.b	nCs4, $0D
0008FCA4 E105                       	smpsAlterNote       $05
0008FCA6 E701                       	dc.b	smpsNoAttack, $01
0008FCA8 E104                       	smpsAlterNote       $04
0008FCAA E701                       	dc.b	smpsNoAttack, $01
0008FCAC E108                       	smpsAlterNote       $08
0008FCAE E701                       	dc.b	smpsNoAttack, $01
0008FCB0 E10E                       	smpsAlterNote       $0E
0008FCB2 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008FCB6 E10B                       	smpsAlterNote       $0B
0008FCB8 E701                       	dc.b	smpsNoAttack, $01
0008FCBA E105                       	smpsAlterNote       $05
0008FCBC E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008FCC0 E10B                       	smpsAlterNote       $0B
0008FCC2 E701                       	dc.b	smpsNoAttack, $01
0008FCC4 E10E                       	smpsAlterNote       $0E
0008FCC6 E701                       	dc.b	smpsNoAttack, $01
0008FCC8 E10F                       	smpsAlterNote       $0F
0008FCCA 8001                       	dc.b	nRst, $01
0008FCCC E10B                       	smpsAlterNote       $0B
0008FCCE B30D                       	dc.b	nD4, $0D
0008FCD0 E105                       	smpsAlterNote       $05
0008FCD2 E701                       	dc.b	smpsNoAttack, $01
0008FCD4 E104                       	smpsAlterNote       $04
0008FCD6 E701                       	dc.b	smpsNoAttack, $01
0008FCD8 E108                       	smpsAlterNote       $08
0008FCDA E701                       	dc.b	smpsNoAttack, $01
0008FCDC E10E                       	smpsAlterNote       $0E
0008FCDE E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008FCE2 E10B                       	smpsAlterNote       $0B
0008FCE4 E701                       	dc.b	smpsNoAttack, $01
0008FCE6 E105                       	smpsAlterNote       $05
0008FCE8 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008FCEC E10B                       	smpsAlterNote       $0B
0008FCEE E701                       	dc.b	smpsNoAttack, $01
0008FCF0 E10E                       	smpsAlterNote       $0E
0008FCF2 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008FCF6 E108                       	smpsAlterNote       $08
0008FCF8 E701                       	dc.b	smpsNoAttack, $01
0008FCFA E104                       	smpsAlterNote       $04
0008FCFC E701                       	dc.b	smpsNoAttack, $01
0008FCFE E105                       	smpsAlterNote       $05
0008FD00 E701                       	dc.b	smpsNoAttack, $01
0008FD02 E10B                       	smpsAlterNote       $0B
0008FD04 E701                       	dc.b	smpsNoAttack, $01
0008FD06 E10F                       	smpsAlterNote       $0F
0008FD08 E701                       	dc.b	smpsNoAttack, $01
0008FD0A E10B                       	smpsAlterNote       $0B
0008FD0C E701 8001                  	dc.b	smpsNoAttack, $01, nRst, $01
0008FD10 E10C                       	smpsAlterNote       $0C
0008FD12 B50D                       	dc.b	nE4, $0D
0008FD14 E106                       	smpsAlterNote       $06
0008FD16 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008FD1A E10C                       	smpsAlterNote       $0C
0008FD1C E701                       	dc.b	smpsNoAttack, $01
0008FD1E E10F                       	smpsAlterNote       $0F
0008FD20 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008FD24 E109                       	smpsAlterNote       $09
0008FD26 E701                       	dc.b	smpsNoAttack, $01
0008FD28 E105                       	smpsAlterNote       $05
0008FD2A E701                       	dc.b	smpsNoAttack, $01
0008FD2C E106                       	smpsAlterNote       $06
0008FD2E E701                       	dc.b	smpsNoAttack, $01
0008FD30 E10C                       	smpsAlterNote       $0C
0008FD32 E701                       	dc.b	smpsNoAttack, $01
0008FD34 E110                       	smpsAlterNote       $10
0008FD36 E701                       	dc.b	smpsNoAttack, $01
0008FD38 E10B                       	smpsAlterNote       $0B
0008FD3A B30E                       	dc.b	nD4, $0E
0008FD3C E105                       	smpsAlterNote       $05
0008FD3E E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008FD42 E10B                       	smpsAlterNote       $0B
0008FD44 E701                       	dc.b	smpsNoAttack, $01
0008FD46 E10E                       	smpsAlterNote       $0E
0008FD48 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008FD4C E108                       	smpsAlterNote       $08
0008FD4E E701                       	dc.b	smpsNoAttack, $01
0008FD50 E104                       	smpsAlterNote       $04
0008FD52 E701                       	dc.b	smpsNoAttack, $01
0008FD54 E105                       	smpsAlterNote       $05
0008FD56 E701                       	dc.b	smpsNoAttack, $01
0008FD58 E10B                       	smpsAlterNote       $0B
0008FD5A E701                       	dc.b	smpsNoAttack, $01
0008FD5C E10F                       	smpsAlterNote       $0F
0008FD5E E701                       	dc.b	smpsNoAttack, $01
0008FD60 E10B                       	smpsAlterNote       $0B
0008FD62 E701                       	dc.b	smpsNoAttack, $01
0008FD64 E108                       	smpsAlterNote       $08
0008FD66 E701                       	dc.b	smpsNoAttack, $01
0008FD68 E104                       	smpsAlterNote       $04
0008FD6A E701                       	dc.b	smpsNoAttack, $01
0008FD6C E108                       	smpsAlterNote       $08
0008FD6E E701                       	dc.b	smpsNoAttack, $01
0008FD70 E10E                       	smpsAlterNote       $0E
0008FD72 E701                       	dc.b	smpsNoAttack, $01
0008FD74 E10F                       	smpsAlterNote       $0F
0008FD76 E701                       	dc.b	smpsNoAttack, $01
0008FD78 E10B                       	smpsAlterNote       $0B
0008FD7A E701 B20D                  	dc.b	smpsNoAttack, $01, nCs4, $0D
0008FD7E E108                       	smpsAlterNote       $08
0008FD80 E701                       	dc.b	smpsNoAttack, $01
0008FD82 E105                       	smpsAlterNote       $05
0008FD84 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008FD88 E10B                       	smpsAlterNote       $0B
0008FD8A E701                       	dc.b	smpsNoAttack, $01
0008FD8C E10F                       	smpsAlterNote       $0F
0008FD8E E701                       	dc.b	smpsNoAttack, $01
0008FD90 E10E                       	smpsAlterNote       $0E
0008FD92 E701                       	dc.b	smpsNoAttack, $01
0008FD94 E108                       	smpsAlterNote       $08
0008FD96 E701                       	dc.b	smpsNoAttack, $01
0008FD98 E104                       	smpsAlterNote       $04
0008FD9A E701                       	dc.b	smpsNoAttack, $01
0008FD9C E108                       	smpsAlterNote       $08
0008FD9E E701                       	dc.b	smpsNoAttack, $01
0008FDA0 E10B                       	smpsAlterNote       $0B
0008FDA2 E701                       	dc.b	smpsNoAttack, $01
0008FDA4 E10F                       	smpsAlterNote       $0F
0008FDA6 E701                       	dc.b	smpsNoAttack, $01
0008FDA8 E10B                       	smpsAlterNote       $0B
0008FDAA B30D                       	dc.b	nD4, $0D
0008FDAC E108                       	smpsAlterNote       $08
0008FDAE E701                       	dc.b	smpsNoAttack, $01
0008FDB0 E105                       	smpsAlterNote       $05
0008FDB2 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008FDB6 E10B                       	smpsAlterNote       $0B
0008FDB8 E701                       	dc.b	smpsNoAttack, $01
0008FDBA E10F                       	smpsAlterNote       $0F
0008FDBC E701                       	dc.b	smpsNoAttack, $01
0008FDBE E10E                       	smpsAlterNote       $0E
0008FDC0 E701                       	dc.b	smpsNoAttack, $01
0008FDC2 E108                       	smpsAlterNote       $08
0008FDC4 E701                       	dc.b	smpsNoAttack, $01
0008FDC6 E104                       	smpsAlterNote       $04
0008FDC8 E701                       	dc.b	smpsNoAttack, $01
0008FDCA E108                       	smpsAlterNote       $08
0008FDCC E701                       	dc.b	smpsNoAttack, $01
0008FDCE E10B                       	smpsAlterNote       $0B
0008FDD0 E701                       	dc.b	smpsNoAttack, $01
0008FDD2 E10F                       	smpsAlterNote       $0F
0008FDD4 E701                       	dc.b	smpsNoAttack, $01
0008FDD6 E10B                       	smpsAlterNote       $0B
0008FDD8 E701                       	dc.b	smpsNoAttack, $01
0008FDDA E105                       	smpsAlterNote       $05
0008FDDC E701                       	dc.b	smpsNoAttack, $01
0008FDDE E104                       	smpsAlterNote       $04
0008FDE0 E701                       	dc.b	smpsNoAttack, $01
0008FDE2 E108                       	smpsAlterNote       $08
0008FDE4 E701                       	dc.b	smpsNoAttack, $01
0008FDE6 E10E                       	smpsAlterNote       $0E
0008FDE8 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008FDEC E10B                       	smpsAlterNote       $0B
0008FDEE 8001 B20D                  	dc.b	nRst, $01, nCs4, $0D
0008FDF2 E108                       	smpsAlterNote       $08
0008FDF4 E701                       	dc.b	smpsNoAttack, $01
0008FDF6 E104                       	smpsAlterNote       $04
0008FDF8 E701                       	dc.b	smpsNoAttack, $01
0008FDFA E108                       	smpsAlterNote       $08
0008FDFC E701                       	dc.b	smpsNoAttack, $01
0008FDFE E10B                       	smpsAlterNote       $0B
0008FE00 E701                       	dc.b	smpsNoAttack, $01
0008FE04 E0C0                       	smpsPan             panCenter, $00
0008FE06 E601                       	smpsAlterVol        $01
0008FE08 E108                       	smpsAlterNote       $08
0008FE0A A906 8001 A903 A903 8001+  	dc.b	nE3, $06, nRst, $01, nE3, $03, nE3, $03, nRst, $01, nE3, $06
0008FE16 8008 A902 8001             	dc.b	nRst, $08, nE3, $02, nRst, $01
0008FE1E E080                       	smpsPan             panLeft, $00
0008FE20 07                         	dc.b	$07
0008FE21 E6FF                       	smpsAlterVol        $FF
0008FE23 E10D                       	smpsAlterNote       $0D
0008FE25 B60D                       	dc.b	nF4, $0D
0008FE27 E10A                       	smpsAlterNote       $0A
0008FE29 E701                       	dc.b	smpsNoAttack, $01
0008FE2B E106                       	smpsAlterNote       $06
0008FE2D E701                       	dc.b	smpsNoAttack, $01
0008FE2F E10A                       	smpsAlterNote       $0A
0008FE31 E701                       	dc.b	smpsNoAttack, $01
0008FE33 E110                       	smpsAlterNote       $10
0008FE35 E701                       	dc.b	smpsNoAttack, $01
0008FE37 E111                       	smpsAlterNote       $11
0008FE39 E701                       	dc.b	smpsNoAttack, $01
0008FE3B E10D                       	smpsAlterNote       $0D
0008FE3D E701                       	dc.b	smpsNoAttack, $01
0008FE3F E107                       	smpsAlterNote       $07
0008FE41 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008FE45 E10A                       	smpsAlterNote       $0A
0008FE47 E701                       	dc.b	smpsNoAttack, $01
0008FE49 E110                       	smpsAlterNote       $10
0008FE4B E701                       	dc.b	smpsNoAttack, $01
0008FE4D E111                       	smpsAlterNote       $11
0008FE4F 8001                       	dc.b	nRst, $01
0008FE51 E10D                       	smpsAlterNote       $0D
0008FE53 B80D                       	dc.b	nG4, $0D
0008FE55 E10A                       	smpsAlterNote       $0A
0008FE57 E701                       	dc.b	smpsNoAttack, $01
0008FE59 E106                       	smpsAlterNote       $06
0008FE5B E701                       	dc.b	smpsNoAttack, $01
0008FE5D E10A                       	smpsAlterNote       $0A
0008FE5F E701                       	dc.b	smpsNoAttack, $01
0008FE61 E110                       	smpsAlterNote       $10
0008FE63 E701                       	dc.b	smpsNoAttack, $01
0008FE65 E111                       	smpsAlterNote       $11
0008FE67 E701                       	dc.b	smpsNoAttack, $01
0008FE69 E10D                       	smpsAlterNote       $0D
0008FE6B E701                       	dc.b	smpsNoAttack, $01
0008FE6D E107                       	smpsAlterNote       $07
0008FE6F E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008FE73 E10D                       	smpsAlterNote       $0D
0008FE75 E701                       	dc.b	smpsNoAttack, $01
0008FE77 E110                       	smpsAlterNote       $10
0008FE79 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008FE7D E10A                       	smpsAlterNote       $0A
0008FE7F E701                       	dc.b	smpsNoAttack, $01
0008FE81 E106                       	smpsAlterNote       $06
0008FE83 E701                       	dc.b	smpsNoAttack, $01
0008FE85 E107                       	smpsAlterNote       $07
0008FE87 E701                       	dc.b	smpsNoAttack, $01
0008FE89 E10D                       	smpsAlterNote       $0D
0008FE8B E701                       	dc.b	smpsNoAttack, $01
0008FE8D E111                       	smpsAlterNote       $11
0008FE8F E701                       	dc.b	smpsNoAttack, $01
0008FE91 E10D                       	smpsAlterNote       $0D
0008FE93 E701 8001                  	dc.b	smpsNoAttack, $01, nRst, $01
0008FE97 E10F                       	smpsAlterNote       $0F
0008FE99 BA0D                       	dc.b	nA4, $0D
0008FE9B E109                       	smpsAlterNote       $09
0008FE9D E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008FEA1 E10C                       	smpsAlterNote       $0C
0008FEA3 E701                       	dc.b	smpsNoAttack, $01
0008FEA5 E112                       	smpsAlterNote       $12
0008FEA7 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008FEAB E10C                       	smpsAlterNote       $0C
0008FEAD E701                       	dc.b	smpsNoAttack, $01
0008FEAF E109                       	smpsAlterNote       $09
0008FEB1 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008FEB5 E10F                       	smpsAlterNote       $0F
0008FEB7 E701                       	dc.b	smpsNoAttack, $01
0008FEB9 E113                       	smpsAlterNote       $13
0008FEBB E701                       	dc.b	smpsNoAttack, $01
0008FEBD E112                       	smpsAlterNote       $12
0008FEBF E701                       	dc.b	smpsNoAttack, $01
0008FEC1 E10C                       	smpsAlterNote       $0C
0008FEC3 E701                       	dc.b	smpsNoAttack, $01
0008FEC5 E108                       	smpsAlterNote       $08
0008FEC7 E701                       	dc.b	smpsNoAttack, $01
0008FEC9 E10C                       	smpsAlterNote       $0C
0008FECB E701                       	dc.b	smpsNoAttack, $01
0008FECD E10F                       	smpsAlterNote       $0F
0008FECF E701                       	dc.b	smpsNoAttack, $01
0008FED1 E113                       	smpsAlterNote       $13
0008FED3 E701                       	dc.b	smpsNoAttack, $01
0008FED5 E10F                       	smpsAlterNote       $0F
0008FED7 E701                       	dc.b	smpsNoAttack, $01
0008FED9 E109                       	smpsAlterNote       $09
0008FEDB E701                       	dc.b	smpsNoAttack, $01
0008FEDD E108                       	smpsAlterNote       $08
0008FEDF E701                       	dc.b	smpsNoAttack, $01
0008FEE1 E10C                       	smpsAlterNote       $0C
0008FEE3 E701                       	dc.b	smpsNoAttack, $01
0008FEE5 E112                       	smpsAlterNote       $12
0008FEE7 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008FEEB E10F                       	smpsAlterNote       $0F
0008FEED E701                       	dc.b	smpsNoAttack, $01
0008FEEF E109                       	smpsAlterNote       $09
0008FEF1 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008FEF5 E10F                       	smpsAlterNote       $0F
0008FEF7 E701                       	dc.b	smpsNoAttack, $01
0008FEF9 E112                       	smpsAlterNote       $12
0008FEFB E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008FEFF E10C                       	smpsAlterNote       $0C
0008FF01 E701                       	dc.b	smpsNoAttack, $01
0008FF03 E108                       	smpsAlterNote       $08
0008FF05 E701                       	dc.b	smpsNoAttack, $01
0008FF07 E109                       	smpsAlterNote       $09
0008FF09 E701                       	dc.b	smpsNoAttack, $01
0008FF0B E10C                       	smpsAlterNote       $0C
0008FF0D B50A                       	dc.b	nE4, $0A
0008FF0F E10D                       	smpsAlterNote       $0D
0008FF11 B60E                       	dc.b	nF4, $0E
0008FF13 E107                       	smpsAlterNote       $07
0008FF15 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008FF19 E10D                       	smpsAlterNote       $0D
0008FF1B E701                       	dc.b	smpsNoAttack, $01
0008FF1D E110                       	smpsAlterNote       $10
0008FF1F E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008FF23 E10A                       	smpsAlterNote       $0A
0008FF25 E701                       	dc.b	smpsNoAttack, $01
0008FF27 E106                       	smpsAlterNote       $06
0008FF29 E701                       	dc.b	smpsNoAttack, $01
0008FF2B E107                       	smpsAlterNote       $07
0008FF2D E701                       	dc.b	smpsNoAttack, $01
0008FF2F E10D                       	smpsAlterNote       $0D
0008FF31 E701                       	dc.b	smpsNoAttack, $01
0008FF33 E111                       	smpsAlterNote       $11
0008FF35 E701                       	dc.b	smpsNoAttack, $01
0008FF37 E10D                       	smpsAlterNote       $0D
0008FF39 B80D                       	dc.b	nG4, $0D
0008FF3B E10A                       	smpsAlterNote       $0A
0008FF3D E701                       	dc.b	smpsNoAttack, $01
0008FF3F E107                       	smpsAlterNote       $07
0008FF41 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008FF45 E10D                       	smpsAlterNote       $0D
0008FF47 E701                       	dc.b	smpsNoAttack, $01
0008FF49 E111                       	smpsAlterNote       $11
0008FF4B E701                       	dc.b	smpsNoAttack, $01
0008FF4D E110                       	smpsAlterNote       $10
0008FF4F E701                       	dc.b	smpsNoAttack, $01
0008FF51 E10A                       	smpsAlterNote       $0A
0008FF53 E701                       	dc.b	smpsNoAttack, $01
0008FF55 E106                       	smpsAlterNote       $06
0008FF57 E701                       	dc.b	smpsNoAttack, $01
0008FF59 E10A                       	smpsAlterNote       $0A
0008FF5B E701                       	dc.b	smpsNoAttack, $01
0008FF5D E10D                       	smpsAlterNote       $0D
0008FF5F E701                       	dc.b	smpsNoAttack, $01
0008FF61 E111                       	smpsAlterNote       $11
0008FF63 E701                       	dc.b	smpsNoAttack, $01
0008FF65 E10D                       	smpsAlterNote       $0D
0008FF67 E701                       	dc.b	smpsNoAttack, $01
0008FF69 E107                       	smpsAlterNote       $07
0008FF6B E701                       	dc.b	smpsNoAttack, $01
0008FF6D E106                       	smpsAlterNote       $06
0008FF6F E701                       	dc.b	smpsNoAttack, $01
0008FF71 E10A                       	smpsAlterNote       $0A
0008FF73 E701                       	dc.b	smpsNoAttack, $01
0008FF75 E110                       	smpsAlterNote       $10
0008FF77 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008FF7B E10D                       	smpsAlterNote       $0D
0008FF7D E701                       	dc.b	smpsNoAttack, $01
0008FF7F E10F                       	smpsAlterNote       $0F
0008FF81 BA0D                       	dc.b	nA4, $0D
0008FF83 E10C                       	smpsAlterNote       $0C
0008FF85 E701                       	dc.b	smpsNoAttack, $01
0008FF87 E108                       	smpsAlterNote       $08
0008FF89 E701                       	dc.b	smpsNoAttack, $01
0008FF8B E109                       	smpsAlterNote       $09
0008FF8D E701                       	dc.b	smpsNoAttack, $01
0008FF8F E10F                       	smpsAlterNote       $0F
0008FF91 E701                       	dc.b	smpsNoAttack, $01
0008FF93 E113                       	smpsAlterNote       $13
0008FF95 E701                       	dc.b	smpsNoAttack, $01
0008FF97 E10F                       	smpsAlterNote       $0F
0008FF99 E701                       	dc.b	smpsNoAttack, $01
0008FF9B E10C                       	smpsAlterNote       $0C
0008FF9D E701                       	dc.b	smpsNoAttack, $01
0008FF9F E108                       	smpsAlterNote       $08
0008FFA1 E701                       	dc.b	smpsNoAttack, $01
0008FFA3 E10C                       	smpsAlterNote       $0C
0008FFA5 E701                       	dc.b	smpsNoAttack, $01
0008FFA7 E112                       	smpsAlterNote       $12
0008FFA9 E701                       	dc.b	smpsNoAttack, $01
0008FFAB E113                       	smpsAlterNote       $13
0008FFAD E701                       	dc.b	smpsNoAttack, $01
0008FFAF E10F                       	smpsAlterNote       $0F
0008FFB1 E701                       	dc.b	smpsNoAttack, $01
0008FFB3 E109                       	smpsAlterNote       $09
0008FFB5 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008FFB9 E10C                       	smpsAlterNote       $0C
0008FFBB E701                       	dc.b	smpsNoAttack, $01
0008FFBD E112                       	smpsAlterNote       $12
0008FFBF E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008FFC3 E10C                       	smpsAlterNote       $0C
0008FFC5 E701                       	dc.b	smpsNoAttack, $01
0008FFC7 E109                       	smpsAlterNote       $09
0008FFC9 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008FFCD E10F                       	smpsAlterNote       $0F
0008FFCF E701                       	dc.b	smpsNoAttack, $01
0008FFD1 E113                       	smpsAlterNote       $13
0008FFD3 E701                       	dc.b	smpsNoAttack, $01
0008FFD5 E112                       	smpsAlterNote       $12
0008FFD7 E701                       	dc.b	smpsNoAttack, $01
0008FFD9 E10C                       	smpsAlterNote       $0C
0008FFDB E701                       	dc.b	smpsNoAttack, $01
0008FFDD E109                       	smpsAlterNote       $09
0008FFDF 8001                       	dc.b	nRst, $01
0008FFE1 E10D                       	smpsAlterNote       $0D
0008FFE3 B60A                       	dc.b	nF4, $0A
0008FFE5 E10C                       	smpsAlterNote       $0C
0008FFE7 B506 8001                  	dc.b	nE4, $06, nRst, $01
0008FFEB E10B                       	smpsAlterNote       $0B
0008FFED B30D 8001                  	dc.b	nD4, $0D, nRst, $01
0008FFF1 E10C                       	smpsAlterNote       $0C
0008FFF3 B503                       	dc.b	nE4, $03
0008FFF5 E10D                       	smpsAlterNote       $0D
0008FFF7 B603 8001 B802 8001 BA0D   	dc.b	nF4, $03, nRst, $01, nG4, $02, nRst, $01, nA4, $0D
00090001 E10C                       	smpsAlterNote       $0C
00090003 E701                       	dc.b	smpsNoAttack, $01
00090005 E108                       	smpsAlterNote       $08
00090007 E701                       	dc.b	smpsNoAttack, $01
00090009 E10C                       	smpsAlterNote       $0C
0009000B E701                       	dc.b	smpsNoAttack, $01
0009000D E112                       	smpsAlterNote       $12
0009000F E701                       	dc.b	smpsNoAttack, $01
00090011 E113                       	smpsAlterNote       $13
00090013 E701                       	dc.b	smpsNoAttack, $01
00090015 E10F                       	smpsAlterNote       $0F
00090017 E701                       	dc.b	smpsNoAttack, $01
00090019 E109                       	smpsAlterNote       $09
0009001B E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0009001F E10C                       	smpsAlterNote       $0C
00090021 E701                       	dc.b	smpsNoAttack, $01
00090023 E112                       	smpsAlterNote       $12
00090025 E701                       	dc.b	smpsNoAttack, $01
00090027 E113                       	smpsAlterNote       $13
00090029 8001                       	dc.b	nRst, $01
0009002B E10D                       	smpsAlterNote       $0D
0009002D C20D                       	dc.b	nF5, $0D
0009002F E10A                       	smpsAlterNote       $0A
00090031 E701                       	dc.b	smpsNoAttack, $01
00090033 E106                       	smpsAlterNote       $06
00090035 E701                       	dc.b	smpsNoAttack, $01
00090037 E10A                       	smpsAlterNote       $0A
00090039 E701                       	dc.b	smpsNoAttack, $01
0009003B E110                       	smpsAlterNote       $10
0009003D E701                       	dc.b	smpsNoAttack, $01
0009003F E111                       	smpsAlterNote       $11
00090041 E701                       	dc.b	smpsNoAttack, $01
00090043 E10D                       	smpsAlterNote       $0D
00090045 E701                       	dc.b	smpsNoAttack, $01
00090047 E107                       	smpsAlterNote       $07
00090049 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0009004D E10A                       	smpsAlterNote       $0A
0009004F E701                       	dc.b	smpsNoAttack, $01
00090051 E110                       	smpsAlterNote       $10
00090053 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00090057 E10A                       	smpsAlterNote       $0A
00090059 E701                       	dc.b	smpsNoAttack, $01
0009005B E107                       	smpsAlterNote       $07
0009005D E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00090061 E10D                       	smpsAlterNote       $0D
00090063 E701                       	dc.b	smpsNoAttack, $01
00090065 E111                       	smpsAlterNote       $11
00090067 E701                       	dc.b	smpsNoAttack, $01
00090069 E110                       	smpsAlterNote       $10
0009006B E701                       	dc.b	smpsNoAttack, $01
0009006D E10A                       	smpsAlterNote       $0A
0009006F E701                       	dc.b	smpsNoAttack, $01
00090071 E106                       	smpsAlterNote       $06
00090073 E701                       	dc.b	smpsNoAttack, $01
00090075 E10A                       	smpsAlterNote       $0A
00090077 E701                       	dc.b	smpsNoAttack, $01
00090079 E10D                       	smpsAlterNote       $0D
0009007B E701                       	dc.b	smpsNoAttack, $01
0009007D E111                       	smpsAlterNote       $11
0009007F E701                       	dc.b	smpsNoAttack, $01
00090081 E10D                       	smpsAlterNote       $0D
00090083 E701                       	dc.b	smpsNoAttack, $01
00090085 E107                       	smpsAlterNote       $07
00090087 E701                       	dc.b	smpsNoAttack, $01
00090089 E106                       	smpsAlterNote       $06
0009008B E701                       	dc.b	smpsNoAttack, $01
0009008D E10A                       	smpsAlterNote       $0A
0009008F E701                       	dc.b	smpsNoAttack, $01
00090091 E110                       	smpsAlterNote       $10
00090093 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00090097 E10D                       	smpsAlterNote       $0D
00090099 E701                       	dc.b	smpsNoAttack, $01
0009009B E107                       	smpsAlterNote       $07
0009009D E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
000900A1 E10D                       	smpsAlterNote       $0D
000900A3 E701                       	dc.b	smpsNoAttack, $01
000900A5 E110                       	smpsAlterNote       $10
000900A7 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
000900AB E10A                       	smpsAlterNote       $0A
000900AD E701                       	dc.b	smpsNoAttack, $01
000900AF E106                       	smpsAlterNote       $06
000900B1 E701                       	dc.b	smpsNoAttack, $01
000900B3 E107                       	smpsAlterNote       $07
000900B5 E701                       	dc.b	smpsNoAttack, $01
000900B7 E10D                       	smpsAlterNote       $0D
000900B9 E701                       	dc.b	smpsNoAttack, $01
000900BB E111                       	smpsAlterNote       $11
000900BD E701                       	dc.b	smpsNoAttack, $01
000900BF E10D                       	smpsAlterNote       $0D
000900C1 E701                       	dc.b	smpsNoAttack, $01
000900C3 E10A                       	smpsAlterNote       $0A
000900C5 E701                       	dc.b	smpsNoAttack, $01
000900C7 E107                       	smpsAlterNote       $07
000900C9 8001                       	dc.b	nRst, $01
000900CB E10D                       	smpsAlterNote       $0D
000900CD C206 8001                  	dc.b	nF5, $06, nRst, $01
000900D3 E601                       	smpsAlterVol        $01
000900D5 E110                       	smpsAlterNote       $10
000900D7 BB0D                       	dc.b	nBb4, $0D
000900D9 E10A                       	smpsAlterNote       $0A
000900DB E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
000900DF E110                       	smpsAlterNote       $10
000900E1 E701                       	dc.b	smpsNoAttack, $01
000900E3 E113                       	smpsAlterNote       $13
000900E5 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
000900E9 E10D                       	smpsAlterNote       $0D
000900EB E701                       	dc.b	smpsNoAttack, $01
000900ED E109                       	smpsAlterNote       $09
000900EF E701                       	dc.b	smpsNoAttack, $01
000900F1 E10A                       	smpsAlterNote       $0A
000900F3 E701                       	dc.b	smpsNoAttack, $01
000900F5 E110                       	smpsAlterNote       $10
000900F7 E701                       	dc.b	smpsNoAttack, $01
000900F9 E114                       	smpsAlterNote       $14
000900FB E701                       	dc.b	smpsNoAttack, $01
000900FD E110                       	smpsAlterNote       $10
000900FF E701                       	dc.b	smpsNoAttack, $01
00090101 E10D                       	smpsAlterNote       $0D
00090103 E701                       	dc.b	smpsNoAttack, $01
00090105 E109                       	smpsAlterNote       $09
00090107 E701                       	dc.b	smpsNoAttack, $01
00090109 E10A                       	smpsAlterNote       $0A
0009010B 8001 BD0D                  	dc.b	nRst, $01, nC5, $0D
0009010F E107                       	smpsAlterNote       $07
00090111 E701                       	dc.b	smpsNoAttack, $01
00090113 E103                       	smpsAlterNote       $03
00090115 E701                       	dc.b	smpsNoAttack, $01
00090117 E107                       	smpsAlterNote       $07
00090119 E701                       	dc.b	smpsNoAttack, $01
0009011B E10D                       	smpsAlterNote       $0D
0009011D E701                       	dc.b	smpsNoAttack, $01
0009011F E10E                       	smpsAlterNote       $0E
00090121 E701                       	dc.b	smpsNoAttack, $01
00090123 E10A                       	smpsAlterNote       $0A
00090125 E701                       	dc.b	smpsNoAttack, $01
00090127 E104                       	smpsAlterNote       $04
00090129 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0009012D E107                       	smpsAlterNote       $07
0009012F E701                       	dc.b	smpsNoAttack, $01
00090131 E10D                       	smpsAlterNote       $0D
00090133 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00090137 E107                       	smpsAlterNote       $07
00090139 E701                       	dc.b	smpsNoAttack, $01
0009013B E104                       	smpsAlterNote       $04
0009013D E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00090141 E10B                       	smpsAlterNote       $0B
00090143 BF0D                       	dc.b	nD5, $0D
00090145 E108                       	smpsAlterNote       $08
00090147 E701                       	dc.b	smpsNoAttack, $01
00090149 E105                       	smpsAlterNote       $05
0009014B E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0009014F E10B                       	smpsAlterNote       $0B
00090151 E701                       	dc.b	smpsNoAttack, $01
00090153 E10F                       	smpsAlterNote       $0F
00090155 E701                       	dc.b	smpsNoAttack, $01
00090157 E10E                       	smpsAlterNote       $0E
00090159 E701                       	dc.b	smpsNoAttack, $01
0009015B E108                       	smpsAlterNote       $08
0009015D E701                       	dc.b	smpsNoAttack, $01
0009015F E104                       	smpsAlterNote       $04
00090161 E701                       	dc.b	smpsNoAttack, $01
00090163 E108                       	smpsAlterNote       $08
00090165 E701                       	dc.b	smpsNoAttack, $01
00090167 E10B                       	smpsAlterNote       $0B
00090169 E701                       	dc.b	smpsNoAttack, $01
0009016B E10F                       	smpsAlterNote       $0F
0009016D E701                       	dc.b	smpsNoAttack, $01
0009016F E10B                       	smpsAlterNote       $0B
00090171 E701                       	dc.b	smpsNoAttack, $01
00090173 E105                       	smpsAlterNote       $05
00090175 E701                       	dc.b	smpsNoAttack, $01
00090177 E104                       	smpsAlterNote       $04
00090179 E701                       	dc.b	smpsNoAttack, $01
0009017B E105                       	smpsAlterNote       $05
0009017D 8001                       	dc.b	nRst, $01
0009017F E10C                       	smpsAlterNote       $0C
00090181 C10C                       	dc.b	nE5, $0C
00090183 E10D                       	smpsAlterNote       $0D
00090185 C201                       	dc.b	nF5, $01
00090187 E10E                       	smpsAlterNote       $0E
00090189 C301 8001                  	dc.b	nFs5, $01, nRst, $01
0009018D E10D                       	smpsAlterNote       $0D
0009018F C40C C20D                  	dc.b	nG5, $0C, nF5, $0D
00090193 E10A                       	smpsAlterNote       $0A
00090195 E701                       	dc.b	smpsNoAttack, $01
00090197 E106                       	smpsAlterNote       $06
00090199 E701                       	dc.b	smpsNoAttack, $01
0009019B E10A                       	smpsAlterNote       $0A
0009019D E701                       	dc.b	smpsNoAttack, $01
0009019F E10D                       	smpsAlterNote       $0D
000901A1 E701                       	dc.b	smpsNoAttack, $01
000901A3 E111                       	smpsAlterNote       $11
000901A5 E701                       	dc.b	smpsNoAttack, $01
000901A7 E10D                       	smpsAlterNote       $0D
000901A9 E701                       	dc.b	smpsNoAttack, $01
000901AB E107                       	smpsAlterNote       $07
000901AD E701                       	dc.b	smpsNoAttack, $01
000901AF E106                       	smpsAlterNote       $06
000901B1 E701                       	dc.b	smpsNoAttack, $01
000901B3 E10A                       	smpsAlterNote       $0A
000901B5 E701                       	dc.b	smpsNoAttack, $01
000901B7 E110                       	smpsAlterNote       $10
000901B9 E701                       	dc.b	smpsNoAttack, $01
000901BB E111                       	smpsAlterNote       $11
000901BD 8001                       	dc.b	nRst, $01
000901BF E10D                       	smpsAlterNote       $0D
000901C1 C40D                       	dc.b	nG5, $0D
000901C3 E10A                       	smpsAlterNote       $0A
000901C5 E701                       	dc.b	smpsNoAttack, $01
000901C7 E106                       	smpsAlterNote       $06
000901C9 E701                       	dc.b	smpsNoAttack, $01
000901CB E10A                       	smpsAlterNote       $0A
000901CD E701                       	dc.b	smpsNoAttack, $01
000901CF E10D                       	smpsAlterNote       $0D
000901D1 E701                       	dc.b	smpsNoAttack, $01
000901D3 E10C                       	smpsAlterNote       $0C
000901D5 C006 8001 C002 C002 8001+  	dc.b	nEb5, $06, nRst, $01, nEb5, $02, nEb5, $02, nRst, $01, nEb5, $01
000901E1 8001                       	dc.b	nRst, $01
000901E3 E10D                       	smpsAlterNote       $0D
000901E5 C20D                       	dc.b	nF5, $0D
000901E7 E10A                       	smpsAlterNote       $0A
000901E9 E701                       	dc.b	smpsNoAttack, $01
000901EB E106                       	smpsAlterNote       $06
000901ED E701                       	dc.b	smpsNoAttack, $01
000901EF E10A                       	smpsAlterNote       $0A
000901F1 E701                       	dc.b	smpsNoAttack, $01
000901F3 E110                       	smpsAlterNote       $10
000901F5 E701                       	dc.b	smpsNoAttack, $01
000901F7 E111                       	smpsAlterNote       $11
000901F9 E701                       	dc.b	smpsNoAttack, $01
000901FB E10D                       	smpsAlterNote       $0D
000901FD E701                       	dc.b	smpsNoAttack, $01
000901FF E107                       	smpsAlterNote       $07
00090201 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00090205 E10A                       	smpsAlterNote       $0A
00090207 E701                       	dc.b	smpsNoAttack, $01
00090209 E110                       	smpsAlterNote       $10
0009020B E701                       	dc.b	smpsNoAttack, $01
0009020D E111                       	smpsAlterNote       $11
0009020F 8001                       	dc.b	nRst, $01
00090211 E10F                       	smpsAlterNote       $0F
00090213 C60A                       	dc.b	nA5, $0A
00090215 E10D                       	smpsAlterNote       $0D
00090217 C406 8001                  	dc.b	nG5, $06, nRst, $01
0009021B E10C                       	smpsAlterNote       $0C
0009021D C006 8001 C001 8001 C002+  	dc.b	nEb5, $06, nRst, $01, nEb5, $01, nRst, $01, nEb5, $02, nEb5, $02
00090229 8001                       	dc.b	nRst, $01
0009022B E10D                       	smpsAlterNote       $0D
0009022D C20D                       	dc.b	nF5, $0D
0009022F E107                       	smpsAlterNote       $07
00090231 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00090235 E10A                       	smpsAlterNote       $0A
00090237 E701                       	dc.b	smpsNoAttack, $01
00090239 E110                       	smpsAlterNote       $10
0009023B E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0009023F E10A                       	smpsAlterNote       $0A
00090241 E701                       	dc.b	smpsNoAttack, $01
00090243 E107                       	smpsAlterNote       $07
00090245 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00090249 E10D                       	smpsAlterNote       $0D
0009024B E701                       	dc.b	smpsNoAttack, $01
0009024D E111                       	smpsAlterNote       $11
0009024F E701 8001                  	dc.b	smpsNoAttack, $01, nRst, $01
00090253 E10D                       	smpsAlterNote       $0D
00090255 C40D                       	dc.b	nG5, $0D
00090257 E107                       	smpsAlterNote       $07
00090259 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0009025D E10A                       	smpsAlterNote       $0A
0009025F E701                       	dc.b	smpsNoAttack, $01
00090261 E10D                       	smpsAlterNote       $0D
00090263 8001                       	dc.b	nRst, $01
00090265 E10C                       	smpsAlterNote       $0C
00090267 C006 8001 C001 8001 C002+  	dc.b	nEb5, $06, nRst, $01, nEb5, $01, nRst, $01, nEb5, $02, nEb5, $02
00090273 E10D                       	smpsAlterNote       $0D
00090275 C20E                       	dc.b	nF5, $0E
00090277 E107                       	smpsAlterNote       $07
00090279 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0009027D E10D                       	smpsAlterNote       $0D
0009027F E701 8001                  	dc.b	smpsNoAttack, $01, nRst, $01
00090285 E0C0                       	smpsPan             panCenter, $00
00090287 E603                       	smpsAlterVol        $03
00090289 E108                       	smpsAlterNote       $08
0009028B B406                       	dc.b	nEb4, $06
0009028D E10C                       	smpsAlterNote       $0C
0009028F AF03 8001                  	dc.b	nBb3, $03, nRst, $01
00090293 E108                       	smpsAlterNote       $08
00090295 B403                       	dc.b	nEb4, $03
00090297 E109                       	smpsAlterNote       $09
00090299 B803 8001                  	dc.b	nG4, $03, nRst, $01
0009029D E10C                       	smpsAlterNote       $0C
0009029F BB03 BB03 8008             	dc.b	nBb4, $03, nBb4, $03, nRst, $08
000902A7 03                         	dc.b	$03
000902A8 E6FD                       	smpsAlterVol        $FD
000902AA F6F1 F4                    	smpsJump            music84_Jump00
000902AD                            
000902AD                            ; PSG1 Data
000902AD                            music84_PSG1:
000902AD E1FD                       	smpsAlterNote       $FD
000902AF EC04                       	smpsPSGAlterVol     $04
000902B1 9203                       	dc.b	nF1, $03
000902B3 E1FE                       	smpsAlterNote       $FE
000902B5 9603                       	dc.b	nA1, $03
000902B7 EC04                       	smpsPSGAlterVol     $04
000902B9 E701                       	dc.b	smpsNoAttack, $01
000902BB E1FF                       	smpsAlterNote       $FF
000902BD ECFC                       	smpsPSGAlterVol     $FC
000902BF 9B03                       	dc.b	nD2, $03
000902C1 E1FD                       	smpsAlterNote       $FD
000902C3 9403                       	dc.b	nG1, $03
000902C5 EC04                       	smpsPSGAlterVol     $04
000902C7 E701                       	dc.b	smpsNoAttack, $01
000902C9 E1FE                       	smpsAlterNote       $FE
000902CB ECFC                       	smpsPSGAlterVol     $FC
000902CD 9703                       	dc.b	nBb1, $03
000902CF E1FF                       	smpsAlterNote       $FF
000902D1 9B03                       	dc.b	nD2, $03
000902D3 EC04                       	smpsPSGAlterVol     $04
000902D5 E701                       	dc.b	smpsNoAttack, $01
000902D7 E1FE                       	smpsAlterNote       $FE
000902D9 ECFC                       	smpsPSGAlterVol     $FC
000902DB A002                       	dc.b	nG2, $02
000902DD EC04                       	smpsPSGAlterVol     $04
000902DF E701                       	dc.b	smpsNoAttack, $01
000902E1 E1FF                       	smpsAlterNote       $FF
000902E3 ECFC                       	smpsPSGAlterVol     $FC
000902E5 A203                       	dc.b	nA2, $03
000902E7 EC0B                       	smpsPSGAlterVol     $0B
000902E9 800A                       	dc.b	nRst, $0A
000902EB E105                       	smpsAlterNote       $05
000902ED 01                         	dc.b	$01
000902EE E1FC                       	smpsAlterNote       $FC
000902F0 01                         	dc.b	$01
000902F1 E105                       	smpsAlterNote       $05
000902F3 01                         	dc.b	$01
000902F4 E1FD                       	smpsAlterNote       $FD
000902F6 01                         	dc.b	$01
000902F7 E105                       	smpsAlterNote       $05
000902F9 01                         	dc.b	$01
000902FA E1FD                       	smpsAlterNote       $FD
000902FC 01                         	dc.b	$01
000902FD E1FA                       	smpsAlterNote       $FA
000902FF 01                         	dc.b	$01
00090300 E1FC                       	smpsAlterNote       $FC
00090302 01                         	dc.b	$01
00090303 E105                       	smpsAlterNote       $05
00090305 01                         	dc.b	$01
00090306 E108                       	smpsAlterNote       $08
00090308 0101                       	dc.b	$01, $01
0009030A E105                       	smpsAlterNote       $05
0009030C 01                         	dc.b	$01
0009030D E1FA                       	smpsAlterNote       $FA
0009030F 0101                       	dc.b	$01, $01
00090311 E1FD                       	smpsAlterNote       $FD
00090313 01                         	dc.b	$01
00090314 E105                       	smpsAlterNote       $05
00090316 01                         	dc.b	$01
00090317 E108                       	smpsAlterNote       $08
00090319 01                         	dc.b	$01
0009031A E105                       	smpsAlterNote       $05
0009031C 01                         	dc.b	$01
0009031D E1FC                       	smpsAlterNote       $FC
0009031F 01                         	dc.b	$01
00090320 E105                       	smpsAlterNote       $05
00090322 01                         	dc.b	$01
00090323 E1FD                       	smpsAlterNote       $FD
00090325 01                         	dc.b	$01
00090326                            
00090326                            music84_Jump07:
00090326 E105                       	smpsAlterNote       $05
00090328 8001                       	dc.b	nRst, $01
0009032A E1FD                       	smpsAlterNote       $FD
0009032C 01                         	dc.b	$01
0009032D E1FA                       	smpsAlterNote       $FA
0009032F 01                         	dc.b	$01
00090330 E1FC                       	smpsAlterNote       $FC
00090332 01                         	dc.b	$01
00090333 E1FD                       	smpsAlterNote       $FD
00090335 ECF5                       	smpsPSGAlterVol     $F5
00090337 9206                       	dc.b	nF1, $06
00090339 EC04                       	smpsPSGAlterVol     $04
0009033B E701                       	dc.b	smpsNoAttack, $01
0009033D EC07                       	smpsPSGAlterVol     $07
0009033F 8003                       	dc.b	nRst, $03
00090341 ECF5                       	smpsPSGAlterVol     $F5
00090343 9206                       	dc.b	nF1, $06
00090345 EC04                       	smpsPSGAlterVol     $04
00090347 E701                       	dc.b	smpsNoAttack, $01
00090349 EC07                       	smpsPSGAlterVol     $07
0009034B 8006                       	dc.b	nRst, $06
0009034D E100                       	smpsAlterNote       $00
0009034F 01                         	dc.b	$01
00090350 E104                       	smpsAlterNote       $04
00090352 01                         	dc.b	$01
00090353 E100                       	smpsAlterNote       $00
00090355 01                         	dc.b	$01
00090356 E1FB                       	smpsAlterNote       $FB
00090358 01                         	dc.b	$01
00090359 E1FD                       	smpsAlterNote       $FD
0009035B ECF5                       	smpsPSGAlterVol     $F5
0009035D 9406                       	dc.b	nG1, $06
0009035F EC04                       	smpsPSGAlterVol     $04
00090361 E701                       	dc.b	smpsNoAttack, $01
00090363 EC07                       	smpsPSGAlterVol     $07
00090365 8003                       	dc.b	nRst, $03
00090367 ECF5                       	smpsPSGAlterVol     $F5
00090369 9407                       	dc.b	nG1, $07
0009036B EC0B                       	smpsPSGAlterVol     $0B
0009036D 8006                       	dc.b	nRst, $06
0009036F E100                       	smpsAlterNote       $00
00090371 01                         	dc.b	$01
00090372 E103                       	smpsAlterNote       $03
00090374 0101                       	dc.b	$01, $01
00090376 E1FD                       	smpsAlterNote       $FD
00090378 01                         	dc.b	$01
00090379 ECF5                       	smpsPSGAlterVol     $F5
0009037B 9207                       	dc.b	nF1, $07
0009037D EC0B                       	smpsPSGAlterVol     $0B
0009037F 8004                       	dc.b	nRst, $04
00090381 ECF5                       	smpsPSGAlterVol     $F5
00090383 9206                       	dc.b	nF1, $06
00090385 EC04                       	smpsPSGAlterVol     $04
00090387 E701                       	dc.b	smpsNoAttack, $01
00090389 EC07                       	smpsPSGAlterVol     $07
0009038B 8006                       	dc.b	nRst, $06
0009038D E103                       	smpsAlterNote       $03
0009038F 01                         	dc.b	$01
00090390 E104                       	smpsAlterNote       $04
00090392 01                         	dc.b	$01
00090393 E100                       	smpsAlterNote       $00
00090395 01                         	dc.b	$01
00090396 E1FA                       	smpsAlterNote       $FA
00090398 01                         	dc.b	$01
00090399 E1FD                       	smpsAlterNote       $FD
0009039B ECF5                       	smpsPSGAlterVol     $F5
0009039D 9206                       	dc.b	nF1, $06
0009039F EC04                       	smpsPSGAlterVol     $04
000903A1 E701                       	dc.b	smpsNoAttack, $01
000903A3 EC07                       	smpsPSGAlterVol     $07
000903A5 8003                       	dc.b	nRst, $03
000903A7 ECF5                       	smpsPSGAlterVol     $F5
000903A9 9106                       	dc.b	nE1, $06
000903AB EC04                       	smpsPSGAlterVol     $04
000903AD E701                       	dc.b	smpsNoAttack, $01
000903AF EC07                       	smpsPSGAlterVol     $07
000903B1 8006                       	dc.b	nRst, $06
000903B3 E100                       	smpsAlterNote       $00
000903B5 01                         	dc.b	$01
000903B6 E104                       	smpsAlterNote       $04
000903B8 01                         	dc.b	$01
000903B9 E100                       	smpsAlterNote       $00
000903BB 01                         	dc.b	$01
000903BC E1FD                       	smpsAlterNote       $FD
000903BE 01                         	dc.b	$01
000903BF ECF5                       	smpsPSGAlterVol     $F5
000903C1 9206                       	dc.b	nF1, $06
000903C3 EC04                       	smpsPSGAlterVol     $04
000903C5 E701                       	dc.b	smpsNoAttack, $01
000903C7 EC07                       	smpsPSGAlterVol     $07
000903C9 8003                       	dc.b	nRst, $03
000903CB ECF5                       	smpsPSGAlterVol     $F5
000903CD 9207                       	dc.b	nF1, $07
000903CF EC0B                       	smpsPSGAlterVol     $0B
000903D1 8007                       	dc.b	nRst, $07
000903D3 E103                       	smpsAlterNote       $03
000903D5 0101                       	dc.b	$01, $01
000903D7 E1FD                       	smpsAlterNote       $FD
000903D9 01                         	dc.b	$01
000903DA E1FB                       	smpsAlterNote       $FB
000903DC 01                         	dc.b	$01
000903DD E1FD                       	smpsAlterNote       $FD
000903DF ECF5                       	smpsPSGAlterVol     $F5
000903E1 9406                       	dc.b	nG1, $06
000903E3 EC0B                       	smpsPSGAlterVol     $0B
000903E5 8004                       	dc.b	nRst, $04
000903E7 ECF5                       	smpsPSGAlterVol     $F5
000903E9 9406                       	dc.b	nG1, $06
000903EB EC04                       	smpsPSGAlterVol     $04
000903ED E701                       	dc.b	smpsNoAttack, $01
000903EF EC07                       	smpsPSGAlterVol     $07
000903F1 8006                       	dc.b	nRst, $06
000903F3 E100                       	smpsAlterNote       $00
000903F5 01                         	dc.b	$01
000903F6 E104                       	smpsAlterNote       $04
000903F8 01                         	dc.b	$01
000903F9 E100                       	smpsAlterNote       $00
000903FB 01                         	dc.b	$01
000903FC E1F9                       	smpsAlterNote       $F9
000903FE 01                         	dc.b	$01
000903FF E1FD                       	smpsAlterNote       $FD
00090401 ECF5                       	smpsPSGAlterVol     $F5
00090403 9206                       	dc.b	nF1, $06
00090405 EC04                       	smpsPSGAlterVol     $04
00090407 E701                       	dc.b	smpsNoAttack, $01
00090409 EC07                       	smpsPSGAlterVol     $07
0009040B 8003                       	dc.b	nRst, $03
0009040D ECF5                       	smpsPSGAlterVol     $F5
0009040F 9207                       	dc.b	nF1, $07
00090411 EC0B                       	smpsPSGAlterVol     $0B
00090413 8006                       	dc.b	nRst, $06
00090415 E100                       	smpsAlterNote       $00
00090417 01                         	dc.b	$01
00090418 E104                       	smpsAlterNote       $04
0009041A 01                         	dc.b	$01
0009041B E103                       	smpsAlterNote       $03
0009041D 01                         	dc.b	$01
0009041E E1FD                       	smpsAlterNote       $FD
00090420 01                         	dc.b	$01
00090421 ECF5                       	smpsPSGAlterVol     $F5
00090423 9207                       	dc.b	nF1, $07
00090425 EC0B                       	smpsPSGAlterVol     $0B
00090427 8004                       	dc.b	nRst, $04
00090429 ECF5                       	smpsPSGAlterVol     $F5
0009042B 9206                       	dc.b	nF1, $06
0009042D EC0B                       	smpsPSGAlterVol     $0B
0009042F 8007                       	dc.b	nRst, $07
00090431 E103                       	smpsAlterNote       $03
00090433 0101                       	dc.b	$01, $01
00090435 E100                       	smpsAlterNote       $00
00090437 01                         	dc.b	$01
00090438 E1FA                       	smpsAlterNote       $FA
0009043A 01                         	dc.b	$01
0009043B E1FD                       	smpsAlterNote       $FD
0009043D ECF5                       	smpsPSGAlterVol     $F5
0009043F 9206                       	dc.b	nF1, $06
00090441 EC04                       	smpsPSGAlterVol     $04
00090443 E701                       	dc.b	smpsNoAttack, $01
00090445 EC07                       	smpsPSGAlterVol     $07
00090447 8003                       	dc.b	nRst, $03
00090449 ECF5                       	smpsPSGAlterVol     $F5
0009044B 9206                       	dc.b	nF1, $06
0009044D EC04                       	smpsPSGAlterVol     $04
0009044F E701                       	dc.b	smpsNoAttack, $01
00090451 EC07                       	smpsPSGAlterVol     $07
00090453 8006                       	dc.b	nRst, $06
00090455 E100                       	smpsAlterNote       $00
00090457 01                         	dc.b	$01
00090458 E104                       	smpsAlterNote       $04
0009045A 01                         	dc.b	$01
0009045B E100                       	smpsAlterNote       $00
0009045D 01                         	dc.b	$01
0009045E E1FD                       	smpsAlterNote       $FD
00090460 01                         	dc.b	$01
00090461 ECF5                       	smpsPSGAlterVol     $F5
00090463 9206                       	dc.b	nF1, $06
00090465 EC04                       	smpsPSGAlterVol     $04
00090467 E701                       	dc.b	smpsNoAttack, $01
00090469 EC07                       	smpsPSGAlterVol     $07
0009046B 8003                       	dc.b	nRst, $03
0009046D ECF5                       	smpsPSGAlterVol     $F5
0009046F 9207                       	dc.b	nF1, $07
00090471 EC0B                       	smpsPSGAlterVol     $0B
00090473 8007                       	dc.b	nRst, $07
00090475 E103                       	smpsAlterNote       $03
00090477 0101                       	dc.b	$01, $01
00090479 E1FD                       	smpsAlterNote       $FD
0009047B 01                         	dc.b	$01
0009047C E1FA                       	smpsAlterNote       $FA
0009047E 01                         	dc.b	$01
0009047F E1FD                       	smpsAlterNote       $FD
00090481 ECF5                       	smpsPSGAlterVol     $F5
00090483 9206                       	dc.b	nF1, $06
00090485 EC0B                       	smpsPSGAlterVol     $0B
00090487 8004                       	dc.b	nRst, $04
00090489 ECF5                       	smpsPSGAlterVol     $F5
0009048B 9206                       	dc.b	nF1, $06
0009048D EC04                       	smpsPSGAlterVol     $04
0009048F E701                       	dc.b	smpsNoAttack, $01
00090491 EC07                       	smpsPSGAlterVol     $07
00090493 8006                       	dc.b	nRst, $06
00090495 E103                       	smpsAlterNote       $03
00090497 01                         	dc.b	$01
00090498 E104                       	smpsAlterNote       $04
0009049A 01                         	dc.b	$01
0009049B E100                       	smpsAlterNote       $00
0009049D 01                         	dc.b	$01
0009049E E1FA                       	smpsAlterNote       $FA
000904A0 01                         	dc.b	$01
000904A1 E1FD                       	smpsAlterNote       $FD
000904A3 ECF5                       	smpsPSGAlterVol     $F5
000904A5 9206                       	dc.b	nF1, $06
000904A7 EC04                       	smpsPSGAlterVol     $04
000904A9 E701                       	dc.b	smpsNoAttack, $01
000904AB EC07                       	smpsPSGAlterVol     $07
000904AD 8003                       	dc.b	nRst, $03
000904AF ECF5                       	smpsPSGAlterVol     $F5
000904B1 9206                       	dc.b	nF1, $06
000904B3 EC04                       	smpsPSGAlterVol     $04
000904B5 E701                       	dc.b	smpsNoAttack, $01
000904B7 EC07                       	smpsPSGAlterVol     $07
000904B9 8006                       	dc.b	nRst, $06
000904BB E100                       	smpsAlterNote       $00
000904BD 01                         	dc.b	$01
000904BE E104                       	smpsAlterNote       $04
000904C0 01                         	dc.b	$01
000904C1 E103                       	smpsAlterNote       $03
000904C3 01                         	dc.b	$01
000904C4 E1FD                       	smpsAlterNote       $FD
000904C6 01                         	dc.b	$01
000904C7 ECF5                       	smpsPSGAlterVol     $F5
000904C9 9107                       	dc.b	nE1, $07
000904CB EC0B                       	smpsPSGAlterVol     $0B
000904CD 8004                       	dc.b	nRst, $04
000904CF ECF5                       	smpsPSGAlterVol     $F5
000904D1 9106                       	dc.b	nE1, $06
000904D3 EC0B                       	smpsPSGAlterVol     $0B
000904D5 8007                       	dc.b	nRst, $07
000904D7 E103                       	smpsAlterNote       $03
000904D9 0101                       	dc.b	$01, $01
000904DB E100                       	smpsAlterNote       $00
000904DD 01                         	dc.b	$01
000904DE E1FA                       	smpsAlterNote       $FA
000904E0 01                         	dc.b	$01
000904E1 E1FD                       	smpsAlterNote       $FD
000904E3 ECF5                       	smpsPSGAlterVol     $F5
000904E5 9106                       	dc.b	nE1, $06
000904E7 EC04                       	smpsPSGAlterVol     $04
000904E9 E701                       	dc.b	smpsNoAttack, $01
000904EB EC07                       	smpsPSGAlterVol     $07
000904ED 8003                       	dc.b	nRst, $03
000904EF ECF5                       	smpsPSGAlterVol     $F5
000904F1 9106                       	dc.b	nE1, $06
000904F3 EC04                       	smpsPSGAlterVol     $04
000904F5 E701                       	dc.b	smpsNoAttack, $01
000904F7 EC07                       	smpsPSGAlterVol     $07
000904F9 8006                       	dc.b	nRst, $06
000904FB E100                       	smpsAlterNote       $00
000904FD 01                         	dc.b	$01
000904FE E104                       	smpsAlterNote       $04
00090500 01                         	dc.b	$01
00090501 E100                       	smpsAlterNote       $00
00090503 01                         	dc.b	$01
00090504 E1FA                       	smpsAlterNote       $FA
00090506 01                         	dc.b	$01
00090507 E1FD                       	smpsAlterNote       $FD
00090509 ECF5                       	smpsPSGAlterVol     $F5
0009050B 9106                       	dc.b	nE1, $06
0009050D EC04                       	smpsPSGAlterVol     $04
0009050F E701                       	dc.b	smpsNoAttack, $01
00090511 EC07                       	smpsPSGAlterVol     $07
00090513 8003                       	dc.b	nRst, $03
00090515 ECF5                       	smpsPSGAlterVol     $F5
00090517 9107 9106                  	dc.b	nE1, $07, nE1, $06
0009051B EC04                       	smpsPSGAlterVol     $04
0009051D E701                       	dc.b	smpsNoAttack, $01
0009051F ECFC                       	smpsPSGAlterVol     $FC
00090521 9103 9103                  	dc.b	nE1, $03, nE1, $03
00090525 EC04                       	smpsPSGAlterVol     $04
00090527 E701                       	dc.b	smpsNoAttack, $01
00090529 ECFC                       	smpsPSGAlterVol     $FC
0009052B 9106                       	dc.b	nE1, $06
0009052D EC04                       	smpsPSGAlterVol     $04
0009052F E701                       	dc.b	smpsNoAttack, $01
00090531 EC07                       	smpsPSGAlterVol     $07
00090533 8006                       	dc.b	nRst, $06
00090535 E100                       	smpsAlterNote       $00
00090537 01                         	dc.b	$01
00090538 E104                       	smpsAlterNote       $04
0009053A 01                         	dc.b	$01
0009053B E100                       	smpsAlterNote       $00
0009053D 01                         	dc.b	$01
0009053E E1FA                       	smpsAlterNote       $FA
00090540 01                         	dc.b	$01
00090541 E1F9                       	smpsAlterNote       $F9
00090543 01                         	dc.b	$01
00090544 E1FD                       	smpsAlterNote       $FD
00090546 01                         	dc.b	$01
00090547 E103                       	smpsAlterNote       $03
00090549 01                         	dc.b	$01
0009054A E104                       	smpsAlterNote       $04
0009054C 01                         	dc.b	$01
0009054D E100                       	smpsAlterNote       $00
0009054F 01                         	dc.b	$01
00090550 E1FA                       	smpsAlterNote       $FA
00090552 0101                       	dc.b	$01, $01
00090554 E1FD                       	smpsAlterNote       $FD
00090556 ECF5                       	smpsPSGAlterVol     $F5
00090558 9206                       	dc.b	nF1, $06
0009055A EC04                       	smpsPSGAlterVol     $04
0009055C E701                       	dc.b	smpsNoAttack, $01
0009055E EC07                       	smpsPSGAlterVol     $07
00090560 8003                       	dc.b	nRst, $03
00090562 ECF5                       	smpsPSGAlterVol     $F5
00090564 9206                       	dc.b	nF1, $06
00090566 EC04                       	smpsPSGAlterVol     $04
00090568 E701                       	dc.b	smpsNoAttack, $01
0009056A EC07                       	smpsPSGAlterVol     $07
0009056C 8006                       	dc.b	nRst, $06
0009056E E100                       	smpsAlterNote       $00
00090570 01                         	dc.b	$01
00090571 E104                       	smpsAlterNote       $04
00090573 01                         	dc.b	$01
00090574 E103                       	smpsAlterNote       $03
00090576 01                         	dc.b	$01
00090577 E1FD                       	smpsAlterNote       $FD
00090579 01                         	dc.b	$01
0009057A ECF5                       	smpsPSGAlterVol     $F5
0009057C 9407                       	dc.b	nG1, $07
0009057E EC0B                       	smpsPSGAlterVol     $0B
00090580 8004                       	dc.b	nRst, $04
00090582 ECF5                       	smpsPSGAlterVol     $F5
00090584 9406                       	dc.b	nG1, $06
00090586 EC0B                       	smpsPSGAlterVol     $0B
00090588 8007                       	dc.b	nRst, $07
0009058A E103                       	smpsAlterNote       $03
0009058C 0101                       	dc.b	$01, $01
0009058E E1FD                       	smpsAlterNote       $FD
00090590 01                         	dc.b	$01
00090591 E1F9                       	smpsAlterNote       $F9
00090593 01                         	dc.b	$01
00090594 E1FD                       	smpsAlterNote       $FD
00090596 ECF5                       	smpsPSGAlterVol     $F5
00090598 9206                       	dc.b	nF1, $06
0009059A EC04                       	smpsPSGAlterVol     $04
0009059C E701                       	dc.b	smpsNoAttack, $01
0009059E EC07                       	smpsPSGAlterVol     $07
000905A0 8003                       	dc.b	nRst, $03
000905A2 ECF5                       	smpsPSGAlterVol     $F5
000905A4 9206                       	dc.b	nF1, $06
000905A6 EC04                       	smpsPSGAlterVol     $04
000905A8 E701                       	dc.b	smpsNoAttack, $01
000905AA EC07                       	smpsPSGAlterVol     $07
000905AC 8006                       	dc.b	nRst, $06
000905AE E100                       	smpsAlterNote       $00
000905B0 01                         	dc.b	$01
000905B1 E104                       	smpsAlterNote       $04
000905B3 01                         	dc.b	$01
000905B4 E100                       	smpsAlterNote       $00
000905B6 01                         	dc.b	$01
000905B7 E1FA                       	smpsAlterNote       $FA
000905B9 01                         	dc.b	$01
000905BA E1FD                       	smpsAlterNote       $FD
000905BC ECF5                       	smpsPSGAlterVol     $F5
000905BE 9206                       	dc.b	nF1, $06
000905C0 EC04                       	smpsPSGAlterVol     $04
000905C2 E701                       	dc.b	smpsNoAttack, $01
000905C4 EC07                       	smpsPSGAlterVol     $07
000905C6 8003                       	dc.b	nRst, $03
000905C8 ECF5                       	smpsPSGAlterVol     $F5
000905CA 9107                       	dc.b	nE1, $07
000905CC EC0B                       	smpsPSGAlterVol     $0B
000905CE 8006                       	dc.b	nRst, $06
000905D0 E100                       	smpsAlterNote       $00
000905D2 01                         	dc.b	$01
000905D3 E103                       	smpsAlterNote       $03
000905D5 0101                       	dc.b	$01, $01
000905D7 E1FD                       	smpsAlterNote       $FD
000905D9 01                         	dc.b	$01
000905DA ECF5                       	smpsPSGAlterVol     $F5
000905DC 9207                       	dc.b	nF1, $07
000905DE EC0B                       	smpsPSGAlterVol     $0B
000905E0 8004                       	dc.b	nRst, $04
000905E2 ECF5                       	smpsPSGAlterVol     $F5
000905E4 9206                       	dc.b	nF1, $06
000905E6 EC04                       	smpsPSGAlterVol     $04
000905E8 E701                       	dc.b	smpsNoAttack, $01
000905EA EC07                       	smpsPSGAlterVol     $07
000905EC 8006                       	dc.b	nRst, $06
000905EE E103                       	smpsAlterNote       $03
000905F0 01                         	dc.b	$01
000905F1 E104                       	smpsAlterNote       $04
000905F3 01                         	dc.b	$01
000905F4 E100                       	smpsAlterNote       $00
000905F6 01                         	dc.b	$01
000905F7 E1FB                       	smpsAlterNote       $FB
000905F9 01                         	dc.b	$01
000905FA E1FD                       	smpsAlterNote       $FD
000905FC ECF5                       	smpsPSGAlterVol     $F5
000905FE 9406                       	dc.b	nG1, $06
00090600 EC04                       	smpsPSGAlterVol     $04
00090602 E701                       	dc.b	smpsNoAttack, $01
00090604 EC07                       	smpsPSGAlterVol     $07
00090606 8003                       	dc.b	nRst, $03
00090608 ECF5                       	smpsPSGAlterVol     $F5
0009060A 9406                       	dc.b	nG1, $06
0009060C EC04                       	smpsPSGAlterVol     $04
0009060E E701                       	dc.b	smpsNoAttack, $01
00090610 EC07                       	smpsPSGAlterVol     $07
00090612 8006                       	dc.b	nRst, $06
00090614 E100                       	smpsAlterNote       $00
00090616 01                         	dc.b	$01
00090617 E104                       	smpsAlterNote       $04
00090619 01                         	dc.b	$01
0009061A E100                       	smpsAlterNote       $00
0009061C 01                         	dc.b	$01
0009061D E1FD                       	smpsAlterNote       $FD
0009061F 01                         	dc.b	$01
00090620 ECF5                       	smpsPSGAlterVol     $F5
00090622 9206                       	dc.b	nF1, $06
00090624 EC04                       	smpsPSGAlterVol     $04
00090626 E701                       	dc.b	smpsNoAttack, $01
00090628 EC07                       	smpsPSGAlterVol     $07
0009062A 8003                       	dc.b	nRst, $03
0009062C ECF5                       	smpsPSGAlterVol     $F5
0009062E 9207                       	dc.b	nF1, $07
00090630 EC0B                       	smpsPSGAlterVol     $0B
00090632 8007                       	dc.b	nRst, $07
00090634 E103                       	smpsAlterNote       $03
00090636 0101                       	dc.b	$01, $01
00090638 E1FD                       	smpsAlterNote       $FD
0009063A 01                         	dc.b	$01
0009063B E1FA                       	smpsAlterNote       $FA
0009063D 01                         	dc.b	$01
0009063E E1FD                       	smpsAlterNote       $FD
00090640 ECF5                       	smpsPSGAlterVol     $F5
00090642 9206                       	dc.b	nF1, $06
00090644 EC0B                       	smpsPSGAlterVol     $0B
00090646 8004                       	dc.b	nRst, $04
00090648 ECF5                       	smpsPSGAlterVol     $F5
0009064A 9206                       	dc.b	nF1, $06
0009064C EC04                       	smpsPSGAlterVol     $04
0009064E E701                       	dc.b	smpsNoAttack, $01
00090650 EC07                       	smpsPSGAlterVol     $07
00090652 8006                       	dc.b	nRst, $06
00090654 E100                       	smpsAlterNote       $00
00090656 01                         	dc.b	$01
00090657 E104                       	smpsAlterNote       $04
00090659 01                         	dc.b	$01
0009065A E100                       	smpsAlterNote       $00
0009065C 01                         	dc.b	$01
0009065D E1FA                       	smpsAlterNote       $FA
0009065F 01                         	dc.b	$01
00090660 E1FD                       	smpsAlterNote       $FD
00090662 ECF5                       	smpsPSGAlterVol     $F5
00090664 9206                       	dc.b	nF1, $06
00090666 EC04                       	smpsPSGAlterVol     $04
00090668 E704                       	dc.b	smpsNoAttack, $04
0009066A ECFC                       	smpsPSGAlterVol     $FC
0009066C 9207                       	dc.b	nF1, $07
0009066E EC0B                       	smpsPSGAlterVol     $0B
00090670 8006                       	dc.b	nRst, $06
00090672 E100                       	smpsAlterNote       $00
00090674 01                         	dc.b	$01
00090675 E104                       	smpsAlterNote       $04
00090677 01                         	dc.b	$01
00090678 E103                       	smpsAlterNote       $03
0009067A 01                         	dc.b	$01
0009067B E1FD                       	smpsAlterNote       $FD
0009067D 01                         	dc.b	$01
0009067E ECF5                       	smpsPSGAlterVol     $F5
00090680 9207                       	dc.b	nF1, $07
00090682 EC0B                       	smpsPSGAlterVol     $0B
00090684 8004                       	dc.b	nRst, $04
00090686 ECF5                       	smpsPSGAlterVol     $F5
00090688 9206                       	dc.b	nF1, $06
0009068A EC0B                       	smpsPSGAlterVol     $0B
0009068C 8007                       	dc.b	nRst, $07
0009068E E103                       	smpsAlterNote       $03
00090690 0101                       	dc.b	$01, $01
00090692 E100                       	smpsAlterNote       $00
00090694 01                         	dc.b	$01
00090695 E1FA                       	smpsAlterNote       $FA
00090697 01                         	dc.b	$01
00090698 E1FD                       	smpsAlterNote       $FD
0009069A ECF5                       	smpsPSGAlterVol     $F5
0009069C 9206                       	dc.b	nF1, $06
0009069E EC04                       	smpsPSGAlterVol     $04
000906A0 E704                       	dc.b	smpsNoAttack, $04
000906A2 ECFC                       	smpsPSGAlterVol     $FC
000906A4 9206                       	dc.b	nF1, $06
000906A6 EC04                       	smpsPSGAlterVol     $04
000906A8 E701                       	dc.b	smpsNoAttack, $01
000906AA EC07                       	smpsPSGAlterVol     $07
000906AC 8006                       	dc.b	nRst, $06
000906AE E100                       	smpsAlterNote       $00
000906B0 01                         	dc.b	$01
000906B1 E104                       	smpsAlterNote       $04
000906B3 01                         	dc.b	$01
000906B4 E100                       	smpsAlterNote       $00
000906B6 01                         	dc.b	$01
000906B7 E1FD                       	smpsAlterNote       $FD
000906B9 01                         	dc.b	$01
000906BA ECF5                       	smpsPSGAlterVol     $F5
000906BC 9206                       	dc.b	nF1, $06
000906BE EC04                       	smpsPSGAlterVol     $04
000906C0 E701                       	dc.b	smpsNoAttack, $01
000906C2 EC07                       	smpsPSGAlterVol     $07
000906C4 8003                       	dc.b	nRst, $03
000906C6 ECF5                       	smpsPSGAlterVol     $F5
000906C8 9207                       	dc.b	nF1, $07
000906CA EC0B                       	smpsPSGAlterVol     $0B
000906CC 8007                       	dc.b	nRst, $07
000906CE E103                       	smpsAlterNote       $03
000906D0 0101                       	dc.b	$01, $01
000906D2 E1FD                       	smpsAlterNote       $FD
000906D4 01                         	dc.b	$01
000906D5 E1FA                       	smpsAlterNote       $FA
000906D7 01                         	dc.b	$01
000906D8 E1FD                       	smpsAlterNote       $FD
000906DA ECF5                       	smpsPSGAlterVol     $F5
000906DC 9106                       	dc.b	nE1, $06
000906DE EC0B                       	smpsPSGAlterVol     $0B
000906E0 8004                       	dc.b	nRst, $04
000906E2 ECF5                       	smpsPSGAlterVol     $F5
000906E4 9106                       	dc.b	nE1, $06
000906E6 EC04                       	smpsPSGAlterVol     $04
000906E8 E701                       	dc.b	smpsNoAttack, $01
000906EA EC07                       	smpsPSGAlterVol     $07
000906EC 8006                       	dc.b	nRst, $06
000906EE E100                       	smpsAlterNote       $00
000906F0 01                         	dc.b	$01
000906F1 E104                       	smpsAlterNote       $04
000906F3 01                         	dc.b	$01
000906F4 E100                       	smpsAlterNote       $00
000906F6 01                         	dc.b	$01
000906F7 E1FA                       	smpsAlterNote       $FA
000906F9 01                         	dc.b	$01
000906FA E1FD                       	smpsAlterNote       $FD
000906FC ECF5                       	smpsPSGAlterVol     $F5
000906FE 9106                       	dc.b	nE1, $06
00090700 EC04                       	smpsPSGAlterVol     $04
00090702 E701                       	dc.b	smpsNoAttack, $01
00090704 EC07                       	smpsPSGAlterVol     $07
00090706 8003                       	dc.b	nRst, $03
00090708 ECF5                       	smpsPSGAlterVol     $F5
0009070A 9106                       	dc.b	nE1, $06
0009070C EC04                       	smpsPSGAlterVol     $04
0009070E E701                       	dc.b	smpsNoAttack, $01
00090710 EC07                       	smpsPSGAlterVol     $07
00090712 8006                       	dc.b	nRst, $06
00090714 E100                       	smpsAlterNote       $00
00090716 01                         	dc.b	$01
00090717 E104                       	smpsAlterNote       $04
00090719 01                         	dc.b	$01
0009071A E103                       	smpsAlterNote       $03
0009071C 01                         	dc.b	$01
0009071D E1FD                       	smpsAlterNote       $FD
0009071F 01                         	dc.b	$01
00090720 ECF5                       	smpsPSGAlterVol     $F5
00090722 9107                       	dc.b	nE1, $07
00090724 EC0B                       	smpsPSGAlterVol     $0B
00090726 8004                       	dc.b	nRst, $04
00090728 ECF5                       	smpsPSGAlterVol     $F5
0009072A 9106                       	dc.b	nE1, $06
0009072C EC0B                       	smpsPSGAlterVol     $0B
0009072E 8007                       	dc.b	nRst, $07
00090730 E103                       	smpsAlterNote       $03
00090732 0101                       	dc.b	$01, $01
00090734 E100                       	smpsAlterNote       $00
00090736 01                         	dc.b	$01
00090737 E1FA                       	smpsAlterNote       $FA
00090739 01                         	dc.b	$01
0009073A E1FD                       	smpsAlterNote       $FD
0009073C ECF5                       	smpsPSGAlterVol     $F5
0009073E 9106                       	dc.b	nE1, $06
00090740 EC04                       	smpsPSGAlterVol     $04
00090742 E701                       	dc.b	smpsNoAttack, $01
00090744 EC07                       	smpsPSGAlterVol     $07
00090746 8003                       	dc.b	nRst, $03
00090748 ECF5                       	smpsPSGAlterVol     $F5
0009074A 9106                       	dc.b	nE1, $06
0009074C EC04                       	smpsPSGAlterVol     $04
0009074E E701                       	dc.b	smpsNoAttack, $01
00090750 EC07                       	smpsPSGAlterVol     $07
00090752 8003                       	dc.b	nRst, $03
00090754 ECF5                       	smpsPSGAlterVol     $F5
00090756 9207                       	dc.b	nF1, $07
00090758 EC0B                       	smpsPSGAlterVol     $0B
0009075A 8006                       	dc.b	nRst, $06
0009075C E100                       	smpsAlterNote       $00
0009075E 01                         	dc.b	$01
0009075F E104                       	smpsAlterNote       $04
00090761 01                         	dc.b	$01
00090762 E103                       	smpsAlterNote       $03
00090764 01                         	dc.b	$01
00090765 E1FD                       	smpsAlterNote       $FD
00090767 01                         	dc.b	$01
00090768 E1F9                       	smpsAlterNote       $F9
0009076A 01                         	dc.b	$01
0009076B E1FD                       	smpsAlterNote       $FD
0009076D 01                         	dc.b	$01
0009076E E100                       	smpsAlterNote       $00
00090770 01                         	dc.b	$01
00090771 E104                       	smpsAlterNote       $04
00090773 01                         	dc.b	$01
00090774 E1FD                       	smpsAlterNote       $FD
00090776 ECF5                       	smpsPSGAlterVol     $F5
00090778 9203 9203                  	dc.b	nF1, $03, nF1, $03
0009077C EC04                       	smpsPSGAlterVol     $04
0009077E E701                       	dc.b	smpsNoAttack, $01
00090780 EC07                       	smpsPSGAlterVol     $07
00090782 8009                       	dc.b	nRst, $09
00090784 E100                       	smpsAlterNote       $00
00090786 01                         	dc.b	$01
00090787 E104                       	smpsAlterNote       $04
00090789 01                         	dc.b	$01
0009078A E103                       	smpsAlterNote       $03
0009078C 01                         	dc.b	$01
0009078D E1FD                       	smpsAlterNote       $FD
0009078F 01                         	dc.b	$01
00090790 E1F9                       	smpsAlterNote       $F9
00090792 01                         	dc.b	$01
00090793 E1FD                       	smpsAlterNote       $FD
00090795 01                         	dc.b	$01
00090796 E100                       	smpsAlterNote       $00
00090798 01                         	dc.b	$01
00090799 E104                       	smpsAlterNote       $04
0009079B 01                         	dc.b	$01
0009079C E100                       	smpsAlterNote       $00
0009079E 01                         	dc.b	$01
0009079F E1FA                       	smpsAlterNote       $FA
000907A1 01                         	dc.b	$01
000907A2 E1F9                       	smpsAlterNote       $F9
000907A4 01                         	dc.b	$01
000907A5 E1FD                       	smpsAlterNote       $FD
000907A7 01                         	dc.b	$01
000907A8 E103                       	smpsAlterNote       $03
000907AA 0101                       	dc.b	$01, $01
000907AC E100                       	smpsAlterNote       $00
000907AE 01                         	dc.b	$01
000907AF E1FD                       	smpsAlterNote       $FD
000907B1 ECF5                       	smpsPSGAlterVol     $F5
000907B3 9202                       	dc.b	nF1, $02
000907B5 EC04                       	smpsPSGAlterVol     $04
000907B7 E701                       	dc.b	smpsNoAttack, $01
000907B9 ECFC                       	smpsPSGAlterVol     $FC
000907BB 9106                       	dc.b	nE1, $06
000907BD EC04                       	smpsPSGAlterVol     $04
000907BF E701                       	dc.b	smpsNoAttack, $01
000907C1 EC07                       	smpsPSGAlterVol     $07
000907C3 8006                       	dc.b	nRst, $06
000907C5 E100                       	smpsAlterNote       $00
000907C7 01                         	dc.b	$01
000907C8 E104                       	smpsAlterNote       $04
000907CA 01                         	dc.b	$01
000907CB E100                       	smpsAlterNote       $00
000907CD 01                         	dc.b	$01
000907CE E1FD                       	smpsAlterNote       $FD
000907D0 01                         	dc.b	$01
000907D1 E1F9                       	smpsAlterNote       $F9
000907D3 01                         	dc.b	$01
000907D4 E1FD                       	smpsAlterNote       $FD
000907D6 01                         	dc.b	$01
000907D7 E103                       	smpsAlterNote       $03
000907D9 01                         	dc.b	$01
000907DA E104                       	smpsAlterNote       $04
000907DC 01                         	dc.b	$01
000907DD E1FD                       	smpsAlterNote       $FD
000907DF ECF5                       	smpsPSGAlterVol     $F5
000907E1 9102                       	dc.b	nE1, $02
000907E3 EC04                       	smpsPSGAlterVol     $04
000907E5 E701                       	dc.b	smpsNoAttack, $01
000907E7 ECFC                       	smpsPSGAlterVol     $FC
000907E9 920D                       	dc.b	nF1, $0D
000907EB E100                       	smpsAlterNote       $00
000907ED E701                       	dc.b	smpsNoAttack, $01
000907EF E104                       	smpsAlterNote       $04
000907F1 E701                       	dc.b	smpsNoAttack, $01
000907F3 E100                       	smpsAlterNote       $00
000907F5 E701                       	dc.b	smpsNoAttack, $01
000907F7 E1FD                       	smpsAlterNote       $FD
000907F9 E701                       	dc.b	smpsNoAttack, $01
000907FB E1F9                       	smpsAlterNote       $F9
000907FD E701                       	dc.b	smpsNoAttack, $01
000907FF E1FD                       	smpsAlterNote       $FD
00090801 E701                       	dc.b	smpsNoAttack, $01
00090803 E103                       	smpsAlterNote       $03
00090805 E701                       	dc.b	smpsNoAttack, $01
00090807 E104                       	smpsAlterNote       $04
00090809 E701                       	dc.b	smpsNoAttack, $01
0009080B E100                       	smpsAlterNote       $00
0009080D E701                       	dc.b	smpsNoAttack, $01
0009080F E1FA                       	smpsAlterNote       $FA
00090811 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00090815 E1FD                       	smpsAlterNote       $FD
00090817 E701                       	dc.b	smpsNoAttack, $01
00090819 E103                       	smpsAlterNote       $03
0009081B E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0009081F E1FD                       	smpsAlterNote       $FD
00090821 E701                       	dc.b	smpsNoAttack, $01
00090823 E1F9                       	smpsAlterNote       $F9
00090825 E701                       	dc.b	smpsNoAttack, $01
00090827 E1FA                       	smpsAlterNote       $FA
00090829 E701                       	dc.b	smpsNoAttack, $01
0009082B E100                       	smpsAlterNote       $00
0009082D EC04                       	smpsPSGAlterVol     $04
0009082F E701                       	dc.b	smpsNoAttack, $01
00090831 EC07                       	smpsPSGAlterVol     $07
00090833 E104                       	smpsAlterNote       $04
00090835 8001                       	dc.b	nRst, $01
00090837 E100                       	smpsAlterNote       $00
00090839 01                         	dc.b	$01
0009083A E1FD                       	smpsAlterNote       $FD
0009083C 01                         	dc.b	$01
0009083D E1F9                       	smpsAlterNote       $F9
0009083F 01                         	dc.b	$01
00090840 E1FD                       	smpsAlterNote       $FD
00090842 01                         	dc.b	$01
00090843 E103                       	smpsAlterNote       $03
00090845 01                         	dc.b	$01
00090846 E104                       	smpsAlterNote       $04
00090848 01                         	dc.b	$01
00090849 E1FD                       	smpsAlterNote       $FD
0009084B ECF5                       	smpsPSGAlterVol     $F5
0009084D 9106                       	dc.b	nE1, $06
0009084F EC04                       	smpsPSGAlterVol     $04
00090851 E701                       	dc.b	smpsNoAttack, $01
00090853 EC07                       	smpsPSGAlterVol     $07
00090855 8003                       	dc.b	nRst, $03
00090857 ECF5                       	smpsPSGAlterVol     $F5
00090859 9106                       	dc.b	nE1, $06
0009085B EC04                       	smpsPSGAlterVol     $04
0009085D E701                       	dc.b	smpsNoAttack, $01
0009085F EC07                       	smpsPSGAlterVol     $07
00090861 8006                       	dc.b	nRst, $06
00090863 E100                       	smpsAlterNote       $00
00090865 01                         	dc.b	$01
00090866 E104                       	smpsAlterNote       $04
00090868 01                         	dc.b	$01
00090869 E100                       	smpsAlterNote       $00
0009086B 01                         	dc.b	$01
0009086C E1FA                       	smpsAlterNote       $FA
0009086E 01                         	dc.b	$01
0009086F E1FD                       	smpsAlterNote       $FD
00090871 ECF5                       	smpsPSGAlterVol     $F5
00090873 9206                       	dc.b	nF1, $06
00090875 EC04                       	smpsPSGAlterVol     $04
00090877 E701                       	dc.b	smpsNoAttack, $01
00090879 EC07                       	smpsPSGAlterVol     $07
0009087B 8003                       	dc.b	nRst, $03
0009087D ECF5                       	smpsPSGAlterVol     $F5
0009087F 9207                       	dc.b	nF1, $07
00090881 EC0B                       	smpsPSGAlterVol     $0B
00090883 8006                       	dc.b	nRst, $06
00090885 E100                       	smpsAlterNote       $00
00090887 01                         	dc.b	$01
00090888 E103                       	smpsAlterNote       $03
0009088A 0101                       	dc.b	$01, $01
0009088C E1FD                       	smpsAlterNote       $FD
0009088E 01                         	dc.b	$01
0009088F ECF5                       	smpsPSGAlterVol     $F5
00090891 9107                       	dc.b	nE1, $07
00090893 EC0B                       	smpsPSGAlterVol     $0B
00090895 8004                       	dc.b	nRst, $04
00090897 ECF5                       	smpsPSGAlterVol     $F5
00090899 9106                       	dc.b	nE1, $06
0009089B EC04                       	smpsPSGAlterVol     $04
0009089D E701                       	dc.b	smpsNoAttack, $01
0009089F EC07                       	smpsPSGAlterVol     $07
000908A1 8006                       	dc.b	nRst, $06
000908A3 E103                       	smpsAlterNote       $03
000908A5 01                         	dc.b	$01
000908A6 E104                       	smpsAlterNote       $04
000908A8 01                         	dc.b	$01
000908A9 E100                       	smpsAlterNote       $00
000908AB 01                         	dc.b	$01
000908AC E1FA                       	smpsAlterNote       $FA
000908AE 01                         	dc.b	$01
000908AF E1FD                       	smpsAlterNote       $FD
000908B1 ECF5                       	smpsPSGAlterVol     $F5
000908B3 9106                       	dc.b	nE1, $06
000908B5 EC04                       	smpsPSGAlterVol     $04
000908B7 E701                       	dc.b	smpsNoAttack, $01
000908B9 EC07                       	smpsPSGAlterVol     $07
000908BB 8003                       	dc.b	nRst, $03
000908BD ECF5                       	smpsPSGAlterVol     $F5
000908BF 9106                       	dc.b	nE1, $06
000908C1 EC04                       	smpsPSGAlterVol     $04
000908C3 E701                       	dc.b	smpsNoAttack, $01
000908C5 EC07                       	smpsPSGAlterVol     $07
000908C7 8003                       	dc.b	nRst, $03
000908C9 ECF5                       	smpsPSGAlterVol     $F5
000908CB 9207                       	dc.b	nF1, $07
000908CD EC0B                       	smpsPSGAlterVol     $0B
000908CF 8006                       	dc.b	nRst, $06
000908D1 E100                       	smpsAlterNote       $00
000908D3 01                         	dc.b	$01
000908D4 E103                       	smpsAlterNote       $03
000908D6 0101                       	dc.b	$01, $01
000908D8 E1FD                       	smpsAlterNote       $FD
000908DA 01                         	dc.b	$01
000908DB E1F9                       	smpsAlterNote       $F9
000908DD 01                         	dc.b	$01
000908DE E1FA                       	smpsAlterNote       $FA
000908E0 01                         	dc.b	$01
000908E1 E100                       	smpsAlterNote       $00
000908E3 01                         	dc.b	$01
000908E4 E104                       	smpsAlterNote       $04
000908E6 01                         	dc.b	$01
000908E7 E1FD                       	smpsAlterNote       $FD
000908E9 ECF5                       	smpsPSGAlterVol     $F5
000908EB 9203 9203                  	dc.b	nF1, $03, nF1, $03
000908EF EC04                       	smpsPSGAlterVol     $04
000908F1 E701                       	dc.b	smpsNoAttack, $01
000908F3 EC07                       	smpsPSGAlterVol     $07
000908F5 8009                       	dc.b	nRst, $09
000908F7 E100                       	smpsAlterNote       $00
000908F9 01                         	dc.b	$01
000908FA E103                       	smpsAlterNote       $03
000908FC 0101                       	dc.b	$01, $01
000908FE E1FD                       	smpsAlterNote       $FD
00090900 01                         	dc.b	$01
00090901 E1F9                       	smpsAlterNote       $F9
00090903 01                         	dc.b	$01
00090904 E1FA                       	smpsAlterNote       $FA
00090906 01                         	dc.b	$01
00090907 E100                       	smpsAlterNote       $00
00090909 01                         	dc.b	$01
0009090A E104                       	smpsAlterNote       $04
0009090C 01                         	dc.b	$01
0009090D E100                       	smpsAlterNote       $00
0009090F 01                         	dc.b	$01
00090910 E1FD                       	smpsAlterNote       $FD
00090912 01                         	dc.b	$01
00090913 E1F9                       	smpsAlterNote       $F9
00090915 01                         	dc.b	$01
00090916 E1FD                       	smpsAlterNote       $FD
00090918 01                         	dc.b	$01
00090919 E103                       	smpsAlterNote       $03
0009091B 01                         	dc.b	$01
0009091C E104                       	smpsAlterNote       $04
0009091E 01                         	dc.b	$01
0009091F E100                       	smpsAlterNote       $00
00090921 01                         	dc.b	$01
00090922 E1FD                       	smpsAlterNote       $FD
00090924 ECF5                       	smpsPSGAlterVol     $F5
00090926 9203 9106                  	dc.b	nF1, $03, nE1, $06
0009092A EC04                       	smpsPSGAlterVol     $04
0009092C E701                       	dc.b	smpsNoAttack, $01
0009092E EC07                       	smpsPSGAlterVol     $07
00090930 8006                       	dc.b	nRst, $06
00090932 E100                       	smpsAlterNote       $00
00090934 01                         	dc.b	$01
00090935 E104                       	smpsAlterNote       $04
00090937 01                         	dc.b	$01
00090938 E103                       	smpsAlterNote       $03
0009093A 01                         	dc.b	$01
0009093B E1FD                       	smpsAlterNote       $FD
0009093D 01                         	dc.b	$01
0009093E E1F9                       	smpsAlterNote       $F9
00090940 01                         	dc.b	$01
00090941 E1FD                       	smpsAlterNote       $FD
00090943 01                         	dc.b	$01
00090944 E100                       	smpsAlterNote       $00
00090946 01                         	dc.b	$01
00090947 E104                       	smpsAlterNote       $04
00090949 01                         	dc.b	$01
0009094A E1FD                       	smpsAlterNote       $FD
0009094C ECF5                       	smpsPSGAlterVol     $F5
0009094E 9103 920D                  	dc.b	nE1, $03, nF1, $0D
00090952 E100                       	smpsAlterNote       $00
00090954 E701                       	dc.b	smpsNoAttack, $01
00090956 E104                       	smpsAlterNote       $04
00090958 E701                       	dc.b	smpsNoAttack, $01
0009095A E100                       	smpsAlterNote       $00
0009095C E701                       	dc.b	smpsNoAttack, $01
0009095E E1FD                       	smpsAlterNote       $FD
00090960 E701                       	dc.b	smpsNoAttack, $01
00090962 E1F9                       	smpsAlterNote       $F9
00090964 E701                       	dc.b	smpsNoAttack, $01
00090966 E1FD                       	smpsAlterNote       $FD
00090968 E701                       	dc.b	smpsNoAttack, $01
0009096A E103                       	smpsAlterNote       $03
0009096C E701                       	dc.b	smpsNoAttack, $01
0009096E E104                       	smpsAlterNote       $04
00090970 E701                       	dc.b	smpsNoAttack, $01
00090972 E100                       	smpsAlterNote       $00
00090974 E701                       	dc.b	smpsNoAttack, $01
00090976 E1FA                       	smpsAlterNote       $FA
00090978 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0009097C E1FD                       	smpsAlterNote       $FD
0009097E E701                       	dc.b	smpsNoAttack, $01
00090980 E103                       	smpsAlterNote       $03
00090982 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00090986 E100                       	smpsAlterNote       $00
00090988 E701                       	dc.b	smpsNoAttack, $01
0009098A E1FA                       	smpsAlterNote       $FA
0009098C E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00090990 E100                       	smpsAlterNote       $00
00090992 EC04                       	smpsPSGAlterVol     $04
00090994 E701                       	dc.b	smpsNoAttack, $01
00090996 EC07                       	smpsPSGAlterVol     $07
00090998 E104                       	smpsAlterNote       $04
0009099A 8001                       	dc.b	nRst, $01
0009099C E103                       	smpsAlterNote       $03
0009099E 01                         	dc.b	$01
0009099F E1FD                       	smpsAlterNote       $FD
000909A1 01                         	dc.b	$01
000909A2 E1F9                       	smpsAlterNote       $F9
000909A4 01                         	dc.b	$01
000909A5 E1FD                       	smpsAlterNote       $FD
000909A7 01                         	dc.b	$01
000909A8 E100                       	smpsAlterNote       $00
000909AA 01                         	dc.b	$01
000909AB E104                       	smpsAlterNote       $04
000909AD 01                         	dc.b	$01
000909AE E1FD                       	smpsAlterNote       $FD
000909B0 ECF5                       	smpsPSGAlterVol     $F5
000909B2 9106                       	dc.b	nE1, $06
000909B4 EC04                       	smpsPSGAlterVol     $04
000909B6 E701                       	dc.b	smpsNoAttack, $01
000909B8 EC07                       	smpsPSGAlterVol     $07
000909BA 8003                       	dc.b	nRst, $03
000909BC ECF5                       	smpsPSGAlterVol     $F5
000909BE 9106                       	dc.b	nE1, $06
000909C0 EC04                       	smpsPSGAlterVol     $04
000909C2 E701                       	dc.b	smpsNoAttack, $01
000909C4 EC07                       	smpsPSGAlterVol     $07
000909C6 8006                       	dc.b	nRst, $06
000909C8 E100                       	smpsAlterNote       $00
000909CA 01                         	dc.b	$01
000909CB E104                       	smpsAlterNote       $04
000909CD 01                         	dc.b	$01
000909CE E100                       	smpsAlterNote       $00
000909D0 01                         	dc.b	$01
000909D1 E1FD                       	smpsAlterNote       $FD
000909D3 01                         	dc.b	$01
000909D4 ECF5                       	smpsPSGAlterVol     $F5
000909D6 9206                       	dc.b	nF1, $06
000909D8 EC04                       	smpsPSGAlterVol     $04
000909DA E701                       	dc.b	smpsNoAttack, $01
000909DC EC07                       	smpsPSGAlterVol     $07
000909DE 8003                       	dc.b	nRst, $03
000909E0 ECF5                       	smpsPSGAlterVol     $F5
000909E2 9207                       	dc.b	nF1, $07
000909E4 EC0B                       	smpsPSGAlterVol     $0B
000909E6 8007                       	dc.b	nRst, $07
000909E8 E103                       	smpsAlterNote       $03
000909EA 0101                       	dc.b	$01, $01
000909EC E1FD                       	smpsAlterNote       $FD
000909EE 01                         	dc.b	$01
000909EF E1FA                       	smpsAlterNote       $FA
000909F1 01                         	dc.b	$01
000909F2 E1FD                       	smpsAlterNote       $FD
000909F4 ECF5                       	smpsPSGAlterVol     $F5
000909F6 9106                       	dc.b	nE1, $06
000909F8 EC0B                       	smpsPSGAlterVol     $0B
000909FA 8004                       	dc.b	nRst, $04
000909FC ECF5                       	smpsPSGAlterVol     $F5
000909FE 9106                       	dc.b	nE1, $06
00090A00 EC04                       	smpsPSGAlterVol     $04
00090A02 E701                       	dc.b	smpsNoAttack, $01
00090A04 EC07                       	smpsPSGAlterVol     $07
00090A06 8006                       	dc.b	nRst, $06
00090A08 E100                       	smpsAlterNote       $00
00090A0A 01                         	dc.b	$01
00090A0B E104                       	smpsAlterNote       $04
00090A0D 01                         	dc.b	$01
00090A0E E100                       	smpsAlterNote       $00
00090A10 01                         	dc.b	$01
00090A11 E1FA                       	smpsAlterNote       $FA
00090A13 01                         	dc.b	$01
00090A14 E1FD                       	smpsAlterNote       $FD
00090A16 ECF5                       	smpsPSGAlterVol     $F5
00090A18 9206                       	dc.b	nF1, $06
00090A1A EC04                       	smpsPSGAlterVol     $04
00090A1C E701                       	dc.b	smpsNoAttack, $01
00090A1E EC07                       	smpsPSGAlterVol     $07
00090A20 8003                       	dc.b	nRst, $03
00090A22 ECF5                       	smpsPSGAlterVol     $F5
00090A24 9206                       	dc.b	nF1, $06
00090A26 EC04                       	smpsPSGAlterVol     $04
00090A28 E701                       	dc.b	smpsNoAttack, $01
00090A2A EC07                       	smpsPSGAlterVol     $07
00090A2C 8006                       	dc.b	nRst, $06
00090A2E E100                       	smpsAlterNote       $00
00090A30 01                         	dc.b	$01
00090A31 E104                       	smpsAlterNote       $04
00090A33 01                         	dc.b	$01
00090A34 E103                       	smpsAlterNote       $03
00090A36 01                         	dc.b	$01
00090A37 E1FD                       	smpsAlterNote       $FD
00090A39 01                         	dc.b	$01
00090A3A ECF5                       	smpsPSGAlterVol     $F5
00090A3C 9107                       	dc.b	nE1, $07
00090A3E EC0B                       	smpsPSGAlterVol     $0B
00090A40 8004                       	dc.b	nRst, $04
00090A42 ECF5                       	smpsPSGAlterVol     $F5
00090A44 9106                       	dc.b	nE1, $06
00090A46 EC0B                       	smpsPSGAlterVol     $0B
00090A48 8007                       	dc.b	nRst, $07
00090A4A E103                       	smpsAlterNote       $03
00090A4C 0101                       	dc.b	$01, $01
00090A4E E100                       	smpsAlterNote       $00
00090A50 01                         	dc.b	$01
00090A51 E1FA                       	smpsAlterNote       $FA
00090A53 01                         	dc.b	$01
00090A54 E1FD                       	smpsAlterNote       $FD
00090A56 ECF5                       	smpsPSGAlterVol     $F5
00090A58 9206                       	dc.b	nF1, $06
00090A5A EC04                       	smpsPSGAlterVol     $04
00090A5C E701                       	dc.b	smpsNoAttack, $01
00090A5E EC07                       	smpsPSGAlterVol     $07
00090A60 8003                       	dc.b	nRst, $03
00090A62 ECF5                       	smpsPSGAlterVol     $F5
00090A64 9206                       	dc.b	nF1, $06
00090A66 EC04                       	smpsPSGAlterVol     $04
00090A68 E701                       	dc.b	smpsNoAttack, $01
00090A6A EC07                       	smpsPSGAlterVol     $07
00090A6C 8006                       	dc.b	nRst, $06
00090A6E E100                       	smpsAlterNote       $00
00090A70 01                         	dc.b	$01
00090A71 E104                       	smpsAlterNote       $04
00090A73 01                         	dc.b	$01
00090A74 E100                       	smpsAlterNote       $00
00090A76 01                         	dc.b	$01
00090A77 E1FD                       	smpsAlterNote       $FD
00090A79 01                         	dc.b	$01
00090A7A ECF5                       	smpsPSGAlterVol     $F5
00090A7C 9106                       	dc.b	nE1, $06
00090A7E EC04                       	smpsPSGAlterVol     $04
00090A80 E701                       	dc.b	smpsNoAttack, $01
00090A82 EC07                       	smpsPSGAlterVol     $07
00090A84 8003                       	dc.b	nRst, $03
00090A86 ECF5                       	smpsPSGAlterVol     $F5
00090A88 9107 9106                  	dc.b	nE1, $07, nE1, $06
00090A8C EC04                       	smpsPSGAlterVol     $04
00090A8E E701                       	dc.b	smpsNoAttack, $01
00090A90 ECFC                       	smpsPSGAlterVol     $FC
00090A92 9103                       	dc.b	nE1, $03
00090A94 EC04                       	smpsPSGAlterVol     $04
00090A96 E701                       	dc.b	smpsNoAttack, $01
00090A98 ECFC                       	smpsPSGAlterVol     $FC
00090A9A 9102                       	dc.b	nE1, $02
00090A9C EC04                       	smpsPSGAlterVol     $04
00090A9E E701                       	dc.b	smpsNoAttack, $01
00090AA0 ECFC                       	smpsPSGAlterVol     $FC
00090AA2 9103                       	dc.b	nE1, $03
00090AA4 EC0B                       	smpsPSGAlterVol     $0B
00090AA6 800A                       	dc.b	nRst, $0A
00090AA8 E100                       	smpsAlterNote       $00
00090AAA 01                         	dc.b	$01
00090AAB E104                       	smpsAlterNote       $04
00090AAD 01                         	dc.b	$01
00090AAE E100                       	smpsAlterNote       $00
00090AB0 01                         	dc.b	$01
00090AB1 E1FA                       	smpsAlterNote       $FA
00090AB3 01                         	dc.b	$01
00090AB4 E1F9                       	smpsAlterNote       $F9
00090AB6 01                         	dc.b	$01
00090AB7 E1FD                       	smpsAlterNote       $FD
00090AB9 01                         	dc.b	$01
00090ABA E103                       	smpsAlterNote       $03
00090ABC 0101                       	dc.b	$01, $01
00090ABE E100                       	smpsAlterNote       $00
00090AC0 01                         	dc.b	$01
00090AC1 E1FA                       	smpsAlterNote       $FA
00090AC3 0101                       	dc.b	$01, $01
00090AC5 E1FD                       	smpsAlterNote       $FD
00090AC7 ECF5                       	smpsPSGAlterVol     $F5
00090AC9 9206                       	dc.b	nF1, $06
00090ACB EC04                       	smpsPSGAlterVol     $04
00090ACD E704                       	dc.b	smpsNoAttack, $04
00090ACF ECFC                       	smpsPSGAlterVol     $FC
00090AD1 9206                       	dc.b	nF1, $06
00090AD3 EC04                       	smpsPSGAlterVol     $04
00090AD5 E701                       	dc.b	smpsNoAttack, $01
00090AD7 EC07                       	smpsPSGAlterVol     $07
00090AD9 8006                       	dc.b	nRst, $06
00090ADB E100                       	smpsAlterNote       $00
00090ADD 01                         	dc.b	$01
00090ADE E104                       	smpsAlterNote       $04
00090AE0 01                         	dc.b	$01
00090AE1 E103                       	smpsAlterNote       $03
00090AE3 01                         	dc.b	$01
00090AE4 E1FD                       	smpsAlterNote       $FD
00090AE6 01                         	dc.b	$01
00090AE7 ECF5                       	smpsPSGAlterVol     $F5
00090AE9 9407                       	dc.b	nG1, $07
00090AEB EC0B                       	smpsPSGAlterVol     $0B
00090AED 8004                       	dc.b	nRst, $04
00090AEF ECF5                       	smpsPSGAlterVol     $F5
00090AF1 9406                       	dc.b	nG1, $06
00090AF3 EC0B                       	smpsPSGAlterVol     $0B
00090AF5 8007                       	dc.b	nRst, $07
00090AF7 E103                       	smpsAlterNote       $03
00090AF9 0101                       	dc.b	$01, $01
00090AFB E1FD                       	smpsAlterNote       $FD
00090AFD 01                         	dc.b	$01
00090AFE E1F9                       	smpsAlterNote       $F9
00090B00 01                         	dc.b	$01
00090B01 E1FD                       	smpsAlterNote       $FD
00090B03 ECF5                       	smpsPSGAlterVol     $F5
00090B05 9206                       	dc.b	nF1, $06
00090B07 EC04                       	smpsPSGAlterVol     $04
00090B09 E701                       	dc.b	smpsNoAttack, $01
00090B0B EC07                       	smpsPSGAlterVol     $07
00090B0D 8003                       	dc.b	nRst, $03
00090B0F ECF5                       	smpsPSGAlterVol     $F5
00090B11 9206                       	dc.b	nF1, $06
00090B13 EC04                       	smpsPSGAlterVol     $04
00090B15 E701                       	dc.b	smpsNoAttack, $01
00090B17 EC07                       	smpsPSGAlterVol     $07
00090B19 8006                       	dc.b	nRst, $06
00090B1B E100                       	smpsAlterNote       $00
00090B1D 01                         	dc.b	$01
00090B1E E104                       	smpsAlterNote       $04
00090B20 01                         	dc.b	$01
00090B21 E100                       	smpsAlterNote       $00
00090B23 01                         	dc.b	$01
00090B24 E1FA                       	smpsAlterNote       $FA
00090B26 01                         	dc.b	$01
00090B27 E1FD                       	smpsAlterNote       $FD
00090B29 ECF5                       	smpsPSGAlterVol     $F5
00090B2B 9206                       	dc.b	nF1, $06
00090B2D EC04                       	smpsPSGAlterVol     $04
00090B2F E701                       	dc.b	smpsNoAttack, $01
00090B31 EC07                       	smpsPSGAlterVol     $07
00090B33 8003                       	dc.b	nRst, $03
00090B35 ECF5                       	smpsPSGAlterVol     $F5
00090B37 9107                       	dc.b	nE1, $07
00090B39 EC0B                       	smpsPSGAlterVol     $0B
00090B3B 8006                       	dc.b	nRst, $06
00090B3D E100                       	smpsAlterNote       $00
00090B3F 01                         	dc.b	$01
00090B40 E103                       	smpsAlterNote       $03
00090B42 0101                       	dc.b	$01, $01
00090B44 E1FD                       	smpsAlterNote       $FD
00090B46 01                         	dc.b	$01
00090B47 ECF5                       	smpsPSGAlterVol     $F5
00090B49 9207                       	dc.b	nF1, $07
00090B4B EC0B                       	smpsPSGAlterVol     $0B
00090B4D 8004                       	dc.b	nRst, $04
00090B4F ECF5                       	smpsPSGAlterVol     $F5
00090B51 9206                       	dc.b	nF1, $06
00090B53 EC04                       	smpsPSGAlterVol     $04
00090B55 E701                       	dc.b	smpsNoAttack, $01
00090B57 EC07                       	smpsPSGAlterVol     $07
00090B59 8006                       	dc.b	nRst, $06
00090B5B E103                       	smpsAlterNote       $03
00090B5D 01                         	dc.b	$01
00090B5E E104                       	smpsAlterNote       $04
00090B60 01                         	dc.b	$01
00090B61 E100                       	smpsAlterNote       $00
00090B63 01                         	dc.b	$01
00090B64 E1FB                       	smpsAlterNote       $FB
00090B66 01                         	dc.b	$01
00090B67 E1FD                       	smpsAlterNote       $FD
00090B69 ECF5                       	smpsPSGAlterVol     $F5
00090B6B 9406                       	dc.b	nG1, $06
00090B6D EC04                       	smpsPSGAlterVol     $04
00090B6F E701                       	dc.b	smpsNoAttack, $01
00090B71 EC07                       	smpsPSGAlterVol     $07
00090B73 8003                       	dc.b	nRst, $03
00090B75 ECF5                       	smpsPSGAlterVol     $F5
00090B77 9406                       	dc.b	nG1, $06
00090B79 EC04                       	smpsPSGAlterVol     $04
00090B7B E701                       	dc.b	smpsNoAttack, $01
00090B7D EC07                       	smpsPSGAlterVol     $07
00090B7F 8006                       	dc.b	nRst, $06
00090B81 E100                       	smpsAlterNote       $00
00090B83 01                         	dc.b	$01
00090B84 E104                       	smpsAlterNote       $04
00090B86 01                         	dc.b	$01
00090B87 E100                       	smpsAlterNote       $00
00090B89 01                         	dc.b	$01
00090B8A E1FD                       	smpsAlterNote       $FD
00090B8C 01                         	dc.b	$01
00090B8D ECF5                       	smpsPSGAlterVol     $F5
00090B8F 9206                       	dc.b	nF1, $06
00090B91 EC04                       	smpsPSGAlterVol     $04
00090B93 E701                       	dc.b	smpsNoAttack, $01
00090B95 EC07                       	smpsPSGAlterVol     $07
00090B97 8003                       	dc.b	nRst, $03
00090B99 ECF5                       	smpsPSGAlterVol     $F5
00090B9B 9207                       	dc.b	nF1, $07
00090B9D EC0B                       	smpsPSGAlterVol     $0B
00090B9F 8007                       	dc.b	nRst, $07
00090BA1 E103                       	smpsAlterNote       $03
00090BA3 0101                       	dc.b	$01, $01
00090BA5 E1FD                       	smpsAlterNote       $FD
00090BA7 01                         	dc.b	$01
00090BA8 E1FA                       	smpsAlterNote       $FA
00090BAA 01                         	dc.b	$01
00090BAB E1FD                       	smpsAlterNote       $FD
00090BAD ECF5                       	smpsPSGAlterVol     $F5
00090BAF 9206                       	dc.b	nF1, $06
00090BB1 EC0B                       	smpsPSGAlterVol     $0B
00090BB3 8004                       	dc.b	nRst, $04
00090BB5 ECF5                       	smpsPSGAlterVol     $F5
00090BB7 9206                       	dc.b	nF1, $06
00090BB9 EC04                       	smpsPSGAlterVol     $04
00090BBB E701                       	dc.b	smpsNoAttack, $01
00090BBD EC07                       	smpsPSGAlterVol     $07
00090BBF 8006                       	dc.b	nRst, $06
00090BC1 E100                       	smpsAlterNote       $00
00090BC3 01                         	dc.b	$01
00090BC4 E104                       	smpsAlterNote       $04
00090BC6 01                         	dc.b	$01
00090BC7 E100                       	smpsAlterNote       $00
00090BC9 01                         	dc.b	$01
00090BCA E1FA                       	smpsAlterNote       $FA
00090BCC 01                         	dc.b	$01
00090BCD E1FD                       	smpsAlterNote       $FD
00090BCF ECF5                       	smpsPSGAlterVol     $F5
00090BD1 9206                       	dc.b	nF1, $06
00090BD3 EC04                       	smpsPSGAlterVol     $04
00090BD5 E701                       	dc.b	smpsNoAttack, $01
00090BD7 EC07                       	smpsPSGAlterVol     $07
00090BD9 8003                       	dc.b	nRst, $03
00090BDB ECF5                       	smpsPSGAlterVol     $F5
00090BDD 9207                       	dc.b	nF1, $07
00090BDF EC0B                       	smpsPSGAlterVol     $0B
00090BE1 8006                       	dc.b	nRst, $06
00090BE3 E100                       	smpsAlterNote       $00
00090BE5 01                         	dc.b	$01
00090BE6 E103                       	smpsAlterNote       $03
00090BE8 0101                       	dc.b	$01, $01
00090BEA E1FD                       	smpsAlterNote       $FD
00090BEC 01                         	dc.b	$01
00090BED ECF5                       	smpsPSGAlterVol     $F5
00090BEF 9207                       	dc.b	nF1, $07
00090BF1 EC0B                       	smpsPSGAlterVol     $0B
00090BF3 8004                       	dc.b	nRst, $04
00090BF5 ECF5                       	smpsPSGAlterVol     $F5
00090BF7 9206                       	dc.b	nF1, $06
00090BF9 EC0B                       	smpsPSGAlterVol     $0B
00090BFB 8007                       	dc.b	nRst, $07
00090BFD E103                       	smpsAlterNote       $03
00090BFF 0101                       	dc.b	$01, $01
00090C01 E100                       	smpsAlterNote       $00
00090C03 01                         	dc.b	$01
00090C04 E1FA                       	smpsAlterNote       $FA
00090C06 01                         	dc.b	$01
00090C07 E1FD                       	smpsAlterNote       $FD
00090C09 ECF5                       	smpsPSGAlterVol     $F5
00090C0B 9206                       	dc.b	nF1, $06
00090C0D EC04                       	smpsPSGAlterVol     $04
00090C0F E701                       	dc.b	smpsNoAttack, $01
00090C11 EC07                       	smpsPSGAlterVol     $07
00090C13 8003                       	dc.b	nRst, $03
00090C15 ECF5                       	smpsPSGAlterVol     $F5
00090C17 9206                       	dc.b	nF1, $06
00090C19 EC04                       	smpsPSGAlterVol     $04
00090C1B E701                       	dc.b	smpsNoAttack, $01
00090C1D EC07                       	smpsPSGAlterVol     $07
00090C1F 8006                       	dc.b	nRst, $06
00090C21 E100                       	smpsAlterNote       $00
00090C23 01                         	dc.b	$01
00090C24 E104                       	smpsAlterNote       $04
00090C26 01                         	dc.b	$01
00090C27 E100                       	smpsAlterNote       $00
00090C29 01                         	dc.b	$01
00090C2A E1FD                       	smpsAlterNote       $FD
00090C2C 01                         	dc.b	$01
00090C2D ECF5                       	smpsPSGAlterVol     $F5
00090C2F 9206                       	dc.b	nF1, $06
00090C31 EC04                       	smpsPSGAlterVol     $04
00090C33 E701                       	dc.b	smpsNoAttack, $01
00090C35 EC07                       	smpsPSGAlterVol     $07
00090C37 8003                       	dc.b	nRst, $03
00090C39 ECF5                       	smpsPSGAlterVol     $F5
00090C3B 9207                       	dc.b	nF1, $07
00090C3D EC0B                       	smpsPSGAlterVol     $0B
00090C3F 8007                       	dc.b	nRst, $07
00090C41 E104                       	smpsAlterNote       $04
00090C43 0101                       	dc.b	$01, $01
00090C45 E1FB                       	smpsAlterNote       $FB
00090C47 01                         	dc.b	$01
00090C48 E1F6                       	smpsAlterNote       $F6
00090C4A 0101                       	dc.b	$01, $01
00090C4C E1FF                       	smpsAlterNote       $FF
00090C4E 01                         	dc.b	$01
00090C4F E105                       	smpsAlterNote       $05
00090C51 01                         	dc.b	$01
00090C52 E104                       	smpsAlterNote       $04
00090C54 01                         	dc.b	$01
00090C55 E1FB                       	smpsAlterNote       $FB
00090C57 01                         	dc.b	$01
00090C58 E1F5                       	smpsAlterNote       $F5
00090C5A 01                         	dc.b	$01
00090C5B E1FC                       	smpsAlterNote       $FC
00090C5D ECF5                       	smpsPSGAlterVol     $F5
00090C5F 8B0E                       	dc.b	nBb0, $0E
00090C61 E102                       	smpsAlterNote       $02
00090C63 EC0B                       	smpsPSGAlterVol     $0B
00090C65 8001                       	dc.b	nRst, $01
00090C67 E101                       	smpsAlterNote       $01
00090C69 01                         	dc.b	$01
00090C6A E1FC                       	smpsAlterNote       $FC
00090C6C 01                         	dc.b	$01
00090C6D E1F9                       	smpsAlterNote       $F9
00090C6F 0101                       	dc.b	$01, $01
00090C71 E1FF                       	smpsAlterNote       $FF
00090C73 01                         	dc.b	$01
00090C74 E102                       	smpsAlterNote       $02
00090C76 01                         	dc.b	$01
00090C77 E1FF                       	smpsAlterNote       $FF
00090C79 01                         	dc.b	$01
00090C7A E1FC                       	smpsAlterNote       $FC
00090C7C 01                         	dc.b	$01
00090C7D E1F8                       	smpsAlterNote       $F8
00090C7F 01                         	dc.b	$01
00090C80 E1FC                       	smpsAlterNote       $FC
00090C82 01                         	dc.b	$01
00090C83 E101                       	smpsAlterNote       $01
00090C85 01                         	dc.b	$01
00090C86 E102                       	smpsAlterNote       $02
00090C88 01                         	dc.b	$01
00090C89 E1FF                       	smpsAlterNote       $FF
00090C8B 01                         	dc.b	$01
00090C8C E1FB                       	smpsAlterNote       $FB
00090C8E ECF5                       	smpsPSGAlterVol     $F5
00090C90 8D0D                       	dc.b	nC1, $0D
00090C92 E101                       	smpsAlterNote       $01
00090C94 EC0B                       	smpsPSGAlterVol     $0B
00090C96 8001                       	dc.b	nRst, $01
00090C98 E102                       	smpsAlterNote       $02
00090C9A 01                         	dc.b	$01
00090C9B E1FF                       	smpsAlterNote       $FF
00090C9D 01                         	dc.b	$01
00090C9E E1F9                       	smpsAlterNote       $F9
00090CA0 0101                       	dc.b	$01, $01
00090CA2 E1FC                       	smpsAlterNote       $FC
00090CA4 01                         	dc.b	$01
00090CA5 E101                       	smpsAlterNote       $01
00090CA7 0101                       	dc.b	$01, $01
00090CA9 E1FC                       	smpsAlterNote       $FC
00090CAB 01                         	dc.b	$01
00090CAC E1F9                       	smpsAlterNote       $F9
00090CAE 0101                       	dc.b	$01, $01
00090CB0 E1FF                       	smpsAlterNote       $FF
00090CB2 01                         	dc.b	$01
00090CB3 E102                       	smpsAlterNote       $02
00090CB5 01                         	dc.b	$01
00090CB6 E101                       	smpsAlterNote       $01
00090CB8 01                         	dc.b	$01
00090CB9 E1FC                       	smpsAlterNote       $FC
00090CBB ECF5                       	smpsPSGAlterVol     $F5
00090CBD 8F0D                       	dc.b	nD1, $0D
00090CBF E1FF                       	smpsAlterNote       $FF
00090CC1 EC04                       	smpsPSGAlterVol     $04
00090CC3 E701                       	dc.b	smpsNoAttack, $01
00090CC5 EC07                       	smpsPSGAlterVol     $07
00090CC7 E103                       	smpsAlterNote       $03
00090CC9 8001                       	dc.b	nRst, $01
00090CCB E102                       	smpsAlterNote       $02
00090CCD 01                         	dc.b	$01
00090CCE E1FD                       	smpsAlterNote       $FD
00090CD0 01                         	dc.b	$01
00090CD1 E1F9                       	smpsAlterNote       $F9
00090CD3 01                         	dc.b	$01
00090CD4 E1FD                       	smpsAlterNote       $FD
00090CD6 01                         	dc.b	$01
00090CD7 E100                       	smpsAlterNote       $00
00090CD9 01                         	dc.b	$01
00090CDA E103                       	smpsAlterNote       $03
00090CDC 01                         	dc.b	$01
00090CDD E100                       	smpsAlterNote       $00
00090CDF 01                         	dc.b	$01
00090CE0 E1FA                       	smpsAlterNote       $FA
00090CE2 01                         	dc.b	$01
00090CE3 E1F9                       	smpsAlterNote       $F9
00090CE5 01                         	dc.b	$01
00090CE6 E1FD                       	smpsAlterNote       $FD
00090CE8 01                         	dc.b	$01
00090CE9 E102                       	smpsAlterNote       $02
00090CEB 0101                       	dc.b	$01, $01
00090CED E100                       	smpsAlterNote       $00
00090CEF 01                         	dc.b	$01
00090CF0 E1FD                       	smpsAlterNote       $FD
00090CF2 ECF5                       	smpsPSGAlterVol     $F5
00090CF4 910D                       	dc.b	nE1, $0D
00090CF6 E103                       	smpsAlterNote       $03
00090CF8 EC0B                       	smpsPSGAlterVol     $0B
00090CFA 8001 01                    	dc.b	nRst, $01, $01
00090CFD E100                       	smpsAlterNote       $00
00090CFF 01                         	dc.b	$01
00090D00 E1FA                       	smpsAlterNote       $FA
00090D02 0101                       	dc.b	$01, $01
00090D04 E100                       	smpsAlterNote       $00
00090D06 01                         	dc.b	$01
00090D07 E103                       	smpsAlterNote       $03
00090D09 01                         	dc.b	$01
00090D0A E1FD                       	smpsAlterNote       $FD
00090D0C ECF5                       	smpsPSGAlterVol     $F5
00090D0E 9206                       	dc.b	nF1, $06
00090D10 EC04                       	smpsPSGAlterVol     $04
00090D12 E701                       	dc.b	smpsNoAttack, $01
00090D14 EC07                       	smpsPSGAlterVol     $07
00090D16 8003                       	dc.b	nRst, $03
00090D18 ECF5                       	smpsPSGAlterVol     $F5
00090D1A 9207                       	dc.b	nF1, $07
00090D1C EC0B                       	smpsPSGAlterVol     $0B
00090D1E 8006                       	dc.b	nRst, $06
00090D20 E100                       	smpsAlterNote       $00
00090D22 01                         	dc.b	$01
00090D23 E103                       	smpsAlterNote       $03
00090D25 0101                       	dc.b	$01, $01
00090D27 E1FD                       	smpsAlterNote       $FD
00090D29 01                         	dc.b	$01
00090D2A ECF5                       	smpsPSGAlterVol     $F5
00090D2C 9407                       	dc.b	nG1, $07
00090D2E EC0B                       	smpsPSGAlterVol     $0B
00090D30 8004                       	dc.b	nRst, $04
00090D32 ECF5                       	smpsPSGAlterVol     $F5
00090D34 9406                       	dc.b	nG1, $06
00090D36 EC04                       	smpsPSGAlterVol     $04
00090D38 E701                       	dc.b	smpsNoAttack, $01
00090D3A EC07                       	smpsPSGAlterVol     $07
00090D3C 8006                       	dc.b	nRst, $06
00090D3E E103                       	smpsAlterNote       $03
00090D40 01                         	dc.b	$01
00090D41 E104                       	smpsAlterNote       $04
00090D43 01                         	dc.b	$01
00090D44 E100                       	smpsAlterNote       $00
00090D46 01                         	dc.b	$01
00090D47 E1F9                       	smpsAlterNote       $F9
00090D49 01                         	dc.b	$01
00090D4A E1FD                       	smpsAlterNote       $FD
00090D4C ECF5                       	smpsPSGAlterVol     $F5
00090D4E 9206                       	dc.b	nF1, $06
00090D50 EC04                       	smpsPSGAlterVol     $04
00090D52 E701                       	dc.b	smpsNoAttack, $01
00090D54 EC07                       	smpsPSGAlterVol     $07
00090D56 8003                       	dc.b	nRst, $03
00090D58 ECF5                       	smpsPSGAlterVol     $F5
00090D5A 9206                       	dc.b	nF1, $06
00090D5C EC04                       	smpsPSGAlterVol     $04
00090D5E E701                       	dc.b	smpsNoAttack, $01
00090D60 EC07                       	smpsPSGAlterVol     $07
00090D62 8006                       	dc.b	nRst, $06
00090D64 E100                       	smpsAlterNote       $00
00090D66 01                         	dc.b	$01
00090D67 E104                       	smpsAlterNote       $04
00090D69 01                         	dc.b	$01
00090D6A E103                       	smpsAlterNote       $03
00090D6C 01                         	dc.b	$01
00090D6D E1FD                       	smpsAlterNote       $FD
00090D6F 01                         	dc.b	$01
00090D70 ECF5                       	smpsPSGAlterVol     $F5
00090D72 9407                       	dc.b	nG1, $07
00090D74 EC0B                       	smpsPSGAlterVol     $0B
00090D76 8004                       	dc.b	nRst, $04
00090D78 ECF5                       	smpsPSGAlterVol     $F5
00090D7A 9406                       	dc.b	nG1, $06
00090D7C EC0B                       	smpsPSGAlterVol     $0B
00090D7E 8007                       	dc.b	nRst, $07
00090D80 E103                       	smpsAlterNote       $03
00090D82 0101                       	dc.b	$01, $01
00090D84 E100                       	smpsAlterNote       $00
00090D86 01                         	dc.b	$01
00090D87 E1F9                       	smpsAlterNote       $F9
00090D89 01                         	dc.b	$01
00090D8A E1FD                       	smpsAlterNote       $FD
00090D8C ECF5                       	smpsPSGAlterVol     $F5
00090D8E 9206                       	dc.b	nF1, $06
00090D90 EC04                       	smpsPSGAlterVol     $04
00090D92 E701                       	dc.b	smpsNoAttack, $01
00090D94 EC07                       	smpsPSGAlterVol     $07
00090D96 8003                       	dc.b	nRst, $03
00090D98 ECF5                       	smpsPSGAlterVol     $F5
00090D9A 9206                       	dc.b	nF1, $06
00090D9C EC04                       	smpsPSGAlterVol     $04
00090D9E E701                       	dc.b	smpsNoAttack, $01
00090DA0 EC07                       	smpsPSGAlterVol     $07
00090DA2 8006                       	dc.b	nRst, $06
00090DA4 E100                       	smpsAlterNote       $00
00090DA6 01                         	dc.b	$01
00090DA7 E104                       	smpsAlterNote       $04
00090DA9 01                         	dc.b	$01
00090DAA E100                       	smpsAlterNote       $00
00090DAC 01                         	dc.b	$01
00090DAD E1FB                       	smpsAlterNote       $FB
00090DAF 01                         	dc.b	$01
00090DB0 E1FD                       	smpsAlterNote       $FD
00090DB2 ECF5                       	smpsPSGAlterVol     $F5
00090DB4 9406                       	dc.b	nG1, $06
00090DB6 EC04                       	smpsPSGAlterVol     $04
00090DB8 E701                       	dc.b	smpsNoAttack, $01
00090DBA EC07                       	smpsPSGAlterVol     $07
00090DBC 8003                       	dc.b	nRst, $03
00090DBE ECF5                       	smpsPSGAlterVol     $F5
00090DC0 9407                       	dc.b	nG1, $07
00090DC2 EC0B                       	smpsPSGAlterVol     $0B
00090DC4 8006                       	dc.b	nRst, $06
00090DC6 E100                       	smpsAlterNote       $00
00090DC8 01                         	dc.b	$01
00090DC9 E103                       	smpsAlterNote       $03
00090DCB 0101                       	dc.b	$01, $01
00090DCD E1FD                       	smpsAlterNote       $FD
00090DCF 01                         	dc.b	$01
00090DD0 ECF5                       	smpsPSGAlterVol     $F5
00090DD2 9207                       	dc.b	nF1, $07
00090DD4 EC0B                       	smpsPSGAlterVol     $0B
00090DD6 8004                       	dc.b	nRst, $04
00090DD8 ECF5                       	smpsPSGAlterVol     $F5
00090DDA 9206                       	dc.b	nF1, $06
00090DDC EC04                       	smpsPSGAlterVol     $04
00090DDE E701                       	dc.b	smpsNoAttack, $01
00090DE0 ECFC                       	smpsPSGAlterVol     $FC
00090DE2 E1FC                       	smpsAlterNote       $FC
00090DE4 9006 8B03                  	dc.b	nEb1, $06, nBb0, $03
00090DE8 EC04                       	smpsPSGAlterVol     $04
00090DEA E701                       	dc.b	smpsNoAttack, $01
00090DEC ECFC                       	smpsPSGAlterVol     $FC
00090DEE 9003                       	dc.b	nEb1, $03
00090DF0 E1FD                       	smpsAlterNote       $FD
00090DF2 9403                       	dc.b	nG1, $03
00090DF4 EC04                       	smpsPSGAlterVol     $04
00090DF6 E701                       	dc.b	smpsNoAttack, $01
00090DF8 E1FE                       	smpsAlterNote       $FE
00090DFA ECFC                       	smpsPSGAlterVol     $FC
00090DFC 9703 9703                  	dc.b	nBb1, $03, nBb1, $03
00090E00 EC04                       	smpsPSGAlterVol     $04
00090E02 E701                       	dc.b	smpsNoAttack, $01
00090E04 EC07                       	smpsPSGAlterVol     $07
00090E06 8009                       	dc.b	nRst, $09
00090E08 E100                       	smpsAlterNote       $00
00090E0A 01                         	dc.b	$01
00090E0B F6F5 19                    	smpsJump            music84_Jump07
00090E0E                            
00090E0E                            ; PSG2 Data
00090E0E                            music84_PSG2:
00090E0E E1FC                       	smpsAlterNote       $FC
00090E10 EC04                       	smpsPSGAlterVol     $04
00090E12 8F03                       	dc.b	nD1, $03
00090E14 E1FD                       	smpsAlterNote       $FD
00090E16 9203                       	dc.b	nF1, $03
00090E18 EC04                       	smpsPSGAlterVol     $04
00090E1A E701                       	dc.b	smpsNoAttack, $01
00090E1C E1FE                       	smpsAlterNote       $FE
00090E1E ECFC                       	smpsPSGAlterVol     $FC
00090E20 9603                       	dc.b	nA1, $03
00090E22 E1FD                       	smpsAlterNote       $FD
00090E24 9103                       	dc.b	nE1, $03
00090E26 EC04                       	smpsPSGAlterVol     $04
00090E28 E701                       	dc.b	smpsNoAttack, $01
00090E2A ECFC                       	smpsPSGAlterVol     $FC
00090E2C 9403                       	dc.b	nG1, $03
00090E2E E1FE                       	smpsAlterNote       $FE
00090E30 9703                       	dc.b	nBb1, $03
00090E32 EC04                       	smpsPSGAlterVol     $04
00090E34 E701                       	dc.b	smpsNoAttack, $01
00090E36 E1FF                       	smpsAlterNote       $FF
00090E38 ECFC                       	smpsPSGAlterVol     $FC
00090E3A 9B02                       	dc.b	nD2, $02
00090E3C EC04                       	smpsPSGAlterVol     $04
00090E3E E701                       	dc.b	smpsNoAttack, $01
00090E40 ECFC                       	smpsPSGAlterVol     $FC
00090E42 E1FE                       	smpsAlterNote       $FE
00090E44 9A03                       	dc.b	nCs2, $03
00090E46 EC0B                       	smpsPSGAlterVol     $0B
00090E48 800A                       	dc.b	nRst, $0A
00090E4A E102                       	smpsAlterNote       $02
00090E4C 01                         	dc.b	$01
00090E4D E10A                       	smpsAlterNote       $0A
00090E4F 01                         	dc.b	$01
00090E50 E102                       	smpsAlterNote       $02
00090E52 01                         	dc.b	$01
00090E53 E1FC                       	smpsAlterNote       $FC
00090E55 01                         	dc.b	$01
00090E56 E10A                       	smpsAlterNote       $0A
00090E58 01                         	dc.b	$01
00090E59 E1FC                       	smpsAlterNote       $FC
00090E5B 01                         	dc.b	$01
00090E5C E108                       	smpsAlterNote       $08
00090E5E 01                         	dc.b	$01
00090E5F E10A                       	smpsAlterNote       $0A
00090E61 01                         	dc.b	$01
00090E62 E102                       	smpsAlterNote       $02
00090E64 01                         	dc.b	$01
00090E65 E1F7                       	smpsAlterNote       $F7
00090E67 0101                       	dc.b	$01, $01
00090E69 E102                       	smpsAlterNote       $02
00090E6B 01                         	dc.b	$01
00090E6C E108                       	smpsAlterNote       $08
00090E6E 0101                       	dc.b	$01, $01
00090E70 E1FC                       	smpsAlterNote       $FC
00090E72 01                         	dc.b	$01
00090E73 E10A                       	smpsAlterNote       $0A
00090E75 01                         	dc.b	$01
00090E76 E1F7                       	smpsAlterNote       $F7
00090E78 01                         	dc.b	$01
00090E79 E102                       	smpsAlterNote       $02
00090E7B 01                         	dc.b	$01
00090E7C E10A                       	smpsAlterNote       $0A
00090E7E 01                         	dc.b	$01
00090E7F E102                       	smpsAlterNote       $02
00090E81 01                         	dc.b	$01
00090E82 E1FC                       	smpsAlterNote       $FC
00090E84 01                         	dc.b	$01
00090E85                            
00090E85                            music84_Jump06:
00090E85 E10A                       	smpsAlterNote       $0A
00090E87 8001                       	dc.b	nRst, $01
00090E89 E1FC                       	smpsAlterNote       $FC
00090E8B 01                         	dc.b	$01
00090E8C E108                       	smpsAlterNote       $08
00090E8E 01                         	dc.b	$01
00090E8F E10A                       	smpsAlterNote       $0A
00090E91 01                         	dc.b	$01
00090E92 E1FC                       	smpsAlterNote       $FC
00090E94 ECF5                       	smpsPSGAlterVol     $F5
00090E96 8F06                       	dc.b	nD1, $06
00090E98 EC04                       	smpsPSGAlterVol     $04
00090E9A E701                       	dc.b	smpsNoAttack, $01
00090E9C EC07                       	smpsPSGAlterVol     $07
00090E9E 8003                       	dc.b	nRst, $03
00090EA0 ECF5                       	smpsPSGAlterVol     $F5
00090EA2 8F06                       	dc.b	nD1, $06
00090EA4 EC04                       	smpsPSGAlterVol     $04
00090EA6 E701                       	dc.b	smpsNoAttack, $01
00090EA8 EC07                       	smpsPSGAlterVol     $07
00090EAA 8006                       	dc.b	nRst, $06
00090EAC E1FF                       	smpsAlterNote       $FF
00090EAE 01                         	dc.b	$01
00090EAF E102                       	smpsAlterNote       $02
00090EB1 01                         	dc.b	$01
00090EB2 E1FF                       	smpsAlterNote       $FF
00090EB4 01                         	dc.b	$01
00090EB5 E1F9                       	smpsAlterNote       $F9
00090EB7 01                         	dc.b	$01
00090EB8 E1FC                       	smpsAlterNote       $FC
00090EBA ECF5                       	smpsPSGAlterVol     $F5
00090EBC 9006                       	dc.b	nEb1, $06
00090EBE EC04                       	smpsPSGAlterVol     $04
00090EC0 E701                       	dc.b	smpsNoAttack, $01
00090EC2 EC07                       	smpsPSGAlterVol     $07
00090EC4 8003                       	dc.b	nRst, $03
00090EC6 ECF5                       	smpsPSGAlterVol     $F5
00090EC8 9007                       	dc.b	nEb1, $07
00090ECA EC0B                       	smpsPSGAlterVol     $0B
00090ECC 8006                       	dc.b	nRst, $06
00090ECE E1FF                       	smpsAlterNote       $FF
00090ED0 01                         	dc.b	$01
00090ED1 E103                       	smpsAlterNote       $03
00090ED3 0101                       	dc.b	$01, $01
00090ED5 E1FC                       	smpsAlterNote       $FC
00090ED7 01                         	dc.b	$01
00090ED8 ECF5                       	smpsPSGAlterVol     $F5
00090EDA 8F07                       	dc.b	nD1, $07
00090EDC EC0B                       	smpsPSGAlterVol     $0B
00090EDE 8004                       	dc.b	nRst, $04
00090EE0 ECF5                       	smpsPSGAlterVol     $F5
00090EE2 8F06                       	dc.b	nD1, $06
00090EE4 EC04                       	smpsPSGAlterVol     $04
00090EE6 E701                       	dc.b	smpsNoAttack, $01
00090EE8 EC07                       	smpsPSGAlterVol     $07
00090EEA 8006                       	dc.b	nRst, $06
00090EEC E102                       	smpsAlterNote       $02
00090EEE 01                         	dc.b	$01
00090EEF E103                       	smpsAlterNote       $03
00090EF1 01                         	dc.b	$01
00090EF2 E1FF                       	smpsAlterNote       $FF
00090EF4 01                         	dc.b	$01
00090EF5 E1F9                       	smpsAlterNote       $F9
00090EF7 01                         	dc.b	$01
00090EF8 E1FC                       	smpsAlterNote       $FC
00090EFA ECF5                       	smpsPSGAlterVol     $F5
00090EFC 8F06                       	dc.b	nD1, $06
00090EFE EC04                       	smpsPSGAlterVol     $04
00090F00 E701                       	dc.b	smpsNoAttack, $01
00090F02 EC07                       	smpsPSGAlterVol     $07
00090F04 8003                       	dc.b	nRst, $03
00090F06 ECF5                       	smpsPSGAlterVol     $F5
00090F08 8F06                       	dc.b	nD1, $06
00090F0A EC04                       	smpsPSGAlterVol     $04
00090F0C E701                       	dc.b	smpsNoAttack, $01
00090F0E EC07                       	smpsPSGAlterVol     $07
00090F10 8006                       	dc.b	nRst, $06
00090F12 E1FF                       	smpsAlterNote       $FF
00090F14 01                         	dc.b	$01
00090F15 E103                       	smpsAlterNote       $03
00090F17 01                         	dc.b	$01
00090F18 E1FF                       	smpsAlterNote       $FF
00090F1A 01                         	dc.b	$01
00090F1B E1FC                       	smpsAlterNote       $FC
00090F1D 01                         	dc.b	$01
00090F1E ECF5                       	smpsPSGAlterVol     $F5
00090F20 8F06                       	dc.b	nD1, $06
00090F22 EC04                       	smpsPSGAlterVol     $04
00090F24 E701                       	dc.b	smpsNoAttack, $01
00090F26 EC07                       	smpsPSGAlterVol     $07
00090F28 8003                       	dc.b	nRst, $03
00090F2A ECF5                       	smpsPSGAlterVol     $F5
00090F2C 8F07                       	dc.b	nD1, $07
00090F2E EC0B                       	smpsPSGAlterVol     $0B
00090F30 8007                       	dc.b	nRst, $07
00090F32 E101                       	smpsAlterNote       $01
00090F34 0101                       	dc.b	$01, $01
00090F36 E1FC                       	smpsAlterNote       $FC
00090F38 01                         	dc.b	$01
00090F39 E1F9                       	smpsAlterNote       $F9
00090F3B 01                         	dc.b	$01
00090F3C E1FC                       	smpsAlterNote       $FC
00090F3E ECF5                       	smpsPSGAlterVol     $F5
00090F40 9006                       	dc.b	nEb1, $06
00090F42 EC0B                       	smpsPSGAlterVol     $0B
00090F44 8004                       	dc.b	nRst, $04
00090F46 ECF5                       	smpsPSGAlterVol     $F5
00090F48 9006                       	dc.b	nEb1, $06
00090F4A EC04                       	smpsPSGAlterVol     $04
00090F4C E701                       	dc.b	smpsNoAttack, $01
00090F4E EC07                       	smpsPSGAlterVol     $07
00090F50 8006                       	dc.b	nRst, $06
00090F52 E100                       	smpsAlterNote       $00
00090F54 01                         	dc.b	$01
00090F55 E102                       	smpsAlterNote       $02
00090F57 01                         	dc.b	$01
00090F58 E100                       	smpsAlterNote       $00
00090F5A 01                         	dc.b	$01
00090F5B E1FD                       	smpsAlterNote       $FD
00090F5D 01                         	dc.b	$01
00090F5E E1FF                       	smpsAlterNote       $FF
00090F60 ECF5                       	smpsPSGAlterVol     $F5
00090F62 9B06                       	dc.b	nD2, $06
00090F64 EC04                       	smpsPSGAlterVol     $04
00090F66 E701                       	dc.b	smpsNoAttack, $01
00090F68 EC07                       	smpsPSGAlterVol     $07
00090F6A 8003                       	dc.b	nRst, $03
00090F6C ECF5                       	smpsPSGAlterVol     $F5
00090F6E 9B07                       	dc.b	nD2, $07
00090F70 EC0B                       	smpsPSGAlterVol     $0B
00090F72 8006                       	dc.b	nRst, $06
00090F74 E102                       	smpsAlterNote       $02
00090F76 01                         	dc.b	$01
00090F77 E106                       	smpsAlterNote       $06
00090F79 01                         	dc.b	$01
00090F7A E105                       	smpsAlterNote       $05
00090F7C 01                         	dc.b	$01
00090F7D E1FF                       	smpsAlterNote       $FF
00090F7F 01                         	dc.b	$01
00090F80 ECF5                       	smpsPSGAlterVol     $F5
00090F82 9B07                       	dc.b	nD2, $07
00090F84 EC0B                       	smpsPSGAlterVol     $0B
00090F86 8004                       	dc.b	nRst, $04
00090F88 ECF5                       	smpsPSGAlterVol     $F5
00090F8A 9B06                       	dc.b	nD2, $06
00090F8C EC0B                       	smpsPSGAlterVol     $0B
00090F8E 8007                       	dc.b	nRst, $07
00090F90 E105                       	smpsAlterNote       $05
00090F92 0101                       	dc.b	$01, $01
00090F94 E102                       	smpsAlterNote       $02
00090F96 01                         	dc.b	$01
00090F97 E1FC                       	smpsAlterNote       $FC
00090F99 01                         	dc.b	$01
00090F9A E1FF                       	smpsAlterNote       $FF
00090F9C ECF5                       	smpsPSGAlterVol     $F5
00090F9E 9B06                       	dc.b	nD2, $06
00090FA0 EC04                       	smpsPSGAlterVol     $04
00090FA2 E701                       	dc.b	smpsNoAttack, $01
00090FA4 EC07                       	smpsPSGAlterVol     $07
00090FA6 8003                       	dc.b	nRst, $03
00090FA8 ECF5                       	smpsPSGAlterVol     $F5
00090FAA 9B06                       	dc.b	nD2, $06
00090FAC EC04                       	smpsPSGAlterVol     $04
00090FAE E701                       	dc.b	smpsNoAttack, $01
00090FB0 EC07                       	smpsPSGAlterVol     $07
00090FB2 8006                       	dc.b	nRst, $06
00090FB4 E102                       	smpsAlterNote       $02
00090FB6 01                         	dc.b	$01
00090FB7 E106                       	smpsAlterNote       $06
00090FB9 01                         	dc.b	$01
00090FBA E102                       	smpsAlterNote       $02
00090FBC 01                         	dc.b	$01
00090FBD E1FF                       	smpsAlterNote       $FF
00090FBF 01                         	dc.b	$01
00090FC0 ECF5                       	smpsPSGAlterVol     $F5
00090FC2 9B06                       	dc.b	nD2, $06
00090FC4 EC04                       	smpsPSGAlterVol     $04
00090FC6 E701                       	dc.b	smpsNoAttack, $01
00090FC8 EC07                       	smpsPSGAlterVol     $07
00090FCA 8003                       	dc.b	nRst, $03
00090FCC ECF5                       	smpsPSGAlterVol     $F5
00090FCE 9B07                       	dc.b	nD2, $07
00090FD0 EC0B                       	smpsPSGAlterVol     $0B
00090FD2 8007                       	dc.b	nRst, $07
00090FD4 E105                       	smpsAlterNote       $05
00090FD6 0101                       	dc.b	$01, $01
00090FD8 E1FF                       	smpsAlterNote       $FF
00090FDA 01                         	dc.b	$01
00090FDB E1FC                       	smpsAlterNote       $FC
00090FDD 01                         	dc.b	$01
00090FDE E1FF                       	smpsAlterNote       $FF
00090FE0 ECF5                       	smpsPSGAlterVol     $F5
00090FE2 9B06                       	dc.b	nD2, $06
00090FE4 EC0B                       	smpsPSGAlterVol     $0B
00090FE6 8004                       	dc.b	nRst, $04
00090FE8 ECF5                       	smpsPSGAlterVol     $F5
00090FEA 9B06                       	dc.b	nD2, $06
00090FEC EC04                       	smpsPSGAlterVol     $04
00090FEE E701                       	dc.b	smpsNoAttack, $01
00090FF0 EC07                       	smpsPSGAlterVol     $07
00090FF2 8006                       	dc.b	nRst, $06
00090FF4 E105                       	smpsAlterNote       $05
00090FF6 01                         	dc.b	$01
00090FF7 E106                       	smpsAlterNote       $06
00090FF9 01                         	dc.b	$01
00090FFA E102                       	smpsAlterNote       $02
00090FFC 01                         	dc.b	$01
00090FFD E1FC                       	smpsAlterNote       $FC
00090FFF 01                         	dc.b	$01
00091000 E1FF                       	smpsAlterNote       $FF
00091002 ECF5                       	smpsPSGAlterVol     $F5
00091004 9B06                       	dc.b	nD2, $06
00091006 EC04                       	smpsPSGAlterVol     $04
00091008 E701                       	dc.b	smpsNoAttack, $01
0009100A EC07                       	smpsPSGAlterVol     $07
0009100C 8003                       	dc.b	nRst, $03
0009100E ECF5                       	smpsPSGAlterVol     $F5
00091010 9B06                       	dc.b	nD2, $06
00091012 EC04                       	smpsPSGAlterVol     $04
00091014 E701                       	dc.b	smpsNoAttack, $01
00091016 EC07                       	smpsPSGAlterVol     $07
00091018 8006                       	dc.b	nRst, $06
0009101A E102                       	smpsAlterNote       $02
0009101C 01                         	dc.b	$01
0009101D E106                       	smpsAlterNote       $06
0009101F 01                         	dc.b	$01
00091020 E105                       	smpsAlterNote       $05
00091022 01                         	dc.b	$01
00091023 E1FF                       	smpsAlterNote       $FF
00091025 01                         	dc.b	$01
00091026 ECF5                       	smpsPSGAlterVol     $F5
00091028 9B07                       	dc.b	nD2, $07
0009102A EC0B                       	smpsPSGAlterVol     $0B
0009102C 8004                       	dc.b	nRst, $04
0009102E ECF5                       	smpsPSGAlterVol     $F5
00091030 9B06                       	dc.b	nD2, $06
00091032 EC0B                       	smpsPSGAlterVol     $0B
00091034 8007                       	dc.b	nRst, $07
00091036 E105                       	smpsAlterNote       $05
00091038 0101                       	dc.b	$01, $01
0009103A E102                       	smpsAlterNote       $02
0009103C 01                         	dc.b	$01
0009103D E1FC                       	smpsAlterNote       $FC
0009103F 01                         	dc.b	$01
00091040 E1FF                       	smpsAlterNote       $FF
00091042 ECF5                       	smpsPSGAlterVol     $F5
00091044 9B06                       	dc.b	nD2, $06
00091046 EC04                       	smpsPSGAlterVol     $04
00091048 E701                       	dc.b	smpsNoAttack, $01
0009104A EC07                       	smpsPSGAlterVol     $07
0009104C 8003                       	dc.b	nRst, $03
0009104E ECF5                       	smpsPSGAlterVol     $F5
00091050 9B06                       	dc.b	nD2, $06
00091052 EC04                       	smpsPSGAlterVol     $04
00091054 E701                       	dc.b	smpsNoAttack, $01
00091056 EC07                       	smpsPSGAlterVol     $07
00091058 8006                       	dc.b	nRst, $06
0009105A E102                       	smpsAlterNote       $02
0009105C 01                         	dc.b	$01
0009105D E106                       	smpsAlterNote       $06
0009105F 01                         	dc.b	$01
00091060 E102                       	smpsAlterNote       $02
00091062 01                         	dc.b	$01
00091063 E1FF                       	smpsAlterNote       $FF
00091065 01                         	dc.b	$01
00091066 ECF5                       	smpsPSGAlterVol     $F5
00091068 9B06                       	dc.b	nD2, $06
0009106A EC04                       	smpsPSGAlterVol     $04
0009106C E701                       	dc.b	smpsNoAttack, $01
0009106E EC07                       	smpsPSGAlterVol     $07
00091070 8003                       	dc.b	nRst, $03
00091072 ECF5                       	smpsPSGAlterVol     $F5
00091074 9B07                       	dc.b	nD2, $07
00091076 E1FE                       	smpsAlterNote       $FE
00091078 9706                       	dc.b	nBb1, $06
0009107A EC04                       	smpsPSGAlterVol     $04
0009107C E701                       	dc.b	smpsNoAttack, $01
0009107E ECFC                       	smpsPSGAlterVol     $FC
00091080 9703                       	dc.b	nBb1, $03
00091082 EC04                       	smpsPSGAlterVol     $04
00091084 E701                       	dc.b	smpsNoAttack, $01
00091086 ECFC                       	smpsPSGAlterVol     $FC
00091088 9702                       	dc.b	nBb1, $02
0009108A EC04                       	smpsPSGAlterVol     $04
0009108C E701                       	dc.b	smpsNoAttack, $01
0009108E ECFC                       	smpsPSGAlterVol     $FC
00091090 9606                       	dc.b	nA1, $06
00091092 EC04                       	smpsPSGAlterVol     $04
00091094 E701                       	dc.b	smpsNoAttack, $01
00091096 EC07                       	smpsPSGAlterVol     $07
00091098 8006                       	dc.b	nRst, $06
0009109A E101                       	smpsAlterNote       $01
0009109C 01                         	dc.b	$01
0009109D E107                       	smpsAlterNote       $07
0009109F 01                         	dc.b	$01
000910A0 E101                       	smpsAlterNote       $01
000910A2 01                         	dc.b	$01
000910A3 E1F8                       	smpsAlterNote       $F8
000910A5 01                         	dc.b	$01
000910A6 E1F7                       	smpsAlterNote       $F7
000910A8 01                         	dc.b	$01
000910A9 E1FC                       	smpsAlterNote       $FC
000910AB 01                         	dc.b	$01
000910AC E106                       	smpsAlterNote       $06
000910AE 01                         	dc.b	$01
000910AF E107                       	smpsAlterNote       $07
000910B1 01                         	dc.b	$01
000910B2 E101                       	smpsAlterNote       $01
000910B4 01                         	dc.b	$01
000910B5 E1F8                       	smpsAlterNote       $F8
000910B7 0101                       	dc.b	$01, $01
000910B9 E1FC                       	smpsAlterNote       $FC
000910BB ECF5                       	smpsPSGAlterVol     $F5
000910BD 8F06                       	dc.b	nD1, $06
000910BF EC04                       	smpsPSGAlterVol     $04
000910C1 E701                       	dc.b	smpsNoAttack, $01
000910C3 EC07                       	smpsPSGAlterVol     $07
000910C5 8003                       	dc.b	nRst, $03
000910C7 ECF5                       	smpsPSGAlterVol     $F5
000910C9 8F06                       	dc.b	nD1, $06
000910CB EC04                       	smpsPSGAlterVol     $04
000910CD E701                       	dc.b	smpsNoAttack, $01
000910CF EC07                       	smpsPSGAlterVol     $07
000910D1 8006                       	dc.b	nRst, $06
000910D3 E1FF                       	smpsAlterNote       $FF
000910D5 01                         	dc.b	$01
000910D6 E102                       	smpsAlterNote       $02
000910D8 01                         	dc.b	$01
000910D9 E101                       	smpsAlterNote       $01
000910DB 01                         	dc.b	$01
000910DC E1FC                       	smpsAlterNote       $FC
000910DE 01                         	dc.b	$01
000910DF ECF5                       	smpsPSGAlterVol     $F5
000910E1 9007                       	dc.b	nEb1, $07
000910E3 EC0B                       	smpsPSGAlterVol     $0B
000910E5 8004                       	dc.b	nRst, $04
000910E7 ECF5                       	smpsPSGAlterVol     $F5
000910E9 9006                       	dc.b	nEb1, $06
000910EB EC0B                       	smpsPSGAlterVol     $0B
000910ED 8007                       	dc.b	nRst, $07
000910EF E103                       	smpsAlterNote       $03
000910F1 0101                       	dc.b	$01, $01
000910F3 E1FC                       	smpsAlterNote       $FC
000910F5 01                         	dc.b	$01
000910F6 E1F9                       	smpsAlterNote       $F9
000910F8 01                         	dc.b	$01
000910F9 E1FC                       	smpsAlterNote       $FC
000910FB ECF5                       	smpsPSGAlterVol     $F5
000910FD 8F06                       	dc.b	nD1, $06
000910FF EC04                       	smpsPSGAlterVol     $04
00091101 E701                       	dc.b	smpsNoAttack, $01
00091103 EC07                       	smpsPSGAlterVol     $07
00091105 8003                       	dc.b	nRst, $03
00091107 ECF5                       	smpsPSGAlterVol     $F5
00091109 8F06                       	dc.b	nD1, $06
0009110B EC04                       	smpsPSGAlterVol     $04
0009110D E701                       	dc.b	smpsNoAttack, $01
0009110F EC07                       	smpsPSGAlterVol     $07
00091111 8006                       	dc.b	nRst, $06
00091113 E1FF                       	smpsAlterNote       $FF
00091115 01                         	dc.b	$01
00091116 E103                       	smpsAlterNote       $03
00091118 01                         	dc.b	$01
00091119 E1FF                       	smpsAlterNote       $FF
0009111B 01                         	dc.b	$01
0009111C E1F9                       	smpsAlterNote       $F9
0009111E 01                         	dc.b	$01
0009111F E1FC                       	smpsAlterNote       $FC
00091121 ECF5                       	smpsPSGAlterVol     $F5
00091123 8F06                       	dc.b	nD1, $06
00091125 EC04                       	smpsPSGAlterVol     $04
00091127 E701                       	dc.b	smpsNoAttack, $01
00091129 EC07                       	smpsPSGAlterVol     $07
0009112B 8003                       	dc.b	nRst, $03
0009112D ECF5                       	smpsPSGAlterVol     $F5
0009112F 8F07                       	dc.b	nD1, $07
00091131 EC0B                       	smpsPSGAlterVol     $0B
00091133 8006                       	dc.b	nRst, $06
00091135 E1FF                       	smpsAlterNote       $FF
00091137 01                         	dc.b	$01
00091138 E102                       	smpsAlterNote       $02
0009113A 0101                       	dc.b	$01, $01
0009113C E1FC                       	smpsAlterNote       $FC
0009113E 01                         	dc.b	$01
0009113F ECF5                       	smpsPSGAlterVol     $F5
00091141 8F07                       	dc.b	nD1, $07
00091143 EC0B                       	smpsPSGAlterVol     $0B
00091145 8004                       	dc.b	nRst, $04
00091147 ECF5                       	smpsPSGAlterVol     $F5
00091149 8F06                       	dc.b	nD1, $06
0009114B EC04                       	smpsPSGAlterVol     $04
0009114D E701                       	dc.b	smpsNoAttack, $01
0009114F EC07                       	smpsPSGAlterVol     $07
00091151 8006                       	dc.b	nRst, $06
00091153 E101                       	smpsAlterNote       $01
00091155 01                         	dc.b	$01
00091156 E102                       	smpsAlterNote       $02
00091158 01                         	dc.b	$01
00091159 E1FF                       	smpsAlterNote       $FF
0009115B 01                         	dc.b	$01
0009115C E1F9                       	smpsAlterNote       $F9
0009115E 01                         	dc.b	$01
0009115F E1FC                       	smpsAlterNote       $FC
00091161 ECF5                       	smpsPSGAlterVol     $F5
00091163 9006                       	dc.b	nEb1, $06
00091165 EC04                       	smpsPSGAlterVol     $04
00091167 E701                       	dc.b	smpsNoAttack, $01
00091169 EC07                       	smpsPSGAlterVol     $07
0009116B 8003                       	dc.b	nRst, $03
0009116D ECF5                       	smpsPSGAlterVol     $F5
0009116F 9006                       	dc.b	nEb1, $06
00091171 EC04                       	smpsPSGAlterVol     $04
00091173 E701                       	dc.b	smpsNoAttack, $01
00091175 EC07                       	smpsPSGAlterVol     $07
00091177 8006                       	dc.b	nRst, $06
00091179 E100                       	smpsAlterNote       $00
0009117B 01                         	dc.b	$01
0009117C E102                       	smpsAlterNote       $02
0009117E 01                         	dc.b	$01
0009117F E100                       	smpsAlterNote       $00
00091181 01                         	dc.b	$01
00091182 E1FF                       	smpsAlterNote       $FF
00091184 01                         	dc.b	$01
00091185 ECF5                       	smpsPSGAlterVol     $F5
00091187 9B06                       	dc.b	nD2, $06
00091189 EC04                       	smpsPSGAlterVol     $04
0009118B E701                       	dc.b	smpsNoAttack, $01
0009118D EC07                       	smpsPSGAlterVol     $07
0009118F 8003                       	dc.b	nRst, $03
00091191 ECF5                       	smpsPSGAlterVol     $F5
00091193 9B07                       	dc.b	nD2, $07
00091195 EC0B                       	smpsPSGAlterVol     $0B
00091197 8007                       	dc.b	nRst, $07
00091199 E105                       	smpsAlterNote       $05
0009119B 0101                       	dc.b	$01, $01
0009119D E1FF                       	smpsAlterNote       $FF
0009119F 01                         	dc.b	$01
000911A0 E1FC                       	smpsAlterNote       $FC
000911A2 01                         	dc.b	$01
000911A3 E1FF                       	smpsAlterNote       $FF
000911A5 ECF5                       	smpsPSGAlterVol     $F5
000911A7 9B06                       	dc.b	nD2, $06
000911A9 EC0B                       	smpsPSGAlterVol     $0B
000911AB 8004                       	dc.b	nRst, $04
000911AD ECF5                       	smpsPSGAlterVol     $F5
000911AF 9B06                       	dc.b	nD2, $06
000911B1 EC04                       	smpsPSGAlterVol     $04
000911B3 E701                       	dc.b	smpsNoAttack, $01
000911B5 EC07                       	smpsPSGAlterVol     $07
000911B7 8006                       	dc.b	nRst, $06
000911B9 E102                       	smpsAlterNote       $02
000911BB 01                         	dc.b	$01
000911BC E106                       	smpsAlterNote       $06
000911BE 01                         	dc.b	$01
000911BF E102                       	smpsAlterNote       $02
000911C1 01                         	dc.b	$01
000911C2 E1FC                       	smpsAlterNote       $FC
000911C4 01                         	dc.b	$01
000911C5 E1FF                       	smpsAlterNote       $FF
000911C7 ECF5                       	smpsPSGAlterVol     $F5
000911C9 9B06                       	dc.b	nD2, $06
000911CB EC04                       	smpsPSGAlterVol     $04
000911CD E701                       	dc.b	smpsNoAttack, $01
000911CF EC07                       	smpsPSGAlterVol     $07
000911D1 8003                       	dc.b	nRst, $03
000911D3 ECF5                       	smpsPSGAlterVol     $F5
000911D5 9B07                       	dc.b	nD2, $07
000911D7 EC0B                       	smpsPSGAlterVol     $0B
000911D9 8006                       	dc.b	nRst, $06
000911DB E102                       	smpsAlterNote       $02
000911DD 01                         	dc.b	$01
000911DE E105                       	smpsAlterNote       $05
000911E0 0101                       	dc.b	$01, $01
000911E2 E1FF                       	smpsAlterNote       $FF
000911E4 01                         	dc.b	$01
000911E5 ECF5                       	smpsPSGAlterVol     $F5
000911E7 9B07                       	dc.b	nD2, $07
000911E9 EC0B                       	smpsPSGAlterVol     $0B
000911EB 8004                       	dc.b	nRst, $04
000911ED ECF5                       	smpsPSGAlterVol     $F5
000911EF 9B06                       	dc.b	nD2, $06
000911F1 EC0B                       	smpsPSGAlterVol     $0B
000911F3 8007                       	dc.b	nRst, $07
000911F5 E105                       	smpsAlterNote       $05
000911F7 0101                       	dc.b	$01, $01
000911F9 E102                       	smpsAlterNote       $02
000911FB 01                         	dc.b	$01
000911FC E1FC                       	smpsAlterNote       $FC
000911FE 01                         	dc.b	$01
000911FF E1FF                       	smpsAlterNote       $FF
00091201 ECF5                       	smpsPSGAlterVol     $F5
00091203 9B06                       	dc.b	nD2, $06
00091205 EC04                       	smpsPSGAlterVol     $04
00091207 E701                       	dc.b	smpsNoAttack, $01
00091209 EC07                       	smpsPSGAlterVol     $07
0009120B 8003                       	dc.b	nRst, $03
0009120D ECF5                       	smpsPSGAlterVol     $F5
0009120F 9B06                       	dc.b	nD2, $06
00091211 EC04                       	smpsPSGAlterVol     $04
00091213 E701                       	dc.b	smpsNoAttack, $01
00091215 EC07                       	smpsPSGAlterVol     $07
00091217 8006                       	dc.b	nRst, $06
00091219 E102                       	smpsAlterNote       $02
0009121B 01                         	dc.b	$01
0009121C E106                       	smpsAlterNote       $06
0009121E 01                         	dc.b	$01
0009121F E102                       	smpsAlterNote       $02
00091221 01                         	dc.b	$01
00091222 E1FF                       	smpsAlterNote       $FF
00091224 01                         	dc.b	$01
00091225 ECF5                       	smpsPSGAlterVol     $F5
00091227 9B06                       	dc.b	nD2, $06
00091229 EC04                       	smpsPSGAlterVol     $04
0009122B E701                       	dc.b	smpsNoAttack, $01
0009122D EC07                       	smpsPSGAlterVol     $07
0009122F 8003                       	dc.b	nRst, $03
00091231 ECF5                       	smpsPSGAlterVol     $F5
00091233 9B07                       	dc.b	nD2, $07
00091235 EC0B                       	smpsPSGAlterVol     $0B
00091237 8007                       	dc.b	nRst, $07
00091239 E105                       	smpsAlterNote       $05
0009123B 0101                       	dc.b	$01, $01
0009123D E1FF                       	smpsAlterNote       $FF
0009123F 01                         	dc.b	$01
00091240 E1FC                       	smpsAlterNote       $FC
00091242 01                         	dc.b	$01
00091243 E1FF                       	smpsAlterNote       $FF
00091245 ECF5                       	smpsPSGAlterVol     $F5
00091247 9B06                       	dc.b	nD2, $06
00091249 EC0B                       	smpsPSGAlterVol     $0B
0009124B 8004                       	dc.b	nRst, $04
0009124D ECF5                       	smpsPSGAlterVol     $F5
0009124F 9B06                       	dc.b	nD2, $06
00091251 EC04                       	smpsPSGAlterVol     $04
00091253 E701                       	dc.b	smpsNoAttack, $01
00091255 EC07                       	smpsPSGAlterVol     $07
00091257 8006                       	dc.b	nRst, $06
00091259 E102                       	smpsAlterNote       $02
0009125B 01                         	dc.b	$01
0009125C E106                       	smpsAlterNote       $06
0009125E 01                         	dc.b	$01
0009125F E102                       	smpsAlterNote       $02
00091261 01                         	dc.b	$01
00091262 E1FC                       	smpsAlterNote       $FC
00091264 01                         	dc.b	$01
00091265 E1FF                       	smpsAlterNote       $FF
00091267 ECF5                       	smpsPSGAlterVol     $F5
00091269 9B06                       	dc.b	nD2, $06
0009126B EC04                       	smpsPSGAlterVol     $04
0009126D E701                       	dc.b	smpsNoAttack, $01
0009126F EC07                       	smpsPSGAlterVol     $07
00091271 8003                       	dc.b	nRst, $03
00091273 ECF5                       	smpsPSGAlterVol     $F5
00091275 9B06                       	dc.b	nD2, $06
00091277 EC04                       	smpsPSGAlterVol     $04
00091279 E701                       	dc.b	smpsNoAttack, $01
0009127B EC07                       	smpsPSGAlterVol     $07
0009127D 8006                       	dc.b	nRst, $06
0009127F E102                       	smpsAlterNote       $02
00091281 01                         	dc.b	$01
00091282 E106                       	smpsAlterNote       $06
00091284 01                         	dc.b	$01
00091285 E105                       	smpsAlterNote       $05
00091287 01                         	dc.b	$01
00091288 E1FF                       	smpsAlterNote       $FF
0009128A 01                         	dc.b	$01
0009128B ECF5                       	smpsPSGAlterVol     $F5
0009128D 9B07                       	dc.b	nD2, $07
0009128F EC0B                       	smpsPSGAlterVol     $0B
00091291 8004                       	dc.b	nRst, $04
00091293 ECF5                       	smpsPSGAlterVol     $F5
00091295 9B06                       	dc.b	nD2, $06
00091297 EC0B                       	smpsPSGAlterVol     $0B
00091299 8007                       	dc.b	nRst, $07
0009129B E105                       	smpsAlterNote       $05
0009129D 0101                       	dc.b	$01, $01
0009129F E101                       	smpsAlterNote       $01
000912A1 01                         	dc.b	$01
000912A2 E1FB                       	smpsAlterNote       $FB
000912A4 01                         	dc.b	$01
000912A5 E1FE                       	smpsAlterNote       $FE
000912A7 ECF5                       	smpsPSGAlterVol     $F5
000912A9 9A06                       	dc.b	nCs2, $06
000912AB EC04                       	smpsPSGAlterVol     $04
000912AD E701                       	dc.b	smpsNoAttack, $01
000912AF EC07                       	smpsPSGAlterVol     $07
000912B1 8003                       	dc.b	nRst, $03
000912B3 ECF5                       	smpsPSGAlterVol     $F5
000912B5 9A06                       	dc.b	nCs2, $06
000912B7 EC04                       	smpsPSGAlterVol     $04
000912B9 E701                       	dc.b	smpsNoAttack, $01
000912BB EC07                       	smpsPSGAlterVol     $07
000912BD 8003                       	dc.b	nRst, $03
000912BF E1FC                       	smpsAlterNote       $FC
000912C1 ECF5                       	smpsPSGAlterVol     $F5
000912C3 8F07                       	dc.b	nD1, $07
000912C5 EC0B                       	smpsPSGAlterVol     $0B
000912C7 8006                       	dc.b	nRst, $06
000912C9 E1FF                       	smpsAlterNote       $FF
000912CB 01                         	dc.b	$01
000912CC E103                       	smpsAlterNote       $03
000912CE 01                         	dc.b	$01
000912CF E102                       	smpsAlterNote       $02
000912D1 01                         	dc.b	$01
000912D2 E1FC                       	smpsAlterNote       $FC
000912D4 01                         	dc.b	$01
000912D5 E1F8                       	smpsAlterNote       $F8
000912D7 01                         	dc.b	$01
000912D8 E1FC                       	smpsAlterNote       $FC
000912DA 01                         	dc.b	$01
000912DB E1FF                       	smpsAlterNote       $FF
000912DD 01                         	dc.b	$01
000912DE E103                       	smpsAlterNote       $03
000912E0 01                         	dc.b	$01
000912E1 E1FC                       	smpsAlterNote       $FC
000912E3 ECF5                       	smpsPSGAlterVol     $F5
000912E5 8F03 8F03                  	dc.b	nD1, $03, nD1, $03
000912E9 EC04                       	smpsPSGAlterVol     $04
000912EB E701                       	dc.b	smpsNoAttack, $01
000912ED EC07                       	smpsPSGAlterVol     $07
000912EF 8009                       	dc.b	nRst, $09
000912F1 E1FF                       	smpsAlterNote       $FF
000912F3 01                         	dc.b	$01
000912F4 E103                       	smpsAlterNote       $03
000912F6 01                         	dc.b	$01
000912F7 E102                       	smpsAlterNote       $02
000912F9 01                         	dc.b	$01
000912FA E1FC                       	smpsAlterNote       $FC
000912FC 01                         	dc.b	$01
000912FD E1F8                       	smpsAlterNote       $F8
000912FF 01                         	dc.b	$01
00091300 E1FC                       	smpsAlterNote       $FC
00091302 01                         	dc.b	$01
00091303 E1FF                       	smpsAlterNote       $FF
00091305 01                         	dc.b	$01
00091306 E103                       	smpsAlterNote       $03
00091308 01                         	dc.b	$01
00091309 E1FF                       	smpsAlterNote       $FF
0009130B 01                         	dc.b	$01
0009130C E1F9                       	smpsAlterNote       $F9
0009130E 01                         	dc.b	$01
0009130F E1F8                       	smpsAlterNote       $F8
00091311 01                         	dc.b	$01
00091312 E1FC                       	smpsAlterNote       $FC
00091314 01                         	dc.b	$01
00091315 E102                       	smpsAlterNote       $02
00091317 0101                       	dc.b	$01, $01
00091319 E1FF                       	smpsAlterNote       $FF
0009131B 01                         	dc.b	$01
0009131C E1FC                       	smpsAlterNote       $FC
0009131E ECF5                       	smpsPSGAlterVol     $F5
00091320 8F02                       	dc.b	nD1, $02
00091322 EC04                       	smpsPSGAlterVol     $04
00091324 E701                       	dc.b	smpsNoAttack, $01
00091326 ECFC                       	smpsPSGAlterVol     $FC
00091328 E1FB                       	smpsAlterNote       $FB
0009132A 8D06                       	dc.b	nC1, $06
0009132C EC04                       	smpsPSGAlterVol     $04
0009132E E701                       	dc.b	smpsNoAttack, $01
00091330 EC07                       	smpsPSGAlterVol     $07
00091332 8006                       	dc.b	nRst, $06
00091334 E1FE                       	smpsAlterNote       $FE
00091336 01                         	dc.b	$01
00091337 E102                       	smpsAlterNote       $02
00091339 01                         	dc.b	$01
0009133A E1FE                       	smpsAlterNote       $FE
0009133C 01                         	dc.b	$01
0009133D E1FB                       	smpsAlterNote       $FB
0009133F 01                         	dc.b	$01
00091340 E1F7                       	smpsAlterNote       $F7
00091342 01                         	dc.b	$01
00091343 E1FB                       	smpsAlterNote       $FB
00091345 01                         	dc.b	$01
00091346 E101                       	smpsAlterNote       $01
00091348 01                         	dc.b	$01
00091349 E102                       	smpsAlterNote       $02
0009134B 01                         	dc.b	$01
0009134C E1FB                       	smpsAlterNote       $FB
0009134E ECF5                       	smpsPSGAlterVol     $F5
00091350 8D02                       	dc.b	nC1, $02
00091352 EC04                       	smpsPSGAlterVol     $04
00091354 E701                       	dc.b	smpsNoAttack, $01
00091356 E1FC                       	smpsAlterNote       $FC
00091358 ECFC                       	smpsPSGAlterVol     $FC
0009135A 8F0D                       	dc.b	nD1, $0D
0009135C E1FF                       	smpsAlterNote       $FF
0009135E E701                       	dc.b	smpsNoAttack, $01
00091360 E103                       	smpsAlterNote       $03
00091362 E701                       	dc.b	smpsNoAttack, $01
00091364 E1FF                       	smpsAlterNote       $FF
00091366 E701                       	dc.b	smpsNoAttack, $01
00091368 E1FC                       	smpsAlterNote       $FC
0009136A E701                       	dc.b	smpsNoAttack, $01
0009136C E1F8                       	smpsAlterNote       $F8
0009136E E701                       	dc.b	smpsNoAttack, $01
00091370 E1FC                       	smpsAlterNote       $FC
00091372 E701                       	dc.b	smpsNoAttack, $01
00091374 E102                       	smpsAlterNote       $02
00091376 E701                       	dc.b	smpsNoAttack, $01
00091378 E103                       	smpsAlterNote       $03
0009137A E701                       	dc.b	smpsNoAttack, $01
0009137C E1FF                       	smpsAlterNote       $FF
0009137E E701                       	dc.b	smpsNoAttack, $01
00091380 E1F9                       	smpsAlterNote       $F9
00091382 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00091386 E1FC                       	smpsAlterNote       $FC
00091388 E701                       	dc.b	smpsNoAttack, $01
0009138A E102                       	smpsAlterNote       $02
0009138C E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00091390 E1FC                       	smpsAlterNote       $FC
00091392 E701                       	dc.b	smpsNoAttack, $01
00091394 E1F9                       	smpsAlterNote       $F9
00091396 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0009139A E1FF                       	smpsAlterNote       $FF
0009139C EC04                       	smpsPSGAlterVol     $04
0009139E E701                       	dc.b	smpsNoAttack, $01
000913A0 EC07                       	smpsPSGAlterVol     $07
000913A2 E103                       	smpsAlterNote       $03
000913A4 8001                       	dc.b	nRst, $01
000913A6 E102                       	smpsAlterNote       $02
000913A8 01                         	dc.b	$01
000913A9 E1FB                       	smpsAlterNote       $FB
000913AB 01                         	dc.b	$01
000913AC E1F7                       	smpsAlterNote       $F7
000913AE 01                         	dc.b	$01
000913AF E1FB                       	smpsAlterNote       $FB
000913B1 01                         	dc.b	$01
000913B2 E102                       	smpsAlterNote       $02
000913B4 01                         	dc.b	$01
000913B5 E103                       	smpsAlterNote       $03
000913B7 01                         	dc.b	$01
000913B8 E1FB                       	smpsAlterNote       $FB
000913BA ECF5                       	smpsPSGAlterVol     $F5
000913BC 8E06                       	dc.b	nCs1, $06
000913BE EC04                       	smpsPSGAlterVol     $04
000913C0 E701                       	dc.b	smpsNoAttack, $01
000913C2 EC07                       	smpsPSGAlterVol     $07
000913C4 8003                       	dc.b	nRst, $03
000913C6 ECF5                       	smpsPSGAlterVol     $F5
000913C8 8E06                       	dc.b	nCs1, $06
000913CA EC04                       	smpsPSGAlterVol     $04
000913CC E701                       	dc.b	smpsNoAttack, $01
000913CE EC07                       	smpsPSGAlterVol     $07
000913D0 8006                       	dc.b	nRst, $06
000913D2 E1FE                       	smpsAlterNote       $FE
000913D4 01                         	dc.b	$01
000913D5 E102                       	smpsAlterNote       $02
000913D7 01                         	dc.b	$01
000913D8 E1FE                       	smpsAlterNote       $FE
000913DA 01                         	dc.b	$01
000913DB E1F9                       	smpsAlterNote       $F9
000913DD 01                         	dc.b	$01
000913DE E1FC                       	smpsAlterNote       $FC
000913E0 ECF5                       	smpsPSGAlterVol     $F5
000913E2 8F06                       	dc.b	nD1, $06
000913E4 EC04                       	smpsPSGAlterVol     $04
000913E6 E701                       	dc.b	smpsNoAttack, $01
000913E8 EC07                       	smpsPSGAlterVol     $07
000913EA 8003                       	dc.b	nRst, $03
000913EC ECF5                       	smpsPSGAlterVol     $F5
000913EE 8F07                       	dc.b	nD1, $07
000913F0 EC0B                       	smpsPSGAlterVol     $0B
000913F2 8006                       	dc.b	nRst, $06
000913F4 E1FF                       	smpsAlterNote       $FF
000913F6 01                         	dc.b	$01
000913F7 E102                       	smpsAlterNote       $02
000913F9 0101                       	dc.b	$01, $01
000913FB E1FB                       	smpsAlterNote       $FB
000913FD 01                         	dc.b	$01
000913FE ECF5                       	smpsPSGAlterVol     $F5
00091400 8E07                       	dc.b	nCs1, $07
00091402 EC0B                       	smpsPSGAlterVol     $0B
00091404 8004                       	dc.b	nRst, $04
00091406 ECF5                       	smpsPSGAlterVol     $F5
00091408 8E06                       	dc.b	nCs1, $06
0009140A EC04                       	smpsPSGAlterVol     $04
0009140C E701                       	dc.b	smpsNoAttack, $01
0009140E EC07                       	smpsPSGAlterVol     $07
00091410 8006                       	dc.b	nRst, $06
00091412 E101                       	smpsAlterNote       $01
00091414 01                         	dc.b	$01
00091415 E102                       	smpsAlterNote       $02
00091417 01                         	dc.b	$01
00091418 E1FE                       	smpsAlterNote       $FE
0009141A 01                         	dc.b	$01
0009141B E1F8                       	smpsAlterNote       $F8
0009141D 01                         	dc.b	$01
0009141E E1FB                       	smpsAlterNote       $FB
00091420 ECF5                       	smpsPSGAlterVol     $F5
00091422 8E06                       	dc.b	nCs1, $06
00091424 EC04                       	smpsPSGAlterVol     $04
00091426 E701                       	dc.b	smpsNoAttack, $01
00091428 EC07                       	smpsPSGAlterVol     $07
0009142A 8003                       	dc.b	nRst, $03
0009142C ECF5                       	smpsPSGAlterVol     $F5
0009142E 8E06                       	dc.b	nCs1, $06
00091430 EC04                       	smpsPSGAlterVol     $04
00091432 E701                       	dc.b	smpsNoAttack, $01
00091434 EC07                       	smpsPSGAlterVol     $07
00091436 8004                       	dc.b	nRst, $04
00091438 E1FC                       	smpsAlterNote       $FC
0009143A ECF5                       	smpsPSGAlterVol     $F5
0009143C 8F06                       	dc.b	nD1, $06
0009143E EC0B                       	smpsPSGAlterVol     $0B
00091440 8006                       	dc.b	nRst, $06
00091442 E1FF                       	smpsAlterNote       $FF
00091444 01                         	dc.b	$01
00091445 E102                       	smpsAlterNote       $02
00091447 0101                       	dc.b	$01, $01
00091449 E1FC                       	smpsAlterNote       $FC
0009144B 01                         	dc.b	$01
0009144C E1F8                       	smpsAlterNote       $F8
0009144E 01                         	dc.b	$01
0009144F E1F9                       	smpsAlterNote       $F9
00091451 01                         	dc.b	$01
00091452 E1FF                       	smpsAlterNote       $FF
00091454 01                         	dc.b	$01
00091455 E103                       	smpsAlterNote       $03
00091457 01                         	dc.b	$01
00091458 E1FC                       	smpsAlterNote       $FC
0009145A ECF5                       	smpsPSGAlterVol     $F5
0009145C 8F03 8F03                  	dc.b	nD1, $03, nD1, $03
00091460 EC04                       	smpsPSGAlterVol     $04
00091462 E701                       	dc.b	smpsNoAttack, $01
00091464 EC07                       	smpsPSGAlterVol     $07
00091466 8009                       	dc.b	nRst, $09
00091468 E1FF                       	smpsAlterNote       $FF
0009146A 01                         	dc.b	$01
0009146B E102                       	smpsAlterNote       $02
0009146D 0101                       	dc.b	$01, $01
0009146F E1FC                       	smpsAlterNote       $FC
00091471 01                         	dc.b	$01
00091472 E1F8                       	smpsAlterNote       $F8
00091474 01                         	dc.b	$01
00091475 E1F9                       	smpsAlterNote       $F9
00091477 01                         	dc.b	$01
00091478 E1FF                       	smpsAlterNote       $FF
0009147A 01                         	dc.b	$01
0009147B E103                       	smpsAlterNote       $03
0009147D 01                         	dc.b	$01
0009147E E1FF                       	smpsAlterNote       $FF
00091480 01                         	dc.b	$01
00091481 E1FC                       	smpsAlterNote       $FC
00091483 01                         	dc.b	$01
00091484 E1F8                       	smpsAlterNote       $F8
00091486 01                         	dc.b	$01
00091487 E1FC                       	smpsAlterNote       $FC
00091489 01                         	dc.b	$01
0009148A E102                       	smpsAlterNote       $02
0009148C 01                         	dc.b	$01
0009148D E103                       	smpsAlterNote       $03
0009148F 01                         	dc.b	$01
00091490 E1FF                       	smpsAlterNote       $FF
00091492 01                         	dc.b	$01
00091493 E1FC                       	smpsAlterNote       $FC
00091495 ECF5                       	smpsPSGAlterVol     $F5
00091497 8F03                       	dc.b	nD1, $03
00091499 E1FB                       	smpsAlterNote       $FB
0009149B 8D06                       	dc.b	nC1, $06
0009149D EC04                       	smpsPSGAlterVol     $04
0009149F E701                       	dc.b	smpsNoAttack, $01
000914A1 EC07                       	smpsPSGAlterVol     $07
000914A3 8006                       	dc.b	nRst, $06
000914A5 E1FE                       	smpsAlterNote       $FE
000914A7 01                         	dc.b	$01
000914A8 E102                       	smpsAlterNote       $02
000914AA 01                         	dc.b	$01
000914AB E101                       	smpsAlterNote       $01
000914AD 01                         	dc.b	$01
000914AE E1FB                       	smpsAlterNote       $FB
000914B0 01                         	dc.b	$01
000914B1 E1F7                       	smpsAlterNote       $F7
000914B3 01                         	dc.b	$01
000914B4 E1FB                       	smpsAlterNote       $FB
000914B6 01                         	dc.b	$01
000914B7 E1FE                       	smpsAlterNote       $FE
000914B9 01                         	dc.b	$01
000914BA E102                       	smpsAlterNote       $02
000914BC 01                         	dc.b	$01
000914BD E1FB                       	smpsAlterNote       $FB
000914BF ECF5                       	smpsPSGAlterVol     $F5
000914C1 8D03                       	dc.b	nC1, $03
000914C3 E1FC                       	smpsAlterNote       $FC
000914C5 8F0D                       	dc.b	nD1, $0D
000914C7 E1FF                       	smpsAlterNote       $FF
000914C9 E701                       	dc.b	smpsNoAttack, $01
000914CB E103                       	smpsAlterNote       $03
000914CD E701                       	dc.b	smpsNoAttack, $01
000914CF E1FF                       	smpsAlterNote       $FF
000914D1 E701                       	dc.b	smpsNoAttack, $01
000914D3 E1FC                       	smpsAlterNote       $FC
000914D5 E701                       	dc.b	smpsNoAttack, $01
000914D7 E1F8                       	smpsAlterNote       $F8
000914D9 E701                       	dc.b	smpsNoAttack, $01
000914DB E1FC                       	smpsAlterNote       $FC
000914DD E701                       	dc.b	smpsNoAttack, $01
000914DF E102                       	smpsAlterNote       $02
000914E1 E701                       	dc.b	smpsNoAttack, $01
000914E3 E103                       	smpsAlterNote       $03
000914E5 E701                       	dc.b	smpsNoAttack, $01
000914E7 E1FF                       	smpsAlterNote       $FF
000914E9 E701                       	dc.b	smpsNoAttack, $01
000914EB E1F9                       	smpsAlterNote       $F9
000914ED E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
000914F1 E1FC                       	smpsAlterNote       $FC
000914F3 E701                       	dc.b	smpsNoAttack, $01
000914F5 E102                       	smpsAlterNote       $02
000914F7 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
000914FB E1FF                       	smpsAlterNote       $FF
000914FD E701                       	dc.b	smpsNoAttack, $01
000914FF E1F9                       	smpsAlterNote       $F9
00091501 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00091505 E1FF                       	smpsAlterNote       $FF
00091507 EC04                       	smpsPSGAlterVol     $04
00091509 E701                       	dc.b	smpsNoAttack, $01
0009150B EC07                       	smpsPSGAlterVol     $07
0009150D E103                       	smpsAlterNote       $03
0009150F 8001                       	dc.b	nRst, $01
00091511 E102                       	smpsAlterNote       $02
00091513 01                         	dc.b	$01
00091514 E1FB                       	smpsAlterNote       $FB
00091516 01                         	dc.b	$01
00091517 E1F7                       	smpsAlterNote       $F7
00091519 01                         	dc.b	$01
0009151A E1FB                       	smpsAlterNote       $FB
0009151C 01                         	dc.b	$01
0009151D E1FF                       	smpsAlterNote       $FF
0009151F 01                         	dc.b	$01
00091520 E103                       	smpsAlterNote       $03
00091522 01                         	dc.b	$01
00091523 E1FB                       	smpsAlterNote       $FB
00091525 ECF5                       	smpsPSGAlterVol     $F5
00091527 8E06                       	dc.b	nCs1, $06
00091529 EC04                       	smpsPSGAlterVol     $04
0009152B E701                       	dc.b	smpsNoAttack, $01
0009152D EC07                       	smpsPSGAlterVol     $07
0009152F 8003                       	dc.b	nRst, $03
00091531 ECF5                       	smpsPSGAlterVol     $F5
00091533 8E06                       	dc.b	nCs1, $06
00091535 EC04                       	smpsPSGAlterVol     $04
00091537 E701                       	dc.b	smpsNoAttack, $01
00091539 EC07                       	smpsPSGAlterVol     $07
0009153B 8006                       	dc.b	nRst, $06
0009153D E1FE                       	smpsAlterNote       $FE
0009153F 01                         	dc.b	$01
00091540 E102                       	smpsAlterNote       $02
00091542 01                         	dc.b	$01
00091543 E1FE                       	smpsAlterNote       $FE
00091545 01                         	dc.b	$01
00091546 E1FC                       	smpsAlterNote       $FC
00091548 01                         	dc.b	$01
00091549 ECF5                       	smpsPSGAlterVol     $F5
0009154B 8F06                       	dc.b	nD1, $06
0009154D EC04                       	smpsPSGAlterVol     $04
0009154F E701                       	dc.b	smpsNoAttack, $01
00091551 EC07                       	smpsPSGAlterVol     $07
00091553 8003                       	dc.b	nRst, $03
00091555 ECF5                       	smpsPSGAlterVol     $F5
00091557 8F07                       	dc.b	nD1, $07
00091559 EC0B                       	smpsPSGAlterVol     $0B
0009155B 8007                       	dc.b	nRst, $07
0009155D E102                       	smpsAlterNote       $02
0009155F 0101                       	dc.b	$01, $01
00091561 E1FB                       	smpsAlterNote       $FB
00091563 01                         	dc.b	$01
00091564 E1F8                       	smpsAlterNote       $F8
00091566 01                         	dc.b	$01
00091567 E1FB                       	smpsAlterNote       $FB
00091569 ECF5                       	smpsPSGAlterVol     $F5
0009156B 8E06                       	dc.b	nCs1, $06
0009156D EC0B                       	smpsPSGAlterVol     $0B
0009156F 8004                       	dc.b	nRst, $04
00091571 ECF5                       	smpsPSGAlterVol     $F5
00091573 8E06                       	dc.b	nCs1, $06
00091575 EC04                       	smpsPSGAlterVol     $04
00091577 E701                       	dc.b	smpsNoAttack, $01
00091579 EC07                       	smpsPSGAlterVol     $07
0009157B 8006                       	dc.b	nRst, $06
0009157D E1FE                       	smpsAlterNote       $FE
0009157F 01                         	dc.b	$01
00091580 E102                       	smpsAlterNote       $02
00091582 01                         	dc.b	$01
00091583 E1FE                       	smpsAlterNote       $FE
00091585 01                         	dc.b	$01
00091586 E1F9                       	smpsAlterNote       $F9
00091588 01                         	dc.b	$01
00091589 E1FC                       	smpsAlterNote       $FC
0009158B ECF5                       	smpsPSGAlterVol     $F5
0009158D 8F06                       	dc.b	nD1, $06
0009158F EC04                       	smpsPSGAlterVol     $04
00091591 E701                       	dc.b	smpsNoAttack, $01
00091593 EC07                       	smpsPSGAlterVol     $07
00091595 8003                       	dc.b	nRst, $03
00091597 ECF5                       	smpsPSGAlterVol     $F5
00091599 8F06                       	dc.b	nD1, $06
0009159B EC04                       	smpsPSGAlterVol     $04
0009159D E701                       	dc.b	smpsNoAttack, $01
0009159F EC07                       	smpsPSGAlterVol     $07
000915A1 8006                       	dc.b	nRst, $06
000915A3 E1FF                       	smpsAlterNote       $FF
000915A5 01                         	dc.b	$01
000915A6 E103                       	smpsAlterNote       $03
000915A8 01                         	dc.b	$01
000915A9 E102                       	smpsAlterNote       $02
000915AB 01                         	dc.b	$01
000915AC E1FB                       	smpsAlterNote       $FB
000915AE 01                         	dc.b	$01
000915AF ECF5                       	smpsPSGAlterVol     $F5
000915B1 8E07                       	dc.b	nCs1, $07
000915B3 EC0B                       	smpsPSGAlterVol     $0B
000915B5 8004                       	dc.b	nRst, $04
000915B7 ECF5                       	smpsPSGAlterVol     $F5
000915B9 8E06                       	dc.b	nCs1, $06
000915BB EC0B                       	smpsPSGAlterVol     $0B
000915BD 8007                       	dc.b	nRst, $07
000915BF E101                       	smpsAlterNote       $01
000915C1 0101                       	dc.b	$01, $01
000915C3 E1FE                       	smpsAlterNote       $FE
000915C5 01                         	dc.b	$01
000915C6 E1F9                       	smpsAlterNote       $F9
000915C8 01                         	dc.b	$01
000915C9 E1FC                       	smpsAlterNote       $FC
000915CB ECF5                       	smpsPSGAlterVol     $F5
000915CD 8F06                       	dc.b	nD1, $06
000915CF EC04                       	smpsPSGAlterVol     $04
000915D1 E701                       	dc.b	smpsNoAttack, $01
000915D3 EC07                       	smpsPSGAlterVol     $07
000915D5 8003                       	dc.b	nRst, $03
000915D7 ECF5                       	smpsPSGAlterVol     $F5
000915D9 8F06                       	dc.b	nD1, $06
000915DB EC04                       	smpsPSGAlterVol     $04
000915DD E701                       	dc.b	smpsNoAttack, $01
000915DF EC07                       	smpsPSGAlterVol     $07
000915E1 8006                       	dc.b	nRst, $06
000915E3 E1FF                       	smpsAlterNote       $FF
000915E5 01                         	dc.b	$01
000915E6 E103                       	smpsAlterNote       $03
000915E8 01                         	dc.b	$01
000915E9 E1FF                       	smpsAlterNote       $FF
000915EB 01                         	dc.b	$01
000915EC E1FB                       	smpsAlterNote       $FB
000915EE 01                         	dc.b	$01
000915EF ECF5                       	smpsPSGAlterVol     $F5
000915F1 8E06                       	dc.b	nCs1, $06
000915F3 EC04                       	smpsPSGAlterVol     $04
000915F5 E701                       	dc.b	smpsNoAttack, $01
000915F7 EC07                       	smpsPSGAlterVol     $07
000915F9 8003                       	dc.b	nRst, $03
000915FB ECF5                       	smpsPSGAlterVol     $F5
000915FD 8E07                       	dc.b	nCs1, $07
000915FF E1FF                       	smpsAlterNote       $FF
00091601 9B06                       	dc.b	nD2, $06
00091603 EC04                       	smpsPSGAlterVol     $04
00091605 E701                       	dc.b	smpsNoAttack, $01
00091607 ECFC                       	smpsPSGAlterVol     $FC
00091609 9B03                       	dc.b	nD2, $03
0009160B EC04                       	smpsPSGAlterVol     $04
0009160D E701                       	dc.b	smpsNoAttack, $01
0009160F ECFC                       	smpsPSGAlterVol     $FC
00091611 9B02                       	dc.b	nD2, $02
00091613 EC04                       	smpsPSGAlterVol     $04
00091615 E701                       	dc.b	smpsNoAttack, $01
00091617 ECFC                       	smpsPSGAlterVol     $FC
00091619 E1FE                       	smpsAlterNote       $FE
0009161B 9A03                       	dc.b	nCs2, $03
0009161D EC0B                       	smpsPSGAlterVol     $0B
0009161F 800A                       	dc.b	nRst, $0A
00091621 E102                       	smpsAlterNote       $02
00091623 01                         	dc.b	$01
00091624 E10A                       	smpsAlterNote       $0A
00091626 01                         	dc.b	$01
00091627 E102                       	smpsAlterNote       $02
00091629 01                         	dc.b	$01
0009162A E1F7                       	smpsAlterNote       $F7
0009162C 01                         	dc.b	$01
0009162D E10A                       	smpsAlterNote       $0A
0009162F 01                         	dc.b	$01
00091630 E1FC                       	smpsAlterNote       $FC
00091632 01                         	dc.b	$01
00091633 E108                       	smpsAlterNote       $08
00091635 0101                       	dc.b	$01, $01
00091637 E102                       	smpsAlterNote       $02
00091639 01                         	dc.b	$01
0009163A E1F7                       	smpsAlterNote       $F7
0009163C 0101                       	dc.b	$01, $01
0009163E E1FC                       	smpsAlterNote       $FC
00091640 ECF5                       	smpsPSGAlterVol     $F5
00091642 8F06                       	dc.b	nD1, $06
00091644 EC04                       	smpsPSGAlterVol     $04
00091646 E701                       	dc.b	smpsNoAttack, $01
00091648 EC07                       	smpsPSGAlterVol     $07
0009164A 8003                       	dc.b	nRst, $03
0009164C ECF5                       	smpsPSGAlterVol     $F5
0009164E 8F06                       	dc.b	nD1, $06
00091650 EC04                       	smpsPSGAlterVol     $04
00091652 E701                       	dc.b	smpsNoAttack, $01
00091654 EC07                       	smpsPSGAlterVol     $07
00091656 8006                       	dc.b	nRst, $06
00091658 E1FF                       	smpsAlterNote       $FF
0009165A 01                         	dc.b	$01
0009165B E102                       	smpsAlterNote       $02
0009165D 01                         	dc.b	$01
0009165E E101                       	smpsAlterNote       $01
00091660 01                         	dc.b	$01
00091661 E1FC                       	smpsAlterNote       $FC
00091663 01                         	dc.b	$01
00091664 ECF5                       	smpsPSGAlterVol     $F5
00091666 9007                       	dc.b	nEb1, $07
00091668 EC0B                       	smpsPSGAlterVol     $0B
0009166A 8004                       	dc.b	nRst, $04
0009166C ECF5                       	smpsPSGAlterVol     $F5
0009166E 9006                       	dc.b	nEb1, $06
00091670 EC0B                       	smpsPSGAlterVol     $0B
00091672 8007                       	dc.b	nRst, $07
00091674 E103                       	smpsAlterNote       $03
00091676 0101                       	dc.b	$01, $01
00091678 E1FF                       	smpsAlterNote       $FF
0009167A 01                         	dc.b	$01
0009167B E1F9                       	smpsAlterNote       $F9
0009167D 01                         	dc.b	$01
0009167E E1FC                       	smpsAlterNote       $FC
00091680 ECF5                       	smpsPSGAlterVol     $F5
00091682 8F06                       	dc.b	nD1, $06
00091684 EC04                       	smpsPSGAlterVol     $04
00091686 E701                       	dc.b	smpsNoAttack, $01
00091688 EC07                       	smpsPSGAlterVol     $07
0009168A 8003                       	dc.b	nRst, $03
0009168C ECF5                       	smpsPSGAlterVol     $F5
0009168E 8F06                       	dc.b	nD1, $06
00091690 EC04                       	smpsPSGAlterVol     $04
00091692 E701                       	dc.b	smpsNoAttack, $01
00091694 EC07                       	smpsPSGAlterVol     $07
00091696 8006                       	dc.b	nRst, $06
00091698 E1FF                       	smpsAlterNote       $FF
0009169A 01                         	dc.b	$01
0009169B E103                       	smpsAlterNote       $03
0009169D 01                         	dc.b	$01
0009169E E1FF                       	smpsAlterNote       $FF
000916A0 01                         	dc.b	$01
000916A1 E1F9                       	smpsAlterNote       $F9
000916A3 01                         	dc.b	$01
000916A4 E1FC                       	smpsAlterNote       $FC
000916A6 ECF5                       	smpsPSGAlterVol     $F5
000916A8 8F06                       	dc.b	nD1, $06
000916AA EC04                       	smpsPSGAlterVol     $04
000916AC E701                       	dc.b	smpsNoAttack, $01
000916AE EC07                       	smpsPSGAlterVol     $07
000916B0 8003                       	dc.b	nRst, $03
000916B2 ECF5                       	smpsPSGAlterVol     $F5
000916B4 8F07                       	dc.b	nD1, $07
000916B6 EC0B                       	smpsPSGAlterVol     $0B
000916B8 8006                       	dc.b	nRst, $06
000916BA E1FF                       	smpsAlterNote       $FF
000916BC 01                         	dc.b	$01
000916BD E102                       	smpsAlterNote       $02
000916BF 0101                       	dc.b	$01, $01
000916C1 E1FC                       	smpsAlterNote       $FC
000916C3 01                         	dc.b	$01
000916C4 ECF5                       	smpsPSGAlterVol     $F5
000916C6 8F07                       	dc.b	nD1, $07
000916C8 EC0B                       	smpsPSGAlterVol     $0B
000916CA 8004                       	dc.b	nRst, $04
000916CC ECF5                       	smpsPSGAlterVol     $F5
000916CE 8F06                       	dc.b	nD1, $06
000916D0 EC04                       	smpsPSGAlterVol     $04
000916D2 E701                       	dc.b	smpsNoAttack, $01
000916D4 EC07                       	smpsPSGAlterVol     $07
000916D6 8006                       	dc.b	nRst, $06
000916D8 E101                       	smpsAlterNote       $01
000916DA 01                         	dc.b	$01
000916DB E102                       	smpsAlterNote       $02
000916DD 01                         	dc.b	$01
000916DE E1FF                       	smpsAlterNote       $FF
000916E0 01                         	dc.b	$01
000916E1 E1F9                       	smpsAlterNote       $F9
000916E3 01                         	dc.b	$01
000916E4 E1FC                       	smpsAlterNote       $FC
000916E6 ECF5                       	smpsPSGAlterVol     $F5
000916E8 9006                       	dc.b	nEb1, $06
000916EA EC04                       	smpsPSGAlterVol     $04
000916EC E701                       	dc.b	smpsNoAttack, $01
000916EE EC07                       	smpsPSGAlterVol     $07
000916F0 8003                       	dc.b	nRst, $03
000916F2 ECF5                       	smpsPSGAlterVol     $F5
000916F4 9006                       	dc.b	nEb1, $06
000916F6 EC04                       	smpsPSGAlterVol     $04
000916F8 E701                       	dc.b	smpsNoAttack, $01
000916FA EC07                       	smpsPSGAlterVol     $07
000916FC 8006                       	dc.b	nRst, $06
000916FE E100                       	smpsAlterNote       $00
00091700 01                         	dc.b	$01
00091701 E102                       	smpsAlterNote       $02
00091703 01                         	dc.b	$01
00091704 E100                       	smpsAlterNote       $00
00091706 01                         	dc.b	$01
00091707 E1FF                       	smpsAlterNote       $FF
00091709 01                         	dc.b	$01
0009170A ECF5                       	smpsPSGAlterVol     $F5
0009170C 9B06                       	dc.b	nD2, $06
0009170E EC04                       	smpsPSGAlterVol     $04
00091710 E701                       	dc.b	smpsNoAttack, $01
00091712 EC07                       	smpsPSGAlterVol     $07
00091714 8003                       	dc.b	nRst, $03
00091716 ECF5                       	smpsPSGAlterVol     $F5
00091718 9B07                       	dc.b	nD2, $07
0009171A EC0B                       	smpsPSGAlterVol     $0B
0009171C 8007                       	dc.b	nRst, $07
0009171E E105                       	smpsAlterNote       $05
00091720 0101                       	dc.b	$01, $01
00091722 E1FF                       	smpsAlterNote       $FF
00091724 01                         	dc.b	$01
00091725 E1FC                       	smpsAlterNote       $FC
00091727 01                         	dc.b	$01
00091728 E1FF                       	smpsAlterNote       $FF
0009172A ECF5                       	smpsPSGAlterVol     $F5
0009172C 9B06                       	dc.b	nD2, $06
0009172E EC0B                       	smpsPSGAlterVol     $0B
00091730 8004                       	dc.b	nRst, $04
00091732 ECF5                       	smpsPSGAlterVol     $F5
00091734 9B06                       	dc.b	nD2, $06
00091736 EC04                       	smpsPSGAlterVol     $04
00091738 E701                       	dc.b	smpsNoAttack, $01
0009173A EC07                       	smpsPSGAlterVol     $07
0009173C 8006                       	dc.b	nRst, $06
0009173E E102                       	smpsAlterNote       $02
00091740 01                         	dc.b	$01
00091741 E106                       	smpsAlterNote       $06
00091743 01                         	dc.b	$01
00091744 E102                       	smpsAlterNote       $02
00091746 01                         	dc.b	$01
00091747 E1FC                       	smpsAlterNote       $FC
00091749 01                         	dc.b	$01
0009174A E1FF                       	smpsAlterNote       $FF
0009174C ECF5                       	smpsPSGAlterVol     $F5
0009174E 9B06                       	dc.b	nD2, $06
00091750 EC04                       	smpsPSGAlterVol     $04
00091752 E701                       	dc.b	smpsNoAttack, $01
00091754 EC07                       	smpsPSGAlterVol     $07
00091756 8003                       	dc.b	nRst, $03
00091758 ECF5                       	smpsPSGAlterVol     $F5
0009175A 9B07                       	dc.b	nD2, $07
0009175C EC0B                       	smpsPSGAlterVol     $0B
0009175E 8006                       	dc.b	nRst, $06
00091760 E102                       	smpsAlterNote       $02
00091762 01                         	dc.b	$01
00091763 E105                       	smpsAlterNote       $05
00091765 0101                       	dc.b	$01, $01
00091767 E1FF                       	smpsAlterNote       $FF
00091769 01                         	dc.b	$01
0009176A ECF5                       	smpsPSGAlterVol     $F5
0009176C 9B07                       	dc.b	nD2, $07
0009176E EC0B                       	smpsPSGAlterVol     $0B
00091770 8004                       	dc.b	nRst, $04
00091772 ECF5                       	smpsPSGAlterVol     $F5
00091774 9B06                       	dc.b	nD2, $06
00091776 EC04                       	smpsPSGAlterVol     $04
00091778 E701                       	dc.b	smpsNoAttack, $01
0009177A EC07                       	smpsPSGAlterVol     $07
0009177C 8006                       	dc.b	nRst, $06
0009177E E105                       	smpsAlterNote       $05
00091780 0101                       	dc.b	$01, $01
00091782 E102                       	smpsAlterNote       $02
00091784 01                         	dc.b	$01
00091785 E1FC                       	smpsAlterNote       $FC
00091787 01                         	dc.b	$01
00091788 E1FF                       	smpsAlterNote       $FF
0009178A ECF5                       	smpsPSGAlterVol     $F5
0009178C 9B06                       	dc.b	nD2, $06
0009178E EC04                       	smpsPSGAlterVol     $04
00091790 E701                       	dc.b	smpsNoAttack, $01
00091792 EC07                       	smpsPSGAlterVol     $07
00091794 8003                       	dc.b	nRst, $03
00091796 ECF5                       	smpsPSGAlterVol     $F5
00091798 9B06                       	dc.b	nD2, $06
0009179A EC04                       	smpsPSGAlterVol     $04
0009179C E701                       	dc.b	smpsNoAttack, $01
0009179E EC07                       	smpsPSGAlterVol     $07
000917A0 8006                       	dc.b	nRst, $06
000917A2 E102                       	smpsAlterNote       $02
000917A4 01                         	dc.b	$01
000917A5 E106                       	smpsAlterNote       $06
000917A7 01                         	dc.b	$01
000917A8 E102                       	smpsAlterNote       $02
000917AA 01                         	dc.b	$01
000917AB E1FF                       	smpsAlterNote       $FF
000917AD 01                         	dc.b	$01
000917AE ECF5                       	smpsPSGAlterVol     $F5
000917B0 9B06                       	dc.b	nD2, $06
000917B2 EC04                       	smpsPSGAlterVol     $04
000917B4 E701                       	dc.b	smpsNoAttack, $01
000917B6 EC07                       	smpsPSGAlterVol     $07
000917B8 8003                       	dc.b	nRst, $03
000917BA ECF5                       	smpsPSGAlterVol     $F5
000917BC 9B07                       	dc.b	nD2, $07
000917BE EC0B                       	smpsPSGAlterVol     $0B
000917C0 8007                       	dc.b	nRst, $07
000917C2 E107                       	smpsAlterNote       $07
000917C4 0101                       	dc.b	$01, $01
000917C6 E1FE                       	smpsAlterNote       $FE
000917C8 01                         	dc.b	$01
000917C9 E1FA                       	smpsAlterNote       $FA
000917CB 0101                       	dc.b	$01, $01
000917CD E103                       	smpsAlterNote       $03
000917CF 01                         	dc.b	$01
000917D0 E109                       	smpsAlterNote       $09
000917D2 01                         	dc.b	$01
000917D3 E107                       	smpsAlterNote       $07
000917D5 01                         	dc.b	$01
000917D6 E1FE                       	smpsAlterNote       $FE
000917D8 01                         	dc.b	$01
000917D9 E108                       	smpsAlterNote       $08
000917DB 01                         	dc.b	$01
000917DC E1FD                       	smpsAlterNote       $FD
000917DE ECF5                       	smpsPSGAlterVol     $F5
000917E0 940E                       	dc.b	nG1, $0E
000917E2 E103                       	smpsAlterNote       $03
000917E4 EC0B                       	smpsPSGAlterVol     $0B
000917E6 8001 01                    	dc.b	nRst, $01, $01
000917E9 E1FD                       	smpsAlterNote       $FD
000917EB 01                         	dc.b	$01
000917EC E1FB                       	smpsAlterNote       $FB
000917EE 0101                       	dc.b	$01, $01
000917F0 E100                       	smpsAlterNote       $00
000917F2 01                         	dc.b	$01
000917F3 E103                       	smpsAlterNote       $03
000917F5 01                         	dc.b	$01
000917F6 E100                       	smpsAlterNote       $00
000917F8 01                         	dc.b	$01
000917F9 E1FD                       	smpsAlterNote       $FD
000917FB 01                         	dc.b	$01
000917FC E1FA                       	smpsAlterNote       $FA
000917FE 01                         	dc.b	$01
000917FF E1FD                       	smpsAlterNote       $FD
00091801 01                         	dc.b	$01
00091802 E103                       	smpsAlterNote       $03
00091804 0101                       	dc.b	$01, $01
00091806 E100                       	smpsAlterNote       $00
00091808 01                         	dc.b	$01
00091809 E1FE                       	smpsAlterNote       $FE
0009180B ECF5                       	smpsPSGAlterVol     $F5
0009180D 960D                       	dc.b	nA1, $0D
0009180F E104                       	smpsAlterNote       $04
00091811 EC0B                       	smpsPSGAlterVol     $0B
00091813 8001 01                    	dc.b	nRst, $01, $01
00091816 E101                       	smpsAlterNote       $01
00091818 01                         	dc.b	$01
00091819 E1FB                       	smpsAlterNote       $FB
0009181B 0101                       	dc.b	$01, $01
0009181D E1FE                       	smpsAlterNote       $FE
0009181F 01                         	dc.b	$01
00091820 E104                       	smpsAlterNote       $04
00091822 0101                       	dc.b	$01, $01
00091824 E1FE                       	smpsAlterNote       $FE
00091826 01                         	dc.b	$01
00091827 E1FB                       	smpsAlterNote       $FB
00091829 0101                       	dc.b	$01, $01
0009182B E101                       	smpsAlterNote       $01
0009182D 01                         	dc.b	$01
0009182E E104                       	smpsAlterNote       $04
00091830 0101                       	dc.b	$01, $01
00091832 E1FE                       	smpsAlterNote       $FE
00091834 ECF5                       	smpsPSGAlterVol     $F5
00091836 970D                       	dc.b	nBb1, $0D
00091838 E101                       	smpsAlterNote       $01
0009183A EC04                       	smpsPSGAlterVol     $04
0009183C E701                       	dc.b	smpsNoAttack, $01
0009183E EC07                       	smpsPSGAlterVol     $07
00091840 E104                       	smpsAlterNote       $04
00091842 8001                       	dc.b	nRst, $01
00091844 E103                       	smpsAlterNote       $03
00091846 01                         	dc.b	$01
00091847 E1FE                       	smpsAlterNote       $FE
00091849 01                         	dc.b	$01
0009184A E1FA                       	smpsAlterNote       $FA
0009184C 01                         	dc.b	$01
0009184D E1FE                       	smpsAlterNote       $FE
0009184F 01                         	dc.b	$01
00091850 E101                       	smpsAlterNote       $01
00091852 01                         	dc.b	$01
00091853 E104                       	smpsAlterNote       $04
00091855 01                         	dc.b	$01
00091856 E101                       	smpsAlterNote       $01
00091858 01                         	dc.b	$01
00091859 E1FB                       	smpsAlterNote       $FB
0009185B 01                         	dc.b	$01
0009185C E1FA                       	smpsAlterNote       $FA
0009185E 01                         	dc.b	$01
0009185F E1FE                       	smpsAlterNote       $FE
00091861 01                         	dc.b	$01
00091862 E103                       	smpsAlterNote       $03
00091864 0101                       	dc.b	$01, $01
00091866 E101                       	smpsAlterNote       $01
00091868 01                         	dc.b	$01
00091869 E1FE                       	smpsAlterNote       $FE
0009186B ECF5                       	smpsPSGAlterVol     $F5
0009186D 990D                       	dc.b	nC2, $0D
0009186F E104                       	smpsAlterNote       $04
00091871 EC0B                       	smpsPSGAlterVol     $0B
00091873 8001 01                    	dc.b	nRst, $01, $01
00091876 E102                       	smpsAlterNote       $02
00091878 01                         	dc.b	$01
00091879 E1FC                       	smpsAlterNote       $FC
0009187B 0101                       	dc.b	$01, $01
0009187D E102                       	smpsAlterNote       $02
0009187F 01                         	dc.b	$01
00091880 E104                       	smpsAlterNote       $04
00091882 01                         	dc.b	$01
00091883 E1FF                       	smpsAlterNote       $FF
00091885 ECF5                       	smpsPSGAlterVol     $F5
00091887 9B06                       	dc.b	nD2, $06
00091889 EC04                       	smpsPSGAlterVol     $04
0009188B E701                       	dc.b	smpsNoAttack, $01
0009188D EC07                       	smpsPSGAlterVol     $07
0009188F 8003                       	dc.b	nRst, $03
00091891 ECF5                       	smpsPSGAlterVol     $F5
00091893 9B07                       	dc.b	nD2, $07
00091895 EC0B                       	smpsPSGAlterVol     $0B
00091897 8006                       	dc.b	nRst, $06
00091899 E101                       	smpsAlterNote       $01
0009189B 01                         	dc.b	$01
0009189C E104                       	smpsAlterNote       $04
0009189E 0101                       	dc.b	$01, $01
000918A0 E1FE                       	smpsAlterNote       $FE
000918A2 01                         	dc.b	$01
000918A3 E1FC                       	smpsAlterNote       $FC
000918A5 01                         	dc.b	$01
000918A6 E1FE                       	smpsAlterNote       $FE
000918A8 ECF5                       	smpsPSGAlterVol     $F5
000918AA 9C06                       	dc.b	nEb2, $06
000918AC EC0B                       	smpsPSGAlterVol     $0B
000918AE 8004                       	dc.b	nRst, $04
000918B0 ECF5                       	smpsPSGAlterVol     $F5
000918B2 9C06                       	dc.b	nEb2, $06
000918B4 EC04                       	smpsPSGAlterVol     $04
000918B6 E701                       	dc.b	smpsNoAttack, $01
000918B8 EC07                       	smpsPSGAlterVol     $07
000918BA 8006                       	dc.b	nRst, $06
000918BC E105                       	smpsAlterNote       $05
000918BE 01                         	dc.b	$01
000918BF E106                       	smpsAlterNote       $06
000918C1 01                         	dc.b	$01
000918C2 E102                       	smpsAlterNote       $02
000918C4 01                         	dc.b	$01
000918C5 E1FB                       	smpsAlterNote       $FB
000918C7 01                         	dc.b	$01
000918C8 E1FF                       	smpsAlterNote       $FF
000918CA ECF5                       	smpsPSGAlterVol     $F5
000918CC 9B06                       	dc.b	nD2, $06
000918CE EC04                       	smpsPSGAlterVol     $04
000918D0 E701                       	dc.b	smpsNoAttack, $01
000918D2 EC07                       	smpsPSGAlterVol     $07
000918D4 8003                       	dc.b	nRst, $03
000918D6 ECF5                       	smpsPSGAlterVol     $F5
000918D8 9B06                       	dc.b	nD2, $06
000918DA EC04                       	smpsPSGAlterVol     $04
000918DC E701                       	dc.b	smpsNoAttack, $01
000918DE EC07                       	smpsPSGAlterVol     $07
000918E0 8006                       	dc.b	nRst, $06
000918E2 E101                       	smpsAlterNote       $01
000918E4 01                         	dc.b	$01
000918E5 E105                       	smpsAlterNote       $05
000918E7 01                         	dc.b	$01
000918E8 E104                       	smpsAlterNote       $04
000918EA 01                         	dc.b	$01
000918EB E1FE                       	smpsAlterNote       $FE
000918ED 01                         	dc.b	$01
000918EE ECF5                       	smpsPSGAlterVol     $F5
000918F0 9C07                       	dc.b	nEb2, $07
000918F2 EC0B                       	smpsPSGAlterVol     $0B
000918F4 8004                       	dc.b	nRst, $04
000918F6 ECF5                       	smpsPSGAlterVol     $F5
000918F8 9C06                       	dc.b	nEb2, $06
000918FA EC0B                       	smpsPSGAlterVol     $0B
000918FC 8007                       	dc.b	nRst, $07
000918FE E105                       	smpsAlterNote       $05
00091900 0101                       	dc.b	$01, $01
00091902 E102                       	smpsAlterNote       $02
00091904 01                         	dc.b	$01
00091905 E1FB                       	smpsAlterNote       $FB
00091907 01                         	dc.b	$01
00091908 E1FF                       	smpsAlterNote       $FF
0009190A ECF5                       	smpsPSGAlterVol     $F5
0009190C 9B06                       	dc.b	nD2, $06
0009190E EC04                       	smpsPSGAlterVol     $04
00091910 E701                       	dc.b	smpsNoAttack, $01
00091912 EC07                       	smpsPSGAlterVol     $07
00091914 8003                       	dc.b	nRst, $03
00091916 ECF5                       	smpsPSGAlterVol     $F5
00091918 9B06                       	dc.b	nD2, $06
0009191A EC04                       	smpsPSGAlterVol     $04
0009191C E701                       	dc.b	smpsNoAttack, $01
0009191E EC07                       	smpsPSGAlterVol     $07
00091920 8006                       	dc.b	nRst, $06
00091922 E101                       	smpsAlterNote       $01
00091924 01                         	dc.b	$01
00091925 E105                       	smpsAlterNote       $05
00091927 01                         	dc.b	$01
00091928 E101                       	smpsAlterNote       $01
0009192A 01                         	dc.b	$01
0009192B E1FC                       	smpsAlterNote       $FC
0009192D 01                         	dc.b	$01
0009192E E1FE                       	smpsAlterNote       $FE
00091930 ECF5                       	smpsPSGAlterVol     $F5
00091932 9C06                       	dc.b	nEb2, $06
00091934 EC04                       	smpsPSGAlterVol     $04
00091936 E701                       	dc.b	smpsNoAttack, $01
00091938 EC07                       	smpsPSGAlterVol     $07
0009193A 8003                       	dc.b	nRst, $03
0009193C ECF5                       	smpsPSGAlterVol     $F5
0009193E 9C07                       	dc.b	nEb2, $07
00091940 EC0B                       	smpsPSGAlterVol     $0B
00091942 8006                       	dc.b	nRst, $06
00091944 E102                       	smpsAlterNote       $02
00091946 01                         	dc.b	$01
00091947 E105                       	smpsAlterNote       $05
00091949 0101                       	dc.b	$01, $01
0009194B E1FF                       	smpsAlterNote       $FF
0009194D 01                         	dc.b	$01
0009194E ECF5                       	smpsPSGAlterVol     $F5
00091950 9B07                       	dc.b	nD2, $07
00091952 EC0B                       	smpsPSGAlterVol     $0B
00091954 8004                       	dc.b	nRst, $04
00091956 ECF5                       	smpsPSGAlterVol     $F5
00091958 9B06                       	dc.b	nD2, $06
0009195A EC04                       	smpsPSGAlterVol     $04
0009195C E701                       	dc.b	smpsNoAttack, $01
0009195E EC07                       	smpsPSGAlterVol     $07
00091960 8002                       	dc.b	nRst, $02
00091962 E1FC                       	smpsAlterNote       $FC
00091964 ECF5                       	smpsPSGAlterVol     $F5
00091966 9006                       	dc.b	nEb1, $06
00091968 EC04                       	smpsPSGAlterVol     $04
0009196A E701                       	dc.b	smpsNoAttack, $01
0009196C ECFC                       	smpsPSGAlterVol     $FC
0009196E 8B03 9003                  	dc.b	nBb0, $03, nEb1, $03
00091972 EC04                       	smpsPSGAlterVol     $04
00091974 E701                       	dc.b	smpsNoAttack, $01
00091976 E1FD                       	smpsAlterNote       $FD
00091978 ECFC                       	smpsPSGAlterVol     $FC
0009197A 9402                       	dc.b	nG1, $02
0009197C EC04                       	smpsPSGAlterVol     $04
0009197E E701                       	dc.b	smpsNoAttack, $01
00091980 E1FE                       	smpsAlterNote       $FE
00091982 ECFC                       	smpsPSGAlterVol     $FC
00091984 9703 9703                  	dc.b	nBb1, $03, nBb1, $03
00091988 EC04                       	smpsPSGAlterVol     $04
0009198A E701                       	dc.b	smpsNoAttack, $01
0009198C EC07                       	smpsPSGAlterVol     $07
0009198E 8008                       	dc.b	nRst, $08
00091990 F6F4 F3                    	smpsJump            music84_Jump06
00091993                            
00091993                            ; PSG3 Data
00091993                            music84_PSG3:
00091993 F500                       	smpsPSGvoice        $00
00091995 E1FF                       	smpsAlterNote       $FF
00091997 EC0F                       	smpsPSGAlterVol     $0F
00091999 803A                       	dc.b	nRst, $3A
0009199B                            
0009199B                            music84_Jump05:
0009199B 8068 6868 6868 6868 6868+  	dc.b	nRst, $68, $68, $68, $68, $68, $68, $68, $68, $68, $68, $68
000919A7 6868 6868 6868 6868 6802   	dc.b	$68, $68, $68, $68, $68, $68, $68, $68, $68, $02
000919B1 F6FF E8                    	smpsJump            music84_Jump05
000919B4                            
000919B4                            ; DAC Data
000919B4                            music84_DAC:
000919B4 E0C0                       	smpsPan             panCenter, $00
000919B6 8001 8203 8102 8101 8103+  	dc.b	nRst, $01, dSnare, $03, dKick, $02, dKick, $01, dKick, $03, dKick, $01
000919C2 8203 8102 8101 8204 8103+  	dc.b	dSnare, $03, dKick, $02, dKick, $01, dSnare, $04, dKick, $03, dSnare, $07
000919CE 8104 8103 8104 8103 8104+  	dc.b	dKick, $04, dKick, $03, dKick, $04, dKick, $03, dKick, $04, dKick, $03
000919DA 8203 8107 8207 8106 8101+  	dc.b	dSnare, $03, dKick, $07, dSnare, $07, dKick, $06, dKick, $01, dSnare, $03
000919E6 8107 8103 8207 8103 8104+  	dc.b	dKick, $07, dKick, $03, dSnare, $07, dKick, $03, dKick, $04, dSnare, $07
000919F2 8107 8206 8107 8204 8107+  	dc.b	dKick, $07, dSnare, $06, dKick, $07, dSnare, $04, dKick, $07, dKick, $03
000919FE 8207 8103 8104 8207 8106+  	dc.b	dSnare, $07, dKick, $03, dKick, $04, dSnare, $07, dKick, $06, dKick, $01
00091A0A 8206 8107 8204 8106 8104+  	dc.b	dSnare, $06, dKick, $07, dSnare, $04, dKick, $06, dKick, $04, dSnare, $07
00091A16 8103 8103 8101 8206 8107+  	dc.b	dKick, $03, dKick, $03, dKick, $01, dSnare, $06, dKick, $07, dSnare, $07
00091A22 8107 8203 8107 8104 8206+  	dc.b	dKick, $07, dSnare, $03, dKick, $07, dKick, $04, dSnare, $06, dKick, $04
00091A2E 8103 8207 8107 8207 8107+  	dc.b	dKick, $03, dSnare, $07, dKick, $07, dSnare, $07, dKick, $07, dSnare, $03
00091A3A 8107 8103 8101 8206 8104+  	dc.b	dKick, $07, dKick, $03, dKick, $01, dSnare, $06, dKick, $04, dKick, $03
00091A46 8207 8107 8207 8106 8101+  	dc.b	dSnare, $07, dKick, $07, dSnare, $07, dKick, $06, dKick, $01, dSnare, $03
00091A52 8107 8103 8207 8103 8104+  	dc.b	dKick, $07, dKick, $03, dSnare, $07, dKick, $03, dKick, $04, dSnare, $07
00091A5E 8106 8101 8206 8107 8204+  	dc.b	dKick, $06, dKick, $01, dSnare, $06, dKick, $07, dSnare, $04, dKick, $06
00091A6A 8104 8207 8103 8104 8206+  	dc.b	dKick, $04, dSnare, $07, dKick, $03, dKick, $04, dSnare, $06, dKick, $07
00091A76 8207 8107 8203 8107 8202+  	dc.b	dSnare, $07, dKick, $07, dSnare, $03, dKick, $07, dSnare, $02, dKick, $02
00091A82 8103 8207 8101 8101 8101+  	dc.b	dKick, $03, dSnare, $07, dKick, $01, dKick, $01, dKick, $01, dKick, $01
00091A8E 8206 8107 8207 8107 8203+  	dc.b	dSnare, $06, dKick, $07, dSnare, $07, dKick, $07, dSnare, $03, dKick, $07
00091A9A 8103 8101 8206 8104 8103+  	dc.b	dKick, $03, dKick, $01, dSnare, $06, dKick, $04, dKick, $03, dSnare, $07
00091AA6 8107 8207 8107 8203 8107+  	dc.b	dKick, $07, dSnare, $07, dKick, $07, dSnare, $03, dKick, $07, dKick, $03
00091AB2 8207 8103 8101 8103 8207+  	dc.b	dSnare, $07, dKick, $03, dKick, $01, dKick, $03, dSnare, $07, dKick, $07
00091ABE 8206 8101 8106 8204 8107+  	dc.b	dSnare, $06, dKick, $01, dKick, $06, dSnare, $04, dKick, $07, dKick, $03
00091ACA 8207 8103 8104 8207 8106+  	dc.b	dSnare, $07, dKick, $03, dKick, $04, dSnare, $07, dKick, $06, dKick, $01
00091AD6 8206 8107 8203 8101 8106+  	dc.b	dSnare, $06, dKick, $07, dSnare, $03, dKick, $01, dKick, $06, dKick, $04
00091AE2 8207 8103 8103 8101 8206+  	dc.b	dSnare, $07, dKick, $03, dKick, $03, dKick, $01, dSnare, $06, dKick, $07
00091AEE 8207 8107 8203 8107 8104+  	dc.b	dSnare, $07, dKick, $07, dSnare, $03, dKick, $07, dKick, $04, dSnare, $06
00091AFA 8104 8103 8207 8107 8207+  	dc.b	dKick, $04, dKick, $03, dSnare, $07, dKick, $07, dSnare, $07, dKick, $07
00091B06 8203 8107 8103 8101 8206+  	dc.b	dSnare, $03, dKick, $07, dKick, $03, dKick, $01, dSnare, $06, dKick, $04
00091B12 8103 8207 8107 8207 8106+  	dc.b	dKick, $03, dSnare, $07, dKick, $07, dSnare, $07, dKick, $06, dKick, $01
00091B1E 8203 8107 8103 8207 8103+  	dc.b	dSnare, $03, dKick, $07, dKick, $03, dSnare, $07, dKick, $03, dKick, $04
00091B2A 8207 8106 8101 8206 8107+  	dc.b	dSnare, $07, dKick, $06, dKick, $01, dSnare, $06, dKick, $07, dSnare, $04
00091B36 8106 8104 8207 8104 8103+  	dc.b	dKick, $06, dKick, $04, dSnare, $07, dKick, $04, dKick, $03, dSnare, $07
00091B42 8106 8207 8107 8203 8107+  	dc.b	dKick, $06, dSnare, $07, dKick, $07, dSnare, $03, dKick, $07, dKick, $04
00091B4E 8206 8101 8103 8103 8101+  	dc.b	dSnare, $06, dKick, $01, dKick, $03, dKick, $03, dKick, $01, dSnare, $06
00091B5A 8107 8207 8107 8203 8107+  	dc.b	dKick, $07, dSnare, $07, dKick, $07, dSnare, $03, dKick, $07, dKick, $03
00091B66 8101 8206 8104 8103 8207+  	dc.b	dKick, $01, dSnare, $06, dKick, $04, dKick, $03, dSnare, $07, dKick, $07
00091B72 8207 8106 8101 8203 8107+  	dc.b	dSnare, $07, dKick, $06, dKick, $01, dSnare, $03, dKick, $07, dKick, $03
00091B7E 8207 8103 8101 8103 8207+  	dc.b	dSnare, $07, dKick, $03, dKick, $01, dKick, $03, dSnare, $07, dKick, $07
00091B8A 8206 8107 8204 8107 8103+  	dc.b	dSnare, $06, dKick, $07, dSnare, $04, dKick, $07, dKick, $03, dSnare, $07
00091B96 8103 8104 8207 8214 8204+  	dc.b	dKick, $03, dKick, $04, dSnare, $07, dSnare, $14, dSnare, $04, dSnare, $1B
00091BA2 8203 8101 8214 8203 8207+  	dc.b	dSnare, $03, dKick, $01, dSnare, $14, dSnare, $03, dSnare, $07, dKick, $04
00091BAE 8206 8107 8207 8107 8207+  	dc.b	dSnare, $06, dKick, $07, dSnare, $07, dKick, $07, dSnare, $07, dKick, $07
00091BBA 8203 8107 8103 8101 8206+  	dc.b	dSnare, $03, dKick, $07, dKick, $03, dKick, $01, dSnare, $06, dKick, $04
00091BC6 8103 8207 8107 8207 8106+  	dc.b	dKick, $03, dSnare, $07, dKick, $07, dSnare, $07, dKick, $06, dKick, $01
00091BD2 8203 8107 8103 8207 8103+  	dc.b	dSnare, $03, dKick, $07, dKick, $03, dSnare, $07, dKick, $03, dKick, $04
00091BDE 8207 8106 8101 8206 8107+  	dc.b	dSnare, $07, dKick, $06, dKick, $01, dSnare, $06, dKick, $07, dSnare, $04
00091BEA 8106 8104 8207 8103 8104+  	dc.b	dKick, $06, dKick, $04, dSnare, $07, dKick, $03, dKick, $04, dSnare, $06
00091BF6 8107 8207 8107 8204 8207+  	dc.b	dKick, $07, dSnare, $07, dKick, $07, dSnare, $04, dSnare, $07, dKick, $01
00091C02 8102 8104 8109 8101 8206+  	dc.b	dKick, $02, dKick, $04, dKick, $09, dKick, $01, dSnare, $06, dKick, $07
00091C0E 8207 8107 8203 8107 8103+  	dc.b	dSnare, $07, dKick, $07, dSnare, $03, dKick, $07, dKick, $03, dKick, $01
00091C1A 8206 8104 8103 8207 8107+  	dc.b	dSnare, $06, dKick, $04, dKick, $03, dSnare, $07, dKick, $07, dSnare, $07
00091C26 8107 8203 8107 8103 8207+  	dc.b	dKick, $07, dSnare, $03, dKick, $07, dKick, $03, dSnare, $07, dKick, $04
00091C32 8103 8207 8107 8206 8101+  	dc.b	dKick, $03, dSnare, $07, dKick, $07, dSnare, $06, dKick, $01, dKick, $06
00091C3E 8204 8107 8103 8207 8103+  	dc.b	dSnare, $04, dKick, $07, dKick, $03, dSnare, $07, dKick, $03, dKick, $04
00091C4A 8207 8106 8101 8206 8107+  	dc.b	dSnare, $07, dKick, $06, dKick, $01, dSnare, $06, dKick, $07, dSnare, $03
00091C56 8101 8106 8104 8207 8103+  	dc.b	dKick, $01, dKick, $06, dKick, $04, dSnare, $07, dKick, $03, dKick, $03
00091C62 8101 8206 8107 8207 8107+  	dc.b	dKick, $01, dSnare, $06, dKick, $07, dSnare, $07, dKick, $07, dSnare, $03
00091C6E 8107 8104 8206 8104 8103+  	dc.b	dKick, $07, dKick, $04, dSnare, $06, dKick, $04, dKick, $03, dSnare, $07
00091C7A 8107 8207 8107 8203 8107+  	dc.b	dKick, $07, dSnare, $07, dKick, $07, dSnare, $03, dKick, $07, dKick, $03
00091C86 8101 8206 8104 8103 8207+  	dc.b	dKick, $01, dSnare, $06, dKick, $04, dKick, $03, dSnare, $07, dKick, $03
00091C92 8104 8207 8106 8101 8203+  	dc.b	dKick, $04, dSnare, $07, dKick, $06, dKick, $01, dSnare, $03, dKick, $07
00091C9E 8103 8208 8102 8104 8203+  	dc.b	dKick, $03, dSnare, $08, dKick, $02, dKick, $04, dSnare, $03, dKick, $04
00091CAA 8103 8103 8101 8203 8103+  	dc.b	dKick, $03, dKick, $03, dKick, $01, dSnare, $03, dKick, $03, dKick, $01
00091CB6 8203 8103 8202 8101 8202+  	dc.b	dSnare, $03, dKick, $03, dSnare, $02, dKick, $01, dSnare, $02, dSnare, $02
00091CC2 8202 8201 8101 8201 8102+  	dc.b	dSnare, $02, dSnare, $01, dKick, $01, dSnare, $01, dKick, $02, dKick, $02
00091CCE 8102 8101 8102 8102 8102+  	dc.b	dKick, $02, dKick, $01, dKick, $02, dKick, $02, dKick, $02, dKick, $01
00091CDA 8102 8202 8102 8101 8101+  	dc.b	dKick, $02, dSnare, $02, dKick, $02, dKick, $01, dKick, $01, dKick, $07
00091CE6 8207 8107 8203 8107 8104+  	dc.b	dSnare, $07, dKick, $07, dSnare, $03, dKick, $07, dKick, $04, dSnare, $07
00091CF2 8103 8103 8101 8206 8107+  	dc.b	dKick, $03, dKick, $03, dKick, $01, dSnare, $06, dKick, $07, dSnare, $07
00091CFE 8107 8203 8107 8103 8101+  	dc.b	dKick, $07, dSnare, $03, dKick, $07, dKick, $03, dKick, $01, dSnare, $06
00091D0A 8104 8103 8207 8107 8207+  	dc.b	dKick, $04, dKick, $03, dSnare, $07, dKick, $07, dSnare, $07, dKick, $07
00091D16 8203 8107 8103 8207 8104+  	dc.b	dSnare, $03, dKick, $07, dKick, $03, dSnare, $07, dKick, $04, dKick, $03
00091D22 8207 8107 8206 8107 8204+  	dc.b	dSnare, $07, dKick, $07, dSnare, $06, dKick, $07, dSnare, $04, dKick, $07
00091D2E 8103 8207 8203 8204 8107+  	dc.b	dKick, $03, dSnare, $07, dSnare, $03, dSnare, $04, dKick, $07, dKick, $17
00091D3A E0C0                       	smpsPan             panCenter, $00
00091D3C F2                         	smpsStop
00091D3D                            
00091D3D                            music84_Voices:
00091D3D                            ;	Voice $00
00091D3D                            ;	$3D
00091D3D                            ;	$41, $31, $41, $51, 	$11, $11, $11, $11, 	$0A, $00, $00, $00
00091D3D                            ;	$0B, $00, $00, $00, 	$F7, $F8, $F8, $F8, 	$1A, $14, $20, $14
00091D3D                            	smpsVcAlgorithm     $05
00091D3D                            	smpsVcFeedback      $07
00091D3D                            	smpsVcUnusedBits    $00
00091D3D                            	smpsVcDetune        $05, $04, $03, $04
00091D3D                            	smpsVcCoarseFreq    $01, $01, $01, $01
00091D3D                            	smpsVcRateScale     $00, $00, $00, $00
00091D3D                            	smpsVcAttackRate    $11, $11, $11, $11
00091D3D                            	smpsVcAmpMod        $00, $00, $00, $00
00091D3D                            	smpsVcDecayRate1    $00, $00, $00, $0A
00091D3D                            	smpsVcDecayRate2    $00, $00, $00, $0B
00091D3D                            	smpsVcDecayLevel    $0F, $0F, $0F, $0F
00091D3D                            	smpsVcReleaseRate   $08, $08, $08, $07
00091D3D 3D41 3141 5111 1111 110A+  	smpsVcTotalLevel    $14, $20, $14, $1A
00091D56                            
00091D56                            ;	Voice $01
00091D56                            ;	$04
00091D56                            ;	$5A, $41, $3A, $41, 	$5F, $1F, $5F, $1F, 	$00, $0E, $00, $0E
00091D56                            ;	$00, $05, $00, $05, 	$E6, $86, $E6, $86, 	$19, $10, $19, $10
00091D56                            	smpsVcAlgorithm     $04
00091D56                            	smpsVcFeedback      $00
00091D56                            	smpsVcUnusedBits    $00
00091D56                            	smpsVcDetune        $04, $03, $04, $05
00091D56                            	smpsVcCoarseFreq    $01, $0A, $01, $0A
00091D56                            	smpsVcRateScale     $00, $01, $00, $01
00091D56                            	smpsVcAttackRate    $1F, $1F, $1F, $1F
00091D56                            	smpsVcAmpMod        $00, $00, $00, $00
00091D56                            	smpsVcDecayRate1    $0E, $00, $0E, $00
00091D56                            	smpsVcDecayRate2    $05, $00, $05, $00
00091D56                            	smpsVcDecayLevel    $08, $0E, $08, $0E
00091D56                            	smpsVcReleaseRate   $06, $06, $06, $06
00091D56 045A 413A 415F 1F5F 1F00+  	smpsVcTotalLevel    $10, $19, $10, $19
00091D6F                            
00091D6F                            ;	Voice $02
00091D6F                            ;	$30
00091D6F                            ;	$6C, $03, $21, $41, 	$14, $1F, $1F, $1F, 	$0D, $0C, $0E, $01
00091D6F                            ;	$01, $01, $01, $01, 	$FF, $C8, $BB, $89, 	$24, $27, $14, $10
00091D6F                            	smpsVcAlgorithm     $00
00091D6F                            	smpsVcFeedback      $06
00091D6F                            	smpsVcUnusedBits    $00
00091D6F                            	smpsVcDetune        $04, $02, $00, $06
00091D6F                            	smpsVcCoarseFreq    $01, $01, $03, $0C
00091D6F                            	smpsVcRateScale     $00, $00, $00, $00
00091D6F                            	smpsVcAttackRate    $1F, $1F, $1F, $14
00091D6F                            	smpsVcAmpMod        $00, $00, $00, $00
00091D6F                            	smpsVcDecayRate1    $01, $0E, $0C, $0D
00091D6F                            	smpsVcDecayRate2    $01, $01, $01, $01
00091D6F                            	smpsVcDecayLevel    $08, $0B, $0C, $0F
00091D6F                            	smpsVcReleaseRate   $09, $0B, $08, $0F
00091D6F 306C 0321 4114 1F1F 1F0D+  	smpsVcTotalLevel    $10, $14, $27, $24
00091D88                            
00091D88                            ;	Voice $03
00091D88                            ;	$3A
00091D88                            ;	$01, $21, $61, $41, 	$14, $14, $19, $18, 	$09, $09, $0D, $09
00091D88                            ;	$00, $00, $00, $00, 	$F7, $BF, $FF, $E8, 	$26, $16, $1E, $10
00091D88                            	smpsVcAlgorithm     $02
00091D88                            	smpsVcFeedback      $07
00091D88                            	smpsVcUnusedBits    $00
00091D88                            	smpsVcDetune        $04, $06, $02, $00
00091D88                            	smpsVcCoarseFreq    $01, $01, $01, $01
00091D88                            	smpsVcRateScale     $00, $00, $00, $00
00091D88                            	smpsVcAttackRate    $18, $19, $14, $14
00091D88                            	smpsVcAmpMod        $00, $00, $00, $00
00091D88                            	smpsVcDecayRate1    $09, $0D, $09, $09
00091D88                            	smpsVcDecayRate2    $00, $00, $00, $00
00091D88                            	smpsVcDecayLevel    $0E, $0F, $0B, $0F
00091D88                            	smpsVcReleaseRate   $08, $0F, $0F, $07
00091D88 3A01 2161 4114 1419 1809+  	smpsVcTotalLevel    $10, $1E, $16, $26
00091DA1                            
00091DA1                            ;	Voice $04
00091DA1                            ;	$3C
00091DA1                            ;	$3A, $02, $00, $70, 	$1F, $10, $1F, $10, 	$00, $00, $00, $00
00091DA1                            ;	$00, $00, $00, $00, 	$F2, $FA, $F2, $FA, 	$30, $1F, $24, $18
00091DA1                            	smpsVcAlgorithm     $04
00091DA1                            	smpsVcFeedback      $07
00091DA1                            	smpsVcUnusedBits    $00
00091DA1                            	smpsVcDetune        $07, $00, $00, $03
00091DA1                            	smpsVcCoarseFreq    $00, $00, $02, $0A
00091DA1                            	smpsVcRateScale     $00, $00, $00, $00
00091DA1                            	smpsVcAttackRate    $10, $1F, $10, $1F
00091DA1                            	smpsVcAmpMod        $00, $00, $00, $00
00091DA1                            	smpsVcDecayRate1    $00, $00, $00, $00
00091DA1                            	smpsVcDecayRate2    $00, $00, $00, $00
00091DA1                            	smpsVcDecayLevel    $0F, $0F, $0F, $0F
00091DA1                            	smpsVcReleaseRate   $0A, $02, $0A, $02
00091DA1 3C3A 0200 701F 101F 1000+  	smpsVcTotalLevel    $18, $24, $1F, $30
00091DBA                            
00091DBA                            ;	Voice $05
00091DBA                            ;	$38
00091DBA                            ;	$00, $21, $61, $41, 	$10, $1F, $1F, $1F, 	$17, $00, $03, $00
00091DBA                            ;	$0B, $08, $08, $00, 	$A5, $F5, $F5, $F8, 	$1D, $10, $11, $14
00091DBA                            	smpsVcAlgorithm     $00
00091DBA                            	smpsVcFeedback      $07
00091DBA                            	smpsVcUnusedBits    $00
00091DBA                            	smpsVcDetune        $04, $06, $02, $00
00091DBA                            	smpsVcCoarseFreq    $01, $01, $01, $00
00091DBA                            	smpsVcRateScale     $00, $00, $00, $00
00091DBA                            	smpsVcAttackRate    $1F, $1F, $1F, $10
00091DBA                            	smpsVcAmpMod        $00, $00, $00, $00
00091DBA                            	smpsVcDecayRate1    $00, $03, $00, $17
00091DBA                            	smpsVcDecayRate2    $00, $08, $08, $0B
00091DBA                            	smpsVcDecayLevel    $0F, $0F, $0F, $0A
00091DBA                            	smpsVcReleaseRate   $08, $05, $05, $05
00091DBA 3800 2161 4110 1F1F 1F17+  	smpsVcTotalLevel    $14, $11, $10, $1D
00091DD3                            
00091DD3                            
00091DD4 00                         		even
00091DD4                            Music85:	incbin	sound\glass2.bin ; Spring Yard Act 1
00095FE4                            		even
00095FE4                            Music86:	incbin	sound\music86.bin; Scrap Brain Act 1
00099B3C 00                         		even
00099B3C                            Music87:	include	sound\music87.asm; Invincibility
00099B3C                            triple_Header:
00099B3C =00000001                  smpsHeaderStartSong = 1
00099B3C 0000                       	smpsHeaderVoice     triple_Voices
00099B3E 0501                       	smpsHeaderChan      $05, $01
00099B40 0200                       	smpsHeaderTempo     $02, $00
00099B42                            
00099B46 0000 F40A                  	smpsHeaderFM        triple_FM1,	$F4, $0A
00099B4A 0000 000F                  	smpsHeaderFM        triple_FM2,	$00, $0F
00099B4E 0000 000B                  	smpsHeaderFM        triple_FM3,	$00, $0B
00099B52 0000 0013                  	smpsHeaderFM        triple_FM4,	$00, $13
00099B56 0000 0C01 0000             	smpsHeaderPSG       triple_PSG1,	$0C, $01, $00, $00
00099B5C                            
00099B5C                            ; DAC Data
00099B5C                            triple_DAC:
00099B5C E0C0                       	smpsPan             panCenter, $00
00099B5E 8203 0381 8182             	dc.b	dSnare, $03, $03, dKick, dKick, dSnare
00099B64                            
00099B64                            triple_Loop01:
00099B64 8282 82                    	dc.b	dSnare, dSnare, dSnare
00099B67                            
00099B67                            triple_Loop00:
00099B67 8106 8281 8281 8203 8106+  	dc.b	dKick, $06, dSnare, dKick, dSnare, dKick, dSnare, $03, dKick, $06, $03, dSnare
00099B73 06                         	dc.b	$06
00099B74 F700 08FF EF               	smpsLoop            $00, $08, triple_Loop00
00099B79 810C 8209 0981 0682 0903+  	dc.b	dKick, $0C, dSnare, $09, $09, dKick, $06, dSnare, $09, $03, dKick, $0C
00099B85 8209 0981 0682 03          	dc.b	dSnare, $09, $09, dKick, $06, dSnare, $03
00099B8C F701 02FF D4               	smpsLoop            $01, $02, triple_Loop01
00099B91 0303 1B                    	dc.b	$03, $03, $1B
00099B94 E0C0                       	smpsPan             panCenter, $00
00099B96 F6FF C4                    	smpsJump triple_DAC
00099B99                            
00099B99                            ; FM1 Data
00099B99                            triple_FM1:
00099B99 E0C0                       	smpsPan             panCenter, $00
00099B9D 8018                       	dc.b	nRst, $18
00099B9F                            
00099B9F                            triple_Loop0B:
00099B9F AC06 B8                    	dc.b	nG3, $06, nG4
00099BA2 F700 04FF F9               	smpsLoop            $00, $04, triple_Loop0B
00099BA7                            
00099BA7                            triple_Loop0C:
00099BA7 A7B3                       	dc.b	nD3, nD4
00099BA9 F700 04FF FA               	smpsLoop            $00, $04, triple_Loop0C
00099BAE                            
00099BAE                            triple_Loop0D:
00099BAE A9B5                       	dc.b	nE3, nE4
00099BB0 F700 04FF FA               	smpsLoop            $00, $04, triple_Loop0D
00099BB5 A5B1 A5B1 A7B3 A7B3        	dc.b	nC3, nC4, nC3, nC4, nD3, nD4, nD3, nD4
00099BBD F701 02FF DE               	smpsLoop            $01, $02, triple_Loop0B
00099BC2 A4B0 A4B0 A0AC A0AC A203+  	dc.b	nB2, nB3, nB2, nB3, nG2, nG3, nG2, nG3, nA2, $03, nRst, nA3
00099BCE 80A6 80B2 80A4 A6A7 A9A6+  	dc.b	nRst, nCs3, nRst, nCs4, nRst, nB2, nCs3, nD3, nE3, nCs3, nEb3, nF3
00099BDA AD                         	dc.b	nAb3
00099BDB F702 02FF C0               	smpsLoop            $02, $02, triple_Loop0B
00099BE0 8018                       	dc.b	nRst, $18
00099BE2 E0C0                       	smpsPan             panCenter, $00
00099BE6 F6FF B1                    	smpsJump triple_FM1
00099BE9                            
00099BE9                            ; FM2 Data
00099BE9                            triple_FM2:
00099BE9 E0C0                       	smpsPan             panCenter, $00
00099BED 8018                       	dc.b	nRst, $18
00099BEF                            
00099BEF                            triple_Loop07:
00099BEF C430 C311 8001 C612 C30B+  	dc.b	nG5, $30, nFs5, $11, nRst, $01, nA5, $12, nFs5, $0B, nRst, $01
00099BFB C436 C303 C4C3 06C1 BFBD+  	dc.b	nG5, $36, nFs5, $03, nG5, nFs5, $06, nE5, nD5, nC5, nB4, nA4
00099C07 F700 02FF E4               	smpsLoop            $00, $02, triple_Loop07
00099C0C 8003                       	dc.b	nRst, $03
00099C0E                            
00099C0E                            triple_Loop08:
00099C0E B809 BC03 800C             	dc.b	nG4, $09, nB4, $03, nRst, $0C
00099C14 F700 03FF F6               	smpsLoop            $00, $03, triple_Loop08
00099C19 B809 BC03 8009             	dc.b	nG4, $09, nB4, $03, nRst, $09
00099C1F                            
00099C1F                            triple_Loop09:
00099C1F C430 C311 8001 C612 C30B+  	dc.b	nG5, $30, nFs5, $11, nRst, $01, nA5, $12, nFs5, $0B, nRst, $01
00099C2B C436 C303 C4C3 06C1 BFBD+  	dc.b	nG5, $36, nFs5, $03, nG5, nFs5, $06, nE5, nD5, nC5, nB4, nA4
00099C37 F700 02FF E4               	smpsLoop            $00, $02, triple_Loop09
00099C3C 8003                       	dc.b	nRst, $03
00099C3E                            
00099C3E                            triple_Loop0A:
00099C3E B809 BC03 800C             	dc.b	nG4, $09, nB4, $03, nRst, $0C
00099C44 F700 03FF F6               	smpsLoop            $00, $03, triple_Loop0A
00099C49 B809 BC03 8021             	dc.b	nG4, $09, nB4, $03, nRst, $21
00099C4F E0C0                       	smpsPan             panCenter, $00
00099C53 F6FF 94                    	smpsJump triple_FM2
00099C56                            
00099C56                            ; FM3 Data
00099C56                            triple_FM3:
00099C56 E0C0                       	smpsPan             panCenter, $00
00099C5A 8018                       	dc.b	nRst, $18
00099C5C                            
00099C5C                            triple_Loop06:
00099C5C B830 B7B8 36B3 2A          	dc.b	nG4, $30, nFs4, nG4, $36, nD4, $2A
00099C63 F700 02FF F5               	smpsLoop            $00, $02, triple_Loop06
00099C68 8030 B802 BABC BDBF C1BA+  	dc.b	nRst, $30, nG4, $02, nA4, nB4, nC5, nD5, nE5, nA4, nB4, nCs5
00099C74 BFC1 C3BC BEC0 C1C3 C5BE+  	dc.b	nD5, nE5, nFs5, nB4, nCs5, nEb5, nE5, nFs5, nAb5, nCs5, nEb5, nF5
00099C80 C3C5 C7                    	dc.b	nFs5, nAb5, nBb5
00099C83 F701 02FF D5               	smpsLoop            $01, $02, triple_Loop06
00099C88 8018                       	dc.b	nRst, $18
00099C8A E0C0                       	smpsPan             panCenter, $00
00099C8E F6FF C6                    	smpsJump triple_FM3
00099C91                            
00099C91                            ; FM4 Data
00099C91                            triple_FM4:
00099C91 E103                       	smpsAlterNote       $03
00099C95 E0C0                       	smpsPan             panCenter, $00
00099C97 8018                       	dc.b	nRst, $18
00099C99                            
00099C99                            triple_Loop02:
00099C99 C430 C311 8001 C612 C30B+  	dc.b	nG5, $30, nFs5, $11, nRst, $01, nA5, $12, nFs5, $0B, nRst, $01
00099CA5 C436 C303 C4C3 06C1 BFBD+  	dc.b	nG5, $36, nFs5, $03, nG5, nFs5, $06, nE5, nD5, nC5, nB4, nA4
00099CB1 F700 02FF E4               	smpsLoop            $00, $02, triple_Loop02
00099CB6 8003                       	dc.b	nRst, $03
00099CB8                            
00099CB8                            triple_Loop03:
00099CB8 B809 BC03 800C             	dc.b	nG4, $09, nB4, $03, nRst, $0C
00099CBE F700 03FF F6               	smpsLoop            $00, $03, triple_Loop03
00099CC3 B809 BC03 8009             	dc.b	nG4, $09, nB4, $03, nRst, $09
00099CC9                            
00099CC9                            triple_Loop04:
00099CC9 C430 C311 8001 C612 C30B+  	dc.b	nG5, $30, nFs5, $11, nRst, $01, nA5, $12, nFs5, $0B, nRst, $01
00099CD5 C436 C303 C4C3 06C1 BFBD+  	dc.b	nG5, $36, nFs5, $03, nG5, nFs5, $06, nE5, nD5, nC5, nB4, nA4
00099CE1 F700 02FF E4               	smpsLoop            $00, $02, triple_Loop04
00099CE6 8003                       	dc.b	nRst, $03
00099CE8                            
00099CE8                            triple_Loop05:
00099CE8 B809 BC03 800C             	dc.b	nG4, $09, nB4, $03, nRst, $0C
00099CEE F700 03FF F6               	smpsLoop            $00, $03, triple_Loop05
00099CF3 B809 BC03 8021             	dc.b	nG4, $09, nB4, $03, nRst, $21
00099CF9 E0C0                       	smpsPan             panCenter, $00
00099CFB F6FF 94                    	smpsJump triple_FM4
00099CFE                            
00099CFE                            ; PSG1 Data
00099CFE                            triple_PSG1:
00099CFE 8018                       	dc.b	nRst, $18
00099D00                            
00099D00                            triple_Loop0E:
00099D00 A002 8001 9B02 8001 9B02+  	dc.b	nG2, $02, nRst, $01, nD2, $02, nRst, $01, nD2, $02, nRst, $04
00099D0C 9B02 8004 9902 8004 9802+  	dc.b	nD2, $02, nRst, $04, nC2, $02, nRst, $04, nB1, $02, nRst, $01
00099D18 9902 8001 9B02 8004 9B02+  	dc.b	nC2, $02, nRst, $01, nD2, $02, nRst, $04, nD2, $02, nRst, $04
00099D24 9402 8004                  	dc.b	nG1, $02, nRst, $04
00099D28 F700 07FF D4               	smpsLoop            $00, $07, triple_Loop0E
00099D2D A002 8001 9B02 8001 9B02+  	dc.b	nG2, $02, nRst, $01, nD2, $02, nRst, $01, nD2, $02, nRst, $04
00099D39 9B02 8004 9902 8004 9802+  	dc.b	nD2, $02, nRst, $04, nC2, $02, nRst, $04, nB1, $02, nRst, $01
00099D45 9902 8001 9B02 8004 9B02+  	dc.b	nC2, $02, nRst, $01, nD2, $02, nRst, $04, nD2, $02, nRst, $04
00099D51 9402 8007                  	dc.b	nG1, $02, nRst, $07
00099D55                            
00099D55                            triple_Loop0F:
00099D55 9109 9403 800C             	dc.b	nE1, $09, nG1, $03, nRst, $0C
00099D5B F700 03FF F6               	smpsLoop            $00, $03, triple_Loop0F
00099D60 9109 9403 8009             	dc.b	nE1, $09, nG1, $03, nRst, $09
00099D66                            
00099D66                            triple_Loop10:
00099D66 A002 8001 9B02 8001 9B02+  	dc.b	nG2, $02, nRst, $01, nD2, $02, nRst, $01, nD2, $02, nRst, $04
00099D72 9B02 8004 9902 8004 9802+  	dc.b	nD2, $02, nRst, $04, nC2, $02, nRst, $04, nB1, $02, nRst, $01
00099D7E 9902 8001 9B02 8004 9B02+  	dc.b	nC2, $02, nRst, $01, nD2, $02, nRst, $04, nD2, $02, nRst, $04
00099D8A 9402 8004                  	dc.b	nG1, $02, nRst, $04
00099D8E F700 07FF D4               	smpsLoop            $00, $07, triple_Loop10
00099D93 A002 8001 9B02 8001 9B02+  	dc.b	nG2, $02, nRst, $01, nD2, $02, nRst, $01, nD2, $02, nRst, $04
00099D9F 9B02 8004 9902 8004 9802+  	dc.b	nD2, $02, nRst, $04, nC2, $02, nRst, $04, nB1, $02, nRst, $01
00099DAB 9902 8001 9B02 8004 9B02+  	dc.b	nC2, $02, nRst, $01, nD2, $02, nRst, $04, nD2, $02, nRst, $04
00099DB7 9402 8007                  	dc.b	nG1, $02, nRst, $07
00099DBB                            
00099DBB                            triple_Loop11:
00099DBB 9109 9403 800C             	dc.b	nE1, $09, nG1, $03, nRst, $0C
00099DC1 F700 03FF F6               	smpsLoop            $00, $03, triple_Loop11
00099DC6 9109 9403 8021             	dc.b	nE1, $09, nG1, $03, nRst, $21
00099DCC F500                       	smpsPSGvoice        $00
00099DCE F6FF 2E                    	smpsJump triple_PSG1
00099DD1                            
00099DD1                            triple_Voices:
00099DD1                            ;	Voice $00
00099DD1                            ;	$3A
00099DD1                            ;	$01, $07, $01, $01, 	$8E, $8E, $8D, $53, 	$0E, $0E, $0E, $03
00099DD1                            ;	$00, $00, $00, $00, 	$1F, $FF, $1F, $0F, 	$18, $28, $27, $80
00099DD1                            	smpsVcAlgorithm     $02
00099DD1                            	smpsVcFeedback      $07
00099DD1                            	smpsVcUnusedBits    $00
00099DD1                            	smpsVcDetune        $00, $00, $00, $00
00099DD1                            	smpsVcCoarseFreq    $01, $01, $07, $01
00099DD1                            	smpsVcRateScale     $01, $02, $02, $02
00099DD1                            	smpsVcAttackRate    $13, $0D, $0E, $0E
00099DD1                            	smpsVcAmpMod        $00, $00, $00, $00
00099DD1                            	smpsVcDecayRate1    $03, $0E, $0E, $0E
00099DD1                            	smpsVcDecayRate2    $00, $00, $00, $00
00099DD1                            	smpsVcDecayLevel    $00, $01, $0F, $01
00099DD1                            	smpsVcReleaseRate   $0F, $0F, $0F, $0F
00099DD1 3A01 0701 018E 8E8D 530E+  	smpsVcTotalLevel    $00, $27, $28, $18
00099DEA                            
00099DEA                            ;	Voice $01
00099DEA                            ;	$20
00099DEA                            ;	$7A, $31, $00, $00, 	$9F, $D8, $DC, $DF, 	$10, $0A, $04, $04
00099DEA                            ;	$0F, $08, $08, $08, 	$5F, $5F, $BF, $BF, 	$14, $2B, $17, $80
00099DEA                            	smpsVcAlgorithm     $00
00099DEA                            	smpsVcFeedback      $04
00099DEA                            	smpsVcUnusedBits    $00
00099DEA                            	smpsVcDetune        $00, $00, $03, $07
00099DEA                            	smpsVcCoarseFreq    $00, $00, $01, $0A
00099DEA                            	smpsVcRateScale     $03, $03, $03, $02
00099DEA                            	smpsVcAttackRate    $1F, $1C, $18, $1F
00099DEA                            	smpsVcAmpMod        $00, $00, $00, $00
00099DEA                            	smpsVcDecayRate1    $04, $04, $0A, $10
00099DEA                            	smpsVcDecayRate2    $08, $08, $08, $0F
00099DEA                            	smpsVcDecayLevel    $0B, $0B, $05, $05
00099DEA                            	smpsVcReleaseRate   $0F, $0F, $0F, $0F
00099DEA 207A 3100 009F D8DC DF10+  	smpsVcTotalLevel    $00, $17, $2B, $14
00099DEA 207A 3100 009F D8DC DF10+  	smpsVcTotalLevel    $00, $17, $2B, $14
00099E04 00                         		even
00099E04                            Music88:	incbin	sound\music88.bin; Extra Life
00099EF2                            		even
00099EF2                            Music89:	incbin	sound\music89.bin; Special Stage
0009DDBA 00                         		even
0009DDBA                            Music8A:	incbin	sound\music8A.bin; Title Screen
0009DF84                            		even
0009DF84                            Music8B:	incbin	sound\music8B.bin; Ending Theme
0009E21E                            		even
0009E21E                            Music8C:	incbin	sound\music8C.bin; VS Boss
0009E4BC                            		even
0009E4BC                            Music8D:	incbin	sound\music8D.bin; Final Zone
0009E6D8                            		even
0009E6D8                            Music8E:	incbin	sound\fle.bin ;		Act Clear
0009EB46 00                         		even
0009EB46                            Music8F:	incbin	sound\music8F.bin ; Game Over
0009F186 00                         		even
0009F186                            Music90:	incbin	sound\music90.bin ; Continue
0009F520 00                         		even
0009F520                            Music91:	incbin	sound\music91.bin ; Credits
000A07EE                            		even
000A07EE                            Music92:	incbin	sound\music92.bin ; Drowning
000A0B30 00                         		even
000A0B30                            Music93:	incbin	sound\music93.bin ; Chaos Emerald
000A0C00                            		even
000A0C00                            Music94:	incbin	sound\music94.bin ; Green Hill Act 2
000A18D6 00                         		even
000A18D6                            Music95:	incbin	sound\music95.bin ; Green Hill Act 3
000A1910 00                         		even
000A1910                            Music96:	incbin	sound\music96.bin ; Labyrinth Act 2
000A194A 00                         		even
000A194A                            Music97:	incbin	sound\music97.bin ; Labyrinth Act 3
000A1984 00                         		even
000A1984                            Music98:	incbin	sound\music98.bin ; Marble Act 2
000A19BE 00                         		even
000A19BE                            Music99:	incbin	sound\music99.bin ; Marble Act 3
000A19F8 00                         		even
000A19F8                            Music9A:	incbin	sound\music9A.bin ; Star Light Act 2
000A1A32 00                         		even
000A1A32                            Music9B:	incbin	sound\music9B.bin ; Star Light Act 3
000A1A6C 00                         		even
000A1A6C                            Music9C:	incbin	sound\music9C.bin ; Spring Yard Act 2
000A1AA6 00                         		even
000A1AA6                            Music9D:	incbin	sound\music9D.bin ; Spring Yard Act 3
000A1AE0 00                         		even
000A1AE0                            Music9E:	incbin	sound\music9E.bin ; Scrap Brain Act 2
000A1FD0                            		even
000A1FD0                            Music9F:	include	sound\music9F.asm ; Scrap Brain Act 3
000A1FD0                            GentleBreeze_Header:
000A1FD0 =00000001                  smpsHeaderStartSong = 1
000A1FD0 0000                       	smpsHeaderVoice     GentleBreeze_Voices
000A1FD2 0603                       	smpsHeaderChan      $06, $03
000A1FD4 0100                       	smpsHeaderTempo     $01, $00
000A1FD6                            
000A1FDA 0000 0000                  	smpsHeaderFM        GentleBreeze_FM1,	$00, $00
000A1FDE 0000 0000                  	smpsHeaderFM        GentleBreeze_FM2,	$00, $00
000A1FE2 0000 0000                  	smpsHeaderFM        GentleBreeze_FM3,	$00, $00
000A1FE6 0000 0000                  	smpsHeaderFM        GentleBreeze_FM4,	$00, $00
000A1FEA 0000 0000                  	smpsHeaderFM        GentleBreeze_FM5,	$00, $00
000A1FEE 0000 0000 0000             	smpsHeaderPSG       GentleBreeze_PSG1,	$00, $00, $00, $00
000A1FF4 0000 0000 0000             	smpsHeaderPSG       GentleBreeze_PSG2,	$00, $00, $00, $00
000A1FFA 0000 0000 0000             	smpsHeaderPSG       GentleBreeze_PSG3,	$00, $00, $00, $00
000A2000                            
000A2000                            ; PSG3 Data
000A2000                            GentleBreeze_PSG3:
000A2000 F2                         	smpsStop
000A2001                            
000A2001                            ; FM1 Data
000A2001                            GentleBreeze_FM1:
000A2003 E0C0                       	smpsPan             panCenter, $00
000A2005 E1FF                       	smpsAlterNote       $FF
000A2007 C410                       	dc.b	nG5, $10
000A2009 E60F                       	smpsAlterVol        $0F
000A200B C4                         	dc.b	nG5
000A200C E6F1                       	smpsAlterVol        $F1
000A200E E100                       	smpsAlterNote       $00
000A2010 C2                         	dc.b	nF5
000A2011 E60F                       	smpsAlterVol        $0F
000A2013 08                         	dc.b	$08
000A2014 E6F1                       	smpsAlterVol        $F1
000A2016 C010                       	dc.b	nEb5, $10
000A2018 E60F                       	smpsAlterVol        $0F
000A201A C0                         	dc.b	nEb5
000A201B E6F1                       	smpsAlterVol        $F1
000A201D BDC0 C208 C910             	dc.b	nC5, nEb5, nF5, $08, nC6, $10
000A2023 E60F                       	smpsAlterVol        $0F
000A2025 C9                         	dc.b	nC6
000A2026 E6F1                       	smpsAlterVol        $F1
000A2028 C5                         	dc.b	nAb5
000A2029 E60F                       	smpsAlterVol        $0F
000A202B 08                         	dc.b	$08
000A202C E6F1                       	smpsAlterVol        $F1
000A202E C010                       	dc.b	nEb5, $10
000A2030 E60F                       	smpsAlterVol        $0F
000A2032 C0                         	dc.b	nEb5
000A2033 E6F1                       	smpsAlterVol        $F1
000A2035 C208                       	dc.b	nF5, $08
000A2037 E1FF                       	smpsAlterNote       $FF
000A2039 C410                       	dc.b	nG5, $10
000A203B E100                       	smpsAlterNote       $00
000A203D C5C7                       	dc.b	nAb5, nBb5
000A203F E60F                       	smpsAlterVol        $0F
000A2041 C7                         	dc.b	nBb5
000A2042 E6F1                       	smpsAlterVol        $F1
000A2044 C5                         	dc.b	nAb5
000A2045 E60F                       	smpsAlterVol        $0F
000A2047 08                         	dc.b	$08
000A2048 E6F1                       	smpsAlterVol        $F1
000A204A E1FF                       	smpsAlterNote       $FF
000A204C C410                       	dc.b	nG5, $10
000A204E E60F                       	smpsAlterVol        $0F
000A2050 C4                         	dc.b	nG5
000A2051 E6F1                       	smpsAlterVol        $F1
000A2053 C4                         	dc.b	nG5
000A2054 E100                       	smpsAlterNote       $00
000A2056 C208 C010 C2               	dc.b	nF5, $08, nEb5, $10, nF5
000A205B E60F                       	smpsAlterVol        $0F
000A205D C2                         	dc.b	nF5
000A205E E6F1                       	smpsAlterVol        $F1
000A2060 E1FF                       	smpsAlterNote       $FF
000A2062 C4                         	dc.b	nG5
000A2063 E60F                       	smpsAlterVol        $0F
000A2065 08                         	dc.b	$08
000A2066 E6F1                       	smpsAlterVol        $F1
000A2068 10                         	dc.b	$10
000A2069 E60F                       	smpsAlterVol        $0F
000A206B 38                         	dc.b	$38
000A206C E6F1                       	smpsAlterVol        $F1
000A206E 10                         	dc.b	$10
000A206F E60F                       	smpsAlterVol        $0F
000A2071 C4                         	dc.b	nG5
000A2072 E6F1                       	smpsAlterVol        $F1
000A2074 E100                       	smpsAlterNote       $00
000A2076 C2                         	dc.b	nF5
000A2077 E60F                       	smpsAlterVol        $0F
000A2079 08                         	dc.b	$08
000A207A E6F1                       	smpsAlterVol        $F1
000A207C C010                       	dc.b	nEb5, $10
000A207E E60F                       	smpsAlterVol        $0F
000A2080 C0                         	dc.b	nEb5
000A2081 E6F1                       	smpsAlterVol        $F1
000A2083 BDC0 C208 C910             	dc.b	nC5, nEb5, nF5, $08, nC6, $10
000A2089 E60F                       	smpsAlterVol        $0F
000A208B C9                         	dc.b	nC6
000A208C E6F1                       	smpsAlterVol        $F1
000A208E C5                         	dc.b	nAb5
000A208F E60F                       	smpsAlterVol        $0F
000A2091 08                         	dc.b	$08
000A2092 E6F1                       	smpsAlterVol        $F1
000A2094 C010                       	dc.b	nEb5, $10
000A2096 E60F                       	smpsAlterVol        $0F
000A2098 C0                         	dc.b	nEb5
000A2099 E6F1                       	smpsAlterVol        $F1
000A209B C208                       	dc.b	nF5, $08
000A209D E1FF                       	smpsAlterNote       $FF
000A209F C410                       	dc.b	nG5, $10
000A20A1 E100                       	smpsAlterNote       $00
000A20A3 C5C7                       	dc.b	nAb5, nBb5
000A20A5 E60F                       	smpsAlterVol        $0F
000A20A7 C7                         	dc.b	nBb5
000A20A8 E6F1                       	smpsAlterVol        $F1
000A20AA C5                         	dc.b	nAb5
000A20AB E60F                       	smpsAlterVol        $0F
000A20AD 08                         	dc.b	$08
000A20AE E6F1                       	smpsAlterVol        $F1
000A20B0 E1FF                       	smpsAlterNote       $FF
000A20B2 C410                       	dc.b	nG5, $10
000A20B4 E60F                       	smpsAlterVol        $0F
000A20B6 C4                         	dc.b	nG5
000A20B7 E6F1                       	smpsAlterVol        $F1
000A20B9 C4                         	dc.b	nG5
000A20BA E100                       	smpsAlterNote       $00
000A20BC C208 C010 C2               	dc.b	nF5, $08, nEb5, $10, nF5
000A20C1 E60F                       	smpsAlterVol        $0F
000A20C3 28                         	dc.b	$28
000A20C4 E6F1                       	smpsAlterVol        $F1
000A20C6 C008 10                    	dc.b	nEb5, $08, $10
000A20C9 E60F                       	smpsAlterVol        $0F
000A20CB 21                         	dc.b	$21
000A20CC                            
000A20CC                            GentleBreeze_Loop12:
000A20CC E7C0 7F                    	dc.b	smpsNoAttack, nEb5, $7F
000A20CF F700 08FF F9               	smpsLoop            $00, $08, GentleBreeze_Loop12
000A20D4 E717                       	dc.b	smpsNoAttack, $17
000A20D6 E6F1                       	smpsAlterVol        $F1
000A20D8 E1FF                       	smpsAlterNote       $FF
000A20DA C410                       	dc.b	nG5, $10
000A20DC E60F                       	smpsAlterVol        $0F
000A20DE C4                         	dc.b	nG5
000A20DF E6F1                       	smpsAlterVol        $F1
000A20E1 E100                       	smpsAlterNote       $00
000A20E3 C2                         	dc.b	nF5
000A20E4 E60F                       	smpsAlterVol        $0F
000A20E6 08                         	dc.b	$08
000A20E7 E6F1                       	smpsAlterVol        $F1
000A20E9 C010                       	dc.b	nEb5, $10
000A20EB E60F                       	smpsAlterVol        $0F
000A20ED C0                         	dc.b	nEb5
000A20EE E6F1                       	smpsAlterVol        $F1
000A20F0 BDC0 C208 C910             	dc.b	nC5, nEb5, nF5, $08, nC6, $10
000A20F6 E60F                       	smpsAlterVol        $0F
000A20F8 C9                         	dc.b	nC6
000A20F9 E6F1                       	smpsAlterVol        $F1
000A20FB C5                         	dc.b	nAb5
000A20FC E60F                       	smpsAlterVol        $0F
000A20FE 08                         	dc.b	$08
000A20FF E6F1                       	smpsAlterVol        $F1
000A2101 C010                       	dc.b	nEb5, $10
000A2103 E60F                       	smpsAlterVol        $0F
000A2105 C0                         	dc.b	nEb5
000A2106 E6F1                       	smpsAlterVol        $F1
000A2108 C208                       	dc.b	nF5, $08
000A210A E1FF                       	smpsAlterNote       $FF
000A210C C410                       	dc.b	nG5, $10
000A210E E100                       	smpsAlterNote       $00
000A2110 C5C7                       	dc.b	nAb5, nBb5
000A2112 E60F                       	smpsAlterVol        $0F
000A2114 C7                         	dc.b	nBb5
000A2115 E6F1                       	smpsAlterVol        $F1
000A2117 C5                         	dc.b	nAb5
000A2118 E60F                       	smpsAlterVol        $0F
000A211A 08                         	dc.b	$08
000A211B E6F1                       	smpsAlterVol        $F1
000A211D E1FF                       	smpsAlterNote       $FF
000A211F C410                       	dc.b	nG5, $10
000A2121 E60F                       	smpsAlterVol        $0F
000A2123 C4                         	dc.b	nG5
000A2124 E6F1                       	smpsAlterVol        $F1
000A2126 C4                         	dc.b	nG5
000A2127 E100                       	smpsAlterNote       $00
000A2129 C208 C010 C2               	dc.b	nF5, $08, nEb5, $10, nF5
000A212E E60F                       	smpsAlterVol        $0F
000A2130 C2                         	dc.b	nF5
000A2131 E6F1                       	smpsAlterVol        $F1
000A2133 E1FF                       	smpsAlterNote       $FF
000A2135 C4                         	dc.b	nG5
000A2136 E60F                       	smpsAlterVol        $0F
000A2138 08                         	dc.b	$08
000A2139 E6F1                       	smpsAlterVol        $F1
000A213B 10                         	dc.b	$10
000A213C E60F                       	smpsAlterVol        $0F
000A213E 38                         	dc.b	$38
000A213F E6F1                       	smpsAlterVol        $F1
000A2141 10                         	dc.b	$10
000A2142 E60F                       	smpsAlterVol        $0F
000A2144 C4                         	dc.b	nG5
000A2145 E6F1                       	smpsAlterVol        $F1
000A2147 E100                       	smpsAlterNote       $00
000A2149 C2                         	dc.b	nF5
000A214A E60F                       	smpsAlterVol        $0F
000A214C 08                         	dc.b	$08
000A214D E6F1                       	smpsAlterVol        $F1
000A214F C010                       	dc.b	nEb5, $10
000A2151 E60F                       	smpsAlterVol        $0F
000A2153 C0                         	dc.b	nEb5
000A2154 E6F1                       	smpsAlterVol        $F1
000A2156 BDC0 C208 C910             	dc.b	nC5, nEb5, nF5, $08, nC6, $10
000A215C E60F                       	smpsAlterVol        $0F
000A215E C9                         	dc.b	nC6
000A215F E6F1                       	smpsAlterVol        $F1
000A2161 C5                         	dc.b	nAb5
000A2162 E60F                       	smpsAlterVol        $0F
000A2164 08                         	dc.b	$08
000A2165 E6F1                       	smpsAlterVol        $F1
000A2167 C010                       	dc.b	nEb5, $10
000A2169 E60F                       	smpsAlterVol        $0F
000A216B C0                         	dc.b	nEb5
000A216C E6F1                       	smpsAlterVol        $F1
000A216E C208                       	dc.b	nF5, $08
000A2170 E1FF                       	smpsAlterNote       $FF
000A2172 C410                       	dc.b	nG5, $10
000A2174 E100                       	smpsAlterNote       $00
000A2176 C5C7                       	dc.b	nAb5, nBb5
000A2178 E60F                       	smpsAlterVol        $0F
000A217A C7                         	dc.b	nBb5
000A217B E6F1                       	smpsAlterVol        $F1
000A217D C5                         	dc.b	nAb5
000A217E E60F                       	smpsAlterVol        $0F
000A2180 08                         	dc.b	$08
000A2181 E6F1                       	smpsAlterVol        $F1
000A2183 E1FF                       	smpsAlterNote       $FF
000A2185 C410                       	dc.b	nG5, $10
000A2187 E60F                       	smpsAlterVol        $0F
000A2189 C4                         	dc.b	nG5
000A218A E6F1                       	smpsAlterVol        $F1
000A218C C4                         	dc.b	nG5
000A218D E100                       	smpsAlterNote       $00
000A218F C208 C010 C2               	dc.b	nF5, $08, nEb5, $10, nF5
000A2194 E60F                       	smpsAlterVol        $0F
000A2196 28                         	dc.b	$28
000A2197 E6F1                       	smpsAlterVol        $F1
000A2199 C008 10                    	dc.b	nEb5, $08, $10
000A219C E60F                       	smpsAlterVol        $0F
000A219E 21                         	dc.b	$21
000A219F E0C0                       	smpsPan             panCenter, $00
000A21A1 F6FF 29                    	smpsJump            GentleBreeze_Loop12
000A21A4                            
000A21A4                            ; FM2 Data
000A21A4                            GentleBreeze_FM2:
000A21A6 E60C                       	smpsAlterVol        $0C
000A21A8 E0C0                       	smpsPan             panCenter, $00
000A21AA 9E20 A018 A508 8040 A020+  	dc.b	nF2, $20, nG2, $18, nC3, $08, nRst, $40, nG2, $20, nF2, $18
000A21B6 A508 8020 A010 9E9E 20A0+  	dc.b	nC3, $08, nRst, $20, nG2, $10, nF2, nF2, $20, nG2, $18, nC3
000A21C2 0880 409E 38A0 489E 20A0+  	dc.b	$08, nRst, $40, nF2, $38, nG2, $48, nF2, $20, nG2, $18, nC3
000A21CE 0880 40A0 209E 18A5 0880+  	dc.b	$08, nRst, $40, nG2, $20, nF2, $18, nC3, $08, nRst, $20, nG2
000A21DA 109E 9E20 A018 A508 8040+  	dc.b	$10, nF2, nF2, $20, nG2, $18, nC3, $08, nRst, $40, nF2, $38
000A21E6 A039                       	dc.b	nG2, $39
000A21E8                            
000A21E8                            GentleBreeze_Jump04:
000A21E8 E7A0 0F                    	dc.b	smpsNoAttack, nG2, $0F
000A21EB                            
000A21EB                            GentleBreeze_Loop11:
000A21EB A118 0880 10A1 2008 A09E+  	dc.b	nAb2, $18, $08, nRst, $10, nAb2, $20, $08, nG2, nF2, nFs2, nG2
000A21F7 A1A0 1808 8010 A020 0880+  	dc.b	nAb2, nG2, $18, $08, nRst, $10, nG2, $20, $08, nRst, nG2, nC3
000A2203 189E A020 A510 A008 A518+  	dc.b	$18, nF2, nG2, $20, nC3, $10, nG2, $08, nC3, $18, nG2, $08
000A220F 9FA0 9C18 979C 2008 9EA2+  	dc.b	nFs2, nG2, nEb2, $18, nBb1, nEb2, $20, $08, nF2, nA2, nEb3, nB2
000A221B A3                         	dc.b	nBb2
000A221C F700 02FF CB               	smpsLoop            $00, $02, GentleBreeze_Loop11
000A2221 9E20 A018 A508 8040 A020+  	dc.b	nF2, $20, nG2, $18, nC3, $08, nRst, $40, nG2, $20, nF2, $18
000A222D A508 8020 A010 9E9E 20A0+  	dc.b	nC3, $08, nRst, $20, nG2, $10, nF2, nF2, $20, nG2, $18, nC3
000A2239 0880 409E 38A0 489E 20A0+  	dc.b	$08, nRst, $40, nF2, $38, nG2, $48, nF2, $20, nG2, $18, nC3
000A2245 0880 40A0 209E 18A5 0880+  	dc.b	$08, nRst, $40, nG2, $20, nF2, $18, nC3, $08, nRst, $20, nG2
000A2251 109E 9E20 A018 A508 8040+  	dc.b	$10, nF2, nF2, $20, nG2, $18, nC3, $08, nRst, $40, nF2, $38
000A225D A039                       	dc.b	nG2, $39
000A225F E0C0                       	smpsPan             panCenter, $00
000A2261 F6FF 85                    	smpsJump            GentleBreeze_Jump04
000A2264                            
000A2264                            ; FM3 Data
000A2264                            GentleBreeze_FM3:
000A2266 E0C0                       	smpsPan             panCenter, $00
000A2268 807F 7F7F 7F04             	dc.b	nRst, $7F, $7F, $7F, $7F, $04
000A2270 E616                       	smpsAlterVol        $16
000A2272 F000 0207 03               	smpsModSet          $00, $02, $07, $03
000A2277                            
000A2277                            GentleBreeze_Loop0F:
000A2277 C008 BDC9                  	dc.b	nEb5, $08, nC5, nC6
000A227B E1FF                       	smpsAlterNote       $FF
000A227D C4                         	dc.b	nG5
000A227E E100                       	smpsAlterNote       $00
000A2280 C0BB BDC0 10               	dc.b	nEb5, nBb4, nC5, nEb5, $10
000A2285 E608                       	smpsAlterVol        $08
000A2287 C080 08                    	dc.b	nEb5, nRst, $08
000A228A E6F8                       	smpsAlterVol        $F8
000A228C C7                         	dc.b	nBb5
000A228D E1FF                       	smpsAlterNote       $FF
000A228F C4                         	dc.b	nG5
000A2290 E100                       	smpsAlterNote       $00
000A2292 C0BB                       	dc.b	nEb5, nBb4
000A2294 F700 02FF DF               	smpsLoop            $00, $02, GentleBreeze_Loop0F
000A2299 C0BD C9                    	dc.b	nEb5, nC5, nC6
000A229C E1FF                       	smpsAlterNote       $FF
000A229E C4                         	dc.b	nG5
000A229F E100                       	smpsAlterNote       $00
000A22A1 C0BB BDC0 10               	dc.b	nEb5, nBb4, nC5, nEb5, $10
000A22A6 E608                       	smpsAlterVol        $08
000A22A8 C080 08                    	dc.b	nEb5, nRst, $08
000A22AB E6F8                       	smpsAlterVol        $F8
000A22AD E1FF                       	smpsAlterNote       $FF
000A22AF C4                         	dc.b	nG5
000A22B0 E100                       	smpsAlterNote       $00
000A22B2 C2C0 BBC0 BBC7 C5          	dc.b	nF5, nEb5, nBb4, nEb5, nBb4, nBb5, nAb5
000A22B9 E1FF                       	smpsAlterNote       $FF
000A22BB C4                         	dc.b	nG5
000A22BC E100                       	smpsAlterNote       $00
000A22BE C2C0 BBBB C0               	dc.b	nF5, nEb5, nBb4, nBb4, nEb5
000A22C3 E1FF                       	smpsAlterNote       $FF
000A22C5 C4                         	dc.b	nG5
000A22C6 E100                       	smpsAlterNote       $00
000A22C8 C7                         	dc.b	nBb5
000A22C9 E1FF                       	smpsAlterNote       $FF
000A22CB C4                         	dc.b	nG5
000A22CC E100                       	smpsAlterNote       $00
000A22CE C2C0 01                    	dc.b	nF5, nEb5, $01
000A22D1                            
000A22D1                            GentleBreeze_Jump03:
000A22D1 E7C0 07BB 08               	dc.b	smpsNoAttack, nEb5, $07, nBb4, $08
000A22D8 E6FA                       	smpsAlterVol        $FA
000A22DA F4                         	smpsModOff
000A22DB E1FF                       	smpsAlterNote       $FF
000A22DD B850                       	dc.b	nG4, $50
000A22DF E100                       	smpsAlterNote       $00
000A22E1 B408 B1B4 B5B6 AF18 B510+  	dc.b	nEb4, $08, nC4, nEb4, nE4, nF4, nBb3, $18, nE4, $10, nF4, $08
000A22ED E1FF                       	smpsAlterNote       $FF
000A22EF B810                       	dc.b	nG4, $10
000A22F1 E100                       	smpsAlterNote       $00
000A22F3 BB18 B908 80               	dc.b	nBb4, $18, nAb4, $08, nRst
000A22F8 E1FF                       	smpsAlterNote       $FF
000A22FA B8                         	dc.b	nG4
000A22FB E100                       	smpsAlterNote       $00
000A22FD B610                       	dc.b	nF4, $10
000A22FF E1FF                       	smpsAlterNote       $FF
000A2301 B850                       	dc.b	nG4, $50
000A2303 E100                       	smpsAlterNote       $00
000A2305 B608 B410 08B6 AF60        	dc.b	nF4, $08, nEb4, $10, $08, nF4, nBb3, $60
000A230D E1FF                       	smpsAlterNote       $FF
000A230F AC08                       	dc.b	nG3, $08
000A2311 E100                       	smpsAlterNote       $00
000A2313 AFB3 B4B6 B7               	dc.b	nBb3, nD4, nEb4, nF4, nFs4
000A2318 E1FF                       	smpsAlterNote       $FF
000A231A B850                       	dc.b	nG4, $50
000A231C E100                       	smpsAlterNote       $00
000A231E BB08                       	dc.b	nBb4, $08
000A2320 E1FF                       	smpsAlterNote       $FF
000A2322 B8                         	dc.b	nG4
000A2323 E100                       	smpsAlterNote       $00
000A2325 BDBB B6                    	dc.b	nC5, nBb4, nF4
000A2328 E1FF                       	smpsAlterNote       $FF
000A232A B810 08                    	dc.b	nG4, $10, $08
000A232D E100                       	smpsAlterNote       $00
000A232F B6                         	dc.b	nF4
000A2330 E1FF                       	smpsAlterNote       $FF
000A2332 B880                       	dc.b	nG4, nRst
000A2334 E100                       	smpsAlterNote       $00
000A2336 BBB9 BB                    	dc.b	nBb4, nAb4, nBb4
000A2339 E1FF                       	smpsAlterNote       $FF
000A233B B810                       	dc.b	nG4, $10
000A233D E100                       	smpsAlterNote       $00
000A233F B308 B4B1 AFB4 B5          	dc.b	nD4, $08, nEb4, nC4, nBb3, nEb4, nE4
000A2346 E1FF                       	smpsAlterNote       $FF
000A2348 B87F E77F E702 807F 7F7F+  	dc.b	nG4, $7F, smpsNoAttack, $7F, smpsNoAttack, $02, nRst, $7F, $7F, $7F, $7F, $04
000A2356 E606                       	smpsAlterVol        $06
000A2358 F000 0207 03               	smpsModSet          $00, $02, $07, $03
000A235D E100                       	smpsAlterNote       $00
000A235F                            
000A235F                            GentleBreeze_Loop10:
000A235F C008 BDC9                  	dc.b	nEb5, $08, nC5, nC6
000A2363 E1FF                       	smpsAlterNote       $FF
000A2365 C4                         	dc.b	nG5
000A2366 E100                       	smpsAlterNote       $00
000A2368 C0BB BDC0 10               	dc.b	nEb5, nBb4, nC5, nEb5, $10
000A236D E608                       	smpsAlterVol        $08
000A236F C080 08                    	dc.b	nEb5, nRst, $08
000A2372 E6F8                       	smpsAlterVol        $F8
000A2374 C7                         	dc.b	nBb5
000A2375 E1FF                       	smpsAlterNote       $FF
000A2377 C4                         	dc.b	nG5
000A2378 E100                       	smpsAlterNote       $00
000A237A C0BB                       	dc.b	nEb5, nBb4
000A237C F700 02FF DF               	smpsLoop            $00, $02, GentleBreeze_Loop10
000A2381 C0BD C9                    	dc.b	nEb5, nC5, nC6
000A2384 E1FF                       	smpsAlterNote       $FF
000A2386 C4                         	dc.b	nG5
000A2387 E100                       	smpsAlterNote       $00
000A2389 C0BB BDC0 10               	dc.b	nEb5, nBb4, nC5, nEb5, $10
000A238E E608                       	smpsAlterVol        $08
000A2390 C080 08                    	dc.b	nEb5, nRst, $08
000A2393 E6F8                       	smpsAlterVol        $F8
000A2395 E1FF                       	smpsAlterNote       $FF
000A2397 C4                         	dc.b	nG5
000A2398 E100                       	smpsAlterNote       $00
000A239A C2C0 BBC0 BBC7 C5          	dc.b	nF5, nEb5, nBb4, nEb5, nBb4, nBb5, nAb5
000A23A1 E1FF                       	smpsAlterNote       $FF
000A23A3 C4                         	dc.b	nG5
000A23A4 E100                       	smpsAlterNote       $00
000A23A6 C2C0 BBBB C0               	dc.b	nF5, nEb5, nBb4, nBb4, nEb5
000A23AB E1FF                       	smpsAlterNote       $FF
000A23AD C4                         	dc.b	nG5
000A23AE E100                       	smpsAlterNote       $00
000A23B0 C7                         	dc.b	nBb5
000A23B1 E1FF                       	smpsAlterNote       $FF
000A23B3 C4                         	dc.b	nG5
000A23B4 E100                       	smpsAlterNote       $00
000A23B6 C2C0 01                    	dc.b	nF5, nEb5, $01
000A23B9 E0C0                       	smpsPan             panCenter, $00
000A23BB F1                         	smpsModOn
000A23BC F6FF 13                    	smpsJump            GentleBreeze_Jump03
000A23BF                            
000A23BF                            ; FM4 Data
000A23BF                            GentleBreeze_FM4:
000A23C1 E0C0                       	smpsPan             panCenter, $00
000A23C3 80                         	dc.b	nRst
000A23C4                            
000A23C4                            GentleBreeze_Loop0D:
000A23C4 7F                         	dc.b	$7F
000A23C5 F700 07FF FB               	smpsLoop            $00, $07, GentleBreeze_Loop0D
000A23CA 77                         	dc.b	$77
000A23CD E609                       	smpsAlterVol        $09
000A23CF C001                       	dc.b	nEb5, $01
000A23D1                            
000A23D1                            GentleBreeze_Jump02:
000A23D1 E7C0 07C2 08               	dc.b	smpsNoAttack, nEb5, $07, nF5, $08
000A23D6 E607                       	smpsAlterVol        $07
000A23D8 E1FF                       	smpsAlterNote       $FF
000A23DA C450                       	dc.b	nG5, $50
000A23DC E100                       	smpsAlterNote       $00
000A23DE C008 BDC0 C1C2 BB18 C110+  	dc.b	nEb5, $08, nC5, nEb5, nE5, nF5, nBb4, $18, nE5, $10, nF5, $08
000A23EA E1FF                       	smpsAlterNote       $FF
000A23EC C410                       	dc.b	nG5, $10
000A23EE E100                       	smpsAlterNote       $00
000A23F0 C718 C508 80               	dc.b	nBb5, $18, nAb5, $08, nRst
000A23F5 E1FF                       	smpsAlterNote       $FF
000A23F7 C4                         	dc.b	nG5
000A23F8 E100                       	smpsAlterNote       $00
000A23FA C210                       	dc.b	nF5, $10
000A23FC E1FF                       	smpsAlterNote       $FF
000A23FE C450                       	dc.b	nG5, $50
000A2400 E100                       	smpsAlterNote       $00
000A2402 C208 C010 08C2 BB60        	dc.b	nF5, $08, nEb5, $10, $08, nF5, nBb4, $60
000A240A E1FF                       	smpsAlterNote       $FF
000A240C B808                       	dc.b	nG4, $08
000A240E E100                       	smpsAlterNote       $00
000A2410 BBBF C0C2 C3               	dc.b	nBb4, nD5, nEb5, nF5, nFs5
000A2415 E1FF                       	smpsAlterNote       $FF
000A2417 C450                       	dc.b	nG5, $50
000A2419 E100                       	smpsAlterNote       $00
000A241B C708                       	dc.b	nBb5, $08
000A241D E1FF                       	smpsAlterNote       $FF
000A241F C4                         	dc.b	nG5
000A2420 E100                       	smpsAlterNote       $00
000A2422 C9C7 C2                    	dc.b	nC6, nBb5, nF5
000A2425 E1FF                       	smpsAlterNote       $FF
000A2427 C410 08                    	dc.b	nG5, $10, $08
000A242A E100                       	smpsAlterNote       $00
000A242C C2                         	dc.b	nF5
000A242D E1FF                       	smpsAlterNote       $FF
000A242F C480                       	dc.b	nG5, nRst
000A2431 E100                       	smpsAlterNote       $00
000A2433 C7C5 C7                    	dc.b	nBb5, nAb5, nBb5
000A2436 E1FF                       	smpsAlterNote       $FF
000A2438 C410                       	dc.b	nG5, $10
000A243A E100                       	smpsAlterNote       $00
000A243C BF08 C0BD BBC0 C1          	dc.b	nD5, $08, nEb5, nC5, nBb4, nEb5, nE5
000A2443 E1FF                       	smpsAlterNote       $FF
000A2445 C47F E701 7FE7 0180        	dc.b	nG5, $7F, smpsNoAttack, $01, $7F, smpsNoAttack, $01, nRst
000A244D                            
000A244D                            GentleBreeze_Loop0E:
000A244D 7F                         	dc.b	$7F
000A244E F700 07FF FB               	smpsLoop            $00, $07, GentleBreeze_Loop0E
000A2453 77                         	dc.b	$77
000A2454 E100                       	smpsAlterNote       $00
000A2456 C001                       	dc.b	nEb5, $01
000A2458 E6F9                       	smpsAlterVol        $F9
000A245A E0C0                       	smpsPan             panCenter, $00
000A245C E100                       	smpsAlterNote       $00
000A245E F6FF 71                    	smpsJump            GentleBreeze_Jump02
000A2461                            
000A2461                            ; FM5 Data
000A2461                            GentleBreeze_FM5:
000A2463 E0C0                       	smpsPan             panCenter, $00
000A2465 A5                         	dc.b	nC3
000A2466                            
000A2466                            GentleBreeze_Loop06:
000A2466 10                         	dc.b	$10
000A2467 E607                       	smpsAlterVol        $07
000A2469 A5                         	dc.b	nC3
000A246A E6F9                       	smpsAlterVol        $F9
000A246C 08                         	dc.b	$08
000A246D E607                       	smpsAlterVol        $07
000A246F A5                         	dc.b	nC3
000A2470 E608                       	smpsAlterVol        $08
000A2472 A5                         	dc.b	nC3
000A2473 E6F1                       	smpsAlterVol        $F1
000A2475 18                         	dc.b	$18
000A2476 E607                       	smpsAlterVol        $07
000A2478 10                         	dc.b	$10
000A2479 E608                       	smpsAlterVol        $08
000A247B A5                         	dc.b	nC3
000A247C E6F1                       	smpsAlterVol        $F1
000A247E A5                         	dc.b	nC3
000A247F F700 03FF E3               	smpsLoop            $00, $03, GentleBreeze_Loop06
000A2484 A5                         	dc.b	nC3
000A2485                            
000A2485                            GentleBreeze_Loop07:
000A2485 E607                       	smpsAlterVol        $07
000A2487 A5                         	dc.b	nC3
000A2488 E6F9                       	smpsAlterVol        $F9
000A248A 08                         	dc.b	$08
000A248B E607                       	smpsAlterVol        $07
000A248D A5                         	dc.b	nC3
000A248E E608                       	smpsAlterVol        $08
000A2490 A5                         	dc.b	nC3
000A2491 E6F1                       	smpsAlterVol        $F1
000A2493 10                         	dc.b	$10
000A2494 F700 02FF ED               	smpsLoop            $00, $02, GentleBreeze_Loop07
000A2499                            
000A2499                            GentleBreeze_Loop08:
000A2499 A5                         	dc.b	nC3
000A249A E607                       	smpsAlterVol        $07
000A249C A5                         	dc.b	nC3
000A249D E6F9                       	smpsAlterVol        $F9
000A249F 08                         	dc.b	$08
000A24A0 E607                       	smpsAlterVol        $07
000A24A2 A5                         	dc.b	nC3
000A24A3 E608                       	smpsAlterVol        $08
000A24A5 A5                         	dc.b	nC3
000A24A6 E6F1                       	smpsAlterVol        $F1
000A24A8 18                         	dc.b	$18
000A24A9 E607                       	smpsAlterVol        $07
000A24AB 10                         	dc.b	$10
000A24AC E608                       	smpsAlterVol        $08
000A24AE A5                         	dc.b	nC3
000A24AF E6F1                       	smpsAlterVol        $F1
000A24B1 A5                         	dc.b	nC3
000A24B2 F700 03FF E3               	smpsLoop            $00, $03, GentleBreeze_Loop08
000A24B7 A5                         	dc.b	nC3
000A24B8 E607                       	smpsAlterVol        $07
000A24BA A5                         	dc.b	nC3
000A24BB E6F9                       	smpsAlterVol        $F9
000A24BD 08                         	dc.b	$08
000A24BE E607                       	smpsAlterVol        $07
000A24C0 A5                         	dc.b	nC3
000A24C1 E608                       	smpsAlterVol        $08
000A24C3 A5                         	dc.b	nC3
000A24C4 E6F1                       	smpsAlterVol        $F1
000A24C6 10                         	dc.b	$10
000A24C7 E607                       	smpsAlterVol        $07
000A24C9 A5                         	dc.b	nC3
000A24CA E6F9                       	smpsAlterVol        $F9
000A24CC 08                         	dc.b	$08
000A24CD E607                       	smpsAlterVol        $07
000A24CF A5                         	dc.b	nC3
000A24D0 E608                       	smpsAlterVol        $08
000A24D2 A5                         	dc.b	nC3
000A24D3 E6F1                       	smpsAlterVol        $F1
000A24D5 01                         	dc.b	$01
000A24D6                            
000A24D6                            GentleBreeze_Jump01:
000A24D6 E7A5 0F                    	dc.b	smpsNoAttack, nC3, $0F
000A24D9 E607                       	smpsAlterVol        $07
000A24DB                            
000A24DB                            GentleBreeze_Loop09:
000A24DB 10                         	dc.b	$10
000A24DC E608                       	smpsAlterVol        $08
000A24DE A5                         	dc.b	nC3
000A24DF E6F1                       	smpsAlterVol        $F1
000A24E1 08                         	dc.b	$08
000A24E2 E60F                       	smpsAlterVol        $0F
000A24E4 18                         	dc.b	$18
000A24E5 E6F8                       	smpsAlterVol        $F8
000A24E7 F700 0FFF F0               	smpsLoop            $00, $0F, GentleBreeze_Loop09
000A24EC 10                         	dc.b	$10
000A24ED E608                       	smpsAlterVol        $08
000A24EF A5                         	dc.b	nC3
000A24F0 E6F1                       	smpsAlterVol        $F1
000A24F2 08                         	dc.b	$08
000A24F3 E60F                       	smpsAlterVol        $0F
000A24F5 18                         	dc.b	$18
000A24F6 E6F1                       	smpsAlterVol        $F1
000A24F8                            
000A24F8                            GentleBreeze_Loop0A:
000A24F8 10                         	dc.b	$10
000A24F9 E607                       	smpsAlterVol        $07
000A24FB A5                         	dc.b	nC3
000A24FC E6F9                       	smpsAlterVol        $F9
000A24FE 08                         	dc.b	$08
000A24FF E607                       	smpsAlterVol        $07
000A2501 A5                         	dc.b	nC3
000A2502 E608                       	smpsAlterVol        $08
000A2504 A5                         	dc.b	nC3
000A2505 E6F1                       	smpsAlterVol        $F1
000A2507 18                         	dc.b	$18
000A2508 E607                       	smpsAlterVol        $07
000A250A 10                         	dc.b	$10
000A250B E608                       	smpsAlterVol        $08
000A250D A5                         	dc.b	nC3
000A250E E6F1                       	smpsAlterVol        $F1
000A2510 A5                         	dc.b	nC3
000A2511 F700 03FF E3               	smpsLoop            $00, $03, GentleBreeze_Loop0A
000A2516 A5                         	dc.b	nC3
000A2517                            
000A2517                            GentleBreeze_Loop0B:
000A2517 E607                       	smpsAlterVol        $07
000A2519 A5                         	dc.b	nC3
000A251A E6F9                       	smpsAlterVol        $F9
000A251C 08                         	dc.b	$08
000A251D E607                       	smpsAlterVol        $07
000A251F A5                         	dc.b	nC3
000A2520 E608                       	smpsAlterVol        $08
000A2522 A5                         	dc.b	nC3
000A2523 E6F1                       	smpsAlterVol        $F1
000A2525 10                         	dc.b	$10
000A2526 F700 02FF ED               	smpsLoop            $00, $02, GentleBreeze_Loop0B
000A252B                            
000A252B                            GentleBreeze_Loop0C:
000A252B A5                         	dc.b	nC3
000A252C E607                       	smpsAlterVol        $07
000A252E A5                         	dc.b	nC3
000A252F E6F9                       	smpsAlterVol        $F9
000A2531 08                         	dc.b	$08
000A2532 E607                       	smpsAlterVol        $07
000A2534 A5                         	dc.b	nC3
000A2535 E608                       	smpsAlterVol        $08
000A2537 A5                         	dc.b	nC3
000A2538 E6F1                       	smpsAlterVol        $F1
000A253A 18                         	dc.b	$18
000A253B E607                       	smpsAlterVol        $07
000A253D 10                         	dc.b	$10
000A253E E608                       	smpsAlterVol        $08
000A2540 A5                         	dc.b	nC3
000A2541 E6F1                       	smpsAlterVol        $F1
000A2543 A5                         	dc.b	nC3
000A2544 F700 03FF E3               	smpsLoop            $00, $03, GentleBreeze_Loop0C
000A2549 A5                         	dc.b	nC3
000A254A E607                       	smpsAlterVol        $07
000A254C A5                         	dc.b	nC3
000A254D E6F9                       	smpsAlterVol        $F9
000A254F 08                         	dc.b	$08
000A2550 E607                       	smpsAlterVol        $07
000A2552 A5                         	dc.b	nC3
000A2553 E608                       	smpsAlterVol        $08
000A2555 A5                         	dc.b	nC3
000A2556 E6F1                       	smpsAlterVol        $F1
000A2558 10                         	dc.b	$10
000A2559 E607                       	smpsAlterVol        $07
000A255B A5                         	dc.b	nC3
000A255C E6F9                       	smpsAlterVol        $F9
000A255E 08                         	dc.b	$08
000A255F E607                       	smpsAlterVol        $07
000A2561 A5                         	dc.b	nC3
000A2562 E608                       	smpsAlterVol        $08
000A2564 A5                         	dc.b	nC3
000A2565 E6F1                       	smpsAlterVol        $F1
000A2567 01                         	dc.b	$01
000A2568 E0C0                       	smpsPan             panCenter, $00
000A256A F6FF 6A                    	smpsJump            GentleBreeze_Jump01
000A256D                            
000A256D                            ; DAC Data
000A256D                            GentleBreeze_DAC:
000A256D 81                         	dc.b	dKick
000A256E                            
000A256E                            GentleBreeze_Loop00:
000A256E 2018 2810 0881             	dc.b	$20, $18, $28, $10, $08, dKick
000A2574 F700 02FF F6               	smpsLoop            $00, $02, GentleBreeze_Loop00
000A2579 2018 7F80 2988 0889 8A8B+  	dc.b	$20, $18, $7F, nRst, $29, dHiTimpani, $08, dMidTimpani, dLowTimpani, dVLowTimpani, dKick
000A2584                            
000A2584                            GentleBreeze_Loop01:
000A2584 2018 2810 0881             	dc.b	$20, $18, $28, $10, $08, dKick
000A258A F700 02FF F6               	smpsLoop            $00, $02, GentleBreeze_Loop01
000A258F 2018 7F80 2988 0889 8A01   	dc.b	$20, $18, $7F, nRst, $29, dHiTimpani, $08, dMidTimpani, dLowTimpani, $01
000A2599                            
000A2599                            GentleBreeze_Jump00:
000A2599 8007 8B08                  	dc.b	nRst, $07, dVLowTimpani, $08
000A259D                            
000A259D                            GentleBreeze_Loop02:
000A259D 81                         	dc.b	dKick
000A259E                            
000A259E                            GentleBreeze_Loop03:
000A259E 1008 8182 2081 1008 8182+  	dc.b	$10, $08, dKick, dSnare, $20, dKick, $10, $08, dKick, dSnare, $10, dMidTimpani
000A25AA 088A                       	dc.b	$08, dLowTimpani
000A25AC F700 03FF ED               	smpsLoop            $00, $03, GentleBreeze_Loop02
000A25B1 8110 0881 8210 8808 8982+  	dc.b	dKick, $10, $08, dKick, dSnare, $10, dHiTimpani, $08, dMidTimpani, dSnare, dLowTimpani, dVLowTimpani
000A25BD 1082 0881 18               	dc.b	$10, dSnare, $08, dKick, $18
000A25C2 F701 02FF D8               	smpsLoop            $01, $02, GentleBreeze_Loop03
000A25C7                            
000A25C7                            GentleBreeze_Loop04:
000A25C7 2018 2810 0881             	dc.b	$20, $18, $28, $10, $08, dKick
000A25CD F700 02FF F6               	smpsLoop            $00, $02, GentleBreeze_Loop04
000A25D2 2018 7F80 2988 0889 8A8B+  	dc.b	$20, $18, $7F, nRst, $29, dHiTimpani, $08, dMidTimpani, dLowTimpani, dVLowTimpani, dKick
000A25DD                            
000A25DD                            GentleBreeze_Loop05:
000A25DD 2018 2810 0881             	dc.b	$20, $18, $28, $10, $08, dKick
000A25E3 F700 02FF F6               	smpsLoop            $00, $02, GentleBreeze_Loop05
000A25E8 2018 7F80 2988 0889 8A01   	dc.b	$20, $18, $7F, nRst, $29, dHiTimpani, $08, dMidTimpani, dLowTimpani, $01
000A25F2 F6FF A5                    	smpsJump            GentleBreeze_Jump00
000A25F5                            
000A25F5                            ; PSG 1 Data
000A25F5                            GentleBreeze_PSG1:
000A25F5 80                         	dc.b	nRst
000A25F6                            
000A25F6                            GentleBreeze_LoopPSG02:
000A25F6 7F                         	dc.b	$7F
000A25F7 F700 08FF FB               	smpsLoop            $00, $08, GentleBreeze_LoopPSG02
000A25FC 08                         	dc.b	$08
000A25FD EC04                       	smpsPSGAlterVol     $04
000A25FF                            
000A25FF                            GentleBreeze_JumpPSG01:
000A25FF A37F A07F 019E 7F7F 02A3+  	dc.b	nBb2, $7F, nG2, $7F, $01, nF2, $7F, $7F, $02, nBb2, $7F, $01
000A260B A07F 019E 7F7F 0280        	dc.b	nG2, $7F, $01, nF2, $7F, $7F, $02, nRst
000A2613                            
000A2613                            GentleBreeze_LoopPSG03:
000A2613 7F                         	dc.b	$7F
000A2614 F700 08FF FB               	smpsLoop            $00, $08, GentleBreeze_LoopPSG03
000A2619 08A3 01                    	dc.b	$08, nBb2, $01
000A261C F6FF E1                    	smpsJump            GentleBreeze_JumpPSG01
000A261F                            
000A261F                            ; PSG2 Data
000A261F                            GentleBreeze_PSG2:
000A261F 80                         	dc.b	nRst
000A2620                            
000A2620                            GentleBreeze_LoopPSG00:
000A2620 7F                         	dc.b	$7F
000A2621 F700 08FF FB               	smpsLoop            $00, $08, GentleBreeze_LoopPSG00
000A2626 08                         	dc.b	$08
000A2627 EC04                       	smpsPSGAlterVol     $04
000A2629                            
000A2629                            GentleBreeze_JumpPSG00:
000A2629 A87F A77F 01A5 7F7F 02A8+  	dc.b	nEb3, $7F, nD3, $7F, $01, nC3, $7F, $7F, $02, nEb3, $7F, $01
000A2635 A77F 01A5 7F7F 0280        	dc.b	nD3, $7F, $01, nC3, $7F, $7F, $02, nRst
000A263D                            
000A263D                            GentleBreeze_LoopPSG01:
000A263D 7F                         	dc.b	$7F
000A263E F700 08FF FB               	smpsLoop            $00, $08, GentleBreeze_LoopPSG01
000A2643 08A8 01                    	dc.b	$08, nEb3, $01
000A2646 F6FF E1                    	smpsJump            GentleBreeze_JumpPSG00
000A2649                            
000A2649                            GentleBreeze_Voices:
000A2649                            ;	Voice $00
000A2649                            ;	$0C
000A2649                            ;	$2A, $70, $2A, $71, 	$1F, $1F, $1F, $1F, 	$0D, $04, $11, $0C
000A2649                            ;	$00, $00, $00, $01, 	$F3, $F4, $F1, $89, 	$7F, $7F, $18, $00
000A2649                            	smpsVcAlgorithm     $04
000A2649                            	smpsVcFeedback      $01
000A2649                            	smpsVcUnusedBits    $00
000A2649                            	smpsVcDetune        $07, $02, $07, $02
000A2649                            	smpsVcCoarseFreq    $01, $0A, $00, $0A
000A2649                            	smpsVcRateScale     $00, $00, $00, $00
000A2649                            	smpsVcAttackRate    $1F, $1F, $1F, $1F
000A2649                            	smpsVcAmpMod        $00, $00, $00, $00
000A2649                            	smpsVcDecayRate1    $0C, $11, $04, $0D
000A2649                            	smpsVcDecayRate2    $01, $00, $00, $00
000A2649                            	smpsVcDecayLevel    $08, $0F, $0F, $0F
000A2649                            	smpsVcReleaseRate   $09, $01, $04, $03
000A2649 0C2A 702A 711F 1F1F 1F0D+  	smpsVcTotalLevel    $00, $18, $7F, $7F
000A2662                            
000A2662                            ;	Voice $01
000A2662                            ;	$38
000A2662                            ;	$54, $17, $70, $30, 	$9F, $1F, $9F, $1F, 	$12, $02, $0A, $0A
000A2662                            ;	$00, $10, $00, $00, 	$05, $05, $05, $08, 	$21, $35, $10, $00
000A2662                            	smpsVcAlgorithm     $00
000A2662                            	smpsVcFeedback      $07
000A2662                            	smpsVcUnusedBits    $00
000A2662                            	smpsVcDetune        $03, $07, $01, $05
000A2662                            	smpsVcCoarseFreq    $00, $00, $07, $04
000A2662                            	smpsVcRateScale     $00, $02, $00, $02
000A2662                            	smpsVcAttackRate    $1F, $1F, $1F, $1F
000A2662                            	smpsVcAmpMod        $00, $00, $00, $00
000A2662                            	smpsVcDecayRate1    $0A, $0A, $02, $12
000A2662                            	smpsVcDecayRate2    $00, $00, $10, $00
000A2662                            	smpsVcDecayLevel    $00, $00, $00, $00
000A2662                            	smpsVcReleaseRate   $08, $05, $05, $05
000A2662 3854 1770 309F 1F9F 1F12+  	smpsVcTotalLevel    $00, $10, $35, $21
000A267B                            
000A267B                            ;	Voice $02
000A267B                            ;	$00
000A267B                            ;	$00, $00, $00, $00, 	$00, $00, $00, $00, 	$00, $00, $00, $00
000A267B                            ;	$00, $00, $00, $00, 	$FF, $FF, $FF, $FF, 	$00, $00, $00, $00
000A267B                            	smpsVcAlgorithm     $00
000A267B                            	smpsVcFeedback      $00
000A267B                            	smpsVcUnusedBits    $00
000A267B                            	smpsVcDetune        $00, $00, $00, $00
000A267B                            	smpsVcCoarseFreq    $00, $00, $00, $00
000A267B                            	smpsVcRateScale     $00, $00, $00, $00
000A267B                            	smpsVcAttackRate    $00, $00, $00, $00
000A267B                            	smpsVcAmpMod        $00, $00, $00, $00
000A267B                            	smpsVcDecayRate1    $00, $00, $00, $00
000A267B                            	smpsVcDecayRate2    $00, $00, $00, $00
000A267B                            	smpsVcDecayLevel    $0F, $0F, $0F, $0F
000A267B                            	smpsVcReleaseRate   $0F, $0F, $0F, $0F
000A267B 0000 0000 0000 0000 0000+  	smpsVcTotalLevel    $00, $00, $00, $00
000A2694                            
000A2694                            ;	Voice $03
000A2694                            ;	$36
000A2694                            ;	$0F, $0F, $08, $09, 	$16, $18, $00, $1F, 	$0F, $16, $0C, $0B
000A2694                            ;	$00, $12, $00, $00, 	$06, $2F, $4F, $4F, 	$00, $00, $65, $53
000A2694                            	smpsVcAlgorithm     $06
000A2694                            	smpsVcFeedback      $06
000A2694                            	smpsVcUnusedBits    $00
000A2694                            	smpsVcDetune        $00, $00, $00, $00
000A2694                            	smpsVcCoarseFreq    $09, $08, $0F, $0F
000A2694                            	smpsVcRateScale     $00, $00, $00, $00
000A2694                            	smpsVcAttackRate    $1F, $00, $18, $16
000A2694                            	smpsVcAmpMod        $00, $00, $00, $00
000A2694                            	smpsVcDecayRate1    $0B, $0C, $16, $0F
000A2694                            	smpsVcDecayRate2    $00, $00, $12, $00
000A2694                            	smpsVcDecayLevel    $04, $04, $02, $00
000A2694                            	smpsVcReleaseRate   $0F, $0F, $0F, $06
000A2694 360F 0F08 0916 1800 1F0F+  	smpsVcTotalLevel    $53, $65, $00, $00
000A26AD                            
000A26AD                            ;	Voice $04
000A26AD                            ;	$07
000A26AD                            ;	$05, $53, $64, $75, 	$5C, $5C, $5C, $1C, 	$17, $17, $17, $17
000A26AD                            ;	$00, $00, $00, $00, 	$26, $26, $26, $26, 	$00, $00, $00, $00
000A26AD                            	smpsVcAlgorithm     $07
000A26AD                            	smpsVcFeedback      $00
000A26AD                            	smpsVcUnusedBits    $00
000A26AD                            	smpsVcDetune        $07, $06, $05, $00
000A26AD                            	smpsVcCoarseFreq    $05, $04, $03, $05
000A26AD                            	smpsVcRateScale     $00, $01, $01, $01
000A26AD                            	smpsVcAttackRate    $1C, $1C, $1C, $1C
000A26AD                            	smpsVcAmpMod        $00, $00, $00, $00
000A26AD                            	smpsVcDecayRate1    $17, $17, $17, $17
000A26AD                            	smpsVcDecayRate2    $00, $00, $00, $00
000A26AD                            	smpsVcDecayLevel    $02, $02, $02, $02
000A26AD                            	smpsVcReleaseRate   $06, $06, $06, $06
000A26AD 0705 5364 755C 5C5C 1C17+  	smpsVcTotalLevel    $00, $00, $00, $00
000A26C6                            
000A26C6                            ;	Voice $05
000A26C6                            ;	$3C
000A26C6                            ;	$21, $21, $63, $61, 	$13, $10, $14, $0E, 	$09, $0B, $0B, $10
000A26C6                            ;	$04, $04, $04, $04, 	$17, $17, $17, $27, 	$1C, $02, $1B, $00
000A26C6                            	smpsVcAlgorithm     $04
000A26C6                            	smpsVcFeedback      $07
000A26C6                            	smpsVcUnusedBits    $00
000A26C6                            	smpsVcDetune        $06, $06, $02, $02
000A26C6                            	smpsVcCoarseFreq    $01, $03, $01, $01
000A26C6                            	smpsVcRateScale     $00, $00, $00, $00
000A26C6                            	smpsVcAttackRate    $0E, $14, $10, $13
000A26C6                            	smpsVcAmpMod        $00, $00, $00, $00
000A26C6                            	smpsVcDecayRate1    $10, $0B, $0B, $09
000A26C6                            	smpsVcDecayRate2    $04, $04, $04, $04
000A26C6                            	smpsVcDecayLevel    $02, $01, $01, $01
000A26C6                            	smpsVcReleaseRate   $07, $07, $07, $07
000A26C6 3C21 2163 6113 1014 0E09+  	smpsVcTotalLevel    $00, $1B, $02, $1C
000A26DF                            
000A26DF                            
000A26E0 00                         		even
000A26E0                            ; ---------------------------------------------------------------------------
000A26E0                            ; Sound	effect pointers
000A26E0                            ; ---------------------------------------------------------------------------
000A26E0 0000 0000 0000 0000 0000+  SoundIndex:	dc.l SoundA0, SoundA1, SoundA2
000A26EC 0000 0000 0000 0000 0000+  		dc.l SoundA3, SoundA4, SoundA5
000A26F8 0000 0000 0000 0000 0000+  		dc.l SoundA6, SoundA7, SoundA8
000A2704 0000 0000 0000 0000 0000+  		dc.l SoundA9, SoundAA, SoundAB
000A2710 0000 0000 0000 0000 0000+  		dc.l SoundAC, SoundAD, SoundAE
000A271C 0000 0000 0000 0000 0000+  		dc.l SoundAF, SoundB0, SoundB1
000A2728 0000 0000 0000 0000 0000+  		dc.l SoundB2, SoundB3, SoundB4
000A2734 0000 0000 0000 0000 0000+  		dc.l SoundB5, SoundB6, SoundB7
000A2740 0000 0000 0000 0000 0000+  		dc.l SoundB8, SoundB9, SoundBA
000A274C 0000 0000 0000 0000 0000+  		dc.l SoundBB, SoundBC, SoundBD
000A2758 0000 0000 0000 0000 0000+  		dc.l SoundBE, SoundBF, SoundC0
000A2764 0000 0000 0000 0000 0000+  		dc.l SoundC1, SoundC2, SoundC3
000A2770 0000 0000 0000 0000 0000+  		dc.l SoundC4, SoundC5, SoundC6
000A277C 0000 0000 0000 0000 0000+  		dc.l SoundC7, SoundC8, SoundC9
000A2788 0000 0000 0000 0000 0000+  		dc.l SoundCA, SoundCB, SoundCC
000A2794 0000 0000 0000 0000 0000+  		dc.l SoundCD, SoundCE, SoundCF
000A27A0 0000 0000                  SoundD0Index:	dc.l SoundD0
000A27A4                            SoundA0:	include	sound\jump.asm
000A27A4                            jump_Header:
000A27A4 =00000001                  smpsHeaderStartSong = 1
000A27A4 0000                       	smpsHeaderVoice     jump_Voices
000A27A6 01                         	smpsHeaderTempoSFX  $01
000A27A7 01                         	smpsHeaderChanSFX   $01
000A27A8                            
000A27B4                            
000A27B4                            ; FM4 Data
000A27B4                            jump_FM4:
000A27B6 E000                       	smpsPan             panNone, $00
000A27B8 E607                       	smpsAlterVol        $07
000A27BA E0C0                       	smpsPan             panCenter, $00
000A27BC 9903 B1                    	dc.b	nC2, $03, nC4
000A27BF E607                       	smpsAlterVol        $07
000A27C1 E040                       	smpsPan             panRight, $00
000A27C3 99B1                       	dc.b	nC2, nC4
000A27C5 E60A                       	smpsAlterVol        $0A
000A27C7 E080                       	smpsPan             panLeft, $00
000A27C9 99B1                       	dc.b	nC2, nC4
000A27CB E603                       	smpsAlterVol        $03
000A27CD E0C0                       	smpsPan             panCenter, $00
000A27CF 99B1                       	dc.b	nC2, nC4
000A27D1 E000                       	smpsPan             panNone, $00
000A27D3 803D                       	dc.b	nRst, $3D
000A27D5 F2                         	smpsStop
000A27D6                            
000A27D6                            ; PSG3 Data
000A27D6                            jump_PSG3:
000A27D6 F3E7                       	smpsPSGform         $E7
000A27D8 8056                       	dc.b	nRst, $56
000A27DA F2                         	smpsStop
000A27DB                            
000A27DB                            jump_Voices:
000A27DB                            ;	Voice $00
000A27DB                            ;	$3C
000A27DB                            ;	$00, $0F, $01, $00, 	$1F, $1F, $1F, $1F, 	$00, $12, $14, $0E
000A27DB                            ;	$00, $11, $00, $11, 	$0F, $EF, $FF, $0F, 	$00, $00, $00, $00
000A27DB                            	smpsVcAlgorithm     $04
000A27DB                            	smpsVcFeedback      $07
000A27DB                            	smpsVcUnusedBits    $00
000A27DB                            	smpsVcDetune        $00, $00, $00, $00
000A27DB                            	smpsVcCoarseFreq    $00, $01, $0F, $00
000A27DB                            	smpsVcRateScale     $00, $00, $00, $00
000A27DB                            	smpsVcAttackRate    $1F, $1F, $1F, $1F
000A27DB                            	smpsVcAmpMod        $00, $00, $00, $00
000A27DB                            	smpsVcDecayRate1    $0E, $14, $12, $00
000A27DB                            	smpsVcDecayRate2    $11, $00, $11, $00
000A27DB                            	smpsVcDecayLevel    $00, $0F, $0E, $00
000A27DB                            	smpsVcReleaseRate   $0F, $0F, $0F, $0F
000A27DB 3C00 0F01 001F 1F1F 1F00+  	smpsVcTotalLevel    $00, $00, $00, $00
000A27F4                            
000A27F4                            
000A27F4                            		even
000A27F4                            SoundA1:	incbin	sound\soundA1.bin
000A281E                            		even
000A281E                            SoundA2:	incbin	sound\soundA2.bin
000A283E                            		even
000A283E                            SoundA3:	incbin	sound\soundA3.bin
000A2870                            		even
000A2870                            SoundA4:	incbin	sound\soundA4.bin
000A28A6                            		even
000A28A6                            SoundA5:	include	sound\fart.asm
000A28A6                            Fart_Header:
000A28A6 =00000001                  smpsHeaderStartSong = 1
000A28A6 0000                       	smpsHeaderVoice     Fart_Voices
000A28A8 01                         	smpsHeaderTempoSFX  $01
000A28A9 04                         	smpsHeaderChanSFX   $04
000A28AA                            
000A28C2                            
000A28C2                            Fart_FM3:
000A28C4 E607                       	smpsAlterVol        $07
000A28C6 E0C0                       	smpsPan             panCenter, $00
000A28C8 F000 0210 03               	smpsModSet          $00, $02, $10, $03
000A28CD A003 E7                    	dc.b	nG2, $03, smpsNoAttack
000A28D0 E1FE                       	smpsAlterNote       $FE
000A28D2 A201 E7                    	dc.b	nA2, $01, smpsNoAttack
000A28D5 E100                       	smpsAlterNote       $00
000A28D7 A211 807F 2C               	dc.b	nA2, $11, nRst, $7F, $2C
000A28DC F2                         	smpsStop
000A28DD                            
000A28DD                            ; FM4 Data
000A28DD                            Fart_FM4:
000A28DF E0C0                       	smpsPan             panCenter, $00
000A28E1 8006                       	dc.b	nRst, $06
000A28E5 E616                       	smpsAlterVol        $16
000A28E7 E080                       	smpsPan             panLeft, $00
000A28E9 F000 0210 03               	smpsModSet          $00, $02, $10, $03
000A28EE A212                       	dc.b	nA2, $12
000A28F0 E60A                       	smpsAlterVol        $0A
000A28F2 E7A2 0C                    	dc.b	smpsNoAttack, nA2, $0C
000A28F5 E603                       	smpsAlterVol        $03
000A28F7 E7A2                       	dc.b	smpsNoAttack, nA2
000A28F9 E603                       	smpsAlterVol        $03
000A28FB E7A2                       	dc.b	smpsNoAttack, nA2
000A28FD E604                       	smpsAlterVol        $04
000A28FF E7A2                       	dc.b	smpsNoAttack, nA2
000A2901 E606                       	smpsAlterVol        $06
000A2903 E7A2 18                    	dc.b	smpsNoAttack, nA2, $18
000A2906 E610                       	smpsAlterVol        $10
000A2908 E7A2 0C                    	dc.b	smpsNoAttack, nA2, $0C
000A290B E610                       	smpsAlterVol        $10
000A290D E7A2 1280 42               	dc.b	smpsNoAttack, nA2, $12, nRst, $42
000A2912 F2                         	smpsStop
000A2913                            
000A2913                            ; FM5 Data
000A2913                            Fart_FM5:
000A2915 E0C0                       	smpsPan             panCenter, $00
000A2917 8009                       	dc.b	nRst, $09
000A291B E616                       	smpsAlterVol        $16
000A291D E040                       	smpsPan             panRight, $00
000A291F F000 0210 03               	smpsModSet          $00, $02, $10, $03
000A2924 A215                       	dc.b	nA2, $15
000A2926 E60A                       	smpsAlterVol        $0A
000A2928 E7A2 0C                    	dc.b	smpsNoAttack, nA2, $0C
000A292B E603                       	smpsAlterVol        $03
000A292D E7A2                       	dc.b	smpsNoAttack, nA2
000A292F E603                       	smpsAlterVol        $03
000A2931 E7A2                       	dc.b	smpsNoAttack, nA2
000A2933 E604                       	smpsAlterVol        $04
000A2935 E7A2                       	dc.b	smpsNoAttack, nA2
000A2937 E606                       	smpsAlterVol        $06
000A2939 E7A2 15                    	dc.b	smpsNoAttack, nA2, $15
000A293C E610                       	smpsAlterVol        $10
000A293E E7A2 0C                    	dc.b	smpsNoAttack, nA2, $0C
000A2941 E610                       	smpsAlterVol        $10
000A2943 E7A2 1280 3F               	dc.b	smpsNoAttack, nA2, $12, nRst, $3F
000A2948 F2                         	smpsStop
000A2949                            
000A2949                            ; PSG3 Data
000A2949                            Fart_PSG3:
000A2949 F2                         	smpsStop
000A294A                            
000A294A                            ; FM Voices
000A294A                            Fart_Voices:
000A294A                            ;	Voice $00
000A294A                            ;	$39
000A294A                            ;	$70, $32, $71, $01, 	$DF, $DF, $DF, $1F, 	$04, $00, $00, $00
000A294A                            ;	$1F, $16, $00, $00, 	$E0, $00, $09, $FA, 	$12, $00, $00, $00
000A294A                            	smpsVcAlgorithm     $01
000A294A                            	smpsVcFeedback      $07
000A294A                            	smpsVcUnusedBits    $00
000A294A                            	smpsVcDetune        $00, $07, $03, $07
000A294A                            	smpsVcCoarseFreq    $01, $01, $02, $00
000A294A                            	smpsVcRateScale     $00, $03, $03, $03
000A294A                            	smpsVcAttackRate    $1F, $1F, $1F, $1F
000A294A                            	smpsVcAmpMod        $00, $00, $00, $00
000A294A                            	smpsVcDecayRate1    $00, $00, $00, $04
000A294A                            	smpsVcDecayRate2    $00, $00, $16, $1F
000A294A                            	smpsVcDecayLevel    $0F, $00, $00, $0E
000A294A                            	smpsVcReleaseRate   $0A, $09, $00, $00
000A294A 3970 3271 01DF DFDF 1F04+  	smpsVcTotalLevel    $00, $00, $00, $12
000A2963                            
000A2963                            ;	Voice $01
000A2963                            ;	$00
000A2963                            ;	$00, $00, $00, $00, 	$00, $00, $00, $00, 	$00, $00, $00, $00
000A2963                            ;	$00, $00, $00, $00, 	$FF, $FF, $FF, $FF, 	$00, $00, $00, $00
000A2963                            	smpsVcAlgorithm     $00
000A2963                            	smpsVcFeedback      $00
000A2963                            	smpsVcUnusedBits    $00
000A2963                            	smpsVcDetune        $00, $00, $00, $00
000A2963                            	smpsVcCoarseFreq    $00, $00, $00, $00
000A2963                            	smpsVcRateScale     $00, $00, $00, $00
000A2963                            	smpsVcAttackRate    $00, $00, $00, $00
000A2963                            	smpsVcAmpMod        $00, $00, $00, $00
000A2963                            	smpsVcDecayRate1    $00, $00, $00, $00
000A2963                            	smpsVcDecayRate2    $00, $00, $00, $00
000A2963                            	smpsVcDecayLevel    $0F, $0F, $0F, $0F
000A2963                            	smpsVcReleaseRate   $0F, $0F, $0F, $0F
000A2963 0000 0000 0000 0000 0000+  	smpsVcTotalLevel    $00, $00, $00, $00
000A2963 0000 0000 0000 0000 0000+  	smpsVcTotalLevel    $00, $00, $00, $00
000A297C                            		even
000A297C                            SoundA6:	incbin	sound\soundA6.bin
000A29AC                            		even
000A29AC                            SoundA7:	incbin	sound\soundA7.bin
000A29DC                            		even
000A29DC                            SoundA8:	incbin	sound\soundA8.bin
000A2A10                            		even
000A2A10                            SoundA9:	incbin	sound\soundA9.bin
000A2A22                            		even
000A2A22                            SoundAA:	incbin	sound\soundAA.bin
000A2A64                            		even
000A2A64                            SoundAB:	incbin	sound\soundAB.bin
000A2A84                            		even
000A2A84                            SoundAC:	incbin	sound\soundAC.bin
000A2AB8                            		even
000A2AB8                            SoundAD:	incbin	sound\soundAD.bin
000A2AEE                            		even
000A2AEE                            SoundAE:	incbin	sound\soundAE.bin
000A2B38                            		even
000A2B38                            SoundAF:	incbin	sound\soundAF.bin
000A2B66                            		even
000A2B66                            SoundB0:	incbin	sound\soundB0.bin
000A2B98                            		even
000A2B98                            SoundB1:	incbin	sound\soundB1.bin
000A2BC4                            		even
000A2BC4                            SoundB2:	incbin	sound\soundB2.bin
000A2C14                            		even
000A2C14                            SoundB3:	incbin	sound\soundB3.bin
000A2C5E                            		even
000A2C5E                            SoundB4:	include	sound\soundB4.asm
000A2C5E                            SndB4_Bumper_Header:
000A2C5E =00000001                  smpsHeaderStartSong = 1
000A2C5E 0000                       	smpsHeaderVoice     SndB4_Bumper_Voices
000A2C60 01                         	smpsHeaderTempoSFX  $01
000A2C61 03                         	smpsHeaderChanSFX   $03
000A2C62                            
000A2C74                            
000A2C74                            ; FM5 Data
000A2C74                            SndB4_Bumper_FM5:
000A2C76 F600 00                    	smpsJump            SndB4_Bumper_Jump00
000A2C79                            
000A2C79                            ; FM4 Data
000A2C79                            SndB4_Bumper_FM4:
000A2C79 F2                         	smpsStop
000A2C7A                            
000A2C7A                            SndB4_Bumper_Jump00:
000A2C7A A020                       	dc.b	nG2, $20
000A2C7C F2                         	smpsStop
000A2C7D                            
000A2C7D                            ; FM3 Data
000A2C7D                            SndB4_Bumper_FM3:
000A2C7D F2                         	smpsStop
000A2C7E                            
000A2C7E                            SndB4_Bumper_Voices:
000A2C7E                            ;	Voice $00
000A2C7E                            ;	$32
000A2C7E                            ;	$04, $20, $70, $70, 	$1F, $1F, $1F, $1F, 	$09, $00, $00, $08
000A2C7E                            ;	$09, $00, $00, $0B, 	$00, $00, $00, $0F, 	$0C, $00, $30, $00
000A2C7E                            	smpsVcAlgorithm     $02
000A2C7E                            	smpsVcFeedback      $06
000A2C7E                            	smpsVcUnusedBits    $00
000A2C7E                            	smpsVcDetune        $07, $07, $02, $00
000A2C7E                            	smpsVcCoarseFreq    $00, $00, $00, $04
000A2C7E                            	smpsVcRateScale     $00, $00, $00, $00
000A2C7E                            	smpsVcAttackRate    $1F, $1F, $1F, $1F
000A2C7E                            	smpsVcAmpMod        $00, $00, $00, $00
000A2C7E                            	smpsVcDecayRate1    $08, $00, $00, $09
000A2C7E                            	smpsVcDecayRate2    $0B, $00, $00, $09
000A2C7E                            	smpsVcDecayLevel    $00, $00, $00, $00
000A2C7E                            	smpsVcReleaseRate   $0F, $00, $00, $00
000A2C7E 3204 2070 701F 1F1F 1F09+  	smpsVcTotalLevel    $00, $30, $00, $0C
000A2C7E 3204 2070 701F 1F1F 1F09+  	smpsVcTotalLevel    $00, $30, $00, $0C
000A2C98 00                         		even
000A2C98                            SoundB5:	incbin	sound\soundB5.bin
000A2CB6 00                         		even
000A2CB6                            SoundB6:	incbin	sound\soundB6.bin
000A2CD4                            		even
000A2CD4                            SoundB7:	incbin	sound\soundB7.bin
000A2D10                            		even
000A2D10                            SoundB8:	incbin	sound\soundB8.bin
000A2D2E                            		even
000A2D2E                            SoundB9:	incbin	sound\soundB9.bin
000A2D92                            		even
000A2D92                            SoundBA:	incbin	sound\soundBA.bin
000A2DBA                            		even
000A2DBA                            SoundBB:	incbin	sound\soundBB.bin
000A2DE6                            		even
000A2DE6                            SoundBC:	incbin	sound\soundBC.bin
000A2E28                            		even
000A2E28                            SoundBD:	incbin	sound\soundBD.bin
000A2E7C                            		even
000A2E7C                            SoundBE:	incbin	sound\soundBE.bin
000A2EB6                            		even
000A2EB6                            SoundBF:	incbin	sound\soundBF.bin
000A2F28                            		even
000A2F28                            SoundC0:	incbin	sound\soundC0.bin
000A2F56                            		even
000A2F56                            SoundC1:	incbin	sound\soundC1.bin
000A2FB0                            		even
000A2FB0                            SoundC2:	incbin	sound\soundC2.bin
000A2FDA                            		even
000A2FDA                            SoundC3:	incbin	sound\soundC3.bin
000A3054                            		even
000A3054                            SoundC4:	incbin	sound\soundC4.bin
000A3152                            		even
000A3152                            SoundC5:	incbin	sound\soundC5.bin
000A31BA                            		even
000A31BA                            SoundC6:	incbin	sound\soundC6.bin
000A31FC                            		even
000A31FC                            SoundC7:	incbin	sound\soundC7.bin
000A322A                            		even
000A322A                            SoundC8:	incbin	sound\soundC8.bin
000A323C                            		even
000A323C                            SoundC9:	incbin	sound\soundC9.bin
000A326A                            		even
000A326A                            SoundCA:	incbin	sound\soundCA.bin
000A3298                            		even
000A3298                            SoundCB:	incbin	sound\soundCB.bin
000A32E4                            		even
000A32E4                            SoundCC:	incbin	sound\C9.ssf
000A3312                            		even
000A3312                            SoundCD:	incbin	sound\soundCD.bin
000A333E                            		even
000A333E                            SoundCE:	incbin	sound\soundCE.bin
000A335C 00                         		even
000A335C                            SoundCF:	incbin	sound\soundCF.bin
000A3394                            		even
000A3394                            SoundD0:	incbin	sound\soundD0.bin
000A33CE                            		even
000A33CE                            SegaPCM:	incbin	sound\segapcm.bin
000BD524                            SegaPCM_end:	even
000BD524                            
000BD524                            IdiotPCM:	incbin	sound\youare.bin
000C75F6 00                         IdiotPCM_end:	even
000C75F6                            
000C75F6                            Minecraft:	include	minecraft\code\main.asm
000C75F6                            ; Minecraft: Very Legacy Console Edition
000C75F6                            ; Main file
000C75F6                            
000C75F6                            	include	minecraft\code\variables.asm
000C75F6                            ; Minecraft: Very Legacy Console Edition
000C75F6                            ; Variable Definitions
000C75F6                            
000C75F6 =00000040                  MAP_HEIGHT	equ	64
000C75F6 =00000100                  MAP_WIDTH	equ	256
000C75F6                            
000C75F6                            		rsset	$FF0000
000C75F6 =00FF0000                  mapWallBlocks	rs.b	MAP_HEIGHT*MAP_WIDTH	; wall layer layout data
000C75F6 =00FF4000                  mapCollBlocks	rs.b	MAP_HEIGHT*MAP_WIDTH	; collision layer layout data
000C75F6                            
000C75F6                            		rsset	$FFFF8000
000C75F6 =FFFF8000                  planeBuffer	rs.w	29*64			; foreground plane buffer
000C75F6                            
000C75F6 =FFFF8E80                  camXPosFG	rs.w	1			; camera foreground layout x position
000C75F6 =FFFF8E82                  camYposFG	rs.w	1			; camera foreground layout y position
000C75F6 =FFFF8E84                  camXPosBG	rs.w	1			; camera background layout x position
000C75F6 =FFFF8E86                  camYposBG	rs.w	1			; camera background layout y position
000C75F6 =FFFF8E86                  camYposBG	rs.w	1			; camera background layout y position
000C75F6                            
000C75F6                            MC_Init:
000C75F6 007C 0700                  		ori	#$700,sr		; disables CPU interrupts
000C75FA 4DF9 00C0 0004             		lea	($C00004).l,a6	;	; load the address of the VDP control port into a6
000C7600                            
000C7600 3CBC 8134                  		move.w	#$8134,(a6)		; disable display
000C7604 6100 0000                  		bsr.w	MC_ClearScreen		; clear VRAM, CRAM, and VSRAM
000C7608 6100 0000                  		bsr.w	MC_LoadPalette		; load in the palette
000C760C 3CBC 8174                  		move.w	#$8174,(a6)		; enable display
000C7610                            
000C7610                            
000C7610                            
000C7610 6000 FFFE                  		bra.w	*			; spin infinitely
000C7614                            
000C7614                            ; ===========================================================================
000C7614                            ; ---------------------------------------------------------------------------
000C7614                            ; Clear The Screen
000C7614                            ; ---------------------------------------------------------------------------
000C7614                            MC_ClearScreen:
000C7614 3CBC 8F01                  		move.w	#$8F01,(a6)		; set auto-incremement size to byte
000C7618                            
000C7618 2CBC 94FF 93FF             		move.l	#$94FF93FF,(a6)		; clear the VRAM
000C761E 3CBC 9780                  		move.w	#$9780,(a6)		; ^
000C7622 2CBC 4000 0080             		move.l	#$40000080,(a6)		; ^
000C7628 3D7C 0000 FFFC             		move.w	#0,-4(a6)		; ^
000C762E                            
000C762E 44D6                       .waitVRAMClr:	move.w	(a6),ccr		; is a DMA in progress?
000C7630 69FC                       		bvs.s	.waitVRAMClr		; if so, loop until DMA is complete
000C7632                            
000C7632 2CBC 9400 937F             		move.l	#$9400937F,(a6)		; clear the CRAM
000C7638 3CBC 9780                  		move.w	#$9780,(a6)		; ^
000C763C 2CBC C000 0080             		move.l	#$C0000080,(a6)		; ^
000C7642 3D7C 0000 FFFC             		move.w	#0,-4(a6)		; ^
000C7648                            
000C7648 44D6                       .waitCRAMClr:	move.w	(a6),ccr		; is a DMA in progress?
000C764A 69FC                       		bvs.s	.waitCRAMClr		; if so, loop until DMA is complete
000C764C                            
000C764C 2CBC 9400 935F             		move.l	#$9400935F,(a6)		; clear the VSRAM
000C7652 3CBC 9780                  		move.w	#$9780,(a6)		; ^
000C7656 2CBC 4000 0090             		move.l	#$40000090,(a6)		; ^
000C765C 3D7C 0000 FFFC             		move.w	#0,-4(a6)		; ^
000C7662                            
000C7662 44D6                       .waitVSRAMClr:	move.w	(a6),ccr		; is a DMA in progress?
000C7664 69FC                       		bvs.s	.waitVSRAMClr		; if so, loop until DMA is complete
000C7666                            
000C7666 3CBC 8F02                  		move.w	#$8F02,(a6)		; set auto-incremement size to word
000C766A 4E75                       		rts				; return
000C766C                            ; ---------------------------------------------------------------------------
000C766C                            
000C766C                            ; ===========================================================================
000C766C                            ; ---------------------------------------------------------------------------
000C766C                            ; Load The Palette
000C766C                            ; ---------------------------------------------------------------------------
000C766C                            MC_LoadPalette:
000C766C 44D6                       		move.w	(a6),ccr		; is v-blank active?
000C766E 6AFC                       		bpl.s	MC_LoadPalette		; if not, wait for it to start
000C7670                            
000C7670                            .updatePalette:
000C7670 2CBC 9400 9340             		move.l	#$94009340,(a6)		; set the DMA transfer size (64 colors)
000C7676                            		
000C7676 4BFA 0000                  		lea	MC_Palette(pc),a5	; load the base address of the palette data (pc relative)
000C767A 200D                       		move.l	a5,d0			; move the address to a data register so we can modify it
000C767C E288                       		lsr.l	#1,d0			; divide by two
000C767E                            
000C767E 323C 9500                  		move.w	#$9500,d1		; set the low byte of the transfer source address
000C7682 1200                       		move.b	d0,d1			; ^
000C7684 3C81                       		move.w	d1,(a6)			; ^
000C7686                            
000C7686 E088                       		lsr.l	#8,d0			; set the middle byte of the transfer source address
000C7688 323C 9600                  		move.w	#$9600,d1		; ^
000C768C 1200                       		move.b	d0,d1			; ^
000C768E 3C81                       		move.w	d1,(a6)			; ^
000C7690                            
000C7690 E088                       		lsr.l	#8,d0			; set the high byte of the transfer source address
000C7692 323C 9700                  		move.w	#$9700,d1		; ^
000C7696 1200                       		move.b	d0,d1			; ^
000C7698 3C81                       		move.w	d1,(a6)			; ^
000C769A                            
000C769A 2CBC C000 0080             		move.l	#$C0000080,(a6)		; set the destination palette index and begin the transfer
000C76A0                            
000C76A0                            .waitForScan:
000C76A0                            	;	move.w	(a6),ccr		; is v-blank still active?
000C76A0                            	;	bmi.s	.waitForScan		; if so, wait for active scan before returning
000C76A0 4E75                       		rts				; return
000C76A2                            ; ---------------------------------------------------------------------------
000C76A2                            
000C76A2                            MC_Palette:
000C76A2 0E86 08AE 068E 046C 0246+  	dc.w	$E86, $8AE, $68E, $46C, $246, $024, $CC0, $AA0, $C46, $824, $EEE, $444, $222, $000, $000, $000
000C76C2 0000 0CCC 0AAA 0888 0666+  	dc.w	$000, $CCC, $AAA, $888, $666, $444, $222, $4EE, $6AE, $48C, $26A, $048, $026, $4E6, $2C4, $080
000C76E2 0EEE 0EEE 0EEE 0EEE 0EEE+  	dc.w	$EEE, $EEE, $EEE, $EEE, $EEE, $EEE, $EEE, $EEE, $EEE, $EEE, $EEE, $EEE, $EEE, $EEE, $EEE, $EEE
000C7702 0EEE 0EEE 0EEE 0EEE 0EEE+  	dc.w	$EEE, $EEE, $EEE, $EEE, $EEE, $EEE, $EEE, $EEE, $EEE, $EEE, $EEE, $EEE, $EEE, $EEE, $EEE, $EEE
000C7702 0EEE 0EEE 0EEE 0EEE 0EEE+  	dc.w	$EEE, $EEE, $EEE, $EEE, $EEE, $EEE, $EEE, $EEE, $EEE, $EEE, $EEE, $EEE, $EEE, $EEE, $EEE, $EEE
000C7722                            ; end of 'ROM'
000C7722                            EndOfRom:
000C7722                            
000C7722                            
